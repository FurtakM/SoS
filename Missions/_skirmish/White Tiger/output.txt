// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 2753 0 0
// Init ;
   8: CALL 67 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 28
// Difficulty := 2 else
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 2
  25: ST_TO_ADDR
  26: GO 41
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// PrepareAlliance ;
  41: CALL 83 0 0
// PrepareRussian ;
  45: CALL 452 0 0
// Action ;
  49: CALL 2372 0 0
// if debug then
  53: LD_EXP 1
  57: IFFALSE 66
// FogOff ( 7 ) ;
  59: LD_INT 7
  61: PPUSH
  62: CALL_OW 344
// end ;
  66: END
// export debug ; export function Init ; begin
  67: LD_INT 0
  69: PPUSH
// debug := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// end ; end_of_file
  78: LD_VAR 0 1
  82: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  83: LD_INT 0
  85: PPUSH
  86: PPUSH
  87: PPUSH
// tmp := [ ] ;
  88: LD_ADDR_VAR 0 3
  92: PUSH
  93: EMPTY
  94: ST_TO_ADDR
// uc_side := 7 ;
  95: LD_ADDR_OWVAR 20
  99: PUSH
 100: LD_INT 7
 102: ST_TO_ADDR
// uc_nation := 1 ;
 103: LD_ADDR_OWVAR 21
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 111: LD_INT 5
 113: PPUSH
 114: LD_INT 3
 116: PPUSH
 117: LD_INT 3
 119: PPUSH
 120: LD_EXP 11
 124: PPUSH
 125: LD_INT 100
 127: PPUSH
 128: CALL 7721 0 5
// allianceHack := CreateVehicle ;
 132: LD_ADDR_EXP 2
 136: PUSH
 137: CALL_OW 45
 141: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 142: LD_EXP 2
 146: PPUSH
 147: LD_INT 7
 149: PPUSH
 150: LD_INT 0
 152: PPUSH
 153: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 157: LD_INT 5
 159: PPUSH
 160: LD_INT 3
 162: PPUSH
 163: LD_INT 3
 165: PPUSH
 166: LD_INT 10
 168: PPUSH
 169: LD_INT 100
 171: PPUSH
 172: CALL 7721 0 5
// for i := 1 to 2 do
 176: LD_ADDR_VAR 0 2
 180: PUSH
 181: DOUBLE
 182: LD_INT 1
 184: DEC
 185: ST_TO_ADDR
 186: LD_INT 2
 188: PUSH
 189: FOR_TO
 190: IFFALSE 209
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 192: CALL_OW 45
 196: PPUSH
 197: LD_INT 7
 199: PPUSH
 200: LD_INT 0
 202: PPUSH
 203: CALL_OW 49
 207: GO 189
 209: POP
 210: POP
// uc_side := 4 ;
 211: LD_ADDR_OWVAR 20
 215: PUSH
 216: LD_INT 4
 218: ST_TO_ADDR
// uc_nation := 1 ;
 219: LD_ADDR_OWVAR 21
 223: PUSH
 224: LD_INT 1
 226: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 227: LD_INT 1
 229: PPUSH
 230: LD_INT 9
 232: PPUSH
 233: CALL_OW 383
// allianceMechanic := CreateHuman ;
 237: LD_ADDR_EXP 3
 241: PUSH
 242: CALL_OW 44
 246: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 247: LD_EXP 3
 251: PPUSH
 252: LD_INT 96
 254: PPUSH
 255: CALL_OW 52
// end ;
 259: LD_VAR 0 1
 263: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 264: LD_INT 0
 266: PPUSH
 267: PPUSH
 268: PPUSH
// uc_side := 7 ;
 269: LD_ADDR_OWVAR 20
 273: PUSH
 274: LD_INT 7
 276: ST_TO_ADDR
// uc_nation := 1 ;
 277: LD_ADDR_OWVAR 21
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 285: LD_ADDR_VAR 0 2
 289: PUSH
 290: DOUBLE
 291: LD_INT 1
 293: DEC
 294: ST_TO_ADDR
 295: LD_INT 3
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_OWVAR 67
 313: ARRAY
 314: PUSH
 315: FOR_TO
 316: IFFALSE 386
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 318: LD_INT 5
 320: PPUSH
 321: LD_INT 3
 323: PPUSH
 324: LD_INT 3
 326: PPUSH
 327: LD_INT 7
 329: PPUSH
 330: LD_INT 100
 332: PPUSH
 333: CALL 7721 0 5
// un := CreateVehicle ;
 337: LD_ADDR_VAR 0 3
 341: PUSH
 342: CALL_OW 45
 346: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 347: LD_VAR 0 3
 351: PPUSH
 352: LD_INT 7
 354: PPUSH
 355: LD_INT 0
 357: PPUSH
 358: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 67
 369: PPUSH
 370: LD_INT 95
 372: PPUSH
 373: CALL_OW 111
// wait ( 0 0$2 ) ;
 377: LD_INT 70
 379: PPUSH
 380: CALL_OW 67
// end ;
 384: GO 315
 386: POP
 387: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 388: LD_INT 5
 390: PPUSH
 391: LD_INT 3
 393: PPUSH
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 11
 399: PPUSH
 400: LD_INT 100
 402: PPUSH
 403: CALL 7721 0 5
// un := CreateVehicle ;
 407: LD_ADDR_VAR 0 3
 411: PUSH
 412: CALL_OW 45
 416: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 417: LD_VAR 0 3
 421: PPUSH
 422: LD_INT 7
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 432: LD_VAR 0 3
 436: PPUSH
 437: LD_INT 67
 439: PPUSH
 440: LD_INT 95
 442: PPUSH
 443: CALL_OW 111
// end ; end_of_file
 447: LD_VAR 0 1
 451: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
// uc_side := 3 ;
 457: LD_ADDR_OWVAR 20
 461: PUSH
 462: LD_INT 3
 464: ST_TO_ADDR
// uc_nation := 3 ;
 465: LD_ADDR_OWVAR 21
 469: PUSH
 470: LD_INT 3
 472: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 473: LD_INT 14
 475: PPUSH
 476: CALL_OW 274
 480: PPUSH
 481: LD_INT 1
 483: PPUSH
 484: LD_INT 50000
 486: PPUSH
 487: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 491: LD_INT 14
 493: PPUSH
 494: CALL_OW 274
 498: PPUSH
 499: LD_INT 3
 501: PPUSH
 502: LD_INT 5000
 504: PPUSH
 505: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 509: LD_INT 45
 511: PPUSH
 512: LD_INT 132
 514: PPUSH
 515: LD_INT 89
 517: PPUSH
 518: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 522: LD_ADDR_VAR 0 2
 526: PUSH
 527: LD_INT 21
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PPUSH
 537: CALL_OW 69
 541: PUSH
 542: FOR_IN
 543: IFFALSE 576
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 545: LD_VAR 0 2
 549: PPUSH
 550: LD_INT 6
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 10
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_OWVAR 67
 568: ARRAY
 569: PPUSH
 570: CALL_OW 241
 574: GO 542
 576: POP
 577: POP
// for i := 1 to 4 do
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_INT 4
 590: PUSH
 591: FOR_TO
 592: IFFALSE 618
// begin PrepareMechanic ( false , 9 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 9
 599: PPUSH
 600: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 604: CALL_OW 44
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: CALL_OW 52
// end ;
 616: GO 591
 618: POP
 619: POP
// ruGuard1 := [ ] ;
 620: LD_ADDR_EXP 4
 624: PUSH
 625: EMPTY
 626: ST_TO_ADDR
// ruGuard2 := [ ] ;
 627: LD_ADDR_EXP 5
 631: PUSH
 632: EMPTY
 633: ST_TO_ADDR
// ruGuard3 := [ ] ;
 634: LD_ADDR_EXP 6
 638: PUSH
 639: EMPTY
 640: ST_TO_ADDR
// ruForces := [ ] ;
 641: LD_ADDR_EXP 7
 645: PUSH
 646: EMPTY
 647: ST_TO_ADDR
// ruEng := [ ] ;
 648: LD_ADDR_EXP 8
 652: PUSH
 653: EMPTY
 654: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: DOUBLE
 661: LD_INT 1
 663: DEC
 664: ST_TO_ADDR
 665: LD_INT 4
 667: PUSH
 668: LD_INT 5
 670: PUSH
 671: LD_INT 6
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: PUSH
 679: LD_OWVAR 67
 683: ARRAY
 684: PUSH
 685: FOR_TO
 686: IFFALSE 742
// begin PrepareEngineer ( false , 8 ) ;
 688: LD_INT 0
 690: PPUSH
 691: LD_INT 8
 693: PPUSH
 694: CALL_OW 382
// un := CreateHuman ;
 698: LD_ADDR_VAR 0 3
 702: PUSH
 703: CALL_OW 44
 707: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 708: LD_VAR 0 3
 712: PPUSH
 713: LD_INT 14
 715: PPUSH
 716: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 720: LD_ADDR_EXP 8
 724: PUSH
 725: LD_EXP 8
 729: PPUSH
 730: LD_VAR 0 3
 734: PPUSH
 735: CALL 39219 0 2
 739: ST_TO_ADDR
// end ;
 740: GO 685
 742: POP
 743: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 744: LD_ADDR_VAR 0 2
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_INT 5
 756: PUSH
 757: LD_INT 6
 759: PUSH
 760: LD_INT 7
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: PUSH
 768: LD_OWVAR 67
 772: ARRAY
 773: PUSH
 774: FOR_TO
 775: IFFALSE 885
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 777: LD_INT 24
 779: PPUSH
 780: LD_INT 3
 782: PPUSH
 783: LD_INT 3
 785: PPUSH
 786: LD_INT 46
 788: PUSH
 789: LD_INT 45
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: LD_VAR 0 2
 800: PUSH
 801: LD_INT 2
 803: MOD
 804: PUSH
 805: LD_INT 1
 807: PLUS
 808: ARRAY
 809: PPUSH
 810: LD_INT 100
 812: PPUSH
 813: CALL 7721 0 5
// un := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 4
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 854: LD_ADDR_EXP 4
 858: PUSH
 859: LD_EXP 4
 863: PPUSH
 864: LD_EXP 4
 868: PUSH
 869: LD_INT 1
 871: PLUS
 872: PPUSH
 873: LD_VAR 0 3
 877: PPUSH
 878: CALL_OW 1
 882: ST_TO_ADDR
// end ;
 883: GO 774
 885: POP
 886: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 887: LD_ADDR_VAR 0 2
 891: PUSH
 892: DOUBLE
 893: LD_INT 1
 895: DEC
 896: ST_TO_ADDR
 897: LD_INT 4
 899: PUSH
 900: LD_INT 4
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_OWVAR 67
 915: ARRAY
 916: PUSH
 917: FOR_TO
 918: IFFALSE 1028
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 920: LD_INT 24
 922: PPUSH
 923: LD_INT 3
 925: PPUSH
 926: LD_INT 3
 928: PPUSH
 929: LD_INT 46
 931: PUSH
 932: LD_INT 45
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: MOD
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: PPUSH
 953: LD_INT 100
 955: PPUSH
 956: CALL 7721 0 5
// un := CreateVehicle ;
 960: LD_ADDR_VAR 0 3
 964: PUSH
 965: CALL_OW 45
 969: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 970: LD_VAR 0 3
 974: PPUSH
 975: LD_INT 4
 977: PPUSH
 978: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 982: LD_VAR 0 3
 986: PPUSH
 987: LD_INT 5
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 997: LD_ADDR_EXP 5
1001: PUSH
1002: LD_EXP 5
1006: PPUSH
1007: LD_EXP 5
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: PPUSH
1016: LD_VAR 0 3
1020: PPUSH
1021: CALL_OW 1
1025: ST_TO_ADDR
// end ;
1026: GO 917
1028: POP
1029: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1030: LD_ADDR_VAR 0 2
1034: PUSH
1035: DOUBLE
1036: LD_INT 1
1038: DEC
1039: ST_TO_ADDR
1040: LD_INT 4
1042: PUSH
1043: LD_INT 4
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_OWVAR 67
1058: ARRAY
1059: PUSH
1060: FOR_TO
1061: IFFALSE 1171
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1063: LD_INT 24
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: LD_INT 3
1071: PPUSH
1072: LD_INT 46
1074: PUSH
1075: LD_INT 45
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 2
1089: MOD
1090: PUSH
1091: LD_INT 1
1093: PLUS
1094: ARRAY
1095: PPUSH
1096: LD_INT 100
1098: PPUSH
1099: CALL 7721 0 5
// un := CreateVehicle ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: CALL_OW 45
1112: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_INT 6
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1140: LD_ADDR_EXP 6
1144: PUSH
1145: LD_EXP 6
1149: PPUSH
1150: LD_EXP 6
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 1
1168: ST_TO_ADDR
// end ;
1169: GO 1060
1171: POP
1172: POP
// for i := 1 to 2 do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_INT 2
1185: PUSH
1186: FOR_TO
1187: IFFALSE 1235
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1189: LD_INT 22
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: LD_INT 3
1197: PPUSH
1198: LD_INT 52
1200: PPUSH
1201: LD_INT 100
1203: PPUSH
1204: CALL 7721 0 5
// un := CreateVehicle ;
1208: LD_ADDR_VAR 0 3
1212: PUSH
1213: CALL_OW 45
1217: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1218: LD_VAR 0 3
1222: PPUSH
1223: LD_INT 9
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// end ;
1233: GO 1186
1235: POP
1236: POP
// for i := 1 to 3 do
1237: LD_ADDR_VAR 0 2
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_INT 3
1249: PUSH
1250: FOR_TO
1251: IFFALSE 1288
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1253: LD_INT 0
1255: PPUSH
1256: LD_INT 9
1258: PPUSH
1259: LD_INT 8
1261: PPUSH
1262: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1266: CALL_OW 44
1270: PPUSH
1271: LD_INT 91
1273: PPUSH
1274: LD_INT 83
1276: PPUSH
1277: CALL_OW 428
1281: PPUSH
1282: CALL_OW 52
// end ;
1286: GO 1250
1288: POP
1289: POP
// end ;
1290: LD_VAR 0 1
1294: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1295: LD_EXP 8
1299: IFFALSE 1493
1301: GO 1303
1303: DISABLE
1304: LD_INT 0
1306: PPUSH
1307: PPUSH
// begin enable ;
1308: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1309: LD_ADDR_VAR 0 2
1313: PUSH
1314: LD_INT 10
1316: PPUSH
1317: LD_INT 21
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 24
1332: PUSH
1333: LD_INT 1000
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 70
1352: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1353: LD_VAR 0 2
1357: NOT
1358: PUSH
1359: LD_EXP 8
1363: PPUSH
1364: LD_INT 3
1366: PUSH
1367: LD_INT 54
1369: PUSH
1370: EMPTY
1371: LIST
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 72
1381: AND
1382: IFFALSE 1414
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1384: LD_EXP 8
1388: PPUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 54
1394: PUSH
1395: EMPTY
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 72
1406: PPUSH
1407: LD_INT 14
1409: PPUSH
1410: CALL_OW 120
// if tmp then
1414: LD_VAR 0 2
1418: IFFALSE 1493
// begin for i in ruEng do
1420: LD_ADDR_VAR 0 1
1424: PUSH
1425: LD_EXP 8
1429: PUSH
1430: FOR_IN
1431: IFFALSE 1491
// if IsInUnit ( i ) then
1433: LD_VAR 0 1
1437: PPUSH
1438: CALL_OW 310
1442: IFFALSE 1455
// ComExitBuilding ( i ) else
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 122
1453: GO 1489
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1455: LD_VAR 0 1
1459: PPUSH
1460: LD_VAR 0 1
1464: PPUSH
1465: LD_VAR 0 2
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 8278 0 4
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: CALL_OW 130
1489: GO 1430
1491: POP
1492: POP
// end ; end ;
1493: PPOPN 2
1495: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1496: LD_EXP 7
1500: NOT
1501: IFFALSE 1567
1503: GO 1505
1505: DISABLE
1506: LD_INT 0
1508: PPUSH
1509: PPUSH
// begin enable ;
1510: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1511: LD_ADDR_VAR 0 1
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_INT 4
1523: PUSH
1524: LD_INT 5
1526: PUSH
1527: LD_INT 6
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_OWVAR 67
1539: ARRAY
1540: PUSH
1541: FOR_TO
1542: IFFALSE 1565
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1544: LD_INT 50
1546: PPUSH
1547: LD_INT 24
1549: PPUSH
1550: LD_INT 3
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_INT 46
1558: PPUSH
1559: CALL_OW 185
1563: GO 1541
1565: POP
1566: POP
// end ;
1567: PPOPN 2
1569: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1570: LD_EXP 7
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: LD_INT 5
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_OWVAR 67
1593: ARRAY
1594: GREATEREQUAL
1595: IFFALSE 1748
1597: GO 1599
1599: DISABLE
1600: LD_INT 0
1602: PPUSH
1603: PPUSH
// begin enable ;
1604: ENABLE
// tmp := ruForces ;
1605: LD_ADDR_VAR 0 2
1609: PUSH
1610: LD_EXP 7
1614: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1615: LD_INT 0
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: CALL_OW 12
1625: IFFALSE 1646
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_INT 45
1634: PPUSH
1635: CALL_OW 120
// wait ( 0 0$20 ) ;
1639: LD_INT 700
1641: PPUSH
1642: CALL_OW 67
// end ; ruForces := [ ] ;
1646: LD_ADDR_EXP 7
1650: PUSH
1651: EMPTY
1652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1653: LD_INT 35
1655: PPUSH
1656: CALL_OW 67
// for i in tmp do
1660: LD_ADDR_VAR 0 1
1664: PUSH
1665: LD_VAR 0 2
1669: PUSH
1670: FOR_IN
1671: IFFALSE 1739
// if not IsOk ( i ) then
1673: LD_VAR 0 1
1677: PPUSH
1678: CALL_OW 302
1682: NOT
1683: IFFALSE 1703
// tmp := tmp diff i else
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_VAR 0 1
1699: DIFF
1700: ST_TO_ADDR
1701: GO 1737
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1703: LD_VAR 0 1
1707: PPUSH
1708: LD_INT 81
1710: PUSH
1711: LD_INT 3
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PPUSH
1718: CALL_OW 69
1722: PPUSH
1723: LD_VAR 0 1
1727: PPUSH
1728: CALL_OW 74
1732: PPUSH
1733: CALL_OW 115
1737: GO 1670
1739: POP
1740: POP
// until not tmp ;
1741: LD_VAR 0 2
1745: NOT
1746: IFFALSE 1653
// end ;
1748: PPOPN 2
1750: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1751: LD_INT 22
1753: PUSH
1754: LD_INT 7
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 92
1763: PUSH
1764: LD_INT 62
1766: PUSH
1767: LD_INT 83
1769: PUSH
1770: LD_INT 8
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PPUSH
1783: CALL_OW 69
1787: IFFALSE 1807
1789: GO 1791
1791: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1792: LD_EXP 4
1796: PPUSH
1797: LD_INT 69
1799: PPUSH
1800: LD_INT 100
1802: PPUSH
1803: CALL_OW 114
1807: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1808: LD_INT 22
1810: PUSH
1811: LD_INT 7
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 92
1820: PUSH
1821: LD_INT 85
1823: PUSH
1824: LD_INT 89
1826: PUSH
1827: LD_INT 8
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PPUSH
1840: CALL_OW 69
1844: IFFALSE 1864
1846: GO 1848
1848: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1849: LD_EXP 5
1853: PPUSH
1854: LD_INT 72
1856: PPUSH
1857: LD_INT 88
1859: PPUSH
1860: CALL_OW 114
1864: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 92
1877: PUSH
1878: LD_INT 89
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 8
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 69
1901: IFFALSE 1921
1903: GO 1905
1905: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1906: LD_EXP 6
1910: PPUSH
1911: LD_INT 107
1913: PPUSH
1914: LD_INT 26
1916: PPUSH
1917: CALL_OW 114
1921: END
// every 6 6$00 do var i , un , tmp ;
1922: GO 1924
1924: DISABLE
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
// begin enable ;
1930: ENABLE
// tmp := [ ] ;
1931: LD_ADDR_VAR 0 3
1935: PUSH
1936: EMPTY
1937: ST_TO_ADDR
// for i := 1 to 8 do
1938: LD_ADDR_VAR 0 1
1942: PUSH
1943: DOUBLE
1944: LD_INT 1
1946: DEC
1947: ST_TO_ADDR
1948: LD_INT 8
1950: PUSH
1951: FOR_TO
1952: IFFALSE 2095
// begin uc_side := 1 ;
1954: LD_ADDR_OWVAR 20
1958: PUSH
1959: LD_INT 1
1961: ST_TO_ADDR
// uc_nation := 1 ;
1962: LD_ADDR_OWVAR 21
1966: PUSH
1967: LD_INT 1
1969: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1970: LD_INT 5
1972: PPUSH
1973: LD_INT 3
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_INT 6
1981: PUSH
1982: LD_INT 9
1984: PUSH
1985: LD_INT 7
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 1
1997: PUSH
1998: LD_INT 3
2000: MOD
2001: PUSH
2002: LD_INT 1
2004: PLUS
2005: ARRAY
2006: PPUSH
2007: LD_INT 100
2009: PPUSH
2010: CALL 7721 0 5
// un := CreateVehicle ;
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: LD_VAR 0 3
2033: PPUSH
2034: LD_VAR 0 2
2038: PPUSH
2039: CALL 39219 0 2
2043: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 11
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2071: LD_VAR 0 2
2075: PPUSH
2076: LD_INT 16
2078: PPUSH
2079: LD_INT 13
2081: PPUSH
2082: CALL_OW 111
// wait ( 0 0$1 ) ;
2086: LD_INT 35
2088: PPUSH
2089: CALL_OW 67
// end ;
2093: GO 1951
2095: POP
2096: POP
// repeat wait ( 0 0$1 ) ;
2097: LD_INT 35
2099: PPUSH
2100: CALL_OW 67
// for i in tmp do
2104: LD_ADDR_VAR 0 1
2108: PUSH
2109: LD_VAR 0 3
2113: PUSH
2114: FOR_IN
2115: IFFALSE 2183
// if not IsOk ( i ) then
2117: LD_VAR 0 1
2121: PPUSH
2122: CALL_OW 302
2126: NOT
2127: IFFALSE 2147
// tmp := tmp diff i else
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: LD_VAR 0 3
2138: PUSH
2139: LD_VAR 0 1
2143: DIFF
2144: ST_TO_ADDR
2145: GO 2181
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2147: LD_VAR 0 1
2151: PPUSH
2152: LD_INT 81
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PPUSH
2162: CALL_OW 69
2166: PPUSH
2167: LD_VAR 0 1
2171: PPUSH
2172: CALL_OW 74
2176: PPUSH
2177: CALL_OW 115
2181: GO 2114
2183: POP
2184: POP
// until not tmp ;
2185: LD_VAR 0 3
2189: NOT
2190: IFFALSE 2097
// end ;
2192: PPOPN 3
2194: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2195: LD_INT 149
2197: PPUSH
2198: LD_INT 106
2200: PPUSH
2201: CALL_OW 428
2205: NOT
2206: IFFALSE 2369
2208: GO 2210
2210: DISABLE
2211: LD_INT 0
2213: PPUSH
// begin enable ;
2214: ENABLE
// uc_side := 1 ;
2215: LD_ADDR_OWVAR 20
2219: PUSH
2220: LD_INT 1
2222: ST_TO_ADDR
// uc_nation := 1 ;
2223: LD_ADDR_OWVAR 21
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2231: LD_INT 5
2233: PPUSH
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 12
2242: PPUSH
2243: LD_INT 100
2245: PPUSH
2246: CALL 7721 0 5
// un := CreateVehicle ;
2250: LD_ADDR_VAR 0 1
2254: PUSH
2255: CALL_OW 45
2259: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2260: LD_VAR 0 1
2264: PPUSH
2265: LD_INT 149
2267: PPUSH
2268: LD_INT 106
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2278: LD_VAR 0 1
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: LD_INT 100
2288: PPUSH
2289: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2293: LD_VAR 0 1
2297: PPUSH
2298: LD_INT 105
2300: PPUSH
2301: LD_INT 2
2303: PPUSH
2304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2308: LD_INT 35
2310: PPUSH
2311: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2315: LD_VAR 0 1
2319: PPUSH
2320: CALL_OW 301
2324: PUSH
2325: LD_VAR 0 1
2329: PPUSH
2330: CALL_OW 255
2334: PUSH
2335: LD_INT 1
2337: NONEQUAL
2338: OR
2339: IFFALSE 2343
// exit ;
2341: GO 2369
// until IsAt ( un , 105 , 2 ) ;
2343: LD_VAR 0 1
2347: PPUSH
2348: LD_INT 105
2350: PPUSH
2351: LD_INT 2
2353: PPUSH
2354: CALL_OW 307
2358: IFFALSE 2308
// RemoveUnit ( un ) ;
2360: LD_VAR 0 1
2364: PPUSH
2365: CALL_OW 64
// end ; end_of_file
2369: PPOPN 1
2371: END
// export function Action ; begin
2372: LD_INT 0
2374: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2375: LD_EXP 2
2379: PPUSH
2380: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2384: LD_STRING WT-Objectives-1
2386: PPUSH
2387: CALL_OW 337
// end ;
2391: LD_VAR 0 1
2395: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2396: LD_INT 7
2398: PPUSH
2399: LD_EXP 3
2403: PPUSH
2404: CALL_OW 292
2408: IFFALSE 2425
2410: GO 2412
2412: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2413: LD_EXP 3
2417: PPUSH
2418: LD_INT 7
2420: PPUSH
2421: CALL_OW 235
2425: END
// every 2 2$00 do
2426: GO 2428
2428: DISABLE
// PrepareReinforcements ( ) ;
2429: CALL 264 0 0
2433: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 469
2441: NOT
2442: IFFALSE 2457
2444: GO 2446
2446: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2447: LD_INT 8
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL_OW 424
2457: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2458: LD_INT 8
2460: PPUSH
2461: LD_INT 2
2463: PUSH
2464: LD_INT 34
2466: PUSH
2467: LD_INT 12
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 34
2476: PUSH
2477: LD_INT 51
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 70
2493: PUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 469
2501: NOT
2502: AND
2503: IFFALSE 2633
2505: GO 2507
2507: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2508: LD_STRING WT-med-1
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2518: LD_STRING WT-med-2
2520: PPUSH
2521: LD_INT 1
2523: NEG
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_EXP 3
2536: PPUSH
2537: CALL_OW 302
2541: PUSH
2542: LD_EXP 3
2546: PPUSH
2547: CALL_OW 255
2551: MUL
2552: PUSH
2553: LD_INT 7
2555: EQUAL
2556: PUSH
2557: LD_INT 1
2559: PLUS
2560: ARRAY
2561: PPUSH
2562: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2566: LD_STRING WT-med-3
2568: PPUSH
2569: LD_INT 1
2571: NEG
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 7
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 34
2592: PUSH
2593: LD_INT 10
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 69
2608: PUSH
2609: LD_INT 2
2611: GREATEREQUAL
2612: PUSH
2613: LD_INT 1
2615: PLUS
2616: ARRAY
2617: PPUSH
2618: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2622: LD_STRING WT-Main
2624: PPUSH
2625: CALL_OW 102
// YouWin ;
2629: CALL_OW 103
// end ; end_of_file
2633: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2634: LD_VAR 0 1
2638: PUSH
2639: LD_EXP 7
2643: IN
2644: IFFALSE 2662
// ruForces := ruForces diff un ;
2646: LD_ADDR_EXP 7
2650: PUSH
2651: LD_EXP 7
2655: PUSH
2656: LD_VAR 0 1
2660: DIFF
2661: ST_TO_ADDR
// end ;
2662: PPOPN 1
2664: END
// on UnitDestroyed ( un ) do begin if un = allianceHack then
2665: LD_VAR 0 1
2669: PUSH
2670: LD_EXP 2
2674: EQUAL
2675: IFFALSE 2684
// YouLost ( WT-HackLost ) ;
2677: LD_STRING WT-HackLost
2679: PPUSH
2680: CALL_OW 104
// if un in ruForces then
2684: LD_VAR 0 1
2688: PUSH
2689: LD_EXP 7
2693: IN
2694: IFFALSE 2712
// ruForces := ruForces diff un ;
2696: LD_ADDR_EXP 7
2700: PUSH
2701: LD_EXP 7
2705: PUSH
2706: LD_VAR 0 1
2710: DIFF
2711: ST_TO_ADDR
// end ;
2712: PPOPN 1
2714: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 3 then
2715: LD_VAR 0 1
2719: PPUSH
2720: CALL_OW 255
2724: PUSH
2725: LD_INT 3
2727: EQUAL
2728: IFFALSE 2750
// ruForces := Join ( ruForces , vehicle ) ;
2730: LD_ADDR_EXP 7
2734: PUSH
2735: LD_EXP 7
2739: PPUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL 39219 0 2
2749: ST_TO_ADDR
// end ; end_of_file
2750: PPOPN 2
2752: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
2753: LD_INT 0
2755: PPUSH
// ar_miner := 81 ;
2756: LD_ADDR_EXP 16
2760: PUSH
2761: LD_INT 81
2763: ST_TO_ADDR
// ar_crane := 88 ;
2764: LD_ADDR_EXP 15
2768: PUSH
2769: LD_INT 88
2771: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
2772: LD_ADDR_EXP 10
2776: PUSH
2777: LD_INT 89
2779: ST_TO_ADDR
// us_hack := 99 ;
2780: LD_ADDR_EXP 11
2784: PUSH
2785: LD_INT 99
2787: ST_TO_ADDR
// us_artillery := 97 ;
2788: LD_ADDR_EXP 12
2792: PUSH
2793: LD_INT 97
2795: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2796: LD_ADDR_EXP 13
2800: PUSH
2801: LD_INT 91
2803: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
2804: LD_ADDR_EXP 14
2808: PUSH
2809: LD_INT 92
2811: ST_TO_ADDR
// ru_radar := 98 ;
2812: LD_ADDR_EXP 9
2816: PUSH
2817: LD_INT 98
2819: ST_TO_ADDR
// tech_Artillery := 80 ;
2820: LD_ADDR_EXP 17
2824: PUSH
2825: LD_INT 80
2827: ST_TO_ADDR
// tech_RadMat := 81 ;
2828: LD_ADDR_EXP 18
2832: PUSH
2833: LD_INT 81
2835: ST_TO_ADDR
// tech_BasicTools := 82 ;
2836: LD_ADDR_EXP 19
2840: PUSH
2841: LD_INT 82
2843: ST_TO_ADDR
// tech_Cargo := 83 ;
2844: LD_ADDR_EXP 20
2848: PUSH
2849: LD_INT 83
2851: ST_TO_ADDR
// tech_Track := 84 ;
2852: LD_ADDR_EXP 21
2856: PUSH
2857: LD_INT 84
2859: ST_TO_ADDR
// tech_Crane := 85 ;
2860: LD_ADDR_EXP 22
2864: PUSH
2865: LD_INT 85
2867: ST_TO_ADDR
// tech_Bulldozer := 86 ;
2868: LD_ADDR_EXP 23
2872: PUSH
2873: LD_INT 86
2875: ST_TO_ADDR
// tech_Hovercraft := 87 ;
2876: LD_ADDR_EXP 24
2880: PUSH
2881: LD_INT 87
2883: ST_TO_ADDR
// end ;
2884: LD_VAR 0 1
2888: RET
// every 1 do
2889: GO 2891
2891: DISABLE
// InitGlobalVariables ; end_of_file
2892: CALL 2753 0 0
2896: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// if exist_mode then
2901: LD_VAR 0 2
2905: IFFALSE 2930
// unit := CreateCharacter ( prefix & ident ) else
2907: LD_ADDR_VAR 0 5
2911: PUSH
2912: LD_VAR 0 3
2916: PUSH
2917: LD_VAR 0 1
2921: STR
2922: PPUSH
2923: CALL_OW 34
2927: ST_TO_ADDR
2928: GO 2945
// unit := NewCharacter ( ident ) ;
2930: LD_ADDR_VAR 0 5
2934: PUSH
2935: LD_VAR 0 1
2939: PPUSH
2940: CALL_OW 25
2944: ST_TO_ADDR
// result := unit ;
2945: LD_ADDR_VAR 0 4
2949: PUSH
2950: LD_VAR 0 5
2954: ST_TO_ADDR
// end ;
2955: LD_VAR 0 4
2959: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2960: LD_INT 0
2962: PPUSH
2963: PPUSH
// if not side or not nation then
2964: LD_VAR 0 1
2968: NOT
2969: PUSH
2970: LD_VAR 0 2
2974: NOT
2975: OR
2976: IFFALSE 2980
// exit ;
2978: GO 3744
// case nation of nation_american :
2980: LD_VAR 0 2
2984: PUSH
2985: LD_INT 1
2987: DOUBLE
2988: EQUAL
2989: IFTRUE 2993
2991: GO 3207
2993: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2994: LD_ADDR_VAR 0 4
2998: PUSH
2999: LD_INT 35
3001: PUSH
3002: LD_INT 45
3004: PUSH
3005: LD_INT 46
3007: PUSH
3008: LD_INT 47
3010: PUSH
3011: LD_INT 82
3013: PUSH
3014: LD_INT 83
3016: PUSH
3017: LD_INT 84
3019: PUSH
3020: LD_INT 85
3022: PUSH
3023: LD_INT 86
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: LD_INT 2
3031: PUSH
3032: LD_INT 6
3034: PUSH
3035: LD_INT 15
3037: PUSH
3038: LD_INT 16
3040: PUSH
3041: LD_INT 7
3043: PUSH
3044: LD_INT 12
3046: PUSH
3047: LD_INT 13
3049: PUSH
3050: LD_INT 10
3052: PUSH
3053: LD_INT 14
3055: PUSH
3056: LD_INT 20
3058: PUSH
3059: LD_INT 21
3061: PUSH
3062: LD_INT 22
3064: PUSH
3065: LD_INT 25
3067: PUSH
3068: LD_INT 32
3070: PUSH
3071: LD_INT 27
3073: PUSH
3074: LD_INT 36
3076: PUSH
3077: LD_INT 69
3079: PUSH
3080: LD_INT 39
3082: PUSH
3083: LD_INT 34
3085: PUSH
3086: LD_INT 40
3088: PUSH
3089: LD_INT 48
3091: PUSH
3092: LD_INT 49
3094: PUSH
3095: LD_INT 50
3097: PUSH
3098: LD_INT 51
3100: PUSH
3101: LD_INT 52
3103: PUSH
3104: LD_INT 53
3106: PUSH
3107: LD_INT 54
3109: PUSH
3110: LD_INT 55
3112: PUSH
3113: LD_INT 56
3115: PUSH
3116: LD_INT 57
3118: PUSH
3119: LD_INT 58
3121: PUSH
3122: LD_INT 59
3124: PUSH
3125: LD_INT 60
3127: PUSH
3128: LD_INT 61
3130: PUSH
3131: LD_INT 62
3133: PUSH
3134: LD_INT 80
3136: PUSH
3137: LD_INT 82
3139: PUSH
3140: LD_INT 83
3142: PUSH
3143: LD_INT 84
3145: PUSH
3146: LD_INT 85
3148: PUSH
3149: LD_INT 86
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: ST_TO_ADDR
3205: GO 3668
3207: LD_INT 2
3209: DOUBLE
3210: EQUAL
3211: IFTRUE 3215
3213: GO 3437
3215: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
3216: LD_ADDR_VAR 0 4
3220: PUSH
3221: LD_INT 35
3223: PUSH
3224: LD_INT 45
3226: PUSH
3227: LD_INT 46
3229: PUSH
3230: LD_INT 47
3232: PUSH
3233: LD_INT 82
3235: PUSH
3236: LD_INT 83
3238: PUSH
3239: LD_INT 84
3241: PUSH
3242: LD_INT 85
3244: PUSH
3245: LD_INT 87
3247: PUSH
3248: LD_INT 70
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: LD_INT 11
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: LD_INT 4
3262: PUSH
3263: LD_INT 5
3265: PUSH
3266: LD_INT 6
3268: PUSH
3269: LD_INT 15
3271: PUSH
3272: LD_INT 18
3274: PUSH
3275: LD_INT 7
3277: PUSH
3278: LD_INT 17
3280: PUSH
3281: LD_INT 8
3283: PUSH
3284: LD_INT 20
3286: PUSH
3287: LD_INT 21
3289: PUSH
3290: LD_INT 22
3292: PUSH
3293: LD_INT 72
3295: PUSH
3296: LD_INT 26
3298: PUSH
3299: LD_INT 69
3301: PUSH
3302: LD_INT 39
3304: PUSH
3305: LD_INT 40
3307: PUSH
3308: LD_INT 41
3310: PUSH
3311: LD_INT 42
3313: PUSH
3314: LD_INT 43
3316: PUSH
3317: LD_INT 48
3319: PUSH
3320: LD_INT 49
3322: PUSH
3323: LD_INT 50
3325: PUSH
3326: LD_INT 51
3328: PUSH
3329: LD_INT 52
3331: PUSH
3332: LD_INT 53
3334: PUSH
3335: LD_INT 54
3337: PUSH
3338: LD_INT 55
3340: PUSH
3341: LD_INT 56
3343: PUSH
3344: LD_INT 60
3346: PUSH
3347: LD_INT 61
3349: PUSH
3350: LD_INT 62
3352: PUSH
3353: LD_INT 66
3355: PUSH
3356: LD_INT 67
3358: PUSH
3359: LD_INT 68
3361: PUSH
3362: LD_INT 81
3364: PUSH
3365: LD_INT 82
3367: PUSH
3368: LD_INT 83
3370: PUSH
3371: LD_INT 84
3373: PUSH
3374: LD_INT 85
3376: PUSH
3377: LD_INT 87
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: ST_TO_ADDR
3435: GO 3668
3437: LD_INT 3
3439: DOUBLE
3440: EQUAL
3441: IFTRUE 3445
3443: GO 3667
3445: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3446: LD_ADDR_VAR 0 4
3450: PUSH
3451: LD_INT 46
3453: PUSH
3454: LD_INT 47
3456: PUSH
3457: LD_INT 1
3459: PUSH
3460: LD_INT 2
3462: PUSH
3463: LD_INT 82
3465: PUSH
3466: LD_INT 83
3468: PUSH
3469: LD_INT 84
3471: PUSH
3472: LD_INT 85
3474: PUSH
3475: LD_INT 86
3477: PUSH
3478: LD_INT 11
3480: PUSH
3481: LD_INT 9
3483: PUSH
3484: LD_INT 20
3486: PUSH
3487: LD_INT 19
3489: PUSH
3490: LD_INT 21
3492: PUSH
3493: LD_INT 24
3495: PUSH
3496: LD_INT 22
3498: PUSH
3499: LD_INT 25
3501: PUSH
3502: LD_INT 28
3504: PUSH
3505: LD_INT 29
3507: PUSH
3508: LD_INT 30
3510: PUSH
3511: LD_INT 31
3513: PUSH
3514: LD_INT 37
3516: PUSH
3517: LD_INT 38
3519: PUSH
3520: LD_INT 32
3522: PUSH
3523: LD_INT 27
3525: PUSH
3526: LD_INT 33
3528: PUSH
3529: LD_INT 69
3531: PUSH
3532: LD_INT 39
3534: PUSH
3535: LD_INT 34
3537: PUSH
3538: LD_INT 40
3540: PUSH
3541: LD_INT 71
3543: PUSH
3544: LD_INT 23
3546: PUSH
3547: LD_INT 44
3549: PUSH
3550: LD_INT 48
3552: PUSH
3553: LD_INT 49
3555: PUSH
3556: LD_INT 50
3558: PUSH
3559: LD_INT 51
3561: PUSH
3562: LD_INT 52
3564: PUSH
3565: LD_INT 53
3567: PUSH
3568: LD_INT 54
3570: PUSH
3571: LD_INT 55
3573: PUSH
3574: LD_INT 56
3576: PUSH
3577: LD_INT 57
3579: PUSH
3580: LD_INT 58
3582: PUSH
3583: LD_INT 59
3585: PUSH
3586: LD_INT 63
3588: PUSH
3589: LD_INT 64
3591: PUSH
3592: LD_INT 65
3594: PUSH
3595: LD_INT 82
3597: PUSH
3598: LD_INT 83
3600: PUSH
3601: LD_INT 84
3603: PUSH
3604: LD_INT 85
3606: PUSH
3607: LD_INT 86
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: ST_TO_ADDR
3665: GO 3668
3667: POP
// if state > - 1 and state < 3 then
3668: LD_VAR 0 3
3672: PUSH
3673: LD_INT 1
3675: NEG
3676: GREATER
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_INT 3
3685: LESS
3686: AND
3687: IFFALSE 3744
// for i in result do
3689: LD_ADDR_VAR 0 5
3693: PUSH
3694: LD_VAR 0 4
3698: PUSH
3699: FOR_IN
3700: IFFALSE 3742
// if GetTech ( i , side ) <> state then
3702: LD_VAR 0 5
3706: PPUSH
3707: LD_VAR 0 1
3711: PPUSH
3712: CALL_OW 321
3716: PUSH
3717: LD_VAR 0 3
3721: NONEQUAL
3722: IFFALSE 3740
// result := result diff i ;
3724: LD_ADDR_VAR 0 4
3728: PUSH
3729: LD_VAR 0 4
3733: PUSH
3734: LD_VAR 0 5
3738: DIFF
3739: ST_TO_ADDR
3740: GO 3699
3742: POP
3743: POP
// end ;
3744: LD_VAR 0 4
3748: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3749: LD_INT 0
3751: PPUSH
3752: PPUSH
3753: PPUSH
// result := true ;
3754: LD_ADDR_VAR 0 3
3758: PUSH
3759: LD_INT 1
3761: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3762: LD_ADDR_VAR 0 5
3766: PUSH
3767: LD_VAR 0 2
3771: PPUSH
3772: CALL_OW 480
3776: ST_TO_ADDR
// if not tmp then
3777: LD_VAR 0 5
3781: NOT
3782: IFFALSE 3786
// exit ;
3784: GO 3835
// for i in tmp do
3786: LD_ADDR_VAR 0 4
3790: PUSH
3791: LD_VAR 0 5
3795: PUSH
3796: FOR_IN
3797: IFFALSE 3833
// if GetTech ( i , side ) <> state_researched then
3799: LD_VAR 0 4
3803: PPUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 321
3813: PUSH
3814: LD_INT 2
3816: NONEQUAL
3817: IFFALSE 3831
// begin result := false ;
3819: LD_ADDR_VAR 0 3
3823: PUSH
3824: LD_INT 0
3826: ST_TO_ADDR
// exit ;
3827: POP
3828: POP
3829: GO 3835
// end ;
3831: GO 3796
3833: POP
3834: POP
// end ;
3835: LD_VAR 0 3
3839: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3840: LD_INT 0
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3855: LD_VAR 0 1
3859: NOT
3860: PUSH
3861: LD_VAR 0 1
3865: PPUSH
3866: CALL_OW 257
3870: PUSH
3871: LD_INT 9
3873: NONEQUAL
3874: OR
3875: IFFALSE 3879
// exit ;
3877: GO 4452
// side := GetSide ( unit ) ;
3879: LD_ADDR_VAR 0 9
3883: PUSH
3884: LD_VAR 0 1
3888: PPUSH
3889: CALL_OW 255
3893: ST_TO_ADDR
// tech_space := tech_spacanom ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_INT 29
3901: ST_TO_ADDR
// tech_time := tech_taurad ;
3902: LD_ADDR_VAR 0 13
3906: PUSH
3907: LD_INT 28
3909: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3910: LD_ADDR_VAR 0 11
3914: PUSH
3915: LD_VAR 0 1
3919: PPUSH
3920: CALL_OW 310
3924: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3925: LD_VAR 0 11
3929: PPUSH
3930: CALL_OW 247
3934: PUSH
3935: LD_INT 2
3937: EQUAL
3938: IFFALSE 3942
// exit ;
3940: GO 4452
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3942: LD_ADDR_VAR 0 8
3946: PUSH
3947: LD_INT 81
3949: PUSH
3950: LD_VAR 0 9
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: LD_INT 21
3964: PUSH
3965: LD_INT 3
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PPUSH
3980: CALL_OW 69
3984: ST_TO_ADDR
// if not tmp then
3985: LD_VAR 0 8
3989: NOT
3990: IFFALSE 3994
// exit ;
3992: GO 4452
// if in_unit then
3994: LD_VAR 0 11
3998: IFFALSE 4022
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4000: LD_ADDR_VAR 0 10
4004: PUSH
4005: LD_VAR 0 8
4009: PPUSH
4010: LD_VAR 0 11
4014: PPUSH
4015: CALL_OW 74
4019: ST_TO_ADDR
4020: GO 4042
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4022: LD_ADDR_VAR 0 10
4026: PUSH
4027: LD_VAR 0 8
4031: PPUSH
4032: LD_VAR 0 1
4036: PPUSH
4037: CALL_OW 74
4041: ST_TO_ADDR
// if not enemy then
4042: LD_VAR 0 10
4046: NOT
4047: IFFALSE 4051
// exit ;
4049: GO 4452
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4051: LD_VAR 0 11
4055: PUSH
4056: LD_VAR 0 11
4060: PPUSH
4061: LD_VAR 0 10
4065: PPUSH
4066: CALL_OW 296
4070: PUSH
4071: LD_INT 13
4073: GREATER
4074: AND
4075: PUSH
4076: LD_VAR 0 1
4080: PPUSH
4081: LD_VAR 0 10
4085: PPUSH
4086: CALL_OW 296
4090: PUSH
4091: LD_INT 12
4093: GREATER
4094: OR
4095: IFFALSE 4099
// exit ;
4097: GO 4452
// missile := [ 1 ] ;
4099: LD_ADDR_VAR 0 14
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: EMPTY
4108: LIST
4109: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4110: LD_VAR 0 9
4114: PPUSH
4115: LD_VAR 0 12
4119: PPUSH
4120: CALL_OW 325
4124: IFFALSE 4153
// missile := Insert ( missile , missile + 1 , 2 ) ;
4126: LD_ADDR_VAR 0 14
4130: PUSH
4131: LD_VAR 0 14
4135: PPUSH
4136: LD_VAR 0 14
4140: PUSH
4141: LD_INT 1
4143: PLUS
4144: PPUSH
4145: LD_INT 2
4147: PPUSH
4148: CALL_OW 2
4152: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4153: LD_VAR 0 9
4157: PPUSH
4158: LD_VAR 0 13
4162: PPUSH
4163: CALL_OW 325
4167: PUSH
4168: LD_VAR 0 10
4172: PPUSH
4173: CALL_OW 255
4177: PPUSH
4178: LD_VAR 0 13
4182: PPUSH
4183: CALL_OW 325
4187: NOT
4188: AND
4189: IFFALSE 4218
// missile := Insert ( missile , missile + 1 , 3 ) ;
4191: LD_ADDR_VAR 0 14
4195: PUSH
4196: LD_VAR 0 14
4200: PPUSH
4201: LD_VAR 0 14
4205: PUSH
4206: LD_INT 1
4208: PLUS
4209: PPUSH
4210: LD_INT 3
4212: PPUSH
4213: CALL_OW 2
4217: ST_TO_ADDR
// if missile < 2 then
4218: LD_VAR 0 14
4222: PUSH
4223: LD_INT 2
4225: LESS
4226: IFFALSE 4230
// exit ;
4228: GO 4452
// x := GetX ( enemy ) ;
4230: LD_ADDR_VAR 0 4
4234: PUSH
4235: LD_VAR 0 10
4239: PPUSH
4240: CALL_OW 250
4244: ST_TO_ADDR
// y := GetY ( enemy ) ;
4245: LD_ADDR_VAR 0 5
4249: PUSH
4250: LD_VAR 0 10
4254: PPUSH
4255: CALL_OW 251
4259: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4260: LD_ADDR_VAR 0 6
4264: PUSH
4265: LD_VAR 0 4
4269: PUSH
4270: LD_INT 1
4272: NEG
4273: PPUSH
4274: LD_INT 1
4276: PPUSH
4277: CALL_OW 12
4281: PLUS
4282: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4283: LD_ADDR_VAR 0 7
4287: PUSH
4288: LD_VAR 0 5
4292: PUSH
4293: LD_INT 1
4295: NEG
4296: PPUSH
4297: LD_INT 1
4299: PPUSH
4300: CALL_OW 12
4304: PLUS
4305: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4306: LD_VAR 0 6
4310: PPUSH
4311: LD_VAR 0 7
4315: PPUSH
4316: CALL_OW 488
4320: NOT
4321: IFFALSE 4343
// begin _x := x ;
4323: LD_ADDR_VAR 0 6
4327: PUSH
4328: LD_VAR 0 4
4332: ST_TO_ADDR
// _y := y ;
4333: LD_ADDR_VAR 0 7
4337: PUSH
4338: LD_VAR 0 5
4342: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4343: LD_ADDR_VAR 0 3
4347: PUSH
4348: LD_INT 1
4350: PPUSH
4351: LD_VAR 0 14
4355: PPUSH
4356: CALL_OW 12
4360: ST_TO_ADDR
// case i of 1 :
4361: LD_VAR 0 3
4365: PUSH
4366: LD_INT 1
4368: DOUBLE
4369: EQUAL
4370: IFTRUE 4374
4372: GO 4391
4374: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4375: LD_VAR 0 1
4379: PPUSH
4380: LD_VAR 0 10
4384: PPUSH
4385: CALL_OW 115
4389: GO 4452
4391: LD_INT 2
4393: DOUBLE
4394: EQUAL
4395: IFTRUE 4399
4397: GO 4421
4399: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4400: LD_VAR 0 1
4404: PPUSH
4405: LD_VAR 0 6
4409: PPUSH
4410: LD_VAR 0 7
4414: PPUSH
4415: CALL_OW 153
4419: GO 4452
4421: LD_INT 3
4423: DOUBLE
4424: EQUAL
4425: IFTRUE 4429
4427: GO 4451
4429: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4430: LD_VAR 0 1
4434: PPUSH
4435: LD_VAR 0 6
4439: PPUSH
4440: LD_VAR 0 7
4444: PPUSH
4445: CALL_OW 154
4449: GO 4452
4451: POP
// end ;
4452: LD_VAR 0 2
4456: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4457: LD_INT 0
4459: PPUSH
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
// if not unit or not building then
4465: LD_VAR 0 1
4469: NOT
4470: PUSH
4471: LD_VAR 0 2
4475: NOT
4476: OR
4477: IFFALSE 4481
// exit ;
4479: GO 4639
// x := GetX ( building ) ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 250
4495: ST_TO_ADDR
// y := GetY ( building ) ;
4496: LD_ADDR_VAR 0 6
4500: PUSH
4501: LD_VAR 0 2
4505: PPUSH
4506: CALL_OW 251
4510: ST_TO_ADDR
// for i = 0 to 5 do
4511: LD_ADDR_VAR 0 4
4515: PUSH
4516: DOUBLE
4517: LD_INT 0
4519: DEC
4520: ST_TO_ADDR
4521: LD_INT 5
4523: PUSH
4524: FOR_TO
4525: IFFALSE 4637
// begin _x := ShiftX ( x , i , 3 ) ;
4527: LD_ADDR_VAR 0 7
4531: PUSH
4532: LD_VAR 0 5
4536: PPUSH
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_INT 3
4544: PPUSH
4545: CALL_OW 272
4549: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4550: LD_ADDR_VAR 0 8
4554: PUSH
4555: LD_VAR 0 6
4559: PPUSH
4560: LD_VAR 0 4
4564: PPUSH
4565: LD_INT 3
4567: PPUSH
4568: CALL_OW 273
4572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4573: LD_VAR 0 7
4577: PPUSH
4578: LD_VAR 0 8
4582: PPUSH
4583: CALL_OW 488
4587: NOT
4588: IFFALSE 4592
// continue ;
4590: GO 4524
// if HexInfo ( _x , _y ) = 0 then
4592: LD_VAR 0 7
4596: PPUSH
4597: LD_VAR 0 8
4601: PPUSH
4602: CALL_OW 428
4606: PUSH
4607: LD_INT 0
4609: EQUAL
4610: IFFALSE 4635
// begin ComMoveXY ( unit , _x , _y ) ;
4612: LD_VAR 0 1
4616: PPUSH
4617: LD_VAR 0 7
4621: PPUSH
4622: LD_VAR 0 8
4626: PPUSH
4627: CALL_OW 111
// exit ;
4631: POP
4632: POP
4633: GO 4639
// end ; end ;
4635: GO 4524
4637: POP
4638: POP
// end ;
4639: LD_VAR 0 3
4643: RET
// export function ScanBase ( side , base_area ) ; begin
4644: LD_INT 0
4646: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4647: LD_ADDR_VAR 0 3
4651: PUSH
4652: LD_VAR 0 2
4656: PPUSH
4657: LD_INT 81
4659: PUSH
4660: LD_VAR 0 1
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PPUSH
4669: CALL_OW 70
4673: ST_TO_ADDR
// end ;
4674: LD_VAR 0 3
4678: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4679: LD_INT 0
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
// result := false ;
4685: LD_ADDR_VAR 0 2
4689: PUSH
4690: LD_INT 0
4692: ST_TO_ADDR
// side := GetSide ( unit ) ;
4693: LD_ADDR_VAR 0 3
4697: PUSH
4698: LD_VAR 0 1
4702: PPUSH
4703: CALL_OW 255
4707: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 1
4717: PPUSH
4718: CALL_OW 248
4722: ST_TO_ADDR
// case nat of 1 :
4723: LD_VAR 0 4
4727: PUSH
4728: LD_INT 1
4730: DOUBLE
4731: EQUAL
4732: IFTRUE 4736
4734: GO 4747
4736: POP
// tech := tech_lassight ; 2 :
4737: LD_ADDR_VAR 0 5
4741: PUSH
4742: LD_INT 12
4744: ST_TO_ADDR
4745: GO 4786
4747: LD_INT 2
4749: DOUBLE
4750: EQUAL
4751: IFTRUE 4755
4753: GO 4766
4755: POP
// tech := tech_mortar ; 3 :
4756: LD_ADDR_VAR 0 5
4760: PUSH
4761: LD_INT 41
4763: ST_TO_ADDR
4764: GO 4786
4766: LD_INT 3
4768: DOUBLE
4769: EQUAL
4770: IFTRUE 4774
4772: GO 4785
4774: POP
// tech := tech_bazooka ; end ;
4775: LD_ADDR_VAR 0 5
4779: PUSH
4780: LD_INT 44
4782: ST_TO_ADDR
4783: GO 4786
4785: POP
// if Researched ( side , tech ) then
4786: LD_VAR 0 3
4790: PPUSH
4791: LD_VAR 0 5
4795: PPUSH
4796: CALL_OW 325
4800: IFFALSE 4827
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4802: LD_ADDR_VAR 0 2
4806: PUSH
4807: LD_INT 5
4809: PUSH
4810: LD_INT 8
4812: PUSH
4813: LD_INT 9
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: LIST
4820: PUSH
4821: LD_VAR 0 4
4825: ARRAY
4826: ST_TO_ADDR
// end ;
4827: LD_VAR 0 2
4831: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4832: LD_INT 0
4834: PPUSH
4835: PPUSH
4836: PPUSH
// if not mines then
4837: LD_VAR 0 2
4841: NOT
4842: IFFALSE 4846
// exit ;
4844: GO 4990
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4846: LD_ADDR_VAR 0 5
4850: PUSH
4851: LD_INT 81
4853: PUSH
4854: LD_VAR 0 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 3
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 3
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PPUSH
4884: CALL_OW 69
4888: ST_TO_ADDR
// for i in mines do
4889: LD_ADDR_VAR 0 4
4893: PUSH
4894: LD_VAR 0 2
4898: PUSH
4899: FOR_IN
4900: IFFALSE 4988
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4902: LD_VAR 0 4
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: LD_VAR 0 4
4915: PUSH
4916: LD_INT 2
4918: ARRAY
4919: PPUSH
4920: CALL_OW 458
4924: NOT
4925: IFFALSE 4929
// continue ;
4927: GO 4899
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4929: LD_VAR 0 4
4933: PUSH
4934: LD_INT 1
4936: ARRAY
4937: PPUSH
4938: LD_VAR 0 4
4942: PUSH
4943: LD_INT 2
4945: ARRAY
4946: PPUSH
4947: CALL_OW 428
4951: PUSH
4952: LD_VAR 0 5
4956: IN
4957: IFFALSE 4986
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4959: LD_VAR 0 4
4963: PUSH
4964: LD_INT 1
4966: ARRAY
4967: PPUSH
4968: LD_VAR 0 4
4972: PUSH
4973: LD_INT 2
4975: ARRAY
4976: PPUSH
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL_OW 456
// end ;
4986: GO 4899
4988: POP
4989: POP
// end ;
4990: LD_VAR 0 3
4994: RET
// export function Count ( array ) ; var i ; begin
4995: LD_INT 0
4997: PPUSH
4998: PPUSH
// result := 0 ;
4999: LD_ADDR_VAR 0 2
5003: PUSH
5004: LD_INT 0
5006: ST_TO_ADDR
// for i in array do
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: LD_VAR 0 1
5016: PUSH
5017: FOR_IN
5018: IFFALSE 5042
// if i then
5020: LD_VAR 0 3
5024: IFFALSE 5040
// result := result + 1 ;
5026: LD_ADDR_VAR 0 2
5030: PUSH
5031: LD_VAR 0 2
5035: PUSH
5036: LD_INT 1
5038: PLUS
5039: ST_TO_ADDR
5040: GO 5017
5042: POP
5043: POP
// end ;
5044: LD_VAR 0 2
5048: RET
// export function IsEmpty ( building ) ; begin
5049: LD_INT 0
5051: PPUSH
// if not building then
5052: LD_VAR 0 1
5056: NOT
5057: IFFALSE 5061
// exit ;
5059: GO 5104
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: LD_VAR 0 1
5070: PUSH
5071: LD_INT 22
5073: PUSH
5074: LD_VAR 0 1
5078: PPUSH
5079: CALL_OW 255
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 58
5090: PUSH
5091: EMPTY
5092: LIST
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PPUSH
5098: CALL_OW 69
5102: IN
5103: ST_TO_ADDR
// end ;
5104: LD_VAR 0 2
5108: RET
// export function IsNotFull ( building ) ; begin
5109: LD_INT 0
5111: PPUSH
// if not building then
5112: LD_VAR 0 1
5116: NOT
5117: IFFALSE 5121
// exit ;
5119: GO 5140
// result := UnitsInside ( building ) < 6 ;
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: LD_VAR 0 1
5130: PPUSH
5131: CALL_OW 313
5135: PUSH
5136: LD_INT 6
5138: LESS
5139: ST_TO_ADDR
// end ;
5140: LD_VAR 0 2
5144: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5145: LD_INT 0
5147: PPUSH
5148: PPUSH
5149: PPUSH
5150: PPUSH
// tmp := [ ] ;
5151: LD_ADDR_VAR 0 3
5155: PUSH
5156: EMPTY
5157: ST_TO_ADDR
// list := [ ] ;
5158: LD_ADDR_VAR 0 5
5162: PUSH
5163: EMPTY
5164: ST_TO_ADDR
// for i = 16 to 25 do
5165: LD_ADDR_VAR 0 4
5169: PUSH
5170: DOUBLE
5171: LD_INT 16
5173: DEC
5174: ST_TO_ADDR
5175: LD_INT 25
5177: PUSH
5178: FOR_TO
5179: IFFALSE 5252
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5181: LD_ADDR_VAR 0 3
5185: PUSH
5186: LD_VAR 0 3
5190: PUSH
5191: LD_INT 22
5193: PUSH
5194: LD_VAR 0 1
5198: PPUSH
5199: CALL_OW 255
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 91
5210: PUSH
5211: LD_VAR 0 1
5215: PUSH
5216: LD_INT 6
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 30
5226: PUSH
5227: LD_VAR 0 4
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: PPUSH
5244: CALL_OW 69
5248: ADD
5249: ST_TO_ADDR
5250: GO 5178
5252: POP
5253: POP
// for i = 1 to tmp do
5254: LD_ADDR_VAR 0 4
5258: PUSH
5259: DOUBLE
5260: LD_INT 1
5262: DEC
5263: ST_TO_ADDR
5264: LD_VAR 0 3
5268: PUSH
5269: FOR_TO
5270: IFFALSE 5358
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5272: LD_ADDR_VAR 0 5
5276: PUSH
5277: LD_VAR 0 5
5281: PUSH
5282: LD_VAR 0 3
5286: PUSH
5287: LD_VAR 0 4
5291: ARRAY
5292: PPUSH
5293: CALL_OW 266
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 4
5307: ARRAY
5308: PPUSH
5309: CALL_OW 250
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: LD_VAR 0 4
5323: ARRAY
5324: PPUSH
5325: CALL_OW 251
5329: PUSH
5330: LD_VAR 0 3
5334: PUSH
5335: LD_VAR 0 4
5339: ARRAY
5340: PPUSH
5341: CALL_OW 254
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: PUSH
5352: EMPTY
5353: LIST
5354: ADD
5355: ST_TO_ADDR
5356: GO 5269
5358: POP
5359: POP
// result := list ;
5360: LD_ADDR_VAR 0 2
5364: PUSH
5365: LD_VAR 0 5
5369: ST_TO_ADDR
// end ;
5370: LD_VAR 0 2
5374: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5375: LD_INT 0
5377: PPUSH
5378: PPUSH
5379: PPUSH
5380: PPUSH
5381: PPUSH
5382: PPUSH
5383: PPUSH
// if not factory then
5384: LD_VAR 0 1
5388: NOT
5389: IFFALSE 5393
// exit ;
5391: GO 5986
// if control = control_apeman then
5393: LD_VAR 0 4
5397: PUSH
5398: LD_INT 5
5400: EQUAL
5401: IFFALSE 5510
// begin tmp := UnitsInside ( factory ) ;
5403: LD_ADDR_VAR 0 8
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 313
5417: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5418: LD_VAR 0 8
5422: PPUSH
5423: LD_INT 25
5425: PUSH
5426: LD_INT 12
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 72
5437: NOT
5438: IFFALSE 5448
// control := control_manual ;
5440: LD_ADDR_VAR 0 4
5444: PUSH
5445: LD_INT 1
5447: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5448: LD_ADDR_VAR 0 8
5452: PUSH
5453: LD_VAR 0 1
5457: PPUSH
5458: CALL 5145 0 1
5462: ST_TO_ADDR
// if tmp then
5463: LD_VAR 0 8
5467: IFFALSE 5510
// begin for i in tmp do
5469: LD_ADDR_VAR 0 7
5473: PUSH
5474: LD_VAR 0 8
5478: PUSH
5479: FOR_IN
5480: IFFALSE 5508
// if i [ 1 ] = b_ext_radio then
5482: LD_VAR 0 7
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: PUSH
5491: LD_INT 22
5493: EQUAL
5494: IFFALSE 5506
// begin control := control_remote ;
5496: LD_ADDR_VAR 0 4
5500: PUSH
5501: LD_INT 2
5503: ST_TO_ADDR
// break ;
5504: GO 5508
// end ;
5506: GO 5479
5508: POP
5509: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5510: LD_VAR 0 1
5514: PPUSH
5515: LD_VAR 0 2
5519: PPUSH
5520: LD_VAR 0 3
5524: PPUSH
5525: LD_VAR 0 4
5529: PPUSH
5530: LD_VAR 0 5
5534: PPUSH
5535: CALL_OW 448
5539: IFFALSE 5574
// begin result := [ chassis , engine , control , weapon ] ;
5541: LD_ADDR_VAR 0 6
5545: PUSH
5546: LD_VAR 0 2
5550: PUSH
5551: LD_VAR 0 3
5555: PUSH
5556: LD_VAR 0 4
5560: PUSH
5561: LD_VAR 0 5
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: ST_TO_ADDR
// exit ;
5572: GO 5986
// end ; _chassis := AvailableChassisList ( factory ) ;
5574: LD_ADDR_VAR 0 9
5578: PUSH
5579: LD_VAR 0 1
5583: PPUSH
5584: CALL_OW 475
5588: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5589: LD_ADDR_VAR 0 11
5593: PUSH
5594: LD_VAR 0 1
5598: PPUSH
5599: CALL_OW 476
5603: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5604: LD_ADDR_VAR 0 12
5608: PUSH
5609: LD_VAR 0 1
5613: PPUSH
5614: CALL_OW 477
5618: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5619: LD_ADDR_VAR 0 10
5623: PUSH
5624: LD_VAR 0 1
5628: PPUSH
5629: CALL_OW 478
5633: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5634: LD_VAR 0 9
5638: NOT
5639: PUSH
5640: LD_VAR 0 11
5644: NOT
5645: OR
5646: PUSH
5647: LD_VAR 0 12
5651: NOT
5652: OR
5653: PUSH
5654: LD_VAR 0 10
5658: NOT
5659: OR
5660: IFFALSE 5695
// begin result := [ chassis , engine , control , weapon ] ;
5662: LD_ADDR_VAR 0 6
5666: PUSH
5667: LD_VAR 0 2
5671: PUSH
5672: LD_VAR 0 3
5676: PUSH
5677: LD_VAR 0 4
5681: PUSH
5682: LD_VAR 0 5
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: ST_TO_ADDR
// exit ;
5693: GO 5986
// end ; if not chassis in _chassis then
5695: LD_VAR 0 2
5699: PUSH
5700: LD_VAR 0 9
5704: IN
5705: NOT
5706: IFFALSE 5732
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5708: LD_ADDR_VAR 0 2
5712: PUSH
5713: LD_VAR 0 9
5717: PUSH
5718: LD_INT 1
5720: PPUSH
5721: LD_VAR 0 9
5725: PPUSH
5726: CALL_OW 12
5730: ARRAY
5731: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5732: LD_VAR 0 2
5736: PPUSH
5737: LD_VAR 0 3
5741: PPUSH
5742: CALL 5991 0 2
5746: NOT
5747: IFFALSE 5806
// repeat engine := _engine [ 1 ] ;
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: LD_VAR 0 11
5758: PUSH
5759: LD_INT 1
5761: ARRAY
5762: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5763: LD_ADDR_VAR 0 11
5767: PUSH
5768: LD_VAR 0 11
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: CALL_OW 3
5780: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5781: LD_VAR 0 2
5785: PPUSH
5786: LD_VAR 0 3
5790: PPUSH
5791: CALL 5991 0 2
5795: PUSH
5796: LD_VAR 0 11
5800: PUSH
5801: EMPTY
5802: EQUAL
5803: OR
5804: IFFALSE 5749
// if not control in _control then
5806: LD_VAR 0 4
5810: PUSH
5811: LD_VAR 0 12
5815: IN
5816: NOT
5817: IFFALSE 5843
// control := _control [ rand ( 1 , _control ) ] ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 12
5828: PUSH
5829: LD_INT 1
5831: PPUSH
5832: LD_VAR 0 12
5836: PPUSH
5837: CALL_OW 12
5841: ARRAY
5842: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5843: LD_VAR 0 2
5847: PPUSH
5848: LD_VAR 0 5
5852: PPUSH
5853: CALL 6211 0 2
5857: NOT
5858: IFFALSE 5917
// repeat weapon := _weapon [ 1 ] ;
5860: LD_ADDR_VAR 0 5
5864: PUSH
5865: LD_VAR 0 10
5869: PUSH
5870: LD_INT 1
5872: ARRAY
5873: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5874: LD_ADDR_VAR 0 10
5878: PUSH
5879: LD_VAR 0 10
5883: PPUSH
5884: LD_INT 1
5886: PPUSH
5887: CALL_OW 3
5891: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5892: LD_VAR 0 2
5896: PPUSH
5897: LD_VAR 0 5
5901: PPUSH
5902: CALL 6211 0 2
5906: PUSH
5907: LD_VAR 0 10
5911: PUSH
5912: EMPTY
5913: EQUAL
5914: OR
5915: IFFALSE 5860
// result := [ ] ;
5917: LD_ADDR_VAR 0 6
5921: PUSH
5922: EMPTY
5923: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5924: LD_VAR 0 1
5928: PPUSH
5929: LD_VAR 0 2
5933: PPUSH
5934: LD_VAR 0 3
5938: PPUSH
5939: LD_VAR 0 4
5943: PPUSH
5944: LD_VAR 0 5
5948: PPUSH
5949: CALL_OW 448
5953: IFFALSE 5986
// result := [ chassis , engine , control , weapon ] ;
5955: LD_ADDR_VAR 0 6
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: LD_VAR 0 3
5969: PUSH
5970: LD_VAR 0 4
5974: PUSH
5975: LD_VAR 0 5
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: ST_TO_ADDR
// end ;
5986: LD_VAR 0 6
5990: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5991: LD_INT 0
5993: PPUSH
// if not chassis or not engine then
5994: LD_VAR 0 1
5998: NOT
5999: PUSH
6000: LD_VAR 0 2
6004: NOT
6005: OR
6006: IFFALSE 6010
// exit ;
6008: GO 6206
// case engine of engine_solar :
6010: LD_VAR 0 2
6014: PUSH
6015: LD_INT 2
6017: DOUBLE
6018: EQUAL
6019: IFTRUE 6023
6021: GO 6061
6023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6024: LD_ADDR_VAR 0 3
6028: PUSH
6029: LD_INT 11
6031: PUSH
6032: LD_INT 12
6034: PUSH
6035: LD_INT 13
6037: PUSH
6038: LD_INT 14
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: LD_INT 2
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: ST_TO_ADDR
6059: GO 6190
6061: LD_INT 1
6063: DOUBLE
6064: EQUAL
6065: IFTRUE 6069
6067: GO 6131
6069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6070: LD_ADDR_VAR 0 3
6074: PUSH
6075: LD_INT 11
6077: PUSH
6078: LD_INT 12
6080: PUSH
6081: LD_INT 13
6083: PUSH
6084: LD_INT 14
6086: PUSH
6087: LD_INT 1
6089: PUSH
6090: LD_INT 2
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: LD_INT 4
6098: PUSH
6099: LD_INT 5
6101: PUSH
6102: LD_INT 21
6104: PUSH
6105: LD_INT 23
6107: PUSH
6108: LD_INT 22
6110: PUSH
6111: LD_INT 24
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: ST_TO_ADDR
6129: GO 6190
6131: LD_INT 3
6133: DOUBLE
6134: EQUAL
6135: IFTRUE 6139
6137: GO 6189
6139: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6140: LD_ADDR_VAR 0 3
6144: PUSH
6145: LD_INT 13
6147: PUSH
6148: LD_INT 14
6150: PUSH
6151: LD_INT 2
6153: PUSH
6154: LD_INT 3
6156: PUSH
6157: LD_INT 4
6159: PUSH
6160: LD_INT 5
6162: PUSH
6163: LD_INT 21
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 23
6171: PUSH
6172: LD_INT 24
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: ST_TO_ADDR
6187: GO 6190
6189: POP
// result := ( chassis in result ) ;
6190: LD_ADDR_VAR 0 3
6194: PUSH
6195: LD_VAR 0 1
6199: PUSH
6200: LD_VAR 0 3
6204: IN
6205: ST_TO_ADDR
// end ;
6206: LD_VAR 0 3
6210: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6211: LD_INT 0
6213: PPUSH
// if not chassis or not weapon then
6214: LD_VAR 0 1
6218: NOT
6219: PUSH
6220: LD_VAR 0 2
6224: NOT
6225: OR
6226: IFFALSE 6230
// exit ;
6228: GO 7256
// case weapon of us_machine_gun :
6230: LD_VAR 0 2
6234: PUSH
6235: LD_INT 2
6237: DOUBLE
6238: EQUAL
6239: IFTRUE 6243
6241: GO 6273
6243: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: LD_INT 2
6254: PUSH
6255: LD_INT 3
6257: PUSH
6258: LD_INT 4
6260: PUSH
6261: LD_INT 5
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: ST_TO_ADDR
6271: GO 7240
6273: LD_INT 3
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6311
6281: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6282: LD_ADDR_VAR 0 3
6286: PUSH
6287: LD_INT 1
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: LD_INT 3
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: ST_TO_ADDR
6309: GO 7240
6311: LD_INT 11
6313: DOUBLE
6314: EQUAL
6315: IFTRUE 6319
6317: GO 6349
6319: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6320: LD_ADDR_VAR 0 3
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: LD_INT 2
6330: PUSH
6331: LD_INT 3
6333: PUSH
6334: LD_INT 4
6336: PUSH
6337: LD_INT 5
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: ST_TO_ADDR
6347: GO 7240
6349: LD_INT 4
6351: DOUBLE
6352: EQUAL
6353: IFTRUE 6357
6355: GO 6383
6357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6358: LD_ADDR_VAR 0 3
6362: PUSH
6363: LD_INT 2
6365: PUSH
6366: LD_INT 3
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: LD_INT 5
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: ST_TO_ADDR
6381: GO 7240
6383: LD_INT 5
6385: DOUBLE
6386: EQUAL
6387: IFTRUE 6391
6389: GO 6417
6391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6392: LD_ADDR_VAR 0 3
6396: PUSH
6397: LD_INT 2
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 4
6405: PUSH
6406: LD_INT 5
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
6415: GO 7240
6417: LD_INT 9
6419: DOUBLE
6420: EQUAL
6421: IFTRUE 6425
6423: GO 6451
6425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6426: LD_ADDR_VAR 0 3
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: ST_TO_ADDR
6449: GO 7240
6451: LD_INT 7
6453: DOUBLE
6454: EQUAL
6455: IFTRUE 6459
6457: GO 6485
6459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6460: LD_ADDR_VAR 0 3
6464: PUSH
6465: LD_INT 2
6467: PUSH
6468: LD_INT 3
6470: PUSH
6471: LD_INT 4
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: ST_TO_ADDR
6483: GO 7240
6485: LD_INT 12
6487: DOUBLE
6488: EQUAL
6489: IFTRUE 6493
6491: GO 6519
6493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: LD_INT 2
6501: PUSH
6502: LD_INT 3
6504: PUSH
6505: LD_INT 4
6507: PUSH
6508: LD_INT 5
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: ST_TO_ADDR
6517: GO 7240
6519: LD_INT 13
6521: DOUBLE
6522: EQUAL
6523: IFTRUE 6527
6525: GO 6553
6527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6528: LD_ADDR_VAR 0 3
6532: PUSH
6533: LD_INT 2
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 4
6541: PUSH
6542: LD_INT 5
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: ST_TO_ADDR
6551: GO 7240
6553: LD_INT 14
6555: DOUBLE
6556: EQUAL
6557: IFTRUE 6561
6559: GO 6579
6561: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 4
6569: PUSH
6570: LD_INT 5
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: ST_TO_ADDR
6577: GO 7240
6579: LD_INT 6
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6605
6587: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: LD_INT 4
6595: PUSH
6596: LD_INT 5
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: ST_TO_ADDR
6603: GO 7240
6605: LD_INT 10
6607: DOUBLE
6608: EQUAL
6609: IFTRUE 6613
6611: GO 6631
6613: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6614: LD_ADDR_VAR 0 3
6618: PUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: ST_TO_ADDR
6629: GO 7240
6631: LD_INT 22
6633: DOUBLE
6634: EQUAL
6635: IFTRUE 6639
6637: GO 6665
6639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6640: LD_ADDR_VAR 0 3
6644: PUSH
6645: LD_INT 11
6647: PUSH
6648: LD_INT 12
6650: PUSH
6651: LD_INT 13
6653: PUSH
6654: LD_INT 14
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: ST_TO_ADDR
6663: GO 7240
6665: LD_INT 23
6667: DOUBLE
6668: EQUAL
6669: IFTRUE 6673
6671: GO 6699
6673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6674: LD_ADDR_VAR 0 3
6678: PUSH
6679: LD_INT 11
6681: PUSH
6682: LD_INT 12
6684: PUSH
6685: LD_INT 13
6687: PUSH
6688: LD_INT 14
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: ST_TO_ADDR
6697: GO 7240
6699: LD_INT 24
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6707
6705: GO 6733
6707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6708: LD_ADDR_VAR 0 3
6712: PUSH
6713: LD_INT 11
6715: PUSH
6716: LD_INT 12
6718: PUSH
6719: LD_INT 13
6721: PUSH
6722: LD_INT 14
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: ST_TO_ADDR
6731: GO 7240
6733: LD_INT 30
6735: DOUBLE
6736: EQUAL
6737: IFTRUE 6741
6739: GO 6767
6741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6742: LD_ADDR_VAR 0 3
6746: PUSH
6747: LD_INT 11
6749: PUSH
6750: LD_INT 12
6752: PUSH
6753: LD_INT 13
6755: PUSH
6756: LD_INT 14
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: ST_TO_ADDR
6765: GO 7240
6767: LD_INT 25
6769: DOUBLE
6770: EQUAL
6771: IFTRUE 6775
6773: GO 6793
6775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: LD_INT 13
6783: PUSH
6784: LD_INT 14
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: ST_TO_ADDR
6791: GO 7240
6793: LD_INT 27
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6819
6801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6802: LD_ADDR_VAR 0 3
6806: PUSH
6807: LD_INT 13
6809: PUSH
6810: LD_INT 14
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: ST_TO_ADDR
6817: GO 7240
6819: LD_INT 28
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 6845
6827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6828: LD_ADDR_VAR 0 3
6832: PUSH
6833: LD_INT 13
6835: PUSH
6836: LD_INT 14
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: ST_TO_ADDR
6843: GO 7240
6845: LD_INT 29
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 6871
6853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6854: LD_ADDR_VAR 0 3
6858: PUSH
6859: LD_INT 13
6861: PUSH
6862: LD_INT 14
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: ST_TO_ADDR
6869: GO 7240
6871: LD_INT 31
6873: DOUBLE
6874: EQUAL
6875: IFTRUE 6879
6877: GO 6897
6879: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6880: LD_ADDR_VAR 0 3
6884: PUSH
6885: LD_INT 13
6887: PUSH
6888: LD_INT 14
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 7240
6897: LD_INT 26
6899: DOUBLE
6900: EQUAL
6901: IFTRUE 6905
6903: GO 6923
6905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_INT 13
6913: PUSH
6914: LD_INT 14
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: ST_TO_ADDR
6921: GO 7240
6923: LD_INT 42
6925: DOUBLE
6926: EQUAL
6927: IFTRUE 6931
6929: GO 6957
6931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6932: LD_ADDR_VAR 0 3
6936: PUSH
6937: LD_INT 21
6939: PUSH
6940: LD_INT 22
6942: PUSH
6943: LD_INT 23
6945: PUSH
6946: LD_INT 24
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: ST_TO_ADDR
6955: GO 7240
6957: LD_INT 43
6959: DOUBLE
6960: EQUAL
6961: IFTRUE 6965
6963: GO 6991
6965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6966: LD_ADDR_VAR 0 3
6970: PUSH
6971: LD_INT 21
6973: PUSH
6974: LD_INT 22
6976: PUSH
6977: LD_INT 23
6979: PUSH
6980: LD_INT 24
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: ST_TO_ADDR
6989: GO 7240
6991: LD_INT 44
6993: DOUBLE
6994: EQUAL
6995: IFTRUE 6999
6997: GO 7025
6999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7000: LD_ADDR_VAR 0 3
7004: PUSH
7005: LD_INT 21
7007: PUSH
7008: LD_INT 22
7010: PUSH
7011: LD_INT 23
7013: PUSH
7014: LD_INT 24
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: ST_TO_ADDR
7023: GO 7240
7025: LD_INT 45
7027: DOUBLE
7028: EQUAL
7029: IFTRUE 7033
7031: GO 7059
7033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: LD_INT 21
7041: PUSH
7042: LD_INT 22
7044: PUSH
7045: LD_INT 23
7047: PUSH
7048: LD_INT 24
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: ST_TO_ADDR
7057: GO 7240
7059: LD_INT 49
7061: DOUBLE
7062: EQUAL
7063: IFTRUE 7067
7065: GO 7093
7067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7068: LD_ADDR_VAR 0 3
7072: PUSH
7073: LD_INT 21
7075: PUSH
7076: LD_INT 22
7078: PUSH
7079: LD_INT 23
7081: PUSH
7082: LD_INT 24
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: ST_TO_ADDR
7091: GO 7240
7093: LD_INT 51
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7127
7101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7102: LD_ADDR_VAR 0 3
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 22
7112: PUSH
7113: LD_INT 23
7115: PUSH
7116: LD_INT 24
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: ST_TO_ADDR
7125: GO 7240
7127: LD_INT 52
7129: DOUBLE
7130: EQUAL
7131: IFTRUE 7135
7133: GO 7161
7135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7136: LD_ADDR_VAR 0 3
7140: PUSH
7141: LD_INT 21
7143: PUSH
7144: LD_INT 22
7146: PUSH
7147: LD_INT 23
7149: PUSH
7150: LD_INT 24
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: ST_TO_ADDR
7159: GO 7240
7161: LD_INT 53
7163: DOUBLE
7164: EQUAL
7165: IFTRUE 7169
7167: GO 7187
7169: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7170: LD_ADDR_VAR 0 3
7174: PUSH
7175: LD_INT 23
7177: PUSH
7178: LD_INT 24
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: ST_TO_ADDR
7185: GO 7240
7187: LD_INT 46
7189: DOUBLE
7190: EQUAL
7191: IFTRUE 7195
7193: GO 7213
7195: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7196: LD_ADDR_VAR 0 3
7200: PUSH
7201: LD_INT 23
7203: PUSH
7204: LD_INT 24
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: ST_TO_ADDR
7211: GO 7240
7213: LD_INT 47
7215: DOUBLE
7216: EQUAL
7217: IFTRUE 7221
7219: GO 7239
7221: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: LD_INT 23
7229: PUSH
7230: LD_INT 24
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: ST_TO_ADDR
7237: GO 7240
7239: POP
// result := ( chassis in result ) ;
7240: LD_ADDR_VAR 0 3
7244: PUSH
7245: LD_VAR 0 1
7249: PUSH
7250: LD_VAR 0 3
7254: IN
7255: ST_TO_ADDR
// end ;
7256: LD_VAR 0 3
7260: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7261: LD_INT 0
7263: PPUSH
7264: PPUSH
7265: PPUSH
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
// result := array ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_VAR 0 1
7279: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7280: LD_VAR 0 1
7284: NOT
7285: PUSH
7286: LD_VAR 0 2
7290: NOT
7291: OR
7292: PUSH
7293: LD_VAR 0 3
7297: NOT
7298: OR
7299: PUSH
7300: LD_VAR 0 2
7304: PUSH
7305: LD_VAR 0 1
7309: GREATER
7310: OR
7311: PUSH
7312: LD_VAR 0 3
7316: PUSH
7317: LD_VAR 0 1
7321: GREATER
7322: OR
7323: IFFALSE 7327
// exit ;
7325: GO 7623
// if direction then
7327: LD_VAR 0 4
7331: IFFALSE 7395
// begin d := 1 ;
7333: LD_ADDR_VAR 0 9
7337: PUSH
7338: LD_INT 1
7340: ST_TO_ADDR
// if i_from > i_to then
7341: LD_VAR 0 2
7345: PUSH
7346: LD_VAR 0 3
7350: GREATER
7351: IFFALSE 7377
// length := ( array - i_from ) + i_to else
7353: LD_ADDR_VAR 0 11
7357: PUSH
7358: LD_VAR 0 1
7362: PUSH
7363: LD_VAR 0 2
7367: MINUS
7368: PUSH
7369: LD_VAR 0 3
7373: PLUS
7374: ST_TO_ADDR
7375: GO 7393
// length := i_to - i_from ;
7377: LD_ADDR_VAR 0 11
7381: PUSH
7382: LD_VAR 0 3
7386: PUSH
7387: LD_VAR 0 2
7391: MINUS
7392: ST_TO_ADDR
// end else
7393: GO 7456
// begin d := - 1 ;
7395: LD_ADDR_VAR 0 9
7399: PUSH
7400: LD_INT 1
7402: NEG
7403: ST_TO_ADDR
// if i_from > i_to then
7404: LD_VAR 0 2
7408: PUSH
7409: LD_VAR 0 3
7413: GREATER
7414: IFFALSE 7434
// length := i_from - i_to else
7416: LD_ADDR_VAR 0 11
7420: PUSH
7421: LD_VAR 0 2
7425: PUSH
7426: LD_VAR 0 3
7430: MINUS
7431: ST_TO_ADDR
7432: GO 7456
// length := ( array - i_to ) + i_from ;
7434: LD_ADDR_VAR 0 11
7438: PUSH
7439: LD_VAR 0 1
7443: PUSH
7444: LD_VAR 0 3
7448: MINUS
7449: PUSH
7450: LD_VAR 0 2
7454: PLUS
7455: ST_TO_ADDR
// end ; if not length then
7456: LD_VAR 0 11
7460: NOT
7461: IFFALSE 7465
// exit ;
7463: GO 7623
// tmp := array ;
7465: LD_ADDR_VAR 0 10
7469: PUSH
7470: LD_VAR 0 1
7474: ST_TO_ADDR
// for i = 1 to length do
7475: LD_ADDR_VAR 0 6
7479: PUSH
7480: DOUBLE
7481: LD_INT 1
7483: DEC
7484: ST_TO_ADDR
7485: LD_VAR 0 11
7489: PUSH
7490: FOR_TO
7491: IFFALSE 7611
// begin for j = 1 to array do
7493: LD_ADDR_VAR 0 7
7497: PUSH
7498: DOUBLE
7499: LD_INT 1
7501: DEC
7502: ST_TO_ADDR
7503: LD_VAR 0 1
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7597
// begin k := j + d ;
7511: LD_ADDR_VAR 0 8
7515: PUSH
7516: LD_VAR 0 7
7520: PUSH
7521: LD_VAR 0 9
7525: PLUS
7526: ST_TO_ADDR
// if k > array then
7527: LD_VAR 0 8
7531: PUSH
7532: LD_VAR 0 1
7536: GREATER
7537: IFFALSE 7547
// k := 1 ;
7539: LD_ADDR_VAR 0 8
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if not k then
7547: LD_VAR 0 8
7551: NOT
7552: IFFALSE 7564
// k := array ;
7554: LD_ADDR_VAR 0 8
7558: PUSH
7559: LD_VAR 0 1
7563: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7564: LD_ADDR_VAR 0 10
7568: PUSH
7569: LD_VAR 0 10
7573: PPUSH
7574: LD_VAR 0 8
7578: PPUSH
7579: LD_VAR 0 1
7583: PUSH
7584: LD_VAR 0 7
7588: ARRAY
7589: PPUSH
7590: CALL_OW 1
7594: ST_TO_ADDR
// end ;
7595: GO 7508
7597: POP
7598: POP
// array := tmp ;
7599: LD_ADDR_VAR 0 1
7603: PUSH
7604: LD_VAR 0 10
7608: ST_TO_ADDR
// end ;
7609: GO 7490
7611: POP
7612: POP
// result := array ;
7613: LD_ADDR_VAR 0 5
7617: PUSH
7618: LD_VAR 0 1
7622: ST_TO_ADDR
// end ;
7623: LD_VAR 0 5
7627: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7628: LD_INT 0
7630: PPUSH
7631: PPUSH
// result := 0 ;
7632: LD_ADDR_VAR 0 3
7636: PUSH
7637: LD_INT 0
7639: ST_TO_ADDR
// if not array or not value in array then
7640: LD_VAR 0 1
7644: NOT
7645: PUSH
7646: LD_VAR 0 2
7650: PUSH
7651: LD_VAR 0 1
7655: IN
7656: NOT
7657: OR
7658: IFFALSE 7662
// exit ;
7660: GO 7716
// for i = 1 to array do
7662: LD_ADDR_VAR 0 4
7666: PUSH
7667: DOUBLE
7668: LD_INT 1
7670: DEC
7671: ST_TO_ADDR
7672: LD_VAR 0 1
7676: PUSH
7677: FOR_TO
7678: IFFALSE 7714
// if value = array [ i ] then
7680: LD_VAR 0 2
7684: PUSH
7685: LD_VAR 0 1
7689: PUSH
7690: LD_VAR 0 4
7694: ARRAY
7695: EQUAL
7696: IFFALSE 7712
// begin result := i ;
7698: LD_ADDR_VAR 0 3
7702: PUSH
7703: LD_VAR 0 4
7707: ST_TO_ADDR
// exit ;
7708: POP
7709: POP
7710: GO 7716
// end ;
7712: GO 7677
7714: POP
7715: POP
// end ;
7716: LD_VAR 0 3
7720: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7721: LD_INT 0
7723: PPUSH
// vc_chassis := chassis ;
7724: LD_ADDR_OWVAR 37
7728: PUSH
7729: LD_VAR 0 1
7733: ST_TO_ADDR
// vc_engine := engine ;
7734: LD_ADDR_OWVAR 39
7738: PUSH
7739: LD_VAR 0 2
7743: ST_TO_ADDR
// vc_control := control ;
7744: LD_ADDR_OWVAR 38
7748: PUSH
7749: LD_VAR 0 3
7753: ST_TO_ADDR
// vc_weapon := weapon ;
7754: LD_ADDR_OWVAR 40
7758: PUSH
7759: LD_VAR 0 4
7763: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7764: LD_ADDR_OWVAR 41
7768: PUSH
7769: LD_VAR 0 5
7773: ST_TO_ADDR
// end ;
7774: LD_VAR 0 6
7778: RET
// export function WantPlant ( unit ) ; var task ; begin
7779: LD_INT 0
7781: PPUSH
7782: PPUSH
// result := false ;
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: LD_INT 0
7790: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7791: LD_ADDR_VAR 0 3
7795: PUSH
7796: LD_VAR 0 1
7800: PPUSH
7801: CALL_OW 437
7805: ST_TO_ADDR
// if task then
7806: LD_VAR 0 3
7810: IFFALSE 7838
// if task [ 1 ] [ 1 ] = p then
7812: LD_VAR 0 3
7816: PUSH
7817: LD_INT 1
7819: ARRAY
7820: PUSH
7821: LD_INT 1
7823: ARRAY
7824: PUSH
7825: LD_STRING p
7827: EQUAL
7828: IFFALSE 7838
// result := true ;
7830: LD_ADDR_VAR 0 2
7834: PUSH
7835: LD_INT 1
7837: ST_TO_ADDR
// end ;
7838: LD_VAR 0 2
7842: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7843: LD_INT 0
7845: PPUSH
7846: PPUSH
7847: PPUSH
7848: PPUSH
// if pos < 1 then
7849: LD_VAR 0 2
7853: PUSH
7854: LD_INT 1
7856: LESS
7857: IFFALSE 7861
// exit ;
7859: GO 8164
// if pos = 1 then
7861: LD_VAR 0 2
7865: PUSH
7866: LD_INT 1
7868: EQUAL
7869: IFFALSE 7902
// result := Replace ( arr , pos [ 1 ] , value ) else
7871: LD_ADDR_VAR 0 4
7875: PUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: LD_VAR 0 2
7885: PUSH
7886: LD_INT 1
7888: ARRAY
7889: PPUSH
7890: LD_VAR 0 3
7894: PPUSH
7895: CALL_OW 1
7899: ST_TO_ADDR
7900: GO 8164
// begin tmp := arr ;
7902: LD_ADDR_VAR 0 6
7906: PUSH
7907: LD_VAR 0 1
7911: ST_TO_ADDR
// s_arr := [ tmp ] ;
7912: LD_ADDR_VAR 0 7
7916: PUSH
7917: LD_VAR 0 6
7921: PUSH
7922: EMPTY
7923: LIST
7924: ST_TO_ADDR
// for i = 1 to pos - 1 do
7925: LD_ADDR_VAR 0 5
7929: PUSH
7930: DOUBLE
7931: LD_INT 1
7933: DEC
7934: ST_TO_ADDR
7935: LD_VAR 0 2
7939: PUSH
7940: LD_INT 1
7942: MINUS
7943: PUSH
7944: FOR_TO
7945: IFFALSE 7990
// begin tmp := tmp [ pos [ i ] ] ;
7947: LD_ADDR_VAR 0 6
7951: PUSH
7952: LD_VAR 0 6
7956: PUSH
7957: LD_VAR 0 2
7961: PUSH
7962: LD_VAR 0 5
7966: ARRAY
7967: ARRAY
7968: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7969: LD_ADDR_VAR 0 7
7973: PUSH
7974: LD_VAR 0 7
7978: PUSH
7979: LD_VAR 0 6
7983: PUSH
7984: EMPTY
7985: LIST
7986: ADD
7987: ST_TO_ADDR
// end ;
7988: GO 7944
7990: POP
7991: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7992: LD_ADDR_VAR 0 6
7996: PUSH
7997: LD_VAR 0 6
8001: PPUSH
8002: LD_VAR 0 2
8006: PUSH
8007: LD_VAR 0 2
8011: ARRAY
8012: PPUSH
8013: LD_VAR 0 3
8017: PPUSH
8018: CALL_OW 1
8022: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8023: LD_ADDR_VAR 0 7
8027: PUSH
8028: LD_VAR 0 7
8032: PPUSH
8033: LD_VAR 0 7
8037: PPUSH
8038: LD_VAR 0 6
8042: PPUSH
8043: CALL_OW 1
8047: ST_TO_ADDR
// for i = s_arr downto 2 do
8048: LD_ADDR_VAR 0 5
8052: PUSH
8053: DOUBLE
8054: LD_VAR 0 7
8058: INC
8059: ST_TO_ADDR
8060: LD_INT 2
8062: PUSH
8063: FOR_DOWNTO
8064: IFFALSE 8148
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8066: LD_ADDR_VAR 0 6
8070: PUSH
8071: LD_VAR 0 7
8075: PUSH
8076: LD_VAR 0 5
8080: PUSH
8081: LD_INT 1
8083: MINUS
8084: ARRAY
8085: PPUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_VAR 0 5
8095: PUSH
8096: LD_INT 1
8098: MINUS
8099: ARRAY
8100: PPUSH
8101: LD_VAR 0 7
8105: PUSH
8106: LD_VAR 0 5
8110: ARRAY
8111: PPUSH
8112: CALL_OW 1
8116: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8117: LD_ADDR_VAR 0 7
8121: PUSH
8122: LD_VAR 0 7
8126: PPUSH
8127: LD_VAR 0 5
8131: PUSH
8132: LD_INT 1
8134: MINUS
8135: PPUSH
8136: LD_VAR 0 6
8140: PPUSH
8141: CALL_OW 1
8145: ST_TO_ADDR
// end ;
8146: GO 8063
8148: POP
8149: POP
// result := s_arr [ 1 ] ;
8150: LD_ADDR_VAR 0 4
8154: PUSH
8155: LD_VAR 0 7
8159: PUSH
8160: LD_INT 1
8162: ARRAY
8163: ST_TO_ADDR
// end ; end ;
8164: LD_VAR 0 4
8168: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8169: LD_INT 0
8171: PPUSH
8172: PPUSH
// if not list then
8173: LD_VAR 0 1
8177: NOT
8178: IFFALSE 8182
// exit ;
8180: GO 8273
// i := list [ pos1 ] ;
8182: LD_ADDR_VAR 0 5
8186: PUSH
8187: LD_VAR 0 1
8191: PUSH
8192: LD_VAR 0 2
8196: ARRAY
8197: ST_TO_ADDR
// if not i then
8198: LD_VAR 0 5
8202: NOT
8203: IFFALSE 8207
// exit ;
8205: GO 8273
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8207: LD_ADDR_VAR 0 1
8211: PUSH
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_VAR 0 2
8221: PPUSH
8222: LD_VAR 0 1
8226: PUSH
8227: LD_VAR 0 3
8231: ARRAY
8232: PPUSH
8233: CALL_OW 1
8237: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8238: LD_ADDR_VAR 0 1
8242: PUSH
8243: LD_VAR 0 1
8247: PPUSH
8248: LD_VAR 0 3
8252: PPUSH
8253: LD_VAR 0 5
8257: PPUSH
8258: CALL_OW 1
8262: ST_TO_ADDR
// result := list ;
8263: LD_ADDR_VAR 0 4
8267: PUSH
8268: LD_VAR 0 1
8272: ST_TO_ADDR
// end ;
8273: LD_VAR 0 4
8277: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8278: LD_INT 0
8280: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8281: LD_ADDR_VAR 0 5
8285: PUSH
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL_OW 250
8295: PPUSH
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 251
8305: PPUSH
8306: LD_VAR 0 2
8310: PPUSH
8311: LD_VAR 0 3
8315: PPUSH
8316: LD_VAR 0 4
8320: PPUSH
8321: CALL 8331 0 5
8325: ST_TO_ADDR
// end ;
8326: LD_VAR 0 5
8330: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8331: LD_INT 0
8333: PPUSH
8334: PPUSH
8335: PPUSH
8336: PPUSH
// if not list then
8337: LD_VAR 0 3
8341: NOT
8342: IFFALSE 8346
// exit ;
8344: GO 8734
// result := [ ] ;
8346: LD_ADDR_VAR 0 6
8350: PUSH
8351: EMPTY
8352: ST_TO_ADDR
// for i in list do
8353: LD_ADDR_VAR 0 7
8357: PUSH
8358: LD_VAR 0 3
8362: PUSH
8363: FOR_IN
8364: IFFALSE 8566
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8366: LD_ADDR_VAR 0 9
8370: PUSH
8371: LD_VAR 0 7
8375: PPUSH
8376: LD_VAR 0 1
8380: PPUSH
8381: LD_VAR 0 2
8385: PPUSH
8386: CALL_OW 297
8390: ST_TO_ADDR
// if not result then
8391: LD_VAR 0 6
8395: NOT
8396: IFFALSE 8422
// result := [ [ i , tmp ] ] else
8398: LD_ADDR_VAR 0 6
8402: PUSH
8403: LD_VAR 0 7
8407: PUSH
8408: LD_VAR 0 9
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: ST_TO_ADDR
8420: GO 8564
// begin if result [ result ] [ 2 ] < tmp then
8422: LD_VAR 0 6
8426: PUSH
8427: LD_VAR 0 6
8431: ARRAY
8432: PUSH
8433: LD_INT 2
8435: ARRAY
8436: PUSH
8437: LD_VAR 0 9
8441: LESS
8442: IFFALSE 8484
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8444: LD_ADDR_VAR 0 6
8448: PUSH
8449: LD_VAR 0 6
8453: PPUSH
8454: LD_VAR 0 6
8458: PUSH
8459: LD_INT 1
8461: PLUS
8462: PPUSH
8463: LD_VAR 0 7
8467: PUSH
8468: LD_VAR 0 9
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PPUSH
8477: CALL_OW 2
8481: ST_TO_ADDR
8482: GO 8564
// for j = 1 to result do
8484: LD_ADDR_VAR 0 8
8488: PUSH
8489: DOUBLE
8490: LD_INT 1
8492: DEC
8493: ST_TO_ADDR
8494: LD_VAR 0 6
8498: PUSH
8499: FOR_TO
8500: IFFALSE 8562
// begin if tmp < result [ j ] [ 2 ] then
8502: LD_VAR 0 9
8506: PUSH
8507: LD_VAR 0 6
8511: PUSH
8512: LD_VAR 0 8
8516: ARRAY
8517: PUSH
8518: LD_INT 2
8520: ARRAY
8521: LESS
8522: IFFALSE 8560
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8524: LD_ADDR_VAR 0 6
8528: PUSH
8529: LD_VAR 0 6
8533: PPUSH
8534: LD_VAR 0 8
8538: PPUSH
8539: LD_VAR 0 7
8543: PUSH
8544: LD_VAR 0 9
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 2
8557: ST_TO_ADDR
// break ;
8558: GO 8562
// end ; end ;
8560: GO 8499
8562: POP
8563: POP
// end ; end ;
8564: GO 8363
8566: POP
8567: POP
// if result and not asc then
8568: LD_VAR 0 6
8572: PUSH
8573: LD_VAR 0 4
8577: NOT
8578: AND
8579: IFFALSE 8654
// begin tmp := result ;
8581: LD_ADDR_VAR 0 9
8585: PUSH
8586: LD_VAR 0 6
8590: ST_TO_ADDR
// for i = tmp downto 1 do
8591: LD_ADDR_VAR 0 7
8595: PUSH
8596: DOUBLE
8597: LD_VAR 0 9
8601: INC
8602: ST_TO_ADDR
8603: LD_INT 1
8605: PUSH
8606: FOR_DOWNTO
8607: IFFALSE 8652
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: LD_VAR 0 6
8618: PPUSH
8619: LD_VAR 0 9
8623: PUSH
8624: LD_VAR 0 7
8628: MINUS
8629: PUSH
8630: LD_INT 1
8632: PLUS
8633: PPUSH
8634: LD_VAR 0 9
8638: PUSH
8639: LD_VAR 0 7
8643: ARRAY
8644: PPUSH
8645: CALL_OW 1
8649: ST_TO_ADDR
8650: GO 8606
8652: POP
8653: POP
// end ; tmp := [ ] ;
8654: LD_ADDR_VAR 0 9
8658: PUSH
8659: EMPTY
8660: ST_TO_ADDR
// if mode then
8661: LD_VAR 0 5
8665: IFFALSE 8734
// begin for i = 1 to result do
8667: LD_ADDR_VAR 0 7
8671: PUSH
8672: DOUBLE
8673: LD_INT 1
8675: DEC
8676: ST_TO_ADDR
8677: LD_VAR 0 6
8681: PUSH
8682: FOR_TO
8683: IFFALSE 8722
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8685: LD_ADDR_VAR 0 9
8689: PUSH
8690: LD_VAR 0 9
8694: PPUSH
8695: LD_VAR 0 7
8699: PPUSH
8700: LD_VAR 0 6
8704: PUSH
8705: LD_VAR 0 7
8709: ARRAY
8710: PUSH
8711: LD_INT 1
8713: ARRAY
8714: PPUSH
8715: CALL_OW 1
8719: ST_TO_ADDR
8720: GO 8682
8722: POP
8723: POP
// result := tmp ;
8724: LD_ADDR_VAR 0 6
8728: PUSH
8729: LD_VAR 0 9
8733: ST_TO_ADDR
// end ; end ;
8734: LD_VAR 0 6
8738: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8739: LD_INT 0
8741: PPUSH
8742: PPUSH
8743: PPUSH
8744: PPUSH
8745: PPUSH
8746: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8747: LD_ADDR_VAR 0 5
8751: PUSH
8752: LD_INT 0
8754: PUSH
8755: LD_INT 0
8757: PUSH
8758: LD_INT 0
8760: PUSH
8761: EMPTY
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: ST_TO_ADDR
// if not x or not y then
8769: LD_VAR 0 2
8773: NOT
8774: PUSH
8775: LD_VAR 0 3
8779: NOT
8780: OR
8781: IFFALSE 8785
// exit ;
8783: GO 10431
// if not range then
8785: LD_VAR 0 4
8789: NOT
8790: IFFALSE 8800
// range := 10 ;
8792: LD_ADDR_VAR 0 4
8796: PUSH
8797: LD_INT 10
8799: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8800: LD_ADDR_VAR 0 8
8804: PUSH
8805: LD_INT 81
8807: PUSH
8808: LD_VAR 0 1
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 92
8819: PUSH
8820: LD_VAR 0 2
8824: PUSH
8825: LD_VAR 0 3
8829: PUSH
8830: LD_VAR 0 4
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 3
8843: PUSH
8844: LD_INT 21
8846: PUSH
8847: LD_INT 3
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: PPUSH
8863: CALL_OW 69
8867: ST_TO_ADDR
// if not tmp then
8868: LD_VAR 0 8
8872: NOT
8873: IFFALSE 8877
// exit ;
8875: GO 10431
// for i in tmp do
8877: LD_ADDR_VAR 0 6
8881: PUSH
8882: LD_VAR 0 8
8886: PUSH
8887: FOR_IN
8888: IFFALSE 10406
// begin points := [ 0 , 0 , 0 ] ;
8890: LD_ADDR_VAR 0 9
8894: PUSH
8895: LD_INT 0
8897: PUSH
8898: LD_INT 0
8900: PUSH
8901: LD_INT 0
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: ST_TO_ADDR
// bpoints := 1 ;
8909: LD_ADDR_VAR 0 10
8913: PUSH
8914: LD_INT 1
8916: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8917: LD_VAR 0 6
8921: PPUSH
8922: CALL_OW 247
8926: PUSH
8927: LD_INT 1
8929: DOUBLE
8930: EQUAL
8931: IFTRUE 8935
8933: GO 9513
8935: POP
// begin if GetClass ( i ) = 1 then
8936: LD_VAR 0 6
8940: PPUSH
8941: CALL_OW 257
8945: PUSH
8946: LD_INT 1
8948: EQUAL
8949: IFFALSE 8970
// points := [ 10 , 5 , 3 ] ;
8951: LD_ADDR_VAR 0 9
8955: PUSH
8956: LD_INT 10
8958: PUSH
8959: LD_INT 5
8961: PUSH
8962: LD_INT 3
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: LIST
8969: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8970: LD_VAR 0 6
8974: PPUSH
8975: CALL_OW 257
8979: PUSH
8980: LD_INT 2
8982: PUSH
8983: LD_INT 3
8985: PUSH
8986: LD_INT 4
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: IN
8994: IFFALSE 9015
// points := [ 3 , 2 , 1 ] ;
8996: LD_ADDR_VAR 0 9
9000: PUSH
9001: LD_INT 3
9003: PUSH
9004: LD_INT 2
9006: PUSH
9007: LD_INT 1
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: LIST
9014: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9015: LD_VAR 0 6
9019: PPUSH
9020: CALL_OW 257
9024: PUSH
9025: LD_INT 5
9027: EQUAL
9028: IFFALSE 9049
// points := [ 130 , 5 , 2 ] ;
9030: LD_ADDR_VAR 0 9
9034: PUSH
9035: LD_INT 130
9037: PUSH
9038: LD_INT 5
9040: PUSH
9041: LD_INT 2
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9049: LD_VAR 0 6
9053: PPUSH
9054: CALL_OW 257
9058: PUSH
9059: LD_INT 8
9061: EQUAL
9062: IFFALSE 9083
// points := [ 35 , 35 , 30 ] ;
9064: LD_ADDR_VAR 0 9
9068: PUSH
9069: LD_INT 35
9071: PUSH
9072: LD_INT 35
9074: PUSH
9075: LD_INT 30
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9083: LD_VAR 0 6
9087: PPUSH
9088: CALL_OW 257
9092: PUSH
9093: LD_INT 9
9095: EQUAL
9096: IFFALSE 9117
// points := [ 20 , 55 , 40 ] ;
9098: LD_ADDR_VAR 0 9
9102: PUSH
9103: LD_INT 20
9105: PUSH
9106: LD_INT 55
9108: PUSH
9109: LD_INT 40
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9117: LD_VAR 0 6
9121: PPUSH
9122: CALL_OW 257
9126: PUSH
9127: LD_INT 12
9129: PUSH
9130: LD_INT 16
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: IN
9137: IFFALSE 9158
// points := [ 5 , 3 , 2 ] ;
9139: LD_ADDR_VAR 0 9
9143: PUSH
9144: LD_INT 5
9146: PUSH
9147: LD_INT 3
9149: PUSH
9150: LD_INT 2
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9158: LD_VAR 0 6
9162: PPUSH
9163: CALL_OW 257
9167: PUSH
9168: LD_INT 17
9170: EQUAL
9171: IFFALSE 9192
// points := [ 100 , 50 , 75 ] ;
9173: LD_ADDR_VAR 0 9
9177: PUSH
9178: LD_INT 100
9180: PUSH
9181: LD_INT 50
9183: PUSH
9184: LD_INT 75
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: LIST
9191: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9192: LD_VAR 0 6
9196: PPUSH
9197: CALL_OW 257
9201: PUSH
9202: LD_INT 15
9204: EQUAL
9205: IFFALSE 9226
// points := [ 10 , 5 , 3 ] ;
9207: LD_ADDR_VAR 0 9
9211: PUSH
9212: LD_INT 10
9214: PUSH
9215: LD_INT 5
9217: PUSH
9218: LD_INT 3
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9226: LD_VAR 0 6
9230: PPUSH
9231: CALL_OW 257
9235: PUSH
9236: LD_INT 14
9238: EQUAL
9239: IFFALSE 9260
// points := [ 10 , 0 , 0 ] ;
9241: LD_ADDR_VAR 0 9
9245: PUSH
9246: LD_INT 10
9248: PUSH
9249: LD_INT 0
9251: PUSH
9252: LD_INT 0
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9260: LD_VAR 0 6
9264: PPUSH
9265: CALL_OW 257
9269: PUSH
9270: LD_INT 11
9272: EQUAL
9273: IFFALSE 9294
// points := [ 30 , 10 , 5 ] ;
9275: LD_ADDR_VAR 0 9
9279: PUSH
9280: LD_INT 30
9282: PUSH
9283: LD_INT 10
9285: PUSH
9286: LD_INT 5
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: LIST
9293: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9294: LD_VAR 0 1
9298: PPUSH
9299: LD_INT 5
9301: PPUSH
9302: CALL_OW 321
9306: PUSH
9307: LD_INT 2
9309: EQUAL
9310: IFFALSE 9327
// bpoints := bpoints * 1.8 ;
9312: LD_ADDR_VAR 0 10
9316: PUSH
9317: LD_VAR 0 10
9321: PUSH
9322: LD_REAL  1.80000000000000E+0000
9325: MUL
9326: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9327: LD_VAR 0 6
9331: PPUSH
9332: CALL_OW 257
9336: PUSH
9337: LD_INT 1
9339: PUSH
9340: LD_INT 2
9342: PUSH
9343: LD_INT 3
9345: PUSH
9346: LD_INT 4
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: IN
9355: PUSH
9356: LD_VAR 0 1
9360: PPUSH
9361: LD_INT 51
9363: PPUSH
9364: CALL_OW 321
9368: PUSH
9369: LD_INT 2
9371: EQUAL
9372: AND
9373: IFFALSE 9390
// bpoints := bpoints * 1.2 ;
9375: LD_ADDR_VAR 0 10
9379: PUSH
9380: LD_VAR 0 10
9384: PUSH
9385: LD_REAL  1.20000000000000E+0000
9388: MUL
9389: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9390: LD_VAR 0 6
9394: PPUSH
9395: CALL_OW 257
9399: PUSH
9400: LD_INT 5
9402: PUSH
9403: LD_INT 7
9405: PUSH
9406: LD_INT 9
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: IN
9414: PUSH
9415: LD_VAR 0 1
9419: PPUSH
9420: LD_INT 52
9422: PPUSH
9423: CALL_OW 321
9427: PUSH
9428: LD_INT 2
9430: EQUAL
9431: AND
9432: IFFALSE 9449
// bpoints := bpoints * 1.5 ;
9434: LD_ADDR_VAR 0 10
9438: PUSH
9439: LD_VAR 0 10
9443: PUSH
9444: LD_REAL  1.50000000000000E+0000
9447: MUL
9448: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9449: LD_VAR 0 1
9453: PPUSH
9454: LD_INT 66
9456: PPUSH
9457: CALL_OW 321
9461: PUSH
9462: LD_INT 2
9464: EQUAL
9465: IFFALSE 9482
// bpoints := bpoints * 1.1 ;
9467: LD_ADDR_VAR 0 10
9471: PUSH
9472: LD_VAR 0 10
9476: PUSH
9477: LD_REAL  1.10000000000000E+0000
9480: MUL
9481: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9482: LD_ADDR_VAR 0 10
9486: PUSH
9487: LD_VAR 0 10
9491: PUSH
9492: LD_VAR 0 6
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 259
9504: PUSH
9505: LD_REAL  1.15000000000000E+0000
9508: MUL
9509: MUL
9510: ST_TO_ADDR
// end ; unit_vehicle :
9511: GO 10335
9513: LD_INT 2
9515: DOUBLE
9516: EQUAL
9517: IFTRUE 9521
9519: GO 10323
9521: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9522: LD_VAR 0 6
9526: PPUSH
9527: CALL_OW 264
9531: PUSH
9532: LD_INT 2
9534: PUSH
9535: LD_INT 42
9537: PUSH
9538: LD_INT 24
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: IN
9546: IFFALSE 9567
// points := [ 25 , 5 , 3 ] ;
9548: LD_ADDR_VAR 0 9
9552: PUSH
9553: LD_INT 25
9555: PUSH
9556: LD_INT 5
9558: PUSH
9559: LD_INT 3
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9567: LD_VAR 0 6
9571: PPUSH
9572: CALL_OW 264
9576: PUSH
9577: LD_INT 4
9579: PUSH
9580: LD_INT 43
9582: PUSH
9583: LD_INT 25
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: IN
9591: IFFALSE 9612
// points := [ 40 , 15 , 5 ] ;
9593: LD_ADDR_VAR 0 9
9597: PUSH
9598: LD_INT 40
9600: PUSH
9601: LD_INT 15
9603: PUSH
9604: LD_INT 5
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: LIST
9611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9612: LD_VAR 0 6
9616: PPUSH
9617: CALL_OW 264
9621: PUSH
9622: LD_INT 3
9624: PUSH
9625: LD_INT 23
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: IN
9632: IFFALSE 9653
// points := [ 7 , 25 , 8 ] ;
9634: LD_ADDR_VAR 0 9
9638: PUSH
9639: LD_INT 7
9641: PUSH
9642: LD_INT 25
9644: PUSH
9645: LD_INT 8
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9653: LD_VAR 0 6
9657: PPUSH
9658: CALL_OW 264
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 27
9668: PUSH
9669: LD_INT 44
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: IN
9677: IFFALSE 9698
// points := [ 14 , 50 , 16 ] ;
9679: LD_ADDR_VAR 0 9
9683: PUSH
9684: LD_INT 14
9686: PUSH
9687: LD_INT 50
9689: PUSH
9690: LD_INT 16
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9698: LD_VAR 0 6
9702: PPUSH
9703: CALL_OW 264
9707: PUSH
9708: LD_INT 6
9710: PUSH
9711: LD_INT 46
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: IN
9718: IFFALSE 9739
// points := [ 32 , 120 , 70 ] ;
9720: LD_ADDR_VAR 0 9
9724: PUSH
9725: LD_INT 32
9727: PUSH
9728: LD_INT 120
9730: PUSH
9731: LD_INT 70
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
9739: LD_VAR 0 6
9743: PPUSH
9744: CALL_OW 264
9748: PUSH
9749: LD_INT 7
9751: PUSH
9752: LD_INT 28
9754: PUSH
9755: LD_INT 45
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: IN
9763: IFFALSE 9784
// points := [ 35 , 20 , 45 ] ;
9765: LD_ADDR_VAR 0 9
9769: PUSH
9770: LD_INT 35
9772: PUSH
9773: LD_INT 20
9775: PUSH
9776: LD_INT 45
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9784: LD_VAR 0 6
9788: PPUSH
9789: CALL_OW 264
9793: PUSH
9794: LD_INT 47
9796: PUSH
9797: EMPTY
9798: LIST
9799: IN
9800: IFFALSE 9821
// points := [ 67 , 45 , 75 ] ;
9802: LD_ADDR_VAR 0 9
9806: PUSH
9807: LD_INT 67
9809: PUSH
9810: LD_INT 45
9812: PUSH
9813: LD_INT 75
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9821: LD_VAR 0 6
9825: PPUSH
9826: CALL_OW 264
9830: PUSH
9831: LD_INT 26
9833: PUSH
9834: EMPTY
9835: LIST
9836: IN
9837: IFFALSE 9858
// points := [ 120 , 30 , 80 ] ;
9839: LD_ADDR_VAR 0 9
9843: PUSH
9844: LD_INT 120
9846: PUSH
9847: LD_INT 30
9849: PUSH
9850: LD_INT 80
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9858: LD_VAR 0 6
9862: PPUSH
9863: CALL_OW 264
9867: PUSH
9868: LD_INT 22
9870: PUSH
9871: EMPTY
9872: LIST
9873: IN
9874: IFFALSE 9895
// points := [ 40 , 1 , 1 ] ;
9876: LD_ADDR_VAR 0 9
9880: PUSH
9881: LD_INT 40
9883: PUSH
9884: LD_INT 1
9886: PUSH
9887: LD_INT 1
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9895: LD_VAR 0 6
9899: PPUSH
9900: CALL_OW 264
9904: PUSH
9905: LD_INT 29
9907: PUSH
9908: EMPTY
9909: LIST
9910: IN
9911: IFFALSE 9932
// points := [ 70 , 200 , 400 ] ;
9913: LD_ADDR_VAR 0 9
9917: PUSH
9918: LD_INT 70
9920: PUSH
9921: LD_INT 200
9923: PUSH
9924: LD_INT 400
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 264
9941: PUSH
9942: LD_INT 14
9944: PUSH
9945: LD_INT 53
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: IN
9952: IFFALSE 9973
// points := [ 40 , 10 , 20 ] ;
9954: LD_ADDR_VAR 0 9
9958: PUSH
9959: LD_INT 40
9961: PUSH
9962: LD_INT 10
9964: PUSH
9965: LD_INT 20
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9973: LD_VAR 0 6
9977: PPUSH
9978: CALL_OW 264
9982: PUSH
9983: LD_INT 9
9985: PUSH
9986: EMPTY
9987: LIST
9988: IN
9989: IFFALSE 10010
// points := [ 5 , 70 , 20 ] ;
9991: LD_ADDR_VAR 0 9
9995: PUSH
9996: LD_INT 5
9998: PUSH
9999: LD_INT 70
10001: PUSH
10002: LD_INT 20
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: LIST
10009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10010: LD_VAR 0 6
10014: PPUSH
10015: CALL_OW 264
10019: PUSH
10020: LD_INT 10
10022: PUSH
10023: EMPTY
10024: LIST
10025: IN
10026: IFFALSE 10047
// points := [ 35 , 110 , 70 ] ;
10028: LD_ADDR_VAR 0 9
10032: PUSH
10033: LD_INT 35
10035: PUSH
10036: LD_INT 110
10038: PUSH
10039: LD_INT 70
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10047: LD_VAR 0 6
10051: PPUSH
10052: CALL_OW 265
10056: PUSH
10057: LD_INT 25
10059: EQUAL
10060: IFFALSE 10081
// points := [ 80 , 65 , 100 ] ;
10062: LD_ADDR_VAR 0 9
10066: PUSH
10067: LD_INT 80
10069: PUSH
10070: LD_INT 65
10072: PUSH
10073: LD_INT 100
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: LIST
10080: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10081: LD_VAR 0 6
10085: PPUSH
10086: CALL_OW 263
10090: PUSH
10091: LD_INT 1
10093: EQUAL
10094: IFFALSE 10129
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10096: LD_ADDR_VAR 0 10
10100: PUSH
10101: LD_VAR 0 10
10105: PUSH
10106: LD_VAR 0 6
10110: PPUSH
10111: CALL_OW 311
10115: PPUSH
10116: LD_INT 3
10118: PPUSH
10119: CALL_OW 259
10123: PUSH
10124: LD_INT 4
10126: MUL
10127: MUL
10128: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10129: LD_VAR 0 6
10133: PPUSH
10134: CALL_OW 263
10138: PUSH
10139: LD_INT 2
10141: EQUAL
10142: IFFALSE 10193
// begin j := IsControledBy ( i ) ;
10144: LD_ADDR_VAR 0 7
10148: PUSH
10149: LD_VAR 0 6
10153: PPUSH
10154: CALL_OW 312
10158: ST_TO_ADDR
// if j then
10159: LD_VAR 0 7
10163: IFFALSE 10193
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10165: LD_ADDR_VAR 0 10
10169: PUSH
10170: LD_VAR 0 10
10174: PUSH
10175: LD_VAR 0 7
10179: PPUSH
10180: LD_INT 3
10182: PPUSH
10183: CALL_OW 259
10187: PUSH
10188: LD_INT 3
10190: MUL
10191: MUL
10192: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10193: LD_VAR 0 6
10197: PPUSH
10198: CALL_OW 264
10202: PUSH
10203: LD_INT 5
10205: PUSH
10206: LD_INT 6
10208: PUSH
10209: LD_INT 46
10211: PUSH
10212: LD_INT 44
10214: PUSH
10215: LD_INT 47
10217: PUSH
10218: LD_INT 45
10220: PUSH
10221: LD_INT 28
10223: PUSH
10224: LD_INT 7
10226: PUSH
10227: LD_INT 27
10229: PUSH
10230: LD_INT 29
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: IN
10245: PUSH
10246: LD_VAR 0 1
10250: PPUSH
10251: LD_INT 52
10253: PPUSH
10254: CALL_OW 321
10258: PUSH
10259: LD_INT 2
10261: EQUAL
10262: AND
10263: IFFALSE 10280
// bpoints := bpoints * 1.2 ;
10265: LD_ADDR_VAR 0 10
10269: PUSH
10270: LD_VAR 0 10
10274: PUSH
10275: LD_REAL  1.20000000000000E+0000
10278: MUL
10279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10280: LD_VAR 0 6
10284: PPUSH
10285: CALL_OW 264
10289: PUSH
10290: LD_INT 6
10292: PUSH
10293: LD_INT 46
10295: PUSH
10296: LD_INT 47
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: IN
10304: IFFALSE 10321
// bpoints := bpoints * 1.2 ;
10306: LD_ADDR_VAR 0 10
10310: PUSH
10311: LD_VAR 0 10
10315: PUSH
10316: LD_REAL  1.20000000000000E+0000
10319: MUL
10320: ST_TO_ADDR
// end ; unit_building :
10321: GO 10335
10323: LD_INT 3
10325: DOUBLE
10326: EQUAL
10327: IFTRUE 10331
10329: GO 10334
10331: POP
// ; end ;
10332: GO 10335
10334: POP
// for j = 1 to 3 do
10335: LD_ADDR_VAR 0 7
10339: PUSH
10340: DOUBLE
10341: LD_INT 1
10343: DEC
10344: ST_TO_ADDR
10345: LD_INT 3
10347: PUSH
10348: FOR_TO
10349: IFFALSE 10402
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10351: LD_ADDR_VAR 0 5
10355: PUSH
10356: LD_VAR 0 5
10360: PPUSH
10361: LD_VAR 0 7
10365: PPUSH
10366: LD_VAR 0 5
10370: PUSH
10371: LD_VAR 0 7
10375: ARRAY
10376: PUSH
10377: LD_VAR 0 9
10381: PUSH
10382: LD_VAR 0 7
10386: ARRAY
10387: PUSH
10388: LD_VAR 0 10
10392: MUL
10393: PLUS
10394: PPUSH
10395: CALL_OW 1
10399: ST_TO_ADDR
10400: GO 10348
10402: POP
10403: POP
// end ;
10404: GO 8887
10406: POP
10407: POP
// result := Replace ( result , 4 , tmp ) ;
10408: LD_ADDR_VAR 0 5
10412: PUSH
10413: LD_VAR 0 5
10417: PPUSH
10418: LD_INT 4
10420: PPUSH
10421: LD_VAR 0 8
10425: PPUSH
10426: CALL_OW 1
10430: ST_TO_ADDR
// end ;
10431: LD_VAR 0 5
10435: RET
// export function DangerAtRange ( unit , range ) ; begin
10436: LD_INT 0
10438: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10439: LD_ADDR_VAR 0 3
10443: PUSH
10444: LD_VAR 0 1
10448: PPUSH
10449: CALL_OW 255
10453: PPUSH
10454: LD_VAR 0 1
10458: PPUSH
10459: CALL_OW 250
10463: PPUSH
10464: LD_VAR 0 1
10468: PPUSH
10469: CALL_OW 251
10473: PPUSH
10474: LD_VAR 0 2
10478: PPUSH
10479: CALL 8739 0 4
10483: ST_TO_ADDR
// end ;
10484: LD_VAR 0 3
10488: RET
// export function DangerInArea ( side , area ) ; begin
10489: LD_INT 0
10491: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10492: LD_ADDR_VAR 0 3
10496: PUSH
10497: LD_VAR 0 2
10501: PPUSH
10502: LD_INT 81
10504: PUSH
10505: LD_VAR 0 1
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PPUSH
10514: CALL_OW 70
10518: ST_TO_ADDR
// end ;
10519: LD_VAR 0 3
10523: RET
// export function IsExtension ( b ) ; begin
10524: LD_INT 0
10526: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10527: LD_ADDR_VAR 0 2
10531: PUSH
10532: LD_VAR 0 1
10536: PUSH
10537: LD_INT 23
10539: PUSH
10540: LD_INT 20
10542: PUSH
10543: LD_INT 22
10545: PUSH
10546: LD_INT 17
10548: PUSH
10549: LD_INT 24
10551: PUSH
10552: LD_INT 21
10554: PUSH
10555: LD_INT 19
10557: PUSH
10558: LD_INT 16
10560: PUSH
10561: LD_INT 25
10563: PUSH
10564: LD_INT 18
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: IN
10579: ST_TO_ADDR
// end ;
10580: LD_VAR 0 2
10584: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10585: LD_INT 0
10587: PPUSH
10588: PPUSH
10589: PPUSH
// result := [ ] ;
10590: LD_ADDR_VAR 0 4
10594: PUSH
10595: EMPTY
10596: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10597: LD_ADDR_VAR 0 5
10601: PUSH
10602: LD_VAR 0 2
10606: PPUSH
10607: LD_INT 21
10609: PUSH
10610: LD_INT 3
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: CALL_OW 70
10621: ST_TO_ADDR
// if not tmp then
10622: LD_VAR 0 5
10626: NOT
10627: IFFALSE 10631
// exit ;
10629: GO 10695
// if checkLink then
10631: LD_VAR 0 3
10635: IFFALSE 10685
// begin for i in tmp do
10637: LD_ADDR_VAR 0 6
10641: PUSH
10642: LD_VAR 0 5
10646: PUSH
10647: FOR_IN
10648: IFFALSE 10683
// if GetBase ( i ) <> base then
10650: LD_VAR 0 6
10654: PPUSH
10655: CALL_OW 274
10659: PUSH
10660: LD_VAR 0 1
10664: NONEQUAL
10665: IFFALSE 10681
// ComLinkToBase ( base , i ) ;
10667: LD_VAR 0 1
10671: PPUSH
10672: LD_VAR 0 6
10676: PPUSH
10677: CALL_OW 169
10681: GO 10647
10683: POP
10684: POP
// end ; result := tmp ;
10685: LD_ADDR_VAR 0 4
10689: PUSH
10690: LD_VAR 0 5
10694: ST_TO_ADDR
// end ;
10695: LD_VAR 0 4
10699: RET
// export function ComComplete ( units , b ) ; var i ; begin
10700: LD_INT 0
10702: PPUSH
10703: PPUSH
// if not units then
10704: LD_VAR 0 1
10708: NOT
10709: IFFALSE 10713
// exit ;
10711: GO 10803
// for i in units do
10713: LD_ADDR_VAR 0 4
10717: PUSH
10718: LD_VAR 0 1
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10801
// if BuildingStatus ( b ) = bs_build then
10726: LD_VAR 0 2
10730: PPUSH
10731: CALL_OW 461
10735: PUSH
10736: LD_INT 1
10738: EQUAL
10739: IFFALSE 10799
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10741: LD_VAR 0 4
10745: PPUSH
10746: LD_STRING h
10748: PUSH
10749: LD_VAR 0 2
10753: PPUSH
10754: CALL_OW 250
10758: PUSH
10759: LD_VAR 0 2
10763: PPUSH
10764: CALL_OW 251
10768: PUSH
10769: LD_VAR 0 2
10773: PUSH
10774: LD_INT 0
10776: PUSH
10777: LD_INT 0
10779: PUSH
10780: LD_INT 0
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: PPUSH
10795: CALL_OW 446
10799: GO 10723
10801: POP
10802: POP
// end ;
10803: LD_VAR 0 3
10807: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10808: LD_INT 0
10810: PPUSH
10811: PPUSH
10812: PPUSH
10813: PPUSH
10814: PPUSH
10815: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
10816: LD_VAR 0 1
10820: NOT
10821: PUSH
10822: LD_VAR 0 1
10826: PPUSH
10827: CALL_OW 263
10831: PUSH
10832: LD_INT 2
10834: EQUAL
10835: NOT
10836: OR
10837: IFFALSE 10841
// exit ;
10839: GO 11157
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10841: LD_ADDR_VAR 0 6
10845: PUSH
10846: LD_INT 22
10848: PUSH
10849: LD_VAR 0 1
10853: PPUSH
10854: CALL_OW 255
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 2
10865: PUSH
10866: LD_INT 30
10868: PUSH
10869: LD_INT 36
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 34
10878: PUSH
10879: LD_INT 31
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: ST_TO_ADDR
// if not tmp then
10900: LD_VAR 0 6
10904: NOT
10905: IFFALSE 10909
// exit ;
10907: GO 11157
// result := [ ] ;
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: EMPTY
10915: ST_TO_ADDR
// for i in tmp do
10916: LD_ADDR_VAR 0 3
10920: PUSH
10921: LD_VAR 0 6
10925: PUSH
10926: FOR_IN
10927: IFFALSE 10998
// begin t := UnitsInside ( i ) ;
10929: LD_ADDR_VAR 0 4
10933: PUSH
10934: LD_VAR 0 3
10938: PPUSH
10939: CALL_OW 313
10943: ST_TO_ADDR
// if t then
10944: LD_VAR 0 4
10948: IFFALSE 10996
// for j in t do
10950: LD_ADDR_VAR 0 7
10954: PUSH
10955: LD_VAR 0 4
10959: PUSH
10960: FOR_IN
10961: IFFALSE 10994
// result := Insert ( result , result + 1 , j ) ;
10963: LD_ADDR_VAR 0 2
10967: PUSH
10968: LD_VAR 0 2
10972: PPUSH
10973: LD_VAR 0 2
10977: PUSH
10978: LD_INT 1
10980: PLUS
10981: PPUSH
10982: LD_VAR 0 7
10986: PPUSH
10987: CALL_OW 2
10991: ST_TO_ADDR
10992: GO 10960
10994: POP
10995: POP
// end ;
10996: GO 10926
10998: POP
10999: POP
// if not result then
11000: LD_VAR 0 2
11004: NOT
11005: IFFALSE 11009
// exit ;
11007: GO 11157
// mech := result [ 1 ] ;
11009: LD_ADDR_VAR 0 5
11013: PUSH
11014: LD_VAR 0 2
11018: PUSH
11019: LD_INT 1
11021: ARRAY
11022: ST_TO_ADDR
// if result > 1 then
11023: LD_VAR 0 2
11027: PUSH
11028: LD_INT 1
11030: GREATER
11031: IFFALSE 11143
// for i = 2 to result do
11033: LD_ADDR_VAR 0 3
11037: PUSH
11038: DOUBLE
11039: LD_INT 2
11041: DEC
11042: ST_TO_ADDR
11043: LD_VAR 0 2
11047: PUSH
11048: FOR_TO
11049: IFFALSE 11141
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11051: LD_ADDR_VAR 0 4
11055: PUSH
11056: LD_VAR 0 2
11060: PUSH
11061: LD_VAR 0 3
11065: ARRAY
11066: PPUSH
11067: LD_INT 3
11069: PPUSH
11070: CALL_OW 259
11074: PUSH
11075: LD_VAR 0 2
11079: PUSH
11080: LD_VAR 0 3
11084: ARRAY
11085: PPUSH
11086: CALL_OW 432
11090: MINUS
11091: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11092: LD_VAR 0 4
11096: PUSH
11097: LD_VAR 0 5
11101: PPUSH
11102: LD_INT 3
11104: PPUSH
11105: CALL_OW 259
11109: PUSH
11110: LD_VAR 0 5
11114: PPUSH
11115: CALL_OW 432
11119: MINUS
11120: GREATEREQUAL
11121: IFFALSE 11139
// mech := result [ i ] ;
11123: LD_ADDR_VAR 0 5
11127: PUSH
11128: LD_VAR 0 2
11132: PUSH
11133: LD_VAR 0 3
11137: ARRAY
11138: ST_TO_ADDR
// end ;
11139: GO 11048
11141: POP
11142: POP
// ComLinkTo ( vehicle , mech ) ;
11143: LD_VAR 0 1
11147: PPUSH
11148: LD_VAR 0 5
11152: PPUSH
11153: CALL_OW 135
// end ;
11157: LD_VAR 0 2
11161: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11162: LD_INT 0
11164: PPUSH
11165: PPUSH
11166: PPUSH
11167: PPUSH
11168: PPUSH
11169: PPUSH
11170: PPUSH
11171: PPUSH
11172: PPUSH
11173: PPUSH
11174: PPUSH
11175: PPUSH
11176: PPUSH
// result := [ ] ;
11177: LD_ADDR_VAR 0 7
11181: PUSH
11182: EMPTY
11183: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 266
11193: PUSH
11194: LD_INT 0
11196: PUSH
11197: LD_INT 1
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: IN
11204: NOT
11205: IFFALSE 11209
// exit ;
11207: GO 12843
// if name then
11209: LD_VAR 0 3
11213: IFFALSE 11229
// SetBName ( base_dep , name ) ;
11215: LD_VAR 0 1
11219: PPUSH
11220: LD_VAR 0 3
11224: PPUSH
11225: CALL_OW 500
// base := GetBase ( base_dep ) ;
11229: LD_ADDR_VAR 0 15
11233: PUSH
11234: LD_VAR 0 1
11238: PPUSH
11239: CALL_OW 274
11243: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11244: LD_ADDR_VAR 0 16
11248: PUSH
11249: LD_VAR 0 1
11253: PPUSH
11254: CALL_OW 255
11258: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11259: LD_ADDR_VAR 0 17
11263: PUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 248
11273: ST_TO_ADDR
// if sources then
11274: LD_VAR 0 5
11278: IFFALSE 11325
// for i = 1 to 3 do
11280: LD_ADDR_VAR 0 8
11284: PUSH
11285: DOUBLE
11286: LD_INT 1
11288: DEC
11289: ST_TO_ADDR
11290: LD_INT 3
11292: PUSH
11293: FOR_TO
11294: IFFALSE 11323
// AddResourceType ( base , i , sources [ i ] ) ;
11296: LD_VAR 0 15
11300: PPUSH
11301: LD_VAR 0 8
11305: PPUSH
11306: LD_VAR 0 5
11310: PUSH
11311: LD_VAR 0 8
11315: ARRAY
11316: PPUSH
11317: CALL_OW 276
11321: GO 11293
11323: POP
11324: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11325: LD_ADDR_VAR 0 18
11329: PUSH
11330: LD_VAR 0 15
11334: PPUSH
11335: LD_VAR 0 2
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: CALL 10585 0 3
11347: ST_TO_ADDR
// InitHc ;
11348: CALL_OW 19
// InitUc ;
11352: CALL_OW 18
// uc_side := side ;
11356: LD_ADDR_OWVAR 20
11360: PUSH
11361: LD_VAR 0 16
11365: ST_TO_ADDR
// uc_nation := nation ;
11366: LD_ADDR_OWVAR 21
11370: PUSH
11371: LD_VAR 0 17
11375: ST_TO_ADDR
// if buildings then
11376: LD_VAR 0 18
11380: IFFALSE 12702
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11382: LD_ADDR_VAR 0 19
11386: PUSH
11387: LD_VAR 0 18
11391: PPUSH
11392: LD_INT 2
11394: PUSH
11395: LD_INT 30
11397: PUSH
11398: LD_INT 29
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 30
11407: PUSH
11408: LD_INT 30
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 72
11424: ST_TO_ADDR
// if tmp then
11425: LD_VAR 0 19
11429: IFFALSE 11477
// for i in tmp do
11431: LD_ADDR_VAR 0 8
11435: PUSH
11436: LD_VAR 0 19
11440: PUSH
11441: FOR_IN
11442: IFFALSE 11475
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11444: LD_VAR 0 8
11448: PPUSH
11449: CALL_OW 250
11453: PPUSH
11454: LD_VAR 0 8
11458: PPUSH
11459: CALL_OW 251
11463: PPUSH
11464: LD_VAR 0 16
11468: PPUSH
11469: CALL_OW 441
11473: GO 11441
11475: POP
11476: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11477: LD_VAR 0 18
11481: PPUSH
11482: LD_INT 2
11484: PUSH
11485: LD_INT 30
11487: PUSH
11488: LD_INT 32
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 30
11497: PUSH
11498: LD_INT 33
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: PPUSH
11510: CALL_OW 72
11514: IFFALSE 11602
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11516: LD_ADDR_VAR 0 8
11520: PUSH
11521: LD_VAR 0 18
11525: PPUSH
11526: LD_INT 2
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_INT 32
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 30
11541: PUSH
11542: LD_INT 33
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: LIST
11553: PPUSH
11554: CALL_OW 72
11558: PUSH
11559: FOR_IN
11560: IFFALSE 11600
// begin if not GetBWeapon ( i ) then
11562: LD_VAR 0 8
11566: PPUSH
11567: CALL_OW 269
11571: NOT
11572: IFFALSE 11598
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11574: LD_VAR 0 8
11578: PPUSH
11579: LD_VAR 0 8
11583: PPUSH
11584: LD_VAR 0 2
11588: PPUSH
11589: CALL 12848 0 2
11593: PPUSH
11594: CALL_OW 431
// end ;
11598: GO 11559
11600: POP
11601: POP
// end ; for i = 1 to personel do
11602: LD_ADDR_VAR 0 8
11606: PUSH
11607: DOUBLE
11608: LD_INT 1
11610: DEC
11611: ST_TO_ADDR
11612: LD_VAR 0 6
11616: PUSH
11617: FOR_TO
11618: IFFALSE 12682
// begin if i > 4 then
11620: LD_VAR 0 8
11624: PUSH
11625: LD_INT 4
11627: GREATER
11628: IFFALSE 11632
// break ;
11630: GO 12682
// case i of 1 :
11632: LD_VAR 0 8
11636: PUSH
11637: LD_INT 1
11639: DOUBLE
11640: EQUAL
11641: IFTRUE 11645
11643: GO 11725
11645: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11646: LD_ADDR_VAR 0 12
11650: PUSH
11651: LD_VAR 0 18
11655: PPUSH
11656: LD_INT 22
11658: PUSH
11659: LD_VAR 0 16
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 58
11670: PUSH
11671: EMPTY
11672: LIST
11673: PUSH
11674: LD_INT 2
11676: PUSH
11677: LD_INT 30
11679: PUSH
11680: LD_INT 32
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 30
11689: PUSH
11690: LD_INT 4
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 30
11699: PUSH
11700: LD_INT 5
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 72
11722: ST_TO_ADDR
11723: GO 11947
11725: LD_INT 2
11727: DOUBLE
11728: EQUAL
11729: IFTRUE 11733
11731: GO 11795
11733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11734: LD_ADDR_VAR 0 12
11738: PUSH
11739: LD_VAR 0 18
11743: PPUSH
11744: LD_INT 22
11746: PUSH
11747: LD_VAR 0 16
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 2
11758: PUSH
11759: LD_INT 30
11761: PUSH
11762: LD_INT 0
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 30
11771: PUSH
11772: LD_INT 1
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 72
11792: ST_TO_ADDR
11793: GO 11947
11795: LD_INT 3
11797: DOUBLE
11798: EQUAL
11799: IFTRUE 11803
11801: GO 11865
11803: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11804: LD_ADDR_VAR 0 12
11808: PUSH
11809: LD_VAR 0 18
11813: PPUSH
11814: LD_INT 22
11816: PUSH
11817: LD_VAR 0 16
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 2
11828: PUSH
11829: LD_INT 30
11831: PUSH
11832: LD_INT 2
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 30
11841: PUSH
11842: LD_INT 3
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: ST_TO_ADDR
11863: GO 11947
11865: LD_INT 4
11867: DOUBLE
11868: EQUAL
11869: IFTRUE 11873
11871: GO 11946
11873: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11874: LD_ADDR_VAR 0 12
11878: PUSH
11879: LD_VAR 0 18
11883: PPUSH
11884: LD_INT 22
11886: PUSH
11887: LD_VAR 0 16
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 2
11898: PUSH
11899: LD_INT 30
11901: PUSH
11902: LD_INT 6
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 30
11911: PUSH
11912: LD_INT 7
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 30
11921: PUSH
11922: LD_INT 8
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PPUSH
11939: CALL_OW 72
11943: ST_TO_ADDR
11944: GO 11947
11946: POP
// if i = 1 then
11947: LD_VAR 0 8
11951: PUSH
11952: LD_INT 1
11954: EQUAL
11955: IFFALSE 12066
// begin tmp := [ ] ;
11957: LD_ADDR_VAR 0 19
11961: PUSH
11962: EMPTY
11963: ST_TO_ADDR
// for j in f do
11964: LD_ADDR_VAR 0 9
11968: PUSH
11969: LD_VAR 0 12
11973: PUSH
11974: FOR_IN
11975: IFFALSE 12048
// if GetBType ( j ) = b_bunker then
11977: LD_VAR 0 9
11981: PPUSH
11982: CALL_OW 266
11986: PUSH
11987: LD_INT 32
11989: EQUAL
11990: IFFALSE 12017
// tmp := Insert ( tmp , 1 , j ) else
11992: LD_ADDR_VAR 0 19
11996: PUSH
11997: LD_VAR 0 19
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: LD_VAR 0 9
12009: PPUSH
12010: CALL_OW 2
12014: ST_TO_ADDR
12015: GO 12046
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12017: LD_ADDR_VAR 0 19
12021: PUSH
12022: LD_VAR 0 19
12026: PPUSH
12027: LD_VAR 0 19
12031: PUSH
12032: LD_INT 1
12034: PLUS
12035: PPUSH
12036: LD_VAR 0 9
12040: PPUSH
12041: CALL_OW 2
12045: ST_TO_ADDR
12046: GO 11974
12048: POP
12049: POP
// if tmp then
12050: LD_VAR 0 19
12054: IFFALSE 12066
// f := tmp ;
12056: LD_ADDR_VAR 0 12
12060: PUSH
12061: LD_VAR 0 19
12065: ST_TO_ADDR
// end ; x := personel [ i ] ;
12066: LD_ADDR_VAR 0 13
12070: PUSH
12071: LD_VAR 0 6
12075: PUSH
12076: LD_VAR 0 8
12080: ARRAY
12081: ST_TO_ADDR
// if x = - 1 then
12082: LD_VAR 0 13
12086: PUSH
12087: LD_INT 1
12089: NEG
12090: EQUAL
12091: IFFALSE 12300
// begin for j in f do
12093: LD_ADDR_VAR 0 9
12097: PUSH
12098: LD_VAR 0 12
12102: PUSH
12103: FOR_IN
12104: IFFALSE 12296
// repeat InitHc ;
12106: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12110: LD_VAR 0 9
12114: PPUSH
12115: CALL_OW 266
12119: PUSH
12120: LD_INT 5
12122: EQUAL
12123: IFFALSE 12193
// begin if UnitsInside ( j ) < 3 then
12125: LD_VAR 0 9
12129: PPUSH
12130: CALL_OW 313
12134: PUSH
12135: LD_INT 3
12137: LESS
12138: IFFALSE 12174
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12140: LD_INT 0
12142: PPUSH
12143: LD_INT 5
12145: PUSH
12146: LD_INT 8
12148: PUSH
12149: LD_INT 9
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: LIST
12156: PUSH
12157: LD_VAR 0 17
12161: ARRAY
12162: PPUSH
12163: LD_VAR 0 4
12167: PPUSH
12168: CALL_OW 380
12172: GO 12191
// PrepareHuman ( false , i , skill ) ;
12174: LD_INT 0
12176: PPUSH
12177: LD_VAR 0 8
12181: PPUSH
12182: LD_VAR 0 4
12186: PPUSH
12187: CALL_OW 380
// end else
12191: GO 12210
// PrepareHuman ( false , i , skill ) ;
12193: LD_INT 0
12195: PPUSH
12196: LD_VAR 0 8
12200: PPUSH
12201: LD_VAR 0 4
12205: PPUSH
12206: CALL_OW 380
// un := CreateHuman ;
12210: LD_ADDR_VAR 0 14
12214: PUSH
12215: CALL_OW 44
12219: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12220: LD_ADDR_VAR 0 7
12224: PUSH
12225: LD_VAR 0 7
12229: PPUSH
12230: LD_INT 1
12232: PPUSH
12233: LD_VAR 0 14
12237: PPUSH
12238: CALL_OW 2
12242: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12243: LD_VAR 0 14
12247: PPUSH
12248: LD_VAR 0 9
12252: PPUSH
12253: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12257: LD_VAR 0 9
12261: PPUSH
12262: CALL_OW 313
12266: PUSH
12267: LD_INT 6
12269: EQUAL
12270: PUSH
12271: LD_VAR 0 9
12275: PPUSH
12276: CALL_OW 266
12280: PUSH
12281: LD_INT 32
12283: PUSH
12284: LD_INT 31
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: IN
12291: OR
12292: IFFALSE 12106
12294: GO 12103
12296: POP
12297: POP
// end else
12298: GO 12680
// for j = 1 to x do
12300: LD_ADDR_VAR 0 9
12304: PUSH
12305: DOUBLE
12306: LD_INT 1
12308: DEC
12309: ST_TO_ADDR
12310: LD_VAR 0 13
12314: PUSH
12315: FOR_TO
12316: IFFALSE 12678
// begin InitHc ;
12318: CALL_OW 19
// if not f then
12322: LD_VAR 0 12
12326: NOT
12327: IFFALSE 12416
// begin PrepareHuman ( false , i , skill ) ;
12329: LD_INT 0
12331: PPUSH
12332: LD_VAR 0 8
12336: PPUSH
12337: LD_VAR 0 4
12341: PPUSH
12342: CALL_OW 380
// un := CreateHuman ;
12346: LD_ADDR_VAR 0 14
12350: PUSH
12351: CALL_OW 44
12355: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12356: LD_ADDR_VAR 0 7
12360: PUSH
12361: LD_VAR 0 7
12365: PPUSH
12366: LD_INT 1
12368: PPUSH
12369: LD_VAR 0 14
12373: PPUSH
12374: CALL_OW 2
12378: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12379: LD_VAR 0 14
12383: PPUSH
12384: LD_VAR 0 1
12388: PPUSH
12389: CALL_OW 250
12393: PPUSH
12394: LD_VAR 0 1
12398: PPUSH
12399: CALL_OW 251
12403: PPUSH
12404: LD_INT 10
12406: PPUSH
12407: LD_INT 0
12409: PPUSH
12410: CALL_OW 50
// continue ;
12414: GO 12315
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12416: LD_VAR 0 12
12420: PUSH
12421: LD_INT 1
12423: ARRAY
12424: PPUSH
12425: CALL_OW 313
12429: PUSH
12430: LD_VAR 0 12
12434: PUSH
12435: LD_INT 1
12437: ARRAY
12438: PPUSH
12439: CALL_OW 266
12443: PUSH
12444: LD_INT 32
12446: PUSH
12447: LD_INT 31
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: IN
12454: AND
12455: PUSH
12456: LD_VAR 0 12
12460: PUSH
12461: LD_INT 1
12463: ARRAY
12464: PPUSH
12465: CALL_OW 313
12469: PUSH
12470: LD_INT 6
12472: EQUAL
12473: OR
12474: IFFALSE 12494
// f := Delete ( f , 1 ) ;
12476: LD_ADDR_VAR 0 12
12480: PUSH
12481: LD_VAR 0 12
12485: PPUSH
12486: LD_INT 1
12488: PPUSH
12489: CALL_OW 3
12493: ST_TO_ADDR
// if not f then
12494: LD_VAR 0 12
12498: NOT
12499: IFFALSE 12517
// begin x := x + 2 ;
12501: LD_ADDR_VAR 0 13
12505: PUSH
12506: LD_VAR 0 13
12510: PUSH
12511: LD_INT 2
12513: PLUS
12514: ST_TO_ADDR
// continue ;
12515: GO 12315
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12517: LD_VAR 0 12
12521: PUSH
12522: LD_INT 1
12524: ARRAY
12525: PPUSH
12526: CALL_OW 266
12530: PUSH
12531: LD_INT 5
12533: EQUAL
12534: IFFALSE 12608
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12536: LD_VAR 0 12
12540: PUSH
12541: LD_INT 1
12543: ARRAY
12544: PPUSH
12545: CALL_OW 313
12549: PUSH
12550: LD_INT 3
12552: LESS
12553: IFFALSE 12589
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12555: LD_INT 0
12557: PPUSH
12558: LD_INT 5
12560: PUSH
12561: LD_INT 8
12563: PUSH
12564: LD_INT 9
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: PUSH
12572: LD_VAR 0 17
12576: ARRAY
12577: PPUSH
12578: LD_VAR 0 4
12582: PPUSH
12583: CALL_OW 380
12587: GO 12606
// PrepareHuman ( false , i , skill ) ;
12589: LD_INT 0
12591: PPUSH
12592: LD_VAR 0 8
12596: PPUSH
12597: LD_VAR 0 4
12601: PPUSH
12602: CALL_OW 380
// end else
12606: GO 12625
// PrepareHuman ( false , i , skill ) ;
12608: LD_INT 0
12610: PPUSH
12611: LD_VAR 0 8
12615: PPUSH
12616: LD_VAR 0 4
12620: PPUSH
12621: CALL_OW 380
// un := CreateHuman ;
12625: LD_ADDR_VAR 0 14
12629: PUSH
12630: CALL_OW 44
12634: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12635: LD_ADDR_VAR 0 7
12639: PUSH
12640: LD_VAR 0 7
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: LD_VAR 0 14
12652: PPUSH
12653: CALL_OW 2
12657: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12658: LD_VAR 0 14
12662: PPUSH
12663: LD_VAR 0 12
12667: PUSH
12668: LD_INT 1
12670: ARRAY
12671: PPUSH
12672: CALL_OW 52
// end ;
12676: GO 12315
12678: POP
12679: POP
// end ;
12680: GO 11617
12682: POP
12683: POP
// result := result ^ buildings ;
12684: LD_ADDR_VAR 0 7
12688: PUSH
12689: LD_VAR 0 7
12693: PUSH
12694: LD_VAR 0 18
12698: ADD
12699: ST_TO_ADDR
// end else
12700: GO 12843
// begin for i = 1 to personel do
12702: LD_ADDR_VAR 0 8
12706: PUSH
12707: DOUBLE
12708: LD_INT 1
12710: DEC
12711: ST_TO_ADDR
12712: LD_VAR 0 6
12716: PUSH
12717: FOR_TO
12718: IFFALSE 12841
// begin if i > 4 then
12720: LD_VAR 0 8
12724: PUSH
12725: LD_INT 4
12727: GREATER
12728: IFFALSE 12732
// break ;
12730: GO 12841
// x := personel [ i ] ;
12732: LD_ADDR_VAR 0 13
12736: PUSH
12737: LD_VAR 0 6
12741: PUSH
12742: LD_VAR 0 8
12746: ARRAY
12747: ST_TO_ADDR
// if x = - 1 then
12748: LD_VAR 0 13
12752: PUSH
12753: LD_INT 1
12755: NEG
12756: EQUAL
12757: IFFALSE 12761
// continue ;
12759: GO 12717
// PrepareHuman ( false , i , skill ) ;
12761: LD_INT 0
12763: PPUSH
12764: LD_VAR 0 8
12768: PPUSH
12769: LD_VAR 0 4
12773: PPUSH
12774: CALL_OW 380
// un := CreateHuman ;
12778: LD_ADDR_VAR 0 14
12782: PUSH
12783: CALL_OW 44
12787: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12788: LD_VAR 0 14
12792: PPUSH
12793: LD_VAR 0 1
12797: PPUSH
12798: CALL_OW 250
12802: PPUSH
12803: LD_VAR 0 1
12807: PPUSH
12808: CALL_OW 251
12812: PPUSH
12813: LD_INT 10
12815: PPUSH
12816: LD_INT 0
12818: PPUSH
12819: CALL_OW 50
// result := result ^ un ;
12823: LD_ADDR_VAR 0 7
12827: PUSH
12828: LD_VAR 0 7
12832: PUSH
12833: LD_VAR 0 14
12837: ADD
12838: ST_TO_ADDR
// end ;
12839: GO 12717
12841: POP
12842: POP
// end ; end ;
12843: LD_VAR 0 7
12847: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12848: LD_INT 0
12850: PPUSH
12851: PPUSH
12852: PPUSH
12853: PPUSH
12854: PPUSH
12855: PPUSH
12856: PPUSH
12857: PPUSH
12858: PPUSH
12859: PPUSH
12860: PPUSH
12861: PPUSH
12862: PPUSH
12863: PPUSH
12864: PPUSH
12865: PPUSH
// result := false ;
12866: LD_ADDR_VAR 0 3
12870: PUSH
12871: LD_INT 0
12873: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12874: LD_VAR 0 1
12878: NOT
12879: PUSH
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 266
12889: PUSH
12890: LD_INT 32
12892: PUSH
12893: LD_INT 33
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: IN
12900: NOT
12901: OR
12902: IFFALSE 12906
// exit ;
12904: GO 14045
// nat := GetNation ( tower ) ;
12906: LD_ADDR_VAR 0 12
12910: PUSH
12911: LD_VAR 0 1
12915: PPUSH
12916: CALL_OW 248
12920: ST_TO_ADDR
// side := GetSide ( tower ) ;
12921: LD_ADDR_VAR 0 16
12925: PUSH
12926: LD_VAR 0 1
12930: PPUSH
12931: CALL_OW 255
12935: ST_TO_ADDR
// x := GetX ( tower ) ;
12936: LD_ADDR_VAR 0 10
12940: PUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 250
12950: ST_TO_ADDR
// y := GetY ( tower ) ;
12951: LD_ADDR_VAR 0 11
12955: PUSH
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 251
12965: ST_TO_ADDR
// if not x or not y then
12966: LD_VAR 0 10
12970: NOT
12971: PUSH
12972: LD_VAR 0 11
12976: NOT
12977: OR
12978: IFFALSE 12982
// exit ;
12980: GO 14045
// weapon := 0 ;
12982: LD_ADDR_VAR 0 18
12986: PUSH
12987: LD_INT 0
12989: ST_TO_ADDR
// fac_list := [ ] ;
12990: LD_ADDR_VAR 0 17
12994: PUSH
12995: EMPTY
12996: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12997: LD_ADDR_VAR 0 6
13001: PUSH
13002: LD_VAR 0 1
13006: PPUSH
13007: CALL_OW 274
13011: PPUSH
13012: LD_VAR 0 2
13016: PPUSH
13017: LD_INT 0
13019: PPUSH
13020: CALL 10585 0 3
13024: PPUSH
13025: LD_INT 30
13027: PUSH
13028: LD_INT 3
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PPUSH
13035: CALL_OW 72
13039: ST_TO_ADDR
// if not factories then
13040: LD_VAR 0 6
13044: NOT
13045: IFFALSE 13049
// exit ;
13047: GO 14045
// for i in factories do
13049: LD_ADDR_VAR 0 8
13053: PUSH
13054: LD_VAR 0 6
13058: PUSH
13059: FOR_IN
13060: IFFALSE 13085
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13062: LD_ADDR_VAR 0 17
13066: PUSH
13067: LD_VAR 0 17
13071: PUSH
13072: LD_VAR 0 8
13076: PPUSH
13077: CALL_OW 478
13081: UNION
13082: ST_TO_ADDR
13083: GO 13059
13085: POP
13086: POP
// if not fac_list then
13087: LD_VAR 0 17
13091: NOT
13092: IFFALSE 13096
// exit ;
13094: GO 14045
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13096: LD_ADDR_VAR 0 5
13100: PUSH
13101: LD_INT 4
13103: PUSH
13104: LD_INT 5
13106: PUSH
13107: LD_INT 9
13109: PUSH
13110: LD_INT 10
13112: PUSH
13113: LD_INT 6
13115: PUSH
13116: LD_INT 7
13118: PUSH
13119: LD_INT 11
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 27
13133: PUSH
13134: LD_INT 28
13136: PUSH
13137: LD_INT 26
13139: PUSH
13140: LD_INT 30
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 43
13151: PUSH
13152: LD_INT 44
13154: PUSH
13155: LD_INT 46
13157: PUSH
13158: LD_INT 45
13160: PUSH
13161: LD_INT 47
13163: PUSH
13164: LD_INT 49
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: PUSH
13180: LD_VAR 0 12
13184: ARRAY
13185: ST_TO_ADDR
// for i in list do
13186: LD_ADDR_VAR 0 8
13190: PUSH
13191: LD_VAR 0 5
13195: PUSH
13196: FOR_IN
13197: IFFALSE 13230
// if not i in fac_list then
13199: LD_VAR 0 8
13203: PUSH
13204: LD_VAR 0 17
13208: IN
13209: NOT
13210: IFFALSE 13228
// list := list diff i ;
13212: LD_ADDR_VAR 0 5
13216: PUSH
13217: LD_VAR 0 5
13221: PUSH
13222: LD_VAR 0 8
13226: DIFF
13227: ST_TO_ADDR
13228: GO 13196
13230: POP
13231: POP
// if not list then
13232: LD_VAR 0 5
13236: NOT
13237: IFFALSE 13241
// exit ;
13239: GO 14045
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13241: LD_VAR 0 12
13245: PUSH
13246: LD_INT 3
13248: EQUAL
13249: PUSH
13250: LD_INT 49
13252: PUSH
13253: LD_VAR 0 5
13257: IN
13258: AND
13259: PUSH
13260: LD_INT 31
13262: PPUSH
13263: LD_VAR 0 16
13267: PPUSH
13268: CALL_OW 321
13272: PUSH
13273: LD_INT 2
13275: EQUAL
13276: AND
13277: IFFALSE 13337
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13279: LD_INT 22
13281: PUSH
13282: LD_VAR 0 16
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 35
13293: PUSH
13294: LD_INT 49
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: LD_INT 91
13303: PUSH
13304: LD_VAR 0 1
13308: PUSH
13309: LD_INT 10
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 69
13326: NOT
13327: IFFALSE 13337
// weapon := ru_time_lapser ;
13329: LD_ADDR_VAR 0 18
13333: PUSH
13334: LD_INT 49
13336: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13337: LD_VAR 0 12
13341: PUSH
13342: LD_INT 1
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: IN
13352: PUSH
13353: LD_INT 11
13355: PUSH
13356: LD_VAR 0 5
13360: IN
13361: PUSH
13362: LD_INT 30
13364: PUSH
13365: LD_VAR 0 5
13369: IN
13370: OR
13371: AND
13372: PUSH
13373: LD_INT 6
13375: PPUSH
13376: LD_VAR 0 16
13380: PPUSH
13381: CALL_OW 321
13385: PUSH
13386: LD_INT 2
13388: EQUAL
13389: AND
13390: IFFALSE 13555
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13392: LD_INT 22
13394: PUSH
13395: LD_VAR 0 16
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: LD_INT 35
13409: PUSH
13410: LD_INT 11
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 35
13419: PUSH
13420: LD_INT 30
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 91
13434: PUSH
13435: LD_VAR 0 1
13439: PUSH
13440: LD_INT 18
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 69
13457: NOT
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_VAR 0 16
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: LD_INT 30
13476: PUSH
13477: LD_INT 32
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 30
13486: PUSH
13487: LD_INT 33
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: PUSH
13499: LD_INT 91
13501: PUSH
13502: LD_VAR 0 1
13506: PUSH
13507: LD_INT 12
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: PPUSH
13523: CALL_OW 69
13527: PUSH
13528: LD_INT 2
13530: GREATER
13531: AND
13532: IFFALSE 13555
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13534: LD_ADDR_VAR 0 18
13538: PUSH
13539: LD_INT 11
13541: PUSH
13542: LD_INT 30
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: LD_VAR 0 12
13553: ARRAY
13554: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13555: LD_VAR 0 18
13559: NOT
13560: PUSH
13561: LD_INT 40
13563: PPUSH
13564: LD_VAR 0 16
13568: PPUSH
13569: CALL_OW 321
13573: PUSH
13574: LD_INT 2
13576: EQUAL
13577: AND
13578: PUSH
13579: LD_INT 7
13581: PUSH
13582: LD_VAR 0 5
13586: IN
13587: PUSH
13588: LD_INT 28
13590: PUSH
13591: LD_VAR 0 5
13595: IN
13596: OR
13597: PUSH
13598: LD_INT 45
13600: PUSH
13601: LD_VAR 0 5
13605: IN
13606: OR
13607: AND
13608: IFFALSE 13862
// begin hex := GetHexInfo ( x , y ) ;
13610: LD_ADDR_VAR 0 4
13614: PUSH
13615: LD_VAR 0 10
13619: PPUSH
13620: LD_VAR 0 11
13624: PPUSH
13625: CALL_OW 546
13629: ST_TO_ADDR
// if hex [ 1 ] then
13630: LD_VAR 0 4
13634: PUSH
13635: LD_INT 1
13637: ARRAY
13638: IFFALSE 13642
// exit ;
13640: GO 14045
// height := hex [ 2 ] ;
13642: LD_ADDR_VAR 0 15
13646: PUSH
13647: LD_VAR 0 4
13651: PUSH
13652: LD_INT 2
13654: ARRAY
13655: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13656: LD_ADDR_VAR 0 14
13660: PUSH
13661: LD_INT 0
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 3
13669: PUSH
13670: LD_INT 5
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: ST_TO_ADDR
// for i in tmp do
13679: LD_ADDR_VAR 0 8
13683: PUSH
13684: LD_VAR 0 14
13688: PUSH
13689: FOR_IN
13690: IFFALSE 13860
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13692: LD_ADDR_VAR 0 9
13696: PUSH
13697: LD_VAR 0 10
13701: PPUSH
13702: LD_VAR 0 8
13706: PPUSH
13707: LD_INT 5
13709: PPUSH
13710: CALL_OW 272
13714: PUSH
13715: LD_VAR 0 11
13719: PPUSH
13720: LD_VAR 0 8
13724: PPUSH
13725: LD_INT 5
13727: PPUSH
13728: CALL_OW 273
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13737: LD_VAR 0 9
13741: PUSH
13742: LD_INT 1
13744: ARRAY
13745: PPUSH
13746: LD_VAR 0 9
13750: PUSH
13751: LD_INT 2
13753: ARRAY
13754: PPUSH
13755: CALL_OW 488
13759: IFFALSE 13858
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13761: LD_ADDR_VAR 0 4
13765: PUSH
13766: LD_VAR 0 9
13770: PUSH
13771: LD_INT 1
13773: ARRAY
13774: PPUSH
13775: LD_VAR 0 9
13779: PUSH
13780: LD_INT 2
13782: ARRAY
13783: PPUSH
13784: CALL_OW 546
13788: ST_TO_ADDR
// if hex [ 1 ] then
13789: LD_VAR 0 4
13793: PUSH
13794: LD_INT 1
13796: ARRAY
13797: IFFALSE 13801
// continue ;
13799: GO 13689
// h := hex [ 2 ] ;
13801: LD_ADDR_VAR 0 13
13805: PUSH
13806: LD_VAR 0 4
13810: PUSH
13811: LD_INT 2
13813: ARRAY
13814: ST_TO_ADDR
// if h + 7 < height then
13815: LD_VAR 0 13
13819: PUSH
13820: LD_INT 7
13822: PLUS
13823: PUSH
13824: LD_VAR 0 15
13828: LESS
13829: IFFALSE 13858
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13831: LD_ADDR_VAR 0 18
13835: PUSH
13836: LD_INT 7
13838: PUSH
13839: LD_INT 28
13841: PUSH
13842: LD_INT 45
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: PUSH
13850: LD_VAR 0 12
13854: ARRAY
13855: ST_TO_ADDR
// break ;
13856: GO 13860
// end ; end ; end ;
13858: GO 13689
13860: POP
13861: POP
// end ; if not weapon then
13862: LD_VAR 0 18
13866: NOT
13867: IFFALSE 13927
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13869: LD_ADDR_VAR 0 5
13873: PUSH
13874: LD_VAR 0 5
13878: PUSH
13879: LD_INT 11
13881: PUSH
13882: LD_INT 30
13884: PUSH
13885: LD_INT 49
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: DIFF
13893: ST_TO_ADDR
// if not list then
13894: LD_VAR 0 5
13898: NOT
13899: IFFALSE 13903
// exit ;
13901: GO 14045
// weapon := list [ rand ( 1 , list ) ] ;
13903: LD_ADDR_VAR 0 18
13907: PUSH
13908: LD_VAR 0 5
13912: PUSH
13913: LD_INT 1
13915: PPUSH
13916: LD_VAR 0 5
13920: PPUSH
13921: CALL_OW 12
13925: ARRAY
13926: ST_TO_ADDR
// end ; if weapon then
13927: LD_VAR 0 18
13931: IFFALSE 14045
// begin tmp := CostOfWeapon ( weapon ) ;
13933: LD_ADDR_VAR 0 14
13937: PUSH
13938: LD_VAR 0 18
13942: PPUSH
13943: CALL_OW 451
13947: ST_TO_ADDR
// j := GetBase ( tower ) ;
13948: LD_ADDR_VAR 0 9
13952: PUSH
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 274
13962: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13963: LD_VAR 0 9
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: CALL_OW 275
13975: PUSH
13976: LD_VAR 0 14
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: GREATEREQUAL
13985: PUSH
13986: LD_VAR 0 9
13990: PPUSH
13991: LD_INT 2
13993: PPUSH
13994: CALL_OW 275
13998: PUSH
13999: LD_VAR 0 14
14003: PUSH
14004: LD_INT 2
14006: ARRAY
14007: GREATEREQUAL
14008: AND
14009: PUSH
14010: LD_VAR 0 9
14014: PPUSH
14015: LD_INT 3
14017: PPUSH
14018: CALL_OW 275
14022: PUSH
14023: LD_VAR 0 14
14027: PUSH
14028: LD_INT 3
14030: ARRAY
14031: GREATEREQUAL
14032: AND
14033: IFFALSE 14045
// result := weapon ;
14035: LD_ADDR_VAR 0 3
14039: PUSH
14040: LD_VAR 0 18
14044: ST_TO_ADDR
// end ; end ;
14045: LD_VAR 0 3
14049: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14050: LD_INT 0
14052: PPUSH
14053: PPUSH
// result := true ;
14054: LD_ADDR_VAR 0 3
14058: PUSH
14059: LD_INT 1
14061: ST_TO_ADDR
// if array1 = array2 then
14062: LD_VAR 0 1
14066: PUSH
14067: LD_VAR 0 2
14071: EQUAL
14072: IFFALSE 14132
// begin for i = 1 to array1 do
14074: LD_ADDR_VAR 0 4
14078: PUSH
14079: DOUBLE
14080: LD_INT 1
14082: DEC
14083: ST_TO_ADDR
14084: LD_VAR 0 1
14088: PUSH
14089: FOR_TO
14090: IFFALSE 14128
// if array1 [ i ] <> array2 [ i ] then
14092: LD_VAR 0 1
14096: PUSH
14097: LD_VAR 0 4
14101: ARRAY
14102: PUSH
14103: LD_VAR 0 2
14107: PUSH
14108: LD_VAR 0 4
14112: ARRAY
14113: NONEQUAL
14114: IFFALSE 14126
// begin result := false ;
14116: LD_ADDR_VAR 0 3
14120: PUSH
14121: LD_INT 0
14123: ST_TO_ADDR
// break ;
14124: GO 14128
// end ;
14126: GO 14089
14128: POP
14129: POP
// end else
14130: GO 14140
// result := false ;
14132: LD_ADDR_VAR 0 3
14136: PUSH
14137: LD_INT 0
14139: ST_TO_ADDR
// end ;
14140: LD_VAR 0 3
14144: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14145: LD_INT 0
14147: PPUSH
14148: PPUSH
// if not array1 or not array2 then
14149: LD_VAR 0 1
14153: NOT
14154: PUSH
14155: LD_VAR 0 2
14159: NOT
14160: OR
14161: IFFALSE 14165
// exit ;
14163: GO 14229
// result := true ;
14165: LD_ADDR_VAR 0 3
14169: PUSH
14170: LD_INT 1
14172: ST_TO_ADDR
// for i = 1 to array1 do
14173: LD_ADDR_VAR 0 4
14177: PUSH
14178: DOUBLE
14179: LD_INT 1
14181: DEC
14182: ST_TO_ADDR
14183: LD_VAR 0 1
14187: PUSH
14188: FOR_TO
14189: IFFALSE 14227
// if array1 [ i ] <> array2 [ i ] then
14191: LD_VAR 0 1
14195: PUSH
14196: LD_VAR 0 4
14200: ARRAY
14201: PUSH
14202: LD_VAR 0 2
14206: PUSH
14207: LD_VAR 0 4
14211: ARRAY
14212: NONEQUAL
14213: IFFALSE 14225
// begin result := false ;
14215: LD_ADDR_VAR 0 3
14219: PUSH
14220: LD_INT 0
14222: ST_TO_ADDR
// break ;
14223: GO 14227
// end ;
14225: GO 14188
14227: POP
14228: POP
// end ;
14229: LD_VAR 0 3
14233: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14234: LD_INT 0
14236: PPUSH
14237: PPUSH
14238: PPUSH
// pom := GetBase ( fac ) ;
14239: LD_ADDR_VAR 0 5
14243: PUSH
14244: LD_VAR 0 1
14248: PPUSH
14249: CALL_OW 274
14253: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14254: LD_ADDR_VAR 0 4
14258: PUSH
14259: LD_VAR 0 2
14263: PUSH
14264: LD_INT 1
14266: ARRAY
14267: PPUSH
14268: LD_VAR 0 2
14272: PUSH
14273: LD_INT 2
14275: ARRAY
14276: PPUSH
14277: LD_VAR 0 2
14281: PUSH
14282: LD_INT 3
14284: ARRAY
14285: PPUSH
14286: LD_VAR 0 2
14290: PUSH
14291: LD_INT 4
14293: ARRAY
14294: PPUSH
14295: CALL_OW 449
14299: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14300: LD_ADDR_VAR 0 3
14304: PUSH
14305: LD_VAR 0 5
14309: PPUSH
14310: LD_INT 1
14312: PPUSH
14313: CALL_OW 275
14317: PUSH
14318: LD_VAR 0 4
14322: PUSH
14323: LD_INT 1
14325: ARRAY
14326: GREATEREQUAL
14327: PUSH
14328: LD_VAR 0 5
14332: PPUSH
14333: LD_INT 2
14335: PPUSH
14336: CALL_OW 275
14340: PUSH
14341: LD_VAR 0 4
14345: PUSH
14346: LD_INT 2
14348: ARRAY
14349: GREATEREQUAL
14350: AND
14351: PUSH
14352: LD_VAR 0 5
14356: PPUSH
14357: LD_INT 3
14359: PPUSH
14360: CALL_OW 275
14364: PUSH
14365: LD_VAR 0 4
14369: PUSH
14370: LD_INT 3
14372: ARRAY
14373: GREATEREQUAL
14374: AND
14375: ST_TO_ADDR
// end ;
14376: LD_VAR 0 3
14380: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14381: LD_INT 0
14383: PPUSH
14384: PPUSH
14385: PPUSH
14386: PPUSH
// pom := GetBase ( building ) ;
14387: LD_ADDR_VAR 0 3
14391: PUSH
14392: LD_VAR 0 1
14396: PPUSH
14397: CALL_OW 274
14401: ST_TO_ADDR
// if not pom then
14402: LD_VAR 0 3
14406: NOT
14407: IFFALSE 14411
// exit ;
14409: GO 14581
// btype := GetBType ( building ) ;
14411: LD_ADDR_VAR 0 5
14415: PUSH
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 266
14425: ST_TO_ADDR
// if btype = b_armoury then
14426: LD_VAR 0 5
14430: PUSH
14431: LD_INT 4
14433: EQUAL
14434: IFFALSE 14444
// btype := b_barracks ;
14436: LD_ADDR_VAR 0 5
14440: PUSH
14441: LD_INT 5
14443: ST_TO_ADDR
// if btype = b_depot then
14444: LD_VAR 0 5
14448: PUSH
14449: LD_INT 0
14451: EQUAL
14452: IFFALSE 14462
// btype := b_warehouse ;
14454: LD_ADDR_VAR 0 5
14458: PUSH
14459: LD_INT 1
14461: ST_TO_ADDR
// if btype = b_workshop then
14462: LD_VAR 0 5
14466: PUSH
14467: LD_INT 2
14469: EQUAL
14470: IFFALSE 14480
// btype := b_factory ;
14472: LD_ADDR_VAR 0 5
14476: PUSH
14477: LD_INT 3
14479: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14480: LD_ADDR_VAR 0 4
14484: PUSH
14485: LD_VAR 0 5
14489: PPUSH
14490: LD_VAR 0 1
14494: PPUSH
14495: CALL_OW 248
14499: PPUSH
14500: CALL_OW 450
14504: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14505: LD_ADDR_VAR 0 2
14509: PUSH
14510: LD_VAR 0 3
14514: PPUSH
14515: LD_INT 1
14517: PPUSH
14518: CALL_OW 275
14522: PUSH
14523: LD_VAR 0 4
14527: PUSH
14528: LD_INT 1
14530: ARRAY
14531: GREATEREQUAL
14532: PUSH
14533: LD_VAR 0 3
14537: PPUSH
14538: LD_INT 2
14540: PPUSH
14541: CALL_OW 275
14545: PUSH
14546: LD_VAR 0 4
14550: PUSH
14551: LD_INT 2
14553: ARRAY
14554: GREATEREQUAL
14555: AND
14556: PUSH
14557: LD_VAR 0 3
14561: PPUSH
14562: LD_INT 3
14564: PPUSH
14565: CALL_OW 275
14569: PUSH
14570: LD_VAR 0 4
14574: PUSH
14575: LD_INT 3
14577: ARRAY
14578: GREATEREQUAL
14579: AND
14580: ST_TO_ADDR
// end ;
14581: LD_VAR 0 2
14585: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14586: LD_INT 0
14588: PPUSH
14589: PPUSH
14590: PPUSH
// pom := GetBase ( building ) ;
14591: LD_ADDR_VAR 0 4
14595: PUSH
14596: LD_VAR 0 1
14600: PPUSH
14601: CALL_OW 274
14605: ST_TO_ADDR
// if not pom then
14606: LD_VAR 0 4
14610: NOT
14611: IFFALSE 14615
// exit ;
14613: GO 14716
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14615: LD_ADDR_VAR 0 5
14619: PUSH
14620: LD_VAR 0 2
14624: PPUSH
14625: LD_VAR 0 1
14629: PPUSH
14630: CALL_OW 248
14634: PPUSH
14635: CALL_OW 450
14639: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14640: LD_ADDR_VAR 0 3
14644: PUSH
14645: LD_VAR 0 4
14649: PPUSH
14650: LD_INT 1
14652: PPUSH
14653: CALL_OW 275
14657: PUSH
14658: LD_VAR 0 5
14662: PUSH
14663: LD_INT 1
14665: ARRAY
14666: GREATEREQUAL
14667: PUSH
14668: LD_VAR 0 4
14672: PPUSH
14673: LD_INT 2
14675: PPUSH
14676: CALL_OW 275
14680: PUSH
14681: LD_VAR 0 5
14685: PUSH
14686: LD_INT 2
14688: ARRAY
14689: GREATEREQUAL
14690: AND
14691: PUSH
14692: LD_VAR 0 4
14696: PPUSH
14697: LD_INT 3
14699: PPUSH
14700: CALL_OW 275
14704: PUSH
14705: LD_VAR 0 5
14709: PUSH
14710: LD_INT 3
14712: ARRAY
14713: GREATEREQUAL
14714: AND
14715: ST_TO_ADDR
// end ;
14716: LD_VAR 0 3
14720: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14721: LD_INT 0
14723: PPUSH
14724: PPUSH
14725: PPUSH
14726: PPUSH
14727: PPUSH
14728: PPUSH
14729: PPUSH
14730: PPUSH
14731: PPUSH
14732: PPUSH
14733: PPUSH
// result := false ;
14734: LD_ADDR_VAR 0 8
14738: PUSH
14739: LD_INT 0
14741: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14742: LD_VAR 0 5
14746: NOT
14747: PUSH
14748: LD_VAR 0 1
14752: NOT
14753: OR
14754: PUSH
14755: LD_VAR 0 2
14759: NOT
14760: OR
14761: PUSH
14762: LD_VAR 0 3
14766: NOT
14767: OR
14768: IFFALSE 14772
// exit ;
14770: GO 15586
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14772: LD_ADDR_VAR 0 14
14776: PUSH
14777: LD_VAR 0 1
14781: PPUSH
14782: LD_VAR 0 2
14786: PPUSH
14787: LD_VAR 0 3
14791: PPUSH
14792: LD_VAR 0 4
14796: PPUSH
14797: LD_VAR 0 5
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PPUSH
14806: CALL_OW 248
14810: PPUSH
14811: LD_INT 0
14813: PPUSH
14814: CALL 16423 0 6
14818: ST_TO_ADDR
// if not hexes then
14819: LD_VAR 0 14
14823: NOT
14824: IFFALSE 14828
// exit ;
14826: GO 15586
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14828: LD_ADDR_VAR 0 17
14832: PUSH
14833: LD_VAR 0 5
14837: PPUSH
14838: LD_INT 22
14840: PUSH
14841: LD_VAR 0 13
14845: PPUSH
14846: CALL_OW 255
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 2
14857: PUSH
14858: LD_INT 30
14860: PUSH
14861: LD_INT 0
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 30
14870: PUSH
14871: LD_INT 1
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 72
14891: ST_TO_ADDR
// for i = 1 to hexes do
14892: LD_ADDR_VAR 0 9
14896: PUSH
14897: DOUBLE
14898: LD_INT 1
14900: DEC
14901: ST_TO_ADDR
14902: LD_VAR 0 14
14906: PUSH
14907: FOR_TO
14908: IFFALSE 15584
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14910: LD_ADDR_VAR 0 13
14914: PUSH
14915: LD_VAR 0 14
14919: PUSH
14920: LD_VAR 0 9
14924: ARRAY
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: PPUSH
14930: LD_VAR 0 14
14934: PUSH
14935: LD_VAR 0 9
14939: ARRAY
14940: PUSH
14941: LD_INT 2
14943: ARRAY
14944: PPUSH
14945: CALL_OW 428
14949: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14950: LD_VAR 0 14
14954: PUSH
14955: LD_VAR 0 9
14959: ARRAY
14960: PUSH
14961: LD_INT 1
14963: ARRAY
14964: PPUSH
14965: LD_VAR 0 14
14969: PUSH
14970: LD_VAR 0 9
14974: ARRAY
14975: PUSH
14976: LD_INT 2
14978: ARRAY
14979: PPUSH
14980: CALL_OW 351
14984: PUSH
14985: LD_VAR 0 14
14989: PUSH
14990: LD_VAR 0 9
14994: ARRAY
14995: PUSH
14996: LD_INT 1
14998: ARRAY
14999: PPUSH
15000: LD_VAR 0 14
15004: PUSH
15005: LD_VAR 0 9
15009: ARRAY
15010: PUSH
15011: LD_INT 2
15013: ARRAY
15014: PPUSH
15015: CALL_OW 488
15019: NOT
15020: OR
15021: PUSH
15022: LD_VAR 0 13
15026: PPUSH
15027: CALL_OW 247
15031: PUSH
15032: LD_INT 3
15034: EQUAL
15035: OR
15036: IFFALSE 15042
// exit ;
15038: POP
15039: POP
15040: GO 15586
// if not tmp then
15042: LD_VAR 0 13
15046: NOT
15047: IFFALSE 15051
// continue ;
15049: GO 14907
// result := true ;
15051: LD_ADDR_VAR 0 8
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15059: LD_VAR 0 6
15063: PUSH
15064: LD_VAR 0 13
15068: PPUSH
15069: CALL_OW 247
15073: PUSH
15074: LD_INT 2
15076: EQUAL
15077: AND
15078: PUSH
15079: LD_VAR 0 13
15083: PPUSH
15084: CALL_OW 263
15088: PUSH
15089: LD_INT 1
15091: EQUAL
15092: AND
15093: IFFALSE 15257
// begin if IsDrivenBy ( tmp ) then
15095: LD_VAR 0 13
15099: PPUSH
15100: CALL_OW 311
15104: IFFALSE 15108
// continue ;
15106: GO 14907
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15108: LD_VAR 0 6
15112: PPUSH
15113: LD_INT 3
15115: PUSH
15116: LD_INT 60
15118: PUSH
15119: EMPTY
15120: LIST
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 3
15128: PUSH
15129: LD_INT 55
15131: PUSH
15132: EMPTY
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PPUSH
15143: CALL_OW 72
15147: IFFALSE 15255
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15149: LD_ADDR_VAR 0 18
15153: PUSH
15154: LD_VAR 0 6
15158: PPUSH
15159: LD_INT 3
15161: PUSH
15162: LD_INT 60
15164: PUSH
15165: EMPTY
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 3
15174: PUSH
15175: LD_INT 55
15177: PUSH
15178: EMPTY
15179: LIST
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 72
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: ST_TO_ADDR
// if IsInUnit ( driver ) then
15198: LD_VAR 0 18
15202: PPUSH
15203: CALL_OW 310
15207: IFFALSE 15218
// ComExit ( driver ) ;
15209: LD_VAR 0 18
15213: PPUSH
15214: CALL 39607 0 1
// AddComEnterUnit ( driver , tmp ) ;
15218: LD_VAR 0 18
15222: PPUSH
15223: LD_VAR 0 13
15227: PPUSH
15228: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15232: LD_VAR 0 18
15236: PPUSH
15237: LD_VAR 0 7
15241: PPUSH
15242: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15246: LD_VAR 0 18
15250: PPUSH
15251: CALL_OW 181
// end ; continue ;
15255: GO 14907
// end ; if not cleaners or not tmp in cleaners then
15257: LD_VAR 0 6
15261: NOT
15262: PUSH
15263: LD_VAR 0 13
15267: PUSH
15268: LD_VAR 0 6
15272: IN
15273: NOT
15274: OR
15275: IFFALSE 15582
// begin if dep then
15277: LD_VAR 0 17
15281: IFFALSE 15417
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15283: LD_ADDR_VAR 0 16
15287: PUSH
15288: LD_VAR 0 17
15292: PUSH
15293: LD_INT 1
15295: ARRAY
15296: PPUSH
15297: CALL_OW 250
15301: PPUSH
15302: LD_VAR 0 17
15306: PUSH
15307: LD_INT 1
15309: ARRAY
15310: PPUSH
15311: CALL_OW 254
15315: PPUSH
15316: LD_INT 5
15318: PPUSH
15319: CALL_OW 272
15323: PUSH
15324: LD_VAR 0 17
15328: PUSH
15329: LD_INT 1
15331: ARRAY
15332: PPUSH
15333: CALL_OW 251
15337: PPUSH
15338: LD_VAR 0 17
15342: PUSH
15343: LD_INT 1
15345: ARRAY
15346: PPUSH
15347: CALL_OW 254
15351: PPUSH
15352: LD_INT 5
15354: PPUSH
15355: CALL_OW 273
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15364: LD_VAR 0 16
15368: PUSH
15369: LD_INT 1
15371: ARRAY
15372: PPUSH
15373: LD_VAR 0 16
15377: PUSH
15378: LD_INT 2
15380: ARRAY
15381: PPUSH
15382: CALL_OW 488
15386: IFFALSE 15417
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15388: LD_VAR 0 13
15392: PPUSH
15393: LD_VAR 0 16
15397: PUSH
15398: LD_INT 1
15400: ARRAY
15401: PPUSH
15402: LD_VAR 0 16
15406: PUSH
15407: LD_INT 2
15409: ARRAY
15410: PPUSH
15411: CALL_OW 111
// continue ;
15415: GO 14907
// end ; end ; r := GetDir ( tmp ) ;
15417: LD_ADDR_VAR 0 15
15421: PUSH
15422: LD_VAR 0 13
15426: PPUSH
15427: CALL_OW 254
15431: ST_TO_ADDR
// if r = 5 then
15432: LD_VAR 0 15
15436: PUSH
15437: LD_INT 5
15439: EQUAL
15440: IFFALSE 15450
// r := 0 ;
15442: LD_ADDR_VAR 0 15
15446: PUSH
15447: LD_INT 0
15449: ST_TO_ADDR
// for j = r to 5 do
15450: LD_ADDR_VAR 0 10
15454: PUSH
15455: DOUBLE
15456: LD_VAR 0 15
15460: DEC
15461: ST_TO_ADDR
15462: LD_INT 5
15464: PUSH
15465: FOR_TO
15466: IFFALSE 15580
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15468: LD_ADDR_VAR 0 11
15472: PUSH
15473: LD_VAR 0 13
15477: PPUSH
15478: CALL_OW 250
15482: PPUSH
15483: LD_VAR 0 10
15487: PPUSH
15488: LD_INT 2
15490: PPUSH
15491: CALL_OW 272
15495: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15496: LD_ADDR_VAR 0 12
15500: PUSH
15501: LD_VAR 0 13
15505: PPUSH
15506: CALL_OW 251
15510: PPUSH
15511: LD_VAR 0 10
15515: PPUSH
15516: LD_INT 2
15518: PPUSH
15519: CALL_OW 273
15523: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15524: LD_VAR 0 11
15528: PPUSH
15529: LD_VAR 0 12
15533: PPUSH
15534: CALL_OW 488
15538: PUSH
15539: LD_VAR 0 11
15543: PPUSH
15544: LD_VAR 0 12
15548: PPUSH
15549: CALL_OW 428
15553: NOT
15554: AND
15555: IFFALSE 15578
// begin ComMoveXY ( tmp , _x , _y ) ;
15557: LD_VAR 0 13
15561: PPUSH
15562: LD_VAR 0 11
15566: PPUSH
15567: LD_VAR 0 12
15571: PPUSH
15572: CALL_OW 111
// break ;
15576: GO 15580
// end ; end ;
15578: GO 15465
15580: POP
15581: POP
// end ; end ;
15582: GO 14907
15584: POP
15585: POP
// end ;
15586: LD_VAR 0 8
15590: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
15591: LD_INT 0
15593: PPUSH
15594: PPUSH
15595: PPUSH
15596: PPUSH
15597: PPUSH
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
// result := false ;
15603: LD_ADDR_VAR 0 6
15607: PUSH
15608: LD_INT 0
15610: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15611: LD_VAR 0 1
15615: NOT
15616: PUSH
15617: LD_VAR 0 1
15621: PPUSH
15622: CALL_OW 266
15626: PUSH
15627: LD_INT 0
15629: PUSH
15630: LD_INT 1
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: IN
15637: NOT
15638: OR
15639: PUSH
15640: LD_VAR 0 2
15644: NOT
15645: OR
15646: PUSH
15647: LD_VAR 0 5
15651: PUSH
15652: LD_INT 0
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: LD_INT 2
15660: PUSH
15661: LD_INT 3
15663: PUSH
15664: LD_INT 4
15666: PUSH
15667: LD_INT 5
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: IN
15678: NOT
15679: OR
15680: PUSH
15681: LD_VAR 0 3
15685: PPUSH
15686: LD_VAR 0 4
15690: PPUSH
15691: CALL_OW 488
15695: NOT
15696: OR
15697: IFFALSE 15701
// exit ;
15699: GO 16418
// pom := GetBase ( depot ) ;
15701: LD_ADDR_VAR 0 10
15705: PUSH
15706: LD_VAR 0 1
15710: PPUSH
15711: CALL_OW 274
15715: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15716: LD_ADDR_VAR 0 11
15720: PUSH
15721: LD_VAR 0 2
15725: PPUSH
15726: LD_VAR 0 1
15730: PPUSH
15731: CALL_OW 248
15735: PPUSH
15736: CALL_OW 450
15740: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15741: LD_VAR 0 10
15745: PPUSH
15746: LD_INT 1
15748: PPUSH
15749: CALL_OW 275
15753: PUSH
15754: LD_VAR 0 11
15758: PUSH
15759: LD_INT 1
15761: ARRAY
15762: GREATEREQUAL
15763: PUSH
15764: LD_VAR 0 10
15768: PPUSH
15769: LD_INT 2
15771: PPUSH
15772: CALL_OW 275
15776: PUSH
15777: LD_VAR 0 11
15781: PUSH
15782: LD_INT 2
15784: ARRAY
15785: GREATEREQUAL
15786: AND
15787: PUSH
15788: LD_VAR 0 10
15792: PPUSH
15793: LD_INT 3
15795: PPUSH
15796: CALL_OW 275
15800: PUSH
15801: LD_VAR 0 11
15805: PUSH
15806: LD_INT 3
15808: ARRAY
15809: GREATEREQUAL
15810: AND
15811: NOT
15812: IFFALSE 15816
// exit ;
15814: GO 16418
// if GetBType ( depot ) = b_depot then
15816: LD_VAR 0 1
15820: PPUSH
15821: CALL_OW 266
15825: PUSH
15826: LD_INT 0
15828: EQUAL
15829: IFFALSE 15841
// dist := 28 else
15831: LD_ADDR_VAR 0 14
15835: PUSH
15836: LD_INT 28
15838: ST_TO_ADDR
15839: GO 15849
// dist := 36 ;
15841: LD_ADDR_VAR 0 14
15845: PUSH
15846: LD_INT 36
15848: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15849: LD_VAR 0 1
15853: PPUSH
15854: LD_VAR 0 3
15858: PPUSH
15859: LD_VAR 0 4
15863: PPUSH
15864: CALL_OW 297
15868: PUSH
15869: LD_VAR 0 14
15873: GREATER
15874: IFFALSE 15878
// exit ;
15876: GO 16418
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15878: LD_ADDR_VAR 0 12
15882: PUSH
15883: LD_VAR 0 2
15887: PPUSH
15888: LD_VAR 0 3
15892: PPUSH
15893: LD_VAR 0 4
15897: PPUSH
15898: LD_VAR 0 5
15902: PPUSH
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 248
15912: PPUSH
15913: LD_INT 0
15915: PPUSH
15916: CALL 16423 0 6
15920: ST_TO_ADDR
// if not hexes then
15921: LD_VAR 0 12
15925: NOT
15926: IFFALSE 15930
// exit ;
15928: GO 16418
// hex := GetHexInfo ( x , y ) ;
15930: LD_ADDR_VAR 0 15
15934: PUSH
15935: LD_VAR 0 3
15939: PPUSH
15940: LD_VAR 0 4
15944: PPUSH
15945: CALL_OW 546
15949: ST_TO_ADDR
// if hex [ 1 ] then
15950: LD_VAR 0 15
15954: PUSH
15955: LD_INT 1
15957: ARRAY
15958: IFFALSE 15962
// exit ;
15960: GO 16418
// height := hex [ 2 ] ;
15962: LD_ADDR_VAR 0 13
15966: PUSH
15967: LD_VAR 0 15
15971: PUSH
15972: LD_INT 2
15974: ARRAY
15975: ST_TO_ADDR
// for i = 1 to hexes do
15976: LD_ADDR_VAR 0 7
15980: PUSH
15981: DOUBLE
15982: LD_INT 1
15984: DEC
15985: ST_TO_ADDR
15986: LD_VAR 0 12
15990: PUSH
15991: FOR_TO
15992: IFFALSE 16322
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15994: LD_VAR 0 12
15998: PUSH
15999: LD_VAR 0 7
16003: ARRAY
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: PPUSH
16009: LD_VAR 0 12
16013: PUSH
16014: LD_VAR 0 7
16018: ARRAY
16019: PUSH
16020: LD_INT 2
16022: ARRAY
16023: PPUSH
16024: CALL_OW 488
16028: NOT
16029: PUSH
16030: LD_VAR 0 12
16034: PUSH
16035: LD_VAR 0 7
16039: ARRAY
16040: PUSH
16041: LD_INT 1
16043: ARRAY
16044: PPUSH
16045: LD_VAR 0 12
16049: PUSH
16050: LD_VAR 0 7
16054: ARRAY
16055: PUSH
16056: LD_INT 2
16058: ARRAY
16059: PPUSH
16060: CALL_OW 428
16064: PUSH
16065: LD_INT 0
16067: GREATER
16068: OR
16069: PUSH
16070: LD_VAR 0 12
16074: PUSH
16075: LD_VAR 0 7
16079: ARRAY
16080: PUSH
16081: LD_INT 1
16083: ARRAY
16084: PPUSH
16085: LD_VAR 0 12
16089: PUSH
16090: LD_VAR 0 7
16094: ARRAY
16095: PUSH
16096: LD_INT 2
16098: ARRAY
16099: PPUSH
16100: CALL_OW 351
16104: OR
16105: IFFALSE 16111
// exit ;
16107: POP
16108: POP
16109: GO 16418
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16111: LD_ADDR_VAR 0 8
16115: PUSH
16116: LD_VAR 0 12
16120: PUSH
16121: LD_VAR 0 7
16125: ARRAY
16126: PUSH
16127: LD_INT 1
16129: ARRAY
16130: PPUSH
16131: LD_VAR 0 12
16135: PUSH
16136: LD_VAR 0 7
16140: ARRAY
16141: PUSH
16142: LD_INT 2
16144: ARRAY
16145: PPUSH
16146: CALL_OW 546
16150: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16151: LD_VAR 0 8
16155: PUSH
16156: LD_INT 1
16158: ARRAY
16159: PUSH
16160: LD_VAR 0 8
16164: PUSH
16165: LD_INT 2
16167: ARRAY
16168: PUSH
16169: LD_VAR 0 13
16173: PUSH
16174: LD_INT 2
16176: PLUS
16177: GREATER
16178: OR
16179: PUSH
16180: LD_VAR 0 8
16184: PUSH
16185: LD_INT 2
16187: ARRAY
16188: PUSH
16189: LD_VAR 0 13
16193: PUSH
16194: LD_INT 2
16196: MINUS
16197: LESS
16198: OR
16199: PUSH
16200: LD_VAR 0 8
16204: PUSH
16205: LD_INT 3
16207: ARRAY
16208: PUSH
16209: LD_INT 0
16211: PUSH
16212: LD_INT 8
16214: PUSH
16215: LD_INT 9
16217: PUSH
16218: LD_INT 10
16220: PUSH
16221: LD_INT 11
16223: PUSH
16224: LD_INT 12
16226: PUSH
16227: LD_INT 13
16229: PUSH
16230: LD_INT 16
16232: PUSH
16233: LD_INT 17
16235: PUSH
16236: LD_INT 18
16238: PUSH
16239: LD_INT 19
16241: PUSH
16242: LD_INT 20
16244: PUSH
16245: LD_INT 21
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: IN
16263: NOT
16264: OR
16265: PUSH
16266: LD_VAR 0 8
16270: PUSH
16271: LD_INT 5
16273: ARRAY
16274: NOT
16275: OR
16276: PUSH
16277: LD_VAR 0 8
16281: PUSH
16282: LD_INT 6
16284: ARRAY
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: LD_INT 7
16294: PUSH
16295: LD_INT 9
16297: PUSH
16298: LD_INT 10
16300: PUSH
16301: LD_INT 11
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: IN
16312: NOT
16313: OR
16314: IFFALSE 16320
// exit ;
16316: POP
16317: POP
16318: GO 16418
// end ;
16320: GO 15991
16322: POP
16323: POP
// side := GetSide ( depot ) ;
16324: LD_ADDR_VAR 0 9
16328: PUSH
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 255
16338: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16339: LD_VAR 0 9
16343: PPUSH
16344: LD_VAR 0 3
16348: PPUSH
16349: LD_VAR 0 4
16353: PPUSH
16354: LD_INT 20
16356: PPUSH
16357: CALL 8739 0 4
16361: PUSH
16362: LD_INT 4
16364: ARRAY
16365: IFFALSE 16369
// exit ;
16367: GO 16418
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16369: LD_VAR 0 2
16373: PUSH
16374: LD_INT 29
16376: PUSH
16377: LD_INT 30
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: IN
16384: PUSH
16385: LD_VAR 0 3
16389: PPUSH
16390: LD_VAR 0 4
16394: PPUSH
16395: LD_VAR 0 9
16399: PPUSH
16400: CALL_OW 440
16404: NOT
16405: AND
16406: IFFALSE 16410
// exit ;
16408: GO 16418
// result := true ;
16410: LD_ADDR_VAR 0 6
16414: PUSH
16415: LD_INT 1
16417: ST_TO_ADDR
// end ;
16418: LD_VAR 0 6
16422: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16423: LD_INT 0
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
16429: PPUSH
16430: PPUSH
16431: PPUSH
16432: PPUSH
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
16437: PPUSH
16438: PPUSH
16439: PPUSH
16440: PPUSH
16441: PPUSH
16442: PPUSH
16443: PPUSH
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
16460: PPUSH
16461: PPUSH
16462: PPUSH
16463: PPUSH
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
16470: PPUSH
16471: PPUSH
16472: PPUSH
16473: PPUSH
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
16478: PPUSH
16479: PPUSH
16480: PPUSH
16481: PPUSH
16482: PPUSH
// result = [ ] ;
16483: LD_ADDR_VAR 0 7
16487: PUSH
16488: EMPTY
16489: ST_TO_ADDR
// temp_list = [ ] ;
16490: LD_ADDR_VAR 0 9
16494: PUSH
16495: EMPTY
16496: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16497: LD_VAR 0 4
16501: PUSH
16502: LD_INT 0
16504: PUSH
16505: LD_INT 1
16507: PUSH
16508: LD_INT 2
16510: PUSH
16511: LD_INT 3
16513: PUSH
16514: LD_INT 4
16516: PUSH
16517: LD_INT 5
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: IN
16528: NOT
16529: PUSH
16530: LD_VAR 0 1
16534: PUSH
16535: LD_INT 0
16537: PUSH
16538: LD_INT 1
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: IN
16545: PUSH
16546: LD_VAR 0 5
16550: PUSH
16551: LD_INT 1
16553: PUSH
16554: LD_INT 2
16556: PUSH
16557: LD_INT 3
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: LIST
16564: IN
16565: NOT
16566: AND
16567: OR
16568: IFFALSE 16572
// exit ;
16570: GO 34963
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16572: LD_VAR 0 1
16576: PUSH
16577: LD_INT 6
16579: PUSH
16580: LD_INT 7
16582: PUSH
16583: LD_INT 8
16585: PUSH
16586: LD_INT 13
16588: PUSH
16589: LD_INT 12
16591: PUSH
16592: LD_INT 15
16594: PUSH
16595: LD_INT 11
16597: PUSH
16598: LD_INT 14
16600: PUSH
16601: LD_INT 10
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: IN
16615: IFFALSE 16625
// btype = b_lab ;
16617: LD_ADDR_VAR 0 1
16621: PUSH
16622: LD_INT 6
16624: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16625: LD_VAR 0 6
16629: PUSH
16630: LD_INT 0
16632: PUSH
16633: LD_INT 1
16635: PUSH
16636: LD_INT 2
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: IN
16644: NOT
16645: PUSH
16646: LD_VAR 0 1
16650: PUSH
16651: LD_INT 0
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: LD_INT 2
16659: PUSH
16660: LD_INT 3
16662: PUSH
16663: LD_INT 6
16665: PUSH
16666: LD_INT 36
16668: PUSH
16669: LD_INT 4
16671: PUSH
16672: LD_INT 5
16674: PUSH
16675: LD_INT 31
16677: PUSH
16678: LD_INT 32
16680: PUSH
16681: LD_INT 33
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: IN
16697: NOT
16698: PUSH
16699: LD_VAR 0 6
16703: PUSH
16704: LD_INT 1
16706: EQUAL
16707: AND
16708: OR
16709: PUSH
16710: LD_VAR 0 1
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 3
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: IN
16725: NOT
16726: PUSH
16727: LD_VAR 0 6
16731: PUSH
16732: LD_INT 2
16734: EQUAL
16735: AND
16736: OR
16737: IFFALSE 16747
// mode = 0 ;
16739: LD_ADDR_VAR 0 6
16743: PUSH
16744: LD_INT 0
16746: ST_TO_ADDR
// case mode of 0 :
16747: LD_VAR 0 6
16751: PUSH
16752: LD_INT 0
16754: DOUBLE
16755: EQUAL
16756: IFTRUE 16760
16758: GO 28213
16760: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16761: LD_ADDR_VAR 0 11
16765: PUSH
16766: LD_INT 0
16768: PUSH
16769: LD_INT 0
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 0
16778: PUSH
16779: LD_INT 1
16781: NEG
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 1
16789: PUSH
16790: LD_INT 0
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 1
16799: PUSH
16800: LD_INT 1
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 0
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 1
16819: NEG
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 1
16830: NEG
16831: PUSH
16832: LD_INT 1
16834: NEG
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 1
16842: NEG
16843: PUSH
16844: LD_INT 2
16846: NEG
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 0
16854: PUSH
16855: LD_INT 2
16857: NEG
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 1
16865: PUSH
16866: LD_INT 1
16868: NEG
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: LD_INT 2
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 0
16886: PUSH
16887: LD_INT 2
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 1
16896: NEG
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 1
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 0
16917: PUSH
16918: LD_INT 3
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 1
16927: NEG
16928: PUSH
16929: LD_INT 2
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16954: LD_ADDR_VAR 0 12
16958: PUSH
16959: LD_INT 0
16961: PUSH
16962: LD_INT 0
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: LD_INT 1
16974: NEG
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: LD_INT 0
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 0
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 1
17012: NEG
17013: PUSH
17014: LD_INT 0
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 1
17023: NEG
17024: PUSH
17025: LD_INT 1
17027: NEG
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: LD_INT 1
17038: NEG
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 2
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 2
17056: PUSH
17057: LD_INT 1
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 1
17066: NEG
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 2
17077: NEG
17078: PUSH
17079: LD_INT 0
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 2
17088: NEG
17089: PUSH
17090: LD_INT 1
17092: NEG
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 2
17100: NEG
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 3
17111: NEG
17112: PUSH
17113: LD_INT 0
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 3
17122: NEG
17123: PUSH
17124: LD_INT 1
17126: NEG
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17150: LD_ADDR_VAR 0 13
17154: PUSH
17155: LD_INT 0
17157: PUSH
17158: LD_INT 0
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: LD_INT 1
17170: NEG
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 1
17178: PUSH
17179: LD_INT 0
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 1
17188: PUSH
17189: LD_INT 1
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 0
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 1
17208: NEG
17209: PUSH
17210: LD_INT 0
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: NEG
17220: PUSH
17221: LD_INT 1
17223: NEG
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 1
17231: NEG
17232: PUSH
17233: LD_INT 2
17235: NEG
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 2
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: LD_INT 2
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: LD_INT 2
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 2
17273: NEG
17274: PUSH
17275: LD_INT 1
17277: NEG
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 2
17285: NEG
17286: PUSH
17287: LD_INT 2
17289: NEG
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 2
17297: NEG
17298: PUSH
17299: LD_INT 3
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 3
17309: NEG
17310: PUSH
17311: LD_INT 2
17313: NEG
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 3
17321: NEG
17322: PUSH
17323: LD_INT 3
17325: NEG
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17349: LD_ADDR_VAR 0 14
17353: PUSH
17354: LD_INT 0
17356: PUSH
17357: LD_INT 0
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: LD_INT 1
17369: NEG
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: LD_INT 0
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 1
17387: PUSH
17388: LD_INT 1
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 0
17397: PUSH
17398: LD_INT 1
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 1
17407: NEG
17408: PUSH
17409: LD_INT 0
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 1
17418: NEG
17419: PUSH
17420: LD_INT 1
17422: NEG
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 1
17430: NEG
17431: PUSH
17432: LD_INT 2
17434: NEG
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 0
17442: PUSH
17443: LD_INT 2
17445: NEG
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 1
17453: PUSH
17454: LD_INT 1
17456: NEG
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 1
17464: PUSH
17465: LD_INT 2
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 0
17474: PUSH
17475: LD_INT 2
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 1
17484: NEG
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 1
17495: NEG
17496: PUSH
17497: LD_INT 3
17499: NEG
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 0
17507: PUSH
17508: LD_INT 3
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: LD_INT 2
17521: NEG
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17545: LD_ADDR_VAR 0 15
17549: PUSH
17550: LD_INT 0
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 0
17562: PUSH
17563: LD_INT 1
17565: NEG
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 1
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 1
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 0
17593: PUSH
17594: LD_INT 1
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: NEG
17604: PUSH
17605: LD_INT 0
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 1
17614: NEG
17615: PUSH
17616: LD_INT 1
17618: NEG
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: LD_INT 1
17629: NEG
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 2
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 2
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 1
17657: NEG
17658: PUSH
17659: LD_INT 1
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 2
17668: NEG
17669: PUSH
17670: LD_INT 0
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 2
17679: NEG
17680: PUSH
17681: LD_INT 1
17683: NEG
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 2
17691: PUSH
17692: LD_INT 1
17694: NEG
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 3
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: LD_INT 1
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17738: LD_ADDR_VAR 0 16
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: LD_INT 0
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 0
17755: PUSH
17756: LD_INT 1
17758: NEG
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 0
17786: PUSH
17787: LD_INT 1
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 1
17796: NEG
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: NEG
17808: PUSH
17809: LD_INT 1
17811: NEG
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: LD_INT 2
17823: NEG
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: LD_INT 2
17831: PUSH
17832: LD_INT 1
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: LD_INT 2
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 1
17851: PUSH
17852: LD_INT 2
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 2
17861: NEG
17862: PUSH
17863: LD_INT 1
17865: NEG
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 2
17873: NEG
17874: PUSH
17875: LD_INT 2
17877: NEG
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 3
17885: PUSH
17886: LD_INT 2
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 3
17895: PUSH
17896: LD_INT 3
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 2
17905: PUSH
17906: LD_INT 3
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17931: LD_ADDR_VAR 0 17
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: LD_INT 0
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: LD_INT 1
17951: NEG
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: LD_INT 0
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: LD_INT 1
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 1
17989: NEG
17990: PUSH
17991: LD_INT 0
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 1
18000: NEG
18001: PUSH
18002: LD_INT 1
18004: NEG
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 1
18012: NEG
18013: PUSH
18014: LD_INT 2
18016: NEG
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 0
18024: PUSH
18025: LD_INT 2
18027: NEG
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: LD_INT 1
18038: NEG
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 2
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 2
18066: PUSH
18067: LD_INT 2
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 0
18086: PUSH
18087: LD_INT 2
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: NEG
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 2
18107: NEG
18108: PUSH
18109: LD_INT 0
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 2
18118: NEG
18119: PUSH
18120: LD_INT 1
18122: NEG
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 2
18130: NEG
18131: PUSH
18132: LD_INT 2
18134: NEG
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18161: LD_ADDR_VAR 0 18
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: LD_INT 0
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 1
18219: NEG
18220: PUSH
18221: LD_INT 0
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 1
18230: NEG
18231: PUSH
18232: LD_INT 1
18234: NEG
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 1
18242: NEG
18243: PUSH
18244: LD_INT 2
18246: NEG
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 0
18254: PUSH
18255: LD_INT 2
18257: NEG
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 1
18265: PUSH
18266: LD_INT 1
18268: NEG
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: LD_INT 0
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 2
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: PUSH
18297: LD_INT 2
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: LD_INT 2
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 0
18316: PUSH
18317: LD_INT 2
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 1
18326: NEG
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 2
18337: NEG
18338: PUSH
18339: LD_INT 0
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 2
18348: NEG
18349: PUSH
18350: LD_INT 1
18352: NEG
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 2
18360: NEG
18361: PUSH
18362: LD_INT 2
18364: NEG
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18391: LD_ADDR_VAR 0 19
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 1
18411: NEG
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: LD_INT 0
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 1
18449: NEG
18450: PUSH
18451: LD_INT 0
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: NEG
18461: PUSH
18462: LD_INT 1
18464: NEG
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 1
18472: NEG
18473: PUSH
18474: LD_INT 2
18476: NEG
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 0
18484: PUSH
18485: LD_INT 2
18487: NEG
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: LD_INT 1
18498: NEG
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 2
18506: PUSH
18507: LD_INT 0
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 0
18546: PUSH
18547: LD_INT 2
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 1
18556: NEG
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 2
18567: NEG
18568: PUSH
18569: LD_INT 0
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 2
18578: NEG
18579: PUSH
18580: LD_INT 1
18582: NEG
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 2
18590: NEG
18591: PUSH
18592: LD_INT 2
18594: NEG
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18621: LD_ADDR_VAR 0 20
18625: PUSH
18626: LD_INT 0
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 0
18638: PUSH
18639: LD_INT 1
18641: NEG
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 1
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 1
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 0
18669: PUSH
18670: LD_INT 1
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 1
18679: NEG
18680: PUSH
18681: LD_INT 0
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 1
18690: NEG
18691: PUSH
18692: LD_INT 1
18694: NEG
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 1
18702: NEG
18703: PUSH
18704: LD_INT 2
18706: NEG
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 0
18714: PUSH
18715: LD_INT 2
18717: NEG
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 2
18736: PUSH
18737: LD_INT 0
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 2
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: LD_INT 2
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: LD_INT 2
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: NEG
18787: PUSH
18788: LD_INT 1
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 2
18797: NEG
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 2
18808: NEG
18809: PUSH
18810: LD_INT 1
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 2
18820: NEG
18821: PUSH
18822: LD_INT 2
18824: NEG
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18851: LD_ADDR_VAR 0 21
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: LD_INT 1
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 1
18909: NEG
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: NEG
18921: PUSH
18922: LD_INT 1
18924: NEG
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 1
18932: NEG
18933: PUSH
18934: LD_INT 2
18936: NEG
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: LD_INT 2
18947: NEG
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: LD_INT 1
18958: NEG
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: NEG
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: NEG
19028: PUSH
19029: LD_INT 0
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 2
19038: NEG
19039: PUSH
19040: LD_INT 1
19042: NEG
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 2
19050: NEG
19051: PUSH
19052: LD_INT 2
19054: NEG
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19081: LD_ADDR_VAR 0 22
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 0
19098: PUSH
19099: LD_INT 1
19101: NEG
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 1
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 1
19139: NEG
19140: PUSH
19141: LD_INT 0
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: NEG
19151: PUSH
19152: LD_INT 1
19154: NEG
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 1
19162: NEG
19163: PUSH
19164: LD_INT 2
19166: NEG
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 0
19174: PUSH
19175: LD_INT 2
19177: NEG
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 1
19185: PUSH
19186: LD_INT 1
19188: NEG
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 2
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 2
19216: PUSH
19217: LD_INT 2
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: LD_INT 2
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: LD_INT 2
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: NEG
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 2
19257: NEG
19258: PUSH
19259: LD_INT 0
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 2
19268: NEG
19269: PUSH
19270: LD_INT 1
19272: NEG
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 2
19280: NEG
19281: PUSH
19282: LD_INT 2
19284: NEG
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19311: LD_ADDR_VAR 0 23
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 0
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: LD_INT 0
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 1
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 0
19359: PUSH
19360: LD_INT 1
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 1
19369: NEG
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: LD_INT 1
19384: NEG
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 1
19392: NEG
19393: PUSH
19394: LD_INT 2
19396: NEG
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: LD_INT 2
19407: NEG
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: LD_INT 1
19418: NEG
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 2
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: LD_INT 2
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 1
19476: NEG
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 2
19487: NEG
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 2
19498: NEG
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 2
19510: NEG
19511: PUSH
19512: LD_INT 2
19514: NEG
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 2
19522: NEG
19523: PUSH
19524: LD_INT 3
19526: NEG
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 1
19534: NEG
19535: PUSH
19536: LD_INT 3
19538: NEG
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: LD_INT 2
19549: NEG
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: LD_INT 1
19560: NEG
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19591: LD_ADDR_VAR 0 24
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 0
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: LD_INT 0
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 0
19639: PUSH
19640: LD_INT 1
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: NEG
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: LD_INT 1
19664: NEG
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 1
19672: NEG
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 0
19684: PUSH
19685: LD_INT 2
19687: NEG
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: LD_INT 2
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: LD_INT 2
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: LD_INT 2
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: NEG
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 2
19778: NEG
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 2
19790: NEG
19791: PUSH
19792: LD_INT 2
19794: NEG
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: LD_INT 2
19805: NEG
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: LD_INT 1
19816: NEG
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 3
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 3
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19867: LD_ADDR_VAR 0 25
19871: PUSH
19872: LD_INT 0
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: LD_INT 1
19887: NEG
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 1
19895: PUSH
19896: LD_INT 0
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 1
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 0
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 1
19925: NEG
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: LD_INT 1
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: LD_INT 2
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: LD_INT 2
19963: NEG
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: LD_INT 1
19974: NEG
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 2
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 2
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 2
20002: PUSH
20003: LD_INT 2
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: LD_INT 2
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 1
20032: NEG
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 2
20043: NEG
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 2
20054: NEG
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 2
20066: NEG
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 3
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 3
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 2
20098: PUSH
20099: LD_INT 3
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: LD_INT 3
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20141: LD_ADDR_VAR 0 26
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: LD_INT 0
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: LD_INT 1
20161: NEG
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: LD_INT 0
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 0
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 1
20199: NEG
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 1
20210: NEG
20211: PUSH
20212: LD_INT 1
20214: NEG
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 1
20222: NEG
20223: PUSH
20224: LD_INT 2
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 0
20234: PUSH
20235: LD_INT 2
20237: NEG
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: LD_INT 1
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 2
20256: PUSH
20257: LD_INT 0
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 2
20266: PUSH
20267: LD_INT 1
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 2
20276: PUSH
20277: LD_INT 2
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: LD_INT 2
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 0
20296: PUSH
20297: LD_INT 2
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 2
20317: NEG
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 2
20328: NEG
20329: PUSH
20330: LD_INT 1
20332: NEG
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 2
20340: NEG
20341: PUSH
20342: LD_INT 2
20344: NEG
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: LD_INT 3
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 3
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: NEG
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 2
20383: NEG
20384: PUSH
20385: LD_INT 1
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20417: LD_ADDR_VAR 0 27
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: LD_INT 0
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 0
20465: PUSH
20466: LD_INT 1
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: LD_INT 0
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 1
20486: NEG
20487: PUSH
20488: LD_INT 1
20490: NEG
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 1
20498: NEG
20499: PUSH
20500: LD_INT 2
20502: NEG
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: LD_INT 2
20513: NEG
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: LD_INT 1
20524: NEG
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: LD_INT 0
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: LD_INT 2
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 1
20582: NEG
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: NEG
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 2
20604: NEG
20605: PUSH
20606: LD_INT 1
20608: NEG
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 2
20616: NEG
20617: PUSH
20618: LD_INT 2
20620: NEG
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: NEG
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 2
20639: NEG
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 3
20650: NEG
20651: PUSH
20652: LD_INT 1
20654: NEG
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 3
20662: NEG
20663: PUSH
20664: LD_INT 2
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20697: LD_ADDR_VAR 0 28
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: LD_INT 1
20717: NEG
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 1
20725: PUSH
20726: LD_INT 0
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 0
20745: PUSH
20746: LD_INT 1
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 1
20755: NEG
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: NEG
20767: PUSH
20768: LD_INT 1
20770: NEG
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 1
20778: NEG
20779: PUSH
20780: LD_INT 2
20782: NEG
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: LD_INT 2
20793: NEG
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: LD_INT 1
20804: NEG
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: LD_INT 0
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: LD_INT 2
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 2
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 0
20852: PUSH
20853: LD_INT 2
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 1
20862: NEG
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 2
20873: NEG
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 2
20884: NEG
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 2
20896: NEG
20897: PUSH
20898: LD_INT 2
20900: NEG
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 2
20908: NEG
20909: PUSH
20910: LD_INT 3
20912: NEG
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: LD_INT 3
20924: NEG
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 3
20932: NEG
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 3
20944: NEG
20945: PUSH
20946: LD_INT 2
20948: NEG
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20979: LD_ADDR_VAR 0 29
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 0
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: LD_INT 0
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: LD_INT 1
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: LD_INT 1
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: LD_INT 0
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 1
21048: NEG
21049: PUSH
21050: LD_INT 1
21052: NEG
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 1
21060: NEG
21061: PUSH
21062: LD_INT 2
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: LD_INT 2
21075: NEG
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 2
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 2
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: LD_INT 2
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 2
21145: NEG
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: LD_INT 2
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 2
21169: NEG
21170: PUSH
21171: LD_INT 3
21173: NEG
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 3
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 3
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 1
21212: NEG
21213: PUSH
21214: LD_INT 2
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 3
21223: NEG
21224: PUSH
21225: LD_INT 2
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21258: LD_ADDR_VAR 0 30
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: LD_INT 0
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: LD_INT 0
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 1
21327: NEG
21328: PUSH
21329: LD_INT 1
21331: NEG
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 1
21339: NEG
21340: PUSH
21341: LD_INT 2
21343: NEG
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 0
21351: PUSH
21352: LD_INT 2
21354: NEG
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: LD_INT 1
21365: NEG
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 2
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 2
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: LD_INT 2
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 2
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: NEG
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 2
21424: NEG
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 2
21435: NEG
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: NEG
21448: PUSH
21449: LD_INT 3
21451: NEG
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: LD_INT 2
21462: NEG
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 3
21470: PUSH
21471: LD_INT 2
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: LD_INT 3
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: NEG
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 3
21501: NEG
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21536: LD_ADDR_VAR 0 31
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: LD_INT 0
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 1
21564: PUSH
21565: LD_INT 0
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 0
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 1
21594: NEG
21595: PUSH
21596: LD_INT 0
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PUSH
21607: LD_INT 1
21609: NEG
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: LD_INT 2
21621: NEG
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 1
21629: PUSH
21630: LD_INT 1
21632: NEG
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 2
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 2
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: LD_INT 2
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: LD_INT 2
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 2
21701: NEG
21702: PUSH
21703: LD_INT 1
21705: NEG
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 2
21713: NEG
21714: PUSH
21715: LD_INT 2
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 2
21725: NEG
21726: PUSH
21727: LD_INT 3
21729: NEG
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 2
21737: PUSH
21738: LD_INT 1
21740: NEG
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 3
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: LD_INT 3
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 3
21779: NEG
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21814: LD_ADDR_VAR 0 32
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: LD_INT 0
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: LD_INT 1
21834: NEG
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 1
21842: PUSH
21843: LD_INT 0
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: LD_INT 1
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: LD_INT 1
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: NEG
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: LD_INT 1
21887: NEG
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 1
21895: NEG
21896: PUSH
21897: LD_INT 2
21899: NEG
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: LD_INT 2
21910: NEG
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: LD_INT 1
21921: NEG
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 2
21929: PUSH
21930: LD_INT 1
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 2
21939: PUSH
21940: LD_INT 2
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 0
21959: PUSH
21960: LD_INT 2
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: NEG
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 2
21980: NEG
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 2
21991: NEG
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: LD_INT 3
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 1
22015: PUSH
22016: LD_INT 2
22018: NEG
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 3
22026: PUSH
22027: LD_INT 2
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 2
22036: PUSH
22037: LD_INT 3
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 2
22046: NEG
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 3
22057: NEG
22058: PUSH
22059: LD_INT 1
22061: NEG
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22092: LD_ADDR_VAR 0 33
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 1
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 0
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: NEG
22162: PUSH
22163: LD_INT 1
22165: NEG
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 1
22173: NEG
22174: PUSH
22175: LD_INT 2
22177: NEG
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 2
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: LD_INT 2
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: LD_INT 2
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 1
22236: NEG
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 2
22247: NEG
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 2
22258: NEG
22259: PUSH
22260: LD_INT 1
22262: NEG
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 2
22270: NEG
22271: PUSH
22272: LD_INT 2
22274: NEG
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 2
22282: NEG
22283: PUSH
22284: LD_INT 3
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: LD_INT 1
22297: NEG
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 3
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: LD_INT 3
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: LD_INT 2
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 3
22336: NEG
22337: PUSH
22338: LD_INT 2
22340: NEG
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22371: LD_ADDR_VAR 0 34
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: LD_INT 0
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 0
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: LD_INT 1
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 1
22429: NEG
22430: PUSH
22431: LD_INT 0
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 1
22452: NEG
22453: PUSH
22454: LD_INT 2
22456: NEG
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: LD_INT 2
22467: NEG
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 2
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: LD_INT 2
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 1
22516: NEG
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 2
22527: NEG
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: NEG
22539: PUSH
22540: LD_INT 1
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 2
22550: NEG
22551: PUSH
22552: LD_INT 2
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 3
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: LD_INT 2
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 3
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 3
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 2
22605: NEG
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 3
22616: NEG
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22651: LD_ADDR_VAR 0 35
22655: PUSH
22656: LD_INT 0
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 0
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 1
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 0
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: NEG
22721: PUSH
22722: LD_INT 1
22724: NEG
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 2
22732: PUSH
22733: LD_INT 1
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 2
22742: NEG
22743: PUSH
22744: LD_INT 1
22746: NEG
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22763: LD_ADDR_VAR 0 36
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 1
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: LD_INT 1
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: NEG
22833: PUSH
22834: LD_INT 1
22836: NEG
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: LD_INT 2
22848: NEG
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 1
22856: PUSH
22857: LD_INT 2
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22875: LD_ADDR_VAR 0 37
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 0
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: LD_INT 0
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: LD_INT 1
22948: NEG
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PUSH
22969: LD_INT 1
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22987: LD_ADDR_VAR 0 38
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: LD_INT 1
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 1
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 0
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 1
23045: NEG
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 1
23056: NEG
23057: PUSH
23058: LD_INT 1
23060: NEG
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 2
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 2
23078: NEG
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23099: LD_ADDR_VAR 0 39
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 0
23116: PUSH
23117: LD_INT 1
23119: NEG
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: LD_INT 0
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 0
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: LD_INT 0
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: LD_INT 1
23172: NEG
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 1
23180: NEG
23181: PUSH
23182: LD_INT 2
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 1
23192: PUSH
23193: LD_INT 2
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23211: LD_ADDR_VAR 0 40
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: LD_INT 1
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 0
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: LD_INT 1
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 0
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 1
23269: NEG
23270: PUSH
23271: LD_INT 0
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: LD_INT 1
23284: NEG
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: LD_INT 1
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: NEG
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23323: LD_ADDR_VAR 0 41
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 0
23340: PUSH
23341: LD_INT 1
23343: NEG
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 0
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: LD_INT 1
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 1
23404: NEG
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: LD_INT 1
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 2
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: LD_INT 2
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: NEG
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 2
23489: NEG
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 2
23501: NEG
23502: PUSH
23503: LD_INT 2
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 2
23513: NEG
23514: PUSH
23515: LD_INT 3
23517: NEG
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: LD_INT 1
23528: NEG
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 3
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 3
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 3
23556: PUSH
23557: LD_INT 2
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 3
23566: PUSH
23567: LD_INT 3
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: LD_INT 3
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 2
23586: NEG
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 3
23597: NEG
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 3
23608: NEG
23609: PUSH
23610: LD_INT 1
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 3
23620: NEG
23621: PUSH
23622: LD_INT 2
23624: NEG
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 3
23632: NEG
23633: PUSH
23634: LD_INT 3
23636: NEG
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23673: LD_ADDR_VAR 0 42
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: LD_INT 1
23693: NEG
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: NEG
23755: PUSH
23756: LD_INT 2
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: LD_INT 2
23769: NEG
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: LD_INT 2
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: LD_INT 2
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 1
23828: NEG
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 2
23839: NEG
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 2
23851: NEG
23852: PUSH
23853: LD_INT 2
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 2
23863: NEG
23864: PUSH
23865: LD_INT 3
23867: NEG
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 1
23875: NEG
23876: PUSH
23877: LD_INT 3
23879: NEG
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: LD_INT 3
23890: NEG
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: LD_INT 2
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 3
23909: PUSH
23910: LD_INT 2
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 3
23919: PUSH
23920: LD_INT 3
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 2
23929: PUSH
23930: LD_INT 3
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: LD_INT 3
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 3
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: LD_INT 2
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 3
23970: NEG
23971: PUSH
23972: LD_INT 2
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 3
23982: NEG
23983: PUSH
23984: LD_INT 3
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24023: LD_ADDR_VAR 0 43
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: LD_INT 1
24043: NEG
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 1
24081: NEG
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 1
24092: NEG
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: NEG
24105: PUSH
24106: LD_INT 2
24108: NEG
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: LD_INT 2
24119: NEG
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 2
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 2
24189: NEG
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 2
24200: NEG
24201: PUSH
24202: LD_INT 1
24204: NEG
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 3
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 3
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 2
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 3
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 3
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: LD_INT 3
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 3
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 1
24297: NEG
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 2
24308: NEG
24309: PUSH
24310: LD_INT 1
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 3
24319: NEG
24320: PUSH
24321: LD_INT 0
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 3
24330: NEG
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24371: LD_ADDR_VAR 0 44
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: LD_INT 1
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 1
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: LD_INT 1
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: LD_INT 2
24456: NEG
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 2
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 2
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 2
24526: NEG
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 2
24537: NEG
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 2
24549: NEG
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 2
24561: NEG
24562: PUSH
24563: LD_INT 3
24565: NEG
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 3
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 3
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 3
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 3
24614: PUSH
24615: LD_INT 3
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: LD_INT 3
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 2
24634: NEG
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 3
24645: NEG
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 3
24656: NEG
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 3
24668: NEG
24669: PUSH
24670: LD_INT 2
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 3
24680: NEG
24681: PUSH
24682: LD_INT 3
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24721: LD_ADDR_VAR 0 45
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: LD_INT 1
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: NEG
24791: PUSH
24792: LD_INT 1
24794: NEG
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: LD_INT 2
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: LD_INT 2
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: LD_INT 1
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 2
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 2
24846: PUSH
24847: LD_INT 2
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: NEG
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: NEG
24888: PUSH
24889: LD_INT 1
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 2
24899: NEG
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 2
24911: NEG
24912: PUSH
24913: LD_INT 3
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: LD_INT 3
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: LD_INT 3
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 2
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 3
24957: PUSH
24958: LD_INT 2
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 3
24967: PUSH
24968: LD_INT 3
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: LD_INT 3
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: LD_INT 3
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: LD_INT 3
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: LD_INT 2
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 3
25018: NEG
25019: PUSH
25020: LD_INT 2
25022: NEG
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 3
25030: NEG
25031: PUSH
25032: LD_INT 3
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25071: LD_ADDR_VAR 0 46
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 0
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: LD_INT 1
25091: NEG
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: NEG
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: NEG
25141: PUSH
25142: LD_INT 1
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: NEG
25153: PUSH
25154: LD_INT 2
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: LD_INT 2
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 2
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: NEG
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: LD_INT 0
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 2
25248: NEG
25249: PUSH
25250: LD_INT 1
25252: NEG
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: LD_INT 3
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: LD_INT 3
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 2
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 2
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 3
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 3
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: LD_INT 3
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 3
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 3
25367: NEG
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 3
25378: NEG
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25419: LD_ADDR_VAR 0 47
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 1
25477: NEG
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: LD_INT 1
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: NEG
25501: PUSH
25502: LD_INT 2
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 2
25534: NEG
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: NEG
25547: PUSH
25548: LD_INT 2
25550: NEG
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25570: LD_ADDR_VAR 0 48
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 0
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 1
25628: NEG
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 1
25651: NEG
25652: PUSH
25653: LD_INT 2
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: LD_INT 2
25666: NEG
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: LD_INT 1
25677: NEG
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 2
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25717: LD_ADDR_VAR 0 49
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 2
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25861: LD_ADDR_VAR 0 50
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: LD_INT 1
25934: NEG
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 2
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 2
25952: PUSH
25953: LD_INT 2
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26005: LD_ADDR_VAR 0 51
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: LD_INT 2
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: NEG
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 2
26117: NEG
26118: PUSH
26119: LD_INT 0
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: NEG
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26152: LD_ADDR_VAR 0 52
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: LD_INT 1
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: LD_INT 1
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: NEG
26211: PUSH
26212: LD_INT 0
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: LD_INT 1
26225: NEG
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: LD_INT 2
26237: NEG
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 2
26256: NEG
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: NEG
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26303: LD_ADDR_VAR 0 53
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 1
26361: NEG
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: LD_INT 2
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 2
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: LD_INT 1
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 2
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 2
26438: PUSH
26439: LD_INT 2
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: NEG
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: NEG
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: LD_INT 2
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26533: LD_ADDR_VAR 0 54
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 1
26591: NEG
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: LD_INT 2
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: LD_INT 2
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: LD_INT 1
26640: NEG
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 2
26668: PUSH
26669: LD_INT 2
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: NEG
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: NEG
26733: PUSH
26734: LD_INT 2
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26763: LD_ADDR_VAR 0 55
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: NEG
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: LD_INT 1
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: LD_INT 2
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: LD_INT 2
26859: NEG
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: LD_INT 1
26870: NEG
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: LD_INT 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: LD_INT 1
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 2
26950: NEG
26951: PUSH
26952: LD_INT 1
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 2
26962: NEG
26963: PUSH
26964: LD_INT 2
26966: NEG
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26993: LD_ADDR_VAR 0 56
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 1
27051: NEG
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: NEG
27075: PUSH
27076: LD_INT 2
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: LD_INT 2
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: LD_INT 1
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 2
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 2
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 2
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: LD_INT 2
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: NEG
27159: PUSH
27160: LD_INT 1
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 2
27180: NEG
27181: PUSH
27182: LD_INT 1
27184: NEG
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 2
27192: NEG
27193: PUSH
27194: LD_INT 2
27196: NEG
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27223: LD_ADDR_VAR 0 57
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: NEG
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: LD_INT 2
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 2
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 2
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: PUSH
27390: LD_INT 1
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 2
27410: NEG
27411: PUSH
27412: LD_INT 1
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27453: LD_ADDR_VAR 0 58
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: LD_INT 2
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: LD_INT 2
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 2
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 2
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: NEG
27653: PUSH
27654: LD_INT 2
27656: NEG
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27683: LD_ADDR_VAR 0 59
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: LD_INT 1
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27771: LD_ADDR_VAR 0 60
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27859: LD_ADDR_VAR 0 61
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27947: LD_ADDR_VAR 0 62
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28035: LD_ADDR_VAR 0 63
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28123: LD_ADDR_VAR 0 64
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: ST_TO_ADDR
// end ; 1 :
28211: GO 34108
28213: LD_INT 1
28215: DOUBLE
28216: EQUAL
28217: IFTRUE 28221
28219: GO 30844
28221: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28222: LD_ADDR_VAR 0 11
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 3
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 3
28244: NEG
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28266: LD_ADDR_VAR 0 12
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: LD_INT 1
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 3
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 3
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28307: LD_ADDR_VAR 0 13
28311: PUSH
28312: LD_INT 3
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 3
28324: PUSH
28325: LD_INT 3
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: LD_INT 3
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: LIST
28346: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28347: LD_ADDR_VAR 0 14
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: LD_INT 3
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: LD_INT 3
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28388: LD_ADDR_VAR 0 15
28392: PUSH
28393: LD_INT 2
28395: NEG
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 3
28406: NEG
28407: PUSH
28408: LD_INT 0
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 3
28417: NEG
28418: PUSH
28419: LD_INT 1
28421: NEG
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28432: LD_ADDR_VAR 0 16
28436: PUSH
28437: LD_INT 2
28439: NEG
28440: PUSH
28441: LD_INT 3
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 3
28451: NEG
28452: PUSH
28453: LD_INT 2
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 3
28463: NEG
28464: PUSH
28465: LD_INT 3
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28478: LD_ADDR_VAR 0 17
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: LD_INT 3
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: LD_INT 3
28500: NEG
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 1
28508: PUSH
28509: LD_INT 2
28511: NEG
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: LIST
28521: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28522: LD_ADDR_VAR 0 18
28526: PUSH
28527: LD_INT 2
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 3
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 3
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28563: LD_ADDR_VAR 0 19
28567: PUSH
28568: LD_INT 3
28570: PUSH
28571: LD_INT 2
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 3
28580: PUSH
28581: LD_INT 3
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: LD_INT 3
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28603: LD_ADDR_VAR 0 20
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 3
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 3
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 2
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28644: LD_ADDR_VAR 0 21
28648: PUSH
28649: LD_INT 2
28651: NEG
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 3
28662: NEG
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 3
28673: NEG
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28688: LD_ADDR_VAR 0 22
28692: PUSH
28693: LD_INT 2
28695: NEG
28696: PUSH
28697: LD_INT 3
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 3
28707: NEG
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 3
28719: NEG
28720: PUSH
28721: LD_INT 3
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: LIST
28733: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28734: LD_ADDR_VAR 0 23
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: LD_INT 3
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: NEG
28753: PUSH
28754: LD_INT 4
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: PUSH
28765: LD_INT 3
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28778: LD_ADDR_VAR 0 24
28782: PUSH
28783: LD_INT 3
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 3
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 4
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28819: LD_ADDR_VAR 0 25
28823: PUSH
28824: LD_INT 3
28826: PUSH
28827: LD_INT 3
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 4
28836: PUSH
28837: LD_INT 3
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 3
28846: PUSH
28847: LD_INT 4
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: LIST
28858: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28859: LD_ADDR_VAR 0 26
28863: PUSH
28864: LD_INT 0
28866: PUSH
28867: LD_INT 3
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: LD_INT 4
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: LD_INT 3
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28900: LD_ADDR_VAR 0 27
28904: PUSH
28905: LD_INT 3
28907: NEG
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 3
28918: NEG
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 4
28929: NEG
28930: PUSH
28931: LD_INT 1
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28944: LD_ADDR_VAR 0 28
28948: PUSH
28949: LD_INT 3
28951: NEG
28952: PUSH
28953: LD_INT 3
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 3
28963: NEG
28964: PUSH
28965: LD_INT 4
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 4
28975: NEG
28976: PUSH
28977: LD_INT 3
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28990: LD_ADDR_VAR 0 29
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 3
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: LD_INT 3
29012: NEG
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: LD_INT 2
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: LD_INT 4
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: LD_INT 4
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: LD_INT 3
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 1
29065: NEG
29066: PUSH
29067: LD_INT 5
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: LD_INT 5
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 4
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: LD_INT 6
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 6
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: LD_INT 5
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29145: LD_ADDR_VAR 0 30
29149: PUSH
29150: LD_INT 2
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 3
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 3
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 3
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 4
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 4
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 4
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 5
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 5
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 5
29245: PUSH
29246: LD_INT 1
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 6
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 6
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29288: LD_ADDR_VAR 0 31
29292: PUSH
29293: LD_INT 3
29295: PUSH
29296: LD_INT 2
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 3
29305: PUSH
29306: LD_INT 3
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 2
29315: PUSH
29316: LD_INT 3
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 4
29325: PUSH
29326: LD_INT 3
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 4
29335: PUSH
29336: LD_INT 4
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 3
29345: PUSH
29346: LD_INT 4
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 5
29355: PUSH
29356: LD_INT 4
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 5
29365: PUSH
29366: LD_INT 5
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 4
29375: PUSH
29376: LD_INT 5
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 6
29385: PUSH
29386: LD_INT 5
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 6
29395: PUSH
29396: LD_INT 6
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 5
29405: PUSH
29406: LD_INT 6
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29427: LD_ADDR_VAR 0 32
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: LD_INT 3
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: LD_INT 3
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: LD_INT 4
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: LD_INT 4
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: LD_INT 3
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: LD_INT 5
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 0
29506: PUSH
29507: LD_INT 5
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: LD_INT 4
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: LD_INT 6
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 0
29537: PUSH
29538: LD_INT 6
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: LD_INT 5
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29570: LD_ADDR_VAR 0 33
29574: PUSH
29575: LD_INT 2
29577: NEG
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 3
29588: NEG
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 3
29599: NEG
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 3
29611: NEG
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 4
29622: NEG
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 4
29633: NEG
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 4
29645: NEG
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 5
29656: NEG
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 5
29667: NEG
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 5
29679: NEG
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 6
29690: NEG
29691: PUSH
29692: LD_INT 0
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 6
29701: NEG
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29725: LD_ADDR_VAR 0 34
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: LD_INT 3
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 3
29744: NEG
29745: PUSH
29746: LD_INT 2
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 3
29756: NEG
29757: PUSH
29758: LD_INT 3
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 3
29768: NEG
29769: PUSH
29770: LD_INT 4
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 4
29780: NEG
29781: PUSH
29782: LD_INT 3
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 4
29792: NEG
29793: PUSH
29794: LD_INT 4
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 4
29804: NEG
29805: PUSH
29806: LD_INT 5
29808: NEG
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 5
29816: NEG
29817: PUSH
29818: LD_INT 4
29820: NEG
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 5
29828: NEG
29829: PUSH
29830: LD_INT 5
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 5
29840: NEG
29841: PUSH
29842: LD_INT 6
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 6
29852: NEG
29853: PUSH
29854: LD_INT 5
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 6
29864: NEG
29865: PUSH
29866: LD_INT 6
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29888: LD_ADDR_VAR 0 41
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: LD_INT 3
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: LD_INT 2
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: LIST
29931: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29932: LD_ADDR_VAR 0 42
29936: PUSH
29937: LD_INT 2
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 2
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29973: LD_ADDR_VAR 0 43
29977: PUSH
29978: LD_INT 2
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 3
29990: PUSH
29991: LD_INT 2
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 3
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30013: LD_ADDR_VAR 0 44
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 2
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: LD_INT 3
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: LD_INT 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30054: LD_ADDR_VAR 0 45
30058: PUSH
30059: LD_INT 2
30061: NEG
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 2
30072: NEG
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 3
30083: NEG
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30098: LD_ADDR_VAR 0 46
30102: PUSH
30103: LD_INT 2
30105: NEG
30106: PUSH
30107: LD_INT 2
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 2
30117: NEG
30118: PUSH
30119: LD_INT 3
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 3
30129: NEG
30130: PUSH
30131: LD_INT 2
30133: NEG
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30144: LD_ADDR_VAR 0 47
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: LD_INT 3
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: NEG
30164: PUSH
30165: LD_INT 3
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30177: LD_ADDR_VAR 0 48
30181: PUSH
30182: LD_INT 1
30184: PUSH
30185: LD_INT 2
30187: NEG
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30208: LD_ADDR_VAR 0 49
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30237: LD_ADDR_VAR 0 50
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30266: LD_ADDR_VAR 0 51
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 2
30284: NEG
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30297: LD_ADDR_VAR 0 52
30301: PUSH
30302: LD_INT 3
30304: NEG
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 3
30316: NEG
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30330: LD_ADDR_VAR 0 53
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: LD_INT 3
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: LD_INT 3
30352: NEG
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: LD_INT 2
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: LIST
30373: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30374: LD_ADDR_VAR 0 54
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 3
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: LIST
30414: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30415: LD_ADDR_VAR 0 55
30419: PUSH
30420: LD_INT 3
30422: PUSH
30423: LD_INT 2
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: LD_INT 3
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: LD_INT 3
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30455: LD_ADDR_VAR 0 56
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: LD_INT 2
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: LIST
30495: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30496: LD_ADDR_VAR 0 57
30500: PUSH
30501: LD_INT 2
30503: NEG
30504: PUSH
30505: LD_INT 1
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 3
30514: NEG
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 3
30525: NEG
30526: PUSH
30527: LD_INT 1
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: LIST
30539: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30540: LD_ADDR_VAR 0 58
30544: PUSH
30545: LD_INT 2
30547: NEG
30548: PUSH
30549: LD_INT 3
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 3
30559: NEG
30560: PUSH
30561: LD_INT 2
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 3
30571: NEG
30572: PUSH
30573: LD_INT 3
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30586: LD_ADDR_VAR 0 59
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: LD_INT 2
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: LIST
30629: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30630: LD_ADDR_VAR 0 60
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: LD_INT 1
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30671: LD_ADDR_VAR 0 61
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 1
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: LIST
30710: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30711: LD_ADDR_VAR 0 62
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: LD_INT 2
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30752: LD_ADDR_VAR 0 63
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 2
30770: NEG
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 2
30781: NEG
30782: PUSH
30783: LD_INT 1
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: LIST
30795: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30796: LD_ADDR_VAR 0 64
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 2
30815: NEG
30816: PUSH
30817: LD_INT 1
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 2
30827: NEG
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: ST_TO_ADDR
// end ; 2 :
30842: GO 34108
30844: LD_INT 2
30846: DOUBLE
30847: EQUAL
30848: IFTRUE 30852
30850: GO 34107
30852: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30853: LD_ADDR_VAR 0 29
30857: PUSH
30858: LD_INT 4
30860: PUSH
30861: LD_INT 0
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 4
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 5
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 5
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 4
30901: PUSH
30902: LD_INT 1
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 3
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 3
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 3
30932: PUSH
30933: LD_INT 2
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 5
30943: PUSH
30944: LD_INT 2
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: LD_INT 3
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 3
30963: PUSH
30964: LD_INT 2
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 4
30973: PUSH
30974: LD_INT 3
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 4
30983: PUSH
30984: LD_INT 4
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 3
30993: PUSH
30994: LD_INT 4
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: LD_INT 3
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 4
31023: PUSH
31024: LD_INT 2
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 2
31033: PUSH
31034: LD_INT 4
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: LD_INT 4
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 4
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 5
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 5
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: LD_INT 4
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 5
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: LD_INT 3
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 3
31136: NEG
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 3
31147: NEG
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 2
31170: NEG
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 3
31181: NEG
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 4
31192: NEG
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 4
31203: NEG
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 4
31215: NEG
31216: PUSH
31217: LD_INT 2
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 2
31227: NEG
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 4
31238: NEG
31239: PUSH
31240: LD_INT 4
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 4
31250: NEG
31251: PUSH
31252: LD_INT 5
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 3
31262: NEG
31263: PUSH
31264: LD_INT 4
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 3
31274: NEG
31275: PUSH
31276: LD_INT 3
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 4
31286: NEG
31287: PUSH
31288: LD_INT 3
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 5
31298: NEG
31299: PUSH
31300: LD_INT 4
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 5
31310: NEG
31311: PUSH
31312: LD_INT 5
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 3
31322: NEG
31323: PUSH
31324: LD_INT 5
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 5
31334: NEG
31335: PUSH
31336: LD_INT 3
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31391: LD_ADDR_VAR 0 30
31395: PUSH
31396: LD_INT 4
31398: PUSH
31399: LD_INT 4
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 4
31408: PUSH
31409: LD_INT 3
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 5
31418: PUSH
31419: LD_INT 4
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 5
31428: PUSH
31429: LD_INT 5
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 4
31438: PUSH
31439: LD_INT 5
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 3
31448: PUSH
31449: LD_INT 4
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 3
31458: PUSH
31459: LD_INT 3
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 5
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: LD_INT 5
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: LD_INT 3
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: LD_INT 2
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: LD_INT 3
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: LD_INT 4
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 4
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: LD_INT 3
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 2
31560: PUSH
31561: LD_INT 4
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 2
31570: NEG
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 4
31581: NEG
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 4
31592: NEG
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: NEG
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 3
31615: NEG
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 4
31626: NEG
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 5
31637: NEG
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 5
31648: NEG
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 5
31660: NEG
31661: PUSH
31662: LD_INT 2
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 3
31672: NEG
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 3
31683: NEG
31684: PUSH
31685: LD_INT 3
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 3
31695: NEG
31696: PUSH
31697: LD_INT 4
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: LD_INT 3
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 2
31719: NEG
31720: PUSH
31721: LD_INT 2
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 3
31731: NEG
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 4
31743: NEG
31744: PUSH
31745: LD_INT 3
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 4
31755: NEG
31756: PUSH
31757: LD_INT 4
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: LD_INT 4
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 4
31779: NEG
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 4
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 5
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: LD_INT 4
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: LD_INT 3
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: LD_INT 3
31838: NEG
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: LD_INT 4
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: LD_INT 5
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 3
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: LD_INT 5
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31938: LD_ADDR_VAR 0 31
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 4
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 3
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 4
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: LD_INT 5
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 5
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: LD_INT 4
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: LD_INT 3
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: LD_INT 5
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: LD_INT 3
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 3
32038: NEG
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 3
32049: NEG
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 3
32083: NEG
32084: PUSH
32085: LD_INT 1
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 4
32094: NEG
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 4
32105: NEG
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 4
32117: NEG
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: NEG
32130: PUSH
32131: LD_INT 2
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 4
32140: NEG
32141: PUSH
32142: LD_INT 4
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 4
32152: NEG
32153: PUSH
32154: LD_INT 5
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 3
32164: NEG
32165: PUSH
32166: LD_INT 4
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 3
32176: NEG
32177: PUSH
32178: LD_INT 3
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 4
32188: NEG
32189: PUSH
32190: LD_INT 3
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 5
32200: NEG
32201: PUSH
32202: LD_INT 4
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 5
32212: NEG
32213: PUSH
32214: LD_INT 5
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 3
32224: NEG
32225: PUSH
32226: LD_INT 5
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 5
32236: NEG
32237: PUSH
32238: LD_INT 3
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 3
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 4
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: LD_INT 3
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: LD_INT 2
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: LD_INT 2
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: LD_INT 3
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: LD_INT 4
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: LD_INT 4
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 4
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 5
32371: PUSH
32372: LD_INT 0
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 5
32381: PUSH
32382: LD_INT 1
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 4
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 3
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 3
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 3
32422: PUSH
32423: LD_INT 2
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 5
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32488: LD_ADDR_VAR 0 32
32492: PUSH
32493: LD_INT 4
32495: NEG
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: NEG
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 3
32518: NEG
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 3
32529: NEG
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 4
32540: NEG
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 5
32551: NEG
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 5
32562: NEG
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 5
32574: NEG
32575: PUSH
32576: LD_INT 2
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 3
32586: NEG
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 3
32597: NEG
32598: PUSH
32599: LD_INT 3
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 3
32609: NEG
32610: PUSH
32611: LD_INT 4
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 2
32621: NEG
32622: PUSH
32623: LD_INT 3
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 2
32633: NEG
32634: PUSH
32635: LD_INT 2
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 3
32645: NEG
32646: PUSH
32647: LD_INT 2
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 4
32657: NEG
32658: PUSH
32659: LD_INT 3
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 4
32669: NEG
32670: PUSH
32671: LD_INT 4
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 2
32681: NEG
32682: PUSH
32683: LD_INT 4
32685: NEG
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 4
32693: NEG
32694: PUSH
32695: LD_INT 2
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: LD_INT 4
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: LD_INT 5
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: LD_INT 4
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: LD_INT 3
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: LD_INT 3
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 4
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: LD_INT 5
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: LD_INT 3
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: LD_INT 5
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 3
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 3
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 4
32828: PUSH
32829: LD_INT 0
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 4
32838: PUSH
32839: LD_INT 1
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 3
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: LD_INT 1
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 2
32879: PUSH
32880: LD_INT 2
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 4
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 4
32900: PUSH
32901: LD_INT 4
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 4
32910: PUSH
32911: LD_INT 3
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 5
32920: PUSH
32921: LD_INT 4
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 5
32930: PUSH
32931: LD_INT 5
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 4
32940: PUSH
32941: LD_INT 5
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 3
32950: PUSH
32951: LD_INT 4
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 3
32960: PUSH
32961: LD_INT 3
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 5
32970: PUSH
32971: LD_INT 3
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 3
32980: PUSH
32981: LD_INT 5
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33035: LD_ADDR_VAR 0 33
33039: PUSH
33040: LD_INT 4
33042: NEG
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 4
33054: NEG
33055: PUSH
33056: LD_INT 5
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 3
33066: NEG
33067: PUSH
33068: LD_INT 4
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: LD_INT 3
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 4
33090: NEG
33091: PUSH
33092: LD_INT 3
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 5
33102: NEG
33103: PUSH
33104: LD_INT 4
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 5
33114: NEG
33115: PUSH
33116: LD_INT 5
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 3
33126: NEG
33127: PUSH
33128: LD_INT 5
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 5
33138: NEG
33139: PUSH
33140: LD_INT 3
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: LD_INT 3
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: LD_INT 4
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: LD_INT 3
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: LD_INT 2
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 2
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: LD_INT 3
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: LD_INT 4
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 2
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 2
33240: NEG
33241: PUSH
33242: LD_INT 4
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 4
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 5
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 5
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 4
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 3
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 3
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 3
33324: PUSH
33325: LD_INT 2
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 5
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 3
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 3
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 4
33365: PUSH
33366: LD_INT 3
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 4
33375: PUSH
33376: LD_INT 4
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 3
33385: PUSH
33386: LD_INT 4
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: PUSH
33396: LD_INT 3
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 2
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 4
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 2
33425: PUSH
33426: LD_INT 4
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 0
33435: PUSH
33436: LD_INT 4
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: LD_INT 4
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 5
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: LD_INT 5
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: LD_INT 4
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 3
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: LD_INT 5
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 2
33517: NEG
33518: PUSH
33519: LD_INT 3
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33573: LD_ADDR_VAR 0 34
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: LD_INT 4
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: LD_INT 5
33594: NEG
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: LD_INT 4
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: LD_INT 3
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: LD_INT 3
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 4
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 5
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 2
33659: PUSH
33660: LD_INT 3
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 2
33670: NEG
33671: PUSH
33672: LD_INT 5
33674: NEG
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 3
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 3
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 4
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 4
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 3
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: LD_INT 1
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 2
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 4
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 4
33775: PUSH
33776: LD_INT 4
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 4
33785: PUSH
33786: LD_INT 3
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 5
33795: PUSH
33796: LD_INT 4
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 5
33805: PUSH
33806: LD_INT 5
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 4
33815: PUSH
33816: LD_INT 5
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 3
33825: PUSH
33826: LD_INT 4
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 3
33835: PUSH
33836: LD_INT 3
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 5
33845: PUSH
33846: LD_INT 3
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 3
33855: PUSH
33856: LD_INT 5
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: LD_INT 3
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: LD_INT 3
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: LD_INT 4
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: LD_INT 4
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: LD_INT 3
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: NEG
33927: PUSH
33928: LD_INT 2
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: LD_INT 4
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 2
33947: NEG
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 4
33958: NEG
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 4
33969: NEG
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 3
33981: NEG
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 3
33992: NEG
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 4
34003: NEG
34004: PUSH
34005: LD_INT 1
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 5
34014: NEG
34015: PUSH
34016: LD_INT 0
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 5
34025: NEG
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 5
34037: NEG
34038: PUSH
34039: LD_INT 2
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 3
34049: NEG
34050: PUSH
34051: LD_INT 2
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: ST_TO_ADDR
// end ; end ;
34105: GO 34108
34107: POP
// case btype of b_depot , b_warehouse :
34108: LD_VAR 0 1
34112: PUSH
34113: LD_INT 0
34115: DOUBLE
34116: EQUAL
34117: IFTRUE 34127
34119: LD_INT 1
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34127
34125: GO 34328
34127: POP
// case nation of nation_american :
34128: LD_VAR 0 5
34132: PUSH
34133: LD_INT 1
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34141
34139: GO 34197
34141: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34142: LD_ADDR_VAR 0 9
34146: PUSH
34147: LD_VAR 0 11
34151: PUSH
34152: LD_VAR 0 12
34156: PUSH
34157: LD_VAR 0 13
34161: PUSH
34162: LD_VAR 0 14
34166: PUSH
34167: LD_VAR 0 15
34171: PUSH
34172: LD_VAR 0 16
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: PUSH
34185: LD_VAR 0 4
34189: PUSH
34190: LD_INT 1
34192: PLUS
34193: ARRAY
34194: ST_TO_ADDR
34195: GO 34326
34197: LD_INT 2
34199: DOUBLE
34200: EQUAL
34201: IFTRUE 34205
34203: GO 34261
34205: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34206: LD_ADDR_VAR 0 9
34210: PUSH
34211: LD_VAR 0 17
34215: PUSH
34216: LD_VAR 0 18
34220: PUSH
34221: LD_VAR 0 19
34225: PUSH
34226: LD_VAR 0 20
34230: PUSH
34231: LD_VAR 0 21
34235: PUSH
34236: LD_VAR 0 22
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: PUSH
34249: LD_VAR 0 4
34253: PUSH
34254: LD_INT 1
34256: PLUS
34257: ARRAY
34258: ST_TO_ADDR
34259: GO 34326
34261: LD_INT 3
34263: DOUBLE
34264: EQUAL
34265: IFTRUE 34269
34267: GO 34325
34269: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34270: LD_ADDR_VAR 0 9
34274: PUSH
34275: LD_VAR 0 23
34279: PUSH
34280: LD_VAR 0 24
34284: PUSH
34285: LD_VAR 0 25
34289: PUSH
34290: LD_VAR 0 26
34294: PUSH
34295: LD_VAR 0 27
34299: PUSH
34300: LD_VAR 0 28
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: PUSH
34313: LD_VAR 0 4
34317: PUSH
34318: LD_INT 1
34320: PLUS
34321: ARRAY
34322: ST_TO_ADDR
34323: GO 34326
34325: POP
34326: GO 34881
34328: LD_INT 2
34330: DOUBLE
34331: EQUAL
34332: IFTRUE 34342
34334: LD_INT 3
34336: DOUBLE
34337: EQUAL
34338: IFTRUE 34342
34340: GO 34398
34342: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34343: LD_ADDR_VAR 0 9
34347: PUSH
34348: LD_VAR 0 29
34352: PUSH
34353: LD_VAR 0 30
34357: PUSH
34358: LD_VAR 0 31
34362: PUSH
34363: LD_VAR 0 32
34367: PUSH
34368: LD_VAR 0 33
34372: PUSH
34373: LD_VAR 0 34
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: PUSH
34386: LD_VAR 0 4
34390: PUSH
34391: LD_INT 1
34393: PLUS
34394: ARRAY
34395: ST_TO_ADDR
34396: GO 34881
34398: LD_INT 16
34400: DOUBLE
34401: EQUAL
34402: IFTRUE 34460
34404: LD_INT 17
34406: DOUBLE
34407: EQUAL
34408: IFTRUE 34460
34410: LD_INT 18
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34460
34416: LD_INT 19
34418: DOUBLE
34419: EQUAL
34420: IFTRUE 34460
34422: LD_INT 22
34424: DOUBLE
34425: EQUAL
34426: IFTRUE 34460
34428: LD_INT 20
34430: DOUBLE
34431: EQUAL
34432: IFTRUE 34460
34434: LD_INT 21
34436: DOUBLE
34437: EQUAL
34438: IFTRUE 34460
34440: LD_INT 23
34442: DOUBLE
34443: EQUAL
34444: IFTRUE 34460
34446: LD_INT 24
34448: DOUBLE
34449: EQUAL
34450: IFTRUE 34460
34452: LD_INT 25
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34516
34460: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34461: LD_ADDR_VAR 0 9
34465: PUSH
34466: LD_VAR 0 35
34470: PUSH
34471: LD_VAR 0 36
34475: PUSH
34476: LD_VAR 0 37
34480: PUSH
34481: LD_VAR 0 38
34485: PUSH
34486: LD_VAR 0 39
34490: PUSH
34491: LD_VAR 0 40
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: PUSH
34504: LD_VAR 0 4
34508: PUSH
34509: LD_INT 1
34511: PLUS
34512: ARRAY
34513: ST_TO_ADDR
34514: GO 34881
34516: LD_INT 6
34518: DOUBLE
34519: EQUAL
34520: IFTRUE 34572
34522: LD_INT 7
34524: DOUBLE
34525: EQUAL
34526: IFTRUE 34572
34528: LD_INT 8
34530: DOUBLE
34531: EQUAL
34532: IFTRUE 34572
34534: LD_INT 13
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34572
34540: LD_INT 12
34542: DOUBLE
34543: EQUAL
34544: IFTRUE 34572
34546: LD_INT 15
34548: DOUBLE
34549: EQUAL
34550: IFTRUE 34572
34552: LD_INT 11
34554: DOUBLE
34555: EQUAL
34556: IFTRUE 34572
34558: LD_INT 14
34560: DOUBLE
34561: EQUAL
34562: IFTRUE 34572
34564: LD_INT 10
34566: DOUBLE
34567: EQUAL
34568: IFTRUE 34572
34570: GO 34628
34572: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34573: LD_ADDR_VAR 0 9
34577: PUSH
34578: LD_VAR 0 41
34582: PUSH
34583: LD_VAR 0 42
34587: PUSH
34588: LD_VAR 0 43
34592: PUSH
34593: LD_VAR 0 44
34597: PUSH
34598: LD_VAR 0 45
34602: PUSH
34603: LD_VAR 0 46
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: PUSH
34616: LD_VAR 0 4
34620: PUSH
34621: LD_INT 1
34623: PLUS
34624: ARRAY
34625: ST_TO_ADDR
34626: GO 34881
34628: LD_INT 36
34630: DOUBLE
34631: EQUAL
34632: IFTRUE 34636
34634: GO 34692
34636: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34637: LD_ADDR_VAR 0 9
34641: PUSH
34642: LD_VAR 0 47
34646: PUSH
34647: LD_VAR 0 48
34651: PUSH
34652: LD_VAR 0 49
34656: PUSH
34657: LD_VAR 0 50
34661: PUSH
34662: LD_VAR 0 51
34666: PUSH
34667: LD_VAR 0 52
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: PUSH
34680: LD_VAR 0 4
34684: PUSH
34685: LD_INT 1
34687: PLUS
34688: ARRAY
34689: ST_TO_ADDR
34690: GO 34881
34692: LD_INT 4
34694: DOUBLE
34695: EQUAL
34696: IFTRUE 34718
34698: LD_INT 5
34700: DOUBLE
34701: EQUAL
34702: IFTRUE 34718
34704: LD_INT 34
34706: DOUBLE
34707: EQUAL
34708: IFTRUE 34718
34710: LD_INT 37
34712: DOUBLE
34713: EQUAL
34714: IFTRUE 34718
34716: GO 34774
34718: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34719: LD_ADDR_VAR 0 9
34723: PUSH
34724: LD_VAR 0 53
34728: PUSH
34729: LD_VAR 0 54
34733: PUSH
34734: LD_VAR 0 55
34738: PUSH
34739: LD_VAR 0 56
34743: PUSH
34744: LD_VAR 0 57
34748: PUSH
34749: LD_VAR 0 58
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: PUSH
34762: LD_VAR 0 4
34766: PUSH
34767: LD_INT 1
34769: PLUS
34770: ARRAY
34771: ST_TO_ADDR
34772: GO 34881
34774: LD_INT 31
34776: DOUBLE
34777: EQUAL
34778: IFTRUE 34824
34780: LD_INT 32
34782: DOUBLE
34783: EQUAL
34784: IFTRUE 34824
34786: LD_INT 33
34788: DOUBLE
34789: EQUAL
34790: IFTRUE 34824
34792: LD_INT 27
34794: DOUBLE
34795: EQUAL
34796: IFTRUE 34824
34798: LD_INT 26
34800: DOUBLE
34801: EQUAL
34802: IFTRUE 34824
34804: LD_INT 28
34806: DOUBLE
34807: EQUAL
34808: IFTRUE 34824
34810: LD_INT 29
34812: DOUBLE
34813: EQUAL
34814: IFTRUE 34824
34816: LD_INT 30
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 34880
34824: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34825: LD_ADDR_VAR 0 9
34829: PUSH
34830: LD_VAR 0 59
34834: PUSH
34835: LD_VAR 0 60
34839: PUSH
34840: LD_VAR 0 61
34844: PUSH
34845: LD_VAR 0 62
34849: PUSH
34850: LD_VAR 0 63
34854: PUSH
34855: LD_VAR 0 64
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: PUSH
34868: LD_VAR 0 4
34872: PUSH
34873: LD_INT 1
34875: PLUS
34876: ARRAY
34877: ST_TO_ADDR
34878: GO 34881
34880: POP
// temp_list2 = [ ] ;
34881: LD_ADDR_VAR 0 10
34885: PUSH
34886: EMPTY
34887: ST_TO_ADDR
// for i in temp_list do
34888: LD_ADDR_VAR 0 8
34892: PUSH
34893: LD_VAR 0 9
34897: PUSH
34898: FOR_IN
34899: IFFALSE 34951
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34901: LD_ADDR_VAR 0 10
34905: PUSH
34906: LD_VAR 0 10
34910: PUSH
34911: LD_VAR 0 8
34915: PUSH
34916: LD_INT 1
34918: ARRAY
34919: PUSH
34920: LD_VAR 0 2
34924: PLUS
34925: PUSH
34926: LD_VAR 0 8
34930: PUSH
34931: LD_INT 2
34933: ARRAY
34934: PUSH
34935: LD_VAR 0 3
34939: PLUS
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: EMPTY
34946: LIST
34947: ADD
34948: ST_TO_ADDR
34949: GO 34898
34951: POP
34952: POP
// result = temp_list2 ;
34953: LD_ADDR_VAR 0 7
34957: PUSH
34958: LD_VAR 0 10
34962: ST_TO_ADDR
// end ;
34963: LD_VAR 0 7
34967: RET
// export function EnemyInRange ( unit , dist ) ; begin
34968: LD_INT 0
34970: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34971: LD_ADDR_VAR 0 3
34975: PUSH
34976: LD_VAR 0 1
34980: PPUSH
34981: CALL_OW 255
34985: PPUSH
34986: LD_VAR 0 1
34990: PPUSH
34991: CALL_OW 250
34995: PPUSH
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL_OW 251
35005: PPUSH
35006: LD_VAR 0 2
35010: PPUSH
35011: CALL 8739 0 4
35015: PUSH
35016: LD_INT 4
35018: ARRAY
35019: ST_TO_ADDR
// end ;
35020: LD_VAR 0 3
35024: RET
// export function PlayerSeeMe ( unit ) ; begin
35025: LD_INT 0
35027: PPUSH
// result := See ( your_side , unit ) ;
35028: LD_ADDR_VAR 0 2
35032: PUSH
35033: LD_OWVAR 2
35037: PPUSH
35038: LD_VAR 0 1
35042: PPUSH
35043: CALL_OW 292
35047: ST_TO_ADDR
// end ;
35048: LD_VAR 0 2
35052: RET
// export function ReverseDir ( unit ) ; begin
35053: LD_INT 0
35055: PPUSH
// if not unit then
35056: LD_VAR 0 1
35060: NOT
35061: IFFALSE 35065
// exit ;
35063: GO 35088
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35065: LD_ADDR_VAR 0 2
35069: PUSH
35070: LD_VAR 0 1
35074: PPUSH
35075: CALL_OW 254
35079: PUSH
35080: LD_INT 3
35082: PLUS
35083: PUSH
35084: LD_INT 6
35086: MOD
35087: ST_TO_ADDR
// end ;
35088: LD_VAR 0 2
35092: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
35093: LD_INT 0
35095: PPUSH
35096: PPUSH
35097: PPUSH
35098: PPUSH
35099: PPUSH
// if not hexes then
35100: LD_VAR 0 2
35104: NOT
35105: IFFALSE 35109
// exit ;
35107: GO 35257
// dist := 9999 ;
35109: LD_ADDR_VAR 0 5
35113: PUSH
35114: LD_INT 9999
35116: ST_TO_ADDR
// for i = 1 to hexes do
35117: LD_ADDR_VAR 0 4
35121: PUSH
35122: DOUBLE
35123: LD_INT 1
35125: DEC
35126: ST_TO_ADDR
35127: LD_VAR 0 2
35131: PUSH
35132: FOR_TO
35133: IFFALSE 35245
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
35135: LD_VAR 0 1
35139: PPUSH
35140: LD_VAR 0 2
35144: PUSH
35145: LD_VAR 0 4
35149: ARRAY
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: PPUSH
35155: LD_VAR 0 2
35159: PUSH
35160: LD_VAR 0 4
35164: ARRAY
35165: PUSH
35166: LD_INT 2
35168: ARRAY
35169: PPUSH
35170: CALL_OW 297
35174: PUSH
35175: LD_VAR 0 5
35179: LESS
35180: IFFALSE 35243
// begin hex := hexes [ i ] ;
35182: LD_ADDR_VAR 0 7
35186: PUSH
35187: LD_VAR 0 2
35191: PUSH
35192: LD_VAR 0 4
35196: ARRAY
35197: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35198: LD_ADDR_VAR 0 5
35202: PUSH
35203: LD_VAR 0 1
35207: PPUSH
35208: LD_VAR 0 2
35212: PUSH
35213: LD_VAR 0 4
35217: ARRAY
35218: PUSH
35219: LD_INT 1
35221: ARRAY
35222: PPUSH
35223: LD_VAR 0 2
35227: PUSH
35228: LD_VAR 0 4
35232: ARRAY
35233: PUSH
35234: LD_INT 2
35236: ARRAY
35237: PPUSH
35238: CALL_OW 297
35242: ST_TO_ADDR
// end ; end ;
35243: GO 35132
35245: POP
35246: POP
// result := hex ;
35247: LD_ADDR_VAR 0 3
35251: PUSH
35252: LD_VAR 0 7
35256: ST_TO_ADDR
// end ;
35257: LD_VAR 0 3
35261: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35262: LD_INT 0
35264: PPUSH
35265: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35266: LD_VAR 0 1
35270: NOT
35271: PUSH
35272: LD_VAR 0 1
35276: PUSH
35277: LD_INT 21
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 23
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PPUSH
35301: CALL_OW 69
35305: IN
35306: NOT
35307: OR
35308: IFFALSE 35312
// exit ;
35310: GO 35359
// for i = 1 to 3 do
35312: LD_ADDR_VAR 0 3
35316: PUSH
35317: DOUBLE
35318: LD_INT 1
35320: DEC
35321: ST_TO_ADDR
35322: LD_INT 3
35324: PUSH
35325: FOR_TO
35326: IFFALSE 35357
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35328: LD_VAR 0 1
35332: PPUSH
35333: CALL_OW 250
35337: PPUSH
35338: LD_VAR 0 1
35342: PPUSH
35343: CALL_OW 251
35347: PPUSH
35348: LD_INT 1
35350: PPUSH
35351: CALL_OW 453
35355: GO 35325
35357: POP
35358: POP
// end ;
35359: LD_VAR 0 2
35363: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35364: LD_INT 0
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35372: LD_VAR 0 1
35376: NOT
35377: PUSH
35378: LD_VAR 0 2
35382: NOT
35383: OR
35384: PUSH
35385: LD_VAR 0 1
35389: PPUSH
35390: CALL_OW 314
35394: OR
35395: IFFALSE 35399
// exit ;
35397: GO 35840
// x := GetX ( enemy_unit ) ;
35399: LD_ADDR_VAR 0 7
35403: PUSH
35404: LD_VAR 0 2
35408: PPUSH
35409: CALL_OW 250
35413: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35414: LD_ADDR_VAR 0 8
35418: PUSH
35419: LD_VAR 0 2
35423: PPUSH
35424: CALL_OW 251
35428: ST_TO_ADDR
// if not x or not y then
35429: LD_VAR 0 7
35433: NOT
35434: PUSH
35435: LD_VAR 0 8
35439: NOT
35440: OR
35441: IFFALSE 35445
// exit ;
35443: GO 35840
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35445: LD_ADDR_VAR 0 6
35449: PUSH
35450: LD_VAR 0 7
35454: PPUSH
35455: LD_INT 0
35457: PPUSH
35458: LD_INT 4
35460: PPUSH
35461: CALL_OW 272
35465: PUSH
35466: LD_VAR 0 8
35470: PPUSH
35471: LD_INT 0
35473: PPUSH
35474: LD_INT 4
35476: PPUSH
35477: CALL_OW 273
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_VAR 0 7
35490: PPUSH
35491: LD_INT 1
35493: PPUSH
35494: LD_INT 4
35496: PPUSH
35497: CALL_OW 272
35501: PUSH
35502: LD_VAR 0 8
35506: PPUSH
35507: LD_INT 1
35509: PPUSH
35510: LD_INT 4
35512: PPUSH
35513: CALL_OW 273
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_VAR 0 7
35526: PPUSH
35527: LD_INT 2
35529: PPUSH
35530: LD_INT 4
35532: PPUSH
35533: CALL_OW 272
35537: PUSH
35538: LD_VAR 0 8
35542: PPUSH
35543: LD_INT 2
35545: PPUSH
35546: LD_INT 4
35548: PPUSH
35549: CALL_OW 273
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_VAR 0 7
35562: PPUSH
35563: LD_INT 3
35565: PPUSH
35566: LD_INT 4
35568: PPUSH
35569: CALL_OW 272
35573: PUSH
35574: LD_VAR 0 8
35578: PPUSH
35579: LD_INT 3
35581: PPUSH
35582: LD_INT 4
35584: PPUSH
35585: CALL_OW 273
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_VAR 0 7
35598: PPUSH
35599: LD_INT 4
35601: PPUSH
35602: LD_INT 4
35604: PPUSH
35605: CALL_OW 272
35609: PUSH
35610: LD_VAR 0 8
35614: PPUSH
35615: LD_INT 4
35617: PPUSH
35618: LD_INT 4
35620: PPUSH
35621: CALL_OW 273
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_VAR 0 7
35634: PPUSH
35635: LD_INT 5
35637: PPUSH
35638: LD_INT 4
35640: PPUSH
35641: CALL_OW 272
35645: PUSH
35646: LD_VAR 0 8
35650: PPUSH
35651: LD_INT 5
35653: PPUSH
35654: LD_INT 4
35656: PPUSH
35657: CALL_OW 273
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: ST_TO_ADDR
// for i = tmp downto 1 do
35674: LD_ADDR_VAR 0 4
35678: PUSH
35679: DOUBLE
35680: LD_VAR 0 6
35684: INC
35685: ST_TO_ADDR
35686: LD_INT 1
35688: PUSH
35689: FOR_DOWNTO
35690: IFFALSE 35791
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35692: LD_VAR 0 6
35696: PUSH
35697: LD_VAR 0 4
35701: ARRAY
35702: PUSH
35703: LD_INT 1
35705: ARRAY
35706: PPUSH
35707: LD_VAR 0 6
35711: PUSH
35712: LD_VAR 0 4
35716: ARRAY
35717: PUSH
35718: LD_INT 2
35720: ARRAY
35721: PPUSH
35722: CALL_OW 488
35726: NOT
35727: PUSH
35728: LD_VAR 0 6
35732: PUSH
35733: LD_VAR 0 4
35737: ARRAY
35738: PUSH
35739: LD_INT 1
35741: ARRAY
35742: PPUSH
35743: LD_VAR 0 6
35747: PUSH
35748: LD_VAR 0 4
35752: ARRAY
35753: PUSH
35754: LD_INT 2
35756: ARRAY
35757: PPUSH
35758: CALL_OW 428
35762: PUSH
35763: LD_INT 0
35765: NONEQUAL
35766: OR
35767: IFFALSE 35789
// tmp := Delete ( tmp , i ) ;
35769: LD_ADDR_VAR 0 6
35773: PUSH
35774: LD_VAR 0 6
35778: PPUSH
35779: LD_VAR 0 4
35783: PPUSH
35784: CALL_OW 3
35788: ST_TO_ADDR
35789: GO 35689
35791: POP
35792: POP
// j := GetClosestHex ( unit , tmp ) ;
35793: LD_ADDR_VAR 0 5
35797: PUSH
35798: LD_VAR 0 1
35802: PPUSH
35803: LD_VAR 0 6
35807: PPUSH
35808: CALL 35093 0 2
35812: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35813: LD_VAR 0 1
35817: PPUSH
35818: LD_VAR 0 5
35822: PUSH
35823: LD_INT 1
35825: ARRAY
35826: PPUSH
35827: LD_VAR 0 5
35831: PUSH
35832: LD_INT 2
35834: ARRAY
35835: PPUSH
35836: CALL_OW 111
// end ;
35840: LD_VAR 0 3
35844: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35845: LD_INT 0
35847: PPUSH
35848: PPUSH
35849: PPUSH
// uc_side = 0 ;
35850: LD_ADDR_OWVAR 20
35854: PUSH
35855: LD_INT 0
35857: ST_TO_ADDR
// uc_nation = 0 ;
35858: LD_ADDR_OWVAR 21
35862: PUSH
35863: LD_INT 0
35865: ST_TO_ADDR
// InitHc_All ( ) ;
35866: CALL_OW 584
// InitVc ;
35870: CALL_OW 20
// if mastodonts then
35874: LD_VAR 0 6
35878: IFFALSE 35945
// for i = 1 to mastodonts do
35880: LD_ADDR_VAR 0 11
35884: PUSH
35885: DOUBLE
35886: LD_INT 1
35888: DEC
35889: ST_TO_ADDR
35890: LD_VAR 0 6
35894: PUSH
35895: FOR_TO
35896: IFFALSE 35943
// begin vc_chassis := 31 ;
35898: LD_ADDR_OWVAR 37
35902: PUSH
35903: LD_INT 31
35905: ST_TO_ADDR
// vc_control := control_rider ;
35906: LD_ADDR_OWVAR 38
35910: PUSH
35911: LD_INT 4
35913: ST_TO_ADDR
// animal := CreateVehicle ;
35914: LD_ADDR_VAR 0 12
35918: PUSH
35919: CALL_OW 45
35923: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35924: LD_VAR 0 12
35928: PPUSH
35929: LD_VAR 0 8
35933: PPUSH
35934: LD_INT 0
35936: PPUSH
35937: CALL 38133 0 3
// end ;
35941: GO 35895
35943: POP
35944: POP
// if horses then
35945: LD_VAR 0 5
35949: IFFALSE 36016
// for i = 1 to horses do
35951: LD_ADDR_VAR 0 11
35955: PUSH
35956: DOUBLE
35957: LD_INT 1
35959: DEC
35960: ST_TO_ADDR
35961: LD_VAR 0 5
35965: PUSH
35966: FOR_TO
35967: IFFALSE 36014
// begin hc_class := 21 ;
35969: LD_ADDR_OWVAR 28
35973: PUSH
35974: LD_INT 21
35976: ST_TO_ADDR
// hc_gallery :=  ;
35977: LD_ADDR_OWVAR 33
35981: PUSH
35982: LD_STRING 
35984: ST_TO_ADDR
// animal := CreateHuman ;
35985: LD_ADDR_VAR 0 12
35989: PUSH
35990: CALL_OW 44
35994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35995: LD_VAR 0 12
35999: PPUSH
36000: LD_VAR 0 8
36004: PPUSH
36005: LD_INT 0
36007: PPUSH
36008: CALL 38133 0 3
// end ;
36012: GO 35966
36014: POP
36015: POP
// if birds then
36016: LD_VAR 0 1
36020: IFFALSE 36087
// for i = 1 to birds do
36022: LD_ADDR_VAR 0 11
36026: PUSH
36027: DOUBLE
36028: LD_INT 1
36030: DEC
36031: ST_TO_ADDR
36032: LD_VAR 0 1
36036: PUSH
36037: FOR_TO
36038: IFFALSE 36085
// begin hc_class = 18 ;
36040: LD_ADDR_OWVAR 28
36044: PUSH
36045: LD_INT 18
36047: ST_TO_ADDR
// hc_gallery =  ;
36048: LD_ADDR_OWVAR 33
36052: PUSH
36053: LD_STRING 
36055: ST_TO_ADDR
// animal := CreateHuman ;
36056: LD_ADDR_VAR 0 12
36060: PUSH
36061: CALL_OW 44
36065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36066: LD_VAR 0 12
36070: PPUSH
36071: LD_VAR 0 8
36075: PPUSH
36076: LD_INT 0
36078: PPUSH
36079: CALL 38133 0 3
// end ;
36083: GO 36037
36085: POP
36086: POP
// if tigers then
36087: LD_VAR 0 2
36091: IFFALSE 36175
// for i = 1 to tigers do
36093: LD_ADDR_VAR 0 11
36097: PUSH
36098: DOUBLE
36099: LD_INT 1
36101: DEC
36102: ST_TO_ADDR
36103: LD_VAR 0 2
36107: PUSH
36108: FOR_TO
36109: IFFALSE 36173
// begin hc_class = class_tiger ;
36111: LD_ADDR_OWVAR 28
36115: PUSH
36116: LD_INT 14
36118: ST_TO_ADDR
// hc_gallery =  ;
36119: LD_ADDR_OWVAR 33
36123: PUSH
36124: LD_STRING 
36126: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36127: LD_ADDR_OWVAR 35
36131: PUSH
36132: LD_INT 7
36134: NEG
36135: PPUSH
36136: LD_INT 7
36138: PPUSH
36139: CALL_OW 12
36143: ST_TO_ADDR
// animal := CreateHuman ;
36144: LD_ADDR_VAR 0 12
36148: PUSH
36149: CALL_OW 44
36153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36154: LD_VAR 0 12
36158: PPUSH
36159: LD_VAR 0 8
36163: PPUSH
36164: LD_INT 0
36166: PPUSH
36167: CALL 38133 0 3
// end ;
36171: GO 36108
36173: POP
36174: POP
// if apemans then
36175: LD_VAR 0 3
36179: IFFALSE 36302
// for i = 1 to apemans do
36181: LD_ADDR_VAR 0 11
36185: PUSH
36186: DOUBLE
36187: LD_INT 1
36189: DEC
36190: ST_TO_ADDR
36191: LD_VAR 0 3
36195: PUSH
36196: FOR_TO
36197: IFFALSE 36300
// begin hc_class = class_apeman ;
36199: LD_ADDR_OWVAR 28
36203: PUSH
36204: LD_INT 12
36206: ST_TO_ADDR
// hc_gallery =  ;
36207: LD_ADDR_OWVAR 33
36211: PUSH
36212: LD_STRING 
36214: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
36215: LD_ADDR_OWVAR 35
36219: PUSH
36220: LD_INT 5
36222: NEG
36223: PPUSH
36224: LD_INT 5
36226: PPUSH
36227: CALL_OW 12
36231: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36232: LD_ADDR_OWVAR 31
36236: PUSH
36237: LD_INT 1
36239: PPUSH
36240: LD_INT 3
36242: PPUSH
36243: CALL_OW 12
36247: PUSH
36248: LD_INT 1
36250: PPUSH
36251: LD_INT 3
36253: PPUSH
36254: CALL_OW 12
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// animal := CreateHuman ;
36271: LD_ADDR_VAR 0 12
36275: PUSH
36276: CALL_OW 44
36280: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36281: LD_VAR 0 12
36285: PPUSH
36286: LD_VAR 0 8
36290: PPUSH
36291: LD_INT 0
36293: PPUSH
36294: CALL 38133 0 3
// end ;
36298: GO 36196
36300: POP
36301: POP
// if enchidnas then
36302: LD_VAR 0 4
36306: IFFALSE 36373
// for i = 1 to enchidnas do
36308: LD_ADDR_VAR 0 11
36312: PUSH
36313: DOUBLE
36314: LD_INT 1
36316: DEC
36317: ST_TO_ADDR
36318: LD_VAR 0 4
36322: PUSH
36323: FOR_TO
36324: IFFALSE 36371
// begin hc_class = 13 ;
36326: LD_ADDR_OWVAR 28
36330: PUSH
36331: LD_INT 13
36333: ST_TO_ADDR
// hc_gallery =  ;
36334: LD_ADDR_OWVAR 33
36338: PUSH
36339: LD_STRING 
36341: ST_TO_ADDR
// animal := CreateHuman ;
36342: LD_ADDR_VAR 0 12
36346: PUSH
36347: CALL_OW 44
36351: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36352: LD_VAR 0 12
36356: PPUSH
36357: LD_VAR 0 8
36361: PPUSH
36362: LD_INT 0
36364: PPUSH
36365: CALL 38133 0 3
// end ;
36369: GO 36323
36371: POP
36372: POP
// if fishes then
36373: LD_VAR 0 7
36377: IFFALSE 36444
// for i = 1 to fishes do
36379: LD_ADDR_VAR 0 11
36383: PUSH
36384: DOUBLE
36385: LD_INT 1
36387: DEC
36388: ST_TO_ADDR
36389: LD_VAR 0 7
36393: PUSH
36394: FOR_TO
36395: IFFALSE 36442
// begin hc_class = 20 ;
36397: LD_ADDR_OWVAR 28
36401: PUSH
36402: LD_INT 20
36404: ST_TO_ADDR
// hc_gallery =  ;
36405: LD_ADDR_OWVAR 33
36409: PUSH
36410: LD_STRING 
36412: ST_TO_ADDR
// animal := CreateHuman ;
36413: LD_ADDR_VAR 0 12
36417: PUSH
36418: CALL_OW 44
36422: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36423: LD_VAR 0 12
36427: PPUSH
36428: LD_VAR 0 9
36432: PPUSH
36433: LD_INT 0
36435: PPUSH
36436: CALL 38133 0 3
// end ;
36440: GO 36394
36442: POP
36443: POP
// end ;
36444: LD_VAR 0 10
36448: RET
// export function WantHeal ( sci , unit ) ; begin
36449: LD_INT 0
36451: PPUSH
// if GetTaskList ( sci ) > 0 then
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 437
36461: PUSH
36462: LD_INT 0
36464: GREATER
36465: IFFALSE 36535
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 437
36476: PUSH
36477: LD_INT 1
36479: ARRAY
36480: PUSH
36481: LD_INT 1
36483: ARRAY
36484: PUSH
36485: LD_STRING l
36487: EQUAL
36488: PUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: CALL_OW 437
36498: PUSH
36499: LD_INT 1
36501: ARRAY
36502: PUSH
36503: LD_INT 4
36505: ARRAY
36506: PUSH
36507: LD_VAR 0 2
36511: EQUAL
36512: AND
36513: IFFALSE 36525
// result := true else
36515: LD_ADDR_VAR 0 3
36519: PUSH
36520: LD_INT 1
36522: ST_TO_ADDR
36523: GO 36533
// result := false ;
36525: LD_ADDR_VAR 0 3
36529: PUSH
36530: LD_INT 0
36532: ST_TO_ADDR
// end else
36533: GO 36543
// result := false ;
36535: LD_ADDR_VAR 0 3
36539: PUSH
36540: LD_INT 0
36542: ST_TO_ADDR
// end ;
36543: LD_VAR 0 3
36547: RET
// export function HealTarget ( sci ) ; begin
36548: LD_INT 0
36550: PPUSH
// if not sci then
36551: LD_VAR 0 1
36555: NOT
36556: IFFALSE 36560
// exit ;
36558: GO 36625
// result := 0 ;
36560: LD_ADDR_VAR 0 2
36564: PUSH
36565: LD_INT 0
36567: ST_TO_ADDR
// if GetTaskList ( sci ) then
36568: LD_VAR 0 1
36572: PPUSH
36573: CALL_OW 437
36577: IFFALSE 36625
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36579: LD_VAR 0 1
36583: PPUSH
36584: CALL_OW 437
36588: PUSH
36589: LD_INT 1
36591: ARRAY
36592: PUSH
36593: LD_INT 1
36595: ARRAY
36596: PUSH
36597: LD_STRING l
36599: EQUAL
36600: IFFALSE 36625
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36602: LD_ADDR_VAR 0 2
36606: PUSH
36607: LD_VAR 0 1
36611: PPUSH
36612: CALL_OW 437
36616: PUSH
36617: LD_INT 1
36619: ARRAY
36620: PUSH
36621: LD_INT 4
36623: ARRAY
36624: ST_TO_ADDR
// end ;
36625: LD_VAR 0 2
36629: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36630: LD_INT 0
36632: PPUSH
36633: PPUSH
36634: PPUSH
36635: PPUSH
// if not base_units then
36636: LD_VAR 0 1
36640: NOT
36641: IFFALSE 36645
// exit ;
36643: GO 36732
// result := false ;
36645: LD_ADDR_VAR 0 2
36649: PUSH
36650: LD_INT 0
36652: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36653: LD_ADDR_VAR 0 5
36657: PUSH
36658: LD_VAR 0 1
36662: PPUSH
36663: LD_INT 21
36665: PUSH
36666: LD_INT 3
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PPUSH
36673: CALL_OW 72
36677: ST_TO_ADDR
// if not tmp then
36678: LD_VAR 0 5
36682: NOT
36683: IFFALSE 36687
// exit ;
36685: GO 36732
// for i in tmp do
36687: LD_ADDR_VAR 0 3
36691: PUSH
36692: LD_VAR 0 5
36696: PUSH
36697: FOR_IN
36698: IFFALSE 36730
// begin result := EnemyInRange ( i , 22 ) ;
36700: LD_ADDR_VAR 0 2
36704: PUSH
36705: LD_VAR 0 3
36709: PPUSH
36710: LD_INT 22
36712: PPUSH
36713: CALL 34968 0 2
36717: ST_TO_ADDR
// if result then
36718: LD_VAR 0 2
36722: IFFALSE 36728
// exit ;
36724: POP
36725: POP
36726: GO 36732
// end ;
36728: GO 36697
36730: POP
36731: POP
// end ;
36732: LD_VAR 0 2
36736: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
36737: LD_INT 0
36739: PPUSH
36740: PPUSH
// if not units then
36741: LD_VAR 0 1
36745: NOT
36746: IFFALSE 36750
// exit ;
36748: GO 36820
// result := [ ] ;
36750: LD_ADDR_VAR 0 3
36754: PUSH
36755: EMPTY
36756: ST_TO_ADDR
// for i in units do
36757: LD_ADDR_VAR 0 4
36761: PUSH
36762: LD_VAR 0 1
36766: PUSH
36767: FOR_IN
36768: IFFALSE 36818
// if GetTag ( i ) = tag then
36770: LD_VAR 0 4
36774: PPUSH
36775: CALL_OW 110
36779: PUSH
36780: LD_VAR 0 2
36784: EQUAL
36785: IFFALSE 36816
// result := Insert ( result , result + 1 , i ) ;
36787: LD_ADDR_VAR 0 3
36791: PUSH
36792: LD_VAR 0 3
36796: PPUSH
36797: LD_VAR 0 3
36801: PUSH
36802: LD_INT 1
36804: PLUS
36805: PPUSH
36806: LD_VAR 0 4
36810: PPUSH
36811: CALL_OW 2
36815: ST_TO_ADDR
36816: GO 36767
36818: POP
36819: POP
// end ;
36820: LD_VAR 0 3
36824: RET
// export function IsDriver ( un ) ; begin
36825: LD_INT 0
36827: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36828: LD_ADDR_VAR 0 2
36832: PUSH
36833: LD_VAR 0 1
36837: PUSH
36838: LD_INT 55
36840: PUSH
36841: EMPTY
36842: LIST
36843: PPUSH
36844: CALL_OW 69
36848: IN
36849: ST_TO_ADDR
// end ;
36850: LD_VAR 0 2
36854: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36855: LD_INT 0
36857: PPUSH
36858: PPUSH
// list := [ ] ;
36859: LD_ADDR_VAR 0 5
36863: PUSH
36864: EMPTY
36865: ST_TO_ADDR
// case d of 0 :
36866: LD_VAR 0 3
36870: PUSH
36871: LD_INT 0
36873: DOUBLE
36874: EQUAL
36875: IFTRUE 36879
36877: GO 37012
36879: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36880: LD_ADDR_VAR 0 5
36884: PUSH
36885: LD_VAR 0 1
36889: PUSH
36890: LD_INT 4
36892: MINUS
36893: PUSH
36894: LD_VAR 0 2
36898: PUSH
36899: LD_INT 4
36901: MINUS
36902: PUSH
36903: LD_INT 2
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: PUSH
36911: LD_VAR 0 1
36915: PUSH
36916: LD_INT 3
36918: MINUS
36919: PUSH
36920: LD_VAR 0 2
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: PUSH
36933: LD_VAR 0 1
36937: PUSH
36938: LD_INT 4
36940: PLUS
36941: PUSH
36942: LD_VAR 0 2
36946: PUSH
36947: LD_INT 4
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: PUSH
36955: LD_VAR 0 1
36959: PUSH
36960: LD_INT 3
36962: PLUS
36963: PUSH
36964: LD_VAR 0 2
36968: PUSH
36969: LD_INT 3
36971: PLUS
36972: PUSH
36973: LD_INT 5
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: PUSH
36981: LD_VAR 0 1
36985: PUSH
36986: LD_VAR 0 2
36990: PUSH
36991: LD_INT 4
36993: PLUS
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: ST_TO_ADDR
// end ; 1 :
37010: GO 37710
37012: LD_INT 1
37014: DOUBLE
37015: EQUAL
37016: IFTRUE 37020
37018: GO 37153
37020: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37021: LD_ADDR_VAR 0 5
37025: PUSH
37026: LD_VAR 0 1
37030: PUSH
37031: LD_VAR 0 2
37035: PUSH
37036: LD_INT 4
37038: MINUS
37039: PUSH
37040: LD_INT 3
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: PUSH
37048: LD_VAR 0 1
37052: PUSH
37053: LD_INT 3
37055: MINUS
37056: PUSH
37057: LD_VAR 0 2
37061: PUSH
37062: LD_INT 3
37064: MINUS
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: PUSH
37074: LD_VAR 0 1
37078: PUSH
37079: LD_INT 4
37081: MINUS
37082: PUSH
37083: LD_VAR 0 2
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: PUSH
37096: LD_VAR 0 1
37100: PUSH
37101: LD_VAR 0 2
37105: PUSH
37106: LD_INT 3
37108: PLUS
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: LIST
37117: PUSH
37118: LD_VAR 0 1
37122: PUSH
37123: LD_INT 4
37125: PLUS
37126: PUSH
37127: LD_VAR 0 2
37131: PUSH
37132: LD_INT 4
37134: PLUS
37135: PUSH
37136: LD_INT 5
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: ST_TO_ADDR
// end ; 2 :
37151: GO 37710
37153: LD_INT 2
37155: DOUBLE
37156: EQUAL
37157: IFTRUE 37161
37159: GO 37290
37161: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37162: LD_ADDR_VAR 0 5
37166: PUSH
37167: LD_VAR 0 1
37171: PUSH
37172: LD_VAR 0 2
37176: PUSH
37177: LD_INT 3
37179: MINUS
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: PUSH
37189: LD_VAR 0 1
37193: PUSH
37194: LD_INT 4
37196: PLUS
37197: PUSH
37198: LD_VAR 0 2
37202: PUSH
37203: LD_INT 4
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: LIST
37210: PUSH
37211: LD_VAR 0 1
37215: PUSH
37216: LD_VAR 0 2
37220: PUSH
37221: LD_INT 4
37223: PLUS
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: PUSH
37233: LD_VAR 0 1
37237: PUSH
37238: LD_INT 3
37240: MINUS
37241: PUSH
37242: LD_VAR 0 2
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: PUSH
37255: LD_VAR 0 1
37259: PUSH
37260: LD_INT 4
37262: MINUS
37263: PUSH
37264: LD_VAR 0 2
37268: PUSH
37269: LD_INT 4
37271: MINUS
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: ST_TO_ADDR
// end ; 3 :
37288: GO 37710
37290: LD_INT 3
37292: DOUBLE
37293: EQUAL
37294: IFTRUE 37298
37296: GO 37431
37298: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37299: LD_ADDR_VAR 0 5
37303: PUSH
37304: LD_VAR 0 1
37308: PUSH
37309: LD_INT 3
37311: PLUS
37312: PUSH
37313: LD_VAR 0 2
37317: PUSH
37318: LD_INT 4
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: LIST
37325: PUSH
37326: LD_VAR 0 1
37330: PUSH
37331: LD_INT 4
37333: PLUS
37334: PUSH
37335: LD_VAR 0 2
37339: PUSH
37340: LD_INT 4
37342: PLUS
37343: PUSH
37344: LD_INT 5
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: PUSH
37352: LD_VAR 0 1
37356: PUSH
37357: LD_INT 4
37359: MINUS
37360: PUSH
37361: LD_VAR 0 2
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: PUSH
37374: LD_VAR 0 1
37378: PUSH
37379: LD_VAR 0 2
37383: PUSH
37384: LD_INT 4
37386: MINUS
37387: PUSH
37388: LD_INT 3
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: PUSH
37396: LD_VAR 0 1
37400: PUSH
37401: LD_INT 3
37403: MINUS
37404: PUSH
37405: LD_VAR 0 2
37409: PUSH
37410: LD_INT 3
37412: MINUS
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: ST_TO_ADDR
// end ; 4 :
37429: GO 37710
37431: LD_INT 4
37433: DOUBLE
37434: EQUAL
37435: IFTRUE 37439
37437: GO 37572
37439: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37440: LD_ADDR_VAR 0 5
37444: PUSH
37445: LD_VAR 0 1
37449: PUSH
37450: LD_VAR 0 2
37454: PUSH
37455: LD_INT 4
37457: PLUS
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: PUSH
37467: LD_VAR 0 1
37471: PUSH
37472: LD_INT 3
37474: PLUS
37475: PUSH
37476: LD_VAR 0 2
37480: PUSH
37481: LD_INT 3
37483: PLUS
37484: PUSH
37485: LD_INT 5
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: PUSH
37493: LD_VAR 0 1
37497: PUSH
37498: LD_INT 4
37500: PLUS
37501: PUSH
37502: LD_VAR 0 2
37506: PUSH
37507: LD_INT 4
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: PUSH
37515: LD_VAR 0 1
37519: PUSH
37520: LD_VAR 0 2
37524: PUSH
37525: LD_INT 3
37527: MINUS
37528: PUSH
37529: LD_INT 3
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: LIST
37536: PUSH
37537: LD_VAR 0 1
37541: PUSH
37542: LD_INT 4
37544: MINUS
37545: PUSH
37546: LD_VAR 0 2
37550: PUSH
37551: LD_INT 4
37553: MINUS
37554: PUSH
37555: LD_INT 2
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: ST_TO_ADDR
// end ; 5 :
37570: GO 37710
37572: LD_INT 5
37574: DOUBLE
37575: EQUAL
37576: IFTRUE 37580
37578: GO 37709
37580: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37581: LD_ADDR_VAR 0 5
37585: PUSH
37586: LD_VAR 0 1
37590: PUSH
37591: LD_INT 4
37593: MINUS
37594: PUSH
37595: LD_VAR 0 2
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: LIST
37607: PUSH
37608: LD_VAR 0 1
37612: PUSH
37613: LD_VAR 0 2
37617: PUSH
37618: LD_INT 4
37620: MINUS
37621: PUSH
37622: LD_INT 3
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: PUSH
37630: LD_VAR 0 1
37634: PUSH
37635: LD_INT 4
37637: PLUS
37638: PUSH
37639: LD_VAR 0 2
37643: PUSH
37644: LD_INT 4
37646: PLUS
37647: PUSH
37648: LD_INT 5
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: PUSH
37656: LD_VAR 0 1
37660: PUSH
37661: LD_INT 3
37663: PLUS
37664: PUSH
37665: LD_VAR 0 2
37669: PUSH
37670: LD_INT 4
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: PUSH
37678: LD_VAR 0 1
37682: PUSH
37683: LD_VAR 0 2
37687: PUSH
37688: LD_INT 3
37690: PLUS
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: ST_TO_ADDR
// end ; end ;
37707: GO 37710
37709: POP
// result := list ;
37710: LD_ADDR_VAR 0 4
37714: PUSH
37715: LD_VAR 0 5
37719: ST_TO_ADDR
// end ;
37720: LD_VAR 0 4
37724: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37725: LD_INT 0
37727: PPUSH
37728: PPUSH
37729: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37730: LD_VAR 0 1
37734: NOT
37735: PUSH
37736: LD_VAR 0 2
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 3
37749: PUSH
37750: LD_INT 4
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: IN
37759: NOT
37760: OR
37761: IFFALSE 37765
// exit ;
37763: GO 37857
// tmp := [ ] ;
37765: LD_ADDR_VAR 0 5
37769: PUSH
37770: EMPTY
37771: ST_TO_ADDR
// for i in units do
37772: LD_ADDR_VAR 0 4
37776: PUSH
37777: LD_VAR 0 1
37781: PUSH
37782: FOR_IN
37783: IFFALSE 37826
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
37785: LD_ADDR_VAR 0 5
37789: PUSH
37790: LD_VAR 0 5
37794: PPUSH
37795: LD_VAR 0 5
37799: PUSH
37800: LD_INT 1
37802: PLUS
37803: PPUSH
37804: LD_VAR 0 4
37808: PPUSH
37809: LD_VAR 0 2
37813: PPUSH
37814: CALL_OW 259
37818: PPUSH
37819: CALL_OW 2
37823: ST_TO_ADDR
37824: GO 37782
37826: POP
37827: POP
// if not tmp then
37828: LD_VAR 0 5
37832: NOT
37833: IFFALSE 37837
// exit ;
37835: GO 37857
// result := SortListByListDesc ( units , tmp ) ;
37837: LD_ADDR_VAR 0 3
37841: PUSH
37842: LD_VAR 0 1
37846: PPUSH
37847: LD_VAR 0 5
37851: PPUSH
37852: CALL_OW 77
37856: ST_TO_ADDR
// end ;
37857: LD_VAR 0 3
37861: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37862: LD_INT 0
37864: PPUSH
37865: PPUSH
37866: PPUSH
// result := false ;
37867: LD_ADDR_VAR 0 3
37871: PUSH
37872: LD_INT 0
37874: ST_TO_ADDR
// x := GetX ( building ) ;
37875: LD_ADDR_VAR 0 4
37879: PUSH
37880: LD_VAR 0 2
37884: PPUSH
37885: CALL_OW 250
37889: ST_TO_ADDR
// y := GetY ( building ) ;
37890: LD_ADDR_VAR 0 5
37894: PUSH
37895: LD_VAR 0 2
37899: PPUSH
37900: CALL_OW 251
37904: ST_TO_ADDR
// if not building or not x or not y then
37905: LD_VAR 0 2
37909: NOT
37910: PUSH
37911: LD_VAR 0 4
37915: NOT
37916: OR
37917: PUSH
37918: LD_VAR 0 5
37922: NOT
37923: OR
37924: IFFALSE 37928
// exit ;
37926: GO 38020
// if GetTaskList ( unit ) then
37928: LD_VAR 0 1
37932: PPUSH
37933: CALL_OW 437
37937: IFFALSE 38020
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37939: LD_STRING e
37941: PUSH
37942: LD_VAR 0 1
37946: PPUSH
37947: CALL_OW 437
37951: PUSH
37952: LD_INT 1
37954: ARRAY
37955: PUSH
37956: LD_INT 1
37958: ARRAY
37959: EQUAL
37960: PUSH
37961: LD_VAR 0 4
37965: PUSH
37966: LD_VAR 0 1
37970: PPUSH
37971: CALL_OW 437
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PUSH
37980: LD_INT 2
37982: ARRAY
37983: EQUAL
37984: AND
37985: PUSH
37986: LD_VAR 0 5
37990: PUSH
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL_OW 437
38000: PUSH
38001: LD_INT 1
38003: ARRAY
38004: PUSH
38005: LD_INT 3
38007: ARRAY
38008: EQUAL
38009: AND
38010: IFFALSE 38020
// result := true end ;
38012: LD_ADDR_VAR 0 3
38016: PUSH
38017: LD_INT 1
38019: ST_TO_ADDR
// end ;
38020: LD_VAR 0 3
38024: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38025: LD_INT 0
38027: PPUSH
// result := false ;
38028: LD_ADDR_VAR 0 4
38032: PUSH
38033: LD_INT 0
38035: ST_TO_ADDR
// if GetTaskList ( unit ) then
38036: LD_VAR 0 1
38040: PPUSH
38041: CALL_OW 437
38045: IFFALSE 38128
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38047: LD_STRING M
38049: PUSH
38050: LD_VAR 0 1
38054: PPUSH
38055: CALL_OW 437
38059: PUSH
38060: LD_INT 1
38062: ARRAY
38063: PUSH
38064: LD_INT 1
38066: ARRAY
38067: EQUAL
38068: PUSH
38069: LD_VAR 0 2
38073: PUSH
38074: LD_VAR 0 1
38078: PPUSH
38079: CALL_OW 437
38083: PUSH
38084: LD_INT 1
38086: ARRAY
38087: PUSH
38088: LD_INT 2
38090: ARRAY
38091: EQUAL
38092: AND
38093: PUSH
38094: LD_VAR 0 3
38098: PUSH
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL_OW 437
38108: PUSH
38109: LD_INT 1
38111: ARRAY
38112: PUSH
38113: LD_INT 3
38115: ARRAY
38116: EQUAL
38117: AND
38118: IFFALSE 38128
// result := true ;
38120: LD_ADDR_VAR 0 4
38124: PUSH
38125: LD_INT 1
38127: ST_TO_ADDR
// end ; end ;
38128: LD_VAR 0 4
38132: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38133: LD_INT 0
38135: PPUSH
38136: PPUSH
38137: PPUSH
38138: PPUSH
// if not unit or not area then
38139: LD_VAR 0 1
38143: NOT
38144: PUSH
38145: LD_VAR 0 2
38149: NOT
38150: OR
38151: IFFALSE 38155
// exit ;
38153: GO 38319
// tmp := AreaToList ( area , i ) ;
38155: LD_ADDR_VAR 0 6
38159: PUSH
38160: LD_VAR 0 2
38164: PPUSH
38165: LD_VAR 0 5
38169: PPUSH
38170: CALL_OW 517
38174: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38175: LD_ADDR_VAR 0 5
38179: PUSH
38180: DOUBLE
38181: LD_INT 1
38183: DEC
38184: ST_TO_ADDR
38185: LD_VAR 0 6
38189: PUSH
38190: LD_INT 1
38192: ARRAY
38193: PUSH
38194: FOR_TO
38195: IFFALSE 38317
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38197: LD_ADDR_VAR 0 7
38201: PUSH
38202: LD_VAR 0 6
38206: PUSH
38207: LD_INT 1
38209: ARRAY
38210: PUSH
38211: LD_VAR 0 5
38215: ARRAY
38216: PUSH
38217: LD_VAR 0 6
38221: PUSH
38222: LD_INT 2
38224: ARRAY
38225: PUSH
38226: LD_VAR 0 5
38230: ARRAY
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
38236: LD_VAR 0 7
38240: PUSH
38241: LD_INT 1
38243: ARRAY
38244: PPUSH
38245: LD_VAR 0 7
38249: PUSH
38250: LD_INT 2
38252: ARRAY
38253: PPUSH
38254: CALL_OW 428
38258: PUSH
38259: LD_INT 0
38261: EQUAL
38262: IFFALSE 38315
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38264: LD_VAR 0 1
38268: PPUSH
38269: LD_VAR 0 7
38273: PUSH
38274: LD_INT 1
38276: ARRAY
38277: PPUSH
38278: LD_VAR 0 7
38282: PUSH
38283: LD_INT 2
38285: ARRAY
38286: PPUSH
38287: LD_VAR 0 3
38291: PPUSH
38292: CALL_OW 48
// result := IsPlaced ( unit ) ;
38296: LD_ADDR_VAR 0 4
38300: PUSH
38301: LD_VAR 0 1
38305: PPUSH
38306: CALL_OW 305
38310: ST_TO_ADDR
// exit ;
38311: POP
38312: POP
38313: GO 38319
// end ; end ;
38315: GO 38194
38317: POP
38318: POP
// end ;
38319: LD_VAR 0 4
38323: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38324: LD_INT 0
38326: PPUSH
38327: PPUSH
38328: PPUSH
// if not side or side > 8 then
38329: LD_VAR 0 1
38333: NOT
38334: PUSH
38335: LD_VAR 0 1
38339: PUSH
38340: LD_INT 8
38342: GREATER
38343: OR
38344: IFFALSE 38348
// exit ;
38346: GO 38535
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38348: LD_ADDR_VAR 0 4
38352: PUSH
38353: LD_INT 22
38355: PUSH
38356: LD_VAR 0 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 21
38367: PUSH
38368: LD_INT 3
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PPUSH
38379: CALL_OW 69
38383: ST_TO_ADDR
// if not tmp then
38384: LD_VAR 0 4
38388: NOT
38389: IFFALSE 38393
// exit ;
38391: GO 38535
// enable_addtolog := true ;
38393: LD_ADDR_OWVAR 81
38397: PUSH
38398: LD_INT 1
38400: ST_TO_ADDR
// AddToLog ( [ ) ;
38401: LD_STRING [
38403: PPUSH
38404: CALL_OW 561
// for i in tmp do
38408: LD_ADDR_VAR 0 3
38412: PUSH
38413: LD_VAR 0 4
38417: PUSH
38418: FOR_IN
38419: IFFALSE 38526
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38421: LD_STRING [
38423: PUSH
38424: LD_VAR 0 3
38428: PPUSH
38429: CALL_OW 266
38433: STR
38434: PUSH
38435: LD_STRING , 
38437: STR
38438: PUSH
38439: LD_VAR 0 3
38443: PPUSH
38444: CALL_OW 250
38448: STR
38449: PUSH
38450: LD_STRING , 
38452: STR
38453: PUSH
38454: LD_VAR 0 3
38458: PPUSH
38459: CALL_OW 251
38463: STR
38464: PUSH
38465: LD_STRING , 
38467: STR
38468: PUSH
38469: LD_VAR 0 3
38473: PPUSH
38474: CALL_OW 254
38478: STR
38479: PUSH
38480: LD_STRING , 
38482: STR
38483: PUSH
38484: LD_VAR 0 3
38488: PPUSH
38489: LD_INT 1
38491: PPUSH
38492: CALL_OW 268
38496: STR
38497: PUSH
38498: LD_STRING , 
38500: STR
38501: PUSH
38502: LD_VAR 0 3
38506: PPUSH
38507: LD_INT 2
38509: PPUSH
38510: CALL_OW 268
38514: STR
38515: PUSH
38516: LD_STRING ],
38518: STR
38519: PPUSH
38520: CALL_OW 561
// end ;
38524: GO 38418
38526: POP
38527: POP
// AddToLog ( ]; ) ;
38528: LD_STRING ];
38530: PPUSH
38531: CALL_OW 561
// end ;
38535: LD_VAR 0 2
38539: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38540: LD_INT 0
38542: PPUSH
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
// if not area or not rate or not max then
38547: LD_VAR 0 1
38551: NOT
38552: PUSH
38553: LD_VAR 0 2
38557: NOT
38558: OR
38559: PUSH
38560: LD_VAR 0 4
38564: NOT
38565: OR
38566: IFFALSE 38570
// exit ;
38568: GO 38762
// while 1 do
38570: LD_INT 1
38572: IFFALSE 38762
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38574: LD_ADDR_VAR 0 9
38578: PUSH
38579: LD_VAR 0 1
38583: PPUSH
38584: LD_INT 1
38586: PPUSH
38587: CALL_OW 287
38591: PUSH
38592: LD_INT 10
38594: MUL
38595: ST_TO_ADDR
// r := rate / 10 ;
38596: LD_ADDR_VAR 0 7
38600: PUSH
38601: LD_VAR 0 2
38605: PUSH
38606: LD_INT 10
38608: DIVREAL
38609: ST_TO_ADDR
// time := 1 1$00 ;
38610: LD_ADDR_VAR 0 8
38614: PUSH
38615: LD_INT 2100
38617: ST_TO_ADDR
// if amount < min then
38618: LD_VAR 0 9
38622: PUSH
38623: LD_VAR 0 3
38627: LESS
38628: IFFALSE 38646
// r := r * 2 else
38630: LD_ADDR_VAR 0 7
38634: PUSH
38635: LD_VAR 0 7
38639: PUSH
38640: LD_INT 2
38642: MUL
38643: ST_TO_ADDR
38644: GO 38672
// if amount > max then
38646: LD_VAR 0 9
38650: PUSH
38651: LD_VAR 0 4
38655: GREATER
38656: IFFALSE 38672
// r := r / 2 ;
38658: LD_ADDR_VAR 0 7
38662: PUSH
38663: LD_VAR 0 7
38667: PUSH
38668: LD_INT 2
38670: DIVREAL
38671: ST_TO_ADDR
// time := time / r ;
38672: LD_ADDR_VAR 0 8
38676: PUSH
38677: LD_VAR 0 8
38681: PUSH
38682: LD_VAR 0 7
38686: DIVREAL
38687: ST_TO_ADDR
// if time < 0 then
38688: LD_VAR 0 8
38692: PUSH
38693: LD_INT 0
38695: LESS
38696: IFFALSE 38713
// time := time * - 1 ;
38698: LD_ADDR_VAR 0 8
38702: PUSH
38703: LD_VAR 0 8
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: MUL
38712: ST_TO_ADDR
// wait ( time ) ;
38713: LD_VAR 0 8
38717: PPUSH
38718: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
38722: LD_INT 35
38724: PPUSH
38725: LD_INT 875
38727: PPUSH
38728: CALL_OW 12
38732: PPUSH
38733: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38737: LD_INT 1
38739: PPUSH
38740: LD_INT 5
38742: PPUSH
38743: CALL_OW 12
38747: PPUSH
38748: LD_VAR 0 1
38752: PPUSH
38753: LD_INT 1
38755: PPUSH
38756: CALL_OW 55
// end ;
38760: GO 38570
// end ;
38762: LD_VAR 0 5
38766: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38767: LD_INT 0
38769: PPUSH
38770: PPUSH
38771: PPUSH
38772: PPUSH
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
// if not turrets or not factories then
38777: LD_VAR 0 1
38781: NOT
38782: PUSH
38783: LD_VAR 0 2
38787: NOT
38788: OR
38789: IFFALSE 38793
// exit ;
38791: GO 39100
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38793: LD_ADDR_VAR 0 10
38797: PUSH
38798: LD_INT 5
38800: PUSH
38801: LD_INT 6
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: LD_INT 4
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 3
38820: PUSH
38821: LD_INT 5
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 24
38835: PUSH
38836: LD_INT 25
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 23
38845: PUSH
38846: LD_INT 27
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 42
38859: PUSH
38860: LD_INT 43
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 44
38869: PUSH
38870: LD_INT 46
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 45
38879: PUSH
38880: LD_INT 47
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: ST_TO_ADDR
// result := [ ] ;
38897: LD_ADDR_VAR 0 3
38901: PUSH
38902: EMPTY
38903: ST_TO_ADDR
// for i in turrets do
38904: LD_ADDR_VAR 0 4
38908: PUSH
38909: LD_VAR 0 1
38913: PUSH
38914: FOR_IN
38915: IFFALSE 39098
// begin nat := GetNation ( i ) ;
38917: LD_ADDR_VAR 0 7
38921: PUSH
38922: LD_VAR 0 4
38926: PPUSH
38927: CALL_OW 248
38931: ST_TO_ADDR
// weapon := 0 ;
38932: LD_ADDR_VAR 0 8
38936: PUSH
38937: LD_INT 0
38939: ST_TO_ADDR
// if not nat then
38940: LD_VAR 0 7
38944: NOT
38945: IFFALSE 38949
// continue ;
38947: GO 38914
// for j in list [ nat ] do
38949: LD_ADDR_VAR 0 5
38953: PUSH
38954: LD_VAR 0 10
38958: PUSH
38959: LD_VAR 0 7
38963: ARRAY
38964: PUSH
38965: FOR_IN
38966: IFFALSE 39007
// if GetBWeapon ( i ) = j [ 1 ] then
38968: LD_VAR 0 4
38972: PPUSH
38973: CALL_OW 269
38977: PUSH
38978: LD_VAR 0 5
38982: PUSH
38983: LD_INT 1
38985: ARRAY
38986: EQUAL
38987: IFFALSE 39005
// begin weapon := j [ 2 ] ;
38989: LD_ADDR_VAR 0 8
38993: PUSH
38994: LD_VAR 0 5
38998: PUSH
38999: LD_INT 2
39001: ARRAY
39002: ST_TO_ADDR
// break ;
39003: GO 39007
// end ;
39005: GO 38965
39007: POP
39008: POP
// if not weapon then
39009: LD_VAR 0 8
39013: NOT
39014: IFFALSE 39018
// continue ;
39016: GO 38914
// for k in factories do
39018: LD_ADDR_VAR 0 6
39022: PUSH
39023: LD_VAR 0 2
39027: PUSH
39028: FOR_IN
39029: IFFALSE 39094
// begin weapons := AvailableWeaponList ( k ) ;
39031: LD_ADDR_VAR 0 9
39035: PUSH
39036: LD_VAR 0 6
39040: PPUSH
39041: CALL_OW 478
39045: ST_TO_ADDR
// if not weapons then
39046: LD_VAR 0 9
39050: NOT
39051: IFFALSE 39055
// continue ;
39053: GO 39028
// if weapon in weapons then
39055: LD_VAR 0 8
39059: PUSH
39060: LD_VAR 0 9
39064: IN
39065: IFFALSE 39092
// begin result := [ i , weapon ] ;
39067: LD_ADDR_VAR 0 3
39071: PUSH
39072: LD_VAR 0 4
39076: PUSH
39077: LD_VAR 0 8
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: ST_TO_ADDR
// exit ;
39086: POP
39087: POP
39088: POP
39089: POP
39090: GO 39100
// end ; end ;
39092: GO 39028
39094: POP
39095: POP
// end ;
39096: GO 38914
39098: POP
39099: POP
// end ;
39100: LD_VAR 0 3
39104: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39105: LD_INT 0
39107: PPUSH
// if not side or side > 8 then
39108: LD_VAR 0 3
39112: NOT
39113: PUSH
39114: LD_VAR 0 3
39118: PUSH
39119: LD_INT 8
39121: GREATER
39122: OR
39123: IFFALSE 39127
// exit ;
39125: GO 39186
// if not range then
39127: LD_VAR 0 4
39131: NOT
39132: IFFALSE 39143
// range := - 12 ;
39134: LD_ADDR_VAR 0 4
39138: PUSH
39139: LD_INT 12
39141: NEG
39142: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39143: LD_VAR 0 1
39147: PPUSH
39148: LD_VAR 0 2
39152: PPUSH
39153: LD_VAR 0 3
39157: PPUSH
39158: LD_VAR 0 4
39162: PPUSH
39163: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39167: LD_VAR 0 1
39171: PPUSH
39172: LD_VAR 0 2
39176: PPUSH
39177: LD_VAR 0 3
39181: PPUSH
39182: CALL_OW 331
// end ;
39186: LD_VAR 0 5
39190: RET
// export function Video ( mode ) ; begin
39191: LD_INT 0
39193: PPUSH
// ingame_video = mode ;
39194: LD_ADDR_OWVAR 52
39198: PUSH
39199: LD_VAR 0 1
39203: ST_TO_ADDR
// interface_hidden = mode ;
39204: LD_ADDR_OWVAR 54
39208: PUSH
39209: LD_VAR 0 1
39213: ST_TO_ADDR
// end ;
39214: LD_VAR 0 2
39218: RET
// export function Join ( array , element ) ; begin
39219: LD_INT 0
39221: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39222: LD_ADDR_VAR 0 3
39226: PUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: LD_VAR 0 1
39236: PUSH
39237: LD_INT 1
39239: PLUS
39240: PPUSH
39241: LD_VAR 0 2
39245: PPUSH
39246: CALL_OW 1
39250: ST_TO_ADDR
// end ;
39251: LD_VAR 0 3
39255: RET
// export function JoinUnion ( array , element ) ; begin
39256: LD_INT 0
39258: PPUSH
// result := array union element ;
39259: LD_ADDR_VAR 0 3
39263: PUSH
39264: LD_VAR 0 1
39268: PUSH
39269: LD_VAR 0 2
39273: UNION
39274: ST_TO_ADDR
// end ;
39275: LD_VAR 0 3
39279: RET
// export function GetBehemoths ( side ) ; begin
39280: LD_INT 0
39282: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
39283: LD_ADDR_VAR 0 2
39287: PUSH
39288: LD_INT 22
39290: PUSH
39291: LD_VAR 0 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 31
39302: PUSH
39303: LD_INT 25
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PPUSH
39314: CALL_OW 69
39318: ST_TO_ADDR
// end ;
39319: LD_VAR 0 2
39323: RET
// export function Shuffle ( array ) ; var i , index ; begin
39324: LD_INT 0
39326: PPUSH
39327: PPUSH
39328: PPUSH
// result := [ ] ;
39329: LD_ADDR_VAR 0 2
39333: PUSH
39334: EMPTY
39335: ST_TO_ADDR
// if not array then
39336: LD_VAR 0 1
39340: NOT
39341: IFFALSE 39345
// exit ;
39343: GO 39444
// Randomize ;
39345: CALL_OW 10
// for i = array downto 1 do
39349: LD_ADDR_VAR 0 3
39353: PUSH
39354: DOUBLE
39355: LD_VAR 0 1
39359: INC
39360: ST_TO_ADDR
39361: LD_INT 1
39363: PUSH
39364: FOR_DOWNTO
39365: IFFALSE 39442
// begin index := rand ( 1 , array ) ;
39367: LD_ADDR_VAR 0 4
39371: PUSH
39372: LD_INT 1
39374: PPUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 12
39384: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39385: LD_ADDR_VAR 0 2
39389: PUSH
39390: LD_VAR 0 2
39394: PPUSH
39395: LD_VAR 0 2
39399: PUSH
39400: LD_INT 1
39402: PLUS
39403: PPUSH
39404: LD_VAR 0 1
39408: PUSH
39409: LD_VAR 0 4
39413: ARRAY
39414: PPUSH
39415: CALL_OW 2
39419: ST_TO_ADDR
// array := Delete ( array , index ) ;
39420: LD_ADDR_VAR 0 1
39424: PUSH
39425: LD_VAR 0 1
39429: PPUSH
39430: LD_VAR 0 4
39434: PPUSH
39435: CALL_OW 3
39439: ST_TO_ADDR
// end ;
39440: GO 39364
39442: POP
39443: POP
// end ;
39444: LD_VAR 0 2
39448: RET
// export function GetBaseMaterials ( base ) ; begin
39449: LD_INT 0
39451: PPUSH
// result := [ 0 , 0 , 0 ] ;
39452: LD_ADDR_VAR 0 2
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: LIST
39470: ST_TO_ADDR
// if not base then
39471: LD_VAR 0 1
39475: NOT
39476: IFFALSE 39480
// exit ;
39478: GO 39529
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39480: LD_ADDR_VAR 0 2
39484: PUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: LD_INT 1
39492: PPUSH
39493: CALL_OW 275
39497: PUSH
39498: LD_VAR 0 1
39502: PPUSH
39503: LD_INT 2
39505: PPUSH
39506: CALL_OW 275
39510: PUSH
39511: LD_VAR 0 1
39515: PPUSH
39516: LD_INT 3
39518: PPUSH
39519: CALL_OW 275
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: ST_TO_ADDR
// end ;
39529: LD_VAR 0 2
39533: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39534: LD_INT 0
39536: PPUSH
39537: PPUSH
// result := array ;
39538: LD_ADDR_VAR 0 3
39542: PUSH
39543: LD_VAR 0 1
39547: ST_TO_ADDR
// if size > 0 then
39548: LD_VAR 0 2
39552: PUSH
39553: LD_INT 0
39555: GREATER
39556: IFFALSE 39602
// for i := array downto size do
39558: LD_ADDR_VAR 0 4
39562: PUSH
39563: DOUBLE
39564: LD_VAR 0 1
39568: INC
39569: ST_TO_ADDR
39570: LD_VAR 0 2
39574: PUSH
39575: FOR_DOWNTO
39576: IFFALSE 39600
// result := Delete ( result , result ) ;
39578: LD_ADDR_VAR 0 3
39582: PUSH
39583: LD_VAR 0 3
39587: PPUSH
39588: LD_VAR 0 3
39592: PPUSH
39593: CALL_OW 3
39597: ST_TO_ADDR
39598: GO 39575
39600: POP
39601: POP
// end ;
39602: LD_VAR 0 3
39606: RET
// export function ComExit ( unit ) ; var tmp ; begin
39607: LD_INT 0
39609: PPUSH
39610: PPUSH
// if not IsInUnit ( unit ) then
39611: LD_VAR 0 1
39615: PPUSH
39616: CALL_OW 310
39620: NOT
39621: IFFALSE 39625
// exit ;
39623: GO 39685
// tmp := IsInUnit ( unit ) ;
39625: LD_ADDR_VAR 0 3
39629: PUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 310
39639: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39640: LD_VAR 0 3
39644: PPUSH
39645: CALL_OW 247
39649: PUSH
39650: LD_INT 2
39652: EQUAL
39653: IFFALSE 39666
// ComExitVehicle ( unit ) else
39655: LD_VAR 0 1
39659: PPUSH
39660: CALL_OW 121
39664: GO 39675
// ComExitBuilding ( unit ) ;
39666: LD_VAR 0 1
39670: PPUSH
39671: CALL_OW 122
// result := tmp ;
39675: LD_ADDR_VAR 0 2
39679: PUSH
39680: LD_VAR 0 3
39684: ST_TO_ADDR
// end ;
39685: LD_VAR 0 2
39689: RET
// export function ComExitAll ( units ) ; var i ; begin
39690: LD_INT 0
39692: PPUSH
39693: PPUSH
// if not units then
39694: LD_VAR 0 1
39698: NOT
39699: IFFALSE 39703
// exit ;
39701: GO 39729
// for i in units do
39703: LD_ADDR_VAR 0 3
39707: PUSH
39708: LD_VAR 0 1
39712: PUSH
39713: FOR_IN
39714: IFFALSE 39727
// ComExit ( i ) ;
39716: LD_VAR 0 3
39720: PPUSH
39721: CALL 39607 0 1
39725: GO 39713
39727: POP
39728: POP
// end ;
39729: LD_VAR 0 2
39733: RET
// export function ResetHc ; begin
39734: LD_INT 0
39736: PPUSH
// InitHc ;
39737: CALL_OW 19
// hc_importance := 0 ;
39741: LD_ADDR_OWVAR 32
39745: PUSH
39746: LD_INT 0
39748: ST_TO_ADDR
// end ;
39749: LD_VAR 0 1
39753: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39754: LD_INT 0
39756: PPUSH
39757: PPUSH
39758: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39759: LD_ADDR_VAR 0 6
39763: PUSH
39764: LD_VAR 0 1
39768: PUSH
39769: LD_VAR 0 3
39773: PLUS
39774: PUSH
39775: LD_INT 2
39777: DIV
39778: ST_TO_ADDR
// if _x < 0 then
39779: LD_VAR 0 6
39783: PUSH
39784: LD_INT 0
39786: LESS
39787: IFFALSE 39804
// _x := _x * - 1 ;
39789: LD_ADDR_VAR 0 6
39793: PUSH
39794: LD_VAR 0 6
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: MUL
39803: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39804: LD_ADDR_VAR 0 7
39808: PUSH
39809: LD_VAR 0 2
39813: PUSH
39814: LD_VAR 0 4
39818: PLUS
39819: PUSH
39820: LD_INT 2
39822: DIV
39823: ST_TO_ADDR
// if _y < 0 then
39824: LD_VAR 0 7
39828: PUSH
39829: LD_INT 0
39831: LESS
39832: IFFALSE 39849
// _y := _y * - 1 ;
39834: LD_ADDR_VAR 0 7
39838: PUSH
39839: LD_VAR 0 7
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: MUL
39848: ST_TO_ADDR
// result := [ _x , _y ] ;
39849: LD_ADDR_VAR 0 5
39853: PUSH
39854: LD_VAR 0 6
39858: PUSH
39859: LD_VAR 0 7
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: ST_TO_ADDR
// end ;
39868: LD_VAR 0 5
39872: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39873: LD_INT 0
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
// task := GetTaskList ( unit ) ;
39879: LD_ADDR_VAR 0 7
39883: PUSH
39884: LD_VAR 0 1
39888: PPUSH
39889: CALL_OW 437
39893: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39894: LD_VAR 0 7
39898: NOT
39899: PUSH
39900: LD_VAR 0 1
39904: PPUSH
39905: LD_VAR 0 2
39909: PPUSH
39910: CALL_OW 308
39914: NOT
39915: AND
39916: IFFALSE 39920
// exit ;
39918: GO 40038
// if IsInArea ( unit , area ) then
39920: LD_VAR 0 1
39924: PPUSH
39925: LD_VAR 0 2
39929: PPUSH
39930: CALL_OW 308
39934: IFFALSE 39952
// begin ComMoveToArea ( unit , goAway ) ;
39936: LD_VAR 0 1
39940: PPUSH
39941: LD_VAR 0 3
39945: PPUSH
39946: CALL_OW 113
// exit ;
39950: GO 40038
// end ; if task [ 1 ] [ 1 ] <> M then
39952: LD_VAR 0 7
39956: PUSH
39957: LD_INT 1
39959: ARRAY
39960: PUSH
39961: LD_INT 1
39963: ARRAY
39964: PUSH
39965: LD_STRING M
39967: NONEQUAL
39968: IFFALSE 39972
// exit ;
39970: GO 40038
// x := task [ 1 ] [ 2 ] ;
39972: LD_ADDR_VAR 0 5
39976: PUSH
39977: LD_VAR 0 7
39981: PUSH
39982: LD_INT 1
39984: ARRAY
39985: PUSH
39986: LD_INT 2
39988: ARRAY
39989: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39990: LD_ADDR_VAR 0 6
39994: PUSH
39995: LD_VAR 0 7
39999: PUSH
40000: LD_INT 1
40002: ARRAY
40003: PUSH
40004: LD_INT 3
40006: ARRAY
40007: ST_TO_ADDR
// if InArea ( x , y , area ) then
40008: LD_VAR 0 5
40012: PPUSH
40013: LD_VAR 0 6
40017: PPUSH
40018: LD_VAR 0 2
40022: PPUSH
40023: CALL_OW 309
40027: IFFALSE 40038
// ComStop ( unit ) ;
40029: LD_VAR 0 1
40033: PPUSH
40034: CALL_OW 141
// end ;
40038: LD_VAR 0 4
40042: RET
// export function Abs ( value ) ; begin
40043: LD_INT 0
40045: PPUSH
// result := value ;
40046: LD_ADDR_VAR 0 2
40050: PUSH
40051: LD_VAR 0 1
40055: ST_TO_ADDR
// if value < 0 then
40056: LD_VAR 0 1
40060: PUSH
40061: LD_INT 0
40063: LESS
40064: IFFALSE 40081
// result := value * - 1 ;
40066: LD_ADDR_VAR 0 2
40070: PUSH
40071: LD_VAR 0 1
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: MUL
40080: ST_TO_ADDR
// end ;
40081: LD_VAR 0 2
40085: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40086: LD_INT 0
40088: PPUSH
40089: PPUSH
40090: PPUSH
40091: PPUSH
40092: PPUSH
40093: PPUSH
40094: PPUSH
40095: PPUSH
// if not unit or not building then
40096: LD_VAR 0 1
40100: NOT
40101: PUSH
40102: LD_VAR 0 2
40106: NOT
40107: OR
40108: IFFALSE 40112
// exit ;
40110: GO 40338
// x := GetX ( building ) ;
40112: LD_ADDR_VAR 0 4
40116: PUSH
40117: LD_VAR 0 2
40121: PPUSH
40122: CALL_OW 250
40126: ST_TO_ADDR
// y := GetY ( building ) ;
40127: LD_ADDR_VAR 0 6
40131: PUSH
40132: LD_VAR 0 2
40136: PPUSH
40137: CALL_OW 251
40141: ST_TO_ADDR
// d := GetDir ( building ) ;
40142: LD_ADDR_VAR 0 8
40146: PUSH
40147: LD_VAR 0 2
40151: PPUSH
40152: CALL_OW 254
40156: ST_TO_ADDR
// r := 4 ;
40157: LD_ADDR_VAR 0 9
40161: PUSH
40162: LD_INT 4
40164: ST_TO_ADDR
// for i := 1 to 5 do
40165: LD_ADDR_VAR 0 10
40169: PUSH
40170: DOUBLE
40171: LD_INT 1
40173: DEC
40174: ST_TO_ADDR
40175: LD_INT 5
40177: PUSH
40178: FOR_TO
40179: IFFALSE 40336
// begin _x := ShiftX ( x , d , r + i ) ;
40181: LD_ADDR_VAR 0 5
40185: PUSH
40186: LD_VAR 0 4
40190: PPUSH
40191: LD_VAR 0 8
40195: PPUSH
40196: LD_VAR 0 9
40200: PUSH
40201: LD_VAR 0 10
40205: PLUS
40206: PPUSH
40207: CALL_OW 272
40211: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40212: LD_ADDR_VAR 0 7
40216: PUSH
40217: LD_VAR 0 6
40221: PPUSH
40222: LD_VAR 0 8
40226: PPUSH
40227: LD_VAR 0 9
40231: PUSH
40232: LD_VAR 0 10
40236: PLUS
40237: PPUSH
40238: CALL_OW 273
40242: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40243: LD_VAR 0 5
40247: PPUSH
40248: LD_VAR 0 7
40252: PPUSH
40253: CALL_OW 488
40257: PUSH
40258: LD_VAR 0 5
40262: PPUSH
40263: LD_VAR 0 7
40267: PPUSH
40268: CALL_OW 428
40272: PPUSH
40273: CALL_OW 247
40277: PUSH
40278: LD_INT 3
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: IN
40288: NOT
40289: AND
40290: IFFALSE 40334
// begin ComMoveXY ( unit , _x , _y ) ;
40292: LD_VAR 0 1
40296: PPUSH
40297: LD_VAR 0 5
40301: PPUSH
40302: LD_VAR 0 7
40306: PPUSH
40307: CALL_OW 111
// result := [ _x , _y ] ;
40311: LD_ADDR_VAR 0 3
40315: PUSH
40316: LD_VAR 0 5
40320: PUSH
40321: LD_VAR 0 7
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: ST_TO_ADDR
// exit ;
40330: POP
40331: POP
40332: GO 40338
// end ; end ;
40334: GO 40178
40336: POP
40337: POP
// end ;
40338: LD_VAR 0 3
40342: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40343: LD_INT 0
40345: PPUSH
40346: PPUSH
40347: PPUSH
// result := 0 ;
40348: LD_ADDR_VAR 0 3
40352: PUSH
40353: LD_INT 0
40355: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40356: LD_VAR 0 1
40360: PUSH
40361: LD_INT 0
40363: LESS
40364: PUSH
40365: LD_VAR 0 1
40369: PUSH
40370: LD_INT 8
40372: GREATER
40373: OR
40374: PUSH
40375: LD_VAR 0 2
40379: PUSH
40380: LD_INT 0
40382: LESS
40383: OR
40384: PUSH
40385: LD_VAR 0 2
40389: PUSH
40390: LD_INT 8
40392: GREATER
40393: OR
40394: IFFALSE 40398
// exit ;
40396: GO 40473
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40398: LD_ADDR_VAR 0 4
40402: PUSH
40403: LD_INT 22
40405: PUSH
40406: LD_VAR 0 2
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PPUSH
40415: CALL_OW 69
40419: PUSH
40420: FOR_IN
40421: IFFALSE 40471
// begin un := UnitShoot ( i ) ;
40423: LD_ADDR_VAR 0 5
40427: PUSH
40428: LD_VAR 0 4
40432: PPUSH
40433: CALL_OW 504
40437: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40438: LD_VAR 0 5
40442: PPUSH
40443: CALL_OW 255
40447: PUSH
40448: LD_VAR 0 1
40452: EQUAL
40453: IFFALSE 40469
// begin result := un ;
40455: LD_ADDR_VAR 0 3
40459: PUSH
40460: LD_VAR 0 5
40464: ST_TO_ADDR
// exit ;
40465: POP
40466: POP
40467: GO 40473
// end ; end ;
40469: GO 40420
40471: POP
40472: POP
// end ;
40473: LD_VAR 0 3
40477: RET
// export function GetCargoBay ( units ) ; begin
40478: LD_INT 0
40480: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40481: LD_ADDR_VAR 0 2
40485: PUSH
40486: LD_VAR 0 1
40490: PPUSH
40491: LD_INT 2
40493: PUSH
40494: LD_INT 34
40496: PUSH
40497: LD_INT 12
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 34
40506: PUSH
40507: LD_INT 51
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 34
40516: PUSH
40517: LD_INT 32
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 34
40526: PUSH
40527: LD_EXP 10
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: PPUSH
40543: CALL_OW 72
40547: ST_TO_ADDR
// end ; end_of_file
40548: LD_VAR 0 2
40552: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
40553: LD_INT 0
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 264
40568: PUSH
40569: LD_EXP 13
40573: EQUAL
40574: IFFALSE 40646
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
40576: LD_INT 68
40578: PPUSH
40579: LD_VAR 0 1
40583: PPUSH
40584: CALL_OW 255
40588: PPUSH
40589: CALL_OW 321
40593: PUSH
40594: LD_INT 2
40596: EQUAL
40597: IFFALSE 40609
// eff := 70 else
40599: LD_ADDR_VAR 0 4
40603: PUSH
40604: LD_INT 70
40606: ST_TO_ADDR
40607: GO 40617
// eff := 30 ;
40609: LD_ADDR_VAR 0 4
40613: PUSH
40614: LD_INT 30
40616: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40617: LD_VAR 0 1
40621: PPUSH
40622: CALL_OW 250
40626: PPUSH
40627: LD_VAR 0 1
40631: PPUSH
40632: CALL_OW 251
40636: PPUSH
40637: LD_VAR 0 4
40641: PPUSH
40642: CALL_OW 495
// end ; end ;
40646: LD_VAR 0 2
40650: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40651: LD_INT 0
40653: PPUSH
// end ;
40654: LD_VAR 0 4
40658: RET
// export function SOS_Command ( cmd ) ; begin
40659: LD_INT 0
40661: PPUSH
// end ;
40662: LD_VAR 0 2
40666: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
40667: LD_INT 0
40669: PPUSH
// if cmd = 121 then
40670: LD_VAR 0 1
40674: PUSH
40675: LD_INT 121
40677: EQUAL
40678: IFFALSE 40680
// end ;
40680: LD_VAR 0 6
40684: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40685: LD_INT 0
40687: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40688: LD_VAR 0 1
40692: PUSH
40693: LD_INT 250
40695: EQUAL
40696: PUSH
40697: LD_VAR 0 2
40701: PPUSH
40702: CALL_OW 264
40706: PUSH
40707: LD_EXP 16
40711: EQUAL
40712: AND
40713: IFFALSE 40734
// MinerPlaceMine ( unit , x , y ) ;
40715: LD_VAR 0 2
40719: PPUSH
40720: LD_VAR 0 4
40724: PPUSH
40725: LD_VAR 0 5
40729: PPUSH
40730: CALL 43083 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40734: LD_VAR 0 1
40738: PUSH
40739: LD_INT 251
40741: EQUAL
40742: PUSH
40743: LD_VAR 0 2
40747: PPUSH
40748: CALL_OW 264
40752: PUSH
40753: LD_EXP 16
40757: EQUAL
40758: AND
40759: IFFALSE 40780
// MinerDetonateMine ( unit , x , y ) ;
40761: LD_VAR 0 2
40765: PPUSH
40766: LD_VAR 0 4
40770: PPUSH
40771: LD_VAR 0 5
40775: PPUSH
40776: CALL 43360 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40780: LD_VAR 0 1
40784: PUSH
40785: LD_INT 252
40787: EQUAL
40788: PUSH
40789: LD_VAR 0 2
40793: PPUSH
40794: CALL_OW 264
40798: PUSH
40799: LD_EXP 16
40803: EQUAL
40804: AND
40805: IFFALSE 40826
// MinerCreateMinefield ( unit , x , y ) ;
40807: LD_VAR 0 2
40811: PPUSH
40812: LD_VAR 0 4
40816: PPUSH
40817: LD_VAR 0 5
40821: PPUSH
40822: CALL 43777 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40826: LD_VAR 0 1
40830: PUSH
40831: LD_INT 253
40833: EQUAL
40834: PUSH
40835: LD_VAR 0 2
40839: PPUSH
40840: CALL_OW 257
40844: PUSH
40845: LD_INT 5
40847: EQUAL
40848: AND
40849: IFFALSE 40870
// ComBinocular ( unit , x , y ) ;
40851: LD_VAR 0 2
40855: PPUSH
40856: LD_VAR 0 4
40860: PPUSH
40861: LD_VAR 0 5
40865: PPUSH
40866: CALL 44148 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40870: LD_VAR 0 1
40874: PUSH
40875: LD_INT 254
40877: EQUAL
40878: PUSH
40879: LD_VAR 0 2
40883: PPUSH
40884: CALL_OW 264
40888: PUSH
40889: LD_EXP 11
40893: EQUAL
40894: AND
40895: PUSH
40896: LD_VAR 0 3
40900: PPUSH
40901: CALL_OW 263
40905: PUSH
40906: LD_INT 3
40908: EQUAL
40909: AND
40910: IFFALSE 40926
// HackDestroyVehicle ( unit , selectedUnit ) ;
40912: LD_VAR 0 2
40916: PPUSH
40917: LD_VAR 0 3
40921: PPUSH
40922: CALL 42443 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40926: LD_VAR 0 1
40930: PUSH
40931: LD_INT 255
40933: EQUAL
40934: PUSH
40935: LD_VAR 0 2
40939: PPUSH
40940: CALL_OW 264
40944: PUSH
40945: LD_INT 14
40947: PUSH
40948: LD_INT 53
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: IN
40955: AND
40956: PUSH
40957: LD_VAR 0 4
40961: PPUSH
40962: LD_VAR 0 5
40966: PPUSH
40967: CALL_OW 488
40971: AND
40972: IFFALSE 40996
// CutTreeXYR ( unit , x , y , 12 ) ;
40974: LD_VAR 0 2
40978: PPUSH
40979: LD_VAR 0 4
40983: PPUSH
40984: LD_VAR 0 5
40988: PPUSH
40989: LD_INT 12
40991: PPUSH
40992: CALL 41009 0 4
// end ;
40996: LD_VAR 0 6
41000: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
41001: LD_INT 0
41003: PPUSH
// end ;
41004: LD_VAR 0 4
41008: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
41009: LD_INT 0
41011: PPUSH
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
41020: LD_VAR 0 1
41024: NOT
41025: PUSH
41026: LD_VAR 0 2
41030: PPUSH
41031: LD_VAR 0 3
41035: PPUSH
41036: CALL_OW 488
41040: NOT
41041: OR
41042: PUSH
41043: LD_VAR 0 4
41047: NOT
41048: OR
41049: IFFALSE 41053
// exit ;
41051: GO 41393
// list := [ ] ;
41053: LD_ADDR_VAR 0 13
41057: PUSH
41058: EMPTY
41059: ST_TO_ADDR
// if x - r < 0 then
41060: LD_VAR 0 2
41064: PUSH
41065: LD_VAR 0 4
41069: MINUS
41070: PUSH
41071: LD_INT 0
41073: LESS
41074: IFFALSE 41086
// min_x := 0 else
41076: LD_ADDR_VAR 0 7
41080: PUSH
41081: LD_INT 0
41083: ST_TO_ADDR
41084: GO 41102
// min_x := x - r ;
41086: LD_ADDR_VAR 0 7
41090: PUSH
41091: LD_VAR 0 2
41095: PUSH
41096: LD_VAR 0 4
41100: MINUS
41101: ST_TO_ADDR
// if y - r < 0 then
41102: LD_VAR 0 3
41106: PUSH
41107: LD_VAR 0 4
41111: MINUS
41112: PUSH
41113: LD_INT 0
41115: LESS
41116: IFFALSE 41128
// min_y := 0 else
41118: LD_ADDR_VAR 0 8
41122: PUSH
41123: LD_INT 0
41125: ST_TO_ADDR
41126: GO 41144
// min_y := y - r ;
41128: LD_ADDR_VAR 0 8
41132: PUSH
41133: LD_VAR 0 3
41137: PUSH
41138: LD_VAR 0 4
41142: MINUS
41143: ST_TO_ADDR
// max_x := x + r ;
41144: LD_ADDR_VAR 0 9
41148: PUSH
41149: LD_VAR 0 2
41153: PUSH
41154: LD_VAR 0 4
41158: PLUS
41159: ST_TO_ADDR
// max_y := y + r ;
41160: LD_ADDR_VAR 0 10
41164: PUSH
41165: LD_VAR 0 3
41169: PUSH
41170: LD_VAR 0 4
41174: PLUS
41175: ST_TO_ADDR
// for _x = min_x to max_x do
41176: LD_ADDR_VAR 0 11
41180: PUSH
41181: DOUBLE
41182: LD_VAR 0 7
41186: DEC
41187: ST_TO_ADDR
41188: LD_VAR 0 9
41192: PUSH
41193: FOR_TO
41194: IFFALSE 41311
// for _y = min_y to max_y do
41196: LD_ADDR_VAR 0 12
41200: PUSH
41201: DOUBLE
41202: LD_VAR 0 8
41206: DEC
41207: ST_TO_ADDR
41208: LD_VAR 0 10
41212: PUSH
41213: FOR_TO
41214: IFFALSE 41307
// begin if not ValidHex ( _x , _y ) then
41216: LD_VAR 0 11
41220: PPUSH
41221: LD_VAR 0 12
41225: PPUSH
41226: CALL_OW 488
41230: NOT
41231: IFFALSE 41235
// continue ;
41233: GO 41213
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
41235: LD_VAR 0 11
41239: PPUSH
41240: LD_VAR 0 12
41244: PPUSH
41245: CALL_OW 351
41249: PUSH
41250: LD_VAR 0 11
41254: PPUSH
41255: LD_VAR 0 12
41259: PPUSH
41260: CALL_OW 554
41264: AND
41265: IFFALSE 41305
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
41267: LD_ADDR_VAR 0 13
41271: PUSH
41272: LD_VAR 0 13
41276: PPUSH
41277: LD_VAR 0 13
41281: PUSH
41282: LD_INT 1
41284: PLUS
41285: PPUSH
41286: LD_VAR 0 11
41290: PUSH
41291: LD_VAR 0 12
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PPUSH
41300: CALL_OW 2
41304: ST_TO_ADDR
// end ;
41305: GO 41213
41307: POP
41308: POP
41309: GO 41193
41311: POP
41312: POP
// if not list then
41313: LD_VAR 0 13
41317: NOT
41318: IFFALSE 41322
// exit ;
41320: GO 41393
// for i in list do
41322: LD_ADDR_VAR 0 6
41326: PUSH
41327: LD_VAR 0 13
41331: PUSH
41332: FOR_IN
41333: IFFALSE 41391
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
41335: LD_VAR 0 1
41339: PPUSH
41340: LD_STRING M
41342: PUSH
41343: LD_VAR 0 6
41347: PUSH
41348: LD_INT 1
41350: ARRAY
41351: PUSH
41352: LD_VAR 0 6
41356: PUSH
41357: LD_INT 2
41359: ARRAY
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: PUSH
41382: EMPTY
41383: LIST
41384: PPUSH
41385: CALL_OW 447
41389: GO 41332
41391: POP
41392: POP
// end ;
41393: LD_VAR 0 5
41397: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
41398: LD_EXP 27
41402: NOT
41403: IFFALSE 41453
41405: GO 41407
41407: DISABLE
// begin initHack := true ;
41408: LD_ADDR_EXP 27
41412: PUSH
41413: LD_INT 1
41415: ST_TO_ADDR
// hackTanks := [ ] ;
41416: LD_ADDR_EXP 28
41420: PUSH
41421: EMPTY
41422: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
41423: LD_ADDR_EXP 29
41427: PUSH
41428: EMPTY
41429: ST_TO_ADDR
// hackLimit := 3 ;
41430: LD_ADDR_EXP 30
41434: PUSH
41435: LD_INT 3
41437: ST_TO_ADDR
// hackDist := 12 ;
41438: LD_ADDR_EXP 31
41442: PUSH
41443: LD_INT 12
41445: ST_TO_ADDR
// hackCounter := [ ] ;
41446: LD_ADDR_EXP 32
41450: PUSH
41451: EMPTY
41452: ST_TO_ADDR
// end ;
41453: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41454: LD_EXP 27
41458: PUSH
41459: LD_INT 34
41461: PUSH
41462: LD_EXP 11
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PPUSH
41471: CALL_OW 69
41475: AND
41476: IFFALSE 41731
41478: GO 41480
41480: DISABLE
41481: LD_INT 0
41483: PPUSH
41484: PPUSH
// begin enable ;
41485: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41486: LD_ADDR_VAR 0 1
41490: PUSH
41491: LD_INT 34
41493: PUSH
41494: LD_EXP 11
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PPUSH
41503: CALL_OW 69
41507: PUSH
41508: FOR_IN
41509: IFFALSE 41729
// begin if not i in hackTanks then
41511: LD_VAR 0 1
41515: PUSH
41516: LD_EXP 28
41520: IN
41521: NOT
41522: IFFALSE 41605
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41524: LD_ADDR_EXP 28
41528: PUSH
41529: LD_EXP 28
41533: PPUSH
41534: LD_EXP 28
41538: PUSH
41539: LD_INT 1
41541: PLUS
41542: PPUSH
41543: LD_VAR 0 1
41547: PPUSH
41548: CALL_OW 1
41552: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41553: LD_ADDR_EXP 29
41557: PUSH
41558: LD_EXP 29
41562: PPUSH
41563: LD_EXP 29
41567: PUSH
41568: LD_INT 1
41570: PLUS
41571: PPUSH
41572: EMPTY
41573: PPUSH
41574: CALL_OW 1
41578: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41579: LD_ADDR_EXP 32
41583: PUSH
41584: LD_EXP 32
41588: PPUSH
41589: LD_EXP 32
41593: PUSH
41594: LD_INT 1
41596: PLUS
41597: PPUSH
41598: EMPTY
41599: PPUSH
41600: CALL_OW 1
41604: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41605: LD_VAR 0 1
41609: PPUSH
41610: CALL_OW 302
41614: NOT
41615: IFFALSE 41628
// begin HackUnlinkAll ( i ) ;
41617: LD_VAR 0 1
41621: PPUSH
41622: CALL 41734 0 1
// continue ;
41626: GO 41508
// end ; HackCheckCapturedStatus ( i ) ;
41628: LD_VAR 0 1
41632: PPUSH
41633: CALL 42177 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41637: LD_ADDR_VAR 0 2
41641: PUSH
41642: LD_INT 81
41644: PUSH
41645: LD_VAR 0 1
41649: PPUSH
41650: CALL_OW 255
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 33
41661: PUSH
41662: LD_INT 3
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 91
41671: PUSH
41672: LD_VAR 0 1
41676: PUSH
41677: LD_EXP 31
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 50
41689: PUSH
41690: EMPTY
41691: LIST
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: PPUSH
41699: CALL_OW 69
41703: ST_TO_ADDR
// if not tmp then
41704: LD_VAR 0 2
41708: NOT
41709: IFFALSE 41713
// continue ;
41711: GO 41508
// HackLink ( i , tmp ) ;
41713: LD_VAR 0 1
41717: PPUSH
41718: LD_VAR 0 2
41722: PPUSH
41723: CALL 41870 0 2
// end ;
41727: GO 41508
41729: POP
41730: POP
// end ;
41731: PPOPN 2
41733: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41734: LD_INT 0
41736: PPUSH
41737: PPUSH
41738: PPUSH
// if not hack in hackTanks then
41739: LD_VAR 0 1
41743: PUSH
41744: LD_EXP 28
41748: IN
41749: NOT
41750: IFFALSE 41754
// exit ;
41752: GO 41865
// index := GetElementIndex ( hackTanks , hack ) ;
41754: LD_ADDR_VAR 0 4
41758: PUSH
41759: LD_EXP 28
41763: PPUSH
41764: LD_VAR 0 1
41768: PPUSH
41769: CALL 7628 0 2
41773: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41774: LD_EXP 29
41778: PUSH
41779: LD_VAR 0 4
41783: ARRAY
41784: IFFALSE 41865
// begin for i in hackTanksCaptured [ index ] do
41786: LD_ADDR_VAR 0 3
41790: PUSH
41791: LD_EXP 29
41795: PUSH
41796: LD_VAR 0 4
41800: ARRAY
41801: PUSH
41802: FOR_IN
41803: IFFALSE 41829
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41805: LD_VAR 0 3
41809: PUSH
41810: LD_INT 1
41812: ARRAY
41813: PPUSH
41814: LD_VAR 0 3
41818: PUSH
41819: LD_INT 2
41821: ARRAY
41822: PPUSH
41823: CALL_OW 235
41827: GO 41802
41829: POP
41830: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41831: LD_ADDR_EXP 29
41835: PUSH
41836: LD_EXP 29
41840: PPUSH
41841: LD_VAR 0 4
41845: PPUSH
41846: EMPTY
41847: PPUSH
41848: CALL_OW 1
41852: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41853: LD_VAR 0 1
41857: PPUSH
41858: LD_INT 0
41860: PPUSH
41861: CALL_OW 505
// end ; end ;
41865: LD_VAR 0 2
41869: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41870: LD_INT 0
41872: PPUSH
41873: PPUSH
41874: PPUSH
// if not hack in hackTanks or not vehicles then
41875: LD_VAR 0 1
41879: PUSH
41880: LD_EXP 28
41884: IN
41885: NOT
41886: PUSH
41887: LD_VAR 0 2
41891: NOT
41892: OR
41893: IFFALSE 41897
// exit ;
41895: GO 42172
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41897: LD_ADDR_VAR 0 2
41901: PUSH
41902: LD_VAR 0 1
41906: PPUSH
41907: LD_VAR 0 2
41911: PPUSH
41912: LD_INT 1
41914: PPUSH
41915: LD_INT 1
41917: PPUSH
41918: CALL 8278 0 4
41922: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41923: LD_ADDR_VAR 0 5
41927: PUSH
41928: LD_EXP 28
41932: PPUSH
41933: LD_VAR 0 1
41937: PPUSH
41938: CALL 7628 0 2
41942: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41943: LD_EXP 29
41947: PUSH
41948: LD_VAR 0 5
41952: ARRAY
41953: PUSH
41954: LD_EXP 30
41958: LESS
41959: IFFALSE 42148
// begin for i := 1 to vehicles do
41961: LD_ADDR_VAR 0 4
41965: PUSH
41966: DOUBLE
41967: LD_INT 1
41969: DEC
41970: ST_TO_ADDR
41971: LD_VAR 0 2
41975: PUSH
41976: FOR_TO
41977: IFFALSE 42146
// begin if hackTanksCaptured [ index ] = hackLimit then
41979: LD_EXP 29
41983: PUSH
41984: LD_VAR 0 5
41988: ARRAY
41989: PUSH
41990: LD_EXP 30
41994: EQUAL
41995: IFFALSE 41999
// break ;
41997: GO 42146
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41999: LD_ADDR_EXP 32
42003: PUSH
42004: LD_EXP 32
42008: PPUSH
42009: LD_VAR 0 5
42013: PPUSH
42014: LD_EXP 32
42018: PUSH
42019: LD_VAR 0 5
42023: ARRAY
42024: PUSH
42025: LD_INT 1
42027: PLUS
42028: PPUSH
42029: CALL_OW 1
42033: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
42034: LD_ADDR_EXP 29
42038: PUSH
42039: LD_EXP 29
42043: PPUSH
42044: LD_VAR 0 5
42048: PUSH
42049: LD_EXP 29
42053: PUSH
42054: LD_VAR 0 5
42058: ARRAY
42059: PUSH
42060: LD_INT 1
42062: PLUS
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PPUSH
42068: LD_VAR 0 2
42072: PUSH
42073: LD_VAR 0 4
42077: ARRAY
42078: PUSH
42079: LD_VAR 0 2
42083: PUSH
42084: LD_VAR 0 4
42088: ARRAY
42089: PPUSH
42090: CALL_OW 255
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PPUSH
42099: CALL 7843 0 3
42103: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
42104: LD_VAR 0 2
42108: PUSH
42109: LD_VAR 0 4
42113: ARRAY
42114: PPUSH
42115: LD_VAR 0 1
42119: PPUSH
42120: CALL_OW 255
42124: PPUSH
42125: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
42129: LD_VAR 0 2
42133: PUSH
42134: LD_VAR 0 4
42138: ARRAY
42139: PPUSH
42140: CALL_OW 141
// end ;
42144: GO 41976
42146: POP
42147: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42148: LD_VAR 0 1
42152: PPUSH
42153: LD_EXP 29
42157: PUSH
42158: LD_VAR 0 5
42162: ARRAY
42163: PUSH
42164: LD_INT 0
42166: PLUS
42167: PPUSH
42168: CALL_OW 505
// end ;
42172: LD_VAR 0 3
42176: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
42177: LD_INT 0
42179: PPUSH
42180: PPUSH
42181: PPUSH
42182: PPUSH
// if not hack in hackTanks then
42183: LD_VAR 0 1
42187: PUSH
42188: LD_EXP 28
42192: IN
42193: NOT
42194: IFFALSE 42198
// exit ;
42196: GO 42438
// index := GetElementIndex ( hackTanks , hack ) ;
42198: LD_ADDR_VAR 0 4
42202: PUSH
42203: LD_EXP 28
42207: PPUSH
42208: LD_VAR 0 1
42212: PPUSH
42213: CALL 7628 0 2
42217: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
42218: LD_ADDR_VAR 0 3
42222: PUSH
42223: DOUBLE
42224: LD_EXP 29
42228: PUSH
42229: LD_VAR 0 4
42233: ARRAY
42234: INC
42235: ST_TO_ADDR
42236: LD_INT 1
42238: PUSH
42239: FOR_DOWNTO
42240: IFFALSE 42412
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
42242: LD_ADDR_VAR 0 5
42246: PUSH
42247: LD_EXP 29
42251: PUSH
42252: LD_VAR 0 4
42256: ARRAY
42257: PUSH
42258: LD_VAR 0 3
42262: ARRAY
42263: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
42264: LD_VAR 0 5
42268: PUSH
42269: LD_INT 1
42271: ARRAY
42272: PPUSH
42273: CALL_OW 302
42277: NOT
42278: PUSH
42279: LD_VAR 0 5
42283: PUSH
42284: LD_INT 1
42286: ARRAY
42287: PPUSH
42288: CALL_OW 255
42292: PUSH
42293: LD_VAR 0 1
42297: PPUSH
42298: CALL_OW 255
42302: NONEQUAL
42303: OR
42304: IFFALSE 42410
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
42306: LD_VAR 0 5
42310: PUSH
42311: LD_INT 1
42313: ARRAY
42314: PPUSH
42315: CALL_OW 305
42319: PUSH
42320: LD_VAR 0 5
42324: PUSH
42325: LD_INT 1
42327: ARRAY
42328: PPUSH
42329: CALL_OW 255
42333: PUSH
42334: LD_VAR 0 1
42338: PPUSH
42339: CALL_OW 255
42343: EQUAL
42344: AND
42345: IFFALSE 42369
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
42347: LD_VAR 0 5
42351: PUSH
42352: LD_INT 1
42354: ARRAY
42355: PPUSH
42356: LD_VAR 0 5
42360: PUSH
42361: LD_INT 2
42363: ARRAY
42364: PPUSH
42365: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
42369: LD_ADDR_EXP 29
42373: PUSH
42374: LD_EXP 29
42378: PPUSH
42379: LD_VAR 0 4
42383: PPUSH
42384: LD_EXP 29
42388: PUSH
42389: LD_VAR 0 4
42393: ARRAY
42394: PPUSH
42395: LD_VAR 0 3
42399: PPUSH
42400: CALL_OW 3
42404: PPUSH
42405: CALL_OW 1
42409: ST_TO_ADDR
// end ; end ;
42410: GO 42239
42412: POP
42413: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42414: LD_VAR 0 1
42418: PPUSH
42419: LD_EXP 29
42423: PUSH
42424: LD_VAR 0 4
42428: ARRAY
42429: PUSH
42430: LD_INT 0
42432: PLUS
42433: PPUSH
42434: CALL_OW 505
// end ;
42438: LD_VAR 0 2
42442: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42443: LD_INT 0
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
// if not hack in hackTanks then
42449: LD_VAR 0 1
42453: PUSH
42454: LD_EXP 28
42458: IN
42459: NOT
42460: IFFALSE 42464
// exit ;
42462: GO 42549
// index := GetElementIndex ( hackTanks , hack ) ;
42464: LD_ADDR_VAR 0 5
42468: PUSH
42469: LD_EXP 28
42473: PPUSH
42474: LD_VAR 0 1
42478: PPUSH
42479: CALL 7628 0 2
42483: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42484: LD_ADDR_VAR 0 4
42488: PUSH
42489: DOUBLE
42490: LD_INT 1
42492: DEC
42493: ST_TO_ADDR
42494: LD_EXP 29
42498: PUSH
42499: LD_VAR 0 5
42503: ARRAY
42504: PUSH
42505: FOR_TO
42506: IFFALSE 42547
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42508: LD_EXP 29
42512: PUSH
42513: LD_VAR 0 5
42517: ARRAY
42518: PUSH
42519: LD_VAR 0 4
42523: ARRAY
42524: PUSH
42525: LD_INT 1
42527: ARRAY
42528: PUSH
42529: LD_VAR 0 2
42533: EQUAL
42534: IFFALSE 42545
// KillUnit ( vehicle ) ;
42536: LD_VAR 0 2
42540: PPUSH
42541: CALL_OW 66
42545: GO 42505
42547: POP
42548: POP
// end ;
42549: LD_VAR 0 3
42553: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42554: LD_EXP 33
42558: NOT
42559: IFFALSE 42594
42561: GO 42563
42563: DISABLE
// begin initMiner := true ;
42564: LD_ADDR_EXP 33
42568: PUSH
42569: LD_INT 1
42571: ST_TO_ADDR
// minersList := [ ] ;
42572: LD_ADDR_EXP 34
42576: PUSH
42577: EMPTY
42578: ST_TO_ADDR
// minerMinesList := [ ] ;
42579: LD_ADDR_EXP 35
42583: PUSH
42584: EMPTY
42585: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42586: LD_ADDR_EXP 36
42590: PUSH
42591: LD_INT 5
42593: ST_TO_ADDR
// end ;
42594: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42595: LD_EXP 33
42599: PUSH
42600: LD_INT 34
42602: PUSH
42603: LD_EXP 16
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PPUSH
42612: CALL_OW 69
42616: AND
42617: IFFALSE 43080
42619: GO 42621
42621: DISABLE
42622: LD_INT 0
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
// begin enable ;
42628: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42629: LD_ADDR_VAR 0 1
42633: PUSH
42634: LD_INT 34
42636: PUSH
42637: LD_EXP 16
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PPUSH
42646: CALL_OW 69
42650: PUSH
42651: FOR_IN
42652: IFFALSE 42724
// begin if not i in minersList then
42654: LD_VAR 0 1
42658: PUSH
42659: LD_EXP 34
42663: IN
42664: NOT
42665: IFFALSE 42722
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42667: LD_ADDR_EXP 34
42671: PUSH
42672: LD_EXP 34
42676: PPUSH
42677: LD_EXP 34
42681: PUSH
42682: LD_INT 1
42684: PLUS
42685: PPUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 1
42695: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42696: LD_ADDR_EXP 35
42700: PUSH
42701: LD_EXP 35
42705: PPUSH
42706: LD_EXP 35
42710: PUSH
42711: LD_INT 1
42713: PLUS
42714: PPUSH
42715: EMPTY
42716: PPUSH
42717: CALL_OW 1
42721: ST_TO_ADDR
// end end ;
42722: GO 42651
42724: POP
42725: POP
// for i := minerMinesList downto 1 do
42726: LD_ADDR_VAR 0 1
42730: PUSH
42731: DOUBLE
42732: LD_EXP 35
42736: INC
42737: ST_TO_ADDR
42738: LD_INT 1
42740: PUSH
42741: FOR_DOWNTO
42742: IFFALSE 43078
// begin if IsLive ( minersList [ i ] ) then
42744: LD_EXP 34
42748: PUSH
42749: LD_VAR 0 1
42753: ARRAY
42754: PPUSH
42755: CALL_OW 300
42759: IFFALSE 42787
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42761: LD_EXP 34
42765: PUSH
42766: LD_VAR 0 1
42770: ARRAY
42771: PPUSH
42772: LD_EXP 35
42776: PUSH
42777: LD_VAR 0 1
42781: ARRAY
42782: PPUSH
42783: CALL_OW 505
// if not minerMinesList [ i ] then
42787: LD_EXP 35
42791: PUSH
42792: LD_VAR 0 1
42796: ARRAY
42797: NOT
42798: IFFALSE 42802
// continue ;
42800: GO 42741
// for j := minerMinesList [ i ] downto 1 do
42802: LD_ADDR_VAR 0 2
42806: PUSH
42807: DOUBLE
42808: LD_EXP 35
42812: PUSH
42813: LD_VAR 0 1
42817: ARRAY
42818: INC
42819: ST_TO_ADDR
42820: LD_INT 1
42822: PUSH
42823: FOR_DOWNTO
42824: IFFALSE 43074
// begin side := GetSide ( minersList [ i ] ) ;
42826: LD_ADDR_VAR 0 3
42830: PUSH
42831: LD_EXP 34
42835: PUSH
42836: LD_VAR 0 1
42840: ARRAY
42841: PPUSH
42842: CALL_OW 255
42846: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42847: LD_ADDR_VAR 0 4
42851: PUSH
42852: LD_EXP 35
42856: PUSH
42857: LD_VAR 0 1
42861: ARRAY
42862: PUSH
42863: LD_VAR 0 2
42867: ARRAY
42868: PUSH
42869: LD_INT 1
42871: ARRAY
42872: PPUSH
42873: LD_EXP 35
42877: PUSH
42878: LD_VAR 0 1
42882: ARRAY
42883: PUSH
42884: LD_VAR 0 2
42888: ARRAY
42889: PUSH
42890: LD_INT 2
42892: ARRAY
42893: PPUSH
42894: CALL_OW 428
42898: ST_TO_ADDR
// if not tmp then
42899: LD_VAR 0 4
42903: NOT
42904: IFFALSE 42908
// continue ;
42906: GO 42823
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42908: LD_VAR 0 4
42912: PUSH
42913: LD_INT 81
42915: PUSH
42916: LD_VAR 0 3
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PPUSH
42925: CALL_OW 69
42929: IN
42930: PUSH
42931: LD_EXP 35
42935: PUSH
42936: LD_VAR 0 1
42940: ARRAY
42941: PUSH
42942: LD_VAR 0 2
42946: ARRAY
42947: PUSH
42948: LD_INT 1
42950: ARRAY
42951: PPUSH
42952: LD_EXP 35
42956: PUSH
42957: LD_VAR 0 1
42961: ARRAY
42962: PUSH
42963: LD_VAR 0 2
42967: ARRAY
42968: PUSH
42969: LD_INT 2
42971: ARRAY
42972: PPUSH
42973: CALL_OW 458
42977: AND
42978: IFFALSE 43072
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42980: LD_EXP 35
42984: PUSH
42985: LD_VAR 0 1
42989: ARRAY
42990: PUSH
42991: LD_VAR 0 2
42995: ARRAY
42996: PUSH
42997: LD_INT 1
42999: ARRAY
43000: PPUSH
43001: LD_EXP 35
43005: PUSH
43006: LD_VAR 0 1
43010: ARRAY
43011: PUSH
43012: LD_VAR 0 2
43016: ARRAY
43017: PUSH
43018: LD_INT 2
43020: ARRAY
43021: PPUSH
43022: LD_VAR 0 3
43026: PPUSH
43027: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
43031: LD_ADDR_EXP 35
43035: PUSH
43036: LD_EXP 35
43040: PPUSH
43041: LD_VAR 0 1
43045: PPUSH
43046: LD_EXP 35
43050: PUSH
43051: LD_VAR 0 1
43055: ARRAY
43056: PPUSH
43057: LD_VAR 0 2
43061: PPUSH
43062: CALL_OW 3
43066: PPUSH
43067: CALL_OW 1
43071: ST_TO_ADDR
// end ; end ;
43072: GO 42823
43074: POP
43075: POP
// end ;
43076: GO 42741
43078: POP
43079: POP
// end ;
43080: PPOPN 4
43082: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
43083: LD_INT 0
43085: PPUSH
43086: PPUSH
// result := false ;
43087: LD_ADDR_VAR 0 4
43091: PUSH
43092: LD_INT 0
43094: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
43095: LD_VAR 0 1
43099: PPUSH
43100: CALL_OW 264
43104: PUSH
43105: LD_EXP 16
43109: EQUAL
43110: NOT
43111: IFFALSE 43115
// exit ;
43113: GO 43355
// index := GetElementIndex ( minersList , unit ) ;
43115: LD_ADDR_VAR 0 5
43119: PUSH
43120: LD_EXP 34
43124: PPUSH
43125: LD_VAR 0 1
43129: PPUSH
43130: CALL 7628 0 2
43134: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
43135: LD_EXP 35
43139: PUSH
43140: LD_VAR 0 5
43144: ARRAY
43145: PUSH
43146: LD_EXP 36
43150: GREATEREQUAL
43151: IFFALSE 43155
// exit ;
43153: GO 43355
// ComMoveXY ( unit , x , y ) ;
43155: LD_VAR 0 1
43159: PPUSH
43160: LD_VAR 0 2
43164: PPUSH
43165: LD_VAR 0 3
43169: PPUSH
43170: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43174: LD_INT 35
43176: PPUSH
43177: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
43181: LD_VAR 0 1
43185: PPUSH
43186: LD_VAR 0 2
43190: PPUSH
43191: LD_VAR 0 3
43195: PPUSH
43196: CALL 38025 0 3
43200: NOT
43201: PUSH
43202: LD_VAR 0 1
43206: PPUSH
43207: CALL_OW 314
43211: AND
43212: IFFALSE 43216
// exit ;
43214: GO 43355
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
43216: LD_VAR 0 2
43220: PPUSH
43221: LD_VAR 0 3
43225: PPUSH
43226: CALL_OW 428
43230: PUSH
43231: LD_VAR 0 1
43235: EQUAL
43236: PUSH
43237: LD_VAR 0 1
43241: PPUSH
43242: CALL_OW 314
43246: NOT
43247: AND
43248: IFFALSE 43174
// PlaySoundXY ( x , y , PlantMine ) ;
43250: LD_VAR 0 2
43254: PPUSH
43255: LD_VAR 0 3
43259: PPUSH
43260: LD_STRING PlantMine
43262: PPUSH
43263: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
43267: LD_VAR 0 2
43271: PPUSH
43272: LD_VAR 0 3
43276: PPUSH
43277: LD_VAR 0 1
43281: PPUSH
43282: CALL_OW 255
43286: PPUSH
43287: LD_INT 0
43289: PPUSH
43290: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
43294: LD_ADDR_EXP 35
43298: PUSH
43299: LD_EXP 35
43303: PPUSH
43304: LD_VAR 0 5
43308: PUSH
43309: LD_EXP 35
43313: PUSH
43314: LD_VAR 0 5
43318: ARRAY
43319: PUSH
43320: LD_INT 1
43322: PLUS
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PPUSH
43328: LD_VAR 0 2
43332: PUSH
43333: LD_VAR 0 3
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PPUSH
43342: CALL 7843 0 3
43346: ST_TO_ADDR
// result := true ;
43347: LD_ADDR_VAR 0 4
43351: PUSH
43352: LD_INT 1
43354: ST_TO_ADDR
// end ;
43355: LD_VAR 0 4
43359: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
43360: LD_INT 0
43362: PPUSH
43363: PPUSH
43364: PPUSH
// if not unit in minersList then
43365: LD_VAR 0 1
43369: PUSH
43370: LD_EXP 34
43374: IN
43375: NOT
43376: IFFALSE 43380
// exit ;
43378: GO 43772
// index := GetElementIndex ( minersList , unit ) ;
43380: LD_ADDR_VAR 0 6
43384: PUSH
43385: LD_EXP 34
43389: PPUSH
43390: LD_VAR 0 1
43394: PPUSH
43395: CALL 7628 0 2
43399: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
43400: LD_ADDR_VAR 0 5
43404: PUSH
43405: DOUBLE
43406: LD_EXP 35
43410: PUSH
43411: LD_VAR 0 6
43415: ARRAY
43416: INC
43417: ST_TO_ADDR
43418: LD_INT 1
43420: PUSH
43421: FOR_DOWNTO
43422: IFFALSE 43583
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
43424: LD_EXP 35
43428: PUSH
43429: LD_VAR 0 6
43433: ARRAY
43434: PUSH
43435: LD_VAR 0 5
43439: ARRAY
43440: PUSH
43441: LD_INT 1
43443: ARRAY
43444: PUSH
43445: LD_VAR 0 2
43449: EQUAL
43450: PUSH
43451: LD_EXP 35
43455: PUSH
43456: LD_VAR 0 6
43460: ARRAY
43461: PUSH
43462: LD_VAR 0 5
43466: ARRAY
43467: PUSH
43468: LD_INT 2
43470: ARRAY
43471: PUSH
43472: LD_VAR 0 3
43476: EQUAL
43477: AND
43478: IFFALSE 43581
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43480: LD_EXP 35
43484: PUSH
43485: LD_VAR 0 6
43489: ARRAY
43490: PUSH
43491: LD_VAR 0 5
43495: ARRAY
43496: PUSH
43497: LD_INT 1
43499: ARRAY
43500: PPUSH
43501: LD_EXP 35
43505: PUSH
43506: LD_VAR 0 6
43510: ARRAY
43511: PUSH
43512: LD_VAR 0 5
43516: ARRAY
43517: PUSH
43518: LD_INT 2
43520: ARRAY
43521: PPUSH
43522: LD_VAR 0 1
43526: PPUSH
43527: CALL_OW 255
43531: PPUSH
43532: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43536: LD_ADDR_EXP 35
43540: PUSH
43541: LD_EXP 35
43545: PPUSH
43546: LD_VAR 0 6
43550: PPUSH
43551: LD_EXP 35
43555: PUSH
43556: LD_VAR 0 6
43560: ARRAY
43561: PPUSH
43562: LD_VAR 0 5
43566: PPUSH
43567: CALL_OW 3
43571: PPUSH
43572: CALL_OW 1
43576: ST_TO_ADDR
// exit ;
43577: POP
43578: POP
43579: GO 43772
// end ; end ;
43581: GO 43421
43583: POP
43584: POP
// for i := minerMinesList [ index ] downto 1 do
43585: LD_ADDR_VAR 0 5
43589: PUSH
43590: DOUBLE
43591: LD_EXP 35
43595: PUSH
43596: LD_VAR 0 6
43600: ARRAY
43601: INC
43602: ST_TO_ADDR
43603: LD_INT 1
43605: PUSH
43606: FOR_DOWNTO
43607: IFFALSE 43770
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43609: LD_EXP 35
43613: PUSH
43614: LD_VAR 0 6
43618: ARRAY
43619: PUSH
43620: LD_VAR 0 5
43624: ARRAY
43625: PUSH
43626: LD_INT 1
43628: ARRAY
43629: PPUSH
43630: LD_EXP 35
43634: PUSH
43635: LD_VAR 0 6
43639: ARRAY
43640: PUSH
43641: LD_VAR 0 5
43645: ARRAY
43646: PUSH
43647: LD_INT 2
43649: ARRAY
43650: PPUSH
43651: LD_VAR 0 2
43655: PPUSH
43656: LD_VAR 0 3
43660: PPUSH
43661: CALL_OW 298
43665: PUSH
43666: LD_INT 6
43668: LESS
43669: IFFALSE 43768
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43671: LD_EXP 35
43675: PUSH
43676: LD_VAR 0 6
43680: ARRAY
43681: PUSH
43682: LD_VAR 0 5
43686: ARRAY
43687: PUSH
43688: LD_INT 1
43690: ARRAY
43691: PPUSH
43692: LD_EXP 35
43696: PUSH
43697: LD_VAR 0 6
43701: ARRAY
43702: PUSH
43703: LD_VAR 0 5
43707: ARRAY
43708: PUSH
43709: LD_INT 2
43711: ARRAY
43712: PPUSH
43713: LD_VAR 0 1
43717: PPUSH
43718: CALL_OW 255
43722: PPUSH
43723: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43727: LD_ADDR_EXP 35
43731: PUSH
43732: LD_EXP 35
43736: PPUSH
43737: LD_VAR 0 6
43741: PPUSH
43742: LD_EXP 35
43746: PUSH
43747: LD_VAR 0 6
43751: ARRAY
43752: PPUSH
43753: LD_VAR 0 5
43757: PPUSH
43758: CALL_OW 3
43762: PPUSH
43763: CALL_OW 1
43767: ST_TO_ADDR
// end ; end ;
43768: GO 43606
43770: POP
43771: POP
// end ;
43772: LD_VAR 0 4
43776: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43777: LD_INT 0
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43788: LD_VAR 0 1
43792: PPUSH
43793: CALL_OW 264
43797: PUSH
43798: LD_EXP 16
43802: EQUAL
43803: NOT
43804: PUSH
43805: LD_VAR 0 1
43809: PUSH
43810: LD_EXP 34
43814: IN
43815: NOT
43816: OR
43817: IFFALSE 43821
// exit ;
43819: GO 44143
// index := GetElementIndex ( minersList , unit ) ;
43821: LD_ADDR_VAR 0 6
43825: PUSH
43826: LD_EXP 34
43830: PPUSH
43831: LD_VAR 0 1
43835: PPUSH
43836: CALL 7628 0 2
43840: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43841: LD_ADDR_VAR 0 8
43845: PUSH
43846: LD_EXP 36
43850: PUSH
43851: LD_EXP 35
43855: PUSH
43856: LD_VAR 0 6
43860: ARRAY
43861: MINUS
43862: ST_TO_ADDR
// if not minesFreeAmount then
43863: LD_VAR 0 8
43867: NOT
43868: IFFALSE 43872
// exit ;
43870: GO 44143
// tmp := [ ] ;
43872: LD_ADDR_VAR 0 7
43876: PUSH
43877: EMPTY
43878: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43879: LD_ADDR_VAR 0 5
43883: PUSH
43884: DOUBLE
43885: LD_INT 1
43887: DEC
43888: ST_TO_ADDR
43889: LD_VAR 0 8
43893: PUSH
43894: FOR_TO
43895: IFFALSE 44090
// begin _d := rand ( 0 , 5 ) ;
43897: LD_ADDR_VAR 0 11
43901: PUSH
43902: LD_INT 0
43904: PPUSH
43905: LD_INT 5
43907: PPUSH
43908: CALL_OW 12
43912: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43913: LD_ADDR_VAR 0 12
43917: PUSH
43918: LD_INT 2
43920: PPUSH
43921: LD_INT 6
43923: PPUSH
43924: CALL_OW 12
43928: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43929: LD_ADDR_VAR 0 9
43933: PUSH
43934: LD_VAR 0 2
43938: PPUSH
43939: LD_VAR 0 11
43943: PPUSH
43944: LD_VAR 0 12
43948: PPUSH
43949: CALL_OW 272
43953: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43954: LD_ADDR_VAR 0 10
43958: PUSH
43959: LD_VAR 0 3
43963: PPUSH
43964: LD_VAR 0 11
43968: PPUSH
43969: LD_VAR 0 12
43973: PPUSH
43974: CALL_OW 273
43978: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43979: LD_VAR 0 9
43983: PPUSH
43984: LD_VAR 0 10
43988: PPUSH
43989: CALL_OW 488
43993: PUSH
43994: LD_VAR 0 9
43998: PUSH
43999: LD_VAR 0 10
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_VAR 0 7
44012: IN
44013: NOT
44014: AND
44015: PUSH
44016: LD_VAR 0 9
44020: PPUSH
44021: LD_VAR 0 10
44025: PPUSH
44026: CALL_OW 458
44030: NOT
44031: AND
44032: IFFALSE 44074
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
44034: LD_ADDR_VAR 0 7
44038: PUSH
44039: LD_VAR 0 7
44043: PPUSH
44044: LD_VAR 0 7
44048: PUSH
44049: LD_INT 1
44051: PLUS
44052: PPUSH
44053: LD_VAR 0 9
44057: PUSH
44058: LD_VAR 0 10
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PPUSH
44067: CALL_OW 1
44071: ST_TO_ADDR
44072: GO 44088
// i := i - 1 ;
44074: LD_ADDR_VAR 0 5
44078: PUSH
44079: LD_VAR 0 5
44083: PUSH
44084: LD_INT 1
44086: MINUS
44087: ST_TO_ADDR
// end ;
44088: GO 43894
44090: POP
44091: POP
// for i in tmp do
44092: LD_ADDR_VAR 0 5
44096: PUSH
44097: LD_VAR 0 7
44101: PUSH
44102: FOR_IN
44103: IFFALSE 44141
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
44105: LD_VAR 0 1
44109: PPUSH
44110: LD_VAR 0 5
44114: PUSH
44115: LD_INT 1
44117: ARRAY
44118: PPUSH
44119: LD_VAR 0 5
44123: PUSH
44124: LD_INT 2
44126: ARRAY
44127: PPUSH
44128: CALL 43083 0 3
44132: NOT
44133: IFFALSE 44139
// exit ;
44135: POP
44136: POP
44137: GO 44143
44139: GO 44102
44141: POP
44142: POP
// end ;
44143: LD_VAR 0 4
44147: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
44148: LD_INT 0
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
44156: PPUSH
// if not GetClass ( unit ) = class_sniper then
44157: LD_VAR 0 1
44161: PPUSH
44162: CALL_OW 257
44166: PUSH
44167: LD_INT 5
44169: EQUAL
44170: NOT
44171: IFFALSE 44175
// exit ;
44173: GO 44563
// dist := 8 ;
44175: LD_ADDR_VAR 0 5
44179: PUSH
44180: LD_INT 8
44182: ST_TO_ADDR
// viewRange := 12 ;
44183: LD_ADDR_VAR 0 7
44187: PUSH
44188: LD_INT 12
44190: ST_TO_ADDR
// side := GetSide ( unit ) ;
44191: LD_ADDR_VAR 0 6
44195: PUSH
44196: LD_VAR 0 1
44200: PPUSH
44201: CALL_OW 255
44205: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
44206: LD_INT 61
44208: PPUSH
44209: LD_VAR 0 6
44213: PPUSH
44214: CALL_OW 321
44218: PUSH
44219: LD_INT 2
44221: EQUAL
44222: IFFALSE 44232
// viewRange := 16 ;
44224: LD_ADDR_VAR 0 7
44228: PUSH
44229: LD_INT 16
44231: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
44232: LD_VAR 0 1
44236: PPUSH
44237: LD_VAR 0 2
44241: PPUSH
44242: LD_VAR 0 3
44246: PPUSH
44247: CALL_OW 297
44251: PUSH
44252: LD_VAR 0 5
44256: GREATER
44257: IFFALSE 44336
// begin ComMoveXY ( unit , x , y ) ;
44259: LD_VAR 0 1
44263: PPUSH
44264: LD_VAR 0 2
44268: PPUSH
44269: LD_VAR 0 3
44273: PPUSH
44274: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44278: LD_INT 35
44280: PPUSH
44281: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
44285: LD_VAR 0 1
44289: PPUSH
44290: LD_VAR 0 2
44294: PPUSH
44295: LD_VAR 0 3
44299: PPUSH
44300: CALL 38025 0 3
44304: NOT
44305: IFFALSE 44309
// exit ;
44307: GO 44563
// until GetDistUnitXY ( unit , x , y ) < dist ;
44309: LD_VAR 0 1
44313: PPUSH
44314: LD_VAR 0 2
44318: PPUSH
44319: LD_VAR 0 3
44323: PPUSH
44324: CALL_OW 297
44328: PUSH
44329: LD_VAR 0 5
44333: LESS
44334: IFFALSE 44278
// end ; ComTurnXY ( unit , x , y ) ;
44336: LD_VAR 0 1
44340: PPUSH
44341: LD_VAR 0 2
44345: PPUSH
44346: LD_VAR 0 3
44350: PPUSH
44351: CALL_OW 118
// wait ( 5 ) ;
44355: LD_INT 5
44357: PPUSH
44358: CALL_OW 67
// _d := GetDir ( unit ) ;
44362: LD_ADDR_VAR 0 10
44366: PUSH
44367: LD_VAR 0 1
44371: PPUSH
44372: CALL_OW 254
44376: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
44377: LD_ADDR_VAR 0 8
44381: PUSH
44382: LD_VAR 0 1
44386: PPUSH
44387: CALL_OW 250
44391: PPUSH
44392: LD_VAR 0 10
44396: PPUSH
44397: LD_VAR 0 5
44401: PPUSH
44402: CALL_OW 272
44406: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
44407: LD_ADDR_VAR 0 9
44411: PUSH
44412: LD_VAR 0 1
44416: PPUSH
44417: CALL_OW 251
44421: PPUSH
44422: LD_VAR 0 10
44426: PPUSH
44427: LD_VAR 0 5
44431: PPUSH
44432: CALL_OW 273
44436: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44437: LD_VAR 0 8
44441: PPUSH
44442: LD_VAR 0 9
44446: PPUSH
44447: CALL_OW 488
44451: NOT
44452: IFFALSE 44456
// exit ;
44454: GO 44563
// ComAnimCustom ( unit , 1 ) ;
44456: LD_VAR 0 1
44460: PPUSH
44461: LD_INT 1
44463: PPUSH
44464: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44468: LD_VAR 0 8
44472: PPUSH
44473: LD_VAR 0 9
44477: PPUSH
44478: LD_VAR 0 6
44482: PPUSH
44483: LD_VAR 0 7
44487: PPUSH
44488: CALL_OW 330
// repeat wait ( 1 ) ;
44492: LD_INT 1
44494: PPUSH
44495: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44499: LD_VAR 0 1
44503: PPUSH
44504: CALL_OW 316
44508: PUSH
44509: LD_VAR 0 1
44513: PPUSH
44514: CALL_OW 314
44518: OR
44519: PUSH
44520: LD_VAR 0 1
44524: PPUSH
44525: CALL_OW 302
44529: NOT
44530: OR
44531: PUSH
44532: LD_VAR 0 1
44536: PPUSH
44537: CALL_OW 301
44541: OR
44542: IFFALSE 44492
// RemoveSeeing ( _x , _y , side ) ;
44544: LD_VAR 0 8
44548: PPUSH
44549: LD_VAR 0 9
44553: PPUSH
44554: LD_VAR 0 6
44558: PPUSH
44559: CALL_OW 331
// end ; end_of_file
44563: LD_VAR 0 4
44567: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
44568: LD_VAR 0 2
44572: PUSH
44573: LD_INT 100
44575: EQUAL
44576: IFFALSE 45525
// begin if not StreamModeActive then
44578: LD_EXP 37
44582: NOT
44583: IFFALSE 44593
// StreamModeActive := true ;
44585: LD_ADDR_EXP 37
44589: PUSH
44590: LD_INT 1
44592: ST_TO_ADDR
// if p3 = 0 then
44593: LD_VAR 0 3
44597: PUSH
44598: LD_INT 0
44600: EQUAL
44601: IFFALSE 44607
// InitStreamMode ;
44603: CALL 45683 0 0
// if p3 = 1 then
44607: LD_VAR 0 3
44611: PUSH
44612: LD_INT 1
44614: EQUAL
44615: IFFALSE 44625
// sRocket := true ;
44617: LD_ADDR_EXP 42
44621: PUSH
44622: LD_INT 1
44624: ST_TO_ADDR
// if p3 = 2 then
44625: LD_VAR 0 3
44629: PUSH
44630: LD_INT 2
44632: EQUAL
44633: IFFALSE 44643
// sSpeed := true ;
44635: LD_ADDR_EXP 41
44639: PUSH
44640: LD_INT 1
44642: ST_TO_ADDR
// if p3 = 3 then
44643: LD_VAR 0 3
44647: PUSH
44648: LD_INT 3
44650: EQUAL
44651: IFFALSE 44661
// sEngine := true ;
44653: LD_ADDR_EXP 43
44657: PUSH
44658: LD_INT 1
44660: ST_TO_ADDR
// if p3 = 4 then
44661: LD_VAR 0 3
44665: PUSH
44666: LD_INT 4
44668: EQUAL
44669: IFFALSE 44679
// sSpec := true ;
44671: LD_ADDR_EXP 40
44675: PUSH
44676: LD_INT 1
44678: ST_TO_ADDR
// if p3 = 5 then
44679: LD_VAR 0 3
44683: PUSH
44684: LD_INT 5
44686: EQUAL
44687: IFFALSE 44697
// sLevel := true ;
44689: LD_ADDR_EXP 44
44693: PUSH
44694: LD_INT 1
44696: ST_TO_ADDR
// if p3 = 6 then
44697: LD_VAR 0 3
44701: PUSH
44702: LD_INT 6
44704: EQUAL
44705: IFFALSE 44715
// sArmoury := true ;
44707: LD_ADDR_EXP 45
44711: PUSH
44712: LD_INT 1
44714: ST_TO_ADDR
// if p3 = 7 then
44715: LD_VAR 0 3
44719: PUSH
44720: LD_INT 7
44722: EQUAL
44723: IFFALSE 44733
// sRadar := true ;
44725: LD_ADDR_EXP 46
44729: PUSH
44730: LD_INT 1
44732: ST_TO_ADDR
// if p3 = 8 then
44733: LD_VAR 0 3
44737: PUSH
44738: LD_INT 8
44740: EQUAL
44741: IFFALSE 44751
// sBunker := true ;
44743: LD_ADDR_EXP 47
44747: PUSH
44748: LD_INT 1
44750: ST_TO_ADDR
// if p3 = 9 then
44751: LD_VAR 0 3
44755: PUSH
44756: LD_INT 9
44758: EQUAL
44759: IFFALSE 44769
// sHack := true ;
44761: LD_ADDR_EXP 48
44765: PUSH
44766: LD_INT 1
44768: ST_TO_ADDR
// if p3 = 10 then
44769: LD_VAR 0 3
44773: PUSH
44774: LD_INT 10
44776: EQUAL
44777: IFFALSE 44787
// sFire := true ;
44779: LD_ADDR_EXP 49
44783: PUSH
44784: LD_INT 1
44786: ST_TO_ADDR
// if p3 = 11 then
44787: LD_VAR 0 3
44791: PUSH
44792: LD_INT 11
44794: EQUAL
44795: IFFALSE 44805
// sRefresh := true ;
44797: LD_ADDR_EXP 50
44801: PUSH
44802: LD_INT 1
44804: ST_TO_ADDR
// if p3 = 12 then
44805: LD_VAR 0 3
44809: PUSH
44810: LD_INT 12
44812: EQUAL
44813: IFFALSE 44823
// sExp := true ;
44815: LD_ADDR_EXP 51
44819: PUSH
44820: LD_INT 1
44822: ST_TO_ADDR
// if p3 = 13 then
44823: LD_VAR 0 3
44827: PUSH
44828: LD_INT 13
44830: EQUAL
44831: IFFALSE 44841
// sDepot := true ;
44833: LD_ADDR_EXP 52
44837: PUSH
44838: LD_INT 1
44840: ST_TO_ADDR
// if p3 = 14 then
44841: LD_VAR 0 3
44845: PUSH
44846: LD_INT 14
44848: EQUAL
44849: IFFALSE 44859
// sFlag := true ;
44851: LD_ADDR_EXP 53
44855: PUSH
44856: LD_INT 1
44858: ST_TO_ADDR
// if p3 = 15 then
44859: LD_VAR 0 3
44863: PUSH
44864: LD_INT 15
44866: EQUAL
44867: IFFALSE 44877
// sKamikadze := true ;
44869: LD_ADDR_EXP 61
44873: PUSH
44874: LD_INT 1
44876: ST_TO_ADDR
// if p3 = 16 then
44877: LD_VAR 0 3
44881: PUSH
44882: LD_INT 16
44884: EQUAL
44885: IFFALSE 44895
// sTroll := true ;
44887: LD_ADDR_EXP 62
44891: PUSH
44892: LD_INT 1
44894: ST_TO_ADDR
// if p3 = 17 then
44895: LD_VAR 0 3
44899: PUSH
44900: LD_INT 17
44902: EQUAL
44903: IFFALSE 44913
// sSlow := true ;
44905: LD_ADDR_EXP 63
44909: PUSH
44910: LD_INT 1
44912: ST_TO_ADDR
// if p3 = 18 then
44913: LD_VAR 0 3
44917: PUSH
44918: LD_INT 18
44920: EQUAL
44921: IFFALSE 44931
// sLack := true ;
44923: LD_ADDR_EXP 64
44927: PUSH
44928: LD_INT 1
44930: ST_TO_ADDR
// if p3 = 19 then
44931: LD_VAR 0 3
44935: PUSH
44936: LD_INT 19
44938: EQUAL
44939: IFFALSE 44949
// sTank := true ;
44941: LD_ADDR_EXP 66
44945: PUSH
44946: LD_INT 1
44948: ST_TO_ADDR
// if p3 = 20 then
44949: LD_VAR 0 3
44953: PUSH
44954: LD_INT 20
44956: EQUAL
44957: IFFALSE 44967
// sRemote := true ;
44959: LD_ADDR_EXP 67
44963: PUSH
44964: LD_INT 1
44966: ST_TO_ADDR
// if p3 = 21 then
44967: LD_VAR 0 3
44971: PUSH
44972: LD_INT 21
44974: EQUAL
44975: IFFALSE 44985
// sPowell := true ;
44977: LD_ADDR_EXP 68
44981: PUSH
44982: LD_INT 1
44984: ST_TO_ADDR
// if p3 = 22 then
44985: LD_VAR 0 3
44989: PUSH
44990: LD_INT 22
44992: EQUAL
44993: IFFALSE 45003
// sTeleport := true ;
44995: LD_ADDR_EXP 71
44999: PUSH
45000: LD_INT 1
45002: ST_TO_ADDR
// if p3 = 23 then
45003: LD_VAR 0 3
45007: PUSH
45008: LD_INT 23
45010: EQUAL
45011: IFFALSE 45021
// sOilTower := true ;
45013: LD_ADDR_EXP 73
45017: PUSH
45018: LD_INT 1
45020: ST_TO_ADDR
// if p3 = 24 then
45021: LD_VAR 0 3
45025: PUSH
45026: LD_INT 24
45028: EQUAL
45029: IFFALSE 45039
// sShovel := true ;
45031: LD_ADDR_EXP 74
45035: PUSH
45036: LD_INT 1
45038: ST_TO_ADDR
// if p3 = 25 then
45039: LD_VAR 0 3
45043: PUSH
45044: LD_INT 25
45046: EQUAL
45047: IFFALSE 45057
// sSheik := true ;
45049: LD_ADDR_EXP 75
45053: PUSH
45054: LD_INT 1
45056: ST_TO_ADDR
// if p3 = 26 then
45057: LD_VAR 0 3
45061: PUSH
45062: LD_INT 26
45064: EQUAL
45065: IFFALSE 45075
// sEarthquake := true ;
45067: LD_ADDR_EXP 77
45071: PUSH
45072: LD_INT 1
45074: ST_TO_ADDR
// if p3 = 27 then
45075: LD_VAR 0 3
45079: PUSH
45080: LD_INT 27
45082: EQUAL
45083: IFFALSE 45093
// sAI := true ;
45085: LD_ADDR_EXP 78
45089: PUSH
45090: LD_INT 1
45092: ST_TO_ADDR
// if p3 = 28 then
45093: LD_VAR 0 3
45097: PUSH
45098: LD_INT 28
45100: EQUAL
45101: IFFALSE 45111
// sCargo := true ;
45103: LD_ADDR_EXP 81
45107: PUSH
45108: LD_INT 1
45110: ST_TO_ADDR
// if p3 = 29 then
45111: LD_VAR 0 3
45115: PUSH
45116: LD_INT 29
45118: EQUAL
45119: IFFALSE 45129
// sDLaser := true ;
45121: LD_ADDR_EXP 82
45125: PUSH
45126: LD_INT 1
45128: ST_TO_ADDR
// if p3 = 30 then
45129: LD_VAR 0 3
45133: PUSH
45134: LD_INT 30
45136: EQUAL
45137: IFFALSE 45147
// sExchange := true ;
45139: LD_ADDR_EXP 83
45143: PUSH
45144: LD_INT 1
45146: ST_TO_ADDR
// if p3 = 31 then
45147: LD_VAR 0 3
45151: PUSH
45152: LD_INT 31
45154: EQUAL
45155: IFFALSE 45165
// sFac := true ;
45157: LD_ADDR_EXP 84
45161: PUSH
45162: LD_INT 1
45164: ST_TO_ADDR
// if p3 = 32 then
45165: LD_VAR 0 3
45169: PUSH
45170: LD_INT 32
45172: EQUAL
45173: IFFALSE 45183
// sPower := true ;
45175: LD_ADDR_EXP 85
45179: PUSH
45180: LD_INT 1
45182: ST_TO_ADDR
// if p3 = 33 then
45183: LD_VAR 0 3
45187: PUSH
45188: LD_INT 33
45190: EQUAL
45191: IFFALSE 45201
// sRandom := true ;
45193: LD_ADDR_EXP 86
45197: PUSH
45198: LD_INT 1
45200: ST_TO_ADDR
// if p3 = 34 then
45201: LD_VAR 0 3
45205: PUSH
45206: LD_INT 34
45208: EQUAL
45209: IFFALSE 45219
// sShield := true ;
45211: LD_ADDR_EXP 87
45215: PUSH
45216: LD_INT 1
45218: ST_TO_ADDR
// if p3 = 35 then
45219: LD_VAR 0 3
45223: PUSH
45224: LD_INT 35
45226: EQUAL
45227: IFFALSE 45237
// sTime := true ;
45229: LD_ADDR_EXP 88
45233: PUSH
45234: LD_INT 1
45236: ST_TO_ADDR
// if p3 = 36 then
45237: LD_VAR 0 3
45241: PUSH
45242: LD_INT 36
45244: EQUAL
45245: IFFALSE 45255
// sTools := true ;
45247: LD_ADDR_EXP 89
45251: PUSH
45252: LD_INT 1
45254: ST_TO_ADDR
// if p3 = 101 then
45255: LD_VAR 0 3
45259: PUSH
45260: LD_INT 101
45262: EQUAL
45263: IFFALSE 45273
// sSold := true ;
45265: LD_ADDR_EXP 54
45269: PUSH
45270: LD_INT 1
45272: ST_TO_ADDR
// if p3 = 102 then
45273: LD_VAR 0 3
45277: PUSH
45278: LD_INT 102
45280: EQUAL
45281: IFFALSE 45291
// sDiff := true ;
45283: LD_ADDR_EXP 55
45287: PUSH
45288: LD_INT 1
45290: ST_TO_ADDR
// if p3 = 103 then
45291: LD_VAR 0 3
45295: PUSH
45296: LD_INT 103
45298: EQUAL
45299: IFFALSE 45309
// sFog := true ;
45301: LD_ADDR_EXP 58
45305: PUSH
45306: LD_INT 1
45308: ST_TO_ADDR
// if p3 = 104 then
45309: LD_VAR 0 3
45313: PUSH
45314: LD_INT 104
45316: EQUAL
45317: IFFALSE 45327
// sReset := true ;
45319: LD_ADDR_EXP 59
45323: PUSH
45324: LD_INT 1
45326: ST_TO_ADDR
// if p3 = 105 then
45327: LD_VAR 0 3
45331: PUSH
45332: LD_INT 105
45334: EQUAL
45335: IFFALSE 45345
// sSun := true ;
45337: LD_ADDR_EXP 60
45341: PUSH
45342: LD_INT 1
45344: ST_TO_ADDR
// if p3 = 106 then
45345: LD_VAR 0 3
45349: PUSH
45350: LD_INT 106
45352: EQUAL
45353: IFFALSE 45363
// sTiger := true ;
45355: LD_ADDR_EXP 56
45359: PUSH
45360: LD_INT 1
45362: ST_TO_ADDR
// if p3 = 107 then
45363: LD_VAR 0 3
45367: PUSH
45368: LD_INT 107
45370: EQUAL
45371: IFFALSE 45381
// sBomb := true ;
45373: LD_ADDR_EXP 57
45377: PUSH
45378: LD_INT 1
45380: ST_TO_ADDR
// if p3 = 108 then
45381: LD_VAR 0 3
45385: PUSH
45386: LD_INT 108
45388: EQUAL
45389: IFFALSE 45399
// sWound := true ;
45391: LD_ADDR_EXP 65
45395: PUSH
45396: LD_INT 1
45398: ST_TO_ADDR
// if p3 = 109 then
45399: LD_VAR 0 3
45403: PUSH
45404: LD_INT 109
45406: EQUAL
45407: IFFALSE 45417
// sBetray := true ;
45409: LD_ADDR_EXP 69
45413: PUSH
45414: LD_INT 1
45416: ST_TO_ADDR
// if p3 = 110 then
45417: LD_VAR 0 3
45421: PUSH
45422: LD_INT 110
45424: EQUAL
45425: IFFALSE 45435
// sContamin := true ;
45427: LD_ADDR_EXP 70
45431: PUSH
45432: LD_INT 1
45434: ST_TO_ADDR
// if p3 = 111 then
45435: LD_VAR 0 3
45439: PUSH
45440: LD_INT 111
45442: EQUAL
45443: IFFALSE 45453
// sOil := true ;
45445: LD_ADDR_EXP 72
45449: PUSH
45450: LD_INT 1
45452: ST_TO_ADDR
// if p3 = 112 then
45453: LD_VAR 0 3
45457: PUSH
45458: LD_INT 112
45460: EQUAL
45461: IFFALSE 45471
// sStu := true ;
45463: LD_ADDR_EXP 76
45467: PUSH
45468: LD_INT 1
45470: ST_TO_ADDR
// if p3 = 113 then
45471: LD_VAR 0 3
45475: PUSH
45476: LD_INT 113
45478: EQUAL
45479: IFFALSE 45489
// sBazooka := true ;
45481: LD_ADDR_EXP 79
45485: PUSH
45486: LD_INT 1
45488: ST_TO_ADDR
// if p3 = 114 then
45489: LD_VAR 0 3
45493: PUSH
45494: LD_INT 114
45496: EQUAL
45497: IFFALSE 45507
// sMortar := true ;
45499: LD_ADDR_EXP 80
45503: PUSH
45504: LD_INT 1
45506: ST_TO_ADDR
// if p3 = 115 then
45507: LD_VAR 0 3
45511: PUSH
45512: LD_INT 115
45514: EQUAL
45515: IFFALSE 45525
// sRanger := true ;
45517: LD_ADDR_EXP 90
45521: PUSH
45522: LD_INT 1
45524: ST_TO_ADDR
// end ; if p2 = 101 then
45525: LD_VAR 0 2
45529: PUSH
45530: LD_INT 101
45532: EQUAL
45533: IFFALSE 45661
// begin case p3 of 1 :
45535: LD_VAR 0 3
45539: PUSH
45540: LD_INT 1
45542: DOUBLE
45543: EQUAL
45544: IFTRUE 45548
45546: GO 45555
45548: POP
// hHackUnlimitedResources ; 2 :
45549: CALL 56696 0 0
45553: GO 45661
45555: LD_INT 2
45557: DOUBLE
45558: EQUAL
45559: IFTRUE 45563
45561: GO 45570
45563: POP
// hHackSetLevel10 ; 3 :
45564: CALL 56829 0 0
45568: GO 45661
45570: LD_INT 3
45572: DOUBLE
45573: EQUAL
45574: IFTRUE 45578
45576: GO 45585
45578: POP
// hHackSetLevel10YourUnits ; 4 :
45579: CALL 56914 0 0
45583: GO 45661
45585: LD_INT 4
45587: DOUBLE
45588: EQUAL
45589: IFTRUE 45593
45591: GO 45600
45593: POP
// hHackInvincible ; 5 :
45594: CALL 57362 0 0
45598: GO 45661
45600: LD_INT 5
45602: DOUBLE
45603: EQUAL
45604: IFTRUE 45608
45606: GO 45615
45608: POP
// hHackInvisible ; 6 :
45609: CALL 57473 0 0
45613: GO 45661
45615: LD_INT 6
45617: DOUBLE
45618: EQUAL
45619: IFTRUE 45623
45621: GO 45630
45623: POP
// hHackChangeYourSide ; 7 :
45624: CALL 57530 0 0
45628: GO 45661
45630: LD_INT 7
45632: DOUBLE
45633: EQUAL
45634: IFTRUE 45638
45636: GO 45645
45638: POP
// hHackChangeUnitSide ; 8 :
45639: CALL 57572 0 0
45643: GO 45661
45645: LD_INT 8
45647: DOUBLE
45648: EQUAL
45649: IFTRUE 45653
45651: GO 45660
45653: POP
// hHackFog ; end ;
45654: CALL 57673 0 0
45658: GO 45661
45660: POP
// end ; end ;
45661: PPOPN 6
45663: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
45664: GO 45666
45666: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
45667: LD_STRING initStreamRollete();
45669: PPUSH
45670: CALL_OW 559
// InitStreamMode ;
45674: CALL 45683 0 0
// DefineStreamItems ( ) ;
45678: CALL 46123 0 0
// end ;
45682: END
// function InitStreamMode ; begin
45683: LD_INT 0
45685: PPUSH
// streamModeActive := false ;
45686: LD_ADDR_EXP 37
45690: PUSH
45691: LD_INT 0
45693: ST_TO_ADDR
// normalCounter := 36 ;
45694: LD_ADDR_EXP 38
45698: PUSH
45699: LD_INT 36
45701: ST_TO_ADDR
// hardcoreCounter := 16 ;
45702: LD_ADDR_EXP 39
45706: PUSH
45707: LD_INT 16
45709: ST_TO_ADDR
// sRocket := false ;
45710: LD_ADDR_EXP 42
45714: PUSH
45715: LD_INT 0
45717: ST_TO_ADDR
// sSpeed := false ;
45718: LD_ADDR_EXP 41
45722: PUSH
45723: LD_INT 0
45725: ST_TO_ADDR
// sEngine := false ;
45726: LD_ADDR_EXP 43
45730: PUSH
45731: LD_INT 0
45733: ST_TO_ADDR
// sSpec := false ;
45734: LD_ADDR_EXP 40
45738: PUSH
45739: LD_INT 0
45741: ST_TO_ADDR
// sLevel := false ;
45742: LD_ADDR_EXP 44
45746: PUSH
45747: LD_INT 0
45749: ST_TO_ADDR
// sArmoury := false ;
45750: LD_ADDR_EXP 45
45754: PUSH
45755: LD_INT 0
45757: ST_TO_ADDR
// sRadar := false ;
45758: LD_ADDR_EXP 46
45762: PUSH
45763: LD_INT 0
45765: ST_TO_ADDR
// sBunker := false ;
45766: LD_ADDR_EXP 47
45770: PUSH
45771: LD_INT 0
45773: ST_TO_ADDR
// sHack := false ;
45774: LD_ADDR_EXP 48
45778: PUSH
45779: LD_INT 0
45781: ST_TO_ADDR
// sFire := false ;
45782: LD_ADDR_EXP 49
45786: PUSH
45787: LD_INT 0
45789: ST_TO_ADDR
// sRefresh := false ;
45790: LD_ADDR_EXP 50
45794: PUSH
45795: LD_INT 0
45797: ST_TO_ADDR
// sExp := false ;
45798: LD_ADDR_EXP 51
45802: PUSH
45803: LD_INT 0
45805: ST_TO_ADDR
// sDepot := false ;
45806: LD_ADDR_EXP 52
45810: PUSH
45811: LD_INT 0
45813: ST_TO_ADDR
// sFlag := false ;
45814: LD_ADDR_EXP 53
45818: PUSH
45819: LD_INT 0
45821: ST_TO_ADDR
// sKamikadze := false ;
45822: LD_ADDR_EXP 61
45826: PUSH
45827: LD_INT 0
45829: ST_TO_ADDR
// sTroll := false ;
45830: LD_ADDR_EXP 62
45834: PUSH
45835: LD_INT 0
45837: ST_TO_ADDR
// sSlow := false ;
45838: LD_ADDR_EXP 63
45842: PUSH
45843: LD_INT 0
45845: ST_TO_ADDR
// sLack := false ;
45846: LD_ADDR_EXP 64
45850: PUSH
45851: LD_INT 0
45853: ST_TO_ADDR
// sTank := false ;
45854: LD_ADDR_EXP 66
45858: PUSH
45859: LD_INT 0
45861: ST_TO_ADDR
// sRemote := false ;
45862: LD_ADDR_EXP 67
45866: PUSH
45867: LD_INT 0
45869: ST_TO_ADDR
// sPowell := false ;
45870: LD_ADDR_EXP 68
45874: PUSH
45875: LD_INT 0
45877: ST_TO_ADDR
// sTeleport := false ;
45878: LD_ADDR_EXP 71
45882: PUSH
45883: LD_INT 0
45885: ST_TO_ADDR
// sOilTower := false ;
45886: LD_ADDR_EXP 73
45890: PUSH
45891: LD_INT 0
45893: ST_TO_ADDR
// sShovel := false ;
45894: LD_ADDR_EXP 74
45898: PUSH
45899: LD_INT 0
45901: ST_TO_ADDR
// sSheik := false ;
45902: LD_ADDR_EXP 75
45906: PUSH
45907: LD_INT 0
45909: ST_TO_ADDR
// sEarthquake := false ;
45910: LD_ADDR_EXP 77
45914: PUSH
45915: LD_INT 0
45917: ST_TO_ADDR
// sAI := false ;
45918: LD_ADDR_EXP 78
45922: PUSH
45923: LD_INT 0
45925: ST_TO_ADDR
// sCargo := false ;
45926: LD_ADDR_EXP 81
45930: PUSH
45931: LD_INT 0
45933: ST_TO_ADDR
// sDLaser := false ;
45934: LD_ADDR_EXP 82
45938: PUSH
45939: LD_INT 0
45941: ST_TO_ADDR
// sExchange := false ;
45942: LD_ADDR_EXP 83
45946: PUSH
45947: LD_INT 0
45949: ST_TO_ADDR
// sFac := false ;
45950: LD_ADDR_EXP 84
45954: PUSH
45955: LD_INT 0
45957: ST_TO_ADDR
// sPower := false ;
45958: LD_ADDR_EXP 85
45962: PUSH
45963: LD_INT 0
45965: ST_TO_ADDR
// sRandom := false ;
45966: LD_ADDR_EXP 86
45970: PUSH
45971: LD_INT 0
45973: ST_TO_ADDR
// sShield := false ;
45974: LD_ADDR_EXP 87
45978: PUSH
45979: LD_INT 0
45981: ST_TO_ADDR
// sTime := false ;
45982: LD_ADDR_EXP 88
45986: PUSH
45987: LD_INT 0
45989: ST_TO_ADDR
// sTools := false ;
45990: LD_ADDR_EXP 89
45994: PUSH
45995: LD_INT 0
45997: ST_TO_ADDR
// sSold := false ;
45998: LD_ADDR_EXP 54
46002: PUSH
46003: LD_INT 0
46005: ST_TO_ADDR
// sDiff := false ;
46006: LD_ADDR_EXP 55
46010: PUSH
46011: LD_INT 0
46013: ST_TO_ADDR
// sFog := false ;
46014: LD_ADDR_EXP 58
46018: PUSH
46019: LD_INT 0
46021: ST_TO_ADDR
// sReset := false ;
46022: LD_ADDR_EXP 59
46026: PUSH
46027: LD_INT 0
46029: ST_TO_ADDR
// sSun := false ;
46030: LD_ADDR_EXP 60
46034: PUSH
46035: LD_INT 0
46037: ST_TO_ADDR
// sTiger := false ;
46038: LD_ADDR_EXP 56
46042: PUSH
46043: LD_INT 0
46045: ST_TO_ADDR
// sBomb := false ;
46046: LD_ADDR_EXP 57
46050: PUSH
46051: LD_INT 0
46053: ST_TO_ADDR
// sWound := false ;
46054: LD_ADDR_EXP 65
46058: PUSH
46059: LD_INT 0
46061: ST_TO_ADDR
// sBetray := false ;
46062: LD_ADDR_EXP 69
46066: PUSH
46067: LD_INT 0
46069: ST_TO_ADDR
// sContamin := false ;
46070: LD_ADDR_EXP 70
46074: PUSH
46075: LD_INT 0
46077: ST_TO_ADDR
// sOil := false ;
46078: LD_ADDR_EXP 72
46082: PUSH
46083: LD_INT 0
46085: ST_TO_ADDR
// sStu := false ;
46086: LD_ADDR_EXP 76
46090: PUSH
46091: LD_INT 0
46093: ST_TO_ADDR
// sBazooka := false ;
46094: LD_ADDR_EXP 79
46098: PUSH
46099: LD_INT 0
46101: ST_TO_ADDR
// sMortar := false ;
46102: LD_ADDR_EXP 80
46106: PUSH
46107: LD_INT 0
46109: ST_TO_ADDR
// sRanger := false ;
46110: LD_ADDR_EXP 90
46114: PUSH
46115: LD_INT 0
46117: ST_TO_ADDR
// end ;
46118: LD_VAR 0 1
46122: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
46123: LD_INT 0
46125: PPUSH
46126: PPUSH
46127: PPUSH
46128: PPUSH
46129: PPUSH
// result := [ ] ;
46130: LD_ADDR_VAR 0 1
46134: PUSH
46135: EMPTY
46136: ST_TO_ADDR
// if campaign_id = 1 then
46137: LD_OWVAR 69
46141: PUSH
46142: LD_INT 1
46144: EQUAL
46145: IFFALSE 49083
// begin case mission_number of 1 :
46147: LD_OWVAR 70
46151: PUSH
46152: LD_INT 1
46154: DOUBLE
46155: EQUAL
46156: IFTRUE 46160
46158: GO 46224
46160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
46161: LD_ADDR_VAR 0 1
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: LD_INT 4
46171: PUSH
46172: LD_INT 11
46174: PUSH
46175: LD_INT 12
46177: PUSH
46178: LD_INT 15
46180: PUSH
46181: LD_INT 16
46183: PUSH
46184: LD_INT 22
46186: PUSH
46187: LD_INT 23
46189: PUSH
46190: LD_INT 26
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 101
46206: PUSH
46207: LD_INT 102
46209: PUSH
46210: LD_INT 106
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: ST_TO_ADDR
46222: GO 49081
46224: LD_INT 2
46226: DOUBLE
46227: EQUAL
46228: IFTRUE 46232
46230: GO 46304
46232: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
46233: LD_ADDR_VAR 0 1
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: LD_INT 4
46243: PUSH
46244: LD_INT 11
46246: PUSH
46247: LD_INT 12
46249: PUSH
46250: LD_INT 15
46252: PUSH
46253: LD_INT 16
46255: PUSH
46256: LD_INT 22
46258: PUSH
46259: LD_INT 23
46261: PUSH
46262: LD_INT 26
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 101
46278: PUSH
46279: LD_INT 102
46281: PUSH
46282: LD_INT 105
46284: PUSH
46285: LD_INT 106
46287: PUSH
46288: LD_INT 108
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: ST_TO_ADDR
46302: GO 49081
46304: LD_INT 3
46306: DOUBLE
46307: EQUAL
46308: IFTRUE 46312
46310: GO 46388
46312: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
46313: LD_ADDR_VAR 0 1
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: LD_INT 4
46323: PUSH
46324: LD_INT 5
46326: PUSH
46327: LD_INT 11
46329: PUSH
46330: LD_INT 12
46332: PUSH
46333: LD_INT 15
46335: PUSH
46336: LD_INT 16
46338: PUSH
46339: LD_INT 22
46341: PUSH
46342: LD_INT 26
46344: PUSH
46345: LD_INT 36
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 101
46362: PUSH
46363: LD_INT 102
46365: PUSH
46366: LD_INT 105
46368: PUSH
46369: LD_INT 106
46371: PUSH
46372: LD_INT 108
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: ST_TO_ADDR
46386: GO 49081
46388: LD_INT 4
46390: DOUBLE
46391: EQUAL
46392: IFTRUE 46396
46394: GO 46480
46396: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
46397: LD_ADDR_VAR 0 1
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: LD_INT 4
46407: PUSH
46408: LD_INT 5
46410: PUSH
46411: LD_INT 8
46413: PUSH
46414: LD_INT 11
46416: PUSH
46417: LD_INT 12
46419: PUSH
46420: LD_INT 15
46422: PUSH
46423: LD_INT 16
46425: PUSH
46426: LD_INT 22
46428: PUSH
46429: LD_INT 23
46431: PUSH
46432: LD_INT 26
46434: PUSH
46435: LD_INT 36
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 101
46454: PUSH
46455: LD_INT 102
46457: PUSH
46458: LD_INT 105
46460: PUSH
46461: LD_INT 106
46463: PUSH
46464: LD_INT 108
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: ST_TO_ADDR
46478: GO 49081
46480: LD_INT 5
46482: DOUBLE
46483: EQUAL
46484: IFTRUE 46488
46486: GO 46588
46488: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
46489: LD_ADDR_VAR 0 1
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 4
46499: PUSH
46500: LD_INT 5
46502: PUSH
46503: LD_INT 6
46505: PUSH
46506: LD_INT 8
46508: PUSH
46509: LD_INT 11
46511: PUSH
46512: LD_INT 12
46514: PUSH
46515: LD_INT 15
46517: PUSH
46518: LD_INT 16
46520: PUSH
46521: LD_INT 22
46523: PUSH
46524: LD_INT 23
46526: PUSH
46527: LD_INT 25
46529: PUSH
46530: LD_INT 26
46532: PUSH
46533: LD_INT 36
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 101
46554: PUSH
46555: LD_INT 102
46557: PUSH
46558: LD_INT 105
46560: PUSH
46561: LD_INT 106
46563: PUSH
46564: LD_INT 108
46566: PUSH
46567: LD_INT 109
46569: PUSH
46570: LD_INT 112
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: ST_TO_ADDR
46586: GO 49081
46588: LD_INT 6
46590: DOUBLE
46591: EQUAL
46592: IFTRUE 46596
46594: GO 46716
46596: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
46597: LD_ADDR_VAR 0 1
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 4
46607: PUSH
46608: LD_INT 5
46610: PUSH
46611: LD_INT 6
46613: PUSH
46614: LD_INT 8
46616: PUSH
46617: LD_INT 11
46619: PUSH
46620: LD_INT 12
46622: PUSH
46623: LD_INT 15
46625: PUSH
46626: LD_INT 16
46628: PUSH
46629: LD_INT 20
46631: PUSH
46632: LD_INT 21
46634: PUSH
46635: LD_INT 22
46637: PUSH
46638: LD_INT 23
46640: PUSH
46641: LD_INT 25
46643: PUSH
46644: LD_INT 26
46646: PUSH
46647: LD_INT 30
46649: PUSH
46650: LD_INT 31
46652: PUSH
46653: LD_INT 32
46655: PUSH
46656: LD_INT 36
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 101
46682: PUSH
46683: LD_INT 102
46685: PUSH
46686: LD_INT 105
46688: PUSH
46689: LD_INT 106
46691: PUSH
46692: LD_INT 108
46694: PUSH
46695: LD_INT 109
46697: PUSH
46698: LD_INT 112
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: ST_TO_ADDR
46714: GO 49081
46716: LD_INT 7
46718: DOUBLE
46719: EQUAL
46720: IFTRUE 46724
46722: GO 46824
46724: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
46725: LD_ADDR_VAR 0 1
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: LD_INT 4
46735: PUSH
46736: LD_INT 5
46738: PUSH
46739: LD_INT 7
46741: PUSH
46742: LD_INT 11
46744: PUSH
46745: LD_INT 12
46747: PUSH
46748: LD_INT 15
46750: PUSH
46751: LD_INT 16
46753: PUSH
46754: LD_INT 20
46756: PUSH
46757: LD_INT 21
46759: PUSH
46760: LD_INT 22
46762: PUSH
46763: LD_INT 23
46765: PUSH
46766: LD_INT 25
46768: PUSH
46769: LD_INT 26
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 101
46790: PUSH
46791: LD_INT 102
46793: PUSH
46794: LD_INT 103
46796: PUSH
46797: LD_INT 105
46799: PUSH
46800: LD_INT 106
46802: PUSH
46803: LD_INT 108
46805: PUSH
46806: LD_INT 112
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: ST_TO_ADDR
46822: GO 49081
46824: LD_INT 8
46826: DOUBLE
46827: EQUAL
46828: IFTRUE 46832
46830: GO 46960
46832: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
46833: LD_ADDR_VAR 0 1
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: LD_INT 4
46843: PUSH
46844: LD_INT 5
46846: PUSH
46847: LD_INT 6
46849: PUSH
46850: LD_INT 7
46852: PUSH
46853: LD_INT 8
46855: PUSH
46856: LD_INT 11
46858: PUSH
46859: LD_INT 12
46861: PUSH
46862: LD_INT 15
46864: PUSH
46865: LD_INT 16
46867: PUSH
46868: LD_INT 20
46870: PUSH
46871: LD_INT 21
46873: PUSH
46874: LD_INT 22
46876: PUSH
46877: LD_INT 23
46879: PUSH
46880: LD_INT 25
46882: PUSH
46883: LD_INT 26
46885: PUSH
46886: LD_INT 30
46888: PUSH
46889: LD_INT 31
46891: PUSH
46892: LD_INT 32
46894: PUSH
46895: LD_INT 36
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 101
46922: PUSH
46923: LD_INT 102
46925: PUSH
46926: LD_INT 103
46928: PUSH
46929: LD_INT 105
46931: PUSH
46932: LD_INT 106
46934: PUSH
46935: LD_INT 108
46937: PUSH
46938: LD_INT 109
46940: PUSH
46941: LD_INT 112
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: ST_TO_ADDR
46958: GO 49081
46960: LD_INT 9
46962: DOUBLE
46963: EQUAL
46964: IFTRUE 46968
46966: GO 47104
46968: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
46969: LD_ADDR_VAR 0 1
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: LD_INT 4
46979: PUSH
46980: LD_INT 5
46982: PUSH
46983: LD_INT 6
46985: PUSH
46986: LD_INT 7
46988: PUSH
46989: LD_INT 8
46991: PUSH
46992: LD_INT 11
46994: PUSH
46995: LD_INT 12
46997: PUSH
46998: LD_INT 15
47000: PUSH
47001: LD_INT 16
47003: PUSH
47004: LD_INT 20
47006: PUSH
47007: LD_INT 21
47009: PUSH
47010: LD_INT 22
47012: PUSH
47013: LD_INT 23
47015: PUSH
47016: LD_INT 25
47018: PUSH
47019: LD_INT 26
47021: PUSH
47022: LD_INT 28
47024: PUSH
47025: LD_INT 30
47027: PUSH
47028: LD_INT 31
47030: PUSH
47031: LD_INT 32
47033: PUSH
47034: LD_INT 36
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 101
47062: PUSH
47063: LD_INT 102
47065: PUSH
47066: LD_INT 103
47068: PUSH
47069: LD_INT 105
47071: PUSH
47072: LD_INT 106
47074: PUSH
47075: LD_INT 108
47077: PUSH
47078: LD_INT 109
47080: PUSH
47081: LD_INT 112
47083: PUSH
47084: LD_INT 114
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: ST_TO_ADDR
47102: GO 49081
47104: LD_INT 10
47106: DOUBLE
47107: EQUAL
47108: IFTRUE 47112
47110: GO 47296
47112: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
47113: LD_ADDR_VAR 0 1
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: LD_INT 4
47123: PUSH
47124: LD_INT 5
47126: PUSH
47127: LD_INT 6
47129: PUSH
47130: LD_INT 7
47132: PUSH
47133: LD_INT 8
47135: PUSH
47136: LD_INT 9
47138: PUSH
47139: LD_INT 10
47141: PUSH
47142: LD_INT 11
47144: PUSH
47145: LD_INT 12
47147: PUSH
47148: LD_INT 13
47150: PUSH
47151: LD_INT 14
47153: PUSH
47154: LD_INT 15
47156: PUSH
47157: LD_INT 16
47159: PUSH
47160: LD_INT 17
47162: PUSH
47163: LD_INT 18
47165: PUSH
47166: LD_INT 19
47168: PUSH
47169: LD_INT 20
47171: PUSH
47172: LD_INT 21
47174: PUSH
47175: LD_INT 22
47177: PUSH
47178: LD_INT 23
47180: PUSH
47181: LD_INT 24
47183: PUSH
47184: LD_INT 25
47186: PUSH
47187: LD_INT 26
47189: PUSH
47190: LD_INT 28
47192: PUSH
47193: LD_INT 30
47195: PUSH
47196: LD_INT 31
47198: PUSH
47199: LD_INT 32
47201: PUSH
47202: LD_INT 36
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 101
47238: PUSH
47239: LD_INT 102
47241: PUSH
47242: LD_INT 103
47244: PUSH
47245: LD_INT 104
47247: PUSH
47248: LD_INT 105
47250: PUSH
47251: LD_INT 106
47253: PUSH
47254: LD_INT 107
47256: PUSH
47257: LD_INT 108
47259: PUSH
47260: LD_INT 109
47262: PUSH
47263: LD_INT 110
47265: PUSH
47266: LD_INT 111
47268: PUSH
47269: LD_INT 112
47271: PUSH
47272: LD_INT 114
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: ST_TO_ADDR
47294: GO 49081
47296: LD_INT 11
47298: DOUBLE
47299: EQUAL
47300: IFTRUE 47304
47302: GO 47496
47304: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
47305: LD_ADDR_VAR 0 1
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: LD_INT 4
47318: PUSH
47319: LD_INT 5
47321: PUSH
47322: LD_INT 6
47324: PUSH
47325: LD_INT 7
47327: PUSH
47328: LD_INT 8
47330: PUSH
47331: LD_INT 9
47333: PUSH
47334: LD_INT 10
47336: PUSH
47337: LD_INT 11
47339: PUSH
47340: LD_INT 12
47342: PUSH
47343: LD_INT 13
47345: PUSH
47346: LD_INT 14
47348: PUSH
47349: LD_INT 15
47351: PUSH
47352: LD_INT 16
47354: PUSH
47355: LD_INT 17
47357: PUSH
47358: LD_INT 18
47360: PUSH
47361: LD_INT 19
47363: PUSH
47364: LD_INT 20
47366: PUSH
47367: LD_INT 21
47369: PUSH
47370: LD_INT 22
47372: PUSH
47373: LD_INT 23
47375: PUSH
47376: LD_INT 24
47378: PUSH
47379: LD_INT 25
47381: PUSH
47382: LD_INT 26
47384: PUSH
47385: LD_INT 28
47387: PUSH
47388: LD_INT 30
47390: PUSH
47391: LD_INT 31
47393: PUSH
47394: LD_INT 32
47396: PUSH
47397: LD_INT 34
47399: PUSH
47400: LD_INT 36
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 101
47438: PUSH
47439: LD_INT 102
47441: PUSH
47442: LD_INT 103
47444: PUSH
47445: LD_INT 104
47447: PUSH
47448: LD_INT 105
47450: PUSH
47451: LD_INT 106
47453: PUSH
47454: LD_INT 107
47456: PUSH
47457: LD_INT 108
47459: PUSH
47460: LD_INT 109
47462: PUSH
47463: LD_INT 110
47465: PUSH
47466: LD_INT 111
47468: PUSH
47469: LD_INT 112
47471: PUSH
47472: LD_INT 114
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: ST_TO_ADDR
47494: GO 49081
47496: LD_INT 12
47498: DOUBLE
47499: EQUAL
47500: IFTRUE 47504
47502: GO 47712
47504: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
47505: LD_ADDR_VAR 0 1
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: LD_INT 3
47518: PUSH
47519: LD_INT 4
47521: PUSH
47522: LD_INT 5
47524: PUSH
47525: LD_INT 6
47527: PUSH
47528: LD_INT 7
47530: PUSH
47531: LD_INT 8
47533: PUSH
47534: LD_INT 9
47536: PUSH
47537: LD_INT 10
47539: PUSH
47540: LD_INT 11
47542: PUSH
47543: LD_INT 12
47545: PUSH
47546: LD_INT 13
47548: PUSH
47549: LD_INT 14
47551: PUSH
47552: LD_INT 15
47554: PUSH
47555: LD_INT 16
47557: PUSH
47558: LD_INT 17
47560: PUSH
47561: LD_INT 18
47563: PUSH
47564: LD_INT 19
47566: PUSH
47567: LD_INT 20
47569: PUSH
47570: LD_INT 21
47572: PUSH
47573: LD_INT 22
47575: PUSH
47576: LD_INT 23
47578: PUSH
47579: LD_INT 24
47581: PUSH
47582: LD_INT 25
47584: PUSH
47585: LD_INT 26
47587: PUSH
47588: LD_INT 27
47590: PUSH
47591: LD_INT 28
47593: PUSH
47594: LD_INT 30
47596: PUSH
47597: LD_INT 31
47599: PUSH
47600: LD_INT 32
47602: PUSH
47603: LD_INT 33
47605: PUSH
47606: LD_INT 34
47608: PUSH
47609: LD_INT 36
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 101
47650: PUSH
47651: LD_INT 102
47653: PUSH
47654: LD_INT 103
47656: PUSH
47657: LD_INT 104
47659: PUSH
47660: LD_INT 105
47662: PUSH
47663: LD_INT 106
47665: PUSH
47666: LD_INT 107
47668: PUSH
47669: LD_INT 108
47671: PUSH
47672: LD_INT 109
47674: PUSH
47675: LD_INT 110
47677: PUSH
47678: LD_INT 111
47680: PUSH
47681: LD_INT 112
47683: PUSH
47684: LD_INT 113
47686: PUSH
47687: LD_INT 114
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: ST_TO_ADDR
47710: GO 49081
47712: LD_INT 13
47714: DOUBLE
47715: EQUAL
47716: IFTRUE 47720
47718: GO 47916
47720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
47721: LD_ADDR_VAR 0 1
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 3
47734: PUSH
47735: LD_INT 4
47737: PUSH
47738: LD_INT 5
47740: PUSH
47741: LD_INT 8
47743: PUSH
47744: LD_INT 9
47746: PUSH
47747: LD_INT 10
47749: PUSH
47750: LD_INT 11
47752: PUSH
47753: LD_INT 12
47755: PUSH
47756: LD_INT 14
47758: PUSH
47759: LD_INT 15
47761: PUSH
47762: LD_INT 16
47764: PUSH
47765: LD_INT 17
47767: PUSH
47768: LD_INT 18
47770: PUSH
47771: LD_INT 19
47773: PUSH
47774: LD_INT 20
47776: PUSH
47777: LD_INT 21
47779: PUSH
47780: LD_INT 22
47782: PUSH
47783: LD_INT 23
47785: PUSH
47786: LD_INT 24
47788: PUSH
47789: LD_INT 25
47791: PUSH
47792: LD_INT 26
47794: PUSH
47795: LD_INT 27
47797: PUSH
47798: LD_INT 28
47800: PUSH
47801: LD_INT 30
47803: PUSH
47804: LD_INT 31
47806: PUSH
47807: LD_INT 32
47809: PUSH
47810: LD_INT 33
47812: PUSH
47813: LD_INT 34
47815: PUSH
47816: LD_INT 36
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 101
47854: PUSH
47855: LD_INT 102
47857: PUSH
47858: LD_INT 103
47860: PUSH
47861: LD_INT 104
47863: PUSH
47864: LD_INT 105
47866: PUSH
47867: LD_INT 106
47869: PUSH
47870: LD_INT 107
47872: PUSH
47873: LD_INT 108
47875: PUSH
47876: LD_INT 109
47878: PUSH
47879: LD_INT 110
47881: PUSH
47882: LD_INT 111
47884: PUSH
47885: LD_INT 112
47887: PUSH
47888: LD_INT 113
47890: PUSH
47891: LD_INT 114
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: ST_TO_ADDR
47914: GO 49081
47916: LD_INT 14
47918: DOUBLE
47919: EQUAL
47920: IFTRUE 47924
47922: GO 48136
47924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
47925: LD_ADDR_VAR 0 1
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: LD_INT 4
47941: PUSH
47942: LD_INT 5
47944: PUSH
47945: LD_INT 6
47947: PUSH
47948: LD_INT 7
47950: PUSH
47951: LD_INT 8
47953: PUSH
47954: LD_INT 9
47956: PUSH
47957: LD_INT 10
47959: PUSH
47960: LD_INT 11
47962: PUSH
47963: LD_INT 12
47965: PUSH
47966: LD_INT 13
47968: PUSH
47969: LD_INT 14
47971: PUSH
47972: LD_INT 15
47974: PUSH
47975: LD_INT 16
47977: PUSH
47978: LD_INT 17
47980: PUSH
47981: LD_INT 18
47983: PUSH
47984: LD_INT 19
47986: PUSH
47987: LD_INT 20
47989: PUSH
47990: LD_INT 21
47992: PUSH
47993: LD_INT 22
47995: PUSH
47996: LD_INT 23
47998: PUSH
47999: LD_INT 24
48001: PUSH
48002: LD_INT 25
48004: PUSH
48005: LD_INT 26
48007: PUSH
48008: LD_INT 27
48010: PUSH
48011: LD_INT 28
48013: PUSH
48014: LD_INT 29
48016: PUSH
48017: LD_INT 30
48019: PUSH
48020: LD_INT 31
48022: PUSH
48023: LD_INT 32
48025: PUSH
48026: LD_INT 33
48028: PUSH
48029: LD_INT 34
48031: PUSH
48032: LD_INT 36
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 101
48074: PUSH
48075: LD_INT 102
48077: PUSH
48078: LD_INT 103
48080: PUSH
48081: LD_INT 104
48083: PUSH
48084: LD_INT 105
48086: PUSH
48087: LD_INT 106
48089: PUSH
48090: LD_INT 107
48092: PUSH
48093: LD_INT 108
48095: PUSH
48096: LD_INT 109
48098: PUSH
48099: LD_INT 110
48101: PUSH
48102: LD_INT 111
48104: PUSH
48105: LD_INT 112
48107: PUSH
48108: LD_INT 113
48110: PUSH
48111: LD_INT 114
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: ST_TO_ADDR
48134: GO 49081
48136: LD_INT 15
48138: DOUBLE
48139: EQUAL
48140: IFTRUE 48144
48142: GO 48356
48144: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
48145: LD_ADDR_VAR 0 1
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: LD_INT 4
48161: PUSH
48162: LD_INT 5
48164: PUSH
48165: LD_INT 6
48167: PUSH
48168: LD_INT 7
48170: PUSH
48171: LD_INT 8
48173: PUSH
48174: LD_INT 9
48176: PUSH
48177: LD_INT 10
48179: PUSH
48180: LD_INT 11
48182: PUSH
48183: LD_INT 12
48185: PUSH
48186: LD_INT 13
48188: PUSH
48189: LD_INT 14
48191: PUSH
48192: LD_INT 15
48194: PUSH
48195: LD_INT 16
48197: PUSH
48198: LD_INT 17
48200: PUSH
48201: LD_INT 18
48203: PUSH
48204: LD_INT 19
48206: PUSH
48207: LD_INT 20
48209: PUSH
48210: LD_INT 21
48212: PUSH
48213: LD_INT 22
48215: PUSH
48216: LD_INT 23
48218: PUSH
48219: LD_INT 24
48221: PUSH
48222: LD_INT 25
48224: PUSH
48225: LD_INT 26
48227: PUSH
48228: LD_INT 27
48230: PUSH
48231: LD_INT 28
48233: PUSH
48234: LD_INT 29
48236: PUSH
48237: LD_INT 30
48239: PUSH
48240: LD_INT 31
48242: PUSH
48243: LD_INT 32
48245: PUSH
48246: LD_INT 33
48248: PUSH
48249: LD_INT 34
48251: PUSH
48252: LD_INT 36
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 101
48294: PUSH
48295: LD_INT 102
48297: PUSH
48298: LD_INT 103
48300: PUSH
48301: LD_INT 104
48303: PUSH
48304: LD_INT 105
48306: PUSH
48307: LD_INT 106
48309: PUSH
48310: LD_INT 107
48312: PUSH
48313: LD_INT 108
48315: PUSH
48316: LD_INT 109
48318: PUSH
48319: LD_INT 110
48321: PUSH
48322: LD_INT 111
48324: PUSH
48325: LD_INT 112
48327: PUSH
48328: LD_INT 113
48330: PUSH
48331: LD_INT 114
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: ST_TO_ADDR
48354: GO 49081
48356: LD_INT 16
48358: DOUBLE
48359: EQUAL
48360: IFTRUE 48364
48362: GO 48488
48364: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
48365: LD_ADDR_VAR 0 1
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 4
48375: PUSH
48376: LD_INT 5
48378: PUSH
48379: LD_INT 7
48381: PUSH
48382: LD_INT 11
48384: PUSH
48385: LD_INT 12
48387: PUSH
48388: LD_INT 15
48390: PUSH
48391: LD_INT 16
48393: PUSH
48394: LD_INT 20
48396: PUSH
48397: LD_INT 21
48399: PUSH
48400: LD_INT 22
48402: PUSH
48403: LD_INT 23
48405: PUSH
48406: LD_INT 25
48408: PUSH
48409: LD_INT 26
48411: PUSH
48412: LD_INT 30
48414: PUSH
48415: LD_INT 31
48417: PUSH
48418: LD_INT 32
48420: PUSH
48421: LD_INT 33
48423: PUSH
48424: LD_INT 34
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 101
48450: PUSH
48451: LD_INT 102
48453: PUSH
48454: LD_INT 103
48456: PUSH
48457: LD_INT 106
48459: PUSH
48460: LD_INT 108
48462: PUSH
48463: LD_INT 112
48465: PUSH
48466: LD_INT 113
48468: PUSH
48469: LD_INT 114
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: ST_TO_ADDR
48486: GO 49081
48488: LD_INT 17
48490: DOUBLE
48491: EQUAL
48492: IFTRUE 48496
48494: GO 48708
48496: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
48497: LD_ADDR_VAR 0 1
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: LD_INT 4
48513: PUSH
48514: LD_INT 5
48516: PUSH
48517: LD_INT 6
48519: PUSH
48520: LD_INT 7
48522: PUSH
48523: LD_INT 8
48525: PUSH
48526: LD_INT 9
48528: PUSH
48529: LD_INT 10
48531: PUSH
48532: LD_INT 11
48534: PUSH
48535: LD_INT 12
48537: PUSH
48538: LD_INT 13
48540: PUSH
48541: LD_INT 14
48543: PUSH
48544: LD_INT 15
48546: PUSH
48547: LD_INT 16
48549: PUSH
48550: LD_INT 17
48552: PUSH
48553: LD_INT 18
48555: PUSH
48556: LD_INT 19
48558: PUSH
48559: LD_INT 20
48561: PUSH
48562: LD_INT 21
48564: PUSH
48565: LD_INT 22
48567: PUSH
48568: LD_INT 23
48570: PUSH
48571: LD_INT 24
48573: PUSH
48574: LD_INT 25
48576: PUSH
48577: LD_INT 26
48579: PUSH
48580: LD_INT 27
48582: PUSH
48583: LD_INT 28
48585: PUSH
48586: LD_INT 29
48588: PUSH
48589: LD_INT 30
48591: PUSH
48592: LD_INT 31
48594: PUSH
48595: LD_INT 32
48597: PUSH
48598: LD_INT 33
48600: PUSH
48601: LD_INT 34
48603: PUSH
48604: LD_INT 36
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 101
48646: PUSH
48647: LD_INT 102
48649: PUSH
48650: LD_INT 103
48652: PUSH
48653: LD_INT 104
48655: PUSH
48656: LD_INT 105
48658: PUSH
48659: LD_INT 106
48661: PUSH
48662: LD_INT 107
48664: PUSH
48665: LD_INT 108
48667: PUSH
48668: LD_INT 109
48670: PUSH
48671: LD_INT 110
48673: PUSH
48674: LD_INT 111
48676: PUSH
48677: LD_INT 112
48679: PUSH
48680: LD_INT 113
48682: PUSH
48683: LD_INT 114
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: ST_TO_ADDR
48706: GO 49081
48708: LD_INT 18
48710: DOUBLE
48711: EQUAL
48712: IFTRUE 48716
48714: GO 48852
48716: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
48717: LD_ADDR_VAR 0 1
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 4
48727: PUSH
48728: LD_INT 5
48730: PUSH
48731: LD_INT 7
48733: PUSH
48734: LD_INT 11
48736: PUSH
48737: LD_INT 12
48739: PUSH
48740: LD_INT 15
48742: PUSH
48743: LD_INT 16
48745: PUSH
48746: LD_INT 20
48748: PUSH
48749: LD_INT 21
48751: PUSH
48752: LD_INT 22
48754: PUSH
48755: LD_INT 23
48757: PUSH
48758: LD_INT 25
48760: PUSH
48761: LD_INT 26
48763: PUSH
48764: LD_INT 30
48766: PUSH
48767: LD_INT 31
48769: PUSH
48770: LD_INT 32
48772: PUSH
48773: LD_INT 33
48775: PUSH
48776: LD_INT 34
48778: PUSH
48779: LD_INT 35
48781: PUSH
48782: LD_INT 36
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 101
48810: PUSH
48811: LD_INT 102
48813: PUSH
48814: LD_INT 103
48816: PUSH
48817: LD_INT 106
48819: PUSH
48820: LD_INT 108
48822: PUSH
48823: LD_INT 112
48825: PUSH
48826: LD_INT 113
48828: PUSH
48829: LD_INT 114
48831: PUSH
48832: LD_INT 115
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: ST_TO_ADDR
48850: GO 49081
48852: LD_INT 19
48854: DOUBLE
48855: EQUAL
48856: IFTRUE 48860
48858: GO 49080
48860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
48861: LD_ADDR_VAR 0 1
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: LD_INT 3
48874: PUSH
48875: LD_INT 4
48877: PUSH
48878: LD_INT 5
48880: PUSH
48881: LD_INT 6
48883: PUSH
48884: LD_INT 7
48886: PUSH
48887: LD_INT 8
48889: PUSH
48890: LD_INT 9
48892: PUSH
48893: LD_INT 10
48895: PUSH
48896: LD_INT 11
48898: PUSH
48899: LD_INT 12
48901: PUSH
48902: LD_INT 13
48904: PUSH
48905: LD_INT 14
48907: PUSH
48908: LD_INT 15
48910: PUSH
48911: LD_INT 16
48913: PUSH
48914: LD_INT 17
48916: PUSH
48917: LD_INT 18
48919: PUSH
48920: LD_INT 19
48922: PUSH
48923: LD_INT 20
48925: PUSH
48926: LD_INT 21
48928: PUSH
48929: LD_INT 22
48931: PUSH
48932: LD_INT 23
48934: PUSH
48935: LD_INT 24
48937: PUSH
48938: LD_INT 25
48940: PUSH
48941: LD_INT 26
48943: PUSH
48944: LD_INT 27
48946: PUSH
48947: LD_INT 28
48949: PUSH
48950: LD_INT 29
48952: PUSH
48953: LD_INT 30
48955: PUSH
48956: LD_INT 31
48958: PUSH
48959: LD_INT 32
48961: PUSH
48962: LD_INT 33
48964: PUSH
48965: LD_INT 34
48967: PUSH
48968: LD_INT 35
48970: PUSH
48971: LD_INT 36
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 101
49014: PUSH
49015: LD_INT 102
49017: PUSH
49018: LD_INT 103
49020: PUSH
49021: LD_INT 104
49023: PUSH
49024: LD_INT 105
49026: PUSH
49027: LD_INT 106
49029: PUSH
49030: LD_INT 107
49032: PUSH
49033: LD_INT 108
49035: PUSH
49036: LD_INT 109
49038: PUSH
49039: LD_INT 110
49041: PUSH
49042: LD_INT 111
49044: PUSH
49045: LD_INT 112
49047: PUSH
49048: LD_INT 113
49050: PUSH
49051: LD_INT 114
49053: PUSH
49054: LD_INT 115
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: ST_TO_ADDR
49078: GO 49081
49080: POP
// end else
49081: GO 49300
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
49083: LD_ADDR_VAR 0 1
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: LD_INT 4
49099: PUSH
49100: LD_INT 5
49102: PUSH
49103: LD_INT 6
49105: PUSH
49106: LD_INT 7
49108: PUSH
49109: LD_INT 8
49111: PUSH
49112: LD_INT 9
49114: PUSH
49115: LD_INT 10
49117: PUSH
49118: LD_INT 11
49120: PUSH
49121: LD_INT 12
49123: PUSH
49124: LD_INT 13
49126: PUSH
49127: LD_INT 14
49129: PUSH
49130: LD_INT 15
49132: PUSH
49133: LD_INT 16
49135: PUSH
49136: LD_INT 17
49138: PUSH
49139: LD_INT 18
49141: PUSH
49142: LD_INT 19
49144: PUSH
49145: LD_INT 20
49147: PUSH
49148: LD_INT 21
49150: PUSH
49151: LD_INT 22
49153: PUSH
49154: LD_INT 23
49156: PUSH
49157: LD_INT 24
49159: PUSH
49160: LD_INT 25
49162: PUSH
49163: LD_INT 26
49165: PUSH
49166: LD_INT 27
49168: PUSH
49169: LD_INT 28
49171: PUSH
49172: LD_INT 29
49174: PUSH
49175: LD_INT 30
49177: PUSH
49178: LD_INT 31
49180: PUSH
49181: LD_INT 32
49183: PUSH
49184: LD_INT 33
49186: PUSH
49187: LD_INT 34
49189: PUSH
49190: LD_INT 35
49192: PUSH
49193: LD_INT 36
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 101
49236: PUSH
49237: LD_INT 102
49239: PUSH
49240: LD_INT 103
49242: PUSH
49243: LD_INT 104
49245: PUSH
49246: LD_INT 105
49248: PUSH
49249: LD_INT 106
49251: PUSH
49252: LD_INT 107
49254: PUSH
49255: LD_INT 108
49257: PUSH
49258: LD_INT 109
49260: PUSH
49261: LD_INT 110
49263: PUSH
49264: LD_INT 111
49266: PUSH
49267: LD_INT 112
49269: PUSH
49270: LD_INT 113
49272: PUSH
49273: LD_INT 114
49275: PUSH
49276: LD_INT 115
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// if result then
49300: LD_VAR 0 1
49304: IFFALSE 49593
// begin normal :=  ;
49306: LD_ADDR_VAR 0 3
49310: PUSH
49311: LD_STRING 
49313: ST_TO_ADDR
// hardcore :=  ;
49314: LD_ADDR_VAR 0 4
49318: PUSH
49319: LD_STRING 
49321: ST_TO_ADDR
// for i = 1 to normalCounter do
49322: LD_ADDR_VAR 0 5
49326: PUSH
49327: DOUBLE
49328: LD_INT 1
49330: DEC
49331: ST_TO_ADDR
49332: LD_EXP 38
49336: PUSH
49337: FOR_TO
49338: IFFALSE 49439
// begin tmp := 0 ;
49340: LD_ADDR_VAR 0 2
49344: PUSH
49345: LD_STRING 0
49347: ST_TO_ADDR
// if result [ 1 ] then
49348: LD_VAR 0 1
49352: PUSH
49353: LD_INT 1
49355: ARRAY
49356: IFFALSE 49421
// if result [ 1 ] [ 1 ] = i then
49358: LD_VAR 0 1
49362: PUSH
49363: LD_INT 1
49365: ARRAY
49366: PUSH
49367: LD_INT 1
49369: ARRAY
49370: PUSH
49371: LD_VAR 0 5
49375: EQUAL
49376: IFFALSE 49421
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
49378: LD_ADDR_VAR 0 1
49382: PUSH
49383: LD_VAR 0 1
49387: PPUSH
49388: LD_INT 1
49390: PPUSH
49391: LD_VAR 0 1
49395: PUSH
49396: LD_INT 1
49398: ARRAY
49399: PPUSH
49400: LD_INT 1
49402: PPUSH
49403: CALL_OW 3
49407: PPUSH
49408: CALL_OW 1
49412: ST_TO_ADDR
// tmp := 1 ;
49413: LD_ADDR_VAR 0 2
49417: PUSH
49418: LD_STRING 1
49420: ST_TO_ADDR
// end ; normal := normal & tmp ;
49421: LD_ADDR_VAR 0 3
49425: PUSH
49426: LD_VAR 0 3
49430: PUSH
49431: LD_VAR 0 2
49435: STR
49436: ST_TO_ADDR
// end ;
49437: GO 49337
49439: POP
49440: POP
// for i = 1 to hardcoreCounter do
49441: LD_ADDR_VAR 0 5
49445: PUSH
49446: DOUBLE
49447: LD_INT 1
49449: DEC
49450: ST_TO_ADDR
49451: LD_EXP 39
49455: PUSH
49456: FOR_TO
49457: IFFALSE 49562
// begin tmp := 0 ;
49459: LD_ADDR_VAR 0 2
49463: PUSH
49464: LD_STRING 0
49466: ST_TO_ADDR
// if result [ 2 ] then
49467: LD_VAR 0 1
49471: PUSH
49472: LD_INT 2
49474: ARRAY
49475: IFFALSE 49544
// if result [ 2 ] [ 1 ] = 100 + i then
49477: LD_VAR 0 1
49481: PUSH
49482: LD_INT 2
49484: ARRAY
49485: PUSH
49486: LD_INT 1
49488: ARRAY
49489: PUSH
49490: LD_INT 100
49492: PUSH
49493: LD_VAR 0 5
49497: PLUS
49498: EQUAL
49499: IFFALSE 49544
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
49501: LD_ADDR_VAR 0 1
49505: PUSH
49506: LD_VAR 0 1
49510: PPUSH
49511: LD_INT 2
49513: PPUSH
49514: LD_VAR 0 1
49518: PUSH
49519: LD_INT 2
49521: ARRAY
49522: PPUSH
49523: LD_INT 1
49525: PPUSH
49526: CALL_OW 3
49530: PPUSH
49531: CALL_OW 1
49535: ST_TO_ADDR
// tmp := 1 ;
49536: LD_ADDR_VAR 0 2
49540: PUSH
49541: LD_STRING 1
49543: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
49544: LD_ADDR_VAR 0 4
49548: PUSH
49549: LD_VAR 0 4
49553: PUSH
49554: LD_VAR 0 2
49558: STR
49559: ST_TO_ADDR
// end ;
49560: GO 49456
49562: POP
49563: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
49564: LD_STRING getStreamItemsFromMission("
49566: PUSH
49567: LD_VAR 0 3
49571: STR
49572: PUSH
49573: LD_STRING ","
49575: STR
49576: PUSH
49577: LD_VAR 0 4
49581: STR
49582: PUSH
49583: LD_STRING ")
49585: STR
49586: PPUSH
49587: CALL_OW 559
// end else
49591: GO 49600
// ToLua ( getStreamItemsFromMission("","") ) ;
49593: LD_STRING getStreamItemsFromMission("","")
49595: PPUSH
49596: CALL_OW 559
// end ;
49600: LD_VAR 0 1
49604: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
49605: LD_EXP 37
49609: PUSH
49610: LD_EXP 42
49614: AND
49615: IFFALSE 49739
49617: GO 49619
49619: DISABLE
49620: LD_INT 0
49622: PPUSH
49623: PPUSH
// begin enable ;
49624: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
49625: LD_ADDR_VAR 0 2
49629: PUSH
49630: LD_INT 22
49632: PUSH
49633: LD_OWVAR 2
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 34
49647: PUSH
49648: LD_INT 7
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 34
49657: PUSH
49658: LD_INT 45
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 34
49667: PUSH
49668: LD_INT 28
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 34
49677: PUSH
49678: LD_INT 47
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PPUSH
49696: CALL_OW 69
49700: ST_TO_ADDR
// if not tmp then
49701: LD_VAR 0 2
49705: NOT
49706: IFFALSE 49710
// exit ;
49708: GO 49739
// for i in tmp do
49710: LD_ADDR_VAR 0 1
49714: PUSH
49715: LD_VAR 0 2
49719: PUSH
49720: FOR_IN
49721: IFFALSE 49737
// begin SetLives ( i , 0 ) ;
49723: LD_VAR 0 1
49727: PPUSH
49728: LD_INT 0
49730: PPUSH
49731: CALL_OW 234
// end ;
49735: GO 49720
49737: POP
49738: POP
// end ;
49739: PPOPN 2
49741: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
49742: LD_EXP 37
49746: PUSH
49747: LD_EXP 43
49751: AND
49752: IFFALSE 49836
49754: GO 49756
49756: DISABLE
49757: LD_INT 0
49759: PPUSH
49760: PPUSH
// begin enable ;
49761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
49762: LD_ADDR_VAR 0 2
49766: PUSH
49767: LD_INT 22
49769: PUSH
49770: LD_OWVAR 2
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 32
49781: PUSH
49782: LD_INT 3
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PPUSH
49793: CALL_OW 69
49797: ST_TO_ADDR
// if not tmp then
49798: LD_VAR 0 2
49802: NOT
49803: IFFALSE 49807
// exit ;
49805: GO 49836
// for i in tmp do
49807: LD_ADDR_VAR 0 1
49811: PUSH
49812: LD_VAR 0 2
49816: PUSH
49817: FOR_IN
49818: IFFALSE 49834
// begin SetLives ( i , 0 ) ;
49820: LD_VAR 0 1
49824: PPUSH
49825: LD_INT 0
49827: PPUSH
49828: CALL_OW 234
// end ;
49832: GO 49817
49834: POP
49835: POP
// end ;
49836: PPOPN 2
49838: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
49839: LD_EXP 37
49843: PUSH
49844: LD_EXP 40
49848: AND
49849: IFFALSE 49942
49851: GO 49853
49853: DISABLE
49854: LD_INT 0
49856: PPUSH
// begin enable ;
49857: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
49858: LD_ADDR_VAR 0 1
49862: PUSH
49863: LD_INT 22
49865: PUSH
49866: LD_OWVAR 2
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: LD_INT 25
49880: PUSH
49881: LD_INT 5
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 25
49890: PUSH
49891: LD_INT 9
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 25
49900: PUSH
49901: LD_INT 8
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PPUSH
49918: CALL_OW 69
49922: PUSH
49923: FOR_IN
49924: IFFALSE 49940
// begin SetClass ( i , 1 ) ;
49926: LD_VAR 0 1
49930: PPUSH
49931: LD_INT 1
49933: PPUSH
49934: CALL_OW 336
// end ;
49938: GO 49923
49940: POP
49941: POP
// end ;
49942: PPOPN 1
49944: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
49945: LD_EXP 37
49949: PUSH
49950: LD_EXP 41
49954: AND
49955: PUSH
49956: LD_OWVAR 65
49960: PUSH
49961: LD_INT 7
49963: LESS
49964: AND
49965: IFFALSE 49979
49967: GO 49969
49969: DISABLE
// begin enable ;
49970: ENABLE
// game_speed := 7 ;
49971: LD_ADDR_OWVAR 65
49975: PUSH
49976: LD_INT 7
49978: ST_TO_ADDR
// end ;
49979: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
49980: LD_EXP 37
49984: PUSH
49985: LD_EXP 44
49989: AND
49990: IFFALSE 50192
49992: GO 49994
49994: DISABLE
49995: LD_INT 0
49997: PPUSH
49998: PPUSH
49999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
50000: LD_ADDR_VAR 0 3
50004: PUSH
50005: LD_INT 81
50007: PUSH
50008: LD_OWVAR 2
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 21
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PPUSH
50031: CALL_OW 69
50035: ST_TO_ADDR
// if not tmp then
50036: LD_VAR 0 3
50040: NOT
50041: IFFALSE 50045
// exit ;
50043: GO 50192
// if tmp > 5 then
50045: LD_VAR 0 3
50049: PUSH
50050: LD_INT 5
50052: GREATER
50053: IFFALSE 50065
// k := 5 else
50055: LD_ADDR_VAR 0 2
50059: PUSH
50060: LD_INT 5
50062: ST_TO_ADDR
50063: GO 50075
// k := tmp ;
50065: LD_ADDR_VAR 0 2
50069: PUSH
50070: LD_VAR 0 3
50074: ST_TO_ADDR
// for i := 1 to k do
50075: LD_ADDR_VAR 0 1
50079: PUSH
50080: DOUBLE
50081: LD_INT 1
50083: DEC
50084: ST_TO_ADDR
50085: LD_VAR 0 2
50089: PUSH
50090: FOR_TO
50091: IFFALSE 50190
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
50093: LD_VAR 0 3
50097: PUSH
50098: LD_VAR 0 1
50102: ARRAY
50103: PPUSH
50104: LD_VAR 0 1
50108: PUSH
50109: LD_INT 4
50111: MOD
50112: PUSH
50113: LD_INT 1
50115: PLUS
50116: PPUSH
50117: CALL_OW 259
50121: PUSH
50122: LD_INT 10
50124: LESS
50125: IFFALSE 50188
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
50127: LD_VAR 0 3
50131: PUSH
50132: LD_VAR 0 1
50136: ARRAY
50137: PPUSH
50138: LD_VAR 0 1
50142: PUSH
50143: LD_INT 4
50145: MOD
50146: PUSH
50147: LD_INT 1
50149: PLUS
50150: PPUSH
50151: LD_VAR 0 3
50155: PUSH
50156: LD_VAR 0 1
50160: ARRAY
50161: PPUSH
50162: LD_VAR 0 1
50166: PUSH
50167: LD_INT 4
50169: MOD
50170: PUSH
50171: LD_INT 1
50173: PLUS
50174: PPUSH
50175: CALL_OW 259
50179: PUSH
50180: LD_INT 1
50182: PLUS
50183: PPUSH
50184: CALL_OW 237
50188: GO 50090
50190: POP
50191: POP
// end ;
50192: PPOPN 3
50194: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
50195: LD_EXP 37
50199: PUSH
50200: LD_EXP 45
50204: AND
50205: IFFALSE 50225
50207: GO 50209
50209: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
50210: LD_INT 4
50212: PPUSH
50213: LD_OWVAR 2
50217: PPUSH
50218: LD_INT 0
50220: PPUSH
50221: CALL_OW 324
50225: END
// every 0 0$1 trigger StreamModeActive and sShovel do
50226: LD_EXP 37
50230: PUSH
50231: LD_EXP 74
50235: AND
50236: IFFALSE 50256
50238: GO 50240
50240: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
50241: LD_INT 19
50243: PPUSH
50244: LD_OWVAR 2
50248: PPUSH
50249: LD_INT 0
50251: PPUSH
50252: CALL_OW 324
50256: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
50257: LD_EXP 37
50261: PUSH
50262: LD_EXP 46
50266: AND
50267: IFFALSE 50369
50269: GO 50271
50271: DISABLE
50272: LD_INT 0
50274: PPUSH
50275: PPUSH
// begin enable ;
50276: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
50277: LD_ADDR_VAR 0 2
50281: PUSH
50282: LD_INT 22
50284: PUSH
50285: LD_OWVAR 2
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: LD_INT 34
50299: PUSH
50300: LD_INT 11
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 34
50309: PUSH
50310: LD_INT 30
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PPUSH
50326: CALL_OW 69
50330: ST_TO_ADDR
// if not tmp then
50331: LD_VAR 0 2
50335: NOT
50336: IFFALSE 50340
// exit ;
50338: GO 50369
// for i in tmp do
50340: LD_ADDR_VAR 0 1
50344: PUSH
50345: LD_VAR 0 2
50349: PUSH
50350: FOR_IN
50351: IFFALSE 50367
// begin SetLives ( i , 0 ) ;
50353: LD_VAR 0 1
50357: PPUSH
50358: LD_INT 0
50360: PPUSH
50361: CALL_OW 234
// end ;
50365: GO 50350
50367: POP
50368: POP
// end ;
50369: PPOPN 2
50371: END
// every 0 0$1 trigger StreamModeActive and sBunker do
50372: LD_EXP 37
50376: PUSH
50377: LD_EXP 47
50381: AND
50382: IFFALSE 50402
50384: GO 50386
50386: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
50387: LD_INT 32
50389: PPUSH
50390: LD_OWVAR 2
50394: PPUSH
50395: LD_INT 0
50397: PPUSH
50398: CALL_OW 324
50402: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
50403: LD_EXP 37
50407: PUSH
50408: LD_EXP 48
50412: AND
50413: IFFALSE 50594
50415: GO 50417
50417: DISABLE
50418: LD_INT 0
50420: PPUSH
50421: PPUSH
50422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
50423: LD_ADDR_VAR 0 2
50427: PUSH
50428: LD_INT 22
50430: PUSH
50431: LD_OWVAR 2
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 33
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PPUSH
50454: CALL_OW 69
50458: ST_TO_ADDR
// if not tmp then
50459: LD_VAR 0 2
50463: NOT
50464: IFFALSE 50468
// exit ;
50466: GO 50594
// side := 0 ;
50468: LD_ADDR_VAR 0 3
50472: PUSH
50473: LD_INT 0
50475: ST_TO_ADDR
// for i := 1 to 8 do
50476: LD_ADDR_VAR 0 1
50480: PUSH
50481: DOUBLE
50482: LD_INT 1
50484: DEC
50485: ST_TO_ADDR
50486: LD_INT 8
50488: PUSH
50489: FOR_TO
50490: IFFALSE 50538
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
50492: LD_OWVAR 2
50496: PUSH
50497: LD_VAR 0 1
50501: NONEQUAL
50502: PUSH
50503: LD_OWVAR 2
50507: PPUSH
50508: LD_VAR 0 1
50512: PPUSH
50513: CALL_OW 81
50517: PUSH
50518: LD_INT 2
50520: EQUAL
50521: AND
50522: IFFALSE 50536
// begin side := i ;
50524: LD_ADDR_VAR 0 3
50528: PUSH
50529: LD_VAR 0 1
50533: ST_TO_ADDR
// break ;
50534: GO 50538
// end ;
50536: GO 50489
50538: POP
50539: POP
// if not side then
50540: LD_VAR 0 3
50544: NOT
50545: IFFALSE 50549
// exit ;
50547: GO 50594
// for i := 1 to tmp do
50549: LD_ADDR_VAR 0 1
50553: PUSH
50554: DOUBLE
50555: LD_INT 1
50557: DEC
50558: ST_TO_ADDR
50559: LD_VAR 0 2
50563: PUSH
50564: FOR_TO
50565: IFFALSE 50592
// if Prob ( 60 ) then
50567: LD_INT 60
50569: PPUSH
50570: CALL_OW 13
50574: IFFALSE 50590
// SetSide ( i , side ) ;
50576: LD_VAR 0 1
50580: PPUSH
50581: LD_VAR 0 3
50585: PPUSH
50586: CALL_OW 235
50590: GO 50564
50592: POP
50593: POP
// end ;
50594: PPOPN 3
50596: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
50597: LD_EXP 37
50601: PUSH
50602: LD_EXP 50
50606: AND
50607: IFFALSE 50726
50609: GO 50611
50611: DISABLE
50612: LD_INT 0
50614: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
50615: LD_ADDR_VAR 0 1
50619: PUSH
50620: LD_INT 22
50622: PUSH
50623: LD_OWVAR 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 21
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: LD_INT 23
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: PPUSH
50664: CALL_OW 69
50668: PUSH
50669: FOR_IN
50670: IFFALSE 50724
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
50672: LD_VAR 0 1
50676: PPUSH
50677: CALL_OW 257
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: LD_INT 3
50690: PUSH
50691: LD_INT 4
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: IN
50700: IFFALSE 50722
// SetClass ( un , rand ( 1 , 4 ) ) ;
50702: LD_VAR 0 1
50706: PPUSH
50707: LD_INT 1
50709: PPUSH
50710: LD_INT 4
50712: PPUSH
50713: CALL_OW 12
50717: PPUSH
50718: CALL_OW 336
50722: GO 50669
50724: POP
50725: POP
// end ;
50726: PPOPN 1
50728: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
50729: LD_EXP 37
50733: PUSH
50734: LD_EXP 49
50738: AND
50739: IFFALSE 50818
50741: GO 50743
50743: DISABLE
50744: LD_INT 0
50746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
50747: LD_ADDR_VAR 0 1
50751: PUSH
50752: LD_INT 22
50754: PUSH
50755: LD_OWVAR 2
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 21
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PPUSH
50778: CALL_OW 69
50782: ST_TO_ADDR
// if not tmp then
50783: LD_VAR 0 1
50787: NOT
50788: IFFALSE 50792
// exit ;
50790: GO 50818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
50792: LD_VAR 0 1
50796: PUSH
50797: LD_INT 1
50799: PPUSH
50800: LD_VAR 0 1
50804: PPUSH
50805: CALL_OW 12
50809: ARRAY
50810: PPUSH
50811: LD_INT 100
50813: PPUSH
50814: CALL_OW 234
// end ;
50818: PPOPN 1
50820: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
50821: LD_EXP 37
50825: PUSH
50826: LD_EXP 51
50830: AND
50831: IFFALSE 50929
50833: GO 50835
50835: DISABLE
50836: LD_INT 0
50838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50839: LD_ADDR_VAR 0 1
50843: PUSH
50844: LD_INT 22
50846: PUSH
50847: LD_OWVAR 2
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 21
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PPUSH
50870: CALL_OW 69
50874: ST_TO_ADDR
// if not tmp then
50875: LD_VAR 0 1
50879: NOT
50880: IFFALSE 50884
// exit ;
50882: GO 50929
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
50884: LD_VAR 0 1
50888: PUSH
50889: LD_INT 1
50891: PPUSH
50892: LD_VAR 0 1
50896: PPUSH
50897: CALL_OW 12
50901: ARRAY
50902: PPUSH
50903: LD_INT 1
50905: PPUSH
50906: LD_INT 4
50908: PPUSH
50909: CALL_OW 12
50913: PPUSH
50914: LD_INT 3000
50916: PPUSH
50917: LD_INT 9000
50919: PPUSH
50920: CALL_OW 12
50924: PPUSH
50925: CALL_OW 492
// end ;
50929: PPOPN 1
50931: END
// every 0 0$1 trigger StreamModeActive and sDepot do
50932: LD_EXP 37
50936: PUSH
50937: LD_EXP 52
50941: AND
50942: IFFALSE 50962
50944: GO 50946
50946: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
50947: LD_INT 1
50949: PPUSH
50950: LD_OWVAR 2
50954: PPUSH
50955: LD_INT 0
50957: PPUSH
50958: CALL_OW 324
50962: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
50963: LD_EXP 37
50967: PUSH
50968: LD_EXP 53
50972: AND
50973: IFFALSE 51056
50975: GO 50977
50977: DISABLE
50978: LD_INT 0
50980: PPUSH
50981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
50982: LD_ADDR_VAR 0 2
50986: PUSH
50987: LD_INT 22
50989: PUSH
50990: LD_OWVAR 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 21
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PPUSH
51013: CALL_OW 69
51017: ST_TO_ADDR
// if not tmp then
51018: LD_VAR 0 2
51022: NOT
51023: IFFALSE 51027
// exit ;
51025: GO 51056
// for i in tmp do
51027: LD_ADDR_VAR 0 1
51031: PUSH
51032: LD_VAR 0 2
51036: PUSH
51037: FOR_IN
51038: IFFALSE 51054
// SetBLevel ( i , 10 ) ;
51040: LD_VAR 0 1
51044: PPUSH
51045: LD_INT 10
51047: PPUSH
51048: CALL_OW 241
51052: GO 51037
51054: POP
51055: POP
// end ;
51056: PPOPN 2
51058: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
51059: LD_EXP 37
51063: PUSH
51064: LD_EXP 54
51068: AND
51069: IFFALSE 51180
51071: GO 51073
51073: DISABLE
51074: LD_INT 0
51076: PPUSH
51077: PPUSH
51078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51079: LD_ADDR_VAR 0 3
51083: PUSH
51084: LD_INT 22
51086: PUSH
51087: LD_OWVAR 2
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 25
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PPUSH
51110: CALL_OW 69
51114: ST_TO_ADDR
// if not tmp then
51115: LD_VAR 0 3
51119: NOT
51120: IFFALSE 51124
// exit ;
51122: GO 51180
// un := tmp [ rand ( 1 , tmp ) ] ;
51124: LD_ADDR_VAR 0 2
51128: PUSH
51129: LD_VAR 0 3
51133: PUSH
51134: LD_INT 1
51136: PPUSH
51137: LD_VAR 0 3
51141: PPUSH
51142: CALL_OW 12
51146: ARRAY
51147: ST_TO_ADDR
// if Crawls ( un ) then
51148: LD_VAR 0 2
51152: PPUSH
51153: CALL_OW 318
51157: IFFALSE 51168
// ComWalk ( un ) ;
51159: LD_VAR 0 2
51163: PPUSH
51164: CALL_OW 138
// SetClass ( un , class_sniper ) ;
51168: LD_VAR 0 2
51172: PPUSH
51173: LD_INT 5
51175: PPUSH
51176: CALL_OW 336
// end ;
51180: PPOPN 3
51182: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
51183: LD_EXP 37
51187: PUSH
51188: LD_EXP 55
51192: AND
51193: PUSH
51194: LD_OWVAR 67
51198: PUSH
51199: LD_INT 3
51201: LESS
51202: AND
51203: IFFALSE 51222
51205: GO 51207
51207: DISABLE
// Difficulty := Difficulty + 1 ;
51208: LD_ADDR_OWVAR 67
51212: PUSH
51213: LD_OWVAR 67
51217: PUSH
51218: LD_INT 1
51220: PLUS
51221: ST_TO_ADDR
51222: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
51223: LD_EXP 37
51227: PUSH
51228: LD_EXP 56
51232: AND
51233: IFFALSE 51336
51235: GO 51237
51237: DISABLE
51238: LD_INT 0
51240: PPUSH
// begin for i := 1 to 5 do
51241: LD_ADDR_VAR 0 1
51245: PUSH
51246: DOUBLE
51247: LD_INT 1
51249: DEC
51250: ST_TO_ADDR
51251: LD_INT 5
51253: PUSH
51254: FOR_TO
51255: IFFALSE 51334
// begin uc_nation := nation_nature ;
51257: LD_ADDR_OWVAR 21
51261: PUSH
51262: LD_INT 0
51264: ST_TO_ADDR
// uc_side := 0 ;
51265: LD_ADDR_OWVAR 20
51269: PUSH
51270: LD_INT 0
51272: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51273: LD_ADDR_OWVAR 29
51277: PUSH
51278: LD_INT 12
51280: PUSH
51281: LD_INT 12
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: ST_TO_ADDR
// hc_agressivity := 20 ;
51288: LD_ADDR_OWVAR 35
51292: PUSH
51293: LD_INT 20
51295: ST_TO_ADDR
// hc_class := class_tiger ;
51296: LD_ADDR_OWVAR 28
51300: PUSH
51301: LD_INT 14
51303: ST_TO_ADDR
// hc_gallery :=  ;
51304: LD_ADDR_OWVAR 33
51308: PUSH
51309: LD_STRING 
51311: ST_TO_ADDR
// hc_name :=  ;
51312: LD_ADDR_OWVAR 26
51316: PUSH
51317: LD_STRING 
51319: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
51320: CALL_OW 44
51324: PPUSH
51325: LD_INT 0
51327: PPUSH
51328: CALL_OW 51
// end ;
51332: GO 51254
51334: POP
51335: POP
// end ;
51336: PPOPN 1
51338: END
// every 0 0$1 trigger StreamModeActive and sBomb do
51339: LD_EXP 37
51343: PUSH
51344: LD_EXP 57
51348: AND
51349: IFFALSE 51358
51351: GO 51353
51353: DISABLE
// StreamSibBomb ;
51354: CALL 51359 0 0
51358: END
// export function StreamSibBomb ; var i , x , y ; begin
51359: LD_INT 0
51361: PPUSH
51362: PPUSH
51363: PPUSH
51364: PPUSH
// result := false ;
51365: LD_ADDR_VAR 0 1
51369: PUSH
51370: LD_INT 0
51372: ST_TO_ADDR
// for i := 1 to 16 do
51373: LD_ADDR_VAR 0 2
51377: PUSH
51378: DOUBLE
51379: LD_INT 1
51381: DEC
51382: ST_TO_ADDR
51383: LD_INT 16
51385: PUSH
51386: FOR_TO
51387: IFFALSE 51586
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51389: LD_ADDR_VAR 0 3
51393: PUSH
51394: LD_INT 10
51396: PUSH
51397: LD_INT 20
51399: PUSH
51400: LD_INT 30
51402: PUSH
51403: LD_INT 40
51405: PUSH
51406: LD_INT 50
51408: PUSH
51409: LD_INT 60
51411: PUSH
51412: LD_INT 70
51414: PUSH
51415: LD_INT 80
51417: PUSH
51418: LD_INT 90
51420: PUSH
51421: LD_INT 100
51423: PUSH
51424: LD_INT 110
51426: PUSH
51427: LD_INT 120
51429: PUSH
51430: LD_INT 130
51432: PUSH
51433: LD_INT 140
51435: PUSH
51436: LD_INT 150
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PPUSH
51459: LD_INT 15
51461: PPUSH
51462: CALL_OW 12
51466: ARRAY
51467: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51468: LD_ADDR_VAR 0 4
51472: PUSH
51473: LD_INT 10
51475: PUSH
51476: LD_INT 20
51478: PUSH
51479: LD_INT 30
51481: PUSH
51482: LD_INT 40
51484: PUSH
51485: LD_INT 50
51487: PUSH
51488: LD_INT 60
51490: PUSH
51491: LD_INT 70
51493: PUSH
51494: LD_INT 80
51496: PUSH
51497: LD_INT 90
51499: PUSH
51500: LD_INT 100
51502: PUSH
51503: LD_INT 110
51505: PUSH
51506: LD_INT 120
51508: PUSH
51509: LD_INT 130
51511: PUSH
51512: LD_INT 140
51514: PUSH
51515: LD_INT 150
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PPUSH
51538: LD_INT 15
51540: PPUSH
51541: CALL_OW 12
51545: ARRAY
51546: ST_TO_ADDR
// if ValidHex ( x , y ) then
51547: LD_VAR 0 3
51551: PPUSH
51552: LD_VAR 0 4
51556: PPUSH
51557: CALL_OW 488
51561: IFFALSE 51584
// begin result := [ x , y ] ;
51563: LD_ADDR_VAR 0 1
51567: PUSH
51568: LD_VAR 0 3
51572: PUSH
51573: LD_VAR 0 4
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: ST_TO_ADDR
// break ;
51582: GO 51586
// end ; end ;
51584: GO 51386
51586: POP
51587: POP
// if result then
51588: LD_VAR 0 1
51592: IFFALSE 51652
// begin ToLua ( playSibBomb() ) ;
51594: LD_STRING playSibBomb()
51596: PPUSH
51597: CALL_OW 559
// wait ( 0 0$14 ) ;
51601: LD_INT 490
51603: PPUSH
51604: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
51608: LD_VAR 0 1
51612: PUSH
51613: LD_INT 1
51615: ARRAY
51616: PPUSH
51617: LD_VAR 0 1
51621: PUSH
51622: LD_INT 2
51624: ARRAY
51625: PPUSH
51626: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
51630: LD_VAR 0 1
51634: PUSH
51635: LD_INT 1
51637: ARRAY
51638: PPUSH
51639: LD_VAR 0 1
51643: PUSH
51644: LD_INT 2
51646: ARRAY
51647: PPUSH
51648: CALL_OW 429
// end ; end ;
51652: LD_VAR 0 1
51656: RET
// every 0 0$1 trigger StreamModeActive and sReset do
51657: LD_EXP 37
51661: PUSH
51662: LD_EXP 59
51666: AND
51667: IFFALSE 51679
51669: GO 51671
51671: DISABLE
// YouLost (  ) ;
51672: LD_STRING 
51674: PPUSH
51675: CALL_OW 104
51679: END
// every 0 0$1 trigger StreamModeActive and sFog do
51680: LD_EXP 37
51684: PUSH
51685: LD_EXP 58
51689: AND
51690: IFFALSE 51704
51692: GO 51694
51694: DISABLE
// FogOff ( your_side ) ;
51695: LD_OWVAR 2
51699: PPUSH
51700: CALL_OW 344
51704: END
// every 0 0$1 trigger StreamModeActive and sSun do
51705: LD_EXP 37
51709: PUSH
51710: LD_EXP 60
51714: AND
51715: IFFALSE 51743
51717: GO 51719
51719: DISABLE
// begin solar_recharge_percent := 0 ;
51720: LD_ADDR_OWVAR 79
51724: PUSH
51725: LD_INT 0
51727: ST_TO_ADDR
// wait ( 5 5$00 ) ;
51728: LD_INT 10500
51730: PPUSH
51731: CALL_OW 67
// solar_recharge_percent := 100 ;
51735: LD_ADDR_OWVAR 79
51739: PUSH
51740: LD_INT 100
51742: ST_TO_ADDR
// end ;
51743: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
51744: LD_EXP 37
51748: PUSH
51749: LD_EXP 61
51753: AND
51754: IFFALSE 51993
51756: GO 51758
51758: DISABLE
51759: LD_INT 0
51761: PPUSH
51762: PPUSH
51763: PPUSH
// begin tmp := [ ] ;
51764: LD_ADDR_VAR 0 3
51768: PUSH
51769: EMPTY
51770: ST_TO_ADDR
// for i := 1 to 6 do
51771: LD_ADDR_VAR 0 1
51775: PUSH
51776: DOUBLE
51777: LD_INT 1
51779: DEC
51780: ST_TO_ADDR
51781: LD_INT 6
51783: PUSH
51784: FOR_TO
51785: IFFALSE 51890
// begin uc_nation := nation_nature ;
51787: LD_ADDR_OWVAR 21
51791: PUSH
51792: LD_INT 0
51794: ST_TO_ADDR
// uc_side := 0 ;
51795: LD_ADDR_OWVAR 20
51799: PUSH
51800: LD_INT 0
51802: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51803: LD_ADDR_OWVAR 29
51807: PUSH
51808: LD_INT 12
51810: PUSH
51811: LD_INT 12
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: ST_TO_ADDR
// hc_agressivity := 20 ;
51818: LD_ADDR_OWVAR 35
51822: PUSH
51823: LD_INT 20
51825: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
51826: LD_ADDR_OWVAR 28
51830: PUSH
51831: LD_INT 17
51833: ST_TO_ADDR
// hc_gallery :=  ;
51834: LD_ADDR_OWVAR 33
51838: PUSH
51839: LD_STRING 
51841: ST_TO_ADDR
// hc_name :=  ;
51842: LD_ADDR_OWVAR 26
51846: PUSH
51847: LD_STRING 
51849: ST_TO_ADDR
// un := CreateHuman ;
51850: LD_ADDR_VAR 0 2
51854: PUSH
51855: CALL_OW 44
51859: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
51860: LD_VAR 0 2
51864: PPUSH
51865: LD_INT 1
51867: PPUSH
51868: CALL_OW 51
// tmp := tmp ^ un ;
51872: LD_ADDR_VAR 0 3
51876: PUSH
51877: LD_VAR 0 3
51881: PUSH
51882: LD_VAR 0 2
51886: ADD
51887: ST_TO_ADDR
// end ;
51888: GO 51784
51890: POP
51891: POP
// repeat wait ( 0 0$1 ) ;
51892: LD_INT 35
51894: PPUSH
51895: CALL_OW 67
// for un in tmp do
51899: LD_ADDR_VAR 0 2
51903: PUSH
51904: LD_VAR 0 3
51908: PUSH
51909: FOR_IN
51910: IFFALSE 51984
// begin if IsDead ( un ) then
51912: LD_VAR 0 2
51916: PPUSH
51917: CALL_OW 301
51921: IFFALSE 51941
// begin tmp := tmp diff un ;
51923: LD_ADDR_VAR 0 3
51927: PUSH
51928: LD_VAR 0 3
51932: PUSH
51933: LD_VAR 0 2
51937: DIFF
51938: ST_TO_ADDR
// continue ;
51939: GO 51909
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
51941: LD_VAR 0 2
51945: PPUSH
51946: LD_INT 3
51948: PUSH
51949: LD_INT 22
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PPUSH
51963: CALL_OW 69
51967: PPUSH
51968: LD_VAR 0 2
51972: PPUSH
51973: CALL_OW 74
51977: PPUSH
51978: CALL_OW 115
// end ;
51982: GO 51909
51984: POP
51985: POP
// until not tmp ;
51986: LD_VAR 0 3
51990: NOT
51991: IFFALSE 51892
// end ;
51993: PPOPN 3
51995: END
// every 0 0$1 trigger StreamModeActive and sTroll do
51996: LD_EXP 37
52000: PUSH
52001: LD_EXP 62
52005: AND
52006: IFFALSE 52060
52008: GO 52010
52010: DISABLE
// begin ToLua ( displayTroll(); ) ;
52011: LD_STRING displayTroll();
52013: PPUSH
52014: CALL_OW 559
// wait ( 3 3$00 ) ;
52018: LD_INT 6300
52020: PPUSH
52021: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52025: LD_STRING hideTroll();
52027: PPUSH
52028: CALL_OW 559
// wait ( 1 1$00 ) ;
52032: LD_INT 2100
52034: PPUSH
52035: CALL_OW 67
// ToLua ( displayTroll(); ) ;
52039: LD_STRING displayTroll();
52041: PPUSH
52042: CALL_OW 559
// wait ( 1 1$00 ) ;
52046: LD_INT 2100
52048: PPUSH
52049: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52053: LD_STRING hideTroll();
52055: PPUSH
52056: CALL_OW 559
// end ;
52060: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
52061: LD_EXP 37
52065: PUSH
52066: LD_EXP 63
52070: AND
52071: IFFALSE 52134
52073: GO 52075
52075: DISABLE
52076: LD_INT 0
52078: PPUSH
// begin p := 0 ;
52079: LD_ADDR_VAR 0 1
52083: PUSH
52084: LD_INT 0
52086: ST_TO_ADDR
// repeat game_speed := 1 ;
52087: LD_ADDR_OWVAR 65
52091: PUSH
52092: LD_INT 1
52094: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52095: LD_INT 35
52097: PPUSH
52098: CALL_OW 67
// p := p + 1 ;
52102: LD_ADDR_VAR 0 1
52106: PUSH
52107: LD_VAR 0 1
52111: PUSH
52112: LD_INT 1
52114: PLUS
52115: ST_TO_ADDR
// until p >= 60 ;
52116: LD_VAR 0 1
52120: PUSH
52121: LD_INT 60
52123: GREATEREQUAL
52124: IFFALSE 52087
// game_speed := 4 ;
52126: LD_ADDR_OWVAR 65
52130: PUSH
52131: LD_INT 4
52133: ST_TO_ADDR
// end ;
52134: PPOPN 1
52136: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
52137: LD_EXP 37
52141: PUSH
52142: LD_EXP 64
52146: AND
52147: IFFALSE 52293
52149: GO 52151
52151: DISABLE
52152: LD_INT 0
52154: PPUSH
52155: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52156: LD_ADDR_VAR 0 1
52160: PUSH
52161: LD_INT 22
52163: PUSH
52164: LD_OWVAR 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: LD_INT 30
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 30
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PPUSH
52205: CALL_OW 69
52209: ST_TO_ADDR
// if not depot then
52210: LD_VAR 0 1
52214: NOT
52215: IFFALSE 52219
// exit ;
52217: GO 52293
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
52219: LD_ADDR_VAR 0 2
52223: PUSH
52224: LD_VAR 0 1
52228: PUSH
52229: LD_INT 1
52231: PPUSH
52232: LD_VAR 0 1
52236: PPUSH
52237: CALL_OW 12
52241: ARRAY
52242: PPUSH
52243: CALL_OW 274
52247: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
52248: LD_VAR 0 2
52252: PPUSH
52253: LD_INT 1
52255: PPUSH
52256: LD_INT 0
52258: PPUSH
52259: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
52263: LD_VAR 0 2
52267: PPUSH
52268: LD_INT 2
52270: PPUSH
52271: LD_INT 0
52273: PPUSH
52274: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
52278: LD_VAR 0 2
52282: PPUSH
52283: LD_INT 3
52285: PPUSH
52286: LD_INT 0
52288: PPUSH
52289: CALL_OW 277
// end ;
52293: PPOPN 2
52295: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
52296: LD_EXP 37
52300: PUSH
52301: LD_EXP 65
52305: AND
52306: IFFALSE 52403
52308: GO 52310
52310: DISABLE
52311: LD_INT 0
52313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52314: LD_ADDR_VAR 0 1
52318: PUSH
52319: LD_INT 22
52321: PUSH
52322: LD_OWVAR 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 21
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 3
52343: PUSH
52344: LD_INT 23
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: PPUSH
52363: CALL_OW 69
52367: ST_TO_ADDR
// if not tmp then
52368: LD_VAR 0 1
52372: NOT
52373: IFFALSE 52377
// exit ;
52375: GO 52403
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
52377: LD_VAR 0 1
52381: PUSH
52382: LD_INT 1
52384: PPUSH
52385: LD_VAR 0 1
52389: PPUSH
52390: CALL_OW 12
52394: ARRAY
52395: PPUSH
52396: LD_INT 200
52398: PPUSH
52399: CALL_OW 234
// end ;
52403: PPOPN 1
52405: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
52406: LD_EXP 37
52410: PUSH
52411: LD_EXP 66
52415: AND
52416: IFFALSE 52495
52418: GO 52420
52420: DISABLE
52421: LD_INT 0
52423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
52424: LD_ADDR_VAR 0 1
52428: PUSH
52429: LD_INT 22
52431: PUSH
52432: LD_OWVAR 2
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 21
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PPUSH
52455: CALL_OW 69
52459: ST_TO_ADDR
// if not tmp then
52460: LD_VAR 0 1
52464: NOT
52465: IFFALSE 52469
// exit ;
52467: GO 52495
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
52469: LD_VAR 0 1
52473: PUSH
52474: LD_INT 1
52476: PPUSH
52477: LD_VAR 0 1
52481: PPUSH
52482: CALL_OW 12
52486: ARRAY
52487: PPUSH
52488: LD_INT 60
52490: PPUSH
52491: CALL_OW 234
// end ;
52495: PPOPN 1
52497: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
52498: LD_EXP 37
52502: PUSH
52503: LD_EXP 67
52507: AND
52508: IFFALSE 52607
52510: GO 52512
52512: DISABLE
52513: LD_INT 0
52515: PPUSH
52516: PPUSH
// begin enable ;
52517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
52518: LD_ADDR_VAR 0 1
52522: PUSH
52523: LD_INT 22
52525: PUSH
52526: LD_OWVAR 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 61
52537: PUSH
52538: EMPTY
52539: LIST
52540: PUSH
52541: LD_INT 33
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: LIST
52555: PPUSH
52556: CALL_OW 69
52560: ST_TO_ADDR
// if not tmp then
52561: LD_VAR 0 1
52565: NOT
52566: IFFALSE 52570
// exit ;
52568: GO 52607
// for i in tmp do
52570: LD_ADDR_VAR 0 2
52574: PUSH
52575: LD_VAR 0 1
52579: PUSH
52580: FOR_IN
52581: IFFALSE 52605
// if IsControledBy ( i ) then
52583: LD_VAR 0 2
52587: PPUSH
52588: CALL_OW 312
52592: IFFALSE 52603
// ComUnlink ( i ) ;
52594: LD_VAR 0 2
52598: PPUSH
52599: CALL_OW 136
52603: GO 52580
52605: POP
52606: POP
// end ;
52607: PPOPN 2
52609: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
52610: LD_EXP 37
52614: PUSH
52615: LD_EXP 68
52619: AND
52620: IFFALSE 52760
52622: GO 52624
52624: DISABLE
52625: LD_INT 0
52627: PPUSH
52628: PPUSH
// begin ToLua ( displayPowell(); ) ;
52629: LD_STRING displayPowell();
52631: PPUSH
52632: CALL_OW 559
// uc_side := 0 ;
52636: LD_ADDR_OWVAR 20
52640: PUSH
52641: LD_INT 0
52643: ST_TO_ADDR
// uc_nation := 2 ;
52644: LD_ADDR_OWVAR 21
52648: PUSH
52649: LD_INT 2
52651: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
52652: LD_ADDR_OWVAR 37
52656: PUSH
52657: LD_INT 14
52659: ST_TO_ADDR
// vc_engine := engine_siberite ;
52660: LD_ADDR_OWVAR 39
52664: PUSH
52665: LD_INT 3
52667: ST_TO_ADDR
// vc_control := control_apeman ;
52668: LD_ADDR_OWVAR 38
52672: PUSH
52673: LD_INT 5
52675: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
52676: LD_ADDR_OWVAR 40
52680: PUSH
52681: LD_INT 29
52683: ST_TO_ADDR
// un := CreateVehicle ;
52684: LD_ADDR_VAR 0 2
52688: PUSH
52689: CALL_OW 45
52693: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52694: LD_VAR 0 2
52698: PPUSH
52699: LD_INT 1
52701: PPUSH
52702: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
52706: LD_INT 35
52708: PPUSH
52709: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
52713: LD_VAR 0 2
52717: PPUSH
52718: LD_INT 22
52720: PUSH
52721: LD_OWVAR 2
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PPUSH
52730: CALL_OW 69
52734: PPUSH
52735: LD_VAR 0 2
52739: PPUSH
52740: CALL_OW 74
52744: PPUSH
52745: CALL_OW 115
// until IsDead ( un ) ;
52749: LD_VAR 0 2
52753: PPUSH
52754: CALL_OW 301
52758: IFFALSE 52706
// end ;
52760: PPOPN 2
52762: END
// every 0 0$1 trigger StreamModeActive and sStu do
52763: LD_EXP 37
52767: PUSH
52768: LD_EXP 76
52772: AND
52773: IFFALSE 52789
52775: GO 52777
52777: DISABLE
// begin ToLua ( displayStucuk(); ) ;
52778: LD_STRING displayStucuk();
52780: PPUSH
52781: CALL_OW 559
// ResetFog ;
52785: CALL_OW 335
// end ;
52789: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
52790: LD_EXP 37
52794: PUSH
52795: LD_EXP 69
52799: AND
52800: IFFALSE 52941
52802: GO 52804
52804: DISABLE
52805: LD_INT 0
52807: PPUSH
52808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52809: LD_ADDR_VAR 0 2
52813: PUSH
52814: LD_INT 22
52816: PUSH
52817: LD_OWVAR 2
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 21
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PPUSH
52840: CALL_OW 69
52844: ST_TO_ADDR
// if not tmp then
52845: LD_VAR 0 2
52849: NOT
52850: IFFALSE 52854
// exit ;
52852: GO 52941
// un := tmp [ rand ( 1 , tmp ) ] ;
52854: LD_ADDR_VAR 0 1
52858: PUSH
52859: LD_VAR 0 2
52863: PUSH
52864: LD_INT 1
52866: PPUSH
52867: LD_VAR 0 2
52871: PPUSH
52872: CALL_OW 12
52876: ARRAY
52877: ST_TO_ADDR
// SetSide ( un , 0 ) ;
52878: LD_VAR 0 1
52882: PPUSH
52883: LD_INT 0
52885: PPUSH
52886: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
52890: LD_VAR 0 1
52894: PPUSH
52895: LD_OWVAR 3
52899: PUSH
52900: LD_VAR 0 1
52904: DIFF
52905: PPUSH
52906: LD_VAR 0 1
52910: PPUSH
52911: CALL_OW 74
52915: PPUSH
52916: CALL_OW 115
// wait ( 0 0$20 ) ;
52920: LD_INT 700
52922: PPUSH
52923: CALL_OW 67
// SetSide ( un , your_side ) ;
52927: LD_VAR 0 1
52931: PPUSH
52932: LD_OWVAR 2
52936: PPUSH
52937: CALL_OW 235
// end ;
52941: PPOPN 2
52943: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
52944: LD_EXP 37
52948: PUSH
52949: LD_EXP 70
52953: AND
52954: IFFALSE 53060
52956: GO 52958
52958: DISABLE
52959: LD_INT 0
52961: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52962: LD_ADDR_VAR 0 1
52966: PUSH
52967: LD_INT 22
52969: PUSH
52970: LD_OWVAR 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 30
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 30
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PPUSH
53011: CALL_OW 69
53015: ST_TO_ADDR
// if not depot then
53016: LD_VAR 0 1
53020: NOT
53021: IFFALSE 53025
// exit ;
53023: GO 53060
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
53025: LD_VAR 0 1
53029: PUSH
53030: LD_INT 1
53032: ARRAY
53033: PPUSH
53034: CALL_OW 250
53038: PPUSH
53039: LD_VAR 0 1
53043: PUSH
53044: LD_INT 1
53046: ARRAY
53047: PPUSH
53048: CALL_OW 251
53052: PPUSH
53053: LD_INT 70
53055: PPUSH
53056: CALL_OW 495
// end ;
53060: PPOPN 1
53062: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
53063: LD_EXP 37
53067: PUSH
53068: LD_EXP 71
53072: AND
53073: IFFALSE 53284
53075: GO 53077
53077: DISABLE
53078: LD_INT 0
53080: PPUSH
53081: PPUSH
53082: PPUSH
53083: PPUSH
53084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53085: LD_ADDR_VAR 0 5
53089: PUSH
53090: LD_INT 22
53092: PUSH
53093: LD_OWVAR 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 21
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PPUSH
53116: CALL_OW 69
53120: ST_TO_ADDR
// if not tmp then
53121: LD_VAR 0 5
53125: NOT
53126: IFFALSE 53130
// exit ;
53128: GO 53284
// for i in tmp do
53130: LD_ADDR_VAR 0 1
53134: PUSH
53135: LD_VAR 0 5
53139: PUSH
53140: FOR_IN
53141: IFFALSE 53282
// begin d := rand ( 0 , 5 ) ;
53143: LD_ADDR_VAR 0 4
53147: PUSH
53148: LD_INT 0
53150: PPUSH
53151: LD_INT 5
53153: PPUSH
53154: CALL_OW 12
53158: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
53159: LD_ADDR_VAR 0 2
53163: PUSH
53164: LD_VAR 0 1
53168: PPUSH
53169: CALL_OW 250
53173: PPUSH
53174: LD_VAR 0 4
53178: PPUSH
53179: LD_INT 3
53181: PPUSH
53182: LD_INT 12
53184: PPUSH
53185: CALL_OW 12
53189: PPUSH
53190: CALL_OW 272
53194: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
53195: LD_ADDR_VAR 0 3
53199: PUSH
53200: LD_VAR 0 1
53204: PPUSH
53205: CALL_OW 251
53209: PPUSH
53210: LD_VAR 0 4
53214: PPUSH
53215: LD_INT 3
53217: PPUSH
53218: LD_INT 12
53220: PPUSH
53221: CALL_OW 12
53225: PPUSH
53226: CALL_OW 273
53230: ST_TO_ADDR
// if ValidHex ( x , y ) then
53231: LD_VAR 0 2
53235: PPUSH
53236: LD_VAR 0 3
53240: PPUSH
53241: CALL_OW 488
53245: IFFALSE 53280
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
53247: LD_VAR 0 1
53251: PPUSH
53252: LD_VAR 0 2
53256: PPUSH
53257: LD_VAR 0 3
53261: PPUSH
53262: LD_INT 3
53264: PPUSH
53265: LD_INT 6
53267: PPUSH
53268: CALL_OW 12
53272: PPUSH
53273: LD_INT 1
53275: PPUSH
53276: CALL_OW 483
// end ;
53280: GO 53140
53282: POP
53283: POP
// end ;
53284: PPOPN 5
53286: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
53287: LD_EXP 37
53291: PUSH
53292: LD_EXP 72
53296: AND
53297: IFFALSE 53391
53299: GO 53301
53301: DISABLE
53302: LD_INT 0
53304: PPUSH
53305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
53306: LD_ADDR_VAR 0 2
53310: PUSH
53311: LD_INT 22
53313: PUSH
53314: LD_OWVAR 2
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 32
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 21
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: LIST
53347: PPUSH
53348: CALL_OW 69
53352: ST_TO_ADDR
// if not tmp then
53353: LD_VAR 0 2
53357: NOT
53358: IFFALSE 53362
// exit ;
53360: GO 53391
// for i in tmp do
53362: LD_ADDR_VAR 0 1
53366: PUSH
53367: LD_VAR 0 2
53371: PUSH
53372: FOR_IN
53373: IFFALSE 53389
// SetFuel ( i , 0 ) ;
53375: LD_VAR 0 1
53379: PPUSH
53380: LD_INT 0
53382: PPUSH
53383: CALL_OW 240
53387: GO 53372
53389: POP
53390: POP
// end ;
53391: PPOPN 2
53393: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
53394: LD_EXP 37
53398: PUSH
53399: LD_EXP 73
53403: AND
53404: IFFALSE 53470
53406: GO 53408
53408: DISABLE
53409: LD_INT 0
53411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53412: LD_ADDR_VAR 0 1
53416: PUSH
53417: LD_INT 22
53419: PUSH
53420: LD_OWVAR 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 30
53431: PUSH
53432: LD_INT 29
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PPUSH
53443: CALL_OW 69
53447: ST_TO_ADDR
// if not tmp then
53448: LD_VAR 0 1
53452: NOT
53453: IFFALSE 53457
// exit ;
53455: GO 53470
// DestroyUnit ( tmp [ 1 ] ) ;
53457: LD_VAR 0 1
53461: PUSH
53462: LD_INT 1
53464: ARRAY
53465: PPUSH
53466: CALL_OW 65
// end ;
53470: PPOPN 1
53472: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
53473: LD_EXP 37
53477: PUSH
53478: LD_EXP 75
53482: AND
53483: IFFALSE 53612
53485: GO 53487
53487: DISABLE
53488: LD_INT 0
53490: PPUSH
// begin uc_side := 0 ;
53491: LD_ADDR_OWVAR 20
53495: PUSH
53496: LD_INT 0
53498: ST_TO_ADDR
// uc_nation := nation_arabian ;
53499: LD_ADDR_OWVAR 21
53503: PUSH
53504: LD_INT 2
53506: ST_TO_ADDR
// hc_gallery :=  ;
53507: LD_ADDR_OWVAR 33
53511: PUSH
53512: LD_STRING 
53514: ST_TO_ADDR
// hc_name :=  ;
53515: LD_ADDR_OWVAR 26
53519: PUSH
53520: LD_STRING 
53522: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
53523: LD_INT 1
53525: PPUSH
53526: LD_INT 11
53528: PPUSH
53529: LD_INT 10
53531: PPUSH
53532: CALL_OW 380
// un := CreateHuman ;
53536: LD_ADDR_VAR 0 1
53540: PUSH
53541: CALL_OW 44
53545: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53546: LD_VAR 0 1
53550: PPUSH
53551: LD_INT 1
53553: PPUSH
53554: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53558: LD_INT 35
53560: PPUSH
53561: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53565: LD_VAR 0 1
53569: PPUSH
53570: LD_INT 22
53572: PUSH
53573: LD_OWVAR 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PPUSH
53582: CALL_OW 69
53586: PPUSH
53587: LD_VAR 0 1
53591: PPUSH
53592: CALL_OW 74
53596: PPUSH
53597: CALL_OW 115
// until IsDead ( un ) ;
53601: LD_VAR 0 1
53605: PPUSH
53606: CALL_OW 301
53610: IFFALSE 53558
// end ;
53612: PPOPN 1
53614: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
53615: LD_EXP 37
53619: PUSH
53620: LD_EXP 77
53624: AND
53625: IFFALSE 53637
53627: GO 53629
53629: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
53630: LD_STRING earthquake(getX(game), 0, 32)
53632: PPUSH
53633: CALL_OW 559
53637: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
53638: LD_EXP 37
53642: PUSH
53643: LD_EXP 78
53647: AND
53648: IFFALSE 53739
53650: GO 53652
53652: DISABLE
53653: LD_INT 0
53655: PPUSH
// begin enable ;
53656: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
53657: LD_ADDR_VAR 0 1
53661: PUSH
53662: LD_INT 22
53664: PUSH
53665: LD_OWVAR 2
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 21
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 33
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: LIST
53698: PPUSH
53699: CALL_OW 69
53703: ST_TO_ADDR
// if not tmp then
53704: LD_VAR 0 1
53708: NOT
53709: IFFALSE 53713
// exit ;
53711: GO 53739
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
53713: LD_VAR 0 1
53717: PUSH
53718: LD_INT 1
53720: PPUSH
53721: LD_VAR 0 1
53725: PPUSH
53726: CALL_OW 12
53730: ARRAY
53731: PPUSH
53732: LD_INT 1
53734: PPUSH
53735: CALL_OW 234
// end ;
53739: PPOPN 1
53741: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
53742: LD_EXP 37
53746: PUSH
53747: LD_EXP 79
53751: AND
53752: IFFALSE 53893
53754: GO 53756
53756: DISABLE
53757: LD_INT 0
53759: PPUSH
53760: PPUSH
53761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53762: LD_ADDR_VAR 0 3
53766: PUSH
53767: LD_INT 22
53769: PUSH
53770: LD_OWVAR 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 25
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PPUSH
53793: CALL_OW 69
53797: ST_TO_ADDR
// if not tmp then
53798: LD_VAR 0 3
53802: NOT
53803: IFFALSE 53807
// exit ;
53805: GO 53893
// un := tmp [ rand ( 1 , tmp ) ] ;
53807: LD_ADDR_VAR 0 2
53811: PUSH
53812: LD_VAR 0 3
53816: PUSH
53817: LD_INT 1
53819: PPUSH
53820: LD_VAR 0 3
53824: PPUSH
53825: CALL_OW 12
53829: ARRAY
53830: ST_TO_ADDR
// if Crawls ( un ) then
53831: LD_VAR 0 2
53835: PPUSH
53836: CALL_OW 318
53840: IFFALSE 53851
// ComWalk ( un ) ;
53842: LD_VAR 0 2
53846: PPUSH
53847: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
53851: LD_VAR 0 2
53855: PPUSH
53856: LD_INT 9
53858: PPUSH
53859: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
53863: LD_INT 28
53865: PPUSH
53866: LD_OWVAR 2
53870: PPUSH
53871: LD_INT 2
53873: PPUSH
53874: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
53878: LD_INT 29
53880: PPUSH
53881: LD_OWVAR 2
53885: PPUSH
53886: LD_INT 2
53888: PPUSH
53889: CALL_OW 322
// end ;
53893: PPOPN 3
53895: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
53896: LD_EXP 37
53900: PUSH
53901: LD_EXP 80
53905: AND
53906: IFFALSE 54017
53908: GO 53910
53910: DISABLE
53911: LD_INT 0
53913: PPUSH
53914: PPUSH
53915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53916: LD_ADDR_VAR 0 3
53920: PUSH
53921: LD_INT 22
53923: PUSH
53924: LD_OWVAR 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 25
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PPUSH
53947: CALL_OW 69
53951: ST_TO_ADDR
// if not tmp then
53952: LD_VAR 0 3
53956: NOT
53957: IFFALSE 53961
// exit ;
53959: GO 54017
// un := tmp [ rand ( 1 , tmp ) ] ;
53961: LD_ADDR_VAR 0 2
53965: PUSH
53966: LD_VAR 0 3
53970: PUSH
53971: LD_INT 1
53973: PPUSH
53974: LD_VAR 0 3
53978: PPUSH
53979: CALL_OW 12
53983: ARRAY
53984: ST_TO_ADDR
// if Crawls ( un ) then
53985: LD_VAR 0 2
53989: PPUSH
53990: CALL_OW 318
53994: IFFALSE 54005
// ComWalk ( un ) ;
53996: LD_VAR 0 2
54000: PPUSH
54001: CALL_OW 138
// SetClass ( un , class_mortar ) ;
54005: LD_VAR 0 2
54009: PPUSH
54010: LD_INT 8
54012: PPUSH
54013: CALL_OW 336
// end ;
54017: PPOPN 3
54019: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
54020: LD_EXP 37
54024: PUSH
54025: LD_EXP 81
54029: AND
54030: IFFALSE 54174
54032: GO 54034
54034: DISABLE
54035: LD_INT 0
54037: PPUSH
54038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
54039: LD_ADDR_VAR 0 2
54043: PUSH
54044: LD_INT 22
54046: PUSH
54047: LD_OWVAR 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 21
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 34
54071: PUSH
54072: LD_INT 12
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 34
54081: PUSH
54082: LD_INT 51
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 34
54091: PUSH
54092: LD_INT 32
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: LIST
54109: PPUSH
54110: CALL_OW 69
54114: ST_TO_ADDR
// if not tmp then
54115: LD_VAR 0 2
54119: NOT
54120: IFFALSE 54124
// exit ;
54122: GO 54174
// for i in tmp do
54124: LD_ADDR_VAR 0 1
54128: PUSH
54129: LD_VAR 0 2
54133: PUSH
54134: FOR_IN
54135: IFFALSE 54172
// if GetCargo ( i , mat_artifact ) = 0 then
54137: LD_VAR 0 1
54141: PPUSH
54142: LD_INT 4
54144: PPUSH
54145: CALL_OW 289
54149: PUSH
54150: LD_INT 0
54152: EQUAL
54153: IFFALSE 54170
// SetCargo ( i , mat_siberit , 100 ) ;
54155: LD_VAR 0 1
54159: PPUSH
54160: LD_INT 3
54162: PPUSH
54163: LD_INT 100
54165: PPUSH
54166: CALL_OW 290
54170: GO 54134
54172: POP
54173: POP
// end ;
54174: PPOPN 2
54176: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
54177: LD_EXP 37
54181: PUSH
54182: LD_EXP 82
54186: AND
54187: IFFALSE 54370
54189: GO 54191
54191: DISABLE
54192: LD_INT 0
54194: PPUSH
54195: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54196: LD_ADDR_VAR 0 2
54200: PUSH
54201: LD_INT 22
54203: PUSH
54204: LD_OWVAR 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PPUSH
54213: CALL_OW 69
54217: ST_TO_ADDR
// if not tmp then
54218: LD_VAR 0 2
54222: NOT
54223: IFFALSE 54227
// exit ;
54225: GO 54370
// for i := 1 to 2 do
54227: LD_ADDR_VAR 0 1
54231: PUSH
54232: DOUBLE
54233: LD_INT 1
54235: DEC
54236: ST_TO_ADDR
54237: LD_INT 2
54239: PUSH
54240: FOR_TO
54241: IFFALSE 54368
// begin uc_side := your_side ;
54243: LD_ADDR_OWVAR 20
54247: PUSH
54248: LD_OWVAR 2
54252: ST_TO_ADDR
// uc_nation := nation_american ;
54253: LD_ADDR_OWVAR 21
54257: PUSH
54258: LD_INT 1
54260: ST_TO_ADDR
// vc_chassis := us_morphling ;
54261: LD_ADDR_OWVAR 37
54265: PUSH
54266: LD_INT 5
54268: ST_TO_ADDR
// vc_engine := engine_siberite ;
54269: LD_ADDR_OWVAR 39
54273: PUSH
54274: LD_INT 3
54276: ST_TO_ADDR
// vc_control := control_computer ;
54277: LD_ADDR_OWVAR 38
54281: PUSH
54282: LD_INT 3
54284: ST_TO_ADDR
// vc_weapon := us_double_laser ;
54285: LD_ADDR_OWVAR 40
54289: PUSH
54290: LD_INT 10
54292: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
54293: LD_VAR 0 2
54297: PUSH
54298: LD_INT 1
54300: ARRAY
54301: PPUSH
54302: CALL_OW 310
54306: NOT
54307: IFFALSE 54354
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
54309: CALL_OW 45
54313: PPUSH
54314: LD_VAR 0 2
54318: PUSH
54319: LD_INT 1
54321: ARRAY
54322: PPUSH
54323: CALL_OW 250
54327: PPUSH
54328: LD_VAR 0 2
54332: PUSH
54333: LD_INT 1
54335: ARRAY
54336: PPUSH
54337: CALL_OW 251
54341: PPUSH
54342: LD_INT 12
54344: PPUSH
54345: LD_INT 1
54347: PPUSH
54348: CALL_OW 50
54352: GO 54366
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
54354: CALL_OW 45
54358: PPUSH
54359: LD_INT 1
54361: PPUSH
54362: CALL_OW 51
// end ;
54366: GO 54240
54368: POP
54369: POP
// end ;
54370: PPOPN 2
54372: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
54373: LD_EXP 37
54377: PUSH
54378: LD_EXP 83
54382: AND
54383: IFFALSE 54605
54385: GO 54387
54387: DISABLE
54388: LD_INT 0
54390: PPUSH
54391: PPUSH
54392: PPUSH
54393: PPUSH
54394: PPUSH
54395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54396: LD_ADDR_VAR 0 6
54400: PUSH
54401: LD_INT 22
54403: PUSH
54404: LD_OWVAR 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 21
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: LD_INT 23
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: LIST
54444: PPUSH
54445: CALL_OW 69
54449: ST_TO_ADDR
// if not tmp then
54450: LD_VAR 0 6
54454: NOT
54455: IFFALSE 54459
// exit ;
54457: GO 54605
// s1 := rand ( 1 , 4 ) ;
54459: LD_ADDR_VAR 0 2
54463: PUSH
54464: LD_INT 1
54466: PPUSH
54467: LD_INT 4
54469: PPUSH
54470: CALL_OW 12
54474: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
54475: LD_ADDR_VAR 0 4
54479: PUSH
54480: LD_VAR 0 6
54484: PUSH
54485: LD_INT 1
54487: ARRAY
54488: PPUSH
54489: LD_VAR 0 2
54493: PPUSH
54494: CALL_OW 259
54498: ST_TO_ADDR
// if s1 = 1 then
54499: LD_VAR 0 2
54503: PUSH
54504: LD_INT 1
54506: EQUAL
54507: IFFALSE 54527
// s2 := rand ( 2 , 4 ) else
54509: LD_ADDR_VAR 0 3
54513: PUSH
54514: LD_INT 2
54516: PPUSH
54517: LD_INT 4
54519: PPUSH
54520: CALL_OW 12
54524: ST_TO_ADDR
54525: GO 54535
// s2 := 1 ;
54527: LD_ADDR_VAR 0 3
54531: PUSH
54532: LD_INT 1
54534: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
54535: LD_ADDR_VAR 0 5
54539: PUSH
54540: LD_VAR 0 6
54544: PUSH
54545: LD_INT 1
54547: ARRAY
54548: PPUSH
54549: LD_VAR 0 3
54553: PPUSH
54554: CALL_OW 259
54558: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
54559: LD_VAR 0 6
54563: PUSH
54564: LD_INT 1
54566: ARRAY
54567: PPUSH
54568: LD_VAR 0 2
54572: PPUSH
54573: LD_VAR 0 5
54577: PPUSH
54578: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
54582: LD_VAR 0 6
54586: PUSH
54587: LD_INT 1
54589: ARRAY
54590: PPUSH
54591: LD_VAR 0 3
54595: PPUSH
54596: LD_VAR 0 4
54600: PPUSH
54601: CALL_OW 237
// end ;
54605: PPOPN 6
54607: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
54608: LD_EXP 37
54612: PUSH
54613: LD_EXP 84
54617: AND
54618: IFFALSE 54697
54620: GO 54622
54622: DISABLE
54623: LD_INT 0
54625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
54626: LD_ADDR_VAR 0 1
54630: PUSH
54631: LD_INT 22
54633: PUSH
54634: LD_OWVAR 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 30
54645: PUSH
54646: LD_INT 3
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PPUSH
54657: CALL_OW 69
54661: ST_TO_ADDR
// if not tmp then
54662: LD_VAR 0 1
54666: NOT
54667: IFFALSE 54671
// exit ;
54669: GO 54697
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54671: LD_VAR 0 1
54675: PUSH
54676: LD_INT 1
54678: PPUSH
54679: LD_VAR 0 1
54683: PPUSH
54684: CALL_OW 12
54688: ARRAY
54689: PPUSH
54690: LD_INT 1
54692: PPUSH
54693: CALL_OW 234
// end ;
54697: PPOPN 1
54699: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
54700: LD_EXP 37
54704: PUSH
54705: LD_EXP 85
54709: AND
54710: IFFALSE 54822
54712: GO 54714
54714: DISABLE
54715: LD_INT 0
54717: PPUSH
54718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
54719: LD_ADDR_VAR 0 2
54723: PUSH
54724: LD_INT 22
54726: PUSH
54727: LD_OWVAR 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: LD_INT 30
54741: PUSH
54742: LD_INT 27
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 30
54751: PUSH
54752: LD_INT 26
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 30
54761: PUSH
54762: LD_INT 28
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PPUSH
54779: CALL_OW 69
54783: ST_TO_ADDR
// if not tmp then
54784: LD_VAR 0 2
54788: NOT
54789: IFFALSE 54793
// exit ;
54791: GO 54822
// for i in tmp do
54793: LD_ADDR_VAR 0 1
54797: PUSH
54798: LD_VAR 0 2
54802: PUSH
54803: FOR_IN
54804: IFFALSE 54820
// SetLives ( i , 1 ) ;
54806: LD_VAR 0 1
54810: PPUSH
54811: LD_INT 1
54813: PPUSH
54814: CALL_OW 234
54818: GO 54803
54820: POP
54821: POP
// end ;
54822: PPOPN 2
54824: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
54825: LD_EXP 37
54829: PUSH
54830: LD_EXP 86
54834: AND
54835: IFFALSE 55109
54837: GO 54839
54839: DISABLE
54840: LD_INT 0
54842: PPUSH
54843: PPUSH
54844: PPUSH
// begin i := rand ( 1 , 7 ) ;
54845: LD_ADDR_VAR 0 1
54849: PUSH
54850: LD_INT 1
54852: PPUSH
54853: LD_INT 7
54855: PPUSH
54856: CALL_OW 12
54860: ST_TO_ADDR
// case i of 1 :
54861: LD_VAR 0 1
54865: PUSH
54866: LD_INT 1
54868: DOUBLE
54869: EQUAL
54870: IFTRUE 54874
54872: GO 54884
54874: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
54875: LD_STRING earthquake(getX(game), 0, 32)
54877: PPUSH
54878: CALL_OW 559
54882: GO 55109
54884: LD_INT 2
54886: DOUBLE
54887: EQUAL
54888: IFTRUE 54892
54890: GO 54906
54892: POP
// begin ToLua ( displayStucuk(); ) ;
54893: LD_STRING displayStucuk();
54895: PPUSH
54896: CALL_OW 559
// ResetFog ;
54900: CALL_OW 335
// end ; 3 :
54904: GO 55109
54906: LD_INT 3
54908: DOUBLE
54909: EQUAL
54910: IFTRUE 54914
54912: GO 55018
54914: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54915: LD_ADDR_VAR 0 2
54919: PUSH
54920: LD_INT 22
54922: PUSH
54923: LD_OWVAR 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 25
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PPUSH
54946: CALL_OW 69
54950: ST_TO_ADDR
// if not tmp then
54951: LD_VAR 0 2
54955: NOT
54956: IFFALSE 54960
// exit ;
54958: GO 55109
// un := tmp [ rand ( 1 , tmp ) ] ;
54960: LD_ADDR_VAR 0 3
54964: PUSH
54965: LD_VAR 0 2
54969: PUSH
54970: LD_INT 1
54972: PPUSH
54973: LD_VAR 0 2
54977: PPUSH
54978: CALL_OW 12
54982: ARRAY
54983: ST_TO_ADDR
// if Crawls ( un ) then
54984: LD_VAR 0 3
54988: PPUSH
54989: CALL_OW 318
54993: IFFALSE 55004
// ComWalk ( un ) ;
54995: LD_VAR 0 3
54999: PPUSH
55000: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55004: LD_VAR 0 3
55008: PPUSH
55009: LD_INT 8
55011: PPUSH
55012: CALL_OW 336
// end ; 4 :
55016: GO 55109
55018: LD_INT 4
55020: DOUBLE
55021: EQUAL
55022: IFTRUE 55026
55024: GO 55087
55026: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55027: LD_ADDR_VAR 0 2
55031: PUSH
55032: LD_INT 22
55034: PUSH
55035: LD_OWVAR 2
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 30
55046: PUSH
55047: LD_INT 29
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PPUSH
55058: CALL_OW 69
55062: ST_TO_ADDR
// if not tmp then
55063: LD_VAR 0 2
55067: NOT
55068: IFFALSE 55072
// exit ;
55070: GO 55109
// DestroyUnit ( tmp [ 1 ] ) ;
55072: LD_VAR 0 2
55076: PUSH
55077: LD_INT 1
55079: ARRAY
55080: PPUSH
55081: CALL_OW 65
// end ; 5 .. 7 :
55085: GO 55109
55087: LD_INT 5
55089: DOUBLE
55090: GREATEREQUAL
55091: IFFALSE 55099
55093: LD_INT 7
55095: DOUBLE
55096: LESSEQUAL
55097: IFTRUE 55101
55099: GO 55108
55101: POP
// StreamSibBomb ; end ;
55102: CALL 51359 0 0
55106: GO 55109
55108: POP
// end ;
55109: PPOPN 3
55111: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
55112: LD_EXP 37
55116: PUSH
55117: LD_EXP 87
55121: AND
55122: IFFALSE 55278
55124: GO 55126
55126: DISABLE
55127: LD_INT 0
55129: PPUSH
55130: PPUSH
55131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
55132: LD_ADDR_VAR 0 2
55136: PUSH
55137: LD_INT 81
55139: PUSH
55140: LD_OWVAR 2
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: LD_INT 21
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 21
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: LIST
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PPUSH
55181: CALL_OW 69
55185: ST_TO_ADDR
// if not tmp then
55186: LD_VAR 0 2
55190: NOT
55191: IFFALSE 55195
// exit ;
55193: GO 55278
// p := 0 ;
55195: LD_ADDR_VAR 0 3
55199: PUSH
55200: LD_INT 0
55202: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55203: LD_INT 35
55205: PPUSH
55206: CALL_OW 67
// p := p + 1 ;
55210: LD_ADDR_VAR 0 3
55214: PUSH
55215: LD_VAR 0 3
55219: PUSH
55220: LD_INT 1
55222: PLUS
55223: ST_TO_ADDR
// for i in tmp do
55224: LD_ADDR_VAR 0 1
55228: PUSH
55229: LD_VAR 0 2
55233: PUSH
55234: FOR_IN
55235: IFFALSE 55266
// if GetLives ( i ) < 1000 then
55237: LD_VAR 0 1
55241: PPUSH
55242: CALL_OW 256
55246: PUSH
55247: LD_INT 1000
55249: LESS
55250: IFFALSE 55264
// SetLives ( i , 1000 ) ;
55252: LD_VAR 0 1
55256: PPUSH
55257: LD_INT 1000
55259: PPUSH
55260: CALL_OW 234
55264: GO 55234
55266: POP
55267: POP
// until p > 20 ;
55268: LD_VAR 0 3
55272: PUSH
55273: LD_INT 20
55275: GREATER
55276: IFFALSE 55203
// end ;
55278: PPOPN 3
55280: END
// every 0 0$1 trigger StreamModeActive and sTime do
55281: LD_EXP 37
55285: PUSH
55286: LD_EXP 88
55290: AND
55291: IFFALSE 55326
55293: GO 55295
55295: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
55296: LD_INT 28
55298: PPUSH
55299: LD_OWVAR 2
55303: PPUSH
55304: LD_INT 2
55306: PPUSH
55307: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
55311: LD_INT 30
55313: PPUSH
55314: LD_OWVAR 2
55318: PPUSH
55319: LD_INT 2
55321: PPUSH
55322: CALL_OW 322
// end ;
55326: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
55327: LD_EXP 37
55331: PUSH
55332: LD_EXP 89
55336: AND
55337: IFFALSE 55458
55339: GO 55341
55341: DISABLE
55342: LD_INT 0
55344: PPUSH
55345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55346: LD_ADDR_VAR 0 2
55350: PUSH
55351: LD_INT 22
55353: PUSH
55354: LD_OWVAR 2
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 21
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: LD_INT 23
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: PPUSH
55395: CALL_OW 69
55399: ST_TO_ADDR
// if not tmp then
55400: LD_VAR 0 2
55404: NOT
55405: IFFALSE 55409
// exit ;
55407: GO 55458
// for i in tmp do
55409: LD_ADDR_VAR 0 1
55413: PUSH
55414: LD_VAR 0 2
55418: PUSH
55419: FOR_IN
55420: IFFALSE 55456
// begin if Crawls ( i ) then
55422: LD_VAR 0 1
55426: PPUSH
55427: CALL_OW 318
55431: IFFALSE 55442
// ComWalk ( i ) ;
55433: LD_VAR 0 1
55437: PPUSH
55438: CALL_OW 138
// SetClass ( i , 2 ) ;
55442: LD_VAR 0 1
55446: PPUSH
55447: LD_INT 2
55449: PPUSH
55450: CALL_OW 336
// end ;
55454: GO 55419
55456: POP
55457: POP
// end ;
55458: PPOPN 2
55460: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
55461: LD_EXP 37
55465: PUSH
55466: LD_EXP 90
55470: AND
55471: IFFALSE 55752
55473: GO 55475
55475: DISABLE
55476: LD_INT 0
55478: PPUSH
55479: PPUSH
55480: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
55481: LD_OWVAR 2
55485: PPUSH
55486: LD_INT 9
55488: PPUSH
55489: LD_INT 1
55491: PPUSH
55492: LD_INT 1
55494: PPUSH
55495: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
55499: LD_INT 9
55501: PPUSH
55502: LD_OWVAR 2
55506: PPUSH
55507: CALL_OW 343
// uc_side := 9 ;
55511: LD_ADDR_OWVAR 20
55515: PUSH
55516: LD_INT 9
55518: ST_TO_ADDR
// uc_nation := 2 ;
55519: LD_ADDR_OWVAR 21
55523: PUSH
55524: LD_INT 2
55526: ST_TO_ADDR
// hc_name := Dark Warrior ;
55527: LD_ADDR_OWVAR 26
55531: PUSH
55532: LD_STRING Dark Warrior
55534: ST_TO_ADDR
// hc_gallery :=  ;
55535: LD_ADDR_OWVAR 33
55539: PUSH
55540: LD_STRING 
55542: ST_TO_ADDR
// hc_noskilllimit := true ;
55543: LD_ADDR_OWVAR 76
55547: PUSH
55548: LD_INT 1
55550: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
55551: LD_ADDR_OWVAR 31
55555: PUSH
55556: LD_INT 30
55558: PUSH
55559: LD_INT 30
55561: PUSH
55562: LD_INT 30
55564: PUSH
55565: LD_INT 30
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: ST_TO_ADDR
// un := CreateHuman ;
55574: LD_ADDR_VAR 0 3
55578: PUSH
55579: CALL_OW 44
55583: ST_TO_ADDR
// hc_noskilllimit := false ;
55584: LD_ADDR_OWVAR 76
55588: PUSH
55589: LD_INT 0
55591: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55592: LD_VAR 0 3
55596: PPUSH
55597: LD_INT 1
55599: PPUSH
55600: CALL_OW 51
// p := 0 ;
55604: LD_ADDR_VAR 0 2
55608: PUSH
55609: LD_INT 0
55611: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55612: LD_INT 35
55614: PPUSH
55615: CALL_OW 67
// p := p + 1 ;
55619: LD_ADDR_VAR 0 2
55623: PUSH
55624: LD_VAR 0 2
55628: PUSH
55629: LD_INT 1
55631: PLUS
55632: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
55633: LD_VAR 0 3
55637: PPUSH
55638: CALL_OW 256
55642: PUSH
55643: LD_INT 1000
55645: LESS
55646: IFFALSE 55660
// SetLives ( un , 1000 ) ;
55648: LD_VAR 0 3
55652: PPUSH
55653: LD_INT 1000
55655: PPUSH
55656: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
55660: LD_VAR 0 3
55664: PPUSH
55665: LD_INT 81
55667: PUSH
55668: LD_OWVAR 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 91
55679: PUSH
55680: LD_VAR 0 3
55684: PUSH
55685: LD_INT 30
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PPUSH
55697: CALL_OW 69
55701: PPUSH
55702: LD_VAR 0 3
55706: PPUSH
55707: CALL_OW 74
55711: PPUSH
55712: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
55716: LD_VAR 0 2
55720: PUSH
55721: LD_INT 60
55723: GREATER
55724: PUSH
55725: LD_VAR 0 3
55729: PPUSH
55730: CALL_OW 301
55734: OR
55735: IFFALSE 55612
// if un then
55737: LD_VAR 0 3
55741: IFFALSE 55752
// RemoveUnit ( un ) ;
55743: LD_VAR 0 3
55747: PPUSH
55748: CALL_OW 64
// end ;
55752: PPOPN 3
55754: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
55755: LD_INT 0
55757: PPUSH
// case cmd of 301 :
55758: LD_VAR 0 1
55762: PUSH
55763: LD_INT 301
55765: DOUBLE
55766: EQUAL
55767: IFTRUE 55771
55769: GO 55803
55771: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
55772: LD_VAR 0 6
55776: PPUSH
55777: LD_VAR 0 7
55781: PPUSH
55782: LD_VAR 0 8
55786: PPUSH
55787: LD_VAR 0 4
55791: PPUSH
55792: LD_VAR 0 5
55796: PPUSH
55797: CALL 57004 0 5
55801: GO 55924
55803: LD_INT 302
55805: DOUBLE
55806: EQUAL
55807: IFTRUE 55811
55809: GO 55848
55811: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
55812: LD_VAR 0 6
55816: PPUSH
55817: LD_VAR 0 7
55821: PPUSH
55822: LD_VAR 0 8
55826: PPUSH
55827: LD_VAR 0 9
55831: PPUSH
55832: LD_VAR 0 4
55836: PPUSH
55837: LD_VAR 0 5
55841: PPUSH
55842: CALL 57095 0 6
55846: GO 55924
55848: LD_INT 303
55850: DOUBLE
55851: EQUAL
55852: IFTRUE 55856
55854: GO 55893
55856: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
55857: LD_VAR 0 6
55861: PPUSH
55862: LD_VAR 0 7
55866: PPUSH
55867: LD_VAR 0 8
55871: PPUSH
55872: LD_VAR 0 9
55876: PPUSH
55877: LD_VAR 0 4
55881: PPUSH
55882: LD_VAR 0 5
55886: PPUSH
55887: CALL 55929 0 6
55891: GO 55924
55893: LD_INT 304
55895: DOUBLE
55896: EQUAL
55897: IFTRUE 55901
55899: GO 55923
55901: POP
// hHackTeleport ( unit , x , y ) ; end ;
55902: LD_VAR 0 2
55906: PPUSH
55907: LD_VAR 0 4
55911: PPUSH
55912: LD_VAR 0 5
55916: PPUSH
55917: CALL 57688 0 3
55921: GO 55924
55923: POP
// end ;
55924: LD_VAR 0 12
55928: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
55929: LD_INT 0
55931: PPUSH
55932: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
55933: LD_VAR 0 1
55937: PUSH
55938: LD_INT 1
55940: LESS
55941: PUSH
55942: LD_VAR 0 1
55946: PUSH
55947: LD_INT 3
55949: GREATER
55950: OR
55951: PUSH
55952: LD_VAR 0 5
55956: PPUSH
55957: LD_VAR 0 6
55961: PPUSH
55962: CALL_OW 428
55966: OR
55967: IFFALSE 55971
// exit ;
55969: GO 56691
// uc_side := your_side ;
55971: LD_ADDR_OWVAR 20
55975: PUSH
55976: LD_OWVAR 2
55980: ST_TO_ADDR
// uc_nation := nation ;
55981: LD_ADDR_OWVAR 21
55985: PUSH
55986: LD_VAR 0 1
55990: ST_TO_ADDR
// bc_level = 1 ;
55991: LD_ADDR_OWVAR 43
55995: PUSH
55996: LD_INT 1
55998: ST_TO_ADDR
// case btype of 1 :
55999: LD_VAR 0 2
56003: PUSH
56004: LD_INT 1
56006: DOUBLE
56007: EQUAL
56008: IFTRUE 56012
56010: GO 56023
56012: POP
// bc_type := b_depot ; 2 :
56013: LD_ADDR_OWVAR 42
56017: PUSH
56018: LD_INT 0
56020: ST_TO_ADDR
56021: GO 56635
56023: LD_INT 2
56025: DOUBLE
56026: EQUAL
56027: IFTRUE 56031
56029: GO 56042
56031: POP
// bc_type := b_warehouse ; 3 :
56032: LD_ADDR_OWVAR 42
56036: PUSH
56037: LD_INT 1
56039: ST_TO_ADDR
56040: GO 56635
56042: LD_INT 3
56044: DOUBLE
56045: EQUAL
56046: IFTRUE 56050
56048: GO 56061
56050: POP
// bc_type := b_lab ; 4 .. 9 :
56051: LD_ADDR_OWVAR 42
56055: PUSH
56056: LD_INT 6
56058: ST_TO_ADDR
56059: GO 56635
56061: LD_INT 4
56063: DOUBLE
56064: GREATEREQUAL
56065: IFFALSE 56073
56067: LD_INT 9
56069: DOUBLE
56070: LESSEQUAL
56071: IFTRUE 56075
56073: GO 56127
56075: POP
// begin bc_type := b_lab_half ;
56076: LD_ADDR_OWVAR 42
56080: PUSH
56081: LD_INT 7
56083: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
56084: LD_ADDR_OWVAR 44
56088: PUSH
56089: LD_INT 10
56091: PUSH
56092: LD_INT 11
56094: PUSH
56095: LD_INT 12
56097: PUSH
56098: LD_INT 15
56100: PUSH
56101: LD_INT 14
56103: PUSH
56104: LD_INT 13
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: PUSH
56115: LD_VAR 0 2
56119: PUSH
56120: LD_INT 3
56122: MINUS
56123: ARRAY
56124: ST_TO_ADDR
// end ; 10 .. 13 :
56125: GO 56635
56127: LD_INT 10
56129: DOUBLE
56130: GREATEREQUAL
56131: IFFALSE 56139
56133: LD_INT 13
56135: DOUBLE
56136: LESSEQUAL
56137: IFTRUE 56141
56139: GO 56218
56141: POP
// begin bc_type := b_lab_full ;
56142: LD_ADDR_OWVAR 42
56146: PUSH
56147: LD_INT 8
56149: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
56150: LD_ADDR_OWVAR 44
56154: PUSH
56155: LD_INT 10
56157: PUSH
56158: LD_INT 12
56160: PUSH
56161: LD_INT 14
56163: PUSH
56164: LD_INT 13
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: PUSH
56173: LD_VAR 0 2
56177: PUSH
56178: LD_INT 9
56180: MINUS
56181: ARRAY
56182: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
56183: LD_ADDR_OWVAR 45
56187: PUSH
56188: LD_INT 11
56190: PUSH
56191: LD_INT 15
56193: PUSH
56194: LD_INT 12
56196: PUSH
56197: LD_INT 15
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: PUSH
56206: LD_VAR 0 2
56210: PUSH
56211: LD_INT 9
56213: MINUS
56214: ARRAY
56215: ST_TO_ADDR
// end ; 14 :
56216: GO 56635
56218: LD_INT 14
56220: DOUBLE
56221: EQUAL
56222: IFTRUE 56226
56224: GO 56237
56226: POP
// bc_type := b_workshop ; 15 :
56227: LD_ADDR_OWVAR 42
56231: PUSH
56232: LD_INT 2
56234: ST_TO_ADDR
56235: GO 56635
56237: LD_INT 15
56239: DOUBLE
56240: EQUAL
56241: IFTRUE 56245
56243: GO 56256
56245: POP
// bc_type := b_factory ; 16 :
56246: LD_ADDR_OWVAR 42
56250: PUSH
56251: LD_INT 3
56253: ST_TO_ADDR
56254: GO 56635
56256: LD_INT 16
56258: DOUBLE
56259: EQUAL
56260: IFTRUE 56264
56262: GO 56275
56264: POP
// bc_type := b_ext_gun ; 17 :
56265: LD_ADDR_OWVAR 42
56269: PUSH
56270: LD_INT 17
56272: ST_TO_ADDR
56273: GO 56635
56275: LD_INT 17
56277: DOUBLE
56278: EQUAL
56279: IFTRUE 56283
56281: GO 56311
56283: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
56284: LD_ADDR_OWVAR 42
56288: PUSH
56289: LD_INT 19
56291: PUSH
56292: LD_INT 23
56294: PUSH
56295: LD_INT 19
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: LIST
56302: PUSH
56303: LD_VAR 0 1
56307: ARRAY
56308: ST_TO_ADDR
56309: GO 56635
56311: LD_INT 18
56313: DOUBLE
56314: EQUAL
56315: IFTRUE 56319
56317: GO 56330
56319: POP
// bc_type := b_ext_radar ; 19 :
56320: LD_ADDR_OWVAR 42
56324: PUSH
56325: LD_INT 20
56327: ST_TO_ADDR
56328: GO 56635
56330: LD_INT 19
56332: DOUBLE
56333: EQUAL
56334: IFTRUE 56338
56336: GO 56349
56338: POP
// bc_type := b_ext_radio ; 20 :
56339: LD_ADDR_OWVAR 42
56343: PUSH
56344: LD_INT 22
56346: ST_TO_ADDR
56347: GO 56635
56349: LD_INT 20
56351: DOUBLE
56352: EQUAL
56353: IFTRUE 56357
56355: GO 56368
56357: POP
// bc_type := b_ext_siberium ; 21 :
56358: LD_ADDR_OWVAR 42
56362: PUSH
56363: LD_INT 21
56365: ST_TO_ADDR
56366: GO 56635
56368: LD_INT 21
56370: DOUBLE
56371: EQUAL
56372: IFTRUE 56376
56374: GO 56387
56376: POP
// bc_type := b_ext_computer ; 22 :
56377: LD_ADDR_OWVAR 42
56381: PUSH
56382: LD_INT 24
56384: ST_TO_ADDR
56385: GO 56635
56387: LD_INT 22
56389: DOUBLE
56390: EQUAL
56391: IFTRUE 56395
56393: GO 56406
56395: POP
// bc_type := b_ext_track ; 23 :
56396: LD_ADDR_OWVAR 42
56400: PUSH
56401: LD_INT 16
56403: ST_TO_ADDR
56404: GO 56635
56406: LD_INT 23
56408: DOUBLE
56409: EQUAL
56410: IFTRUE 56414
56412: GO 56425
56414: POP
// bc_type := b_ext_laser ; 24 :
56415: LD_ADDR_OWVAR 42
56419: PUSH
56420: LD_INT 25
56422: ST_TO_ADDR
56423: GO 56635
56425: LD_INT 24
56427: DOUBLE
56428: EQUAL
56429: IFTRUE 56433
56431: GO 56444
56433: POP
// bc_type := b_control_tower ; 25 :
56434: LD_ADDR_OWVAR 42
56438: PUSH
56439: LD_INT 36
56441: ST_TO_ADDR
56442: GO 56635
56444: LD_INT 25
56446: DOUBLE
56447: EQUAL
56448: IFTRUE 56452
56450: GO 56463
56452: POP
// bc_type := b_breastwork ; 26 :
56453: LD_ADDR_OWVAR 42
56457: PUSH
56458: LD_INT 31
56460: ST_TO_ADDR
56461: GO 56635
56463: LD_INT 26
56465: DOUBLE
56466: EQUAL
56467: IFTRUE 56471
56469: GO 56482
56471: POP
// bc_type := b_bunker ; 27 :
56472: LD_ADDR_OWVAR 42
56476: PUSH
56477: LD_INT 32
56479: ST_TO_ADDR
56480: GO 56635
56482: LD_INT 27
56484: DOUBLE
56485: EQUAL
56486: IFTRUE 56490
56488: GO 56501
56490: POP
// bc_type := b_turret ; 28 :
56491: LD_ADDR_OWVAR 42
56495: PUSH
56496: LD_INT 33
56498: ST_TO_ADDR
56499: GO 56635
56501: LD_INT 28
56503: DOUBLE
56504: EQUAL
56505: IFTRUE 56509
56507: GO 56520
56509: POP
// bc_type := b_armoury ; 29 :
56510: LD_ADDR_OWVAR 42
56514: PUSH
56515: LD_INT 4
56517: ST_TO_ADDR
56518: GO 56635
56520: LD_INT 29
56522: DOUBLE
56523: EQUAL
56524: IFTRUE 56528
56526: GO 56539
56528: POP
// bc_type := b_barracks ; 30 :
56529: LD_ADDR_OWVAR 42
56533: PUSH
56534: LD_INT 5
56536: ST_TO_ADDR
56537: GO 56635
56539: LD_INT 30
56541: DOUBLE
56542: EQUAL
56543: IFTRUE 56547
56545: GO 56558
56547: POP
// bc_type := b_solar_power ; 31 :
56548: LD_ADDR_OWVAR 42
56552: PUSH
56553: LD_INT 27
56555: ST_TO_ADDR
56556: GO 56635
56558: LD_INT 31
56560: DOUBLE
56561: EQUAL
56562: IFTRUE 56566
56564: GO 56577
56566: POP
// bc_type := b_oil_power ; 32 :
56567: LD_ADDR_OWVAR 42
56571: PUSH
56572: LD_INT 26
56574: ST_TO_ADDR
56575: GO 56635
56577: LD_INT 32
56579: DOUBLE
56580: EQUAL
56581: IFTRUE 56585
56583: GO 56596
56585: POP
// bc_type := b_siberite_power ; 33 :
56586: LD_ADDR_OWVAR 42
56590: PUSH
56591: LD_INT 28
56593: ST_TO_ADDR
56594: GO 56635
56596: LD_INT 33
56598: DOUBLE
56599: EQUAL
56600: IFTRUE 56604
56602: GO 56615
56604: POP
// bc_type := b_oil_mine ; 34 :
56605: LD_ADDR_OWVAR 42
56609: PUSH
56610: LD_INT 29
56612: ST_TO_ADDR
56613: GO 56635
56615: LD_INT 34
56617: DOUBLE
56618: EQUAL
56619: IFTRUE 56623
56621: GO 56634
56623: POP
// bc_type := b_siberite_mine ; end ;
56624: LD_ADDR_OWVAR 42
56628: PUSH
56629: LD_INT 30
56631: ST_TO_ADDR
56632: GO 56635
56634: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
56635: LD_ADDR_VAR 0 8
56639: PUSH
56640: LD_VAR 0 5
56644: PPUSH
56645: LD_VAR 0 6
56649: PPUSH
56650: LD_VAR 0 3
56654: PPUSH
56655: CALL_OW 47
56659: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
56660: LD_OWVAR 42
56664: PUSH
56665: LD_INT 32
56667: PUSH
56668: LD_INT 33
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: IN
56675: IFFALSE 56691
// PlaceWeaponTurret ( b , weapon ) ;
56677: LD_VAR 0 8
56681: PPUSH
56682: LD_VAR 0 4
56686: PPUSH
56687: CALL_OW 431
// end ;
56691: LD_VAR 0 7
56695: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
56696: LD_INT 0
56698: PPUSH
56699: PPUSH
56700: PPUSH
56701: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56702: LD_ADDR_VAR 0 4
56706: PUSH
56707: LD_INT 22
56709: PUSH
56710: LD_OWVAR 2
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 30
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 30
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PPUSH
56751: CALL_OW 69
56755: ST_TO_ADDR
// if not tmp then
56756: LD_VAR 0 4
56760: NOT
56761: IFFALSE 56765
// exit ;
56763: GO 56824
// for i in tmp do
56765: LD_ADDR_VAR 0 2
56769: PUSH
56770: LD_VAR 0 4
56774: PUSH
56775: FOR_IN
56776: IFFALSE 56822
// for j = 1 to 3 do
56778: LD_ADDR_VAR 0 3
56782: PUSH
56783: DOUBLE
56784: LD_INT 1
56786: DEC
56787: ST_TO_ADDR
56788: LD_INT 3
56790: PUSH
56791: FOR_TO
56792: IFFALSE 56818
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
56794: LD_VAR 0 2
56798: PPUSH
56799: CALL_OW 274
56803: PPUSH
56804: LD_VAR 0 3
56808: PPUSH
56809: LD_INT 99999
56811: PPUSH
56812: CALL_OW 277
56816: GO 56791
56818: POP
56819: POP
56820: GO 56775
56822: POP
56823: POP
// end ;
56824: LD_VAR 0 1
56828: RET
// export function hHackSetLevel10 ; var i , j ; begin
56829: LD_INT 0
56831: PPUSH
56832: PPUSH
56833: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
56834: LD_ADDR_VAR 0 2
56838: PUSH
56839: LD_INT 21
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PPUSH
56849: CALL_OW 69
56853: PUSH
56854: FOR_IN
56855: IFFALSE 56907
// if IsSelected ( i ) then
56857: LD_VAR 0 2
56861: PPUSH
56862: CALL_OW 306
56866: IFFALSE 56905
// begin for j := 1 to 4 do
56868: LD_ADDR_VAR 0 3
56872: PUSH
56873: DOUBLE
56874: LD_INT 1
56876: DEC
56877: ST_TO_ADDR
56878: LD_INT 4
56880: PUSH
56881: FOR_TO
56882: IFFALSE 56903
// SetSkill ( i , j , 10 ) ;
56884: LD_VAR 0 2
56888: PPUSH
56889: LD_VAR 0 3
56893: PPUSH
56894: LD_INT 10
56896: PPUSH
56897: CALL_OW 237
56901: GO 56881
56903: POP
56904: POP
// end ;
56905: GO 56854
56907: POP
56908: POP
// end ;
56909: LD_VAR 0 1
56913: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
56914: LD_INT 0
56916: PPUSH
56917: PPUSH
56918: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
56919: LD_ADDR_VAR 0 2
56923: PUSH
56924: LD_INT 22
56926: PUSH
56927: LD_OWVAR 2
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 21
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PPUSH
56950: CALL_OW 69
56954: PUSH
56955: FOR_IN
56956: IFFALSE 56997
// begin for j := 1 to 4 do
56958: LD_ADDR_VAR 0 3
56962: PUSH
56963: DOUBLE
56964: LD_INT 1
56966: DEC
56967: ST_TO_ADDR
56968: LD_INT 4
56970: PUSH
56971: FOR_TO
56972: IFFALSE 56993
// SetSkill ( i , j , 10 ) ;
56974: LD_VAR 0 2
56978: PPUSH
56979: LD_VAR 0 3
56983: PPUSH
56984: LD_INT 10
56986: PPUSH
56987: CALL_OW 237
56991: GO 56971
56993: POP
56994: POP
// end ;
56995: GO 56955
56997: POP
56998: POP
// end ;
56999: LD_VAR 0 1
57003: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
57004: LD_INT 0
57006: PPUSH
// uc_side := your_side ;
57007: LD_ADDR_OWVAR 20
57011: PUSH
57012: LD_OWVAR 2
57016: ST_TO_ADDR
// uc_nation := nation ;
57017: LD_ADDR_OWVAR 21
57021: PUSH
57022: LD_VAR 0 1
57026: ST_TO_ADDR
// InitHc ;
57027: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
57031: LD_INT 0
57033: PPUSH
57034: LD_VAR 0 2
57038: PPUSH
57039: LD_VAR 0 3
57043: PPUSH
57044: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
57048: LD_VAR 0 4
57052: PPUSH
57053: LD_VAR 0 5
57057: PPUSH
57058: CALL_OW 428
57062: PUSH
57063: LD_INT 0
57065: EQUAL
57066: IFFALSE 57090
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
57068: CALL_OW 44
57072: PPUSH
57073: LD_VAR 0 4
57077: PPUSH
57078: LD_VAR 0 5
57082: PPUSH
57083: LD_INT 1
57085: PPUSH
57086: CALL_OW 48
// end ;
57090: LD_VAR 0 6
57094: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
57095: LD_INT 0
57097: PPUSH
57098: PPUSH
// uc_side := your_side ;
57099: LD_ADDR_OWVAR 20
57103: PUSH
57104: LD_OWVAR 2
57108: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
57109: LD_VAR 0 1
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: LD_INT 3
57122: PUSH
57123: LD_INT 4
57125: PUSH
57126: LD_INT 5
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: IN
57136: IFFALSE 57148
// uc_nation := nation_american else
57138: LD_ADDR_OWVAR 21
57142: PUSH
57143: LD_INT 1
57145: ST_TO_ADDR
57146: GO 57191
// if chassis in [ 11 , 12 , 13 , 14 ] then
57148: LD_VAR 0 1
57152: PUSH
57153: LD_INT 11
57155: PUSH
57156: LD_INT 12
57158: PUSH
57159: LD_INT 13
57161: PUSH
57162: LD_INT 14
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: IN
57171: IFFALSE 57183
// uc_nation := nation_arabian else
57173: LD_ADDR_OWVAR 21
57177: PUSH
57178: LD_INT 2
57180: ST_TO_ADDR
57181: GO 57191
// uc_nation := nation_russian ;
57183: LD_ADDR_OWVAR 21
57187: PUSH
57188: LD_INT 3
57190: ST_TO_ADDR
// vc_chassis := chassis ;
57191: LD_ADDR_OWVAR 37
57195: PUSH
57196: LD_VAR 0 1
57200: ST_TO_ADDR
// vc_engine := engine ;
57201: LD_ADDR_OWVAR 39
57205: PUSH
57206: LD_VAR 0 2
57210: ST_TO_ADDR
// vc_control := control ;
57211: LD_ADDR_OWVAR 38
57215: PUSH
57216: LD_VAR 0 3
57220: ST_TO_ADDR
// vc_weapon := weapon ;
57221: LD_ADDR_OWVAR 40
57225: PUSH
57226: LD_VAR 0 4
57230: ST_TO_ADDR
// un := CreateVehicle ;
57231: LD_ADDR_VAR 0 8
57235: PUSH
57236: CALL_OW 45
57240: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
57241: LD_VAR 0 8
57245: PPUSH
57246: LD_INT 0
57248: PPUSH
57249: LD_INT 5
57251: PPUSH
57252: CALL_OW 12
57256: PPUSH
57257: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
57261: LD_VAR 0 8
57265: PPUSH
57266: LD_VAR 0 5
57270: PPUSH
57271: LD_VAR 0 6
57275: PPUSH
57276: LD_INT 1
57278: PPUSH
57279: CALL_OW 48
// end ;
57283: LD_VAR 0 7
57287: RET
// export hInvincible ; every 1 do
57288: GO 57290
57290: DISABLE
// hInvincible := [ ] ;
57291: LD_ADDR_EXP 91
57295: PUSH
57296: EMPTY
57297: ST_TO_ADDR
57298: END
// every 10 do var i ;
57299: GO 57301
57301: DISABLE
57302: LD_INT 0
57304: PPUSH
// begin enable ;
57305: ENABLE
// if not hInvincible then
57306: LD_EXP 91
57310: NOT
57311: IFFALSE 57315
// exit ;
57313: GO 57359
// for i in hInvincible do
57315: LD_ADDR_VAR 0 1
57319: PUSH
57320: LD_EXP 91
57324: PUSH
57325: FOR_IN
57326: IFFALSE 57357
// if GetLives ( i ) < 1000 then
57328: LD_VAR 0 1
57332: PPUSH
57333: CALL_OW 256
57337: PUSH
57338: LD_INT 1000
57340: LESS
57341: IFFALSE 57355
// SetLives ( i , 1000 ) ;
57343: LD_VAR 0 1
57347: PPUSH
57348: LD_INT 1000
57350: PPUSH
57351: CALL_OW 234
57355: GO 57325
57357: POP
57358: POP
// end ;
57359: PPOPN 1
57361: END
// export function hHackInvincible ; var i ; begin
57362: LD_INT 0
57364: PPUSH
57365: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
57366: LD_ADDR_VAR 0 2
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 21
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 21
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: PPUSH
57399: CALL_OW 69
57403: PUSH
57404: FOR_IN
57405: IFFALSE 57466
// if IsSelected ( i ) then
57407: LD_VAR 0 2
57411: PPUSH
57412: CALL_OW 306
57416: IFFALSE 57464
// begin if i in hInvincible then
57418: LD_VAR 0 2
57422: PUSH
57423: LD_EXP 91
57427: IN
57428: IFFALSE 57448
// hInvincible := hInvincible diff i else
57430: LD_ADDR_EXP 91
57434: PUSH
57435: LD_EXP 91
57439: PUSH
57440: LD_VAR 0 2
57444: DIFF
57445: ST_TO_ADDR
57446: GO 57464
// hInvincible := hInvincible union i ;
57448: LD_ADDR_EXP 91
57452: PUSH
57453: LD_EXP 91
57457: PUSH
57458: LD_VAR 0 2
57462: UNION
57463: ST_TO_ADDR
// end ;
57464: GO 57404
57466: POP
57467: POP
// end ;
57468: LD_VAR 0 1
57472: RET
// export function hHackInvisible ; var i , j ; begin
57473: LD_INT 0
57475: PPUSH
57476: PPUSH
57477: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
57478: LD_ADDR_VAR 0 2
57482: PUSH
57483: LD_INT 21
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PPUSH
57493: CALL_OW 69
57497: PUSH
57498: FOR_IN
57499: IFFALSE 57523
// if IsSelected ( i ) then
57501: LD_VAR 0 2
57505: PPUSH
57506: CALL_OW 306
57510: IFFALSE 57521
// ComForceInvisible ( i ) ;
57512: LD_VAR 0 2
57516: PPUSH
57517: CALL_OW 496
57521: GO 57498
57523: POP
57524: POP
// end ;
57525: LD_VAR 0 1
57529: RET
// export function hHackChangeYourSide ; begin
57530: LD_INT 0
57532: PPUSH
// if your_side = 8 then
57533: LD_OWVAR 2
57537: PUSH
57538: LD_INT 8
57540: EQUAL
57541: IFFALSE 57553
// your_side := 0 else
57543: LD_ADDR_OWVAR 2
57547: PUSH
57548: LD_INT 0
57550: ST_TO_ADDR
57551: GO 57567
// your_side := your_side + 1 ;
57553: LD_ADDR_OWVAR 2
57557: PUSH
57558: LD_OWVAR 2
57562: PUSH
57563: LD_INT 1
57565: PLUS
57566: ST_TO_ADDR
// end ;
57567: LD_VAR 0 1
57571: RET
// export function hHackChangeUnitSide ; var i , j ; begin
57572: LD_INT 0
57574: PPUSH
57575: PPUSH
57576: PPUSH
// for i in all_units do
57577: LD_ADDR_VAR 0 2
57581: PUSH
57582: LD_OWVAR 3
57586: PUSH
57587: FOR_IN
57588: IFFALSE 57666
// if IsSelected ( i ) then
57590: LD_VAR 0 2
57594: PPUSH
57595: CALL_OW 306
57599: IFFALSE 57664
// begin j := GetSide ( i ) ;
57601: LD_ADDR_VAR 0 3
57605: PUSH
57606: LD_VAR 0 2
57610: PPUSH
57611: CALL_OW 255
57615: ST_TO_ADDR
// if j = 8 then
57616: LD_VAR 0 3
57620: PUSH
57621: LD_INT 8
57623: EQUAL
57624: IFFALSE 57636
// j := 0 else
57626: LD_ADDR_VAR 0 3
57630: PUSH
57631: LD_INT 0
57633: ST_TO_ADDR
57634: GO 57650
// j := j + 1 ;
57636: LD_ADDR_VAR 0 3
57640: PUSH
57641: LD_VAR 0 3
57645: PUSH
57646: LD_INT 1
57648: PLUS
57649: ST_TO_ADDR
// SetSide ( i , j ) ;
57650: LD_VAR 0 2
57654: PPUSH
57655: LD_VAR 0 3
57659: PPUSH
57660: CALL_OW 235
// end ;
57664: GO 57587
57666: POP
57667: POP
// end ;
57668: LD_VAR 0 1
57672: RET
// export function hHackFog ; begin
57673: LD_INT 0
57675: PPUSH
// FogOff ( true ) ;
57676: LD_INT 1
57678: PPUSH
57679: CALL_OW 344
// end ;
57683: LD_VAR 0 1
57687: RET
// export function hHackTeleport ( unit , x , y ) ; begin
57688: LD_INT 0
57690: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
57691: LD_VAR 0 1
57695: PPUSH
57696: LD_VAR 0 2
57700: PPUSH
57701: LD_VAR 0 3
57705: PPUSH
57706: LD_INT 1
57708: PPUSH
57709: LD_INT 1
57711: PPUSH
57712: CALL_OW 483
// CenterOnXY ( x , y ) ;
57716: LD_VAR 0 2
57720: PPUSH
57721: LD_VAR 0 3
57725: PPUSH
57726: CALL_OW 84
// end ; end_of_file
57730: LD_VAR 0 4
57734: RET
