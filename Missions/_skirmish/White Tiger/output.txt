// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 63 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareAlliance ;
  37: CALL 79 0 0
// PrepareRussian ;
  41: CALL 446 0 0
// Action ;
  45: CALL 2366 0 0
// if debug then
  49: LD_EXP 1
  53: IFFALSE 62
// FogOff ( 7 ) ;
  55: LD_INT 7
  57: PPUSH
  58: CALL_OW 344
// end ;
  62: END
// export debug ; export function Init ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 1
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// end ; end_of_file
  74: LD_VAR 0 1
  78: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  79: LD_INT 0
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp := [ ] ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: EMPTY
  90: ST_TO_ADDR
// uc_side := 7 ;
  91: LD_ADDR_OWVAR 20
  95: PUSH
  96: LD_INT 7
  98: ST_TO_ADDR
// uc_nation := 1 ;
  99: LD_ADDR_OWVAR 21
 103: PUSH
 104: LD_INT 1
 106: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 107: LD_INT 5
 109: PPUSH
 110: LD_INT 3
 112: PPUSH
 113: LD_INT 3
 115: PPUSH
 116: LD_INT 99
 118: PPUSH
 119: LD_INT 100
 121: PPUSH
 122: CALL 7610 0 5
// allianceHack := CreateVehicle ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: CALL_OW 45
 135: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 136: LD_EXP 2
 140: PPUSH
 141: LD_INT 7
 143: PPUSH
 144: LD_INT 0
 146: PPUSH
 147: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 151: LD_INT 5
 153: PPUSH
 154: LD_INT 3
 156: PPUSH
 157: LD_INT 3
 159: PPUSH
 160: LD_INT 10
 162: PPUSH
 163: LD_INT 100
 165: PPUSH
 166: CALL 7610 0 5
// for i := 1 to 2 do
 170: LD_ADDR_VAR 0 2
 174: PUSH
 175: DOUBLE
 176: LD_INT 1
 178: DEC
 179: ST_TO_ADDR
 180: LD_INT 2
 182: PUSH
 183: FOR_TO
 184: IFFALSE 203
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 186: CALL_OW 45
 190: PPUSH
 191: LD_INT 7
 193: PPUSH
 194: LD_INT 0
 196: PPUSH
 197: CALL_OW 49
 201: GO 183
 203: POP
 204: POP
// uc_side := 4 ;
 205: LD_ADDR_OWVAR 20
 209: PUSH
 210: LD_INT 4
 212: ST_TO_ADDR
// uc_nation := 1 ;
 213: LD_ADDR_OWVAR 21
 217: PUSH
 218: LD_INT 1
 220: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 9
 226: PPUSH
 227: CALL_OW 383
// allianceMechanic := CreateHuman ;
 231: LD_ADDR_EXP 3
 235: PUSH
 236: CALL_OW 44
 240: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 241: LD_EXP 3
 245: PPUSH
 246: LD_INT 96
 248: PPUSH
 249: CALL_OW 52
// end ;
 253: LD_VAR 0 1
 257: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 258: LD_INT 0
 260: PPUSH
 261: PPUSH
 262: PPUSH
// uc_side := 7 ;
 263: LD_ADDR_OWVAR 20
 267: PUSH
 268: LD_INT 7
 270: ST_TO_ADDR
// uc_nation := 1 ;
 271: LD_ADDR_OWVAR 21
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 3
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: LD_OWVAR 67
 307: ARRAY
 308: PUSH
 309: FOR_TO
 310: IFFALSE 380
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 312: LD_INT 5
 314: PPUSH
 315: LD_INT 3
 317: PPUSH
 318: LD_INT 3
 320: PPUSH
 321: LD_INT 7
 323: PPUSH
 324: LD_INT 100
 326: PPUSH
 327: CALL 7610 0 5
// un := CreateVehicle ;
 331: LD_ADDR_VAR 0 3
 335: PUSH
 336: CALL_OW 45
 340: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 341: LD_VAR 0 3
 345: PPUSH
 346: LD_INT 7
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 356: LD_VAR 0 3
 360: PPUSH
 361: LD_INT 67
 363: PPUSH
 364: LD_INT 95
 366: PPUSH
 367: CALL_OW 111
// wait ( 0 0$2 ) ;
 371: LD_INT 70
 373: PPUSH
 374: CALL_OW 67
// end ;
 378: GO 309
 380: POP
 381: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 3
 387: PPUSH
 388: LD_INT 3
 390: PPUSH
 391: LD_INT 11
 393: PPUSH
 394: LD_INT 100
 396: PPUSH
 397: CALL 7610 0 5
// un := CreateVehicle ;
 401: LD_ADDR_VAR 0 3
 405: PUSH
 406: CALL_OW 45
 410: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 411: LD_VAR 0 3
 415: PPUSH
 416: LD_INT 7
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 426: LD_VAR 0 3
 430: PPUSH
 431: LD_INT 67
 433: PPUSH
 434: LD_INT 95
 436: PPUSH
 437: CALL_OW 111
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
 450: PPUSH
// uc_side := 3 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 3
 458: ST_TO_ADDR
// uc_nation := 3 ;
 459: LD_ADDR_OWVAR 21
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 467: LD_INT 14
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 1
 477: PPUSH
 478: LD_INT 50000
 480: PPUSH
 481: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 485: LD_INT 14
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 3
 495: PPUSH
 496: LD_INT 5000
 498: PPUSH
 499: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 503: LD_INT 45
 505: PPUSH
 506: LD_INT 132
 508: PPUSH
 509: LD_INT 89
 511: PPUSH
 512: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 516: LD_ADDR_VAR 0 2
 520: PUSH
 521: LD_INT 21
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 570
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 539: LD_VAR 0 2
 543: PPUSH
 544: LD_INT 6
 546: PUSH
 547: LD_INT 8
 549: PUSH
 550: LD_INT 10
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: PPUSH
 564: CALL_OW 241
 568: GO 536
 570: POP
 571: POP
// for i := 1 to 4 do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_INT 4
 584: PUSH
 585: FOR_TO
 586: IFFALSE 612
// begin PrepareMechanic ( false , 9 ) ;
 588: LD_INT 0
 590: PPUSH
 591: LD_INT 9
 593: PPUSH
 594: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 598: CALL_OW 44
 602: PPUSH
 603: LD_INT 50
 605: PPUSH
 606: CALL_OW 52
// end ;
 610: GO 585
 612: POP
 613: POP
// ruGuard1 := [ ] ;
 614: LD_ADDR_EXP 4
 618: PUSH
 619: EMPTY
 620: ST_TO_ADDR
// ruGuard2 := [ ] ;
 621: LD_ADDR_EXP 5
 625: PUSH
 626: EMPTY
 627: ST_TO_ADDR
// ruGuard3 := [ ] ;
 628: LD_ADDR_EXP 6
 632: PUSH
 633: EMPTY
 634: ST_TO_ADDR
// ruForces := [ ] ;
 635: LD_ADDR_EXP 7
 639: PUSH
 640: EMPTY
 641: ST_TO_ADDR
// ruEng := [ ] ;
 642: LD_ADDR_EXP 8
 646: PUSH
 647: EMPTY
 648: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 4
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 6
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: LD_OWVAR 67
 677: ARRAY
 678: PUSH
 679: FOR_TO
 680: IFFALSE 736
// begin PrepareEngineer ( false , 8 ) ;
 682: LD_INT 0
 684: PPUSH
 685: LD_INT 8
 687: PPUSH
 688: CALL_OW 382
// un := CreateHuman ;
 692: LD_ADDR_VAR 0 3
 696: PUSH
 697: CALL_OW 44
 701: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 702: LD_VAR 0 3
 706: PPUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 714: LD_ADDR_EXP 8
 718: PUSH
 719: LD_EXP 8
 723: PPUSH
 724: LD_VAR 0 3
 728: PPUSH
 729: CALL 40461 0 2
 733: ST_TO_ADDR
// end ;
 734: GO 679
 736: POP
 737: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: DOUBLE
 744: LD_INT 1
 746: DEC
 747: ST_TO_ADDR
 748: LD_INT 5
 750: PUSH
 751: LD_INT 6
 753: PUSH
 754: LD_INT 7
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_OWVAR 67
 766: ARRAY
 767: PUSH
 768: FOR_TO
 769: IFFALSE 879
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 771: LD_INT 24
 773: PPUSH
 774: LD_INT 3
 776: PPUSH
 777: LD_INT 3
 779: PPUSH
 780: LD_INT 46
 782: PUSH
 783: LD_INT 45
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 2
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 100
 806: PPUSH
 807: CALL 7610 0 5
// un := CreateVehicle ;
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: CALL_OW 45
 820: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 821: LD_VAR 0 3
 825: PPUSH
 826: LD_INT 3
 828: PPUSH
 829: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 833: LD_VAR 0 3
 837: PPUSH
 838: LD_INT 4
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 848: LD_ADDR_EXP 4
 852: PUSH
 853: LD_EXP 4
 857: PPUSH
 858: LD_EXP 4
 862: PUSH
 863: LD_INT 1
 865: PLUS
 866: PPUSH
 867: LD_VAR 0 3
 871: PPUSH
 872: CALL_OW 1
 876: ST_TO_ADDR
// end ;
 877: GO 768
 879: POP
 880: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: DOUBLE
 887: LD_INT 1
 889: DEC
 890: ST_TO_ADDR
 891: LD_INT 4
 893: PUSH
 894: LD_INT 4
 896: PUSH
 897: LD_INT 5
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: LD_OWVAR 67
 909: ARRAY
 910: PUSH
 911: FOR_TO
 912: IFFALSE 1022
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 914: LD_INT 24
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 3
 922: PPUSH
 923: LD_INT 46
 925: PUSH
 926: LD_INT 45
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_VAR 0 2
 937: PUSH
 938: LD_INT 2
 940: MOD
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: PPUSH
 947: LD_INT 100
 949: PPUSH
 950: CALL 7610 0 5
// un := CreateVehicle ;
 954: LD_ADDR_VAR 0 3
 958: PUSH
 959: CALL_OW 45
 963: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_INT 4
 971: PPUSH
 972: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 991: LD_ADDR_EXP 5
 995: PUSH
 996: LD_EXP 5
1000: PPUSH
1001: LD_EXP 5
1005: PUSH
1006: LD_INT 1
1008: PLUS
1009: PPUSH
1010: LD_VAR 0 3
1014: PPUSH
1015: CALL_OW 1
1019: ST_TO_ADDR
// end ;
1020: GO 911
1022: POP
1023: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1024: LD_ADDR_VAR 0 2
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 4
1036: PUSH
1037: LD_INT 4
1039: PUSH
1040: LD_INT 5
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: LD_OWVAR 67
1052: ARRAY
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1165
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1057: LD_INT 24
1059: PPUSH
1060: LD_INT 3
1062: PPUSH
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 46
1068: PUSH
1069: LD_INT 45
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: MOD
1084: PUSH
1085: LD_INT 1
1087: PLUS
1088: ARRAY
1089: PPUSH
1090: LD_INT 100
1092: PPUSH
1093: CALL 7610 0 5
// un := CreateVehicle ;
1097: LD_ADDR_VAR 0 3
1101: PUSH
1102: CALL_OW 45
1106: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1107: LD_VAR 0 3
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_INT 6
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1134: LD_ADDR_EXP 6
1138: PUSH
1139: LD_EXP 6
1143: PPUSH
1144: LD_EXP 6
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: PPUSH
1153: LD_VAR 0 3
1157: PPUSH
1158: CALL_OW 1
1162: ST_TO_ADDR
// end ;
1163: GO 1054
1165: POP
1166: POP
// for i := 1 to 2 do
1167: LD_ADDR_VAR 0 2
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_INT 2
1179: PUSH
1180: FOR_TO
1181: IFFALSE 1229
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1183: LD_INT 22
1185: PPUSH
1186: LD_INT 3
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 52
1194: PPUSH
1195: LD_INT 100
1197: PPUSH
1198: CALL 7610 0 5
// un := CreateVehicle ;
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: CALL_OW 45
1211: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1212: LD_VAR 0 3
1216: PPUSH
1217: LD_INT 9
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 49
// end ;
1227: GO 1180
1229: POP
1230: POP
// for i := 1 to 3 do
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: DOUBLE
1237: LD_INT 1
1239: DEC
1240: ST_TO_ADDR
1241: LD_INT 3
1243: PUSH
1244: FOR_TO
1245: IFFALSE 1282
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1247: LD_INT 0
1249: PPUSH
1250: LD_INT 9
1252: PPUSH
1253: LD_INT 8
1255: PPUSH
1256: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1260: CALL_OW 44
1264: PPUSH
1265: LD_INT 91
1267: PPUSH
1268: LD_INT 83
1270: PPUSH
1271: CALL_OW 428
1275: PPUSH
1276: CALL_OW 52
// end ;
1280: GO 1244
1282: POP
1283: POP
// end ;
1284: LD_VAR 0 1
1288: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1289: LD_EXP 8
1293: IFFALSE 1487
1295: GO 1297
1297: DISABLE
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// begin enable ;
1302: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1303: LD_ADDR_VAR 0 2
1307: PUSH
1308: LD_INT 10
1310: PPUSH
1311: LD_INT 21
1313: PUSH
1314: LD_INT 3
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 24
1326: PUSH
1327: LD_INT 1000
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PPUSH
1342: CALL_OW 70
1346: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1347: LD_VAR 0 2
1351: NOT
1352: PUSH
1353: LD_EXP 8
1357: PPUSH
1358: LD_INT 3
1360: PUSH
1361: LD_INT 54
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 72
1375: AND
1376: IFFALSE 1408
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1378: LD_EXP 8
1382: PPUSH
1383: LD_INT 3
1385: PUSH
1386: LD_INT 54
1388: PUSH
1389: EMPTY
1390: LIST
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PPUSH
1396: CALL_OW 72
1400: PPUSH
1401: LD_INT 14
1403: PPUSH
1404: CALL_OW 120
// if tmp then
1408: LD_VAR 0 2
1412: IFFALSE 1487
// begin for i in ruEng do
1414: LD_ADDR_VAR 0 1
1418: PUSH
1419: LD_EXP 8
1423: PUSH
1424: FOR_IN
1425: IFFALSE 1485
// if IsInUnit ( i ) then
1427: LD_VAR 0 1
1431: PPUSH
1432: CALL_OW 310
1436: IFFALSE 1449
// ComExitBuilding ( i ) else
1438: LD_VAR 0 1
1442: PPUSH
1443: CALL_OW 122
1447: GO 1483
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1449: LD_VAR 0 1
1453: PPUSH
1454: LD_VAR 0 1
1458: PPUSH
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL 8167 0 4
1474: PUSH
1475: LD_INT 1
1477: ARRAY
1478: PPUSH
1479: CALL_OW 130
1483: GO 1424
1485: POP
1486: POP
// end ; end ;
1487: PPOPN 2
1489: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1490: LD_EXP 7
1494: NOT
1495: IFFALSE 1561
1497: GO 1499
1499: DISABLE
1500: LD_INT 0
1502: PPUSH
1503: PPUSH
// begin enable ;
1504: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1505: LD_ADDR_VAR 0 1
1509: PUSH
1510: DOUBLE
1511: LD_INT 1
1513: DEC
1514: ST_TO_ADDR
1515: LD_INT 4
1517: PUSH
1518: LD_INT 5
1520: PUSH
1521: LD_INT 6
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_OWVAR 67
1533: ARRAY
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1559
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1538: LD_INT 50
1540: PPUSH
1541: LD_INT 24
1543: PPUSH
1544: LD_INT 3
1546: PPUSH
1547: LD_INT 3
1549: PPUSH
1550: LD_INT 46
1552: PPUSH
1553: CALL_OW 185
1557: GO 1535
1559: POP
1560: POP
// end ;
1561: PPOPN 2
1563: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1564: LD_EXP 7
1568: PUSH
1569: LD_INT 4
1571: PUSH
1572: LD_INT 5
1574: PUSH
1575: LD_INT 6
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: LD_OWVAR 67
1587: ARRAY
1588: GREATEREQUAL
1589: IFFALSE 1742
1591: GO 1593
1593: DISABLE
1594: LD_INT 0
1596: PPUSH
1597: PPUSH
// begin enable ;
1598: ENABLE
// tmp := ruForces ;
1599: LD_ADDR_VAR 0 2
1603: PUSH
1604: LD_EXP 7
1608: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1609: LD_INT 0
1611: PPUSH
1612: LD_INT 1
1614: PPUSH
1615: CALL_OW 12
1619: IFFALSE 1640
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 45
1628: PPUSH
1629: CALL_OW 120
// wait ( 0 0$20 ) ;
1633: LD_INT 700
1635: PPUSH
1636: CALL_OW 67
// end ; ruForces := [ ] ;
1640: LD_ADDR_EXP 7
1644: PUSH
1645: EMPTY
1646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1647: LD_INT 35
1649: PPUSH
1650: CALL_OW 67
// for i in tmp do
1654: LD_ADDR_VAR 0 1
1658: PUSH
1659: LD_VAR 0 2
1663: PUSH
1664: FOR_IN
1665: IFFALSE 1733
// if not IsOk ( i ) then
1667: LD_VAR 0 1
1671: PPUSH
1672: CALL_OW 302
1676: NOT
1677: IFFALSE 1697
// tmp := tmp diff i else
1679: LD_ADDR_VAR 0 2
1683: PUSH
1684: LD_VAR 0 2
1688: PUSH
1689: LD_VAR 0 1
1693: DIFF
1694: ST_TO_ADDR
1695: GO 1731
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1697: LD_VAR 0 1
1701: PPUSH
1702: LD_INT 81
1704: PUSH
1705: LD_INT 3
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PPUSH
1712: CALL_OW 69
1716: PPUSH
1717: LD_VAR 0 1
1721: PPUSH
1722: CALL_OW 74
1726: PPUSH
1727: CALL_OW 115
1731: GO 1664
1733: POP
1734: POP
// until not tmp ;
1735: LD_VAR 0 2
1739: NOT
1740: IFFALSE 1647
// end ;
1742: PPOPN 2
1744: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1745: LD_INT 22
1747: PUSH
1748: LD_INT 7
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 92
1757: PUSH
1758: LD_INT 62
1760: PUSH
1761: LD_INT 83
1763: PUSH
1764: LD_INT 8
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 69
1781: IFFALSE 1801
1783: GO 1785
1785: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1786: LD_EXP 4
1790: PPUSH
1791: LD_INT 69
1793: PPUSH
1794: LD_INT 100
1796: PPUSH
1797: CALL_OW 114
1801: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1802: LD_INT 22
1804: PUSH
1805: LD_INT 7
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 92
1814: PUSH
1815: LD_INT 85
1817: PUSH
1818: LD_INT 89
1820: PUSH
1821: LD_INT 8
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: CALL_OW 69
1838: IFFALSE 1858
1840: GO 1842
1842: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1843: LD_EXP 5
1847: PPUSH
1848: LD_INT 72
1850: PPUSH
1851: LD_INT 88
1853: PPUSH
1854: CALL_OW 114
1858: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1859: LD_INT 22
1861: PUSH
1862: LD_INT 7
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 92
1871: PUSH
1872: LD_INT 89
1874: PUSH
1875: LD_INT 13
1877: PUSH
1878: LD_INT 8
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: IFFALSE 1915
1897: GO 1899
1899: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1900: LD_EXP 6
1904: PPUSH
1905: LD_INT 107
1907: PPUSH
1908: LD_INT 26
1910: PPUSH
1911: CALL_OW 114
1915: END
// every 6 6$00 do var i , un , tmp ;
1916: GO 1918
1918: DISABLE
1919: LD_INT 0
1921: PPUSH
1922: PPUSH
1923: PPUSH
// begin enable ;
1924: ENABLE
// tmp := [ ] ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: EMPTY
1931: ST_TO_ADDR
// for i := 1 to 8 do
1932: LD_ADDR_VAR 0 1
1936: PUSH
1937: DOUBLE
1938: LD_INT 1
1940: DEC
1941: ST_TO_ADDR
1942: LD_INT 8
1944: PUSH
1945: FOR_TO
1946: IFFALSE 2089
// begin uc_side := 1 ;
1948: LD_ADDR_OWVAR 20
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// uc_nation := 1 ;
1956: LD_ADDR_OWVAR 21
1960: PUSH
1961: LD_INT 1
1963: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1964: LD_INT 5
1966: PPUSH
1967: LD_INT 3
1969: PPUSH
1970: LD_INT 3
1972: PPUSH
1973: LD_INT 6
1975: PUSH
1976: LD_INT 9
1978: PUSH
1979: LD_INT 7
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: PUSH
1987: LD_VAR 0 1
1991: PUSH
1992: LD_INT 3
1994: MOD
1995: PUSH
1996: LD_INT 1
1998: PLUS
1999: ARRAY
2000: PPUSH
2001: LD_INT 100
2003: PPUSH
2004: CALL 7610 0 5
// un := CreateVehicle ;
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: CALL_OW 45
2017: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2018: LD_ADDR_VAR 0 3
2022: PUSH
2023: LD_VAR 0 3
2027: PPUSH
2028: LD_VAR 0 2
2032: PPUSH
2033: CALL 40461 0 2
2037: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2038: LD_VAR 0 2
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2050: LD_VAR 0 2
2054: PPUSH
2055: LD_INT 11
2057: PPUSH
2058: LD_INT 0
2060: PPUSH
2061: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_INT 16
2072: PPUSH
2073: LD_INT 13
2075: PPUSH
2076: CALL_OW 111
// wait ( 0 0$1 ) ;
2080: LD_INT 35
2082: PPUSH
2083: CALL_OW 67
// end ;
2087: GO 1945
2089: POP
2090: POP
// repeat wait ( 0 0$1 ) ;
2091: LD_INT 35
2093: PPUSH
2094: CALL_OW 67
// for i in tmp do
2098: LD_ADDR_VAR 0 1
2102: PUSH
2103: LD_VAR 0 3
2107: PUSH
2108: FOR_IN
2109: IFFALSE 2177
// if not IsOk ( i ) then
2111: LD_VAR 0 1
2115: PPUSH
2116: CALL_OW 302
2120: NOT
2121: IFFALSE 2141
// tmp := tmp diff i else
2123: LD_ADDR_VAR 0 3
2127: PUSH
2128: LD_VAR 0 3
2132: PUSH
2133: LD_VAR 0 1
2137: DIFF
2138: ST_TO_ADDR
2139: GO 2175
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2141: LD_VAR 0 1
2145: PPUSH
2146: LD_INT 81
2148: PUSH
2149: LD_INT 1
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PPUSH
2156: CALL_OW 69
2160: PPUSH
2161: LD_VAR 0 1
2165: PPUSH
2166: CALL_OW 74
2170: PPUSH
2171: CALL_OW 115
2175: GO 2108
2177: POP
2178: POP
// until not tmp ;
2179: LD_VAR 0 3
2183: NOT
2184: IFFALSE 2091
// end ;
2186: PPOPN 3
2188: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2189: LD_INT 149
2191: PPUSH
2192: LD_INT 106
2194: PPUSH
2195: CALL_OW 428
2199: NOT
2200: IFFALSE 2363
2202: GO 2204
2204: DISABLE
2205: LD_INT 0
2207: PPUSH
// begin enable ;
2208: ENABLE
// uc_side := 1 ;
2209: LD_ADDR_OWVAR 20
2213: PUSH
2214: LD_INT 1
2216: ST_TO_ADDR
// uc_nation := 1 ;
2217: LD_ADDR_OWVAR 21
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2225: LD_INT 5
2227: PPUSH
2228: LD_INT 3
2230: PPUSH
2231: LD_INT 3
2233: PPUSH
2234: LD_INT 12
2236: PPUSH
2237: LD_INT 100
2239: PPUSH
2240: CALL 7610 0 5
// un := CreateVehicle ;
2244: LD_ADDR_VAR 0 1
2248: PUSH
2249: CALL_OW 45
2253: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 149
2261: PPUSH
2262: LD_INT 106
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 100
2282: PPUSH
2283: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2287: LD_VAR 0 1
2291: PPUSH
2292: LD_INT 105
2294: PPUSH
2295: LD_INT 2
2297: PPUSH
2298: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2302: LD_INT 35
2304: PPUSH
2305: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2309: LD_VAR 0 1
2313: PPUSH
2314: CALL_OW 301
2318: PUSH
2319: LD_VAR 0 1
2323: PPUSH
2324: CALL_OW 255
2328: PUSH
2329: LD_INT 1
2331: NONEQUAL
2332: OR
2333: IFFALSE 2337
// exit ;
2335: GO 2363
// until IsAt ( un , 105 , 2 ) ;
2337: LD_VAR 0 1
2341: PPUSH
2342: LD_INT 105
2344: PPUSH
2345: LD_INT 2
2347: PPUSH
2348: CALL_OW 307
2352: IFFALSE 2302
// RemoveUnit ( un ) ;
2354: LD_VAR 0 1
2358: PPUSH
2359: CALL_OW 64
// end ; end_of_file
2363: PPOPN 1
2365: END
// export function Action ; begin
2366: LD_INT 0
2368: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2369: LD_EXP 2
2373: PPUSH
2374: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2378: LD_STRING WT-Objectives-1
2380: PPUSH
2381: CALL_OW 337
// end ;
2385: LD_VAR 0 1
2389: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2390: LD_INT 7
2392: PPUSH
2393: LD_EXP 3
2397: PPUSH
2398: CALL_OW 292
2402: IFFALSE 2419
2404: GO 2406
2406: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2407: LD_EXP 3
2411: PPUSH
2412: LD_INT 7
2414: PPUSH
2415: CALL_OW 235
2419: END
// every 2 2$00 do
2420: GO 2422
2422: DISABLE
// PrepareReinforcements ( ) ;
2423: CALL 258 0 0
2427: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2428: LD_INT 2
2430: PPUSH
2431: CALL_OW 469
2435: NOT
2436: IFFALSE 2451
2438: GO 2440
2440: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2441: LD_INT 8
2443: PPUSH
2444: LD_INT 1
2446: PPUSH
2447: CALL_OW 424
2451: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2452: LD_INT 8
2454: PPUSH
2455: LD_INT 2
2457: PUSH
2458: LD_INT 34
2460: PUSH
2461: LD_INT 12
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: LD_INT 34
2470: PUSH
2471: LD_INT 51
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PPUSH
2483: CALL_OW 70
2487: PUSH
2488: LD_INT 2
2490: PPUSH
2491: CALL_OW 469
2495: NOT
2496: AND
2497: IFFALSE 2627
2499: GO 2501
2501: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2502: LD_STRING WT-med-1
2504: PPUSH
2505: LD_INT 1
2507: PPUSH
2508: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2512: LD_STRING WT-med-2
2514: PPUSH
2515: LD_INT 1
2517: NEG
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_EXP 3
2530: PPUSH
2531: CALL_OW 302
2535: PUSH
2536: LD_EXP 3
2540: PPUSH
2541: CALL_OW 255
2545: MUL
2546: PUSH
2547: LD_INT 7
2549: EQUAL
2550: PUSH
2551: LD_INT 1
2553: PLUS
2554: ARRAY
2555: PPUSH
2556: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2560: LD_STRING WT-med-3
2562: PPUSH
2563: LD_INT 1
2565: NEG
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 22
2576: PUSH
2577: LD_INT 7
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: LD_INT 34
2586: PUSH
2587: LD_INT 10
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PPUSH
2598: CALL_OW 69
2602: PUSH
2603: LD_INT 2
2605: GREATEREQUAL
2606: PUSH
2607: LD_INT 1
2609: PLUS
2610: ARRAY
2611: PPUSH
2612: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2616: LD_STRING WT-Main
2618: PPUSH
2619: CALL_OW 102
// YouWin ;
2623: CALL_OW 103
// end ; end_of_file
2627: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2628: LD_VAR 0 1
2632: PUSH
2633: LD_EXP 7
2637: IN
2638: IFFALSE 2656
// ruForces := ruForces diff un ;
2640: LD_ADDR_EXP 7
2644: PUSH
2645: LD_EXP 7
2649: PUSH
2650: LD_VAR 0 1
2654: DIFF
2655: ST_TO_ADDR
// end ;
2656: PPOPN 1
2658: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 45541 0 1
// if un = allianceHack then
2668: LD_VAR 0 1
2672: PUSH
2673: LD_EXP 2
2677: EQUAL
2678: IFFALSE 2687
// YouLost ( WT-HackLost ) ;
2680: LD_STRING WT-HackLost
2682: PPUSH
2683: CALL_OW 104
// if un in ruForces then
2687: LD_VAR 0 1
2691: PUSH
2692: LD_EXP 7
2696: IN
2697: IFFALSE 2715
// ruForces := ruForces diff un ;
2699: LD_ADDR_EXP 7
2703: PUSH
2704: LD_EXP 7
2708: PUSH
2709: LD_VAR 0 1
2713: DIFF
2714: ST_TO_ADDR
// end ;
2715: PPOPN 1
2717: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
2718: LD_VAR 0 1
2722: PPUSH
2723: LD_VAR 0 2
2727: PPUSH
2728: CALL 45661 0 2
// if GetSide ( vehicle ) = 3 then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 255
2741: PUSH
2742: LD_INT 3
2744: EQUAL
2745: IFFALSE 2767
// ruForces := Join ( ruForces , vehicle ) ;
2747: LD_ADDR_EXP 7
2751: PUSH
2752: LD_EXP 7
2756: PPUSH
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 40461 0 2
2766: ST_TO_ADDR
// end ; end_of_file
2767: PPOPN 2
2769: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2770: LD_INT 0
2772: PPUSH
2773: PPUSH
// if exist_mode then
2774: LD_VAR 0 2
2778: IFFALSE 2803
// unit := CreateCharacter ( prefix & ident ) else
2780: LD_ADDR_VAR 0 5
2784: PUSH
2785: LD_VAR 0 3
2789: PUSH
2790: LD_VAR 0 1
2794: STR
2795: PPUSH
2796: CALL_OW 34
2800: ST_TO_ADDR
2801: GO 2818
// unit := NewCharacter ( ident ) ;
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: LD_VAR 0 1
2812: PPUSH
2813: CALL_OW 25
2817: ST_TO_ADDR
// result := unit ;
2818: LD_ADDR_VAR 0 4
2822: PUSH
2823: LD_VAR 0 5
2827: ST_TO_ADDR
// end ;
2828: LD_VAR 0 4
2832: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2833: LD_INT 0
2835: PPUSH
2836: PPUSH
// if not side or not nation then
2837: LD_VAR 0 1
2841: NOT
2842: PUSH
2843: LD_VAR 0 2
2847: NOT
2848: OR
2849: IFFALSE 2853
// exit ;
2851: GO 3621
// case nation of nation_american :
2853: LD_VAR 0 2
2857: PUSH
2858: LD_INT 1
2860: DOUBLE
2861: EQUAL
2862: IFTRUE 2866
2864: GO 3080
2866: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2867: LD_ADDR_VAR 0 4
2871: PUSH
2872: LD_INT 35
2874: PUSH
2875: LD_INT 45
2877: PUSH
2878: LD_INT 46
2880: PUSH
2881: LD_INT 47
2883: PUSH
2884: LD_INT 82
2886: PUSH
2887: LD_INT 83
2889: PUSH
2890: LD_INT 84
2892: PUSH
2893: LD_INT 85
2895: PUSH
2896: LD_INT 86
2898: PUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 6
2907: PUSH
2908: LD_INT 15
2910: PUSH
2911: LD_INT 16
2913: PUSH
2914: LD_INT 7
2916: PUSH
2917: LD_INT 12
2919: PUSH
2920: LD_INT 13
2922: PUSH
2923: LD_INT 10
2925: PUSH
2926: LD_INT 14
2928: PUSH
2929: LD_INT 20
2931: PUSH
2932: LD_INT 21
2934: PUSH
2935: LD_INT 22
2937: PUSH
2938: LD_INT 25
2940: PUSH
2941: LD_INT 32
2943: PUSH
2944: LD_INT 27
2946: PUSH
2947: LD_INT 36
2949: PUSH
2950: LD_INT 69
2952: PUSH
2953: LD_INT 39
2955: PUSH
2956: LD_INT 34
2958: PUSH
2959: LD_INT 40
2961: PUSH
2962: LD_INT 48
2964: PUSH
2965: LD_INT 49
2967: PUSH
2968: LD_INT 50
2970: PUSH
2971: LD_INT 51
2973: PUSH
2974: LD_INT 52
2976: PUSH
2977: LD_INT 53
2979: PUSH
2980: LD_INT 54
2982: PUSH
2983: LD_INT 55
2985: PUSH
2986: LD_INT 56
2988: PUSH
2989: LD_INT 57
2991: PUSH
2992: LD_INT 58
2994: PUSH
2995: LD_INT 59
2997: PUSH
2998: LD_INT 60
3000: PUSH
3001: LD_INT 61
3003: PUSH
3004: LD_INT 62
3006: PUSH
3007: LD_INT 80
3009: PUSH
3010: LD_INT 82
3012: PUSH
3013: LD_INT 83
3015: PUSH
3016: LD_INT 84
3018: PUSH
3019: LD_INT 85
3021: PUSH
3022: LD_INT 86
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
3078: GO 3545
3080: LD_INT 2
3082: DOUBLE
3083: EQUAL
3084: IFTRUE 3088
3086: GO 3314
3088: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3089: LD_ADDR_VAR 0 4
3093: PUSH
3094: LD_INT 35
3096: PUSH
3097: LD_INT 45
3099: PUSH
3100: LD_INT 46
3102: PUSH
3103: LD_INT 47
3105: PUSH
3106: LD_INT 82
3108: PUSH
3109: LD_INT 83
3111: PUSH
3112: LD_INT 84
3114: PUSH
3115: LD_INT 85
3117: PUSH
3118: LD_INT 87
3120: PUSH
3121: LD_INT 70
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: LD_INT 11
3129: PUSH
3130: LD_INT 3
3132: PUSH
3133: LD_INT 4
3135: PUSH
3136: LD_INT 5
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: LD_INT 15
3144: PUSH
3145: LD_INT 18
3147: PUSH
3148: LD_INT 7
3150: PUSH
3151: LD_INT 17
3153: PUSH
3154: LD_INT 8
3156: PUSH
3157: LD_INT 20
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 22
3165: PUSH
3166: LD_INT 72
3168: PUSH
3169: LD_INT 26
3171: PUSH
3172: LD_INT 69
3174: PUSH
3175: LD_INT 39
3177: PUSH
3178: LD_INT 40
3180: PUSH
3181: LD_INT 41
3183: PUSH
3184: LD_INT 42
3186: PUSH
3187: LD_INT 43
3189: PUSH
3190: LD_INT 48
3192: PUSH
3193: LD_INT 49
3195: PUSH
3196: LD_INT 50
3198: PUSH
3199: LD_INT 51
3201: PUSH
3202: LD_INT 52
3204: PUSH
3205: LD_INT 53
3207: PUSH
3208: LD_INT 54
3210: PUSH
3211: LD_INT 55
3213: PUSH
3214: LD_INT 56
3216: PUSH
3217: LD_INT 60
3219: PUSH
3220: LD_INT 61
3222: PUSH
3223: LD_INT 62
3225: PUSH
3226: LD_INT 66
3228: PUSH
3229: LD_INT 67
3231: PUSH
3232: LD_INT 68
3234: PUSH
3235: LD_INT 81
3237: PUSH
3238: LD_INT 82
3240: PUSH
3241: LD_INT 83
3243: PUSH
3244: LD_INT 84
3246: PUSH
3247: LD_INT 85
3249: PUSH
3250: LD_INT 87
3252: PUSH
3253: LD_INT 88
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
3312: GO 3545
3314: LD_INT 3
3316: DOUBLE
3317: EQUAL
3318: IFTRUE 3322
3320: GO 3544
3322: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3323: LD_ADDR_VAR 0 4
3327: PUSH
3328: LD_INT 46
3330: PUSH
3331: LD_INT 47
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: LD_INT 2
3339: PUSH
3340: LD_INT 82
3342: PUSH
3343: LD_INT 83
3345: PUSH
3346: LD_INT 84
3348: PUSH
3349: LD_INT 85
3351: PUSH
3352: LD_INT 86
3354: PUSH
3355: LD_INT 11
3357: PUSH
3358: LD_INT 9
3360: PUSH
3361: LD_INT 20
3363: PUSH
3364: LD_INT 19
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 24
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 25
3378: PUSH
3379: LD_INT 28
3381: PUSH
3382: LD_INT 29
3384: PUSH
3385: LD_INT 30
3387: PUSH
3388: LD_INT 31
3390: PUSH
3391: LD_INT 37
3393: PUSH
3394: LD_INT 38
3396: PUSH
3397: LD_INT 32
3399: PUSH
3400: LD_INT 27
3402: PUSH
3403: LD_INT 33
3405: PUSH
3406: LD_INT 69
3408: PUSH
3409: LD_INT 39
3411: PUSH
3412: LD_INT 34
3414: PUSH
3415: LD_INT 40
3417: PUSH
3418: LD_INT 71
3420: PUSH
3421: LD_INT 23
3423: PUSH
3424: LD_INT 44
3426: PUSH
3427: LD_INT 48
3429: PUSH
3430: LD_INT 49
3432: PUSH
3433: LD_INT 50
3435: PUSH
3436: LD_INT 51
3438: PUSH
3439: LD_INT 52
3441: PUSH
3442: LD_INT 53
3444: PUSH
3445: LD_INT 54
3447: PUSH
3448: LD_INT 55
3450: PUSH
3451: LD_INT 56
3453: PUSH
3454: LD_INT 57
3456: PUSH
3457: LD_INT 58
3459: PUSH
3460: LD_INT 59
3462: PUSH
3463: LD_INT 63
3465: PUSH
3466: LD_INT 64
3468: PUSH
3469: LD_INT 65
3471: PUSH
3472: LD_INT 82
3474: PUSH
3475: LD_INT 83
3477: PUSH
3478: LD_INT 84
3480: PUSH
3481: LD_INT 85
3483: PUSH
3484: LD_INT 86
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: ST_TO_ADDR
3542: GO 3545
3544: POP
// if state > - 1 and state < 3 then
3545: LD_VAR 0 3
3549: PUSH
3550: LD_INT 1
3552: NEG
3553: GREATER
3554: PUSH
3555: LD_VAR 0 3
3559: PUSH
3560: LD_INT 3
3562: LESS
3563: AND
3564: IFFALSE 3621
// for i in result do
3566: LD_ADDR_VAR 0 5
3570: PUSH
3571: LD_VAR 0 4
3575: PUSH
3576: FOR_IN
3577: IFFALSE 3619
// if GetTech ( i , side ) <> state then
3579: LD_VAR 0 5
3583: PPUSH
3584: LD_VAR 0 1
3588: PPUSH
3589: CALL_OW 321
3593: PUSH
3594: LD_VAR 0 3
3598: NONEQUAL
3599: IFFALSE 3617
// result := result diff i ;
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: LD_VAR 0 4
3610: PUSH
3611: LD_VAR 0 5
3615: DIFF
3616: ST_TO_ADDR
3617: GO 3576
3619: POP
3620: POP
// end ;
3621: LD_VAR 0 4
3625: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3626: LD_INT 0
3628: PPUSH
3629: PPUSH
3630: PPUSH
// result := true ;
3631: LD_ADDR_VAR 0 3
3635: PUSH
3636: LD_INT 1
3638: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3639: LD_ADDR_VAR 0 5
3643: PUSH
3644: LD_VAR 0 2
3648: PPUSH
3649: CALL_OW 480
3653: ST_TO_ADDR
// if not tmp then
3654: LD_VAR 0 5
3658: NOT
3659: IFFALSE 3663
// exit ;
3661: GO 3712
// for i in tmp do
3663: LD_ADDR_VAR 0 4
3667: PUSH
3668: LD_VAR 0 5
3672: PUSH
3673: FOR_IN
3674: IFFALSE 3710
// if GetTech ( i , side ) <> state_researched then
3676: LD_VAR 0 4
3680: PPUSH
3681: LD_VAR 0 1
3685: PPUSH
3686: CALL_OW 321
3690: PUSH
3691: LD_INT 2
3693: NONEQUAL
3694: IFFALSE 3708
// begin result := false ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_INT 0
3703: ST_TO_ADDR
// exit ;
3704: POP
3705: POP
3706: GO 3712
// end ;
3708: GO 3673
3710: POP
3711: POP
// end ;
3712: LD_VAR 0 3
3716: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3717: LD_INT 0
3719: PPUSH
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
3730: PPUSH
3731: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3732: LD_VAR 0 1
3736: NOT
3737: PUSH
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 257
3747: PUSH
3748: LD_INT 9
3750: NONEQUAL
3751: OR
3752: IFFALSE 3756
// exit ;
3754: GO 4329
// side := GetSide ( unit ) ;
3756: LD_ADDR_VAR 0 9
3760: PUSH
3761: LD_VAR 0 1
3765: PPUSH
3766: CALL_OW 255
3770: ST_TO_ADDR
// tech_space := tech_spacanom ;
3771: LD_ADDR_VAR 0 12
3775: PUSH
3776: LD_INT 29
3778: ST_TO_ADDR
// tech_time := tech_taurad ;
3779: LD_ADDR_VAR 0 13
3783: PUSH
3784: LD_INT 28
3786: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3787: LD_ADDR_VAR 0 11
3791: PUSH
3792: LD_VAR 0 1
3796: PPUSH
3797: CALL_OW 310
3801: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3802: LD_VAR 0 11
3806: PPUSH
3807: CALL_OW 247
3811: PUSH
3812: LD_INT 2
3814: EQUAL
3815: IFFALSE 3819
// exit ;
3817: GO 4329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3819: LD_ADDR_VAR 0 8
3823: PUSH
3824: LD_INT 81
3826: PUSH
3827: LD_VAR 0 9
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 21
3841: PUSH
3842: LD_INT 3
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: ST_TO_ADDR
// if not tmp then
3862: LD_VAR 0 8
3866: NOT
3867: IFFALSE 3871
// exit ;
3869: GO 4329
// if in_unit then
3871: LD_VAR 0 11
3875: IFFALSE 3899
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3877: LD_ADDR_VAR 0 10
3881: PUSH
3882: LD_VAR 0 8
3886: PPUSH
3887: LD_VAR 0 11
3891: PPUSH
3892: CALL_OW 74
3896: ST_TO_ADDR
3897: GO 3919
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3899: LD_ADDR_VAR 0 10
3903: PUSH
3904: LD_VAR 0 8
3908: PPUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 74
3918: ST_TO_ADDR
// if not enemy then
3919: LD_VAR 0 10
3923: NOT
3924: IFFALSE 3928
// exit ;
3926: GO 4329
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3928: LD_VAR 0 11
3932: PUSH
3933: LD_VAR 0 11
3937: PPUSH
3938: LD_VAR 0 10
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 13
3950: GREATER
3951: AND
3952: PUSH
3953: LD_VAR 0 1
3957: PPUSH
3958: LD_VAR 0 10
3962: PPUSH
3963: CALL_OW 296
3967: PUSH
3968: LD_INT 12
3970: GREATER
3971: OR
3972: IFFALSE 3976
// exit ;
3974: GO 4329
// missile := [ 1 ] ;
3976: LD_ADDR_VAR 0 14
3980: PUSH
3981: LD_INT 1
3983: PUSH
3984: EMPTY
3985: LIST
3986: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3987: LD_VAR 0 9
3991: PPUSH
3992: LD_VAR 0 12
3996: PPUSH
3997: CALL_OW 325
4001: IFFALSE 4030
// missile := Replace ( missile , missile + 1 , 2 ) ;
4003: LD_ADDR_VAR 0 14
4007: PUSH
4008: LD_VAR 0 14
4012: PPUSH
4013: LD_VAR 0 14
4017: PUSH
4018: LD_INT 1
4020: PLUS
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 1
4029: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4030: LD_VAR 0 9
4034: PPUSH
4035: LD_VAR 0 13
4039: PPUSH
4040: CALL_OW 325
4044: PUSH
4045: LD_VAR 0 10
4049: PPUSH
4050: CALL_OW 255
4054: PPUSH
4055: LD_VAR 0 13
4059: PPUSH
4060: CALL_OW 325
4064: NOT
4065: AND
4066: IFFALSE 4095
// missile := Replace ( missile , missile + 1 , 3 ) ;
4068: LD_ADDR_VAR 0 14
4072: PUSH
4073: LD_VAR 0 14
4077: PPUSH
4078: LD_VAR 0 14
4082: PUSH
4083: LD_INT 1
4085: PLUS
4086: PPUSH
4087: LD_INT 3
4089: PPUSH
4090: CALL_OW 1
4094: ST_TO_ADDR
// if missile < 2 then
4095: LD_VAR 0 14
4099: PUSH
4100: LD_INT 2
4102: LESS
4103: IFFALSE 4107
// exit ;
4105: GO 4329
// x := GetX ( enemy ) ;
4107: LD_ADDR_VAR 0 4
4111: PUSH
4112: LD_VAR 0 10
4116: PPUSH
4117: CALL_OW 250
4121: ST_TO_ADDR
// y := GetY ( enemy ) ;
4122: LD_ADDR_VAR 0 5
4126: PUSH
4127: LD_VAR 0 10
4131: PPUSH
4132: CALL_OW 251
4136: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4137: LD_ADDR_VAR 0 6
4141: PUSH
4142: LD_VAR 0 4
4146: PUSH
4147: LD_INT 1
4149: NEG
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: CALL_OW 12
4158: PLUS
4159: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4160: LD_ADDR_VAR 0 7
4164: PUSH
4165: LD_VAR 0 5
4169: PUSH
4170: LD_INT 1
4172: NEG
4173: PPUSH
4174: LD_INT 1
4176: PPUSH
4177: CALL_OW 12
4181: PLUS
4182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4183: LD_VAR 0 6
4187: PPUSH
4188: LD_VAR 0 7
4192: PPUSH
4193: CALL_OW 488
4197: NOT
4198: IFFALSE 4220
// begin _x := x ;
4200: LD_ADDR_VAR 0 6
4204: PUSH
4205: LD_VAR 0 4
4209: ST_TO_ADDR
// _y := y ;
4210: LD_ADDR_VAR 0 7
4214: PUSH
4215: LD_VAR 0 5
4219: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 14
4232: PPUSH
4233: CALL_OW 12
4237: ST_TO_ADDR
// case i of 1 :
4238: LD_VAR 0 3
4242: PUSH
4243: LD_INT 1
4245: DOUBLE
4246: EQUAL
4247: IFTRUE 4251
4249: GO 4268
4251: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 10
4261: PPUSH
4262: CALL_OW 115
4266: GO 4329
4268: LD_INT 2
4270: DOUBLE
4271: EQUAL
4272: IFTRUE 4276
4274: GO 4298
4276: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4277: LD_VAR 0 1
4281: PPUSH
4282: LD_VAR 0 6
4286: PPUSH
4287: LD_VAR 0 7
4291: PPUSH
4292: CALL_OW 153
4296: GO 4329
4298: LD_INT 3
4300: DOUBLE
4301: EQUAL
4302: IFTRUE 4306
4304: GO 4328
4306: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4307: LD_VAR 0 1
4311: PPUSH
4312: LD_VAR 0 6
4316: PPUSH
4317: LD_VAR 0 7
4321: PPUSH
4322: CALL_OW 154
4326: GO 4329
4328: POP
// end ;
4329: LD_VAR 0 2
4333: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4334: LD_INT 0
4336: PPUSH
4337: PPUSH
4338: PPUSH
4339: PPUSH
4340: PPUSH
4341: PPUSH
// if not unit or not building then
4342: LD_VAR 0 1
4346: NOT
4347: PUSH
4348: LD_VAR 0 2
4352: NOT
4353: OR
4354: IFFALSE 4358
// exit ;
4356: GO 4516
// x := GetX ( building ) ;
4358: LD_ADDR_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PPUSH
4368: CALL_OW 250
4372: ST_TO_ADDR
// y := GetY ( building ) ;
4373: LD_ADDR_VAR 0 6
4377: PUSH
4378: LD_VAR 0 2
4382: PPUSH
4383: CALL_OW 251
4387: ST_TO_ADDR
// for i = 0 to 5 do
4388: LD_ADDR_VAR 0 4
4392: PUSH
4393: DOUBLE
4394: LD_INT 0
4396: DEC
4397: ST_TO_ADDR
4398: LD_INT 5
4400: PUSH
4401: FOR_TO
4402: IFFALSE 4514
// begin _x := ShiftX ( x , i , 3 ) ;
4404: LD_ADDR_VAR 0 7
4408: PUSH
4409: LD_VAR 0 5
4413: PPUSH
4414: LD_VAR 0 4
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: CALL_OW 272
4426: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4427: LD_ADDR_VAR 0 8
4431: PUSH
4432: LD_VAR 0 6
4436: PPUSH
4437: LD_VAR 0 4
4441: PPUSH
4442: LD_INT 3
4444: PPUSH
4445: CALL_OW 273
4449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4450: LD_VAR 0 7
4454: PPUSH
4455: LD_VAR 0 8
4459: PPUSH
4460: CALL_OW 488
4464: NOT
4465: IFFALSE 4469
// continue ;
4467: GO 4401
// if HexInfo ( _x , _y ) = 0 then
4469: LD_VAR 0 7
4473: PPUSH
4474: LD_VAR 0 8
4478: PPUSH
4479: CALL_OW 428
4483: PUSH
4484: LD_INT 0
4486: EQUAL
4487: IFFALSE 4512
// begin ComMoveXY ( unit , _x , _y ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_VAR 0 7
4498: PPUSH
4499: LD_VAR 0 8
4503: PPUSH
4504: CALL_OW 111
// exit ;
4508: POP
4509: POP
4510: GO 4516
// end ; end ;
4512: GO 4401
4514: POP
4515: POP
// end ;
4516: LD_VAR 0 3
4520: RET
// export function ScanBase ( side , base_area ) ; begin
4521: LD_INT 0
4523: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4524: LD_ADDR_VAR 0 3
4528: PUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: LD_INT 81
4536: PUSH
4537: LD_VAR 0 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PPUSH
4546: CALL_OW 70
4550: ST_TO_ADDR
// end ;
4551: LD_VAR 0 3
4555: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4556: LD_INT 0
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
// result := false ;
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: LD_INT 0
4569: ST_TO_ADDR
// side := GetSide ( unit ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_VAR 0 1
4579: PPUSH
4580: CALL_OW 255
4584: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4585: LD_ADDR_VAR 0 4
4589: PUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 248
4599: ST_TO_ADDR
// case nat of 1 :
4600: LD_VAR 0 4
4604: PUSH
4605: LD_INT 1
4607: DOUBLE
4608: EQUAL
4609: IFTRUE 4613
4611: GO 4624
4613: POP
// tech := tech_lassight ; 2 :
4614: LD_ADDR_VAR 0 5
4618: PUSH
4619: LD_INT 12
4621: ST_TO_ADDR
4622: GO 4663
4624: LD_INT 2
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// tech := tech_mortar ; 3 :
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 41
4640: ST_TO_ADDR
4641: GO 4663
4643: LD_INT 3
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// tech := tech_bazooka ; end ;
4652: LD_ADDR_VAR 0 5
4656: PUSH
4657: LD_INT 44
4659: ST_TO_ADDR
4660: GO 4663
4662: POP
// if Researched ( side , tech ) then
4663: LD_VAR 0 3
4667: PPUSH
4668: LD_VAR 0 5
4672: PPUSH
4673: CALL_OW 325
4677: IFFALSE 4704
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4679: LD_ADDR_VAR 0 2
4683: PUSH
4684: LD_INT 5
4686: PUSH
4687: LD_INT 8
4689: PUSH
4690: LD_INT 9
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: PUSH
4698: LD_VAR 0 4
4702: ARRAY
4703: ST_TO_ADDR
// end ;
4704: LD_VAR 0 2
4708: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4709: LD_INT 0
4711: PPUSH
4712: PPUSH
4713: PPUSH
// if not mines then
4714: LD_VAR 0 2
4718: NOT
4719: IFFALSE 4723
// exit ;
4721: GO 4867
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4723: LD_ADDR_VAR 0 5
4727: PUSH
4728: LD_INT 81
4730: PUSH
4731: LD_VAR 0 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 69
4765: ST_TO_ADDR
// for i in mines do
4766: LD_ADDR_VAR 0 4
4770: PUSH
4771: LD_VAR 0 2
4775: PUSH
4776: FOR_IN
4777: IFFALSE 4865
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4779: LD_VAR 0 4
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PPUSH
4788: LD_VAR 0 4
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 458
4801: NOT
4802: IFFALSE 4806
// continue ;
4804: GO 4776
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4806: LD_VAR 0 4
4810: PUSH
4811: LD_INT 1
4813: ARRAY
4814: PPUSH
4815: LD_VAR 0 4
4819: PUSH
4820: LD_INT 2
4822: ARRAY
4823: PPUSH
4824: CALL_OW 428
4828: PUSH
4829: LD_VAR 0 5
4833: IN
4834: IFFALSE 4863
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4836: LD_VAR 0 4
4840: PUSH
4841: LD_INT 1
4843: ARRAY
4844: PPUSH
4845: LD_VAR 0 4
4849: PUSH
4850: LD_INT 2
4852: ARRAY
4853: PPUSH
4854: LD_VAR 0 1
4858: PPUSH
4859: CALL_OW 456
// end ;
4863: GO 4776
4865: POP
4866: POP
// end ;
4867: LD_VAR 0 3
4871: RET
// export function Count ( array ) ; begin
4872: LD_INT 0
4874: PPUSH
// result := array + 0 ;
4875: LD_ADDR_VAR 0 2
4879: PUSH
4880: LD_VAR 0 1
4884: PUSH
4885: LD_INT 0
4887: PLUS
4888: ST_TO_ADDR
// end ;
4889: LD_VAR 0 2
4893: RET
// export function IsEmpty ( building ) ; begin
4894: LD_INT 0
4896: PPUSH
// if not building then
4897: LD_VAR 0 1
4901: NOT
4902: IFFALSE 4906
// exit ;
4904: GO 4949
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: LD_VAR 0 1
4915: PUSH
4916: LD_INT 22
4918: PUSH
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 255
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 58
4935: PUSH
4936: EMPTY
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: IN
4948: ST_TO_ADDR
// end ;
4949: LD_VAR 0 2
4953: RET
// export function IsNotFull ( building ) ; var places ; begin
4954: LD_INT 0
4956: PPUSH
4957: PPUSH
// if not building then
4958: LD_VAR 0 1
4962: NOT
4963: IFFALSE 4967
// exit ;
4965: GO 4995
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4967: LD_ADDR_VAR 0 2
4971: PUSH
4972: LD_VAR 0 1
4976: PPUSH
4977: LD_INT 3
4979: PUSH
4980: LD_INT 62
4982: PUSH
4983: EMPTY
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 72
4994: ST_TO_ADDR
// end ;
4995: LD_VAR 0 2
4999: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5000: LD_INT 0
5002: PPUSH
5003: PPUSH
5004: PPUSH
5005: PPUSH
// tmp := [ ] ;
5006: LD_ADDR_VAR 0 3
5010: PUSH
5011: EMPTY
5012: ST_TO_ADDR
// list := [ ] ;
5013: LD_ADDR_VAR 0 5
5017: PUSH
5018: EMPTY
5019: ST_TO_ADDR
// for i = 16 to 25 do
5020: LD_ADDR_VAR 0 4
5024: PUSH
5025: DOUBLE
5026: LD_INT 16
5028: DEC
5029: ST_TO_ADDR
5030: LD_INT 25
5032: PUSH
5033: FOR_TO
5034: IFFALSE 5107
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5036: LD_ADDR_VAR 0 3
5040: PUSH
5041: LD_VAR 0 3
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 91
5065: PUSH
5066: LD_VAR 0 1
5070: PUSH
5071: LD_INT 6
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 30
5081: PUSH
5082: LD_VAR 0 4
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: PPUSH
5099: CALL_OW 69
5103: ADD
5104: ST_TO_ADDR
5105: GO 5033
5107: POP
5108: POP
// for i = 1 to tmp do
5109: LD_ADDR_VAR 0 4
5113: PUSH
5114: DOUBLE
5115: LD_INT 1
5117: DEC
5118: ST_TO_ADDR
5119: LD_VAR 0 3
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5213
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5127: LD_ADDR_VAR 0 5
5131: PUSH
5132: LD_VAR 0 5
5136: PUSH
5137: LD_VAR 0 3
5141: PUSH
5142: LD_VAR 0 4
5146: ARRAY
5147: PPUSH
5148: CALL_OW 266
5152: PUSH
5153: LD_VAR 0 3
5157: PUSH
5158: LD_VAR 0 4
5162: ARRAY
5163: PPUSH
5164: CALL_OW 250
5168: PUSH
5169: LD_VAR 0 3
5173: PUSH
5174: LD_VAR 0 4
5178: ARRAY
5179: PPUSH
5180: CALL_OW 251
5184: PUSH
5185: LD_VAR 0 3
5189: PUSH
5190: LD_VAR 0 4
5194: ARRAY
5195: PPUSH
5196: CALL_OW 254
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: PUSH
5207: EMPTY
5208: LIST
5209: ADD
5210: ST_TO_ADDR
5211: GO 5124
5213: POP
5214: POP
// result := list ;
5215: LD_ADDR_VAR 0 2
5219: PUSH
5220: LD_VAR 0 5
5224: ST_TO_ADDR
// end ;
5225: LD_VAR 0 2
5229: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5230: LD_INT 0
5232: PPUSH
5233: PPUSH
5234: PPUSH
5235: PPUSH
5236: PPUSH
5237: PPUSH
5238: PPUSH
// if not factory then
5239: LD_VAR 0 1
5243: NOT
5244: IFFALSE 5248
// exit ;
5246: GO 5841
// if control = control_apeman then
5248: LD_VAR 0 4
5252: PUSH
5253: LD_INT 5
5255: EQUAL
5256: IFFALSE 5365
// begin tmp := UnitsInside ( factory ) ;
5258: LD_ADDR_VAR 0 8
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 313
5272: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5273: LD_VAR 0 8
5277: PPUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 12
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PPUSH
5288: CALL_OW 72
5292: NOT
5293: IFFALSE 5303
// control := control_manual ;
5295: LD_ADDR_VAR 0 4
5299: PUSH
5300: LD_INT 1
5302: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5303: LD_ADDR_VAR 0 8
5307: PUSH
5308: LD_VAR 0 1
5312: PPUSH
5313: CALL 5000 0 1
5317: ST_TO_ADDR
// if tmp then
5318: LD_VAR 0 8
5322: IFFALSE 5365
// begin for i in tmp do
5324: LD_ADDR_VAR 0 7
5328: PUSH
5329: LD_VAR 0 8
5333: PUSH
5334: FOR_IN
5335: IFFALSE 5363
// if i [ 1 ] = b_ext_radio then
5337: LD_VAR 0 7
5341: PUSH
5342: LD_INT 1
5344: ARRAY
5345: PUSH
5346: LD_INT 22
5348: EQUAL
5349: IFFALSE 5361
// begin control := control_remote ;
5351: LD_ADDR_VAR 0 4
5355: PUSH
5356: LD_INT 2
5358: ST_TO_ADDR
// break ;
5359: GO 5363
// end ;
5361: GO 5334
5363: POP
5364: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5365: LD_VAR 0 1
5369: PPUSH
5370: LD_VAR 0 2
5374: PPUSH
5375: LD_VAR 0 3
5379: PPUSH
5380: LD_VAR 0 4
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: CALL_OW 448
5394: IFFALSE 5429
// begin result := [ chassis , engine , control , weapon ] ;
5396: LD_ADDR_VAR 0 6
5400: PUSH
5401: LD_VAR 0 2
5405: PUSH
5406: LD_VAR 0 3
5410: PUSH
5411: LD_VAR 0 4
5415: PUSH
5416: LD_VAR 0 5
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: ST_TO_ADDR
// exit ;
5427: GO 5841
// end ; _chassis := AvailableChassisList ( factory ) ;
5429: LD_ADDR_VAR 0 9
5433: PUSH
5434: LD_VAR 0 1
5438: PPUSH
5439: CALL_OW 475
5443: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5444: LD_ADDR_VAR 0 11
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 476
5458: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5459: LD_ADDR_VAR 0 12
5463: PUSH
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 477
5473: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5474: LD_ADDR_VAR 0 10
5478: PUSH
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 478
5488: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5489: LD_VAR 0 9
5493: NOT
5494: PUSH
5495: LD_VAR 0 11
5499: NOT
5500: OR
5501: PUSH
5502: LD_VAR 0 12
5506: NOT
5507: OR
5508: PUSH
5509: LD_VAR 0 10
5513: NOT
5514: OR
5515: IFFALSE 5550
// begin result := [ chassis , engine , control , weapon ] ;
5517: LD_ADDR_VAR 0 6
5521: PUSH
5522: LD_VAR 0 2
5526: PUSH
5527: LD_VAR 0 3
5531: PUSH
5532: LD_VAR 0 4
5536: PUSH
5537: LD_VAR 0 5
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: ST_TO_ADDR
// exit ;
5548: GO 5841
// end ; if not chassis in _chassis then
5550: LD_VAR 0 2
5554: PUSH
5555: LD_VAR 0 9
5559: IN
5560: NOT
5561: IFFALSE 5587
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5563: LD_ADDR_VAR 0 2
5567: PUSH
5568: LD_VAR 0 9
5572: PUSH
5573: LD_INT 1
5575: PPUSH
5576: LD_VAR 0 9
5580: PPUSH
5581: CALL_OW 12
5585: ARRAY
5586: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5587: LD_VAR 0 2
5591: PPUSH
5592: LD_VAR 0 3
5596: PPUSH
5597: CALL 5846 0 2
5601: NOT
5602: IFFALSE 5661
// repeat engine := _engine [ 1 ] ;
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: LD_VAR 0 11
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5618: LD_ADDR_VAR 0 11
5622: PUSH
5623: LD_VAR 0 11
5627: PPUSH
5628: LD_INT 1
5630: PPUSH
5631: CALL_OW 3
5635: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_VAR 0 3
5645: PPUSH
5646: CALL 5846 0 2
5650: PUSH
5651: LD_VAR 0 11
5655: PUSH
5656: EMPTY
5657: EQUAL
5658: OR
5659: IFFALSE 5604
// if not control in _control then
5661: LD_VAR 0 4
5665: PUSH
5666: LD_VAR 0 12
5670: IN
5671: NOT
5672: IFFALSE 5698
// control := _control [ rand ( 1 , _control ) ] ;
5674: LD_ADDR_VAR 0 4
5678: PUSH
5679: LD_VAR 0 12
5683: PUSH
5684: LD_INT 1
5686: PPUSH
5687: LD_VAR 0 12
5691: PPUSH
5692: CALL_OW 12
5696: ARRAY
5697: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5698: LD_VAR 0 2
5702: PPUSH
5703: LD_VAR 0 5
5707: PPUSH
5708: CALL 6066 0 2
5712: NOT
5713: IFFALSE 5772
// repeat weapon := _weapon [ 1 ] ;
5715: LD_ADDR_VAR 0 5
5719: PUSH
5720: LD_VAR 0 10
5724: PUSH
5725: LD_INT 1
5727: ARRAY
5728: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5729: LD_ADDR_VAR 0 10
5733: PUSH
5734: LD_VAR 0 10
5738: PPUSH
5739: LD_INT 1
5741: PPUSH
5742: CALL_OW 3
5746: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5747: LD_VAR 0 2
5751: PPUSH
5752: LD_VAR 0 5
5756: PPUSH
5757: CALL 6066 0 2
5761: PUSH
5762: LD_VAR 0 10
5766: PUSH
5767: EMPTY
5768: EQUAL
5769: OR
5770: IFFALSE 5715
// result := [ ] ;
5772: LD_ADDR_VAR 0 6
5776: PUSH
5777: EMPTY
5778: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5779: LD_VAR 0 1
5783: PPUSH
5784: LD_VAR 0 2
5788: PPUSH
5789: LD_VAR 0 3
5793: PPUSH
5794: LD_VAR 0 4
5798: PPUSH
5799: LD_VAR 0 5
5803: PPUSH
5804: CALL_OW 448
5808: IFFALSE 5841
// result := [ chassis , engine , control , weapon ] ;
5810: LD_ADDR_VAR 0 6
5814: PUSH
5815: LD_VAR 0 2
5819: PUSH
5820: LD_VAR 0 3
5824: PUSH
5825: LD_VAR 0 4
5829: PUSH
5830: LD_VAR 0 5
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: ST_TO_ADDR
// end ;
5841: LD_VAR 0 6
5845: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5846: LD_INT 0
5848: PPUSH
// if not chassis or not engine then
5849: LD_VAR 0 1
5853: NOT
5854: PUSH
5855: LD_VAR 0 2
5859: NOT
5860: OR
5861: IFFALSE 5865
// exit ;
5863: GO 6061
// case engine of engine_solar :
5865: LD_VAR 0 2
5869: PUSH
5870: LD_INT 2
5872: DOUBLE
5873: EQUAL
5874: IFTRUE 5878
5876: GO 5916
5878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5879: LD_ADDR_VAR 0 3
5883: PUSH
5884: LD_INT 11
5886: PUSH
5887: LD_INT 12
5889: PUSH
5890: LD_INT 13
5892: PUSH
5893: LD_INT 14
5895: PUSH
5896: LD_INT 1
5898: PUSH
5899: LD_INT 2
5901: PUSH
5902: LD_INT 3
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: ST_TO_ADDR
5914: GO 6045
5916: LD_INT 1
5918: DOUBLE
5919: EQUAL
5920: IFTRUE 5924
5922: GO 5986
5924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5925: LD_ADDR_VAR 0 3
5929: PUSH
5930: LD_INT 11
5932: PUSH
5933: LD_INT 12
5935: PUSH
5936: LD_INT 13
5938: PUSH
5939: LD_INT 14
5941: PUSH
5942: LD_INT 1
5944: PUSH
5945: LD_INT 2
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: LD_INT 4
5953: PUSH
5954: LD_INT 5
5956: PUSH
5957: LD_INT 21
5959: PUSH
5960: LD_INT 23
5962: PUSH
5963: LD_INT 22
5965: PUSH
5966: LD_INT 24
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: ST_TO_ADDR
5984: GO 6045
5986: LD_INT 3
5988: DOUBLE
5989: EQUAL
5990: IFTRUE 5994
5992: GO 6044
5994: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5995: LD_ADDR_VAR 0 3
5999: PUSH
6000: LD_INT 13
6002: PUSH
6003: LD_INT 14
6005: PUSH
6006: LD_INT 2
6008: PUSH
6009: LD_INT 3
6011: PUSH
6012: LD_INT 4
6014: PUSH
6015: LD_INT 5
6017: PUSH
6018: LD_INT 21
6020: PUSH
6021: LD_INT 22
6023: PUSH
6024: LD_INT 23
6026: PUSH
6027: LD_INT 24
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: ST_TO_ADDR
6042: GO 6045
6044: POP
// result := ( chassis in result ) ;
6045: LD_ADDR_VAR 0 3
6049: PUSH
6050: LD_VAR 0 1
6054: PUSH
6055: LD_VAR 0 3
6059: IN
6060: ST_TO_ADDR
// end ;
6061: LD_VAR 0 3
6065: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6066: LD_INT 0
6068: PPUSH
// if not chassis or not weapon then
6069: LD_VAR 0 1
6073: NOT
6074: PUSH
6075: LD_VAR 0 2
6079: NOT
6080: OR
6081: IFFALSE 6085
// exit ;
6083: GO 7145
// case weapon of us_machine_gun :
6085: LD_VAR 0 2
6089: PUSH
6090: LD_INT 2
6092: DOUBLE
6093: EQUAL
6094: IFTRUE 6098
6096: GO 6128
6098: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6099: LD_ADDR_VAR 0 3
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: LD_INT 2
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 4
6115: PUSH
6116: LD_INT 5
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: ST_TO_ADDR
6126: GO 7129
6128: LD_INT 3
6130: DOUBLE
6131: EQUAL
6132: IFTRUE 6136
6134: GO 6166
6136: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: LD_INT 1
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: ST_TO_ADDR
6164: GO 7129
6166: LD_INT 11
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6204
6174: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6175: LD_ADDR_VAR 0 3
6179: PUSH
6180: LD_INT 1
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: LD_INT 4
6191: PUSH
6192: LD_INT 5
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: ST_TO_ADDR
6202: GO 7129
6204: LD_INT 4
6206: DOUBLE
6207: EQUAL
6208: IFTRUE 6212
6210: GO 6238
6212: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6213: LD_ADDR_VAR 0 3
6217: PUSH
6218: LD_INT 2
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 5
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: ST_TO_ADDR
6236: GO 7129
6238: LD_INT 5
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6246
6244: GO 6272
6246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6247: LD_ADDR_VAR 0 3
6251: PUSH
6252: LD_INT 2
6254: PUSH
6255: LD_INT 3
6257: PUSH
6258: LD_INT 4
6260: PUSH
6261: LD_INT 5
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: ST_TO_ADDR
6270: GO 7129
6272: LD_INT 9
6274: DOUBLE
6275: EQUAL
6276: IFTRUE 6280
6278: GO 6306
6280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6281: LD_ADDR_VAR 0 3
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: LD_INT 3
6291: PUSH
6292: LD_INT 4
6294: PUSH
6295: LD_INT 5
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: ST_TO_ADDR
6304: GO 7129
6306: LD_INT 7
6308: DOUBLE
6309: EQUAL
6310: IFTRUE 6314
6312: GO 6340
6314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6315: LD_ADDR_VAR 0 3
6319: PUSH
6320: LD_INT 2
6322: PUSH
6323: LD_INT 3
6325: PUSH
6326: LD_INT 4
6328: PUSH
6329: LD_INT 5
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: ST_TO_ADDR
6338: GO 7129
6340: LD_INT 12
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6374
6348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6349: LD_ADDR_VAR 0 3
6353: PUSH
6354: LD_INT 2
6356: PUSH
6357: LD_INT 3
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: LD_INT 5
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: ST_TO_ADDR
6372: GO 7129
6374: LD_INT 13
6376: DOUBLE
6377: EQUAL
6378: IFTRUE 6382
6380: GO 6408
6382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6383: LD_ADDR_VAR 0 3
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 4
6396: PUSH
6397: LD_INT 5
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: ST_TO_ADDR
6406: GO 7129
6408: LD_INT 14
6410: DOUBLE
6411: EQUAL
6412: IFTRUE 6416
6414: GO 6434
6416: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6417: LD_ADDR_VAR 0 3
6421: PUSH
6422: LD_INT 4
6424: PUSH
6425: LD_INT 5
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: ST_TO_ADDR
6432: GO 7129
6434: LD_INT 6
6436: DOUBLE
6437: EQUAL
6438: IFTRUE 6442
6440: GO 6460
6442: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 4
6450: PUSH
6451: LD_INT 5
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: ST_TO_ADDR
6458: GO 7129
6460: LD_INT 10
6462: DOUBLE
6463: EQUAL
6464: IFTRUE 6468
6466: GO 6486
6468: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6469: LD_ADDR_VAR 0 3
6473: PUSH
6474: LD_INT 4
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: ST_TO_ADDR
6484: GO 7129
6486: LD_INT 22
6488: DOUBLE
6489: EQUAL
6490: IFTRUE 6494
6492: GO 6520
6494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6495: LD_ADDR_VAR 0 3
6499: PUSH
6500: LD_INT 11
6502: PUSH
6503: LD_INT 12
6505: PUSH
6506: LD_INT 13
6508: PUSH
6509: LD_INT 14
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: ST_TO_ADDR
6518: GO 7129
6520: LD_INT 23
6522: DOUBLE
6523: EQUAL
6524: IFTRUE 6528
6526: GO 6554
6528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_INT 11
6536: PUSH
6537: LD_INT 12
6539: PUSH
6540: LD_INT 13
6542: PUSH
6543: LD_INT 14
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: ST_TO_ADDR
6552: GO 7129
6554: LD_INT 24
6556: DOUBLE
6557: EQUAL
6558: IFTRUE 6562
6560: GO 6588
6562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6563: LD_ADDR_VAR 0 3
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: LD_INT 12
6573: PUSH
6574: LD_INT 13
6576: PUSH
6577: LD_INT 14
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: ST_TO_ADDR
6586: GO 7129
6588: LD_INT 30
6590: DOUBLE
6591: EQUAL
6592: IFTRUE 6596
6594: GO 6622
6596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6597: LD_ADDR_VAR 0 3
6601: PUSH
6602: LD_INT 11
6604: PUSH
6605: LD_INT 12
6607: PUSH
6608: LD_INT 13
6610: PUSH
6611: LD_INT 14
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
6620: GO 7129
6622: LD_INT 25
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6648
6630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 13
6638: PUSH
6639: LD_INT 14
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: ST_TO_ADDR
6646: GO 7129
6648: LD_INT 27
6650: DOUBLE
6651: EQUAL
6652: IFTRUE 6656
6654: GO 6674
6656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6657: LD_ADDR_VAR 0 3
6661: PUSH
6662: LD_INT 13
6664: PUSH
6665: LD_INT 14
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: ST_TO_ADDR
6672: GO 7129
6674: LD_INT 92
6676: DOUBLE
6677: EQUAL
6678: IFTRUE 6682
6680: GO 6708
6682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6683: LD_ADDR_VAR 0 3
6687: PUSH
6688: LD_INT 11
6690: PUSH
6691: LD_INT 12
6693: PUSH
6694: LD_INT 13
6696: PUSH
6697: LD_INT 14
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: ST_TO_ADDR
6706: GO 7129
6708: LD_INT 28
6710: DOUBLE
6711: EQUAL
6712: IFTRUE 6716
6714: GO 6734
6716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6717: LD_ADDR_VAR 0 3
6721: PUSH
6722: LD_INT 13
6724: PUSH
6725: LD_INT 14
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: ST_TO_ADDR
6732: GO 7129
6734: LD_INT 29
6736: DOUBLE
6737: EQUAL
6738: IFTRUE 6742
6740: GO 6760
6742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6743: LD_ADDR_VAR 0 3
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: ST_TO_ADDR
6758: GO 7129
6760: LD_INT 31
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6786
6768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_INT 13
6776: PUSH
6777: LD_INT 14
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: ST_TO_ADDR
6784: GO 7129
6786: LD_INT 26
6788: DOUBLE
6789: EQUAL
6790: IFTRUE 6794
6792: GO 6812
6794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: LD_INT 13
6802: PUSH
6803: LD_INT 14
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: ST_TO_ADDR
6810: GO 7129
6812: LD_INT 42
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6846
6820: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_INT 21
6828: PUSH
6829: LD_INT 22
6831: PUSH
6832: LD_INT 23
6834: PUSH
6835: LD_INT 24
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 7129
6846: LD_INT 43
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6880
6854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 21
6862: PUSH
6863: LD_INT 22
6865: PUSH
6866: LD_INT 23
6868: PUSH
6869: LD_INT 24
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 7129
6880: LD_INT 44
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6914
6888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: LD_INT 21
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_INT 23
6902: PUSH
6903: LD_INT 24
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: ST_TO_ADDR
6912: GO 7129
6914: LD_INT 45
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 6948
6922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6923: LD_ADDR_VAR 0 3
6927: PUSH
6928: LD_INT 21
6930: PUSH
6931: LD_INT 22
6933: PUSH
6934: LD_INT 23
6936: PUSH
6937: LD_INT 24
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7129
6948: LD_INT 49
6950: DOUBLE
6951: EQUAL
6952: IFTRUE 6956
6954: GO 6982
6956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6957: LD_ADDR_VAR 0 3
6961: PUSH
6962: LD_INT 21
6964: PUSH
6965: LD_INT 22
6967: PUSH
6968: LD_INT 23
6970: PUSH
6971: LD_INT 24
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: ST_TO_ADDR
6980: GO 7129
6982: LD_INT 51
6984: DOUBLE
6985: EQUAL
6986: IFTRUE 6990
6988: GO 7016
6990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6991: LD_ADDR_VAR 0 3
6995: PUSH
6996: LD_INT 21
6998: PUSH
6999: LD_INT 22
7001: PUSH
7002: LD_INT 23
7004: PUSH
7005: LD_INT 24
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: ST_TO_ADDR
7014: GO 7129
7016: LD_INT 52
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7050
7024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: LD_INT 21
7032: PUSH
7033: LD_INT 22
7035: PUSH
7036: LD_INT 23
7038: PUSH
7039: LD_INT 24
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: ST_TO_ADDR
7048: GO 7129
7050: LD_INT 53
7052: DOUBLE
7053: EQUAL
7054: IFTRUE 7058
7056: GO 7076
7058: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7059: LD_ADDR_VAR 0 3
7063: PUSH
7064: LD_INT 23
7066: PUSH
7067: LD_INT 24
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: ST_TO_ADDR
7074: GO 7129
7076: LD_INT 46
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7102
7084: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7085: LD_ADDR_VAR 0 3
7089: PUSH
7090: LD_INT 23
7092: PUSH
7093: LD_INT 24
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: ST_TO_ADDR
7100: GO 7129
7102: LD_INT 47
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7128
7110: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7111: LD_ADDR_VAR 0 3
7115: PUSH
7116: LD_INT 23
7118: PUSH
7119: LD_INT 24
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: ST_TO_ADDR
7126: GO 7129
7128: POP
// result := ( chassis in result ) ;
7129: LD_ADDR_VAR 0 3
7133: PUSH
7134: LD_VAR 0 1
7138: PUSH
7139: LD_VAR 0 3
7143: IN
7144: ST_TO_ADDR
// end ;
7145: LD_VAR 0 3
7149: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7150: LD_INT 0
7152: PPUSH
7153: PPUSH
7154: PPUSH
7155: PPUSH
7156: PPUSH
7157: PPUSH
7158: PPUSH
// result := array ;
7159: LD_ADDR_VAR 0 5
7163: PUSH
7164: LD_VAR 0 1
7168: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7169: LD_VAR 0 1
7173: NOT
7174: PUSH
7175: LD_VAR 0 2
7179: NOT
7180: OR
7181: PUSH
7182: LD_VAR 0 3
7186: NOT
7187: OR
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: LD_VAR 0 1
7198: GREATER
7199: OR
7200: PUSH
7201: LD_VAR 0 3
7205: PUSH
7206: LD_VAR 0 1
7210: GREATER
7211: OR
7212: IFFALSE 7216
// exit ;
7214: GO 7512
// if direction then
7216: LD_VAR 0 4
7220: IFFALSE 7284
// begin d := 1 ;
7222: LD_ADDR_VAR 0 9
7226: PUSH
7227: LD_INT 1
7229: ST_TO_ADDR
// if i_from > i_to then
7230: LD_VAR 0 2
7234: PUSH
7235: LD_VAR 0 3
7239: GREATER
7240: IFFALSE 7266
// length := ( array - i_from ) + i_to else
7242: LD_ADDR_VAR 0 11
7246: PUSH
7247: LD_VAR 0 1
7251: PUSH
7252: LD_VAR 0 2
7256: MINUS
7257: PUSH
7258: LD_VAR 0 3
7262: PLUS
7263: ST_TO_ADDR
7264: GO 7282
// length := i_to - i_from ;
7266: LD_ADDR_VAR 0 11
7270: PUSH
7271: LD_VAR 0 3
7275: PUSH
7276: LD_VAR 0 2
7280: MINUS
7281: ST_TO_ADDR
// end else
7282: GO 7345
// begin d := - 1 ;
7284: LD_ADDR_VAR 0 9
7288: PUSH
7289: LD_INT 1
7291: NEG
7292: ST_TO_ADDR
// if i_from > i_to then
7293: LD_VAR 0 2
7297: PUSH
7298: LD_VAR 0 3
7302: GREATER
7303: IFFALSE 7323
// length := i_from - i_to else
7305: LD_ADDR_VAR 0 11
7309: PUSH
7310: LD_VAR 0 2
7314: PUSH
7315: LD_VAR 0 3
7319: MINUS
7320: ST_TO_ADDR
7321: GO 7345
// length := ( array - i_to ) + i_from ;
7323: LD_ADDR_VAR 0 11
7327: PUSH
7328: LD_VAR 0 1
7332: PUSH
7333: LD_VAR 0 3
7337: MINUS
7338: PUSH
7339: LD_VAR 0 2
7343: PLUS
7344: ST_TO_ADDR
// end ; if not length then
7345: LD_VAR 0 11
7349: NOT
7350: IFFALSE 7354
// exit ;
7352: GO 7512
// tmp := array ;
7354: LD_ADDR_VAR 0 10
7358: PUSH
7359: LD_VAR 0 1
7363: ST_TO_ADDR
// for i = 1 to length do
7364: LD_ADDR_VAR 0 6
7368: PUSH
7369: DOUBLE
7370: LD_INT 1
7372: DEC
7373: ST_TO_ADDR
7374: LD_VAR 0 11
7378: PUSH
7379: FOR_TO
7380: IFFALSE 7500
// begin for j = 1 to array do
7382: LD_ADDR_VAR 0 7
7386: PUSH
7387: DOUBLE
7388: LD_INT 1
7390: DEC
7391: ST_TO_ADDR
7392: LD_VAR 0 1
7396: PUSH
7397: FOR_TO
7398: IFFALSE 7486
// begin k := j + d ;
7400: LD_ADDR_VAR 0 8
7404: PUSH
7405: LD_VAR 0 7
7409: PUSH
7410: LD_VAR 0 9
7414: PLUS
7415: ST_TO_ADDR
// if k > array then
7416: LD_VAR 0 8
7420: PUSH
7421: LD_VAR 0 1
7425: GREATER
7426: IFFALSE 7436
// k := 1 ;
7428: LD_ADDR_VAR 0 8
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if not k then
7436: LD_VAR 0 8
7440: NOT
7441: IFFALSE 7453
// k := array ;
7443: LD_ADDR_VAR 0 8
7447: PUSH
7448: LD_VAR 0 1
7452: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7453: LD_ADDR_VAR 0 10
7457: PUSH
7458: LD_VAR 0 10
7462: PPUSH
7463: LD_VAR 0 8
7467: PPUSH
7468: LD_VAR 0 1
7472: PUSH
7473: LD_VAR 0 7
7477: ARRAY
7478: PPUSH
7479: CALL_OW 1
7483: ST_TO_ADDR
// end ;
7484: GO 7397
7486: POP
7487: POP
// array := tmp ;
7488: LD_ADDR_VAR 0 1
7492: PUSH
7493: LD_VAR 0 10
7497: ST_TO_ADDR
// end ;
7498: GO 7379
7500: POP
7501: POP
// result := array ;
7502: LD_ADDR_VAR 0 5
7506: PUSH
7507: LD_VAR 0 1
7511: ST_TO_ADDR
// end ;
7512: LD_VAR 0 5
7516: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
// result := 0 ;
7521: LD_ADDR_VAR 0 3
7525: PUSH
7526: LD_INT 0
7528: ST_TO_ADDR
// if not array or not value in array then
7529: LD_VAR 0 1
7533: NOT
7534: PUSH
7535: LD_VAR 0 2
7539: PUSH
7540: LD_VAR 0 1
7544: IN
7545: NOT
7546: OR
7547: IFFALSE 7551
// exit ;
7549: GO 7605
// for i = 1 to array do
7551: LD_ADDR_VAR 0 4
7555: PUSH
7556: DOUBLE
7557: LD_INT 1
7559: DEC
7560: ST_TO_ADDR
7561: LD_VAR 0 1
7565: PUSH
7566: FOR_TO
7567: IFFALSE 7603
// if value = array [ i ] then
7569: LD_VAR 0 2
7573: PUSH
7574: LD_VAR 0 1
7578: PUSH
7579: LD_VAR 0 4
7583: ARRAY
7584: EQUAL
7585: IFFALSE 7601
// begin result := i ;
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: LD_VAR 0 4
7596: ST_TO_ADDR
// exit ;
7597: POP
7598: POP
7599: GO 7605
// end ;
7601: GO 7566
7603: POP
7604: POP
// end ;
7605: LD_VAR 0 3
7609: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7610: LD_INT 0
7612: PPUSH
// vc_chassis := chassis ;
7613: LD_ADDR_OWVAR 37
7617: PUSH
7618: LD_VAR 0 1
7622: ST_TO_ADDR
// vc_engine := engine ;
7623: LD_ADDR_OWVAR 39
7627: PUSH
7628: LD_VAR 0 2
7632: ST_TO_ADDR
// vc_control := control ;
7633: LD_ADDR_OWVAR 38
7637: PUSH
7638: LD_VAR 0 3
7642: ST_TO_ADDR
// vc_weapon := weapon ;
7643: LD_ADDR_OWVAR 40
7647: PUSH
7648: LD_VAR 0 4
7652: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7653: LD_ADDR_OWVAR 41
7657: PUSH
7658: LD_VAR 0 5
7662: ST_TO_ADDR
// end ;
7663: LD_VAR 0 6
7667: RET
// export function WantPlant ( unit ) ; var task ; begin
7668: LD_INT 0
7670: PPUSH
7671: PPUSH
// result := false ;
7672: LD_ADDR_VAR 0 2
7676: PUSH
7677: LD_INT 0
7679: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7680: LD_ADDR_VAR 0 3
7684: PUSH
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 437
7694: ST_TO_ADDR
// if task then
7695: LD_VAR 0 3
7699: IFFALSE 7727
// if task [ 1 ] [ 1 ] = p then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 1
7708: ARRAY
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PUSH
7714: LD_STRING p
7716: EQUAL
7717: IFFALSE 7727
// result := true ;
7719: LD_ADDR_VAR 0 2
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// end ;
7727: LD_VAR 0 2
7731: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7732: LD_INT 0
7734: PPUSH
7735: PPUSH
7736: PPUSH
7737: PPUSH
// if pos < 1 then
7738: LD_VAR 0 2
7742: PUSH
7743: LD_INT 1
7745: LESS
7746: IFFALSE 7750
// exit ;
7748: GO 8053
// if pos = 1 then
7750: LD_VAR 0 2
7754: PUSH
7755: LD_INT 1
7757: EQUAL
7758: IFFALSE 7791
// result := Replace ( arr , pos [ 1 ] , value ) else
7760: LD_ADDR_VAR 0 4
7764: PUSH
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_VAR 0 2
7774: PUSH
7775: LD_INT 1
7777: ARRAY
7778: PPUSH
7779: LD_VAR 0 3
7783: PPUSH
7784: CALL_OW 1
7788: ST_TO_ADDR
7789: GO 8053
// begin tmp := arr ;
7791: LD_ADDR_VAR 0 6
7795: PUSH
7796: LD_VAR 0 1
7800: ST_TO_ADDR
// s_arr := [ tmp ] ;
7801: LD_ADDR_VAR 0 7
7805: PUSH
7806: LD_VAR 0 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: ST_TO_ADDR
// for i = 1 to pos - 1 do
7814: LD_ADDR_VAR 0 5
7818: PUSH
7819: DOUBLE
7820: LD_INT 1
7822: DEC
7823: ST_TO_ADDR
7824: LD_VAR 0 2
7828: PUSH
7829: LD_INT 1
7831: MINUS
7832: PUSH
7833: FOR_TO
7834: IFFALSE 7879
// begin tmp := tmp [ pos [ i ] ] ;
7836: LD_ADDR_VAR 0 6
7840: PUSH
7841: LD_VAR 0 6
7845: PUSH
7846: LD_VAR 0 2
7850: PUSH
7851: LD_VAR 0 5
7855: ARRAY
7856: ARRAY
7857: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7858: LD_ADDR_VAR 0 7
7862: PUSH
7863: LD_VAR 0 7
7867: PUSH
7868: LD_VAR 0 6
7872: PUSH
7873: EMPTY
7874: LIST
7875: ADD
7876: ST_TO_ADDR
// end ;
7877: GO 7833
7879: POP
7880: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7881: LD_ADDR_VAR 0 6
7885: PUSH
7886: LD_VAR 0 6
7890: PPUSH
7891: LD_VAR 0 2
7895: PUSH
7896: LD_VAR 0 2
7900: ARRAY
7901: PPUSH
7902: LD_VAR 0 3
7906: PPUSH
7907: CALL_OW 1
7911: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7912: LD_ADDR_VAR 0 7
7916: PUSH
7917: LD_VAR 0 7
7921: PPUSH
7922: LD_VAR 0 7
7926: PPUSH
7927: LD_VAR 0 6
7931: PPUSH
7932: CALL_OW 1
7936: ST_TO_ADDR
// for i = s_arr downto 2 do
7937: LD_ADDR_VAR 0 5
7941: PUSH
7942: DOUBLE
7943: LD_VAR 0 7
7947: INC
7948: ST_TO_ADDR
7949: LD_INT 2
7951: PUSH
7952: FOR_DOWNTO
7953: IFFALSE 8037
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7955: LD_ADDR_VAR 0 6
7959: PUSH
7960: LD_VAR 0 7
7964: PUSH
7965: LD_VAR 0 5
7969: PUSH
7970: LD_INT 1
7972: MINUS
7973: ARRAY
7974: PPUSH
7975: LD_VAR 0 2
7979: PUSH
7980: LD_VAR 0 5
7984: PUSH
7985: LD_INT 1
7987: MINUS
7988: ARRAY
7989: PPUSH
7990: LD_VAR 0 7
7994: PUSH
7995: LD_VAR 0 5
7999: ARRAY
8000: PPUSH
8001: CALL_OW 1
8005: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8006: LD_ADDR_VAR 0 7
8010: PUSH
8011: LD_VAR 0 7
8015: PPUSH
8016: LD_VAR 0 5
8020: PUSH
8021: LD_INT 1
8023: MINUS
8024: PPUSH
8025: LD_VAR 0 6
8029: PPUSH
8030: CALL_OW 1
8034: ST_TO_ADDR
// end ;
8035: GO 7952
8037: POP
8038: POP
// result := s_arr [ 1 ] ;
8039: LD_ADDR_VAR 0 4
8043: PUSH
8044: LD_VAR 0 7
8048: PUSH
8049: LD_INT 1
8051: ARRAY
8052: ST_TO_ADDR
// end ; end ;
8053: LD_VAR 0 4
8057: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8058: LD_INT 0
8060: PPUSH
8061: PPUSH
// if not list then
8062: LD_VAR 0 1
8066: NOT
8067: IFFALSE 8071
// exit ;
8069: GO 8162
// i := list [ pos1 ] ;
8071: LD_ADDR_VAR 0 5
8075: PUSH
8076: LD_VAR 0 1
8080: PUSH
8081: LD_VAR 0 2
8085: ARRAY
8086: ST_TO_ADDR
// if not i then
8087: LD_VAR 0 5
8091: NOT
8092: IFFALSE 8096
// exit ;
8094: GO 8162
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8096: LD_ADDR_VAR 0 1
8100: PUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_VAR 0 1
8115: PUSH
8116: LD_VAR 0 3
8120: ARRAY
8121: PPUSH
8122: CALL_OW 1
8126: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8127: LD_ADDR_VAR 0 1
8131: PUSH
8132: LD_VAR 0 1
8136: PPUSH
8137: LD_VAR 0 3
8141: PPUSH
8142: LD_VAR 0 5
8146: PPUSH
8147: CALL_OW 1
8151: ST_TO_ADDR
// result := list ;
8152: LD_ADDR_VAR 0 4
8156: PUSH
8157: LD_VAR 0 1
8161: ST_TO_ADDR
// end ;
8162: LD_VAR 0 4
8166: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8167: LD_INT 0
8169: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8170: LD_ADDR_VAR 0 5
8174: PUSH
8175: LD_VAR 0 1
8179: PPUSH
8180: CALL_OW 250
8184: PPUSH
8185: LD_VAR 0 1
8189: PPUSH
8190: CALL_OW 251
8194: PPUSH
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_VAR 0 3
8204: PPUSH
8205: LD_VAR 0 4
8209: PPUSH
8210: CALL 8588 0 5
8214: ST_TO_ADDR
// end ;
8215: LD_VAR 0 5
8219: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8220: LD_INT 0
8222: PPUSH
8223: PPUSH
8224: PPUSH
8225: PPUSH
// if not list or not unit then
8226: LD_VAR 0 2
8230: NOT
8231: PUSH
8232: LD_VAR 0 1
8236: NOT
8237: OR
8238: IFFALSE 8242
// exit ;
8240: GO 8583
// result := [ ] ;
8242: LD_ADDR_VAR 0 5
8246: PUSH
8247: EMPTY
8248: ST_TO_ADDR
// for i in list do
8249: LD_ADDR_VAR 0 6
8253: PUSH
8254: LD_VAR 0 2
8258: PUSH
8259: FOR_IN
8260: IFFALSE 8478
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8262: LD_ADDR_VAR 0 8
8266: PUSH
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_VAR 0 6
8276: PUSH
8277: LD_INT 1
8279: ARRAY
8280: PPUSH
8281: LD_VAR 0 6
8285: PUSH
8286: LD_INT 2
8288: ARRAY
8289: PPUSH
8290: CALL_OW 297
8294: ST_TO_ADDR
// if not Count ( result ) then
8295: LD_VAR 0 5
8299: PPUSH
8300: CALL 4872 0 1
8304: NOT
8305: IFFALSE 8338
// begin result := Join ( result , [ i , tmp ] ) ;
8307: LD_ADDR_VAR 0 5
8311: PUSH
8312: LD_VAR 0 5
8316: PPUSH
8317: LD_VAR 0 6
8321: PUSH
8322: LD_VAR 0 8
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PPUSH
8331: CALL 40461 0 2
8335: ST_TO_ADDR
// continue ;
8336: GO 8259
// end ; if result [ result ] [ 2 ] <= tmp then
8338: LD_VAR 0 5
8342: PUSH
8343: LD_VAR 0 5
8347: ARRAY
8348: PUSH
8349: LD_INT 2
8351: ARRAY
8352: PUSH
8353: LD_VAR 0 8
8357: LESSEQUAL
8358: IFFALSE 8391
// result := Join ( result , [ i , tmp ] ) else
8360: LD_ADDR_VAR 0 5
8364: PUSH
8365: LD_VAR 0 5
8369: PPUSH
8370: LD_VAR 0 6
8374: PUSH
8375: LD_VAR 0 8
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PPUSH
8384: CALL 40461 0 2
8388: ST_TO_ADDR
8389: GO 8476
// begin for j := 1 to Count ( result ) do
8391: LD_ADDR_VAR 0 7
8395: PUSH
8396: DOUBLE
8397: LD_INT 1
8399: DEC
8400: ST_TO_ADDR
8401: LD_VAR 0 5
8405: PPUSH
8406: CALL 4872 0 1
8410: PUSH
8411: FOR_TO
8412: IFFALSE 8474
// begin if tmp < result [ j ] [ 2 ] then
8414: LD_VAR 0 8
8418: PUSH
8419: LD_VAR 0 5
8423: PUSH
8424: LD_VAR 0 7
8428: ARRAY
8429: PUSH
8430: LD_INT 2
8432: ARRAY
8433: LESS
8434: IFFALSE 8472
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8436: LD_ADDR_VAR 0 5
8440: PUSH
8441: LD_VAR 0 5
8445: PPUSH
8446: LD_VAR 0 7
8450: PPUSH
8451: LD_VAR 0 6
8455: PUSH
8456: LD_VAR 0 8
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 2
8469: ST_TO_ADDR
// break ;
8470: GO 8474
// end ; end ;
8472: GO 8411
8474: POP
8475: POP
// end ; end ;
8476: GO 8259
8478: POP
8479: POP
// if result and not asc then
8480: LD_VAR 0 5
8484: PUSH
8485: LD_VAR 0 3
8489: NOT
8490: AND
8491: IFFALSE 8508
// result := ReverseArray ( result ) ;
8493: LD_ADDR_VAR 0 5
8497: PUSH
8498: LD_VAR 0 5
8502: PPUSH
8503: CALL 35748 0 1
8507: ST_TO_ADDR
// tmp := [ ] ;
8508: LD_ADDR_VAR 0 8
8512: PUSH
8513: EMPTY
8514: ST_TO_ADDR
// if mode then
8515: LD_VAR 0 4
8519: IFFALSE 8583
// begin for i := 1 to result do
8521: LD_ADDR_VAR 0 6
8525: PUSH
8526: DOUBLE
8527: LD_INT 1
8529: DEC
8530: ST_TO_ADDR
8531: LD_VAR 0 5
8535: PUSH
8536: FOR_TO
8537: IFFALSE 8571
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8539: LD_ADDR_VAR 0 8
8543: PUSH
8544: LD_VAR 0 8
8548: PPUSH
8549: LD_VAR 0 5
8553: PUSH
8554: LD_VAR 0 6
8558: ARRAY
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: PPUSH
8564: CALL 40461 0 2
8568: ST_TO_ADDR
8569: GO 8536
8571: POP
8572: POP
// result := tmp ;
8573: LD_ADDR_VAR 0 5
8577: PUSH
8578: LD_VAR 0 8
8582: ST_TO_ADDR
// end ; end ;
8583: LD_VAR 0 5
8587: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8588: LD_INT 0
8590: PPUSH
8591: PPUSH
8592: PPUSH
8593: PPUSH
// if not list then
8594: LD_VAR 0 3
8598: NOT
8599: IFFALSE 8603
// exit ;
8601: GO 8991
// result := [ ] ;
8603: LD_ADDR_VAR 0 6
8607: PUSH
8608: EMPTY
8609: ST_TO_ADDR
// for i in list do
8610: LD_ADDR_VAR 0 7
8614: PUSH
8615: LD_VAR 0 3
8619: PUSH
8620: FOR_IN
8621: IFFALSE 8823
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8623: LD_ADDR_VAR 0 9
8627: PUSH
8628: LD_VAR 0 7
8632: PPUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: LD_VAR 0 2
8642: PPUSH
8643: CALL_OW 297
8647: ST_TO_ADDR
// if not result then
8648: LD_VAR 0 6
8652: NOT
8653: IFFALSE 8679
// result := [ [ i , tmp ] ] else
8655: LD_ADDR_VAR 0 6
8659: PUSH
8660: LD_VAR 0 7
8664: PUSH
8665: LD_VAR 0 9
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: ST_TO_ADDR
8677: GO 8821
// begin if result [ result ] [ 2 ] < tmp then
8679: LD_VAR 0 6
8683: PUSH
8684: LD_VAR 0 6
8688: ARRAY
8689: PUSH
8690: LD_INT 2
8692: ARRAY
8693: PUSH
8694: LD_VAR 0 9
8698: LESS
8699: IFFALSE 8741
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8701: LD_ADDR_VAR 0 6
8705: PUSH
8706: LD_VAR 0 6
8710: PPUSH
8711: LD_VAR 0 6
8715: PUSH
8716: LD_INT 1
8718: PLUS
8719: PPUSH
8720: LD_VAR 0 7
8724: PUSH
8725: LD_VAR 0 9
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 2
8738: ST_TO_ADDR
8739: GO 8821
// for j = 1 to result do
8741: LD_ADDR_VAR 0 8
8745: PUSH
8746: DOUBLE
8747: LD_INT 1
8749: DEC
8750: ST_TO_ADDR
8751: LD_VAR 0 6
8755: PUSH
8756: FOR_TO
8757: IFFALSE 8819
// begin if tmp < result [ j ] [ 2 ] then
8759: LD_VAR 0 9
8763: PUSH
8764: LD_VAR 0 6
8768: PUSH
8769: LD_VAR 0 8
8773: ARRAY
8774: PUSH
8775: LD_INT 2
8777: ARRAY
8778: LESS
8779: IFFALSE 8817
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8781: LD_ADDR_VAR 0 6
8785: PUSH
8786: LD_VAR 0 6
8790: PPUSH
8791: LD_VAR 0 8
8795: PPUSH
8796: LD_VAR 0 7
8800: PUSH
8801: LD_VAR 0 9
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PPUSH
8810: CALL_OW 2
8814: ST_TO_ADDR
// break ;
8815: GO 8819
// end ; end ;
8817: GO 8756
8819: POP
8820: POP
// end ; end ;
8821: GO 8620
8823: POP
8824: POP
// if result and not asc then
8825: LD_VAR 0 6
8829: PUSH
8830: LD_VAR 0 4
8834: NOT
8835: AND
8836: IFFALSE 8911
// begin tmp := result ;
8838: LD_ADDR_VAR 0 9
8842: PUSH
8843: LD_VAR 0 6
8847: ST_TO_ADDR
// for i = tmp downto 1 do
8848: LD_ADDR_VAR 0 7
8852: PUSH
8853: DOUBLE
8854: LD_VAR 0 9
8858: INC
8859: ST_TO_ADDR
8860: LD_INT 1
8862: PUSH
8863: FOR_DOWNTO
8864: IFFALSE 8909
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8866: LD_ADDR_VAR 0 6
8870: PUSH
8871: LD_VAR 0 6
8875: PPUSH
8876: LD_VAR 0 9
8880: PUSH
8881: LD_VAR 0 7
8885: MINUS
8886: PUSH
8887: LD_INT 1
8889: PLUS
8890: PPUSH
8891: LD_VAR 0 9
8895: PUSH
8896: LD_VAR 0 7
8900: ARRAY
8901: PPUSH
8902: CALL_OW 1
8906: ST_TO_ADDR
8907: GO 8863
8909: POP
8910: POP
// end ; tmp := [ ] ;
8911: LD_ADDR_VAR 0 9
8915: PUSH
8916: EMPTY
8917: ST_TO_ADDR
// if mode then
8918: LD_VAR 0 5
8922: IFFALSE 8991
// begin for i = 1 to result do
8924: LD_ADDR_VAR 0 7
8928: PUSH
8929: DOUBLE
8930: LD_INT 1
8932: DEC
8933: ST_TO_ADDR
8934: LD_VAR 0 6
8938: PUSH
8939: FOR_TO
8940: IFFALSE 8979
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8942: LD_ADDR_VAR 0 9
8946: PUSH
8947: LD_VAR 0 9
8951: PPUSH
8952: LD_VAR 0 7
8956: PPUSH
8957: LD_VAR 0 6
8961: PUSH
8962: LD_VAR 0 7
8966: ARRAY
8967: PUSH
8968: LD_INT 1
8970: ARRAY
8971: PPUSH
8972: CALL_OW 1
8976: ST_TO_ADDR
8977: GO 8939
8979: POP
8980: POP
// result := tmp ;
8981: LD_ADDR_VAR 0 6
8985: PUSH
8986: LD_VAR 0 9
8990: ST_TO_ADDR
// end ; end ;
8991: LD_VAR 0 6
8995: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8996: LD_INT 0
8998: PPUSH
8999: PPUSH
9000: PPUSH
9001: PPUSH
9002: PPUSH
9003: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9004: LD_ADDR_VAR 0 5
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: LD_INT 0
9014: PUSH
9015: LD_INT 0
9017: PUSH
9018: EMPTY
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: ST_TO_ADDR
// if not x or not y then
9026: LD_VAR 0 2
9030: NOT
9031: PUSH
9032: LD_VAR 0 3
9036: NOT
9037: OR
9038: IFFALSE 9042
// exit ;
9040: GO 10692
// if not range then
9042: LD_VAR 0 4
9046: NOT
9047: IFFALSE 9057
// range := 10 ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 10
9056: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9057: LD_ADDR_VAR 0 8
9061: PUSH
9062: LD_INT 81
9064: PUSH
9065: LD_VAR 0 1
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 92
9076: PUSH
9077: LD_VAR 0 2
9081: PUSH
9082: LD_VAR 0 3
9086: PUSH
9087: LD_VAR 0 4
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 3
9100: PUSH
9101: LD_INT 21
9103: PUSH
9104: LD_INT 3
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 69
9124: ST_TO_ADDR
// if not tmp then
9125: LD_VAR 0 8
9129: NOT
9130: IFFALSE 9134
// exit ;
9132: GO 10692
// for i in tmp do
9134: LD_ADDR_VAR 0 6
9138: PUSH
9139: LD_VAR 0 8
9143: PUSH
9144: FOR_IN
9145: IFFALSE 10667
// begin points := [ 0 , 0 , 0 ] ;
9147: LD_ADDR_VAR 0 9
9151: PUSH
9152: LD_INT 0
9154: PUSH
9155: LD_INT 0
9157: PUSH
9158: LD_INT 0
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: LIST
9165: ST_TO_ADDR
// bpoints := 1 ;
9166: LD_ADDR_VAR 0 10
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9174: LD_VAR 0 6
9178: PPUSH
9179: CALL_OW 247
9183: PUSH
9184: LD_INT 1
9186: DOUBLE
9187: EQUAL
9188: IFTRUE 9192
9190: GO 9770
9192: POP
// begin if GetClass ( i ) = 1 then
9193: LD_VAR 0 6
9197: PPUSH
9198: CALL_OW 257
9202: PUSH
9203: LD_INT 1
9205: EQUAL
9206: IFFALSE 9227
// points := [ 10 , 5 , 3 ] ;
9208: LD_ADDR_VAR 0 9
9212: PUSH
9213: LD_INT 10
9215: PUSH
9216: LD_INT 5
9218: PUSH
9219: LD_INT 3
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: LIST
9226: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9227: LD_VAR 0 6
9231: PPUSH
9232: CALL_OW 257
9236: PUSH
9237: LD_INT 2
9239: PUSH
9240: LD_INT 3
9242: PUSH
9243: LD_INT 4
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: IN
9251: IFFALSE 9272
// points := [ 3 , 2 , 1 ] ;
9253: LD_ADDR_VAR 0 9
9257: PUSH
9258: LD_INT 3
9260: PUSH
9261: LD_INT 2
9263: PUSH
9264: LD_INT 1
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9272: LD_VAR 0 6
9276: PPUSH
9277: CALL_OW 257
9281: PUSH
9282: LD_INT 5
9284: EQUAL
9285: IFFALSE 9306
// points := [ 130 , 5 , 2 ] ;
9287: LD_ADDR_VAR 0 9
9291: PUSH
9292: LD_INT 130
9294: PUSH
9295: LD_INT 5
9297: PUSH
9298: LD_INT 2
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9306: LD_VAR 0 6
9310: PPUSH
9311: CALL_OW 257
9315: PUSH
9316: LD_INT 8
9318: EQUAL
9319: IFFALSE 9340
// points := [ 35 , 35 , 30 ] ;
9321: LD_ADDR_VAR 0 9
9325: PUSH
9326: LD_INT 35
9328: PUSH
9329: LD_INT 35
9331: PUSH
9332: LD_INT 30
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9340: LD_VAR 0 6
9344: PPUSH
9345: CALL_OW 257
9349: PUSH
9350: LD_INT 9
9352: EQUAL
9353: IFFALSE 9374
// points := [ 20 , 55 , 40 ] ;
9355: LD_ADDR_VAR 0 9
9359: PUSH
9360: LD_INT 20
9362: PUSH
9363: LD_INT 55
9365: PUSH
9366: LD_INT 40
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9374: LD_VAR 0 6
9378: PPUSH
9379: CALL_OW 257
9383: PUSH
9384: LD_INT 12
9386: PUSH
9387: LD_INT 16
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: IN
9394: IFFALSE 9415
// points := [ 5 , 3 , 2 ] ;
9396: LD_ADDR_VAR 0 9
9400: PUSH
9401: LD_INT 5
9403: PUSH
9404: LD_INT 3
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9415: LD_VAR 0 6
9419: PPUSH
9420: CALL_OW 257
9424: PUSH
9425: LD_INT 17
9427: EQUAL
9428: IFFALSE 9449
// points := [ 100 , 50 , 75 ] ;
9430: LD_ADDR_VAR 0 9
9434: PUSH
9435: LD_INT 100
9437: PUSH
9438: LD_INT 50
9440: PUSH
9441: LD_INT 75
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9449: LD_VAR 0 6
9453: PPUSH
9454: CALL_OW 257
9458: PUSH
9459: LD_INT 15
9461: EQUAL
9462: IFFALSE 9483
// points := [ 10 , 5 , 3 ] ;
9464: LD_ADDR_VAR 0 9
9468: PUSH
9469: LD_INT 10
9471: PUSH
9472: LD_INT 5
9474: PUSH
9475: LD_INT 3
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9483: LD_VAR 0 6
9487: PPUSH
9488: CALL_OW 257
9492: PUSH
9493: LD_INT 14
9495: EQUAL
9496: IFFALSE 9517
// points := [ 10 , 0 , 0 ] ;
9498: LD_ADDR_VAR 0 9
9502: PUSH
9503: LD_INT 10
9505: PUSH
9506: LD_INT 0
9508: PUSH
9509: LD_INT 0
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9517: LD_VAR 0 6
9521: PPUSH
9522: CALL_OW 257
9526: PUSH
9527: LD_INT 11
9529: EQUAL
9530: IFFALSE 9551
// points := [ 30 , 10 , 5 ] ;
9532: LD_ADDR_VAR 0 9
9536: PUSH
9537: LD_INT 30
9539: PUSH
9540: LD_INT 10
9542: PUSH
9543: LD_INT 5
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9551: LD_VAR 0 1
9555: PPUSH
9556: LD_INT 5
9558: PPUSH
9559: CALL_OW 321
9563: PUSH
9564: LD_INT 2
9566: EQUAL
9567: IFFALSE 9584
// bpoints := bpoints * 1.8 ;
9569: LD_ADDR_VAR 0 10
9573: PUSH
9574: LD_VAR 0 10
9578: PUSH
9579: LD_REAL  1.80000000000000E+0000
9582: MUL
9583: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9584: LD_VAR 0 6
9588: PPUSH
9589: CALL_OW 257
9593: PUSH
9594: LD_INT 1
9596: PUSH
9597: LD_INT 2
9599: PUSH
9600: LD_INT 3
9602: PUSH
9603: LD_INT 4
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: IN
9612: PUSH
9613: LD_VAR 0 1
9617: PPUSH
9618: LD_INT 51
9620: PPUSH
9621: CALL_OW 321
9625: PUSH
9626: LD_INT 2
9628: EQUAL
9629: AND
9630: IFFALSE 9647
// bpoints := bpoints * 1.2 ;
9632: LD_ADDR_VAR 0 10
9636: PUSH
9637: LD_VAR 0 10
9641: PUSH
9642: LD_REAL  1.20000000000000E+0000
9645: MUL
9646: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9647: LD_VAR 0 6
9651: PPUSH
9652: CALL_OW 257
9656: PUSH
9657: LD_INT 5
9659: PUSH
9660: LD_INT 7
9662: PUSH
9663: LD_INT 9
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: IN
9671: PUSH
9672: LD_VAR 0 1
9676: PPUSH
9677: LD_INT 52
9679: PPUSH
9680: CALL_OW 321
9684: PUSH
9685: LD_INT 2
9687: EQUAL
9688: AND
9689: IFFALSE 9706
// bpoints := bpoints * 1.5 ;
9691: LD_ADDR_VAR 0 10
9695: PUSH
9696: LD_VAR 0 10
9700: PUSH
9701: LD_REAL  1.50000000000000E+0000
9704: MUL
9705: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9706: LD_VAR 0 1
9710: PPUSH
9711: LD_INT 66
9713: PPUSH
9714: CALL_OW 321
9718: PUSH
9719: LD_INT 2
9721: EQUAL
9722: IFFALSE 9739
// bpoints := bpoints * 1.1 ;
9724: LD_ADDR_VAR 0 10
9728: PUSH
9729: LD_VAR 0 10
9733: PUSH
9734: LD_REAL  1.10000000000000E+0000
9737: MUL
9738: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9739: LD_ADDR_VAR 0 10
9743: PUSH
9744: LD_VAR 0 10
9748: PUSH
9749: LD_VAR 0 6
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: CALL_OW 259
9761: PUSH
9762: LD_REAL  1.15000000000000E+0000
9765: MUL
9766: MUL
9767: ST_TO_ADDR
// end ; unit_vehicle :
9768: GO 10596
9770: LD_INT 2
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 10584
9778: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9779: LD_VAR 0 6
9783: PPUSH
9784: CALL_OW 264
9788: PUSH
9789: LD_INT 2
9791: PUSH
9792: LD_INT 42
9794: PUSH
9795: LD_INT 24
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: IN
9803: IFFALSE 9824
// points := [ 25 , 5 , 3 ] ;
9805: LD_ADDR_VAR 0 9
9809: PUSH
9810: LD_INT 25
9812: PUSH
9813: LD_INT 5
9815: PUSH
9816: LD_INT 3
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: LIST
9823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9824: LD_VAR 0 6
9828: PPUSH
9829: CALL_OW 264
9833: PUSH
9834: LD_INT 4
9836: PUSH
9837: LD_INT 43
9839: PUSH
9840: LD_INT 25
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: IN
9848: IFFALSE 9869
// points := [ 40 , 15 , 5 ] ;
9850: LD_ADDR_VAR 0 9
9854: PUSH
9855: LD_INT 40
9857: PUSH
9858: LD_INT 15
9860: PUSH
9861: LD_INT 5
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 264
9878: PUSH
9879: LD_INT 3
9881: PUSH
9882: LD_INT 23
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: IN
9889: IFFALSE 9910
// points := [ 7 , 25 , 8 ] ;
9891: LD_ADDR_VAR 0 9
9895: PUSH
9896: LD_INT 7
9898: PUSH
9899: LD_INT 25
9901: PUSH
9902: LD_INT 8
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9910: LD_VAR 0 6
9914: PPUSH
9915: CALL_OW 264
9919: PUSH
9920: LD_INT 5
9922: PUSH
9923: LD_INT 27
9925: PUSH
9926: LD_INT 44
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: LIST
9933: IN
9934: IFFALSE 9955
// points := [ 14 , 50 , 16 ] ;
9936: LD_ADDR_VAR 0 9
9940: PUSH
9941: LD_INT 14
9943: PUSH
9944: LD_INT 50
9946: PUSH
9947: LD_INT 16
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: LIST
9954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9955: LD_VAR 0 6
9959: PPUSH
9960: CALL_OW 264
9964: PUSH
9965: LD_INT 6
9967: PUSH
9968: LD_INT 46
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: IN
9975: IFFALSE 9996
// points := [ 32 , 120 , 70 ] ;
9977: LD_ADDR_VAR 0 9
9981: PUSH
9982: LD_INT 32
9984: PUSH
9985: LD_INT 120
9987: PUSH
9988: LD_INT 70
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9996: LD_VAR 0 6
10000: PPUSH
10001: CALL_OW 264
10005: PUSH
10006: LD_INT 7
10008: PUSH
10009: LD_INT 28
10011: PUSH
10012: LD_INT 45
10014: PUSH
10015: LD_INT 92
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: IN
10024: IFFALSE 10045
// points := [ 35 , 20 , 45 ] ;
10026: LD_ADDR_VAR 0 9
10030: PUSH
10031: LD_INT 35
10033: PUSH
10034: LD_INT 20
10036: PUSH
10037: LD_INT 45
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10045: LD_VAR 0 6
10049: PPUSH
10050: CALL_OW 264
10054: PUSH
10055: LD_INT 47
10057: PUSH
10058: EMPTY
10059: LIST
10060: IN
10061: IFFALSE 10082
// points := [ 67 , 45 , 75 ] ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: LD_INT 67
10070: PUSH
10071: LD_INT 45
10073: PUSH
10074: LD_INT 75
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10082: LD_VAR 0 6
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 26
10094: PUSH
10095: EMPTY
10096: LIST
10097: IN
10098: IFFALSE 10119
// points := [ 120 , 30 , 80 ] ;
10100: LD_ADDR_VAR 0 9
10104: PUSH
10105: LD_INT 120
10107: PUSH
10108: LD_INT 30
10110: PUSH
10111: LD_INT 80
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10119: LD_VAR 0 6
10123: PPUSH
10124: CALL_OW 264
10128: PUSH
10129: LD_INT 22
10131: PUSH
10132: EMPTY
10133: LIST
10134: IN
10135: IFFALSE 10156
// points := [ 40 , 1 , 1 ] ;
10137: LD_ADDR_VAR 0 9
10141: PUSH
10142: LD_INT 40
10144: PUSH
10145: LD_INT 1
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10156: LD_VAR 0 6
10160: PPUSH
10161: CALL_OW 264
10165: PUSH
10166: LD_INT 29
10168: PUSH
10169: EMPTY
10170: LIST
10171: IN
10172: IFFALSE 10193
// points := [ 70 , 200 , 400 ] ;
10174: LD_ADDR_VAR 0 9
10178: PUSH
10179: LD_INT 70
10181: PUSH
10182: LD_INT 200
10184: PUSH
10185: LD_INT 400
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10193: LD_VAR 0 6
10197: PPUSH
10198: CALL_OW 264
10202: PUSH
10203: LD_INT 14
10205: PUSH
10206: LD_INT 53
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: IN
10213: IFFALSE 10234
// points := [ 40 , 10 , 20 ] ;
10215: LD_ADDR_VAR 0 9
10219: PUSH
10220: LD_INT 40
10222: PUSH
10223: LD_INT 10
10225: PUSH
10226: LD_INT 20
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10234: LD_VAR 0 6
10238: PPUSH
10239: CALL_OW 264
10243: PUSH
10244: LD_INT 9
10246: PUSH
10247: EMPTY
10248: LIST
10249: IN
10250: IFFALSE 10271
// points := [ 5 , 70 , 20 ] ;
10252: LD_ADDR_VAR 0 9
10256: PUSH
10257: LD_INT 5
10259: PUSH
10260: LD_INT 70
10262: PUSH
10263: LD_INT 20
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10271: LD_VAR 0 6
10275: PPUSH
10276: CALL_OW 264
10280: PUSH
10281: LD_INT 10
10283: PUSH
10284: EMPTY
10285: LIST
10286: IN
10287: IFFALSE 10308
// points := [ 35 , 110 , 70 ] ;
10289: LD_ADDR_VAR 0 9
10293: PUSH
10294: LD_INT 35
10296: PUSH
10297: LD_INT 110
10299: PUSH
10300: LD_INT 70
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10308: LD_VAR 0 6
10312: PPUSH
10313: CALL_OW 265
10317: PUSH
10318: LD_INT 25
10320: EQUAL
10321: IFFALSE 10342
// points := [ 80 , 65 , 100 ] ;
10323: LD_ADDR_VAR 0 9
10327: PUSH
10328: LD_INT 80
10330: PUSH
10331: LD_INT 65
10333: PUSH
10334: LD_INT 100
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10342: LD_VAR 0 6
10346: PPUSH
10347: CALL_OW 263
10351: PUSH
10352: LD_INT 1
10354: EQUAL
10355: IFFALSE 10390
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10357: LD_ADDR_VAR 0 10
10361: PUSH
10362: LD_VAR 0 10
10366: PUSH
10367: LD_VAR 0 6
10371: PPUSH
10372: CALL_OW 311
10376: PPUSH
10377: LD_INT 3
10379: PPUSH
10380: CALL_OW 259
10384: PUSH
10385: LD_INT 4
10387: MUL
10388: MUL
10389: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10390: LD_VAR 0 6
10394: PPUSH
10395: CALL_OW 263
10399: PUSH
10400: LD_INT 2
10402: EQUAL
10403: IFFALSE 10454
// begin j := IsControledBy ( i ) ;
10405: LD_ADDR_VAR 0 7
10409: PUSH
10410: LD_VAR 0 6
10414: PPUSH
10415: CALL_OW 312
10419: ST_TO_ADDR
// if j then
10420: LD_VAR 0 7
10424: IFFALSE 10454
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10426: LD_ADDR_VAR 0 10
10430: PUSH
10431: LD_VAR 0 10
10435: PUSH
10436: LD_VAR 0 7
10440: PPUSH
10441: LD_INT 3
10443: PPUSH
10444: CALL_OW 259
10448: PUSH
10449: LD_INT 3
10451: MUL
10452: MUL
10453: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10454: LD_VAR 0 6
10458: PPUSH
10459: CALL_OW 264
10463: PUSH
10464: LD_INT 5
10466: PUSH
10467: LD_INT 6
10469: PUSH
10470: LD_INT 46
10472: PUSH
10473: LD_INT 44
10475: PUSH
10476: LD_INT 47
10478: PUSH
10479: LD_INT 45
10481: PUSH
10482: LD_INT 28
10484: PUSH
10485: LD_INT 7
10487: PUSH
10488: LD_INT 27
10490: PUSH
10491: LD_INT 29
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: IN
10506: PUSH
10507: LD_VAR 0 1
10511: PPUSH
10512: LD_INT 52
10514: PPUSH
10515: CALL_OW 321
10519: PUSH
10520: LD_INT 2
10522: EQUAL
10523: AND
10524: IFFALSE 10541
// bpoints := bpoints * 1.2 ;
10526: LD_ADDR_VAR 0 10
10530: PUSH
10531: LD_VAR 0 10
10535: PUSH
10536: LD_REAL  1.20000000000000E+0000
10539: MUL
10540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10541: LD_VAR 0 6
10545: PPUSH
10546: CALL_OW 264
10550: PUSH
10551: LD_INT 6
10553: PUSH
10554: LD_INT 46
10556: PUSH
10557: LD_INT 47
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: IN
10565: IFFALSE 10582
// bpoints := bpoints * 1.2 ;
10567: LD_ADDR_VAR 0 10
10571: PUSH
10572: LD_VAR 0 10
10576: PUSH
10577: LD_REAL  1.20000000000000E+0000
10580: MUL
10581: ST_TO_ADDR
// end ; unit_building :
10582: GO 10596
10584: LD_INT 3
10586: DOUBLE
10587: EQUAL
10588: IFTRUE 10592
10590: GO 10595
10592: POP
// ; end ;
10593: GO 10596
10595: POP
// for j = 1 to 3 do
10596: LD_ADDR_VAR 0 7
10600: PUSH
10601: DOUBLE
10602: LD_INT 1
10604: DEC
10605: ST_TO_ADDR
10606: LD_INT 3
10608: PUSH
10609: FOR_TO
10610: IFFALSE 10663
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10612: LD_ADDR_VAR 0 5
10616: PUSH
10617: LD_VAR 0 5
10621: PPUSH
10622: LD_VAR 0 7
10626: PPUSH
10627: LD_VAR 0 5
10631: PUSH
10632: LD_VAR 0 7
10636: ARRAY
10637: PUSH
10638: LD_VAR 0 9
10642: PUSH
10643: LD_VAR 0 7
10647: ARRAY
10648: PUSH
10649: LD_VAR 0 10
10653: MUL
10654: PLUS
10655: PPUSH
10656: CALL_OW 1
10660: ST_TO_ADDR
10661: GO 10609
10663: POP
10664: POP
// end ;
10665: GO 9144
10667: POP
10668: POP
// result := Replace ( result , 4 , tmp ) ;
10669: LD_ADDR_VAR 0 5
10673: PUSH
10674: LD_VAR 0 5
10678: PPUSH
10679: LD_INT 4
10681: PPUSH
10682: LD_VAR 0 8
10686: PPUSH
10687: CALL_OW 1
10691: ST_TO_ADDR
// end ;
10692: LD_VAR 0 5
10696: RET
// export function DangerAtRange ( unit , range ) ; begin
10697: LD_INT 0
10699: PPUSH
// if not unit then
10700: LD_VAR 0 1
10704: NOT
10705: IFFALSE 10709
// exit ;
10707: GO 10754
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10709: LD_ADDR_VAR 0 3
10713: PUSH
10714: LD_VAR 0 1
10718: PPUSH
10719: CALL_OW 255
10723: PPUSH
10724: LD_VAR 0 1
10728: PPUSH
10729: CALL_OW 250
10733: PPUSH
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 251
10743: PPUSH
10744: LD_VAR 0 2
10748: PPUSH
10749: CALL 8996 0 4
10753: ST_TO_ADDR
// end ;
10754: LD_VAR 0 3
10758: RET
// export function DangerInArea ( side , area ) ; begin
10759: LD_INT 0
10761: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10762: LD_ADDR_VAR 0 3
10766: PUSH
10767: LD_VAR 0 2
10771: PPUSH
10772: LD_INT 81
10774: PUSH
10775: LD_VAR 0 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PPUSH
10784: CALL_OW 70
10788: ST_TO_ADDR
// end ;
10789: LD_VAR 0 3
10793: RET
// export function IsExtension ( b ) ; begin
10794: LD_INT 0
10796: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10797: LD_ADDR_VAR 0 2
10801: PUSH
10802: LD_VAR 0 1
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 20
10812: PUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 17
10818: PUSH
10819: LD_INT 24
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 19
10827: PUSH
10828: LD_INT 16
10830: PUSH
10831: LD_INT 25
10833: PUSH
10834: LD_INT 18
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: IN
10849: ST_TO_ADDR
// end ;
10850: LD_VAR 0 2
10854: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10855: LD_INT 0
10857: PPUSH
10858: PPUSH
10859: PPUSH
// result := [ ] ;
10860: LD_ADDR_VAR 0 4
10864: PUSH
10865: EMPTY
10866: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10867: LD_ADDR_VAR 0 5
10871: PUSH
10872: LD_VAR 0 2
10876: PPUSH
10877: LD_INT 21
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PPUSH
10887: CALL_OW 70
10891: ST_TO_ADDR
// if not tmp then
10892: LD_VAR 0 5
10896: NOT
10897: IFFALSE 10901
// exit ;
10899: GO 10965
// if checkLink then
10901: LD_VAR 0 3
10905: IFFALSE 10955
// begin for i in tmp do
10907: LD_ADDR_VAR 0 6
10911: PUSH
10912: LD_VAR 0 5
10916: PUSH
10917: FOR_IN
10918: IFFALSE 10953
// if GetBase ( i ) <> base then
10920: LD_VAR 0 6
10924: PPUSH
10925: CALL_OW 274
10929: PUSH
10930: LD_VAR 0 1
10934: NONEQUAL
10935: IFFALSE 10951
// ComLinkToBase ( base , i ) ;
10937: LD_VAR 0 1
10941: PPUSH
10942: LD_VAR 0 6
10946: PPUSH
10947: CALL_OW 169
10951: GO 10917
10953: POP
10954: POP
// end ; result := tmp ;
10955: LD_ADDR_VAR 0 4
10959: PUSH
10960: LD_VAR 0 5
10964: ST_TO_ADDR
// end ;
10965: LD_VAR 0 4
10969: RET
// export function ComComplete ( units , b ) ; var i ; begin
10970: LD_INT 0
10972: PPUSH
10973: PPUSH
// if not units then
10974: LD_VAR 0 1
10978: NOT
10979: IFFALSE 10983
// exit ;
10981: GO 11073
// for i in units do
10983: LD_ADDR_VAR 0 4
10987: PUSH
10988: LD_VAR 0 1
10992: PUSH
10993: FOR_IN
10994: IFFALSE 11071
// if BuildingStatus ( b ) = bs_build then
10996: LD_VAR 0 2
11000: PPUSH
11001: CALL_OW 461
11005: PUSH
11006: LD_INT 1
11008: EQUAL
11009: IFFALSE 11069
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11011: LD_VAR 0 4
11015: PPUSH
11016: LD_STRING h
11018: PUSH
11019: LD_VAR 0 2
11023: PPUSH
11024: CALL_OW 250
11028: PUSH
11029: LD_VAR 0 2
11033: PPUSH
11034: CALL_OW 251
11038: PUSH
11039: LD_VAR 0 2
11043: PUSH
11044: LD_INT 0
11046: PUSH
11047: LD_INT 0
11049: PUSH
11050: LD_INT 0
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: PPUSH
11065: CALL_OW 446
11069: GO 10993
11071: POP
11072: POP
// end ;
11073: LD_VAR 0 3
11077: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11078: LD_INT 0
11080: PPUSH
11081: PPUSH
11082: PPUSH
11083: PPUSH
11084: PPUSH
11085: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11086: LD_VAR 0 1
11090: NOT
11091: PUSH
11092: LD_VAR 0 1
11096: PPUSH
11097: CALL_OW 263
11101: PUSH
11102: LD_INT 2
11104: NONEQUAL
11105: OR
11106: IFFALSE 11110
// exit ;
11108: GO 11426
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11110: LD_ADDR_VAR 0 6
11114: PUSH
11115: LD_INT 22
11117: PUSH
11118: LD_VAR 0 1
11122: PPUSH
11123: CALL_OW 255
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 2
11134: PUSH
11135: LD_INT 30
11137: PUSH
11138: LD_INT 36
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 34
11147: PUSH
11148: LD_INT 31
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PPUSH
11164: CALL_OW 69
11168: ST_TO_ADDR
// if not tmp then
11169: LD_VAR 0 6
11173: NOT
11174: IFFALSE 11178
// exit ;
11176: GO 11426
// result := [ ] ;
11178: LD_ADDR_VAR 0 2
11182: PUSH
11183: EMPTY
11184: ST_TO_ADDR
// for i in tmp do
11185: LD_ADDR_VAR 0 3
11189: PUSH
11190: LD_VAR 0 6
11194: PUSH
11195: FOR_IN
11196: IFFALSE 11267
// begin t := UnitsInside ( i ) ;
11198: LD_ADDR_VAR 0 4
11202: PUSH
11203: LD_VAR 0 3
11207: PPUSH
11208: CALL_OW 313
11212: ST_TO_ADDR
// if t then
11213: LD_VAR 0 4
11217: IFFALSE 11265
// for j in t do
11219: LD_ADDR_VAR 0 7
11223: PUSH
11224: LD_VAR 0 4
11228: PUSH
11229: FOR_IN
11230: IFFALSE 11263
// result := Replace ( result , result + 1 , j ) ;
11232: LD_ADDR_VAR 0 2
11236: PUSH
11237: LD_VAR 0 2
11241: PPUSH
11242: LD_VAR 0 2
11246: PUSH
11247: LD_INT 1
11249: PLUS
11250: PPUSH
11251: LD_VAR 0 7
11255: PPUSH
11256: CALL_OW 1
11260: ST_TO_ADDR
11261: GO 11229
11263: POP
11264: POP
// end ;
11265: GO 11195
11267: POP
11268: POP
// if not result then
11269: LD_VAR 0 2
11273: NOT
11274: IFFALSE 11278
// exit ;
11276: GO 11426
// mech := result [ 1 ] ;
11278: LD_ADDR_VAR 0 5
11282: PUSH
11283: LD_VAR 0 2
11287: PUSH
11288: LD_INT 1
11290: ARRAY
11291: ST_TO_ADDR
// if result > 1 then
11292: LD_VAR 0 2
11296: PUSH
11297: LD_INT 1
11299: GREATER
11300: IFFALSE 11412
// begin for i = 2 to result do
11302: LD_ADDR_VAR 0 3
11306: PUSH
11307: DOUBLE
11308: LD_INT 2
11310: DEC
11311: ST_TO_ADDR
11312: LD_VAR 0 2
11316: PUSH
11317: FOR_TO
11318: IFFALSE 11410
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11320: LD_ADDR_VAR 0 4
11324: PUSH
11325: LD_VAR 0 2
11329: PUSH
11330: LD_VAR 0 3
11334: ARRAY
11335: PPUSH
11336: LD_INT 3
11338: PPUSH
11339: CALL_OW 259
11343: PUSH
11344: LD_VAR 0 2
11348: PUSH
11349: LD_VAR 0 3
11353: ARRAY
11354: PPUSH
11355: CALL_OW 432
11359: MINUS
11360: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11361: LD_VAR 0 4
11365: PUSH
11366: LD_VAR 0 5
11370: PPUSH
11371: LD_INT 3
11373: PPUSH
11374: CALL_OW 259
11378: PUSH
11379: LD_VAR 0 5
11383: PPUSH
11384: CALL_OW 432
11388: MINUS
11389: GREATEREQUAL
11390: IFFALSE 11408
// mech := result [ i ] ;
11392: LD_ADDR_VAR 0 5
11396: PUSH
11397: LD_VAR 0 2
11401: PUSH
11402: LD_VAR 0 3
11406: ARRAY
11407: ST_TO_ADDR
// end ;
11408: GO 11317
11410: POP
11411: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_VAR 0 5
11421: PPUSH
11422: CALL_OW 135
// end ;
11426: LD_VAR 0 2
11430: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11431: LD_INT 0
11433: PPUSH
11434: PPUSH
11435: PPUSH
11436: PPUSH
11437: PPUSH
11438: PPUSH
11439: PPUSH
11440: PPUSH
11441: PPUSH
11442: PPUSH
11443: PPUSH
11444: PPUSH
11445: PPUSH
// result := [ ] ;
11446: LD_ADDR_VAR 0 7
11450: PUSH
11451: EMPTY
11452: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11453: LD_VAR 0 1
11457: PPUSH
11458: CALL_OW 266
11462: PUSH
11463: LD_INT 0
11465: PUSH
11466: LD_INT 1
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: IN
11473: NOT
11474: IFFALSE 11478
// exit ;
11476: GO 13112
// if name then
11478: LD_VAR 0 3
11482: IFFALSE 11498
// SetBName ( base_dep , name ) ;
11484: LD_VAR 0 1
11488: PPUSH
11489: LD_VAR 0 3
11493: PPUSH
11494: CALL_OW 500
// base := GetBase ( base_dep ) ;
11498: LD_ADDR_VAR 0 15
11502: PUSH
11503: LD_VAR 0 1
11507: PPUSH
11508: CALL_OW 274
11512: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11513: LD_ADDR_VAR 0 16
11517: PUSH
11518: LD_VAR 0 1
11522: PPUSH
11523: CALL_OW 255
11527: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11528: LD_ADDR_VAR 0 17
11532: PUSH
11533: LD_VAR 0 1
11537: PPUSH
11538: CALL_OW 248
11542: ST_TO_ADDR
// if sources then
11543: LD_VAR 0 5
11547: IFFALSE 11594
// for i = 1 to 3 do
11549: LD_ADDR_VAR 0 8
11553: PUSH
11554: DOUBLE
11555: LD_INT 1
11557: DEC
11558: ST_TO_ADDR
11559: LD_INT 3
11561: PUSH
11562: FOR_TO
11563: IFFALSE 11592
// AddResourceType ( base , i , sources [ i ] ) ;
11565: LD_VAR 0 15
11569: PPUSH
11570: LD_VAR 0 8
11574: PPUSH
11575: LD_VAR 0 5
11579: PUSH
11580: LD_VAR 0 8
11584: ARRAY
11585: PPUSH
11586: CALL_OW 276
11590: GO 11562
11592: POP
11593: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11594: LD_ADDR_VAR 0 18
11598: PUSH
11599: LD_VAR 0 15
11603: PPUSH
11604: LD_VAR 0 2
11608: PPUSH
11609: LD_INT 1
11611: PPUSH
11612: CALL 10855 0 3
11616: ST_TO_ADDR
// InitHc ;
11617: CALL_OW 19
// InitUc ;
11621: CALL_OW 18
// uc_side := side ;
11625: LD_ADDR_OWVAR 20
11629: PUSH
11630: LD_VAR 0 16
11634: ST_TO_ADDR
// uc_nation := nation ;
11635: LD_ADDR_OWVAR 21
11639: PUSH
11640: LD_VAR 0 17
11644: ST_TO_ADDR
// if buildings then
11645: LD_VAR 0 18
11649: IFFALSE 12971
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11651: LD_ADDR_VAR 0 19
11655: PUSH
11656: LD_VAR 0 18
11660: PPUSH
11661: LD_INT 2
11663: PUSH
11664: LD_INT 30
11666: PUSH
11667: LD_INT 29
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 30
11676: PUSH
11677: LD_INT 30
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: PPUSH
11689: CALL_OW 72
11693: ST_TO_ADDR
// if tmp then
11694: LD_VAR 0 19
11698: IFFALSE 11746
// for i in tmp do
11700: LD_ADDR_VAR 0 8
11704: PUSH
11705: LD_VAR 0 19
11709: PUSH
11710: FOR_IN
11711: IFFALSE 11744
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11713: LD_VAR 0 8
11717: PPUSH
11718: CALL_OW 250
11722: PPUSH
11723: LD_VAR 0 8
11727: PPUSH
11728: CALL_OW 251
11732: PPUSH
11733: LD_VAR 0 16
11737: PPUSH
11738: CALL_OW 441
11742: GO 11710
11744: POP
11745: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11746: LD_VAR 0 18
11750: PPUSH
11751: LD_INT 2
11753: PUSH
11754: LD_INT 30
11756: PUSH
11757: LD_INT 32
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 30
11766: PUSH
11767: LD_INT 33
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: PPUSH
11779: CALL_OW 72
11783: IFFALSE 11871
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11785: LD_ADDR_VAR 0 8
11789: PUSH
11790: LD_VAR 0 18
11794: PPUSH
11795: LD_INT 2
11797: PUSH
11798: LD_INT 30
11800: PUSH
11801: LD_INT 32
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 30
11810: PUSH
11811: LD_INT 33
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: LIST
11822: PPUSH
11823: CALL_OW 72
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11869
// begin if not GetBWeapon ( i ) then
11831: LD_VAR 0 8
11835: PPUSH
11836: CALL_OW 269
11840: NOT
11841: IFFALSE 11867
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11843: LD_VAR 0 8
11847: PPUSH
11848: LD_VAR 0 8
11852: PPUSH
11853: LD_VAR 0 2
11857: PPUSH
11858: CALL 13117 0 2
11862: PPUSH
11863: CALL_OW 431
// end ;
11867: GO 11828
11869: POP
11870: POP
// end ; for i = 1 to personel do
11871: LD_ADDR_VAR 0 8
11875: PUSH
11876: DOUBLE
11877: LD_INT 1
11879: DEC
11880: ST_TO_ADDR
11881: LD_VAR 0 6
11885: PUSH
11886: FOR_TO
11887: IFFALSE 12951
// begin if i > 4 then
11889: LD_VAR 0 8
11893: PUSH
11894: LD_INT 4
11896: GREATER
11897: IFFALSE 11901
// break ;
11899: GO 12951
// case i of 1 :
11901: LD_VAR 0 8
11905: PUSH
11906: LD_INT 1
11908: DOUBLE
11909: EQUAL
11910: IFTRUE 11914
11912: GO 11994
11914: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11915: LD_ADDR_VAR 0 12
11919: PUSH
11920: LD_VAR 0 18
11924: PPUSH
11925: LD_INT 22
11927: PUSH
11928: LD_VAR 0 16
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 58
11939: PUSH
11940: EMPTY
11941: LIST
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: LD_INT 30
11948: PUSH
11949: LD_INT 32
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 30
11958: PUSH
11959: LD_INT 4
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 30
11968: PUSH
11969: LD_INT 5
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: PPUSH
11987: CALL_OW 72
11991: ST_TO_ADDR
11992: GO 12216
11994: LD_INT 2
11996: DOUBLE
11997: EQUAL
11998: IFTRUE 12002
12000: GO 12064
12002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12003: LD_ADDR_VAR 0 12
12007: PUSH
12008: LD_VAR 0 18
12012: PPUSH
12013: LD_INT 22
12015: PUSH
12016: LD_VAR 0 16
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 2
12027: PUSH
12028: LD_INT 30
12030: PUSH
12031: LD_INT 0
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 30
12040: PUSH
12041: LD_INT 1
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 72
12061: ST_TO_ADDR
12062: GO 12216
12064: LD_INT 3
12066: DOUBLE
12067: EQUAL
12068: IFTRUE 12072
12070: GO 12134
12072: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12073: LD_ADDR_VAR 0 12
12077: PUSH
12078: LD_VAR 0 18
12082: PPUSH
12083: LD_INT 22
12085: PUSH
12086: LD_VAR 0 16
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 2
12097: PUSH
12098: LD_INT 30
12100: PUSH
12101: LD_INT 2
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 30
12110: PUSH
12111: LD_INT 3
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 72
12131: ST_TO_ADDR
12132: GO 12216
12134: LD_INT 4
12136: DOUBLE
12137: EQUAL
12138: IFTRUE 12142
12140: GO 12215
12142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12143: LD_ADDR_VAR 0 12
12147: PUSH
12148: LD_VAR 0 18
12152: PPUSH
12153: LD_INT 22
12155: PUSH
12156: LD_VAR 0 16
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 2
12167: PUSH
12168: LD_INT 30
12170: PUSH
12171: LD_INT 6
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 30
12180: PUSH
12181: LD_INT 7
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 30
12190: PUSH
12191: LD_INT 8
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 72
12212: ST_TO_ADDR
12213: GO 12216
12215: POP
// if i = 1 then
12216: LD_VAR 0 8
12220: PUSH
12221: LD_INT 1
12223: EQUAL
12224: IFFALSE 12335
// begin tmp := [ ] ;
12226: LD_ADDR_VAR 0 19
12230: PUSH
12231: EMPTY
12232: ST_TO_ADDR
// for j in f do
12233: LD_ADDR_VAR 0 9
12237: PUSH
12238: LD_VAR 0 12
12242: PUSH
12243: FOR_IN
12244: IFFALSE 12317
// if GetBType ( j ) = b_bunker then
12246: LD_VAR 0 9
12250: PPUSH
12251: CALL_OW 266
12255: PUSH
12256: LD_INT 32
12258: EQUAL
12259: IFFALSE 12286
// tmp := Insert ( tmp , 1 , j ) else
12261: LD_ADDR_VAR 0 19
12265: PUSH
12266: LD_VAR 0 19
12270: PPUSH
12271: LD_INT 1
12273: PPUSH
12274: LD_VAR 0 9
12278: PPUSH
12279: CALL_OW 2
12283: ST_TO_ADDR
12284: GO 12315
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12286: LD_ADDR_VAR 0 19
12290: PUSH
12291: LD_VAR 0 19
12295: PPUSH
12296: LD_VAR 0 19
12300: PUSH
12301: LD_INT 1
12303: PLUS
12304: PPUSH
12305: LD_VAR 0 9
12309: PPUSH
12310: CALL_OW 2
12314: ST_TO_ADDR
12315: GO 12243
12317: POP
12318: POP
// if tmp then
12319: LD_VAR 0 19
12323: IFFALSE 12335
// f := tmp ;
12325: LD_ADDR_VAR 0 12
12329: PUSH
12330: LD_VAR 0 19
12334: ST_TO_ADDR
// end ; x := personel [ i ] ;
12335: LD_ADDR_VAR 0 13
12339: PUSH
12340: LD_VAR 0 6
12344: PUSH
12345: LD_VAR 0 8
12349: ARRAY
12350: ST_TO_ADDR
// if x = - 1 then
12351: LD_VAR 0 13
12355: PUSH
12356: LD_INT 1
12358: NEG
12359: EQUAL
12360: IFFALSE 12569
// begin for j in f do
12362: LD_ADDR_VAR 0 9
12366: PUSH
12367: LD_VAR 0 12
12371: PUSH
12372: FOR_IN
12373: IFFALSE 12565
// repeat InitHc ;
12375: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12379: LD_VAR 0 9
12383: PPUSH
12384: CALL_OW 266
12388: PUSH
12389: LD_INT 5
12391: EQUAL
12392: IFFALSE 12462
// begin if UnitsInside ( j ) < 3 then
12394: LD_VAR 0 9
12398: PPUSH
12399: CALL_OW 313
12403: PUSH
12404: LD_INT 3
12406: LESS
12407: IFFALSE 12443
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12409: LD_INT 0
12411: PPUSH
12412: LD_INT 5
12414: PUSH
12415: LD_INT 8
12417: PUSH
12418: LD_INT 9
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_VAR 0 17
12430: ARRAY
12431: PPUSH
12432: LD_VAR 0 4
12436: PPUSH
12437: CALL_OW 380
12441: GO 12460
// PrepareHuman ( false , i , skill ) ;
12443: LD_INT 0
12445: PPUSH
12446: LD_VAR 0 8
12450: PPUSH
12451: LD_VAR 0 4
12455: PPUSH
12456: CALL_OW 380
// end else
12460: GO 12479
// PrepareHuman ( false , i , skill ) ;
12462: LD_INT 0
12464: PPUSH
12465: LD_VAR 0 8
12469: PPUSH
12470: LD_VAR 0 4
12474: PPUSH
12475: CALL_OW 380
// un := CreateHuman ;
12479: LD_ADDR_VAR 0 14
12483: PUSH
12484: CALL_OW 44
12488: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12489: LD_ADDR_VAR 0 7
12493: PUSH
12494: LD_VAR 0 7
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: LD_VAR 0 14
12506: PPUSH
12507: CALL_OW 2
12511: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12512: LD_VAR 0 14
12516: PPUSH
12517: LD_VAR 0 9
12521: PPUSH
12522: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12526: LD_VAR 0 9
12530: PPUSH
12531: CALL_OW 313
12535: PUSH
12536: LD_INT 6
12538: EQUAL
12539: PUSH
12540: LD_VAR 0 9
12544: PPUSH
12545: CALL_OW 266
12549: PUSH
12550: LD_INT 32
12552: PUSH
12553: LD_INT 31
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: IN
12560: OR
12561: IFFALSE 12375
12563: GO 12372
12565: POP
12566: POP
// end else
12567: GO 12949
// for j = 1 to x do
12569: LD_ADDR_VAR 0 9
12573: PUSH
12574: DOUBLE
12575: LD_INT 1
12577: DEC
12578: ST_TO_ADDR
12579: LD_VAR 0 13
12583: PUSH
12584: FOR_TO
12585: IFFALSE 12947
// begin InitHc ;
12587: CALL_OW 19
// if not f then
12591: LD_VAR 0 12
12595: NOT
12596: IFFALSE 12685
// begin PrepareHuman ( false , i , skill ) ;
12598: LD_INT 0
12600: PPUSH
12601: LD_VAR 0 8
12605: PPUSH
12606: LD_VAR 0 4
12610: PPUSH
12611: CALL_OW 380
// un := CreateHuman ;
12615: LD_ADDR_VAR 0 14
12619: PUSH
12620: CALL_OW 44
12624: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12625: LD_ADDR_VAR 0 7
12629: PUSH
12630: LD_VAR 0 7
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: LD_VAR 0 14
12642: PPUSH
12643: CALL_OW 2
12647: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12648: LD_VAR 0 14
12652: PPUSH
12653: LD_VAR 0 1
12657: PPUSH
12658: CALL_OW 250
12662: PPUSH
12663: LD_VAR 0 1
12667: PPUSH
12668: CALL_OW 251
12672: PPUSH
12673: LD_INT 10
12675: PPUSH
12676: LD_INT 0
12678: PPUSH
12679: CALL_OW 50
// continue ;
12683: GO 12584
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12685: LD_VAR 0 12
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PPUSH
12694: CALL_OW 313
12698: PUSH
12699: LD_VAR 0 12
12703: PUSH
12704: LD_INT 1
12706: ARRAY
12707: PPUSH
12708: CALL_OW 266
12712: PUSH
12713: LD_INT 32
12715: PUSH
12716: LD_INT 31
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: IN
12723: AND
12724: PUSH
12725: LD_VAR 0 12
12729: PUSH
12730: LD_INT 1
12732: ARRAY
12733: PPUSH
12734: CALL_OW 313
12738: PUSH
12739: LD_INT 6
12741: EQUAL
12742: OR
12743: IFFALSE 12763
// f := Delete ( f , 1 ) ;
12745: LD_ADDR_VAR 0 12
12749: PUSH
12750: LD_VAR 0 12
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: CALL_OW 3
12762: ST_TO_ADDR
// if not f then
12763: LD_VAR 0 12
12767: NOT
12768: IFFALSE 12786
// begin x := x + 2 ;
12770: LD_ADDR_VAR 0 13
12774: PUSH
12775: LD_VAR 0 13
12779: PUSH
12780: LD_INT 2
12782: PLUS
12783: ST_TO_ADDR
// continue ;
12784: GO 12584
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12786: LD_VAR 0 12
12790: PUSH
12791: LD_INT 1
12793: ARRAY
12794: PPUSH
12795: CALL_OW 266
12799: PUSH
12800: LD_INT 5
12802: EQUAL
12803: IFFALSE 12877
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12805: LD_VAR 0 12
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: CALL_OW 313
12818: PUSH
12819: LD_INT 3
12821: LESS
12822: IFFALSE 12858
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12824: LD_INT 0
12826: PPUSH
12827: LD_INT 5
12829: PUSH
12830: LD_INT 8
12832: PUSH
12833: LD_INT 9
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: LIST
12840: PUSH
12841: LD_VAR 0 17
12845: ARRAY
12846: PPUSH
12847: LD_VAR 0 4
12851: PPUSH
12852: CALL_OW 380
12856: GO 12875
// PrepareHuman ( false , i , skill ) ;
12858: LD_INT 0
12860: PPUSH
12861: LD_VAR 0 8
12865: PPUSH
12866: LD_VAR 0 4
12870: PPUSH
12871: CALL_OW 380
// end else
12875: GO 12894
// PrepareHuman ( false , i , skill ) ;
12877: LD_INT 0
12879: PPUSH
12880: LD_VAR 0 8
12884: PPUSH
12885: LD_VAR 0 4
12889: PPUSH
12890: CALL_OW 380
// un := CreateHuman ;
12894: LD_ADDR_VAR 0 14
12898: PUSH
12899: CALL_OW 44
12903: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12904: LD_ADDR_VAR 0 7
12908: PUSH
12909: LD_VAR 0 7
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: LD_VAR 0 14
12921: PPUSH
12922: CALL_OW 2
12926: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12927: LD_VAR 0 14
12931: PPUSH
12932: LD_VAR 0 12
12936: PUSH
12937: LD_INT 1
12939: ARRAY
12940: PPUSH
12941: CALL_OW 52
// end ;
12945: GO 12584
12947: POP
12948: POP
// end ;
12949: GO 11886
12951: POP
12952: POP
// result := result ^ buildings ;
12953: LD_ADDR_VAR 0 7
12957: PUSH
12958: LD_VAR 0 7
12962: PUSH
12963: LD_VAR 0 18
12967: ADD
12968: ST_TO_ADDR
// end else
12969: GO 13112
// begin for i = 1 to personel do
12971: LD_ADDR_VAR 0 8
12975: PUSH
12976: DOUBLE
12977: LD_INT 1
12979: DEC
12980: ST_TO_ADDR
12981: LD_VAR 0 6
12985: PUSH
12986: FOR_TO
12987: IFFALSE 13110
// begin if i > 4 then
12989: LD_VAR 0 8
12993: PUSH
12994: LD_INT 4
12996: GREATER
12997: IFFALSE 13001
// break ;
12999: GO 13110
// x := personel [ i ] ;
13001: LD_ADDR_VAR 0 13
13005: PUSH
13006: LD_VAR 0 6
13010: PUSH
13011: LD_VAR 0 8
13015: ARRAY
13016: ST_TO_ADDR
// if x = - 1 then
13017: LD_VAR 0 13
13021: PUSH
13022: LD_INT 1
13024: NEG
13025: EQUAL
13026: IFFALSE 13030
// continue ;
13028: GO 12986
// PrepareHuman ( false , i , skill ) ;
13030: LD_INT 0
13032: PPUSH
13033: LD_VAR 0 8
13037: PPUSH
13038: LD_VAR 0 4
13042: PPUSH
13043: CALL_OW 380
// un := CreateHuman ;
13047: LD_ADDR_VAR 0 14
13051: PUSH
13052: CALL_OW 44
13056: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13057: LD_VAR 0 14
13061: PPUSH
13062: LD_VAR 0 1
13066: PPUSH
13067: CALL_OW 250
13071: PPUSH
13072: LD_VAR 0 1
13076: PPUSH
13077: CALL_OW 251
13081: PPUSH
13082: LD_INT 10
13084: PPUSH
13085: LD_INT 0
13087: PPUSH
13088: CALL_OW 50
// result := result ^ un ;
13092: LD_ADDR_VAR 0 7
13096: PUSH
13097: LD_VAR 0 7
13101: PUSH
13102: LD_VAR 0 14
13106: ADD
13107: ST_TO_ADDR
// end ;
13108: GO 12986
13110: POP
13111: POP
// end ; end ;
13112: LD_VAR 0 7
13116: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13117: LD_INT 0
13119: PPUSH
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
13126: PPUSH
13127: PPUSH
13128: PPUSH
13129: PPUSH
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
13134: PPUSH
// result := false ;
13135: LD_ADDR_VAR 0 3
13139: PUSH
13140: LD_INT 0
13142: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13143: LD_VAR 0 1
13147: NOT
13148: PUSH
13149: LD_VAR 0 1
13153: PPUSH
13154: CALL_OW 266
13158: PUSH
13159: LD_INT 32
13161: PUSH
13162: LD_INT 33
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: IN
13169: NOT
13170: OR
13171: IFFALSE 13175
// exit ;
13173: GO 14284
// nat := GetNation ( tower ) ;
13175: LD_ADDR_VAR 0 12
13179: PUSH
13180: LD_VAR 0 1
13184: PPUSH
13185: CALL_OW 248
13189: ST_TO_ADDR
// side := GetSide ( tower ) ;
13190: LD_ADDR_VAR 0 16
13194: PUSH
13195: LD_VAR 0 1
13199: PPUSH
13200: CALL_OW 255
13204: ST_TO_ADDR
// x := GetX ( tower ) ;
13205: LD_ADDR_VAR 0 10
13209: PUSH
13210: LD_VAR 0 1
13214: PPUSH
13215: CALL_OW 250
13219: ST_TO_ADDR
// y := GetY ( tower ) ;
13220: LD_ADDR_VAR 0 11
13224: PUSH
13225: LD_VAR 0 1
13229: PPUSH
13230: CALL_OW 251
13234: ST_TO_ADDR
// if not x or not y then
13235: LD_VAR 0 10
13239: NOT
13240: PUSH
13241: LD_VAR 0 11
13245: NOT
13246: OR
13247: IFFALSE 13251
// exit ;
13249: GO 14284
// weapon := 0 ;
13251: LD_ADDR_VAR 0 18
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// fac_list := [ ] ;
13259: LD_ADDR_VAR 0 17
13263: PUSH
13264: EMPTY
13265: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13266: LD_ADDR_VAR 0 6
13270: PUSH
13271: LD_VAR 0 1
13275: PPUSH
13276: CALL_OW 274
13280: PPUSH
13281: LD_VAR 0 2
13285: PPUSH
13286: LD_INT 0
13288: PPUSH
13289: CALL 10855 0 3
13293: PPUSH
13294: LD_INT 30
13296: PUSH
13297: LD_INT 3
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 72
13308: ST_TO_ADDR
// if not factories then
13309: LD_VAR 0 6
13313: NOT
13314: IFFALSE 13318
// exit ;
13316: GO 14284
// for i in factories do
13318: LD_ADDR_VAR 0 8
13322: PUSH
13323: LD_VAR 0 6
13327: PUSH
13328: FOR_IN
13329: IFFALSE 13354
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13331: LD_ADDR_VAR 0 17
13335: PUSH
13336: LD_VAR 0 17
13340: PUSH
13341: LD_VAR 0 8
13345: PPUSH
13346: CALL_OW 478
13350: UNION
13351: ST_TO_ADDR
13352: GO 13328
13354: POP
13355: POP
// if not fac_list then
13356: LD_VAR 0 17
13360: NOT
13361: IFFALSE 13365
// exit ;
13363: GO 14284
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13365: LD_ADDR_VAR 0 5
13369: PUSH
13370: LD_INT 4
13372: PUSH
13373: LD_INT 5
13375: PUSH
13376: LD_INT 9
13378: PUSH
13379: LD_INT 10
13381: PUSH
13382: LD_INT 6
13384: PUSH
13385: LD_INT 7
13387: PUSH
13388: LD_INT 11
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 27
13402: PUSH
13403: LD_INT 28
13405: PUSH
13406: LD_INT 26
13408: PUSH
13409: LD_INT 30
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 43
13420: PUSH
13421: LD_INT 44
13423: PUSH
13424: LD_INT 46
13426: PUSH
13427: LD_INT 45
13429: PUSH
13430: LD_INT 47
13432: PUSH
13433: LD_INT 49
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: LD_VAR 0 12
13453: ARRAY
13454: ST_TO_ADDR
// list := list isect fac_list ;
13455: LD_ADDR_VAR 0 5
13459: PUSH
13460: LD_VAR 0 5
13464: PUSH
13465: LD_VAR 0 17
13469: ISECT
13470: ST_TO_ADDR
// if not list then
13471: LD_VAR 0 5
13475: NOT
13476: IFFALSE 13480
// exit ;
13478: GO 14284
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13480: LD_VAR 0 12
13484: PUSH
13485: LD_INT 3
13487: EQUAL
13488: PUSH
13489: LD_INT 49
13491: PUSH
13492: LD_VAR 0 5
13496: IN
13497: AND
13498: PUSH
13499: LD_INT 31
13501: PPUSH
13502: LD_VAR 0 16
13506: PPUSH
13507: CALL_OW 321
13511: PUSH
13512: LD_INT 2
13514: EQUAL
13515: AND
13516: IFFALSE 13576
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13518: LD_INT 22
13520: PUSH
13521: LD_VAR 0 16
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 35
13532: PUSH
13533: LD_INT 49
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 91
13542: PUSH
13543: LD_VAR 0 1
13547: PUSH
13548: LD_INT 10
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: PPUSH
13561: CALL_OW 69
13565: NOT
13566: IFFALSE 13576
// weapon := ru_time_lapser ;
13568: LD_ADDR_VAR 0 18
13572: PUSH
13573: LD_INT 49
13575: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13576: LD_VAR 0 12
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: LD_INT 2
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: IN
13591: PUSH
13592: LD_INT 11
13594: PUSH
13595: LD_VAR 0 5
13599: IN
13600: PUSH
13601: LD_INT 30
13603: PUSH
13604: LD_VAR 0 5
13608: IN
13609: OR
13610: AND
13611: PUSH
13612: LD_INT 6
13614: PPUSH
13615: LD_VAR 0 16
13619: PPUSH
13620: CALL_OW 321
13624: PUSH
13625: LD_INT 2
13627: EQUAL
13628: AND
13629: IFFALSE 13794
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13631: LD_INT 22
13633: PUSH
13634: LD_VAR 0 16
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 2
13645: PUSH
13646: LD_INT 35
13648: PUSH
13649: LD_INT 11
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 35
13658: PUSH
13659: LD_INT 30
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 91
13673: PUSH
13674: LD_VAR 0 1
13678: PUSH
13679: LD_INT 18
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 69
13696: NOT
13697: PUSH
13698: LD_INT 22
13700: PUSH
13701: LD_VAR 0 16
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 30
13715: PUSH
13716: LD_INT 32
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 30
13725: PUSH
13726: LD_INT 33
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 91
13740: PUSH
13741: LD_VAR 0 1
13745: PUSH
13746: LD_INT 12
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: PPUSH
13762: CALL_OW 69
13766: PUSH
13767: LD_INT 2
13769: GREATER
13770: AND
13771: IFFALSE 13794
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13773: LD_ADDR_VAR 0 18
13777: PUSH
13778: LD_INT 11
13780: PUSH
13781: LD_INT 30
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_VAR 0 12
13792: ARRAY
13793: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13794: LD_VAR 0 18
13798: NOT
13799: PUSH
13800: LD_INT 40
13802: PPUSH
13803: LD_VAR 0 16
13807: PPUSH
13808: CALL_OW 321
13812: PUSH
13813: LD_INT 2
13815: EQUAL
13816: AND
13817: PUSH
13818: LD_INT 7
13820: PUSH
13821: LD_VAR 0 5
13825: IN
13826: PUSH
13827: LD_INT 28
13829: PUSH
13830: LD_VAR 0 5
13834: IN
13835: OR
13836: PUSH
13837: LD_INT 45
13839: PUSH
13840: LD_VAR 0 5
13844: IN
13845: OR
13846: AND
13847: IFFALSE 14101
// begin hex := GetHexInfo ( x , y ) ;
13849: LD_ADDR_VAR 0 4
13853: PUSH
13854: LD_VAR 0 10
13858: PPUSH
13859: LD_VAR 0 11
13863: PPUSH
13864: CALL_OW 546
13868: ST_TO_ADDR
// if hex [ 1 ] then
13869: LD_VAR 0 4
13873: PUSH
13874: LD_INT 1
13876: ARRAY
13877: IFFALSE 13881
// exit ;
13879: GO 14284
// height := hex [ 2 ] ;
13881: LD_ADDR_VAR 0 15
13885: PUSH
13886: LD_VAR 0 4
13890: PUSH
13891: LD_INT 2
13893: ARRAY
13894: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13895: LD_ADDR_VAR 0 14
13899: PUSH
13900: LD_INT 0
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: LD_INT 3
13908: PUSH
13909: LD_INT 5
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: ST_TO_ADDR
// for i in tmp do
13918: LD_ADDR_VAR 0 8
13922: PUSH
13923: LD_VAR 0 14
13927: PUSH
13928: FOR_IN
13929: IFFALSE 14099
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13931: LD_ADDR_VAR 0 9
13935: PUSH
13936: LD_VAR 0 10
13940: PPUSH
13941: LD_VAR 0 8
13945: PPUSH
13946: LD_INT 5
13948: PPUSH
13949: CALL_OW 272
13953: PUSH
13954: LD_VAR 0 11
13958: PPUSH
13959: LD_VAR 0 8
13963: PPUSH
13964: LD_INT 5
13966: PPUSH
13967: CALL_OW 273
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13976: LD_VAR 0 9
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: LD_VAR 0 9
13989: PUSH
13990: LD_INT 2
13992: ARRAY
13993: PPUSH
13994: CALL_OW 488
13998: IFFALSE 14097
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14000: LD_ADDR_VAR 0 4
14004: PUSH
14005: LD_VAR 0 9
14009: PUSH
14010: LD_INT 1
14012: ARRAY
14013: PPUSH
14014: LD_VAR 0 9
14018: PUSH
14019: LD_INT 2
14021: ARRAY
14022: PPUSH
14023: CALL_OW 546
14027: ST_TO_ADDR
// if hex [ 1 ] then
14028: LD_VAR 0 4
14032: PUSH
14033: LD_INT 1
14035: ARRAY
14036: IFFALSE 14040
// continue ;
14038: GO 13928
// h := hex [ 2 ] ;
14040: LD_ADDR_VAR 0 13
14044: PUSH
14045: LD_VAR 0 4
14049: PUSH
14050: LD_INT 2
14052: ARRAY
14053: ST_TO_ADDR
// if h + 7 < height then
14054: LD_VAR 0 13
14058: PUSH
14059: LD_INT 7
14061: PLUS
14062: PUSH
14063: LD_VAR 0 15
14067: LESS
14068: IFFALSE 14097
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14070: LD_ADDR_VAR 0 18
14074: PUSH
14075: LD_INT 7
14077: PUSH
14078: LD_INT 28
14080: PUSH
14081: LD_INT 45
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: LD_VAR 0 12
14093: ARRAY
14094: ST_TO_ADDR
// break ;
14095: GO 14099
// end ; end ; end ;
14097: GO 13928
14099: POP
14100: POP
// end ; if not weapon then
14101: LD_VAR 0 18
14105: NOT
14106: IFFALSE 14166
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14108: LD_ADDR_VAR 0 5
14112: PUSH
14113: LD_VAR 0 5
14117: PUSH
14118: LD_INT 11
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 49
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: DIFF
14132: ST_TO_ADDR
// if not list then
14133: LD_VAR 0 5
14137: NOT
14138: IFFALSE 14142
// exit ;
14140: GO 14284
// weapon := list [ rand ( 1 , list ) ] ;
14142: LD_ADDR_VAR 0 18
14146: PUSH
14147: LD_VAR 0 5
14151: PUSH
14152: LD_INT 1
14154: PPUSH
14155: LD_VAR 0 5
14159: PPUSH
14160: CALL_OW 12
14164: ARRAY
14165: ST_TO_ADDR
// end ; if weapon then
14166: LD_VAR 0 18
14170: IFFALSE 14284
// begin tmp := CostOfWeapon ( weapon ) ;
14172: LD_ADDR_VAR 0 14
14176: PUSH
14177: LD_VAR 0 18
14181: PPUSH
14182: CALL_OW 451
14186: ST_TO_ADDR
// j := GetBase ( tower ) ;
14187: LD_ADDR_VAR 0 9
14191: PUSH
14192: LD_VAR 0 1
14196: PPUSH
14197: CALL_OW 274
14201: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14202: LD_VAR 0 9
14206: PPUSH
14207: LD_INT 1
14209: PPUSH
14210: CALL_OW 275
14214: PUSH
14215: LD_VAR 0 14
14219: PUSH
14220: LD_INT 1
14222: ARRAY
14223: GREATEREQUAL
14224: PUSH
14225: LD_VAR 0 9
14229: PPUSH
14230: LD_INT 2
14232: PPUSH
14233: CALL_OW 275
14237: PUSH
14238: LD_VAR 0 14
14242: PUSH
14243: LD_INT 2
14245: ARRAY
14246: GREATEREQUAL
14247: AND
14248: PUSH
14249: LD_VAR 0 9
14253: PPUSH
14254: LD_INT 3
14256: PPUSH
14257: CALL_OW 275
14261: PUSH
14262: LD_VAR 0 14
14266: PUSH
14267: LD_INT 3
14269: ARRAY
14270: GREATEREQUAL
14271: AND
14272: IFFALSE 14284
// result := weapon ;
14274: LD_ADDR_VAR 0 3
14278: PUSH
14279: LD_VAR 0 18
14283: ST_TO_ADDR
// end ; end ;
14284: LD_VAR 0 3
14288: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14289: LD_INT 0
14291: PPUSH
14292: PPUSH
// result := true ;
14293: LD_ADDR_VAR 0 3
14297: PUSH
14298: LD_INT 1
14300: ST_TO_ADDR
// if array1 = array2 then
14301: LD_VAR 0 1
14305: PUSH
14306: LD_VAR 0 2
14310: EQUAL
14311: IFFALSE 14371
// begin for i = 1 to array1 do
14313: LD_ADDR_VAR 0 4
14317: PUSH
14318: DOUBLE
14319: LD_INT 1
14321: DEC
14322: ST_TO_ADDR
14323: LD_VAR 0 1
14327: PUSH
14328: FOR_TO
14329: IFFALSE 14367
// if array1 [ i ] <> array2 [ i ] then
14331: LD_VAR 0 1
14335: PUSH
14336: LD_VAR 0 4
14340: ARRAY
14341: PUSH
14342: LD_VAR 0 2
14346: PUSH
14347: LD_VAR 0 4
14351: ARRAY
14352: NONEQUAL
14353: IFFALSE 14365
// begin result := false ;
14355: LD_ADDR_VAR 0 3
14359: PUSH
14360: LD_INT 0
14362: ST_TO_ADDR
// break ;
14363: GO 14367
// end ;
14365: GO 14328
14367: POP
14368: POP
// end else
14369: GO 14379
// result := false ;
14371: LD_ADDR_VAR 0 3
14375: PUSH
14376: LD_INT 0
14378: ST_TO_ADDR
// end ;
14379: LD_VAR 0 3
14383: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14384: LD_INT 0
14386: PPUSH
14387: PPUSH
// if not array1 or not array2 then
14388: LD_VAR 0 1
14392: NOT
14393: PUSH
14394: LD_VAR 0 2
14398: NOT
14399: OR
14400: IFFALSE 14404
// exit ;
14402: GO 14468
// result := true ;
14404: LD_ADDR_VAR 0 3
14408: PUSH
14409: LD_INT 1
14411: ST_TO_ADDR
// for i = 1 to array1 do
14412: LD_ADDR_VAR 0 4
14416: PUSH
14417: DOUBLE
14418: LD_INT 1
14420: DEC
14421: ST_TO_ADDR
14422: LD_VAR 0 1
14426: PUSH
14427: FOR_TO
14428: IFFALSE 14466
// if array1 [ i ] <> array2 [ i ] then
14430: LD_VAR 0 1
14434: PUSH
14435: LD_VAR 0 4
14439: ARRAY
14440: PUSH
14441: LD_VAR 0 2
14445: PUSH
14446: LD_VAR 0 4
14450: ARRAY
14451: NONEQUAL
14452: IFFALSE 14464
// begin result := false ;
14454: LD_ADDR_VAR 0 3
14458: PUSH
14459: LD_INT 0
14461: ST_TO_ADDR
// break ;
14462: GO 14466
// end ;
14464: GO 14427
14466: POP
14467: POP
// end ;
14468: LD_VAR 0 3
14472: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14473: LD_INT 0
14475: PPUSH
14476: PPUSH
14477: PPUSH
// pom := GetBase ( fac ) ;
14478: LD_ADDR_VAR 0 5
14482: PUSH
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 274
14492: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14493: LD_ADDR_VAR 0 4
14497: PUSH
14498: LD_VAR 0 2
14502: PUSH
14503: LD_INT 1
14505: ARRAY
14506: PPUSH
14507: LD_VAR 0 2
14511: PUSH
14512: LD_INT 2
14514: ARRAY
14515: PPUSH
14516: LD_VAR 0 2
14520: PUSH
14521: LD_INT 3
14523: ARRAY
14524: PPUSH
14525: LD_VAR 0 2
14529: PUSH
14530: LD_INT 4
14532: ARRAY
14533: PPUSH
14534: CALL_OW 449
14538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14539: LD_ADDR_VAR 0 3
14543: PUSH
14544: LD_VAR 0 5
14548: PPUSH
14549: LD_INT 1
14551: PPUSH
14552: CALL_OW 275
14556: PUSH
14557: LD_VAR 0 4
14561: PUSH
14562: LD_INT 1
14564: ARRAY
14565: GREATEREQUAL
14566: PUSH
14567: LD_VAR 0 5
14571: PPUSH
14572: LD_INT 2
14574: PPUSH
14575: CALL_OW 275
14579: PUSH
14580: LD_VAR 0 4
14584: PUSH
14585: LD_INT 2
14587: ARRAY
14588: GREATEREQUAL
14589: AND
14590: PUSH
14591: LD_VAR 0 5
14595: PPUSH
14596: LD_INT 3
14598: PPUSH
14599: CALL_OW 275
14603: PUSH
14604: LD_VAR 0 4
14608: PUSH
14609: LD_INT 3
14611: ARRAY
14612: GREATEREQUAL
14613: AND
14614: ST_TO_ADDR
// end ;
14615: LD_VAR 0 3
14619: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14620: LD_INT 0
14622: PPUSH
14623: PPUSH
14624: PPUSH
14625: PPUSH
// pom := GetBase ( building ) ;
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: LD_VAR 0 1
14635: PPUSH
14636: CALL_OW 274
14640: ST_TO_ADDR
// if not pom then
14641: LD_VAR 0 3
14645: NOT
14646: IFFALSE 14650
// exit ;
14648: GO 14820
// btype := GetBType ( building ) ;
14650: LD_ADDR_VAR 0 5
14654: PUSH
14655: LD_VAR 0 1
14659: PPUSH
14660: CALL_OW 266
14664: ST_TO_ADDR
// if btype = b_armoury then
14665: LD_VAR 0 5
14669: PUSH
14670: LD_INT 4
14672: EQUAL
14673: IFFALSE 14683
// btype := b_barracks ;
14675: LD_ADDR_VAR 0 5
14679: PUSH
14680: LD_INT 5
14682: ST_TO_ADDR
// if btype = b_depot then
14683: LD_VAR 0 5
14687: PUSH
14688: LD_INT 0
14690: EQUAL
14691: IFFALSE 14701
// btype := b_warehouse ;
14693: LD_ADDR_VAR 0 5
14697: PUSH
14698: LD_INT 1
14700: ST_TO_ADDR
// if btype = b_workshop then
14701: LD_VAR 0 5
14705: PUSH
14706: LD_INT 2
14708: EQUAL
14709: IFFALSE 14719
// btype := b_factory ;
14711: LD_ADDR_VAR 0 5
14715: PUSH
14716: LD_INT 3
14718: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14719: LD_ADDR_VAR 0 4
14723: PUSH
14724: LD_VAR 0 5
14728: PPUSH
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 248
14738: PPUSH
14739: CALL_OW 450
14743: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14744: LD_ADDR_VAR 0 2
14748: PUSH
14749: LD_VAR 0 3
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 275
14761: PUSH
14762: LD_VAR 0 4
14766: PUSH
14767: LD_INT 1
14769: ARRAY
14770: GREATEREQUAL
14771: PUSH
14772: LD_VAR 0 3
14776: PPUSH
14777: LD_INT 2
14779: PPUSH
14780: CALL_OW 275
14784: PUSH
14785: LD_VAR 0 4
14789: PUSH
14790: LD_INT 2
14792: ARRAY
14793: GREATEREQUAL
14794: AND
14795: PUSH
14796: LD_VAR 0 3
14800: PPUSH
14801: LD_INT 3
14803: PPUSH
14804: CALL_OW 275
14808: PUSH
14809: LD_VAR 0 4
14813: PUSH
14814: LD_INT 3
14816: ARRAY
14817: GREATEREQUAL
14818: AND
14819: ST_TO_ADDR
// end ;
14820: LD_VAR 0 2
14824: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14825: LD_INT 0
14827: PPUSH
14828: PPUSH
14829: PPUSH
// pom := GetBase ( building ) ;
14830: LD_ADDR_VAR 0 4
14834: PUSH
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 274
14844: ST_TO_ADDR
// if not pom then
14845: LD_VAR 0 4
14849: NOT
14850: IFFALSE 14854
// exit ;
14852: GO 14955
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14854: LD_ADDR_VAR 0 5
14858: PUSH
14859: LD_VAR 0 2
14863: PPUSH
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 248
14873: PPUSH
14874: CALL_OW 450
14878: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_VAR 0 4
14888: PPUSH
14889: LD_INT 1
14891: PPUSH
14892: CALL_OW 275
14896: PUSH
14897: LD_VAR 0 5
14901: PUSH
14902: LD_INT 1
14904: ARRAY
14905: GREATEREQUAL
14906: PUSH
14907: LD_VAR 0 4
14911: PPUSH
14912: LD_INT 2
14914: PPUSH
14915: CALL_OW 275
14919: PUSH
14920: LD_VAR 0 5
14924: PUSH
14925: LD_INT 2
14927: ARRAY
14928: GREATEREQUAL
14929: AND
14930: PUSH
14931: LD_VAR 0 4
14935: PPUSH
14936: LD_INT 3
14938: PPUSH
14939: CALL_OW 275
14943: PUSH
14944: LD_VAR 0 5
14948: PUSH
14949: LD_INT 3
14951: ARRAY
14952: GREATEREQUAL
14953: AND
14954: ST_TO_ADDR
// end ;
14955: LD_VAR 0 3
14959: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
14964: PPUSH
14965: PPUSH
14966: PPUSH
14967: PPUSH
14968: PPUSH
14969: PPUSH
14970: PPUSH
14971: PPUSH
14972: PPUSH
// result := false ;
14973: LD_ADDR_VAR 0 8
14977: PUSH
14978: LD_INT 0
14980: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14981: LD_VAR 0 5
14985: NOT
14986: PUSH
14987: LD_VAR 0 1
14991: NOT
14992: OR
14993: PUSH
14994: LD_VAR 0 2
14998: NOT
14999: OR
15000: PUSH
15001: LD_VAR 0 3
15005: NOT
15006: OR
15007: IFFALSE 15011
// exit ;
15009: GO 15825
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15011: LD_ADDR_VAR 0 14
15015: PUSH
15016: LD_VAR 0 1
15020: PPUSH
15021: LD_VAR 0 2
15025: PPUSH
15026: LD_VAR 0 3
15030: PPUSH
15031: LD_VAR 0 4
15035: PPUSH
15036: LD_VAR 0 5
15040: PUSH
15041: LD_INT 1
15043: ARRAY
15044: PPUSH
15045: CALL_OW 248
15049: PPUSH
15050: LD_INT 0
15052: PPUSH
15053: CALL 17078 0 6
15057: ST_TO_ADDR
// if not hexes then
15058: LD_VAR 0 14
15062: NOT
15063: IFFALSE 15067
// exit ;
15065: GO 15825
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15067: LD_ADDR_VAR 0 17
15071: PUSH
15072: LD_VAR 0 5
15076: PPUSH
15077: LD_INT 22
15079: PUSH
15080: LD_VAR 0 13
15084: PPUSH
15085: CALL_OW 255
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: LD_INT 2
15096: PUSH
15097: LD_INT 30
15099: PUSH
15100: LD_INT 0
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 30
15109: PUSH
15110: LD_INT 1
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PPUSH
15126: CALL_OW 72
15130: ST_TO_ADDR
// for i = 1 to hexes do
15131: LD_ADDR_VAR 0 9
15135: PUSH
15136: DOUBLE
15137: LD_INT 1
15139: DEC
15140: ST_TO_ADDR
15141: LD_VAR 0 14
15145: PUSH
15146: FOR_TO
15147: IFFALSE 15823
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15149: LD_ADDR_VAR 0 13
15153: PUSH
15154: LD_VAR 0 14
15158: PUSH
15159: LD_VAR 0 9
15163: ARRAY
15164: PUSH
15165: LD_INT 1
15167: ARRAY
15168: PPUSH
15169: LD_VAR 0 14
15173: PUSH
15174: LD_VAR 0 9
15178: ARRAY
15179: PUSH
15180: LD_INT 2
15182: ARRAY
15183: PPUSH
15184: CALL_OW 428
15188: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15189: LD_VAR 0 14
15193: PUSH
15194: LD_VAR 0 9
15198: ARRAY
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: PPUSH
15204: LD_VAR 0 14
15208: PUSH
15209: LD_VAR 0 9
15213: ARRAY
15214: PUSH
15215: LD_INT 2
15217: ARRAY
15218: PPUSH
15219: CALL_OW 351
15223: PUSH
15224: LD_VAR 0 14
15228: PUSH
15229: LD_VAR 0 9
15233: ARRAY
15234: PUSH
15235: LD_INT 1
15237: ARRAY
15238: PPUSH
15239: LD_VAR 0 14
15243: PUSH
15244: LD_VAR 0 9
15248: ARRAY
15249: PUSH
15250: LD_INT 2
15252: ARRAY
15253: PPUSH
15254: CALL_OW 488
15258: NOT
15259: OR
15260: PUSH
15261: LD_VAR 0 13
15265: PPUSH
15266: CALL_OW 247
15270: PUSH
15271: LD_INT 3
15273: EQUAL
15274: OR
15275: IFFALSE 15281
// exit ;
15277: POP
15278: POP
15279: GO 15825
// if not tmp then
15281: LD_VAR 0 13
15285: NOT
15286: IFFALSE 15290
// continue ;
15288: GO 15146
// result := true ;
15290: LD_ADDR_VAR 0 8
15294: PUSH
15295: LD_INT 1
15297: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15298: LD_VAR 0 6
15302: PUSH
15303: LD_VAR 0 13
15307: PPUSH
15308: CALL_OW 247
15312: PUSH
15313: LD_INT 2
15315: EQUAL
15316: AND
15317: PUSH
15318: LD_VAR 0 13
15322: PPUSH
15323: CALL_OW 263
15327: PUSH
15328: LD_INT 1
15330: EQUAL
15331: AND
15332: IFFALSE 15496
// begin if IsDrivenBy ( tmp ) then
15334: LD_VAR 0 13
15338: PPUSH
15339: CALL_OW 311
15343: IFFALSE 15347
// continue ;
15345: GO 15146
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15347: LD_VAR 0 6
15351: PPUSH
15352: LD_INT 3
15354: PUSH
15355: LD_INT 60
15357: PUSH
15358: EMPTY
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 3
15367: PUSH
15368: LD_INT 55
15370: PUSH
15371: EMPTY
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 72
15386: IFFALSE 15494
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15388: LD_ADDR_VAR 0 18
15392: PUSH
15393: LD_VAR 0 6
15397: PPUSH
15398: LD_INT 3
15400: PUSH
15401: LD_INT 60
15403: PUSH
15404: EMPTY
15405: LIST
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 3
15413: PUSH
15414: LD_INT 55
15416: PUSH
15417: EMPTY
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PPUSH
15428: CALL_OW 72
15432: PUSH
15433: LD_INT 1
15435: ARRAY
15436: ST_TO_ADDR
// if IsInUnit ( driver ) then
15437: LD_VAR 0 18
15441: PPUSH
15442: CALL_OW 310
15446: IFFALSE 15457
// ComExit ( driver ) ;
15448: LD_VAR 0 18
15452: PPUSH
15453: CALL 40859 0 1
// AddComEnterUnit ( driver , tmp ) ;
15457: LD_VAR 0 18
15461: PPUSH
15462: LD_VAR 0 13
15466: PPUSH
15467: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15471: LD_VAR 0 18
15475: PPUSH
15476: LD_VAR 0 7
15480: PPUSH
15481: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15485: LD_VAR 0 18
15489: PPUSH
15490: CALL_OW 181
// end ; continue ;
15494: GO 15146
// end ; if not cleaners or not tmp in cleaners then
15496: LD_VAR 0 6
15500: NOT
15501: PUSH
15502: LD_VAR 0 13
15506: PUSH
15507: LD_VAR 0 6
15511: IN
15512: NOT
15513: OR
15514: IFFALSE 15821
// begin if dep then
15516: LD_VAR 0 17
15520: IFFALSE 15656
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15522: LD_ADDR_VAR 0 16
15526: PUSH
15527: LD_VAR 0 17
15531: PUSH
15532: LD_INT 1
15534: ARRAY
15535: PPUSH
15536: CALL_OW 250
15540: PPUSH
15541: LD_VAR 0 17
15545: PUSH
15546: LD_INT 1
15548: ARRAY
15549: PPUSH
15550: CALL_OW 254
15554: PPUSH
15555: LD_INT 5
15557: PPUSH
15558: CALL_OW 272
15562: PUSH
15563: LD_VAR 0 17
15567: PUSH
15568: LD_INT 1
15570: ARRAY
15571: PPUSH
15572: CALL_OW 251
15576: PPUSH
15577: LD_VAR 0 17
15581: PUSH
15582: LD_INT 1
15584: ARRAY
15585: PPUSH
15586: CALL_OW 254
15590: PPUSH
15591: LD_INT 5
15593: PPUSH
15594: CALL_OW 273
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15603: LD_VAR 0 16
15607: PUSH
15608: LD_INT 1
15610: ARRAY
15611: PPUSH
15612: LD_VAR 0 16
15616: PUSH
15617: LD_INT 2
15619: ARRAY
15620: PPUSH
15621: CALL_OW 488
15625: IFFALSE 15656
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15627: LD_VAR 0 13
15631: PPUSH
15632: LD_VAR 0 16
15636: PUSH
15637: LD_INT 1
15639: ARRAY
15640: PPUSH
15641: LD_VAR 0 16
15645: PUSH
15646: LD_INT 2
15648: ARRAY
15649: PPUSH
15650: CALL_OW 111
// continue ;
15654: GO 15146
// end ; end ; r := GetDir ( tmp ) ;
15656: LD_ADDR_VAR 0 15
15660: PUSH
15661: LD_VAR 0 13
15665: PPUSH
15666: CALL_OW 254
15670: ST_TO_ADDR
// if r = 5 then
15671: LD_VAR 0 15
15675: PUSH
15676: LD_INT 5
15678: EQUAL
15679: IFFALSE 15689
// r := 0 ;
15681: LD_ADDR_VAR 0 15
15685: PUSH
15686: LD_INT 0
15688: ST_TO_ADDR
// for j = r to 5 do
15689: LD_ADDR_VAR 0 10
15693: PUSH
15694: DOUBLE
15695: LD_VAR 0 15
15699: DEC
15700: ST_TO_ADDR
15701: LD_INT 5
15703: PUSH
15704: FOR_TO
15705: IFFALSE 15819
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15707: LD_ADDR_VAR 0 11
15711: PUSH
15712: LD_VAR 0 13
15716: PPUSH
15717: CALL_OW 250
15721: PPUSH
15722: LD_VAR 0 10
15726: PPUSH
15727: LD_INT 2
15729: PPUSH
15730: CALL_OW 272
15734: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15735: LD_ADDR_VAR 0 12
15739: PUSH
15740: LD_VAR 0 13
15744: PPUSH
15745: CALL_OW 251
15749: PPUSH
15750: LD_VAR 0 10
15754: PPUSH
15755: LD_INT 2
15757: PPUSH
15758: CALL_OW 273
15762: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15763: LD_VAR 0 11
15767: PPUSH
15768: LD_VAR 0 12
15772: PPUSH
15773: CALL_OW 488
15777: PUSH
15778: LD_VAR 0 11
15782: PPUSH
15783: LD_VAR 0 12
15787: PPUSH
15788: CALL_OW 428
15792: NOT
15793: AND
15794: IFFALSE 15817
// begin ComMoveXY ( tmp , _x , _y ) ;
15796: LD_VAR 0 13
15800: PPUSH
15801: LD_VAR 0 11
15805: PPUSH
15806: LD_VAR 0 12
15810: PPUSH
15811: CALL_OW 111
// break ;
15815: GO 15819
// end ; end ;
15817: GO 15704
15819: POP
15820: POP
// end ; end ;
15821: GO 15146
15823: POP
15824: POP
// end ;
15825: LD_VAR 0 8
15829: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15830: LD_INT 0
15832: PPUSH
// result := true ;
15833: LD_ADDR_VAR 0 3
15837: PUSH
15838: LD_INT 1
15840: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15841: LD_VAR 0 2
15845: PUSH
15846: LD_INT 24
15848: DOUBLE
15849: EQUAL
15850: IFTRUE 15860
15852: LD_INT 33
15854: DOUBLE
15855: EQUAL
15856: IFTRUE 15860
15858: GO 15885
15860: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15861: LD_ADDR_VAR 0 3
15865: PUSH
15866: LD_INT 32
15868: PPUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 321
15878: PUSH
15879: LD_INT 2
15881: EQUAL
15882: ST_TO_ADDR
15883: GO 16201
15885: LD_INT 20
15887: DOUBLE
15888: EQUAL
15889: IFTRUE 15893
15891: GO 15918
15893: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_INT 6
15901: PPUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 321
15911: PUSH
15912: LD_INT 2
15914: EQUAL
15915: ST_TO_ADDR
15916: GO 16201
15918: LD_INT 22
15920: DOUBLE
15921: EQUAL
15922: IFTRUE 15932
15924: LD_INT 36
15926: DOUBLE
15927: EQUAL
15928: IFTRUE 15932
15930: GO 15957
15932: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15933: LD_ADDR_VAR 0 3
15937: PUSH
15938: LD_INT 15
15940: PPUSH
15941: LD_VAR 0 1
15945: PPUSH
15946: CALL_OW 321
15950: PUSH
15951: LD_INT 2
15953: EQUAL
15954: ST_TO_ADDR
15955: GO 16201
15957: LD_INT 30
15959: DOUBLE
15960: EQUAL
15961: IFTRUE 15965
15963: GO 15990
15965: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15966: LD_ADDR_VAR 0 3
15970: PUSH
15971: LD_INT 20
15973: PPUSH
15974: LD_VAR 0 1
15978: PPUSH
15979: CALL_OW 321
15983: PUSH
15984: LD_INT 2
15986: EQUAL
15987: ST_TO_ADDR
15988: GO 16201
15990: LD_INT 28
15992: DOUBLE
15993: EQUAL
15994: IFTRUE 16004
15996: LD_INT 21
15998: DOUBLE
15999: EQUAL
16000: IFTRUE 16004
16002: GO 16029
16004: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16005: LD_ADDR_VAR 0 3
16009: PUSH
16010: LD_INT 21
16012: PPUSH
16013: LD_VAR 0 1
16017: PPUSH
16018: CALL_OW 321
16022: PUSH
16023: LD_INT 2
16025: EQUAL
16026: ST_TO_ADDR
16027: GO 16201
16029: LD_INT 16
16031: DOUBLE
16032: EQUAL
16033: IFTRUE 16037
16035: GO 16062
16037: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16038: LD_ADDR_VAR 0 3
16042: PUSH
16043: LD_INT 84
16045: PPUSH
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 321
16055: PUSH
16056: LD_INT 2
16058: EQUAL
16059: ST_TO_ADDR
16060: GO 16201
16062: LD_INT 19
16064: DOUBLE
16065: EQUAL
16066: IFTRUE 16076
16068: LD_INT 23
16070: DOUBLE
16071: EQUAL
16072: IFTRUE 16076
16074: GO 16101
16076: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16077: LD_ADDR_VAR 0 3
16081: PUSH
16082: LD_INT 83
16084: PPUSH
16085: LD_VAR 0 1
16089: PPUSH
16090: CALL_OW 321
16094: PUSH
16095: LD_INT 2
16097: EQUAL
16098: ST_TO_ADDR
16099: GO 16201
16101: LD_INT 17
16103: DOUBLE
16104: EQUAL
16105: IFTRUE 16109
16107: GO 16134
16109: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16110: LD_ADDR_VAR 0 3
16114: PUSH
16115: LD_INT 39
16117: PPUSH
16118: LD_VAR 0 1
16122: PPUSH
16123: CALL_OW 321
16127: PUSH
16128: LD_INT 2
16130: EQUAL
16131: ST_TO_ADDR
16132: GO 16201
16134: LD_INT 18
16136: DOUBLE
16137: EQUAL
16138: IFTRUE 16142
16140: GO 16167
16142: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16143: LD_ADDR_VAR 0 3
16147: PUSH
16148: LD_INT 40
16150: PPUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 321
16160: PUSH
16161: LD_INT 2
16163: EQUAL
16164: ST_TO_ADDR
16165: GO 16201
16167: LD_INT 27
16169: DOUBLE
16170: EQUAL
16171: IFTRUE 16175
16173: GO 16200
16175: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: LD_INT 35
16183: PPUSH
16184: LD_VAR 0 1
16188: PPUSH
16189: CALL_OW 321
16193: PUSH
16194: LD_INT 2
16196: EQUAL
16197: ST_TO_ADDR
16198: GO 16201
16200: POP
// end ;
16201: LD_VAR 0 3
16205: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16206: LD_INT 0
16208: PPUSH
16209: PPUSH
16210: PPUSH
16211: PPUSH
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
// result := false ;
16219: LD_ADDR_VAR 0 6
16223: PUSH
16224: LD_INT 0
16226: ST_TO_ADDR
// if btype = b_depot then
16227: LD_VAR 0 2
16231: PUSH
16232: LD_INT 0
16234: EQUAL
16235: IFFALSE 16247
// begin result := true ;
16237: LD_ADDR_VAR 0 6
16241: PUSH
16242: LD_INT 1
16244: ST_TO_ADDR
// exit ;
16245: GO 17073
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16247: LD_VAR 0 1
16251: NOT
16252: PUSH
16253: LD_VAR 0 1
16257: PPUSH
16258: CALL_OW 266
16262: PUSH
16263: LD_INT 0
16265: PUSH
16266: LD_INT 1
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: IN
16273: NOT
16274: OR
16275: PUSH
16276: LD_VAR 0 2
16280: NOT
16281: OR
16282: PUSH
16283: LD_VAR 0 5
16287: PUSH
16288: LD_INT 0
16290: PUSH
16291: LD_INT 1
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: LD_INT 4
16302: PUSH
16303: LD_INT 5
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: IN
16314: NOT
16315: OR
16316: PUSH
16317: LD_VAR 0 3
16321: PPUSH
16322: LD_VAR 0 4
16326: PPUSH
16327: CALL_OW 488
16331: NOT
16332: OR
16333: IFFALSE 16337
// exit ;
16335: GO 17073
// side := GetSide ( depot ) ;
16337: LD_ADDR_VAR 0 9
16341: PUSH
16342: LD_VAR 0 1
16346: PPUSH
16347: CALL_OW 255
16351: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16352: LD_VAR 0 9
16356: PPUSH
16357: LD_VAR 0 2
16361: PPUSH
16362: CALL 15830 0 2
16366: NOT
16367: IFFALSE 16371
// exit ;
16369: GO 17073
// pom := GetBase ( depot ) ;
16371: LD_ADDR_VAR 0 10
16375: PUSH
16376: LD_VAR 0 1
16380: PPUSH
16381: CALL_OW 274
16385: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16386: LD_ADDR_VAR 0 11
16390: PUSH
16391: LD_VAR 0 2
16395: PPUSH
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 248
16405: PPUSH
16406: CALL_OW 450
16410: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16411: LD_VAR 0 10
16415: PPUSH
16416: LD_INT 1
16418: PPUSH
16419: CALL_OW 275
16423: PUSH
16424: LD_VAR 0 11
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: GREATEREQUAL
16433: PUSH
16434: LD_VAR 0 10
16438: PPUSH
16439: LD_INT 2
16441: PPUSH
16442: CALL_OW 275
16446: PUSH
16447: LD_VAR 0 11
16451: PUSH
16452: LD_INT 2
16454: ARRAY
16455: GREATEREQUAL
16456: AND
16457: PUSH
16458: LD_VAR 0 10
16462: PPUSH
16463: LD_INT 3
16465: PPUSH
16466: CALL_OW 275
16470: PUSH
16471: LD_VAR 0 11
16475: PUSH
16476: LD_INT 3
16478: ARRAY
16479: GREATEREQUAL
16480: AND
16481: NOT
16482: IFFALSE 16486
// exit ;
16484: GO 17073
// if GetBType ( depot ) = b_depot then
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 266
16495: PUSH
16496: LD_INT 0
16498: EQUAL
16499: IFFALSE 16511
// dist := 28 else
16501: LD_ADDR_VAR 0 14
16505: PUSH
16506: LD_INT 28
16508: ST_TO_ADDR
16509: GO 16519
// dist := 36 ;
16511: LD_ADDR_VAR 0 14
16515: PUSH
16516: LD_INT 36
16518: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16519: LD_VAR 0 1
16523: PPUSH
16524: LD_VAR 0 3
16528: PPUSH
16529: LD_VAR 0 4
16533: PPUSH
16534: CALL_OW 297
16538: PUSH
16539: LD_VAR 0 14
16543: GREATER
16544: IFFALSE 16548
// exit ;
16546: GO 17073
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16548: LD_ADDR_VAR 0 12
16552: PUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: LD_VAR 0 3
16562: PPUSH
16563: LD_VAR 0 4
16567: PPUSH
16568: LD_VAR 0 5
16572: PPUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 248
16582: PPUSH
16583: LD_INT 0
16585: PPUSH
16586: CALL 17078 0 6
16590: ST_TO_ADDR
// if not hexes then
16591: LD_VAR 0 12
16595: NOT
16596: IFFALSE 16600
// exit ;
16598: GO 17073
// hex := GetHexInfo ( x , y ) ;
16600: LD_ADDR_VAR 0 15
16604: PUSH
16605: LD_VAR 0 3
16609: PPUSH
16610: LD_VAR 0 4
16614: PPUSH
16615: CALL_OW 546
16619: ST_TO_ADDR
// if hex [ 1 ] then
16620: LD_VAR 0 15
16624: PUSH
16625: LD_INT 1
16627: ARRAY
16628: IFFALSE 16632
// exit ;
16630: GO 17073
// height := hex [ 2 ] ;
16632: LD_ADDR_VAR 0 13
16636: PUSH
16637: LD_VAR 0 15
16641: PUSH
16642: LD_INT 2
16644: ARRAY
16645: ST_TO_ADDR
// for i = 1 to hexes do
16646: LD_ADDR_VAR 0 7
16650: PUSH
16651: DOUBLE
16652: LD_INT 1
16654: DEC
16655: ST_TO_ADDR
16656: LD_VAR 0 12
16660: PUSH
16661: FOR_TO
16662: IFFALSE 16992
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16664: LD_VAR 0 12
16668: PUSH
16669: LD_VAR 0 7
16673: ARRAY
16674: PUSH
16675: LD_INT 1
16677: ARRAY
16678: PPUSH
16679: LD_VAR 0 12
16683: PUSH
16684: LD_VAR 0 7
16688: ARRAY
16689: PUSH
16690: LD_INT 2
16692: ARRAY
16693: PPUSH
16694: CALL_OW 488
16698: NOT
16699: PUSH
16700: LD_VAR 0 12
16704: PUSH
16705: LD_VAR 0 7
16709: ARRAY
16710: PUSH
16711: LD_INT 1
16713: ARRAY
16714: PPUSH
16715: LD_VAR 0 12
16719: PUSH
16720: LD_VAR 0 7
16724: ARRAY
16725: PUSH
16726: LD_INT 2
16728: ARRAY
16729: PPUSH
16730: CALL_OW 428
16734: PUSH
16735: LD_INT 0
16737: GREATER
16738: OR
16739: PUSH
16740: LD_VAR 0 12
16744: PUSH
16745: LD_VAR 0 7
16749: ARRAY
16750: PUSH
16751: LD_INT 1
16753: ARRAY
16754: PPUSH
16755: LD_VAR 0 12
16759: PUSH
16760: LD_VAR 0 7
16764: ARRAY
16765: PUSH
16766: LD_INT 2
16768: ARRAY
16769: PPUSH
16770: CALL_OW 351
16774: OR
16775: IFFALSE 16781
// exit ;
16777: POP
16778: POP
16779: GO 17073
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16781: LD_ADDR_VAR 0 8
16785: PUSH
16786: LD_VAR 0 12
16790: PUSH
16791: LD_VAR 0 7
16795: ARRAY
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: LD_VAR 0 12
16805: PUSH
16806: LD_VAR 0 7
16810: ARRAY
16811: PUSH
16812: LD_INT 2
16814: ARRAY
16815: PPUSH
16816: CALL_OW 546
16820: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16821: LD_VAR 0 8
16825: PUSH
16826: LD_INT 1
16828: ARRAY
16829: PUSH
16830: LD_VAR 0 8
16834: PUSH
16835: LD_INT 2
16837: ARRAY
16838: PUSH
16839: LD_VAR 0 13
16843: PUSH
16844: LD_INT 2
16846: PLUS
16847: GREATER
16848: OR
16849: PUSH
16850: LD_VAR 0 8
16854: PUSH
16855: LD_INT 2
16857: ARRAY
16858: PUSH
16859: LD_VAR 0 13
16863: PUSH
16864: LD_INT 2
16866: MINUS
16867: LESS
16868: OR
16869: PUSH
16870: LD_VAR 0 8
16874: PUSH
16875: LD_INT 3
16877: ARRAY
16878: PUSH
16879: LD_INT 0
16881: PUSH
16882: LD_INT 8
16884: PUSH
16885: LD_INT 9
16887: PUSH
16888: LD_INT 10
16890: PUSH
16891: LD_INT 11
16893: PUSH
16894: LD_INT 12
16896: PUSH
16897: LD_INT 13
16899: PUSH
16900: LD_INT 16
16902: PUSH
16903: LD_INT 17
16905: PUSH
16906: LD_INT 18
16908: PUSH
16909: LD_INT 19
16911: PUSH
16912: LD_INT 20
16914: PUSH
16915: LD_INT 21
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: IN
16933: NOT
16934: OR
16935: PUSH
16936: LD_VAR 0 8
16940: PUSH
16941: LD_INT 5
16943: ARRAY
16944: NOT
16945: OR
16946: PUSH
16947: LD_VAR 0 8
16951: PUSH
16952: LD_INT 6
16954: ARRAY
16955: PUSH
16956: LD_INT 1
16958: PUSH
16959: LD_INT 2
16961: PUSH
16962: LD_INT 7
16964: PUSH
16965: LD_INT 9
16967: PUSH
16968: LD_INT 10
16970: PUSH
16971: LD_INT 11
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: IN
16982: NOT
16983: OR
16984: IFFALSE 16990
// exit ;
16986: POP
16987: POP
16988: GO 17073
// end ;
16990: GO 16661
16992: POP
16993: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16994: LD_VAR 0 9
16998: PPUSH
16999: LD_VAR 0 3
17003: PPUSH
17004: LD_VAR 0 4
17008: PPUSH
17009: LD_INT 20
17011: PPUSH
17012: CALL 8996 0 4
17016: PUSH
17017: LD_INT 4
17019: ARRAY
17020: IFFALSE 17024
// exit ;
17022: GO 17073
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17024: LD_VAR 0 2
17028: PUSH
17029: LD_INT 29
17031: PUSH
17032: LD_INT 30
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: IN
17039: PUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_VAR 0 4
17049: PPUSH
17050: LD_VAR 0 9
17054: PPUSH
17055: CALL_OW 440
17059: NOT
17060: AND
17061: IFFALSE 17065
// exit ;
17063: GO 17073
// result := true ;
17065: LD_ADDR_VAR 0 6
17069: PUSH
17070: LD_INT 1
17072: ST_TO_ADDR
// end ;
17073: LD_VAR 0 6
17077: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17078: LD_INT 0
17080: PPUSH
17081: PPUSH
17082: PPUSH
17083: PPUSH
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
17089: PPUSH
17090: PPUSH
17091: PPUSH
17092: PPUSH
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
17097: PPUSH
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
17102: PPUSH
17103: PPUSH
17104: PPUSH
17105: PPUSH
17106: PPUSH
17107: PPUSH
17108: PPUSH
17109: PPUSH
17110: PPUSH
17111: PPUSH
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
17116: PPUSH
17117: PPUSH
17118: PPUSH
17119: PPUSH
17120: PPUSH
17121: PPUSH
17122: PPUSH
17123: PPUSH
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
17132: PPUSH
17133: PPUSH
17134: PPUSH
17135: PPUSH
17136: PPUSH
17137: PPUSH
// result = [ ] ;
17138: LD_ADDR_VAR 0 7
17142: PUSH
17143: EMPTY
17144: ST_TO_ADDR
// temp_list = [ ] ;
17145: LD_ADDR_VAR 0 9
17149: PUSH
17150: EMPTY
17151: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17152: LD_VAR 0 4
17156: PUSH
17157: LD_INT 0
17159: PUSH
17160: LD_INT 1
17162: PUSH
17163: LD_INT 2
17165: PUSH
17166: LD_INT 3
17168: PUSH
17169: LD_INT 4
17171: PUSH
17172: LD_INT 5
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: IN
17183: NOT
17184: PUSH
17185: LD_VAR 0 1
17189: PUSH
17190: LD_INT 0
17192: PUSH
17193: LD_INT 1
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: IN
17200: PUSH
17201: LD_VAR 0 5
17205: PUSH
17206: LD_INT 1
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: LD_INT 3
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: IN
17220: NOT
17221: AND
17222: OR
17223: IFFALSE 17227
// exit ;
17225: GO 35618
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17227: LD_VAR 0 1
17231: PUSH
17232: LD_INT 6
17234: PUSH
17235: LD_INT 7
17237: PUSH
17238: LD_INT 8
17240: PUSH
17241: LD_INT 13
17243: PUSH
17244: LD_INT 12
17246: PUSH
17247: LD_INT 15
17249: PUSH
17250: LD_INT 11
17252: PUSH
17253: LD_INT 14
17255: PUSH
17256: LD_INT 10
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: IN
17270: IFFALSE 17280
// btype = b_lab ;
17272: LD_ADDR_VAR 0 1
17276: PUSH
17277: LD_INT 6
17279: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17280: LD_VAR 0 6
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: IN
17299: NOT
17300: PUSH
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 0
17308: PUSH
17309: LD_INT 1
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: LD_INT 6
17320: PUSH
17321: LD_INT 36
17323: PUSH
17324: LD_INT 4
17326: PUSH
17327: LD_INT 5
17329: PUSH
17330: LD_INT 31
17332: PUSH
17333: LD_INT 32
17335: PUSH
17336: LD_INT 33
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: IN
17352: NOT
17353: PUSH
17354: LD_VAR 0 6
17358: PUSH
17359: LD_INT 1
17361: EQUAL
17362: AND
17363: OR
17364: PUSH
17365: LD_VAR 0 1
17369: PUSH
17370: LD_INT 2
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: IN
17380: NOT
17381: PUSH
17382: LD_VAR 0 6
17386: PUSH
17387: LD_INT 2
17389: EQUAL
17390: AND
17391: OR
17392: IFFALSE 17402
// mode = 0 ;
17394: LD_ADDR_VAR 0 6
17398: PUSH
17399: LD_INT 0
17401: ST_TO_ADDR
// case mode of 0 :
17402: LD_VAR 0 6
17406: PUSH
17407: LD_INT 0
17409: DOUBLE
17410: EQUAL
17411: IFTRUE 17415
17413: GO 28868
17415: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17416: LD_ADDR_VAR 0 11
17420: PUSH
17421: LD_INT 0
17423: PUSH
17424: LD_INT 0
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 0
17433: PUSH
17434: LD_INT 1
17436: NEG
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: NEG
17475: PUSH
17476: LD_INT 0
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: NEG
17486: PUSH
17487: LD_INT 1
17489: NEG
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: PUSH
17499: LD_INT 2
17501: NEG
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 0
17509: PUSH
17510: LD_INT 2
17512: NEG
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: LD_INT 1
17523: NEG
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: NEG
17552: PUSH
17553: LD_INT 1
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 1
17582: NEG
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17609: LD_ADDR_VAR 0 12
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: LD_INT 0
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: LD_INT 1
17629: NEG
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: LD_INT 1
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 1
17678: NEG
17679: PUSH
17680: LD_INT 1
17682: NEG
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: LD_INT 1
17693: NEG
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 2
17701: PUSH
17702: LD_INT 0
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 2
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: LD_INT 1
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 2
17732: NEG
17733: PUSH
17734: LD_INT 0
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 2
17743: NEG
17744: PUSH
17745: LD_INT 1
17747: NEG
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 2
17755: NEG
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 3
17766: NEG
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 3
17777: NEG
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17805: LD_ADDR_VAR 0 13
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 2
17898: PUSH
17899: LD_INT 1
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: LD_INT 2
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 1
17918: PUSH
17919: LD_INT 2
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: LD_INT 1
17932: NEG
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 2
17940: NEG
17941: PUSH
17942: LD_INT 2
17944: NEG
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 2
17952: NEG
17953: PUSH
17954: LD_INT 3
17956: NEG
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 3
17964: NEG
17965: PUSH
17966: LD_INT 2
17968: NEG
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 3
17976: NEG
17977: PUSH
17978: LD_INT 3
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18004: LD_ADDR_VAR 0 14
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 0
18021: PUSH
18022: LD_INT 1
18024: NEG
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: LD_INT 0
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: NEG
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: NEG
18086: PUSH
18087: LD_INT 2
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 0
18097: PUSH
18098: LD_INT 2
18100: NEG
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 1
18108: PUSH
18109: LD_INT 1
18111: NEG
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: LD_INT 2
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 0
18129: PUSH
18130: LD_INT 2
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: NEG
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 1
18150: NEG
18151: PUSH
18152: LD_INT 3
18154: NEG
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: LD_INT 3
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: LD_INT 2
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18200: LD_ADDR_VAR 0 15
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 0
18217: PUSH
18218: LD_INT 1
18220: NEG
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: LD_INT 0
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: LD_INT 1
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 1
18312: NEG
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 2
18323: NEG
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 2
18334: NEG
18335: PUSH
18336: LD_INT 1
18338: NEG
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 3
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 3
18367: PUSH
18368: LD_INT 1
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18393: LD_ADDR_VAR 0 16
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: LD_INT 1
18466: NEG
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 1
18474: NEG
18475: PUSH
18476: LD_INT 2
18478: NEG
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 2
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: NEG
18517: PUSH
18518: LD_INT 1
18520: NEG
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 2
18528: NEG
18529: PUSH
18530: LD_INT 2
18532: NEG
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 3
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 3
18550: PUSH
18551: LD_INT 3
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: LD_INT 3
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18586: LD_ADDR_VAR 0 17
18590: PUSH
18591: LD_INT 0
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: LD_INT 1
18606: NEG
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: LD_INT 0
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 1
18655: NEG
18656: PUSH
18657: LD_INT 1
18659: NEG
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: LD_INT 2
18671: NEG
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 2
18682: NEG
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: LD_INT 1
18693: NEG
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 0
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: LD_INT 1
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: LD_INT 2
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: LD_INT 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: NEG
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: NEG
18763: PUSH
18764: LD_INT 0
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 2
18773: NEG
18774: PUSH
18775: LD_INT 1
18777: NEG
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 2
18785: NEG
18786: PUSH
18787: LD_INT 2
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18816: LD_ADDR_VAR 0 18
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: LD_INT 0
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: LD_INT 2
18901: NEG
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: LD_INT 1
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: LD_INT 2
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: LD_INT 2
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: NEG
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 2
18992: NEG
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: NEG
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 2
19015: NEG
19016: PUSH
19017: LD_INT 2
19019: NEG
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19046: LD_ADDR_VAR 0 19
19050: PUSH
19051: LD_INT 0
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: LD_INT 0
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 1
19115: NEG
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: LD_INT 2
19131: NEG
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: LD_INT 2
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 2
19161: PUSH
19162: LD_INT 0
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 2
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 2
19181: PUSH
19182: LD_INT 2
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 1
19211: NEG
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: NEG
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: NEG
19234: PUSH
19235: LD_INT 1
19237: NEG
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 2
19245: NEG
19246: PUSH
19247: LD_INT 2
19249: NEG
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19276: LD_ADDR_VAR 0 20
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: LD_INT 0
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: LD_INT 1
19296: NEG
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 1
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: LD_INT 1
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: NEG
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 1
19345: NEG
19346: PUSH
19347: LD_INT 1
19349: NEG
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: LD_INT 2
19361: NEG
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: LD_INT 2
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: PUSH
19381: LD_INT 1
19383: NEG
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: LD_INT 2
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: LD_INT 2
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: LD_INT 1
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 2
19452: NEG
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: NEG
19464: PUSH
19465: LD_INT 1
19467: NEG
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 2
19475: NEG
19476: PUSH
19477: LD_INT 2
19479: NEG
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19506: LD_ADDR_VAR 0 21
19510: PUSH
19511: LD_INT 0
19513: PUSH
19514: LD_INT 0
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 1
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: NEG
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 1
19587: NEG
19588: PUSH
19589: LD_INT 2
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: LD_INT 2
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 1
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 2
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 2
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: LD_INT 2
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 1
19651: PUSH
19652: LD_INT 2
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: LD_INT 2
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 1
19671: NEG
19672: PUSH
19673: LD_INT 1
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 2
19682: NEG
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: NEG
19694: PUSH
19695: LD_INT 1
19697: NEG
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 2
19705: NEG
19706: PUSH
19707: LD_INT 2
19709: NEG
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19736: LD_ADDR_VAR 0 22
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 1
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 1
19817: NEG
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: LD_INT 2
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: LD_INT 0
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 2
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 0
19891: PUSH
19892: LD_INT 2
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: LD_INT 1
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 2
19912: NEG
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: NEG
19924: PUSH
19925: LD_INT 1
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 2
19935: NEG
19936: PUSH
19937: LD_INT 2
19939: NEG
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19966: LD_ADDR_VAR 0 23
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: LD_INT 0
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: LD_INT 1
19986: NEG
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 1
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: LD_INT 1
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 1
20035: NEG
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 1
20047: NEG
20048: PUSH
20049: LD_INT 2
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: LD_INT 2
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: LD_INT 0
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 2
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 1
20131: NEG
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 2
20142: NEG
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: NEG
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 2
20165: NEG
20166: PUSH
20167: LD_INT 2
20169: NEG
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 2
20177: NEG
20178: PUSH
20179: LD_INT 3
20181: NEG
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: LD_INT 3
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 2
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 2
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20246: LD_ADDR_VAR 0 24
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: LD_INT 1
20266: NEG
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 1
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: LD_INT 1
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 1
20304: NEG
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: LD_INT 1
20319: NEG
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: LD_INT 2
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: LD_INT 2
20342: NEG
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: LD_INT 1
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: LD_INT 0
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 2
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 2
20422: NEG
20423: PUSH
20424: LD_INT 0
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 3
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 3
20489: PUSH
20490: LD_INT 2
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20522: LD_ADDR_VAR 0 25
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: LD_INT 0
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: LD_INT 1
20542: NEG
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 1
20550: PUSH
20551: LD_INT 0
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 1
20591: NEG
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: LD_INT 2
20607: NEG
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 0
20615: PUSH
20616: LD_INT 2
20618: NEG
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 2
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 1
20687: NEG
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 2
20698: NEG
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 2
20709: NEG
20710: PUSH
20711: LD_INT 1
20713: NEG
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 3
20733: PUSH
20734: LD_INT 1
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 3
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: LD_INT 3
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 1
20763: PUSH
20764: LD_INT 3
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20796: LD_ADDR_VAR 0 26
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 0
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: LD_INT 2
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: LD_INT 0
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: LD_INT 2
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: LD_INT 2
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 2
20995: NEG
20996: PUSH
20997: LD_INT 2
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: LD_INT 3
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 1
21027: NEG
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 2
21038: NEG
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21072: LD_ADDR_VAR 0 27
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: LD_INT 0
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 0
21089: PUSH
21090: LD_INT 1
21092: NEG
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: NEG
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: LD_INT 2
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 2
21248: NEG
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 2
21271: NEG
21272: PUSH
21273: LD_INT 2
21275: NEG
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 1
21283: NEG
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 2
21294: NEG
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 3
21305: NEG
21306: PUSH
21307: LD_INT 1
21309: NEG
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 3
21317: NEG
21318: PUSH
21319: LD_INT 2
21321: NEG
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21352: LD_ADDR_VAR 0 28
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: LD_INT 0
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: LD_INT 1
21425: NEG
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 2
21437: NEG
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 0
21445: PUSH
21446: LD_INT 2
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: LD_INT 1
21459: NEG
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: LD_INT 1
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 2
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 2
21528: NEG
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 2
21539: NEG
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 2
21551: NEG
21552: PUSH
21553: LD_INT 2
21555: NEG
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: NEG
21564: PUSH
21565: LD_INT 3
21567: NEG
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 1
21575: NEG
21576: PUSH
21577: LD_INT 3
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 3
21587: NEG
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 3
21599: NEG
21600: PUSH
21601: LD_INT 2
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21634: LD_ADDR_VAR 0 29
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: LD_INT 2
21730: NEG
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 0
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: NEG
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: NEG
21813: PUSH
21814: LD_INT 2
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 2
21824: NEG
21825: PUSH
21826: LD_INT 3
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 1
21839: NEG
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 3
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 3
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 3
21878: NEG
21879: PUSH
21880: LD_INT 2
21882: NEG
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21913: LD_ADDR_VAR 0 30
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: LD_INT 1
21933: NEG
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: NEG
21983: PUSH
21984: LD_INT 1
21986: NEG
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 1
21994: NEG
21995: PUSH
21996: LD_INT 2
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: LD_INT 2
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: LD_INT 1
22020: NEG
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 2
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: LD_INT 1
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 2
22079: NEG
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 2
22090: NEG
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: NEG
22103: PUSH
22104: LD_INT 3
22106: NEG
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 2
22117: NEG
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 3
22125: PUSH
22126: LD_INT 2
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 2
22135: PUSH
22136: LD_INT 3
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 2
22145: NEG
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 3
22156: NEG
22157: PUSH
22158: LD_INT 1
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22191: LD_ADDR_VAR 0 31
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: LD_INT 1
22211: NEG
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 1
22229: PUSH
22230: LD_INT 1
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: LD_INT 2
22276: NEG
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 2
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 2
22356: NEG
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 2
22368: NEG
22369: PUSH
22370: LD_INT 2
22372: NEG
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 2
22380: NEG
22381: PUSH
22382: LD_INT 3
22384: NEG
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 2
22392: PUSH
22393: LD_INT 1
22395: NEG
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 3
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: LD_INT 3
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 1
22423: NEG
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 3
22434: NEG
22435: PUSH
22436: LD_INT 2
22438: NEG
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22469: LD_ADDR_VAR 0 32
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: LD_INT 1
22489: NEG
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: NEG
22539: PUSH
22540: LD_INT 1
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 2
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 2
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: NEG
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: NEG
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 2
22646: NEG
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: PUSH
22660: LD_INT 3
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 1
22670: PUSH
22671: LD_INT 2
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 2
22691: PUSH
22692: LD_INT 3
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 3
22712: NEG
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22747: LD_ADDR_VAR 0 33
22751: PUSH
22752: LD_INT 0
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 2
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 2
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 1
22891: NEG
22892: PUSH
22893: LD_INT 1
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 2
22902: NEG
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 2
22925: NEG
22926: PUSH
22927: LD_INT 2
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 2
22937: NEG
22938: PUSH
22939: LD_INT 3
22941: NEG
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 2
22949: PUSH
22950: LD_INT 1
22952: NEG
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 3
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: LD_INT 3
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 3
22991: NEG
22992: PUSH
22993: LD_INT 2
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23026: LD_ADDR_VAR 0 34
23030: PUSH
23031: LD_INT 0
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: LD_INT 1
23046: NEG
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 1
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 1
23095: NEG
23096: PUSH
23097: LD_INT 1
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 0
23119: PUSH
23120: LD_INT 2
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 2
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 2
23151: PUSH
23152: LD_INT 2
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 1
23161: PUSH
23162: LD_INT 2
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 2
23182: NEG
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: LD_INT 1
23197: NEG
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 2
23205: NEG
23206: PUSH
23207: LD_INT 2
23209: NEG
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 3
23221: NEG
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: LD_INT 2
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 3
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 3
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 3
23271: NEG
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23306: LD_ADDR_VAR 0 35
23310: PUSH
23311: LD_INT 0
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: LD_INT 0
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 1
23375: NEG
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 2
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23418: LD_ADDR_VAR 0 36
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 1
23487: NEG
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: LD_INT 2
23503: NEG
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23530: LD_ADDR_VAR 0 37
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: NEG
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23642: LD_ADDR_VAR 0 38
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 2
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 2
23733: NEG
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23754: LD_ADDR_VAR 0 39
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: LD_INT 2
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23866: LD_ADDR_VAR 0 40
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23978: LD_ADDR_VAR 0 41
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: LD_INT 2
24063: NEG
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 2
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 2
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 2
24102: PUSH
24103: LD_INT 2
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 2
24133: NEG
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 2
24144: NEG
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 2
24156: NEG
24157: PUSH
24158: LD_INT 2
24160: NEG
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 2
24168: NEG
24169: PUSH
24170: LD_INT 3
24172: NEG
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 3
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 3
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 3
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 3
24221: PUSH
24222: LD_INT 3
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 2
24231: PUSH
24232: LD_INT 3
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 2
24241: NEG
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 3
24252: NEG
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 3
24263: NEG
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 3
24275: NEG
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 3
24287: NEG
24288: PUSH
24289: LD_INT 3
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24328: LD_ADDR_VAR 0 42
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: LD_INT 1
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: NEG
24410: PUSH
24411: LD_INT 2
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 2
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 2
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: NEG
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 2
24506: NEG
24507: PUSH
24508: LD_INT 2
24510: NEG
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: NEG
24519: PUSH
24520: LD_INT 3
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 3
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: LD_INT 3
24545: NEG
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: LD_INT 2
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 3
24564: PUSH
24565: LD_INT 2
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 3
24574: PUSH
24575: LD_INT 3
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 3
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: LD_INT 3
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: NEG
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 3
24625: NEG
24626: PUSH
24627: LD_INT 2
24629: NEG
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 3
24637: NEG
24638: PUSH
24639: LD_INT 3
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24678: LD_ADDR_VAR 0 43
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: LD_INT 0
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: LD_INT 2
24763: NEG
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: LD_INT 2
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 2
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: LD_INT 2
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 2
24844: NEG
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 2
24855: NEG
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 3
24871: NEG
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: LD_INT 3
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 3
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 3
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: LD_INT 3
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: LD_INT 3
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: LD_INT 2
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 2
24963: NEG
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 3
24974: NEG
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 3
24985: NEG
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25026: LD_ADDR_VAR 0 44
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: LD_INT 0
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: LD_INT 1
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 2
25181: NEG
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 2
25192: NEG
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 2
25204: NEG
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 2
25216: NEG
25217: PUSH
25218: LD_INT 3
25220: NEG
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 2
25228: PUSH
25229: LD_INT 1
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 3
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 3
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 3
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 3
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 3
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: NEG
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 3
25300: NEG
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 3
25311: NEG
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 3
25323: NEG
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 3
25335: NEG
25336: PUSH
25337: LD_INT 3
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25376: LD_ADDR_VAR 0 45
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: LD_INT 1
25449: NEG
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: NEG
25458: PUSH
25459: LD_INT 2
25461: NEG
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: LD_INT 2
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 1
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: LD_INT 2
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 2
25542: NEG
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 2
25554: NEG
25555: PUSH
25556: LD_INT 2
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 2
25566: NEG
25567: PUSH
25568: LD_INT 3
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 3
25582: NEG
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: LD_INT 3
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: LD_INT 2
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 3
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: LD_INT 3
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: LD_INT 3
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: LD_INT 3
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: LD_INT 3
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: LD_INT 2
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 3
25673: NEG
25674: PUSH
25675: LD_INT 2
25677: NEG
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 3
25685: NEG
25686: PUSH
25687: LD_INT 3
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25726: LD_ADDR_VAR 0 46
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: LD_INT 0
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: LD_INT 1
25799: NEG
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: LD_INT 2
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 2
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: LD_INT 2
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: LD_INT 0
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: NEG
25916: PUSH
25917: LD_INT 3
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: LD_INT 3
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 2
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 3
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: LD_INT 3
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: LD_INT 3
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 3
26022: NEG
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 3
26033: NEG
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26074: LD_ADDR_VAR 0 47
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 2
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 2
26201: NEG
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26225: LD_ADDR_VAR 0 48
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: LD_INT 2
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 2
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26372: LD_ADDR_VAR 0 49
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 2
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26516: LD_ADDR_VAR 0 50
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 2
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 2
26607: PUSH
26608: LD_INT 2
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26660: LD_ADDR_VAR 0 51
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 2
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 2
26772: NEG
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26807: LD_ADDR_VAR 0 52
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: LD_INT 1
26827: NEG
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: LD_INT 2
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: NEG
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 2
26911: NEG
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: NEG
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 2
26934: NEG
26935: PUSH
26936: LD_INT 2
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26958: LD_ADDR_VAR 0 53
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 1
27039: NEG
27040: PUSH
27041: LD_INT 2
27043: NEG
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 2
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 2
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 2
27157: NEG
27158: PUSH
27159: LD_INT 2
27161: NEG
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27188: LD_ADDR_VAR 0 54
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: NEG
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: LD_INT 2
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 2
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: NEG
27388: PUSH
27389: LD_INT 2
27391: NEG
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27418: LD_ADDR_VAR 0 55
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: NEG
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: LD_INT 2
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: LD_INT 2
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 2
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 2
27594: NEG
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 2
27617: NEG
27618: PUSH
27619: LD_INT 2
27621: NEG
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27648: LD_ADDR_VAR 0 56
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: LD_INT 2
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: LD_INT 2
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 2
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: LD_INT 2
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 2
27824: NEG
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: NEG
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: NEG
27848: PUSH
27849: LD_INT 2
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27878: LD_ADDR_VAR 0 57
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 1
27936: NEG
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: LD_INT 2
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: LD_INT 2
27974: NEG
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 2
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: PUSH
28014: LD_INT 2
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 0
28033: PUSH
28034: LD_INT 2
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 2
28054: NEG
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: NEG
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: NEG
28078: PUSH
28079: LD_INT 2
28081: NEG
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28108: LD_ADDR_VAR 0 58
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 2
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: LD_INT 2
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: NEG
28296: PUSH
28297: LD_INT 1
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 2
28307: NEG
28308: PUSH
28309: LD_INT 2
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28338: LD_ADDR_VAR 0 59
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28426: LD_ADDR_VAR 0 60
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28514: LD_ADDR_VAR 0 61
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: LD_INT 1
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28602: LD_ADDR_VAR 0 62
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28690: LD_ADDR_VAR 0 63
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 1
28748: NEG
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28778: LD_ADDR_VAR 0 64
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: ST_TO_ADDR
// end ; 1 :
28866: GO 34763
28868: LD_INT 1
28870: DOUBLE
28871: EQUAL
28872: IFTRUE 28876
28874: GO 31499
28876: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28877: LD_ADDR_VAR 0 11
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: LD_INT 3
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: LD_INT 3
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: LD_INT 2
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28921: LD_ADDR_VAR 0 12
28925: PUSH
28926: LD_INT 2
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 3
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 3
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28962: LD_ADDR_VAR 0 13
28966: PUSH
28967: LD_INT 3
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 3
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 2
28989: PUSH
28990: LD_INT 3
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: LIST
29001: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29002: LD_ADDR_VAR 0 14
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 3
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29043: LD_ADDR_VAR 0 15
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 3
29061: NEG
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: NEG
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29087: LD_ADDR_VAR 0 16
29091: PUSH
29092: LD_INT 2
29094: NEG
29095: PUSH
29096: LD_INT 3
29098: NEG
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 3
29106: NEG
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 3
29118: NEG
29119: PUSH
29120: LD_INT 3
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29133: LD_ADDR_VAR 0 17
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: LD_INT 3
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 3
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 2
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29177: LD_ADDR_VAR 0 18
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 3
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29218: LD_ADDR_VAR 0 19
29222: PUSH
29223: LD_INT 3
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 3
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29258: LD_ADDR_VAR 0 20
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29299: LD_ADDR_VAR 0 21
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: NEG
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: NEG
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29343: LD_ADDR_VAR 0 22
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: LD_INT 3
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 3
29362: NEG
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: LD_INT 3
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29389: LD_ADDR_VAR 0 23
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: LD_INT 3
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: LD_INT 4
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 3
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29433: LD_ADDR_VAR 0 24
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 4
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29474: LD_ADDR_VAR 0 25
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: LD_INT 3
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 4
29491: PUSH
29492: LD_INT 3
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 3
29501: PUSH
29502: LD_INT 4
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29514: LD_ADDR_VAR 0 26
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: LD_INT 3
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: LD_INT 4
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29555: LD_ADDR_VAR 0 27
29559: PUSH
29560: LD_INT 3
29562: NEG
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 3
29573: NEG
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 4
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29599: LD_ADDR_VAR 0 28
29603: PUSH
29604: LD_INT 3
29606: NEG
29607: PUSH
29608: LD_INT 3
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 3
29618: NEG
29619: PUSH
29620: LD_INT 4
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 4
29630: NEG
29631: PUSH
29632: LD_INT 3
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29645: LD_ADDR_VAR 0 29
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: LD_INT 3
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: LD_INT 2
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: LD_INT 4
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 4
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: LD_INT 3
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: LD_INT 5
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: LD_INT 5
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: LD_INT 4
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 6
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: LD_INT 6
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: LD_INT 5
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29800: LD_ADDR_VAR 0 30
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 3
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 4
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 4
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 4
29869: PUSH
29870: LD_INT 1
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 5
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 5
29890: PUSH
29891: LD_INT 1
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 5
29900: PUSH
29901: LD_INT 1
29903: NEG
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 6
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 6
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29943: LD_ADDR_VAR 0 31
29947: PUSH
29948: LD_INT 3
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: LD_INT 3
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: PUSH
29971: LD_INT 3
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 4
29980: PUSH
29981: LD_INT 3
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 4
29990: PUSH
29991: LD_INT 4
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 3
30000: PUSH
30001: LD_INT 4
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 5
30010: PUSH
30011: LD_INT 4
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 5
30020: PUSH
30021: LD_INT 5
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 4
30030: PUSH
30031: LD_INT 5
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 6
30040: PUSH
30041: LD_INT 5
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 6
30050: PUSH
30051: LD_INT 6
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 5
30060: PUSH
30061: LD_INT 6
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30082: LD_ADDR_VAR 0 32
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: LD_INT 3
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: LD_INT 3
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 1
30109: NEG
30110: PUSH
30111: LD_INT 2
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 4
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: LD_INT 4
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: LD_INT 3
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 1
30151: PUSH
30152: LD_INT 5
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 0
30161: PUSH
30162: LD_INT 5
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 1
30171: NEG
30172: PUSH
30173: LD_INT 4
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: PUSH
30183: LD_INT 6
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: LD_INT 6
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: LD_INT 5
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30225: LD_ADDR_VAR 0 33
30229: PUSH
30230: LD_INT 2
30232: NEG
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 3
30243: NEG
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 3
30266: NEG
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 4
30277: NEG
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 4
30288: NEG
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 4
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 5
30311: NEG
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 5
30322: NEG
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 5
30334: NEG
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 6
30345: NEG
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 6
30356: NEG
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30380: LD_ADDR_VAR 0 34
30384: PUSH
30385: LD_INT 2
30387: NEG
30388: PUSH
30389: LD_INT 3
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: LD_INT 2
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 3
30411: NEG
30412: PUSH
30413: LD_INT 3
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: NEG
30424: PUSH
30425: LD_INT 4
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 4
30435: NEG
30436: PUSH
30437: LD_INT 3
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 4
30447: NEG
30448: PUSH
30449: LD_INT 4
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 4
30459: NEG
30460: PUSH
30461: LD_INT 5
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 5
30471: NEG
30472: PUSH
30473: LD_INT 4
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 5
30483: NEG
30484: PUSH
30485: LD_INT 5
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 5
30495: NEG
30496: PUSH
30497: LD_INT 6
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 6
30507: NEG
30508: PUSH
30509: LD_INT 5
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 6
30519: NEG
30520: PUSH
30521: LD_INT 6
30523: NEG
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30543: LD_ADDR_VAR 0 41
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: LD_INT 2
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30587: LD_ADDR_VAR 0 42
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30628: LD_ADDR_VAR 0 43
30632: PUSH
30633: LD_INT 2
30635: PUSH
30636: LD_INT 2
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 3
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: LD_INT 3
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30668: LD_ADDR_VAR 0 44
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30709: LD_ADDR_VAR 0 45
30713: PUSH
30714: LD_INT 2
30716: NEG
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 3
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30753: LD_ADDR_VAR 0 46
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: LD_INT 2
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 2
30772: NEG
30773: PUSH
30774: LD_INT 3
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: NEG
30785: PUSH
30786: LD_INT 2
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30799: LD_ADDR_VAR 0 47
30803: PUSH
30804: LD_INT 2
30806: NEG
30807: PUSH
30808: LD_INT 3
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30832: LD_ADDR_VAR 0 48
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: LD_INT 2
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30863: LD_ADDR_VAR 0 49
30867: PUSH
30868: LD_INT 3
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30892: LD_ADDR_VAR 0 50
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: LD_INT 3
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30921: LD_ADDR_VAR 0 51
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30952: LD_ADDR_VAR 0 52
30956: PUSH
30957: LD_INT 3
30959: NEG
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 3
30971: NEG
30972: PUSH
30973: LD_INT 2
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30985: LD_ADDR_VAR 0 53
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: LD_INT 3
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 1
31015: PUSH
31016: LD_INT 2
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31029: LD_ADDR_VAR 0 54
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 3
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31070: LD_ADDR_VAR 0 55
31074: PUSH
31075: LD_INT 3
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: LD_INT 3
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: LD_INT 3
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31110: LD_ADDR_VAR 0 56
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: LD_INT 3
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31151: LD_ADDR_VAR 0 57
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 3
31169: NEG
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31195: LD_ADDR_VAR 0 58
31199: PUSH
31200: LD_INT 2
31202: NEG
31203: PUSH
31204: LD_INT 3
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 3
31214: NEG
31215: PUSH
31216: LD_INT 2
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 3
31226: NEG
31227: PUSH
31228: LD_INT 3
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: LIST
31240: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31241: LD_ADDR_VAR 0 59
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 2
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31285: LD_ADDR_VAR 0 60
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31326: LD_ADDR_VAR 0 61
31330: PUSH
31331: LD_INT 2
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: LD_INT 2
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31366: LD_ADDR_VAR 0 62
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31407: LD_ADDR_VAR 0 63
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: NEG
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: LIST
31450: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31451: LD_ADDR_VAR 0 64
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 2
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: NEG
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 2
31482: NEG
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: ST_TO_ADDR
// end ; 2 :
31497: GO 34763
31499: LD_INT 2
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31507
31505: GO 34762
31507: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31508: LD_ADDR_VAR 0 29
31512: PUSH
31513: LD_INT 4
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 4
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 5
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 5
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 4
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 3
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 3
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 3
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 5
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 3
31608: PUSH
31609: LD_INT 3
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 3
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 4
31628: PUSH
31629: LD_INT 3
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 4
31638: PUSH
31639: LD_INT 4
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: LD_INT 4
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 4
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 2
31688: PUSH
31689: LD_INT 4
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: LD_INT 4
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: LD_INT 3
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: LD_INT 4
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 1
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 5
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: LD_INT 4
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: LD_INT 3
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: LD_INT 5
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: LD_INT 3
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 3
31791: NEG
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 3
31802: NEG
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 2
31825: NEG
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 3
31836: NEG
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 4
31847: NEG
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 4
31858: NEG
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 4
31870: NEG
31871: PUSH
31872: LD_INT 2
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 2
31882: NEG
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 4
31893: NEG
31894: PUSH
31895: LD_INT 4
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 4
31905: NEG
31906: PUSH
31907: LD_INT 5
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 3
31917: NEG
31918: PUSH
31919: LD_INT 4
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: LD_INT 3
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 4
31941: NEG
31942: PUSH
31943: LD_INT 3
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 5
31953: NEG
31954: PUSH
31955: LD_INT 4
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 5
31965: NEG
31966: PUSH
31967: LD_INT 5
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 3
31977: NEG
31978: PUSH
31979: LD_INT 5
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 5
31989: NEG
31990: PUSH
31991: LD_INT 3
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32046: LD_ADDR_VAR 0 30
32050: PUSH
32051: LD_INT 4
32053: PUSH
32054: LD_INT 4
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 4
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 5
32073: PUSH
32074: LD_INT 4
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 5
32083: PUSH
32084: LD_INT 5
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 4
32093: PUSH
32094: LD_INT 5
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: LD_INT 4
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 3
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 5
32123: PUSH
32124: LD_INT 3
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 3
32133: PUSH
32134: LD_INT 5
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: LD_INT 3
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: LD_INT 4
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 4
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: LD_INT 3
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: NEG
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 4
32236: NEG
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 4
32247: NEG
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 3
32259: NEG
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 3
32270: NEG
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 4
32281: NEG
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 5
32292: NEG
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 5
32303: NEG
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 5
32315: NEG
32316: PUSH
32317: LD_INT 2
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 3
32327: NEG
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: NEG
32339: PUSH
32340: LD_INT 3
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 3
32350: NEG
32351: PUSH
32352: LD_INT 4
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 2
32362: NEG
32363: PUSH
32364: LD_INT 3
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 4
32398: NEG
32399: PUSH
32400: LD_INT 3
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 4
32410: NEG
32411: PUSH
32412: LD_INT 4
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 2
32422: NEG
32423: PUSH
32424: LD_INT 4
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 4
32434: NEG
32435: PUSH
32436: LD_INT 2
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 4
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 5
32460: NEG
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 1
32468: PUSH
32469: LD_INT 4
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: LD_INT 3
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: LD_INT 3
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 4
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 5
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 3
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: NEG
32537: PUSH
32538: LD_INT 5
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32593: LD_ADDR_VAR 0 31
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: LD_INT 4
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: LD_INT 4
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: LD_INT 5
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: LD_INT 5
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 4
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: LD_INT 3
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 2
32672: PUSH
32673: LD_INT 5
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: LD_INT 3
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 3
32693: NEG
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 3
32704: NEG
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 2
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 3
32738: NEG
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 4
32749: NEG
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 4
32760: NEG
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 4
32772: NEG
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 4
32795: NEG
32796: PUSH
32797: LD_INT 4
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 4
32807: NEG
32808: PUSH
32809: LD_INT 5
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 3
32819: NEG
32820: PUSH
32821: LD_INT 4
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 3
32831: NEG
32832: PUSH
32833: LD_INT 3
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 4
32843: NEG
32844: PUSH
32845: LD_INT 3
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 5
32855: NEG
32856: PUSH
32857: LD_INT 4
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 5
32867: NEG
32868: PUSH
32869: LD_INT 5
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 3
32879: NEG
32880: PUSH
32881: LD_INT 5
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 5
32891: NEG
32892: PUSH
32893: LD_INT 3
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 4
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 3
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 2
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: LD_INT 3
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: LD_INT 4
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: LD_INT 2
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: NEG
32994: PUSH
32995: LD_INT 4
32997: NEG
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 4
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 4
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 5
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 5
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 4
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 3
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 3
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: LD_INT 2
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 5
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33143: LD_ADDR_VAR 0 32
33147: PUSH
33148: LD_INT 4
33150: NEG
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 4
33161: NEG
33162: PUSH
33163: LD_INT 1
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 3
33173: NEG
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 3
33184: NEG
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 4
33195: NEG
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 5
33206: NEG
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 5
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 5
33229: NEG
33230: PUSH
33231: LD_INT 2
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 3
33241: NEG
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: LD_INT 3
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: NEG
33265: PUSH
33266: LD_INT 4
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 2
33276: NEG
33277: PUSH
33278: LD_INT 3
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 2
33288: NEG
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 3
33300: NEG
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 4
33312: NEG
33313: PUSH
33314: LD_INT 3
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 4
33324: NEG
33325: PUSH
33326: LD_INT 4
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: LD_INT 4
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 4
33348: NEG
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: LD_INT 4
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 5
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: LD_INT 4
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: LD_INT 3
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: LD_INT 3
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: LD_INT 4
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: LD_INT 5
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 3
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 2
33450: NEG
33451: PUSH
33452: LD_INT 5
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 3
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 4
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 4
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 3
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 2
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: LD_INT 2
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 4
33545: PUSH
33546: LD_INT 2
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 4
33555: PUSH
33556: LD_INT 4
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 5
33575: PUSH
33576: LD_INT 4
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 5
33585: PUSH
33586: LD_INT 5
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 4
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 4
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 5
33625: PUSH
33626: LD_INT 3
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 3
33635: PUSH
33636: LD_INT 5
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33690: LD_ADDR_VAR 0 33
33694: PUSH
33695: LD_INT 4
33697: NEG
33698: PUSH
33699: LD_INT 4
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 4
33709: NEG
33710: PUSH
33711: LD_INT 5
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 3
33721: NEG
33722: PUSH
33723: LD_INT 4
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 3
33733: NEG
33734: PUSH
33735: LD_INT 3
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 4
33745: NEG
33746: PUSH
33747: LD_INT 3
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 5
33757: NEG
33758: PUSH
33759: LD_INT 4
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 5
33769: NEG
33770: PUSH
33771: LD_INT 5
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 3
33781: NEG
33782: PUSH
33783: LD_INT 5
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 5
33793: NEG
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: LD_INT 4
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: LD_INT 3
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: LD_INT 3
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: LD_INT 4
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: LD_INT 4
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 4
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 4
33917: PUSH
33918: LD_INT 1
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 5
33928: PUSH
33929: LD_INT 0
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 5
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 4
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 3
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 3
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 3
33979: PUSH
33980: LD_INT 2
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 5
33990: PUSH
33991: LD_INT 2
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 3
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 4
34020: PUSH
34021: LD_INT 3
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 4
34030: PUSH
34031: LD_INT 4
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 3
34040: PUSH
34041: LD_INT 4
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 4
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 4
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: LD_INT 4
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: LD_INT 3
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: PUSH
34111: LD_INT 4
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 5
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 5
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: LD_INT 4
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: LD_INT 5
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34228: LD_ADDR_VAR 0 34
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: LD_INT 4
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 5
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: LD_INT 4
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: LD_INT 4
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: LD_INT 5
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 3
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: LD_INT 5
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 3
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 3
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 4
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 4
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 3
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 4
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 4
34430: PUSH
34431: LD_INT 4
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 4
34440: PUSH
34441: LD_INT 3
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 5
34450: PUSH
34451: LD_INT 4
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 5
34460: PUSH
34461: LD_INT 5
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 4
34470: PUSH
34471: LD_INT 5
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 3
34480: PUSH
34481: LD_INT 4
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 5
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: LD_INT 5
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 4
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: LD_INT 4
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: LD_INT 3
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: NEG
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 4
34613: NEG
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 4
34624: NEG
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 3
34636: NEG
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 3
34647: NEG
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 4
34658: NEG
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 5
34669: NEG
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 5
34680: NEG
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 5
34692: NEG
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 3
34704: NEG
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: ST_TO_ADDR
// end ; end ;
34760: GO 34763
34762: POP
// case btype of b_depot , b_warehouse :
34763: LD_VAR 0 1
34767: PUSH
34768: LD_INT 0
34770: DOUBLE
34771: EQUAL
34772: IFTRUE 34782
34774: LD_INT 1
34776: DOUBLE
34777: EQUAL
34778: IFTRUE 34782
34780: GO 34983
34782: POP
// case nation of nation_american :
34783: LD_VAR 0 5
34787: PUSH
34788: LD_INT 1
34790: DOUBLE
34791: EQUAL
34792: IFTRUE 34796
34794: GO 34852
34796: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34797: LD_ADDR_VAR 0 9
34801: PUSH
34802: LD_VAR 0 11
34806: PUSH
34807: LD_VAR 0 12
34811: PUSH
34812: LD_VAR 0 13
34816: PUSH
34817: LD_VAR 0 14
34821: PUSH
34822: LD_VAR 0 15
34826: PUSH
34827: LD_VAR 0 16
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: PUSH
34840: LD_VAR 0 4
34844: PUSH
34845: LD_INT 1
34847: PLUS
34848: ARRAY
34849: ST_TO_ADDR
34850: GO 34981
34852: LD_INT 2
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34916
34860: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34861: LD_ADDR_VAR 0 9
34865: PUSH
34866: LD_VAR 0 17
34870: PUSH
34871: LD_VAR 0 18
34875: PUSH
34876: LD_VAR 0 19
34880: PUSH
34881: LD_VAR 0 20
34885: PUSH
34886: LD_VAR 0 21
34890: PUSH
34891: LD_VAR 0 22
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: PUSH
34904: LD_VAR 0 4
34908: PUSH
34909: LD_INT 1
34911: PLUS
34912: ARRAY
34913: ST_TO_ADDR
34914: GO 34981
34916: LD_INT 3
34918: DOUBLE
34919: EQUAL
34920: IFTRUE 34924
34922: GO 34980
34924: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34925: LD_ADDR_VAR 0 9
34929: PUSH
34930: LD_VAR 0 23
34934: PUSH
34935: LD_VAR 0 24
34939: PUSH
34940: LD_VAR 0 25
34944: PUSH
34945: LD_VAR 0 26
34949: PUSH
34950: LD_VAR 0 27
34954: PUSH
34955: LD_VAR 0 28
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: PUSH
34968: LD_VAR 0 4
34972: PUSH
34973: LD_INT 1
34975: PLUS
34976: ARRAY
34977: ST_TO_ADDR
34978: GO 34981
34980: POP
34981: GO 35536
34983: LD_INT 2
34985: DOUBLE
34986: EQUAL
34987: IFTRUE 34997
34989: LD_INT 3
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35053
34997: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34998: LD_ADDR_VAR 0 9
35002: PUSH
35003: LD_VAR 0 29
35007: PUSH
35008: LD_VAR 0 30
35012: PUSH
35013: LD_VAR 0 31
35017: PUSH
35018: LD_VAR 0 32
35022: PUSH
35023: LD_VAR 0 33
35027: PUSH
35028: LD_VAR 0 34
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: PUSH
35041: LD_VAR 0 4
35045: PUSH
35046: LD_INT 1
35048: PLUS
35049: ARRAY
35050: ST_TO_ADDR
35051: GO 35536
35053: LD_INT 16
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35115
35059: LD_INT 17
35061: DOUBLE
35062: EQUAL
35063: IFTRUE 35115
35065: LD_INT 18
35067: DOUBLE
35068: EQUAL
35069: IFTRUE 35115
35071: LD_INT 19
35073: DOUBLE
35074: EQUAL
35075: IFTRUE 35115
35077: LD_INT 22
35079: DOUBLE
35080: EQUAL
35081: IFTRUE 35115
35083: LD_INT 20
35085: DOUBLE
35086: EQUAL
35087: IFTRUE 35115
35089: LD_INT 21
35091: DOUBLE
35092: EQUAL
35093: IFTRUE 35115
35095: LD_INT 23
35097: DOUBLE
35098: EQUAL
35099: IFTRUE 35115
35101: LD_INT 24
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35115
35107: LD_INT 25
35109: DOUBLE
35110: EQUAL
35111: IFTRUE 35115
35113: GO 35171
35115: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35116: LD_ADDR_VAR 0 9
35120: PUSH
35121: LD_VAR 0 35
35125: PUSH
35126: LD_VAR 0 36
35130: PUSH
35131: LD_VAR 0 37
35135: PUSH
35136: LD_VAR 0 38
35140: PUSH
35141: LD_VAR 0 39
35145: PUSH
35146: LD_VAR 0 40
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: PUSH
35159: LD_VAR 0 4
35163: PUSH
35164: LD_INT 1
35166: PLUS
35167: ARRAY
35168: ST_TO_ADDR
35169: GO 35536
35171: LD_INT 6
35173: DOUBLE
35174: EQUAL
35175: IFTRUE 35227
35177: LD_INT 7
35179: DOUBLE
35180: EQUAL
35181: IFTRUE 35227
35183: LD_INT 8
35185: DOUBLE
35186: EQUAL
35187: IFTRUE 35227
35189: LD_INT 13
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35227
35195: LD_INT 12
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35227
35201: LD_INT 15
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35227
35207: LD_INT 11
35209: DOUBLE
35210: EQUAL
35211: IFTRUE 35227
35213: LD_INT 14
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35227
35219: LD_INT 10
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35227
35225: GO 35283
35227: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35228: LD_ADDR_VAR 0 9
35232: PUSH
35233: LD_VAR 0 41
35237: PUSH
35238: LD_VAR 0 42
35242: PUSH
35243: LD_VAR 0 43
35247: PUSH
35248: LD_VAR 0 44
35252: PUSH
35253: LD_VAR 0 45
35257: PUSH
35258: LD_VAR 0 46
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: PUSH
35271: LD_VAR 0 4
35275: PUSH
35276: LD_INT 1
35278: PLUS
35279: ARRAY
35280: ST_TO_ADDR
35281: GO 35536
35283: LD_INT 36
35285: DOUBLE
35286: EQUAL
35287: IFTRUE 35291
35289: GO 35347
35291: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35292: LD_ADDR_VAR 0 9
35296: PUSH
35297: LD_VAR 0 47
35301: PUSH
35302: LD_VAR 0 48
35306: PUSH
35307: LD_VAR 0 49
35311: PUSH
35312: LD_VAR 0 50
35316: PUSH
35317: LD_VAR 0 51
35321: PUSH
35322: LD_VAR 0 52
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: PUSH
35335: LD_VAR 0 4
35339: PUSH
35340: LD_INT 1
35342: PLUS
35343: ARRAY
35344: ST_TO_ADDR
35345: GO 35536
35347: LD_INT 4
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35373
35353: LD_INT 5
35355: DOUBLE
35356: EQUAL
35357: IFTRUE 35373
35359: LD_INT 34
35361: DOUBLE
35362: EQUAL
35363: IFTRUE 35373
35365: LD_INT 37
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35373
35371: GO 35429
35373: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35374: LD_ADDR_VAR 0 9
35378: PUSH
35379: LD_VAR 0 53
35383: PUSH
35384: LD_VAR 0 54
35388: PUSH
35389: LD_VAR 0 55
35393: PUSH
35394: LD_VAR 0 56
35398: PUSH
35399: LD_VAR 0 57
35403: PUSH
35404: LD_VAR 0 58
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: PUSH
35417: LD_VAR 0 4
35421: PUSH
35422: LD_INT 1
35424: PLUS
35425: ARRAY
35426: ST_TO_ADDR
35427: GO 35536
35429: LD_INT 31
35431: DOUBLE
35432: EQUAL
35433: IFTRUE 35479
35435: LD_INT 32
35437: DOUBLE
35438: EQUAL
35439: IFTRUE 35479
35441: LD_INT 33
35443: DOUBLE
35444: EQUAL
35445: IFTRUE 35479
35447: LD_INT 27
35449: DOUBLE
35450: EQUAL
35451: IFTRUE 35479
35453: LD_INT 26
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35479
35459: LD_INT 28
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35479
35465: LD_INT 29
35467: DOUBLE
35468: EQUAL
35469: IFTRUE 35479
35471: LD_INT 30
35473: DOUBLE
35474: EQUAL
35475: IFTRUE 35479
35477: GO 35535
35479: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35480: LD_ADDR_VAR 0 9
35484: PUSH
35485: LD_VAR 0 59
35489: PUSH
35490: LD_VAR 0 60
35494: PUSH
35495: LD_VAR 0 61
35499: PUSH
35500: LD_VAR 0 62
35504: PUSH
35505: LD_VAR 0 63
35509: PUSH
35510: LD_VAR 0 64
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: PUSH
35523: LD_VAR 0 4
35527: PUSH
35528: LD_INT 1
35530: PLUS
35531: ARRAY
35532: ST_TO_ADDR
35533: GO 35536
35535: POP
// temp_list2 = [ ] ;
35536: LD_ADDR_VAR 0 10
35540: PUSH
35541: EMPTY
35542: ST_TO_ADDR
// for i in temp_list do
35543: LD_ADDR_VAR 0 8
35547: PUSH
35548: LD_VAR 0 9
35552: PUSH
35553: FOR_IN
35554: IFFALSE 35606
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35556: LD_ADDR_VAR 0 10
35560: PUSH
35561: LD_VAR 0 10
35565: PUSH
35566: LD_VAR 0 8
35570: PUSH
35571: LD_INT 1
35573: ARRAY
35574: PUSH
35575: LD_VAR 0 2
35579: PLUS
35580: PUSH
35581: LD_VAR 0 8
35585: PUSH
35586: LD_INT 2
35588: ARRAY
35589: PUSH
35590: LD_VAR 0 3
35594: PLUS
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: EMPTY
35601: LIST
35602: ADD
35603: ST_TO_ADDR
35604: GO 35553
35606: POP
35607: POP
// result = temp_list2 ;
35608: LD_ADDR_VAR 0 7
35612: PUSH
35613: LD_VAR 0 10
35617: ST_TO_ADDR
// end ;
35618: LD_VAR 0 7
35622: RET
// export function EnemyInRange ( unit , dist ) ; begin
35623: LD_INT 0
35625: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35626: LD_ADDR_VAR 0 3
35630: PUSH
35631: LD_VAR 0 1
35635: PPUSH
35636: CALL_OW 255
35640: PPUSH
35641: LD_VAR 0 1
35645: PPUSH
35646: CALL_OW 250
35650: PPUSH
35651: LD_VAR 0 1
35655: PPUSH
35656: CALL_OW 251
35660: PPUSH
35661: LD_VAR 0 2
35665: PPUSH
35666: CALL 8996 0 4
35670: PUSH
35671: LD_INT 4
35673: ARRAY
35674: ST_TO_ADDR
// end ;
35675: LD_VAR 0 3
35679: RET
// export function PlayerSeeMe ( unit ) ; begin
35680: LD_INT 0
35682: PPUSH
// result := See ( your_side , unit ) ;
35683: LD_ADDR_VAR 0 2
35687: PUSH
35688: LD_OWVAR 2
35692: PPUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: CALL_OW 292
35702: ST_TO_ADDR
// end ;
35703: LD_VAR 0 2
35707: RET
// export function ReverseDir ( unit ) ; begin
35708: LD_INT 0
35710: PPUSH
// if not unit then
35711: LD_VAR 0 1
35715: NOT
35716: IFFALSE 35720
// exit ;
35718: GO 35743
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35720: LD_ADDR_VAR 0 2
35724: PUSH
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL_OW 254
35734: PUSH
35735: LD_INT 3
35737: PLUS
35738: PUSH
35739: LD_INT 6
35741: MOD
35742: ST_TO_ADDR
// end ;
35743: LD_VAR 0 2
35747: RET
// export function ReverseArray ( array ) ; var i ; begin
35748: LD_INT 0
35750: PPUSH
35751: PPUSH
// if not array then
35752: LD_VAR 0 1
35756: NOT
35757: IFFALSE 35761
// exit ;
35759: GO 35816
// result := [ ] ;
35761: LD_ADDR_VAR 0 2
35765: PUSH
35766: EMPTY
35767: ST_TO_ADDR
// for i := array downto 1 do
35768: LD_ADDR_VAR 0 3
35772: PUSH
35773: DOUBLE
35774: LD_VAR 0 1
35778: INC
35779: ST_TO_ADDR
35780: LD_INT 1
35782: PUSH
35783: FOR_DOWNTO
35784: IFFALSE 35814
// result := Join ( result , array [ i ] ) ;
35786: LD_ADDR_VAR 0 2
35790: PUSH
35791: LD_VAR 0 2
35795: PPUSH
35796: LD_VAR 0 1
35800: PUSH
35801: LD_VAR 0 3
35805: ARRAY
35806: PPUSH
35807: CALL 40461 0 2
35811: ST_TO_ADDR
35812: GO 35783
35814: POP
35815: POP
// end ;
35816: LD_VAR 0 2
35820: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35821: LD_INT 0
35823: PPUSH
35824: PPUSH
35825: PPUSH
35826: PPUSH
35827: PPUSH
35828: PPUSH
// if not unit or not hexes then
35829: LD_VAR 0 1
35833: NOT
35834: PUSH
35835: LD_VAR 0 2
35839: NOT
35840: OR
35841: IFFALSE 35845
// exit ;
35843: GO 35968
// dist := 9999 ;
35845: LD_ADDR_VAR 0 5
35849: PUSH
35850: LD_INT 9999
35852: ST_TO_ADDR
// for i = 1 to hexes do
35853: LD_ADDR_VAR 0 4
35857: PUSH
35858: DOUBLE
35859: LD_INT 1
35861: DEC
35862: ST_TO_ADDR
35863: LD_VAR 0 2
35867: PUSH
35868: FOR_TO
35869: IFFALSE 35956
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35871: LD_ADDR_VAR 0 6
35875: PUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: LD_VAR 0 2
35885: PUSH
35886: LD_VAR 0 4
35890: ARRAY
35891: PUSH
35892: LD_INT 1
35894: ARRAY
35895: PPUSH
35896: LD_VAR 0 2
35900: PUSH
35901: LD_VAR 0 4
35905: ARRAY
35906: PUSH
35907: LD_INT 2
35909: ARRAY
35910: PPUSH
35911: CALL_OW 297
35915: ST_TO_ADDR
// if tdist < dist then
35916: LD_VAR 0 6
35920: PUSH
35921: LD_VAR 0 5
35925: LESS
35926: IFFALSE 35954
// begin hex := hexes [ i ] ;
35928: LD_ADDR_VAR 0 8
35932: PUSH
35933: LD_VAR 0 2
35937: PUSH
35938: LD_VAR 0 4
35942: ARRAY
35943: ST_TO_ADDR
// dist := tdist ;
35944: LD_ADDR_VAR 0 5
35948: PUSH
35949: LD_VAR 0 6
35953: ST_TO_ADDR
// end ; end ;
35954: GO 35868
35956: POP
35957: POP
// result := hex ;
35958: LD_ADDR_VAR 0 3
35962: PUSH
35963: LD_VAR 0 8
35967: ST_TO_ADDR
// end ;
35968: LD_VAR 0 3
35972: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35973: LD_INT 0
35975: PPUSH
35976: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35977: LD_VAR 0 1
35981: NOT
35982: PUSH
35983: LD_VAR 0 1
35987: PUSH
35988: LD_INT 21
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 23
36000: PUSH
36001: LD_INT 2
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PPUSH
36012: CALL_OW 69
36016: IN
36017: NOT
36018: OR
36019: IFFALSE 36023
// exit ;
36021: GO 36070
// for i = 1 to 3 do
36023: LD_ADDR_VAR 0 3
36027: PUSH
36028: DOUBLE
36029: LD_INT 1
36031: DEC
36032: ST_TO_ADDR
36033: LD_INT 3
36035: PUSH
36036: FOR_TO
36037: IFFALSE 36068
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36039: LD_VAR 0 1
36043: PPUSH
36044: CALL_OW 250
36048: PPUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 251
36058: PPUSH
36059: LD_INT 1
36061: PPUSH
36062: CALL_OW 453
36066: GO 36036
36068: POP
36069: POP
// end ;
36070: LD_VAR 0 2
36074: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36075: LD_INT 0
36077: PPUSH
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
// if not unit or not enemy_unit then
36083: LD_VAR 0 1
36087: NOT
36088: PUSH
36089: LD_VAR 0 2
36093: NOT
36094: OR
36095: IFFALSE 36099
// exit ;
36097: GO 36566
// if GetLives ( i ) < 250 then
36099: LD_VAR 0 4
36103: PPUSH
36104: CALL_OW 256
36108: PUSH
36109: LD_INT 250
36111: LESS
36112: IFFALSE 36125
// begin ComAutodestruct ( i ) ;
36114: LD_VAR 0 4
36118: PPUSH
36119: CALL 35973 0 1
// exit ;
36123: GO 36566
// end ; x := GetX ( enemy_unit ) ;
36125: LD_ADDR_VAR 0 7
36129: PUSH
36130: LD_VAR 0 2
36134: PPUSH
36135: CALL_OW 250
36139: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36140: LD_ADDR_VAR 0 8
36144: PUSH
36145: LD_VAR 0 2
36149: PPUSH
36150: CALL_OW 251
36154: ST_TO_ADDR
// if not x or not y then
36155: LD_VAR 0 7
36159: NOT
36160: PUSH
36161: LD_VAR 0 8
36165: NOT
36166: OR
36167: IFFALSE 36171
// exit ;
36169: GO 36566
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36171: LD_ADDR_VAR 0 6
36175: PUSH
36176: LD_VAR 0 7
36180: PPUSH
36181: LD_INT 0
36183: PPUSH
36184: LD_INT 4
36186: PPUSH
36187: CALL_OW 272
36191: PUSH
36192: LD_VAR 0 8
36196: PPUSH
36197: LD_INT 0
36199: PPUSH
36200: LD_INT 4
36202: PPUSH
36203: CALL_OW 273
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_VAR 0 7
36216: PPUSH
36217: LD_INT 1
36219: PPUSH
36220: LD_INT 4
36222: PPUSH
36223: CALL_OW 272
36227: PUSH
36228: LD_VAR 0 8
36232: PPUSH
36233: LD_INT 1
36235: PPUSH
36236: LD_INT 4
36238: PPUSH
36239: CALL_OW 273
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_VAR 0 7
36252: PPUSH
36253: LD_INT 2
36255: PPUSH
36256: LD_INT 4
36258: PPUSH
36259: CALL_OW 272
36263: PUSH
36264: LD_VAR 0 8
36268: PPUSH
36269: LD_INT 2
36271: PPUSH
36272: LD_INT 4
36274: PPUSH
36275: CALL_OW 273
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_VAR 0 7
36288: PPUSH
36289: LD_INT 3
36291: PPUSH
36292: LD_INT 4
36294: PPUSH
36295: CALL_OW 272
36299: PUSH
36300: LD_VAR 0 8
36304: PPUSH
36305: LD_INT 3
36307: PPUSH
36308: LD_INT 4
36310: PPUSH
36311: CALL_OW 273
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_VAR 0 7
36324: PPUSH
36325: LD_INT 4
36327: PPUSH
36328: LD_INT 4
36330: PPUSH
36331: CALL_OW 272
36335: PUSH
36336: LD_VAR 0 8
36340: PPUSH
36341: LD_INT 4
36343: PPUSH
36344: LD_INT 4
36346: PPUSH
36347: CALL_OW 273
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_VAR 0 7
36360: PPUSH
36361: LD_INT 5
36363: PPUSH
36364: LD_INT 4
36366: PPUSH
36367: CALL_OW 272
36371: PUSH
36372: LD_VAR 0 8
36376: PPUSH
36377: LD_INT 5
36379: PPUSH
36380: LD_INT 4
36382: PPUSH
36383: CALL_OW 273
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: ST_TO_ADDR
// for i = tmp downto 1 do
36400: LD_ADDR_VAR 0 4
36404: PUSH
36405: DOUBLE
36406: LD_VAR 0 6
36410: INC
36411: ST_TO_ADDR
36412: LD_INT 1
36414: PUSH
36415: FOR_DOWNTO
36416: IFFALSE 36517
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36418: LD_VAR 0 6
36422: PUSH
36423: LD_VAR 0 4
36427: ARRAY
36428: PUSH
36429: LD_INT 1
36431: ARRAY
36432: PPUSH
36433: LD_VAR 0 6
36437: PUSH
36438: LD_VAR 0 4
36442: ARRAY
36443: PUSH
36444: LD_INT 2
36446: ARRAY
36447: PPUSH
36448: CALL_OW 488
36452: NOT
36453: PUSH
36454: LD_VAR 0 6
36458: PUSH
36459: LD_VAR 0 4
36463: ARRAY
36464: PUSH
36465: LD_INT 1
36467: ARRAY
36468: PPUSH
36469: LD_VAR 0 6
36473: PUSH
36474: LD_VAR 0 4
36478: ARRAY
36479: PUSH
36480: LD_INT 2
36482: ARRAY
36483: PPUSH
36484: CALL_OW 428
36488: PUSH
36489: LD_INT 0
36491: NONEQUAL
36492: OR
36493: IFFALSE 36515
// tmp := Delete ( tmp , i ) ;
36495: LD_ADDR_VAR 0 6
36499: PUSH
36500: LD_VAR 0 6
36504: PPUSH
36505: LD_VAR 0 4
36509: PPUSH
36510: CALL_OW 3
36514: ST_TO_ADDR
36515: GO 36415
36517: POP
36518: POP
// j := GetClosestHex ( unit , tmp ) ;
36519: LD_ADDR_VAR 0 5
36523: PUSH
36524: LD_VAR 0 1
36528: PPUSH
36529: LD_VAR 0 6
36533: PPUSH
36534: CALL 35821 0 2
36538: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36539: LD_VAR 0 1
36543: PPUSH
36544: LD_VAR 0 5
36548: PUSH
36549: LD_INT 1
36551: ARRAY
36552: PPUSH
36553: LD_VAR 0 5
36557: PUSH
36558: LD_INT 2
36560: ARRAY
36561: PPUSH
36562: CALL_OW 111
// end ;
36566: LD_VAR 0 3
36570: RET
// export function PrepareApemanSoldier ( ) ; begin
36571: LD_INT 0
36573: PPUSH
// uc_nation := 0 ;
36574: LD_ADDR_OWVAR 21
36578: PUSH
36579: LD_INT 0
36581: ST_TO_ADDR
// hc_sex := sex_male ;
36582: LD_ADDR_OWVAR 27
36586: PUSH
36587: LD_INT 1
36589: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36590: LD_ADDR_OWVAR 28
36594: PUSH
36595: LD_INT 15
36597: ST_TO_ADDR
// hc_gallery :=  ;
36598: LD_ADDR_OWVAR 33
36602: PUSH
36603: LD_STRING 
36605: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36606: LD_ADDR_OWVAR 31
36610: PUSH
36611: LD_INT 0
36613: PPUSH
36614: LD_INT 3
36616: PPUSH
36617: CALL_OW 12
36621: PUSH
36622: LD_INT 0
36624: PPUSH
36625: LD_INT 3
36627: PPUSH
36628: CALL_OW 12
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: ST_TO_ADDR
// end ;
36645: LD_VAR 0 1
36649: RET
// export function PrepareApemanEngineer ( ) ; begin
36650: LD_INT 0
36652: PPUSH
// uc_nation := 0 ;
36653: LD_ADDR_OWVAR 21
36657: PUSH
36658: LD_INT 0
36660: ST_TO_ADDR
// hc_sex := sex_male ;
36661: LD_ADDR_OWVAR 27
36665: PUSH
36666: LD_INT 1
36668: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36669: LD_ADDR_OWVAR 28
36673: PUSH
36674: LD_INT 16
36676: ST_TO_ADDR
// hc_gallery :=  ;
36677: LD_ADDR_OWVAR 33
36681: PUSH
36682: LD_STRING 
36684: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36685: LD_ADDR_OWVAR 31
36689: PUSH
36690: LD_INT 0
36692: PPUSH
36693: LD_INT 3
36695: PPUSH
36696: CALL_OW 12
36700: PUSH
36701: LD_INT 0
36703: PPUSH
36704: LD_INT 3
36706: PPUSH
36707: CALL_OW 12
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: ST_TO_ADDR
// end ;
36724: LD_VAR 0 1
36728: RET
// export function PrepareApeman ( agressivity ) ; begin
36729: LD_INT 0
36731: PPUSH
// uc_side := 0 ;
36732: LD_ADDR_OWVAR 20
36736: PUSH
36737: LD_INT 0
36739: ST_TO_ADDR
// uc_nation := 0 ;
36740: LD_ADDR_OWVAR 21
36744: PUSH
36745: LD_INT 0
36747: ST_TO_ADDR
// hc_sex := sex_male ;
36748: LD_ADDR_OWVAR 27
36752: PUSH
36753: LD_INT 1
36755: ST_TO_ADDR
// hc_class := class_apeman ;
36756: LD_ADDR_OWVAR 28
36760: PUSH
36761: LD_INT 12
36763: ST_TO_ADDR
// hc_gallery :=  ;
36764: LD_ADDR_OWVAR 33
36768: PUSH
36769: LD_STRING 
36771: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36772: LD_ADDR_OWVAR 35
36776: PUSH
36777: LD_VAR 0 1
36781: NEG
36782: PPUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL_OW 12
36792: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36793: LD_ADDR_OWVAR 31
36797: PUSH
36798: LD_INT 0
36800: PPUSH
36801: LD_INT 3
36803: PPUSH
36804: CALL_OW 12
36808: PUSH
36809: LD_INT 0
36811: PPUSH
36812: LD_INT 3
36814: PPUSH
36815: CALL_OW 12
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: ST_TO_ADDR
// end ;
36832: LD_VAR 0 2
36836: RET
// export function PrepareTiger ( agressivity ) ; begin
36837: LD_INT 0
36839: PPUSH
// uc_side := 0 ;
36840: LD_ADDR_OWVAR 20
36844: PUSH
36845: LD_INT 0
36847: ST_TO_ADDR
// uc_nation := 0 ;
36848: LD_ADDR_OWVAR 21
36852: PUSH
36853: LD_INT 0
36855: ST_TO_ADDR
// hc_class := class_tiger ;
36856: LD_ADDR_OWVAR 28
36860: PUSH
36861: LD_INT 14
36863: ST_TO_ADDR
// hc_gallery :=  ;
36864: LD_ADDR_OWVAR 33
36868: PUSH
36869: LD_STRING 
36871: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36872: LD_ADDR_OWVAR 35
36876: PUSH
36877: LD_VAR 0 1
36881: NEG
36882: PPUSH
36883: LD_VAR 0 1
36887: PPUSH
36888: CALL_OW 12
36892: ST_TO_ADDR
// end ;
36893: LD_VAR 0 2
36897: RET
// export function PrepareEnchidna ( ) ; begin
36898: LD_INT 0
36900: PPUSH
// uc_side := 0 ;
36901: LD_ADDR_OWVAR 20
36905: PUSH
36906: LD_INT 0
36908: ST_TO_ADDR
// uc_nation := 0 ;
36909: LD_ADDR_OWVAR 21
36913: PUSH
36914: LD_INT 0
36916: ST_TO_ADDR
// hc_class := class_baggie ;
36917: LD_ADDR_OWVAR 28
36921: PUSH
36922: LD_INT 13
36924: ST_TO_ADDR
// hc_gallery :=  ;
36925: LD_ADDR_OWVAR 33
36929: PUSH
36930: LD_STRING 
36932: ST_TO_ADDR
// end ;
36933: LD_VAR 0 1
36937: RET
// export function PrepareFrog ( ) ; begin
36938: LD_INT 0
36940: PPUSH
// uc_side := 0 ;
36941: LD_ADDR_OWVAR 20
36945: PUSH
36946: LD_INT 0
36948: ST_TO_ADDR
// uc_nation := 0 ;
36949: LD_ADDR_OWVAR 21
36953: PUSH
36954: LD_INT 0
36956: ST_TO_ADDR
// hc_class := class_frog ;
36957: LD_ADDR_OWVAR 28
36961: PUSH
36962: LD_INT 19
36964: ST_TO_ADDR
// hc_gallery :=  ;
36965: LD_ADDR_OWVAR 33
36969: PUSH
36970: LD_STRING 
36972: ST_TO_ADDR
// end ;
36973: LD_VAR 0 1
36977: RET
// export function PrepareFish ( ) ; begin
36978: LD_INT 0
36980: PPUSH
// uc_side := 0 ;
36981: LD_ADDR_OWVAR 20
36985: PUSH
36986: LD_INT 0
36988: ST_TO_ADDR
// uc_nation := 0 ;
36989: LD_ADDR_OWVAR 21
36993: PUSH
36994: LD_INT 0
36996: ST_TO_ADDR
// hc_class := class_fish ;
36997: LD_ADDR_OWVAR 28
37001: PUSH
37002: LD_INT 20
37004: ST_TO_ADDR
// hc_gallery :=  ;
37005: LD_ADDR_OWVAR 33
37009: PUSH
37010: LD_STRING 
37012: ST_TO_ADDR
// end ;
37013: LD_VAR 0 1
37017: RET
// export function PrepareBird ( ) ; begin
37018: LD_INT 0
37020: PPUSH
// uc_side := 0 ;
37021: LD_ADDR_OWVAR 20
37025: PUSH
37026: LD_INT 0
37028: ST_TO_ADDR
// uc_nation := 0 ;
37029: LD_ADDR_OWVAR 21
37033: PUSH
37034: LD_INT 0
37036: ST_TO_ADDR
// hc_class := class_phororhacos ;
37037: LD_ADDR_OWVAR 28
37041: PUSH
37042: LD_INT 18
37044: ST_TO_ADDR
// hc_gallery :=  ;
37045: LD_ADDR_OWVAR 33
37049: PUSH
37050: LD_STRING 
37052: ST_TO_ADDR
// end ;
37053: LD_VAR 0 1
37057: RET
// export function PrepareHorse ( ) ; begin
37058: LD_INT 0
37060: PPUSH
// uc_side := 0 ;
37061: LD_ADDR_OWVAR 20
37065: PUSH
37066: LD_INT 0
37068: ST_TO_ADDR
// uc_nation := 0 ;
37069: LD_ADDR_OWVAR 21
37073: PUSH
37074: LD_INT 0
37076: ST_TO_ADDR
// hc_class := class_horse ;
37077: LD_ADDR_OWVAR 28
37081: PUSH
37082: LD_INT 21
37084: ST_TO_ADDR
// hc_gallery :=  ;
37085: LD_ADDR_OWVAR 33
37089: PUSH
37090: LD_STRING 
37092: ST_TO_ADDR
// end ;
37093: LD_VAR 0 1
37097: RET
// export function PrepareMastodont ( ) ; begin
37098: LD_INT 0
37100: PPUSH
// uc_side := 0 ;
37101: LD_ADDR_OWVAR 20
37105: PUSH
37106: LD_INT 0
37108: ST_TO_ADDR
// uc_nation := 0 ;
37109: LD_ADDR_OWVAR 21
37113: PUSH
37114: LD_INT 0
37116: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37117: LD_ADDR_OWVAR 37
37121: PUSH
37122: LD_INT 31
37124: ST_TO_ADDR
// vc_control := control_rider ;
37125: LD_ADDR_OWVAR 38
37129: PUSH
37130: LD_INT 4
37132: ST_TO_ADDR
// end ;
37133: LD_VAR 0 1
37137: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37138: LD_INT 0
37140: PPUSH
37141: PPUSH
37142: PPUSH
// uc_side = 0 ;
37143: LD_ADDR_OWVAR 20
37147: PUSH
37148: LD_INT 0
37150: ST_TO_ADDR
// uc_nation = 0 ;
37151: LD_ADDR_OWVAR 21
37155: PUSH
37156: LD_INT 0
37158: ST_TO_ADDR
// InitHc_All ( ) ;
37159: CALL_OW 584
// InitVc ;
37163: CALL_OW 20
// if mastodonts then
37167: LD_VAR 0 6
37171: IFFALSE 37238
// for i = 1 to mastodonts do
37173: LD_ADDR_VAR 0 11
37177: PUSH
37178: DOUBLE
37179: LD_INT 1
37181: DEC
37182: ST_TO_ADDR
37183: LD_VAR 0 6
37187: PUSH
37188: FOR_TO
37189: IFFALSE 37236
// begin vc_chassis := 31 ;
37191: LD_ADDR_OWVAR 37
37195: PUSH
37196: LD_INT 31
37198: ST_TO_ADDR
// vc_control := control_rider ;
37199: LD_ADDR_OWVAR 38
37203: PUSH
37204: LD_INT 4
37206: ST_TO_ADDR
// animal := CreateVehicle ;
37207: LD_ADDR_VAR 0 12
37211: PUSH
37212: CALL_OW 45
37216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37217: LD_VAR 0 12
37221: PPUSH
37222: LD_VAR 0 8
37226: PPUSH
37227: LD_INT 0
37229: PPUSH
37230: CALL 39366 0 3
// end ;
37234: GO 37188
37236: POP
37237: POP
// if horses then
37238: LD_VAR 0 5
37242: IFFALSE 37309
// for i = 1 to horses do
37244: LD_ADDR_VAR 0 11
37248: PUSH
37249: DOUBLE
37250: LD_INT 1
37252: DEC
37253: ST_TO_ADDR
37254: LD_VAR 0 5
37258: PUSH
37259: FOR_TO
37260: IFFALSE 37307
// begin hc_class := 21 ;
37262: LD_ADDR_OWVAR 28
37266: PUSH
37267: LD_INT 21
37269: ST_TO_ADDR
// hc_gallery :=  ;
37270: LD_ADDR_OWVAR 33
37274: PUSH
37275: LD_STRING 
37277: ST_TO_ADDR
// animal := CreateHuman ;
37278: LD_ADDR_VAR 0 12
37282: PUSH
37283: CALL_OW 44
37287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37288: LD_VAR 0 12
37292: PPUSH
37293: LD_VAR 0 8
37297: PPUSH
37298: LD_INT 0
37300: PPUSH
37301: CALL 39366 0 3
// end ;
37305: GO 37259
37307: POP
37308: POP
// if birds then
37309: LD_VAR 0 1
37313: IFFALSE 37380
// for i = 1 to birds do
37315: LD_ADDR_VAR 0 11
37319: PUSH
37320: DOUBLE
37321: LD_INT 1
37323: DEC
37324: ST_TO_ADDR
37325: LD_VAR 0 1
37329: PUSH
37330: FOR_TO
37331: IFFALSE 37378
// begin hc_class := 18 ;
37333: LD_ADDR_OWVAR 28
37337: PUSH
37338: LD_INT 18
37340: ST_TO_ADDR
// hc_gallery =  ;
37341: LD_ADDR_OWVAR 33
37345: PUSH
37346: LD_STRING 
37348: ST_TO_ADDR
// animal := CreateHuman ;
37349: LD_ADDR_VAR 0 12
37353: PUSH
37354: CALL_OW 44
37358: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37359: LD_VAR 0 12
37363: PPUSH
37364: LD_VAR 0 8
37368: PPUSH
37369: LD_INT 0
37371: PPUSH
37372: CALL 39366 0 3
// end ;
37376: GO 37330
37378: POP
37379: POP
// if tigers then
37380: LD_VAR 0 2
37384: IFFALSE 37468
// for i = 1 to tigers do
37386: LD_ADDR_VAR 0 11
37390: PUSH
37391: DOUBLE
37392: LD_INT 1
37394: DEC
37395: ST_TO_ADDR
37396: LD_VAR 0 2
37400: PUSH
37401: FOR_TO
37402: IFFALSE 37466
// begin hc_class = class_tiger ;
37404: LD_ADDR_OWVAR 28
37408: PUSH
37409: LD_INT 14
37411: ST_TO_ADDR
// hc_gallery =  ;
37412: LD_ADDR_OWVAR 33
37416: PUSH
37417: LD_STRING 
37419: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37420: LD_ADDR_OWVAR 35
37424: PUSH
37425: LD_INT 7
37427: NEG
37428: PPUSH
37429: LD_INT 7
37431: PPUSH
37432: CALL_OW 12
37436: ST_TO_ADDR
// animal := CreateHuman ;
37437: LD_ADDR_VAR 0 12
37441: PUSH
37442: CALL_OW 44
37446: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37447: LD_VAR 0 12
37451: PPUSH
37452: LD_VAR 0 8
37456: PPUSH
37457: LD_INT 0
37459: PPUSH
37460: CALL 39366 0 3
// end ;
37464: GO 37401
37466: POP
37467: POP
// if apemans then
37468: LD_VAR 0 3
37472: IFFALSE 37595
// for i = 1 to apemans do
37474: LD_ADDR_VAR 0 11
37478: PUSH
37479: DOUBLE
37480: LD_INT 1
37482: DEC
37483: ST_TO_ADDR
37484: LD_VAR 0 3
37488: PUSH
37489: FOR_TO
37490: IFFALSE 37593
// begin hc_class = class_apeman ;
37492: LD_ADDR_OWVAR 28
37496: PUSH
37497: LD_INT 12
37499: ST_TO_ADDR
// hc_gallery =  ;
37500: LD_ADDR_OWVAR 33
37504: PUSH
37505: LD_STRING 
37507: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37508: LD_ADDR_OWVAR 35
37512: PUSH
37513: LD_INT 2
37515: NEG
37516: PPUSH
37517: LD_INT 2
37519: PPUSH
37520: CALL_OW 12
37524: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37525: LD_ADDR_OWVAR 31
37529: PUSH
37530: LD_INT 1
37532: PPUSH
37533: LD_INT 3
37535: PPUSH
37536: CALL_OW 12
37540: PUSH
37541: LD_INT 1
37543: PPUSH
37544: LD_INT 3
37546: PPUSH
37547: CALL_OW 12
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: ST_TO_ADDR
// animal := CreateHuman ;
37564: LD_ADDR_VAR 0 12
37568: PUSH
37569: CALL_OW 44
37573: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37574: LD_VAR 0 12
37578: PPUSH
37579: LD_VAR 0 8
37583: PPUSH
37584: LD_INT 0
37586: PPUSH
37587: CALL 39366 0 3
// end ;
37591: GO 37489
37593: POP
37594: POP
// if enchidnas then
37595: LD_VAR 0 4
37599: IFFALSE 37666
// for i = 1 to enchidnas do
37601: LD_ADDR_VAR 0 11
37605: PUSH
37606: DOUBLE
37607: LD_INT 1
37609: DEC
37610: ST_TO_ADDR
37611: LD_VAR 0 4
37615: PUSH
37616: FOR_TO
37617: IFFALSE 37664
// begin hc_class = 13 ;
37619: LD_ADDR_OWVAR 28
37623: PUSH
37624: LD_INT 13
37626: ST_TO_ADDR
// hc_gallery =  ;
37627: LD_ADDR_OWVAR 33
37631: PUSH
37632: LD_STRING 
37634: ST_TO_ADDR
// animal := CreateHuman ;
37635: LD_ADDR_VAR 0 12
37639: PUSH
37640: CALL_OW 44
37644: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37645: LD_VAR 0 12
37649: PPUSH
37650: LD_VAR 0 8
37654: PPUSH
37655: LD_INT 0
37657: PPUSH
37658: CALL 39366 0 3
// end ;
37662: GO 37616
37664: POP
37665: POP
// if fishes then
37666: LD_VAR 0 7
37670: IFFALSE 37737
// for i = 1 to fishes do
37672: LD_ADDR_VAR 0 11
37676: PUSH
37677: DOUBLE
37678: LD_INT 1
37680: DEC
37681: ST_TO_ADDR
37682: LD_VAR 0 7
37686: PUSH
37687: FOR_TO
37688: IFFALSE 37735
// begin hc_class = 20 ;
37690: LD_ADDR_OWVAR 28
37694: PUSH
37695: LD_INT 20
37697: ST_TO_ADDR
// hc_gallery =  ;
37698: LD_ADDR_OWVAR 33
37702: PUSH
37703: LD_STRING 
37705: ST_TO_ADDR
// animal := CreateHuman ;
37706: LD_ADDR_VAR 0 12
37710: PUSH
37711: CALL_OW 44
37715: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37716: LD_VAR 0 12
37720: PPUSH
37721: LD_VAR 0 9
37725: PPUSH
37726: LD_INT 0
37728: PPUSH
37729: CALL 39366 0 3
// end ;
37733: GO 37687
37735: POP
37736: POP
// end ;
37737: LD_VAR 0 10
37741: RET
// export function WantHeal ( sci , unit ) ; begin
37742: LD_INT 0
37744: PPUSH
// if GetTaskList ( sci ) > 0 then
37745: LD_VAR 0 1
37749: PPUSH
37750: CALL_OW 437
37754: PUSH
37755: LD_INT 0
37757: GREATER
37758: IFFALSE 37828
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37760: LD_VAR 0 1
37764: PPUSH
37765: CALL_OW 437
37769: PUSH
37770: LD_INT 1
37772: ARRAY
37773: PUSH
37774: LD_INT 1
37776: ARRAY
37777: PUSH
37778: LD_STRING l
37780: EQUAL
37781: PUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: CALL_OW 437
37791: PUSH
37792: LD_INT 1
37794: ARRAY
37795: PUSH
37796: LD_INT 4
37798: ARRAY
37799: PUSH
37800: LD_VAR 0 2
37804: EQUAL
37805: AND
37806: IFFALSE 37818
// result := true else
37808: LD_ADDR_VAR 0 3
37812: PUSH
37813: LD_INT 1
37815: ST_TO_ADDR
37816: GO 37826
// result := false ;
37818: LD_ADDR_VAR 0 3
37822: PUSH
37823: LD_INT 0
37825: ST_TO_ADDR
// end else
37826: GO 37836
// result := false ;
37828: LD_ADDR_VAR 0 3
37832: PUSH
37833: LD_INT 0
37835: ST_TO_ADDR
// end ;
37836: LD_VAR 0 3
37840: RET
// export function HealTarget ( sci ) ; begin
37841: LD_INT 0
37843: PPUSH
// if not sci then
37844: LD_VAR 0 1
37848: NOT
37849: IFFALSE 37853
// exit ;
37851: GO 37918
// result := 0 ;
37853: LD_ADDR_VAR 0 2
37857: PUSH
37858: LD_INT 0
37860: ST_TO_ADDR
// if GetTaskList ( sci ) then
37861: LD_VAR 0 1
37865: PPUSH
37866: CALL_OW 437
37870: IFFALSE 37918
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37872: LD_VAR 0 1
37876: PPUSH
37877: CALL_OW 437
37881: PUSH
37882: LD_INT 1
37884: ARRAY
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: PUSH
37890: LD_STRING l
37892: EQUAL
37893: IFFALSE 37918
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37895: LD_ADDR_VAR 0 2
37899: PUSH
37900: LD_VAR 0 1
37904: PPUSH
37905: CALL_OW 437
37909: PUSH
37910: LD_INT 1
37912: ARRAY
37913: PUSH
37914: LD_INT 4
37916: ARRAY
37917: ST_TO_ADDR
// end ;
37918: LD_VAR 0 2
37922: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37923: LD_INT 0
37925: PPUSH
37926: PPUSH
37927: PPUSH
37928: PPUSH
// if not base_units then
37929: LD_VAR 0 1
37933: NOT
37934: IFFALSE 37938
// exit ;
37936: GO 38025
// result := false ;
37938: LD_ADDR_VAR 0 2
37942: PUSH
37943: LD_INT 0
37945: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37946: LD_ADDR_VAR 0 5
37950: PUSH
37951: LD_VAR 0 1
37955: PPUSH
37956: LD_INT 21
37958: PUSH
37959: LD_INT 3
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PPUSH
37966: CALL_OW 72
37970: ST_TO_ADDR
// if not tmp then
37971: LD_VAR 0 5
37975: NOT
37976: IFFALSE 37980
// exit ;
37978: GO 38025
// for i in tmp do
37980: LD_ADDR_VAR 0 3
37984: PUSH
37985: LD_VAR 0 5
37989: PUSH
37990: FOR_IN
37991: IFFALSE 38023
// begin result := EnemyInRange ( i , 22 ) ;
37993: LD_ADDR_VAR 0 2
37997: PUSH
37998: LD_VAR 0 3
38002: PPUSH
38003: LD_INT 22
38005: PPUSH
38006: CALL 35623 0 2
38010: ST_TO_ADDR
// if result then
38011: LD_VAR 0 2
38015: IFFALSE 38021
// exit ;
38017: POP
38018: POP
38019: GO 38025
// end ;
38021: GO 37990
38023: POP
38024: POP
// end ;
38025: LD_VAR 0 2
38029: RET
// export function FilterByTag ( units , tag ) ; begin
38030: LD_INT 0
38032: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38033: LD_ADDR_VAR 0 3
38037: PUSH
38038: LD_VAR 0 1
38042: PPUSH
38043: LD_INT 120
38045: PUSH
38046: LD_VAR 0 2
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PPUSH
38055: CALL_OW 72
38059: ST_TO_ADDR
// end ;
38060: LD_VAR 0 3
38064: RET
// export function IsDriver ( un ) ; begin
38065: LD_INT 0
38067: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38068: LD_ADDR_VAR 0 2
38072: PUSH
38073: LD_VAR 0 1
38077: PUSH
38078: LD_INT 55
38080: PUSH
38081: EMPTY
38082: LIST
38083: PPUSH
38084: CALL_OW 69
38088: IN
38089: ST_TO_ADDR
// end ;
38090: LD_VAR 0 2
38094: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38095: LD_INT 0
38097: PPUSH
38098: PPUSH
// list := [ ] ;
38099: LD_ADDR_VAR 0 5
38103: PUSH
38104: EMPTY
38105: ST_TO_ADDR
// case d of 0 :
38106: LD_VAR 0 3
38110: PUSH
38111: LD_INT 0
38113: DOUBLE
38114: EQUAL
38115: IFTRUE 38119
38117: GO 38252
38119: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38120: LD_ADDR_VAR 0 5
38124: PUSH
38125: LD_VAR 0 1
38129: PUSH
38130: LD_INT 4
38132: MINUS
38133: PUSH
38134: LD_VAR 0 2
38138: PUSH
38139: LD_INT 4
38141: MINUS
38142: PUSH
38143: LD_INT 2
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: PUSH
38151: LD_VAR 0 1
38155: PUSH
38156: LD_INT 3
38158: MINUS
38159: PUSH
38160: LD_VAR 0 2
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: PUSH
38173: LD_VAR 0 1
38177: PUSH
38178: LD_INT 4
38180: PLUS
38181: PUSH
38182: LD_VAR 0 2
38186: PUSH
38187: LD_INT 4
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: PUSH
38195: LD_VAR 0 1
38199: PUSH
38200: LD_INT 3
38202: PLUS
38203: PUSH
38204: LD_VAR 0 2
38208: PUSH
38209: LD_INT 3
38211: PLUS
38212: PUSH
38213: LD_INT 5
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: LIST
38220: PUSH
38221: LD_VAR 0 1
38225: PUSH
38226: LD_VAR 0 2
38230: PUSH
38231: LD_INT 4
38233: PLUS
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: ST_TO_ADDR
// end ; 1 :
38250: GO 38950
38252: LD_INT 1
38254: DOUBLE
38255: EQUAL
38256: IFTRUE 38260
38258: GO 38393
38260: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38261: LD_ADDR_VAR 0 5
38265: PUSH
38266: LD_VAR 0 1
38270: PUSH
38271: LD_VAR 0 2
38275: PUSH
38276: LD_INT 4
38278: MINUS
38279: PUSH
38280: LD_INT 3
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: PUSH
38288: LD_VAR 0 1
38292: PUSH
38293: LD_INT 3
38295: MINUS
38296: PUSH
38297: LD_VAR 0 2
38301: PUSH
38302: LD_INT 3
38304: MINUS
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: PUSH
38314: LD_VAR 0 1
38318: PUSH
38319: LD_INT 4
38321: MINUS
38322: PUSH
38323: LD_VAR 0 2
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: LIST
38335: PUSH
38336: LD_VAR 0 1
38340: PUSH
38341: LD_VAR 0 2
38345: PUSH
38346: LD_INT 3
38348: PLUS
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: LIST
38357: PUSH
38358: LD_VAR 0 1
38362: PUSH
38363: LD_INT 4
38365: PLUS
38366: PUSH
38367: LD_VAR 0 2
38371: PUSH
38372: LD_INT 4
38374: PLUS
38375: PUSH
38376: LD_INT 5
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: ST_TO_ADDR
// end ; 2 :
38391: GO 38950
38393: LD_INT 2
38395: DOUBLE
38396: EQUAL
38397: IFTRUE 38401
38399: GO 38530
38401: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38402: LD_ADDR_VAR 0 5
38406: PUSH
38407: LD_VAR 0 1
38411: PUSH
38412: LD_VAR 0 2
38416: PUSH
38417: LD_INT 3
38419: MINUS
38420: PUSH
38421: LD_INT 3
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: LIST
38428: PUSH
38429: LD_VAR 0 1
38433: PUSH
38434: LD_INT 4
38436: PLUS
38437: PUSH
38438: LD_VAR 0 2
38442: PUSH
38443: LD_INT 4
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: PUSH
38451: LD_VAR 0 1
38455: PUSH
38456: LD_VAR 0 2
38460: PUSH
38461: LD_INT 4
38463: PLUS
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: PUSH
38473: LD_VAR 0 1
38477: PUSH
38478: LD_INT 3
38480: MINUS
38481: PUSH
38482: LD_VAR 0 2
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: LIST
38494: PUSH
38495: LD_VAR 0 1
38499: PUSH
38500: LD_INT 4
38502: MINUS
38503: PUSH
38504: LD_VAR 0 2
38508: PUSH
38509: LD_INT 4
38511: MINUS
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: LIST
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: ST_TO_ADDR
// end ; 3 :
38528: GO 38950
38530: LD_INT 3
38532: DOUBLE
38533: EQUAL
38534: IFTRUE 38538
38536: GO 38671
38538: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38539: LD_ADDR_VAR 0 5
38543: PUSH
38544: LD_VAR 0 1
38548: PUSH
38549: LD_INT 3
38551: PLUS
38552: PUSH
38553: LD_VAR 0 2
38557: PUSH
38558: LD_INT 4
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: PUSH
38566: LD_VAR 0 1
38570: PUSH
38571: LD_INT 4
38573: PLUS
38574: PUSH
38575: LD_VAR 0 2
38579: PUSH
38580: LD_INT 4
38582: PLUS
38583: PUSH
38584: LD_INT 5
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: PUSH
38592: LD_VAR 0 1
38596: PUSH
38597: LD_INT 4
38599: MINUS
38600: PUSH
38601: LD_VAR 0 2
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: PUSH
38614: LD_VAR 0 1
38618: PUSH
38619: LD_VAR 0 2
38623: PUSH
38624: LD_INT 4
38626: MINUS
38627: PUSH
38628: LD_INT 3
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: PUSH
38636: LD_VAR 0 1
38640: PUSH
38641: LD_INT 3
38643: MINUS
38644: PUSH
38645: LD_VAR 0 2
38649: PUSH
38650: LD_INT 3
38652: MINUS
38653: PUSH
38654: LD_INT 2
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: ST_TO_ADDR
// end ; 4 :
38669: GO 38950
38671: LD_INT 4
38673: DOUBLE
38674: EQUAL
38675: IFTRUE 38679
38677: GO 38812
38679: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38680: LD_ADDR_VAR 0 5
38684: PUSH
38685: LD_VAR 0 1
38689: PUSH
38690: LD_VAR 0 2
38694: PUSH
38695: LD_INT 4
38697: PLUS
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: PUSH
38707: LD_VAR 0 1
38711: PUSH
38712: LD_INT 3
38714: PLUS
38715: PUSH
38716: LD_VAR 0 2
38720: PUSH
38721: LD_INT 3
38723: PLUS
38724: PUSH
38725: LD_INT 5
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: PUSH
38733: LD_VAR 0 1
38737: PUSH
38738: LD_INT 4
38740: PLUS
38741: PUSH
38742: LD_VAR 0 2
38746: PUSH
38747: LD_INT 4
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: PUSH
38755: LD_VAR 0 1
38759: PUSH
38760: LD_VAR 0 2
38764: PUSH
38765: LD_INT 3
38767: MINUS
38768: PUSH
38769: LD_INT 3
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: PUSH
38777: LD_VAR 0 1
38781: PUSH
38782: LD_INT 4
38784: MINUS
38785: PUSH
38786: LD_VAR 0 2
38790: PUSH
38791: LD_INT 4
38793: MINUS
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: ST_TO_ADDR
// end ; 5 :
38810: GO 38950
38812: LD_INT 5
38814: DOUBLE
38815: EQUAL
38816: IFTRUE 38820
38818: GO 38949
38820: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38821: LD_ADDR_VAR 0 5
38825: PUSH
38826: LD_VAR 0 1
38830: PUSH
38831: LD_INT 4
38833: MINUS
38834: PUSH
38835: LD_VAR 0 2
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: PUSH
38848: LD_VAR 0 1
38852: PUSH
38853: LD_VAR 0 2
38857: PUSH
38858: LD_INT 4
38860: MINUS
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: LIST
38869: PUSH
38870: LD_VAR 0 1
38874: PUSH
38875: LD_INT 4
38877: PLUS
38878: PUSH
38879: LD_VAR 0 2
38883: PUSH
38884: LD_INT 4
38886: PLUS
38887: PUSH
38888: LD_INT 5
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: PUSH
38896: LD_VAR 0 1
38900: PUSH
38901: LD_INT 3
38903: PLUS
38904: PUSH
38905: LD_VAR 0 2
38909: PUSH
38910: LD_INT 4
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: PUSH
38918: LD_VAR 0 1
38922: PUSH
38923: LD_VAR 0 2
38927: PUSH
38928: LD_INT 3
38930: PLUS
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: ST_TO_ADDR
// end ; end ;
38947: GO 38950
38949: POP
// result := list ;
38950: LD_ADDR_VAR 0 4
38954: PUSH
38955: LD_VAR 0 5
38959: ST_TO_ADDR
// end ;
38960: LD_VAR 0 4
38964: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38965: LD_INT 0
38967: PPUSH
38968: PPUSH
38969: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38970: LD_VAR 0 1
38974: NOT
38975: PUSH
38976: LD_VAR 0 2
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: LD_INT 3
38989: PUSH
38990: LD_INT 4
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: IN
38999: NOT
39000: OR
39001: IFFALSE 39005
// exit ;
39003: GO 39088
// tmp := [ ] ;
39005: LD_ADDR_VAR 0 5
39009: PUSH
39010: EMPTY
39011: ST_TO_ADDR
// for i in units do
39012: LD_ADDR_VAR 0 4
39016: PUSH
39017: LD_VAR 0 1
39021: PUSH
39022: FOR_IN
39023: IFFALSE 39057
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39025: LD_ADDR_VAR 0 5
39029: PUSH
39030: LD_VAR 0 5
39034: PPUSH
39035: LD_VAR 0 4
39039: PPUSH
39040: LD_VAR 0 2
39044: PPUSH
39045: CALL_OW 259
39049: PPUSH
39050: CALL 40461 0 2
39054: ST_TO_ADDR
39055: GO 39022
39057: POP
39058: POP
// if not tmp then
39059: LD_VAR 0 5
39063: NOT
39064: IFFALSE 39068
// exit ;
39066: GO 39088
// result := SortListByListDesc ( units , tmp ) ;
39068: LD_ADDR_VAR 0 3
39072: PUSH
39073: LD_VAR 0 1
39077: PPUSH
39078: LD_VAR 0 5
39082: PPUSH
39083: CALL_OW 77
39087: ST_TO_ADDR
// end ;
39088: LD_VAR 0 3
39092: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39093: LD_INT 0
39095: PPUSH
39096: PPUSH
39097: PPUSH
// result := false ;
39098: LD_ADDR_VAR 0 3
39102: PUSH
39103: LD_INT 0
39105: ST_TO_ADDR
// if not building then
39106: LD_VAR 0 2
39110: NOT
39111: IFFALSE 39115
// exit ;
39113: GO 39253
// x := GetX ( building ) ;
39115: LD_ADDR_VAR 0 4
39119: PUSH
39120: LD_VAR 0 2
39124: PPUSH
39125: CALL_OW 250
39129: ST_TO_ADDR
// y := GetY ( building ) ;
39130: LD_ADDR_VAR 0 5
39134: PUSH
39135: LD_VAR 0 2
39139: PPUSH
39140: CALL_OW 251
39144: ST_TO_ADDR
// if not x or not y then
39145: LD_VAR 0 4
39149: NOT
39150: PUSH
39151: LD_VAR 0 5
39155: NOT
39156: OR
39157: IFFALSE 39161
// exit ;
39159: GO 39253
// if GetTaskList ( unit ) then
39161: LD_VAR 0 1
39165: PPUSH
39166: CALL_OW 437
39170: IFFALSE 39253
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39172: LD_STRING e
39174: PUSH
39175: LD_VAR 0 1
39179: PPUSH
39180: CALL_OW 437
39184: PUSH
39185: LD_INT 1
39187: ARRAY
39188: PUSH
39189: LD_INT 1
39191: ARRAY
39192: EQUAL
39193: PUSH
39194: LD_VAR 0 4
39198: PUSH
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 437
39208: PUSH
39209: LD_INT 1
39211: ARRAY
39212: PUSH
39213: LD_INT 2
39215: ARRAY
39216: EQUAL
39217: AND
39218: PUSH
39219: LD_VAR 0 5
39223: PUSH
39224: LD_VAR 0 1
39228: PPUSH
39229: CALL_OW 437
39233: PUSH
39234: LD_INT 1
39236: ARRAY
39237: PUSH
39238: LD_INT 3
39240: ARRAY
39241: EQUAL
39242: AND
39243: IFFALSE 39253
// result := true end ;
39245: LD_ADDR_VAR 0 3
39249: PUSH
39250: LD_INT 1
39252: ST_TO_ADDR
// end ;
39253: LD_VAR 0 3
39257: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39258: LD_INT 0
39260: PPUSH
// result := false ;
39261: LD_ADDR_VAR 0 4
39265: PUSH
39266: LD_INT 0
39268: ST_TO_ADDR
// if GetTaskList ( unit ) then
39269: LD_VAR 0 1
39273: PPUSH
39274: CALL_OW 437
39278: IFFALSE 39361
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39280: LD_STRING M
39282: PUSH
39283: LD_VAR 0 1
39287: PPUSH
39288: CALL_OW 437
39292: PUSH
39293: LD_INT 1
39295: ARRAY
39296: PUSH
39297: LD_INT 1
39299: ARRAY
39300: EQUAL
39301: PUSH
39302: LD_VAR 0 2
39306: PUSH
39307: LD_VAR 0 1
39311: PPUSH
39312: CALL_OW 437
39316: PUSH
39317: LD_INT 1
39319: ARRAY
39320: PUSH
39321: LD_INT 2
39323: ARRAY
39324: EQUAL
39325: AND
39326: PUSH
39327: LD_VAR 0 3
39331: PUSH
39332: LD_VAR 0 1
39336: PPUSH
39337: CALL_OW 437
39341: PUSH
39342: LD_INT 1
39344: ARRAY
39345: PUSH
39346: LD_INT 3
39348: ARRAY
39349: EQUAL
39350: AND
39351: IFFALSE 39361
// result := true ;
39353: LD_ADDR_VAR 0 4
39357: PUSH
39358: LD_INT 1
39360: ST_TO_ADDR
// end ; end ;
39361: LD_VAR 0 4
39365: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39366: LD_INT 0
39368: PPUSH
39369: PPUSH
39370: PPUSH
39371: PPUSH
// if not unit or not area then
39372: LD_VAR 0 1
39376: NOT
39377: PUSH
39378: LD_VAR 0 2
39382: NOT
39383: OR
39384: IFFALSE 39388
// exit ;
39386: GO 39564
// tmp := AreaToList ( area , i ) ;
39388: LD_ADDR_VAR 0 6
39392: PUSH
39393: LD_VAR 0 2
39397: PPUSH
39398: LD_VAR 0 5
39402: PPUSH
39403: CALL_OW 517
39407: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39408: LD_ADDR_VAR 0 5
39412: PUSH
39413: DOUBLE
39414: LD_INT 1
39416: DEC
39417: ST_TO_ADDR
39418: LD_VAR 0 6
39422: PUSH
39423: LD_INT 1
39425: ARRAY
39426: PUSH
39427: FOR_TO
39428: IFFALSE 39562
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39430: LD_ADDR_VAR 0 7
39434: PUSH
39435: LD_VAR 0 6
39439: PUSH
39440: LD_INT 1
39442: ARRAY
39443: PUSH
39444: LD_VAR 0 5
39448: ARRAY
39449: PUSH
39450: LD_VAR 0 6
39454: PUSH
39455: LD_INT 2
39457: ARRAY
39458: PUSH
39459: LD_VAR 0 5
39463: ARRAY
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39469: LD_INT 92
39471: PUSH
39472: LD_VAR 0 7
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PUSH
39481: LD_VAR 0 7
39485: PUSH
39486: LD_INT 2
39488: ARRAY
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: PPUSH
39499: CALL_OW 69
39503: PUSH
39504: LD_INT 0
39506: EQUAL
39507: IFFALSE 39560
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39509: LD_VAR 0 1
39513: PPUSH
39514: LD_VAR 0 7
39518: PUSH
39519: LD_INT 1
39521: ARRAY
39522: PPUSH
39523: LD_VAR 0 7
39527: PUSH
39528: LD_INT 2
39530: ARRAY
39531: PPUSH
39532: LD_VAR 0 3
39536: PPUSH
39537: CALL_OW 48
// result := IsPlaced ( unit ) ;
39541: LD_ADDR_VAR 0 4
39545: PUSH
39546: LD_VAR 0 1
39550: PPUSH
39551: CALL_OW 305
39555: ST_TO_ADDR
// exit ;
39556: POP
39557: POP
39558: GO 39564
// end ; end ;
39560: GO 39427
39562: POP
39563: POP
// end ;
39564: LD_VAR 0 4
39568: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39569: LD_INT 0
39571: PPUSH
39572: PPUSH
39573: PPUSH
// if not side or side > 8 then
39574: LD_VAR 0 1
39578: NOT
39579: PUSH
39580: LD_VAR 0 1
39584: PUSH
39585: LD_INT 8
39587: GREATER
39588: OR
39589: IFFALSE 39593
// exit ;
39591: GO 39780
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39593: LD_ADDR_VAR 0 4
39597: PUSH
39598: LD_INT 22
39600: PUSH
39601: LD_VAR 0 1
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 21
39612: PUSH
39613: LD_INT 3
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PPUSH
39624: CALL_OW 69
39628: ST_TO_ADDR
// if not tmp then
39629: LD_VAR 0 4
39633: NOT
39634: IFFALSE 39638
// exit ;
39636: GO 39780
// enable_addtolog := true ;
39638: LD_ADDR_OWVAR 81
39642: PUSH
39643: LD_INT 1
39645: ST_TO_ADDR
// AddToLog ( [ ) ;
39646: LD_STRING [
39648: PPUSH
39649: CALL_OW 561
// for i in tmp do
39653: LD_ADDR_VAR 0 3
39657: PUSH
39658: LD_VAR 0 4
39662: PUSH
39663: FOR_IN
39664: IFFALSE 39771
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39666: LD_STRING [
39668: PUSH
39669: LD_VAR 0 3
39673: PPUSH
39674: CALL_OW 266
39678: STR
39679: PUSH
39680: LD_STRING , 
39682: STR
39683: PUSH
39684: LD_VAR 0 3
39688: PPUSH
39689: CALL_OW 250
39693: STR
39694: PUSH
39695: LD_STRING , 
39697: STR
39698: PUSH
39699: LD_VAR 0 3
39703: PPUSH
39704: CALL_OW 251
39708: STR
39709: PUSH
39710: LD_STRING , 
39712: STR
39713: PUSH
39714: LD_VAR 0 3
39718: PPUSH
39719: CALL_OW 254
39723: STR
39724: PUSH
39725: LD_STRING , 
39727: STR
39728: PUSH
39729: LD_VAR 0 3
39733: PPUSH
39734: LD_INT 1
39736: PPUSH
39737: CALL_OW 268
39741: STR
39742: PUSH
39743: LD_STRING , 
39745: STR
39746: PUSH
39747: LD_VAR 0 3
39751: PPUSH
39752: LD_INT 2
39754: PPUSH
39755: CALL_OW 268
39759: STR
39760: PUSH
39761: LD_STRING ],
39763: STR
39764: PPUSH
39765: CALL_OW 561
// end ;
39769: GO 39663
39771: POP
39772: POP
// AddToLog ( ]; ) ;
39773: LD_STRING ];
39775: PPUSH
39776: CALL_OW 561
// end ;
39780: LD_VAR 0 2
39784: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39785: LD_INT 0
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
// if not area or not rate or not max then
39792: LD_VAR 0 1
39796: NOT
39797: PUSH
39798: LD_VAR 0 2
39802: NOT
39803: OR
39804: PUSH
39805: LD_VAR 0 4
39809: NOT
39810: OR
39811: IFFALSE 39815
// exit ;
39813: GO 40004
// while 1 do
39815: LD_INT 1
39817: IFFALSE 40004
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39819: LD_ADDR_VAR 0 9
39823: PUSH
39824: LD_VAR 0 1
39828: PPUSH
39829: LD_INT 1
39831: PPUSH
39832: CALL_OW 287
39836: PUSH
39837: LD_INT 10
39839: MUL
39840: ST_TO_ADDR
// r := rate / 10 ;
39841: LD_ADDR_VAR 0 7
39845: PUSH
39846: LD_VAR 0 2
39850: PUSH
39851: LD_INT 10
39853: DIVREAL
39854: ST_TO_ADDR
// time := 1 1$00 ;
39855: LD_ADDR_VAR 0 8
39859: PUSH
39860: LD_INT 2100
39862: ST_TO_ADDR
// if amount < min then
39863: LD_VAR 0 9
39867: PUSH
39868: LD_VAR 0 3
39872: LESS
39873: IFFALSE 39891
// r := r * 2 else
39875: LD_ADDR_VAR 0 7
39879: PUSH
39880: LD_VAR 0 7
39884: PUSH
39885: LD_INT 2
39887: MUL
39888: ST_TO_ADDR
39889: GO 39917
// if amount > max then
39891: LD_VAR 0 9
39895: PUSH
39896: LD_VAR 0 4
39900: GREATER
39901: IFFALSE 39917
// r := r / 2 ;
39903: LD_ADDR_VAR 0 7
39907: PUSH
39908: LD_VAR 0 7
39912: PUSH
39913: LD_INT 2
39915: DIVREAL
39916: ST_TO_ADDR
// time := time / r ;
39917: LD_ADDR_VAR 0 8
39921: PUSH
39922: LD_VAR 0 8
39926: PUSH
39927: LD_VAR 0 7
39931: DIVREAL
39932: ST_TO_ADDR
// if time < 0 then
39933: LD_VAR 0 8
39937: PUSH
39938: LD_INT 0
39940: LESS
39941: IFFALSE 39958
// time := time * - 1 ;
39943: LD_ADDR_VAR 0 8
39947: PUSH
39948: LD_VAR 0 8
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: MUL
39957: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39958: LD_VAR 0 8
39962: PUSH
39963: LD_INT 35
39965: PPUSH
39966: LD_INT 875
39968: PPUSH
39969: CALL_OW 12
39973: PLUS
39974: PPUSH
39975: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39979: LD_INT 1
39981: PPUSH
39982: LD_INT 5
39984: PPUSH
39985: CALL_OW 12
39989: PPUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: LD_INT 1
39997: PPUSH
39998: CALL_OW 55
// end ;
40002: GO 39815
// end ;
40004: LD_VAR 0 5
40008: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40009: LD_INT 0
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
// if not turrets or not factories then
40019: LD_VAR 0 1
40023: NOT
40024: PUSH
40025: LD_VAR 0 2
40029: NOT
40030: OR
40031: IFFALSE 40035
// exit ;
40033: GO 40342
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40035: LD_ADDR_VAR 0 10
40039: PUSH
40040: LD_INT 5
40042: PUSH
40043: LD_INT 6
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: LD_INT 4
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: LD_INT 5
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 24
40077: PUSH
40078: LD_INT 25
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 23
40087: PUSH
40088: LD_INT 27
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 42
40101: PUSH
40102: LD_INT 43
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 44
40111: PUSH
40112: LD_INT 46
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 45
40121: PUSH
40122: LD_INT 47
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: ST_TO_ADDR
// result := [ ] ;
40139: LD_ADDR_VAR 0 3
40143: PUSH
40144: EMPTY
40145: ST_TO_ADDR
// for i in turrets do
40146: LD_ADDR_VAR 0 4
40150: PUSH
40151: LD_VAR 0 1
40155: PUSH
40156: FOR_IN
40157: IFFALSE 40340
// begin nat := GetNation ( i ) ;
40159: LD_ADDR_VAR 0 7
40163: PUSH
40164: LD_VAR 0 4
40168: PPUSH
40169: CALL_OW 248
40173: ST_TO_ADDR
// weapon := 0 ;
40174: LD_ADDR_VAR 0 8
40178: PUSH
40179: LD_INT 0
40181: ST_TO_ADDR
// if not nat then
40182: LD_VAR 0 7
40186: NOT
40187: IFFALSE 40191
// continue ;
40189: GO 40156
// for j in list [ nat ] do
40191: LD_ADDR_VAR 0 5
40195: PUSH
40196: LD_VAR 0 10
40200: PUSH
40201: LD_VAR 0 7
40205: ARRAY
40206: PUSH
40207: FOR_IN
40208: IFFALSE 40249
// if GetBWeapon ( i ) = j [ 1 ] then
40210: LD_VAR 0 4
40214: PPUSH
40215: CALL_OW 269
40219: PUSH
40220: LD_VAR 0 5
40224: PUSH
40225: LD_INT 1
40227: ARRAY
40228: EQUAL
40229: IFFALSE 40247
// begin weapon := j [ 2 ] ;
40231: LD_ADDR_VAR 0 8
40235: PUSH
40236: LD_VAR 0 5
40240: PUSH
40241: LD_INT 2
40243: ARRAY
40244: ST_TO_ADDR
// break ;
40245: GO 40249
// end ;
40247: GO 40207
40249: POP
40250: POP
// if not weapon then
40251: LD_VAR 0 8
40255: NOT
40256: IFFALSE 40260
// continue ;
40258: GO 40156
// for k in factories do
40260: LD_ADDR_VAR 0 6
40264: PUSH
40265: LD_VAR 0 2
40269: PUSH
40270: FOR_IN
40271: IFFALSE 40336
// begin weapons := AvailableWeaponList ( k ) ;
40273: LD_ADDR_VAR 0 9
40277: PUSH
40278: LD_VAR 0 6
40282: PPUSH
40283: CALL_OW 478
40287: ST_TO_ADDR
// if not weapons then
40288: LD_VAR 0 9
40292: NOT
40293: IFFALSE 40297
// continue ;
40295: GO 40270
// if weapon in weapons then
40297: LD_VAR 0 8
40301: PUSH
40302: LD_VAR 0 9
40306: IN
40307: IFFALSE 40334
// begin result := [ i , weapon ] ;
40309: LD_ADDR_VAR 0 3
40313: PUSH
40314: LD_VAR 0 4
40318: PUSH
40319: LD_VAR 0 8
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: ST_TO_ADDR
// exit ;
40328: POP
40329: POP
40330: POP
40331: POP
40332: GO 40342
// end ; end ;
40334: GO 40270
40336: POP
40337: POP
// end ;
40338: GO 40156
40340: POP
40341: POP
// end ;
40342: LD_VAR 0 3
40346: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40347: LD_INT 0
40349: PPUSH
// if not side or side > 8 then
40350: LD_VAR 0 3
40354: NOT
40355: PUSH
40356: LD_VAR 0 3
40360: PUSH
40361: LD_INT 8
40363: GREATER
40364: OR
40365: IFFALSE 40369
// exit ;
40367: GO 40428
// if not range then
40369: LD_VAR 0 4
40373: NOT
40374: IFFALSE 40385
// range := - 12 ;
40376: LD_ADDR_VAR 0 4
40380: PUSH
40381: LD_INT 12
40383: NEG
40384: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40385: LD_VAR 0 1
40389: PPUSH
40390: LD_VAR 0 2
40394: PPUSH
40395: LD_VAR 0 3
40399: PPUSH
40400: LD_VAR 0 4
40404: PPUSH
40405: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40409: LD_VAR 0 1
40413: PPUSH
40414: LD_VAR 0 2
40418: PPUSH
40419: LD_VAR 0 3
40423: PPUSH
40424: CALL_OW 331
// end ;
40428: LD_VAR 0 5
40432: RET
// export function Video ( mode ) ; begin
40433: LD_INT 0
40435: PPUSH
// ingame_video = mode ;
40436: LD_ADDR_OWVAR 52
40440: PUSH
40441: LD_VAR 0 1
40445: ST_TO_ADDR
// interface_hidden = mode ;
40446: LD_ADDR_OWVAR 54
40450: PUSH
40451: LD_VAR 0 1
40455: ST_TO_ADDR
// end ;
40456: LD_VAR 0 2
40460: RET
// export function Join ( array , element ) ; begin
40461: LD_INT 0
40463: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40464: LD_ADDR_VAR 0 3
40468: PUSH
40469: LD_VAR 0 1
40473: PPUSH
40474: LD_VAR 0 1
40478: PUSH
40479: LD_INT 1
40481: PLUS
40482: PPUSH
40483: LD_VAR 0 2
40487: PPUSH
40488: CALL_OW 1
40492: ST_TO_ADDR
// end ;
40493: LD_VAR 0 3
40497: RET
// export function JoinUnion ( array , element ) ; begin
40498: LD_INT 0
40500: PPUSH
// result := array union element ;
40501: LD_ADDR_VAR 0 3
40505: PUSH
40506: LD_VAR 0 1
40510: PUSH
40511: LD_VAR 0 2
40515: UNION
40516: ST_TO_ADDR
// end ;
40517: LD_VAR 0 3
40521: RET
// export function GetBehemoths ( side ) ; begin
40522: LD_INT 0
40524: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40525: LD_ADDR_VAR 0 2
40529: PUSH
40530: LD_INT 22
40532: PUSH
40533: LD_VAR 0 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 31
40544: PUSH
40545: LD_INT 25
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PPUSH
40556: CALL_OW 69
40560: ST_TO_ADDR
// end ;
40561: LD_VAR 0 2
40565: RET
// export function Shuffle ( array ) ; var i , index ; begin
40566: LD_INT 0
40568: PPUSH
40569: PPUSH
40570: PPUSH
// result := [ ] ;
40571: LD_ADDR_VAR 0 2
40575: PUSH
40576: EMPTY
40577: ST_TO_ADDR
// if not array then
40578: LD_VAR 0 1
40582: NOT
40583: IFFALSE 40587
// exit ;
40585: GO 40686
// Randomize ;
40587: CALL_OW 10
// for i = array downto 1 do
40591: LD_ADDR_VAR 0 3
40595: PUSH
40596: DOUBLE
40597: LD_VAR 0 1
40601: INC
40602: ST_TO_ADDR
40603: LD_INT 1
40605: PUSH
40606: FOR_DOWNTO
40607: IFFALSE 40684
// begin index := rand ( 1 , array ) ;
40609: LD_ADDR_VAR 0 4
40613: PUSH
40614: LD_INT 1
40616: PPUSH
40617: LD_VAR 0 1
40621: PPUSH
40622: CALL_OW 12
40626: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40627: LD_ADDR_VAR 0 2
40631: PUSH
40632: LD_VAR 0 2
40636: PPUSH
40637: LD_VAR 0 2
40641: PUSH
40642: LD_INT 1
40644: PLUS
40645: PPUSH
40646: LD_VAR 0 1
40650: PUSH
40651: LD_VAR 0 4
40655: ARRAY
40656: PPUSH
40657: CALL_OW 2
40661: ST_TO_ADDR
// array := Delete ( array , index ) ;
40662: LD_ADDR_VAR 0 1
40666: PUSH
40667: LD_VAR 0 1
40671: PPUSH
40672: LD_VAR 0 4
40676: PPUSH
40677: CALL_OW 3
40681: ST_TO_ADDR
// end ;
40682: GO 40606
40684: POP
40685: POP
// end ;
40686: LD_VAR 0 2
40690: RET
// export function GetBaseMaterials ( base ) ; begin
40691: LD_INT 0
40693: PPUSH
// result := [ 0 , 0 , 0 ] ;
40694: LD_ADDR_VAR 0 2
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// if not base then
40713: LD_VAR 0 1
40717: NOT
40718: IFFALSE 40722
// exit ;
40720: GO 40771
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40722: LD_ADDR_VAR 0 2
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: LD_INT 1
40734: PPUSH
40735: CALL_OW 275
40739: PUSH
40740: LD_VAR 0 1
40744: PPUSH
40745: LD_INT 2
40747: PPUSH
40748: CALL_OW 275
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: LD_INT 3
40760: PPUSH
40761: CALL_OW 275
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: LIST
40770: ST_TO_ADDR
// end ;
40771: LD_VAR 0 2
40775: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40776: LD_INT 0
40778: PPUSH
40779: PPUSH
// result := array ;
40780: LD_ADDR_VAR 0 3
40784: PUSH
40785: LD_VAR 0 1
40789: ST_TO_ADDR
// if size >= result then
40790: LD_VAR 0 2
40794: PUSH
40795: LD_VAR 0 3
40799: GREATEREQUAL
40800: IFFALSE 40804
// exit ;
40802: GO 40854
// if size then
40804: LD_VAR 0 2
40808: IFFALSE 40854
// for i := array downto size do
40810: LD_ADDR_VAR 0 4
40814: PUSH
40815: DOUBLE
40816: LD_VAR 0 1
40820: INC
40821: ST_TO_ADDR
40822: LD_VAR 0 2
40826: PUSH
40827: FOR_DOWNTO
40828: IFFALSE 40852
// result := Delete ( result , result ) ;
40830: LD_ADDR_VAR 0 3
40834: PUSH
40835: LD_VAR 0 3
40839: PPUSH
40840: LD_VAR 0 3
40844: PPUSH
40845: CALL_OW 3
40849: ST_TO_ADDR
40850: GO 40827
40852: POP
40853: POP
// end ;
40854: LD_VAR 0 3
40858: RET
// export function ComExit ( unit ) ; var tmp ; begin
40859: LD_INT 0
40861: PPUSH
40862: PPUSH
// if not IsInUnit ( unit ) then
40863: LD_VAR 0 1
40867: PPUSH
40868: CALL_OW 310
40872: NOT
40873: IFFALSE 40877
// exit ;
40875: GO 40937
// tmp := IsInUnit ( unit ) ;
40877: LD_ADDR_VAR 0 3
40881: PUSH
40882: LD_VAR 0 1
40886: PPUSH
40887: CALL_OW 310
40891: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40892: LD_VAR 0 3
40896: PPUSH
40897: CALL_OW 247
40901: PUSH
40902: LD_INT 2
40904: EQUAL
40905: IFFALSE 40918
// ComExitVehicle ( unit ) else
40907: LD_VAR 0 1
40911: PPUSH
40912: CALL_OW 121
40916: GO 40927
// ComExitBuilding ( unit ) ;
40918: LD_VAR 0 1
40922: PPUSH
40923: CALL_OW 122
// result := tmp ;
40927: LD_ADDR_VAR 0 2
40931: PUSH
40932: LD_VAR 0 3
40936: ST_TO_ADDR
// end ;
40937: LD_VAR 0 2
40941: RET
// export function ComExitAll ( units ) ; var i ; begin
40942: LD_INT 0
40944: PPUSH
40945: PPUSH
// if not units then
40946: LD_VAR 0 1
40950: NOT
40951: IFFALSE 40955
// exit ;
40953: GO 40981
// for i in units do
40955: LD_ADDR_VAR 0 3
40959: PUSH
40960: LD_VAR 0 1
40964: PUSH
40965: FOR_IN
40966: IFFALSE 40979
// ComExit ( i ) ;
40968: LD_VAR 0 3
40972: PPUSH
40973: CALL 40859 0 1
40977: GO 40965
40979: POP
40980: POP
// end ;
40981: LD_VAR 0 2
40985: RET
// export function ResetHc ; begin
40986: LD_INT 0
40988: PPUSH
// InitHc ;
40989: CALL_OW 19
// hc_importance := 0 ;
40993: LD_ADDR_OWVAR 32
40997: PUSH
40998: LD_INT 0
41000: ST_TO_ADDR
// end ;
41001: LD_VAR 0 1
41005: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41006: LD_INT 0
41008: PPUSH
41009: PPUSH
41010: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41011: LD_ADDR_VAR 0 6
41015: PUSH
41016: LD_VAR 0 1
41020: PUSH
41021: LD_VAR 0 3
41025: PLUS
41026: PUSH
41027: LD_INT 2
41029: DIV
41030: ST_TO_ADDR
// if _x < 0 then
41031: LD_VAR 0 6
41035: PUSH
41036: LD_INT 0
41038: LESS
41039: IFFALSE 41056
// _x := _x * - 1 ;
41041: LD_ADDR_VAR 0 6
41045: PUSH
41046: LD_VAR 0 6
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: MUL
41055: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41056: LD_ADDR_VAR 0 7
41060: PUSH
41061: LD_VAR 0 2
41065: PUSH
41066: LD_VAR 0 4
41070: PLUS
41071: PUSH
41072: LD_INT 2
41074: DIV
41075: ST_TO_ADDR
// if _y < 0 then
41076: LD_VAR 0 7
41080: PUSH
41081: LD_INT 0
41083: LESS
41084: IFFALSE 41101
// _y := _y * - 1 ;
41086: LD_ADDR_VAR 0 7
41090: PUSH
41091: LD_VAR 0 7
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: MUL
41100: ST_TO_ADDR
// result := [ _x , _y ] ;
41101: LD_ADDR_VAR 0 5
41105: PUSH
41106: LD_VAR 0 6
41110: PUSH
41111: LD_VAR 0 7
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: ST_TO_ADDR
// end ;
41120: LD_VAR 0 5
41124: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41125: LD_INT 0
41127: PPUSH
41128: PPUSH
41129: PPUSH
41130: PPUSH
// task := GetTaskList ( unit ) ;
41131: LD_ADDR_VAR 0 7
41135: PUSH
41136: LD_VAR 0 1
41140: PPUSH
41141: CALL_OW 437
41145: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41146: LD_VAR 0 7
41150: NOT
41151: PUSH
41152: LD_VAR 0 1
41156: PPUSH
41157: LD_VAR 0 2
41161: PPUSH
41162: CALL_OW 308
41166: NOT
41167: AND
41168: IFFALSE 41172
// exit ;
41170: GO 41290
// if IsInArea ( unit , area ) then
41172: LD_VAR 0 1
41176: PPUSH
41177: LD_VAR 0 2
41181: PPUSH
41182: CALL_OW 308
41186: IFFALSE 41204
// begin ComMoveToArea ( unit , goAway ) ;
41188: LD_VAR 0 1
41192: PPUSH
41193: LD_VAR 0 3
41197: PPUSH
41198: CALL_OW 113
// exit ;
41202: GO 41290
// end ; if task [ 1 ] [ 1 ] <> M then
41204: LD_VAR 0 7
41208: PUSH
41209: LD_INT 1
41211: ARRAY
41212: PUSH
41213: LD_INT 1
41215: ARRAY
41216: PUSH
41217: LD_STRING M
41219: NONEQUAL
41220: IFFALSE 41224
// exit ;
41222: GO 41290
// x := task [ 1 ] [ 2 ] ;
41224: LD_ADDR_VAR 0 5
41228: PUSH
41229: LD_VAR 0 7
41233: PUSH
41234: LD_INT 1
41236: ARRAY
41237: PUSH
41238: LD_INT 2
41240: ARRAY
41241: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41242: LD_ADDR_VAR 0 6
41246: PUSH
41247: LD_VAR 0 7
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: PUSH
41256: LD_INT 3
41258: ARRAY
41259: ST_TO_ADDR
// if InArea ( x , y , area ) then
41260: LD_VAR 0 5
41264: PPUSH
41265: LD_VAR 0 6
41269: PPUSH
41270: LD_VAR 0 2
41274: PPUSH
41275: CALL_OW 309
41279: IFFALSE 41290
// ComStop ( unit ) ;
41281: LD_VAR 0 1
41285: PPUSH
41286: CALL_OW 141
// end ;
41290: LD_VAR 0 4
41294: RET
// export function Abs ( value ) ; begin
41295: LD_INT 0
41297: PPUSH
// result := value ;
41298: LD_ADDR_VAR 0 2
41302: PUSH
41303: LD_VAR 0 1
41307: ST_TO_ADDR
// if value < 0 then
41308: LD_VAR 0 1
41312: PUSH
41313: LD_INT 0
41315: LESS
41316: IFFALSE 41333
// result := value * - 1 ;
41318: LD_ADDR_VAR 0 2
41322: PUSH
41323: LD_VAR 0 1
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: MUL
41332: ST_TO_ADDR
// end ;
41333: LD_VAR 0 2
41337: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41338: LD_INT 0
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
// if not unit or not building then
41348: LD_VAR 0 1
41352: NOT
41353: PUSH
41354: LD_VAR 0 2
41358: NOT
41359: OR
41360: IFFALSE 41364
// exit ;
41362: GO 41590
// x := GetX ( building ) ;
41364: LD_ADDR_VAR 0 4
41368: PUSH
41369: LD_VAR 0 2
41373: PPUSH
41374: CALL_OW 250
41378: ST_TO_ADDR
// y := GetY ( building ) ;
41379: LD_ADDR_VAR 0 6
41383: PUSH
41384: LD_VAR 0 2
41388: PPUSH
41389: CALL_OW 251
41393: ST_TO_ADDR
// d := GetDir ( building ) ;
41394: LD_ADDR_VAR 0 8
41398: PUSH
41399: LD_VAR 0 2
41403: PPUSH
41404: CALL_OW 254
41408: ST_TO_ADDR
// r := 4 ;
41409: LD_ADDR_VAR 0 9
41413: PUSH
41414: LD_INT 4
41416: ST_TO_ADDR
// for i := 1 to 5 do
41417: LD_ADDR_VAR 0 10
41421: PUSH
41422: DOUBLE
41423: LD_INT 1
41425: DEC
41426: ST_TO_ADDR
41427: LD_INT 5
41429: PUSH
41430: FOR_TO
41431: IFFALSE 41588
// begin _x := ShiftX ( x , d , r + i ) ;
41433: LD_ADDR_VAR 0 5
41437: PUSH
41438: LD_VAR 0 4
41442: PPUSH
41443: LD_VAR 0 8
41447: PPUSH
41448: LD_VAR 0 9
41452: PUSH
41453: LD_VAR 0 10
41457: PLUS
41458: PPUSH
41459: CALL_OW 272
41463: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41464: LD_ADDR_VAR 0 7
41468: PUSH
41469: LD_VAR 0 6
41473: PPUSH
41474: LD_VAR 0 8
41478: PPUSH
41479: LD_VAR 0 9
41483: PUSH
41484: LD_VAR 0 10
41488: PLUS
41489: PPUSH
41490: CALL_OW 273
41494: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41495: LD_VAR 0 5
41499: PPUSH
41500: LD_VAR 0 7
41504: PPUSH
41505: CALL_OW 488
41509: PUSH
41510: LD_VAR 0 5
41514: PPUSH
41515: LD_VAR 0 7
41519: PPUSH
41520: CALL_OW 428
41524: PPUSH
41525: CALL_OW 247
41529: PUSH
41530: LD_INT 3
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: IN
41540: NOT
41541: AND
41542: IFFALSE 41586
// begin ComMoveXY ( unit , _x , _y ) ;
41544: LD_VAR 0 1
41548: PPUSH
41549: LD_VAR 0 5
41553: PPUSH
41554: LD_VAR 0 7
41558: PPUSH
41559: CALL_OW 111
// result := [ _x , _y ] ;
41563: LD_ADDR_VAR 0 3
41567: PUSH
41568: LD_VAR 0 5
41572: PUSH
41573: LD_VAR 0 7
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: ST_TO_ADDR
// exit ;
41582: POP
41583: POP
41584: GO 41590
// end ; end ;
41586: GO 41430
41588: POP
41589: POP
// end ;
41590: LD_VAR 0 3
41594: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41595: LD_INT 0
41597: PPUSH
41598: PPUSH
41599: PPUSH
// result := 0 ;
41600: LD_ADDR_VAR 0 3
41604: PUSH
41605: LD_INT 0
41607: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41608: LD_VAR 0 1
41612: PUSH
41613: LD_INT 0
41615: LESS
41616: PUSH
41617: LD_VAR 0 1
41621: PUSH
41622: LD_INT 8
41624: GREATER
41625: OR
41626: PUSH
41627: LD_VAR 0 2
41631: PUSH
41632: LD_INT 0
41634: LESS
41635: OR
41636: PUSH
41637: LD_VAR 0 2
41641: PUSH
41642: LD_INT 8
41644: GREATER
41645: OR
41646: IFFALSE 41650
// exit ;
41648: GO 41725
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41650: LD_ADDR_VAR 0 4
41654: PUSH
41655: LD_INT 22
41657: PUSH
41658: LD_VAR 0 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PPUSH
41667: CALL_OW 69
41671: PUSH
41672: FOR_IN
41673: IFFALSE 41723
// begin un := UnitShoot ( i ) ;
41675: LD_ADDR_VAR 0 5
41679: PUSH
41680: LD_VAR 0 4
41684: PPUSH
41685: CALL_OW 504
41689: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41690: LD_VAR 0 5
41694: PPUSH
41695: CALL_OW 255
41699: PUSH
41700: LD_VAR 0 1
41704: EQUAL
41705: IFFALSE 41721
// begin result := un ;
41707: LD_ADDR_VAR 0 3
41711: PUSH
41712: LD_VAR 0 5
41716: ST_TO_ADDR
// exit ;
41717: POP
41718: POP
41719: GO 41725
// end ; end ;
41721: GO 41672
41723: POP
41724: POP
// end ;
41725: LD_VAR 0 3
41729: RET
// export function GetCargoBay ( units ) ; begin
41730: LD_INT 0
41732: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41733: LD_ADDR_VAR 0 2
41737: PUSH
41738: LD_VAR 0 1
41742: PPUSH
41743: LD_INT 2
41745: PUSH
41746: LD_INT 34
41748: PUSH
41749: LD_INT 12
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 34
41758: PUSH
41759: LD_INT 51
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 34
41768: PUSH
41769: LD_INT 32
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 34
41778: PUSH
41779: LD_INT 89
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: PPUSH
41793: CALL_OW 72
41797: ST_TO_ADDR
// end ;
41798: LD_VAR 0 2
41802: RET
// export function Negate ( value ) ; begin
41803: LD_INT 0
41805: PPUSH
// result := not value ;
41806: LD_ADDR_VAR 0 2
41810: PUSH
41811: LD_VAR 0 1
41815: NOT
41816: ST_TO_ADDR
// end ;
41817: LD_VAR 0 2
41821: RET
// export function Inc ( value ) ; begin
41822: LD_INT 0
41824: PPUSH
// result := value + 1 ;
41825: LD_ADDR_VAR 0 2
41829: PUSH
41830: LD_VAR 0 1
41834: PUSH
41835: LD_INT 1
41837: PLUS
41838: ST_TO_ADDR
// end ;
41839: LD_VAR 0 2
41843: RET
// export function Dec ( value ) ; begin
41844: LD_INT 0
41846: PPUSH
// result := value - 1 ;
41847: LD_ADDR_VAR 0 2
41851: PUSH
41852: LD_VAR 0 1
41856: PUSH
41857: LD_INT 1
41859: MINUS
41860: ST_TO_ADDR
// end ;
41861: LD_VAR 0 2
41865: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41866: LD_INT 0
41868: PPUSH
41869: PPUSH
41870: PPUSH
41871: PPUSH
41872: PPUSH
41873: PPUSH
41874: PPUSH
41875: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41876: LD_VAR 0 1
41880: PPUSH
41881: LD_VAR 0 2
41885: PPUSH
41886: CALL_OW 488
41890: NOT
41891: PUSH
41892: LD_VAR 0 3
41896: PPUSH
41897: LD_VAR 0 4
41901: PPUSH
41902: CALL_OW 488
41906: NOT
41907: OR
41908: IFFALSE 41921
// begin result := - 1 ;
41910: LD_ADDR_VAR 0 5
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: ST_TO_ADDR
// exit ;
41919: GO 42156
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41921: LD_ADDR_VAR 0 12
41925: PUSH
41926: LD_VAR 0 1
41930: PPUSH
41931: LD_VAR 0 2
41935: PPUSH
41936: LD_VAR 0 3
41940: PPUSH
41941: LD_VAR 0 4
41945: PPUSH
41946: CALL 41006 0 4
41950: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41951: LD_ADDR_VAR 0 11
41955: PUSH
41956: LD_VAR 0 1
41960: PPUSH
41961: LD_VAR 0 2
41965: PPUSH
41966: LD_VAR 0 12
41970: PUSH
41971: LD_INT 1
41973: ARRAY
41974: PPUSH
41975: LD_VAR 0 12
41979: PUSH
41980: LD_INT 2
41982: ARRAY
41983: PPUSH
41984: CALL_OW 298
41988: ST_TO_ADDR
// distance := 9999 ;
41989: LD_ADDR_VAR 0 10
41993: PUSH
41994: LD_INT 9999
41996: ST_TO_ADDR
// for i := 0 to 5 do
41997: LD_ADDR_VAR 0 6
42001: PUSH
42002: DOUBLE
42003: LD_INT 0
42005: DEC
42006: ST_TO_ADDR
42007: LD_INT 5
42009: PUSH
42010: FOR_TO
42011: IFFALSE 42154
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42013: LD_ADDR_VAR 0 7
42017: PUSH
42018: LD_VAR 0 1
42022: PPUSH
42023: LD_VAR 0 6
42027: PPUSH
42028: LD_VAR 0 11
42032: PPUSH
42033: CALL_OW 272
42037: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42038: LD_ADDR_VAR 0 8
42042: PUSH
42043: LD_VAR 0 2
42047: PPUSH
42048: LD_VAR 0 6
42052: PPUSH
42053: LD_VAR 0 11
42057: PPUSH
42058: CALL_OW 273
42062: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42063: LD_VAR 0 7
42067: PPUSH
42068: LD_VAR 0 8
42072: PPUSH
42073: CALL_OW 488
42077: NOT
42078: IFFALSE 42082
// continue ;
42080: GO 42010
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42082: LD_ADDR_VAR 0 9
42086: PUSH
42087: LD_VAR 0 12
42091: PUSH
42092: LD_INT 1
42094: ARRAY
42095: PPUSH
42096: LD_VAR 0 12
42100: PUSH
42101: LD_INT 2
42103: ARRAY
42104: PPUSH
42105: LD_VAR 0 7
42109: PPUSH
42110: LD_VAR 0 8
42114: PPUSH
42115: CALL_OW 298
42119: ST_TO_ADDR
// if tmp < distance then
42120: LD_VAR 0 9
42124: PUSH
42125: LD_VAR 0 10
42129: LESS
42130: IFFALSE 42152
// begin result := i ;
42132: LD_ADDR_VAR 0 5
42136: PUSH
42137: LD_VAR 0 6
42141: ST_TO_ADDR
// distance := tmp ;
42142: LD_ADDR_VAR 0 10
42146: PUSH
42147: LD_VAR 0 9
42151: ST_TO_ADDR
// end ; end ;
42152: GO 42010
42154: POP
42155: POP
// end ;
42156: LD_VAR 0 5
42160: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42161: LD_INT 0
42163: PPUSH
42164: PPUSH
// if not driver or not IsInUnit ( driver ) then
42165: LD_VAR 0 1
42169: NOT
42170: PUSH
42171: LD_VAR 0 1
42175: PPUSH
42176: CALL_OW 310
42180: NOT
42181: OR
42182: IFFALSE 42186
// exit ;
42184: GO 42276
// vehicle := IsInUnit ( driver ) ;
42186: LD_ADDR_VAR 0 3
42190: PUSH
42191: LD_VAR 0 1
42195: PPUSH
42196: CALL_OW 310
42200: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42201: LD_VAR 0 1
42205: PPUSH
42206: LD_STRING \
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: PUSH
42236: LD_STRING E
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_VAR 0 3
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PPUSH
42272: CALL_OW 446
// end ;
42276: LD_VAR 0 2
42280: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42281: LD_INT 0
42283: PPUSH
42284: PPUSH
// if not driver or not IsInUnit ( driver ) then
42285: LD_VAR 0 1
42289: NOT
42290: PUSH
42291: LD_VAR 0 1
42295: PPUSH
42296: CALL_OW 310
42300: NOT
42301: OR
42302: IFFALSE 42306
// exit ;
42304: GO 42396
// vehicle := IsInUnit ( driver ) ;
42306: LD_ADDR_VAR 0 3
42310: PUSH
42311: LD_VAR 0 1
42315: PPUSH
42316: CALL_OW 310
42320: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42321: LD_VAR 0 1
42325: PPUSH
42326: LD_STRING \
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: PUSH
42356: LD_STRING E
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_VAR 0 3
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PPUSH
42392: CALL_OW 447
// end ;
42396: LD_VAR 0 2
42400: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42401: LD_INT 0
42403: PPUSH
42404: PPUSH
42405: PPUSH
// tmp := [ ] ;
42406: LD_ADDR_VAR 0 5
42410: PUSH
42411: EMPTY
42412: ST_TO_ADDR
// for i in units do
42413: LD_ADDR_VAR 0 4
42417: PUSH
42418: LD_VAR 0 1
42422: PUSH
42423: FOR_IN
42424: IFFALSE 42462
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42426: LD_ADDR_VAR 0 5
42430: PUSH
42431: LD_VAR 0 5
42435: PPUSH
42436: LD_VAR 0 5
42440: PUSH
42441: LD_INT 1
42443: PLUS
42444: PPUSH
42445: LD_VAR 0 4
42449: PPUSH
42450: CALL_OW 256
42454: PPUSH
42455: CALL_OW 2
42459: ST_TO_ADDR
42460: GO 42423
42462: POP
42463: POP
// if not tmp then
42464: LD_VAR 0 5
42468: NOT
42469: IFFALSE 42473
// exit ;
42471: GO 42521
// if asc then
42473: LD_VAR 0 2
42477: IFFALSE 42501
// result := SortListByListAsc ( units , tmp ) else
42479: LD_ADDR_VAR 0 3
42483: PUSH
42484: LD_VAR 0 1
42488: PPUSH
42489: LD_VAR 0 5
42493: PPUSH
42494: CALL_OW 76
42498: ST_TO_ADDR
42499: GO 42521
// result := SortListByListDesc ( units , tmp ) ;
42501: LD_ADDR_VAR 0 3
42505: PUSH
42506: LD_VAR 0 1
42510: PPUSH
42511: LD_VAR 0 5
42515: PPUSH
42516: CALL_OW 77
42520: ST_TO_ADDR
// end ;
42521: LD_VAR 0 3
42525: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42526: LD_INT 0
42528: PPUSH
42529: PPUSH
// task := GetTaskList ( mech ) ;
42530: LD_ADDR_VAR 0 4
42534: PUSH
42535: LD_VAR 0 1
42539: PPUSH
42540: CALL_OW 437
42544: ST_TO_ADDR
// if not task then
42545: LD_VAR 0 4
42549: NOT
42550: IFFALSE 42554
// exit ;
42552: GO 42596
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42554: LD_ADDR_VAR 0 3
42558: PUSH
42559: LD_VAR 0 4
42563: PUSH
42564: LD_INT 1
42566: ARRAY
42567: PUSH
42568: LD_INT 1
42570: ARRAY
42571: PUSH
42572: LD_STRING r
42574: EQUAL
42575: PUSH
42576: LD_VAR 0 4
42580: PUSH
42581: LD_INT 1
42583: ARRAY
42584: PUSH
42585: LD_INT 4
42587: ARRAY
42588: PUSH
42589: LD_VAR 0 2
42593: EQUAL
42594: AND
42595: ST_TO_ADDR
// end ;
42596: LD_VAR 0 3
42600: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42601: LD_INT 0
42603: PPUSH
// SetDir ( unit , d ) ;
42604: LD_VAR 0 1
42608: PPUSH
42609: LD_VAR 0 4
42613: PPUSH
42614: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42618: LD_VAR 0 1
42622: PPUSH
42623: LD_VAR 0 2
42627: PPUSH
42628: LD_VAR 0 3
42632: PPUSH
42633: LD_VAR 0 5
42637: PPUSH
42638: CALL_OW 48
// end ;
42642: LD_VAR 0 6
42646: RET
// export function ToNaturalNumber ( number ) ; begin
42647: LD_INT 0
42649: PPUSH
// result := number div 1 ;
42650: LD_ADDR_VAR 0 2
42654: PUSH
42655: LD_VAR 0 1
42659: PUSH
42660: LD_INT 1
42662: DIV
42663: ST_TO_ADDR
// if number < 0 then
42664: LD_VAR 0 1
42668: PUSH
42669: LD_INT 0
42671: LESS
42672: IFFALSE 42682
// result := 0 ;
42674: LD_ADDR_VAR 0 2
42678: PUSH
42679: LD_INT 0
42681: ST_TO_ADDR
// end ;
42682: LD_VAR 0 2
42686: RET
// export function SortByClass ( units , class ) ; var un ; begin
42687: LD_INT 0
42689: PPUSH
42690: PPUSH
// if not units or not class then
42691: LD_VAR 0 1
42695: NOT
42696: PUSH
42697: LD_VAR 0 2
42701: NOT
42702: OR
42703: IFFALSE 42707
// exit ;
42705: GO 42802
// result := [ ] ;
42707: LD_ADDR_VAR 0 3
42711: PUSH
42712: EMPTY
42713: ST_TO_ADDR
// for un in units do
42714: LD_ADDR_VAR 0 4
42718: PUSH
42719: LD_VAR 0 1
42723: PUSH
42724: FOR_IN
42725: IFFALSE 42800
// if GetClass ( un ) = class then
42727: LD_VAR 0 4
42731: PPUSH
42732: CALL_OW 257
42736: PUSH
42737: LD_VAR 0 2
42741: EQUAL
42742: IFFALSE 42769
// result := Insert ( result , 1 , un ) else
42744: LD_ADDR_VAR 0 3
42748: PUSH
42749: LD_VAR 0 3
42753: PPUSH
42754: LD_INT 1
42756: PPUSH
42757: LD_VAR 0 4
42761: PPUSH
42762: CALL_OW 2
42766: ST_TO_ADDR
42767: GO 42798
// result := Replace ( result , result + 1 , un ) ;
42769: LD_ADDR_VAR 0 3
42773: PUSH
42774: LD_VAR 0 3
42778: PPUSH
42779: LD_VAR 0 3
42783: PUSH
42784: LD_INT 1
42786: PLUS
42787: PPUSH
42788: LD_VAR 0 4
42792: PPUSH
42793: CALL_OW 1
42797: ST_TO_ADDR
42798: GO 42724
42800: POP
42801: POP
// end ;
42802: LD_VAR 0 3
42806: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42807: LD_INT 0
42809: PPUSH
42810: PPUSH
42811: PPUSH
42812: PPUSH
42813: PPUSH
42814: PPUSH
42815: PPUSH
// result := [ ] ;
42816: LD_ADDR_VAR 0 4
42820: PUSH
42821: EMPTY
42822: ST_TO_ADDR
// if x - r < 0 then
42823: LD_VAR 0 1
42827: PUSH
42828: LD_VAR 0 3
42832: MINUS
42833: PUSH
42834: LD_INT 0
42836: LESS
42837: IFFALSE 42849
// min_x := 0 else
42839: LD_ADDR_VAR 0 8
42843: PUSH
42844: LD_INT 0
42846: ST_TO_ADDR
42847: GO 42865
// min_x := x - r ;
42849: LD_ADDR_VAR 0 8
42853: PUSH
42854: LD_VAR 0 1
42858: PUSH
42859: LD_VAR 0 3
42863: MINUS
42864: ST_TO_ADDR
// if y - r < 0 then
42865: LD_VAR 0 2
42869: PUSH
42870: LD_VAR 0 3
42874: MINUS
42875: PUSH
42876: LD_INT 0
42878: LESS
42879: IFFALSE 42891
// min_y := 0 else
42881: LD_ADDR_VAR 0 7
42885: PUSH
42886: LD_INT 0
42888: ST_TO_ADDR
42889: GO 42907
// min_y := y - r ;
42891: LD_ADDR_VAR 0 7
42895: PUSH
42896: LD_VAR 0 2
42900: PUSH
42901: LD_VAR 0 3
42905: MINUS
42906: ST_TO_ADDR
// max_x := x + r ;
42907: LD_ADDR_VAR 0 9
42911: PUSH
42912: LD_VAR 0 1
42916: PUSH
42917: LD_VAR 0 3
42921: PLUS
42922: ST_TO_ADDR
// max_y := y + r ;
42923: LD_ADDR_VAR 0 10
42927: PUSH
42928: LD_VAR 0 2
42932: PUSH
42933: LD_VAR 0 3
42937: PLUS
42938: ST_TO_ADDR
// for _x = min_x to max_x do
42939: LD_ADDR_VAR 0 5
42943: PUSH
42944: DOUBLE
42945: LD_VAR 0 8
42949: DEC
42950: ST_TO_ADDR
42951: LD_VAR 0 9
42955: PUSH
42956: FOR_TO
42957: IFFALSE 43058
// for _y = min_y to max_y do
42959: LD_ADDR_VAR 0 6
42963: PUSH
42964: DOUBLE
42965: LD_VAR 0 7
42969: DEC
42970: ST_TO_ADDR
42971: LD_VAR 0 10
42975: PUSH
42976: FOR_TO
42977: IFFALSE 43054
// begin if not ValidHex ( _x , _y ) then
42979: LD_VAR 0 5
42983: PPUSH
42984: LD_VAR 0 6
42988: PPUSH
42989: CALL_OW 488
42993: NOT
42994: IFFALSE 42998
// continue ;
42996: GO 42976
// if GetResourceTypeXY ( _x , _y ) then
42998: LD_VAR 0 5
43002: PPUSH
43003: LD_VAR 0 6
43007: PPUSH
43008: CALL_OW 283
43012: IFFALSE 43052
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43014: LD_ADDR_VAR 0 4
43018: PUSH
43019: LD_VAR 0 4
43023: PPUSH
43024: LD_VAR 0 4
43028: PUSH
43029: LD_INT 1
43031: PLUS
43032: PPUSH
43033: LD_VAR 0 5
43037: PUSH
43038: LD_VAR 0 6
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PPUSH
43047: CALL_OW 1
43051: ST_TO_ADDR
// end ;
43052: GO 42976
43054: POP
43055: POP
43056: GO 42956
43058: POP
43059: POP
// end ;
43060: LD_VAR 0 4
43064: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43065: LD_INT 0
43067: PPUSH
43068: PPUSH
43069: PPUSH
43070: PPUSH
43071: PPUSH
43072: PPUSH
43073: PPUSH
43074: PPUSH
// if not units then
43075: LD_VAR 0 1
43079: NOT
43080: IFFALSE 43084
// exit ;
43082: GO 43608
// result := UnitFilter ( units , [ f_ok ] ) ;
43084: LD_ADDR_VAR 0 3
43088: PUSH
43089: LD_VAR 0 1
43093: PPUSH
43094: LD_INT 50
43096: PUSH
43097: EMPTY
43098: LIST
43099: PPUSH
43100: CALL_OW 72
43104: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43105: LD_ADDR_VAR 0 8
43109: PUSH
43110: LD_VAR 0 1
43114: PUSH
43115: LD_INT 1
43117: ARRAY
43118: PPUSH
43119: CALL_OW 255
43123: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43124: LD_ADDR_VAR 0 10
43128: PUSH
43129: LD_INT 29
43131: PUSH
43132: LD_INT 91
43134: PUSH
43135: LD_INT 49
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: ST_TO_ADDR
// if not result then
43143: LD_VAR 0 3
43147: NOT
43148: IFFALSE 43152
// exit ;
43150: GO 43608
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43152: LD_ADDR_VAR 0 5
43156: PUSH
43157: LD_INT 81
43159: PUSH
43160: LD_VAR 0 8
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PPUSH
43169: CALL_OW 69
43173: ST_TO_ADDR
// for i in result do
43174: LD_ADDR_VAR 0 4
43178: PUSH
43179: LD_VAR 0 3
43183: PUSH
43184: FOR_IN
43185: IFFALSE 43606
// begin tag := GetTag ( i ) + 1 ;
43187: LD_ADDR_VAR 0 9
43191: PUSH
43192: LD_VAR 0 4
43196: PPUSH
43197: CALL_OW 110
43201: PUSH
43202: LD_INT 1
43204: PLUS
43205: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43206: LD_ADDR_VAR 0 7
43210: PUSH
43211: LD_VAR 0 4
43215: PPUSH
43216: CALL_OW 250
43220: PPUSH
43221: LD_VAR 0 4
43225: PPUSH
43226: CALL_OW 251
43230: PPUSH
43231: LD_INT 6
43233: PPUSH
43234: CALL 42807 0 3
43238: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43239: LD_VAR 0 4
43243: PPUSH
43244: CALL_OW 247
43248: PUSH
43249: LD_INT 2
43251: EQUAL
43252: PUSH
43253: LD_VAR 0 7
43257: AND
43258: PUSH
43259: LD_VAR 0 4
43263: PPUSH
43264: CALL_OW 264
43268: PUSH
43269: LD_VAR 0 10
43273: IN
43274: NOT
43275: AND
43276: IFFALSE 43315
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43278: LD_VAR 0 4
43282: PPUSH
43283: LD_VAR 0 7
43287: PUSH
43288: LD_INT 1
43290: ARRAY
43291: PUSH
43292: LD_INT 1
43294: ARRAY
43295: PPUSH
43296: LD_VAR 0 7
43300: PUSH
43301: LD_INT 1
43303: ARRAY
43304: PUSH
43305: LD_INT 2
43307: ARRAY
43308: PPUSH
43309: CALL_OW 116
43313: GO 43604
// if path > tag then
43315: LD_VAR 0 2
43319: PUSH
43320: LD_VAR 0 9
43324: GREATER
43325: IFFALSE 43533
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43327: LD_ADDR_VAR 0 6
43331: PUSH
43332: LD_VAR 0 5
43336: PPUSH
43337: LD_INT 91
43339: PUSH
43340: LD_VAR 0 4
43344: PUSH
43345: LD_INT 8
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: LIST
43352: PPUSH
43353: CALL_OW 72
43357: ST_TO_ADDR
// if nearEnemy then
43358: LD_VAR 0 6
43362: IFFALSE 43431
// begin if GetWeapon ( i ) = ru_time_lapser then
43364: LD_VAR 0 4
43368: PPUSH
43369: CALL_OW 264
43373: PUSH
43374: LD_INT 49
43376: EQUAL
43377: IFFALSE 43405
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43379: LD_VAR 0 4
43383: PPUSH
43384: LD_VAR 0 6
43388: PPUSH
43389: LD_VAR 0 4
43393: PPUSH
43394: CALL_OW 74
43398: PPUSH
43399: CALL_OW 112
43403: GO 43429
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43405: LD_VAR 0 4
43409: PPUSH
43410: LD_VAR 0 6
43414: PPUSH
43415: LD_VAR 0 4
43419: PPUSH
43420: CALL_OW 74
43424: PPUSH
43425: CALL 44533 0 2
// end else
43429: GO 43531
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43431: LD_VAR 0 4
43435: PPUSH
43436: LD_VAR 0 2
43440: PUSH
43441: LD_VAR 0 9
43445: ARRAY
43446: PUSH
43447: LD_INT 1
43449: ARRAY
43450: PPUSH
43451: LD_VAR 0 2
43455: PUSH
43456: LD_VAR 0 9
43460: ARRAY
43461: PUSH
43462: LD_INT 2
43464: ARRAY
43465: PPUSH
43466: CALL_OW 297
43470: PUSH
43471: LD_INT 6
43473: GREATER
43474: IFFALSE 43517
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43476: LD_VAR 0 4
43480: PPUSH
43481: LD_VAR 0 2
43485: PUSH
43486: LD_VAR 0 9
43490: ARRAY
43491: PUSH
43492: LD_INT 1
43494: ARRAY
43495: PPUSH
43496: LD_VAR 0 2
43500: PUSH
43501: LD_VAR 0 9
43505: ARRAY
43506: PUSH
43507: LD_INT 2
43509: ARRAY
43510: PPUSH
43511: CALL_OW 114
43515: GO 43531
// SetTag ( i , tag ) ;
43517: LD_VAR 0 4
43521: PPUSH
43522: LD_VAR 0 9
43526: PPUSH
43527: CALL_OW 109
// end else
43531: GO 43604
// if enemy then
43533: LD_VAR 0 5
43537: IFFALSE 43604
// begin if GetWeapon ( i ) = ru_time_lapser then
43539: LD_VAR 0 4
43543: PPUSH
43544: CALL_OW 264
43548: PUSH
43549: LD_INT 49
43551: EQUAL
43552: IFFALSE 43580
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43554: LD_VAR 0 4
43558: PPUSH
43559: LD_VAR 0 5
43563: PPUSH
43564: LD_VAR 0 4
43568: PPUSH
43569: CALL_OW 74
43573: PPUSH
43574: CALL_OW 112
43578: GO 43604
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43580: LD_VAR 0 4
43584: PPUSH
43585: LD_VAR 0 5
43589: PPUSH
43590: LD_VAR 0 4
43594: PPUSH
43595: CALL_OW 74
43599: PPUSH
43600: CALL 44533 0 2
// end ; end ;
43604: GO 43184
43606: POP
43607: POP
// end ;
43608: LD_VAR 0 3
43612: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43613: LD_INT 0
43615: PPUSH
43616: PPUSH
43617: PPUSH
// if not unit or IsInUnit ( unit ) then
43618: LD_VAR 0 1
43622: NOT
43623: PUSH
43624: LD_VAR 0 1
43628: PPUSH
43629: CALL_OW 310
43633: OR
43634: IFFALSE 43638
// exit ;
43636: GO 43729
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43638: LD_ADDR_VAR 0 4
43642: PUSH
43643: LD_VAR 0 1
43647: PPUSH
43648: CALL_OW 250
43652: PPUSH
43653: LD_VAR 0 2
43657: PPUSH
43658: LD_INT 1
43660: PPUSH
43661: CALL_OW 272
43665: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43666: LD_ADDR_VAR 0 5
43670: PUSH
43671: LD_VAR 0 1
43675: PPUSH
43676: CALL_OW 251
43680: PPUSH
43681: LD_VAR 0 2
43685: PPUSH
43686: LD_INT 1
43688: PPUSH
43689: CALL_OW 273
43693: ST_TO_ADDR
// if ValidHex ( x , y ) then
43694: LD_VAR 0 4
43698: PPUSH
43699: LD_VAR 0 5
43703: PPUSH
43704: CALL_OW 488
43708: IFFALSE 43729
// ComTurnXY ( unit , x , y ) ;
43710: LD_VAR 0 1
43714: PPUSH
43715: LD_VAR 0 4
43719: PPUSH
43720: LD_VAR 0 5
43724: PPUSH
43725: CALL_OW 118
// end ;
43729: LD_VAR 0 3
43733: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43734: LD_INT 0
43736: PPUSH
43737: PPUSH
// result := false ;
43738: LD_ADDR_VAR 0 3
43742: PUSH
43743: LD_INT 0
43745: ST_TO_ADDR
// if not units then
43746: LD_VAR 0 2
43750: NOT
43751: IFFALSE 43755
// exit ;
43753: GO 43800
// for i in units do
43755: LD_ADDR_VAR 0 4
43759: PUSH
43760: LD_VAR 0 2
43764: PUSH
43765: FOR_IN
43766: IFFALSE 43798
// if See ( side , i ) then
43768: LD_VAR 0 1
43772: PPUSH
43773: LD_VAR 0 4
43777: PPUSH
43778: CALL_OW 292
43782: IFFALSE 43796
// begin result := true ;
43784: LD_ADDR_VAR 0 3
43788: PUSH
43789: LD_INT 1
43791: ST_TO_ADDR
// exit ;
43792: POP
43793: POP
43794: GO 43800
// end ;
43796: GO 43765
43798: POP
43799: POP
// end ;
43800: LD_VAR 0 3
43804: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43805: LD_INT 0
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
// if not unit or not points then
43811: LD_VAR 0 1
43815: NOT
43816: PUSH
43817: LD_VAR 0 2
43821: NOT
43822: OR
43823: IFFALSE 43827
// exit ;
43825: GO 43917
// dist := 99999 ;
43827: LD_ADDR_VAR 0 5
43831: PUSH
43832: LD_INT 99999
43834: ST_TO_ADDR
// for i in points do
43835: LD_ADDR_VAR 0 4
43839: PUSH
43840: LD_VAR 0 2
43844: PUSH
43845: FOR_IN
43846: IFFALSE 43915
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43848: LD_ADDR_VAR 0 6
43852: PUSH
43853: LD_VAR 0 1
43857: PPUSH
43858: LD_VAR 0 4
43862: PUSH
43863: LD_INT 1
43865: ARRAY
43866: PPUSH
43867: LD_VAR 0 4
43871: PUSH
43872: LD_INT 2
43874: ARRAY
43875: PPUSH
43876: CALL_OW 297
43880: ST_TO_ADDR
// if tmpDist < dist then
43881: LD_VAR 0 6
43885: PUSH
43886: LD_VAR 0 5
43890: LESS
43891: IFFALSE 43913
// begin result := i ;
43893: LD_ADDR_VAR 0 3
43897: PUSH
43898: LD_VAR 0 4
43902: ST_TO_ADDR
// dist := tmpDist ;
43903: LD_ADDR_VAR 0 5
43907: PUSH
43908: LD_VAR 0 6
43912: ST_TO_ADDR
// end ; end ;
43913: GO 43845
43915: POP
43916: POP
// end ;
43917: LD_VAR 0 3
43921: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43922: LD_INT 0
43924: PPUSH
// uc_side := side ;
43925: LD_ADDR_OWVAR 20
43929: PUSH
43930: LD_VAR 0 1
43934: ST_TO_ADDR
// uc_nation := 3 ;
43935: LD_ADDR_OWVAR 21
43939: PUSH
43940: LD_INT 3
43942: ST_TO_ADDR
// vc_chassis := 25 ;
43943: LD_ADDR_OWVAR 37
43947: PUSH
43948: LD_INT 25
43950: ST_TO_ADDR
// vc_engine := engine_siberite ;
43951: LD_ADDR_OWVAR 39
43955: PUSH
43956: LD_INT 3
43958: ST_TO_ADDR
// vc_control := control_computer ;
43959: LD_ADDR_OWVAR 38
43963: PUSH
43964: LD_INT 3
43966: ST_TO_ADDR
// vc_weapon := 59 ;
43967: LD_ADDR_OWVAR 40
43971: PUSH
43972: LD_INT 59
43974: ST_TO_ADDR
// result := CreateVehicle ;
43975: LD_ADDR_VAR 0 5
43979: PUSH
43980: CALL_OW 45
43984: ST_TO_ADDR
// SetDir ( result , d ) ;
43985: LD_VAR 0 5
43989: PPUSH
43990: LD_VAR 0 4
43994: PPUSH
43995: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43999: LD_VAR 0 5
44003: PPUSH
44004: LD_VAR 0 2
44008: PPUSH
44009: LD_VAR 0 3
44013: PPUSH
44014: LD_INT 0
44016: PPUSH
44017: CALL_OW 48
// end ;
44021: LD_VAR 0 5
44025: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44026: LD_INT 0
44028: PPUSH
44029: PPUSH
44030: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44031: LD_ADDR_VAR 0 2
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44054: LD_VAR 0 1
44058: NOT
44059: PUSH
44060: LD_VAR 0 1
44064: PPUSH
44065: CALL_OW 264
44069: PUSH
44070: LD_INT 12
44072: PUSH
44073: LD_INT 51
44075: PUSH
44076: LD_INT 32
44078: PUSH
44079: LD_INT 89
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: IN
44088: NOT
44089: OR
44090: IFFALSE 44094
// exit ;
44092: GO 44192
// for i := 1 to 3 do
44094: LD_ADDR_VAR 0 3
44098: PUSH
44099: DOUBLE
44100: LD_INT 1
44102: DEC
44103: ST_TO_ADDR
44104: LD_INT 3
44106: PUSH
44107: FOR_TO
44108: IFFALSE 44190
// begin tmp := GetCargo ( cargo , i ) ;
44110: LD_ADDR_VAR 0 4
44114: PUSH
44115: LD_VAR 0 1
44119: PPUSH
44120: LD_VAR 0 3
44124: PPUSH
44125: CALL_OW 289
44129: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44130: LD_ADDR_VAR 0 2
44134: PUSH
44135: LD_VAR 0 2
44139: PPUSH
44140: LD_VAR 0 3
44144: PPUSH
44145: LD_VAR 0 4
44149: PPUSH
44150: CALL_OW 1
44154: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44155: LD_ADDR_VAR 0 2
44159: PUSH
44160: LD_VAR 0 2
44164: PPUSH
44165: LD_INT 4
44167: PPUSH
44168: LD_VAR 0 2
44172: PUSH
44173: LD_INT 4
44175: ARRAY
44176: PUSH
44177: LD_VAR 0 4
44181: PLUS
44182: PPUSH
44183: CALL_OW 1
44187: ST_TO_ADDR
// end ;
44188: GO 44107
44190: POP
44191: POP
// end ;
44192: LD_VAR 0 2
44196: RET
// export function Length ( array ) ; begin
44197: LD_INT 0
44199: PPUSH
// result := array + 0 ;
44200: LD_ADDR_VAR 0 2
44204: PUSH
44205: LD_VAR 0 1
44209: PUSH
44210: LD_INT 0
44212: PLUS
44213: ST_TO_ADDR
// end ;
44214: LD_VAR 0 2
44218: RET
// export function PrepareArray ( array ) ; begin
44219: LD_INT 0
44221: PPUSH
// result := array diff 0 ;
44222: LD_ADDR_VAR 0 2
44226: PUSH
44227: LD_VAR 0 1
44231: PUSH
44232: LD_INT 0
44234: DIFF
44235: ST_TO_ADDR
// if not result [ 1 ] then
44236: LD_VAR 0 2
44240: PUSH
44241: LD_INT 1
44243: ARRAY
44244: NOT
44245: IFFALSE 44265
// result := Delete ( result , 1 ) ;
44247: LD_ADDR_VAR 0 2
44251: PUSH
44252: LD_VAR 0 2
44256: PPUSH
44257: LD_INT 1
44259: PPUSH
44260: CALL_OW 3
44264: ST_TO_ADDR
// end ;
44265: LD_VAR 0 2
44269: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44270: LD_INT 0
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
// sibRocketRange := 25 ;
44276: LD_ADDR_VAR 0 6
44280: PUSH
44281: LD_INT 25
44283: ST_TO_ADDR
// result := false ;
44284: LD_ADDR_VAR 0 4
44288: PUSH
44289: LD_INT 0
44291: ST_TO_ADDR
// for i := 0 to 5 do
44292: LD_ADDR_VAR 0 5
44296: PUSH
44297: DOUBLE
44298: LD_INT 0
44300: DEC
44301: ST_TO_ADDR
44302: LD_INT 5
44304: PUSH
44305: FOR_TO
44306: IFFALSE 44373
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44308: LD_VAR 0 1
44312: PPUSH
44313: LD_VAR 0 5
44317: PPUSH
44318: LD_VAR 0 6
44322: PPUSH
44323: CALL_OW 272
44327: PPUSH
44328: LD_VAR 0 2
44332: PPUSH
44333: LD_VAR 0 5
44337: PPUSH
44338: LD_VAR 0 6
44342: PPUSH
44343: CALL_OW 273
44347: PPUSH
44348: LD_VAR 0 3
44352: PPUSH
44353: CALL_OW 309
44357: IFFALSE 44371
// begin result := true ;
44359: LD_ADDR_VAR 0 4
44363: PUSH
44364: LD_INT 1
44366: ST_TO_ADDR
// exit ;
44367: POP
44368: POP
44369: GO 44375
// end ;
44371: GO 44305
44373: POP
44374: POP
// end ;
44375: LD_VAR 0 4
44379: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44380: LD_INT 0
44382: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44383: LD_VAR 0 1
44387: PPUSH
44388: LD_VAR 0 2
44392: PPUSH
44393: LD_INT 0
44395: PPUSH
44396: LD_INT 0
44398: PPUSH
44399: LD_INT 1
44401: PPUSH
44402: LD_INT 0
44404: PPUSH
44405: CALL_OW 587
// end ;
44409: LD_VAR 0 3
44413: RET
// export function CenterOnNow ( unit ) ; begin
44414: LD_INT 0
44416: PPUSH
// result := IsInUnit ( unit ) ;
44417: LD_ADDR_VAR 0 2
44421: PUSH
44422: LD_VAR 0 1
44426: PPUSH
44427: CALL_OW 310
44431: ST_TO_ADDR
// if not result then
44432: LD_VAR 0 2
44436: NOT
44437: IFFALSE 44449
// result := unit ;
44439: LD_ADDR_VAR 0 2
44443: PUSH
44444: LD_VAR 0 1
44448: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44449: LD_VAR 0 1
44453: PPUSH
44454: CALL_OW 87
// end ;
44458: LD_VAR 0 2
44462: RET
// export function ComMoveHex ( unit , hex ) ; begin
44463: LD_INT 0
44465: PPUSH
// if not hex then
44466: LD_VAR 0 2
44470: NOT
44471: IFFALSE 44475
// exit ;
44473: GO 44528
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44475: LD_VAR 0 2
44479: PUSH
44480: LD_INT 1
44482: ARRAY
44483: PPUSH
44484: LD_VAR 0 2
44488: PUSH
44489: LD_INT 2
44491: ARRAY
44492: PPUSH
44493: CALL_OW 428
44497: IFFALSE 44501
// exit ;
44499: GO 44528
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44501: LD_VAR 0 1
44505: PPUSH
44506: LD_VAR 0 2
44510: PUSH
44511: LD_INT 1
44513: ARRAY
44514: PPUSH
44515: LD_VAR 0 2
44519: PUSH
44520: LD_INT 2
44522: ARRAY
44523: PPUSH
44524: CALL_OW 111
// end ;
44528: LD_VAR 0 3
44532: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44533: LD_INT 0
44535: PPUSH
44536: PPUSH
44537: PPUSH
// if not unit or not enemy then
44538: LD_VAR 0 1
44542: NOT
44543: PUSH
44544: LD_VAR 0 2
44548: NOT
44549: OR
44550: IFFALSE 44554
// exit ;
44552: GO 44678
// x := GetX ( enemy ) ;
44554: LD_ADDR_VAR 0 4
44558: PUSH
44559: LD_VAR 0 2
44563: PPUSH
44564: CALL_OW 250
44568: ST_TO_ADDR
// y := GetY ( enemy ) ;
44569: LD_ADDR_VAR 0 5
44573: PUSH
44574: LD_VAR 0 2
44578: PPUSH
44579: CALL_OW 251
44583: ST_TO_ADDR
// if ValidHex ( x , y ) then
44584: LD_VAR 0 4
44588: PPUSH
44589: LD_VAR 0 5
44593: PPUSH
44594: CALL_OW 488
44598: IFFALSE 44678
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44600: LD_VAR 0 2
44604: PPUSH
44605: CALL_OW 247
44609: PUSH
44610: LD_INT 3
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: IN
44620: PUSH
44621: LD_VAR 0 1
44625: PPUSH
44626: CALL_OW 255
44630: PPUSH
44631: LD_VAR 0 2
44635: PPUSH
44636: CALL_OW 292
44640: OR
44641: IFFALSE 44659
// ComAttackUnit ( unit , enemy ) else
44643: LD_VAR 0 1
44647: PPUSH
44648: LD_VAR 0 2
44652: PPUSH
44653: CALL_OW 115
44657: GO 44678
// ComAgressiveMove ( unit , x , y ) ;
44659: LD_VAR 0 1
44663: PPUSH
44664: LD_VAR 0 4
44668: PPUSH
44669: LD_VAR 0 5
44673: PPUSH
44674: CALL_OW 114
// end ;
44678: LD_VAR 0 3
44682: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44683: LD_INT 0
44685: PPUSH
44686: PPUSH
44687: PPUSH
// list := AreaToList ( area , 0 ) ;
44688: LD_ADDR_VAR 0 5
44692: PUSH
44693: LD_VAR 0 1
44697: PPUSH
44698: LD_INT 0
44700: PPUSH
44701: CALL_OW 517
44705: ST_TO_ADDR
// if not list then
44706: LD_VAR 0 5
44710: NOT
44711: IFFALSE 44715
// exit ;
44713: GO 44845
// if all then
44715: LD_VAR 0 2
44719: IFFALSE 44807
// begin for i := 1 to list [ 1 ] do
44721: LD_ADDR_VAR 0 4
44725: PUSH
44726: DOUBLE
44727: LD_INT 1
44729: DEC
44730: ST_TO_ADDR
44731: LD_VAR 0 5
44735: PUSH
44736: LD_INT 1
44738: ARRAY
44739: PUSH
44740: FOR_TO
44741: IFFALSE 44803
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44743: LD_ADDR_VAR 0 3
44747: PUSH
44748: LD_VAR 0 3
44752: PPUSH
44753: LD_VAR 0 3
44757: PUSH
44758: LD_INT 1
44760: PLUS
44761: PPUSH
44762: LD_VAR 0 5
44766: PUSH
44767: LD_INT 1
44769: ARRAY
44770: PUSH
44771: LD_VAR 0 4
44775: ARRAY
44776: PUSH
44777: LD_VAR 0 5
44781: PUSH
44782: LD_INT 2
44784: ARRAY
44785: PUSH
44786: LD_VAR 0 4
44790: ARRAY
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PPUSH
44796: CALL_OW 1
44800: ST_TO_ADDR
44801: GO 44740
44803: POP
44804: POP
// exit ;
44805: GO 44845
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44807: LD_ADDR_VAR 0 3
44811: PUSH
44812: LD_VAR 0 5
44816: PUSH
44817: LD_INT 1
44819: ARRAY
44820: PUSH
44821: LD_INT 1
44823: ARRAY
44824: PUSH
44825: LD_VAR 0 5
44829: PUSH
44830: LD_INT 2
44832: ARRAY
44833: PUSH
44834: LD_INT 1
44836: ARRAY
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: EMPTY
44843: LIST
44844: ST_TO_ADDR
// end ;
44845: LD_VAR 0 3
44849: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44850: LD_INT 0
44852: PPUSH
44853: PPUSH
// list := AreaToList ( area , 0 ) ;
44854: LD_ADDR_VAR 0 4
44858: PUSH
44859: LD_VAR 0 1
44863: PPUSH
44864: LD_INT 0
44866: PPUSH
44867: CALL_OW 517
44871: ST_TO_ADDR
// if not list then
44872: LD_VAR 0 4
44876: NOT
44877: IFFALSE 44881
// exit ;
44879: GO 44922
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_VAR 0 4
44890: PUSH
44891: LD_INT 1
44893: ARRAY
44894: PUSH
44895: LD_INT 1
44897: ARRAY
44898: PUSH
44899: LD_VAR 0 4
44903: PUSH
44904: LD_INT 2
44906: ARRAY
44907: PUSH
44908: LD_INT 1
44910: ARRAY
44911: PUSH
44912: LD_VAR 0 2
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: ST_TO_ADDR
// end ;
44922: LD_VAR 0 3
44926: RET
// export function First ( array ) ; begin
44927: LD_INT 0
44929: PPUSH
// if not array then
44930: LD_VAR 0 1
44934: NOT
44935: IFFALSE 44939
// exit ;
44937: GO 44953
// result := array [ 1 ] ;
44939: LD_ADDR_VAR 0 2
44943: PUSH
44944: LD_VAR 0 1
44948: PUSH
44949: LD_INT 1
44951: ARRAY
44952: ST_TO_ADDR
// end ;
44953: LD_VAR 0 2
44957: RET
// export function Last ( array ) ; begin
44958: LD_INT 0
44960: PPUSH
// if not array then
44961: LD_VAR 0 1
44965: NOT
44966: IFFALSE 44970
// exit ;
44968: GO 44986
// result := array [ array ] ;
44970: LD_ADDR_VAR 0 2
44974: PUSH
44975: LD_VAR 0 1
44979: PUSH
44980: LD_VAR 0 1
44984: ARRAY
44985: ST_TO_ADDR
// end ;
44986: LD_VAR 0 2
44990: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44991: LD_INT 0
44993: PPUSH
44994: PPUSH
// result := [ ] ;
44995: LD_ADDR_VAR 0 5
44999: PUSH
45000: EMPTY
45001: ST_TO_ADDR
// if not array then
45002: LD_VAR 0 1
45006: NOT
45007: IFFALSE 45011
// exit ;
45009: GO 45123
// for i := 1 to array do
45011: LD_ADDR_VAR 0 6
45015: PUSH
45016: DOUBLE
45017: LD_INT 1
45019: DEC
45020: ST_TO_ADDR
45021: LD_VAR 0 1
45025: PUSH
45026: FOR_TO
45027: IFFALSE 45121
// if array [ i ] [ index ] = value then
45029: LD_VAR 0 1
45033: PUSH
45034: LD_VAR 0 6
45038: ARRAY
45039: PUSH
45040: LD_VAR 0 2
45044: ARRAY
45045: PUSH
45046: LD_VAR 0 3
45050: EQUAL
45051: IFFALSE 45119
// begin if indexColumn then
45053: LD_VAR 0 4
45057: IFFALSE 45093
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45059: LD_ADDR_VAR 0 5
45063: PUSH
45064: LD_VAR 0 5
45068: PPUSH
45069: LD_VAR 0 1
45073: PUSH
45074: LD_VAR 0 6
45078: ARRAY
45079: PUSH
45080: LD_VAR 0 4
45084: ARRAY
45085: PPUSH
45086: CALL 40461 0 2
45090: ST_TO_ADDR
45091: GO 45119
// result := Join ( result , array [ i ] ) ;
45093: LD_ADDR_VAR 0 5
45097: PUSH
45098: LD_VAR 0 5
45102: PPUSH
45103: LD_VAR 0 1
45107: PUSH
45108: LD_VAR 0 6
45112: ARRAY
45113: PPUSH
45114: CALL 40461 0 2
45118: ST_TO_ADDR
// end ;
45119: GO 45026
45121: POP
45122: POP
// end ;
45123: LD_VAR 0 5
45127: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45128: LD_INT 0
45130: PPUSH
45131: PPUSH
45132: PPUSH
// if btype = b_depot then
45133: LD_VAR 0 2
45137: PUSH
45138: LD_INT 0
45140: EQUAL
45141: IFFALSE 45153
// begin result := true ;
45143: LD_ADDR_VAR 0 3
45147: PUSH
45148: LD_INT 1
45150: ST_TO_ADDR
// exit ;
45151: GO 45269
// end ; pom := GetBase ( depot ) ;
45153: LD_ADDR_VAR 0 4
45157: PUSH
45158: LD_VAR 0 1
45162: PPUSH
45163: CALL_OW 274
45167: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45168: LD_ADDR_VAR 0 5
45172: PUSH
45173: LD_VAR 0 2
45177: PPUSH
45178: LD_VAR 0 1
45182: PPUSH
45183: CALL_OW 248
45187: PPUSH
45188: CALL_OW 450
45192: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45193: LD_ADDR_VAR 0 3
45197: PUSH
45198: LD_VAR 0 4
45202: PPUSH
45203: LD_INT 1
45205: PPUSH
45206: CALL_OW 275
45210: PUSH
45211: LD_VAR 0 5
45215: PUSH
45216: LD_INT 1
45218: ARRAY
45219: GREATEREQUAL
45220: PUSH
45221: LD_VAR 0 4
45225: PPUSH
45226: LD_INT 2
45228: PPUSH
45229: CALL_OW 275
45233: PUSH
45234: LD_VAR 0 5
45238: PUSH
45239: LD_INT 2
45241: ARRAY
45242: GREATEREQUAL
45243: AND
45244: PUSH
45245: LD_VAR 0 4
45249: PPUSH
45250: LD_INT 3
45252: PPUSH
45253: CALL_OW 275
45257: PUSH
45258: LD_VAR 0 5
45262: PUSH
45263: LD_INT 3
45265: ARRAY
45266: GREATEREQUAL
45267: AND
45268: ST_TO_ADDR
// end ;
45269: LD_VAR 0 3
45273: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45274: LD_INT 0
45276: PPUSH
// if not vehicles or not parkingPoint then
45277: LD_VAR 0 1
45281: NOT
45282: PUSH
45283: LD_VAR 0 2
45287: NOT
45288: OR
45289: IFFALSE 45293
// exit ;
45291: GO 45391
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45293: LD_ADDR_VAR 0 1
45297: PUSH
45298: LD_VAR 0 1
45302: PPUSH
45303: LD_INT 50
45305: PUSH
45306: EMPTY
45307: LIST
45308: PUSH
45309: LD_INT 3
45311: PUSH
45312: LD_INT 92
45314: PUSH
45315: LD_VAR 0 2
45319: PUSH
45320: LD_INT 1
45322: ARRAY
45323: PUSH
45324: LD_VAR 0 2
45328: PUSH
45329: LD_INT 2
45331: ARRAY
45332: PUSH
45333: LD_INT 8
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PPUSH
45350: CALL_OW 72
45354: ST_TO_ADDR
// if not vehicles then
45355: LD_VAR 0 1
45359: NOT
45360: IFFALSE 45364
// exit ;
45362: GO 45391
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45364: LD_VAR 0 1
45368: PPUSH
45369: LD_VAR 0 2
45373: PUSH
45374: LD_INT 1
45376: ARRAY
45377: PPUSH
45378: LD_VAR 0 2
45382: PUSH
45383: LD_INT 2
45385: ARRAY
45386: PPUSH
45387: CALL_OW 111
// end ;
45391: LD_VAR 0 3
45395: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45396: LD_INT 0
45398: PPUSH
45399: PPUSH
45400: PPUSH
// if not side or not area then
45401: LD_VAR 0 1
45405: NOT
45406: PUSH
45407: LD_VAR 0 2
45411: NOT
45412: OR
45413: IFFALSE 45417
// exit ;
45415: GO 45536
// tmp := AreaToList ( area , 0 ) ;
45417: LD_ADDR_VAR 0 5
45421: PUSH
45422: LD_VAR 0 2
45426: PPUSH
45427: LD_INT 0
45429: PPUSH
45430: CALL_OW 517
45434: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45435: LD_ADDR_VAR 0 4
45439: PUSH
45440: DOUBLE
45441: LD_INT 1
45443: DEC
45444: ST_TO_ADDR
45445: LD_VAR 0 5
45449: PUSH
45450: LD_INT 1
45452: ARRAY
45453: PUSH
45454: FOR_TO
45455: IFFALSE 45534
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45457: LD_VAR 0 5
45461: PUSH
45462: LD_INT 1
45464: ARRAY
45465: PUSH
45466: LD_VAR 0 4
45470: ARRAY
45471: PPUSH
45472: LD_VAR 0 5
45476: PUSH
45477: LD_INT 2
45479: ARRAY
45480: PUSH
45481: LD_VAR 0 4
45485: ARRAY
45486: PPUSH
45487: CALL_OW 351
45491: IFFALSE 45532
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45493: LD_VAR 0 5
45497: PUSH
45498: LD_INT 1
45500: ARRAY
45501: PUSH
45502: LD_VAR 0 4
45506: ARRAY
45507: PPUSH
45508: LD_VAR 0 5
45512: PUSH
45513: LD_INT 2
45515: ARRAY
45516: PUSH
45517: LD_VAR 0 4
45521: ARRAY
45522: PPUSH
45523: LD_VAR 0 1
45527: PPUSH
45528: CALL_OW 244
// end ;
45532: GO 45454
45534: POP
45535: POP
// end ; end_of_file
45536: LD_VAR 0 3
45540: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
45541: LD_INT 0
45543: PPUSH
45544: PPUSH
45545: PPUSH
45546: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
45547: LD_VAR 0 1
45551: PPUSH
45552: CALL_OW 264
45556: PUSH
45557: LD_INT 91
45559: EQUAL
45560: IFFALSE 45632
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
45562: LD_INT 68
45564: PPUSH
45565: LD_VAR 0 1
45569: PPUSH
45570: CALL_OW 255
45574: PPUSH
45575: CALL_OW 321
45579: PUSH
45580: LD_INT 2
45582: EQUAL
45583: IFFALSE 45595
// eff := 70 else
45585: LD_ADDR_VAR 0 4
45589: PUSH
45590: LD_INT 70
45592: ST_TO_ADDR
45593: GO 45603
// eff := 30 ;
45595: LD_ADDR_VAR 0 4
45599: PUSH
45600: LD_INT 30
45602: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
45603: LD_VAR 0 1
45607: PPUSH
45608: CALL_OW 250
45612: PPUSH
45613: LD_VAR 0 1
45617: PPUSH
45618: CALL_OW 251
45622: PPUSH
45623: LD_VAR 0 4
45627: PPUSH
45628: CALL_OW 495
// end ; end ;
45632: LD_VAR 0 2
45636: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
45637: LD_INT 0
45639: PPUSH
// end ;
45640: LD_VAR 0 4
45644: RET
// export function SOS_Command ( cmd ) ; begin
45645: LD_INT 0
45647: PPUSH
// end ;
45648: LD_VAR 0 2
45652: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
45653: LD_INT 0
45655: PPUSH
// end ;
45656: LD_VAR 0 6
45660: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
45661: LD_INT 0
45663: PPUSH
45664: PPUSH
// if not vehicle or not factory then
45665: LD_VAR 0 1
45669: NOT
45670: PUSH
45671: LD_VAR 0 2
45675: NOT
45676: OR
45677: IFFALSE 45681
// exit ;
45679: GO 45912
// if factoryWaypoints >= factory then
45681: LD_EXP 78
45685: PUSH
45686: LD_VAR 0 2
45690: GREATEREQUAL
45691: IFFALSE 45912
// if factoryWaypoints [ factory ] then
45693: LD_EXP 78
45697: PUSH
45698: LD_VAR 0 2
45702: ARRAY
45703: IFFALSE 45912
// begin if GetControl ( vehicle ) = control_manual then
45705: LD_VAR 0 1
45709: PPUSH
45710: CALL_OW 263
45714: PUSH
45715: LD_INT 1
45717: EQUAL
45718: IFFALSE 45799
// begin driver := IsDrivenBy ( vehicle ) ;
45720: LD_ADDR_VAR 0 4
45724: PUSH
45725: LD_VAR 0 1
45729: PPUSH
45730: CALL_OW 311
45734: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45735: LD_VAR 0 4
45739: PPUSH
45740: LD_EXP 78
45744: PUSH
45745: LD_VAR 0 2
45749: ARRAY
45750: PUSH
45751: LD_INT 3
45753: ARRAY
45754: PPUSH
45755: LD_EXP 78
45759: PUSH
45760: LD_VAR 0 2
45764: ARRAY
45765: PUSH
45766: LD_INT 4
45768: ARRAY
45769: PPUSH
45770: CALL_OW 171
// AddComExitVehicle ( driver ) ;
45774: LD_VAR 0 4
45778: PPUSH
45779: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
45783: LD_VAR 0 4
45787: PPUSH
45788: LD_VAR 0 2
45792: PPUSH
45793: CALL_OW 180
// end else
45797: GO 45912
// if GetControl ( vehicle ) = control_remote then
45799: LD_VAR 0 1
45803: PPUSH
45804: CALL_OW 263
45808: PUSH
45809: LD_INT 2
45811: EQUAL
45812: IFFALSE 45873
// begin wait ( 0 0$2 ) ;
45814: LD_INT 70
45816: PPUSH
45817: CALL_OW 67
// if Connect ( vehicle ) then
45821: LD_VAR 0 1
45825: PPUSH
45826: CALL 11078 0 1
45830: IFFALSE 45871
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45832: LD_VAR 0 1
45836: PPUSH
45837: LD_EXP 78
45841: PUSH
45842: LD_VAR 0 2
45846: ARRAY
45847: PUSH
45848: LD_INT 3
45850: ARRAY
45851: PPUSH
45852: LD_EXP 78
45856: PUSH
45857: LD_VAR 0 2
45861: ARRAY
45862: PUSH
45863: LD_INT 4
45865: ARRAY
45866: PPUSH
45867: CALL_OW 171
// end else
45871: GO 45912
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45873: LD_VAR 0 1
45877: PPUSH
45878: LD_EXP 78
45882: PUSH
45883: LD_VAR 0 2
45887: ARRAY
45888: PUSH
45889: LD_INT 3
45891: ARRAY
45892: PPUSH
45893: LD_EXP 78
45897: PUSH
45898: LD_VAR 0 2
45902: ARRAY
45903: PUSH
45904: LD_INT 4
45906: ARRAY
45907: PPUSH
45908: CALL_OW 171
// end ; end ;
45912: LD_VAR 0 3
45916: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
45917: LD_INT 0
45919: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
45920: LD_VAR 0 1
45924: PUSH
45925: LD_INT 250
45927: EQUAL
45928: PUSH
45929: LD_VAR 0 2
45933: PPUSH
45934: CALL_OW 264
45938: PUSH
45939: LD_INT 81
45941: EQUAL
45942: AND
45943: IFFALSE 45964
// MinerPlaceMine ( unit , x , y ) ;
45945: LD_VAR 0 2
45949: PPUSH
45950: LD_VAR 0 4
45954: PPUSH
45955: LD_VAR 0 5
45959: PPUSH
45960: CALL 48954 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
45964: LD_VAR 0 1
45968: PUSH
45969: LD_INT 251
45971: EQUAL
45972: PUSH
45973: LD_VAR 0 2
45977: PPUSH
45978: CALL_OW 264
45982: PUSH
45983: LD_INT 81
45985: EQUAL
45986: AND
45987: IFFALSE 46008
// MinerDetonateMine ( unit , x , y ) ;
45989: LD_VAR 0 2
45993: PPUSH
45994: LD_VAR 0 4
45998: PPUSH
45999: LD_VAR 0 5
46003: PPUSH
46004: CALL 49229 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
46008: LD_VAR 0 1
46012: PUSH
46013: LD_INT 252
46015: EQUAL
46016: PUSH
46017: LD_VAR 0 2
46021: PPUSH
46022: CALL_OW 264
46026: PUSH
46027: LD_INT 81
46029: EQUAL
46030: AND
46031: IFFALSE 46052
// MinerCreateMinefield ( unit , x , y ) ;
46033: LD_VAR 0 2
46037: PPUSH
46038: LD_VAR 0 4
46042: PPUSH
46043: LD_VAR 0 5
46047: PPUSH
46048: CALL 49646 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
46052: LD_VAR 0 1
46056: PUSH
46057: LD_INT 253
46059: EQUAL
46060: PUSH
46061: LD_VAR 0 2
46065: PPUSH
46066: CALL_OW 257
46070: PUSH
46071: LD_INT 5
46073: EQUAL
46074: AND
46075: IFFALSE 46096
// ComBinocular ( unit , x , y ) ;
46077: LD_VAR 0 2
46081: PPUSH
46082: LD_VAR 0 4
46086: PPUSH
46087: LD_VAR 0 5
46091: PPUSH
46092: CALL 50015 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
46096: LD_VAR 0 1
46100: PUSH
46101: LD_INT 254
46103: EQUAL
46104: PUSH
46105: LD_VAR 0 2
46109: PPUSH
46110: CALL_OW 264
46114: PUSH
46115: LD_INT 99
46117: EQUAL
46118: AND
46119: PUSH
46120: LD_VAR 0 3
46124: PPUSH
46125: CALL_OW 263
46129: PUSH
46130: LD_INT 3
46132: EQUAL
46133: AND
46134: IFFALSE 46150
// HackDestroyVehicle ( unit , selectedUnit ) ;
46136: LD_VAR 0 2
46140: PPUSH
46141: LD_VAR 0 3
46145: PPUSH
46146: CALL 48318 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
46150: LD_VAR 0 1
46154: PUSH
46155: LD_INT 255
46157: EQUAL
46158: PUSH
46159: LD_VAR 0 2
46163: PPUSH
46164: CALL_OW 264
46168: PUSH
46169: LD_INT 14
46171: PUSH
46172: LD_INT 53
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: IN
46179: AND
46180: PUSH
46181: LD_VAR 0 4
46185: PPUSH
46186: LD_VAR 0 5
46190: PPUSH
46191: CALL_OW 488
46195: AND
46196: IFFALSE 46220
// CutTreeXYR ( unit , x , y , 12 ) ;
46198: LD_VAR 0 2
46202: PPUSH
46203: LD_VAR 0 4
46207: PPUSH
46208: LD_VAR 0 5
46212: PPUSH
46213: LD_INT 12
46215: PPUSH
46216: CALL 46315 0 4
// if cmd = 256 then
46220: LD_VAR 0 1
46224: PUSH
46225: LD_INT 256
46227: EQUAL
46228: IFFALSE 46249
// SetFactoryWaypoint ( unit , x , y ) ;
46230: LD_VAR 0 2
46234: PPUSH
46235: LD_VAR 0 4
46239: PPUSH
46240: LD_VAR 0 5
46244: PPUSH
46245: CALL 64943 0 3
// if cmd = 257 then
46249: LD_VAR 0 1
46253: PUSH
46254: LD_INT 257
46256: EQUAL
46257: IFFALSE 46278
// SetWarehouseGatheringPoint ( unit , x , y ) ;
46259: LD_VAR 0 2
46263: PPUSH
46264: LD_VAR 0 4
46268: PPUSH
46269: LD_VAR 0 5
46273: PPUSH
46274: CALL 65305 0 3
// if cmd = 258 then
46278: LD_VAR 0 1
46282: PUSH
46283: LD_INT 258
46285: EQUAL
46286: IFFALSE 46310
// BurnTreeXYR ( unit , x , y , 8 ) ;
46288: LD_VAR 0 2
46292: PPUSH
46293: LD_VAR 0 4
46297: PPUSH
46298: LD_VAR 0 5
46302: PPUSH
46303: LD_INT 8
46305: PPUSH
46306: CALL 46709 0 4
// end ;
46310: LD_VAR 0 6
46314: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46315: LD_INT 0
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
46323: PPUSH
46324: PPUSH
46325: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
46326: LD_VAR 0 1
46330: PPUSH
46331: CALL_OW 302
46335: NOT
46336: PUSH
46337: LD_VAR 0 2
46341: PPUSH
46342: LD_VAR 0 3
46346: PPUSH
46347: CALL_OW 488
46351: NOT
46352: OR
46353: PUSH
46354: LD_VAR 0 4
46358: NOT
46359: OR
46360: IFFALSE 46364
// exit ;
46362: GO 46704
// list := [ ] ;
46364: LD_ADDR_VAR 0 13
46368: PUSH
46369: EMPTY
46370: ST_TO_ADDR
// if x - r < 0 then
46371: LD_VAR 0 2
46375: PUSH
46376: LD_VAR 0 4
46380: MINUS
46381: PUSH
46382: LD_INT 0
46384: LESS
46385: IFFALSE 46397
// min_x := 0 else
46387: LD_ADDR_VAR 0 7
46391: PUSH
46392: LD_INT 0
46394: ST_TO_ADDR
46395: GO 46413
// min_x := x - r ;
46397: LD_ADDR_VAR 0 7
46401: PUSH
46402: LD_VAR 0 2
46406: PUSH
46407: LD_VAR 0 4
46411: MINUS
46412: ST_TO_ADDR
// if y - r < 0 then
46413: LD_VAR 0 3
46417: PUSH
46418: LD_VAR 0 4
46422: MINUS
46423: PUSH
46424: LD_INT 0
46426: LESS
46427: IFFALSE 46439
// min_y := 0 else
46429: LD_ADDR_VAR 0 8
46433: PUSH
46434: LD_INT 0
46436: ST_TO_ADDR
46437: GO 46455
// min_y := y - r ;
46439: LD_ADDR_VAR 0 8
46443: PUSH
46444: LD_VAR 0 3
46448: PUSH
46449: LD_VAR 0 4
46453: MINUS
46454: ST_TO_ADDR
// max_x := x + r ;
46455: LD_ADDR_VAR 0 9
46459: PUSH
46460: LD_VAR 0 2
46464: PUSH
46465: LD_VAR 0 4
46469: PLUS
46470: ST_TO_ADDR
// max_y := y + r ;
46471: LD_ADDR_VAR 0 10
46475: PUSH
46476: LD_VAR 0 3
46480: PUSH
46481: LD_VAR 0 4
46485: PLUS
46486: ST_TO_ADDR
// for _x = min_x to max_x do
46487: LD_ADDR_VAR 0 11
46491: PUSH
46492: DOUBLE
46493: LD_VAR 0 7
46497: DEC
46498: ST_TO_ADDR
46499: LD_VAR 0 9
46503: PUSH
46504: FOR_TO
46505: IFFALSE 46622
// for _y = min_y to max_y do
46507: LD_ADDR_VAR 0 12
46511: PUSH
46512: DOUBLE
46513: LD_VAR 0 8
46517: DEC
46518: ST_TO_ADDR
46519: LD_VAR 0 10
46523: PUSH
46524: FOR_TO
46525: IFFALSE 46618
// begin if not ValidHex ( _x , _y ) then
46527: LD_VAR 0 11
46531: PPUSH
46532: LD_VAR 0 12
46536: PPUSH
46537: CALL_OW 488
46541: NOT
46542: IFFALSE 46546
// continue ;
46544: GO 46524
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46546: LD_VAR 0 11
46550: PPUSH
46551: LD_VAR 0 12
46555: PPUSH
46556: CALL_OW 351
46560: PUSH
46561: LD_VAR 0 11
46565: PPUSH
46566: LD_VAR 0 12
46570: PPUSH
46571: CALL_OW 554
46575: AND
46576: IFFALSE 46616
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46578: LD_ADDR_VAR 0 13
46582: PUSH
46583: LD_VAR 0 13
46587: PPUSH
46588: LD_VAR 0 13
46592: PUSH
46593: LD_INT 1
46595: PLUS
46596: PPUSH
46597: LD_VAR 0 11
46601: PUSH
46602: LD_VAR 0 12
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PPUSH
46611: CALL_OW 2
46615: ST_TO_ADDR
// end ;
46616: GO 46524
46618: POP
46619: POP
46620: GO 46504
46622: POP
46623: POP
// if not list then
46624: LD_VAR 0 13
46628: NOT
46629: IFFALSE 46633
// exit ;
46631: GO 46704
// for i in list do
46633: LD_ADDR_VAR 0 6
46637: PUSH
46638: LD_VAR 0 13
46642: PUSH
46643: FOR_IN
46644: IFFALSE 46702
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
46646: LD_VAR 0 1
46650: PPUSH
46651: LD_STRING M
46653: PUSH
46654: LD_VAR 0 6
46658: PUSH
46659: LD_INT 1
46661: ARRAY
46662: PUSH
46663: LD_VAR 0 6
46667: PUSH
46668: LD_INT 2
46670: ARRAY
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: PUSH
46693: EMPTY
46694: LIST
46695: PPUSH
46696: CALL_OW 447
46700: GO 46643
46702: POP
46703: POP
// end ;
46704: LD_VAR 0 5
46708: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
46709: LD_INT 0
46711: PPUSH
46712: PPUSH
46713: PPUSH
46714: PPUSH
46715: PPUSH
46716: PPUSH
46717: PPUSH
46718: PPUSH
46719: PPUSH
46720: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
46721: LD_VAR 0 1
46725: PPUSH
46726: CALL_OW 302
46730: NOT
46731: PUSH
46732: LD_VAR 0 2
46736: PPUSH
46737: LD_VAR 0 3
46741: PPUSH
46742: CALL_OW 488
46746: NOT
46747: OR
46748: PUSH
46749: LD_VAR 0 4
46753: NOT
46754: OR
46755: IFFALSE 46759
// exit ;
46757: GO 47272
// list := [ ] ;
46759: LD_ADDR_VAR 0 13
46763: PUSH
46764: EMPTY
46765: ST_TO_ADDR
// if x - r < 0 then
46766: LD_VAR 0 2
46770: PUSH
46771: LD_VAR 0 4
46775: MINUS
46776: PUSH
46777: LD_INT 0
46779: LESS
46780: IFFALSE 46792
// min_x := 0 else
46782: LD_ADDR_VAR 0 7
46786: PUSH
46787: LD_INT 0
46789: ST_TO_ADDR
46790: GO 46808
// min_x := x - r ;
46792: LD_ADDR_VAR 0 7
46796: PUSH
46797: LD_VAR 0 2
46801: PUSH
46802: LD_VAR 0 4
46806: MINUS
46807: ST_TO_ADDR
// if y - r < 0 then
46808: LD_VAR 0 3
46812: PUSH
46813: LD_VAR 0 4
46817: MINUS
46818: PUSH
46819: LD_INT 0
46821: LESS
46822: IFFALSE 46834
// min_y := 0 else
46824: LD_ADDR_VAR 0 8
46828: PUSH
46829: LD_INT 0
46831: ST_TO_ADDR
46832: GO 46850
// min_y := y - r ;
46834: LD_ADDR_VAR 0 8
46838: PUSH
46839: LD_VAR 0 3
46843: PUSH
46844: LD_VAR 0 4
46848: MINUS
46849: ST_TO_ADDR
// max_x := x + r ;
46850: LD_ADDR_VAR 0 9
46854: PUSH
46855: LD_VAR 0 2
46859: PUSH
46860: LD_VAR 0 4
46864: PLUS
46865: ST_TO_ADDR
// max_y := y + r ;
46866: LD_ADDR_VAR 0 10
46870: PUSH
46871: LD_VAR 0 3
46875: PUSH
46876: LD_VAR 0 4
46880: PLUS
46881: ST_TO_ADDR
// for _x = min_x to max_x do
46882: LD_ADDR_VAR 0 11
46886: PUSH
46887: DOUBLE
46888: LD_VAR 0 7
46892: DEC
46893: ST_TO_ADDR
46894: LD_VAR 0 9
46898: PUSH
46899: FOR_TO
46900: IFFALSE 47017
// for _y = min_y to max_y do
46902: LD_ADDR_VAR 0 12
46906: PUSH
46907: DOUBLE
46908: LD_VAR 0 8
46912: DEC
46913: ST_TO_ADDR
46914: LD_VAR 0 10
46918: PUSH
46919: FOR_TO
46920: IFFALSE 47013
// begin if not ValidHex ( _x , _y ) then
46922: LD_VAR 0 11
46926: PPUSH
46927: LD_VAR 0 12
46931: PPUSH
46932: CALL_OW 488
46936: NOT
46937: IFFALSE 46941
// continue ;
46939: GO 46919
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46941: LD_VAR 0 11
46945: PPUSH
46946: LD_VAR 0 12
46950: PPUSH
46951: CALL_OW 351
46955: PUSH
46956: LD_VAR 0 11
46960: PPUSH
46961: LD_VAR 0 12
46965: PPUSH
46966: CALL_OW 554
46970: AND
46971: IFFALSE 47011
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46973: LD_ADDR_VAR 0 13
46977: PUSH
46978: LD_VAR 0 13
46982: PPUSH
46983: LD_VAR 0 13
46987: PUSH
46988: LD_INT 1
46990: PLUS
46991: PPUSH
46992: LD_VAR 0 11
46996: PUSH
46997: LD_VAR 0 12
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PPUSH
47006: CALL_OW 2
47010: ST_TO_ADDR
// end ;
47011: GO 46919
47013: POP
47014: POP
47015: GO 46899
47017: POP
47018: POP
// if not list then
47019: LD_VAR 0 13
47023: NOT
47024: IFFALSE 47028
// exit ;
47026: GO 47272
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
47028: LD_ADDR_VAR 0 13
47032: PUSH
47033: LD_VAR 0 1
47037: PPUSH
47038: LD_VAR 0 13
47042: PPUSH
47043: LD_INT 1
47045: PPUSH
47046: LD_INT 1
47048: PPUSH
47049: CALL 8220 0 4
47053: ST_TO_ADDR
// ComStop ( flame ) ;
47054: LD_VAR 0 1
47058: PPUSH
47059: CALL_OW 141
// for i in list do
47063: LD_ADDR_VAR 0 6
47067: PUSH
47068: LD_VAR 0 13
47072: PUSH
47073: FOR_IN
47074: IFFALSE 47105
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
47076: LD_VAR 0 1
47080: PPUSH
47081: LD_VAR 0 6
47085: PUSH
47086: LD_INT 1
47088: ARRAY
47089: PPUSH
47090: LD_VAR 0 6
47094: PUSH
47095: LD_INT 2
47097: ARRAY
47098: PPUSH
47099: CALL_OW 176
47103: GO 47073
47105: POP
47106: POP
// repeat wait ( 0 0$1 ) ;
47107: LD_INT 35
47109: PPUSH
47110: CALL_OW 67
// task := GetTaskList ( flame ) ;
47114: LD_ADDR_VAR 0 14
47118: PUSH
47119: LD_VAR 0 1
47123: PPUSH
47124: CALL_OW 437
47128: ST_TO_ADDR
// if not task then
47129: LD_VAR 0 14
47133: NOT
47134: IFFALSE 47138
// exit ;
47136: GO 47272
// if task [ 1 ] [ 1 ] <> | then
47138: LD_VAR 0 14
47142: PUSH
47143: LD_INT 1
47145: ARRAY
47146: PUSH
47147: LD_INT 1
47149: ARRAY
47150: PUSH
47151: LD_STRING |
47153: NONEQUAL
47154: IFFALSE 47158
// exit ;
47156: GO 47272
// _x := task [ 1 ] [ 2 ] ;
47158: LD_ADDR_VAR 0 11
47162: PUSH
47163: LD_VAR 0 14
47167: PUSH
47168: LD_INT 1
47170: ARRAY
47171: PUSH
47172: LD_INT 2
47174: ARRAY
47175: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
47176: LD_ADDR_VAR 0 12
47180: PUSH
47181: LD_VAR 0 14
47185: PUSH
47186: LD_INT 1
47188: ARRAY
47189: PUSH
47190: LD_INT 3
47192: ARRAY
47193: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
47194: LD_VAR 0 11
47198: PPUSH
47199: LD_VAR 0 12
47203: PPUSH
47204: CALL_OW 351
47208: NOT
47209: PUSH
47210: LD_VAR 0 11
47214: PPUSH
47215: LD_VAR 0 12
47219: PPUSH
47220: CALL_OW 554
47224: NOT
47225: OR
47226: IFFALSE 47260
// begin task := Delete ( task , 1 ) ;
47228: LD_ADDR_VAR 0 14
47232: PUSH
47233: LD_VAR 0 14
47237: PPUSH
47238: LD_INT 1
47240: PPUSH
47241: CALL_OW 3
47245: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
47246: LD_VAR 0 1
47250: PPUSH
47251: LD_VAR 0 14
47255: PPUSH
47256: CALL_OW 446
// end ; until not HasTask ( flame ) ;
47260: LD_VAR 0 1
47264: PPUSH
47265: CALL_OW 314
47269: NOT
47270: IFFALSE 47107
// end ;
47272: LD_VAR 0 5
47276: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
47277: LD_EXP 9
47281: NOT
47282: IFFALSE 47332
47284: GO 47286
47286: DISABLE
// begin initHack := true ;
47287: LD_ADDR_EXP 9
47291: PUSH
47292: LD_INT 1
47294: ST_TO_ADDR
// hackTanks := [ ] ;
47295: LD_ADDR_EXP 10
47299: PUSH
47300: EMPTY
47301: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
47302: LD_ADDR_EXP 11
47306: PUSH
47307: EMPTY
47308: ST_TO_ADDR
// hackLimit := 3 ;
47309: LD_ADDR_EXP 12
47313: PUSH
47314: LD_INT 3
47316: ST_TO_ADDR
// hackDist := 12 ;
47317: LD_ADDR_EXP 13
47321: PUSH
47322: LD_INT 12
47324: ST_TO_ADDR
// hackCounter := [ ] ;
47325: LD_ADDR_EXP 14
47329: PUSH
47330: EMPTY
47331: ST_TO_ADDR
// end ;
47332: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
47333: LD_EXP 9
47337: PUSH
47338: LD_INT 34
47340: PUSH
47341: LD_INT 99
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PPUSH
47348: CALL_OW 69
47352: AND
47353: IFFALSE 47606
47355: GO 47357
47357: DISABLE
47358: LD_INT 0
47360: PPUSH
47361: PPUSH
// begin enable ;
47362: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
47363: LD_ADDR_VAR 0 1
47367: PUSH
47368: LD_INT 34
47370: PUSH
47371: LD_INT 99
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PPUSH
47378: CALL_OW 69
47382: PUSH
47383: FOR_IN
47384: IFFALSE 47604
// begin if not i in hackTanks then
47386: LD_VAR 0 1
47390: PUSH
47391: LD_EXP 10
47395: IN
47396: NOT
47397: IFFALSE 47480
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
47399: LD_ADDR_EXP 10
47403: PUSH
47404: LD_EXP 10
47408: PPUSH
47409: LD_EXP 10
47413: PUSH
47414: LD_INT 1
47416: PLUS
47417: PPUSH
47418: LD_VAR 0 1
47422: PPUSH
47423: CALL_OW 1
47427: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
47428: LD_ADDR_EXP 11
47432: PUSH
47433: LD_EXP 11
47437: PPUSH
47438: LD_EXP 11
47442: PUSH
47443: LD_INT 1
47445: PLUS
47446: PPUSH
47447: EMPTY
47448: PPUSH
47449: CALL_OW 1
47453: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
47454: LD_ADDR_EXP 14
47458: PUSH
47459: LD_EXP 14
47463: PPUSH
47464: LD_EXP 14
47468: PUSH
47469: LD_INT 1
47471: PLUS
47472: PPUSH
47473: EMPTY
47474: PPUSH
47475: CALL_OW 1
47479: ST_TO_ADDR
// end ; if not IsOk ( i ) then
47480: LD_VAR 0 1
47484: PPUSH
47485: CALL_OW 302
47489: NOT
47490: IFFALSE 47503
// begin HackUnlinkAll ( i ) ;
47492: LD_VAR 0 1
47496: PPUSH
47497: CALL 47609 0 1
// continue ;
47501: GO 47383
// end ; HackCheckCapturedStatus ( i ) ;
47503: LD_VAR 0 1
47507: PPUSH
47508: CALL 48052 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
47512: LD_ADDR_VAR 0 2
47516: PUSH
47517: LD_INT 81
47519: PUSH
47520: LD_VAR 0 1
47524: PPUSH
47525: CALL_OW 255
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 33
47536: PUSH
47537: LD_INT 3
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 91
47546: PUSH
47547: LD_VAR 0 1
47551: PUSH
47552: LD_EXP 13
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 50
47564: PUSH
47565: EMPTY
47566: LIST
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: PPUSH
47574: CALL_OW 69
47578: ST_TO_ADDR
// if not tmp then
47579: LD_VAR 0 2
47583: NOT
47584: IFFALSE 47588
// continue ;
47586: GO 47383
// HackLink ( i , tmp ) ;
47588: LD_VAR 0 1
47592: PPUSH
47593: LD_VAR 0 2
47597: PPUSH
47598: CALL 47745 0 2
// end ;
47602: GO 47383
47604: POP
47605: POP
// end ;
47606: PPOPN 2
47608: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
47609: LD_INT 0
47611: PPUSH
47612: PPUSH
47613: PPUSH
// if not hack in hackTanks then
47614: LD_VAR 0 1
47618: PUSH
47619: LD_EXP 10
47623: IN
47624: NOT
47625: IFFALSE 47629
// exit ;
47627: GO 47740
// index := GetElementIndex ( hackTanks , hack ) ;
47629: LD_ADDR_VAR 0 4
47633: PUSH
47634: LD_EXP 10
47638: PPUSH
47639: LD_VAR 0 1
47643: PPUSH
47644: CALL 7517 0 2
47648: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47649: LD_EXP 11
47653: PUSH
47654: LD_VAR 0 4
47658: ARRAY
47659: IFFALSE 47740
// begin for i in hackTanksCaptured [ index ] do
47661: LD_ADDR_VAR 0 3
47665: PUSH
47666: LD_EXP 11
47670: PUSH
47671: LD_VAR 0 4
47675: ARRAY
47676: PUSH
47677: FOR_IN
47678: IFFALSE 47704
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47680: LD_VAR 0 3
47684: PUSH
47685: LD_INT 1
47687: ARRAY
47688: PPUSH
47689: LD_VAR 0 3
47693: PUSH
47694: LD_INT 2
47696: ARRAY
47697: PPUSH
47698: CALL_OW 235
47702: GO 47677
47704: POP
47705: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47706: LD_ADDR_EXP 11
47710: PUSH
47711: LD_EXP 11
47715: PPUSH
47716: LD_VAR 0 4
47720: PPUSH
47721: EMPTY
47722: PPUSH
47723: CALL_OW 1
47727: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47728: LD_VAR 0 1
47732: PPUSH
47733: LD_INT 0
47735: PPUSH
47736: CALL_OW 505
// end ; end ;
47740: LD_VAR 0 2
47744: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47745: LD_INT 0
47747: PPUSH
47748: PPUSH
47749: PPUSH
// if not hack in hackTanks or not vehicles then
47750: LD_VAR 0 1
47754: PUSH
47755: LD_EXP 10
47759: IN
47760: NOT
47761: PUSH
47762: LD_VAR 0 2
47766: NOT
47767: OR
47768: IFFALSE 47772
// exit ;
47770: GO 48047
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47772: LD_ADDR_VAR 0 2
47776: PUSH
47777: LD_VAR 0 1
47781: PPUSH
47782: LD_VAR 0 2
47786: PPUSH
47787: LD_INT 1
47789: PPUSH
47790: LD_INT 1
47792: PPUSH
47793: CALL 8167 0 4
47797: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47798: LD_ADDR_VAR 0 5
47802: PUSH
47803: LD_EXP 10
47807: PPUSH
47808: LD_VAR 0 1
47812: PPUSH
47813: CALL 7517 0 2
47817: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47818: LD_EXP 11
47822: PUSH
47823: LD_VAR 0 5
47827: ARRAY
47828: PUSH
47829: LD_EXP 12
47833: LESS
47834: IFFALSE 48023
// begin for i := 1 to vehicles do
47836: LD_ADDR_VAR 0 4
47840: PUSH
47841: DOUBLE
47842: LD_INT 1
47844: DEC
47845: ST_TO_ADDR
47846: LD_VAR 0 2
47850: PUSH
47851: FOR_TO
47852: IFFALSE 48021
// begin if hackTanksCaptured [ index ] = hackLimit then
47854: LD_EXP 11
47858: PUSH
47859: LD_VAR 0 5
47863: ARRAY
47864: PUSH
47865: LD_EXP 12
47869: EQUAL
47870: IFFALSE 47874
// break ;
47872: GO 48021
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47874: LD_ADDR_EXP 14
47878: PUSH
47879: LD_EXP 14
47883: PPUSH
47884: LD_VAR 0 5
47888: PPUSH
47889: LD_EXP 14
47893: PUSH
47894: LD_VAR 0 5
47898: ARRAY
47899: PUSH
47900: LD_INT 1
47902: PLUS
47903: PPUSH
47904: CALL_OW 1
47908: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47909: LD_ADDR_EXP 11
47913: PUSH
47914: LD_EXP 11
47918: PPUSH
47919: LD_VAR 0 5
47923: PUSH
47924: LD_EXP 11
47928: PUSH
47929: LD_VAR 0 5
47933: ARRAY
47934: PUSH
47935: LD_INT 1
47937: PLUS
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PPUSH
47943: LD_VAR 0 2
47947: PUSH
47948: LD_VAR 0 4
47952: ARRAY
47953: PUSH
47954: LD_VAR 0 2
47958: PUSH
47959: LD_VAR 0 4
47963: ARRAY
47964: PPUSH
47965: CALL_OW 255
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PPUSH
47974: CALL 7732 0 3
47978: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47979: LD_VAR 0 2
47983: PUSH
47984: LD_VAR 0 4
47988: ARRAY
47989: PPUSH
47990: LD_VAR 0 1
47994: PPUSH
47995: CALL_OW 255
47999: PPUSH
48000: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
48004: LD_VAR 0 2
48008: PUSH
48009: LD_VAR 0 4
48013: ARRAY
48014: PPUSH
48015: CALL_OW 141
// end ;
48019: GO 47851
48021: POP
48022: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
48023: LD_VAR 0 1
48027: PPUSH
48028: LD_EXP 11
48032: PUSH
48033: LD_VAR 0 5
48037: ARRAY
48038: PUSH
48039: LD_INT 0
48041: PLUS
48042: PPUSH
48043: CALL_OW 505
// end ;
48047: LD_VAR 0 3
48051: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
48052: LD_INT 0
48054: PPUSH
48055: PPUSH
48056: PPUSH
48057: PPUSH
// if not hack in hackTanks then
48058: LD_VAR 0 1
48062: PUSH
48063: LD_EXP 10
48067: IN
48068: NOT
48069: IFFALSE 48073
// exit ;
48071: GO 48313
// index := GetElementIndex ( hackTanks , hack ) ;
48073: LD_ADDR_VAR 0 4
48077: PUSH
48078: LD_EXP 10
48082: PPUSH
48083: LD_VAR 0 1
48087: PPUSH
48088: CALL 7517 0 2
48092: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
48093: LD_ADDR_VAR 0 3
48097: PUSH
48098: DOUBLE
48099: LD_EXP 11
48103: PUSH
48104: LD_VAR 0 4
48108: ARRAY
48109: INC
48110: ST_TO_ADDR
48111: LD_INT 1
48113: PUSH
48114: FOR_DOWNTO
48115: IFFALSE 48287
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
48117: LD_ADDR_VAR 0 5
48121: PUSH
48122: LD_EXP 11
48126: PUSH
48127: LD_VAR 0 4
48131: ARRAY
48132: PUSH
48133: LD_VAR 0 3
48137: ARRAY
48138: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
48139: LD_VAR 0 5
48143: PUSH
48144: LD_INT 1
48146: ARRAY
48147: PPUSH
48148: CALL_OW 302
48152: NOT
48153: PUSH
48154: LD_VAR 0 5
48158: PUSH
48159: LD_INT 1
48161: ARRAY
48162: PPUSH
48163: CALL_OW 255
48167: PUSH
48168: LD_VAR 0 1
48172: PPUSH
48173: CALL_OW 255
48177: NONEQUAL
48178: OR
48179: IFFALSE 48285
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
48181: LD_VAR 0 5
48185: PUSH
48186: LD_INT 1
48188: ARRAY
48189: PPUSH
48190: CALL_OW 305
48194: PUSH
48195: LD_VAR 0 5
48199: PUSH
48200: LD_INT 1
48202: ARRAY
48203: PPUSH
48204: CALL_OW 255
48208: PUSH
48209: LD_VAR 0 1
48213: PPUSH
48214: CALL_OW 255
48218: EQUAL
48219: AND
48220: IFFALSE 48244
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
48222: LD_VAR 0 5
48226: PUSH
48227: LD_INT 1
48229: ARRAY
48230: PPUSH
48231: LD_VAR 0 5
48235: PUSH
48236: LD_INT 2
48238: ARRAY
48239: PPUSH
48240: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
48244: LD_ADDR_EXP 11
48248: PUSH
48249: LD_EXP 11
48253: PPUSH
48254: LD_VAR 0 4
48258: PPUSH
48259: LD_EXP 11
48263: PUSH
48264: LD_VAR 0 4
48268: ARRAY
48269: PPUSH
48270: LD_VAR 0 3
48274: PPUSH
48275: CALL_OW 3
48279: PPUSH
48280: CALL_OW 1
48284: ST_TO_ADDR
// end ; end ;
48285: GO 48114
48287: POP
48288: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
48289: LD_VAR 0 1
48293: PPUSH
48294: LD_EXP 11
48298: PUSH
48299: LD_VAR 0 4
48303: ARRAY
48304: PUSH
48305: LD_INT 0
48307: PLUS
48308: PPUSH
48309: CALL_OW 505
// end ;
48313: LD_VAR 0 2
48317: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
48318: LD_INT 0
48320: PPUSH
48321: PPUSH
48322: PPUSH
48323: PPUSH
// if not hack in hackTanks then
48324: LD_VAR 0 1
48328: PUSH
48329: LD_EXP 10
48333: IN
48334: NOT
48335: IFFALSE 48339
// exit ;
48337: GO 48424
// index := GetElementIndex ( hackTanks , hack ) ;
48339: LD_ADDR_VAR 0 5
48343: PUSH
48344: LD_EXP 10
48348: PPUSH
48349: LD_VAR 0 1
48353: PPUSH
48354: CALL 7517 0 2
48358: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
48359: LD_ADDR_VAR 0 4
48363: PUSH
48364: DOUBLE
48365: LD_INT 1
48367: DEC
48368: ST_TO_ADDR
48369: LD_EXP 11
48373: PUSH
48374: LD_VAR 0 5
48378: ARRAY
48379: PUSH
48380: FOR_TO
48381: IFFALSE 48422
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
48383: LD_EXP 11
48387: PUSH
48388: LD_VAR 0 5
48392: ARRAY
48393: PUSH
48394: LD_VAR 0 4
48398: ARRAY
48399: PUSH
48400: LD_INT 1
48402: ARRAY
48403: PUSH
48404: LD_VAR 0 2
48408: EQUAL
48409: IFFALSE 48420
// KillUnit ( vehicle ) ;
48411: LD_VAR 0 2
48415: PPUSH
48416: CALL_OW 66
48420: GO 48380
48422: POP
48423: POP
// end ;
48424: LD_VAR 0 3
48428: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
48429: LD_EXP 15
48433: NOT
48434: IFFALSE 48469
48436: GO 48438
48438: DISABLE
// begin initMiner := true ;
48439: LD_ADDR_EXP 15
48443: PUSH
48444: LD_INT 1
48446: ST_TO_ADDR
// minersList := [ ] ;
48447: LD_ADDR_EXP 16
48451: PUSH
48452: EMPTY
48453: ST_TO_ADDR
// minerMinesList := [ ] ;
48454: LD_ADDR_EXP 17
48458: PUSH
48459: EMPTY
48460: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
48461: LD_ADDR_EXP 18
48465: PUSH
48466: LD_INT 5
48468: ST_TO_ADDR
// end ;
48469: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
48470: LD_EXP 15
48474: PUSH
48475: LD_INT 34
48477: PUSH
48478: LD_INT 81
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PPUSH
48485: CALL_OW 69
48489: AND
48490: IFFALSE 48951
48492: GO 48494
48494: DISABLE
48495: LD_INT 0
48497: PPUSH
48498: PPUSH
48499: PPUSH
48500: PPUSH
// begin enable ;
48501: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
48502: LD_ADDR_VAR 0 1
48506: PUSH
48507: LD_INT 34
48509: PUSH
48510: LD_INT 81
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PPUSH
48517: CALL_OW 69
48521: PUSH
48522: FOR_IN
48523: IFFALSE 48595
// begin if not i in minersList then
48525: LD_VAR 0 1
48529: PUSH
48530: LD_EXP 16
48534: IN
48535: NOT
48536: IFFALSE 48593
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
48538: LD_ADDR_EXP 16
48542: PUSH
48543: LD_EXP 16
48547: PPUSH
48548: LD_EXP 16
48552: PUSH
48553: LD_INT 1
48555: PLUS
48556: PPUSH
48557: LD_VAR 0 1
48561: PPUSH
48562: CALL_OW 1
48566: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
48567: LD_ADDR_EXP 17
48571: PUSH
48572: LD_EXP 17
48576: PPUSH
48577: LD_EXP 17
48581: PUSH
48582: LD_INT 1
48584: PLUS
48585: PPUSH
48586: EMPTY
48587: PPUSH
48588: CALL_OW 1
48592: ST_TO_ADDR
// end end ;
48593: GO 48522
48595: POP
48596: POP
// for i := minerMinesList downto 1 do
48597: LD_ADDR_VAR 0 1
48601: PUSH
48602: DOUBLE
48603: LD_EXP 17
48607: INC
48608: ST_TO_ADDR
48609: LD_INT 1
48611: PUSH
48612: FOR_DOWNTO
48613: IFFALSE 48949
// begin if IsLive ( minersList [ i ] ) then
48615: LD_EXP 16
48619: PUSH
48620: LD_VAR 0 1
48624: ARRAY
48625: PPUSH
48626: CALL_OW 300
48630: IFFALSE 48658
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
48632: LD_EXP 16
48636: PUSH
48637: LD_VAR 0 1
48641: ARRAY
48642: PPUSH
48643: LD_EXP 17
48647: PUSH
48648: LD_VAR 0 1
48652: ARRAY
48653: PPUSH
48654: CALL_OW 505
// if not minerMinesList [ i ] then
48658: LD_EXP 17
48662: PUSH
48663: LD_VAR 0 1
48667: ARRAY
48668: NOT
48669: IFFALSE 48673
// continue ;
48671: GO 48612
// for j := minerMinesList [ i ] downto 1 do
48673: LD_ADDR_VAR 0 2
48677: PUSH
48678: DOUBLE
48679: LD_EXP 17
48683: PUSH
48684: LD_VAR 0 1
48688: ARRAY
48689: INC
48690: ST_TO_ADDR
48691: LD_INT 1
48693: PUSH
48694: FOR_DOWNTO
48695: IFFALSE 48945
// begin side := GetSide ( minersList [ i ] ) ;
48697: LD_ADDR_VAR 0 3
48701: PUSH
48702: LD_EXP 16
48706: PUSH
48707: LD_VAR 0 1
48711: ARRAY
48712: PPUSH
48713: CALL_OW 255
48717: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48718: LD_ADDR_VAR 0 4
48722: PUSH
48723: LD_EXP 17
48727: PUSH
48728: LD_VAR 0 1
48732: ARRAY
48733: PUSH
48734: LD_VAR 0 2
48738: ARRAY
48739: PUSH
48740: LD_INT 1
48742: ARRAY
48743: PPUSH
48744: LD_EXP 17
48748: PUSH
48749: LD_VAR 0 1
48753: ARRAY
48754: PUSH
48755: LD_VAR 0 2
48759: ARRAY
48760: PUSH
48761: LD_INT 2
48763: ARRAY
48764: PPUSH
48765: CALL_OW 428
48769: ST_TO_ADDR
// if not tmp then
48770: LD_VAR 0 4
48774: NOT
48775: IFFALSE 48779
// continue ;
48777: GO 48694
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48779: LD_VAR 0 4
48783: PUSH
48784: LD_INT 81
48786: PUSH
48787: LD_VAR 0 3
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PPUSH
48796: CALL_OW 69
48800: IN
48801: PUSH
48802: LD_EXP 17
48806: PUSH
48807: LD_VAR 0 1
48811: ARRAY
48812: PUSH
48813: LD_VAR 0 2
48817: ARRAY
48818: PUSH
48819: LD_INT 1
48821: ARRAY
48822: PPUSH
48823: LD_EXP 17
48827: PUSH
48828: LD_VAR 0 1
48832: ARRAY
48833: PUSH
48834: LD_VAR 0 2
48838: ARRAY
48839: PUSH
48840: LD_INT 2
48842: ARRAY
48843: PPUSH
48844: CALL_OW 458
48848: AND
48849: IFFALSE 48943
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48851: LD_EXP 17
48855: PUSH
48856: LD_VAR 0 1
48860: ARRAY
48861: PUSH
48862: LD_VAR 0 2
48866: ARRAY
48867: PUSH
48868: LD_INT 1
48870: ARRAY
48871: PPUSH
48872: LD_EXP 17
48876: PUSH
48877: LD_VAR 0 1
48881: ARRAY
48882: PUSH
48883: LD_VAR 0 2
48887: ARRAY
48888: PUSH
48889: LD_INT 2
48891: ARRAY
48892: PPUSH
48893: LD_VAR 0 3
48897: PPUSH
48898: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48902: LD_ADDR_EXP 17
48906: PUSH
48907: LD_EXP 17
48911: PPUSH
48912: LD_VAR 0 1
48916: PPUSH
48917: LD_EXP 17
48921: PUSH
48922: LD_VAR 0 1
48926: ARRAY
48927: PPUSH
48928: LD_VAR 0 2
48932: PPUSH
48933: CALL_OW 3
48937: PPUSH
48938: CALL_OW 1
48942: ST_TO_ADDR
// end ; end ;
48943: GO 48694
48945: POP
48946: POP
// end ;
48947: GO 48612
48949: POP
48950: POP
// end ;
48951: PPOPN 4
48953: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48954: LD_INT 0
48956: PPUSH
48957: PPUSH
// result := false ;
48958: LD_ADDR_VAR 0 4
48962: PUSH
48963: LD_INT 0
48965: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48966: LD_VAR 0 1
48970: PPUSH
48971: CALL_OW 264
48975: PUSH
48976: LD_INT 81
48978: EQUAL
48979: NOT
48980: IFFALSE 48984
// exit ;
48982: GO 49224
// index := GetElementIndex ( minersList , unit ) ;
48984: LD_ADDR_VAR 0 5
48988: PUSH
48989: LD_EXP 16
48993: PPUSH
48994: LD_VAR 0 1
48998: PPUSH
48999: CALL 7517 0 2
49003: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
49004: LD_EXP 17
49008: PUSH
49009: LD_VAR 0 5
49013: ARRAY
49014: PUSH
49015: LD_EXP 18
49019: GREATEREQUAL
49020: IFFALSE 49024
// exit ;
49022: GO 49224
// ComMoveXY ( unit , x , y ) ;
49024: LD_VAR 0 1
49028: PPUSH
49029: LD_VAR 0 2
49033: PPUSH
49034: LD_VAR 0 3
49038: PPUSH
49039: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49043: LD_INT 35
49045: PPUSH
49046: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
49050: LD_VAR 0 1
49054: PPUSH
49055: LD_VAR 0 2
49059: PPUSH
49060: LD_VAR 0 3
49064: PPUSH
49065: CALL 39258 0 3
49069: NOT
49070: PUSH
49071: LD_VAR 0 1
49075: PPUSH
49076: CALL_OW 314
49080: AND
49081: IFFALSE 49085
// exit ;
49083: GO 49224
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
49085: LD_VAR 0 2
49089: PPUSH
49090: LD_VAR 0 3
49094: PPUSH
49095: CALL_OW 428
49099: PUSH
49100: LD_VAR 0 1
49104: EQUAL
49105: PUSH
49106: LD_VAR 0 1
49110: PPUSH
49111: CALL_OW 314
49115: NOT
49116: AND
49117: IFFALSE 49043
// PlaySoundXY ( x , y , PlantMine ) ;
49119: LD_VAR 0 2
49123: PPUSH
49124: LD_VAR 0 3
49128: PPUSH
49129: LD_STRING PlantMine
49131: PPUSH
49132: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
49136: LD_VAR 0 2
49140: PPUSH
49141: LD_VAR 0 3
49145: PPUSH
49146: LD_VAR 0 1
49150: PPUSH
49151: CALL_OW 255
49155: PPUSH
49156: LD_INT 0
49158: PPUSH
49159: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
49163: LD_ADDR_EXP 17
49167: PUSH
49168: LD_EXP 17
49172: PPUSH
49173: LD_VAR 0 5
49177: PUSH
49178: LD_EXP 17
49182: PUSH
49183: LD_VAR 0 5
49187: ARRAY
49188: PUSH
49189: LD_INT 1
49191: PLUS
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PPUSH
49197: LD_VAR 0 2
49201: PUSH
49202: LD_VAR 0 3
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PPUSH
49211: CALL 7732 0 3
49215: ST_TO_ADDR
// result := true ;
49216: LD_ADDR_VAR 0 4
49220: PUSH
49221: LD_INT 1
49223: ST_TO_ADDR
// end ;
49224: LD_VAR 0 4
49228: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
49229: LD_INT 0
49231: PPUSH
49232: PPUSH
49233: PPUSH
// if not unit in minersList then
49234: LD_VAR 0 1
49238: PUSH
49239: LD_EXP 16
49243: IN
49244: NOT
49245: IFFALSE 49249
// exit ;
49247: GO 49641
// index := GetElementIndex ( minersList , unit ) ;
49249: LD_ADDR_VAR 0 6
49253: PUSH
49254: LD_EXP 16
49258: PPUSH
49259: LD_VAR 0 1
49263: PPUSH
49264: CALL 7517 0 2
49268: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
49269: LD_ADDR_VAR 0 5
49273: PUSH
49274: DOUBLE
49275: LD_EXP 17
49279: PUSH
49280: LD_VAR 0 6
49284: ARRAY
49285: INC
49286: ST_TO_ADDR
49287: LD_INT 1
49289: PUSH
49290: FOR_DOWNTO
49291: IFFALSE 49452
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
49293: LD_EXP 17
49297: PUSH
49298: LD_VAR 0 6
49302: ARRAY
49303: PUSH
49304: LD_VAR 0 5
49308: ARRAY
49309: PUSH
49310: LD_INT 1
49312: ARRAY
49313: PUSH
49314: LD_VAR 0 2
49318: EQUAL
49319: PUSH
49320: LD_EXP 17
49324: PUSH
49325: LD_VAR 0 6
49329: ARRAY
49330: PUSH
49331: LD_VAR 0 5
49335: ARRAY
49336: PUSH
49337: LD_INT 2
49339: ARRAY
49340: PUSH
49341: LD_VAR 0 3
49345: EQUAL
49346: AND
49347: IFFALSE 49450
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49349: LD_EXP 17
49353: PUSH
49354: LD_VAR 0 6
49358: ARRAY
49359: PUSH
49360: LD_VAR 0 5
49364: ARRAY
49365: PUSH
49366: LD_INT 1
49368: ARRAY
49369: PPUSH
49370: LD_EXP 17
49374: PUSH
49375: LD_VAR 0 6
49379: ARRAY
49380: PUSH
49381: LD_VAR 0 5
49385: ARRAY
49386: PUSH
49387: LD_INT 2
49389: ARRAY
49390: PPUSH
49391: LD_VAR 0 1
49395: PPUSH
49396: CALL_OW 255
49400: PPUSH
49401: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49405: LD_ADDR_EXP 17
49409: PUSH
49410: LD_EXP 17
49414: PPUSH
49415: LD_VAR 0 6
49419: PPUSH
49420: LD_EXP 17
49424: PUSH
49425: LD_VAR 0 6
49429: ARRAY
49430: PPUSH
49431: LD_VAR 0 5
49435: PPUSH
49436: CALL_OW 3
49440: PPUSH
49441: CALL_OW 1
49445: ST_TO_ADDR
// exit ;
49446: POP
49447: POP
49448: GO 49641
// end ; end ;
49450: GO 49290
49452: POP
49453: POP
// for i := minerMinesList [ index ] downto 1 do
49454: LD_ADDR_VAR 0 5
49458: PUSH
49459: DOUBLE
49460: LD_EXP 17
49464: PUSH
49465: LD_VAR 0 6
49469: ARRAY
49470: INC
49471: ST_TO_ADDR
49472: LD_INT 1
49474: PUSH
49475: FOR_DOWNTO
49476: IFFALSE 49639
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
49478: LD_EXP 17
49482: PUSH
49483: LD_VAR 0 6
49487: ARRAY
49488: PUSH
49489: LD_VAR 0 5
49493: ARRAY
49494: PUSH
49495: LD_INT 1
49497: ARRAY
49498: PPUSH
49499: LD_EXP 17
49503: PUSH
49504: LD_VAR 0 6
49508: ARRAY
49509: PUSH
49510: LD_VAR 0 5
49514: ARRAY
49515: PUSH
49516: LD_INT 2
49518: ARRAY
49519: PPUSH
49520: LD_VAR 0 2
49524: PPUSH
49525: LD_VAR 0 3
49529: PPUSH
49530: CALL_OW 298
49534: PUSH
49535: LD_INT 6
49537: LESS
49538: IFFALSE 49637
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49540: LD_EXP 17
49544: PUSH
49545: LD_VAR 0 6
49549: ARRAY
49550: PUSH
49551: LD_VAR 0 5
49555: ARRAY
49556: PUSH
49557: LD_INT 1
49559: ARRAY
49560: PPUSH
49561: LD_EXP 17
49565: PUSH
49566: LD_VAR 0 6
49570: ARRAY
49571: PUSH
49572: LD_VAR 0 5
49576: ARRAY
49577: PUSH
49578: LD_INT 2
49580: ARRAY
49581: PPUSH
49582: LD_VAR 0 1
49586: PPUSH
49587: CALL_OW 255
49591: PPUSH
49592: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49596: LD_ADDR_EXP 17
49600: PUSH
49601: LD_EXP 17
49605: PPUSH
49606: LD_VAR 0 6
49610: PPUSH
49611: LD_EXP 17
49615: PUSH
49616: LD_VAR 0 6
49620: ARRAY
49621: PPUSH
49622: LD_VAR 0 5
49626: PPUSH
49627: CALL_OW 3
49631: PPUSH
49632: CALL_OW 1
49636: ST_TO_ADDR
// end ; end ;
49637: GO 49475
49639: POP
49640: POP
// end ;
49641: LD_VAR 0 4
49645: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49646: LD_INT 0
49648: PPUSH
49649: PPUSH
49650: PPUSH
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
49655: PPUSH
49656: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49657: LD_VAR 0 1
49661: PPUSH
49662: CALL_OW 264
49666: PUSH
49667: LD_INT 81
49669: EQUAL
49670: NOT
49671: PUSH
49672: LD_VAR 0 1
49676: PUSH
49677: LD_EXP 16
49681: IN
49682: NOT
49683: OR
49684: IFFALSE 49688
// exit ;
49686: GO 50010
// index := GetElementIndex ( minersList , unit ) ;
49688: LD_ADDR_VAR 0 6
49692: PUSH
49693: LD_EXP 16
49697: PPUSH
49698: LD_VAR 0 1
49702: PPUSH
49703: CALL 7517 0 2
49707: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49708: LD_ADDR_VAR 0 8
49712: PUSH
49713: LD_EXP 18
49717: PUSH
49718: LD_EXP 17
49722: PUSH
49723: LD_VAR 0 6
49727: ARRAY
49728: MINUS
49729: ST_TO_ADDR
// if not minesFreeAmount then
49730: LD_VAR 0 8
49734: NOT
49735: IFFALSE 49739
// exit ;
49737: GO 50010
// tmp := [ ] ;
49739: LD_ADDR_VAR 0 7
49743: PUSH
49744: EMPTY
49745: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49746: LD_ADDR_VAR 0 5
49750: PUSH
49751: DOUBLE
49752: LD_INT 1
49754: DEC
49755: ST_TO_ADDR
49756: LD_VAR 0 8
49760: PUSH
49761: FOR_TO
49762: IFFALSE 49957
// begin _d := rand ( 0 , 5 ) ;
49764: LD_ADDR_VAR 0 11
49768: PUSH
49769: LD_INT 0
49771: PPUSH
49772: LD_INT 5
49774: PPUSH
49775: CALL_OW 12
49779: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49780: LD_ADDR_VAR 0 12
49784: PUSH
49785: LD_INT 2
49787: PPUSH
49788: LD_INT 6
49790: PPUSH
49791: CALL_OW 12
49795: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49796: LD_ADDR_VAR 0 9
49800: PUSH
49801: LD_VAR 0 2
49805: PPUSH
49806: LD_VAR 0 11
49810: PPUSH
49811: LD_VAR 0 12
49815: PPUSH
49816: CALL_OW 272
49820: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49821: LD_ADDR_VAR 0 10
49825: PUSH
49826: LD_VAR 0 3
49830: PPUSH
49831: LD_VAR 0 11
49835: PPUSH
49836: LD_VAR 0 12
49840: PPUSH
49841: CALL_OW 273
49845: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49846: LD_VAR 0 9
49850: PPUSH
49851: LD_VAR 0 10
49855: PPUSH
49856: CALL_OW 488
49860: PUSH
49861: LD_VAR 0 9
49865: PUSH
49866: LD_VAR 0 10
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_VAR 0 7
49879: IN
49880: NOT
49881: AND
49882: PUSH
49883: LD_VAR 0 9
49887: PPUSH
49888: LD_VAR 0 10
49892: PPUSH
49893: CALL_OW 458
49897: NOT
49898: AND
49899: IFFALSE 49941
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49901: LD_ADDR_VAR 0 7
49905: PUSH
49906: LD_VAR 0 7
49910: PPUSH
49911: LD_VAR 0 7
49915: PUSH
49916: LD_INT 1
49918: PLUS
49919: PPUSH
49920: LD_VAR 0 9
49924: PUSH
49925: LD_VAR 0 10
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PPUSH
49934: CALL_OW 1
49938: ST_TO_ADDR
49939: GO 49955
// i := i - 1 ;
49941: LD_ADDR_VAR 0 5
49945: PUSH
49946: LD_VAR 0 5
49950: PUSH
49951: LD_INT 1
49953: MINUS
49954: ST_TO_ADDR
// end ;
49955: GO 49761
49957: POP
49958: POP
// for i in tmp do
49959: LD_ADDR_VAR 0 5
49963: PUSH
49964: LD_VAR 0 7
49968: PUSH
49969: FOR_IN
49970: IFFALSE 50008
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49972: LD_VAR 0 1
49976: PPUSH
49977: LD_VAR 0 5
49981: PUSH
49982: LD_INT 1
49984: ARRAY
49985: PPUSH
49986: LD_VAR 0 5
49990: PUSH
49991: LD_INT 2
49993: ARRAY
49994: PPUSH
49995: CALL 48954 0 3
49999: NOT
50000: IFFALSE 50006
// exit ;
50002: POP
50003: POP
50004: GO 50010
50006: GO 49969
50008: POP
50009: POP
// end ;
50010: LD_VAR 0 4
50014: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
50015: LD_INT 0
50017: PPUSH
50018: PPUSH
50019: PPUSH
50020: PPUSH
50021: PPUSH
50022: PPUSH
50023: PPUSH
// if not GetClass ( unit ) = class_sniper then
50024: LD_VAR 0 1
50028: PPUSH
50029: CALL_OW 257
50033: PUSH
50034: LD_INT 5
50036: EQUAL
50037: NOT
50038: IFFALSE 50042
// exit ;
50040: GO 50430
// dist := 8 ;
50042: LD_ADDR_VAR 0 5
50046: PUSH
50047: LD_INT 8
50049: ST_TO_ADDR
// viewRange := 12 ;
50050: LD_ADDR_VAR 0 7
50054: PUSH
50055: LD_INT 12
50057: ST_TO_ADDR
// side := GetSide ( unit ) ;
50058: LD_ADDR_VAR 0 6
50062: PUSH
50063: LD_VAR 0 1
50067: PPUSH
50068: CALL_OW 255
50072: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
50073: LD_INT 61
50075: PPUSH
50076: LD_VAR 0 6
50080: PPUSH
50081: CALL_OW 321
50085: PUSH
50086: LD_INT 2
50088: EQUAL
50089: IFFALSE 50099
// viewRange := 16 ;
50091: LD_ADDR_VAR 0 7
50095: PUSH
50096: LD_INT 16
50098: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
50099: LD_VAR 0 1
50103: PPUSH
50104: LD_VAR 0 2
50108: PPUSH
50109: LD_VAR 0 3
50113: PPUSH
50114: CALL_OW 297
50118: PUSH
50119: LD_VAR 0 5
50123: GREATER
50124: IFFALSE 50203
// begin ComMoveXY ( unit , x , y ) ;
50126: LD_VAR 0 1
50130: PPUSH
50131: LD_VAR 0 2
50135: PPUSH
50136: LD_VAR 0 3
50140: PPUSH
50141: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
50145: LD_INT 35
50147: PPUSH
50148: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
50152: LD_VAR 0 1
50156: PPUSH
50157: LD_VAR 0 2
50161: PPUSH
50162: LD_VAR 0 3
50166: PPUSH
50167: CALL 39258 0 3
50171: NOT
50172: IFFALSE 50176
// exit ;
50174: GO 50430
// until GetDistUnitXY ( unit , x , y ) < dist ;
50176: LD_VAR 0 1
50180: PPUSH
50181: LD_VAR 0 2
50185: PPUSH
50186: LD_VAR 0 3
50190: PPUSH
50191: CALL_OW 297
50195: PUSH
50196: LD_VAR 0 5
50200: LESS
50201: IFFALSE 50145
// end ; ComTurnXY ( unit , x , y ) ;
50203: LD_VAR 0 1
50207: PPUSH
50208: LD_VAR 0 2
50212: PPUSH
50213: LD_VAR 0 3
50217: PPUSH
50218: CALL_OW 118
// wait ( 5 ) ;
50222: LD_INT 5
50224: PPUSH
50225: CALL_OW 67
// _d := GetDir ( unit ) ;
50229: LD_ADDR_VAR 0 10
50233: PUSH
50234: LD_VAR 0 1
50238: PPUSH
50239: CALL_OW 254
50243: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
50244: LD_ADDR_VAR 0 8
50248: PUSH
50249: LD_VAR 0 1
50253: PPUSH
50254: CALL_OW 250
50258: PPUSH
50259: LD_VAR 0 10
50263: PPUSH
50264: LD_VAR 0 5
50268: PPUSH
50269: CALL_OW 272
50273: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
50274: LD_ADDR_VAR 0 9
50278: PUSH
50279: LD_VAR 0 1
50283: PPUSH
50284: CALL_OW 251
50288: PPUSH
50289: LD_VAR 0 10
50293: PPUSH
50294: LD_VAR 0 5
50298: PPUSH
50299: CALL_OW 273
50303: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50304: LD_VAR 0 8
50308: PPUSH
50309: LD_VAR 0 9
50313: PPUSH
50314: CALL_OW 488
50318: NOT
50319: IFFALSE 50323
// exit ;
50321: GO 50430
// ComAnimCustom ( unit , 1 ) ;
50323: LD_VAR 0 1
50327: PPUSH
50328: LD_INT 1
50330: PPUSH
50331: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
50335: LD_VAR 0 8
50339: PPUSH
50340: LD_VAR 0 9
50344: PPUSH
50345: LD_VAR 0 6
50349: PPUSH
50350: LD_VAR 0 7
50354: PPUSH
50355: CALL_OW 330
// repeat wait ( 1 ) ;
50359: LD_INT 1
50361: PPUSH
50362: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
50366: LD_VAR 0 1
50370: PPUSH
50371: CALL_OW 316
50375: PUSH
50376: LD_VAR 0 1
50380: PPUSH
50381: CALL_OW 314
50385: OR
50386: PUSH
50387: LD_VAR 0 1
50391: PPUSH
50392: CALL_OW 302
50396: NOT
50397: OR
50398: PUSH
50399: LD_VAR 0 1
50403: PPUSH
50404: CALL_OW 301
50408: OR
50409: IFFALSE 50359
// RemoveSeeing ( _x , _y , side ) ;
50411: LD_VAR 0 8
50415: PPUSH
50416: LD_VAR 0 9
50420: PPUSH
50421: LD_VAR 0 6
50425: PPUSH
50426: CALL_OW 331
// end ; end_of_file
50430: LD_VAR 0 4
50434: RET
// export globalGameSaveCounter ; every 0 0$1 do
50435: GO 50437
50437: DISABLE
// begin enable ;
50438: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50439: LD_STRING updateTimer(
50441: PUSH
50442: LD_OWVAR 1
50446: STR
50447: PUSH
50448: LD_STRING );
50450: STR
50451: PPUSH
50452: CALL_OW 559
// end ;
50456: END
// every 0 0$1 do
50457: GO 50459
50459: DISABLE
// begin globalGameSaveCounter := 0 ;
50460: LD_ADDR_EXP 19
50464: PUSH
50465: LD_INT 0
50467: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50468: LD_STRING setGameSaveCounter(0)
50470: PPUSH
50471: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50475: LD_STRING initStreamRollete();
50477: PPUSH
50478: CALL_OW 559
// InitStreamMode ;
50482: CALL 51825 0 0
// DefineStreamItems ( false ) ;
50486: LD_INT 0
50488: PPUSH
50489: CALL 52289 0 1
// end ;
50493: END
// export function SOS_MapStart ( ) ; begin
50494: LD_INT 0
50496: PPUSH
// if streamModeActive then
50497: LD_EXP 20
50501: IFFALSE 50510
// DefineStreamItems ( true ) ;
50503: LD_INT 1
50505: PPUSH
50506: CALL 52289 0 1
// UpdateLuaVariables ( ) ;
50510: CALL 50527 0 0
// UpdateFactoryWaypoints ( ) ;
50514: CALL 65158 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50518: CALL 65415 0 0
// end ;
50522: LD_VAR 0 1
50526: RET
// function UpdateLuaVariables ( ) ; begin
50527: LD_INT 0
50529: PPUSH
// if globalGameSaveCounter then
50530: LD_EXP 19
50534: IFFALSE 50568
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50536: LD_ADDR_EXP 19
50540: PUSH
50541: LD_EXP 19
50545: PPUSH
50546: CALL 41822 0 1
50550: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50551: LD_STRING setGameSaveCounter(
50553: PUSH
50554: LD_EXP 19
50558: STR
50559: PUSH
50560: LD_STRING )
50562: STR
50563: PPUSH
50564: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50568: LD_STRING setGameDifficulty(
50570: PUSH
50571: LD_OWVAR 67
50575: STR
50576: PUSH
50577: LD_STRING )
50579: STR
50580: PPUSH
50581: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
50585: LD_STRING displayDifficulty(
50587: PUSH
50588: LD_OWVAR 67
50592: STR
50593: PUSH
50594: LD_STRING )
50596: STR
50597: PPUSH
50598: CALL_OW 559
// end ;
50602: LD_VAR 0 1
50606: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50607: LD_INT 0
50609: PPUSH
// if p2 = stream_mode then
50610: LD_VAR 0 2
50614: PUSH
50615: LD_INT 100
50617: EQUAL
50618: IFFALSE 51621
// begin if not StreamModeActive then
50620: LD_EXP 20
50624: NOT
50625: IFFALSE 50635
// StreamModeActive := true ;
50627: LD_ADDR_EXP 20
50631: PUSH
50632: LD_INT 1
50634: ST_TO_ADDR
// if p3 = 0 then
50635: LD_VAR 0 3
50639: PUSH
50640: LD_INT 0
50642: EQUAL
50643: IFFALSE 50649
// InitStreamMode ;
50645: CALL 51825 0 0
// if p3 = 1 then
50649: LD_VAR 0 3
50653: PUSH
50654: LD_INT 1
50656: EQUAL
50657: IFFALSE 50667
// sRocket := true ;
50659: LD_ADDR_EXP 25
50663: PUSH
50664: LD_INT 1
50666: ST_TO_ADDR
// if p3 = 2 then
50667: LD_VAR 0 3
50671: PUSH
50672: LD_INT 2
50674: EQUAL
50675: IFFALSE 50685
// sSpeed := true ;
50677: LD_ADDR_EXP 24
50681: PUSH
50682: LD_INT 1
50684: ST_TO_ADDR
// if p3 = 3 then
50685: LD_VAR 0 3
50689: PUSH
50690: LD_INT 3
50692: EQUAL
50693: IFFALSE 50703
// sEngine := true ;
50695: LD_ADDR_EXP 26
50699: PUSH
50700: LD_INT 1
50702: ST_TO_ADDR
// if p3 = 4 then
50703: LD_VAR 0 3
50707: PUSH
50708: LD_INT 4
50710: EQUAL
50711: IFFALSE 50721
// sSpec := true ;
50713: LD_ADDR_EXP 23
50717: PUSH
50718: LD_INT 1
50720: ST_TO_ADDR
// if p3 = 5 then
50721: LD_VAR 0 3
50725: PUSH
50726: LD_INT 5
50728: EQUAL
50729: IFFALSE 50739
// sLevel := true ;
50731: LD_ADDR_EXP 27
50735: PUSH
50736: LD_INT 1
50738: ST_TO_ADDR
// if p3 = 6 then
50739: LD_VAR 0 3
50743: PUSH
50744: LD_INT 6
50746: EQUAL
50747: IFFALSE 50757
// sArmoury := true ;
50749: LD_ADDR_EXP 28
50753: PUSH
50754: LD_INT 1
50756: ST_TO_ADDR
// if p3 = 7 then
50757: LD_VAR 0 3
50761: PUSH
50762: LD_INT 7
50764: EQUAL
50765: IFFALSE 50775
// sRadar := true ;
50767: LD_ADDR_EXP 29
50771: PUSH
50772: LD_INT 1
50774: ST_TO_ADDR
// if p3 = 8 then
50775: LD_VAR 0 3
50779: PUSH
50780: LD_INT 8
50782: EQUAL
50783: IFFALSE 50793
// sBunker := true ;
50785: LD_ADDR_EXP 30
50789: PUSH
50790: LD_INT 1
50792: ST_TO_ADDR
// if p3 = 9 then
50793: LD_VAR 0 3
50797: PUSH
50798: LD_INT 9
50800: EQUAL
50801: IFFALSE 50811
// sHack := true ;
50803: LD_ADDR_EXP 31
50807: PUSH
50808: LD_INT 1
50810: ST_TO_ADDR
// if p3 = 10 then
50811: LD_VAR 0 3
50815: PUSH
50816: LD_INT 10
50818: EQUAL
50819: IFFALSE 50829
// sFire := true ;
50821: LD_ADDR_EXP 32
50825: PUSH
50826: LD_INT 1
50828: ST_TO_ADDR
// if p3 = 11 then
50829: LD_VAR 0 3
50833: PUSH
50834: LD_INT 11
50836: EQUAL
50837: IFFALSE 50847
// sRefresh := true ;
50839: LD_ADDR_EXP 33
50843: PUSH
50844: LD_INT 1
50846: ST_TO_ADDR
// if p3 = 12 then
50847: LD_VAR 0 3
50851: PUSH
50852: LD_INT 12
50854: EQUAL
50855: IFFALSE 50865
// sExp := true ;
50857: LD_ADDR_EXP 34
50861: PUSH
50862: LD_INT 1
50864: ST_TO_ADDR
// if p3 = 13 then
50865: LD_VAR 0 3
50869: PUSH
50870: LD_INT 13
50872: EQUAL
50873: IFFALSE 50883
// sDepot := true ;
50875: LD_ADDR_EXP 35
50879: PUSH
50880: LD_INT 1
50882: ST_TO_ADDR
// if p3 = 14 then
50883: LD_VAR 0 3
50887: PUSH
50888: LD_INT 14
50890: EQUAL
50891: IFFALSE 50901
// sFlag := true ;
50893: LD_ADDR_EXP 36
50897: PUSH
50898: LD_INT 1
50900: ST_TO_ADDR
// if p3 = 15 then
50901: LD_VAR 0 3
50905: PUSH
50906: LD_INT 15
50908: EQUAL
50909: IFFALSE 50919
// sKamikadze := true ;
50911: LD_ADDR_EXP 44
50915: PUSH
50916: LD_INT 1
50918: ST_TO_ADDR
// if p3 = 16 then
50919: LD_VAR 0 3
50923: PUSH
50924: LD_INT 16
50926: EQUAL
50927: IFFALSE 50937
// sTroll := true ;
50929: LD_ADDR_EXP 45
50933: PUSH
50934: LD_INT 1
50936: ST_TO_ADDR
// if p3 = 17 then
50937: LD_VAR 0 3
50941: PUSH
50942: LD_INT 17
50944: EQUAL
50945: IFFALSE 50955
// sSlow := true ;
50947: LD_ADDR_EXP 46
50951: PUSH
50952: LD_INT 1
50954: ST_TO_ADDR
// if p3 = 18 then
50955: LD_VAR 0 3
50959: PUSH
50960: LD_INT 18
50962: EQUAL
50963: IFFALSE 50973
// sLack := true ;
50965: LD_ADDR_EXP 47
50969: PUSH
50970: LD_INT 1
50972: ST_TO_ADDR
// if p3 = 19 then
50973: LD_VAR 0 3
50977: PUSH
50978: LD_INT 19
50980: EQUAL
50981: IFFALSE 50991
// sTank := true ;
50983: LD_ADDR_EXP 49
50987: PUSH
50988: LD_INT 1
50990: ST_TO_ADDR
// if p3 = 20 then
50991: LD_VAR 0 3
50995: PUSH
50996: LD_INT 20
50998: EQUAL
50999: IFFALSE 51009
// sRemote := true ;
51001: LD_ADDR_EXP 50
51005: PUSH
51006: LD_INT 1
51008: ST_TO_ADDR
// if p3 = 21 then
51009: LD_VAR 0 3
51013: PUSH
51014: LD_INT 21
51016: EQUAL
51017: IFFALSE 51027
// sPowell := true ;
51019: LD_ADDR_EXP 51
51023: PUSH
51024: LD_INT 1
51026: ST_TO_ADDR
// if p3 = 22 then
51027: LD_VAR 0 3
51031: PUSH
51032: LD_INT 22
51034: EQUAL
51035: IFFALSE 51045
// sTeleport := true ;
51037: LD_ADDR_EXP 54
51041: PUSH
51042: LD_INT 1
51044: ST_TO_ADDR
// if p3 = 23 then
51045: LD_VAR 0 3
51049: PUSH
51050: LD_INT 23
51052: EQUAL
51053: IFFALSE 51063
// sOilTower := true ;
51055: LD_ADDR_EXP 56
51059: PUSH
51060: LD_INT 1
51062: ST_TO_ADDR
// if p3 = 24 then
51063: LD_VAR 0 3
51067: PUSH
51068: LD_INT 24
51070: EQUAL
51071: IFFALSE 51081
// sShovel := true ;
51073: LD_ADDR_EXP 57
51077: PUSH
51078: LD_INT 1
51080: ST_TO_ADDR
// if p3 = 25 then
51081: LD_VAR 0 3
51085: PUSH
51086: LD_INT 25
51088: EQUAL
51089: IFFALSE 51099
// sSheik := true ;
51091: LD_ADDR_EXP 58
51095: PUSH
51096: LD_INT 1
51098: ST_TO_ADDR
// if p3 = 26 then
51099: LD_VAR 0 3
51103: PUSH
51104: LD_INT 26
51106: EQUAL
51107: IFFALSE 51117
// sEarthquake := true ;
51109: LD_ADDR_EXP 60
51113: PUSH
51114: LD_INT 1
51116: ST_TO_ADDR
// if p3 = 27 then
51117: LD_VAR 0 3
51121: PUSH
51122: LD_INT 27
51124: EQUAL
51125: IFFALSE 51135
// sAI := true ;
51127: LD_ADDR_EXP 61
51131: PUSH
51132: LD_INT 1
51134: ST_TO_ADDR
// if p3 = 28 then
51135: LD_VAR 0 3
51139: PUSH
51140: LD_INT 28
51142: EQUAL
51143: IFFALSE 51153
// sCargo := true ;
51145: LD_ADDR_EXP 64
51149: PUSH
51150: LD_INT 1
51152: ST_TO_ADDR
// if p3 = 29 then
51153: LD_VAR 0 3
51157: PUSH
51158: LD_INT 29
51160: EQUAL
51161: IFFALSE 51171
// sDLaser := true ;
51163: LD_ADDR_EXP 65
51167: PUSH
51168: LD_INT 1
51170: ST_TO_ADDR
// if p3 = 30 then
51171: LD_VAR 0 3
51175: PUSH
51176: LD_INT 30
51178: EQUAL
51179: IFFALSE 51189
// sExchange := true ;
51181: LD_ADDR_EXP 66
51185: PUSH
51186: LD_INT 1
51188: ST_TO_ADDR
// if p3 = 31 then
51189: LD_VAR 0 3
51193: PUSH
51194: LD_INT 31
51196: EQUAL
51197: IFFALSE 51207
// sFac := true ;
51199: LD_ADDR_EXP 67
51203: PUSH
51204: LD_INT 1
51206: ST_TO_ADDR
// if p3 = 32 then
51207: LD_VAR 0 3
51211: PUSH
51212: LD_INT 32
51214: EQUAL
51215: IFFALSE 51225
// sPower := true ;
51217: LD_ADDR_EXP 68
51221: PUSH
51222: LD_INT 1
51224: ST_TO_ADDR
// if p3 = 33 then
51225: LD_VAR 0 3
51229: PUSH
51230: LD_INT 33
51232: EQUAL
51233: IFFALSE 51243
// sRandom := true ;
51235: LD_ADDR_EXP 69
51239: PUSH
51240: LD_INT 1
51242: ST_TO_ADDR
// if p3 = 34 then
51243: LD_VAR 0 3
51247: PUSH
51248: LD_INT 34
51250: EQUAL
51251: IFFALSE 51261
// sShield := true ;
51253: LD_ADDR_EXP 70
51257: PUSH
51258: LD_INT 1
51260: ST_TO_ADDR
// if p3 = 35 then
51261: LD_VAR 0 3
51265: PUSH
51266: LD_INT 35
51268: EQUAL
51269: IFFALSE 51279
// sTime := true ;
51271: LD_ADDR_EXP 71
51275: PUSH
51276: LD_INT 1
51278: ST_TO_ADDR
// if p3 = 36 then
51279: LD_VAR 0 3
51283: PUSH
51284: LD_INT 36
51286: EQUAL
51287: IFFALSE 51297
// sTools := true ;
51289: LD_ADDR_EXP 72
51293: PUSH
51294: LD_INT 1
51296: ST_TO_ADDR
// if p3 = 101 then
51297: LD_VAR 0 3
51301: PUSH
51302: LD_INT 101
51304: EQUAL
51305: IFFALSE 51315
// sSold := true ;
51307: LD_ADDR_EXP 37
51311: PUSH
51312: LD_INT 1
51314: ST_TO_ADDR
// if p3 = 102 then
51315: LD_VAR 0 3
51319: PUSH
51320: LD_INT 102
51322: EQUAL
51323: IFFALSE 51333
// sDiff := true ;
51325: LD_ADDR_EXP 38
51329: PUSH
51330: LD_INT 1
51332: ST_TO_ADDR
// if p3 = 103 then
51333: LD_VAR 0 3
51337: PUSH
51338: LD_INT 103
51340: EQUAL
51341: IFFALSE 51351
// sFog := true ;
51343: LD_ADDR_EXP 41
51347: PUSH
51348: LD_INT 1
51350: ST_TO_ADDR
// if p3 = 104 then
51351: LD_VAR 0 3
51355: PUSH
51356: LD_INT 104
51358: EQUAL
51359: IFFALSE 51369
// sReset := true ;
51361: LD_ADDR_EXP 42
51365: PUSH
51366: LD_INT 1
51368: ST_TO_ADDR
// if p3 = 105 then
51369: LD_VAR 0 3
51373: PUSH
51374: LD_INT 105
51376: EQUAL
51377: IFFALSE 51387
// sSun := true ;
51379: LD_ADDR_EXP 43
51383: PUSH
51384: LD_INT 1
51386: ST_TO_ADDR
// if p3 = 106 then
51387: LD_VAR 0 3
51391: PUSH
51392: LD_INT 106
51394: EQUAL
51395: IFFALSE 51405
// sTiger := true ;
51397: LD_ADDR_EXP 39
51401: PUSH
51402: LD_INT 1
51404: ST_TO_ADDR
// if p3 = 107 then
51405: LD_VAR 0 3
51409: PUSH
51410: LD_INT 107
51412: EQUAL
51413: IFFALSE 51423
// sBomb := true ;
51415: LD_ADDR_EXP 40
51419: PUSH
51420: LD_INT 1
51422: ST_TO_ADDR
// if p3 = 108 then
51423: LD_VAR 0 3
51427: PUSH
51428: LD_INT 108
51430: EQUAL
51431: IFFALSE 51441
// sWound := true ;
51433: LD_ADDR_EXP 48
51437: PUSH
51438: LD_INT 1
51440: ST_TO_ADDR
// if p3 = 109 then
51441: LD_VAR 0 3
51445: PUSH
51446: LD_INT 109
51448: EQUAL
51449: IFFALSE 51459
// sBetray := true ;
51451: LD_ADDR_EXP 52
51455: PUSH
51456: LD_INT 1
51458: ST_TO_ADDR
// if p3 = 110 then
51459: LD_VAR 0 3
51463: PUSH
51464: LD_INT 110
51466: EQUAL
51467: IFFALSE 51477
// sContamin := true ;
51469: LD_ADDR_EXP 53
51473: PUSH
51474: LD_INT 1
51476: ST_TO_ADDR
// if p3 = 111 then
51477: LD_VAR 0 3
51481: PUSH
51482: LD_INT 111
51484: EQUAL
51485: IFFALSE 51495
// sOil := true ;
51487: LD_ADDR_EXP 55
51491: PUSH
51492: LD_INT 1
51494: ST_TO_ADDR
// if p3 = 112 then
51495: LD_VAR 0 3
51499: PUSH
51500: LD_INT 112
51502: EQUAL
51503: IFFALSE 51513
// sStu := true ;
51505: LD_ADDR_EXP 59
51509: PUSH
51510: LD_INT 1
51512: ST_TO_ADDR
// if p3 = 113 then
51513: LD_VAR 0 3
51517: PUSH
51518: LD_INT 113
51520: EQUAL
51521: IFFALSE 51531
// sBazooka := true ;
51523: LD_ADDR_EXP 62
51527: PUSH
51528: LD_INT 1
51530: ST_TO_ADDR
// if p3 = 114 then
51531: LD_VAR 0 3
51535: PUSH
51536: LD_INT 114
51538: EQUAL
51539: IFFALSE 51549
// sMortar := true ;
51541: LD_ADDR_EXP 63
51545: PUSH
51546: LD_INT 1
51548: ST_TO_ADDR
// if p3 = 115 then
51549: LD_VAR 0 3
51553: PUSH
51554: LD_INT 115
51556: EQUAL
51557: IFFALSE 51567
// sRanger := true ;
51559: LD_ADDR_EXP 73
51563: PUSH
51564: LD_INT 1
51566: ST_TO_ADDR
// if p3 = 116 then
51567: LD_VAR 0 3
51571: PUSH
51572: LD_INT 116
51574: EQUAL
51575: IFFALSE 51585
// sComputer := true ;
51577: LD_ADDR_EXP 74
51581: PUSH
51582: LD_INT 1
51584: ST_TO_ADDR
// if p3 = 117 then
51585: LD_VAR 0 3
51589: PUSH
51590: LD_INT 117
51592: EQUAL
51593: IFFALSE 51603
// s30 := true ;
51595: LD_ADDR_EXP 75
51599: PUSH
51600: LD_INT 1
51602: ST_TO_ADDR
// if p3 = 118 then
51603: LD_VAR 0 3
51607: PUSH
51608: LD_INT 118
51610: EQUAL
51611: IFFALSE 51621
// s60 := true ;
51613: LD_ADDR_EXP 76
51617: PUSH
51618: LD_INT 1
51620: ST_TO_ADDR
// end ; if p2 = hack_mode then
51621: LD_VAR 0 2
51625: PUSH
51626: LD_INT 101
51628: EQUAL
51629: IFFALSE 51757
// begin case p3 of 1 :
51631: LD_VAR 0 3
51635: PUSH
51636: LD_INT 1
51638: DOUBLE
51639: EQUAL
51640: IFTRUE 51644
51642: GO 51651
51644: POP
// hHackUnlimitedResources ; 2 :
51645: CALL 63904 0 0
51649: GO 51757
51651: LD_INT 2
51653: DOUBLE
51654: EQUAL
51655: IFTRUE 51659
51657: GO 51666
51659: POP
// hHackSetLevel10 ; 3 :
51660: CALL 64037 0 0
51664: GO 51757
51666: LD_INT 3
51668: DOUBLE
51669: EQUAL
51670: IFTRUE 51674
51672: GO 51681
51674: POP
// hHackSetLevel10YourUnits ; 4 :
51675: CALL 64122 0 0
51679: GO 51757
51681: LD_INT 4
51683: DOUBLE
51684: EQUAL
51685: IFTRUE 51689
51687: GO 51696
51689: POP
// hHackInvincible ; 5 :
51690: CALL 64570 0 0
51694: GO 51757
51696: LD_INT 5
51698: DOUBLE
51699: EQUAL
51700: IFTRUE 51704
51702: GO 51711
51704: POP
// hHackInvisible ; 6 :
51705: CALL 64681 0 0
51709: GO 51757
51711: LD_INT 6
51713: DOUBLE
51714: EQUAL
51715: IFTRUE 51719
51717: GO 51726
51719: POP
// hHackChangeYourSide ; 7 :
51720: CALL 64738 0 0
51724: GO 51757
51726: LD_INT 7
51728: DOUBLE
51729: EQUAL
51730: IFTRUE 51734
51732: GO 51741
51734: POP
// hHackChangeUnitSide ; 8 :
51735: CALL 64780 0 0
51739: GO 51757
51741: LD_INT 8
51743: DOUBLE
51744: EQUAL
51745: IFTRUE 51749
51747: GO 51756
51749: POP
// hHackFog ; end ;
51750: CALL 64881 0 0
51754: GO 51757
51756: POP
// end ; if p2 = game_save_mode then
51757: LD_VAR 0 2
51761: PUSH
51762: LD_INT 102
51764: EQUAL
51765: IFFALSE 51820
// begin if p3 = 1 then
51767: LD_VAR 0 3
51771: PUSH
51772: LD_INT 1
51774: EQUAL
51775: IFFALSE 51787
// globalGameSaveCounter := p4 ;
51777: LD_ADDR_EXP 19
51781: PUSH
51782: LD_VAR 0 4
51786: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51787: LD_VAR 0 3
51791: PUSH
51792: LD_INT 2
51794: EQUAL
51795: PUSH
51796: LD_EXP 19
51800: AND
51801: IFFALSE 51820
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51803: LD_STRING setGameSaveCounter(
51805: PUSH
51806: LD_EXP 19
51810: STR
51811: PUSH
51812: LD_STRING )
51814: STR
51815: PPUSH
51816: CALL_OW 559
// end ; end ;
51820: LD_VAR 0 7
51824: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51825: LD_INT 0
51827: PPUSH
// streamModeActive := false ;
51828: LD_ADDR_EXP 20
51832: PUSH
51833: LD_INT 0
51835: ST_TO_ADDR
// normalCounter := 36 ;
51836: LD_ADDR_EXP 21
51840: PUSH
51841: LD_INT 36
51843: ST_TO_ADDR
// hardcoreCounter := 18 ;
51844: LD_ADDR_EXP 22
51848: PUSH
51849: LD_INT 18
51851: ST_TO_ADDR
// sRocket := false ;
51852: LD_ADDR_EXP 25
51856: PUSH
51857: LD_INT 0
51859: ST_TO_ADDR
// sSpeed := false ;
51860: LD_ADDR_EXP 24
51864: PUSH
51865: LD_INT 0
51867: ST_TO_ADDR
// sEngine := false ;
51868: LD_ADDR_EXP 26
51872: PUSH
51873: LD_INT 0
51875: ST_TO_ADDR
// sSpec := false ;
51876: LD_ADDR_EXP 23
51880: PUSH
51881: LD_INT 0
51883: ST_TO_ADDR
// sLevel := false ;
51884: LD_ADDR_EXP 27
51888: PUSH
51889: LD_INT 0
51891: ST_TO_ADDR
// sArmoury := false ;
51892: LD_ADDR_EXP 28
51896: PUSH
51897: LD_INT 0
51899: ST_TO_ADDR
// sRadar := false ;
51900: LD_ADDR_EXP 29
51904: PUSH
51905: LD_INT 0
51907: ST_TO_ADDR
// sBunker := false ;
51908: LD_ADDR_EXP 30
51912: PUSH
51913: LD_INT 0
51915: ST_TO_ADDR
// sHack := false ;
51916: LD_ADDR_EXP 31
51920: PUSH
51921: LD_INT 0
51923: ST_TO_ADDR
// sFire := false ;
51924: LD_ADDR_EXP 32
51928: PUSH
51929: LD_INT 0
51931: ST_TO_ADDR
// sRefresh := false ;
51932: LD_ADDR_EXP 33
51936: PUSH
51937: LD_INT 0
51939: ST_TO_ADDR
// sExp := false ;
51940: LD_ADDR_EXP 34
51944: PUSH
51945: LD_INT 0
51947: ST_TO_ADDR
// sDepot := false ;
51948: LD_ADDR_EXP 35
51952: PUSH
51953: LD_INT 0
51955: ST_TO_ADDR
// sFlag := false ;
51956: LD_ADDR_EXP 36
51960: PUSH
51961: LD_INT 0
51963: ST_TO_ADDR
// sKamikadze := false ;
51964: LD_ADDR_EXP 44
51968: PUSH
51969: LD_INT 0
51971: ST_TO_ADDR
// sTroll := false ;
51972: LD_ADDR_EXP 45
51976: PUSH
51977: LD_INT 0
51979: ST_TO_ADDR
// sSlow := false ;
51980: LD_ADDR_EXP 46
51984: PUSH
51985: LD_INT 0
51987: ST_TO_ADDR
// sLack := false ;
51988: LD_ADDR_EXP 47
51992: PUSH
51993: LD_INT 0
51995: ST_TO_ADDR
// sTank := false ;
51996: LD_ADDR_EXP 49
52000: PUSH
52001: LD_INT 0
52003: ST_TO_ADDR
// sRemote := false ;
52004: LD_ADDR_EXP 50
52008: PUSH
52009: LD_INT 0
52011: ST_TO_ADDR
// sPowell := false ;
52012: LD_ADDR_EXP 51
52016: PUSH
52017: LD_INT 0
52019: ST_TO_ADDR
// sTeleport := false ;
52020: LD_ADDR_EXP 54
52024: PUSH
52025: LD_INT 0
52027: ST_TO_ADDR
// sOilTower := false ;
52028: LD_ADDR_EXP 56
52032: PUSH
52033: LD_INT 0
52035: ST_TO_ADDR
// sShovel := false ;
52036: LD_ADDR_EXP 57
52040: PUSH
52041: LD_INT 0
52043: ST_TO_ADDR
// sSheik := false ;
52044: LD_ADDR_EXP 58
52048: PUSH
52049: LD_INT 0
52051: ST_TO_ADDR
// sEarthquake := false ;
52052: LD_ADDR_EXP 60
52056: PUSH
52057: LD_INT 0
52059: ST_TO_ADDR
// sAI := false ;
52060: LD_ADDR_EXP 61
52064: PUSH
52065: LD_INT 0
52067: ST_TO_ADDR
// sCargo := false ;
52068: LD_ADDR_EXP 64
52072: PUSH
52073: LD_INT 0
52075: ST_TO_ADDR
// sDLaser := false ;
52076: LD_ADDR_EXP 65
52080: PUSH
52081: LD_INT 0
52083: ST_TO_ADDR
// sExchange := false ;
52084: LD_ADDR_EXP 66
52088: PUSH
52089: LD_INT 0
52091: ST_TO_ADDR
// sFac := false ;
52092: LD_ADDR_EXP 67
52096: PUSH
52097: LD_INT 0
52099: ST_TO_ADDR
// sPower := false ;
52100: LD_ADDR_EXP 68
52104: PUSH
52105: LD_INT 0
52107: ST_TO_ADDR
// sRandom := false ;
52108: LD_ADDR_EXP 69
52112: PUSH
52113: LD_INT 0
52115: ST_TO_ADDR
// sShield := false ;
52116: LD_ADDR_EXP 70
52120: PUSH
52121: LD_INT 0
52123: ST_TO_ADDR
// sTime := false ;
52124: LD_ADDR_EXP 71
52128: PUSH
52129: LD_INT 0
52131: ST_TO_ADDR
// sTools := false ;
52132: LD_ADDR_EXP 72
52136: PUSH
52137: LD_INT 0
52139: ST_TO_ADDR
// sSold := false ;
52140: LD_ADDR_EXP 37
52144: PUSH
52145: LD_INT 0
52147: ST_TO_ADDR
// sDiff := false ;
52148: LD_ADDR_EXP 38
52152: PUSH
52153: LD_INT 0
52155: ST_TO_ADDR
// sFog := false ;
52156: LD_ADDR_EXP 41
52160: PUSH
52161: LD_INT 0
52163: ST_TO_ADDR
// sReset := false ;
52164: LD_ADDR_EXP 42
52168: PUSH
52169: LD_INT 0
52171: ST_TO_ADDR
// sSun := false ;
52172: LD_ADDR_EXP 43
52176: PUSH
52177: LD_INT 0
52179: ST_TO_ADDR
// sTiger := false ;
52180: LD_ADDR_EXP 39
52184: PUSH
52185: LD_INT 0
52187: ST_TO_ADDR
// sBomb := false ;
52188: LD_ADDR_EXP 40
52192: PUSH
52193: LD_INT 0
52195: ST_TO_ADDR
// sWound := false ;
52196: LD_ADDR_EXP 48
52200: PUSH
52201: LD_INT 0
52203: ST_TO_ADDR
// sBetray := false ;
52204: LD_ADDR_EXP 52
52208: PUSH
52209: LD_INT 0
52211: ST_TO_ADDR
// sContamin := false ;
52212: LD_ADDR_EXP 53
52216: PUSH
52217: LD_INT 0
52219: ST_TO_ADDR
// sOil := false ;
52220: LD_ADDR_EXP 55
52224: PUSH
52225: LD_INT 0
52227: ST_TO_ADDR
// sStu := false ;
52228: LD_ADDR_EXP 59
52232: PUSH
52233: LD_INT 0
52235: ST_TO_ADDR
// sBazooka := false ;
52236: LD_ADDR_EXP 62
52240: PUSH
52241: LD_INT 0
52243: ST_TO_ADDR
// sMortar := false ;
52244: LD_ADDR_EXP 63
52248: PUSH
52249: LD_INT 0
52251: ST_TO_ADDR
// sRanger := false ;
52252: LD_ADDR_EXP 73
52256: PUSH
52257: LD_INT 0
52259: ST_TO_ADDR
// sComputer := false ;
52260: LD_ADDR_EXP 74
52264: PUSH
52265: LD_INT 0
52267: ST_TO_ADDR
// s30 := false ;
52268: LD_ADDR_EXP 75
52272: PUSH
52273: LD_INT 0
52275: ST_TO_ADDR
// s60 := false ;
52276: LD_ADDR_EXP 76
52280: PUSH
52281: LD_INT 0
52283: ST_TO_ADDR
// end ;
52284: LD_VAR 0 1
52288: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52289: LD_INT 0
52291: PPUSH
52292: PPUSH
52293: PPUSH
52294: PPUSH
52295: PPUSH
52296: PPUSH
52297: PPUSH
// result := [ ] ;
52298: LD_ADDR_VAR 0 2
52302: PUSH
52303: EMPTY
52304: ST_TO_ADDR
// if campaign_id = 1 then
52305: LD_OWVAR 69
52309: PUSH
52310: LD_INT 1
52312: EQUAL
52313: IFFALSE 55479
// begin case mission_number of 1 :
52315: LD_OWVAR 70
52319: PUSH
52320: LD_INT 1
52322: DOUBLE
52323: EQUAL
52324: IFTRUE 52328
52326: GO 52404
52328: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52329: LD_ADDR_VAR 0 2
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 4
52339: PUSH
52340: LD_INT 11
52342: PUSH
52343: LD_INT 12
52345: PUSH
52346: LD_INT 15
52348: PUSH
52349: LD_INT 16
52351: PUSH
52352: LD_INT 22
52354: PUSH
52355: LD_INT 23
52357: PUSH
52358: LD_INT 26
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 101
52374: PUSH
52375: LD_INT 102
52377: PUSH
52378: LD_INT 106
52380: PUSH
52381: LD_INT 116
52383: PUSH
52384: LD_INT 117
52386: PUSH
52387: LD_INT 118
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: ST_TO_ADDR
52402: GO 55477
52404: LD_INT 2
52406: DOUBLE
52407: EQUAL
52408: IFTRUE 52412
52410: GO 52496
52412: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52413: LD_ADDR_VAR 0 2
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 4
52423: PUSH
52424: LD_INT 11
52426: PUSH
52427: LD_INT 12
52429: PUSH
52430: LD_INT 15
52432: PUSH
52433: LD_INT 16
52435: PUSH
52436: LD_INT 22
52438: PUSH
52439: LD_INT 23
52441: PUSH
52442: LD_INT 26
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 101
52458: PUSH
52459: LD_INT 102
52461: PUSH
52462: LD_INT 105
52464: PUSH
52465: LD_INT 106
52467: PUSH
52468: LD_INT 108
52470: PUSH
52471: LD_INT 116
52473: PUSH
52474: LD_INT 117
52476: PUSH
52477: LD_INT 118
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: ST_TO_ADDR
52494: GO 55477
52496: LD_INT 3
52498: DOUBLE
52499: EQUAL
52500: IFTRUE 52504
52502: GO 52592
52504: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52505: LD_ADDR_VAR 0 2
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: LD_INT 4
52515: PUSH
52516: LD_INT 5
52518: PUSH
52519: LD_INT 11
52521: PUSH
52522: LD_INT 12
52524: PUSH
52525: LD_INT 15
52527: PUSH
52528: LD_INT 16
52530: PUSH
52531: LD_INT 22
52533: PUSH
52534: LD_INT 26
52536: PUSH
52537: LD_INT 36
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 101
52554: PUSH
52555: LD_INT 102
52557: PUSH
52558: LD_INT 105
52560: PUSH
52561: LD_INT 106
52563: PUSH
52564: LD_INT 108
52566: PUSH
52567: LD_INT 116
52569: PUSH
52570: LD_INT 117
52572: PUSH
52573: LD_INT 118
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: ST_TO_ADDR
52590: GO 55477
52592: LD_INT 4
52594: DOUBLE
52595: EQUAL
52596: IFTRUE 52600
52598: GO 52696
52600: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52601: LD_ADDR_VAR 0 2
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 4
52611: PUSH
52612: LD_INT 5
52614: PUSH
52615: LD_INT 8
52617: PUSH
52618: LD_INT 11
52620: PUSH
52621: LD_INT 12
52623: PUSH
52624: LD_INT 15
52626: PUSH
52627: LD_INT 16
52629: PUSH
52630: LD_INT 22
52632: PUSH
52633: LD_INT 23
52635: PUSH
52636: LD_INT 26
52638: PUSH
52639: LD_INT 36
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 101
52658: PUSH
52659: LD_INT 102
52661: PUSH
52662: LD_INT 105
52664: PUSH
52665: LD_INT 106
52667: PUSH
52668: LD_INT 108
52670: PUSH
52671: LD_INT 116
52673: PUSH
52674: LD_INT 117
52676: PUSH
52677: LD_INT 118
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: ST_TO_ADDR
52694: GO 55477
52696: LD_INT 5
52698: DOUBLE
52699: EQUAL
52700: IFTRUE 52704
52702: GO 52816
52704: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52705: LD_ADDR_VAR 0 2
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: LD_INT 5
52718: PUSH
52719: LD_INT 6
52721: PUSH
52722: LD_INT 8
52724: PUSH
52725: LD_INT 11
52727: PUSH
52728: LD_INT 12
52730: PUSH
52731: LD_INT 15
52733: PUSH
52734: LD_INT 16
52736: PUSH
52737: LD_INT 22
52739: PUSH
52740: LD_INT 23
52742: PUSH
52743: LD_INT 25
52745: PUSH
52746: LD_INT 26
52748: PUSH
52749: LD_INT 36
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 101
52770: PUSH
52771: LD_INT 102
52773: PUSH
52774: LD_INT 105
52776: PUSH
52777: LD_INT 106
52779: PUSH
52780: LD_INT 108
52782: PUSH
52783: LD_INT 109
52785: PUSH
52786: LD_INT 112
52788: PUSH
52789: LD_INT 116
52791: PUSH
52792: LD_INT 117
52794: PUSH
52795: LD_INT 118
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: ST_TO_ADDR
52814: GO 55477
52816: LD_INT 6
52818: DOUBLE
52819: EQUAL
52820: IFTRUE 52824
52822: GO 52956
52824: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52825: LD_ADDR_VAR 0 2
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: LD_INT 4
52835: PUSH
52836: LD_INT 5
52838: PUSH
52839: LD_INT 6
52841: PUSH
52842: LD_INT 8
52844: PUSH
52845: LD_INT 11
52847: PUSH
52848: LD_INT 12
52850: PUSH
52851: LD_INT 15
52853: PUSH
52854: LD_INT 16
52856: PUSH
52857: LD_INT 20
52859: PUSH
52860: LD_INT 21
52862: PUSH
52863: LD_INT 22
52865: PUSH
52866: LD_INT 23
52868: PUSH
52869: LD_INT 25
52871: PUSH
52872: LD_INT 26
52874: PUSH
52875: LD_INT 30
52877: PUSH
52878: LD_INT 31
52880: PUSH
52881: LD_INT 32
52883: PUSH
52884: LD_INT 36
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 101
52910: PUSH
52911: LD_INT 102
52913: PUSH
52914: LD_INT 105
52916: PUSH
52917: LD_INT 106
52919: PUSH
52920: LD_INT 108
52922: PUSH
52923: LD_INT 109
52925: PUSH
52926: LD_INT 112
52928: PUSH
52929: LD_INT 116
52931: PUSH
52932: LD_INT 117
52934: PUSH
52935: LD_INT 118
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: ST_TO_ADDR
52954: GO 55477
52956: LD_INT 7
52958: DOUBLE
52959: EQUAL
52960: IFTRUE 52964
52962: GO 53076
52964: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52965: LD_ADDR_VAR 0 2
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: LD_INT 4
52975: PUSH
52976: LD_INT 5
52978: PUSH
52979: LD_INT 7
52981: PUSH
52982: LD_INT 11
52984: PUSH
52985: LD_INT 12
52987: PUSH
52988: LD_INT 15
52990: PUSH
52991: LD_INT 16
52993: PUSH
52994: LD_INT 20
52996: PUSH
52997: LD_INT 21
52999: PUSH
53000: LD_INT 22
53002: PUSH
53003: LD_INT 23
53005: PUSH
53006: LD_INT 25
53008: PUSH
53009: LD_INT 26
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 101
53030: PUSH
53031: LD_INT 102
53033: PUSH
53034: LD_INT 103
53036: PUSH
53037: LD_INT 105
53039: PUSH
53040: LD_INT 106
53042: PUSH
53043: LD_INT 108
53045: PUSH
53046: LD_INT 112
53048: PUSH
53049: LD_INT 116
53051: PUSH
53052: LD_INT 117
53054: PUSH
53055: LD_INT 118
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: ST_TO_ADDR
53074: GO 55477
53076: LD_INT 8
53078: DOUBLE
53079: EQUAL
53080: IFTRUE 53084
53082: GO 53224
53084: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53085: LD_ADDR_VAR 0 2
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: LD_INT 4
53095: PUSH
53096: LD_INT 5
53098: PUSH
53099: LD_INT 6
53101: PUSH
53102: LD_INT 7
53104: PUSH
53105: LD_INT 8
53107: PUSH
53108: LD_INT 11
53110: PUSH
53111: LD_INT 12
53113: PUSH
53114: LD_INT 15
53116: PUSH
53117: LD_INT 16
53119: PUSH
53120: LD_INT 20
53122: PUSH
53123: LD_INT 21
53125: PUSH
53126: LD_INT 22
53128: PUSH
53129: LD_INT 23
53131: PUSH
53132: LD_INT 25
53134: PUSH
53135: LD_INT 26
53137: PUSH
53138: LD_INT 30
53140: PUSH
53141: LD_INT 31
53143: PUSH
53144: LD_INT 32
53146: PUSH
53147: LD_INT 36
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 101
53174: PUSH
53175: LD_INT 102
53177: PUSH
53178: LD_INT 103
53180: PUSH
53181: LD_INT 105
53183: PUSH
53184: LD_INT 106
53186: PUSH
53187: LD_INT 108
53189: PUSH
53190: LD_INT 109
53192: PUSH
53193: LD_INT 112
53195: PUSH
53196: LD_INT 116
53198: PUSH
53199: LD_INT 117
53201: PUSH
53202: LD_INT 118
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: ST_TO_ADDR
53222: GO 55477
53224: LD_INT 9
53226: DOUBLE
53227: EQUAL
53228: IFTRUE 53232
53230: GO 53380
53232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53233: LD_ADDR_VAR 0 2
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: LD_INT 4
53243: PUSH
53244: LD_INT 5
53246: PUSH
53247: LD_INT 6
53249: PUSH
53250: LD_INT 7
53252: PUSH
53253: LD_INT 8
53255: PUSH
53256: LD_INT 11
53258: PUSH
53259: LD_INT 12
53261: PUSH
53262: LD_INT 15
53264: PUSH
53265: LD_INT 16
53267: PUSH
53268: LD_INT 20
53270: PUSH
53271: LD_INT 21
53273: PUSH
53274: LD_INT 22
53276: PUSH
53277: LD_INT 23
53279: PUSH
53280: LD_INT 25
53282: PUSH
53283: LD_INT 26
53285: PUSH
53286: LD_INT 28
53288: PUSH
53289: LD_INT 30
53291: PUSH
53292: LD_INT 31
53294: PUSH
53295: LD_INT 32
53297: PUSH
53298: LD_INT 36
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 101
53326: PUSH
53327: LD_INT 102
53329: PUSH
53330: LD_INT 103
53332: PUSH
53333: LD_INT 105
53335: PUSH
53336: LD_INT 106
53338: PUSH
53339: LD_INT 108
53341: PUSH
53342: LD_INT 109
53344: PUSH
53345: LD_INT 112
53347: PUSH
53348: LD_INT 114
53350: PUSH
53351: LD_INT 116
53353: PUSH
53354: LD_INT 117
53356: PUSH
53357: LD_INT 118
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: ST_TO_ADDR
53378: GO 55477
53380: LD_INT 10
53382: DOUBLE
53383: EQUAL
53384: IFTRUE 53388
53386: GO 53584
53388: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53389: LD_ADDR_VAR 0 2
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 4
53399: PUSH
53400: LD_INT 5
53402: PUSH
53403: LD_INT 6
53405: PUSH
53406: LD_INT 7
53408: PUSH
53409: LD_INT 8
53411: PUSH
53412: LD_INT 9
53414: PUSH
53415: LD_INT 10
53417: PUSH
53418: LD_INT 11
53420: PUSH
53421: LD_INT 12
53423: PUSH
53424: LD_INT 13
53426: PUSH
53427: LD_INT 14
53429: PUSH
53430: LD_INT 15
53432: PUSH
53433: LD_INT 16
53435: PUSH
53436: LD_INT 17
53438: PUSH
53439: LD_INT 18
53441: PUSH
53442: LD_INT 19
53444: PUSH
53445: LD_INT 20
53447: PUSH
53448: LD_INT 21
53450: PUSH
53451: LD_INT 22
53453: PUSH
53454: LD_INT 23
53456: PUSH
53457: LD_INT 24
53459: PUSH
53460: LD_INT 25
53462: PUSH
53463: LD_INT 26
53465: PUSH
53466: LD_INT 28
53468: PUSH
53469: LD_INT 30
53471: PUSH
53472: LD_INT 31
53474: PUSH
53475: LD_INT 32
53477: PUSH
53478: LD_INT 36
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 101
53514: PUSH
53515: LD_INT 102
53517: PUSH
53518: LD_INT 103
53520: PUSH
53521: LD_INT 104
53523: PUSH
53524: LD_INT 105
53526: PUSH
53527: LD_INT 106
53529: PUSH
53530: LD_INT 107
53532: PUSH
53533: LD_INT 108
53535: PUSH
53536: LD_INT 109
53538: PUSH
53539: LD_INT 110
53541: PUSH
53542: LD_INT 111
53544: PUSH
53545: LD_INT 112
53547: PUSH
53548: LD_INT 114
53550: PUSH
53551: LD_INT 116
53553: PUSH
53554: LD_INT 117
53556: PUSH
53557: LD_INT 118
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: ST_TO_ADDR
53582: GO 55477
53584: LD_INT 11
53586: DOUBLE
53587: EQUAL
53588: IFTRUE 53592
53590: GO 53796
53592: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53593: LD_ADDR_VAR 0 2
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: LD_INT 3
53603: PUSH
53604: LD_INT 4
53606: PUSH
53607: LD_INT 5
53609: PUSH
53610: LD_INT 6
53612: PUSH
53613: LD_INT 7
53615: PUSH
53616: LD_INT 8
53618: PUSH
53619: LD_INT 9
53621: PUSH
53622: LD_INT 10
53624: PUSH
53625: LD_INT 11
53627: PUSH
53628: LD_INT 12
53630: PUSH
53631: LD_INT 13
53633: PUSH
53634: LD_INT 14
53636: PUSH
53637: LD_INT 15
53639: PUSH
53640: LD_INT 16
53642: PUSH
53643: LD_INT 17
53645: PUSH
53646: LD_INT 18
53648: PUSH
53649: LD_INT 19
53651: PUSH
53652: LD_INT 20
53654: PUSH
53655: LD_INT 21
53657: PUSH
53658: LD_INT 22
53660: PUSH
53661: LD_INT 23
53663: PUSH
53664: LD_INT 24
53666: PUSH
53667: LD_INT 25
53669: PUSH
53670: LD_INT 26
53672: PUSH
53673: LD_INT 28
53675: PUSH
53676: LD_INT 30
53678: PUSH
53679: LD_INT 31
53681: PUSH
53682: LD_INT 32
53684: PUSH
53685: LD_INT 34
53687: PUSH
53688: LD_INT 36
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 101
53726: PUSH
53727: LD_INT 102
53729: PUSH
53730: LD_INT 103
53732: PUSH
53733: LD_INT 104
53735: PUSH
53736: LD_INT 105
53738: PUSH
53739: LD_INT 106
53741: PUSH
53742: LD_INT 107
53744: PUSH
53745: LD_INT 108
53747: PUSH
53748: LD_INT 109
53750: PUSH
53751: LD_INT 110
53753: PUSH
53754: LD_INT 111
53756: PUSH
53757: LD_INT 112
53759: PUSH
53760: LD_INT 114
53762: PUSH
53763: LD_INT 116
53765: PUSH
53766: LD_INT 117
53768: PUSH
53769: LD_INT 118
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: ST_TO_ADDR
53794: GO 55477
53796: LD_INT 12
53798: DOUBLE
53799: EQUAL
53800: IFTRUE 53804
53802: GO 54024
53804: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53805: LD_ADDR_VAR 0 2
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: LD_INT 3
53818: PUSH
53819: LD_INT 4
53821: PUSH
53822: LD_INT 5
53824: PUSH
53825: LD_INT 6
53827: PUSH
53828: LD_INT 7
53830: PUSH
53831: LD_INT 8
53833: PUSH
53834: LD_INT 9
53836: PUSH
53837: LD_INT 10
53839: PUSH
53840: LD_INT 11
53842: PUSH
53843: LD_INT 12
53845: PUSH
53846: LD_INT 13
53848: PUSH
53849: LD_INT 14
53851: PUSH
53852: LD_INT 15
53854: PUSH
53855: LD_INT 16
53857: PUSH
53858: LD_INT 17
53860: PUSH
53861: LD_INT 18
53863: PUSH
53864: LD_INT 19
53866: PUSH
53867: LD_INT 20
53869: PUSH
53870: LD_INT 21
53872: PUSH
53873: LD_INT 22
53875: PUSH
53876: LD_INT 23
53878: PUSH
53879: LD_INT 24
53881: PUSH
53882: LD_INT 25
53884: PUSH
53885: LD_INT 26
53887: PUSH
53888: LD_INT 27
53890: PUSH
53891: LD_INT 28
53893: PUSH
53894: LD_INT 30
53896: PUSH
53897: LD_INT 31
53899: PUSH
53900: LD_INT 32
53902: PUSH
53903: LD_INT 33
53905: PUSH
53906: LD_INT 34
53908: PUSH
53909: LD_INT 36
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 101
53950: PUSH
53951: LD_INT 102
53953: PUSH
53954: LD_INT 103
53956: PUSH
53957: LD_INT 104
53959: PUSH
53960: LD_INT 105
53962: PUSH
53963: LD_INT 106
53965: PUSH
53966: LD_INT 107
53968: PUSH
53969: LD_INT 108
53971: PUSH
53972: LD_INT 109
53974: PUSH
53975: LD_INT 110
53977: PUSH
53978: LD_INT 111
53980: PUSH
53981: LD_INT 112
53983: PUSH
53984: LD_INT 113
53986: PUSH
53987: LD_INT 114
53989: PUSH
53990: LD_INT 116
53992: PUSH
53993: LD_INT 117
53995: PUSH
53996: LD_INT 118
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: ST_TO_ADDR
54022: GO 55477
54024: LD_INT 13
54026: DOUBLE
54027: EQUAL
54028: IFTRUE 54032
54030: GO 54240
54032: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54033: LD_ADDR_VAR 0 2
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 4
54049: PUSH
54050: LD_INT 5
54052: PUSH
54053: LD_INT 8
54055: PUSH
54056: LD_INT 9
54058: PUSH
54059: LD_INT 10
54061: PUSH
54062: LD_INT 11
54064: PUSH
54065: LD_INT 12
54067: PUSH
54068: LD_INT 14
54070: PUSH
54071: LD_INT 15
54073: PUSH
54074: LD_INT 16
54076: PUSH
54077: LD_INT 17
54079: PUSH
54080: LD_INT 18
54082: PUSH
54083: LD_INT 19
54085: PUSH
54086: LD_INT 20
54088: PUSH
54089: LD_INT 21
54091: PUSH
54092: LD_INT 22
54094: PUSH
54095: LD_INT 23
54097: PUSH
54098: LD_INT 24
54100: PUSH
54101: LD_INT 25
54103: PUSH
54104: LD_INT 26
54106: PUSH
54107: LD_INT 27
54109: PUSH
54110: LD_INT 28
54112: PUSH
54113: LD_INT 30
54115: PUSH
54116: LD_INT 31
54118: PUSH
54119: LD_INT 32
54121: PUSH
54122: LD_INT 33
54124: PUSH
54125: LD_INT 34
54127: PUSH
54128: LD_INT 36
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 101
54166: PUSH
54167: LD_INT 102
54169: PUSH
54170: LD_INT 103
54172: PUSH
54173: LD_INT 104
54175: PUSH
54176: LD_INT 105
54178: PUSH
54179: LD_INT 106
54181: PUSH
54182: LD_INT 107
54184: PUSH
54185: LD_INT 108
54187: PUSH
54188: LD_INT 109
54190: PUSH
54191: LD_INT 110
54193: PUSH
54194: LD_INT 111
54196: PUSH
54197: LD_INT 112
54199: PUSH
54200: LD_INT 113
54202: PUSH
54203: LD_INT 114
54205: PUSH
54206: LD_INT 116
54208: PUSH
54209: LD_INT 117
54211: PUSH
54212: LD_INT 118
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: ST_TO_ADDR
54238: GO 55477
54240: LD_INT 14
54242: DOUBLE
54243: EQUAL
54244: IFTRUE 54248
54246: GO 54472
54248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54249: LD_ADDR_VAR 0 2
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: LD_INT 4
54265: PUSH
54266: LD_INT 5
54268: PUSH
54269: LD_INT 6
54271: PUSH
54272: LD_INT 7
54274: PUSH
54275: LD_INT 8
54277: PUSH
54278: LD_INT 9
54280: PUSH
54281: LD_INT 10
54283: PUSH
54284: LD_INT 11
54286: PUSH
54287: LD_INT 12
54289: PUSH
54290: LD_INT 13
54292: PUSH
54293: LD_INT 14
54295: PUSH
54296: LD_INT 15
54298: PUSH
54299: LD_INT 16
54301: PUSH
54302: LD_INT 17
54304: PUSH
54305: LD_INT 18
54307: PUSH
54308: LD_INT 19
54310: PUSH
54311: LD_INT 20
54313: PUSH
54314: LD_INT 21
54316: PUSH
54317: LD_INT 22
54319: PUSH
54320: LD_INT 23
54322: PUSH
54323: LD_INT 24
54325: PUSH
54326: LD_INT 25
54328: PUSH
54329: LD_INT 26
54331: PUSH
54332: LD_INT 27
54334: PUSH
54335: LD_INT 28
54337: PUSH
54338: LD_INT 29
54340: PUSH
54341: LD_INT 30
54343: PUSH
54344: LD_INT 31
54346: PUSH
54347: LD_INT 32
54349: PUSH
54350: LD_INT 33
54352: PUSH
54353: LD_INT 34
54355: PUSH
54356: LD_INT 36
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 101
54398: PUSH
54399: LD_INT 102
54401: PUSH
54402: LD_INT 103
54404: PUSH
54405: LD_INT 104
54407: PUSH
54408: LD_INT 105
54410: PUSH
54411: LD_INT 106
54413: PUSH
54414: LD_INT 107
54416: PUSH
54417: LD_INT 108
54419: PUSH
54420: LD_INT 109
54422: PUSH
54423: LD_INT 110
54425: PUSH
54426: LD_INT 111
54428: PUSH
54429: LD_INT 112
54431: PUSH
54432: LD_INT 113
54434: PUSH
54435: LD_INT 114
54437: PUSH
54438: LD_INT 116
54440: PUSH
54441: LD_INT 117
54443: PUSH
54444: LD_INT 118
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: ST_TO_ADDR
54470: GO 55477
54472: LD_INT 15
54474: DOUBLE
54475: EQUAL
54476: IFTRUE 54480
54478: GO 54704
54480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54481: LD_ADDR_VAR 0 2
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: LD_INT 4
54497: PUSH
54498: LD_INT 5
54500: PUSH
54501: LD_INT 6
54503: PUSH
54504: LD_INT 7
54506: PUSH
54507: LD_INT 8
54509: PUSH
54510: LD_INT 9
54512: PUSH
54513: LD_INT 10
54515: PUSH
54516: LD_INT 11
54518: PUSH
54519: LD_INT 12
54521: PUSH
54522: LD_INT 13
54524: PUSH
54525: LD_INT 14
54527: PUSH
54528: LD_INT 15
54530: PUSH
54531: LD_INT 16
54533: PUSH
54534: LD_INT 17
54536: PUSH
54537: LD_INT 18
54539: PUSH
54540: LD_INT 19
54542: PUSH
54543: LD_INT 20
54545: PUSH
54546: LD_INT 21
54548: PUSH
54549: LD_INT 22
54551: PUSH
54552: LD_INT 23
54554: PUSH
54555: LD_INT 24
54557: PUSH
54558: LD_INT 25
54560: PUSH
54561: LD_INT 26
54563: PUSH
54564: LD_INT 27
54566: PUSH
54567: LD_INT 28
54569: PUSH
54570: LD_INT 29
54572: PUSH
54573: LD_INT 30
54575: PUSH
54576: LD_INT 31
54578: PUSH
54579: LD_INT 32
54581: PUSH
54582: LD_INT 33
54584: PUSH
54585: LD_INT 34
54587: PUSH
54588: LD_INT 36
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 101
54630: PUSH
54631: LD_INT 102
54633: PUSH
54634: LD_INT 103
54636: PUSH
54637: LD_INT 104
54639: PUSH
54640: LD_INT 105
54642: PUSH
54643: LD_INT 106
54645: PUSH
54646: LD_INT 107
54648: PUSH
54649: LD_INT 108
54651: PUSH
54652: LD_INT 109
54654: PUSH
54655: LD_INT 110
54657: PUSH
54658: LD_INT 111
54660: PUSH
54661: LD_INT 112
54663: PUSH
54664: LD_INT 113
54666: PUSH
54667: LD_INT 114
54669: PUSH
54670: LD_INT 116
54672: PUSH
54673: LD_INT 117
54675: PUSH
54676: LD_INT 118
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: ST_TO_ADDR
54702: GO 55477
54704: LD_INT 16
54706: DOUBLE
54707: EQUAL
54708: IFTRUE 54712
54710: GO 54848
54712: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54713: LD_ADDR_VAR 0 2
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: LD_INT 4
54723: PUSH
54724: LD_INT 5
54726: PUSH
54727: LD_INT 7
54729: PUSH
54730: LD_INT 11
54732: PUSH
54733: LD_INT 12
54735: PUSH
54736: LD_INT 15
54738: PUSH
54739: LD_INT 16
54741: PUSH
54742: LD_INT 20
54744: PUSH
54745: LD_INT 21
54747: PUSH
54748: LD_INT 22
54750: PUSH
54751: LD_INT 23
54753: PUSH
54754: LD_INT 25
54756: PUSH
54757: LD_INT 26
54759: PUSH
54760: LD_INT 30
54762: PUSH
54763: LD_INT 31
54765: PUSH
54766: LD_INT 32
54768: PUSH
54769: LD_INT 33
54771: PUSH
54772: LD_INT 34
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 101
54798: PUSH
54799: LD_INT 102
54801: PUSH
54802: LD_INT 103
54804: PUSH
54805: LD_INT 106
54807: PUSH
54808: LD_INT 108
54810: PUSH
54811: LD_INT 112
54813: PUSH
54814: LD_INT 113
54816: PUSH
54817: LD_INT 114
54819: PUSH
54820: LD_INT 116
54822: PUSH
54823: LD_INT 117
54825: PUSH
54826: LD_INT 118
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: ST_TO_ADDR
54846: GO 55477
54848: LD_INT 17
54850: DOUBLE
54851: EQUAL
54852: IFTRUE 54856
54854: GO 55080
54856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54857: LD_ADDR_VAR 0 2
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: LD_INT 3
54870: PUSH
54871: LD_INT 4
54873: PUSH
54874: LD_INT 5
54876: PUSH
54877: LD_INT 6
54879: PUSH
54880: LD_INT 7
54882: PUSH
54883: LD_INT 8
54885: PUSH
54886: LD_INT 9
54888: PUSH
54889: LD_INT 10
54891: PUSH
54892: LD_INT 11
54894: PUSH
54895: LD_INT 12
54897: PUSH
54898: LD_INT 13
54900: PUSH
54901: LD_INT 14
54903: PUSH
54904: LD_INT 15
54906: PUSH
54907: LD_INT 16
54909: PUSH
54910: LD_INT 17
54912: PUSH
54913: LD_INT 18
54915: PUSH
54916: LD_INT 19
54918: PUSH
54919: LD_INT 20
54921: PUSH
54922: LD_INT 21
54924: PUSH
54925: LD_INT 22
54927: PUSH
54928: LD_INT 23
54930: PUSH
54931: LD_INT 24
54933: PUSH
54934: LD_INT 25
54936: PUSH
54937: LD_INT 26
54939: PUSH
54940: LD_INT 27
54942: PUSH
54943: LD_INT 28
54945: PUSH
54946: LD_INT 29
54948: PUSH
54949: LD_INT 30
54951: PUSH
54952: LD_INT 31
54954: PUSH
54955: LD_INT 32
54957: PUSH
54958: LD_INT 33
54960: PUSH
54961: LD_INT 34
54963: PUSH
54964: LD_INT 36
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 101
55006: PUSH
55007: LD_INT 102
55009: PUSH
55010: LD_INT 103
55012: PUSH
55013: LD_INT 104
55015: PUSH
55016: LD_INT 105
55018: PUSH
55019: LD_INT 106
55021: PUSH
55022: LD_INT 107
55024: PUSH
55025: LD_INT 108
55027: PUSH
55028: LD_INT 109
55030: PUSH
55031: LD_INT 110
55033: PUSH
55034: LD_INT 111
55036: PUSH
55037: LD_INT 112
55039: PUSH
55040: LD_INT 113
55042: PUSH
55043: LD_INT 114
55045: PUSH
55046: LD_INT 116
55048: PUSH
55049: LD_INT 117
55051: PUSH
55052: LD_INT 118
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: ST_TO_ADDR
55078: GO 55477
55080: LD_INT 18
55082: DOUBLE
55083: EQUAL
55084: IFTRUE 55088
55086: GO 55236
55088: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55089: LD_ADDR_VAR 0 2
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 4
55099: PUSH
55100: LD_INT 5
55102: PUSH
55103: LD_INT 7
55105: PUSH
55106: LD_INT 11
55108: PUSH
55109: LD_INT 12
55111: PUSH
55112: LD_INT 15
55114: PUSH
55115: LD_INT 16
55117: PUSH
55118: LD_INT 20
55120: PUSH
55121: LD_INT 21
55123: PUSH
55124: LD_INT 22
55126: PUSH
55127: LD_INT 23
55129: PUSH
55130: LD_INT 25
55132: PUSH
55133: LD_INT 26
55135: PUSH
55136: LD_INT 30
55138: PUSH
55139: LD_INT 31
55141: PUSH
55142: LD_INT 32
55144: PUSH
55145: LD_INT 33
55147: PUSH
55148: LD_INT 34
55150: PUSH
55151: LD_INT 35
55153: PUSH
55154: LD_INT 36
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 101
55182: PUSH
55183: LD_INT 102
55185: PUSH
55186: LD_INT 103
55188: PUSH
55189: LD_INT 106
55191: PUSH
55192: LD_INT 108
55194: PUSH
55195: LD_INT 112
55197: PUSH
55198: LD_INT 113
55200: PUSH
55201: LD_INT 114
55203: PUSH
55204: LD_INT 115
55206: PUSH
55207: LD_INT 116
55209: PUSH
55210: LD_INT 117
55212: PUSH
55213: LD_INT 118
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: ST_TO_ADDR
55234: GO 55477
55236: LD_INT 19
55238: DOUBLE
55239: EQUAL
55240: IFTRUE 55244
55242: GO 55476
55244: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55245: LD_ADDR_VAR 0 2
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: LD_INT 4
55261: PUSH
55262: LD_INT 5
55264: PUSH
55265: LD_INT 6
55267: PUSH
55268: LD_INT 7
55270: PUSH
55271: LD_INT 8
55273: PUSH
55274: LD_INT 9
55276: PUSH
55277: LD_INT 10
55279: PUSH
55280: LD_INT 11
55282: PUSH
55283: LD_INT 12
55285: PUSH
55286: LD_INT 13
55288: PUSH
55289: LD_INT 14
55291: PUSH
55292: LD_INT 15
55294: PUSH
55295: LD_INT 16
55297: PUSH
55298: LD_INT 17
55300: PUSH
55301: LD_INT 18
55303: PUSH
55304: LD_INT 19
55306: PUSH
55307: LD_INT 20
55309: PUSH
55310: LD_INT 21
55312: PUSH
55313: LD_INT 22
55315: PUSH
55316: LD_INT 23
55318: PUSH
55319: LD_INT 24
55321: PUSH
55322: LD_INT 25
55324: PUSH
55325: LD_INT 26
55327: PUSH
55328: LD_INT 27
55330: PUSH
55331: LD_INT 28
55333: PUSH
55334: LD_INT 29
55336: PUSH
55337: LD_INT 30
55339: PUSH
55340: LD_INT 31
55342: PUSH
55343: LD_INT 32
55345: PUSH
55346: LD_INT 33
55348: PUSH
55349: LD_INT 34
55351: PUSH
55352: LD_INT 35
55354: PUSH
55355: LD_INT 36
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 101
55398: PUSH
55399: LD_INT 102
55401: PUSH
55402: LD_INT 103
55404: PUSH
55405: LD_INT 104
55407: PUSH
55408: LD_INT 105
55410: PUSH
55411: LD_INT 106
55413: PUSH
55414: LD_INT 107
55416: PUSH
55417: LD_INT 108
55419: PUSH
55420: LD_INT 109
55422: PUSH
55423: LD_INT 110
55425: PUSH
55426: LD_INT 111
55428: PUSH
55429: LD_INT 112
55431: PUSH
55432: LD_INT 113
55434: PUSH
55435: LD_INT 114
55437: PUSH
55438: LD_INT 115
55440: PUSH
55441: LD_INT 116
55443: PUSH
55444: LD_INT 117
55446: PUSH
55447: LD_INT 118
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: ST_TO_ADDR
55474: GO 55477
55476: POP
// end else
55477: GO 55708
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55479: LD_ADDR_VAR 0 2
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: LD_INT 4
55495: PUSH
55496: LD_INT 5
55498: PUSH
55499: LD_INT 6
55501: PUSH
55502: LD_INT 7
55504: PUSH
55505: LD_INT 8
55507: PUSH
55508: LD_INT 9
55510: PUSH
55511: LD_INT 10
55513: PUSH
55514: LD_INT 11
55516: PUSH
55517: LD_INT 12
55519: PUSH
55520: LD_INT 13
55522: PUSH
55523: LD_INT 14
55525: PUSH
55526: LD_INT 15
55528: PUSH
55529: LD_INT 16
55531: PUSH
55532: LD_INT 17
55534: PUSH
55535: LD_INT 18
55537: PUSH
55538: LD_INT 19
55540: PUSH
55541: LD_INT 20
55543: PUSH
55544: LD_INT 21
55546: PUSH
55547: LD_INT 22
55549: PUSH
55550: LD_INT 23
55552: PUSH
55553: LD_INT 24
55555: PUSH
55556: LD_INT 25
55558: PUSH
55559: LD_INT 26
55561: PUSH
55562: LD_INT 27
55564: PUSH
55565: LD_INT 28
55567: PUSH
55568: LD_INT 29
55570: PUSH
55571: LD_INT 30
55573: PUSH
55574: LD_INT 31
55576: PUSH
55577: LD_INT 32
55579: PUSH
55580: LD_INT 33
55582: PUSH
55583: LD_INT 34
55585: PUSH
55586: LD_INT 35
55588: PUSH
55589: LD_INT 36
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 101
55632: PUSH
55633: LD_INT 102
55635: PUSH
55636: LD_INT 103
55638: PUSH
55639: LD_INT 104
55641: PUSH
55642: LD_INT 105
55644: PUSH
55645: LD_INT 106
55647: PUSH
55648: LD_INT 107
55650: PUSH
55651: LD_INT 108
55653: PUSH
55654: LD_INT 109
55656: PUSH
55657: LD_INT 110
55659: PUSH
55660: LD_INT 111
55662: PUSH
55663: LD_INT 112
55665: PUSH
55666: LD_INT 113
55668: PUSH
55669: LD_INT 114
55671: PUSH
55672: LD_INT 115
55674: PUSH
55675: LD_INT 116
55677: PUSH
55678: LD_INT 117
55680: PUSH
55681: LD_INT 118
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// if result then
55708: LD_VAR 0 2
55712: IFFALSE 56498
// begin normal :=  ;
55714: LD_ADDR_VAR 0 5
55718: PUSH
55719: LD_STRING 
55721: ST_TO_ADDR
// hardcore :=  ;
55722: LD_ADDR_VAR 0 6
55726: PUSH
55727: LD_STRING 
55729: ST_TO_ADDR
// active :=  ;
55730: LD_ADDR_VAR 0 7
55734: PUSH
55735: LD_STRING 
55737: ST_TO_ADDR
// for i = 1 to normalCounter do
55738: LD_ADDR_VAR 0 8
55742: PUSH
55743: DOUBLE
55744: LD_INT 1
55746: DEC
55747: ST_TO_ADDR
55748: LD_EXP 21
55752: PUSH
55753: FOR_TO
55754: IFFALSE 55855
// begin tmp := 0 ;
55756: LD_ADDR_VAR 0 3
55760: PUSH
55761: LD_STRING 0
55763: ST_TO_ADDR
// if result [ 1 ] then
55764: LD_VAR 0 2
55768: PUSH
55769: LD_INT 1
55771: ARRAY
55772: IFFALSE 55837
// if result [ 1 ] [ 1 ] = i then
55774: LD_VAR 0 2
55778: PUSH
55779: LD_INT 1
55781: ARRAY
55782: PUSH
55783: LD_INT 1
55785: ARRAY
55786: PUSH
55787: LD_VAR 0 8
55791: EQUAL
55792: IFFALSE 55837
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55794: LD_ADDR_VAR 0 2
55798: PUSH
55799: LD_VAR 0 2
55803: PPUSH
55804: LD_INT 1
55806: PPUSH
55807: LD_VAR 0 2
55811: PUSH
55812: LD_INT 1
55814: ARRAY
55815: PPUSH
55816: LD_INT 1
55818: PPUSH
55819: CALL_OW 3
55823: PPUSH
55824: CALL_OW 1
55828: ST_TO_ADDR
// tmp := 1 ;
55829: LD_ADDR_VAR 0 3
55833: PUSH
55834: LD_STRING 1
55836: ST_TO_ADDR
// end ; normal := normal & tmp ;
55837: LD_ADDR_VAR 0 5
55841: PUSH
55842: LD_VAR 0 5
55846: PUSH
55847: LD_VAR 0 3
55851: STR
55852: ST_TO_ADDR
// end ;
55853: GO 55753
55855: POP
55856: POP
// for i = 1 to hardcoreCounter do
55857: LD_ADDR_VAR 0 8
55861: PUSH
55862: DOUBLE
55863: LD_INT 1
55865: DEC
55866: ST_TO_ADDR
55867: LD_EXP 22
55871: PUSH
55872: FOR_TO
55873: IFFALSE 55978
// begin tmp := 0 ;
55875: LD_ADDR_VAR 0 3
55879: PUSH
55880: LD_STRING 0
55882: ST_TO_ADDR
// if result [ 2 ] then
55883: LD_VAR 0 2
55887: PUSH
55888: LD_INT 2
55890: ARRAY
55891: IFFALSE 55960
// if result [ 2 ] [ 1 ] = 100 + i then
55893: LD_VAR 0 2
55897: PUSH
55898: LD_INT 2
55900: ARRAY
55901: PUSH
55902: LD_INT 1
55904: ARRAY
55905: PUSH
55906: LD_INT 100
55908: PUSH
55909: LD_VAR 0 8
55913: PLUS
55914: EQUAL
55915: IFFALSE 55960
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55917: LD_ADDR_VAR 0 2
55921: PUSH
55922: LD_VAR 0 2
55926: PPUSH
55927: LD_INT 2
55929: PPUSH
55930: LD_VAR 0 2
55934: PUSH
55935: LD_INT 2
55937: ARRAY
55938: PPUSH
55939: LD_INT 1
55941: PPUSH
55942: CALL_OW 3
55946: PPUSH
55947: CALL_OW 1
55951: ST_TO_ADDR
// tmp := 1 ;
55952: LD_ADDR_VAR 0 3
55956: PUSH
55957: LD_STRING 1
55959: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55960: LD_ADDR_VAR 0 6
55964: PUSH
55965: LD_VAR 0 6
55969: PUSH
55970: LD_VAR 0 3
55974: STR
55975: ST_TO_ADDR
// end ;
55976: GO 55872
55978: POP
55979: POP
// if isGameLoad then
55980: LD_VAR 0 1
55984: IFFALSE 56459
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55986: LD_ADDR_VAR 0 4
55990: PUSH
55991: LD_EXP 25
55995: PUSH
55996: LD_EXP 24
56000: PUSH
56001: LD_EXP 26
56005: PUSH
56006: LD_EXP 23
56010: PUSH
56011: LD_EXP 27
56015: PUSH
56016: LD_EXP 28
56020: PUSH
56021: LD_EXP 29
56025: PUSH
56026: LD_EXP 30
56030: PUSH
56031: LD_EXP 31
56035: PUSH
56036: LD_EXP 32
56040: PUSH
56041: LD_EXP 33
56045: PUSH
56046: LD_EXP 34
56050: PUSH
56051: LD_EXP 35
56055: PUSH
56056: LD_EXP 36
56060: PUSH
56061: LD_EXP 44
56065: PUSH
56066: LD_EXP 45
56070: PUSH
56071: LD_EXP 46
56075: PUSH
56076: LD_EXP 47
56080: PUSH
56081: LD_EXP 49
56085: PUSH
56086: LD_EXP 50
56090: PUSH
56091: LD_EXP 51
56095: PUSH
56096: LD_EXP 54
56100: PUSH
56101: LD_EXP 56
56105: PUSH
56106: LD_EXP 57
56110: PUSH
56111: LD_EXP 58
56115: PUSH
56116: LD_EXP 60
56120: PUSH
56121: LD_EXP 61
56125: PUSH
56126: LD_EXP 64
56130: PUSH
56131: LD_EXP 65
56135: PUSH
56136: LD_EXP 66
56140: PUSH
56141: LD_EXP 67
56145: PUSH
56146: LD_EXP 68
56150: PUSH
56151: LD_EXP 69
56155: PUSH
56156: LD_EXP 70
56160: PUSH
56161: LD_EXP 71
56165: PUSH
56166: LD_EXP 72
56170: PUSH
56171: LD_EXP 37
56175: PUSH
56176: LD_EXP 38
56180: PUSH
56181: LD_EXP 41
56185: PUSH
56186: LD_EXP 42
56190: PUSH
56191: LD_EXP 43
56195: PUSH
56196: LD_EXP 39
56200: PUSH
56201: LD_EXP 40
56205: PUSH
56206: LD_EXP 48
56210: PUSH
56211: LD_EXP 52
56215: PUSH
56216: LD_EXP 53
56220: PUSH
56221: LD_EXP 55
56225: PUSH
56226: LD_EXP 59
56230: PUSH
56231: LD_EXP 62
56235: PUSH
56236: LD_EXP 63
56240: PUSH
56241: LD_EXP 73
56245: PUSH
56246: LD_EXP 74
56250: PUSH
56251: LD_EXP 75
56255: PUSH
56256: LD_EXP 76
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: ST_TO_ADDR
// tmp :=  ;
56317: LD_ADDR_VAR 0 3
56321: PUSH
56322: LD_STRING 
56324: ST_TO_ADDR
// for i = 1 to normalCounter do
56325: LD_ADDR_VAR 0 8
56329: PUSH
56330: DOUBLE
56331: LD_INT 1
56333: DEC
56334: ST_TO_ADDR
56335: LD_EXP 21
56339: PUSH
56340: FOR_TO
56341: IFFALSE 56377
// begin if flags [ i ] then
56343: LD_VAR 0 4
56347: PUSH
56348: LD_VAR 0 8
56352: ARRAY
56353: IFFALSE 56375
// tmp := tmp & i & ; ;
56355: LD_ADDR_VAR 0 3
56359: PUSH
56360: LD_VAR 0 3
56364: PUSH
56365: LD_VAR 0 8
56369: STR
56370: PUSH
56371: LD_STRING ;
56373: STR
56374: ST_TO_ADDR
// end ;
56375: GO 56340
56377: POP
56378: POP
// for i = 1 to hardcoreCounter do
56379: LD_ADDR_VAR 0 8
56383: PUSH
56384: DOUBLE
56385: LD_INT 1
56387: DEC
56388: ST_TO_ADDR
56389: LD_EXP 22
56393: PUSH
56394: FOR_TO
56395: IFFALSE 56441
// begin if flags [ normalCounter + i ] then
56397: LD_VAR 0 4
56401: PUSH
56402: LD_EXP 21
56406: PUSH
56407: LD_VAR 0 8
56411: PLUS
56412: ARRAY
56413: IFFALSE 56439
// tmp := tmp & ( 100 + i ) & ; ;
56415: LD_ADDR_VAR 0 3
56419: PUSH
56420: LD_VAR 0 3
56424: PUSH
56425: LD_INT 100
56427: PUSH
56428: LD_VAR 0 8
56432: PLUS
56433: STR
56434: PUSH
56435: LD_STRING ;
56437: STR
56438: ST_TO_ADDR
// end ;
56439: GO 56394
56441: POP
56442: POP
// if tmp then
56443: LD_VAR 0 3
56447: IFFALSE 56459
// active := tmp ;
56449: LD_ADDR_VAR 0 7
56453: PUSH
56454: LD_VAR 0 3
56458: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56459: LD_STRING getStreamItemsFromMission("
56461: PUSH
56462: LD_VAR 0 5
56466: STR
56467: PUSH
56468: LD_STRING ","
56470: STR
56471: PUSH
56472: LD_VAR 0 6
56476: STR
56477: PUSH
56478: LD_STRING ","
56480: STR
56481: PUSH
56482: LD_VAR 0 7
56486: STR
56487: PUSH
56488: LD_STRING ")
56490: STR
56491: PPUSH
56492: CALL_OW 559
// end else
56496: GO 56505
// ToLua ( getStreamItemsFromMission("","","") ) ;
56498: LD_STRING getStreamItemsFromMission("","","")
56500: PPUSH
56501: CALL_OW 559
// end ;
56505: LD_VAR 0 2
56509: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56510: LD_EXP 20
56514: PUSH
56515: LD_EXP 25
56519: AND
56520: IFFALSE 56644
56522: GO 56524
56524: DISABLE
56525: LD_INT 0
56527: PPUSH
56528: PPUSH
// begin enable ;
56529: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56530: LD_ADDR_VAR 0 2
56534: PUSH
56535: LD_INT 22
56537: PUSH
56538: LD_OWVAR 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 34
56552: PUSH
56553: LD_INT 7
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 34
56562: PUSH
56563: LD_INT 45
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 34
56572: PUSH
56573: LD_INT 28
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 34
56582: PUSH
56583: LD_INT 47
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PPUSH
56601: CALL_OW 69
56605: ST_TO_ADDR
// if not tmp then
56606: LD_VAR 0 2
56610: NOT
56611: IFFALSE 56615
// exit ;
56613: GO 56644
// for i in tmp do
56615: LD_ADDR_VAR 0 1
56619: PUSH
56620: LD_VAR 0 2
56624: PUSH
56625: FOR_IN
56626: IFFALSE 56642
// begin SetLives ( i , 0 ) ;
56628: LD_VAR 0 1
56632: PPUSH
56633: LD_INT 0
56635: PPUSH
56636: CALL_OW 234
// end ;
56640: GO 56625
56642: POP
56643: POP
// end ;
56644: PPOPN 2
56646: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56647: LD_EXP 20
56651: PUSH
56652: LD_EXP 26
56656: AND
56657: IFFALSE 56741
56659: GO 56661
56661: DISABLE
56662: LD_INT 0
56664: PPUSH
56665: PPUSH
// begin enable ;
56666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56667: LD_ADDR_VAR 0 2
56671: PUSH
56672: LD_INT 22
56674: PUSH
56675: LD_OWVAR 2
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 32
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PPUSH
56698: CALL_OW 69
56702: ST_TO_ADDR
// if not tmp then
56703: LD_VAR 0 2
56707: NOT
56708: IFFALSE 56712
// exit ;
56710: GO 56741
// for i in tmp do
56712: LD_ADDR_VAR 0 1
56716: PUSH
56717: LD_VAR 0 2
56721: PUSH
56722: FOR_IN
56723: IFFALSE 56739
// begin SetLives ( i , 0 ) ;
56725: LD_VAR 0 1
56729: PPUSH
56730: LD_INT 0
56732: PPUSH
56733: CALL_OW 234
// end ;
56737: GO 56722
56739: POP
56740: POP
// end ;
56741: PPOPN 2
56743: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56744: LD_EXP 20
56748: PUSH
56749: LD_EXP 23
56753: AND
56754: IFFALSE 56847
56756: GO 56758
56758: DISABLE
56759: LD_INT 0
56761: PPUSH
// begin enable ;
56762: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56763: LD_ADDR_VAR 0 1
56767: PUSH
56768: LD_INT 22
56770: PUSH
56771: LD_OWVAR 2
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 25
56785: PUSH
56786: LD_INT 5
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 25
56795: PUSH
56796: LD_INT 9
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 25
56805: PUSH
56806: LD_INT 8
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PPUSH
56823: CALL_OW 69
56827: PUSH
56828: FOR_IN
56829: IFFALSE 56845
// begin SetClass ( i , 1 ) ;
56831: LD_VAR 0 1
56835: PPUSH
56836: LD_INT 1
56838: PPUSH
56839: CALL_OW 336
// end ;
56843: GO 56828
56845: POP
56846: POP
// end ;
56847: PPOPN 1
56849: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56850: LD_EXP 20
56854: PUSH
56855: LD_EXP 24
56859: AND
56860: PUSH
56861: LD_OWVAR 65
56865: PUSH
56866: LD_INT 7
56868: LESS
56869: AND
56870: IFFALSE 56884
56872: GO 56874
56874: DISABLE
// begin enable ;
56875: ENABLE
// game_speed := 7 ;
56876: LD_ADDR_OWVAR 65
56880: PUSH
56881: LD_INT 7
56883: ST_TO_ADDR
// end ;
56884: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56885: LD_EXP 20
56889: PUSH
56890: LD_EXP 27
56894: AND
56895: IFFALSE 57097
56897: GO 56899
56899: DISABLE
56900: LD_INT 0
56902: PPUSH
56903: PPUSH
56904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56905: LD_ADDR_VAR 0 3
56909: PUSH
56910: LD_INT 81
56912: PUSH
56913: LD_OWVAR 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 21
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PPUSH
56936: CALL_OW 69
56940: ST_TO_ADDR
// if not tmp then
56941: LD_VAR 0 3
56945: NOT
56946: IFFALSE 56950
// exit ;
56948: GO 57097
// if tmp > 5 then
56950: LD_VAR 0 3
56954: PUSH
56955: LD_INT 5
56957: GREATER
56958: IFFALSE 56970
// k := 5 else
56960: LD_ADDR_VAR 0 2
56964: PUSH
56965: LD_INT 5
56967: ST_TO_ADDR
56968: GO 56980
// k := tmp ;
56970: LD_ADDR_VAR 0 2
56974: PUSH
56975: LD_VAR 0 3
56979: ST_TO_ADDR
// for i := 1 to k do
56980: LD_ADDR_VAR 0 1
56984: PUSH
56985: DOUBLE
56986: LD_INT 1
56988: DEC
56989: ST_TO_ADDR
56990: LD_VAR 0 2
56994: PUSH
56995: FOR_TO
56996: IFFALSE 57095
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56998: LD_VAR 0 3
57002: PUSH
57003: LD_VAR 0 1
57007: ARRAY
57008: PPUSH
57009: LD_VAR 0 1
57013: PUSH
57014: LD_INT 4
57016: MOD
57017: PUSH
57018: LD_INT 1
57020: PLUS
57021: PPUSH
57022: CALL_OW 259
57026: PUSH
57027: LD_INT 10
57029: LESS
57030: IFFALSE 57093
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57032: LD_VAR 0 3
57036: PUSH
57037: LD_VAR 0 1
57041: ARRAY
57042: PPUSH
57043: LD_VAR 0 1
57047: PUSH
57048: LD_INT 4
57050: MOD
57051: PUSH
57052: LD_INT 1
57054: PLUS
57055: PPUSH
57056: LD_VAR 0 3
57060: PUSH
57061: LD_VAR 0 1
57065: ARRAY
57066: PPUSH
57067: LD_VAR 0 1
57071: PUSH
57072: LD_INT 4
57074: MOD
57075: PUSH
57076: LD_INT 1
57078: PLUS
57079: PPUSH
57080: CALL_OW 259
57084: PUSH
57085: LD_INT 1
57087: PLUS
57088: PPUSH
57089: CALL_OW 237
57093: GO 56995
57095: POP
57096: POP
// end ;
57097: PPOPN 3
57099: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57100: LD_EXP 20
57104: PUSH
57105: LD_EXP 28
57109: AND
57110: IFFALSE 57130
57112: GO 57114
57114: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57115: LD_INT 4
57117: PPUSH
57118: LD_OWVAR 2
57122: PPUSH
57123: LD_INT 0
57125: PPUSH
57126: CALL_OW 324
57130: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57131: LD_EXP 20
57135: PUSH
57136: LD_EXP 57
57140: AND
57141: IFFALSE 57161
57143: GO 57145
57145: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57146: LD_INT 19
57148: PPUSH
57149: LD_OWVAR 2
57153: PPUSH
57154: LD_INT 0
57156: PPUSH
57157: CALL_OW 324
57161: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57162: LD_EXP 20
57166: PUSH
57167: LD_EXP 29
57171: AND
57172: IFFALSE 57274
57174: GO 57176
57176: DISABLE
57177: LD_INT 0
57179: PPUSH
57180: PPUSH
// begin enable ;
57181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57182: LD_ADDR_VAR 0 2
57186: PUSH
57187: LD_INT 22
57189: PUSH
57190: LD_OWVAR 2
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: LD_INT 34
57204: PUSH
57205: LD_INT 11
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 34
57214: PUSH
57215: LD_INT 30
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: LIST
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PPUSH
57231: CALL_OW 69
57235: ST_TO_ADDR
// if not tmp then
57236: LD_VAR 0 2
57240: NOT
57241: IFFALSE 57245
// exit ;
57243: GO 57274
// for i in tmp do
57245: LD_ADDR_VAR 0 1
57249: PUSH
57250: LD_VAR 0 2
57254: PUSH
57255: FOR_IN
57256: IFFALSE 57272
// begin SetLives ( i , 0 ) ;
57258: LD_VAR 0 1
57262: PPUSH
57263: LD_INT 0
57265: PPUSH
57266: CALL_OW 234
// end ;
57270: GO 57255
57272: POP
57273: POP
// end ;
57274: PPOPN 2
57276: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57277: LD_EXP 20
57281: PUSH
57282: LD_EXP 30
57286: AND
57287: IFFALSE 57307
57289: GO 57291
57291: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57292: LD_INT 32
57294: PPUSH
57295: LD_OWVAR 2
57299: PPUSH
57300: LD_INT 0
57302: PPUSH
57303: CALL_OW 324
57307: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57308: LD_EXP 20
57312: PUSH
57313: LD_EXP 31
57317: AND
57318: IFFALSE 57499
57320: GO 57322
57322: DISABLE
57323: LD_INT 0
57325: PPUSH
57326: PPUSH
57327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57328: LD_ADDR_VAR 0 2
57332: PUSH
57333: LD_INT 22
57335: PUSH
57336: LD_OWVAR 2
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 33
57347: PUSH
57348: LD_INT 3
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PPUSH
57359: CALL_OW 69
57363: ST_TO_ADDR
// if not tmp then
57364: LD_VAR 0 2
57368: NOT
57369: IFFALSE 57373
// exit ;
57371: GO 57499
// side := 0 ;
57373: LD_ADDR_VAR 0 3
57377: PUSH
57378: LD_INT 0
57380: ST_TO_ADDR
// for i := 1 to 8 do
57381: LD_ADDR_VAR 0 1
57385: PUSH
57386: DOUBLE
57387: LD_INT 1
57389: DEC
57390: ST_TO_ADDR
57391: LD_INT 8
57393: PUSH
57394: FOR_TO
57395: IFFALSE 57443
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57397: LD_OWVAR 2
57401: PUSH
57402: LD_VAR 0 1
57406: NONEQUAL
57407: PUSH
57408: LD_OWVAR 2
57412: PPUSH
57413: LD_VAR 0 1
57417: PPUSH
57418: CALL_OW 81
57422: PUSH
57423: LD_INT 2
57425: EQUAL
57426: AND
57427: IFFALSE 57441
// begin side := i ;
57429: LD_ADDR_VAR 0 3
57433: PUSH
57434: LD_VAR 0 1
57438: ST_TO_ADDR
// break ;
57439: GO 57443
// end ;
57441: GO 57394
57443: POP
57444: POP
// if not side then
57445: LD_VAR 0 3
57449: NOT
57450: IFFALSE 57454
// exit ;
57452: GO 57499
// for i := 1 to tmp do
57454: LD_ADDR_VAR 0 1
57458: PUSH
57459: DOUBLE
57460: LD_INT 1
57462: DEC
57463: ST_TO_ADDR
57464: LD_VAR 0 2
57468: PUSH
57469: FOR_TO
57470: IFFALSE 57497
// if Prob ( 60 ) then
57472: LD_INT 60
57474: PPUSH
57475: CALL_OW 13
57479: IFFALSE 57495
// SetSide ( i , side ) ;
57481: LD_VAR 0 1
57485: PPUSH
57486: LD_VAR 0 3
57490: PPUSH
57491: CALL_OW 235
57495: GO 57469
57497: POP
57498: POP
// end ;
57499: PPOPN 3
57501: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57502: LD_EXP 20
57506: PUSH
57507: LD_EXP 33
57511: AND
57512: IFFALSE 57631
57514: GO 57516
57516: DISABLE
57517: LD_INT 0
57519: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57520: LD_ADDR_VAR 0 1
57524: PUSH
57525: LD_INT 22
57527: PUSH
57528: LD_OWVAR 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 21
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: PUSH
57550: LD_INT 23
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: LIST
57568: PPUSH
57569: CALL_OW 69
57573: PUSH
57574: FOR_IN
57575: IFFALSE 57629
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57577: LD_VAR 0 1
57581: PPUSH
57582: CALL_OW 257
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: LD_INT 4
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: IN
57605: IFFALSE 57627
// SetClass ( un , rand ( 1 , 4 ) ) ;
57607: LD_VAR 0 1
57611: PPUSH
57612: LD_INT 1
57614: PPUSH
57615: LD_INT 4
57617: PPUSH
57618: CALL_OW 12
57622: PPUSH
57623: CALL_OW 336
57627: GO 57574
57629: POP
57630: POP
// end ;
57631: PPOPN 1
57633: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57634: LD_EXP 20
57638: PUSH
57639: LD_EXP 32
57643: AND
57644: IFFALSE 57723
57646: GO 57648
57648: DISABLE
57649: LD_INT 0
57651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57652: LD_ADDR_VAR 0 1
57656: PUSH
57657: LD_INT 22
57659: PUSH
57660: LD_OWVAR 2
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 21
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PPUSH
57683: CALL_OW 69
57687: ST_TO_ADDR
// if not tmp then
57688: LD_VAR 0 1
57692: NOT
57693: IFFALSE 57697
// exit ;
57695: GO 57723
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57697: LD_VAR 0 1
57701: PUSH
57702: LD_INT 1
57704: PPUSH
57705: LD_VAR 0 1
57709: PPUSH
57710: CALL_OW 12
57714: ARRAY
57715: PPUSH
57716: LD_INT 100
57718: PPUSH
57719: CALL_OW 234
// end ;
57723: PPOPN 1
57725: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57726: LD_EXP 20
57730: PUSH
57731: LD_EXP 34
57735: AND
57736: IFFALSE 57834
57738: GO 57740
57740: DISABLE
57741: LD_INT 0
57743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57744: LD_ADDR_VAR 0 1
57748: PUSH
57749: LD_INT 22
57751: PUSH
57752: LD_OWVAR 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 21
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PPUSH
57775: CALL_OW 69
57779: ST_TO_ADDR
// if not tmp then
57780: LD_VAR 0 1
57784: NOT
57785: IFFALSE 57789
// exit ;
57787: GO 57834
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57789: LD_VAR 0 1
57793: PUSH
57794: LD_INT 1
57796: PPUSH
57797: LD_VAR 0 1
57801: PPUSH
57802: CALL_OW 12
57806: ARRAY
57807: PPUSH
57808: LD_INT 1
57810: PPUSH
57811: LD_INT 4
57813: PPUSH
57814: CALL_OW 12
57818: PPUSH
57819: LD_INT 3000
57821: PPUSH
57822: LD_INT 9000
57824: PPUSH
57825: CALL_OW 12
57829: PPUSH
57830: CALL_OW 492
// end ;
57834: PPOPN 1
57836: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57837: LD_EXP 20
57841: PUSH
57842: LD_EXP 35
57846: AND
57847: IFFALSE 57867
57849: GO 57851
57851: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57852: LD_INT 1
57854: PPUSH
57855: LD_OWVAR 2
57859: PPUSH
57860: LD_INT 0
57862: PPUSH
57863: CALL_OW 324
57867: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57868: LD_EXP 20
57872: PUSH
57873: LD_EXP 36
57877: AND
57878: IFFALSE 57961
57880: GO 57882
57882: DISABLE
57883: LD_INT 0
57885: PPUSH
57886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57887: LD_ADDR_VAR 0 2
57891: PUSH
57892: LD_INT 22
57894: PUSH
57895: LD_OWVAR 2
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 21
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PPUSH
57918: CALL_OW 69
57922: ST_TO_ADDR
// if not tmp then
57923: LD_VAR 0 2
57927: NOT
57928: IFFALSE 57932
// exit ;
57930: GO 57961
// for i in tmp do
57932: LD_ADDR_VAR 0 1
57936: PUSH
57937: LD_VAR 0 2
57941: PUSH
57942: FOR_IN
57943: IFFALSE 57959
// SetBLevel ( i , 10 ) ;
57945: LD_VAR 0 1
57949: PPUSH
57950: LD_INT 10
57952: PPUSH
57953: CALL_OW 241
57957: GO 57942
57959: POP
57960: POP
// end ;
57961: PPOPN 2
57963: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57964: LD_EXP 20
57968: PUSH
57969: LD_EXP 37
57973: AND
57974: IFFALSE 58085
57976: GO 57978
57978: DISABLE
57979: LD_INT 0
57981: PPUSH
57982: PPUSH
57983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57984: LD_ADDR_VAR 0 3
57988: PUSH
57989: LD_INT 22
57991: PUSH
57992: LD_OWVAR 2
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 25
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PPUSH
58015: CALL_OW 69
58019: ST_TO_ADDR
// if not tmp then
58020: LD_VAR 0 3
58024: NOT
58025: IFFALSE 58029
// exit ;
58027: GO 58085
// un := tmp [ rand ( 1 , tmp ) ] ;
58029: LD_ADDR_VAR 0 2
58033: PUSH
58034: LD_VAR 0 3
58038: PUSH
58039: LD_INT 1
58041: PPUSH
58042: LD_VAR 0 3
58046: PPUSH
58047: CALL_OW 12
58051: ARRAY
58052: ST_TO_ADDR
// if Crawls ( un ) then
58053: LD_VAR 0 2
58057: PPUSH
58058: CALL_OW 318
58062: IFFALSE 58073
// ComWalk ( un ) ;
58064: LD_VAR 0 2
58068: PPUSH
58069: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58073: LD_VAR 0 2
58077: PPUSH
58078: LD_INT 5
58080: PPUSH
58081: CALL_OW 336
// end ;
58085: PPOPN 3
58087: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58088: LD_EXP 20
58092: PUSH
58093: LD_EXP 38
58097: AND
58098: PUSH
58099: LD_OWVAR 67
58103: PUSH
58104: LD_INT 4
58106: LESS
58107: AND
58108: IFFALSE 58127
58110: GO 58112
58112: DISABLE
// begin Difficulty := Difficulty + 1 ;
58113: LD_ADDR_OWVAR 67
58117: PUSH
58118: LD_OWVAR 67
58122: PUSH
58123: LD_INT 1
58125: PLUS
58126: ST_TO_ADDR
// end ;
58127: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58128: LD_EXP 20
58132: PUSH
58133: LD_EXP 39
58137: AND
58138: IFFALSE 58241
58140: GO 58142
58142: DISABLE
58143: LD_INT 0
58145: PPUSH
// begin for i := 1 to 5 do
58146: LD_ADDR_VAR 0 1
58150: PUSH
58151: DOUBLE
58152: LD_INT 1
58154: DEC
58155: ST_TO_ADDR
58156: LD_INT 5
58158: PUSH
58159: FOR_TO
58160: IFFALSE 58239
// begin uc_nation := nation_nature ;
58162: LD_ADDR_OWVAR 21
58166: PUSH
58167: LD_INT 0
58169: ST_TO_ADDR
// uc_side := 0 ;
58170: LD_ADDR_OWVAR 20
58174: PUSH
58175: LD_INT 0
58177: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58178: LD_ADDR_OWVAR 29
58182: PUSH
58183: LD_INT 12
58185: PUSH
58186: LD_INT 12
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// hc_agressivity := 20 ;
58193: LD_ADDR_OWVAR 35
58197: PUSH
58198: LD_INT 20
58200: ST_TO_ADDR
// hc_class := class_tiger ;
58201: LD_ADDR_OWVAR 28
58205: PUSH
58206: LD_INT 14
58208: ST_TO_ADDR
// hc_gallery :=  ;
58209: LD_ADDR_OWVAR 33
58213: PUSH
58214: LD_STRING 
58216: ST_TO_ADDR
// hc_name :=  ;
58217: LD_ADDR_OWVAR 26
58221: PUSH
58222: LD_STRING 
58224: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58225: CALL_OW 44
58229: PPUSH
58230: LD_INT 0
58232: PPUSH
58233: CALL_OW 51
// end ;
58237: GO 58159
58239: POP
58240: POP
// end ;
58241: PPOPN 1
58243: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58244: LD_EXP 20
58248: PUSH
58249: LD_EXP 40
58253: AND
58254: IFFALSE 58263
58256: GO 58258
58258: DISABLE
// StreamSibBomb ;
58259: CALL 58264 0 0
58263: END
// export function StreamSibBomb ; var i , x , y ; begin
58264: LD_INT 0
58266: PPUSH
58267: PPUSH
58268: PPUSH
58269: PPUSH
// result := false ;
58270: LD_ADDR_VAR 0 1
58274: PUSH
58275: LD_INT 0
58277: ST_TO_ADDR
// for i := 1 to 16 do
58278: LD_ADDR_VAR 0 2
58282: PUSH
58283: DOUBLE
58284: LD_INT 1
58286: DEC
58287: ST_TO_ADDR
58288: LD_INT 16
58290: PUSH
58291: FOR_TO
58292: IFFALSE 58491
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58294: LD_ADDR_VAR 0 3
58298: PUSH
58299: LD_INT 10
58301: PUSH
58302: LD_INT 20
58304: PUSH
58305: LD_INT 30
58307: PUSH
58308: LD_INT 40
58310: PUSH
58311: LD_INT 50
58313: PUSH
58314: LD_INT 60
58316: PUSH
58317: LD_INT 70
58319: PUSH
58320: LD_INT 80
58322: PUSH
58323: LD_INT 90
58325: PUSH
58326: LD_INT 100
58328: PUSH
58329: LD_INT 110
58331: PUSH
58332: LD_INT 120
58334: PUSH
58335: LD_INT 130
58337: PUSH
58338: LD_INT 140
58340: PUSH
58341: LD_INT 150
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: PPUSH
58364: LD_INT 15
58366: PPUSH
58367: CALL_OW 12
58371: ARRAY
58372: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58373: LD_ADDR_VAR 0 4
58377: PUSH
58378: LD_INT 10
58380: PUSH
58381: LD_INT 20
58383: PUSH
58384: LD_INT 30
58386: PUSH
58387: LD_INT 40
58389: PUSH
58390: LD_INT 50
58392: PUSH
58393: LD_INT 60
58395: PUSH
58396: LD_INT 70
58398: PUSH
58399: LD_INT 80
58401: PUSH
58402: LD_INT 90
58404: PUSH
58405: LD_INT 100
58407: PUSH
58408: LD_INT 110
58410: PUSH
58411: LD_INT 120
58413: PUSH
58414: LD_INT 130
58416: PUSH
58417: LD_INT 140
58419: PUSH
58420: LD_INT 150
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PPUSH
58443: LD_INT 15
58445: PPUSH
58446: CALL_OW 12
58450: ARRAY
58451: ST_TO_ADDR
// if ValidHex ( x , y ) then
58452: LD_VAR 0 3
58456: PPUSH
58457: LD_VAR 0 4
58461: PPUSH
58462: CALL_OW 488
58466: IFFALSE 58489
// begin result := [ x , y ] ;
58468: LD_ADDR_VAR 0 1
58472: PUSH
58473: LD_VAR 0 3
58477: PUSH
58478: LD_VAR 0 4
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: ST_TO_ADDR
// break ;
58487: GO 58491
// end ; end ;
58489: GO 58291
58491: POP
58492: POP
// if result then
58493: LD_VAR 0 1
58497: IFFALSE 58557
// begin ToLua ( playSibBomb() ) ;
58499: LD_STRING playSibBomb()
58501: PPUSH
58502: CALL_OW 559
// wait ( 0 0$14 ) ;
58506: LD_INT 490
58508: PPUSH
58509: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58513: LD_VAR 0 1
58517: PUSH
58518: LD_INT 1
58520: ARRAY
58521: PPUSH
58522: LD_VAR 0 1
58526: PUSH
58527: LD_INT 2
58529: ARRAY
58530: PPUSH
58531: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58535: LD_VAR 0 1
58539: PUSH
58540: LD_INT 1
58542: ARRAY
58543: PPUSH
58544: LD_VAR 0 1
58548: PUSH
58549: LD_INT 2
58551: ARRAY
58552: PPUSH
58553: CALL_OW 429
// end ; end ;
58557: LD_VAR 0 1
58561: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58562: LD_EXP 20
58566: PUSH
58567: LD_EXP 42
58571: AND
58572: IFFALSE 58584
58574: GO 58576
58576: DISABLE
// YouLost (  ) ;
58577: LD_STRING 
58579: PPUSH
58580: CALL_OW 104
58584: END
// every 0 0$1 trigger StreamModeActive and sFog do
58585: LD_EXP 20
58589: PUSH
58590: LD_EXP 41
58594: AND
58595: IFFALSE 58609
58597: GO 58599
58599: DISABLE
// FogOff ( your_side ) ;
58600: LD_OWVAR 2
58604: PPUSH
58605: CALL_OW 344
58609: END
// every 0 0$1 trigger StreamModeActive and sSun do
58610: LD_EXP 20
58614: PUSH
58615: LD_EXP 43
58619: AND
58620: IFFALSE 58648
58622: GO 58624
58624: DISABLE
// begin solar_recharge_percent := 0 ;
58625: LD_ADDR_OWVAR 79
58629: PUSH
58630: LD_INT 0
58632: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58633: LD_INT 10500
58635: PPUSH
58636: CALL_OW 67
// solar_recharge_percent := 100 ;
58640: LD_ADDR_OWVAR 79
58644: PUSH
58645: LD_INT 100
58647: ST_TO_ADDR
// end ;
58648: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58649: LD_EXP 20
58653: PUSH
58654: LD_EXP 44
58658: AND
58659: IFFALSE 58898
58661: GO 58663
58663: DISABLE
58664: LD_INT 0
58666: PPUSH
58667: PPUSH
58668: PPUSH
// begin tmp := [ ] ;
58669: LD_ADDR_VAR 0 3
58673: PUSH
58674: EMPTY
58675: ST_TO_ADDR
// for i := 1 to 6 do
58676: LD_ADDR_VAR 0 1
58680: PUSH
58681: DOUBLE
58682: LD_INT 1
58684: DEC
58685: ST_TO_ADDR
58686: LD_INT 6
58688: PUSH
58689: FOR_TO
58690: IFFALSE 58795
// begin uc_nation := nation_nature ;
58692: LD_ADDR_OWVAR 21
58696: PUSH
58697: LD_INT 0
58699: ST_TO_ADDR
// uc_side := 0 ;
58700: LD_ADDR_OWVAR 20
58704: PUSH
58705: LD_INT 0
58707: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58708: LD_ADDR_OWVAR 29
58712: PUSH
58713: LD_INT 12
58715: PUSH
58716: LD_INT 12
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: ST_TO_ADDR
// hc_agressivity := 20 ;
58723: LD_ADDR_OWVAR 35
58727: PUSH
58728: LD_INT 20
58730: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58731: LD_ADDR_OWVAR 28
58735: PUSH
58736: LD_INT 17
58738: ST_TO_ADDR
// hc_gallery :=  ;
58739: LD_ADDR_OWVAR 33
58743: PUSH
58744: LD_STRING 
58746: ST_TO_ADDR
// hc_name :=  ;
58747: LD_ADDR_OWVAR 26
58751: PUSH
58752: LD_STRING 
58754: ST_TO_ADDR
// un := CreateHuman ;
58755: LD_ADDR_VAR 0 2
58759: PUSH
58760: CALL_OW 44
58764: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58765: LD_VAR 0 2
58769: PPUSH
58770: LD_INT 1
58772: PPUSH
58773: CALL_OW 51
// tmp := tmp ^ un ;
58777: LD_ADDR_VAR 0 3
58781: PUSH
58782: LD_VAR 0 3
58786: PUSH
58787: LD_VAR 0 2
58791: ADD
58792: ST_TO_ADDR
// end ;
58793: GO 58689
58795: POP
58796: POP
// repeat wait ( 0 0$1 ) ;
58797: LD_INT 35
58799: PPUSH
58800: CALL_OW 67
// for un in tmp do
58804: LD_ADDR_VAR 0 2
58808: PUSH
58809: LD_VAR 0 3
58813: PUSH
58814: FOR_IN
58815: IFFALSE 58889
// begin if IsDead ( un ) then
58817: LD_VAR 0 2
58821: PPUSH
58822: CALL_OW 301
58826: IFFALSE 58846
// begin tmp := tmp diff un ;
58828: LD_ADDR_VAR 0 3
58832: PUSH
58833: LD_VAR 0 3
58837: PUSH
58838: LD_VAR 0 2
58842: DIFF
58843: ST_TO_ADDR
// continue ;
58844: GO 58814
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58846: LD_VAR 0 2
58850: PPUSH
58851: LD_INT 3
58853: PUSH
58854: LD_INT 22
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PPUSH
58868: CALL_OW 69
58872: PPUSH
58873: LD_VAR 0 2
58877: PPUSH
58878: CALL_OW 74
58882: PPUSH
58883: CALL_OW 115
// end ;
58887: GO 58814
58889: POP
58890: POP
// until not tmp ;
58891: LD_VAR 0 3
58895: NOT
58896: IFFALSE 58797
// end ;
58898: PPOPN 3
58900: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58901: LD_EXP 20
58905: PUSH
58906: LD_EXP 45
58910: AND
58911: IFFALSE 58965
58913: GO 58915
58915: DISABLE
// begin ToLua ( displayTroll(); ) ;
58916: LD_STRING displayTroll();
58918: PPUSH
58919: CALL_OW 559
// wait ( 3 3$00 ) ;
58923: LD_INT 6300
58925: PPUSH
58926: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58930: LD_STRING hideTroll();
58932: PPUSH
58933: CALL_OW 559
// wait ( 1 1$00 ) ;
58937: LD_INT 2100
58939: PPUSH
58940: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58944: LD_STRING displayTroll();
58946: PPUSH
58947: CALL_OW 559
// wait ( 1 1$00 ) ;
58951: LD_INT 2100
58953: PPUSH
58954: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58958: LD_STRING hideTroll();
58960: PPUSH
58961: CALL_OW 559
// end ;
58965: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58966: LD_EXP 20
58970: PUSH
58971: LD_EXP 46
58975: AND
58976: IFFALSE 59039
58978: GO 58980
58980: DISABLE
58981: LD_INT 0
58983: PPUSH
// begin p := 0 ;
58984: LD_ADDR_VAR 0 1
58988: PUSH
58989: LD_INT 0
58991: ST_TO_ADDR
// repeat game_speed := 1 ;
58992: LD_ADDR_OWVAR 65
58996: PUSH
58997: LD_INT 1
58999: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59000: LD_INT 35
59002: PPUSH
59003: CALL_OW 67
// p := p + 1 ;
59007: LD_ADDR_VAR 0 1
59011: PUSH
59012: LD_VAR 0 1
59016: PUSH
59017: LD_INT 1
59019: PLUS
59020: ST_TO_ADDR
// until p >= 60 ;
59021: LD_VAR 0 1
59025: PUSH
59026: LD_INT 60
59028: GREATEREQUAL
59029: IFFALSE 58992
// game_speed := 4 ;
59031: LD_ADDR_OWVAR 65
59035: PUSH
59036: LD_INT 4
59038: ST_TO_ADDR
// end ;
59039: PPOPN 1
59041: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59042: LD_EXP 20
59046: PUSH
59047: LD_EXP 47
59051: AND
59052: IFFALSE 59198
59054: GO 59056
59056: DISABLE
59057: LD_INT 0
59059: PPUSH
59060: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59061: LD_ADDR_VAR 0 1
59065: PUSH
59066: LD_INT 22
59068: PUSH
59069: LD_OWVAR 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: LD_INT 30
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 30
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: LIST
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PPUSH
59110: CALL_OW 69
59114: ST_TO_ADDR
// if not depot then
59115: LD_VAR 0 1
59119: NOT
59120: IFFALSE 59124
// exit ;
59122: GO 59198
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59124: LD_ADDR_VAR 0 2
59128: PUSH
59129: LD_VAR 0 1
59133: PUSH
59134: LD_INT 1
59136: PPUSH
59137: LD_VAR 0 1
59141: PPUSH
59142: CALL_OW 12
59146: ARRAY
59147: PPUSH
59148: CALL_OW 274
59152: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59153: LD_VAR 0 2
59157: PPUSH
59158: LD_INT 1
59160: PPUSH
59161: LD_INT 0
59163: PPUSH
59164: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59168: LD_VAR 0 2
59172: PPUSH
59173: LD_INT 2
59175: PPUSH
59176: LD_INT 0
59178: PPUSH
59179: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59183: LD_VAR 0 2
59187: PPUSH
59188: LD_INT 3
59190: PPUSH
59191: LD_INT 0
59193: PPUSH
59194: CALL_OW 277
// end ;
59198: PPOPN 2
59200: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59201: LD_EXP 20
59205: PUSH
59206: LD_EXP 48
59210: AND
59211: IFFALSE 59308
59213: GO 59215
59215: DISABLE
59216: LD_INT 0
59218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59219: LD_ADDR_VAR 0 1
59223: PUSH
59224: LD_INT 22
59226: PUSH
59227: LD_OWVAR 2
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 21
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: PUSH
59249: LD_INT 23
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: LIST
59267: PPUSH
59268: CALL_OW 69
59272: ST_TO_ADDR
// if not tmp then
59273: LD_VAR 0 1
59277: NOT
59278: IFFALSE 59282
// exit ;
59280: GO 59308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59282: LD_VAR 0 1
59286: PUSH
59287: LD_INT 1
59289: PPUSH
59290: LD_VAR 0 1
59294: PPUSH
59295: CALL_OW 12
59299: ARRAY
59300: PPUSH
59301: LD_INT 200
59303: PPUSH
59304: CALL_OW 234
// end ;
59308: PPOPN 1
59310: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59311: LD_EXP 20
59315: PUSH
59316: LD_EXP 49
59320: AND
59321: IFFALSE 59400
59323: GO 59325
59325: DISABLE
59326: LD_INT 0
59328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59329: LD_ADDR_VAR 0 1
59333: PUSH
59334: LD_INT 22
59336: PUSH
59337: LD_OWVAR 2
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 21
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PPUSH
59360: CALL_OW 69
59364: ST_TO_ADDR
// if not tmp then
59365: LD_VAR 0 1
59369: NOT
59370: IFFALSE 59374
// exit ;
59372: GO 59400
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59374: LD_VAR 0 1
59378: PUSH
59379: LD_INT 1
59381: PPUSH
59382: LD_VAR 0 1
59386: PPUSH
59387: CALL_OW 12
59391: ARRAY
59392: PPUSH
59393: LD_INT 60
59395: PPUSH
59396: CALL_OW 234
// end ;
59400: PPOPN 1
59402: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59403: LD_EXP 20
59407: PUSH
59408: LD_EXP 50
59412: AND
59413: IFFALSE 59512
59415: GO 59417
59417: DISABLE
59418: LD_INT 0
59420: PPUSH
59421: PPUSH
// begin enable ;
59422: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59423: LD_ADDR_VAR 0 1
59427: PUSH
59428: LD_INT 22
59430: PUSH
59431: LD_OWVAR 2
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 61
59442: PUSH
59443: EMPTY
59444: LIST
59445: PUSH
59446: LD_INT 33
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: PPUSH
59461: CALL_OW 69
59465: ST_TO_ADDR
// if not tmp then
59466: LD_VAR 0 1
59470: NOT
59471: IFFALSE 59475
// exit ;
59473: GO 59512
// for i in tmp do
59475: LD_ADDR_VAR 0 2
59479: PUSH
59480: LD_VAR 0 1
59484: PUSH
59485: FOR_IN
59486: IFFALSE 59510
// if IsControledBy ( i ) then
59488: LD_VAR 0 2
59492: PPUSH
59493: CALL_OW 312
59497: IFFALSE 59508
// ComUnlink ( i ) ;
59499: LD_VAR 0 2
59503: PPUSH
59504: CALL_OW 136
59508: GO 59485
59510: POP
59511: POP
// end ;
59512: PPOPN 2
59514: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59515: LD_EXP 20
59519: PUSH
59520: LD_EXP 51
59524: AND
59525: IFFALSE 59665
59527: GO 59529
59529: DISABLE
59530: LD_INT 0
59532: PPUSH
59533: PPUSH
// begin ToLua ( displayPowell(); ) ;
59534: LD_STRING displayPowell();
59536: PPUSH
59537: CALL_OW 559
// uc_side := 0 ;
59541: LD_ADDR_OWVAR 20
59545: PUSH
59546: LD_INT 0
59548: ST_TO_ADDR
// uc_nation := 2 ;
59549: LD_ADDR_OWVAR 21
59553: PUSH
59554: LD_INT 2
59556: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59557: LD_ADDR_OWVAR 37
59561: PUSH
59562: LD_INT 14
59564: ST_TO_ADDR
// vc_engine := engine_siberite ;
59565: LD_ADDR_OWVAR 39
59569: PUSH
59570: LD_INT 3
59572: ST_TO_ADDR
// vc_control := control_apeman ;
59573: LD_ADDR_OWVAR 38
59577: PUSH
59578: LD_INT 5
59580: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59581: LD_ADDR_OWVAR 40
59585: PUSH
59586: LD_INT 29
59588: ST_TO_ADDR
// un := CreateVehicle ;
59589: LD_ADDR_VAR 0 2
59593: PUSH
59594: CALL_OW 45
59598: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59599: LD_VAR 0 2
59603: PPUSH
59604: LD_INT 1
59606: PPUSH
59607: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59611: LD_INT 35
59613: PPUSH
59614: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59618: LD_VAR 0 2
59622: PPUSH
59623: LD_INT 22
59625: PUSH
59626: LD_OWVAR 2
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PPUSH
59635: CALL_OW 69
59639: PPUSH
59640: LD_VAR 0 2
59644: PPUSH
59645: CALL_OW 74
59649: PPUSH
59650: CALL_OW 115
// until IsDead ( un ) ;
59654: LD_VAR 0 2
59658: PPUSH
59659: CALL_OW 301
59663: IFFALSE 59611
// end ;
59665: PPOPN 2
59667: END
// every 0 0$1 trigger StreamModeActive and sStu do
59668: LD_EXP 20
59672: PUSH
59673: LD_EXP 59
59677: AND
59678: IFFALSE 59694
59680: GO 59682
59682: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59683: LD_STRING displayStucuk();
59685: PPUSH
59686: CALL_OW 559
// ResetFog ;
59690: CALL_OW 335
// end ;
59694: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59695: LD_EXP 20
59699: PUSH
59700: LD_EXP 52
59704: AND
59705: IFFALSE 59846
59707: GO 59709
59709: DISABLE
59710: LD_INT 0
59712: PPUSH
59713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59714: LD_ADDR_VAR 0 2
59718: PUSH
59719: LD_INT 22
59721: PUSH
59722: LD_OWVAR 2
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 21
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PPUSH
59745: CALL_OW 69
59749: ST_TO_ADDR
// if not tmp then
59750: LD_VAR 0 2
59754: NOT
59755: IFFALSE 59759
// exit ;
59757: GO 59846
// un := tmp [ rand ( 1 , tmp ) ] ;
59759: LD_ADDR_VAR 0 1
59763: PUSH
59764: LD_VAR 0 2
59768: PUSH
59769: LD_INT 1
59771: PPUSH
59772: LD_VAR 0 2
59776: PPUSH
59777: CALL_OW 12
59781: ARRAY
59782: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59783: LD_VAR 0 1
59787: PPUSH
59788: LD_INT 0
59790: PPUSH
59791: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59795: LD_VAR 0 1
59799: PPUSH
59800: LD_OWVAR 3
59804: PUSH
59805: LD_VAR 0 1
59809: DIFF
59810: PPUSH
59811: LD_VAR 0 1
59815: PPUSH
59816: CALL_OW 74
59820: PPUSH
59821: CALL_OW 115
// wait ( 0 0$20 ) ;
59825: LD_INT 700
59827: PPUSH
59828: CALL_OW 67
// SetSide ( un , your_side ) ;
59832: LD_VAR 0 1
59836: PPUSH
59837: LD_OWVAR 2
59841: PPUSH
59842: CALL_OW 235
// end ;
59846: PPOPN 2
59848: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59849: LD_EXP 20
59853: PUSH
59854: LD_EXP 53
59858: AND
59859: IFFALSE 59965
59861: GO 59863
59863: DISABLE
59864: LD_INT 0
59866: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59867: LD_ADDR_VAR 0 1
59871: PUSH
59872: LD_INT 22
59874: PUSH
59875: LD_OWVAR 2
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: LD_INT 30
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 30
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PPUSH
59916: CALL_OW 69
59920: ST_TO_ADDR
// if not depot then
59921: LD_VAR 0 1
59925: NOT
59926: IFFALSE 59930
// exit ;
59928: GO 59965
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59930: LD_VAR 0 1
59934: PUSH
59935: LD_INT 1
59937: ARRAY
59938: PPUSH
59939: CALL_OW 250
59943: PPUSH
59944: LD_VAR 0 1
59948: PUSH
59949: LD_INT 1
59951: ARRAY
59952: PPUSH
59953: CALL_OW 251
59957: PPUSH
59958: LD_INT 70
59960: PPUSH
59961: CALL_OW 495
// end ;
59965: PPOPN 1
59967: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59968: LD_EXP 20
59972: PUSH
59973: LD_EXP 54
59977: AND
59978: IFFALSE 60189
59980: GO 59982
59982: DISABLE
59983: LD_INT 0
59985: PPUSH
59986: PPUSH
59987: PPUSH
59988: PPUSH
59989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59990: LD_ADDR_VAR 0 5
59994: PUSH
59995: LD_INT 22
59997: PUSH
59998: LD_OWVAR 2
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 21
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PPUSH
60021: CALL_OW 69
60025: ST_TO_ADDR
// if not tmp then
60026: LD_VAR 0 5
60030: NOT
60031: IFFALSE 60035
// exit ;
60033: GO 60189
// for i in tmp do
60035: LD_ADDR_VAR 0 1
60039: PUSH
60040: LD_VAR 0 5
60044: PUSH
60045: FOR_IN
60046: IFFALSE 60187
// begin d := rand ( 0 , 5 ) ;
60048: LD_ADDR_VAR 0 4
60052: PUSH
60053: LD_INT 0
60055: PPUSH
60056: LD_INT 5
60058: PPUSH
60059: CALL_OW 12
60063: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60064: LD_ADDR_VAR 0 2
60068: PUSH
60069: LD_VAR 0 1
60073: PPUSH
60074: CALL_OW 250
60078: PPUSH
60079: LD_VAR 0 4
60083: PPUSH
60084: LD_INT 3
60086: PPUSH
60087: LD_INT 12
60089: PPUSH
60090: CALL_OW 12
60094: PPUSH
60095: CALL_OW 272
60099: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60100: LD_ADDR_VAR 0 3
60104: PUSH
60105: LD_VAR 0 1
60109: PPUSH
60110: CALL_OW 251
60114: PPUSH
60115: LD_VAR 0 4
60119: PPUSH
60120: LD_INT 3
60122: PPUSH
60123: LD_INT 12
60125: PPUSH
60126: CALL_OW 12
60130: PPUSH
60131: CALL_OW 273
60135: ST_TO_ADDR
// if ValidHex ( x , y ) then
60136: LD_VAR 0 2
60140: PPUSH
60141: LD_VAR 0 3
60145: PPUSH
60146: CALL_OW 488
60150: IFFALSE 60185
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60152: LD_VAR 0 1
60156: PPUSH
60157: LD_VAR 0 2
60161: PPUSH
60162: LD_VAR 0 3
60166: PPUSH
60167: LD_INT 3
60169: PPUSH
60170: LD_INT 6
60172: PPUSH
60173: CALL_OW 12
60177: PPUSH
60178: LD_INT 1
60180: PPUSH
60181: CALL_OW 483
// end ;
60185: GO 60045
60187: POP
60188: POP
// end ;
60189: PPOPN 5
60191: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60192: LD_EXP 20
60196: PUSH
60197: LD_EXP 55
60201: AND
60202: IFFALSE 60296
60204: GO 60206
60206: DISABLE
60207: LD_INT 0
60209: PPUSH
60210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60211: LD_ADDR_VAR 0 2
60215: PUSH
60216: LD_INT 22
60218: PUSH
60219: LD_OWVAR 2
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 32
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 21
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: PPUSH
60253: CALL_OW 69
60257: ST_TO_ADDR
// if not tmp then
60258: LD_VAR 0 2
60262: NOT
60263: IFFALSE 60267
// exit ;
60265: GO 60296
// for i in tmp do
60267: LD_ADDR_VAR 0 1
60271: PUSH
60272: LD_VAR 0 2
60276: PUSH
60277: FOR_IN
60278: IFFALSE 60294
// SetFuel ( i , 0 ) ;
60280: LD_VAR 0 1
60284: PPUSH
60285: LD_INT 0
60287: PPUSH
60288: CALL_OW 240
60292: GO 60277
60294: POP
60295: POP
// end ;
60296: PPOPN 2
60298: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60299: LD_EXP 20
60303: PUSH
60304: LD_EXP 56
60308: AND
60309: IFFALSE 60375
60311: GO 60313
60313: DISABLE
60314: LD_INT 0
60316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60317: LD_ADDR_VAR 0 1
60321: PUSH
60322: LD_INT 22
60324: PUSH
60325: LD_OWVAR 2
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 30
60336: PUSH
60337: LD_INT 29
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PPUSH
60348: CALL_OW 69
60352: ST_TO_ADDR
// if not tmp then
60353: LD_VAR 0 1
60357: NOT
60358: IFFALSE 60362
// exit ;
60360: GO 60375
// DestroyUnit ( tmp [ 1 ] ) ;
60362: LD_VAR 0 1
60366: PUSH
60367: LD_INT 1
60369: ARRAY
60370: PPUSH
60371: CALL_OW 65
// end ;
60375: PPOPN 1
60377: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60378: LD_EXP 20
60382: PUSH
60383: LD_EXP 58
60387: AND
60388: IFFALSE 60517
60390: GO 60392
60392: DISABLE
60393: LD_INT 0
60395: PPUSH
// begin uc_side := 0 ;
60396: LD_ADDR_OWVAR 20
60400: PUSH
60401: LD_INT 0
60403: ST_TO_ADDR
// uc_nation := nation_arabian ;
60404: LD_ADDR_OWVAR 21
60408: PUSH
60409: LD_INT 2
60411: ST_TO_ADDR
// hc_gallery :=  ;
60412: LD_ADDR_OWVAR 33
60416: PUSH
60417: LD_STRING 
60419: ST_TO_ADDR
// hc_name :=  ;
60420: LD_ADDR_OWVAR 26
60424: PUSH
60425: LD_STRING 
60427: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60428: LD_INT 1
60430: PPUSH
60431: LD_INT 11
60433: PPUSH
60434: LD_INT 10
60436: PPUSH
60437: CALL_OW 380
// un := CreateHuman ;
60441: LD_ADDR_VAR 0 1
60445: PUSH
60446: CALL_OW 44
60450: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60451: LD_VAR 0 1
60455: PPUSH
60456: LD_INT 1
60458: PPUSH
60459: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60463: LD_INT 35
60465: PPUSH
60466: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60470: LD_VAR 0 1
60474: PPUSH
60475: LD_INT 22
60477: PUSH
60478: LD_OWVAR 2
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PPUSH
60487: CALL_OW 69
60491: PPUSH
60492: LD_VAR 0 1
60496: PPUSH
60497: CALL_OW 74
60501: PPUSH
60502: CALL_OW 115
// until IsDead ( un ) ;
60506: LD_VAR 0 1
60510: PPUSH
60511: CALL_OW 301
60515: IFFALSE 60463
// end ;
60517: PPOPN 1
60519: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60520: LD_EXP 20
60524: PUSH
60525: LD_EXP 60
60529: AND
60530: IFFALSE 60542
60532: GO 60534
60534: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60535: LD_STRING earthquake(getX(game), 0, 32)
60537: PPUSH
60538: CALL_OW 559
60542: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60543: LD_EXP 20
60547: PUSH
60548: LD_EXP 61
60552: AND
60553: IFFALSE 60644
60555: GO 60557
60557: DISABLE
60558: LD_INT 0
60560: PPUSH
// begin enable ;
60561: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60562: LD_ADDR_VAR 0 1
60566: PUSH
60567: LD_INT 22
60569: PUSH
60570: LD_OWVAR 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 21
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 33
60591: PUSH
60592: LD_INT 3
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: LIST
60603: PPUSH
60604: CALL_OW 69
60608: ST_TO_ADDR
// if not tmp then
60609: LD_VAR 0 1
60613: NOT
60614: IFFALSE 60618
// exit ;
60616: GO 60644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60618: LD_VAR 0 1
60622: PUSH
60623: LD_INT 1
60625: PPUSH
60626: LD_VAR 0 1
60630: PPUSH
60631: CALL_OW 12
60635: ARRAY
60636: PPUSH
60637: LD_INT 1
60639: PPUSH
60640: CALL_OW 234
// end ;
60644: PPOPN 1
60646: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60647: LD_EXP 20
60651: PUSH
60652: LD_EXP 62
60656: AND
60657: IFFALSE 60798
60659: GO 60661
60661: DISABLE
60662: LD_INT 0
60664: PPUSH
60665: PPUSH
60666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60667: LD_ADDR_VAR 0 3
60671: PUSH
60672: LD_INT 22
60674: PUSH
60675: LD_OWVAR 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 25
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PPUSH
60698: CALL_OW 69
60702: ST_TO_ADDR
// if not tmp then
60703: LD_VAR 0 3
60707: NOT
60708: IFFALSE 60712
// exit ;
60710: GO 60798
// un := tmp [ rand ( 1 , tmp ) ] ;
60712: LD_ADDR_VAR 0 2
60716: PUSH
60717: LD_VAR 0 3
60721: PUSH
60722: LD_INT 1
60724: PPUSH
60725: LD_VAR 0 3
60729: PPUSH
60730: CALL_OW 12
60734: ARRAY
60735: ST_TO_ADDR
// if Crawls ( un ) then
60736: LD_VAR 0 2
60740: PPUSH
60741: CALL_OW 318
60745: IFFALSE 60756
// ComWalk ( un ) ;
60747: LD_VAR 0 2
60751: PPUSH
60752: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60756: LD_VAR 0 2
60760: PPUSH
60761: LD_INT 9
60763: PPUSH
60764: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60768: LD_INT 28
60770: PPUSH
60771: LD_OWVAR 2
60775: PPUSH
60776: LD_INT 2
60778: PPUSH
60779: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60783: LD_INT 29
60785: PPUSH
60786: LD_OWVAR 2
60790: PPUSH
60791: LD_INT 2
60793: PPUSH
60794: CALL_OW 322
// end ;
60798: PPOPN 3
60800: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60801: LD_EXP 20
60805: PUSH
60806: LD_EXP 63
60810: AND
60811: IFFALSE 60922
60813: GO 60815
60815: DISABLE
60816: LD_INT 0
60818: PPUSH
60819: PPUSH
60820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60821: LD_ADDR_VAR 0 3
60825: PUSH
60826: LD_INT 22
60828: PUSH
60829: LD_OWVAR 2
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 25
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PPUSH
60852: CALL_OW 69
60856: ST_TO_ADDR
// if not tmp then
60857: LD_VAR 0 3
60861: NOT
60862: IFFALSE 60866
// exit ;
60864: GO 60922
// un := tmp [ rand ( 1 , tmp ) ] ;
60866: LD_ADDR_VAR 0 2
60870: PUSH
60871: LD_VAR 0 3
60875: PUSH
60876: LD_INT 1
60878: PPUSH
60879: LD_VAR 0 3
60883: PPUSH
60884: CALL_OW 12
60888: ARRAY
60889: ST_TO_ADDR
// if Crawls ( un ) then
60890: LD_VAR 0 2
60894: PPUSH
60895: CALL_OW 318
60899: IFFALSE 60910
// ComWalk ( un ) ;
60901: LD_VAR 0 2
60905: PPUSH
60906: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60910: LD_VAR 0 2
60914: PPUSH
60915: LD_INT 8
60917: PPUSH
60918: CALL_OW 336
// end ;
60922: PPOPN 3
60924: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60925: LD_EXP 20
60929: PUSH
60930: LD_EXP 64
60934: AND
60935: IFFALSE 61079
60937: GO 60939
60939: DISABLE
60940: LD_INT 0
60942: PPUSH
60943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60944: LD_ADDR_VAR 0 2
60948: PUSH
60949: LD_INT 22
60951: PUSH
60952: LD_OWVAR 2
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 21
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: LD_INT 34
60976: PUSH
60977: LD_INT 12
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 34
60986: PUSH
60987: LD_INT 51
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 34
60996: PUSH
60997: LD_INT 32
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: LIST
61014: PPUSH
61015: CALL_OW 69
61019: ST_TO_ADDR
// if not tmp then
61020: LD_VAR 0 2
61024: NOT
61025: IFFALSE 61029
// exit ;
61027: GO 61079
// for i in tmp do
61029: LD_ADDR_VAR 0 1
61033: PUSH
61034: LD_VAR 0 2
61038: PUSH
61039: FOR_IN
61040: IFFALSE 61077
// if GetCargo ( i , mat_artifact ) = 0 then
61042: LD_VAR 0 1
61046: PPUSH
61047: LD_INT 4
61049: PPUSH
61050: CALL_OW 289
61054: PUSH
61055: LD_INT 0
61057: EQUAL
61058: IFFALSE 61075
// SetCargo ( i , mat_siberit , 100 ) ;
61060: LD_VAR 0 1
61064: PPUSH
61065: LD_INT 3
61067: PPUSH
61068: LD_INT 100
61070: PPUSH
61071: CALL_OW 290
61075: GO 61039
61077: POP
61078: POP
// end ;
61079: PPOPN 2
61081: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61082: LD_EXP 20
61086: PUSH
61087: LD_EXP 65
61091: AND
61092: IFFALSE 61275
61094: GO 61096
61096: DISABLE
61097: LD_INT 0
61099: PPUSH
61100: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61101: LD_ADDR_VAR 0 2
61105: PUSH
61106: LD_INT 22
61108: PUSH
61109: LD_OWVAR 2
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PPUSH
61118: CALL_OW 69
61122: ST_TO_ADDR
// if not tmp then
61123: LD_VAR 0 2
61127: NOT
61128: IFFALSE 61132
// exit ;
61130: GO 61275
// for i := 1 to 2 do
61132: LD_ADDR_VAR 0 1
61136: PUSH
61137: DOUBLE
61138: LD_INT 1
61140: DEC
61141: ST_TO_ADDR
61142: LD_INT 2
61144: PUSH
61145: FOR_TO
61146: IFFALSE 61273
// begin uc_side := your_side ;
61148: LD_ADDR_OWVAR 20
61152: PUSH
61153: LD_OWVAR 2
61157: ST_TO_ADDR
// uc_nation := nation_american ;
61158: LD_ADDR_OWVAR 21
61162: PUSH
61163: LD_INT 1
61165: ST_TO_ADDR
// vc_chassis := us_morphling ;
61166: LD_ADDR_OWVAR 37
61170: PUSH
61171: LD_INT 5
61173: ST_TO_ADDR
// vc_engine := engine_siberite ;
61174: LD_ADDR_OWVAR 39
61178: PUSH
61179: LD_INT 3
61181: ST_TO_ADDR
// vc_control := control_computer ;
61182: LD_ADDR_OWVAR 38
61186: PUSH
61187: LD_INT 3
61189: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61190: LD_ADDR_OWVAR 40
61194: PUSH
61195: LD_INT 10
61197: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61198: LD_VAR 0 2
61202: PUSH
61203: LD_INT 1
61205: ARRAY
61206: PPUSH
61207: CALL_OW 310
61211: NOT
61212: IFFALSE 61259
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61214: CALL_OW 45
61218: PPUSH
61219: LD_VAR 0 2
61223: PUSH
61224: LD_INT 1
61226: ARRAY
61227: PPUSH
61228: CALL_OW 250
61232: PPUSH
61233: LD_VAR 0 2
61237: PUSH
61238: LD_INT 1
61240: ARRAY
61241: PPUSH
61242: CALL_OW 251
61246: PPUSH
61247: LD_INT 12
61249: PPUSH
61250: LD_INT 1
61252: PPUSH
61253: CALL_OW 50
61257: GO 61271
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61259: CALL_OW 45
61263: PPUSH
61264: LD_INT 1
61266: PPUSH
61267: CALL_OW 51
// end ;
61271: GO 61145
61273: POP
61274: POP
// end ;
61275: PPOPN 2
61277: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61278: LD_EXP 20
61282: PUSH
61283: LD_EXP 66
61287: AND
61288: IFFALSE 61510
61290: GO 61292
61292: DISABLE
61293: LD_INT 0
61295: PPUSH
61296: PPUSH
61297: PPUSH
61298: PPUSH
61299: PPUSH
61300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61301: LD_ADDR_VAR 0 6
61305: PUSH
61306: LD_INT 22
61308: PUSH
61309: LD_OWVAR 2
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 21
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 3
61330: PUSH
61331: LD_INT 23
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: PPUSH
61350: CALL_OW 69
61354: ST_TO_ADDR
// if not tmp then
61355: LD_VAR 0 6
61359: NOT
61360: IFFALSE 61364
// exit ;
61362: GO 61510
// s1 := rand ( 1 , 4 ) ;
61364: LD_ADDR_VAR 0 2
61368: PUSH
61369: LD_INT 1
61371: PPUSH
61372: LD_INT 4
61374: PPUSH
61375: CALL_OW 12
61379: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61380: LD_ADDR_VAR 0 4
61384: PUSH
61385: LD_VAR 0 6
61389: PUSH
61390: LD_INT 1
61392: ARRAY
61393: PPUSH
61394: LD_VAR 0 2
61398: PPUSH
61399: CALL_OW 259
61403: ST_TO_ADDR
// if s1 = 1 then
61404: LD_VAR 0 2
61408: PUSH
61409: LD_INT 1
61411: EQUAL
61412: IFFALSE 61432
// s2 := rand ( 2 , 4 ) else
61414: LD_ADDR_VAR 0 3
61418: PUSH
61419: LD_INT 2
61421: PPUSH
61422: LD_INT 4
61424: PPUSH
61425: CALL_OW 12
61429: ST_TO_ADDR
61430: GO 61440
// s2 := 1 ;
61432: LD_ADDR_VAR 0 3
61436: PUSH
61437: LD_INT 1
61439: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61440: LD_ADDR_VAR 0 5
61444: PUSH
61445: LD_VAR 0 6
61449: PUSH
61450: LD_INT 1
61452: ARRAY
61453: PPUSH
61454: LD_VAR 0 3
61458: PPUSH
61459: CALL_OW 259
61463: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61464: LD_VAR 0 6
61468: PUSH
61469: LD_INT 1
61471: ARRAY
61472: PPUSH
61473: LD_VAR 0 2
61477: PPUSH
61478: LD_VAR 0 5
61482: PPUSH
61483: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61487: LD_VAR 0 6
61491: PUSH
61492: LD_INT 1
61494: ARRAY
61495: PPUSH
61496: LD_VAR 0 3
61500: PPUSH
61501: LD_VAR 0 4
61505: PPUSH
61506: CALL_OW 237
// end ;
61510: PPOPN 6
61512: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61513: LD_EXP 20
61517: PUSH
61518: LD_EXP 67
61522: AND
61523: IFFALSE 61602
61525: GO 61527
61527: DISABLE
61528: LD_INT 0
61530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61531: LD_ADDR_VAR 0 1
61535: PUSH
61536: LD_INT 22
61538: PUSH
61539: LD_OWVAR 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 30
61550: PUSH
61551: LD_INT 3
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PPUSH
61562: CALL_OW 69
61566: ST_TO_ADDR
// if not tmp then
61567: LD_VAR 0 1
61571: NOT
61572: IFFALSE 61576
// exit ;
61574: GO 61602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61576: LD_VAR 0 1
61580: PUSH
61581: LD_INT 1
61583: PPUSH
61584: LD_VAR 0 1
61588: PPUSH
61589: CALL_OW 12
61593: ARRAY
61594: PPUSH
61595: LD_INT 1
61597: PPUSH
61598: CALL_OW 234
// end ;
61602: PPOPN 1
61604: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61605: LD_EXP 20
61609: PUSH
61610: LD_EXP 68
61614: AND
61615: IFFALSE 61727
61617: GO 61619
61619: DISABLE
61620: LD_INT 0
61622: PPUSH
61623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61624: LD_ADDR_VAR 0 2
61628: PUSH
61629: LD_INT 22
61631: PUSH
61632: LD_OWVAR 2
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 2
61643: PUSH
61644: LD_INT 30
61646: PUSH
61647: LD_INT 27
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 30
61656: PUSH
61657: LD_INT 26
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 30
61666: PUSH
61667: LD_INT 28
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PPUSH
61684: CALL_OW 69
61688: ST_TO_ADDR
// if not tmp then
61689: LD_VAR 0 2
61693: NOT
61694: IFFALSE 61698
// exit ;
61696: GO 61727
// for i in tmp do
61698: LD_ADDR_VAR 0 1
61702: PUSH
61703: LD_VAR 0 2
61707: PUSH
61708: FOR_IN
61709: IFFALSE 61725
// SetLives ( i , 1 ) ;
61711: LD_VAR 0 1
61715: PPUSH
61716: LD_INT 1
61718: PPUSH
61719: CALL_OW 234
61723: GO 61708
61725: POP
61726: POP
// end ;
61727: PPOPN 2
61729: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61730: LD_EXP 20
61734: PUSH
61735: LD_EXP 69
61739: AND
61740: IFFALSE 62027
61742: GO 61744
61744: DISABLE
61745: LD_INT 0
61747: PPUSH
61748: PPUSH
61749: PPUSH
// begin i := rand ( 1 , 7 ) ;
61750: LD_ADDR_VAR 0 1
61754: PUSH
61755: LD_INT 1
61757: PPUSH
61758: LD_INT 7
61760: PPUSH
61761: CALL_OW 12
61765: ST_TO_ADDR
// case i of 1 :
61766: LD_VAR 0 1
61770: PUSH
61771: LD_INT 1
61773: DOUBLE
61774: EQUAL
61775: IFTRUE 61779
61777: GO 61789
61779: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61780: LD_STRING earthquake(getX(game), 0, 32)
61782: PPUSH
61783: CALL_OW 559
61787: GO 62027
61789: LD_INT 2
61791: DOUBLE
61792: EQUAL
61793: IFTRUE 61797
61795: GO 61811
61797: POP
// begin ToLua ( displayStucuk(); ) ;
61798: LD_STRING displayStucuk();
61800: PPUSH
61801: CALL_OW 559
// ResetFog ;
61805: CALL_OW 335
// end ; 3 :
61809: GO 62027
61811: LD_INT 3
61813: DOUBLE
61814: EQUAL
61815: IFTRUE 61819
61817: GO 61923
61819: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61820: LD_ADDR_VAR 0 2
61824: PUSH
61825: LD_INT 22
61827: PUSH
61828: LD_OWVAR 2
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 25
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PPUSH
61851: CALL_OW 69
61855: ST_TO_ADDR
// if not tmp then
61856: LD_VAR 0 2
61860: NOT
61861: IFFALSE 61865
// exit ;
61863: GO 62027
// un := tmp [ rand ( 1 , tmp ) ] ;
61865: LD_ADDR_VAR 0 3
61869: PUSH
61870: LD_VAR 0 2
61874: PUSH
61875: LD_INT 1
61877: PPUSH
61878: LD_VAR 0 2
61882: PPUSH
61883: CALL_OW 12
61887: ARRAY
61888: ST_TO_ADDR
// if Crawls ( un ) then
61889: LD_VAR 0 3
61893: PPUSH
61894: CALL_OW 318
61898: IFFALSE 61909
// ComWalk ( un ) ;
61900: LD_VAR 0 3
61904: PPUSH
61905: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61909: LD_VAR 0 3
61913: PPUSH
61914: LD_INT 8
61916: PPUSH
61917: CALL_OW 336
// end ; 4 :
61921: GO 62027
61923: LD_INT 4
61925: DOUBLE
61926: EQUAL
61927: IFTRUE 61931
61929: GO 62005
61931: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61932: LD_ADDR_VAR 0 2
61936: PUSH
61937: LD_INT 22
61939: PUSH
61940: LD_OWVAR 2
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 30
61951: PUSH
61952: LD_INT 29
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PPUSH
61963: CALL_OW 69
61967: ST_TO_ADDR
// if not tmp then
61968: LD_VAR 0 2
61972: NOT
61973: IFFALSE 61977
// exit ;
61975: GO 62027
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61977: LD_VAR 0 2
61981: PUSH
61982: LD_INT 1
61984: ARRAY
61985: PPUSH
61986: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61990: LD_VAR 0 2
61994: PUSH
61995: LD_INT 1
61997: ARRAY
61998: PPUSH
61999: CALL_OW 65
// end ; 5 .. 7 :
62003: GO 62027
62005: LD_INT 5
62007: DOUBLE
62008: GREATEREQUAL
62009: IFFALSE 62017
62011: LD_INT 7
62013: DOUBLE
62014: LESSEQUAL
62015: IFTRUE 62019
62017: GO 62026
62019: POP
// StreamSibBomb ; end ;
62020: CALL 58264 0 0
62024: GO 62027
62026: POP
// end ;
62027: PPOPN 3
62029: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62030: LD_EXP 20
62034: PUSH
62035: LD_EXP 70
62039: AND
62040: IFFALSE 62196
62042: GO 62044
62044: DISABLE
62045: LD_INT 0
62047: PPUSH
62048: PPUSH
62049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62050: LD_ADDR_VAR 0 2
62054: PUSH
62055: LD_INT 81
62057: PUSH
62058: LD_OWVAR 2
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 2
62069: PUSH
62070: LD_INT 21
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 21
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: LIST
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PPUSH
62099: CALL_OW 69
62103: ST_TO_ADDR
// if not tmp then
62104: LD_VAR 0 2
62108: NOT
62109: IFFALSE 62113
// exit ;
62111: GO 62196
// p := 0 ;
62113: LD_ADDR_VAR 0 3
62117: PUSH
62118: LD_INT 0
62120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62121: LD_INT 35
62123: PPUSH
62124: CALL_OW 67
// p := p + 1 ;
62128: LD_ADDR_VAR 0 3
62132: PUSH
62133: LD_VAR 0 3
62137: PUSH
62138: LD_INT 1
62140: PLUS
62141: ST_TO_ADDR
// for i in tmp do
62142: LD_ADDR_VAR 0 1
62146: PUSH
62147: LD_VAR 0 2
62151: PUSH
62152: FOR_IN
62153: IFFALSE 62184
// if GetLives ( i ) < 1000 then
62155: LD_VAR 0 1
62159: PPUSH
62160: CALL_OW 256
62164: PUSH
62165: LD_INT 1000
62167: LESS
62168: IFFALSE 62182
// SetLives ( i , 1000 ) ;
62170: LD_VAR 0 1
62174: PPUSH
62175: LD_INT 1000
62177: PPUSH
62178: CALL_OW 234
62182: GO 62152
62184: POP
62185: POP
// until p > 20 ;
62186: LD_VAR 0 3
62190: PUSH
62191: LD_INT 20
62193: GREATER
62194: IFFALSE 62121
// end ;
62196: PPOPN 3
62198: END
// every 0 0$1 trigger StreamModeActive and sTime do
62199: LD_EXP 20
62203: PUSH
62204: LD_EXP 71
62208: AND
62209: IFFALSE 62244
62211: GO 62213
62213: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62214: LD_INT 28
62216: PPUSH
62217: LD_OWVAR 2
62221: PPUSH
62222: LD_INT 2
62224: PPUSH
62225: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62229: LD_INT 30
62231: PPUSH
62232: LD_OWVAR 2
62236: PPUSH
62237: LD_INT 2
62239: PPUSH
62240: CALL_OW 322
// end ;
62244: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62245: LD_EXP 20
62249: PUSH
62250: LD_EXP 72
62254: AND
62255: IFFALSE 62376
62257: GO 62259
62259: DISABLE
62260: LD_INT 0
62262: PPUSH
62263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62264: LD_ADDR_VAR 0 2
62268: PUSH
62269: LD_INT 22
62271: PUSH
62272: LD_OWVAR 2
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 21
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 3
62293: PUSH
62294: LD_INT 23
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: LIST
62312: PPUSH
62313: CALL_OW 69
62317: ST_TO_ADDR
// if not tmp then
62318: LD_VAR 0 2
62322: NOT
62323: IFFALSE 62327
// exit ;
62325: GO 62376
// for i in tmp do
62327: LD_ADDR_VAR 0 1
62331: PUSH
62332: LD_VAR 0 2
62336: PUSH
62337: FOR_IN
62338: IFFALSE 62374
// begin if Crawls ( i ) then
62340: LD_VAR 0 1
62344: PPUSH
62345: CALL_OW 318
62349: IFFALSE 62360
// ComWalk ( i ) ;
62351: LD_VAR 0 1
62355: PPUSH
62356: CALL_OW 138
// SetClass ( i , 2 ) ;
62360: LD_VAR 0 1
62364: PPUSH
62365: LD_INT 2
62367: PPUSH
62368: CALL_OW 336
// end ;
62372: GO 62337
62374: POP
62375: POP
// end ;
62376: PPOPN 2
62378: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62379: LD_EXP 20
62383: PUSH
62384: LD_EXP 73
62388: AND
62389: IFFALSE 62677
62391: GO 62393
62393: DISABLE
62394: LD_INT 0
62396: PPUSH
62397: PPUSH
62398: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62399: LD_OWVAR 2
62403: PPUSH
62404: LD_INT 9
62406: PPUSH
62407: LD_INT 1
62409: PPUSH
62410: LD_INT 1
62412: PPUSH
62413: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62417: LD_INT 9
62419: PPUSH
62420: LD_OWVAR 2
62424: PPUSH
62425: CALL_OW 343
// uc_side := 9 ;
62429: LD_ADDR_OWVAR 20
62433: PUSH
62434: LD_INT 9
62436: ST_TO_ADDR
// uc_nation := 2 ;
62437: LD_ADDR_OWVAR 21
62441: PUSH
62442: LD_INT 2
62444: ST_TO_ADDR
// hc_name := Dark Warrior ;
62445: LD_ADDR_OWVAR 26
62449: PUSH
62450: LD_STRING Dark Warrior
62452: ST_TO_ADDR
// hc_gallery :=  ;
62453: LD_ADDR_OWVAR 33
62457: PUSH
62458: LD_STRING 
62460: ST_TO_ADDR
// hc_noskilllimit := true ;
62461: LD_ADDR_OWVAR 76
62465: PUSH
62466: LD_INT 1
62468: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62469: LD_ADDR_OWVAR 31
62473: PUSH
62474: LD_INT 30
62476: PUSH
62477: LD_INT 30
62479: PUSH
62480: LD_INT 30
62482: PUSH
62483: LD_INT 30
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: ST_TO_ADDR
// un := CreateHuman ;
62492: LD_ADDR_VAR 0 3
62496: PUSH
62497: CALL_OW 44
62501: ST_TO_ADDR
// hc_noskilllimit := false ;
62502: LD_ADDR_OWVAR 76
62506: PUSH
62507: LD_INT 0
62509: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62510: LD_VAR 0 3
62514: PPUSH
62515: LD_INT 1
62517: PPUSH
62518: CALL_OW 51
// ToLua ( playRanger() ) ;
62522: LD_STRING playRanger()
62524: PPUSH
62525: CALL_OW 559
// p := 0 ;
62529: LD_ADDR_VAR 0 2
62533: PUSH
62534: LD_INT 0
62536: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62537: LD_INT 35
62539: PPUSH
62540: CALL_OW 67
// p := p + 1 ;
62544: LD_ADDR_VAR 0 2
62548: PUSH
62549: LD_VAR 0 2
62553: PUSH
62554: LD_INT 1
62556: PLUS
62557: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62558: LD_VAR 0 3
62562: PPUSH
62563: CALL_OW 256
62567: PUSH
62568: LD_INT 1000
62570: LESS
62571: IFFALSE 62585
// SetLives ( un , 1000 ) ;
62573: LD_VAR 0 3
62577: PPUSH
62578: LD_INT 1000
62580: PPUSH
62581: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62585: LD_VAR 0 3
62589: PPUSH
62590: LD_INT 81
62592: PUSH
62593: LD_OWVAR 2
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 91
62604: PUSH
62605: LD_VAR 0 3
62609: PUSH
62610: LD_INT 30
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: LIST
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PPUSH
62622: CALL_OW 69
62626: PPUSH
62627: LD_VAR 0 3
62631: PPUSH
62632: CALL_OW 74
62636: PPUSH
62637: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62641: LD_VAR 0 2
62645: PUSH
62646: LD_INT 80
62648: GREATER
62649: PUSH
62650: LD_VAR 0 3
62654: PPUSH
62655: CALL_OW 301
62659: OR
62660: IFFALSE 62537
// if un then
62662: LD_VAR 0 3
62666: IFFALSE 62677
// RemoveUnit ( un ) ;
62668: LD_VAR 0 3
62672: PPUSH
62673: CALL_OW 64
// end ;
62677: PPOPN 3
62679: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62680: LD_EXP 74
62684: IFFALSE 62800
62686: GO 62688
62688: DISABLE
62689: LD_INT 0
62691: PPUSH
62692: PPUSH
62693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62694: LD_ADDR_VAR 0 2
62698: PUSH
62699: LD_INT 81
62701: PUSH
62702: LD_OWVAR 2
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 21
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PPUSH
62725: CALL_OW 69
62729: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62730: LD_STRING playComputer()
62732: PPUSH
62733: CALL_OW 559
// if not tmp then
62737: LD_VAR 0 2
62741: NOT
62742: IFFALSE 62746
// exit ;
62744: GO 62800
// for i in tmp do
62746: LD_ADDR_VAR 0 1
62750: PUSH
62751: LD_VAR 0 2
62755: PUSH
62756: FOR_IN
62757: IFFALSE 62798
// for j := 1 to 4 do
62759: LD_ADDR_VAR 0 3
62763: PUSH
62764: DOUBLE
62765: LD_INT 1
62767: DEC
62768: ST_TO_ADDR
62769: LD_INT 4
62771: PUSH
62772: FOR_TO
62773: IFFALSE 62794
// SetSkill ( i , j , 10 ) ;
62775: LD_VAR 0 1
62779: PPUSH
62780: LD_VAR 0 3
62784: PPUSH
62785: LD_INT 10
62787: PPUSH
62788: CALL_OW 237
62792: GO 62772
62794: POP
62795: POP
62796: GO 62756
62798: POP
62799: POP
// end ;
62800: PPOPN 3
62802: END
// every 0 0$1 trigger s30 do var i , tmp ;
62803: LD_EXP 75
62807: IFFALSE 62876
62809: GO 62811
62811: DISABLE
62812: LD_INT 0
62814: PPUSH
62815: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62816: LD_ADDR_VAR 0 2
62820: PUSH
62821: LD_INT 22
62823: PUSH
62824: LD_OWVAR 2
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PPUSH
62833: CALL_OW 69
62837: ST_TO_ADDR
// if not tmp then
62838: LD_VAR 0 2
62842: NOT
62843: IFFALSE 62847
// exit ;
62845: GO 62876
// for i in tmp do
62847: LD_ADDR_VAR 0 1
62851: PUSH
62852: LD_VAR 0 2
62856: PUSH
62857: FOR_IN
62858: IFFALSE 62874
// SetLives ( i , 300 ) ;
62860: LD_VAR 0 1
62864: PPUSH
62865: LD_INT 300
62867: PPUSH
62868: CALL_OW 234
62872: GO 62857
62874: POP
62875: POP
// end ;
62876: PPOPN 2
62878: END
// every 0 0$1 trigger s60 do var i , tmp ;
62879: LD_EXP 76
62883: IFFALSE 62952
62885: GO 62887
62887: DISABLE
62888: LD_INT 0
62890: PPUSH
62891: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62892: LD_ADDR_VAR 0 2
62896: PUSH
62897: LD_INT 22
62899: PUSH
62900: LD_OWVAR 2
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PPUSH
62909: CALL_OW 69
62913: ST_TO_ADDR
// if not tmp then
62914: LD_VAR 0 2
62918: NOT
62919: IFFALSE 62923
// exit ;
62921: GO 62952
// for i in tmp do
62923: LD_ADDR_VAR 0 1
62927: PUSH
62928: LD_VAR 0 2
62932: PUSH
62933: FOR_IN
62934: IFFALSE 62950
// SetLives ( i , 600 ) ;
62936: LD_VAR 0 1
62940: PPUSH
62941: LD_INT 600
62943: PPUSH
62944: CALL_OW 234
62948: GO 62933
62950: POP
62951: POP
// end ;
62952: PPOPN 2
62954: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62955: LD_INT 0
62957: PPUSH
// case cmd of 301 :
62958: LD_VAR 0 1
62962: PUSH
62963: LD_INT 301
62965: DOUBLE
62966: EQUAL
62967: IFTRUE 62971
62969: GO 63003
62971: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62972: LD_VAR 0 6
62976: PPUSH
62977: LD_VAR 0 7
62981: PPUSH
62982: LD_VAR 0 8
62986: PPUSH
62987: LD_VAR 0 4
62991: PPUSH
62992: LD_VAR 0 5
62996: PPUSH
62997: CALL 64212 0 5
63001: GO 63124
63003: LD_INT 302
63005: DOUBLE
63006: EQUAL
63007: IFTRUE 63011
63009: GO 63048
63011: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63012: LD_VAR 0 6
63016: PPUSH
63017: LD_VAR 0 7
63021: PPUSH
63022: LD_VAR 0 8
63026: PPUSH
63027: LD_VAR 0 9
63031: PPUSH
63032: LD_VAR 0 4
63036: PPUSH
63037: LD_VAR 0 5
63041: PPUSH
63042: CALL 64303 0 6
63046: GO 63124
63048: LD_INT 303
63050: DOUBLE
63051: EQUAL
63052: IFTRUE 63056
63054: GO 63093
63056: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63057: LD_VAR 0 6
63061: PPUSH
63062: LD_VAR 0 7
63066: PPUSH
63067: LD_VAR 0 8
63071: PPUSH
63072: LD_VAR 0 9
63076: PPUSH
63077: LD_VAR 0 4
63081: PPUSH
63082: LD_VAR 0 5
63086: PPUSH
63087: CALL 63129 0 6
63091: GO 63124
63093: LD_INT 304
63095: DOUBLE
63096: EQUAL
63097: IFTRUE 63101
63099: GO 63123
63101: POP
// hHackTeleport ( unit , x , y ) ; end ;
63102: LD_VAR 0 2
63106: PPUSH
63107: LD_VAR 0 4
63111: PPUSH
63112: LD_VAR 0 5
63116: PPUSH
63117: CALL 64896 0 3
63121: GO 63124
63123: POP
// end ;
63124: LD_VAR 0 12
63128: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63129: LD_INT 0
63131: PPUSH
63132: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63133: LD_VAR 0 1
63137: PUSH
63138: LD_INT 1
63140: LESS
63141: PUSH
63142: LD_VAR 0 1
63146: PUSH
63147: LD_INT 3
63149: GREATER
63150: OR
63151: PUSH
63152: LD_VAR 0 5
63156: PPUSH
63157: LD_VAR 0 6
63161: PPUSH
63162: CALL_OW 428
63166: OR
63167: IFFALSE 63171
// exit ;
63169: GO 63899
// uc_side := your_side ;
63171: LD_ADDR_OWVAR 20
63175: PUSH
63176: LD_OWVAR 2
63180: ST_TO_ADDR
// uc_nation := nation ;
63181: LD_ADDR_OWVAR 21
63185: PUSH
63186: LD_VAR 0 1
63190: ST_TO_ADDR
// bc_level = 1 ;
63191: LD_ADDR_OWVAR 43
63195: PUSH
63196: LD_INT 1
63198: ST_TO_ADDR
// case btype of 1 :
63199: LD_VAR 0 2
63203: PUSH
63204: LD_INT 1
63206: DOUBLE
63207: EQUAL
63208: IFTRUE 63212
63210: GO 63223
63212: POP
// bc_type := b_depot ; 2 :
63213: LD_ADDR_OWVAR 42
63217: PUSH
63218: LD_INT 0
63220: ST_TO_ADDR
63221: GO 63843
63223: LD_INT 2
63225: DOUBLE
63226: EQUAL
63227: IFTRUE 63231
63229: GO 63242
63231: POP
// bc_type := b_warehouse ; 3 :
63232: LD_ADDR_OWVAR 42
63236: PUSH
63237: LD_INT 1
63239: ST_TO_ADDR
63240: GO 63843
63242: LD_INT 3
63244: DOUBLE
63245: EQUAL
63246: IFTRUE 63250
63248: GO 63261
63250: POP
// bc_type := b_lab ; 4 .. 9 :
63251: LD_ADDR_OWVAR 42
63255: PUSH
63256: LD_INT 6
63258: ST_TO_ADDR
63259: GO 63843
63261: LD_INT 4
63263: DOUBLE
63264: GREATEREQUAL
63265: IFFALSE 63273
63267: LD_INT 9
63269: DOUBLE
63270: LESSEQUAL
63271: IFTRUE 63275
63273: GO 63335
63275: POP
// begin bc_type := b_lab_half ;
63276: LD_ADDR_OWVAR 42
63280: PUSH
63281: LD_INT 7
63283: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63284: LD_ADDR_OWVAR 44
63288: PUSH
63289: LD_INT 10
63291: PUSH
63292: LD_INT 11
63294: PUSH
63295: LD_INT 12
63297: PUSH
63298: LD_INT 15
63300: PUSH
63301: LD_INT 14
63303: PUSH
63304: LD_INT 13
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: PUSH
63315: LD_VAR 0 2
63319: PUSH
63320: LD_INT 3
63322: MINUS
63323: ARRAY
63324: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
63325: LD_ADDR_OWVAR 45
63329: PUSH
63330: LD_INT 9
63332: ST_TO_ADDR
// end ; 10 .. 13 :
63333: GO 63843
63335: LD_INT 10
63337: DOUBLE
63338: GREATEREQUAL
63339: IFFALSE 63347
63341: LD_INT 13
63343: DOUBLE
63344: LESSEQUAL
63345: IFTRUE 63349
63347: GO 63426
63349: POP
// begin bc_type := b_lab_full ;
63350: LD_ADDR_OWVAR 42
63354: PUSH
63355: LD_INT 8
63357: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63358: LD_ADDR_OWVAR 44
63362: PUSH
63363: LD_INT 10
63365: PUSH
63366: LD_INT 12
63368: PUSH
63369: LD_INT 14
63371: PUSH
63372: LD_INT 13
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: PUSH
63381: LD_VAR 0 2
63385: PUSH
63386: LD_INT 9
63388: MINUS
63389: ARRAY
63390: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63391: LD_ADDR_OWVAR 45
63395: PUSH
63396: LD_INT 11
63398: PUSH
63399: LD_INT 15
63401: PUSH
63402: LD_INT 12
63404: PUSH
63405: LD_INT 15
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: PUSH
63414: LD_VAR 0 2
63418: PUSH
63419: LD_INT 9
63421: MINUS
63422: ARRAY
63423: ST_TO_ADDR
// end ; 14 :
63424: GO 63843
63426: LD_INT 14
63428: DOUBLE
63429: EQUAL
63430: IFTRUE 63434
63432: GO 63445
63434: POP
// bc_type := b_workshop ; 15 :
63435: LD_ADDR_OWVAR 42
63439: PUSH
63440: LD_INT 2
63442: ST_TO_ADDR
63443: GO 63843
63445: LD_INT 15
63447: DOUBLE
63448: EQUAL
63449: IFTRUE 63453
63451: GO 63464
63453: POP
// bc_type := b_factory ; 16 :
63454: LD_ADDR_OWVAR 42
63458: PUSH
63459: LD_INT 3
63461: ST_TO_ADDR
63462: GO 63843
63464: LD_INT 16
63466: DOUBLE
63467: EQUAL
63468: IFTRUE 63472
63470: GO 63483
63472: POP
// bc_type := b_ext_gun ; 17 :
63473: LD_ADDR_OWVAR 42
63477: PUSH
63478: LD_INT 17
63480: ST_TO_ADDR
63481: GO 63843
63483: LD_INT 17
63485: DOUBLE
63486: EQUAL
63487: IFTRUE 63491
63489: GO 63519
63491: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63492: LD_ADDR_OWVAR 42
63496: PUSH
63497: LD_INT 19
63499: PUSH
63500: LD_INT 23
63502: PUSH
63503: LD_INT 19
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: LIST
63510: PUSH
63511: LD_VAR 0 1
63515: ARRAY
63516: ST_TO_ADDR
63517: GO 63843
63519: LD_INT 18
63521: DOUBLE
63522: EQUAL
63523: IFTRUE 63527
63525: GO 63538
63527: POP
// bc_type := b_ext_radar ; 19 :
63528: LD_ADDR_OWVAR 42
63532: PUSH
63533: LD_INT 20
63535: ST_TO_ADDR
63536: GO 63843
63538: LD_INT 19
63540: DOUBLE
63541: EQUAL
63542: IFTRUE 63546
63544: GO 63557
63546: POP
// bc_type := b_ext_radio ; 20 :
63547: LD_ADDR_OWVAR 42
63551: PUSH
63552: LD_INT 22
63554: ST_TO_ADDR
63555: GO 63843
63557: LD_INT 20
63559: DOUBLE
63560: EQUAL
63561: IFTRUE 63565
63563: GO 63576
63565: POP
// bc_type := b_ext_siberium ; 21 :
63566: LD_ADDR_OWVAR 42
63570: PUSH
63571: LD_INT 21
63573: ST_TO_ADDR
63574: GO 63843
63576: LD_INT 21
63578: DOUBLE
63579: EQUAL
63580: IFTRUE 63584
63582: GO 63595
63584: POP
// bc_type := b_ext_computer ; 22 :
63585: LD_ADDR_OWVAR 42
63589: PUSH
63590: LD_INT 24
63592: ST_TO_ADDR
63593: GO 63843
63595: LD_INT 22
63597: DOUBLE
63598: EQUAL
63599: IFTRUE 63603
63601: GO 63614
63603: POP
// bc_type := b_ext_track ; 23 :
63604: LD_ADDR_OWVAR 42
63608: PUSH
63609: LD_INT 16
63611: ST_TO_ADDR
63612: GO 63843
63614: LD_INT 23
63616: DOUBLE
63617: EQUAL
63618: IFTRUE 63622
63620: GO 63633
63622: POP
// bc_type := b_ext_laser ; 24 :
63623: LD_ADDR_OWVAR 42
63627: PUSH
63628: LD_INT 25
63630: ST_TO_ADDR
63631: GO 63843
63633: LD_INT 24
63635: DOUBLE
63636: EQUAL
63637: IFTRUE 63641
63639: GO 63652
63641: POP
// bc_type := b_control_tower ; 25 :
63642: LD_ADDR_OWVAR 42
63646: PUSH
63647: LD_INT 36
63649: ST_TO_ADDR
63650: GO 63843
63652: LD_INT 25
63654: DOUBLE
63655: EQUAL
63656: IFTRUE 63660
63658: GO 63671
63660: POP
// bc_type := b_breastwork ; 26 :
63661: LD_ADDR_OWVAR 42
63665: PUSH
63666: LD_INT 31
63668: ST_TO_ADDR
63669: GO 63843
63671: LD_INT 26
63673: DOUBLE
63674: EQUAL
63675: IFTRUE 63679
63677: GO 63690
63679: POP
// bc_type := b_bunker ; 27 :
63680: LD_ADDR_OWVAR 42
63684: PUSH
63685: LD_INT 32
63687: ST_TO_ADDR
63688: GO 63843
63690: LD_INT 27
63692: DOUBLE
63693: EQUAL
63694: IFTRUE 63698
63696: GO 63709
63698: POP
// bc_type := b_turret ; 28 :
63699: LD_ADDR_OWVAR 42
63703: PUSH
63704: LD_INT 33
63706: ST_TO_ADDR
63707: GO 63843
63709: LD_INT 28
63711: DOUBLE
63712: EQUAL
63713: IFTRUE 63717
63715: GO 63728
63717: POP
// bc_type := b_armoury ; 29 :
63718: LD_ADDR_OWVAR 42
63722: PUSH
63723: LD_INT 4
63725: ST_TO_ADDR
63726: GO 63843
63728: LD_INT 29
63730: DOUBLE
63731: EQUAL
63732: IFTRUE 63736
63734: GO 63747
63736: POP
// bc_type := b_barracks ; 30 :
63737: LD_ADDR_OWVAR 42
63741: PUSH
63742: LD_INT 5
63744: ST_TO_ADDR
63745: GO 63843
63747: LD_INT 30
63749: DOUBLE
63750: EQUAL
63751: IFTRUE 63755
63753: GO 63766
63755: POP
// bc_type := b_solar_power ; 31 :
63756: LD_ADDR_OWVAR 42
63760: PUSH
63761: LD_INT 27
63763: ST_TO_ADDR
63764: GO 63843
63766: LD_INT 31
63768: DOUBLE
63769: EQUAL
63770: IFTRUE 63774
63772: GO 63785
63774: POP
// bc_type := b_oil_power ; 32 :
63775: LD_ADDR_OWVAR 42
63779: PUSH
63780: LD_INT 26
63782: ST_TO_ADDR
63783: GO 63843
63785: LD_INT 32
63787: DOUBLE
63788: EQUAL
63789: IFTRUE 63793
63791: GO 63804
63793: POP
// bc_type := b_siberite_power ; 33 :
63794: LD_ADDR_OWVAR 42
63798: PUSH
63799: LD_INT 28
63801: ST_TO_ADDR
63802: GO 63843
63804: LD_INT 33
63806: DOUBLE
63807: EQUAL
63808: IFTRUE 63812
63810: GO 63823
63812: POP
// bc_type := b_oil_mine ; 34 :
63813: LD_ADDR_OWVAR 42
63817: PUSH
63818: LD_INT 29
63820: ST_TO_ADDR
63821: GO 63843
63823: LD_INT 34
63825: DOUBLE
63826: EQUAL
63827: IFTRUE 63831
63829: GO 63842
63831: POP
// bc_type := b_siberite_mine ; end ;
63832: LD_ADDR_OWVAR 42
63836: PUSH
63837: LD_INT 30
63839: ST_TO_ADDR
63840: GO 63843
63842: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63843: LD_ADDR_VAR 0 8
63847: PUSH
63848: LD_VAR 0 5
63852: PPUSH
63853: LD_VAR 0 6
63857: PPUSH
63858: LD_VAR 0 3
63862: PPUSH
63863: CALL_OW 47
63867: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63868: LD_OWVAR 42
63872: PUSH
63873: LD_INT 32
63875: PUSH
63876: LD_INT 33
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: IN
63883: IFFALSE 63899
// PlaceWeaponTurret ( b , weapon ) ;
63885: LD_VAR 0 8
63889: PPUSH
63890: LD_VAR 0 4
63894: PPUSH
63895: CALL_OW 431
// end ;
63899: LD_VAR 0 7
63903: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63904: LD_INT 0
63906: PPUSH
63907: PPUSH
63908: PPUSH
63909: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63910: LD_ADDR_VAR 0 4
63914: PUSH
63915: LD_INT 22
63917: PUSH
63918: LD_OWVAR 2
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 2
63929: PUSH
63930: LD_INT 30
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 30
63942: PUSH
63943: LD_INT 1
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: LIST
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PPUSH
63959: CALL_OW 69
63963: ST_TO_ADDR
// if not tmp then
63964: LD_VAR 0 4
63968: NOT
63969: IFFALSE 63973
// exit ;
63971: GO 64032
// for i in tmp do
63973: LD_ADDR_VAR 0 2
63977: PUSH
63978: LD_VAR 0 4
63982: PUSH
63983: FOR_IN
63984: IFFALSE 64030
// for j = 1 to 3 do
63986: LD_ADDR_VAR 0 3
63990: PUSH
63991: DOUBLE
63992: LD_INT 1
63994: DEC
63995: ST_TO_ADDR
63996: LD_INT 3
63998: PUSH
63999: FOR_TO
64000: IFFALSE 64026
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64002: LD_VAR 0 2
64006: PPUSH
64007: CALL_OW 274
64011: PPUSH
64012: LD_VAR 0 3
64016: PPUSH
64017: LD_INT 99999
64019: PPUSH
64020: CALL_OW 277
64024: GO 63999
64026: POP
64027: POP
64028: GO 63983
64030: POP
64031: POP
// end ;
64032: LD_VAR 0 1
64036: RET
// export function hHackSetLevel10 ; var i , j ; begin
64037: LD_INT 0
64039: PPUSH
64040: PPUSH
64041: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64042: LD_ADDR_VAR 0 2
64046: PUSH
64047: LD_INT 21
64049: PUSH
64050: LD_INT 1
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PPUSH
64057: CALL_OW 69
64061: PUSH
64062: FOR_IN
64063: IFFALSE 64115
// if IsSelected ( i ) then
64065: LD_VAR 0 2
64069: PPUSH
64070: CALL_OW 306
64074: IFFALSE 64113
// begin for j := 1 to 4 do
64076: LD_ADDR_VAR 0 3
64080: PUSH
64081: DOUBLE
64082: LD_INT 1
64084: DEC
64085: ST_TO_ADDR
64086: LD_INT 4
64088: PUSH
64089: FOR_TO
64090: IFFALSE 64111
// SetSkill ( i , j , 10 ) ;
64092: LD_VAR 0 2
64096: PPUSH
64097: LD_VAR 0 3
64101: PPUSH
64102: LD_INT 10
64104: PPUSH
64105: CALL_OW 237
64109: GO 64089
64111: POP
64112: POP
// end ;
64113: GO 64062
64115: POP
64116: POP
// end ;
64117: LD_VAR 0 1
64121: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64122: LD_INT 0
64124: PPUSH
64125: PPUSH
64126: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64127: LD_ADDR_VAR 0 2
64131: PUSH
64132: LD_INT 22
64134: PUSH
64135: LD_OWVAR 2
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 21
64146: PUSH
64147: LD_INT 1
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PPUSH
64158: CALL_OW 69
64162: PUSH
64163: FOR_IN
64164: IFFALSE 64205
// begin for j := 1 to 4 do
64166: LD_ADDR_VAR 0 3
64170: PUSH
64171: DOUBLE
64172: LD_INT 1
64174: DEC
64175: ST_TO_ADDR
64176: LD_INT 4
64178: PUSH
64179: FOR_TO
64180: IFFALSE 64201
// SetSkill ( i , j , 10 ) ;
64182: LD_VAR 0 2
64186: PPUSH
64187: LD_VAR 0 3
64191: PPUSH
64192: LD_INT 10
64194: PPUSH
64195: CALL_OW 237
64199: GO 64179
64201: POP
64202: POP
// end ;
64203: GO 64163
64205: POP
64206: POP
// end ;
64207: LD_VAR 0 1
64211: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64212: LD_INT 0
64214: PPUSH
// uc_side := your_side ;
64215: LD_ADDR_OWVAR 20
64219: PUSH
64220: LD_OWVAR 2
64224: ST_TO_ADDR
// uc_nation := nation ;
64225: LD_ADDR_OWVAR 21
64229: PUSH
64230: LD_VAR 0 1
64234: ST_TO_ADDR
// InitHc ;
64235: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64239: LD_INT 0
64241: PPUSH
64242: LD_VAR 0 2
64246: PPUSH
64247: LD_VAR 0 3
64251: PPUSH
64252: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64256: LD_VAR 0 4
64260: PPUSH
64261: LD_VAR 0 5
64265: PPUSH
64266: CALL_OW 428
64270: PUSH
64271: LD_INT 0
64273: EQUAL
64274: IFFALSE 64298
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64276: CALL_OW 44
64280: PPUSH
64281: LD_VAR 0 4
64285: PPUSH
64286: LD_VAR 0 5
64290: PPUSH
64291: LD_INT 1
64293: PPUSH
64294: CALL_OW 48
// end ;
64298: LD_VAR 0 6
64302: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64303: LD_INT 0
64305: PPUSH
64306: PPUSH
// uc_side := your_side ;
64307: LD_ADDR_OWVAR 20
64311: PUSH
64312: LD_OWVAR 2
64316: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64317: LD_VAR 0 1
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 2
64327: PUSH
64328: LD_INT 3
64330: PUSH
64331: LD_INT 4
64333: PUSH
64334: LD_INT 5
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: IN
64344: IFFALSE 64356
// uc_nation := nation_american else
64346: LD_ADDR_OWVAR 21
64350: PUSH
64351: LD_INT 1
64353: ST_TO_ADDR
64354: GO 64399
// if chassis in [ 11 , 12 , 13 , 14 ] then
64356: LD_VAR 0 1
64360: PUSH
64361: LD_INT 11
64363: PUSH
64364: LD_INT 12
64366: PUSH
64367: LD_INT 13
64369: PUSH
64370: LD_INT 14
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: IN
64379: IFFALSE 64391
// uc_nation := nation_arabian else
64381: LD_ADDR_OWVAR 21
64385: PUSH
64386: LD_INT 2
64388: ST_TO_ADDR
64389: GO 64399
// uc_nation := nation_russian ;
64391: LD_ADDR_OWVAR 21
64395: PUSH
64396: LD_INT 3
64398: ST_TO_ADDR
// vc_chassis := chassis ;
64399: LD_ADDR_OWVAR 37
64403: PUSH
64404: LD_VAR 0 1
64408: ST_TO_ADDR
// vc_engine := engine ;
64409: LD_ADDR_OWVAR 39
64413: PUSH
64414: LD_VAR 0 2
64418: ST_TO_ADDR
// vc_control := control ;
64419: LD_ADDR_OWVAR 38
64423: PUSH
64424: LD_VAR 0 3
64428: ST_TO_ADDR
// vc_weapon := weapon ;
64429: LD_ADDR_OWVAR 40
64433: PUSH
64434: LD_VAR 0 4
64438: ST_TO_ADDR
// un := CreateVehicle ;
64439: LD_ADDR_VAR 0 8
64443: PUSH
64444: CALL_OW 45
64448: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64449: LD_VAR 0 8
64453: PPUSH
64454: LD_INT 0
64456: PPUSH
64457: LD_INT 5
64459: PPUSH
64460: CALL_OW 12
64464: PPUSH
64465: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64469: LD_VAR 0 8
64473: PPUSH
64474: LD_VAR 0 5
64478: PPUSH
64479: LD_VAR 0 6
64483: PPUSH
64484: LD_INT 1
64486: PPUSH
64487: CALL_OW 48
// end ;
64491: LD_VAR 0 7
64495: RET
// export hInvincible ; every 1 do
64496: GO 64498
64498: DISABLE
// hInvincible := [ ] ;
64499: LD_ADDR_EXP 77
64503: PUSH
64504: EMPTY
64505: ST_TO_ADDR
64506: END
// every 10 do var i ;
64507: GO 64509
64509: DISABLE
64510: LD_INT 0
64512: PPUSH
// begin enable ;
64513: ENABLE
// if not hInvincible then
64514: LD_EXP 77
64518: NOT
64519: IFFALSE 64523
// exit ;
64521: GO 64567
// for i in hInvincible do
64523: LD_ADDR_VAR 0 1
64527: PUSH
64528: LD_EXP 77
64532: PUSH
64533: FOR_IN
64534: IFFALSE 64565
// if GetLives ( i ) < 1000 then
64536: LD_VAR 0 1
64540: PPUSH
64541: CALL_OW 256
64545: PUSH
64546: LD_INT 1000
64548: LESS
64549: IFFALSE 64563
// SetLives ( i , 1000 ) ;
64551: LD_VAR 0 1
64555: PPUSH
64556: LD_INT 1000
64558: PPUSH
64559: CALL_OW 234
64563: GO 64533
64565: POP
64566: POP
// end ;
64567: PPOPN 1
64569: END
// export function hHackInvincible ; var i ; begin
64570: LD_INT 0
64572: PPUSH
64573: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64574: LD_ADDR_VAR 0 2
64578: PUSH
64579: LD_INT 2
64581: PUSH
64582: LD_INT 21
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 21
64594: PUSH
64595: LD_INT 2
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: LIST
64606: PPUSH
64607: CALL_OW 69
64611: PUSH
64612: FOR_IN
64613: IFFALSE 64674
// if IsSelected ( i ) then
64615: LD_VAR 0 2
64619: PPUSH
64620: CALL_OW 306
64624: IFFALSE 64672
// begin if i in hInvincible then
64626: LD_VAR 0 2
64630: PUSH
64631: LD_EXP 77
64635: IN
64636: IFFALSE 64656
// hInvincible := hInvincible diff i else
64638: LD_ADDR_EXP 77
64642: PUSH
64643: LD_EXP 77
64647: PUSH
64648: LD_VAR 0 2
64652: DIFF
64653: ST_TO_ADDR
64654: GO 64672
// hInvincible := hInvincible union i ;
64656: LD_ADDR_EXP 77
64660: PUSH
64661: LD_EXP 77
64665: PUSH
64666: LD_VAR 0 2
64670: UNION
64671: ST_TO_ADDR
// end ;
64672: GO 64612
64674: POP
64675: POP
// end ;
64676: LD_VAR 0 1
64680: RET
// export function hHackInvisible ; var i , j ; begin
64681: LD_INT 0
64683: PPUSH
64684: PPUSH
64685: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64686: LD_ADDR_VAR 0 2
64690: PUSH
64691: LD_INT 21
64693: PUSH
64694: LD_INT 1
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PPUSH
64701: CALL_OW 69
64705: PUSH
64706: FOR_IN
64707: IFFALSE 64731
// if IsSelected ( i ) then
64709: LD_VAR 0 2
64713: PPUSH
64714: CALL_OW 306
64718: IFFALSE 64729
// ComForceInvisible ( i ) ;
64720: LD_VAR 0 2
64724: PPUSH
64725: CALL_OW 496
64729: GO 64706
64731: POP
64732: POP
// end ;
64733: LD_VAR 0 1
64737: RET
// export function hHackChangeYourSide ; begin
64738: LD_INT 0
64740: PPUSH
// if your_side = 8 then
64741: LD_OWVAR 2
64745: PUSH
64746: LD_INT 8
64748: EQUAL
64749: IFFALSE 64761
// your_side := 0 else
64751: LD_ADDR_OWVAR 2
64755: PUSH
64756: LD_INT 0
64758: ST_TO_ADDR
64759: GO 64775
// your_side := your_side + 1 ;
64761: LD_ADDR_OWVAR 2
64765: PUSH
64766: LD_OWVAR 2
64770: PUSH
64771: LD_INT 1
64773: PLUS
64774: ST_TO_ADDR
// end ;
64775: LD_VAR 0 1
64779: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64780: LD_INT 0
64782: PPUSH
64783: PPUSH
64784: PPUSH
// for i in all_units do
64785: LD_ADDR_VAR 0 2
64789: PUSH
64790: LD_OWVAR 3
64794: PUSH
64795: FOR_IN
64796: IFFALSE 64874
// if IsSelected ( i ) then
64798: LD_VAR 0 2
64802: PPUSH
64803: CALL_OW 306
64807: IFFALSE 64872
// begin j := GetSide ( i ) ;
64809: LD_ADDR_VAR 0 3
64813: PUSH
64814: LD_VAR 0 2
64818: PPUSH
64819: CALL_OW 255
64823: ST_TO_ADDR
// if j = 8 then
64824: LD_VAR 0 3
64828: PUSH
64829: LD_INT 8
64831: EQUAL
64832: IFFALSE 64844
// j := 0 else
64834: LD_ADDR_VAR 0 3
64838: PUSH
64839: LD_INT 0
64841: ST_TO_ADDR
64842: GO 64858
// j := j + 1 ;
64844: LD_ADDR_VAR 0 3
64848: PUSH
64849: LD_VAR 0 3
64853: PUSH
64854: LD_INT 1
64856: PLUS
64857: ST_TO_ADDR
// SetSide ( i , j ) ;
64858: LD_VAR 0 2
64862: PPUSH
64863: LD_VAR 0 3
64867: PPUSH
64868: CALL_OW 235
// end ;
64872: GO 64795
64874: POP
64875: POP
// end ;
64876: LD_VAR 0 1
64880: RET
// export function hHackFog ; begin
64881: LD_INT 0
64883: PPUSH
// FogOff ( true ) ;
64884: LD_INT 1
64886: PPUSH
64887: CALL_OW 344
// end ;
64891: LD_VAR 0 1
64895: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64896: LD_INT 0
64898: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64899: LD_VAR 0 1
64903: PPUSH
64904: LD_VAR 0 2
64908: PPUSH
64909: LD_VAR 0 3
64913: PPUSH
64914: LD_INT 1
64916: PPUSH
64917: LD_INT 1
64919: PPUSH
64920: CALL_OW 483
// CenterOnXY ( x , y ) ;
64924: LD_VAR 0 2
64928: PPUSH
64929: LD_VAR 0 3
64933: PPUSH
64934: CALL_OW 84
// end ;
64938: LD_VAR 0 4
64942: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64943: LD_INT 0
64945: PPUSH
64946: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64947: LD_VAR 0 1
64951: NOT
64952: PUSH
64953: LD_VAR 0 2
64957: PPUSH
64958: LD_VAR 0 3
64962: PPUSH
64963: CALL_OW 488
64967: NOT
64968: OR
64969: PUSH
64970: LD_VAR 0 1
64974: PPUSH
64975: CALL_OW 266
64979: PUSH
64980: LD_INT 3
64982: NONEQUAL
64983: PUSH
64984: LD_VAR 0 1
64988: PPUSH
64989: CALL_OW 247
64993: PUSH
64994: LD_INT 1
64996: EQUAL
64997: NOT
64998: AND
64999: OR
65000: IFFALSE 65004
// exit ;
65002: GO 65153
// if GetType ( factory ) = unit_human then
65004: LD_VAR 0 1
65008: PPUSH
65009: CALL_OW 247
65013: PUSH
65014: LD_INT 1
65016: EQUAL
65017: IFFALSE 65034
// factory := IsInUnit ( factory ) ;
65019: LD_ADDR_VAR 0 1
65023: PUSH
65024: LD_VAR 0 1
65028: PPUSH
65029: CALL_OW 310
65033: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65034: LD_VAR 0 1
65038: PPUSH
65039: CALL_OW 266
65043: PUSH
65044: LD_INT 3
65046: NONEQUAL
65047: IFFALSE 65051
// exit ;
65049: GO 65153
// if HexInfo ( x , y ) = factory then
65051: LD_VAR 0 2
65055: PPUSH
65056: LD_VAR 0 3
65060: PPUSH
65061: CALL_OW 428
65065: PUSH
65066: LD_VAR 0 1
65070: EQUAL
65071: IFFALSE 65098
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
65073: LD_ADDR_EXP 78
65077: PUSH
65078: LD_EXP 78
65082: PPUSH
65083: LD_VAR 0 1
65087: PPUSH
65088: LD_INT 0
65090: PPUSH
65091: CALL_OW 1
65095: ST_TO_ADDR
65096: GO 65149
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
65098: LD_ADDR_EXP 78
65102: PUSH
65103: LD_EXP 78
65107: PPUSH
65108: LD_VAR 0 1
65112: PPUSH
65113: LD_VAR 0 1
65117: PPUSH
65118: CALL_OW 255
65122: PUSH
65123: LD_VAR 0 1
65127: PUSH
65128: LD_VAR 0 2
65132: PUSH
65133: LD_VAR 0 3
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: PPUSH
65144: CALL_OW 1
65148: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65149: CALL 65158 0 0
// end ;
65153: LD_VAR 0 4
65157: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65158: LD_INT 0
65160: PPUSH
65161: PPUSH
65162: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65163: LD_STRING resetFactoryWaypoint();
65165: PPUSH
65166: CALL_OW 559
// if factoryWaypoints then
65170: LD_EXP 78
65174: IFFALSE 65300
// begin list := PrepareArray ( factoryWaypoints ) ;
65176: LD_ADDR_VAR 0 3
65180: PUSH
65181: LD_EXP 78
65185: PPUSH
65186: CALL 44219 0 1
65190: ST_TO_ADDR
// for i := 1 to list do
65191: LD_ADDR_VAR 0 2
65195: PUSH
65196: DOUBLE
65197: LD_INT 1
65199: DEC
65200: ST_TO_ADDR
65201: LD_VAR 0 3
65205: PUSH
65206: FOR_TO
65207: IFFALSE 65298
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65209: LD_STRING setFactoryWaypointXY(
65211: PUSH
65212: LD_VAR 0 3
65216: PUSH
65217: LD_VAR 0 2
65221: ARRAY
65222: PUSH
65223: LD_INT 1
65225: ARRAY
65226: STR
65227: PUSH
65228: LD_STRING ,
65230: STR
65231: PUSH
65232: LD_VAR 0 3
65236: PUSH
65237: LD_VAR 0 2
65241: ARRAY
65242: PUSH
65243: LD_INT 2
65245: ARRAY
65246: STR
65247: PUSH
65248: LD_STRING ,
65250: STR
65251: PUSH
65252: LD_VAR 0 3
65256: PUSH
65257: LD_VAR 0 2
65261: ARRAY
65262: PUSH
65263: LD_INT 3
65265: ARRAY
65266: STR
65267: PUSH
65268: LD_STRING ,
65270: STR
65271: PUSH
65272: LD_VAR 0 3
65276: PUSH
65277: LD_VAR 0 2
65281: ARRAY
65282: PUSH
65283: LD_INT 4
65285: ARRAY
65286: STR
65287: PUSH
65288: LD_STRING )
65290: STR
65291: PPUSH
65292: CALL_OW 559
65296: GO 65206
65298: POP
65299: POP
// end ; end ;
65300: LD_VAR 0 1
65304: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65305: LD_INT 0
65307: PPUSH
// if HexInfo ( x , y ) = warehouse then
65308: LD_VAR 0 2
65312: PPUSH
65313: LD_VAR 0 3
65317: PPUSH
65318: CALL_OW 428
65322: PUSH
65323: LD_VAR 0 1
65327: EQUAL
65328: IFFALSE 65355
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65330: LD_ADDR_EXP 79
65334: PUSH
65335: LD_EXP 79
65339: PPUSH
65340: LD_VAR 0 1
65344: PPUSH
65345: LD_INT 0
65347: PPUSH
65348: CALL_OW 1
65352: ST_TO_ADDR
65353: GO 65406
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65355: LD_ADDR_EXP 79
65359: PUSH
65360: LD_EXP 79
65364: PPUSH
65365: LD_VAR 0 1
65369: PPUSH
65370: LD_VAR 0 1
65374: PPUSH
65375: CALL_OW 255
65379: PUSH
65380: LD_VAR 0 1
65384: PUSH
65385: LD_VAR 0 2
65389: PUSH
65390: LD_VAR 0 3
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: PPUSH
65401: CALL_OW 1
65405: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65406: CALL 65415 0 0
// end ;
65410: LD_VAR 0 4
65414: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65415: LD_INT 0
65417: PPUSH
65418: PPUSH
65419: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65420: LD_STRING resetWarehouseGatheringPoints();
65422: PPUSH
65423: CALL_OW 559
// if warehouseGatheringPoints then
65427: LD_EXP 79
65431: IFFALSE 65557
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65433: LD_ADDR_VAR 0 3
65437: PUSH
65438: LD_EXP 79
65442: PPUSH
65443: CALL 44219 0 1
65447: ST_TO_ADDR
// for i := 1 to list do
65448: LD_ADDR_VAR 0 2
65452: PUSH
65453: DOUBLE
65454: LD_INT 1
65456: DEC
65457: ST_TO_ADDR
65458: LD_VAR 0 3
65462: PUSH
65463: FOR_TO
65464: IFFALSE 65555
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65466: LD_STRING setWarehouseGatheringPointXY(
65468: PUSH
65469: LD_VAR 0 3
65473: PUSH
65474: LD_VAR 0 2
65478: ARRAY
65479: PUSH
65480: LD_INT 1
65482: ARRAY
65483: STR
65484: PUSH
65485: LD_STRING ,
65487: STR
65488: PUSH
65489: LD_VAR 0 3
65493: PUSH
65494: LD_VAR 0 2
65498: ARRAY
65499: PUSH
65500: LD_INT 2
65502: ARRAY
65503: STR
65504: PUSH
65505: LD_STRING ,
65507: STR
65508: PUSH
65509: LD_VAR 0 3
65513: PUSH
65514: LD_VAR 0 2
65518: ARRAY
65519: PUSH
65520: LD_INT 3
65522: ARRAY
65523: STR
65524: PUSH
65525: LD_STRING ,
65527: STR
65528: PUSH
65529: LD_VAR 0 3
65533: PUSH
65534: LD_VAR 0 2
65538: ARRAY
65539: PUSH
65540: LD_INT 4
65542: ARRAY
65543: STR
65544: PUSH
65545: LD_STRING )
65547: STR
65548: PPUSH
65549: CALL_OW 559
65553: GO 65463
65555: POP
65556: POP
// end ; end ;
65557: LD_VAR 0 1
65561: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65562: LD_EXP 79
65566: IFFALSE 66251
65568: GO 65570
65570: DISABLE
65571: LD_INT 0
65573: PPUSH
65574: PPUSH
65575: PPUSH
65576: PPUSH
65577: PPUSH
65578: PPUSH
65579: PPUSH
65580: PPUSH
65581: PPUSH
// begin enable ;
65582: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65583: LD_ADDR_VAR 0 3
65587: PUSH
65588: LD_EXP 79
65592: PPUSH
65593: CALL 44219 0 1
65597: ST_TO_ADDR
// if not list then
65598: LD_VAR 0 3
65602: NOT
65603: IFFALSE 65607
// exit ;
65605: GO 66251
// for i := 1 to list do
65607: LD_ADDR_VAR 0 1
65611: PUSH
65612: DOUBLE
65613: LD_INT 1
65615: DEC
65616: ST_TO_ADDR
65617: LD_VAR 0 3
65621: PUSH
65622: FOR_TO
65623: IFFALSE 66249
// begin depot := list [ i ] [ 2 ] ;
65625: LD_ADDR_VAR 0 8
65629: PUSH
65630: LD_VAR 0 3
65634: PUSH
65635: LD_VAR 0 1
65639: ARRAY
65640: PUSH
65641: LD_INT 2
65643: ARRAY
65644: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65645: LD_ADDR_VAR 0 5
65649: PUSH
65650: LD_VAR 0 3
65654: PUSH
65655: LD_VAR 0 1
65659: ARRAY
65660: PUSH
65661: LD_INT 1
65663: ARRAY
65664: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65665: LD_VAR 0 8
65669: PPUSH
65670: CALL_OW 301
65674: PUSH
65675: LD_VAR 0 5
65679: PUSH
65680: LD_VAR 0 8
65684: PPUSH
65685: CALL_OW 255
65689: NONEQUAL
65690: OR
65691: IFFALSE 65720
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65693: LD_ADDR_EXP 79
65697: PUSH
65698: LD_EXP 79
65702: PPUSH
65703: LD_VAR 0 8
65707: PPUSH
65708: LD_INT 0
65710: PPUSH
65711: CALL_OW 1
65715: ST_TO_ADDR
// exit ;
65716: POP
65717: POP
65718: GO 66251
// end ; x := list [ i ] [ 3 ] ;
65720: LD_ADDR_VAR 0 6
65724: PUSH
65725: LD_VAR 0 3
65729: PUSH
65730: LD_VAR 0 1
65734: ARRAY
65735: PUSH
65736: LD_INT 3
65738: ARRAY
65739: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65740: LD_ADDR_VAR 0 7
65744: PUSH
65745: LD_VAR 0 3
65749: PUSH
65750: LD_VAR 0 1
65754: ARRAY
65755: PUSH
65756: LD_INT 4
65758: ARRAY
65759: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65760: LD_ADDR_VAR 0 9
65764: PUSH
65765: LD_VAR 0 6
65769: PPUSH
65770: LD_VAR 0 7
65774: PPUSH
65775: LD_INT 16
65777: PPUSH
65778: CALL 42807 0 3
65782: ST_TO_ADDR
// if not cratesNearbyPoint then
65783: LD_VAR 0 9
65787: NOT
65788: IFFALSE 65794
// exit ;
65790: POP
65791: POP
65792: GO 66251
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65794: LD_ADDR_VAR 0 4
65798: PUSH
65799: LD_INT 22
65801: PUSH
65802: LD_VAR 0 5
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 3
65813: PUSH
65814: LD_INT 60
65816: PUSH
65817: EMPTY
65818: LIST
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 91
65826: PUSH
65827: LD_VAR 0 8
65831: PUSH
65832: LD_INT 6
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 2
65842: PUSH
65843: LD_INT 25
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 25
65855: PUSH
65856: LD_INT 16
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: LIST
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: PPUSH
65874: CALL_OW 69
65878: PUSH
65879: LD_VAR 0 8
65883: PPUSH
65884: CALL_OW 313
65888: PPUSH
65889: LD_INT 3
65891: PUSH
65892: LD_INT 60
65894: PUSH
65895: EMPTY
65896: LIST
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 2
65904: PUSH
65905: LD_INT 25
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 25
65917: PUSH
65918: LD_INT 16
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: LIST
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PPUSH
65934: CALL_OW 72
65938: UNION
65939: ST_TO_ADDR
// if tmp then
65940: LD_VAR 0 4
65944: IFFALSE 66024
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65946: LD_ADDR_VAR 0 4
65950: PUSH
65951: LD_VAR 0 4
65955: PPUSH
65956: LD_INT 3
65958: PPUSH
65959: CALL 40776 0 2
65963: ST_TO_ADDR
// for j in tmp do
65964: LD_ADDR_VAR 0 2
65968: PUSH
65969: LD_VAR 0 4
65973: PUSH
65974: FOR_IN
65975: IFFALSE 66018
// begin if IsInUnit ( j ) then
65977: LD_VAR 0 2
65981: PPUSH
65982: CALL_OW 310
65986: IFFALSE 65997
// ComExit ( j ) ;
65988: LD_VAR 0 2
65992: PPUSH
65993: CALL 40859 0 1
// AddComCollect ( j , x , y ) ;
65997: LD_VAR 0 2
66001: PPUSH
66002: LD_VAR 0 6
66006: PPUSH
66007: LD_VAR 0 7
66011: PPUSH
66012: CALL_OW 177
// end ;
66016: GO 65974
66018: POP
66019: POP
// exit ;
66020: POP
66021: POP
66022: GO 66251
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
66024: LD_ADDR_VAR 0 4
66028: PUSH
66029: LD_INT 22
66031: PUSH
66032: LD_VAR 0 5
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 91
66043: PUSH
66044: LD_VAR 0 8
66048: PUSH
66049: LD_INT 8
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: LD_INT 34
66062: PUSH
66063: LD_INT 12
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 34
66072: PUSH
66073: LD_INT 51
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 34
66082: PUSH
66083: LD_INT 32
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 34
66092: PUSH
66093: LD_INT 89
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: PPUSH
66112: CALL_OW 69
66116: ST_TO_ADDR
// if tmp then
66117: LD_VAR 0 4
66121: IFFALSE 66247
// begin for j in tmp do
66123: LD_ADDR_VAR 0 2
66127: PUSH
66128: LD_VAR 0 4
66132: PUSH
66133: FOR_IN
66134: IFFALSE 66245
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
66136: LD_VAR 0 2
66140: PPUSH
66141: CALL_OW 262
66145: PUSH
66146: LD_INT 3
66148: EQUAL
66149: PUSH
66150: LD_VAR 0 2
66154: PPUSH
66155: CALL_OW 261
66159: PUSH
66160: LD_INT 20
66162: GREATER
66163: OR
66164: PUSH
66165: LD_VAR 0 2
66169: PPUSH
66170: CALL_OW 314
66174: NOT
66175: AND
66176: PUSH
66177: LD_VAR 0 2
66181: PPUSH
66182: CALL_OW 263
66186: PUSH
66187: LD_INT 1
66189: NONEQUAL
66190: PUSH
66191: LD_VAR 0 2
66195: PPUSH
66196: CALL_OW 311
66200: OR
66201: AND
66202: IFFALSE 66243
// begin ComCollect ( j , x , y ) ;
66204: LD_VAR 0 2
66208: PPUSH
66209: LD_VAR 0 6
66213: PPUSH
66214: LD_VAR 0 7
66218: PPUSH
66219: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66223: LD_VAR 0 2
66227: PPUSH
66228: LD_VAR 0 8
66232: PPUSH
66233: CALL_OW 172
// exit ;
66237: POP
66238: POP
66239: POP
66240: POP
66241: GO 66251
// end ;
66243: GO 66133
66245: POP
66246: POP
// end ; end ;
66247: GO 65622
66249: POP
66250: POP
// end ; end_of_file end_of_file
66251: PPOPN 9
66253: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66254: LD_VAR 0 1
66258: PUSH
66259: LD_INT 200
66261: DOUBLE
66262: GREATEREQUAL
66263: IFFALSE 66271
66265: LD_INT 299
66267: DOUBLE
66268: LESSEQUAL
66269: IFTRUE 66273
66271: GO 66305
66273: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66274: LD_VAR 0 1
66278: PPUSH
66279: LD_VAR 0 2
66283: PPUSH
66284: LD_VAR 0 3
66288: PPUSH
66289: LD_VAR 0 4
66293: PPUSH
66294: LD_VAR 0 5
66298: PPUSH
66299: CALL 45917 0 5
66303: GO 66382
66305: LD_INT 300
66307: DOUBLE
66308: GREATEREQUAL
66309: IFFALSE 66317
66311: LD_INT 399
66313: DOUBLE
66314: LESSEQUAL
66315: IFTRUE 66319
66317: GO 66381
66319: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66320: LD_VAR 0 1
66324: PPUSH
66325: LD_VAR 0 2
66329: PPUSH
66330: LD_VAR 0 3
66334: PPUSH
66335: LD_VAR 0 4
66339: PPUSH
66340: LD_VAR 0 5
66344: PPUSH
66345: LD_VAR 0 6
66349: PPUSH
66350: LD_VAR 0 7
66354: PPUSH
66355: LD_VAR 0 8
66359: PPUSH
66360: LD_VAR 0 9
66364: PPUSH
66365: LD_VAR 0 10
66369: PPUSH
66370: LD_VAR 0 11
66374: PPUSH
66375: CALL 62955 0 11
66379: GO 66382
66381: POP
// end ;
66382: PPOPN 11
66384: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66385: LD_VAR 0 1
66389: PPUSH
66390: LD_VAR 0 2
66394: PPUSH
66395: LD_VAR 0 3
66399: PPUSH
66400: LD_VAR 0 4
66404: PPUSH
66405: LD_VAR 0 5
66409: PPUSH
66410: CALL 45653 0 5
// end ; end_of_file
66414: PPOPN 5
66416: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66417: LD_VAR 0 1
66421: PPUSH
66422: LD_VAR 0 2
66426: PPUSH
66427: LD_VAR 0 3
66431: PPUSH
66432: LD_VAR 0 4
66436: PPUSH
66437: LD_VAR 0 5
66441: PPUSH
66442: LD_VAR 0 6
66446: PPUSH
66447: CALL 50607 0 6
// end ;
66451: PPOPN 6
66453: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66454: LD_INT 0
66456: PPUSH
// begin if not units then
66457: LD_VAR 0 1
66461: NOT
66462: IFFALSE 66466
// exit ;
66464: GO 66466
// end ;
66466: PPOPN 7
66468: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66469: CALL 50494 0 0
// end ;
66473: PPOPN 1
66475: END
