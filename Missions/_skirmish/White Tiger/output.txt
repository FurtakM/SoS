// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 106 0 0
// PrepareAlliance ;
   8: CALL 13 0 0
// end ; end_of_file
  12: END
// export allianceHack ; export function PrepareAlliance ; var i , tmp , side ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// side := 7 ;
  19: LD_ADDR_VAR 0 4
  23: PUSH
  24: LD_INT 7
  26: ST_TO_ADDR
// tmp := [ ] ;
  27: LD_ADDR_VAR 0 3
  31: PUSH
  32: EMPTY
  33: ST_TO_ADDR
// uc_side := side ;
  34: LD_ADDR_OWVAR 20
  38: PUSH
  39: LD_VAR 0 4
  43: ST_TO_ADDR
// uc_nation := 1 ;
  44: LD_ADDR_OWVAR 21
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
  52: LD_INT 5
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 3
  60: PPUSH
  61: LD_EXP 4
  65: PPUSH
  66: LD_INT 100
  68: PPUSH
  69: CALL 5058 0 5
// allianceHack := CreateVehicle ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: CALL_OW 45
  82: ST_TO_ADDR
// PlaceUnitXY ( allianceHack , 70 , 104 , false ) ;
  83: LD_EXP 1
  87: PPUSH
  88: LD_INT 70
  90: PPUSH
  91: LD_INT 104
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 48
// end ; end_of_file end_of_file end_of_file end_of_file end_of_file
 101: LD_VAR 0 1
 105: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
 106: LD_INT 0
 108: PPUSH
// ru_radar := 98 ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 98
 116: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 89
 124: ST_TO_ADDR
// us_hack := 99 ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 99
 132: ST_TO_ADDR
// us_artillery := 97 ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 97
 140: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 91
 148: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 92
 156: ST_TO_ADDR
// tech_Artillery := 80 ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 80
 164: ST_TO_ADDR
// tech_RadMat := 81 ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 81
 172: ST_TO_ADDR
// tech_BasicTools := 82 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 82
 180: ST_TO_ADDR
// tech_Cargo := 83 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 83
 188: ST_TO_ADDR
// tech_Track := 84 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 84
 196: ST_TO_ADDR
// tech_Crane := 85 ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 85
 204: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 205: LD_ADDR_EXP 14
 209: PUSH
 210: LD_INT 86
 212: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 213: LD_ADDR_EXP 15
 217: PUSH
 218: LD_INT 87
 220: ST_TO_ADDR
// end ;
 221: LD_VAR 0 1
 225: RET
// every 1 do
 226: GO 228
 228: DISABLE
// InitGlobalVariables ; end_of_file
 229: CALL 106 0 0
 233: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 234: LD_INT 0
 236: PPUSH
 237: PPUSH
// if exist_mode then
 238: LD_VAR 0 2
 242: IFFALSE 267
// unit := CreateCharacter ( prefix & ident ) else
 244: LD_ADDR_VAR 0 5
 248: PUSH
 249: LD_VAR 0 3
 253: PUSH
 254: LD_VAR 0 1
 258: STR
 259: PPUSH
 260: CALL_OW 34
 264: ST_TO_ADDR
 265: GO 282
// unit := NewCharacter ( ident ) ;
 267: LD_ADDR_VAR 0 5
 271: PUSH
 272: LD_VAR 0 1
 276: PPUSH
 277: CALL_OW 25
 281: ST_TO_ADDR
// result := unit ;
 282: LD_ADDR_VAR 0 4
 286: PUSH
 287: LD_VAR 0 5
 291: ST_TO_ADDR
// end ;
 292: LD_VAR 0 4
 296: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 297: LD_INT 0
 299: PPUSH
 300: PPUSH
// if not side or not nation then
 301: LD_VAR 0 1
 305: NOT
 306: PUSH
 307: LD_VAR 0 2
 311: NOT
 312: OR
 313: IFFALSE 317
// exit ;
 315: GO 1081
// case nation of nation_american :
 317: LD_VAR 0 2
 321: PUSH
 322: LD_INT 1
 324: DOUBLE
 325: EQUAL
 326: IFTRUE 330
 328: GO 544
 330: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 331: LD_ADDR_VAR 0 4
 335: PUSH
 336: LD_INT 35
 338: PUSH
 339: LD_INT 45
 341: PUSH
 342: LD_INT 46
 344: PUSH
 345: LD_INT 47
 347: PUSH
 348: LD_INT 82
 350: PUSH
 351: LD_INT 83
 353: PUSH
 354: LD_INT 84
 356: PUSH
 357: LD_INT 85
 359: PUSH
 360: LD_INT 86
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: LD_INT 6
 371: PUSH
 372: LD_INT 15
 374: PUSH
 375: LD_INT 16
 377: PUSH
 378: LD_INT 7
 380: PUSH
 381: LD_INT 12
 383: PUSH
 384: LD_INT 13
 386: PUSH
 387: LD_INT 10
 389: PUSH
 390: LD_INT 14
 392: PUSH
 393: LD_INT 20
 395: PUSH
 396: LD_INT 21
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 25
 404: PUSH
 405: LD_INT 32
 407: PUSH
 408: LD_INT 27
 410: PUSH
 411: LD_INT 36
 413: PUSH
 414: LD_INT 69
 416: PUSH
 417: LD_INT 39
 419: PUSH
 420: LD_INT 34
 422: PUSH
 423: LD_INT 40
 425: PUSH
 426: LD_INT 48
 428: PUSH
 429: LD_INT 49
 431: PUSH
 432: LD_INT 50
 434: PUSH
 435: LD_INT 51
 437: PUSH
 438: LD_INT 52
 440: PUSH
 441: LD_INT 53
 443: PUSH
 444: LD_INT 54
 446: PUSH
 447: LD_INT 55
 449: PUSH
 450: LD_INT 56
 452: PUSH
 453: LD_INT 57
 455: PUSH
 456: LD_INT 58
 458: PUSH
 459: LD_INT 59
 461: PUSH
 462: LD_INT 60
 464: PUSH
 465: LD_INT 61
 467: PUSH
 468: LD_INT 62
 470: PUSH
 471: LD_INT 80
 473: PUSH
 474: LD_INT 82
 476: PUSH
 477: LD_INT 83
 479: PUSH
 480: LD_INT 84
 482: PUSH
 483: LD_INT 85
 485: PUSH
 486: LD_INT 86
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: ST_TO_ADDR
 542: GO 1005
 544: LD_INT 2
 546: DOUBLE
 547: EQUAL
 548: IFTRUE 552
 550: GO 774
 552: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
 553: LD_ADDR_VAR 0 4
 557: PUSH
 558: LD_INT 35
 560: PUSH
 561: LD_INT 45
 563: PUSH
 564: LD_INT 46
 566: PUSH
 567: LD_INT 47
 569: PUSH
 570: LD_INT 82
 572: PUSH
 573: LD_INT 83
 575: PUSH
 576: LD_INT 84
 578: PUSH
 579: LD_INT 85
 581: PUSH
 582: LD_INT 87
 584: PUSH
 585: LD_INT 70
 587: PUSH
 588: LD_INT 1
 590: PUSH
 591: LD_INT 11
 593: PUSH
 594: LD_INT 3
 596: PUSH
 597: LD_INT 4
 599: PUSH
 600: LD_INT 5
 602: PUSH
 603: LD_INT 6
 605: PUSH
 606: LD_INT 15
 608: PUSH
 609: LD_INT 18
 611: PUSH
 612: LD_INT 7
 614: PUSH
 615: LD_INT 17
 617: PUSH
 618: LD_INT 8
 620: PUSH
 621: LD_INT 20
 623: PUSH
 624: LD_INT 21
 626: PUSH
 627: LD_INT 22
 629: PUSH
 630: LD_INT 72
 632: PUSH
 633: LD_INT 26
 635: PUSH
 636: LD_INT 69
 638: PUSH
 639: LD_INT 39
 641: PUSH
 642: LD_INT 40
 644: PUSH
 645: LD_INT 41
 647: PUSH
 648: LD_INT 42
 650: PUSH
 651: LD_INT 43
 653: PUSH
 654: LD_INT 48
 656: PUSH
 657: LD_INT 49
 659: PUSH
 660: LD_INT 50
 662: PUSH
 663: LD_INT 51
 665: PUSH
 666: LD_INT 52
 668: PUSH
 669: LD_INT 53
 671: PUSH
 672: LD_INT 54
 674: PUSH
 675: LD_INT 55
 677: PUSH
 678: LD_INT 56
 680: PUSH
 681: LD_INT 60
 683: PUSH
 684: LD_INT 61
 686: PUSH
 687: LD_INT 62
 689: PUSH
 690: LD_INT 66
 692: PUSH
 693: LD_INT 67
 695: PUSH
 696: LD_INT 68
 698: PUSH
 699: LD_INT 81
 701: PUSH
 702: LD_INT 82
 704: PUSH
 705: LD_INT 83
 707: PUSH
 708: LD_INT 84
 710: PUSH
 711: LD_INT 85
 713: PUSH
 714: LD_INT 87
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: ST_TO_ADDR
 772: GO 1005
 774: LD_INT 3
 776: DOUBLE
 777: EQUAL
 778: IFTRUE 782
 780: GO 1004
 782: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 783: LD_ADDR_VAR 0 4
 787: PUSH
 788: LD_INT 46
 790: PUSH
 791: LD_INT 47
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: LD_INT 2
 799: PUSH
 800: LD_INT 82
 802: PUSH
 803: LD_INT 83
 805: PUSH
 806: LD_INT 84
 808: PUSH
 809: LD_INT 85
 811: PUSH
 812: LD_INT 86
 814: PUSH
 815: LD_INT 11
 817: PUSH
 818: LD_INT 9
 820: PUSH
 821: LD_INT 20
 823: PUSH
 824: LD_INT 19
 826: PUSH
 827: LD_INT 21
 829: PUSH
 830: LD_INT 24
 832: PUSH
 833: LD_INT 22
 835: PUSH
 836: LD_INT 25
 838: PUSH
 839: LD_INT 28
 841: PUSH
 842: LD_INT 29
 844: PUSH
 845: LD_INT 30
 847: PUSH
 848: LD_INT 31
 850: PUSH
 851: LD_INT 37
 853: PUSH
 854: LD_INT 38
 856: PUSH
 857: LD_INT 32
 859: PUSH
 860: LD_INT 27
 862: PUSH
 863: LD_INT 33
 865: PUSH
 866: LD_INT 69
 868: PUSH
 869: LD_INT 39
 871: PUSH
 872: LD_INT 34
 874: PUSH
 875: LD_INT 40
 877: PUSH
 878: LD_INT 71
 880: PUSH
 881: LD_INT 23
 883: PUSH
 884: LD_INT 44
 886: PUSH
 887: LD_INT 48
 889: PUSH
 890: LD_INT 49
 892: PUSH
 893: LD_INT 50
 895: PUSH
 896: LD_INT 51
 898: PUSH
 899: LD_INT 52
 901: PUSH
 902: LD_INT 53
 904: PUSH
 905: LD_INT 54
 907: PUSH
 908: LD_INT 55
 910: PUSH
 911: LD_INT 56
 913: PUSH
 914: LD_INT 57
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: LD_INT 59
 922: PUSH
 923: LD_INT 63
 925: PUSH
 926: LD_INT 64
 928: PUSH
 929: LD_INT 65
 931: PUSH
 932: LD_INT 82
 934: PUSH
 935: LD_INT 83
 937: PUSH
 938: LD_INT 84
 940: PUSH
 941: LD_INT 85
 943: PUSH
 944: LD_INT 86
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: ST_TO_ADDR
1002: GO 1005
1004: POP
// if state > - 1 and state < 3 then
1005: LD_VAR 0 3
1009: PUSH
1010: LD_INT 1
1012: NEG
1013: GREATER
1014: PUSH
1015: LD_VAR 0 3
1019: PUSH
1020: LD_INT 3
1022: LESS
1023: AND
1024: IFFALSE 1081
// for i in result do
1026: LD_ADDR_VAR 0 5
1030: PUSH
1031: LD_VAR 0 4
1035: PUSH
1036: FOR_IN
1037: IFFALSE 1079
// if GetTech ( i , side ) <> state then
1039: LD_VAR 0 5
1043: PPUSH
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 321
1053: PUSH
1054: LD_VAR 0 3
1058: NONEQUAL
1059: IFFALSE 1077
// result := result diff i ;
1061: LD_ADDR_VAR 0 4
1065: PUSH
1066: LD_VAR 0 4
1070: PUSH
1071: LD_VAR 0 5
1075: DIFF
1076: ST_TO_ADDR
1077: GO 1036
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 4
1085: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
// result := true ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: LD_INT 1
1098: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_VAR 0 2
1108: PPUSH
1109: CALL_OW 480
1113: ST_TO_ADDR
// if not tmp then
1114: LD_VAR 0 5
1118: NOT
1119: IFFALSE 1123
// exit ;
1121: GO 1172
// for i in tmp do
1123: LD_ADDR_VAR 0 4
1127: PUSH
1128: LD_VAR 0 5
1132: PUSH
1133: FOR_IN
1134: IFFALSE 1170
// if GetTech ( i , side ) <> state_researched then
1136: LD_VAR 0 4
1140: PPUSH
1141: LD_VAR 0 1
1145: PPUSH
1146: CALL_OW 321
1150: PUSH
1151: LD_INT 2
1153: NONEQUAL
1154: IFFALSE 1168
// begin result := false ;
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: LD_INT 0
1163: ST_TO_ADDR
// exit ;
1164: POP
1165: POP
1166: GO 1172
// end ;
1168: GO 1133
1170: POP
1171: POP
// end ;
1172: LD_VAR 0 3
1176: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1177: LD_INT 0
1179: PPUSH
1180: PPUSH
1181: PPUSH
1182: PPUSH
1183: PPUSH
1184: PPUSH
1185: PPUSH
1186: PPUSH
1187: PPUSH
1188: PPUSH
1189: PPUSH
1190: PPUSH
1191: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1192: LD_VAR 0 1
1196: NOT
1197: PUSH
1198: LD_VAR 0 1
1202: PPUSH
1203: CALL_OW 257
1207: PUSH
1208: LD_INT 9
1210: NONEQUAL
1211: OR
1212: IFFALSE 1216
// exit ;
1214: GO 1789
// side := GetSide ( unit ) ;
1216: LD_ADDR_VAR 0 9
1220: PUSH
1221: LD_VAR 0 1
1225: PPUSH
1226: CALL_OW 255
1230: ST_TO_ADDR
// tech_space := tech_spacanom ;
1231: LD_ADDR_VAR 0 12
1235: PUSH
1236: LD_INT 29
1238: ST_TO_ADDR
// tech_time := tech_taurad ;
1239: LD_ADDR_VAR 0 13
1243: PUSH
1244: LD_INT 28
1246: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1247: LD_ADDR_VAR 0 11
1251: PUSH
1252: LD_VAR 0 1
1256: PPUSH
1257: CALL_OW 310
1261: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1262: LD_VAR 0 11
1266: PPUSH
1267: CALL_OW 247
1271: PUSH
1272: LD_INT 2
1274: EQUAL
1275: IFFALSE 1279
// exit ;
1277: GO 1789
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1279: LD_ADDR_VAR 0 8
1283: PUSH
1284: LD_INT 81
1286: PUSH
1287: LD_VAR 0 9
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 3
1298: PUSH
1299: LD_INT 21
1301: PUSH
1302: LD_INT 3
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PPUSH
1317: CALL_OW 69
1321: ST_TO_ADDR
// if not tmp then
1322: LD_VAR 0 8
1326: NOT
1327: IFFALSE 1331
// exit ;
1329: GO 1789
// if in_unit then
1331: LD_VAR 0 11
1335: IFFALSE 1359
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1337: LD_ADDR_VAR 0 10
1341: PUSH
1342: LD_VAR 0 8
1346: PPUSH
1347: LD_VAR 0 11
1351: PPUSH
1352: CALL_OW 74
1356: ST_TO_ADDR
1357: GO 1379
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1359: LD_ADDR_VAR 0 10
1363: PUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 1
1373: PPUSH
1374: CALL_OW 74
1378: ST_TO_ADDR
// if not enemy then
1379: LD_VAR 0 10
1383: NOT
1384: IFFALSE 1388
// exit ;
1386: GO 1789
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1388: LD_VAR 0 11
1392: PUSH
1393: LD_VAR 0 11
1397: PPUSH
1398: LD_VAR 0 10
1402: PPUSH
1403: CALL_OW 296
1407: PUSH
1408: LD_INT 13
1410: GREATER
1411: AND
1412: PUSH
1413: LD_VAR 0 1
1417: PPUSH
1418: LD_VAR 0 10
1422: PPUSH
1423: CALL_OW 296
1427: PUSH
1428: LD_INT 12
1430: GREATER
1431: OR
1432: IFFALSE 1436
// exit ;
1434: GO 1789
// missile := [ 1 ] ;
1436: LD_ADDR_VAR 0 14
1440: PUSH
1441: LD_INT 1
1443: PUSH
1444: EMPTY
1445: LIST
1446: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1447: LD_VAR 0 9
1451: PPUSH
1452: LD_VAR 0 12
1456: PPUSH
1457: CALL_OW 325
1461: IFFALSE 1490
// missile := Insert ( missile , missile + 1 , 2 ) ;
1463: LD_ADDR_VAR 0 14
1467: PUSH
1468: LD_VAR 0 14
1472: PPUSH
1473: LD_VAR 0 14
1477: PUSH
1478: LD_INT 1
1480: PLUS
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 2
1489: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1490: LD_VAR 0 9
1494: PPUSH
1495: LD_VAR 0 13
1499: PPUSH
1500: CALL_OW 325
1504: PUSH
1505: LD_VAR 0 10
1509: PPUSH
1510: CALL_OW 255
1514: PPUSH
1515: LD_VAR 0 13
1519: PPUSH
1520: CALL_OW 325
1524: NOT
1525: AND
1526: IFFALSE 1555
// missile := Insert ( missile , missile + 1 , 3 ) ;
1528: LD_ADDR_VAR 0 14
1532: PUSH
1533: LD_VAR 0 14
1537: PPUSH
1538: LD_VAR 0 14
1542: PUSH
1543: LD_INT 1
1545: PLUS
1546: PPUSH
1547: LD_INT 3
1549: PPUSH
1550: CALL_OW 2
1554: ST_TO_ADDR
// if missile < 2 then
1555: LD_VAR 0 14
1559: PUSH
1560: LD_INT 2
1562: LESS
1563: IFFALSE 1567
// exit ;
1565: GO 1789
// x := GetX ( enemy ) ;
1567: LD_ADDR_VAR 0 4
1571: PUSH
1572: LD_VAR 0 10
1576: PPUSH
1577: CALL_OW 250
1581: ST_TO_ADDR
// y := GetY ( enemy ) ;
1582: LD_ADDR_VAR 0 5
1586: PUSH
1587: LD_VAR 0 10
1591: PPUSH
1592: CALL_OW 251
1596: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1597: LD_ADDR_VAR 0 6
1601: PUSH
1602: LD_VAR 0 4
1606: PUSH
1607: LD_INT 1
1609: NEG
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: CALL_OW 12
1618: PLUS
1619: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1620: LD_ADDR_VAR 0 7
1624: PUSH
1625: LD_VAR 0 5
1629: PUSH
1630: LD_INT 1
1632: NEG
1633: PPUSH
1634: LD_INT 1
1636: PPUSH
1637: CALL_OW 12
1641: PLUS
1642: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1643: LD_VAR 0 6
1647: PPUSH
1648: LD_VAR 0 7
1652: PPUSH
1653: CALL_OW 488
1657: NOT
1658: IFFALSE 1680
// begin _x := x ;
1660: LD_ADDR_VAR 0 6
1664: PUSH
1665: LD_VAR 0 4
1669: ST_TO_ADDR
// _y := y ;
1670: LD_ADDR_VAR 0 7
1674: PUSH
1675: LD_VAR 0 5
1679: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1680: LD_ADDR_VAR 0 3
1684: PUSH
1685: LD_INT 1
1687: PPUSH
1688: LD_VAR 0 14
1692: PPUSH
1693: CALL_OW 12
1697: ST_TO_ADDR
// case i of 1 :
1698: LD_VAR 0 3
1702: PUSH
1703: LD_INT 1
1705: DOUBLE
1706: EQUAL
1707: IFTRUE 1711
1709: GO 1728
1711: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1712: LD_VAR 0 1
1716: PPUSH
1717: LD_VAR 0 10
1721: PPUSH
1722: CALL_OW 115
1726: GO 1789
1728: LD_INT 2
1730: DOUBLE
1731: EQUAL
1732: IFTRUE 1736
1734: GO 1758
1736: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1737: LD_VAR 0 1
1741: PPUSH
1742: LD_VAR 0 6
1746: PPUSH
1747: LD_VAR 0 7
1751: PPUSH
1752: CALL_OW 153
1756: GO 1789
1758: LD_INT 3
1760: DOUBLE
1761: EQUAL
1762: IFTRUE 1766
1764: GO 1788
1766: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1767: LD_VAR 0 1
1771: PPUSH
1772: LD_VAR 0 6
1776: PPUSH
1777: LD_VAR 0 7
1781: PPUSH
1782: CALL_OW 154
1786: GO 1789
1788: POP
// end ;
1789: LD_VAR 0 2
1793: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1794: LD_INT 0
1796: PPUSH
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// if not unit or not building then
1802: LD_VAR 0 1
1806: NOT
1807: PUSH
1808: LD_VAR 0 2
1812: NOT
1813: OR
1814: IFFALSE 1818
// exit ;
1816: GO 1976
// x := GetX ( building ) ;
1818: LD_ADDR_VAR 0 5
1822: PUSH
1823: LD_VAR 0 2
1827: PPUSH
1828: CALL_OW 250
1832: ST_TO_ADDR
// y := GetY ( building ) ;
1833: LD_ADDR_VAR 0 6
1837: PUSH
1838: LD_VAR 0 2
1842: PPUSH
1843: CALL_OW 251
1847: ST_TO_ADDR
// for i = 0 to 5 do
1848: LD_ADDR_VAR 0 4
1852: PUSH
1853: DOUBLE
1854: LD_INT 0
1856: DEC
1857: ST_TO_ADDR
1858: LD_INT 5
1860: PUSH
1861: FOR_TO
1862: IFFALSE 1974
// begin _x := ShiftX ( x , i , 3 ) ;
1864: LD_ADDR_VAR 0 7
1868: PUSH
1869: LD_VAR 0 5
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: LD_INT 3
1881: PPUSH
1882: CALL_OW 272
1886: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1887: LD_ADDR_VAR 0 8
1891: PUSH
1892: LD_VAR 0 6
1896: PPUSH
1897: LD_VAR 0 4
1901: PPUSH
1902: LD_INT 3
1904: PPUSH
1905: CALL_OW 273
1909: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1910: LD_VAR 0 7
1914: PPUSH
1915: LD_VAR 0 8
1919: PPUSH
1920: CALL_OW 488
1924: NOT
1925: IFFALSE 1929
// continue ;
1927: GO 1861
// if HexInfo ( _x , _y ) = 0 then
1929: LD_VAR 0 7
1933: PPUSH
1934: LD_VAR 0 8
1938: PPUSH
1939: CALL_OW 428
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: IFFALSE 1972
// begin ComMoveXY ( unit , _x , _y ) ;
1949: LD_VAR 0 1
1953: PPUSH
1954: LD_VAR 0 7
1958: PPUSH
1959: LD_VAR 0 8
1963: PPUSH
1964: CALL_OW 111
// exit ;
1968: POP
1969: POP
1970: GO 1976
// end ; end ;
1972: GO 1861
1974: POP
1975: POP
// end ;
1976: LD_VAR 0 3
1980: RET
// export function ScanBase ( side , base_area ) ; begin
1981: LD_INT 0
1983: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: LD_VAR 0 2
1993: PPUSH
1994: LD_INT 81
1996: PUSH
1997: LD_VAR 0 1
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PPUSH
2006: CALL_OW 70
2010: ST_TO_ADDR
// end ;
2011: LD_VAR 0 3
2015: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2016: LD_INT 0
2018: PPUSH
2019: PPUSH
2020: PPUSH
2021: PPUSH
// result := false ;
2022: LD_ADDR_VAR 0 2
2026: PUSH
2027: LD_INT 0
2029: ST_TO_ADDR
// side := GetSide ( unit ) ;
2030: LD_ADDR_VAR 0 3
2034: PUSH
2035: LD_VAR 0 1
2039: PPUSH
2040: CALL_OW 255
2044: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2045: LD_ADDR_VAR 0 4
2049: PUSH
2050: LD_VAR 0 1
2054: PPUSH
2055: CALL_OW 248
2059: ST_TO_ADDR
// case nat of 1 :
2060: LD_VAR 0 4
2064: PUSH
2065: LD_INT 1
2067: DOUBLE
2068: EQUAL
2069: IFTRUE 2073
2071: GO 2084
2073: POP
// tech := tech_lassight ; 2 :
2074: LD_ADDR_VAR 0 5
2078: PUSH
2079: LD_INT 12
2081: ST_TO_ADDR
2082: GO 2123
2084: LD_INT 2
2086: DOUBLE
2087: EQUAL
2088: IFTRUE 2092
2090: GO 2103
2092: POP
// tech := tech_mortar ; 3 :
2093: LD_ADDR_VAR 0 5
2097: PUSH
2098: LD_INT 41
2100: ST_TO_ADDR
2101: GO 2123
2103: LD_INT 3
2105: DOUBLE
2106: EQUAL
2107: IFTRUE 2111
2109: GO 2122
2111: POP
// tech := tech_bazooka ; end ;
2112: LD_ADDR_VAR 0 5
2116: PUSH
2117: LD_INT 44
2119: ST_TO_ADDR
2120: GO 2123
2122: POP
// if Researched ( side , tech ) then
2123: LD_VAR 0 3
2127: PPUSH
2128: LD_VAR 0 5
2132: PPUSH
2133: CALL_OW 325
2137: IFFALSE 2164
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2139: LD_ADDR_VAR 0 2
2143: PUSH
2144: LD_INT 5
2146: PUSH
2147: LD_INT 8
2149: PUSH
2150: LD_INT 9
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_VAR 0 4
2162: ARRAY
2163: ST_TO_ADDR
// end ;
2164: LD_VAR 0 2
2168: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2169: LD_INT 0
2171: PPUSH
2172: PPUSH
2173: PPUSH
// if not mines then
2174: LD_VAR 0 2
2178: NOT
2179: IFFALSE 2183
// exit ;
2181: GO 2327
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2183: LD_ADDR_VAR 0 5
2187: PUSH
2188: LD_INT 81
2190: PUSH
2191: LD_VAR 0 1
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: LD_INT 3
2202: PUSH
2203: LD_INT 21
2205: PUSH
2206: LD_INT 3
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PPUSH
2221: CALL_OW 69
2225: ST_TO_ADDR
// for i in mines do
2226: LD_ADDR_VAR 0 4
2230: PUSH
2231: LD_VAR 0 2
2235: PUSH
2236: FOR_IN
2237: IFFALSE 2325
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2239: LD_VAR 0 4
2243: PUSH
2244: LD_INT 1
2246: ARRAY
2247: PPUSH
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: PPUSH
2257: CALL_OW 458
2261: NOT
2262: IFFALSE 2266
// continue ;
2264: GO 2236
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2266: LD_VAR 0 4
2270: PUSH
2271: LD_INT 1
2273: ARRAY
2274: PPUSH
2275: LD_VAR 0 4
2279: PUSH
2280: LD_INT 2
2282: ARRAY
2283: PPUSH
2284: CALL_OW 428
2288: PUSH
2289: LD_VAR 0 5
2293: IN
2294: IFFALSE 2323
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2296: LD_VAR 0 4
2300: PUSH
2301: LD_INT 1
2303: ARRAY
2304: PPUSH
2305: LD_VAR 0 4
2309: PUSH
2310: LD_INT 2
2312: ARRAY
2313: PPUSH
2314: LD_VAR 0 1
2318: PPUSH
2319: CALL_OW 456
// end ;
2323: GO 2236
2325: POP
2326: POP
// end ;
2327: LD_VAR 0 3
2331: RET
// export function Count ( array ) ; var i ; begin
2332: LD_INT 0
2334: PPUSH
2335: PPUSH
// result := 0 ;
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: LD_INT 0
2343: ST_TO_ADDR
// for i in array do
2344: LD_ADDR_VAR 0 3
2348: PUSH
2349: LD_VAR 0 1
2353: PUSH
2354: FOR_IN
2355: IFFALSE 2379
// if i then
2357: LD_VAR 0 3
2361: IFFALSE 2377
// result := result + 1 ;
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: LD_VAR 0 2
2372: PUSH
2373: LD_INT 1
2375: PLUS
2376: ST_TO_ADDR
2377: GO 2354
2379: POP
2380: POP
// end ;
2381: LD_VAR 0 2
2385: RET
// export function IsEmpty ( building ) ; begin
2386: LD_INT 0
2388: PPUSH
// if not building then
2389: LD_VAR 0 1
2393: NOT
2394: IFFALSE 2398
// exit ;
2396: GO 2441
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2398: LD_ADDR_VAR 0 2
2402: PUSH
2403: LD_VAR 0 1
2407: PUSH
2408: LD_INT 22
2410: PUSH
2411: LD_VAR 0 1
2415: PPUSH
2416: CALL_OW 255
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_INT 58
2427: PUSH
2428: EMPTY
2429: LIST
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: PPUSH
2435: CALL_OW 69
2439: IN
2440: ST_TO_ADDR
// end ;
2441: LD_VAR 0 2
2445: RET
// export function IsNotFull ( building ) ; begin
2446: LD_INT 0
2448: PPUSH
// if not building then
2449: LD_VAR 0 1
2453: NOT
2454: IFFALSE 2458
// exit ;
2456: GO 2477
// result := UnitsInside ( building ) < 6 ;
2458: LD_ADDR_VAR 0 2
2462: PUSH
2463: LD_VAR 0 1
2467: PPUSH
2468: CALL_OW 313
2472: PUSH
2473: LD_INT 6
2475: LESS
2476: ST_TO_ADDR
// end ;
2477: LD_VAR 0 2
2481: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2482: LD_INT 0
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// tmp := [ ] ;
2488: LD_ADDR_VAR 0 3
2492: PUSH
2493: EMPTY
2494: ST_TO_ADDR
// list := [ ] ;
2495: LD_ADDR_VAR 0 5
2499: PUSH
2500: EMPTY
2501: ST_TO_ADDR
// for i = 16 to 25 do
2502: LD_ADDR_VAR 0 4
2506: PUSH
2507: DOUBLE
2508: LD_INT 16
2510: DEC
2511: ST_TO_ADDR
2512: LD_INT 25
2514: PUSH
2515: FOR_TO
2516: IFFALSE 2589
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2518: LD_ADDR_VAR 0 3
2522: PUSH
2523: LD_VAR 0 3
2527: PUSH
2528: LD_INT 22
2530: PUSH
2531: LD_VAR 0 1
2535: PPUSH
2536: CALL_OW 255
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PUSH
2545: LD_INT 91
2547: PUSH
2548: LD_VAR 0 1
2552: PUSH
2553: LD_INT 6
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 30
2563: PUSH
2564: LD_VAR 0 4
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: LIST
2577: PUSH
2578: EMPTY
2579: LIST
2580: PPUSH
2581: CALL_OW 69
2585: ADD
2586: ST_TO_ADDR
2587: GO 2515
2589: POP
2590: POP
// for i = 1 to tmp do
2591: LD_ADDR_VAR 0 4
2595: PUSH
2596: DOUBLE
2597: LD_INT 1
2599: DEC
2600: ST_TO_ADDR
2601: LD_VAR 0 3
2605: PUSH
2606: FOR_TO
2607: IFFALSE 2695
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2609: LD_ADDR_VAR 0 5
2613: PUSH
2614: LD_VAR 0 5
2618: PUSH
2619: LD_VAR 0 3
2623: PUSH
2624: LD_VAR 0 4
2628: ARRAY
2629: PPUSH
2630: CALL_OW 266
2634: PUSH
2635: LD_VAR 0 3
2639: PUSH
2640: LD_VAR 0 4
2644: ARRAY
2645: PPUSH
2646: CALL_OW 250
2650: PUSH
2651: LD_VAR 0 3
2655: PUSH
2656: LD_VAR 0 4
2660: ARRAY
2661: PPUSH
2662: CALL_OW 251
2666: PUSH
2667: LD_VAR 0 3
2671: PUSH
2672: LD_VAR 0 4
2676: ARRAY
2677: PPUSH
2678: CALL_OW 254
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: LIST
2688: PUSH
2689: EMPTY
2690: LIST
2691: ADD
2692: ST_TO_ADDR
2693: GO 2606
2695: POP
2696: POP
// result := list ;
2697: LD_ADDR_VAR 0 2
2701: PUSH
2702: LD_VAR 0 5
2706: ST_TO_ADDR
// end ;
2707: LD_VAR 0 2
2711: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2712: LD_INT 0
2714: PPUSH
2715: PPUSH
2716: PPUSH
2717: PPUSH
2718: PPUSH
2719: PPUSH
2720: PPUSH
// if not factory then
2721: LD_VAR 0 1
2725: NOT
2726: IFFALSE 2730
// exit ;
2728: GO 3323
// if control = control_apeman then
2730: LD_VAR 0 4
2734: PUSH
2735: LD_INT 5
2737: EQUAL
2738: IFFALSE 2847
// begin tmp := UnitsInside ( factory ) ;
2740: LD_ADDR_VAR 0 8
2744: PUSH
2745: LD_VAR 0 1
2749: PPUSH
2750: CALL_OW 313
2754: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2755: LD_VAR 0 8
2759: PPUSH
2760: LD_INT 25
2762: PUSH
2763: LD_INT 12
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PPUSH
2770: CALL_OW 72
2774: NOT
2775: IFFALSE 2785
// control := control_manual ;
2777: LD_ADDR_VAR 0 4
2781: PUSH
2782: LD_INT 1
2784: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2785: LD_ADDR_VAR 0 8
2789: PUSH
2790: LD_VAR 0 1
2794: PPUSH
2795: CALL 2482 0 1
2799: ST_TO_ADDR
// if tmp then
2800: LD_VAR 0 8
2804: IFFALSE 2847
// begin for i in tmp do
2806: LD_ADDR_VAR 0 7
2810: PUSH
2811: LD_VAR 0 8
2815: PUSH
2816: FOR_IN
2817: IFFALSE 2845
// if i [ 1 ] = b_ext_radio then
2819: LD_VAR 0 7
2823: PUSH
2824: LD_INT 1
2826: ARRAY
2827: PUSH
2828: LD_INT 22
2830: EQUAL
2831: IFFALSE 2843
// begin control := control_remote ;
2833: LD_ADDR_VAR 0 4
2837: PUSH
2838: LD_INT 2
2840: ST_TO_ADDR
// break ;
2841: GO 2845
// end ;
2843: GO 2816
2845: POP
2846: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2847: LD_VAR 0 1
2851: PPUSH
2852: LD_VAR 0 2
2856: PPUSH
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_VAR 0 5
2871: PPUSH
2872: CALL_OW 448
2876: IFFALSE 2911
// begin result := [ chassis , engine , control , weapon ] ;
2878: LD_ADDR_VAR 0 6
2882: PUSH
2883: LD_VAR 0 2
2887: PUSH
2888: LD_VAR 0 3
2892: PUSH
2893: LD_VAR 0 4
2897: PUSH
2898: LD_VAR 0 5
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: ST_TO_ADDR
// exit ;
2909: GO 3323
// end ; _chassis := AvailableChassisList ( factory ) ;
2911: LD_ADDR_VAR 0 9
2915: PUSH
2916: LD_VAR 0 1
2920: PPUSH
2921: CALL_OW 475
2925: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2926: LD_ADDR_VAR 0 11
2930: PUSH
2931: LD_VAR 0 1
2935: PPUSH
2936: CALL_OW 476
2940: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2941: LD_ADDR_VAR 0 12
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 477
2955: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2956: LD_ADDR_VAR 0 10
2960: PUSH
2961: LD_VAR 0 1
2965: PPUSH
2966: CALL_OW 478
2970: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2971: LD_VAR 0 9
2975: NOT
2976: PUSH
2977: LD_VAR 0 11
2981: NOT
2982: OR
2983: PUSH
2984: LD_VAR 0 12
2988: NOT
2989: OR
2990: PUSH
2991: LD_VAR 0 10
2995: NOT
2996: OR
2997: IFFALSE 3032
// begin result := [ chassis , engine , control , weapon ] ;
2999: LD_ADDR_VAR 0 6
3003: PUSH
3004: LD_VAR 0 2
3008: PUSH
3009: LD_VAR 0 3
3013: PUSH
3014: LD_VAR 0 4
3018: PUSH
3019: LD_VAR 0 5
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: ST_TO_ADDR
// exit ;
3030: GO 3323
// end ; if not chassis in _chassis then
3032: LD_VAR 0 2
3036: PUSH
3037: LD_VAR 0 9
3041: IN
3042: NOT
3043: IFFALSE 3069
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3045: LD_ADDR_VAR 0 2
3049: PUSH
3050: LD_VAR 0 9
3054: PUSH
3055: LD_INT 1
3057: PPUSH
3058: LD_VAR 0 9
3062: PPUSH
3063: CALL_OW 12
3067: ARRAY
3068: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3069: LD_VAR 0 2
3073: PPUSH
3074: LD_VAR 0 3
3078: PPUSH
3079: CALL 3328 0 2
3083: NOT
3084: IFFALSE 3143
// repeat engine := _engine [ 1 ] ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: LD_VAR 0 11
3095: PUSH
3096: LD_INT 1
3098: ARRAY
3099: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3100: LD_ADDR_VAR 0 11
3104: PUSH
3105: LD_VAR 0 11
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: CALL_OW 3
3117: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3118: LD_VAR 0 2
3122: PPUSH
3123: LD_VAR 0 3
3127: PPUSH
3128: CALL 3328 0 2
3132: PUSH
3133: LD_VAR 0 11
3137: PUSH
3138: EMPTY
3139: EQUAL
3140: OR
3141: IFFALSE 3086
// if not control in _control then
3143: LD_VAR 0 4
3147: PUSH
3148: LD_VAR 0 12
3152: IN
3153: NOT
3154: IFFALSE 3180
// control := _control [ rand ( 1 , _control ) ] ;
3156: LD_ADDR_VAR 0 4
3160: PUSH
3161: LD_VAR 0 12
3165: PUSH
3166: LD_INT 1
3168: PPUSH
3169: LD_VAR 0 12
3173: PPUSH
3174: CALL_OW 12
3178: ARRAY
3179: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3180: LD_VAR 0 2
3184: PPUSH
3185: LD_VAR 0 5
3189: PPUSH
3190: CALL 3548 0 2
3194: NOT
3195: IFFALSE 3254
// repeat weapon := _weapon [ 1 ] ;
3197: LD_ADDR_VAR 0 5
3201: PUSH
3202: LD_VAR 0 10
3206: PUSH
3207: LD_INT 1
3209: ARRAY
3210: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3211: LD_ADDR_VAR 0 10
3215: PUSH
3216: LD_VAR 0 10
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: CALL_OW 3
3228: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3229: LD_VAR 0 2
3233: PPUSH
3234: LD_VAR 0 5
3238: PPUSH
3239: CALL 3548 0 2
3243: PUSH
3244: LD_VAR 0 10
3248: PUSH
3249: EMPTY
3250: EQUAL
3251: OR
3252: IFFALSE 3197
// result := [ ] ;
3254: LD_ADDR_VAR 0 6
3258: PUSH
3259: EMPTY
3260: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3261: LD_VAR 0 1
3265: PPUSH
3266: LD_VAR 0 2
3270: PPUSH
3271: LD_VAR 0 3
3275: PPUSH
3276: LD_VAR 0 4
3280: PPUSH
3281: LD_VAR 0 5
3285: PPUSH
3286: CALL_OW 448
3290: IFFALSE 3323
// result := [ chassis , engine , control , weapon ] ;
3292: LD_ADDR_VAR 0 6
3296: PUSH
3297: LD_VAR 0 2
3301: PUSH
3302: LD_VAR 0 3
3306: PUSH
3307: LD_VAR 0 4
3311: PUSH
3312: LD_VAR 0 5
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: ST_TO_ADDR
// end ;
3323: LD_VAR 0 6
3327: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3328: LD_INT 0
3330: PPUSH
// if not chassis or not engine then
3331: LD_VAR 0 1
3335: NOT
3336: PUSH
3337: LD_VAR 0 2
3341: NOT
3342: OR
3343: IFFALSE 3347
// exit ;
3345: GO 3543
// case engine of engine_solar :
3347: LD_VAR 0 2
3351: PUSH
3352: LD_INT 2
3354: DOUBLE
3355: EQUAL
3356: IFTRUE 3360
3358: GO 3398
3360: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3361: LD_ADDR_VAR 0 3
3365: PUSH
3366: LD_INT 11
3368: PUSH
3369: LD_INT 12
3371: PUSH
3372: LD_INT 13
3374: PUSH
3375: LD_INT 14
3377: PUSH
3378: LD_INT 1
3380: PUSH
3381: LD_INT 2
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: ST_TO_ADDR
3396: GO 3527
3398: LD_INT 1
3400: DOUBLE
3401: EQUAL
3402: IFTRUE 3406
3404: GO 3468
3406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3407: LD_ADDR_VAR 0 3
3411: PUSH
3412: LD_INT 11
3414: PUSH
3415: LD_INT 12
3417: PUSH
3418: LD_INT 13
3420: PUSH
3421: LD_INT 14
3423: PUSH
3424: LD_INT 1
3426: PUSH
3427: LD_INT 2
3429: PUSH
3430: LD_INT 3
3432: PUSH
3433: LD_INT 4
3435: PUSH
3436: LD_INT 5
3438: PUSH
3439: LD_INT 21
3441: PUSH
3442: LD_INT 23
3444: PUSH
3445: LD_INT 22
3447: PUSH
3448: LD_INT 24
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: ST_TO_ADDR
3466: GO 3527
3468: LD_INT 3
3470: DOUBLE
3471: EQUAL
3472: IFTRUE 3476
3474: GO 3526
3476: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_INT 13
3484: PUSH
3485: LD_INT 14
3487: PUSH
3488: LD_INT 2
3490: PUSH
3491: LD_INT 3
3493: PUSH
3494: LD_INT 4
3496: PUSH
3497: LD_INT 5
3499: PUSH
3500: LD_INT 21
3502: PUSH
3503: LD_INT 22
3505: PUSH
3506: LD_INT 23
3508: PUSH
3509: LD_INT 24
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: ST_TO_ADDR
3524: GO 3527
3526: POP
// result := ( chassis in result ) ;
3527: LD_ADDR_VAR 0 3
3531: PUSH
3532: LD_VAR 0 1
3536: PUSH
3537: LD_VAR 0 3
3541: IN
3542: ST_TO_ADDR
// end ;
3543: LD_VAR 0 3
3547: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3548: LD_INT 0
3550: PPUSH
// if not chassis or not weapon then
3551: LD_VAR 0 1
3555: NOT
3556: PUSH
3557: LD_VAR 0 2
3561: NOT
3562: OR
3563: IFFALSE 3567
// exit ;
3565: GO 4593
// case weapon of us_machine_gun :
3567: LD_VAR 0 2
3571: PUSH
3572: LD_INT 2
3574: DOUBLE
3575: EQUAL
3576: IFTRUE 3580
3578: GO 3610
3580: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3581: LD_ADDR_VAR 0 3
3585: PUSH
3586: LD_INT 1
3588: PUSH
3589: LD_INT 2
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: LD_INT 4
3597: PUSH
3598: LD_INT 5
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: ST_TO_ADDR
3608: GO 4577
3610: LD_INT 3
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3618
3616: GO 3648
3618: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3619: LD_ADDR_VAR 0 3
3623: PUSH
3624: LD_INT 1
3626: PUSH
3627: LD_INT 2
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: LD_INT 4
3635: PUSH
3636: LD_INT 5
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: ST_TO_ADDR
3646: GO 4577
3648: LD_INT 11
3650: DOUBLE
3651: EQUAL
3652: IFTRUE 3656
3654: GO 3686
3656: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3657: LD_ADDR_VAR 0 3
3661: PUSH
3662: LD_INT 1
3664: PUSH
3665: LD_INT 2
3667: PUSH
3668: LD_INT 3
3670: PUSH
3671: LD_INT 4
3673: PUSH
3674: LD_INT 5
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: ST_TO_ADDR
3684: GO 4577
3686: LD_INT 4
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3694
3692: GO 3720
3694: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3695: LD_ADDR_VAR 0 3
3699: PUSH
3700: LD_INT 2
3702: PUSH
3703: LD_INT 3
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: LD_INT 5
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: ST_TO_ADDR
3718: GO 4577
3720: LD_INT 5
3722: DOUBLE
3723: EQUAL
3724: IFTRUE 3728
3726: GO 3754
3728: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3729: LD_ADDR_VAR 0 3
3733: PUSH
3734: LD_INT 2
3736: PUSH
3737: LD_INT 3
3739: PUSH
3740: LD_INT 4
3742: PUSH
3743: LD_INT 5
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: ST_TO_ADDR
3752: GO 4577
3754: LD_INT 9
3756: DOUBLE
3757: EQUAL
3758: IFTRUE 3762
3760: GO 3788
3762: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3763: LD_ADDR_VAR 0 3
3767: PUSH
3768: LD_INT 2
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: LD_INT 5
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: ST_TO_ADDR
3786: GO 4577
3788: LD_INT 7
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3822
3796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3797: LD_ADDR_VAR 0 3
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: LD_INT 3
3807: PUSH
3808: LD_INT 4
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
3820: GO 4577
3822: LD_INT 12
3824: DOUBLE
3825: EQUAL
3826: IFTRUE 3830
3828: GO 3856
3830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3831: LD_ADDR_VAR 0 3
3835: PUSH
3836: LD_INT 2
3838: PUSH
3839: LD_INT 3
3841: PUSH
3842: LD_INT 4
3844: PUSH
3845: LD_INT 5
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: ST_TO_ADDR
3854: GO 4577
3856: LD_INT 13
3858: DOUBLE
3859: EQUAL
3860: IFTRUE 3864
3862: GO 3890
3864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3865: LD_ADDR_VAR 0 3
3869: PUSH
3870: LD_INT 2
3872: PUSH
3873: LD_INT 3
3875: PUSH
3876: LD_INT 4
3878: PUSH
3879: LD_INT 5
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: ST_TO_ADDR
3888: GO 4577
3890: LD_INT 14
3892: DOUBLE
3893: EQUAL
3894: IFTRUE 3898
3896: GO 3916
3898: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3899: LD_ADDR_VAR 0 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: LD_INT 5
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: ST_TO_ADDR
3914: GO 4577
3916: LD_INT 6
3918: DOUBLE
3919: EQUAL
3920: IFTRUE 3924
3922: GO 3942
3924: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3925: LD_ADDR_VAR 0 3
3929: PUSH
3930: LD_INT 4
3932: PUSH
3933: LD_INT 5
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: ST_TO_ADDR
3940: GO 4577
3942: LD_INT 10
3944: DOUBLE
3945: EQUAL
3946: IFTRUE 3950
3948: GO 3968
3950: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3951: LD_ADDR_VAR 0 3
3955: PUSH
3956: LD_INT 4
3958: PUSH
3959: LD_INT 5
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: ST_TO_ADDR
3966: GO 4577
3968: LD_INT 22
3970: DOUBLE
3971: EQUAL
3972: IFTRUE 3976
3974: GO 4002
3976: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: LD_INT 11
3984: PUSH
3985: LD_INT 12
3987: PUSH
3988: LD_INT 13
3990: PUSH
3991: LD_INT 14
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: ST_TO_ADDR
4000: GO 4577
4002: LD_INT 23
4004: DOUBLE
4005: EQUAL
4006: IFTRUE 4010
4008: GO 4036
4010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4011: LD_ADDR_VAR 0 3
4015: PUSH
4016: LD_INT 11
4018: PUSH
4019: LD_INT 12
4021: PUSH
4022: LD_INT 13
4024: PUSH
4025: LD_INT 14
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: ST_TO_ADDR
4034: GO 4577
4036: LD_INT 24
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4070
4044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4045: LD_ADDR_VAR 0 3
4049: PUSH
4050: LD_INT 11
4052: PUSH
4053: LD_INT 12
4055: PUSH
4056: LD_INT 13
4058: PUSH
4059: LD_INT 14
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: ST_TO_ADDR
4068: GO 4577
4070: LD_INT 30
4072: DOUBLE
4073: EQUAL
4074: IFTRUE 4078
4076: GO 4104
4078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4079: LD_ADDR_VAR 0 3
4083: PUSH
4084: LD_INT 11
4086: PUSH
4087: LD_INT 12
4089: PUSH
4090: LD_INT 13
4092: PUSH
4093: LD_INT 14
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: ST_TO_ADDR
4102: GO 4577
4104: LD_INT 25
4106: DOUBLE
4107: EQUAL
4108: IFTRUE 4112
4110: GO 4130
4112: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4113: LD_ADDR_VAR 0 3
4117: PUSH
4118: LD_INT 13
4120: PUSH
4121: LD_INT 14
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: ST_TO_ADDR
4128: GO 4577
4130: LD_INT 27
4132: DOUBLE
4133: EQUAL
4134: IFTRUE 4138
4136: GO 4156
4138: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4139: LD_ADDR_VAR 0 3
4143: PUSH
4144: LD_INT 13
4146: PUSH
4147: LD_INT 14
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: ST_TO_ADDR
4154: GO 4577
4156: LD_INT 28
4158: DOUBLE
4159: EQUAL
4160: IFTRUE 4164
4162: GO 4182
4164: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: LD_INT 13
4172: PUSH
4173: LD_INT 14
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: ST_TO_ADDR
4180: GO 4577
4182: LD_INT 29
4184: DOUBLE
4185: EQUAL
4186: IFTRUE 4190
4188: GO 4208
4190: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4191: LD_ADDR_VAR 0 3
4195: PUSH
4196: LD_INT 13
4198: PUSH
4199: LD_INT 14
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: ST_TO_ADDR
4206: GO 4577
4208: LD_INT 31
4210: DOUBLE
4211: EQUAL
4212: IFTRUE 4216
4214: GO 4234
4216: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4217: LD_ADDR_VAR 0 3
4221: PUSH
4222: LD_INT 13
4224: PUSH
4225: LD_INT 14
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: ST_TO_ADDR
4232: GO 4577
4234: LD_INT 26
4236: DOUBLE
4237: EQUAL
4238: IFTRUE 4242
4240: GO 4260
4242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4243: LD_ADDR_VAR 0 3
4247: PUSH
4248: LD_INT 13
4250: PUSH
4251: LD_INT 14
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: ST_TO_ADDR
4258: GO 4577
4260: LD_INT 42
4262: DOUBLE
4263: EQUAL
4264: IFTRUE 4268
4266: GO 4294
4268: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4269: LD_ADDR_VAR 0 3
4273: PUSH
4274: LD_INT 21
4276: PUSH
4277: LD_INT 22
4279: PUSH
4280: LD_INT 23
4282: PUSH
4283: LD_INT 24
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: ST_TO_ADDR
4292: GO 4577
4294: LD_INT 43
4296: DOUBLE
4297: EQUAL
4298: IFTRUE 4302
4300: GO 4328
4302: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4303: LD_ADDR_VAR 0 3
4307: PUSH
4308: LD_INT 21
4310: PUSH
4311: LD_INT 22
4313: PUSH
4314: LD_INT 23
4316: PUSH
4317: LD_INT 24
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: ST_TO_ADDR
4326: GO 4577
4328: LD_INT 44
4330: DOUBLE
4331: EQUAL
4332: IFTRUE 4336
4334: GO 4362
4336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: LD_INT 21
4344: PUSH
4345: LD_INT 22
4347: PUSH
4348: LD_INT 23
4350: PUSH
4351: LD_INT 24
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: ST_TO_ADDR
4360: GO 4577
4362: LD_INT 45
4364: DOUBLE
4365: EQUAL
4366: IFTRUE 4370
4368: GO 4396
4370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: LD_INT 21
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 23
4384: PUSH
4385: LD_INT 24
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: ST_TO_ADDR
4394: GO 4577
4396: LD_INT 49
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4430
4404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4405: LD_ADDR_VAR 0 3
4409: PUSH
4410: LD_INT 21
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 23
4418: PUSH
4419: LD_INT 24
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: ST_TO_ADDR
4428: GO 4577
4430: LD_INT 51
4432: DOUBLE
4433: EQUAL
4434: IFTRUE 4438
4436: GO 4464
4438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4439: LD_ADDR_VAR 0 3
4443: PUSH
4444: LD_INT 21
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 23
4452: PUSH
4453: LD_INT 24
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: ST_TO_ADDR
4462: GO 4577
4464: LD_INT 52
4466: DOUBLE
4467: EQUAL
4468: IFTRUE 4472
4470: GO 4498
4472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4473: LD_ADDR_VAR 0 3
4477: PUSH
4478: LD_INT 21
4480: PUSH
4481: LD_INT 22
4483: PUSH
4484: LD_INT 23
4486: PUSH
4487: LD_INT 24
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
4496: GO 4577
4498: LD_INT 53
4500: DOUBLE
4501: EQUAL
4502: IFTRUE 4506
4504: GO 4524
4506: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4507: LD_ADDR_VAR 0 3
4511: PUSH
4512: LD_INT 23
4514: PUSH
4515: LD_INT 24
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: ST_TO_ADDR
4522: GO 4577
4524: LD_INT 46
4526: DOUBLE
4527: EQUAL
4528: IFTRUE 4532
4530: GO 4550
4532: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: LD_INT 23
4540: PUSH
4541: LD_INT 24
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: ST_TO_ADDR
4548: GO 4577
4550: LD_INT 47
4552: DOUBLE
4553: EQUAL
4554: IFTRUE 4558
4556: GO 4576
4558: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4559: LD_ADDR_VAR 0 3
4563: PUSH
4564: LD_INT 23
4566: PUSH
4567: LD_INT 24
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: ST_TO_ADDR
4574: GO 4577
4576: POP
// result := ( chassis in result ) ;
4577: LD_ADDR_VAR 0 3
4581: PUSH
4582: LD_VAR 0 1
4586: PUSH
4587: LD_VAR 0 3
4591: IN
4592: ST_TO_ADDR
// end ;
4593: LD_VAR 0 3
4597: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
4606: PPUSH
// result := array ;
4607: LD_ADDR_VAR 0 5
4611: PUSH
4612: LD_VAR 0 1
4616: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4617: LD_VAR 0 1
4621: NOT
4622: PUSH
4623: LD_VAR 0 2
4627: NOT
4628: OR
4629: PUSH
4630: LD_VAR 0 3
4634: NOT
4635: OR
4636: PUSH
4637: LD_VAR 0 2
4641: PUSH
4642: LD_VAR 0 1
4646: GREATER
4647: OR
4648: PUSH
4649: LD_VAR 0 3
4653: PUSH
4654: LD_VAR 0 1
4658: GREATER
4659: OR
4660: IFFALSE 4664
// exit ;
4662: GO 4960
// if direction then
4664: LD_VAR 0 4
4668: IFFALSE 4732
// begin d := 1 ;
4670: LD_ADDR_VAR 0 9
4674: PUSH
4675: LD_INT 1
4677: ST_TO_ADDR
// if i_from > i_to then
4678: LD_VAR 0 2
4682: PUSH
4683: LD_VAR 0 3
4687: GREATER
4688: IFFALSE 4714
// length := ( array - i_from ) + i_to else
4690: LD_ADDR_VAR 0 11
4694: PUSH
4695: LD_VAR 0 1
4699: PUSH
4700: LD_VAR 0 2
4704: MINUS
4705: PUSH
4706: LD_VAR 0 3
4710: PLUS
4711: ST_TO_ADDR
4712: GO 4730
// length := i_to - i_from ;
4714: LD_ADDR_VAR 0 11
4718: PUSH
4719: LD_VAR 0 3
4723: PUSH
4724: LD_VAR 0 2
4728: MINUS
4729: ST_TO_ADDR
// end else
4730: GO 4793
// begin d := - 1 ;
4732: LD_ADDR_VAR 0 9
4736: PUSH
4737: LD_INT 1
4739: NEG
4740: ST_TO_ADDR
// if i_from > i_to then
4741: LD_VAR 0 2
4745: PUSH
4746: LD_VAR 0 3
4750: GREATER
4751: IFFALSE 4771
// length := i_from - i_to else
4753: LD_ADDR_VAR 0 11
4757: PUSH
4758: LD_VAR 0 2
4762: PUSH
4763: LD_VAR 0 3
4767: MINUS
4768: ST_TO_ADDR
4769: GO 4793
// length := ( array - i_to ) + i_from ;
4771: LD_ADDR_VAR 0 11
4775: PUSH
4776: LD_VAR 0 1
4780: PUSH
4781: LD_VAR 0 3
4785: MINUS
4786: PUSH
4787: LD_VAR 0 2
4791: PLUS
4792: ST_TO_ADDR
// end ; if not length then
4793: LD_VAR 0 11
4797: NOT
4798: IFFALSE 4802
// exit ;
4800: GO 4960
// tmp := array ;
4802: LD_ADDR_VAR 0 10
4806: PUSH
4807: LD_VAR 0 1
4811: ST_TO_ADDR
// for i = 1 to length do
4812: LD_ADDR_VAR 0 6
4816: PUSH
4817: DOUBLE
4818: LD_INT 1
4820: DEC
4821: ST_TO_ADDR
4822: LD_VAR 0 11
4826: PUSH
4827: FOR_TO
4828: IFFALSE 4948
// begin for j = 1 to array do
4830: LD_ADDR_VAR 0 7
4834: PUSH
4835: DOUBLE
4836: LD_INT 1
4838: DEC
4839: ST_TO_ADDR
4840: LD_VAR 0 1
4844: PUSH
4845: FOR_TO
4846: IFFALSE 4934
// begin k := j + d ;
4848: LD_ADDR_VAR 0 8
4852: PUSH
4853: LD_VAR 0 7
4857: PUSH
4858: LD_VAR 0 9
4862: PLUS
4863: ST_TO_ADDR
// if k > array then
4864: LD_VAR 0 8
4868: PUSH
4869: LD_VAR 0 1
4873: GREATER
4874: IFFALSE 4884
// k := 1 ;
4876: LD_ADDR_VAR 0 8
4880: PUSH
4881: LD_INT 1
4883: ST_TO_ADDR
// if not k then
4884: LD_VAR 0 8
4888: NOT
4889: IFFALSE 4901
// k := array ;
4891: LD_ADDR_VAR 0 8
4895: PUSH
4896: LD_VAR 0 1
4900: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4901: LD_ADDR_VAR 0 10
4905: PUSH
4906: LD_VAR 0 10
4910: PPUSH
4911: LD_VAR 0 8
4915: PPUSH
4916: LD_VAR 0 1
4920: PUSH
4921: LD_VAR 0 7
4925: ARRAY
4926: PPUSH
4927: CALL_OW 1
4931: ST_TO_ADDR
// end ;
4932: GO 4845
4934: POP
4935: POP
// array := tmp ;
4936: LD_ADDR_VAR 0 1
4940: PUSH
4941: LD_VAR 0 10
4945: ST_TO_ADDR
// end ;
4946: GO 4827
4948: POP
4949: POP
// result := array ;
4950: LD_ADDR_VAR 0 5
4954: PUSH
4955: LD_VAR 0 1
4959: ST_TO_ADDR
// end ;
4960: LD_VAR 0 5
4964: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
4965: LD_INT 0
4967: PPUSH
4968: PPUSH
// result := 0 ;
4969: LD_ADDR_VAR 0 3
4973: PUSH
4974: LD_INT 0
4976: ST_TO_ADDR
// if not array or not value in array then
4977: LD_VAR 0 1
4981: NOT
4982: PUSH
4983: LD_VAR 0 2
4987: PUSH
4988: LD_VAR 0 1
4992: IN
4993: NOT
4994: OR
4995: IFFALSE 4999
// exit ;
4997: GO 5053
// for i = 1 to array do
4999: LD_ADDR_VAR 0 4
5003: PUSH
5004: DOUBLE
5005: LD_INT 1
5007: DEC
5008: ST_TO_ADDR
5009: LD_VAR 0 1
5013: PUSH
5014: FOR_TO
5015: IFFALSE 5051
// if value = array [ i ] then
5017: LD_VAR 0 2
5021: PUSH
5022: LD_VAR 0 1
5026: PUSH
5027: LD_VAR 0 4
5031: ARRAY
5032: EQUAL
5033: IFFALSE 5049
// begin result := i ;
5035: LD_ADDR_VAR 0 3
5039: PUSH
5040: LD_VAR 0 4
5044: ST_TO_ADDR
// exit ;
5045: POP
5046: POP
5047: GO 5053
// end ;
5049: GO 5014
5051: POP
5052: POP
// end ;
5053: LD_VAR 0 3
5057: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5058: LD_INT 0
5060: PPUSH
// vc_chassis := chassis ;
5061: LD_ADDR_OWVAR 37
5065: PUSH
5066: LD_VAR 0 1
5070: ST_TO_ADDR
// vc_engine := engine ;
5071: LD_ADDR_OWVAR 39
5075: PUSH
5076: LD_VAR 0 2
5080: ST_TO_ADDR
// vc_control := control ;
5081: LD_ADDR_OWVAR 38
5085: PUSH
5086: LD_VAR 0 3
5090: ST_TO_ADDR
// vc_weapon := weapon ;
5091: LD_ADDR_OWVAR 40
5095: PUSH
5096: LD_VAR 0 4
5100: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5101: LD_ADDR_OWVAR 41
5105: PUSH
5106: LD_VAR 0 5
5110: ST_TO_ADDR
// end ;
5111: LD_VAR 0 6
5115: RET
// export function WantPlant ( unit ) ; var task ; begin
5116: LD_INT 0
5118: PPUSH
5119: PPUSH
// result := false ;
5120: LD_ADDR_VAR 0 2
5124: PUSH
5125: LD_INT 0
5127: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5128: LD_ADDR_VAR 0 3
5132: PUSH
5133: LD_VAR 0 1
5137: PPUSH
5138: CALL_OW 437
5142: ST_TO_ADDR
// if task then
5143: LD_VAR 0 3
5147: IFFALSE 5175
// if task [ 1 ] [ 1 ] = p then
5149: LD_VAR 0 3
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: PUSH
5162: LD_STRING p
5164: EQUAL
5165: IFFALSE 5175
// result := true ;
5167: LD_ADDR_VAR 0 2
5171: PUSH
5172: LD_INT 1
5174: ST_TO_ADDR
// end ;
5175: LD_VAR 0 2
5179: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5180: LD_INT 0
5182: PPUSH
5183: PPUSH
5184: PPUSH
5185: PPUSH
// if pos < 1 then
5186: LD_VAR 0 2
5190: PUSH
5191: LD_INT 1
5193: LESS
5194: IFFALSE 5198
// exit ;
5196: GO 5501
// if pos = 1 then
5198: LD_VAR 0 2
5202: PUSH
5203: LD_INT 1
5205: EQUAL
5206: IFFALSE 5239
// result := Replace ( arr , pos [ 1 ] , value ) else
5208: LD_ADDR_VAR 0 4
5212: PUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: LD_VAR 0 2
5222: PUSH
5223: LD_INT 1
5225: ARRAY
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL_OW 1
5236: ST_TO_ADDR
5237: GO 5501
// begin tmp := arr ;
5239: LD_ADDR_VAR 0 6
5243: PUSH
5244: LD_VAR 0 1
5248: ST_TO_ADDR
// s_arr := [ tmp ] ;
5249: LD_ADDR_VAR 0 7
5253: PUSH
5254: LD_VAR 0 6
5258: PUSH
5259: EMPTY
5260: LIST
5261: ST_TO_ADDR
// for i = 1 to pos - 1 do
5262: LD_ADDR_VAR 0 5
5266: PUSH
5267: DOUBLE
5268: LD_INT 1
5270: DEC
5271: ST_TO_ADDR
5272: LD_VAR 0 2
5276: PUSH
5277: LD_INT 1
5279: MINUS
5280: PUSH
5281: FOR_TO
5282: IFFALSE 5327
// begin tmp := tmp [ pos [ i ] ] ;
5284: LD_ADDR_VAR 0 6
5288: PUSH
5289: LD_VAR 0 6
5293: PUSH
5294: LD_VAR 0 2
5298: PUSH
5299: LD_VAR 0 5
5303: ARRAY
5304: ARRAY
5305: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5306: LD_ADDR_VAR 0 7
5310: PUSH
5311: LD_VAR 0 7
5315: PUSH
5316: LD_VAR 0 6
5320: PUSH
5321: EMPTY
5322: LIST
5323: ADD
5324: ST_TO_ADDR
// end ;
5325: GO 5281
5327: POP
5328: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5329: LD_ADDR_VAR 0 6
5333: PUSH
5334: LD_VAR 0 6
5338: PPUSH
5339: LD_VAR 0 2
5343: PUSH
5344: LD_VAR 0 2
5348: ARRAY
5349: PPUSH
5350: LD_VAR 0 3
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5360: LD_ADDR_VAR 0 7
5364: PUSH
5365: LD_VAR 0 7
5369: PPUSH
5370: LD_VAR 0 7
5374: PPUSH
5375: LD_VAR 0 6
5379: PPUSH
5380: CALL_OW 1
5384: ST_TO_ADDR
// for i = s_arr downto 2 do
5385: LD_ADDR_VAR 0 5
5389: PUSH
5390: DOUBLE
5391: LD_VAR 0 7
5395: INC
5396: ST_TO_ADDR
5397: LD_INT 2
5399: PUSH
5400: FOR_DOWNTO
5401: IFFALSE 5485
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5403: LD_ADDR_VAR 0 6
5407: PUSH
5408: LD_VAR 0 7
5412: PUSH
5413: LD_VAR 0 5
5417: PUSH
5418: LD_INT 1
5420: MINUS
5421: ARRAY
5422: PPUSH
5423: LD_VAR 0 2
5427: PUSH
5428: LD_VAR 0 5
5432: PUSH
5433: LD_INT 1
5435: MINUS
5436: ARRAY
5437: PPUSH
5438: LD_VAR 0 7
5442: PUSH
5443: LD_VAR 0 5
5447: ARRAY
5448: PPUSH
5449: CALL_OW 1
5453: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5454: LD_ADDR_VAR 0 7
5458: PUSH
5459: LD_VAR 0 7
5463: PPUSH
5464: LD_VAR 0 5
5468: PUSH
5469: LD_INT 1
5471: MINUS
5472: PPUSH
5473: LD_VAR 0 6
5477: PPUSH
5478: CALL_OW 1
5482: ST_TO_ADDR
// end ;
5483: GO 5400
5485: POP
5486: POP
// result := s_arr [ 1 ] ;
5487: LD_ADDR_VAR 0 4
5491: PUSH
5492: LD_VAR 0 7
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: ST_TO_ADDR
// end ; end ;
5501: LD_VAR 0 4
5505: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5506: LD_INT 0
5508: PPUSH
5509: PPUSH
// if not list then
5510: LD_VAR 0 1
5514: NOT
5515: IFFALSE 5519
// exit ;
5517: GO 5610
// i := list [ pos1 ] ;
5519: LD_ADDR_VAR 0 5
5523: PUSH
5524: LD_VAR 0 1
5528: PUSH
5529: LD_VAR 0 2
5533: ARRAY
5534: ST_TO_ADDR
// if not i then
5535: LD_VAR 0 5
5539: NOT
5540: IFFALSE 5544
// exit ;
5542: GO 5610
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5544: LD_ADDR_VAR 0 1
5548: PUSH
5549: LD_VAR 0 1
5553: PPUSH
5554: LD_VAR 0 2
5558: PPUSH
5559: LD_VAR 0 1
5563: PUSH
5564: LD_VAR 0 3
5568: ARRAY
5569: PPUSH
5570: CALL_OW 1
5574: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5575: LD_ADDR_VAR 0 1
5579: PUSH
5580: LD_VAR 0 1
5584: PPUSH
5585: LD_VAR 0 3
5589: PPUSH
5590: LD_VAR 0 5
5594: PPUSH
5595: CALL_OW 1
5599: ST_TO_ADDR
// result := list ;
5600: LD_ADDR_VAR 0 4
5604: PUSH
5605: LD_VAR 0 1
5609: ST_TO_ADDR
// end ;
5610: LD_VAR 0 4
5614: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5615: LD_INT 0
5617: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5618: LD_ADDR_VAR 0 5
5622: PUSH
5623: LD_VAR 0 1
5627: PPUSH
5628: CALL_OW 250
5632: PPUSH
5633: LD_VAR 0 1
5637: PPUSH
5638: CALL_OW 251
5642: PPUSH
5643: LD_VAR 0 2
5647: PPUSH
5648: LD_VAR 0 3
5652: PPUSH
5653: LD_VAR 0 4
5657: PPUSH
5658: CALL 5668 0 5
5662: ST_TO_ADDR
// end ;
5663: LD_VAR 0 5
5667: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5668: LD_INT 0
5670: PPUSH
5671: PPUSH
5672: PPUSH
5673: PPUSH
// if not list then
5674: LD_VAR 0 3
5678: NOT
5679: IFFALSE 5683
// exit ;
5681: GO 6071
// result := [ ] ;
5683: LD_ADDR_VAR 0 6
5687: PUSH
5688: EMPTY
5689: ST_TO_ADDR
// for i in list do
5690: LD_ADDR_VAR 0 7
5694: PUSH
5695: LD_VAR 0 3
5699: PUSH
5700: FOR_IN
5701: IFFALSE 5903
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5703: LD_ADDR_VAR 0 9
5707: PUSH
5708: LD_VAR 0 7
5712: PPUSH
5713: LD_VAR 0 1
5717: PPUSH
5718: LD_VAR 0 2
5722: PPUSH
5723: CALL_OW 297
5727: ST_TO_ADDR
// if not result then
5728: LD_VAR 0 6
5732: NOT
5733: IFFALSE 5759
// result := [ [ i , tmp ] ] else
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_VAR 0 7
5744: PUSH
5745: LD_VAR 0 9
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: ST_TO_ADDR
5757: GO 5901
// begin if result [ result ] [ 2 ] < tmp then
5759: LD_VAR 0 6
5763: PUSH
5764: LD_VAR 0 6
5768: ARRAY
5769: PUSH
5770: LD_INT 2
5772: ARRAY
5773: PUSH
5774: LD_VAR 0 9
5778: LESS
5779: IFFALSE 5821
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5781: LD_ADDR_VAR 0 6
5785: PUSH
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 6
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_VAR 0 7
5804: PUSH
5805: LD_VAR 0 9
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PPUSH
5814: CALL_OW 2
5818: ST_TO_ADDR
5819: GO 5901
// for j = 1 to result do
5821: LD_ADDR_VAR 0 8
5825: PUSH
5826: DOUBLE
5827: LD_INT 1
5829: DEC
5830: ST_TO_ADDR
5831: LD_VAR 0 6
5835: PUSH
5836: FOR_TO
5837: IFFALSE 5899
// begin if tmp < result [ j ] [ 2 ] then
5839: LD_VAR 0 9
5843: PUSH
5844: LD_VAR 0 6
5848: PUSH
5849: LD_VAR 0 8
5853: ARRAY
5854: PUSH
5855: LD_INT 2
5857: ARRAY
5858: LESS
5859: IFFALSE 5897
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5861: LD_ADDR_VAR 0 6
5865: PUSH
5866: LD_VAR 0 6
5870: PPUSH
5871: LD_VAR 0 8
5875: PPUSH
5876: LD_VAR 0 7
5880: PUSH
5881: LD_VAR 0 9
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PPUSH
5890: CALL_OW 2
5894: ST_TO_ADDR
// break ;
5895: GO 5899
// end ; end ;
5897: GO 5836
5899: POP
5900: POP
// end ; end ;
5901: GO 5700
5903: POP
5904: POP
// if result and not asc then
5905: LD_VAR 0 6
5909: PUSH
5910: LD_VAR 0 4
5914: NOT
5915: AND
5916: IFFALSE 5991
// begin tmp := result ;
5918: LD_ADDR_VAR 0 9
5922: PUSH
5923: LD_VAR 0 6
5927: ST_TO_ADDR
// for i = tmp downto 1 do
5928: LD_ADDR_VAR 0 7
5932: PUSH
5933: DOUBLE
5934: LD_VAR 0 9
5938: INC
5939: ST_TO_ADDR
5940: LD_INT 1
5942: PUSH
5943: FOR_DOWNTO
5944: IFFALSE 5989
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
5946: LD_ADDR_VAR 0 6
5950: PUSH
5951: LD_VAR 0 6
5955: PPUSH
5956: LD_VAR 0 9
5960: PUSH
5961: LD_VAR 0 7
5965: MINUS
5966: PUSH
5967: LD_INT 1
5969: PLUS
5970: PPUSH
5971: LD_VAR 0 9
5975: PUSH
5976: LD_VAR 0 7
5980: ARRAY
5981: PPUSH
5982: CALL_OW 1
5986: ST_TO_ADDR
5987: GO 5943
5989: POP
5990: POP
// end ; tmp := [ ] ;
5991: LD_ADDR_VAR 0 9
5995: PUSH
5996: EMPTY
5997: ST_TO_ADDR
// if mode then
5998: LD_VAR 0 5
6002: IFFALSE 6071
// begin for i = 1 to result do
6004: LD_ADDR_VAR 0 7
6008: PUSH
6009: DOUBLE
6010: LD_INT 1
6012: DEC
6013: ST_TO_ADDR
6014: LD_VAR 0 6
6018: PUSH
6019: FOR_TO
6020: IFFALSE 6059
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6022: LD_ADDR_VAR 0 9
6026: PUSH
6027: LD_VAR 0 9
6031: PPUSH
6032: LD_VAR 0 7
6036: PPUSH
6037: LD_VAR 0 6
6041: PUSH
6042: LD_VAR 0 7
6046: ARRAY
6047: PUSH
6048: LD_INT 1
6050: ARRAY
6051: PPUSH
6052: CALL_OW 1
6056: ST_TO_ADDR
6057: GO 6019
6059: POP
6060: POP
// result := tmp ;
6061: LD_ADDR_VAR 0 6
6065: PUSH
6066: LD_VAR 0 9
6070: ST_TO_ADDR
// end ; end ;
6071: LD_VAR 0 6
6075: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6076: LD_INT 0
6078: PPUSH
6079: PPUSH
6080: PPUSH
6081: PPUSH
6082: PPUSH
6083: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6084: LD_ADDR_VAR 0 5
6088: PUSH
6089: LD_INT 0
6091: PUSH
6092: LD_INT 0
6094: PUSH
6095: LD_INT 0
6097: PUSH
6098: EMPTY
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: ST_TO_ADDR
// if not x or not y then
6106: LD_VAR 0 2
6110: NOT
6111: PUSH
6112: LD_VAR 0 3
6116: NOT
6117: OR
6118: IFFALSE 6122
// exit ;
6120: GO 7768
// if not range then
6122: LD_VAR 0 4
6126: NOT
6127: IFFALSE 6137
// range := 10 ;
6129: LD_ADDR_VAR 0 4
6133: PUSH
6134: LD_INT 10
6136: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6137: LD_ADDR_VAR 0 8
6141: PUSH
6142: LD_INT 81
6144: PUSH
6145: LD_VAR 0 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: LD_INT 92
6156: PUSH
6157: LD_VAR 0 2
6161: PUSH
6162: LD_VAR 0 3
6166: PUSH
6167: LD_VAR 0 4
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 21
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: ST_TO_ADDR
// if not tmp then
6205: LD_VAR 0 8
6209: NOT
6210: IFFALSE 6214
// exit ;
6212: GO 7768
// for i in tmp do
6214: LD_ADDR_VAR 0 6
6218: PUSH
6219: LD_VAR 0 8
6223: PUSH
6224: FOR_IN
6225: IFFALSE 7743
// begin points := [ 0 , 0 , 0 ] ;
6227: LD_ADDR_VAR 0 9
6231: PUSH
6232: LD_INT 0
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: LD_INT 0
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: ST_TO_ADDR
// bpoints := 1 ;
6246: LD_ADDR_VAR 0 10
6250: PUSH
6251: LD_INT 1
6253: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6254: LD_VAR 0 6
6258: PPUSH
6259: CALL_OW 247
6263: PUSH
6264: LD_INT 1
6266: DOUBLE
6267: EQUAL
6268: IFTRUE 6272
6270: GO 6850
6272: POP
// begin if GetClass ( i ) = 1 then
6273: LD_VAR 0 6
6277: PPUSH
6278: CALL_OW 257
6282: PUSH
6283: LD_INT 1
6285: EQUAL
6286: IFFALSE 6307
// points := [ 10 , 5 , 3 ] ;
6288: LD_ADDR_VAR 0 9
6292: PUSH
6293: LD_INT 10
6295: PUSH
6296: LD_INT 5
6298: PUSH
6299: LD_INT 3
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6307: LD_VAR 0 6
6311: PPUSH
6312: CALL_OW 257
6316: PUSH
6317: LD_INT 2
6319: PUSH
6320: LD_INT 3
6322: PUSH
6323: LD_INT 4
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: IN
6331: IFFALSE 6352
// points := [ 3 , 2 , 1 ] ;
6333: LD_ADDR_VAR 0 9
6337: PUSH
6338: LD_INT 3
6340: PUSH
6341: LD_INT 2
6343: PUSH
6344: LD_INT 1
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6352: LD_VAR 0 6
6356: PPUSH
6357: CALL_OW 257
6361: PUSH
6362: LD_INT 5
6364: EQUAL
6365: IFFALSE 6386
// points := [ 130 , 5 , 2 ] ;
6367: LD_ADDR_VAR 0 9
6371: PUSH
6372: LD_INT 130
6374: PUSH
6375: LD_INT 5
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6386: LD_VAR 0 6
6390: PPUSH
6391: CALL_OW 257
6395: PUSH
6396: LD_INT 8
6398: EQUAL
6399: IFFALSE 6420
// points := [ 35 , 35 , 30 ] ;
6401: LD_ADDR_VAR 0 9
6405: PUSH
6406: LD_INT 35
6408: PUSH
6409: LD_INT 35
6411: PUSH
6412: LD_INT 30
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6420: LD_VAR 0 6
6424: PPUSH
6425: CALL_OW 257
6429: PUSH
6430: LD_INT 9
6432: EQUAL
6433: IFFALSE 6454
// points := [ 20 , 55 , 40 ] ;
6435: LD_ADDR_VAR 0 9
6439: PUSH
6440: LD_INT 20
6442: PUSH
6443: LD_INT 55
6445: PUSH
6446: LD_INT 40
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6454: LD_VAR 0 6
6458: PPUSH
6459: CALL_OW 257
6463: PUSH
6464: LD_INT 12
6466: PUSH
6467: LD_INT 16
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: IN
6474: IFFALSE 6495
// points := [ 5 , 3 , 2 ] ;
6476: LD_ADDR_VAR 0 9
6480: PUSH
6481: LD_INT 5
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: LD_INT 2
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6495: LD_VAR 0 6
6499: PPUSH
6500: CALL_OW 257
6504: PUSH
6505: LD_INT 17
6507: EQUAL
6508: IFFALSE 6529
// points := [ 100 , 50 , 75 ] ;
6510: LD_ADDR_VAR 0 9
6514: PUSH
6515: LD_INT 100
6517: PUSH
6518: LD_INT 50
6520: PUSH
6521: LD_INT 75
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6529: LD_VAR 0 6
6533: PPUSH
6534: CALL_OW 257
6538: PUSH
6539: LD_INT 15
6541: EQUAL
6542: IFFALSE 6563
// points := [ 10 , 5 , 3 ] ;
6544: LD_ADDR_VAR 0 9
6548: PUSH
6549: LD_INT 10
6551: PUSH
6552: LD_INT 5
6554: PUSH
6555: LD_INT 3
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6563: LD_VAR 0 6
6567: PPUSH
6568: CALL_OW 257
6572: PUSH
6573: LD_INT 14
6575: EQUAL
6576: IFFALSE 6597
// points := [ 10 , 0 , 0 ] ;
6578: LD_ADDR_VAR 0 9
6582: PUSH
6583: LD_INT 10
6585: PUSH
6586: LD_INT 0
6588: PUSH
6589: LD_INT 0
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: LIST
6596: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6597: LD_VAR 0 6
6601: PPUSH
6602: CALL_OW 257
6606: PUSH
6607: LD_INT 11
6609: EQUAL
6610: IFFALSE 6631
// points := [ 30 , 10 , 5 ] ;
6612: LD_ADDR_VAR 0 9
6616: PUSH
6617: LD_INT 30
6619: PUSH
6620: LD_INT 10
6622: PUSH
6623: LD_INT 5
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: LIST
6630: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6631: LD_VAR 0 1
6635: PPUSH
6636: LD_INT 5
6638: PPUSH
6639: CALL_OW 321
6643: PUSH
6644: LD_INT 2
6646: EQUAL
6647: IFFALSE 6664
// bpoints := bpoints * 1.8 ;
6649: LD_ADDR_VAR 0 10
6653: PUSH
6654: LD_VAR 0 10
6658: PUSH
6659: LD_REAL  1.80000000000000E+0000
6662: MUL
6663: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6664: LD_VAR 0 6
6668: PPUSH
6669: CALL_OW 257
6673: PUSH
6674: LD_INT 1
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 4
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: IN
6692: PUSH
6693: LD_VAR 0 1
6697: PPUSH
6698: LD_INT 51
6700: PPUSH
6701: CALL_OW 321
6705: PUSH
6706: LD_INT 2
6708: EQUAL
6709: AND
6710: IFFALSE 6727
// bpoints := bpoints * 1.2 ;
6712: LD_ADDR_VAR 0 10
6716: PUSH
6717: LD_VAR 0 10
6721: PUSH
6722: LD_REAL  1.20000000000000E+0000
6725: MUL
6726: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6727: LD_VAR 0 6
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 5
6739: PUSH
6740: LD_INT 7
6742: PUSH
6743: LD_INT 9
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: IN
6751: PUSH
6752: LD_VAR 0 1
6756: PPUSH
6757: LD_INT 52
6759: PPUSH
6760: CALL_OW 321
6764: PUSH
6765: LD_INT 2
6767: EQUAL
6768: AND
6769: IFFALSE 6786
// bpoints := bpoints * 1.5 ;
6771: LD_ADDR_VAR 0 10
6775: PUSH
6776: LD_VAR 0 10
6780: PUSH
6781: LD_REAL  1.50000000000000E+0000
6784: MUL
6785: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6786: LD_VAR 0 1
6790: PPUSH
6791: LD_INT 66
6793: PPUSH
6794: CALL_OW 321
6798: PUSH
6799: LD_INT 2
6801: EQUAL
6802: IFFALSE 6819
// bpoints := bpoints * 1.1 ;
6804: LD_ADDR_VAR 0 10
6808: PUSH
6809: LD_VAR 0 10
6813: PUSH
6814: LD_REAL  1.10000000000000E+0000
6817: MUL
6818: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6819: LD_ADDR_VAR 0 10
6823: PUSH
6824: LD_VAR 0 10
6828: PUSH
6829: LD_VAR 0 6
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: CALL_OW 259
6841: PUSH
6842: LD_REAL  1.15000000000000E+0000
6845: MUL
6846: MUL
6847: ST_TO_ADDR
// end ; unit_vehicle :
6848: GO 7672
6850: LD_INT 2
6852: DOUBLE
6853: EQUAL
6854: IFTRUE 6858
6856: GO 7660
6858: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6859: LD_VAR 0 6
6863: PPUSH
6864: CALL_OW 264
6868: PUSH
6869: LD_INT 2
6871: PUSH
6872: LD_INT 42
6874: PUSH
6875: LD_INT 24
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: LIST
6882: IN
6883: IFFALSE 6904
// points := [ 25 , 5 , 3 ] ;
6885: LD_ADDR_VAR 0 9
6889: PUSH
6890: LD_INT 25
6892: PUSH
6893: LD_INT 5
6895: PUSH
6896: LD_INT 3
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: LIST
6903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6904: LD_VAR 0 6
6908: PPUSH
6909: CALL_OW 264
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: LD_INT 43
6919: PUSH
6920: LD_INT 25
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: LIST
6927: IN
6928: IFFALSE 6949
// points := [ 40 , 15 , 5 ] ;
6930: LD_ADDR_VAR 0 9
6934: PUSH
6935: LD_INT 40
6937: PUSH
6938: LD_INT 15
6940: PUSH
6941: LD_INT 5
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
6949: LD_VAR 0 6
6953: PPUSH
6954: CALL_OW 264
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: LD_INT 23
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: IN
6969: IFFALSE 6990
// points := [ 7 , 25 , 8 ] ;
6971: LD_ADDR_VAR 0 9
6975: PUSH
6976: LD_INT 7
6978: PUSH
6979: LD_INT 25
6981: PUSH
6982: LD_INT 8
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: LIST
6989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
6990: LD_VAR 0 6
6994: PPUSH
6995: CALL_OW 264
6999: PUSH
7000: LD_INT 5
7002: PUSH
7003: LD_INT 27
7005: PUSH
7006: LD_INT 44
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: IN
7014: IFFALSE 7035
// points := [ 14 , 50 , 16 ] ;
7016: LD_ADDR_VAR 0 9
7020: PUSH
7021: LD_INT 14
7023: PUSH
7024: LD_INT 50
7026: PUSH
7027: LD_INT 16
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7035: LD_VAR 0 6
7039: PPUSH
7040: CALL_OW 264
7044: PUSH
7045: LD_INT 6
7047: PUSH
7048: LD_INT 46
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: IN
7055: IFFALSE 7076
// points := [ 32 , 120 , 70 ] ;
7057: LD_ADDR_VAR 0 9
7061: PUSH
7062: LD_INT 32
7064: PUSH
7065: LD_INT 120
7067: PUSH
7068: LD_INT 70
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
7076: LD_VAR 0 6
7080: PPUSH
7081: CALL_OW 264
7085: PUSH
7086: LD_INT 7
7088: PUSH
7089: LD_INT 28
7091: PUSH
7092: LD_INT 45
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: IN
7100: IFFALSE 7121
// points := [ 35 , 20 , 45 ] ;
7102: LD_ADDR_VAR 0 9
7106: PUSH
7107: LD_INT 35
7109: PUSH
7110: LD_INT 20
7112: PUSH
7113: LD_INT 45
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7121: LD_VAR 0 6
7125: PPUSH
7126: CALL_OW 264
7130: PUSH
7131: LD_INT 47
7133: PUSH
7134: EMPTY
7135: LIST
7136: IN
7137: IFFALSE 7158
// points := [ 67 , 45 , 75 ] ;
7139: LD_ADDR_VAR 0 9
7143: PUSH
7144: LD_INT 67
7146: PUSH
7147: LD_INT 45
7149: PUSH
7150: LD_INT 75
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7158: LD_VAR 0 6
7162: PPUSH
7163: CALL_OW 264
7167: PUSH
7168: LD_INT 26
7170: PUSH
7171: EMPTY
7172: LIST
7173: IN
7174: IFFALSE 7195
// points := [ 120 , 30 , 80 ] ;
7176: LD_ADDR_VAR 0 9
7180: PUSH
7181: LD_INT 120
7183: PUSH
7184: LD_INT 30
7186: PUSH
7187: LD_INT 80
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7195: LD_VAR 0 6
7199: PPUSH
7200: CALL_OW 264
7204: PUSH
7205: LD_INT 22
7207: PUSH
7208: EMPTY
7209: LIST
7210: IN
7211: IFFALSE 7232
// points := [ 40 , 1 , 1 ] ;
7213: LD_ADDR_VAR 0 9
7217: PUSH
7218: LD_INT 40
7220: PUSH
7221: LD_INT 1
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7232: LD_VAR 0 6
7236: PPUSH
7237: CALL_OW 264
7241: PUSH
7242: LD_INT 29
7244: PUSH
7245: EMPTY
7246: LIST
7247: IN
7248: IFFALSE 7269
// points := [ 70 , 200 , 400 ] ;
7250: LD_ADDR_VAR 0 9
7254: PUSH
7255: LD_INT 70
7257: PUSH
7258: LD_INT 200
7260: PUSH
7261: LD_INT 400
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7269: LD_VAR 0 6
7273: PPUSH
7274: CALL_OW 264
7278: PUSH
7279: LD_INT 14
7281: PUSH
7282: LD_INT 53
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: IN
7289: IFFALSE 7310
// points := [ 40 , 10 , 20 ] ;
7291: LD_ADDR_VAR 0 9
7295: PUSH
7296: LD_INT 40
7298: PUSH
7299: LD_INT 10
7301: PUSH
7302: LD_INT 20
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: LIST
7309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7310: LD_VAR 0 6
7314: PPUSH
7315: CALL_OW 264
7319: PUSH
7320: LD_INT 9
7322: PUSH
7323: EMPTY
7324: LIST
7325: IN
7326: IFFALSE 7347
// points := [ 5 , 70 , 20 ] ;
7328: LD_ADDR_VAR 0 9
7332: PUSH
7333: LD_INT 5
7335: PUSH
7336: LD_INT 70
7338: PUSH
7339: LD_INT 20
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7347: LD_VAR 0 6
7351: PPUSH
7352: CALL_OW 264
7356: PUSH
7357: LD_INT 10
7359: PUSH
7360: EMPTY
7361: LIST
7362: IN
7363: IFFALSE 7384
// points := [ 35 , 110 , 70 ] ;
7365: LD_ADDR_VAR 0 9
7369: PUSH
7370: LD_INT 35
7372: PUSH
7373: LD_INT 110
7375: PUSH
7376: LD_INT 70
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7384: LD_VAR 0 6
7388: PPUSH
7389: CALL_OW 265
7393: PUSH
7394: LD_INT 25
7396: EQUAL
7397: IFFALSE 7418
// points := [ 80 , 65 , 100 ] ;
7399: LD_ADDR_VAR 0 9
7403: PUSH
7404: LD_INT 80
7406: PUSH
7407: LD_INT 65
7409: PUSH
7410: LD_INT 100
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7418: LD_VAR 0 6
7422: PPUSH
7423: CALL_OW 263
7427: PUSH
7428: LD_INT 1
7430: EQUAL
7431: IFFALSE 7466
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7433: LD_ADDR_VAR 0 10
7437: PUSH
7438: LD_VAR 0 10
7442: PUSH
7443: LD_VAR 0 6
7447: PPUSH
7448: CALL_OW 311
7452: PPUSH
7453: LD_INT 3
7455: PPUSH
7456: CALL_OW 259
7460: PUSH
7461: LD_INT 4
7463: MUL
7464: MUL
7465: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7466: LD_VAR 0 6
7470: PPUSH
7471: CALL_OW 263
7475: PUSH
7476: LD_INT 2
7478: EQUAL
7479: IFFALSE 7530
// begin j := IsControledBy ( i ) ;
7481: LD_ADDR_VAR 0 7
7485: PUSH
7486: LD_VAR 0 6
7490: PPUSH
7491: CALL_OW 312
7495: ST_TO_ADDR
// if j then
7496: LD_VAR 0 7
7500: IFFALSE 7530
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7502: LD_ADDR_VAR 0 10
7506: PUSH
7507: LD_VAR 0 10
7511: PUSH
7512: LD_VAR 0 7
7516: PPUSH
7517: LD_INT 3
7519: PPUSH
7520: CALL_OW 259
7524: PUSH
7525: LD_INT 3
7527: MUL
7528: MUL
7529: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7530: LD_VAR 0 6
7534: PPUSH
7535: CALL_OW 264
7539: PUSH
7540: LD_INT 5
7542: PUSH
7543: LD_INT 6
7545: PUSH
7546: LD_INT 46
7548: PUSH
7549: LD_INT 44
7551: PUSH
7552: LD_INT 47
7554: PUSH
7555: LD_INT 45
7557: PUSH
7558: LD_INT 28
7560: PUSH
7561: LD_INT 7
7563: PUSH
7564: LD_INT 27
7566: PUSH
7567: LD_INT 29
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: IN
7582: PUSH
7583: LD_VAR 0 1
7587: PPUSH
7588: LD_INT 52
7590: PPUSH
7591: CALL_OW 321
7595: PUSH
7596: LD_INT 2
7598: EQUAL
7599: AND
7600: IFFALSE 7617
// bpoints := bpoints * 1.2 ;
7602: LD_ADDR_VAR 0 10
7606: PUSH
7607: LD_VAR 0 10
7611: PUSH
7612: LD_REAL  1.20000000000000E+0000
7615: MUL
7616: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7617: LD_VAR 0 6
7621: PPUSH
7622: CALL_OW 264
7626: PUSH
7627: LD_INT 6
7629: PUSH
7630: LD_INT 46
7632: PUSH
7633: LD_INT 47
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: LIST
7640: IN
7641: IFFALSE 7658
// bpoints := bpoints * 1.2 ;
7643: LD_ADDR_VAR 0 10
7647: PUSH
7648: LD_VAR 0 10
7652: PUSH
7653: LD_REAL  1.20000000000000E+0000
7656: MUL
7657: ST_TO_ADDR
// end ; unit_building :
7658: GO 7672
7660: LD_INT 3
7662: DOUBLE
7663: EQUAL
7664: IFTRUE 7668
7666: GO 7671
7668: POP
// ; end ;
7669: GO 7672
7671: POP
// for j = 1 to 3 do
7672: LD_ADDR_VAR 0 7
7676: PUSH
7677: DOUBLE
7678: LD_INT 1
7680: DEC
7681: ST_TO_ADDR
7682: LD_INT 3
7684: PUSH
7685: FOR_TO
7686: IFFALSE 7739
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7688: LD_ADDR_VAR 0 5
7692: PUSH
7693: LD_VAR 0 5
7697: PPUSH
7698: LD_VAR 0 7
7702: PPUSH
7703: LD_VAR 0 5
7707: PUSH
7708: LD_VAR 0 7
7712: ARRAY
7713: PUSH
7714: LD_VAR 0 9
7718: PUSH
7719: LD_VAR 0 7
7723: ARRAY
7724: PUSH
7725: LD_VAR 0 10
7729: MUL
7730: PLUS
7731: PPUSH
7732: CALL_OW 1
7736: ST_TO_ADDR
7737: GO 7685
7739: POP
7740: POP
// end ;
7741: GO 6224
7743: POP
7744: POP
// result := Replace ( result , 4 , tmp ) ;
7745: LD_ADDR_VAR 0 5
7749: PUSH
7750: LD_VAR 0 5
7754: PPUSH
7755: LD_INT 4
7757: PPUSH
7758: LD_VAR 0 8
7762: PPUSH
7763: CALL_OW 1
7767: ST_TO_ADDR
// end ;
7768: LD_VAR 0 5
7772: RET
// export function DangerAtRange ( unit , range ) ; begin
7773: LD_INT 0
7775: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7776: LD_ADDR_VAR 0 3
7780: PUSH
7781: LD_VAR 0 1
7785: PPUSH
7786: CALL_OW 255
7790: PPUSH
7791: LD_VAR 0 1
7795: PPUSH
7796: CALL_OW 250
7800: PPUSH
7801: LD_VAR 0 1
7805: PPUSH
7806: CALL_OW 251
7810: PPUSH
7811: LD_VAR 0 2
7815: PPUSH
7816: CALL 6076 0 4
7820: ST_TO_ADDR
// end ;
7821: LD_VAR 0 3
7825: RET
// export function DangerInArea ( side , area ) ; begin
7826: LD_INT 0
7828: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7829: LD_ADDR_VAR 0 3
7833: PUSH
7834: LD_VAR 0 2
7838: PPUSH
7839: LD_INT 81
7841: PUSH
7842: LD_VAR 0 1
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 70
7855: ST_TO_ADDR
// end ;
7856: LD_VAR 0 3
7860: RET
// export function IsExtension ( b ) ; begin
7861: LD_INT 0
7863: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7864: LD_ADDR_VAR 0 2
7868: PUSH
7869: LD_VAR 0 1
7873: PUSH
7874: LD_INT 23
7876: PUSH
7877: LD_INT 20
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 17
7885: PUSH
7886: LD_INT 24
7888: PUSH
7889: LD_INT 21
7891: PUSH
7892: LD_INT 19
7894: PUSH
7895: LD_INT 16
7897: PUSH
7898: LD_INT 25
7900: PUSH
7901: LD_INT 18
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: IN
7916: ST_TO_ADDR
// end ;
7917: LD_VAR 0 2
7921: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
7922: LD_INT 0
7924: PPUSH
7925: PPUSH
7926: PPUSH
// result := [ ] ;
7927: LD_ADDR_VAR 0 3
7931: PUSH
7932: EMPTY
7933: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
7934: LD_ADDR_VAR 0 4
7938: PUSH
7939: LD_VAR 0 2
7943: PPUSH
7944: LD_INT 21
7946: PUSH
7947: LD_INT 3
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PPUSH
7954: CALL_OW 70
7958: ST_TO_ADDR
// if not tmp then
7959: LD_VAR 0 4
7963: NOT
7964: IFFALSE 7968
// exit ;
7966: GO 8026
// for i in tmp do
7968: LD_ADDR_VAR 0 5
7972: PUSH
7973: LD_VAR 0 4
7977: PUSH
7978: FOR_IN
7979: IFFALSE 8014
// if GetBase ( i ) <> base then
7981: LD_VAR 0 5
7985: PPUSH
7986: CALL_OW 274
7990: PUSH
7991: LD_VAR 0 1
7995: NONEQUAL
7996: IFFALSE 8012
// ComLinkToBase ( base , i ) ;
7998: LD_VAR 0 1
8002: PPUSH
8003: LD_VAR 0 5
8007: PPUSH
8008: CALL_OW 169
8012: GO 7978
8014: POP
8015: POP
// result := tmp ;
8016: LD_ADDR_VAR 0 3
8020: PUSH
8021: LD_VAR 0 4
8025: ST_TO_ADDR
// end ;
8026: LD_VAR 0 3
8030: RET
// export function ComComplete ( unit , b ) ; var i ; begin
8031: LD_INT 0
8033: PPUSH
8034: PPUSH
// if BuildingStatus ( b ) = bs_build then
8035: LD_VAR 0 2
8039: PPUSH
8040: CALL_OW 461
8044: PUSH
8045: LD_INT 1
8047: EQUAL
8048: IFFALSE 8108
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8050: LD_VAR 0 1
8054: PPUSH
8055: LD_STRING h
8057: PUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 250
8067: PUSH
8068: LD_VAR 0 2
8072: PPUSH
8073: CALL_OW 251
8077: PUSH
8078: LD_VAR 0 2
8082: PUSH
8083: LD_INT 0
8085: PUSH
8086: LD_INT 0
8088: PUSH
8089: LD_INT 0
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: PPUSH
8104: CALL_OW 446
// end ;
8108: LD_VAR 0 3
8112: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8113: LD_INT 0
8115: PPUSH
8116: PPUSH
8117: PPUSH
8118: PPUSH
8119: PPUSH
8120: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
8121: LD_VAR 0 1
8125: NOT
8126: PUSH
8127: LD_VAR 0 1
8131: PPUSH
8132: CALL_OW 263
8136: PUSH
8137: LD_INT 2
8139: EQUAL
8140: NOT
8141: OR
8142: IFFALSE 8146
// exit ;
8144: GO 8462
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8146: LD_ADDR_VAR 0 6
8150: PUSH
8151: LD_INT 22
8153: PUSH
8154: LD_VAR 0 1
8158: PPUSH
8159: CALL_OW 255
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: LD_INT 30
8173: PUSH
8174: LD_INT 36
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 34
8183: PUSH
8184: LD_INT 31
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 69
8204: ST_TO_ADDR
// if not tmp then
8205: LD_VAR 0 6
8209: NOT
8210: IFFALSE 8214
// exit ;
8212: GO 8462
// result := [ ] ;
8214: LD_ADDR_VAR 0 2
8218: PUSH
8219: EMPTY
8220: ST_TO_ADDR
// for i in tmp do
8221: LD_ADDR_VAR 0 3
8225: PUSH
8226: LD_VAR 0 6
8230: PUSH
8231: FOR_IN
8232: IFFALSE 8303
// begin t := UnitsInside ( i ) ;
8234: LD_ADDR_VAR 0 4
8238: PUSH
8239: LD_VAR 0 3
8243: PPUSH
8244: CALL_OW 313
8248: ST_TO_ADDR
// if t then
8249: LD_VAR 0 4
8253: IFFALSE 8301
// for j in t do
8255: LD_ADDR_VAR 0 7
8259: PUSH
8260: LD_VAR 0 4
8264: PUSH
8265: FOR_IN
8266: IFFALSE 8299
// result := Insert ( result , result + 1 , j ) ;
8268: LD_ADDR_VAR 0 2
8272: PUSH
8273: LD_VAR 0 2
8277: PPUSH
8278: LD_VAR 0 2
8282: PUSH
8283: LD_INT 1
8285: PLUS
8286: PPUSH
8287: LD_VAR 0 7
8291: PPUSH
8292: CALL_OW 2
8296: ST_TO_ADDR
8297: GO 8265
8299: POP
8300: POP
// end ;
8301: GO 8231
8303: POP
8304: POP
// if not result then
8305: LD_VAR 0 2
8309: NOT
8310: IFFALSE 8314
// exit ;
8312: GO 8462
// mech := result [ 1 ] ;
8314: LD_ADDR_VAR 0 5
8318: PUSH
8319: LD_VAR 0 2
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: ST_TO_ADDR
// if result > 1 then
8328: LD_VAR 0 2
8332: PUSH
8333: LD_INT 1
8335: GREATER
8336: IFFALSE 8448
// for i = 2 to result do
8338: LD_ADDR_VAR 0 3
8342: PUSH
8343: DOUBLE
8344: LD_INT 2
8346: DEC
8347: ST_TO_ADDR
8348: LD_VAR 0 2
8352: PUSH
8353: FOR_TO
8354: IFFALSE 8446
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8356: LD_ADDR_VAR 0 4
8360: PUSH
8361: LD_VAR 0 2
8365: PUSH
8366: LD_VAR 0 3
8370: ARRAY
8371: PPUSH
8372: LD_INT 3
8374: PPUSH
8375: CALL_OW 259
8379: PUSH
8380: LD_VAR 0 2
8384: PUSH
8385: LD_VAR 0 3
8389: ARRAY
8390: PPUSH
8391: CALL_OW 432
8395: MINUS
8396: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8397: LD_VAR 0 4
8401: PUSH
8402: LD_VAR 0 5
8406: PPUSH
8407: LD_INT 3
8409: PPUSH
8410: CALL_OW 259
8414: PUSH
8415: LD_VAR 0 5
8419: PPUSH
8420: CALL_OW 432
8424: MINUS
8425: GREATEREQUAL
8426: IFFALSE 8444
// mech := result [ i ] ;
8428: LD_ADDR_VAR 0 5
8432: PUSH
8433: LD_VAR 0 2
8437: PUSH
8438: LD_VAR 0 3
8442: ARRAY
8443: ST_TO_ADDR
// end ;
8444: GO 8353
8446: POP
8447: POP
// ComLinkTo ( vehicle , mech ) ;
8448: LD_VAR 0 1
8452: PPUSH
8453: LD_VAR 0 5
8457: PPUSH
8458: CALL_OW 135
// end ;
8462: LD_VAR 0 2
8466: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8467: LD_INT 0
8469: PPUSH
8470: PPUSH
8471: PPUSH
8472: PPUSH
8473: PPUSH
8474: PPUSH
8475: PPUSH
8476: PPUSH
8477: PPUSH
8478: PPUSH
8479: PPUSH
8480: PPUSH
8481: PPUSH
// result := [ ] ;
8482: LD_ADDR_VAR 0 7
8486: PUSH
8487: EMPTY
8488: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8489: LD_VAR 0 1
8493: PPUSH
8494: CALL_OW 266
8498: PUSH
8499: LD_INT 0
8501: PUSH
8502: LD_INT 1
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: IN
8509: NOT
8510: IFFALSE 8514
// exit ;
8512: GO 10145
// if name then
8514: LD_VAR 0 3
8518: IFFALSE 8534
// SetBName ( base_dep , name ) ;
8520: LD_VAR 0 1
8524: PPUSH
8525: LD_VAR 0 3
8529: PPUSH
8530: CALL_OW 500
// base := GetBase ( base_dep ) ;
8534: LD_ADDR_VAR 0 15
8538: PUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 274
8548: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8549: LD_ADDR_VAR 0 16
8553: PUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: CALL_OW 255
8563: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8564: LD_ADDR_VAR 0 17
8568: PUSH
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 248
8578: ST_TO_ADDR
// if sources then
8579: LD_VAR 0 5
8583: IFFALSE 8630
// for i = 1 to 3 do
8585: LD_ADDR_VAR 0 8
8589: PUSH
8590: DOUBLE
8591: LD_INT 1
8593: DEC
8594: ST_TO_ADDR
8595: LD_INT 3
8597: PUSH
8598: FOR_TO
8599: IFFALSE 8628
// AddResourceType ( base , i , sources [ i ] ) ;
8601: LD_VAR 0 15
8605: PPUSH
8606: LD_VAR 0 8
8610: PPUSH
8611: LD_VAR 0 5
8615: PUSH
8616: LD_VAR 0 8
8620: ARRAY
8621: PPUSH
8622: CALL_OW 276
8626: GO 8598
8628: POP
8629: POP
// buildings := GetBaseBuildings ( base , area ) ;
8630: LD_ADDR_VAR 0 18
8634: PUSH
8635: LD_VAR 0 15
8639: PPUSH
8640: LD_VAR 0 2
8644: PPUSH
8645: CALL 7922 0 2
8649: ST_TO_ADDR
// InitHc ;
8650: CALL_OW 19
// InitUc ;
8654: CALL_OW 18
// uc_side := side ;
8658: LD_ADDR_OWVAR 20
8662: PUSH
8663: LD_VAR 0 16
8667: ST_TO_ADDR
// uc_nation := nation ;
8668: LD_ADDR_OWVAR 21
8672: PUSH
8673: LD_VAR 0 17
8677: ST_TO_ADDR
// if buildings then
8678: LD_VAR 0 18
8682: IFFALSE 10004
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8684: LD_ADDR_VAR 0 19
8688: PUSH
8689: LD_VAR 0 18
8693: PPUSH
8694: LD_INT 2
8696: PUSH
8697: LD_INT 30
8699: PUSH
8700: LD_INT 29
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 30
8709: PUSH
8710: LD_INT 30
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: LIST
8721: PPUSH
8722: CALL_OW 72
8726: ST_TO_ADDR
// if tmp then
8727: LD_VAR 0 19
8731: IFFALSE 8779
// for i in tmp do
8733: LD_ADDR_VAR 0 8
8737: PUSH
8738: LD_VAR 0 19
8742: PUSH
8743: FOR_IN
8744: IFFALSE 8777
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8746: LD_VAR 0 8
8750: PPUSH
8751: CALL_OW 250
8755: PPUSH
8756: LD_VAR 0 8
8760: PPUSH
8761: CALL_OW 251
8765: PPUSH
8766: LD_VAR 0 16
8770: PPUSH
8771: CALL_OW 441
8775: GO 8743
8777: POP
8778: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8779: LD_VAR 0 18
8783: PPUSH
8784: LD_INT 2
8786: PUSH
8787: LD_INT 30
8789: PUSH
8790: LD_INT 32
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: LD_INT 30
8799: PUSH
8800: LD_INT 33
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: LIST
8811: PPUSH
8812: CALL_OW 72
8816: IFFALSE 8904
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8818: LD_ADDR_VAR 0 8
8822: PUSH
8823: LD_VAR 0 18
8827: PPUSH
8828: LD_INT 2
8830: PUSH
8831: LD_INT 30
8833: PUSH
8834: LD_INT 32
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 30
8843: PUSH
8844: LD_INT 33
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: LIST
8855: PPUSH
8856: CALL_OW 72
8860: PUSH
8861: FOR_IN
8862: IFFALSE 8902
// begin if not GetBWeapon ( i ) then
8864: LD_VAR 0 8
8868: PPUSH
8869: CALL_OW 269
8873: NOT
8874: IFFALSE 8900
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
8876: LD_VAR 0 8
8880: PPUSH
8881: LD_VAR 0 8
8885: PPUSH
8886: LD_VAR 0 2
8890: PPUSH
8891: CALL 10150 0 2
8895: PPUSH
8896: CALL_OW 431
// end ;
8900: GO 8861
8902: POP
8903: POP
// end ; for i = 1 to personel do
8904: LD_ADDR_VAR 0 8
8908: PUSH
8909: DOUBLE
8910: LD_INT 1
8912: DEC
8913: ST_TO_ADDR
8914: LD_VAR 0 6
8918: PUSH
8919: FOR_TO
8920: IFFALSE 9984
// begin if i > 4 then
8922: LD_VAR 0 8
8926: PUSH
8927: LD_INT 4
8929: GREATER
8930: IFFALSE 8934
// break ;
8932: GO 9984
// case i of 1 :
8934: LD_VAR 0 8
8938: PUSH
8939: LD_INT 1
8941: DOUBLE
8942: EQUAL
8943: IFTRUE 8947
8945: GO 9027
8947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
8948: LD_ADDR_VAR 0 12
8952: PUSH
8953: LD_VAR 0 18
8957: PPUSH
8958: LD_INT 22
8960: PUSH
8961: LD_VAR 0 16
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 58
8972: PUSH
8973: EMPTY
8974: LIST
8975: PUSH
8976: LD_INT 2
8978: PUSH
8979: LD_INT 30
8981: PUSH
8982: LD_INT 32
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: LD_INT 30
8991: PUSH
8992: LD_INT 4
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PUSH
8999: LD_INT 30
9001: PUSH
9002: LD_INT 5
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: LIST
9019: PPUSH
9020: CALL_OW 72
9024: ST_TO_ADDR
9025: GO 9249
9027: LD_INT 2
9029: DOUBLE
9030: EQUAL
9031: IFTRUE 9035
9033: GO 9097
9035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9036: LD_ADDR_VAR 0 12
9040: PUSH
9041: LD_VAR 0 18
9045: PPUSH
9046: LD_INT 22
9048: PUSH
9049: LD_VAR 0 16
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PUSH
9058: LD_INT 2
9060: PUSH
9061: LD_INT 30
9063: PUSH
9064: LD_INT 0
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: LD_INT 30
9073: PUSH
9074: LD_INT 1
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PPUSH
9090: CALL_OW 72
9094: ST_TO_ADDR
9095: GO 9249
9097: LD_INT 3
9099: DOUBLE
9100: EQUAL
9101: IFTRUE 9105
9103: GO 9167
9105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9106: LD_ADDR_VAR 0 12
9110: PUSH
9111: LD_VAR 0 18
9115: PPUSH
9116: LD_INT 22
9118: PUSH
9119: LD_VAR 0 16
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 2
9130: PUSH
9131: LD_INT 30
9133: PUSH
9134: LD_INT 2
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PUSH
9141: LD_INT 30
9143: PUSH
9144: LD_INT 3
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PPUSH
9160: CALL_OW 72
9164: ST_TO_ADDR
9165: GO 9249
9167: LD_INT 4
9169: DOUBLE
9170: EQUAL
9171: IFTRUE 9175
9173: GO 9248
9175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9176: LD_ADDR_VAR 0 12
9180: PUSH
9181: LD_VAR 0 18
9185: PPUSH
9186: LD_INT 22
9188: PUSH
9189: LD_VAR 0 16
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: LD_INT 30
9203: PUSH
9204: LD_INT 6
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 30
9213: PUSH
9214: LD_INT 7
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 30
9223: PUSH
9224: LD_INT 8
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PPUSH
9241: CALL_OW 72
9245: ST_TO_ADDR
9246: GO 9249
9248: POP
// if i = 1 then
9249: LD_VAR 0 8
9253: PUSH
9254: LD_INT 1
9256: EQUAL
9257: IFFALSE 9368
// begin tmp := [ ] ;
9259: LD_ADDR_VAR 0 19
9263: PUSH
9264: EMPTY
9265: ST_TO_ADDR
// for j in f do
9266: LD_ADDR_VAR 0 9
9270: PUSH
9271: LD_VAR 0 12
9275: PUSH
9276: FOR_IN
9277: IFFALSE 9350
// if GetBType ( j ) = b_bunker then
9279: LD_VAR 0 9
9283: PPUSH
9284: CALL_OW 266
9288: PUSH
9289: LD_INT 32
9291: EQUAL
9292: IFFALSE 9319
// tmp := Insert ( tmp , 1 , j ) else
9294: LD_ADDR_VAR 0 19
9298: PUSH
9299: LD_VAR 0 19
9303: PPUSH
9304: LD_INT 1
9306: PPUSH
9307: LD_VAR 0 9
9311: PPUSH
9312: CALL_OW 2
9316: ST_TO_ADDR
9317: GO 9348
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9319: LD_ADDR_VAR 0 19
9323: PUSH
9324: LD_VAR 0 19
9328: PPUSH
9329: LD_VAR 0 19
9333: PUSH
9334: LD_INT 1
9336: PLUS
9337: PPUSH
9338: LD_VAR 0 9
9342: PPUSH
9343: CALL_OW 2
9347: ST_TO_ADDR
9348: GO 9276
9350: POP
9351: POP
// if tmp then
9352: LD_VAR 0 19
9356: IFFALSE 9368
// f := tmp ;
9358: LD_ADDR_VAR 0 12
9362: PUSH
9363: LD_VAR 0 19
9367: ST_TO_ADDR
// end ; x := personel [ i ] ;
9368: LD_ADDR_VAR 0 13
9372: PUSH
9373: LD_VAR 0 6
9377: PUSH
9378: LD_VAR 0 8
9382: ARRAY
9383: ST_TO_ADDR
// if x = - 1 then
9384: LD_VAR 0 13
9388: PUSH
9389: LD_INT 1
9391: NEG
9392: EQUAL
9393: IFFALSE 9602
// begin for j in f do
9395: LD_ADDR_VAR 0 9
9399: PUSH
9400: LD_VAR 0 12
9404: PUSH
9405: FOR_IN
9406: IFFALSE 9598
// repeat InitHc ;
9408: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9412: LD_VAR 0 9
9416: PPUSH
9417: CALL_OW 266
9421: PUSH
9422: LD_INT 5
9424: EQUAL
9425: IFFALSE 9495
// begin if UnitsInside ( j ) < 3 then
9427: LD_VAR 0 9
9431: PPUSH
9432: CALL_OW 313
9436: PUSH
9437: LD_INT 3
9439: LESS
9440: IFFALSE 9476
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9442: LD_INT 0
9444: PPUSH
9445: LD_INT 5
9447: PUSH
9448: LD_INT 8
9450: PUSH
9451: LD_INT 9
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: LIST
9458: PUSH
9459: LD_VAR 0 17
9463: ARRAY
9464: PPUSH
9465: LD_VAR 0 4
9469: PPUSH
9470: CALL_OW 380
9474: GO 9493
// PrepareHuman ( false , i , skill ) ;
9476: LD_INT 0
9478: PPUSH
9479: LD_VAR 0 8
9483: PPUSH
9484: LD_VAR 0 4
9488: PPUSH
9489: CALL_OW 380
// end else
9493: GO 9512
// PrepareHuman ( false , i , skill ) ;
9495: LD_INT 0
9497: PPUSH
9498: LD_VAR 0 8
9502: PPUSH
9503: LD_VAR 0 4
9507: PPUSH
9508: CALL_OW 380
// un := CreateHuman ;
9512: LD_ADDR_VAR 0 14
9516: PUSH
9517: CALL_OW 44
9521: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9522: LD_ADDR_VAR 0 7
9526: PUSH
9527: LD_VAR 0 7
9531: PPUSH
9532: LD_INT 1
9534: PPUSH
9535: LD_VAR 0 14
9539: PPUSH
9540: CALL_OW 2
9544: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9545: LD_VAR 0 14
9549: PPUSH
9550: LD_VAR 0 9
9554: PPUSH
9555: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9559: LD_VAR 0 9
9563: PPUSH
9564: CALL_OW 313
9568: PUSH
9569: LD_INT 6
9571: EQUAL
9572: PUSH
9573: LD_VAR 0 9
9577: PPUSH
9578: CALL_OW 266
9582: PUSH
9583: LD_INT 32
9585: PUSH
9586: LD_INT 31
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: IN
9593: OR
9594: IFFALSE 9408
9596: GO 9405
9598: POP
9599: POP
// end else
9600: GO 9982
// for j = 1 to x do
9602: LD_ADDR_VAR 0 9
9606: PUSH
9607: DOUBLE
9608: LD_INT 1
9610: DEC
9611: ST_TO_ADDR
9612: LD_VAR 0 13
9616: PUSH
9617: FOR_TO
9618: IFFALSE 9980
// begin InitHc ;
9620: CALL_OW 19
// if not f then
9624: LD_VAR 0 12
9628: NOT
9629: IFFALSE 9718
// begin PrepareHuman ( false , i , skill ) ;
9631: LD_INT 0
9633: PPUSH
9634: LD_VAR 0 8
9638: PPUSH
9639: LD_VAR 0 4
9643: PPUSH
9644: CALL_OW 380
// un := CreateHuman ;
9648: LD_ADDR_VAR 0 14
9652: PUSH
9653: CALL_OW 44
9657: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9658: LD_ADDR_VAR 0 7
9662: PUSH
9663: LD_VAR 0 7
9667: PPUSH
9668: LD_INT 1
9670: PPUSH
9671: LD_VAR 0 14
9675: PPUSH
9676: CALL_OW 2
9680: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9681: LD_VAR 0 14
9685: PPUSH
9686: LD_VAR 0 1
9690: PPUSH
9691: CALL_OW 250
9695: PPUSH
9696: LD_VAR 0 1
9700: PPUSH
9701: CALL_OW 251
9705: PPUSH
9706: LD_INT 10
9708: PPUSH
9709: LD_INT 0
9711: PPUSH
9712: CALL_OW 50
// continue ;
9716: GO 9617
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9718: LD_VAR 0 12
9722: PUSH
9723: LD_INT 1
9725: ARRAY
9726: PPUSH
9727: CALL_OW 313
9731: PUSH
9732: LD_VAR 0 12
9736: PUSH
9737: LD_INT 1
9739: ARRAY
9740: PPUSH
9741: CALL_OW 266
9745: PUSH
9746: LD_INT 32
9748: PUSH
9749: LD_INT 31
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: IN
9756: AND
9757: PUSH
9758: LD_VAR 0 12
9762: PUSH
9763: LD_INT 1
9765: ARRAY
9766: PPUSH
9767: CALL_OW 313
9771: PUSH
9772: LD_INT 6
9774: EQUAL
9775: OR
9776: IFFALSE 9796
// f := Delete ( f , 1 ) ;
9778: LD_ADDR_VAR 0 12
9782: PUSH
9783: LD_VAR 0 12
9787: PPUSH
9788: LD_INT 1
9790: PPUSH
9791: CALL_OW 3
9795: ST_TO_ADDR
// if not f then
9796: LD_VAR 0 12
9800: NOT
9801: IFFALSE 9819
// begin x := x + 2 ;
9803: LD_ADDR_VAR 0 13
9807: PUSH
9808: LD_VAR 0 13
9812: PUSH
9813: LD_INT 2
9815: PLUS
9816: ST_TO_ADDR
// continue ;
9817: GO 9617
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9819: LD_VAR 0 12
9823: PUSH
9824: LD_INT 1
9826: ARRAY
9827: PPUSH
9828: CALL_OW 266
9832: PUSH
9833: LD_INT 5
9835: EQUAL
9836: IFFALSE 9910
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9838: LD_VAR 0 12
9842: PUSH
9843: LD_INT 1
9845: ARRAY
9846: PPUSH
9847: CALL_OW 313
9851: PUSH
9852: LD_INT 3
9854: LESS
9855: IFFALSE 9891
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9857: LD_INT 0
9859: PPUSH
9860: LD_INT 5
9862: PUSH
9863: LD_INT 8
9865: PUSH
9866: LD_INT 9
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: PUSH
9874: LD_VAR 0 17
9878: ARRAY
9879: PPUSH
9880: LD_VAR 0 4
9884: PPUSH
9885: CALL_OW 380
9889: GO 9908
// PrepareHuman ( false , i , skill ) ;
9891: LD_INT 0
9893: PPUSH
9894: LD_VAR 0 8
9898: PPUSH
9899: LD_VAR 0 4
9903: PPUSH
9904: CALL_OW 380
// end else
9908: GO 9927
// PrepareHuman ( false , i , skill ) ;
9910: LD_INT 0
9912: PPUSH
9913: LD_VAR 0 8
9917: PPUSH
9918: LD_VAR 0 4
9922: PPUSH
9923: CALL_OW 380
// un := CreateHuman ;
9927: LD_ADDR_VAR 0 14
9931: PUSH
9932: CALL_OW 44
9936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9937: LD_ADDR_VAR 0 7
9941: PUSH
9942: LD_VAR 0 7
9946: PPUSH
9947: LD_INT 1
9949: PPUSH
9950: LD_VAR 0 14
9954: PPUSH
9955: CALL_OW 2
9959: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
9960: LD_VAR 0 14
9964: PPUSH
9965: LD_VAR 0 12
9969: PUSH
9970: LD_INT 1
9972: ARRAY
9973: PPUSH
9974: CALL_OW 52
// end ;
9978: GO 9617
9980: POP
9981: POP
// end ;
9982: GO 8919
9984: POP
9985: POP
// result := result ^ buildings ;
9986: LD_ADDR_VAR 0 7
9990: PUSH
9991: LD_VAR 0 7
9995: PUSH
9996: LD_VAR 0 18
10000: ADD
10001: ST_TO_ADDR
// end else
10002: GO 10145
// begin for i = 1 to personel do
10004: LD_ADDR_VAR 0 8
10008: PUSH
10009: DOUBLE
10010: LD_INT 1
10012: DEC
10013: ST_TO_ADDR
10014: LD_VAR 0 6
10018: PUSH
10019: FOR_TO
10020: IFFALSE 10143
// begin if i > 4 then
10022: LD_VAR 0 8
10026: PUSH
10027: LD_INT 4
10029: GREATER
10030: IFFALSE 10034
// break ;
10032: GO 10143
// x := personel [ i ] ;
10034: LD_ADDR_VAR 0 13
10038: PUSH
10039: LD_VAR 0 6
10043: PUSH
10044: LD_VAR 0 8
10048: ARRAY
10049: ST_TO_ADDR
// if x = - 1 then
10050: LD_VAR 0 13
10054: PUSH
10055: LD_INT 1
10057: NEG
10058: EQUAL
10059: IFFALSE 10063
// continue ;
10061: GO 10019
// PrepareHuman ( false , i , skill ) ;
10063: LD_INT 0
10065: PPUSH
10066: LD_VAR 0 8
10070: PPUSH
10071: LD_VAR 0 4
10075: PPUSH
10076: CALL_OW 380
// un := CreateHuman ;
10080: LD_ADDR_VAR 0 14
10084: PUSH
10085: CALL_OW 44
10089: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10090: LD_VAR 0 14
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 250
10104: PPUSH
10105: LD_VAR 0 1
10109: PPUSH
10110: CALL_OW 251
10114: PPUSH
10115: LD_INT 10
10117: PPUSH
10118: LD_INT 0
10120: PPUSH
10121: CALL_OW 50
// result := result ^ un ;
10125: LD_ADDR_VAR 0 7
10129: PUSH
10130: LD_VAR 0 7
10134: PUSH
10135: LD_VAR 0 14
10139: ADD
10140: ST_TO_ADDR
// end ;
10141: GO 10019
10143: POP
10144: POP
// end ; end ;
10145: LD_VAR 0 7
10149: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10150: LD_INT 0
10152: PPUSH
10153: PPUSH
10154: PPUSH
10155: PPUSH
10156: PPUSH
10157: PPUSH
10158: PPUSH
10159: PPUSH
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
10164: PPUSH
10165: PPUSH
10166: PPUSH
10167: PPUSH
// result := false ;
10168: LD_ADDR_VAR 0 3
10172: PUSH
10173: LD_INT 0
10175: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10176: LD_VAR 0 1
10180: NOT
10181: PUSH
10182: LD_VAR 0 1
10186: PPUSH
10187: CALL_OW 266
10191: PUSH
10192: LD_INT 32
10194: PUSH
10195: LD_INT 33
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: IN
10202: NOT
10203: OR
10204: IFFALSE 10208
// exit ;
10206: GO 11344
// nat := GetNation ( tower ) ;
10208: LD_ADDR_VAR 0 12
10212: PUSH
10213: LD_VAR 0 1
10217: PPUSH
10218: CALL_OW 248
10222: ST_TO_ADDR
// side := GetSide ( tower ) ;
10223: LD_ADDR_VAR 0 16
10227: PUSH
10228: LD_VAR 0 1
10232: PPUSH
10233: CALL_OW 255
10237: ST_TO_ADDR
// x := GetX ( tower ) ;
10238: LD_ADDR_VAR 0 10
10242: PUSH
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 250
10252: ST_TO_ADDR
// y := GetY ( tower ) ;
10253: LD_ADDR_VAR 0 11
10257: PUSH
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL_OW 251
10267: ST_TO_ADDR
// if not x or not y then
10268: LD_VAR 0 10
10272: NOT
10273: PUSH
10274: LD_VAR 0 11
10278: NOT
10279: OR
10280: IFFALSE 10284
// exit ;
10282: GO 11344
// weapon := 0 ;
10284: LD_ADDR_VAR 0 18
10288: PUSH
10289: LD_INT 0
10291: ST_TO_ADDR
// fac_list := [ ] ;
10292: LD_ADDR_VAR 0 17
10296: PUSH
10297: EMPTY
10298: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
10299: LD_ADDR_VAR 0 6
10303: PUSH
10304: LD_VAR 0 1
10308: PPUSH
10309: CALL_OW 274
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL 7922 0 2
10323: PPUSH
10324: LD_INT 30
10326: PUSH
10327: LD_INT 3
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PPUSH
10334: CALL_OW 72
10338: ST_TO_ADDR
// if not factories then
10339: LD_VAR 0 6
10343: NOT
10344: IFFALSE 10348
// exit ;
10346: GO 11344
// for i in factories do
10348: LD_ADDR_VAR 0 8
10352: PUSH
10353: LD_VAR 0 6
10357: PUSH
10358: FOR_IN
10359: IFFALSE 10384
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10361: LD_ADDR_VAR 0 17
10365: PUSH
10366: LD_VAR 0 17
10370: PUSH
10371: LD_VAR 0 8
10375: PPUSH
10376: CALL_OW 478
10380: UNION
10381: ST_TO_ADDR
10382: GO 10358
10384: POP
10385: POP
// if not fac_list then
10386: LD_VAR 0 17
10390: NOT
10391: IFFALSE 10395
// exit ;
10393: GO 11344
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10395: LD_ADDR_VAR 0 5
10399: PUSH
10400: LD_INT 4
10402: PUSH
10403: LD_INT 5
10405: PUSH
10406: LD_INT 9
10408: PUSH
10409: LD_INT 10
10411: PUSH
10412: LD_INT 6
10414: PUSH
10415: LD_INT 7
10417: PUSH
10418: LD_INT 11
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 27
10432: PUSH
10433: LD_INT 28
10435: PUSH
10436: LD_INT 26
10438: PUSH
10439: LD_INT 30
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 43
10450: PUSH
10451: LD_INT 44
10453: PUSH
10454: LD_INT 46
10456: PUSH
10457: LD_INT 45
10459: PUSH
10460: LD_INT 47
10462: PUSH
10463: LD_INT 49
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: PUSH
10479: LD_VAR 0 12
10483: ARRAY
10484: ST_TO_ADDR
// for i in list do
10485: LD_ADDR_VAR 0 8
10489: PUSH
10490: LD_VAR 0 5
10494: PUSH
10495: FOR_IN
10496: IFFALSE 10529
// if not i in fac_list then
10498: LD_VAR 0 8
10502: PUSH
10503: LD_VAR 0 17
10507: IN
10508: NOT
10509: IFFALSE 10527
// list := list diff i ;
10511: LD_ADDR_VAR 0 5
10515: PUSH
10516: LD_VAR 0 5
10520: PUSH
10521: LD_VAR 0 8
10525: DIFF
10526: ST_TO_ADDR
10527: GO 10495
10529: POP
10530: POP
// if not list then
10531: LD_VAR 0 5
10535: NOT
10536: IFFALSE 10540
// exit ;
10538: GO 11344
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10540: LD_VAR 0 12
10544: PUSH
10545: LD_INT 3
10547: EQUAL
10548: PUSH
10549: LD_INT 49
10551: PUSH
10552: LD_VAR 0 5
10556: IN
10557: AND
10558: PUSH
10559: LD_INT 31
10561: PPUSH
10562: LD_VAR 0 16
10566: PPUSH
10567: CALL_OW 321
10571: PUSH
10572: LD_INT 2
10574: EQUAL
10575: AND
10576: IFFALSE 10636
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10578: LD_INT 22
10580: PUSH
10581: LD_VAR 0 16
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 35
10592: PUSH
10593: LD_INT 49
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 91
10602: PUSH
10603: LD_VAR 0 1
10607: PUSH
10608: LD_INT 10
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: PPUSH
10621: CALL_OW 69
10625: NOT
10626: IFFALSE 10636
// weapon := ru_time_lapser ;
10628: LD_ADDR_VAR 0 18
10632: PUSH
10633: LD_INT 49
10635: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10636: LD_VAR 0 12
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: IN
10651: PUSH
10652: LD_INT 11
10654: PUSH
10655: LD_VAR 0 5
10659: IN
10660: PUSH
10661: LD_INT 30
10663: PUSH
10664: LD_VAR 0 5
10668: IN
10669: OR
10670: AND
10671: PUSH
10672: LD_INT 6
10674: PPUSH
10675: LD_VAR 0 16
10679: PPUSH
10680: CALL_OW 321
10684: PUSH
10685: LD_INT 2
10687: EQUAL
10688: AND
10689: IFFALSE 10854
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10691: LD_INT 22
10693: PUSH
10694: LD_VAR 0 16
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: LD_INT 35
10708: PUSH
10709: LD_INT 11
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 35
10718: PUSH
10719: LD_INT 30
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 91
10733: PUSH
10734: LD_VAR 0 1
10738: PUSH
10739: LD_INT 18
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: PPUSH
10752: CALL_OW 69
10756: NOT
10757: PUSH
10758: LD_INT 22
10760: PUSH
10761: LD_VAR 0 16
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: LD_INT 2
10772: PUSH
10773: LD_INT 30
10775: PUSH
10776: LD_INT 32
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 30
10785: PUSH
10786: LD_INT 33
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: LIST
10797: PUSH
10798: LD_INT 91
10800: PUSH
10801: LD_VAR 0 1
10805: PUSH
10806: LD_INT 12
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: PPUSH
10822: CALL_OW 69
10826: PUSH
10827: LD_INT 2
10829: GREATER
10830: AND
10831: IFFALSE 10854
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10833: LD_ADDR_VAR 0 18
10837: PUSH
10838: LD_INT 11
10840: PUSH
10841: LD_INT 30
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_VAR 0 12
10852: ARRAY
10853: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10854: LD_VAR 0 18
10858: NOT
10859: PUSH
10860: LD_INT 40
10862: PPUSH
10863: LD_VAR 0 16
10867: PPUSH
10868: CALL_OW 321
10872: PUSH
10873: LD_INT 2
10875: EQUAL
10876: AND
10877: PUSH
10878: LD_INT 7
10880: PUSH
10881: LD_VAR 0 5
10885: IN
10886: PUSH
10887: LD_INT 28
10889: PUSH
10890: LD_VAR 0 5
10894: IN
10895: OR
10896: PUSH
10897: LD_INT 45
10899: PUSH
10900: LD_VAR 0 5
10904: IN
10905: OR
10906: AND
10907: IFFALSE 11161
// begin hex := GetHexInfo ( x , y ) ;
10909: LD_ADDR_VAR 0 4
10913: PUSH
10914: LD_VAR 0 10
10918: PPUSH
10919: LD_VAR 0 11
10923: PPUSH
10924: CALL_OW 546
10928: ST_TO_ADDR
// if hex [ 1 ] then
10929: LD_VAR 0 4
10933: PUSH
10934: LD_INT 1
10936: ARRAY
10937: IFFALSE 10941
// exit ;
10939: GO 11344
// height := hex [ 2 ] ;
10941: LD_ADDR_VAR 0 15
10945: PUSH
10946: LD_VAR 0 4
10950: PUSH
10951: LD_INT 2
10953: ARRAY
10954: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
10955: LD_ADDR_VAR 0 14
10959: PUSH
10960: LD_INT 0
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: LD_INT 3
10968: PUSH
10969: LD_INT 5
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: ST_TO_ADDR
// for i in tmp do
10978: LD_ADDR_VAR 0 8
10982: PUSH
10983: LD_VAR 0 14
10987: PUSH
10988: FOR_IN
10989: IFFALSE 11159
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
10991: LD_ADDR_VAR 0 9
10995: PUSH
10996: LD_VAR 0 10
11000: PPUSH
11001: LD_VAR 0 8
11005: PPUSH
11006: LD_INT 5
11008: PPUSH
11009: CALL_OW 272
11013: PUSH
11014: LD_VAR 0 11
11018: PPUSH
11019: LD_VAR 0 8
11023: PPUSH
11024: LD_INT 5
11026: PPUSH
11027: CALL_OW 273
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11036: LD_VAR 0 9
11040: PUSH
11041: LD_INT 1
11043: ARRAY
11044: PPUSH
11045: LD_VAR 0 9
11049: PUSH
11050: LD_INT 2
11052: ARRAY
11053: PPUSH
11054: CALL_OW 488
11058: IFFALSE 11157
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11060: LD_ADDR_VAR 0 4
11064: PUSH
11065: LD_VAR 0 9
11069: PUSH
11070: LD_INT 1
11072: ARRAY
11073: PPUSH
11074: LD_VAR 0 9
11078: PUSH
11079: LD_INT 2
11081: ARRAY
11082: PPUSH
11083: CALL_OW 546
11087: ST_TO_ADDR
// if hex [ 1 ] then
11088: LD_VAR 0 4
11092: PUSH
11093: LD_INT 1
11095: ARRAY
11096: IFFALSE 11100
// continue ;
11098: GO 10988
// h := hex [ 2 ] ;
11100: LD_ADDR_VAR 0 13
11104: PUSH
11105: LD_VAR 0 4
11109: PUSH
11110: LD_INT 2
11112: ARRAY
11113: ST_TO_ADDR
// if h + 7 < height then
11114: LD_VAR 0 13
11118: PUSH
11119: LD_INT 7
11121: PLUS
11122: PUSH
11123: LD_VAR 0 15
11127: LESS
11128: IFFALSE 11157
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11130: LD_ADDR_VAR 0 18
11134: PUSH
11135: LD_INT 7
11137: PUSH
11138: LD_INT 28
11140: PUSH
11141: LD_INT 45
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: PUSH
11149: LD_VAR 0 12
11153: ARRAY
11154: ST_TO_ADDR
// break ;
11155: GO 11159
// end ; end ; end ;
11157: GO 10988
11159: POP
11160: POP
// end ; if not weapon then
11161: LD_VAR 0 18
11165: NOT
11166: IFFALSE 11226
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11168: LD_ADDR_VAR 0 5
11172: PUSH
11173: LD_VAR 0 5
11177: PUSH
11178: LD_INT 11
11180: PUSH
11181: LD_INT 30
11183: PUSH
11184: LD_INT 49
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: DIFF
11192: ST_TO_ADDR
// if not list then
11193: LD_VAR 0 5
11197: NOT
11198: IFFALSE 11202
// exit ;
11200: GO 11344
// weapon := list [ rand ( 1 , list ) ] ;
11202: LD_ADDR_VAR 0 18
11206: PUSH
11207: LD_VAR 0 5
11211: PUSH
11212: LD_INT 1
11214: PPUSH
11215: LD_VAR 0 5
11219: PPUSH
11220: CALL_OW 12
11224: ARRAY
11225: ST_TO_ADDR
// end ; if weapon then
11226: LD_VAR 0 18
11230: IFFALSE 11344
// begin tmp := CostOfWeapon ( weapon ) ;
11232: LD_ADDR_VAR 0 14
11236: PUSH
11237: LD_VAR 0 18
11241: PPUSH
11242: CALL_OW 451
11246: ST_TO_ADDR
// j := GetBase ( tower ) ;
11247: LD_ADDR_VAR 0 9
11251: PUSH
11252: LD_VAR 0 1
11256: PPUSH
11257: CALL_OW 274
11261: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11262: LD_VAR 0 9
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 275
11274: PUSH
11275: LD_VAR 0 14
11279: PUSH
11280: LD_INT 1
11282: ARRAY
11283: GREATEREQUAL
11284: PUSH
11285: LD_VAR 0 9
11289: PPUSH
11290: LD_INT 2
11292: PPUSH
11293: CALL_OW 275
11297: PUSH
11298: LD_VAR 0 14
11302: PUSH
11303: LD_INT 2
11305: ARRAY
11306: GREATEREQUAL
11307: AND
11308: PUSH
11309: LD_VAR 0 9
11313: PPUSH
11314: LD_INT 3
11316: PPUSH
11317: CALL_OW 275
11321: PUSH
11322: LD_VAR 0 14
11326: PUSH
11327: LD_INT 3
11329: ARRAY
11330: GREATEREQUAL
11331: AND
11332: IFFALSE 11344
// result := weapon ;
11334: LD_ADDR_VAR 0 3
11338: PUSH
11339: LD_VAR 0 18
11343: ST_TO_ADDR
// end ; end ;
11344: LD_VAR 0 3
11348: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11349: LD_INT 0
11351: PPUSH
11352: PPUSH
// result := true ;
11353: LD_ADDR_VAR 0 3
11357: PUSH
11358: LD_INT 1
11360: ST_TO_ADDR
// if array1 = array2 then
11361: LD_VAR 0 1
11365: PUSH
11366: LD_VAR 0 2
11370: EQUAL
11371: IFFALSE 11431
// begin for i = 1 to array1 do
11373: LD_ADDR_VAR 0 4
11377: PUSH
11378: DOUBLE
11379: LD_INT 1
11381: DEC
11382: ST_TO_ADDR
11383: LD_VAR 0 1
11387: PUSH
11388: FOR_TO
11389: IFFALSE 11427
// if array1 [ i ] <> array2 [ i ] then
11391: LD_VAR 0 1
11395: PUSH
11396: LD_VAR 0 4
11400: ARRAY
11401: PUSH
11402: LD_VAR 0 2
11406: PUSH
11407: LD_VAR 0 4
11411: ARRAY
11412: NONEQUAL
11413: IFFALSE 11425
// begin result := false ;
11415: LD_ADDR_VAR 0 3
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// break ;
11423: GO 11427
// end ;
11425: GO 11388
11427: POP
11428: POP
// end else
11429: GO 11439
// result := false ;
11431: LD_ADDR_VAR 0 3
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
// end ;
11439: LD_VAR 0 3
11443: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11444: LD_INT 0
11446: PPUSH
11447: PPUSH
11448: PPUSH
// pom := GetBase ( fac ) ;
11449: LD_ADDR_VAR 0 5
11453: PUSH
11454: LD_VAR 0 1
11458: PPUSH
11459: CALL_OW 274
11463: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11464: LD_ADDR_VAR 0 4
11468: PUSH
11469: LD_VAR 0 2
11473: PUSH
11474: LD_INT 1
11476: ARRAY
11477: PPUSH
11478: LD_VAR 0 2
11482: PUSH
11483: LD_INT 2
11485: ARRAY
11486: PPUSH
11487: LD_VAR 0 2
11491: PUSH
11492: LD_INT 3
11494: ARRAY
11495: PPUSH
11496: LD_VAR 0 2
11500: PUSH
11501: LD_INT 4
11503: ARRAY
11504: PPUSH
11505: CALL_OW 449
11509: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11510: LD_ADDR_VAR 0 3
11514: PUSH
11515: LD_VAR 0 5
11519: PPUSH
11520: LD_INT 1
11522: PPUSH
11523: CALL_OW 275
11527: PUSH
11528: LD_VAR 0 4
11532: PUSH
11533: LD_INT 1
11535: ARRAY
11536: GREATEREQUAL
11537: PUSH
11538: LD_VAR 0 5
11542: PPUSH
11543: LD_INT 2
11545: PPUSH
11546: CALL_OW 275
11550: PUSH
11551: LD_VAR 0 4
11555: PUSH
11556: LD_INT 2
11558: ARRAY
11559: GREATEREQUAL
11560: AND
11561: PUSH
11562: LD_VAR 0 5
11566: PPUSH
11567: LD_INT 3
11569: PPUSH
11570: CALL_OW 275
11574: PUSH
11575: LD_VAR 0 4
11579: PUSH
11580: LD_INT 3
11582: ARRAY
11583: GREATEREQUAL
11584: AND
11585: ST_TO_ADDR
// end ;
11586: LD_VAR 0 3
11590: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11591: LD_INT 0
11593: PPUSH
11594: PPUSH
11595: PPUSH
11596: PPUSH
// pom := GetBase ( building ) ;
11597: LD_ADDR_VAR 0 3
11601: PUSH
11602: LD_VAR 0 1
11606: PPUSH
11607: CALL_OW 274
11611: ST_TO_ADDR
// if not pom then
11612: LD_VAR 0 3
11616: NOT
11617: IFFALSE 11621
// exit ;
11619: GO 11791
// btype := GetBType ( building ) ;
11621: LD_ADDR_VAR 0 5
11625: PUSH
11626: LD_VAR 0 1
11630: PPUSH
11631: CALL_OW 266
11635: ST_TO_ADDR
// if btype = b_armoury then
11636: LD_VAR 0 5
11640: PUSH
11641: LD_INT 4
11643: EQUAL
11644: IFFALSE 11654
// btype := b_barracks ;
11646: LD_ADDR_VAR 0 5
11650: PUSH
11651: LD_INT 5
11653: ST_TO_ADDR
// if btype = b_depot then
11654: LD_VAR 0 5
11658: PUSH
11659: LD_INT 0
11661: EQUAL
11662: IFFALSE 11672
// btype := b_warehouse ;
11664: LD_ADDR_VAR 0 5
11668: PUSH
11669: LD_INT 1
11671: ST_TO_ADDR
// if btype = b_workshop then
11672: LD_VAR 0 5
11676: PUSH
11677: LD_INT 2
11679: EQUAL
11680: IFFALSE 11690
// btype := b_factory ;
11682: LD_ADDR_VAR 0 5
11686: PUSH
11687: LD_INT 3
11689: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11690: LD_ADDR_VAR 0 4
11694: PUSH
11695: LD_VAR 0 5
11699: PPUSH
11700: LD_VAR 0 1
11704: PPUSH
11705: CALL_OW 248
11709: PPUSH
11710: CALL_OW 450
11714: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11715: LD_ADDR_VAR 0 2
11719: PUSH
11720: LD_VAR 0 3
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: CALL_OW 275
11732: PUSH
11733: LD_VAR 0 4
11737: PUSH
11738: LD_INT 1
11740: ARRAY
11741: GREATEREQUAL
11742: PUSH
11743: LD_VAR 0 3
11747: PPUSH
11748: LD_INT 2
11750: PPUSH
11751: CALL_OW 275
11755: PUSH
11756: LD_VAR 0 4
11760: PUSH
11761: LD_INT 2
11763: ARRAY
11764: GREATEREQUAL
11765: AND
11766: PUSH
11767: LD_VAR 0 3
11771: PPUSH
11772: LD_INT 3
11774: PPUSH
11775: CALL_OW 275
11779: PUSH
11780: LD_VAR 0 4
11784: PUSH
11785: LD_INT 3
11787: ARRAY
11788: GREATEREQUAL
11789: AND
11790: ST_TO_ADDR
// end ;
11791: LD_VAR 0 2
11795: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11796: LD_INT 0
11798: PPUSH
11799: PPUSH
11800: PPUSH
// pom := GetBase ( building ) ;
11801: LD_ADDR_VAR 0 4
11805: PUSH
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 274
11815: ST_TO_ADDR
// if not pom then
11816: LD_VAR 0 4
11820: NOT
11821: IFFALSE 11825
// exit ;
11823: GO 11926
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11825: LD_ADDR_VAR 0 5
11829: PUSH
11830: LD_VAR 0 2
11834: PPUSH
11835: LD_VAR 0 1
11839: PPUSH
11840: CALL_OW 248
11844: PPUSH
11845: CALL_OW 450
11849: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11850: LD_ADDR_VAR 0 3
11854: PUSH
11855: LD_VAR 0 4
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 275
11867: PUSH
11868: LD_VAR 0 5
11872: PUSH
11873: LD_INT 1
11875: ARRAY
11876: GREATEREQUAL
11877: PUSH
11878: LD_VAR 0 4
11882: PPUSH
11883: LD_INT 2
11885: PPUSH
11886: CALL_OW 275
11890: PUSH
11891: LD_VAR 0 5
11895: PUSH
11896: LD_INT 2
11898: ARRAY
11899: GREATEREQUAL
11900: AND
11901: PUSH
11902: LD_VAR 0 4
11906: PPUSH
11907: LD_INT 3
11909: PPUSH
11910: CALL_OW 275
11914: PUSH
11915: LD_VAR 0 5
11919: PUSH
11920: LD_INT 3
11922: ARRAY
11923: GREATEREQUAL
11924: AND
11925: ST_TO_ADDR
// end ;
11926: LD_VAR 0 3
11930: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
11931: LD_INT 0
11933: PPUSH
11934: PPUSH
11935: PPUSH
11936: PPUSH
11937: PPUSH
11938: PPUSH
11939: PPUSH
11940: PPUSH
11941: PPUSH
11942: PPUSH
// result := false ;
11943: LD_ADDR_VAR 0 6
11947: PUSH
11948: LD_INT 0
11950: ST_TO_ADDR
// if not base or not btype or not x or not y then
11951: LD_VAR 0 1
11955: NOT
11956: PUSH
11957: LD_VAR 0 2
11961: NOT
11962: OR
11963: PUSH
11964: LD_VAR 0 3
11968: NOT
11969: OR
11970: PUSH
11971: LD_VAR 0 4
11975: NOT
11976: OR
11977: IFFALSE 11981
// exit ;
11979: GO 12590
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
11981: LD_ADDR_VAR 0 12
11985: PUSH
11986: LD_VAR 0 2
11990: PPUSH
11991: LD_VAR 0 3
11995: PPUSH
11996: LD_VAR 0 4
12000: PPUSH
12001: LD_VAR 0 5
12005: PPUSH
12006: LD_VAR 0 1
12010: PUSH
12011: LD_INT 1
12013: ARRAY
12014: PPUSH
12015: CALL_OW 248
12019: PPUSH
12020: LD_INT 0
12022: PPUSH
12023: CALL 13427 0 6
12027: ST_TO_ADDR
// if not hexes then
12028: LD_VAR 0 12
12032: NOT
12033: IFFALSE 12037
// exit ;
12035: GO 12590
// for i = 1 to hexes do
12037: LD_ADDR_VAR 0 7
12041: PUSH
12042: DOUBLE
12043: LD_INT 1
12045: DEC
12046: ST_TO_ADDR
12047: LD_VAR 0 12
12051: PUSH
12052: FOR_TO
12053: IFFALSE 12588
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12055: LD_ADDR_VAR 0 11
12059: PUSH
12060: LD_VAR 0 12
12064: PUSH
12065: LD_VAR 0 7
12069: ARRAY
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: PPUSH
12075: LD_VAR 0 12
12079: PUSH
12080: LD_VAR 0 7
12084: ARRAY
12085: PUSH
12086: LD_INT 2
12088: ARRAY
12089: PPUSH
12090: CALL_OW 428
12094: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12095: LD_VAR 0 12
12099: PUSH
12100: LD_VAR 0 7
12104: ARRAY
12105: PUSH
12106: LD_INT 1
12108: ARRAY
12109: PPUSH
12110: LD_VAR 0 12
12114: PUSH
12115: LD_VAR 0 7
12119: ARRAY
12120: PUSH
12121: LD_INT 2
12123: ARRAY
12124: PPUSH
12125: CALL_OW 351
12129: PUSH
12130: LD_VAR 0 12
12134: PUSH
12135: LD_VAR 0 7
12139: ARRAY
12140: PUSH
12141: LD_INT 1
12143: ARRAY
12144: PPUSH
12145: LD_VAR 0 12
12149: PUSH
12150: LD_VAR 0 7
12154: ARRAY
12155: PUSH
12156: LD_INT 2
12158: ARRAY
12159: PPUSH
12160: CALL_OW 488
12164: NOT
12165: OR
12166: PUSH
12167: LD_VAR 0 11
12171: PPUSH
12172: CALL_OW 247
12176: PUSH
12177: LD_INT 3
12179: EQUAL
12180: OR
12181: IFFALSE 12187
// exit ;
12183: POP
12184: POP
12185: GO 12590
// if not tmp or not tmp in base then
12187: LD_VAR 0 11
12191: NOT
12192: PUSH
12193: LD_VAR 0 11
12197: PUSH
12198: LD_VAR 0 1
12202: IN
12203: NOT
12204: OR
12205: IFFALSE 12209
// continue ;
12207: GO 12052
// result := true ;
12209: LD_ADDR_VAR 0 6
12213: PUSH
12214: LD_INT 1
12216: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12217: LD_ADDR_VAR 0 15
12221: PUSH
12222: LD_VAR 0 1
12226: PPUSH
12227: LD_INT 22
12229: PUSH
12230: LD_VAR 0 11
12234: PPUSH
12235: CALL_OW 255
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 2
12246: PUSH
12247: LD_INT 30
12249: PUSH
12250: LD_INT 0
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 30
12259: PUSH
12260: LD_INT 1
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PPUSH
12276: CALL_OW 72
12280: ST_TO_ADDR
// if dep then
12281: LD_VAR 0 15
12285: IFFALSE 12421
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12287: LD_ADDR_VAR 0 14
12291: PUSH
12292: LD_VAR 0 15
12296: PUSH
12297: LD_INT 1
12299: ARRAY
12300: PPUSH
12301: CALL_OW 250
12305: PPUSH
12306: LD_VAR 0 15
12310: PUSH
12311: LD_INT 1
12313: ARRAY
12314: PPUSH
12315: CALL_OW 254
12319: PPUSH
12320: LD_INT 5
12322: PPUSH
12323: CALL_OW 272
12327: PUSH
12328: LD_VAR 0 15
12332: PUSH
12333: LD_INT 1
12335: ARRAY
12336: PPUSH
12337: CALL_OW 251
12341: PPUSH
12342: LD_VAR 0 15
12346: PUSH
12347: LD_INT 1
12349: ARRAY
12350: PPUSH
12351: CALL_OW 254
12355: PPUSH
12356: LD_INT 5
12358: PPUSH
12359: CALL_OW 273
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12368: LD_VAR 0 14
12372: PUSH
12373: LD_INT 1
12375: ARRAY
12376: PPUSH
12377: LD_VAR 0 14
12381: PUSH
12382: LD_INT 2
12384: ARRAY
12385: PPUSH
12386: CALL_OW 488
12390: IFFALSE 12421
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12392: LD_VAR 0 11
12396: PPUSH
12397: LD_VAR 0 14
12401: PUSH
12402: LD_INT 1
12404: ARRAY
12405: PPUSH
12406: LD_VAR 0 14
12410: PUSH
12411: LD_INT 2
12413: ARRAY
12414: PPUSH
12415: CALL_OW 111
// continue ;
12419: GO 12052
// end ; end ; r := GetDir ( tmp ) ;
12421: LD_ADDR_VAR 0 13
12425: PUSH
12426: LD_VAR 0 11
12430: PPUSH
12431: CALL_OW 254
12435: ST_TO_ADDR
// if r = 5 then
12436: LD_VAR 0 13
12440: PUSH
12441: LD_INT 5
12443: EQUAL
12444: IFFALSE 12454
// r := 0 ;
12446: LD_ADDR_VAR 0 13
12450: PUSH
12451: LD_INT 0
12453: ST_TO_ADDR
// for j = r to 5 do
12454: LD_ADDR_VAR 0 8
12458: PUSH
12459: DOUBLE
12460: LD_VAR 0 13
12464: DEC
12465: ST_TO_ADDR
12466: LD_INT 5
12468: PUSH
12469: FOR_TO
12470: IFFALSE 12584
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12472: LD_ADDR_VAR 0 9
12476: PUSH
12477: LD_VAR 0 11
12481: PPUSH
12482: CALL_OW 250
12486: PPUSH
12487: LD_VAR 0 8
12491: PPUSH
12492: LD_INT 2
12494: PPUSH
12495: CALL_OW 272
12499: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12500: LD_ADDR_VAR 0 10
12504: PUSH
12505: LD_VAR 0 11
12509: PPUSH
12510: CALL_OW 251
12514: PPUSH
12515: LD_VAR 0 8
12519: PPUSH
12520: LD_INT 2
12522: PPUSH
12523: CALL_OW 273
12527: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12528: LD_VAR 0 9
12532: PPUSH
12533: LD_VAR 0 10
12537: PPUSH
12538: CALL_OW 488
12542: PUSH
12543: LD_VAR 0 9
12547: PPUSH
12548: LD_VAR 0 10
12552: PPUSH
12553: CALL_OW 428
12557: NOT
12558: AND
12559: IFFALSE 12582
// begin ComMoveXY ( tmp , _x , _y ) ;
12561: LD_VAR 0 11
12565: PPUSH
12566: LD_VAR 0 9
12570: PPUSH
12571: LD_VAR 0 10
12575: PPUSH
12576: CALL_OW 111
// break ;
12580: GO 12584
// end ; end ;
12582: GO 12469
12584: POP
12585: POP
// end ;
12586: GO 12052
12588: POP
12589: POP
// end ;
12590: LD_VAR 0 6
12594: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
12595: LD_INT 0
12597: PPUSH
12598: PPUSH
12599: PPUSH
12600: PPUSH
12601: PPUSH
12602: PPUSH
12603: PPUSH
12604: PPUSH
12605: PPUSH
12606: PPUSH
// result := false ;
12607: LD_ADDR_VAR 0 6
12611: PUSH
12612: LD_INT 0
12614: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
12615: LD_VAR 0 1
12619: NOT
12620: PUSH
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 266
12630: PUSH
12631: LD_INT 0
12633: PUSH
12634: LD_INT 1
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: IN
12641: NOT
12642: OR
12643: PUSH
12644: LD_VAR 0 2
12648: NOT
12649: OR
12650: PUSH
12651: LD_VAR 0 5
12655: PUSH
12656: LD_INT 0
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: LD_INT 2
12664: PUSH
12665: LD_INT 3
12667: PUSH
12668: LD_INT 4
12670: PUSH
12671: LD_INT 5
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: IN
12682: NOT
12683: OR
12684: PUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_VAR 0 4
12694: PPUSH
12695: CALL_OW 488
12699: NOT
12700: OR
12701: IFFALSE 12705
// exit ;
12703: GO 13422
// pom := GetBase ( depot ) ;
12705: LD_ADDR_VAR 0 10
12709: PUSH
12710: LD_VAR 0 1
12714: PPUSH
12715: CALL_OW 274
12719: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
12720: LD_ADDR_VAR 0 11
12724: PUSH
12725: LD_VAR 0 2
12729: PPUSH
12730: LD_VAR 0 1
12734: PPUSH
12735: CALL_OW 248
12739: PPUSH
12740: CALL_OW 450
12744: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
12745: LD_VAR 0 10
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 275
12757: PUSH
12758: LD_VAR 0 11
12762: PUSH
12763: LD_INT 1
12765: ARRAY
12766: GREATEREQUAL
12767: PUSH
12768: LD_VAR 0 10
12772: PPUSH
12773: LD_INT 2
12775: PPUSH
12776: CALL_OW 275
12780: PUSH
12781: LD_VAR 0 11
12785: PUSH
12786: LD_INT 2
12788: ARRAY
12789: GREATEREQUAL
12790: AND
12791: PUSH
12792: LD_VAR 0 10
12796: PPUSH
12797: LD_INT 3
12799: PPUSH
12800: CALL_OW 275
12804: PUSH
12805: LD_VAR 0 11
12809: PUSH
12810: LD_INT 3
12812: ARRAY
12813: GREATEREQUAL
12814: AND
12815: NOT
12816: IFFALSE 12820
// exit ;
12818: GO 13422
// if GetBType ( depot ) = b_depot then
12820: LD_VAR 0 1
12824: PPUSH
12825: CALL_OW 266
12829: PUSH
12830: LD_INT 0
12832: EQUAL
12833: IFFALSE 12845
// dist := 28 else
12835: LD_ADDR_VAR 0 14
12839: PUSH
12840: LD_INT 28
12842: ST_TO_ADDR
12843: GO 12853
// dist := 36 ;
12845: LD_ADDR_VAR 0 14
12849: PUSH
12850: LD_INT 36
12852: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
12853: LD_VAR 0 1
12857: PPUSH
12858: LD_VAR 0 3
12862: PPUSH
12863: LD_VAR 0 4
12867: PPUSH
12868: CALL_OW 297
12872: PUSH
12873: LD_VAR 0 14
12877: GREATER
12878: IFFALSE 12882
// exit ;
12880: GO 13422
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
12882: LD_ADDR_VAR 0 12
12886: PUSH
12887: LD_VAR 0 2
12891: PPUSH
12892: LD_VAR 0 3
12896: PPUSH
12897: LD_VAR 0 4
12901: PPUSH
12902: LD_VAR 0 5
12906: PPUSH
12907: LD_VAR 0 1
12911: PPUSH
12912: CALL_OW 248
12916: PPUSH
12917: LD_INT 0
12919: PPUSH
12920: CALL 13427 0 6
12924: ST_TO_ADDR
// if not hexes then
12925: LD_VAR 0 12
12929: NOT
12930: IFFALSE 12934
// exit ;
12932: GO 13422
// hex := GetHexInfo ( x , y ) ;
12934: LD_ADDR_VAR 0 15
12938: PUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: LD_VAR 0 4
12948: PPUSH
12949: CALL_OW 546
12953: ST_TO_ADDR
// if hex [ 1 ] then
12954: LD_VAR 0 15
12958: PUSH
12959: LD_INT 1
12961: ARRAY
12962: IFFALSE 12966
// exit ;
12964: GO 13422
// height := hex [ 2 ] ;
12966: LD_ADDR_VAR 0 13
12970: PUSH
12971: LD_VAR 0 15
12975: PUSH
12976: LD_INT 2
12978: ARRAY
12979: ST_TO_ADDR
// for i = 1 to hexes do
12980: LD_ADDR_VAR 0 7
12984: PUSH
12985: DOUBLE
12986: LD_INT 1
12988: DEC
12989: ST_TO_ADDR
12990: LD_VAR 0 12
12994: PUSH
12995: FOR_TO
12996: IFFALSE 13326
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
12998: LD_VAR 0 12
13002: PUSH
13003: LD_VAR 0 7
13007: ARRAY
13008: PUSH
13009: LD_INT 1
13011: ARRAY
13012: PPUSH
13013: LD_VAR 0 12
13017: PUSH
13018: LD_VAR 0 7
13022: ARRAY
13023: PUSH
13024: LD_INT 2
13026: ARRAY
13027: PPUSH
13028: CALL_OW 488
13032: NOT
13033: PUSH
13034: LD_VAR 0 12
13038: PUSH
13039: LD_VAR 0 7
13043: ARRAY
13044: PUSH
13045: LD_INT 1
13047: ARRAY
13048: PPUSH
13049: LD_VAR 0 12
13053: PUSH
13054: LD_VAR 0 7
13058: ARRAY
13059: PUSH
13060: LD_INT 2
13062: ARRAY
13063: PPUSH
13064: CALL_OW 428
13068: PUSH
13069: LD_INT 0
13071: GREATER
13072: OR
13073: PUSH
13074: LD_VAR 0 12
13078: PUSH
13079: LD_VAR 0 7
13083: ARRAY
13084: PUSH
13085: LD_INT 1
13087: ARRAY
13088: PPUSH
13089: LD_VAR 0 12
13093: PUSH
13094: LD_VAR 0 7
13098: ARRAY
13099: PUSH
13100: LD_INT 2
13102: ARRAY
13103: PPUSH
13104: CALL_OW 351
13108: OR
13109: IFFALSE 13115
// exit ;
13111: POP
13112: POP
13113: GO 13422
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13115: LD_ADDR_VAR 0 8
13119: PUSH
13120: LD_VAR 0 12
13124: PUSH
13125: LD_VAR 0 7
13129: ARRAY
13130: PUSH
13131: LD_INT 1
13133: ARRAY
13134: PPUSH
13135: LD_VAR 0 12
13139: PUSH
13140: LD_VAR 0 7
13144: ARRAY
13145: PUSH
13146: LD_INT 2
13148: ARRAY
13149: PPUSH
13150: CALL_OW 546
13154: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13155: LD_VAR 0 8
13159: PUSH
13160: LD_INT 1
13162: ARRAY
13163: PUSH
13164: LD_VAR 0 8
13168: PUSH
13169: LD_INT 2
13171: ARRAY
13172: PUSH
13173: LD_VAR 0 13
13177: PUSH
13178: LD_INT 2
13180: PLUS
13181: GREATER
13182: OR
13183: PUSH
13184: LD_VAR 0 8
13188: PUSH
13189: LD_INT 2
13191: ARRAY
13192: PUSH
13193: LD_VAR 0 13
13197: PUSH
13198: LD_INT 2
13200: MINUS
13201: LESS
13202: OR
13203: PUSH
13204: LD_VAR 0 8
13208: PUSH
13209: LD_INT 3
13211: ARRAY
13212: PUSH
13213: LD_INT 0
13215: PUSH
13216: LD_INT 8
13218: PUSH
13219: LD_INT 9
13221: PUSH
13222: LD_INT 10
13224: PUSH
13225: LD_INT 11
13227: PUSH
13228: LD_INT 12
13230: PUSH
13231: LD_INT 13
13233: PUSH
13234: LD_INT 16
13236: PUSH
13237: LD_INT 17
13239: PUSH
13240: LD_INT 18
13242: PUSH
13243: LD_INT 19
13245: PUSH
13246: LD_INT 20
13248: PUSH
13249: LD_INT 21
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: IN
13267: NOT
13268: OR
13269: PUSH
13270: LD_VAR 0 8
13274: PUSH
13275: LD_INT 5
13277: ARRAY
13278: NOT
13279: OR
13280: PUSH
13281: LD_VAR 0 8
13285: PUSH
13286: LD_INT 6
13288: ARRAY
13289: PUSH
13290: LD_INT 1
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: LD_INT 7
13298: PUSH
13299: LD_INT 9
13301: PUSH
13302: LD_INT 10
13304: PUSH
13305: LD_INT 11
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: IN
13316: NOT
13317: OR
13318: IFFALSE 13324
// exit ;
13320: POP
13321: POP
13322: GO 13422
// end ;
13324: GO 12995
13326: POP
13327: POP
// side := GetSide ( depot ) ;
13328: LD_ADDR_VAR 0 9
13332: PUSH
13333: LD_VAR 0 1
13337: PPUSH
13338: CALL_OW 255
13342: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
13343: LD_VAR 0 9
13347: PPUSH
13348: LD_VAR 0 3
13352: PPUSH
13353: LD_VAR 0 4
13357: PPUSH
13358: LD_INT 20
13360: PPUSH
13361: CALL 6076 0 4
13365: PUSH
13366: LD_INT 4
13368: ARRAY
13369: IFFALSE 13373
// exit ;
13371: GO 13422
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
13373: LD_VAR 0 2
13377: PUSH
13378: LD_INT 29
13380: PUSH
13381: LD_INT 30
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: IN
13388: PUSH
13389: LD_VAR 0 3
13393: PPUSH
13394: LD_VAR 0 4
13398: PPUSH
13399: LD_VAR 0 9
13403: PPUSH
13404: CALL_OW 440
13408: NOT
13409: AND
13410: IFFALSE 13414
// exit ;
13412: GO 13422
// result := true ;
13414: LD_ADDR_VAR 0 6
13418: PUSH
13419: LD_INT 1
13421: ST_TO_ADDR
// end ;
13422: LD_VAR 0 6
13426: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
13427: LD_INT 0
13429: PPUSH
13430: PPUSH
13431: PPUSH
13432: PPUSH
13433: PPUSH
13434: PPUSH
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
13439: PPUSH
13440: PPUSH
13441: PPUSH
13442: PPUSH
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
13451: PPUSH
13452: PPUSH
13453: PPUSH
13454: PPUSH
13455: PPUSH
13456: PPUSH
13457: PPUSH
13458: PPUSH
13459: PPUSH
13460: PPUSH
13461: PPUSH
13462: PPUSH
13463: PPUSH
13464: PPUSH
13465: PPUSH
13466: PPUSH
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
13471: PPUSH
13472: PPUSH
13473: PPUSH
13474: PPUSH
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
// result = [ ] ;
13487: LD_ADDR_VAR 0 7
13491: PUSH
13492: EMPTY
13493: ST_TO_ADDR
// temp_list = [ ] ;
13494: LD_ADDR_VAR 0 9
13498: PUSH
13499: EMPTY
13500: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
13501: LD_VAR 0 4
13505: PUSH
13506: LD_INT 0
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 3
13517: PUSH
13518: LD_INT 4
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: IN
13532: NOT
13533: PUSH
13534: LD_VAR 0 1
13538: PUSH
13539: LD_INT 0
13541: PUSH
13542: LD_INT 1
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: IN
13549: PUSH
13550: LD_VAR 0 5
13554: PUSH
13555: LD_INT 1
13557: PUSH
13558: LD_INT 2
13560: PUSH
13561: LD_INT 3
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: IN
13569: NOT
13570: AND
13571: OR
13572: IFFALSE 13576
// exit ;
13574: GO 31967
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
13576: LD_VAR 0 1
13580: PUSH
13581: LD_INT 6
13583: PUSH
13584: LD_INT 7
13586: PUSH
13587: LD_INT 8
13589: PUSH
13590: LD_INT 13
13592: PUSH
13593: LD_INT 12
13595: PUSH
13596: LD_INT 15
13598: PUSH
13599: LD_INT 11
13601: PUSH
13602: LD_INT 14
13604: PUSH
13605: LD_INT 10
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: IN
13619: IFFALSE 13629
// btype = b_lab ;
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_INT 6
13628: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
13629: LD_VAR 0 6
13633: PUSH
13634: LD_INT 0
13636: PUSH
13637: LD_INT 1
13639: PUSH
13640: LD_INT 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: LIST
13647: IN
13648: NOT
13649: PUSH
13650: LD_VAR 0 1
13654: PUSH
13655: LD_INT 0
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: LD_INT 2
13663: PUSH
13664: LD_INT 3
13666: PUSH
13667: LD_INT 6
13669: PUSH
13670: LD_INT 36
13672: PUSH
13673: LD_INT 4
13675: PUSH
13676: LD_INT 5
13678: PUSH
13679: LD_INT 31
13681: PUSH
13682: LD_INT 32
13684: PUSH
13685: LD_INT 33
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: IN
13701: NOT
13702: PUSH
13703: LD_VAR 0 6
13707: PUSH
13708: LD_INT 1
13710: EQUAL
13711: AND
13712: OR
13713: PUSH
13714: LD_VAR 0 1
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: LD_INT 3
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: IN
13729: NOT
13730: PUSH
13731: LD_VAR 0 6
13735: PUSH
13736: LD_INT 2
13738: EQUAL
13739: AND
13740: OR
13741: IFFALSE 13751
// mode = 0 ;
13743: LD_ADDR_VAR 0 6
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// case mode of 0 :
13751: LD_VAR 0 6
13755: PUSH
13756: LD_INT 0
13758: DOUBLE
13759: EQUAL
13760: IFTRUE 13764
13762: GO 25217
13764: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
13765: LD_ADDR_VAR 0 11
13769: PUSH
13770: LD_INT 0
13772: PUSH
13773: LD_INT 0
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 0
13782: PUSH
13783: LD_INT 1
13785: NEG
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 1
13793: PUSH
13794: LD_INT 0
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 1
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 0
13813: PUSH
13814: LD_INT 1
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 1
13823: NEG
13824: PUSH
13825: LD_INT 0
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 1
13834: NEG
13835: PUSH
13836: LD_INT 1
13838: NEG
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 1
13846: NEG
13847: PUSH
13848: LD_INT 2
13850: NEG
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 0
13858: PUSH
13859: LD_INT 2
13861: NEG
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 1
13869: PUSH
13870: LD_INT 1
13872: NEG
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 1
13880: PUSH
13881: LD_INT 2
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 0
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 1
13900: NEG
13901: PUSH
13902: LD_INT 1
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 1
13911: PUSH
13912: LD_INT 3
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 0
13921: PUSH
13922: LD_INT 3
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 1
13931: NEG
13932: PUSH
13933: LD_INT 2
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
13958: LD_ADDR_VAR 0 12
13962: PUSH
13963: LD_INT 0
13965: PUSH
13966: LD_INT 0
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 0
13975: PUSH
13976: LD_INT 1
13978: NEG
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 1
13986: PUSH
13987: LD_INT 0
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 1
13996: PUSH
13997: LD_INT 1
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 0
14006: PUSH
14007: LD_INT 1
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 1
14016: NEG
14017: PUSH
14018: LD_INT 0
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 1
14027: NEG
14028: PUSH
14029: LD_INT 1
14031: NEG
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 1
14039: PUSH
14040: LD_INT 1
14042: NEG
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 2
14050: PUSH
14051: LD_INT 0
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: LD_INT 2
14060: PUSH
14061: LD_INT 1
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 1
14070: NEG
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 2
14081: NEG
14082: PUSH
14083: LD_INT 0
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 2
14092: NEG
14093: PUSH
14094: LD_INT 1
14096: NEG
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 2
14104: NEG
14105: PUSH
14106: LD_INT 1
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 3
14115: NEG
14116: PUSH
14117: LD_INT 0
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 3
14126: NEG
14127: PUSH
14128: LD_INT 1
14130: NEG
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14154: LD_ADDR_VAR 0 13
14158: PUSH
14159: LD_INT 0
14161: PUSH
14162: LD_INT 0
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 0
14171: PUSH
14172: LD_INT 1
14174: NEG
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 1
14182: PUSH
14183: LD_INT 0
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: LD_INT 1
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 0
14202: PUSH
14203: LD_INT 1
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 1
14212: NEG
14213: PUSH
14214: LD_INT 0
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 1
14223: NEG
14224: PUSH
14225: LD_INT 1
14227: NEG
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 1
14235: NEG
14236: PUSH
14237: LD_INT 2
14239: NEG
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 2
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 2
14257: PUSH
14258: LD_INT 2
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 1
14267: PUSH
14268: LD_INT 2
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 2
14277: NEG
14278: PUSH
14279: LD_INT 1
14281: NEG
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 2
14289: NEG
14290: PUSH
14291: LD_INT 2
14293: NEG
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 2
14301: NEG
14302: PUSH
14303: LD_INT 3
14305: NEG
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 3
14313: NEG
14314: PUSH
14315: LD_INT 2
14317: NEG
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 3
14325: NEG
14326: PUSH
14327: LD_INT 3
14329: NEG
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
14353: LD_ADDR_VAR 0 14
14357: PUSH
14358: LD_INT 0
14360: PUSH
14361: LD_INT 0
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 0
14370: PUSH
14371: LD_INT 1
14373: NEG
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 1
14381: PUSH
14382: LD_INT 0
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 1
14391: PUSH
14392: LD_INT 1
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 0
14401: PUSH
14402: LD_INT 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 1
14411: NEG
14412: PUSH
14413: LD_INT 0
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 1
14422: NEG
14423: PUSH
14424: LD_INT 1
14426: NEG
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 1
14434: NEG
14435: PUSH
14436: LD_INT 2
14438: NEG
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 0
14446: PUSH
14447: LD_INT 2
14449: NEG
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 1
14457: PUSH
14458: LD_INT 1
14460: NEG
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 1
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: LD_INT 0
14478: PUSH
14479: LD_INT 2
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: LD_INT 1
14488: NEG
14489: PUSH
14490: LD_INT 1
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 1
14499: NEG
14500: PUSH
14501: LD_INT 3
14503: NEG
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 0
14511: PUSH
14512: LD_INT 3
14514: NEG
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 1
14522: PUSH
14523: LD_INT 2
14525: NEG
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
14549: LD_ADDR_VAR 0 15
14553: PUSH
14554: LD_INT 0
14556: PUSH
14557: LD_INT 0
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 0
14566: PUSH
14567: LD_INT 1
14569: NEG
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 1
14577: PUSH
14578: LD_INT 0
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 1
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 1
14607: NEG
14608: PUSH
14609: LD_INT 0
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 1
14618: NEG
14619: PUSH
14620: LD_INT 1
14622: NEG
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 1
14630: PUSH
14631: LD_INT 1
14633: NEG
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 2
14641: PUSH
14642: LD_INT 0
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 2
14651: PUSH
14652: LD_INT 1
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 1
14661: NEG
14662: PUSH
14663: LD_INT 1
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: LD_INT 2
14672: NEG
14673: PUSH
14674: LD_INT 0
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 2
14683: NEG
14684: PUSH
14685: LD_INT 1
14687: NEG
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 2
14695: PUSH
14696: LD_INT 1
14698: NEG
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 3
14706: PUSH
14707: LD_INT 0
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 3
14716: PUSH
14717: LD_INT 1
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
14742: LD_ADDR_VAR 0 16
14746: PUSH
14747: LD_INT 0
14749: PUSH
14750: LD_INT 0
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 0
14759: PUSH
14760: LD_INT 1
14762: NEG
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 1
14770: PUSH
14771: LD_INT 0
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 1
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 0
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 1
14800: NEG
14801: PUSH
14802: LD_INT 0
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 1
14811: NEG
14812: PUSH
14813: LD_INT 1
14815: NEG
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 1
14823: NEG
14824: PUSH
14825: LD_INT 2
14827: NEG
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 2
14835: PUSH
14836: LD_INT 1
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 2
14845: PUSH
14846: LD_INT 2
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 1
14855: PUSH
14856: LD_INT 2
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 2
14865: NEG
14866: PUSH
14867: LD_INT 1
14869: NEG
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 2
14877: NEG
14878: PUSH
14879: LD_INT 2
14881: NEG
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 3
14889: PUSH
14890: LD_INT 2
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 3
14899: PUSH
14900: LD_INT 3
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 2
14909: PUSH
14910: LD_INT 3
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
14935: LD_ADDR_VAR 0 17
14939: PUSH
14940: LD_INT 0
14942: PUSH
14943: LD_INT 0
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 0
14952: PUSH
14953: LD_INT 1
14955: NEG
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: LD_INT 0
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: LD_INT 1
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 0
14983: PUSH
14984: LD_INT 1
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 1
14993: NEG
14994: PUSH
14995: LD_INT 0
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 1
15004: NEG
15005: PUSH
15006: LD_INT 1
15008: NEG
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 1
15016: NEG
15017: PUSH
15018: LD_INT 2
15020: NEG
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 0
15028: PUSH
15029: LD_INT 2
15031: NEG
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 1
15039: PUSH
15040: LD_INT 1
15042: NEG
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 2
15050: PUSH
15051: LD_INT 0
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: LD_INT 1
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 2
15070: PUSH
15071: LD_INT 2
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 1
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 0
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 1
15100: NEG
15101: PUSH
15102: LD_INT 1
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 2
15111: NEG
15112: PUSH
15113: LD_INT 0
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 2
15122: NEG
15123: PUSH
15124: LD_INT 1
15126: NEG
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 2
15134: NEG
15135: PUSH
15136: LD_INT 2
15138: NEG
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15165: LD_ADDR_VAR 0 18
15169: PUSH
15170: LD_INT 0
15172: PUSH
15173: LD_INT 0
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 0
15182: PUSH
15183: LD_INT 1
15185: NEG
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 1
15193: PUSH
15194: LD_INT 0
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: LD_INT 1
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 1
15223: NEG
15224: PUSH
15225: LD_INT 0
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 1
15234: NEG
15235: PUSH
15236: LD_INT 1
15238: NEG
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: LD_INT 1
15246: NEG
15247: PUSH
15248: LD_INT 2
15250: NEG
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 0
15258: PUSH
15259: LD_INT 2
15261: NEG
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: LD_INT 1
15272: NEG
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: LD_INT 0
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 2
15290: PUSH
15291: LD_INT 1
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 2
15300: PUSH
15301: LD_INT 2
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 1
15310: PUSH
15311: LD_INT 2
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 0
15320: PUSH
15321: LD_INT 2
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 1
15330: NEG
15331: PUSH
15332: LD_INT 1
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 2
15341: NEG
15342: PUSH
15343: LD_INT 0
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 2
15352: NEG
15353: PUSH
15354: LD_INT 1
15356: NEG
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 2
15364: NEG
15365: PUSH
15366: LD_INT 2
15368: NEG
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15395: LD_ADDR_VAR 0 19
15399: PUSH
15400: LD_INT 0
15402: PUSH
15403: LD_INT 0
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 0
15412: PUSH
15413: LD_INT 1
15415: NEG
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: LD_INT 0
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 1
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 0
15443: PUSH
15444: LD_INT 1
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 1
15453: NEG
15454: PUSH
15455: LD_INT 0
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 1
15464: NEG
15465: PUSH
15466: LD_INT 1
15468: NEG
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 1
15476: NEG
15477: PUSH
15478: LD_INT 2
15480: NEG
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 0
15488: PUSH
15489: LD_INT 2
15491: NEG
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: LD_INT 1
15502: NEG
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 2
15510: PUSH
15511: LD_INT 0
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 2
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 2
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 1
15540: PUSH
15541: LD_INT 2
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 0
15550: PUSH
15551: LD_INT 2
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 1
15560: NEG
15561: PUSH
15562: LD_INT 1
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 2
15571: NEG
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 2
15582: NEG
15583: PUSH
15584: LD_INT 1
15586: NEG
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 2
15594: NEG
15595: PUSH
15596: LD_INT 2
15598: NEG
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15625: LD_ADDR_VAR 0 20
15629: PUSH
15630: LD_INT 0
15632: PUSH
15633: LD_INT 0
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 0
15642: PUSH
15643: LD_INT 1
15645: NEG
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: LD_INT 0
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 1
15663: PUSH
15664: LD_INT 1
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: LD_INT 1
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 1
15683: NEG
15684: PUSH
15685: LD_INT 0
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 1
15694: NEG
15695: PUSH
15696: LD_INT 1
15698: NEG
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 1
15706: NEG
15707: PUSH
15708: LD_INT 2
15710: NEG
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 0
15718: PUSH
15719: LD_INT 2
15721: NEG
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: LD_INT 1
15732: NEG
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 2
15740: PUSH
15741: LD_INT 0
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 2
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 2
15760: PUSH
15761: LD_INT 2
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 0
15780: PUSH
15781: LD_INT 2
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 1
15790: NEG
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 2
15801: NEG
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 2
15812: NEG
15813: PUSH
15814: LD_INT 1
15816: NEG
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 2
15824: NEG
15825: PUSH
15826: LD_INT 2
15828: NEG
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15855: LD_ADDR_VAR 0 21
15859: PUSH
15860: LD_INT 0
15862: PUSH
15863: LD_INT 0
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 0
15872: PUSH
15873: LD_INT 1
15875: NEG
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 1
15883: PUSH
15884: LD_INT 0
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 0
15903: PUSH
15904: LD_INT 1
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: LD_INT 1
15913: NEG
15914: PUSH
15915: LD_INT 0
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 1
15924: NEG
15925: PUSH
15926: LD_INT 1
15928: NEG
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 1
15936: NEG
15937: PUSH
15938: LD_INT 2
15940: NEG
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 0
15948: PUSH
15949: LD_INT 2
15951: NEG
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 1
15959: PUSH
15960: LD_INT 1
15962: NEG
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 2
15970: PUSH
15971: LD_INT 0
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 2
15980: PUSH
15981: LD_INT 1
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: LD_INT 2
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: LD_INT 2
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 1
16020: NEG
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 2
16031: NEG
16032: PUSH
16033: LD_INT 0
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: LD_INT 2
16042: NEG
16043: PUSH
16044: LD_INT 1
16046: NEG
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 2
16054: NEG
16055: PUSH
16056: LD_INT 2
16058: NEG
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16085: LD_ADDR_VAR 0 22
16089: PUSH
16090: LD_INT 0
16092: PUSH
16093: LD_INT 0
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 0
16102: PUSH
16103: LD_INT 1
16105: NEG
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 1
16123: PUSH
16124: LD_INT 1
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 0
16133: PUSH
16134: LD_INT 1
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 1
16143: NEG
16144: PUSH
16145: LD_INT 0
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 1
16154: NEG
16155: PUSH
16156: LD_INT 1
16158: NEG
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 1
16166: NEG
16167: PUSH
16168: LD_INT 2
16170: NEG
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: LD_INT 2
16181: NEG
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: LD_INT 1
16192: NEG
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 2
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 2
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 2
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: LD_INT 2
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 0
16240: PUSH
16241: LD_INT 2
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 1
16250: NEG
16251: PUSH
16252: LD_INT 1
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 2
16261: NEG
16262: PUSH
16263: LD_INT 0
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 2
16272: NEG
16273: PUSH
16274: LD_INT 1
16276: NEG
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 2
16284: NEG
16285: PUSH
16286: LD_INT 2
16288: NEG
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
16315: LD_ADDR_VAR 0 23
16319: PUSH
16320: LD_INT 0
16322: PUSH
16323: LD_INT 0
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 0
16332: PUSH
16333: LD_INT 1
16335: NEG
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 1
16343: PUSH
16344: LD_INT 0
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 1
16353: PUSH
16354: LD_INT 1
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: LD_INT 1
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: LD_INT 1
16373: NEG
16374: PUSH
16375: LD_INT 0
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 1
16384: NEG
16385: PUSH
16386: LD_INT 1
16388: NEG
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 1
16396: NEG
16397: PUSH
16398: LD_INT 2
16400: NEG
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 0
16408: PUSH
16409: LD_INT 2
16411: NEG
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: LD_INT 1
16422: NEG
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: LD_INT 0
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 2
16440: PUSH
16441: LD_INT 1
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 2
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: LD_INT 2
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 0
16470: PUSH
16471: LD_INT 2
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: LD_INT 1
16480: NEG
16481: PUSH
16482: LD_INT 1
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 2
16491: NEG
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 2
16502: NEG
16503: PUSH
16504: LD_INT 1
16506: NEG
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 2
16514: NEG
16515: PUSH
16516: LD_INT 2
16518: NEG
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 2
16526: NEG
16527: PUSH
16528: LD_INT 3
16530: NEG
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 1
16538: NEG
16539: PUSH
16540: LD_INT 3
16542: NEG
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 1
16550: PUSH
16551: LD_INT 2
16553: NEG
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 2
16561: PUSH
16562: LD_INT 1
16564: NEG
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
16595: LD_ADDR_VAR 0 24
16599: PUSH
16600: LD_INT 0
16602: PUSH
16603: LD_INT 0
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 0
16612: PUSH
16613: LD_INT 1
16615: NEG
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 1
16623: PUSH
16624: LD_INT 0
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 1
16633: PUSH
16634: LD_INT 1
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 0
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 1
16653: NEG
16654: PUSH
16655: LD_INT 0
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 1
16664: NEG
16665: PUSH
16666: LD_INT 1
16668: NEG
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 1
16676: NEG
16677: PUSH
16678: LD_INT 2
16680: NEG
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 0
16688: PUSH
16689: LD_INT 2
16691: NEG
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: LD_INT 1
16702: NEG
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: LD_INT 0
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 2
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 2
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 1
16740: PUSH
16741: LD_INT 2
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 0
16750: PUSH
16751: LD_INT 2
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 1
16760: NEG
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 2
16771: NEG
16772: PUSH
16773: LD_INT 0
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 2
16782: NEG
16783: PUSH
16784: LD_INT 1
16786: NEG
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 2
16794: NEG
16795: PUSH
16796: LD_INT 2
16798: NEG
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: LD_INT 2
16809: NEG
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: LD_INT 2
16817: PUSH
16818: LD_INT 1
16820: NEG
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 3
16828: PUSH
16829: LD_INT 1
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 3
16838: PUSH
16839: LD_INT 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
16871: LD_ADDR_VAR 0 25
16875: PUSH
16876: LD_INT 0
16878: PUSH
16879: LD_INT 0
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 0
16888: PUSH
16889: LD_INT 1
16891: NEG
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 1
16929: NEG
16930: PUSH
16931: LD_INT 0
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 1
16940: NEG
16941: PUSH
16942: LD_INT 1
16944: NEG
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 1
16952: NEG
16953: PUSH
16954: LD_INT 2
16956: NEG
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 0
16964: PUSH
16965: LD_INT 2
16967: NEG
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 1
16975: PUSH
16976: LD_INT 1
16978: NEG
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 2
16986: PUSH
16987: LD_INT 0
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 2
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 1
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: LD_INT 2
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 1
17036: NEG
17037: PUSH
17038: LD_INT 1
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 2
17047: NEG
17048: PUSH
17049: LD_INT 0
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 2
17058: NEG
17059: PUSH
17060: LD_INT 1
17062: NEG
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 2
17070: NEG
17071: PUSH
17072: LD_INT 2
17074: NEG
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 3
17082: PUSH
17083: LD_INT 1
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 3
17092: PUSH
17093: LD_INT 2
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: LD_INT 3
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 1
17112: PUSH
17113: LD_INT 3
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17145: LD_ADDR_VAR 0 26
17149: PUSH
17150: LD_INT 0
17152: PUSH
17153: LD_INT 0
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 0
17162: PUSH
17163: LD_INT 1
17165: NEG
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: LD_INT 0
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 1
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 1
17203: NEG
17204: PUSH
17205: LD_INT 0
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: LD_INT 1
17218: NEG
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 1
17226: NEG
17227: PUSH
17228: LD_INT 2
17230: NEG
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 0
17238: PUSH
17239: LD_INT 2
17241: NEG
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 1
17249: PUSH
17250: LD_INT 1
17252: NEG
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 2
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 2
17280: PUSH
17281: LD_INT 2
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 0
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 1
17310: NEG
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 2
17321: NEG
17322: PUSH
17323: LD_INT 0
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 2
17332: NEG
17333: PUSH
17334: LD_INT 1
17336: NEG
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 2
17344: NEG
17345: PUSH
17346: LD_INT 2
17348: NEG
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 2
17356: PUSH
17357: LD_INT 3
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 1
17376: NEG
17377: PUSH
17378: LD_INT 2
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: NEG
17388: PUSH
17389: LD_INT 1
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17421: LD_ADDR_VAR 0 27
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 0
17438: PUSH
17439: LD_INT 1
17441: NEG
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 1
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 0
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 1
17479: NEG
17480: PUSH
17481: LD_INT 0
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 1
17490: NEG
17491: PUSH
17492: LD_INT 1
17494: NEG
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: LD_INT 2
17506: NEG
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 0
17514: PUSH
17515: LD_INT 2
17517: NEG
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: LD_INT 1
17528: NEG
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 2
17536: PUSH
17537: LD_INT 0
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 2
17546: PUSH
17547: LD_INT 1
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 2
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 1
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 1
17586: NEG
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 2
17597: NEG
17598: PUSH
17599: LD_INT 0
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 2
17608: NEG
17609: PUSH
17610: LD_INT 1
17612: NEG
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 2
17620: NEG
17621: PUSH
17622: LD_INT 2
17624: NEG
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 1
17632: NEG
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 2
17643: NEG
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 3
17654: NEG
17655: PUSH
17656: LD_INT 1
17658: NEG
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 3
17666: NEG
17667: PUSH
17668: LD_INT 2
17670: NEG
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17701: LD_ADDR_VAR 0 28
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: LD_INT 0
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 1
17729: PUSH
17730: LD_INT 0
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 1
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 0
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: NEG
17760: PUSH
17761: LD_INT 0
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 1
17770: NEG
17771: PUSH
17772: LD_INT 1
17774: NEG
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 1
17782: NEG
17783: PUSH
17784: LD_INT 2
17786: NEG
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 0
17794: PUSH
17795: LD_INT 2
17797: NEG
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: LD_INT 1
17808: NEG
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 2
17816: PUSH
17817: LD_INT 0
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: LD_INT 1
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 2
17836: PUSH
17837: LD_INT 2
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: LD_INT 2
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 1
17866: NEG
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 2
17877: NEG
17878: PUSH
17879: LD_INT 0
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: LD_INT 1
17892: NEG
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 2
17900: NEG
17901: PUSH
17902: LD_INT 2
17904: NEG
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 2
17912: NEG
17913: PUSH
17914: LD_INT 3
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: LD_INT 3
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 3
17936: NEG
17937: PUSH
17938: LD_INT 1
17940: NEG
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 3
17948: NEG
17949: PUSH
17950: LD_INT 2
17952: NEG
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
17983: LD_ADDR_VAR 0 29
17987: PUSH
17988: LD_INT 0
17990: PUSH
17991: LD_INT 0
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 0
18000: PUSH
18001: LD_INT 1
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 1
18021: PUSH
18022: LD_INT 1
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 0
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 1
18041: NEG
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 1
18052: NEG
18053: PUSH
18054: LD_INT 1
18056: NEG
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 1
18064: NEG
18065: PUSH
18066: LD_INT 2
18068: NEG
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: LD_INT 2
18079: NEG
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: LD_INT 1
18090: NEG
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 2
18098: PUSH
18099: LD_INT 0
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 2
18108: PUSH
18109: LD_INT 1
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 1
18118: PUSH
18119: LD_INT 2
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 1
18138: NEG
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 2
18149: NEG
18150: PUSH
18151: LD_INT 1
18153: NEG
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: NEG
18162: PUSH
18163: LD_INT 2
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 2
18173: NEG
18174: PUSH
18175: LD_INT 3
18177: NEG
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 2
18185: PUSH
18186: LD_INT 1
18188: NEG
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 3
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 1
18216: NEG
18217: PUSH
18218: LD_INT 2
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 3
18227: NEG
18228: PUSH
18229: LD_INT 2
18231: NEG
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18262: LD_ADDR_VAR 0 30
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: LD_INT 0
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 0
18279: PUSH
18280: LD_INT 1
18282: NEG
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: LD_INT 0
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 0
18310: PUSH
18311: LD_INT 1
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 1
18320: NEG
18321: PUSH
18322: LD_INT 0
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 1
18343: NEG
18344: PUSH
18345: LD_INT 2
18347: NEG
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 0
18355: PUSH
18356: LD_INT 2
18358: NEG
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: LD_INT 1
18369: NEG
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 2
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: LD_INT 2
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 1
18417: NEG
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 2
18428: NEG
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 2
18439: NEG
18440: PUSH
18441: LD_INT 1
18443: NEG
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: LD_INT 3
18455: NEG
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: PUSH
18464: LD_INT 2
18466: NEG
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 3
18474: PUSH
18475: LD_INT 2
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 2
18484: PUSH
18485: LD_INT 3
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 2
18494: NEG
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 3
18505: NEG
18506: PUSH
18507: LD_INT 1
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18540: LD_ADDR_VAR 0 31
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 0
18557: PUSH
18558: LD_INT 1
18560: NEG
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: PUSH
18569: LD_INT 0
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 1
18578: PUSH
18579: LD_INT 1
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 0
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: NEG
18599: PUSH
18600: LD_INT 0
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 1
18609: NEG
18610: PUSH
18611: LD_INT 1
18613: NEG
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: NEG
18622: PUSH
18623: LD_INT 2
18625: NEG
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 2
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 2
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: LD_INT 2
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: LD_INT 2
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 1
18694: NEG
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: NEG
18706: PUSH
18707: LD_INT 1
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 2
18717: NEG
18718: PUSH
18719: LD_INT 2
18721: NEG
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 2
18729: NEG
18730: PUSH
18731: LD_INT 3
18733: NEG
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 2
18741: PUSH
18742: LD_INT 1
18744: NEG
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 3
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: LD_INT 3
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 1
18772: NEG
18773: PUSH
18774: LD_INT 2
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 3
18783: NEG
18784: PUSH
18785: LD_INT 2
18787: NEG
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18818: LD_ADDR_VAR 0 32
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 0
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 0
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 1
18876: NEG
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: NEG
18888: PUSH
18889: LD_INT 1
18891: NEG
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: LD_INT 2
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: LD_INT 2
18914: NEG
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: LD_INT 1
18925: NEG
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 2
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: LD_INT 2
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 1
18973: NEG
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 2
18984: NEG
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 2
18995: NEG
18996: PUSH
18997: LD_INT 1
18999: NEG
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: LD_INT 3
19011: NEG
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: LD_INT 2
19022: NEG
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 3
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: LD_INT 3
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 2
19050: NEG
19051: PUSH
19052: LD_INT 1
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 3
19061: NEG
19062: PUSH
19063: LD_INT 1
19065: NEG
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19096: LD_ADDR_VAR 0 33
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: LD_INT 0
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: LD_INT 1
19116: NEG
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 1
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 1
19154: NEG
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: NEG
19166: PUSH
19167: LD_INT 1
19169: NEG
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 1
19177: NEG
19178: PUSH
19179: LD_INT 2
19181: NEG
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: PUSH
19190: LD_INT 1
19192: NEG
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 2
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 2
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 1
19240: NEG
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 2
19251: NEG
19252: PUSH
19253: LD_INT 0
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 2
19262: NEG
19263: PUSH
19264: LD_INT 1
19266: NEG
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: NEG
19275: PUSH
19276: LD_INT 2
19278: NEG
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: NEG
19287: PUSH
19288: LD_INT 3
19290: NEG
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 3
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: LD_INT 3
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 1
19329: NEG
19330: PUSH
19331: LD_INT 2
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 3
19340: NEG
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19375: LD_ADDR_VAR 0 34
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 0
19392: PUSH
19393: LD_INT 1
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: LD_INT 1
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 0
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 1
19433: NEG
19434: PUSH
19435: LD_INT 0
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 1
19444: NEG
19445: PUSH
19446: LD_INT 1
19448: NEG
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 1
19456: NEG
19457: PUSH
19458: LD_INT 2
19460: NEG
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: LD_INT 2
19471: NEG
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 2
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 2
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 2
19531: NEG
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 2
19554: NEG
19555: PUSH
19556: LD_INT 2
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: NEG
19567: PUSH
19568: LD_INT 3
19570: NEG
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: LD_INT 2
19581: NEG
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 3
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 2
19599: PUSH
19600: LD_INT 3
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 2
19609: NEG
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 3
19620: NEG
19621: PUSH
19622: LD_INT 1
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
19655: LD_ADDR_VAR 0 35
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: LD_INT 0
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: LD_INT 1
19675: NEG
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: NEG
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 1
19724: NEG
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 2
19746: NEG
19747: PUSH
19748: LD_INT 1
19750: NEG
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
19767: LD_ADDR_VAR 0 36
19771: PUSH
19772: LD_INT 0
19774: PUSH
19775: LD_INT 0
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: LD_INT 1
19787: NEG
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 1
19825: NEG
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 1
19836: NEG
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: NEG
19849: PUSH
19850: LD_INT 2
19852: NEG
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: LD_INT 2
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
19879: LD_ADDR_VAR 0 37
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: LD_INT 0
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: LD_INT 1
19899: NEG
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: LD_INT 0
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 1
19937: NEG
19938: PUSH
19939: LD_INT 0
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: NEG
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
19991: LD_ADDR_VAR 0 38
19995: PUSH
19996: LD_INT 0
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: LD_INT 1
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: LD_INT 1
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 0
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 1
20049: NEG
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 1
20060: NEG
20061: PUSH
20062: LD_INT 1
20064: NEG
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: NEG
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20103: LD_ADDR_VAR 0 39
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: LD_INT 0
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 0
20120: PUSH
20121: LD_INT 1
20123: NEG
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: LD_INT 1
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 0
20151: PUSH
20152: LD_INT 1
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 1
20161: NEG
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 1
20172: NEG
20173: PUSH
20174: LD_INT 1
20176: NEG
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: NEG
20185: PUSH
20186: LD_INT 2
20188: NEG
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20215: LD_ADDR_VAR 0 40
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 0
20232: PUSH
20233: LD_INT 1
20235: NEG
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 1
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: LD_INT 1
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: LD_INT 1
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: LD_INT 1
20299: NEG
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: NEG
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20327: LD_ADDR_VAR 0 41
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: LD_INT 1
20347: NEG
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: LD_INT 0
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 1
20385: NEG
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 1
20396: NEG
20397: PUSH
20398: LD_INT 1
20400: NEG
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: LD_INT 2
20412: NEG
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 2
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 2
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 2
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 2
20482: NEG
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 2
20493: NEG
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: NEG
20506: PUSH
20507: LD_INT 2
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 2
20517: NEG
20518: PUSH
20519: LD_INT 3
20521: NEG
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 2
20529: PUSH
20530: LD_INT 1
20532: NEG
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 3
20540: PUSH
20541: LD_INT 0
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 3
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 3
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: LD_INT 3
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 2
20580: PUSH
20581: LD_INT 3
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 2
20590: NEG
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 3
20601: NEG
20602: PUSH
20603: LD_INT 0
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 3
20612: NEG
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 3
20624: NEG
20625: PUSH
20626: LD_INT 2
20628: NEG
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 3
20636: NEG
20637: PUSH
20638: LD_INT 3
20640: NEG
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20677: LD_ADDR_VAR 0 42
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 0
20694: PUSH
20695: LD_INT 1
20697: NEG
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: LD_INT 1
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 1
20735: NEG
20736: PUSH
20737: LD_INT 0
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 1
20746: NEG
20747: PUSH
20748: LD_INT 1
20750: NEG
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 1
20758: NEG
20759: PUSH
20760: LD_INT 2
20762: NEG
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 0
20770: PUSH
20771: LD_INT 2
20773: NEG
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 1
20781: PUSH
20782: LD_INT 1
20784: NEG
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: LD_INT 1
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 1
20812: PUSH
20813: LD_INT 2
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: LD_INT 2
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 1
20832: NEG
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 2
20843: NEG
20844: PUSH
20845: LD_INT 1
20847: NEG
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 2
20855: NEG
20856: PUSH
20857: LD_INT 2
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 2
20867: NEG
20868: PUSH
20869: LD_INT 3
20871: NEG
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: LD_INT 3
20883: NEG
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: LD_INT 3
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 1
20902: PUSH
20903: LD_INT 2
20905: NEG
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 3
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 3
20923: PUSH
20924: LD_INT 3
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: LD_INT 3
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: PUSH
20944: LD_INT 3
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 0
20953: PUSH
20954: LD_INT 3
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 3
20974: NEG
20975: PUSH
20976: LD_INT 2
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 3
20986: NEG
20987: PUSH
20988: LD_INT 3
20990: NEG
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21027: LD_ADDR_VAR 0 43
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 1
21055: PUSH
21056: LD_INT 0
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 1
21065: PUSH
21066: LD_INT 1
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 0
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 1
21085: NEG
21086: PUSH
21087: LD_INT 0
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 1
21096: NEG
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 1
21108: NEG
21109: PUSH
21110: LD_INT 2
21112: NEG
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: LD_INT 2
21123: NEG
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 2
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: LD_INT 2
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 1
21182: NEG
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 2
21193: NEG
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 2
21204: NEG
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: LD_INT 3
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: LD_INT 3
21231: NEG
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: LD_INT 2
21242: NEG
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 2
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 3
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 3
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: PUSH
21282: LD_INT 3
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 3
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: LD_INT 2
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 2
21312: NEG
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 3
21323: NEG
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 3
21334: NEG
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21375: LD_ADDR_VAR 0 44
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 1
21456: NEG
21457: PUSH
21458: LD_INT 2
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 2
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: LD_INT 2
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 2
21541: NEG
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: NEG
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: NEG
21566: PUSH
21567: LD_INT 3
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 2
21577: PUSH
21578: LD_INT 1
21580: NEG
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 3
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 3
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 3
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 3
21618: PUSH
21619: LD_INT 3
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 2
21628: PUSH
21629: LD_INT 3
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 2
21638: NEG
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 3
21649: NEG
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 3
21660: NEG
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 3
21672: NEG
21673: PUSH
21674: LD_INT 2
21676: NEG
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 3
21684: NEG
21685: PUSH
21686: LD_INT 3
21688: NEG
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21725: LD_ADDR_VAR 0 45
21729: PUSH
21730: LD_INT 0
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: LD_INT 1
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 1
21783: NEG
21784: PUSH
21785: LD_INT 0
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: LD_INT 1
21798: NEG
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 1
21806: NEG
21807: PUSH
21808: LD_INT 2
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: LD_INT 2
21821: NEG
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 2
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 2
21850: PUSH
21851: LD_INT 2
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: LD_INT 2
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: LD_INT 2
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 1
21880: NEG
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 2
21891: NEG
21892: PUSH
21893: LD_INT 1
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: NEG
21904: PUSH
21905: LD_INT 2
21907: NEG
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 2
21915: NEG
21916: PUSH
21917: LD_INT 3
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 1
21927: NEG
21928: PUSH
21929: LD_INT 3
21931: NEG
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: LD_INT 3
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: PUSH
21951: LD_INT 2
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 3
21961: PUSH
21962: LD_INT 2
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 3
21971: PUSH
21972: LD_INT 3
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: LD_INT 3
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: LD_INT 3
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: LD_INT 3
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: LD_INT 2
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 3
22022: NEG
22023: PUSH
22024: LD_INT 2
22026: NEG
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 3
22034: NEG
22035: PUSH
22036: LD_INT 3
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22075: LD_ADDR_VAR 0 46
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: LD_INT 1
22095: NEG
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: LD_INT 1
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: NEG
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 1
22144: NEG
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: LD_INT 2
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: LD_INT 2
22171: NEG
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 1
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 2
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 1
22210: PUSH
22211: LD_INT 2
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 2
22241: NEG
22242: PUSH
22243: LD_INT 0
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 2
22252: NEG
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: LD_INT 3
22268: NEG
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 0
22276: PUSH
22277: LD_INT 3
22279: NEG
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 1
22287: PUSH
22288: LD_INT 2
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 3
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 3
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 1
22329: PUSH
22330: LD_INT 3
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: LD_INT 3
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 2
22360: NEG
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 3
22371: NEG
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 3
22382: NEG
22383: PUSH
22384: LD_INT 1
22386: NEG
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22423: LD_ADDR_VAR 0 47
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: LD_INT 0
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: LD_INT 1
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: NEG
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: LD_INT 2
22508: NEG
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: LD_INT 2
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: LD_INT 1
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: NEG
22539: PUSH
22540: LD_INT 1
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 2
22550: NEG
22551: PUSH
22552: LD_INT 2
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
22574: LD_ADDR_VAR 0 48
22578: PUSH
22579: LD_INT 0
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: LD_INT 1
22594: NEG
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 1
22632: NEG
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: LD_INT 2
22659: NEG
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: LD_INT 2
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 1
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: LD_INT 0
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
22721: LD_ADDR_VAR 0 49
22725: PUSH
22726: LD_INT 0
22728: PUSH
22729: LD_INT 0
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 0
22738: PUSH
22739: LD_INT 1
22741: NEG
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: LD_INT 0
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: LD_INT 1
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 0
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 1
22779: NEG
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: LD_INT 1
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 1
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
22865: LD_ADDR_VAR 0 50
22869: PUSH
22870: LD_INT 0
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 1
22893: PUSH
22894: LD_INT 0
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 1
22934: NEG
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 2
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: LD_INT 2
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: LD_INT 2
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23009: LD_ADDR_VAR 0 51
23013: PUSH
23014: LD_INT 0
23016: PUSH
23017: LD_INT 0
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: LD_INT 1
23029: NEG
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: LD_INT 1
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 1
23067: NEG
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 1
23078: NEG
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: LD_INT 2
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 0
23100: PUSH
23101: LD_INT 2
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 2
23121: NEG
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: NEG
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23156: LD_ADDR_VAR 0 52
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 2
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: NEG
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: NEG
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 2
23283: NEG
23284: PUSH
23285: LD_INT 2
23287: NEG
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23307: LD_ADDR_VAR 0 53
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: LD_INT 0
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: LD_INT 1
23327: NEG
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 1
23335: PUSH
23336: LD_INT 0
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 1
23365: NEG
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: NEG
23389: PUSH
23390: LD_INT 2
23392: NEG
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 2
23403: NEG
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 2
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: LD_INT 2
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 2
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: NEG
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: NEG
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 2
23494: NEG
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: LD_INT 2
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23537: LD_ADDR_VAR 0 54
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 1
23595: NEG
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: LD_INT 2
23622: NEG
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 2
23633: NEG
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: LD_INT 1
23644: NEG
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: LD_INT 2
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: LD_INT 2
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 2
23713: NEG
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: NEG
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 2
23736: NEG
23737: PUSH
23738: LD_INT 2
23740: NEG
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23767: LD_ADDR_VAR 0 55
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: LD_INT 0
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PUSH
23850: LD_INT 2
23852: NEG
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: LD_INT 2
23863: NEG
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 2
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 2
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 2
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: LD_INT 2
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 2
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 2
23943: NEG
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 2
23954: NEG
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 2
23966: NEG
23967: PUSH
23968: LD_INT 2
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23997: LD_ADDR_VAR 0 56
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: LD_INT 2
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 2
24093: NEG
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 1
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: LD_INT 0
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 2
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: LD_INT 2
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 1
24162: NEG
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 2
24173: NEG
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 2
24184: NEG
24185: PUSH
24186: LD_INT 1
24188: NEG
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: LD_INT 2
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24227: LD_ADDR_VAR 0 57
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: LD_INT 2
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: LD_INT 2
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 0
24382: PUSH
24383: LD_INT 2
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 2
24403: NEG
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 2
24414: NEG
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 2
24426: NEG
24427: PUSH
24428: LD_INT 2
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24457: LD_ADDR_VAR 0 58
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: LD_INT 2
24542: NEG
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: LD_INT 1
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 2
24572: PUSH
24573: LD_INT 0
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 2
24582: PUSH
24583: LD_INT 1
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 2
24592: PUSH
24593: LD_INT 2
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: LD_INT 2
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: NEG
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 2
24644: NEG
24645: PUSH
24646: LD_INT 1
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 2
24656: NEG
24657: PUSH
24658: LD_INT 2
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24687: LD_ADDR_VAR 0 59
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 1
24745: NEG
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: NEG
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24775: LD_ADDR_VAR 0 60
24779: PUSH
24780: LD_INT 0
24782: PUSH
24783: LD_INT 0
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: LD_INT 1
24795: NEG
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: LD_INT 1
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24863: LD_ADDR_VAR 0 61
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: LD_INT 1
24883: NEG
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: LD_INT 1
24936: NEG
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24951: LD_ADDR_VAR 0 62
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 0
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: NEG
25010: PUSH
25011: LD_INT 0
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 1
25020: NEG
25021: PUSH
25022: LD_INT 1
25024: NEG
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25039: LD_ADDR_VAR 0 63
25043: PUSH
25044: LD_INT 0
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: LD_INT 0
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25127: LD_ADDR_VAR 0 64
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 0
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 0
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: LD_INT 1
25200: NEG
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: ST_TO_ADDR
// end ; 1 :
25215: GO 31112
25217: LD_INT 1
25219: DOUBLE
25220: EQUAL
25221: IFTRUE 25225
25223: GO 27848
25225: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25226: LD_ADDR_VAR 0 11
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: LD_INT 3
25237: NEG
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 0
25245: PUSH
25246: LD_INT 3
25248: NEG
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: LD_INT 2
25259: NEG
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: LIST
25269: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25270: LD_ADDR_VAR 0 12
25274: PUSH
25275: LD_INT 2
25277: PUSH
25278: LD_INT 1
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 3
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 3
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25311: LD_ADDR_VAR 0 13
25315: PUSH
25316: LD_INT 3
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 3
25328: PUSH
25329: LD_INT 3
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: LD_INT 3
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25351: LD_ADDR_VAR 0 14
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: LD_INT 3
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: LIST
25391: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25392: LD_ADDR_VAR 0 15
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 3
25410: NEG
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 3
25421: NEG
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: LIST
25435: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25436: LD_ADDR_VAR 0 16
25440: PUSH
25441: LD_INT 2
25443: NEG
25444: PUSH
25445: LD_INT 3
25447: NEG
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 3
25455: NEG
25456: PUSH
25457: LD_INT 2
25459: NEG
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 3
25467: NEG
25468: PUSH
25469: LD_INT 3
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: LIST
25481: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25482: LD_ADDR_VAR 0 17
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: LD_INT 3
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: LD_INT 3
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: LIST
25525: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25526: LD_ADDR_VAR 0 18
25530: PUSH
25531: LD_INT 2
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 3
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 3
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25567: LD_ADDR_VAR 0 19
25571: PUSH
25572: LD_INT 3
25574: PUSH
25575: LD_INT 2
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 3
25584: PUSH
25585: LD_INT 3
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: LD_INT 3
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: LIST
25606: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25607: LD_ADDR_VAR 0 20
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: LD_INT 3
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: LD_INT 3
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: LD_INT 2
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: LIST
25647: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25648: LD_ADDR_VAR 0 21
25652: PUSH
25653: LD_INT 2
25655: NEG
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 3
25666: NEG
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 3
25677: NEG
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25692: LD_ADDR_VAR 0 22
25696: PUSH
25697: LD_INT 2
25699: NEG
25700: PUSH
25701: LD_INT 3
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 3
25711: NEG
25712: PUSH
25713: LD_INT 2
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 3
25723: NEG
25724: PUSH
25725: LD_INT 3
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
25738: LD_ADDR_VAR 0 23
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: LD_INT 3
25748: NEG
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 1
25756: NEG
25757: PUSH
25758: LD_INT 4
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: LD_INT 3
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
25782: LD_ADDR_VAR 0 24
25786: PUSH
25787: LD_INT 3
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 3
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 4
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
25823: LD_ADDR_VAR 0 25
25827: PUSH
25828: LD_INT 3
25830: PUSH
25831: LD_INT 3
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 4
25840: PUSH
25841: LD_INT 3
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 3
25850: PUSH
25851: LD_INT 4
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
25863: LD_ADDR_VAR 0 26
25867: PUSH
25868: LD_INT 0
25870: PUSH
25871: LD_INT 3
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: LD_INT 4
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: LD_INT 3
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: LIST
25903: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
25904: LD_ADDR_VAR 0 27
25908: PUSH
25909: LD_INT 3
25911: NEG
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 3
25922: NEG
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 4
25933: NEG
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: LIST
25947: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
25948: LD_ADDR_VAR 0 28
25952: PUSH
25953: LD_INT 3
25955: NEG
25956: PUSH
25957: LD_INT 3
25959: NEG
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 3
25967: NEG
25968: PUSH
25969: LD_INT 4
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 4
25979: NEG
25980: PUSH
25981: LD_INT 3
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
25994: LD_ADDR_VAR 0 29
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: LD_INT 3
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: LD_INT 3
26016: NEG
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: LD_INT 2
26027: NEG
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: LD_INT 4
26039: NEG
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: LD_INT 4
26050: NEG
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 3
26061: NEG
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 1
26069: NEG
26070: PUSH
26071: LD_INT 5
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 5
26084: NEG
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: LD_INT 4
26095: NEG
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: NEG
26104: PUSH
26105: LD_INT 6
26107: NEG
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: LD_INT 6
26118: NEG
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: LD_INT 5
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26149: LD_ADDR_VAR 0 30
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 3
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 3
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 3
26187: PUSH
26188: LD_INT 1
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 4
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 4
26208: PUSH
26209: LD_INT 1
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 4
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 5
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 5
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 5
26249: PUSH
26250: LD_INT 1
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 6
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 6
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
26292: LD_ADDR_VAR 0 31
26296: PUSH
26297: LD_INT 3
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 3
26309: PUSH
26310: LD_INT 3
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: PUSH
26320: LD_INT 3
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 4
26329: PUSH
26330: LD_INT 3
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 4
26339: PUSH
26340: LD_INT 4
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: LD_INT 4
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 5
26359: PUSH
26360: LD_INT 4
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 5
26369: PUSH
26370: LD_INT 5
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 4
26379: PUSH
26380: LD_INT 5
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 6
26389: PUSH
26390: LD_INT 5
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 6
26399: PUSH
26400: LD_INT 6
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 5
26409: PUSH
26410: LD_INT 6
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
26431: LD_ADDR_VAR 0 32
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: LD_INT 3
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: LD_INT 3
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: NEG
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: LD_INT 4
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: LD_INT 4
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: LD_INT 3
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: LD_INT 5
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: LD_INT 5
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: LD_INT 4
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: LD_INT 6
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: LD_INT 6
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 1
26551: NEG
26552: PUSH
26553: LD_INT 5
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
26574: LD_ADDR_VAR 0 33
26578: PUSH
26579: LD_INT 2
26581: NEG
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 3
26592: NEG
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 3
26603: NEG
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 3
26615: NEG
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 4
26626: NEG
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 4
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 4
26649: NEG
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 5
26660: NEG
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 5
26671: NEG
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 5
26683: NEG
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 6
26694: NEG
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 6
26705: NEG
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
26729: LD_ADDR_VAR 0 34
26733: PUSH
26734: LD_INT 2
26736: NEG
26737: PUSH
26738: LD_INT 3
26740: NEG
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 3
26748: NEG
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 3
26760: NEG
26761: PUSH
26762: LD_INT 3
26764: NEG
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 3
26772: NEG
26773: PUSH
26774: LD_INT 4
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 4
26784: NEG
26785: PUSH
26786: LD_INT 3
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 4
26796: NEG
26797: PUSH
26798: LD_INT 4
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 4
26808: NEG
26809: PUSH
26810: LD_INT 5
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 5
26820: NEG
26821: PUSH
26822: LD_INT 4
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 5
26832: NEG
26833: PUSH
26834: LD_INT 5
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 5
26844: NEG
26845: PUSH
26846: LD_INT 6
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 6
26856: NEG
26857: PUSH
26858: LD_INT 5
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 6
26868: NEG
26869: PUSH
26870: LD_INT 6
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
26892: LD_ADDR_VAR 0 41
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 2
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: LD_INT 3
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 2
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: LIST
26935: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
26936: LD_ADDR_VAR 0 42
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 2
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 3
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
26977: LD_ADDR_VAR 0 43
26981: PUSH
26982: LD_INT 2
26984: PUSH
26985: LD_INT 2
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 3
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: LD_INT 3
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27017: LD_ADDR_VAR 0 44
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 3
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: LIST
27057: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27058: LD_ADDR_VAR 0 45
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 2
27076: NEG
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 3
27087: NEG
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: LIST
27101: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27102: LD_ADDR_VAR 0 46
27106: PUSH
27107: LD_INT 2
27109: NEG
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: LD_INT 3
27125: NEG
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 3
27133: NEG
27134: PUSH
27135: LD_INT 2
27137: NEG
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: LIST
27147: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27148: LD_ADDR_VAR 0 47
27152: PUSH
27153: LD_INT 2
27155: NEG
27156: PUSH
27157: LD_INT 3
27159: NEG
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: LD_INT 3
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27181: LD_ADDR_VAR 0 48
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: LD_INT 2
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 2
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27212: LD_ADDR_VAR 0 49
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 3
27229: PUSH
27230: LD_INT 2
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27241: LD_ADDR_VAR 0 50
27245: PUSH
27246: LD_INT 2
27248: PUSH
27249: LD_INT 3
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27270: LD_ADDR_VAR 0 51
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 2
27288: NEG
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27301: LD_ADDR_VAR 0 52
27305: PUSH
27306: LD_INT 3
27308: NEG
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 3
27320: NEG
27321: PUSH
27322: LD_INT 2
27324: NEG
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27334: LD_ADDR_VAR 0 53
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: LD_INT 3
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: LD_INT 3
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 2
27367: NEG
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27378: LD_ADDR_VAR 0 54
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 3
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: LIST
27418: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27419: LD_ADDR_VAR 0 55
27423: PUSH
27424: LD_INT 3
27426: PUSH
27427: LD_INT 2
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 3
27436: PUSH
27437: LD_INT 3
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: PUSH
27447: LD_INT 3
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: LIST
27458: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27459: LD_ADDR_VAR 0 56
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: LD_INT 3
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: LD_INT 3
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: LIST
27499: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27500: LD_ADDR_VAR 0 57
27504: PUSH
27505: LD_INT 2
27507: NEG
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 3
27518: NEG
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 3
27529: NEG
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: LIST
27543: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27544: LD_ADDR_VAR 0 58
27548: PUSH
27549: LD_INT 2
27551: NEG
27552: PUSH
27553: LD_INT 3
27555: NEG
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 3
27563: NEG
27564: PUSH
27565: LD_INT 2
27567: NEG
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 3
27575: NEG
27576: PUSH
27577: LD_INT 3
27579: NEG
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: LIST
27589: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
27590: LD_ADDR_VAR 0 59
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: LD_INT 2
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27634: LD_ADDR_VAR 0 60
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 2
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27675: LD_ADDR_VAR 0 61
27679: PUSH
27680: LD_INT 2
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 2
27692: PUSH
27693: LD_INT 2
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: LD_INT 2
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27715: LD_ADDR_VAR 0 62
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: LIST
27755: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27756: LD_ADDR_VAR 0 63
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 2
27774: NEG
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 2
27785: NEG
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: LIST
27799: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27800: LD_ADDR_VAR 0 64
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 2
27819: NEG
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 2
27831: NEG
27832: PUSH
27833: LD_INT 2
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: LIST
27845: ST_TO_ADDR
// end ; 2 :
27846: GO 31112
27848: LD_INT 2
27850: DOUBLE
27851: EQUAL
27852: IFTRUE 27856
27854: GO 31111
27856: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
27857: LD_ADDR_VAR 0 29
27861: PUSH
27862: LD_INT 4
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 4
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 5
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 5
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 4
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 3
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 3
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 3
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 5
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 3
27957: PUSH
27958: LD_INT 3
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 3
27967: PUSH
27968: LD_INT 2
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 4
27977: PUSH
27978: LD_INT 3
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 4
27987: PUSH
27988: LD_INT 4
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: LD_INT 4
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: LD_INT 3
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 4
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: LD_INT 4
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: LD_INT 4
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: LD_INT 3
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: LD_INT 4
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: LD_INT 5
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: LD_INT 5
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: LD_INT 4
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: LD_INT 3
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 2
28119: PUSH
28120: LD_INT 5
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: LD_INT 3
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 3
28140: NEG
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 3
28151: NEG
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 2
28163: NEG
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: NEG
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 3
28185: NEG
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 4
28196: NEG
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 4
28207: NEG
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 4
28219: NEG
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: LD_INT 2
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 4
28242: NEG
28243: PUSH
28244: LD_INT 4
28246: NEG
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 4
28254: NEG
28255: PUSH
28256: LD_INT 5
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 3
28266: NEG
28267: PUSH
28268: LD_INT 4
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 3
28278: NEG
28279: PUSH
28280: LD_INT 3
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 4
28290: NEG
28291: PUSH
28292: LD_INT 3
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 5
28302: NEG
28303: PUSH
28304: LD_INT 4
28306: NEG
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 5
28314: NEG
28315: PUSH
28316: LD_INT 5
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 3
28326: NEG
28327: PUSH
28328: LD_INT 5
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 5
28338: NEG
28339: PUSH
28340: LD_INT 3
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
28395: LD_ADDR_VAR 0 30
28399: PUSH
28400: LD_INT 4
28402: PUSH
28403: LD_INT 4
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 4
28412: PUSH
28413: LD_INT 3
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 5
28422: PUSH
28423: LD_INT 4
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 5
28432: PUSH
28433: LD_INT 5
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 4
28442: PUSH
28443: LD_INT 5
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 3
28452: PUSH
28453: LD_INT 4
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: LD_INT 3
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 5
28472: PUSH
28473: LD_INT 3
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 3
28482: PUSH
28483: LD_INT 5
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: LD_INT 3
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: LD_INT 3
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: LD_INT 4
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: LD_INT 4
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: PUSH
28544: LD_INT 3
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 2
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 2
28564: PUSH
28565: LD_INT 4
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 2
28574: NEG
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 4
28585: NEG
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 4
28596: NEG
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 3
28608: NEG
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 3
28619: NEG
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 4
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 5
28641: NEG
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 5
28652: NEG
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 5
28664: NEG
28665: PUSH
28666: LD_INT 2
28668: NEG
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 3
28676: NEG
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 3
28687: NEG
28688: PUSH
28689: LD_INT 3
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 3
28699: NEG
28700: PUSH
28701: LD_INT 4
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: LD_INT 3
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 3
28735: NEG
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 4
28747: NEG
28748: PUSH
28749: LD_INT 3
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 4
28759: NEG
28760: PUSH
28761: LD_INT 4
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 2
28771: NEG
28772: PUSH
28773: LD_INT 4
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 4
28783: NEG
28784: PUSH
28785: LD_INT 2
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: LD_INT 4
28798: NEG
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: LD_INT 5
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 4
28820: NEG
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: LD_INT 3
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: LD_INT 3
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: LD_INT 4
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: LD_INT 5
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: LD_INT 3
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 2
28885: NEG
28886: PUSH
28887: LD_INT 5
28889: NEG
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
28942: LD_ADDR_VAR 0 31
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: LD_INT 4
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: LD_INT 3
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 4
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: LD_INT 5
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 5
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: LD_INT 4
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: LD_INT 3
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: LD_INT 5
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: LD_INT 3
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 3
29042: NEG
29043: PUSH
29044: LD_INT 0
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 3
29053: NEG
29054: PUSH
29055: LD_INT 1
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 2
29065: NEG
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 2
29076: NEG
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 3
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 4
29098: NEG
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 4
29109: NEG
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 4
29121: NEG
29122: PUSH
29123: LD_INT 2
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 2
29133: NEG
29134: PUSH
29135: LD_INT 2
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 4
29144: NEG
29145: PUSH
29146: LD_INT 4
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 4
29156: NEG
29157: PUSH
29158: LD_INT 5
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 3
29168: NEG
29169: PUSH
29170: LD_INT 4
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 3
29180: NEG
29181: PUSH
29182: LD_INT 3
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 4
29192: NEG
29193: PUSH
29194: LD_INT 3
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 5
29204: NEG
29205: PUSH
29206: LD_INT 4
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 5
29216: NEG
29217: PUSH
29218: LD_INT 5
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: NEG
29229: PUSH
29230: LD_INT 5
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 5
29240: NEG
29241: PUSH
29242: LD_INT 3
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 0
29252: PUSH
29253: LD_INT 3
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: LD_INT 4
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: LD_INT 3
29277: NEG
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: LD_INT 2
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: LD_INT 2
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 4
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: NEG
29343: PUSH
29344: LD_INT 4
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 4
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 4
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 5
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 5
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 4
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 3
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 3
29426: PUSH
29427: LD_INT 2
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 5
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
29492: LD_ADDR_VAR 0 32
29496: PUSH
29497: LD_INT 4
29499: NEG
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 4
29510: NEG
29511: PUSH
29512: LD_INT 1
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 3
29522: NEG
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 3
29533: NEG
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 4
29544: NEG
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 5
29555: NEG
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 5
29566: NEG
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 5
29578: NEG
29579: PUSH
29580: LD_INT 2
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 3
29590: NEG
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 3
29601: NEG
29602: PUSH
29603: LD_INT 3
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 3
29613: NEG
29614: PUSH
29615: LD_INT 4
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: NEG
29626: PUSH
29627: LD_INT 3
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 2
29637: NEG
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 3
29649: NEG
29650: PUSH
29651: LD_INT 2
29653: NEG
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 4
29661: NEG
29662: PUSH
29663: LD_INT 3
29665: NEG
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 4
29673: NEG
29674: PUSH
29675: LD_INT 4
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 2
29685: NEG
29686: PUSH
29687: LD_INT 4
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 4
29697: NEG
29698: PUSH
29699: LD_INT 2
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 4
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: LD_INT 5
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 1
29731: PUSH
29732: LD_INT 4
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: LD_INT 3
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: LD_INT 4
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: LD_INT 5
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 2
29788: PUSH
29789: LD_INT 3
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 2
29799: NEG
29800: PUSH
29801: LD_INT 5
29803: NEG
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 3
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 3
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 4
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 4
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 2
29883: PUSH
29884: LD_INT 2
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 4
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 4
29904: PUSH
29905: LD_INT 4
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 4
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 5
29924: PUSH
29925: LD_INT 4
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 5
29934: PUSH
29935: LD_INT 5
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 4
29944: PUSH
29945: LD_INT 5
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 3
29954: PUSH
29955: LD_INT 4
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 5
29974: PUSH
29975: LD_INT 3
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: LD_INT 5
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30039: LD_ADDR_VAR 0 33
30043: PUSH
30044: LD_INT 4
30046: NEG
30047: PUSH
30048: LD_INT 4
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 4
30058: NEG
30059: PUSH
30060: LD_INT 5
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 3
30070: NEG
30071: PUSH
30072: LD_INT 4
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 3
30082: NEG
30083: PUSH
30084: LD_INT 3
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 4
30094: NEG
30095: PUSH
30096: LD_INT 3
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 5
30106: NEG
30107: PUSH
30108: LD_INT 4
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 5
30118: NEG
30119: PUSH
30120: LD_INT 5
30122: NEG
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 3
30130: NEG
30131: PUSH
30132: LD_INT 5
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 5
30142: NEG
30143: PUSH
30144: LD_INT 3
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 3
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: LD_INT 4
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: LD_INT 3
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: LD_INT 2
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: LD_INT 2
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: LD_INT 3
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: LD_INT 4
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 2
30244: NEG
30245: PUSH
30246: LD_INT 4
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 4
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 4
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 5
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 5
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 4
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 3
30307: PUSH
30308: LD_INT 0
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 3
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 3
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 5
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 3
30349: PUSH
30350: LD_INT 3
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 4
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 4
30379: PUSH
30380: LD_INT 4
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 3
30389: PUSH
30390: LD_INT 4
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: LD_INT 2
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 4
30419: PUSH
30420: LD_INT 2
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 4
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: LD_INT 4
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 1
30459: PUSH
30460: LD_INT 4
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: LD_INT 5
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: LD_INT 5
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: NEG
30490: PUSH
30491: LD_INT 4
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: NEG
30501: PUSH
30502: LD_INT 3
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 5
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 2
30521: NEG
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
30577: LD_ADDR_VAR 0 34
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: LD_INT 4
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: LD_INT 5
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 4
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: LD_INT 3
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: LD_INT 3
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: LD_INT 4
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: NEG
30652: PUSH
30653: LD_INT 5
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: LD_INT 3
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 2
30674: NEG
30675: PUSH
30676: LD_INT 5
30678: NEG
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 4
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 4
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 2
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 2
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 4
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 4
30779: PUSH
30780: LD_INT 4
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 4
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 5
30799: PUSH
30800: LD_INT 4
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 5
30809: PUSH
30810: LD_INT 5
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 4
30819: PUSH
30820: LD_INT 5
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 3
30829: PUSH
30830: LD_INT 4
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 3
30839: PUSH
30840: LD_INT 3
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 5
30849: PUSH
30850: LD_INT 3
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 3
30859: PUSH
30860: LD_INT 5
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: LD_INT 3
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: LD_INT 2
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 4
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 4
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: LD_INT 4
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 2
30951: NEG
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 4
30962: NEG
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 4
30973: NEG
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 3
30985: NEG
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 3
30996: NEG
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 4
31007: NEG
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 5
31018: NEG
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 5
31029: NEG
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 5
31041: NEG
31042: PUSH
31043: LD_INT 2
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 3
31053: NEG
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: ST_TO_ADDR
// end ; end ;
31109: GO 31112
31111: POP
// case btype of b_depot , b_warehouse :
31112: LD_VAR 0 1
31116: PUSH
31117: LD_INT 0
31119: DOUBLE
31120: EQUAL
31121: IFTRUE 31131
31123: LD_INT 1
31125: DOUBLE
31126: EQUAL
31127: IFTRUE 31131
31129: GO 31332
31131: POP
// case nation of nation_american :
31132: LD_VAR 0 5
31136: PUSH
31137: LD_INT 1
31139: DOUBLE
31140: EQUAL
31141: IFTRUE 31145
31143: GO 31201
31145: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
31146: LD_ADDR_VAR 0 9
31150: PUSH
31151: LD_VAR 0 11
31155: PUSH
31156: LD_VAR 0 12
31160: PUSH
31161: LD_VAR 0 13
31165: PUSH
31166: LD_VAR 0 14
31170: PUSH
31171: LD_VAR 0 15
31175: PUSH
31176: LD_VAR 0 16
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: PUSH
31189: LD_VAR 0 4
31193: PUSH
31194: LD_INT 1
31196: PLUS
31197: ARRAY
31198: ST_TO_ADDR
31199: GO 31330
31201: LD_INT 2
31203: DOUBLE
31204: EQUAL
31205: IFTRUE 31209
31207: GO 31265
31209: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
31210: LD_ADDR_VAR 0 9
31214: PUSH
31215: LD_VAR 0 17
31219: PUSH
31220: LD_VAR 0 18
31224: PUSH
31225: LD_VAR 0 19
31229: PUSH
31230: LD_VAR 0 20
31234: PUSH
31235: LD_VAR 0 21
31239: PUSH
31240: LD_VAR 0 22
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: PUSH
31253: LD_VAR 0 4
31257: PUSH
31258: LD_INT 1
31260: PLUS
31261: ARRAY
31262: ST_TO_ADDR
31263: GO 31330
31265: LD_INT 3
31267: DOUBLE
31268: EQUAL
31269: IFTRUE 31273
31271: GO 31329
31273: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
31274: LD_ADDR_VAR 0 9
31278: PUSH
31279: LD_VAR 0 23
31283: PUSH
31284: LD_VAR 0 24
31288: PUSH
31289: LD_VAR 0 25
31293: PUSH
31294: LD_VAR 0 26
31298: PUSH
31299: LD_VAR 0 27
31303: PUSH
31304: LD_VAR 0 28
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: PUSH
31317: LD_VAR 0 4
31321: PUSH
31322: LD_INT 1
31324: PLUS
31325: ARRAY
31326: ST_TO_ADDR
31327: GO 31330
31329: POP
31330: GO 31885
31332: LD_INT 2
31334: DOUBLE
31335: EQUAL
31336: IFTRUE 31346
31338: LD_INT 3
31340: DOUBLE
31341: EQUAL
31342: IFTRUE 31346
31344: GO 31402
31346: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
31347: LD_ADDR_VAR 0 9
31351: PUSH
31352: LD_VAR 0 29
31356: PUSH
31357: LD_VAR 0 30
31361: PUSH
31362: LD_VAR 0 31
31366: PUSH
31367: LD_VAR 0 32
31371: PUSH
31372: LD_VAR 0 33
31376: PUSH
31377: LD_VAR 0 34
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: PUSH
31390: LD_VAR 0 4
31394: PUSH
31395: LD_INT 1
31397: PLUS
31398: ARRAY
31399: ST_TO_ADDR
31400: GO 31885
31402: LD_INT 16
31404: DOUBLE
31405: EQUAL
31406: IFTRUE 31464
31408: LD_INT 17
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31464
31414: LD_INT 18
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31464
31420: LD_INT 19
31422: DOUBLE
31423: EQUAL
31424: IFTRUE 31464
31426: LD_INT 22
31428: DOUBLE
31429: EQUAL
31430: IFTRUE 31464
31432: LD_INT 20
31434: DOUBLE
31435: EQUAL
31436: IFTRUE 31464
31438: LD_INT 21
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31464
31444: LD_INT 23
31446: DOUBLE
31447: EQUAL
31448: IFTRUE 31464
31450: LD_INT 24
31452: DOUBLE
31453: EQUAL
31454: IFTRUE 31464
31456: LD_INT 25
31458: DOUBLE
31459: EQUAL
31460: IFTRUE 31464
31462: GO 31520
31464: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
31465: LD_ADDR_VAR 0 9
31469: PUSH
31470: LD_VAR 0 35
31474: PUSH
31475: LD_VAR 0 36
31479: PUSH
31480: LD_VAR 0 37
31484: PUSH
31485: LD_VAR 0 38
31489: PUSH
31490: LD_VAR 0 39
31494: PUSH
31495: LD_VAR 0 40
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: PUSH
31508: LD_VAR 0 4
31512: PUSH
31513: LD_INT 1
31515: PLUS
31516: ARRAY
31517: ST_TO_ADDR
31518: GO 31885
31520: LD_INT 6
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31576
31526: LD_INT 7
31528: DOUBLE
31529: EQUAL
31530: IFTRUE 31576
31532: LD_INT 8
31534: DOUBLE
31535: EQUAL
31536: IFTRUE 31576
31538: LD_INT 13
31540: DOUBLE
31541: EQUAL
31542: IFTRUE 31576
31544: LD_INT 12
31546: DOUBLE
31547: EQUAL
31548: IFTRUE 31576
31550: LD_INT 15
31552: DOUBLE
31553: EQUAL
31554: IFTRUE 31576
31556: LD_INT 11
31558: DOUBLE
31559: EQUAL
31560: IFTRUE 31576
31562: LD_INT 14
31564: DOUBLE
31565: EQUAL
31566: IFTRUE 31576
31568: LD_INT 10
31570: DOUBLE
31571: EQUAL
31572: IFTRUE 31576
31574: GO 31632
31576: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
31577: LD_ADDR_VAR 0 9
31581: PUSH
31582: LD_VAR 0 41
31586: PUSH
31587: LD_VAR 0 42
31591: PUSH
31592: LD_VAR 0 43
31596: PUSH
31597: LD_VAR 0 44
31601: PUSH
31602: LD_VAR 0 45
31606: PUSH
31607: LD_VAR 0 46
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: PUSH
31620: LD_VAR 0 4
31624: PUSH
31625: LD_INT 1
31627: PLUS
31628: ARRAY
31629: ST_TO_ADDR
31630: GO 31885
31632: LD_INT 36
31634: DOUBLE
31635: EQUAL
31636: IFTRUE 31640
31638: GO 31696
31640: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
31641: LD_ADDR_VAR 0 9
31645: PUSH
31646: LD_VAR 0 47
31650: PUSH
31651: LD_VAR 0 48
31655: PUSH
31656: LD_VAR 0 49
31660: PUSH
31661: LD_VAR 0 50
31665: PUSH
31666: LD_VAR 0 51
31670: PUSH
31671: LD_VAR 0 52
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: PUSH
31684: LD_VAR 0 4
31688: PUSH
31689: LD_INT 1
31691: PLUS
31692: ARRAY
31693: ST_TO_ADDR
31694: GO 31885
31696: LD_INT 4
31698: DOUBLE
31699: EQUAL
31700: IFTRUE 31722
31702: LD_INT 5
31704: DOUBLE
31705: EQUAL
31706: IFTRUE 31722
31708: LD_INT 34
31710: DOUBLE
31711: EQUAL
31712: IFTRUE 31722
31714: LD_INT 37
31716: DOUBLE
31717: EQUAL
31718: IFTRUE 31722
31720: GO 31778
31722: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
31723: LD_ADDR_VAR 0 9
31727: PUSH
31728: LD_VAR 0 53
31732: PUSH
31733: LD_VAR 0 54
31737: PUSH
31738: LD_VAR 0 55
31742: PUSH
31743: LD_VAR 0 56
31747: PUSH
31748: LD_VAR 0 57
31752: PUSH
31753: LD_VAR 0 58
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: PUSH
31766: LD_VAR 0 4
31770: PUSH
31771: LD_INT 1
31773: PLUS
31774: ARRAY
31775: ST_TO_ADDR
31776: GO 31885
31778: LD_INT 31
31780: DOUBLE
31781: EQUAL
31782: IFTRUE 31828
31784: LD_INT 32
31786: DOUBLE
31787: EQUAL
31788: IFTRUE 31828
31790: LD_INT 33
31792: DOUBLE
31793: EQUAL
31794: IFTRUE 31828
31796: LD_INT 27
31798: DOUBLE
31799: EQUAL
31800: IFTRUE 31828
31802: LD_INT 26
31804: DOUBLE
31805: EQUAL
31806: IFTRUE 31828
31808: LD_INT 28
31810: DOUBLE
31811: EQUAL
31812: IFTRUE 31828
31814: LD_INT 29
31816: DOUBLE
31817: EQUAL
31818: IFTRUE 31828
31820: LD_INT 30
31822: DOUBLE
31823: EQUAL
31824: IFTRUE 31828
31826: GO 31884
31828: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
31829: LD_ADDR_VAR 0 9
31833: PUSH
31834: LD_VAR 0 59
31838: PUSH
31839: LD_VAR 0 60
31843: PUSH
31844: LD_VAR 0 61
31848: PUSH
31849: LD_VAR 0 62
31853: PUSH
31854: LD_VAR 0 63
31858: PUSH
31859: LD_VAR 0 64
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: PUSH
31872: LD_VAR 0 4
31876: PUSH
31877: LD_INT 1
31879: PLUS
31880: ARRAY
31881: ST_TO_ADDR
31882: GO 31885
31884: POP
// temp_list2 = [ ] ;
31885: LD_ADDR_VAR 0 10
31889: PUSH
31890: EMPTY
31891: ST_TO_ADDR
// for i in temp_list do
31892: LD_ADDR_VAR 0 8
31896: PUSH
31897: LD_VAR 0 9
31901: PUSH
31902: FOR_IN
31903: IFFALSE 31955
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
31905: LD_ADDR_VAR 0 10
31909: PUSH
31910: LD_VAR 0 10
31914: PUSH
31915: LD_VAR 0 8
31919: PUSH
31920: LD_INT 1
31922: ARRAY
31923: PUSH
31924: LD_VAR 0 2
31928: PLUS
31929: PUSH
31930: LD_VAR 0 8
31934: PUSH
31935: LD_INT 2
31937: ARRAY
31938: PUSH
31939: LD_VAR 0 3
31943: PLUS
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: EMPTY
31950: LIST
31951: ADD
31952: ST_TO_ADDR
31953: GO 31902
31955: POP
31956: POP
// result = temp_list2 ;
31957: LD_ADDR_VAR 0 7
31961: PUSH
31962: LD_VAR 0 10
31966: ST_TO_ADDR
// end ;
31967: LD_VAR 0 7
31971: RET
// export function EnemyInRange ( unit , dist ) ; begin
31972: LD_INT 0
31974: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
31975: LD_ADDR_VAR 0 3
31979: PUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL_OW 255
31989: PPUSH
31990: LD_VAR 0 1
31994: PPUSH
31995: CALL_OW 250
31999: PPUSH
32000: LD_VAR 0 1
32004: PPUSH
32005: CALL_OW 251
32009: PPUSH
32010: LD_VAR 0 2
32014: PPUSH
32015: CALL 6076 0 4
32019: PUSH
32020: LD_INT 4
32022: ARRAY
32023: ST_TO_ADDR
// end ;
32024: LD_VAR 0 3
32028: RET
// export function PlayerSeeMe ( unit ) ; begin
32029: LD_INT 0
32031: PPUSH
// result := See ( your_side , unit ) ;
32032: LD_ADDR_VAR 0 2
32036: PUSH
32037: LD_OWVAR 2
32041: PPUSH
32042: LD_VAR 0 1
32046: PPUSH
32047: CALL_OW 292
32051: ST_TO_ADDR
// end ;
32052: LD_VAR 0 2
32056: RET
// export function ReverseDir ( unit ) ; begin
32057: LD_INT 0
32059: PPUSH
// if not unit then
32060: LD_VAR 0 1
32064: NOT
32065: IFFALSE 32069
// exit ;
32067: GO 32092
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32069: LD_ADDR_VAR 0 2
32073: PUSH
32074: LD_VAR 0 1
32078: PPUSH
32079: CALL_OW 254
32083: PUSH
32084: LD_INT 3
32086: PLUS
32087: PUSH
32088: LD_INT 6
32090: MOD
32091: ST_TO_ADDR
// end ;
32092: LD_VAR 0 2
32096: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
32097: LD_INT 0
32099: PPUSH
32100: PPUSH
32101: PPUSH
32102: PPUSH
32103: PPUSH
// if not hexes then
32104: LD_VAR 0 2
32108: NOT
32109: IFFALSE 32113
// exit ;
32111: GO 32261
// dist := 9999 ;
32113: LD_ADDR_VAR 0 5
32117: PUSH
32118: LD_INT 9999
32120: ST_TO_ADDR
// for i = 1 to hexes do
32121: LD_ADDR_VAR 0 4
32125: PUSH
32126: DOUBLE
32127: LD_INT 1
32129: DEC
32130: ST_TO_ADDR
32131: LD_VAR 0 2
32135: PUSH
32136: FOR_TO
32137: IFFALSE 32249
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
32139: LD_VAR 0 1
32143: PPUSH
32144: LD_VAR 0 2
32148: PUSH
32149: LD_VAR 0 4
32153: ARRAY
32154: PUSH
32155: LD_INT 1
32157: ARRAY
32158: PPUSH
32159: LD_VAR 0 2
32163: PUSH
32164: LD_VAR 0 4
32168: ARRAY
32169: PUSH
32170: LD_INT 2
32172: ARRAY
32173: PPUSH
32174: CALL_OW 297
32178: PUSH
32179: LD_VAR 0 5
32183: LESS
32184: IFFALSE 32247
// begin hex := hexes [ i ] ;
32186: LD_ADDR_VAR 0 7
32190: PUSH
32191: LD_VAR 0 2
32195: PUSH
32196: LD_VAR 0 4
32200: ARRAY
32201: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32202: LD_ADDR_VAR 0 5
32206: PUSH
32207: LD_VAR 0 1
32211: PPUSH
32212: LD_VAR 0 2
32216: PUSH
32217: LD_VAR 0 4
32221: ARRAY
32222: PUSH
32223: LD_INT 1
32225: ARRAY
32226: PPUSH
32227: LD_VAR 0 2
32231: PUSH
32232: LD_VAR 0 4
32236: ARRAY
32237: PUSH
32238: LD_INT 2
32240: ARRAY
32241: PPUSH
32242: CALL_OW 297
32246: ST_TO_ADDR
// end ; end ;
32247: GO 32136
32249: POP
32250: POP
// result := hex ;
32251: LD_ADDR_VAR 0 3
32255: PUSH
32256: LD_VAR 0 7
32260: ST_TO_ADDR
// end ;
32261: LD_VAR 0 3
32265: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
32266: LD_INT 0
32268: PPUSH
32269: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32270: LD_VAR 0 1
32274: NOT
32275: PUSH
32276: LD_VAR 0 1
32280: PUSH
32281: LD_INT 21
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 23
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PPUSH
32305: CALL_OW 69
32309: IN
32310: NOT
32311: OR
32312: IFFALSE 32316
// exit ;
32314: GO 32363
// for i = 1 to 3 do
32316: LD_ADDR_VAR 0 3
32320: PUSH
32321: DOUBLE
32322: LD_INT 1
32324: DEC
32325: ST_TO_ADDR
32326: LD_INT 3
32328: PUSH
32329: FOR_TO
32330: IFFALSE 32361
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
32332: LD_VAR 0 1
32336: PPUSH
32337: CALL_OW 250
32341: PPUSH
32342: LD_VAR 0 1
32346: PPUSH
32347: CALL_OW 251
32351: PPUSH
32352: LD_INT 1
32354: PPUSH
32355: CALL_OW 453
32359: GO 32329
32361: POP
32362: POP
// end ;
32363: LD_VAR 0 2
32367: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
32368: LD_INT 0
32370: PPUSH
32371: PPUSH
32372: PPUSH
32373: PPUSH
32374: PPUSH
32375: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
32376: LD_VAR 0 1
32380: NOT
32381: PUSH
32382: LD_VAR 0 2
32386: NOT
32387: OR
32388: PUSH
32389: LD_VAR 0 1
32393: PPUSH
32394: CALL_OW 314
32398: OR
32399: IFFALSE 32403
// exit ;
32401: GO 32844
// x := GetX ( enemy_unit ) ;
32403: LD_ADDR_VAR 0 7
32407: PUSH
32408: LD_VAR 0 2
32412: PPUSH
32413: CALL_OW 250
32417: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
32418: LD_ADDR_VAR 0 8
32422: PUSH
32423: LD_VAR 0 2
32427: PPUSH
32428: CALL_OW 251
32432: ST_TO_ADDR
// if not x or not y then
32433: LD_VAR 0 7
32437: NOT
32438: PUSH
32439: LD_VAR 0 8
32443: NOT
32444: OR
32445: IFFALSE 32449
// exit ;
32447: GO 32844
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
32449: LD_ADDR_VAR 0 6
32453: PUSH
32454: LD_VAR 0 7
32458: PPUSH
32459: LD_INT 0
32461: PPUSH
32462: LD_INT 4
32464: PPUSH
32465: CALL_OW 272
32469: PUSH
32470: LD_VAR 0 8
32474: PPUSH
32475: LD_INT 0
32477: PPUSH
32478: LD_INT 4
32480: PPUSH
32481: CALL_OW 273
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_VAR 0 7
32494: PPUSH
32495: LD_INT 1
32497: PPUSH
32498: LD_INT 4
32500: PPUSH
32501: CALL_OW 272
32505: PUSH
32506: LD_VAR 0 8
32510: PPUSH
32511: LD_INT 1
32513: PPUSH
32514: LD_INT 4
32516: PPUSH
32517: CALL_OW 273
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_VAR 0 7
32530: PPUSH
32531: LD_INT 2
32533: PPUSH
32534: LD_INT 4
32536: PPUSH
32537: CALL_OW 272
32541: PUSH
32542: LD_VAR 0 8
32546: PPUSH
32547: LD_INT 2
32549: PPUSH
32550: LD_INT 4
32552: PPUSH
32553: CALL_OW 273
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_VAR 0 7
32566: PPUSH
32567: LD_INT 3
32569: PPUSH
32570: LD_INT 4
32572: PPUSH
32573: CALL_OW 272
32577: PUSH
32578: LD_VAR 0 8
32582: PPUSH
32583: LD_INT 3
32585: PPUSH
32586: LD_INT 4
32588: PPUSH
32589: CALL_OW 273
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_VAR 0 7
32602: PPUSH
32603: LD_INT 4
32605: PPUSH
32606: LD_INT 4
32608: PPUSH
32609: CALL_OW 272
32613: PUSH
32614: LD_VAR 0 8
32618: PPUSH
32619: LD_INT 4
32621: PPUSH
32622: LD_INT 4
32624: PPUSH
32625: CALL_OW 273
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_VAR 0 7
32638: PPUSH
32639: LD_INT 5
32641: PPUSH
32642: LD_INT 4
32644: PPUSH
32645: CALL_OW 272
32649: PUSH
32650: LD_VAR 0 8
32654: PPUSH
32655: LD_INT 5
32657: PPUSH
32658: LD_INT 4
32660: PPUSH
32661: CALL_OW 273
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: ST_TO_ADDR
// for i = tmp downto 1 do
32678: LD_ADDR_VAR 0 4
32682: PUSH
32683: DOUBLE
32684: LD_VAR 0 6
32688: INC
32689: ST_TO_ADDR
32690: LD_INT 1
32692: PUSH
32693: FOR_DOWNTO
32694: IFFALSE 32795
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
32696: LD_VAR 0 6
32700: PUSH
32701: LD_VAR 0 4
32705: ARRAY
32706: PUSH
32707: LD_INT 1
32709: ARRAY
32710: PPUSH
32711: LD_VAR 0 6
32715: PUSH
32716: LD_VAR 0 4
32720: ARRAY
32721: PUSH
32722: LD_INT 2
32724: ARRAY
32725: PPUSH
32726: CALL_OW 488
32730: NOT
32731: PUSH
32732: LD_VAR 0 6
32736: PUSH
32737: LD_VAR 0 4
32741: ARRAY
32742: PUSH
32743: LD_INT 1
32745: ARRAY
32746: PPUSH
32747: LD_VAR 0 6
32751: PUSH
32752: LD_VAR 0 4
32756: ARRAY
32757: PUSH
32758: LD_INT 2
32760: ARRAY
32761: PPUSH
32762: CALL_OW 428
32766: PUSH
32767: LD_INT 0
32769: NONEQUAL
32770: OR
32771: IFFALSE 32793
// tmp := Delete ( tmp , i ) ;
32773: LD_ADDR_VAR 0 6
32777: PUSH
32778: LD_VAR 0 6
32782: PPUSH
32783: LD_VAR 0 4
32787: PPUSH
32788: CALL_OW 3
32792: ST_TO_ADDR
32793: GO 32693
32795: POP
32796: POP
// j := GetClosestHex ( unit , tmp ) ;
32797: LD_ADDR_VAR 0 5
32801: PUSH
32802: LD_VAR 0 1
32806: PPUSH
32807: LD_VAR 0 6
32811: PPUSH
32812: CALL 32097 0 2
32816: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
32817: LD_VAR 0 1
32821: PPUSH
32822: LD_VAR 0 5
32826: PUSH
32827: LD_INT 1
32829: ARRAY
32830: PPUSH
32831: LD_VAR 0 5
32835: PUSH
32836: LD_INT 2
32838: ARRAY
32839: PPUSH
32840: CALL_OW 111
// end ;
32844: LD_VAR 0 3
32848: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
32849: LD_INT 0
32851: PPUSH
32852: PPUSH
32853: PPUSH
// uc_side = 0 ;
32854: LD_ADDR_OWVAR 20
32858: PUSH
32859: LD_INT 0
32861: ST_TO_ADDR
// uc_nation = 0 ;
32862: LD_ADDR_OWVAR 21
32866: PUSH
32867: LD_INT 0
32869: ST_TO_ADDR
// InitHc ;
32870: CALL_OW 19
// InitVc ;
32874: CALL_OW 20
// if mastodonts then
32878: LD_VAR 0 6
32882: IFFALSE 32949
// for i = 1 to mastodonts do
32884: LD_ADDR_VAR 0 11
32888: PUSH
32889: DOUBLE
32890: LD_INT 1
32892: DEC
32893: ST_TO_ADDR
32894: LD_VAR 0 6
32898: PUSH
32899: FOR_TO
32900: IFFALSE 32947
// begin vc_chassis := 31 ;
32902: LD_ADDR_OWVAR 37
32906: PUSH
32907: LD_INT 31
32909: ST_TO_ADDR
// vc_control := control_rider ;
32910: LD_ADDR_OWVAR 38
32914: PUSH
32915: LD_INT 4
32917: ST_TO_ADDR
// animal := CreateVehicle ;
32918: LD_ADDR_VAR 0 12
32922: PUSH
32923: CALL_OW 45
32927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
32928: LD_VAR 0 12
32932: PPUSH
32933: LD_VAR 0 8
32937: PPUSH
32938: LD_INT 0
32940: PPUSH
32941: CALL 35018 0 3
// end ;
32945: GO 32899
32947: POP
32948: POP
// if horses then
32949: LD_VAR 0 5
32953: IFFALSE 33020
// for i = 1 to horses do
32955: LD_ADDR_VAR 0 11
32959: PUSH
32960: DOUBLE
32961: LD_INT 1
32963: DEC
32964: ST_TO_ADDR
32965: LD_VAR 0 5
32969: PUSH
32970: FOR_TO
32971: IFFALSE 33018
// begin hc_class := 21 ;
32973: LD_ADDR_OWVAR 28
32977: PUSH
32978: LD_INT 21
32980: ST_TO_ADDR
// hc_gallery :=  ;
32981: LD_ADDR_OWVAR 33
32985: PUSH
32986: LD_STRING 
32988: ST_TO_ADDR
// animal := CreateHuman ;
32989: LD_ADDR_VAR 0 12
32993: PUSH
32994: CALL_OW 44
32998: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
32999: LD_VAR 0 12
33003: PPUSH
33004: LD_VAR 0 8
33008: PPUSH
33009: LD_INT 0
33011: PPUSH
33012: CALL 35018 0 3
// end ;
33016: GO 32970
33018: POP
33019: POP
// if birds then
33020: LD_VAR 0 1
33024: IFFALSE 33091
// for i = 1 to birds do
33026: LD_ADDR_VAR 0 11
33030: PUSH
33031: DOUBLE
33032: LD_INT 1
33034: DEC
33035: ST_TO_ADDR
33036: LD_VAR 0 1
33040: PUSH
33041: FOR_TO
33042: IFFALSE 33089
// begin hc_class = 18 ;
33044: LD_ADDR_OWVAR 28
33048: PUSH
33049: LD_INT 18
33051: ST_TO_ADDR
// hc_gallery =  ;
33052: LD_ADDR_OWVAR 33
33056: PUSH
33057: LD_STRING 
33059: ST_TO_ADDR
// animal := CreateHuman ;
33060: LD_ADDR_VAR 0 12
33064: PUSH
33065: CALL_OW 44
33069: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33070: LD_VAR 0 12
33074: PPUSH
33075: LD_VAR 0 8
33079: PPUSH
33080: LD_INT 0
33082: PPUSH
33083: CALL 35018 0 3
// end ;
33087: GO 33041
33089: POP
33090: POP
// if tigers then
33091: LD_VAR 0 2
33095: IFFALSE 33179
// for i = 1 to tigers do
33097: LD_ADDR_VAR 0 11
33101: PUSH
33102: DOUBLE
33103: LD_INT 1
33105: DEC
33106: ST_TO_ADDR
33107: LD_VAR 0 2
33111: PUSH
33112: FOR_TO
33113: IFFALSE 33177
// begin hc_class = class_tiger ;
33115: LD_ADDR_OWVAR 28
33119: PUSH
33120: LD_INT 14
33122: ST_TO_ADDR
// hc_gallery =  ;
33123: LD_ADDR_OWVAR 33
33127: PUSH
33128: LD_STRING 
33130: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
33131: LD_ADDR_OWVAR 35
33135: PUSH
33136: LD_INT 7
33138: NEG
33139: PPUSH
33140: LD_INT 7
33142: PPUSH
33143: CALL_OW 12
33147: ST_TO_ADDR
// animal := CreateHuman ;
33148: LD_ADDR_VAR 0 12
33152: PUSH
33153: CALL_OW 44
33157: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33158: LD_VAR 0 12
33162: PPUSH
33163: LD_VAR 0 8
33167: PPUSH
33168: LD_INT 0
33170: PPUSH
33171: CALL 35018 0 3
// end ;
33175: GO 33112
33177: POP
33178: POP
// if apemans then
33179: LD_VAR 0 3
33183: IFFALSE 33306
// for i = 1 to apemans do
33185: LD_ADDR_VAR 0 11
33189: PUSH
33190: DOUBLE
33191: LD_INT 1
33193: DEC
33194: ST_TO_ADDR
33195: LD_VAR 0 3
33199: PUSH
33200: FOR_TO
33201: IFFALSE 33304
// begin hc_class = class_apeman ;
33203: LD_ADDR_OWVAR 28
33207: PUSH
33208: LD_INT 12
33210: ST_TO_ADDR
// hc_gallery =  ;
33211: LD_ADDR_OWVAR 33
33215: PUSH
33216: LD_STRING 
33218: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
33219: LD_ADDR_OWVAR 35
33223: PUSH
33224: LD_INT 5
33226: NEG
33227: PPUSH
33228: LD_INT 5
33230: PPUSH
33231: CALL_OW 12
33235: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
33236: LD_ADDR_OWVAR 31
33240: PUSH
33241: LD_INT 1
33243: PPUSH
33244: LD_INT 3
33246: PPUSH
33247: CALL_OW 12
33251: PUSH
33252: LD_INT 1
33254: PPUSH
33255: LD_INT 3
33257: PPUSH
33258: CALL_OW 12
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
// animal := CreateHuman ;
33275: LD_ADDR_VAR 0 12
33279: PUSH
33280: CALL_OW 44
33284: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33285: LD_VAR 0 12
33289: PPUSH
33290: LD_VAR 0 8
33294: PPUSH
33295: LD_INT 0
33297: PPUSH
33298: CALL 35018 0 3
// end ;
33302: GO 33200
33304: POP
33305: POP
// if enchidnas then
33306: LD_VAR 0 4
33310: IFFALSE 33377
// for i = 1 to enchidnas do
33312: LD_ADDR_VAR 0 11
33316: PUSH
33317: DOUBLE
33318: LD_INT 1
33320: DEC
33321: ST_TO_ADDR
33322: LD_VAR 0 4
33326: PUSH
33327: FOR_TO
33328: IFFALSE 33375
// begin hc_class = 13 ;
33330: LD_ADDR_OWVAR 28
33334: PUSH
33335: LD_INT 13
33337: ST_TO_ADDR
// hc_gallery =  ;
33338: LD_ADDR_OWVAR 33
33342: PUSH
33343: LD_STRING 
33345: ST_TO_ADDR
// animal := CreateHuman ;
33346: LD_ADDR_VAR 0 12
33350: PUSH
33351: CALL_OW 44
33355: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33356: LD_VAR 0 12
33360: PPUSH
33361: LD_VAR 0 8
33365: PPUSH
33366: LD_INT 0
33368: PPUSH
33369: CALL 35018 0 3
// end ;
33373: GO 33327
33375: POP
33376: POP
// if fishes then
33377: LD_VAR 0 7
33381: IFFALSE 33448
// for i = 1 to fishes do
33383: LD_ADDR_VAR 0 11
33387: PUSH
33388: DOUBLE
33389: LD_INT 1
33391: DEC
33392: ST_TO_ADDR
33393: LD_VAR 0 7
33397: PUSH
33398: FOR_TO
33399: IFFALSE 33446
// begin hc_class = 20 ;
33401: LD_ADDR_OWVAR 28
33405: PUSH
33406: LD_INT 20
33408: ST_TO_ADDR
// hc_gallery =  ;
33409: LD_ADDR_OWVAR 33
33413: PUSH
33414: LD_STRING 
33416: ST_TO_ADDR
// animal := CreateHuman ;
33417: LD_ADDR_VAR 0 12
33421: PUSH
33422: CALL_OW 44
33426: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
33427: LD_VAR 0 12
33431: PPUSH
33432: LD_VAR 0 9
33436: PPUSH
33437: LD_INT 0
33439: PPUSH
33440: CALL 35018 0 3
// end ;
33444: GO 33398
33446: POP
33447: POP
// end ;
33448: LD_VAR 0 10
33452: RET
// export function WantHeal ( sci , unit ) ; begin
33453: LD_INT 0
33455: PPUSH
// if GetTaskList ( sci ) > 0 then
33456: LD_VAR 0 1
33460: PPUSH
33461: CALL_OW 437
33465: PUSH
33466: LD_INT 0
33468: GREATER
33469: IFFALSE 33539
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL_OW 437
33480: PUSH
33481: LD_INT 1
33483: ARRAY
33484: PUSH
33485: LD_INT 1
33487: ARRAY
33488: PUSH
33489: LD_STRING l
33491: EQUAL
33492: PUSH
33493: LD_VAR 0 1
33497: PPUSH
33498: CALL_OW 437
33502: PUSH
33503: LD_INT 1
33505: ARRAY
33506: PUSH
33507: LD_INT 4
33509: ARRAY
33510: PUSH
33511: LD_VAR 0 2
33515: EQUAL
33516: AND
33517: IFFALSE 33529
// result := true else
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: LD_INT 1
33526: ST_TO_ADDR
33527: GO 33537
// result := false ;
33529: LD_ADDR_VAR 0 3
33533: PUSH
33534: LD_INT 0
33536: ST_TO_ADDR
// end else
33537: GO 33547
// result := false ;
33539: LD_ADDR_VAR 0 3
33543: PUSH
33544: LD_INT 0
33546: ST_TO_ADDR
// end ;
33547: LD_VAR 0 3
33551: RET
// export function HealTarget ( sci ) ; begin
33552: LD_INT 0
33554: PPUSH
// if not sci then
33555: LD_VAR 0 1
33559: NOT
33560: IFFALSE 33564
// exit ;
33562: GO 33629
// result := 0 ;
33564: LD_ADDR_VAR 0 2
33568: PUSH
33569: LD_INT 0
33571: ST_TO_ADDR
// if GetTaskList ( sci ) then
33572: LD_VAR 0 1
33576: PPUSH
33577: CALL_OW 437
33581: IFFALSE 33629
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
33583: LD_VAR 0 1
33587: PPUSH
33588: CALL_OW 437
33592: PUSH
33593: LD_INT 1
33595: ARRAY
33596: PUSH
33597: LD_INT 1
33599: ARRAY
33600: PUSH
33601: LD_STRING l
33603: EQUAL
33604: IFFALSE 33629
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
33606: LD_ADDR_VAR 0 2
33610: PUSH
33611: LD_VAR 0 1
33615: PPUSH
33616: CALL_OW 437
33620: PUSH
33621: LD_INT 1
33623: ARRAY
33624: PUSH
33625: LD_INT 4
33627: ARRAY
33628: ST_TO_ADDR
// end ;
33629: LD_VAR 0 2
33633: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
33634: LD_INT 0
33636: PPUSH
33637: PPUSH
33638: PPUSH
33639: PPUSH
// if not base_units then
33640: LD_VAR 0 1
33644: NOT
33645: IFFALSE 33649
// exit ;
33647: GO 33736
// result := false ;
33649: LD_ADDR_VAR 0 2
33653: PUSH
33654: LD_INT 0
33656: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
33657: LD_ADDR_VAR 0 5
33661: PUSH
33662: LD_VAR 0 1
33666: PPUSH
33667: LD_INT 21
33669: PUSH
33670: LD_INT 3
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PPUSH
33677: CALL_OW 72
33681: ST_TO_ADDR
// if not tmp then
33682: LD_VAR 0 5
33686: NOT
33687: IFFALSE 33691
// exit ;
33689: GO 33736
// for i in tmp do
33691: LD_ADDR_VAR 0 3
33695: PUSH
33696: LD_VAR 0 5
33700: PUSH
33701: FOR_IN
33702: IFFALSE 33734
// begin result := EnemyInRange ( i , 22 ) ;
33704: LD_ADDR_VAR 0 2
33708: PUSH
33709: LD_VAR 0 3
33713: PPUSH
33714: LD_INT 22
33716: PPUSH
33717: CALL 31972 0 2
33721: ST_TO_ADDR
// if result then
33722: LD_VAR 0 2
33726: IFFALSE 33732
// exit ;
33728: POP
33729: POP
33730: GO 33736
// end ;
33732: GO 33701
33734: POP
33735: POP
// end ;
33736: LD_VAR 0 2
33740: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
33741: LD_INT 0
33743: PPUSH
33744: PPUSH
// if not units then
33745: LD_VAR 0 1
33749: NOT
33750: IFFALSE 33754
// exit ;
33752: GO 33824
// result := [ ] ;
33754: LD_ADDR_VAR 0 3
33758: PUSH
33759: EMPTY
33760: ST_TO_ADDR
// for i in units do
33761: LD_ADDR_VAR 0 4
33765: PUSH
33766: LD_VAR 0 1
33770: PUSH
33771: FOR_IN
33772: IFFALSE 33822
// if GetTag ( i ) = tag then
33774: LD_VAR 0 4
33778: PPUSH
33779: CALL_OW 110
33783: PUSH
33784: LD_VAR 0 2
33788: EQUAL
33789: IFFALSE 33820
// result := Insert ( result , result + 1 , i ) ;
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_VAR 0 3
33800: PPUSH
33801: LD_VAR 0 3
33805: PUSH
33806: LD_INT 1
33808: PLUS
33809: PPUSH
33810: LD_VAR 0 4
33814: PPUSH
33815: CALL_OW 2
33819: ST_TO_ADDR
33820: GO 33771
33822: POP
33823: POP
// end ;
33824: LD_VAR 0 3
33828: RET
// export function IsDriver ( un ) ; begin
33829: LD_INT 0
33831: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
33832: LD_ADDR_VAR 0 2
33836: PUSH
33837: LD_VAR 0 1
33841: PUSH
33842: LD_INT 55
33844: PUSH
33845: EMPTY
33846: LIST
33847: PPUSH
33848: CALL_OW 69
33852: IN
33853: ST_TO_ADDR
// end ;
33854: LD_VAR 0 2
33858: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
33859: LD_INT 0
33861: PPUSH
33862: PPUSH
// list := [ ] ;
33863: LD_ADDR_VAR 0 5
33867: PUSH
33868: EMPTY
33869: ST_TO_ADDR
// case d of 0 :
33870: LD_VAR 0 3
33874: PUSH
33875: LD_INT 0
33877: DOUBLE
33878: EQUAL
33879: IFTRUE 33883
33881: GO 34016
33883: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
33884: LD_ADDR_VAR 0 5
33888: PUSH
33889: LD_VAR 0 1
33893: PUSH
33894: LD_INT 4
33896: MINUS
33897: PUSH
33898: LD_VAR 0 2
33902: PUSH
33903: LD_INT 4
33905: MINUS
33906: PUSH
33907: LD_INT 2
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: PUSH
33915: LD_VAR 0 1
33919: PUSH
33920: LD_INT 3
33922: MINUS
33923: PUSH
33924: LD_VAR 0 2
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: PUSH
33937: LD_VAR 0 1
33941: PUSH
33942: LD_INT 4
33944: PLUS
33945: PUSH
33946: LD_VAR 0 2
33950: PUSH
33951: LD_INT 4
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: PUSH
33959: LD_VAR 0 1
33963: PUSH
33964: LD_INT 3
33966: PLUS
33967: PUSH
33968: LD_VAR 0 2
33972: PUSH
33973: LD_INT 3
33975: PLUS
33976: PUSH
33977: LD_INT 5
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: PUSH
33985: LD_VAR 0 1
33989: PUSH
33990: LD_VAR 0 2
33994: PUSH
33995: LD_INT 4
33997: PLUS
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: ST_TO_ADDR
// end ; 1 :
34014: GO 34714
34016: LD_INT 1
34018: DOUBLE
34019: EQUAL
34020: IFTRUE 34024
34022: GO 34157
34024: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
34025: LD_ADDR_VAR 0 5
34029: PUSH
34030: LD_VAR 0 1
34034: PUSH
34035: LD_VAR 0 2
34039: PUSH
34040: LD_INT 4
34042: MINUS
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: PUSH
34052: LD_VAR 0 1
34056: PUSH
34057: LD_INT 3
34059: MINUS
34060: PUSH
34061: LD_VAR 0 2
34065: PUSH
34066: LD_INT 3
34068: MINUS
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: PUSH
34078: LD_VAR 0 1
34082: PUSH
34083: LD_INT 4
34085: MINUS
34086: PUSH
34087: LD_VAR 0 2
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: LIST
34099: PUSH
34100: LD_VAR 0 1
34104: PUSH
34105: LD_VAR 0 2
34109: PUSH
34110: LD_INT 3
34112: PLUS
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: PUSH
34122: LD_VAR 0 1
34126: PUSH
34127: LD_INT 4
34129: PLUS
34130: PUSH
34131: LD_VAR 0 2
34135: PUSH
34136: LD_INT 4
34138: PLUS
34139: PUSH
34140: LD_INT 5
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: ST_TO_ADDR
// end ; 2 :
34155: GO 34714
34157: LD_INT 2
34159: DOUBLE
34160: EQUAL
34161: IFTRUE 34165
34163: GO 34294
34165: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
34166: LD_ADDR_VAR 0 5
34170: PUSH
34171: LD_VAR 0 1
34175: PUSH
34176: LD_VAR 0 2
34180: PUSH
34181: LD_INT 3
34183: MINUS
34184: PUSH
34185: LD_INT 3
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: PUSH
34193: LD_VAR 0 1
34197: PUSH
34198: LD_INT 4
34200: PLUS
34201: PUSH
34202: LD_VAR 0 2
34206: PUSH
34207: LD_INT 4
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: PUSH
34215: LD_VAR 0 1
34219: PUSH
34220: LD_VAR 0 2
34224: PUSH
34225: LD_INT 4
34227: PLUS
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: PUSH
34237: LD_VAR 0 1
34241: PUSH
34242: LD_INT 3
34244: MINUS
34245: PUSH
34246: LD_VAR 0 2
34250: PUSH
34251: LD_INT 1
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: PUSH
34259: LD_VAR 0 1
34263: PUSH
34264: LD_INT 4
34266: MINUS
34267: PUSH
34268: LD_VAR 0 2
34272: PUSH
34273: LD_INT 4
34275: MINUS
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: ST_TO_ADDR
// end ; 3 :
34292: GO 34714
34294: LD_INT 3
34296: DOUBLE
34297: EQUAL
34298: IFTRUE 34302
34300: GO 34435
34302: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
34303: LD_ADDR_VAR 0 5
34307: PUSH
34308: LD_VAR 0 1
34312: PUSH
34313: LD_INT 3
34315: PLUS
34316: PUSH
34317: LD_VAR 0 2
34321: PUSH
34322: LD_INT 4
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: LIST
34329: PUSH
34330: LD_VAR 0 1
34334: PUSH
34335: LD_INT 4
34337: PLUS
34338: PUSH
34339: LD_VAR 0 2
34343: PUSH
34344: LD_INT 4
34346: PLUS
34347: PUSH
34348: LD_INT 5
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: LIST
34355: PUSH
34356: LD_VAR 0 1
34360: PUSH
34361: LD_INT 4
34363: MINUS
34364: PUSH
34365: LD_VAR 0 2
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: PUSH
34378: LD_VAR 0 1
34382: PUSH
34383: LD_VAR 0 2
34387: PUSH
34388: LD_INT 4
34390: MINUS
34391: PUSH
34392: LD_INT 3
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: LD_VAR 0 1
34404: PUSH
34405: LD_INT 3
34407: MINUS
34408: PUSH
34409: LD_VAR 0 2
34413: PUSH
34414: LD_INT 3
34416: MINUS
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: ST_TO_ADDR
// end ; 4 :
34433: GO 34714
34435: LD_INT 4
34437: DOUBLE
34438: EQUAL
34439: IFTRUE 34443
34441: GO 34576
34443: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
34444: LD_ADDR_VAR 0 5
34448: PUSH
34449: LD_VAR 0 1
34453: PUSH
34454: LD_VAR 0 2
34458: PUSH
34459: LD_INT 4
34461: PLUS
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: LIST
34470: PUSH
34471: LD_VAR 0 1
34475: PUSH
34476: LD_INT 3
34478: PLUS
34479: PUSH
34480: LD_VAR 0 2
34484: PUSH
34485: LD_INT 3
34487: PLUS
34488: PUSH
34489: LD_INT 5
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: PUSH
34497: LD_VAR 0 1
34501: PUSH
34502: LD_INT 4
34504: PLUS
34505: PUSH
34506: LD_VAR 0 2
34510: PUSH
34511: LD_INT 4
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: PUSH
34519: LD_VAR 0 1
34523: PUSH
34524: LD_VAR 0 2
34528: PUSH
34529: LD_INT 3
34531: MINUS
34532: PUSH
34533: LD_INT 3
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: PUSH
34541: LD_VAR 0 1
34545: PUSH
34546: LD_INT 4
34548: MINUS
34549: PUSH
34550: LD_VAR 0 2
34554: PUSH
34555: LD_INT 4
34557: MINUS
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: LIST
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: ST_TO_ADDR
// end ; 5 :
34574: GO 34714
34576: LD_INT 5
34578: DOUBLE
34579: EQUAL
34580: IFTRUE 34584
34582: GO 34713
34584: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
34585: LD_ADDR_VAR 0 5
34589: PUSH
34590: LD_VAR 0 1
34594: PUSH
34595: LD_INT 4
34597: MINUS
34598: PUSH
34599: LD_VAR 0 2
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: PUSH
34612: LD_VAR 0 1
34616: PUSH
34617: LD_VAR 0 2
34621: PUSH
34622: LD_INT 4
34624: MINUS
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: PUSH
34634: LD_VAR 0 1
34638: PUSH
34639: LD_INT 4
34641: PLUS
34642: PUSH
34643: LD_VAR 0 2
34647: PUSH
34648: LD_INT 4
34650: PLUS
34651: PUSH
34652: LD_INT 5
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: PUSH
34660: LD_VAR 0 1
34664: PUSH
34665: LD_INT 3
34667: PLUS
34668: PUSH
34669: LD_VAR 0 2
34673: PUSH
34674: LD_INT 4
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: PUSH
34682: LD_VAR 0 1
34686: PUSH
34687: LD_VAR 0 2
34691: PUSH
34692: LD_INT 3
34694: PLUS
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: ST_TO_ADDR
// end ; end ;
34711: GO 34714
34713: POP
// result := list ;
34714: LD_ADDR_VAR 0 4
34718: PUSH
34719: LD_VAR 0 5
34723: ST_TO_ADDR
// end ;
34724: LD_VAR 0 4
34728: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
34729: LD_INT 0
34731: PPUSH
34732: PPUSH
34733: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
34734: LD_VAR 0 1
34738: NOT
34739: PUSH
34740: LD_VAR 0 2
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: LD_INT 3
34753: PUSH
34754: LD_INT 4
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: IN
34763: NOT
34764: OR
34765: IFFALSE 34769
// exit ;
34767: GO 34861
// tmp := [ ] ;
34769: LD_ADDR_VAR 0 5
34773: PUSH
34774: EMPTY
34775: ST_TO_ADDR
// for i in units do
34776: LD_ADDR_VAR 0 4
34780: PUSH
34781: LD_VAR 0 1
34785: PUSH
34786: FOR_IN
34787: IFFALSE 34830
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
34789: LD_ADDR_VAR 0 5
34793: PUSH
34794: LD_VAR 0 5
34798: PPUSH
34799: LD_VAR 0 5
34803: PUSH
34804: LD_INT 1
34806: PLUS
34807: PPUSH
34808: LD_VAR 0 4
34812: PPUSH
34813: LD_VAR 0 2
34817: PPUSH
34818: CALL_OW 259
34822: PPUSH
34823: CALL_OW 2
34827: ST_TO_ADDR
34828: GO 34786
34830: POP
34831: POP
// if not tmp then
34832: LD_VAR 0 5
34836: NOT
34837: IFFALSE 34841
// exit ;
34839: GO 34861
// result := SortListByListDesc ( units , tmp ) ;
34841: LD_ADDR_VAR 0 3
34845: PUSH
34846: LD_VAR 0 1
34850: PPUSH
34851: LD_VAR 0 5
34855: PPUSH
34856: CALL_OW 77
34860: ST_TO_ADDR
// end ;
34861: LD_VAR 0 3
34865: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
34866: LD_INT 0
34868: PPUSH
34869: PPUSH
34870: PPUSH
// x := GetX ( building ) ;
34871: LD_ADDR_VAR 0 4
34875: PUSH
34876: LD_VAR 0 2
34880: PPUSH
34881: CALL_OW 250
34885: ST_TO_ADDR
// y := GetY ( building ) ;
34886: LD_ADDR_VAR 0 5
34890: PUSH
34891: LD_VAR 0 2
34895: PPUSH
34896: CALL_OW 251
34900: ST_TO_ADDR
// if GetTaskList ( unit ) then
34901: LD_VAR 0 1
34905: PPUSH
34906: CALL_OW 437
34910: IFFALSE 35005
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
34912: LD_STRING e
34914: PUSH
34915: LD_VAR 0 1
34919: PPUSH
34920: CALL_OW 437
34924: PUSH
34925: LD_INT 1
34927: ARRAY
34928: PUSH
34929: LD_INT 1
34931: ARRAY
34932: EQUAL
34933: PUSH
34934: LD_VAR 0 4
34938: PUSH
34939: LD_VAR 0 1
34943: PPUSH
34944: CALL_OW 437
34948: PUSH
34949: LD_INT 1
34951: ARRAY
34952: PUSH
34953: LD_INT 2
34955: ARRAY
34956: EQUAL
34957: AND
34958: PUSH
34959: LD_VAR 0 5
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 437
34973: PUSH
34974: LD_INT 1
34976: ARRAY
34977: PUSH
34978: LD_INT 3
34980: ARRAY
34981: EQUAL
34982: AND
34983: IFFALSE 34995
// result := true else
34985: LD_ADDR_VAR 0 3
34989: PUSH
34990: LD_INT 1
34992: ST_TO_ADDR
34993: GO 35003
// result := false ;
34995: LD_ADDR_VAR 0 3
34999: PUSH
35000: LD_INT 0
35002: ST_TO_ADDR
// end else
35003: GO 35013
// result := false ;
35005: LD_ADDR_VAR 0 3
35009: PUSH
35010: LD_INT 0
35012: ST_TO_ADDR
// end ;
35013: LD_VAR 0 3
35017: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
35018: LD_INT 0
35020: PPUSH
35021: PPUSH
35022: PPUSH
35023: PPUSH
// if not unit or not area then
35024: LD_VAR 0 1
35028: NOT
35029: PUSH
35030: LD_VAR 0 2
35034: NOT
35035: OR
35036: IFFALSE 35040
// exit ;
35038: GO 35204
// tmp := AreaToList ( area , i ) ;
35040: LD_ADDR_VAR 0 6
35044: PUSH
35045: LD_VAR 0 2
35049: PPUSH
35050: LD_VAR 0 5
35054: PPUSH
35055: CALL_OW 517
35059: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
35060: LD_ADDR_VAR 0 5
35064: PUSH
35065: DOUBLE
35066: LD_INT 1
35068: DEC
35069: ST_TO_ADDR
35070: LD_VAR 0 6
35074: PUSH
35075: LD_INT 1
35077: ARRAY
35078: PUSH
35079: FOR_TO
35080: IFFALSE 35202
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
35082: LD_ADDR_VAR 0 7
35086: PUSH
35087: LD_VAR 0 6
35091: PUSH
35092: LD_INT 1
35094: ARRAY
35095: PUSH
35096: LD_VAR 0 5
35100: ARRAY
35101: PUSH
35102: LD_VAR 0 6
35106: PUSH
35107: LD_INT 2
35109: ARRAY
35110: PUSH
35111: LD_VAR 0 5
35115: ARRAY
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
35121: LD_VAR 0 7
35125: PUSH
35126: LD_INT 1
35128: ARRAY
35129: PPUSH
35130: LD_VAR 0 7
35134: PUSH
35135: LD_INT 2
35137: ARRAY
35138: PPUSH
35139: CALL_OW 428
35143: PUSH
35144: LD_INT 0
35146: EQUAL
35147: IFFALSE 35200
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
35149: LD_VAR 0 1
35153: PPUSH
35154: LD_VAR 0 7
35158: PUSH
35159: LD_INT 1
35161: ARRAY
35162: PPUSH
35163: LD_VAR 0 7
35167: PUSH
35168: LD_INT 2
35170: ARRAY
35171: PPUSH
35172: LD_VAR 0 3
35176: PPUSH
35177: CALL_OW 48
// result := IsPlaced ( unit ) ;
35181: LD_ADDR_VAR 0 4
35185: PUSH
35186: LD_VAR 0 1
35190: PPUSH
35191: CALL_OW 305
35195: ST_TO_ADDR
// exit ;
35196: POP
35197: POP
35198: GO 35204
// end ; end ;
35200: GO 35079
35202: POP
35203: POP
// end ;
35204: LD_VAR 0 4
35208: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
35213: PPUSH
// if not side or side > 8 then
35214: LD_VAR 0 1
35218: NOT
35219: PUSH
35220: LD_VAR 0 1
35224: PUSH
35225: LD_INT 8
35227: GREATER
35228: OR
35229: IFFALSE 35233
// exit ;
35231: GO 35420
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
35233: LD_ADDR_VAR 0 4
35237: PUSH
35238: LD_INT 22
35240: PUSH
35241: LD_VAR 0 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 21
35252: PUSH
35253: LD_INT 3
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PPUSH
35264: CALL_OW 69
35268: ST_TO_ADDR
// if not tmp then
35269: LD_VAR 0 4
35273: NOT
35274: IFFALSE 35278
// exit ;
35276: GO 35420
// enable_addtolog := true ;
35278: LD_ADDR_OWVAR 81
35282: PUSH
35283: LD_INT 1
35285: ST_TO_ADDR
// AddToLog ( [ ) ;
35286: LD_STRING [
35288: PPUSH
35289: CALL_OW 561
// for i in tmp do
35293: LD_ADDR_VAR 0 3
35297: PUSH
35298: LD_VAR 0 4
35302: PUSH
35303: FOR_IN
35304: IFFALSE 35411
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
35306: LD_STRING [
35308: PUSH
35309: LD_VAR 0 3
35313: PPUSH
35314: CALL_OW 266
35318: STR
35319: PUSH
35320: LD_STRING , 
35322: STR
35323: PUSH
35324: LD_VAR 0 3
35328: PPUSH
35329: CALL_OW 250
35333: STR
35334: PUSH
35335: LD_STRING , 
35337: STR
35338: PUSH
35339: LD_VAR 0 3
35343: PPUSH
35344: CALL_OW 251
35348: STR
35349: PUSH
35350: LD_STRING , 
35352: STR
35353: PUSH
35354: LD_VAR 0 3
35358: PPUSH
35359: CALL_OW 254
35363: STR
35364: PUSH
35365: LD_STRING , 
35367: STR
35368: PUSH
35369: LD_VAR 0 3
35373: PPUSH
35374: LD_INT 1
35376: PPUSH
35377: CALL_OW 268
35381: STR
35382: PUSH
35383: LD_STRING , 
35385: STR
35386: PUSH
35387: LD_VAR 0 3
35391: PPUSH
35392: LD_INT 2
35394: PPUSH
35395: CALL_OW 268
35399: STR
35400: PUSH
35401: LD_STRING ],
35403: STR
35404: PPUSH
35405: CALL_OW 561
// end ;
35409: GO 35303
35411: POP
35412: POP
// AddToLog ( ]; ) ;
35413: LD_STRING ];
35415: PPUSH
35416: CALL_OW 561
// end ;
35420: LD_VAR 0 2
35424: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
35425: LD_INT 0
35427: PPUSH
35428: PPUSH
35429: PPUSH
35430: PPUSH
35431: PPUSH
// if not area or not rate or not max then
35432: LD_VAR 0 1
35436: NOT
35437: PUSH
35438: LD_VAR 0 2
35442: NOT
35443: OR
35444: PUSH
35445: LD_VAR 0 4
35449: NOT
35450: OR
35451: IFFALSE 35455
// exit ;
35453: GO 35647
// while 1 do
35455: LD_INT 1
35457: IFFALSE 35647
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
35459: LD_ADDR_VAR 0 9
35463: PUSH
35464: LD_VAR 0 1
35468: PPUSH
35469: LD_INT 1
35471: PPUSH
35472: CALL_OW 287
35476: PUSH
35477: LD_INT 10
35479: MUL
35480: ST_TO_ADDR
// r := rate / 10 ;
35481: LD_ADDR_VAR 0 7
35485: PUSH
35486: LD_VAR 0 2
35490: PUSH
35491: LD_INT 10
35493: DIVREAL
35494: ST_TO_ADDR
// time := 1 1$00 ;
35495: LD_ADDR_VAR 0 8
35499: PUSH
35500: LD_INT 2100
35502: ST_TO_ADDR
// if amount < min then
35503: LD_VAR 0 9
35507: PUSH
35508: LD_VAR 0 3
35512: LESS
35513: IFFALSE 35531
// r := r * 2 else
35515: LD_ADDR_VAR 0 7
35519: PUSH
35520: LD_VAR 0 7
35524: PUSH
35525: LD_INT 2
35527: MUL
35528: ST_TO_ADDR
35529: GO 35557
// if amount > max then
35531: LD_VAR 0 9
35535: PUSH
35536: LD_VAR 0 4
35540: GREATER
35541: IFFALSE 35557
// r := r / 2 ;
35543: LD_ADDR_VAR 0 7
35547: PUSH
35548: LD_VAR 0 7
35552: PUSH
35553: LD_INT 2
35555: DIVREAL
35556: ST_TO_ADDR
// time := time / r ;
35557: LD_ADDR_VAR 0 8
35561: PUSH
35562: LD_VAR 0 8
35566: PUSH
35567: LD_VAR 0 7
35571: DIVREAL
35572: ST_TO_ADDR
// if time < 0 then
35573: LD_VAR 0 8
35577: PUSH
35578: LD_INT 0
35580: LESS
35581: IFFALSE 35598
// time := time * - 1 ;
35583: LD_ADDR_VAR 0 8
35587: PUSH
35588: LD_VAR 0 8
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: MUL
35597: ST_TO_ADDR
// wait ( time ) ;
35598: LD_VAR 0 8
35602: PPUSH
35603: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
35607: LD_INT 35
35609: PPUSH
35610: LD_INT 875
35612: PPUSH
35613: CALL_OW 12
35617: PPUSH
35618: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
35622: LD_INT 1
35624: PPUSH
35625: LD_INT 5
35627: PPUSH
35628: CALL_OW 12
35632: PPUSH
35633: LD_VAR 0 1
35637: PPUSH
35638: LD_INT 1
35640: PPUSH
35641: CALL_OW 55
// end ;
35645: GO 35455
// end ;
35647: LD_VAR 0 5
35651: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
35652: LD_INT 0
35654: PPUSH
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
// if not turrets or not factories then
35662: LD_VAR 0 1
35666: NOT
35667: PUSH
35668: LD_VAR 0 2
35672: NOT
35673: OR
35674: IFFALSE 35678
// exit ;
35676: GO 35985
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
35678: LD_ADDR_VAR 0 10
35682: PUSH
35683: LD_INT 5
35685: PUSH
35686: LD_INT 6
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 2
35695: PUSH
35696: LD_INT 4
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: LD_INT 5
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 24
35720: PUSH
35721: LD_INT 25
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 23
35730: PUSH
35731: LD_INT 27
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 42
35744: PUSH
35745: LD_INT 43
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 44
35754: PUSH
35755: LD_INT 46
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 45
35764: PUSH
35765: LD_INT 47
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: ST_TO_ADDR
// result := [ ] ;
35782: LD_ADDR_VAR 0 3
35786: PUSH
35787: EMPTY
35788: ST_TO_ADDR
// for i in turrets do
35789: LD_ADDR_VAR 0 4
35793: PUSH
35794: LD_VAR 0 1
35798: PUSH
35799: FOR_IN
35800: IFFALSE 35983
// begin nat := GetNation ( i ) ;
35802: LD_ADDR_VAR 0 7
35806: PUSH
35807: LD_VAR 0 4
35811: PPUSH
35812: CALL_OW 248
35816: ST_TO_ADDR
// weapon := 0 ;
35817: LD_ADDR_VAR 0 8
35821: PUSH
35822: LD_INT 0
35824: ST_TO_ADDR
// if not nat then
35825: LD_VAR 0 7
35829: NOT
35830: IFFALSE 35834
// continue ;
35832: GO 35799
// for j in list [ nat ] do
35834: LD_ADDR_VAR 0 5
35838: PUSH
35839: LD_VAR 0 10
35843: PUSH
35844: LD_VAR 0 7
35848: ARRAY
35849: PUSH
35850: FOR_IN
35851: IFFALSE 35892
// if GetBWeapon ( i ) = j [ 1 ] then
35853: LD_VAR 0 4
35857: PPUSH
35858: CALL_OW 269
35862: PUSH
35863: LD_VAR 0 5
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: EQUAL
35872: IFFALSE 35890
// begin weapon := j [ 2 ] ;
35874: LD_ADDR_VAR 0 8
35878: PUSH
35879: LD_VAR 0 5
35883: PUSH
35884: LD_INT 2
35886: ARRAY
35887: ST_TO_ADDR
// break ;
35888: GO 35892
// end ;
35890: GO 35850
35892: POP
35893: POP
// if not weapon then
35894: LD_VAR 0 8
35898: NOT
35899: IFFALSE 35903
// continue ;
35901: GO 35799
// for k in factories do
35903: LD_ADDR_VAR 0 6
35907: PUSH
35908: LD_VAR 0 2
35912: PUSH
35913: FOR_IN
35914: IFFALSE 35979
// begin weapons := AvailableWeaponList ( k ) ;
35916: LD_ADDR_VAR 0 9
35920: PUSH
35921: LD_VAR 0 6
35925: PPUSH
35926: CALL_OW 478
35930: ST_TO_ADDR
// if not weapons then
35931: LD_VAR 0 9
35935: NOT
35936: IFFALSE 35940
// continue ;
35938: GO 35913
// if weapon in weapons then
35940: LD_VAR 0 8
35944: PUSH
35945: LD_VAR 0 9
35949: IN
35950: IFFALSE 35977
// begin result := [ i , weapon ] ;
35952: LD_ADDR_VAR 0 3
35956: PUSH
35957: LD_VAR 0 4
35961: PUSH
35962: LD_VAR 0 8
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// exit ;
35971: POP
35972: POP
35973: POP
35974: POP
35975: GO 35985
// end ; end ;
35977: GO 35913
35979: POP
35980: POP
// end ;
35981: GO 35799
35983: POP
35984: POP
// end ;
35985: LD_VAR 0 3
35989: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
35990: LD_INT 0
35992: PPUSH
// if not side or side > 8 then
35993: LD_VAR 0 3
35997: NOT
35998: PUSH
35999: LD_VAR 0 3
36003: PUSH
36004: LD_INT 8
36006: GREATER
36007: OR
36008: IFFALSE 36012
// exit ;
36010: GO 36071
// if not range then
36012: LD_VAR 0 4
36016: NOT
36017: IFFALSE 36028
// range := - 12 ;
36019: LD_ADDR_VAR 0 4
36023: PUSH
36024: LD_INT 12
36026: NEG
36027: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
36028: LD_VAR 0 1
36032: PPUSH
36033: LD_VAR 0 2
36037: PPUSH
36038: LD_VAR 0 3
36042: PPUSH
36043: LD_VAR 0 4
36047: PPUSH
36048: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
36052: LD_VAR 0 1
36056: PPUSH
36057: LD_VAR 0 2
36061: PPUSH
36062: LD_VAR 0 3
36066: PPUSH
36067: CALL_OW 331
// end ;
36071: LD_VAR 0 5
36075: RET
// export function Video ( mode ) ; begin
36076: LD_INT 0
36078: PPUSH
// ingame_video = mode ;
36079: LD_ADDR_OWVAR 52
36083: PUSH
36084: LD_VAR 0 1
36088: ST_TO_ADDR
// interface_hidden = mode ;
36089: LD_ADDR_OWVAR 54
36093: PUSH
36094: LD_VAR 0 1
36098: ST_TO_ADDR
// end ;
36099: LD_VAR 0 2
36103: RET
// export function Join ( array , element ) ; begin
36104: LD_INT 0
36106: PPUSH
// result := array ^ element ;
36107: LD_ADDR_VAR 0 3
36111: PUSH
36112: LD_VAR 0 1
36116: PUSH
36117: LD_VAR 0 2
36121: ADD
36122: ST_TO_ADDR
// end ;
36123: LD_VAR 0 3
36127: RET
// export function JoinUnion ( array , element ) ; begin
36128: LD_INT 0
36130: PPUSH
// result := array union element ;
36131: LD_ADDR_VAR 0 3
36135: PUSH
36136: LD_VAR 0 1
36140: PUSH
36141: LD_VAR 0 2
36145: UNION
36146: ST_TO_ADDR
// end ;
36147: LD_VAR 0 3
36151: RET
// export function GetBehemoths ( side ) ; begin
36152: LD_INT 0
36154: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
36155: LD_ADDR_VAR 0 2
36159: PUSH
36160: LD_INT 22
36162: PUSH
36163: LD_VAR 0 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 31
36174: PUSH
36175: LD_INT 25
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PPUSH
36186: CALL_OW 69
36190: ST_TO_ADDR
// end ;
36191: LD_VAR 0 2
36195: RET
// export function Shuffle ( array ) ; var i , index ; begin
36196: LD_INT 0
36198: PPUSH
36199: PPUSH
36200: PPUSH
// result := [ ] ;
36201: LD_ADDR_VAR 0 2
36205: PUSH
36206: EMPTY
36207: ST_TO_ADDR
// if not array then
36208: LD_VAR 0 1
36212: NOT
36213: IFFALSE 36217
// exit ;
36215: GO 36316
// Randomize ;
36217: CALL_OW 10
// for i = array downto 1 do
36221: LD_ADDR_VAR 0 3
36225: PUSH
36226: DOUBLE
36227: LD_VAR 0 1
36231: INC
36232: ST_TO_ADDR
36233: LD_INT 1
36235: PUSH
36236: FOR_DOWNTO
36237: IFFALSE 36314
// begin index := rand ( 1 , array ) ;
36239: LD_ADDR_VAR 0 4
36243: PUSH
36244: LD_INT 1
36246: PPUSH
36247: LD_VAR 0 1
36251: PPUSH
36252: CALL_OW 12
36256: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
36257: LD_ADDR_VAR 0 2
36261: PUSH
36262: LD_VAR 0 2
36266: PPUSH
36267: LD_VAR 0 2
36271: PUSH
36272: LD_INT 1
36274: PLUS
36275: PPUSH
36276: LD_VAR 0 1
36280: PUSH
36281: LD_VAR 0 4
36285: ARRAY
36286: PPUSH
36287: CALL_OW 2
36291: ST_TO_ADDR
// array := Delete ( array , index ) ;
36292: LD_ADDR_VAR 0 1
36296: PUSH
36297: LD_VAR 0 1
36301: PPUSH
36302: LD_VAR 0 4
36306: PPUSH
36307: CALL_OW 3
36311: ST_TO_ADDR
// end ;
36312: GO 36236
36314: POP
36315: POP
// end ;
36316: LD_VAR 0 2
36320: RET
// export function GetBaseMaterials ( base ) ; begin
36321: LD_INT 0
36323: PPUSH
// result := [ 0 , 0 , 0 ] ;
36324: LD_ADDR_VAR 0 2
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: LIST
36342: ST_TO_ADDR
// if not base then
36343: LD_VAR 0 1
36347: NOT
36348: IFFALSE 36352
// exit ;
36350: GO 36401
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
36352: LD_ADDR_VAR 0 2
36356: PUSH
36357: LD_VAR 0 1
36361: PPUSH
36362: LD_INT 1
36364: PPUSH
36365: CALL_OW 275
36369: PUSH
36370: LD_VAR 0 1
36374: PPUSH
36375: LD_INT 2
36377: PPUSH
36378: CALL_OW 275
36382: PUSH
36383: LD_VAR 0 1
36387: PPUSH
36388: LD_INT 3
36390: PPUSH
36391: CALL_OW 275
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: ST_TO_ADDR
// end ;
36401: LD_VAR 0 2
36405: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
36406: LD_INT 0
36408: PPUSH
36409: PPUSH
// result := array ;
36410: LD_ADDR_VAR 0 3
36414: PUSH
36415: LD_VAR 0 1
36419: ST_TO_ADDR
// if size > 0 then
36420: LD_VAR 0 2
36424: PUSH
36425: LD_INT 0
36427: GREATER
36428: IFFALSE 36474
// for i := array downto size do
36430: LD_ADDR_VAR 0 4
36434: PUSH
36435: DOUBLE
36436: LD_VAR 0 1
36440: INC
36441: ST_TO_ADDR
36442: LD_VAR 0 2
36446: PUSH
36447: FOR_DOWNTO
36448: IFFALSE 36472
// result := Delete ( result , result ) ;
36450: LD_ADDR_VAR 0 3
36454: PUSH
36455: LD_VAR 0 3
36459: PPUSH
36460: LD_VAR 0 3
36464: PPUSH
36465: CALL_OW 3
36469: ST_TO_ADDR
36470: GO 36447
36472: POP
36473: POP
// end ;
36474: LD_VAR 0 3
36478: RET
// export function ComExit ( unit ) ; var tmp ; begin
36479: LD_INT 0
36481: PPUSH
36482: PPUSH
// if not IsInUnit ( unit ) then
36483: LD_VAR 0 1
36487: PPUSH
36488: CALL_OW 310
36492: NOT
36493: IFFALSE 36497
// exit ;
36495: GO 36557
// tmp := IsInUnit ( unit ) ;
36497: LD_ADDR_VAR 0 3
36501: PUSH
36502: LD_VAR 0 1
36506: PPUSH
36507: CALL_OW 310
36511: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
36512: LD_VAR 0 3
36516: PPUSH
36517: CALL_OW 247
36521: PUSH
36522: LD_INT 2
36524: EQUAL
36525: IFFALSE 36538
// ComExitVehicle ( unit ) else
36527: LD_VAR 0 1
36531: PPUSH
36532: CALL_OW 121
36536: GO 36547
// ComExitBuilding ( unit ) ;
36538: LD_VAR 0 1
36542: PPUSH
36543: CALL_OW 122
// result := tmp ;
36547: LD_ADDR_VAR 0 2
36551: PUSH
36552: LD_VAR 0 3
36556: ST_TO_ADDR
// end ;
36557: LD_VAR 0 2
36561: RET
// export function ResetHc ; begin
36562: LD_INT 0
36564: PPUSH
// InitHc ;
36565: CALL_OW 19
// hc_importance := 0 ;
36569: LD_ADDR_OWVAR 32
36573: PUSH
36574: LD_INT 0
36576: ST_TO_ADDR
// end ; end_of_file
36577: LD_VAR 0 1
36581: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36582: LD_INT 0
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36588: LD_VAR 0 1
36592: PPUSH
36593: CALL_OW 264
36597: PUSH
36598: LD_EXP 6
36602: EQUAL
36603: IFFALSE 36675
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36605: LD_INT 68
36607: PPUSH
36608: LD_VAR 0 1
36612: PPUSH
36613: CALL_OW 255
36617: PPUSH
36618: CALL_OW 321
36622: PUSH
36623: LD_INT 2
36625: EQUAL
36626: IFFALSE 36638
// eff := 70 else
36628: LD_ADDR_VAR 0 4
36632: PUSH
36633: LD_INT 70
36635: ST_TO_ADDR
36636: GO 36646
// eff := 30 ;
36638: LD_ADDR_VAR 0 4
36642: PUSH
36643: LD_INT 30
36645: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36646: LD_VAR 0 1
36650: PPUSH
36651: CALL_OW 250
36655: PPUSH
36656: LD_VAR 0 1
36660: PPUSH
36661: CALL_OW 251
36665: PPUSH
36666: LD_VAR 0 4
36670: PPUSH
36671: CALL_OW 495
// end ; end ;
36675: LD_VAR 0 2
36679: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36680: LD_INT 0
36682: PPUSH
// end ;
36683: LD_VAR 0 4
36687: RET
// export function SOS_Command ( cmd ) ; begin
36688: LD_INT 0
36690: PPUSH
// end ;
36691: LD_VAR 0 2
36695: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36696: LD_VAR 0 1
36700: PUSH
36701: LD_INT 254
36703: EQUAL
36704: PUSH
36705: LD_VAR 0 2
36709: PPUSH
36710: CALL_OW 264
36714: PUSH
36715: LD_EXP 4
36719: EQUAL
36720: AND
36721: PUSH
36722: LD_VAR 0 3
36726: PPUSH
36727: CALL_OW 263
36731: PUSH
36732: LD_INT 3
36734: EQUAL
36735: AND
36736: IFFALSE 36747
// DestroyUnit ( selectedUnit ) ;
36738: LD_VAR 0 3
36742: PPUSH
36743: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36747: LD_VAR 0 1
36751: PUSH
36752: LD_INT 255
36754: EQUAL
36755: PUSH
36756: LD_VAR 0 2
36760: PPUSH
36761: CALL_OW 264
36765: PUSH
36766: LD_INT 14
36768: PUSH
36769: LD_INT 53
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: IN
36776: AND
36777: PUSH
36778: LD_VAR 0 4
36782: PPUSH
36783: LD_VAR 0 5
36787: PPUSH
36788: CALL_OW 488
36792: AND
36793: IFFALSE 36817
// CutTreeXYR ( unit , x , y , 12 ) ;
36795: LD_VAR 0 2
36799: PPUSH
36800: LD_VAR 0 4
36804: PPUSH
36805: LD_VAR 0 5
36809: PPUSH
36810: LD_INT 12
36812: PPUSH
36813: CALL 36820 0 4
// end ;
36817: PPOPN 5
36819: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36820: LD_INT 0
36822: PPUSH
36823: PPUSH
36824: PPUSH
36825: PPUSH
36826: PPUSH
36827: PPUSH
36828: PPUSH
36829: PPUSH
36830: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36831: LD_VAR 0 1
36835: NOT
36836: PUSH
36837: LD_VAR 0 2
36841: PPUSH
36842: LD_VAR 0 3
36846: PPUSH
36847: CALL_OW 488
36851: NOT
36852: OR
36853: PUSH
36854: LD_VAR 0 4
36858: NOT
36859: OR
36860: IFFALSE 36864
// exit ;
36862: GO 37204
// list := [ ] ;
36864: LD_ADDR_VAR 0 13
36868: PUSH
36869: EMPTY
36870: ST_TO_ADDR
// if x - r < 0 then
36871: LD_VAR 0 2
36875: PUSH
36876: LD_VAR 0 4
36880: MINUS
36881: PUSH
36882: LD_INT 0
36884: LESS
36885: IFFALSE 36897
// min_x := 0 else
36887: LD_ADDR_VAR 0 7
36891: PUSH
36892: LD_INT 0
36894: ST_TO_ADDR
36895: GO 36913
// min_x := x - r ;
36897: LD_ADDR_VAR 0 7
36901: PUSH
36902: LD_VAR 0 2
36906: PUSH
36907: LD_VAR 0 4
36911: MINUS
36912: ST_TO_ADDR
// if y - r < 0 then
36913: LD_VAR 0 3
36917: PUSH
36918: LD_VAR 0 4
36922: MINUS
36923: PUSH
36924: LD_INT 0
36926: LESS
36927: IFFALSE 36939
// min_y := 0 else
36929: LD_ADDR_VAR 0 8
36933: PUSH
36934: LD_INT 0
36936: ST_TO_ADDR
36937: GO 36955
// min_y := y - r ;
36939: LD_ADDR_VAR 0 8
36943: PUSH
36944: LD_VAR 0 3
36948: PUSH
36949: LD_VAR 0 4
36953: MINUS
36954: ST_TO_ADDR
// max_x := x + r ;
36955: LD_ADDR_VAR 0 9
36959: PUSH
36960: LD_VAR 0 2
36964: PUSH
36965: LD_VAR 0 4
36969: PLUS
36970: ST_TO_ADDR
// max_y := y + r ;
36971: LD_ADDR_VAR 0 10
36975: PUSH
36976: LD_VAR 0 3
36980: PUSH
36981: LD_VAR 0 4
36985: PLUS
36986: ST_TO_ADDR
// for _x = min_x to max_x do
36987: LD_ADDR_VAR 0 11
36991: PUSH
36992: DOUBLE
36993: LD_VAR 0 7
36997: DEC
36998: ST_TO_ADDR
36999: LD_VAR 0 9
37003: PUSH
37004: FOR_TO
37005: IFFALSE 37122
// for _y = min_y to max_y do
37007: LD_ADDR_VAR 0 12
37011: PUSH
37012: DOUBLE
37013: LD_VAR 0 8
37017: DEC
37018: ST_TO_ADDR
37019: LD_VAR 0 10
37023: PUSH
37024: FOR_TO
37025: IFFALSE 37118
// begin if not ValidHex ( _x , _y ) then
37027: LD_VAR 0 11
37031: PPUSH
37032: LD_VAR 0 12
37036: PPUSH
37037: CALL_OW 488
37041: NOT
37042: IFFALSE 37046
// continue ;
37044: GO 37024
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37046: LD_VAR 0 11
37050: PPUSH
37051: LD_VAR 0 12
37055: PPUSH
37056: CALL_OW 351
37060: PUSH
37061: LD_VAR 0 11
37065: PPUSH
37066: LD_VAR 0 12
37070: PPUSH
37071: CALL_OW 554
37075: AND
37076: IFFALSE 37116
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37078: LD_ADDR_VAR 0 13
37082: PUSH
37083: LD_VAR 0 13
37087: PPUSH
37088: LD_VAR 0 13
37092: PUSH
37093: LD_INT 1
37095: PLUS
37096: PPUSH
37097: LD_VAR 0 11
37101: PUSH
37102: LD_VAR 0 12
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PPUSH
37111: CALL_OW 2
37115: ST_TO_ADDR
// end ;
37116: GO 37024
37118: POP
37119: POP
37120: GO 37004
37122: POP
37123: POP
// if not list then
37124: LD_VAR 0 13
37128: NOT
37129: IFFALSE 37133
// exit ;
37131: GO 37204
// for i in list do
37133: LD_ADDR_VAR 0 6
37137: PUSH
37138: LD_VAR 0 13
37142: PUSH
37143: FOR_IN
37144: IFFALSE 37202
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37146: LD_VAR 0 1
37150: PPUSH
37151: LD_STRING M
37153: PUSH
37154: LD_VAR 0 6
37158: PUSH
37159: LD_INT 1
37161: ARRAY
37162: PUSH
37163: LD_VAR 0 6
37167: PUSH
37168: LD_INT 2
37170: ARRAY
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: PUSH
37193: EMPTY
37194: LIST
37195: PPUSH
37196: CALL_OW 447
37200: GO 37143
37202: POP
37203: POP
// end ;
37204: LD_VAR 0 5
37208: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist ; every 0 0$1 trigger not initHack do
37209: LD_EXP 16
37213: NOT
37214: IFFALSE 37257
37216: GO 37218
37218: DISABLE
// begin initHack := true ;
37219: LD_ADDR_EXP 16
37223: PUSH
37224: LD_INT 1
37226: ST_TO_ADDR
// hackTanks := [ ] ;
37227: LD_ADDR_EXP 17
37231: PUSH
37232: EMPTY
37233: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37234: LD_ADDR_EXP 18
37238: PUSH
37239: EMPTY
37240: ST_TO_ADDR
// hackLimit := 3 ;
37241: LD_ADDR_EXP 19
37245: PUSH
37246: LD_INT 3
37248: ST_TO_ADDR
// hackDist := 12 ;
37249: LD_ADDR_EXP 20
37253: PUSH
37254: LD_INT 12
37256: ST_TO_ADDR
// end ;
37257: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37258: LD_EXP 16
37262: PUSH
37263: LD_INT 34
37265: PUSH
37266: LD_EXP 4
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PPUSH
37275: CALL_OW 69
37279: AND
37280: IFFALSE 37509
37282: GO 37284
37284: DISABLE
37285: LD_INT 0
37287: PPUSH
37288: PPUSH
// begin enable ;
37289: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37290: LD_ADDR_VAR 0 1
37294: PUSH
37295: LD_INT 34
37297: PUSH
37298: LD_EXP 4
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PPUSH
37307: CALL_OW 69
37311: PUSH
37312: FOR_IN
37313: IFFALSE 37507
// begin if not i in hackTanks then
37315: LD_VAR 0 1
37319: PUSH
37320: LD_EXP 17
37324: IN
37325: NOT
37326: IFFALSE 37383
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37328: LD_ADDR_EXP 17
37332: PUSH
37333: LD_EXP 17
37337: PPUSH
37338: LD_EXP 17
37342: PUSH
37343: LD_INT 1
37345: PLUS
37346: PPUSH
37347: LD_VAR 0 1
37351: PPUSH
37352: CALL_OW 1
37356: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37357: LD_ADDR_EXP 18
37361: PUSH
37362: LD_EXP 18
37366: PPUSH
37367: LD_EXP 18
37371: PUSH
37372: LD_INT 1
37374: PLUS
37375: PPUSH
37376: EMPTY
37377: PPUSH
37378: CALL_OW 1
37382: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37383: LD_VAR 0 1
37387: PPUSH
37388: CALL_OW 302
37392: NOT
37393: IFFALSE 37406
// begin HackUnlinkAll ( i ) ;
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL 37512 0 1
// continue ;
37404: GO 37312
// end ; HackCheckCapturedStatus ( i ) ;
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL 37930 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37415: LD_ADDR_VAR 0 2
37419: PUSH
37420: LD_INT 81
37422: PUSH
37423: LD_VAR 0 1
37427: PPUSH
37428: CALL_OW 255
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 33
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 91
37449: PUSH
37450: LD_VAR 0 1
37454: PUSH
37455: LD_EXP 20
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 50
37467: PUSH
37468: EMPTY
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: PPUSH
37477: CALL_OW 69
37481: ST_TO_ADDR
// if not tmp then
37482: LD_VAR 0 2
37486: NOT
37487: IFFALSE 37491
// continue ;
37489: GO 37312
// HackLink ( i , tmp ) ;
37491: LD_VAR 0 1
37495: PPUSH
37496: LD_VAR 0 2
37500: PPUSH
37501: CALL 37648 0 2
// end ;
37505: GO 37312
37507: POP
37508: POP
// end ;
37509: PPOPN 2
37511: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37512: LD_INT 0
37514: PPUSH
37515: PPUSH
37516: PPUSH
// if not hack in hackTanks then
37517: LD_VAR 0 1
37521: PUSH
37522: LD_EXP 17
37526: IN
37527: NOT
37528: IFFALSE 37532
// exit ;
37530: GO 37643
// index := GetElementIndex ( hackTanks , hack ) ;
37532: LD_ADDR_VAR 0 4
37536: PUSH
37537: LD_EXP 17
37541: PPUSH
37542: LD_VAR 0 1
37546: PPUSH
37547: CALL 4965 0 2
37551: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37552: LD_EXP 18
37556: PUSH
37557: LD_VAR 0 4
37561: ARRAY
37562: IFFALSE 37643
// begin for i in hackTanksCaptured [ index ] do
37564: LD_ADDR_VAR 0 3
37568: PUSH
37569: LD_EXP 18
37573: PUSH
37574: LD_VAR 0 4
37578: ARRAY
37579: PUSH
37580: FOR_IN
37581: IFFALSE 37607
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37583: LD_VAR 0 3
37587: PUSH
37588: LD_INT 1
37590: ARRAY
37591: PPUSH
37592: LD_VAR 0 3
37596: PUSH
37597: LD_INT 2
37599: ARRAY
37600: PPUSH
37601: CALL_OW 235
37605: GO 37580
37607: POP
37608: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37609: LD_ADDR_EXP 18
37613: PUSH
37614: LD_EXP 18
37618: PPUSH
37619: LD_VAR 0 4
37623: PPUSH
37624: EMPTY
37625: PPUSH
37626: CALL_OW 1
37630: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37631: LD_VAR 0 1
37635: PPUSH
37636: LD_INT 0
37638: PPUSH
37639: CALL_OW 505
// end ; end ;
37643: LD_VAR 0 2
37647: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37648: LD_INT 0
37650: PPUSH
37651: PPUSH
37652: PPUSH
// if not hack in hackTanks or not vehicles then
37653: LD_VAR 0 1
37657: PUSH
37658: LD_EXP 17
37662: IN
37663: NOT
37664: PUSH
37665: LD_VAR 0 2
37669: NOT
37670: OR
37671: IFFALSE 37675
// exit ;
37673: GO 37925
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37675: LD_ADDR_VAR 0 2
37679: PUSH
37680: LD_VAR 0 1
37684: PPUSH
37685: LD_VAR 0 2
37689: PPUSH
37690: LD_INT 1
37692: PPUSH
37693: LD_INT 1
37695: PPUSH
37696: CALL 5615 0 4
37700: ST_TO_ADDR
// display_strings := vehicles ;
37701: LD_ADDR_OWVAR 47
37705: PUSH
37706: LD_VAR 0 2
37710: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37711: LD_ADDR_VAR 0 5
37715: PUSH
37716: LD_EXP 17
37720: PPUSH
37721: LD_VAR 0 1
37725: PPUSH
37726: CALL 4965 0 2
37730: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37731: LD_EXP 18
37735: PUSH
37736: LD_VAR 0 5
37740: ARRAY
37741: PUSH
37742: LD_EXP 19
37746: LESS
37747: IFFALSE 37901
// begin for i := 1 to vehicles do
37749: LD_ADDR_VAR 0 4
37753: PUSH
37754: DOUBLE
37755: LD_INT 1
37757: DEC
37758: ST_TO_ADDR
37759: LD_VAR 0 2
37763: PUSH
37764: FOR_TO
37765: IFFALSE 37899
// begin if hackTanksCaptured [ index ] = hackLimit then
37767: LD_EXP 18
37771: PUSH
37772: LD_VAR 0 5
37776: ARRAY
37777: PUSH
37778: LD_EXP 19
37782: EQUAL
37783: IFFALSE 37787
// break ;
37785: GO 37899
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37787: LD_ADDR_EXP 18
37791: PUSH
37792: LD_EXP 18
37796: PPUSH
37797: LD_VAR 0 5
37801: PUSH
37802: LD_EXP 18
37806: PUSH
37807: LD_VAR 0 5
37811: ARRAY
37812: PUSH
37813: LD_INT 1
37815: PLUS
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PPUSH
37821: LD_VAR 0 2
37825: PUSH
37826: LD_VAR 0 4
37830: ARRAY
37831: PUSH
37832: LD_VAR 0 2
37836: PUSH
37837: LD_VAR 0 4
37841: ARRAY
37842: PPUSH
37843: CALL_OW 255
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PPUSH
37852: CALL 5180 0 3
37856: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37857: LD_VAR 0 2
37861: PUSH
37862: LD_VAR 0 4
37866: ARRAY
37867: PPUSH
37868: LD_VAR 0 1
37872: PPUSH
37873: CALL_OW 255
37877: PPUSH
37878: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37882: LD_VAR 0 2
37886: PUSH
37887: LD_VAR 0 4
37891: ARRAY
37892: PPUSH
37893: CALL_OW 141
// end ;
37897: GO 37764
37899: POP
37900: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37901: LD_VAR 0 1
37905: PPUSH
37906: LD_EXP 18
37910: PUSH
37911: LD_VAR 0 5
37915: ARRAY
37916: PUSH
37917: LD_INT 0
37919: PLUS
37920: PPUSH
37921: CALL_OW 505
// end ;
37925: LD_VAR 0 3
37929: RET
// export function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37930: LD_INT 0
37932: PPUSH
37933: PPUSH
37934: PPUSH
37935: PPUSH
// if not hack in hackTanks then
37936: LD_VAR 0 1
37940: PUSH
37941: LD_EXP 17
37945: IN
37946: NOT
37947: IFFALSE 37951
// exit ;
37949: GO 38191
// index := GetElementIndex ( hackTanks , hack ) ;
37951: LD_ADDR_VAR 0 4
37955: PUSH
37956: LD_EXP 17
37960: PPUSH
37961: LD_VAR 0 1
37965: PPUSH
37966: CALL 4965 0 2
37970: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37971: LD_ADDR_VAR 0 3
37975: PUSH
37976: DOUBLE
37977: LD_EXP 18
37981: PUSH
37982: LD_VAR 0 4
37986: ARRAY
37987: INC
37988: ST_TO_ADDR
37989: LD_INT 1
37991: PUSH
37992: FOR_DOWNTO
37993: IFFALSE 38165
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37995: LD_ADDR_VAR 0 5
37999: PUSH
38000: LD_EXP 18
38004: PUSH
38005: LD_VAR 0 4
38009: ARRAY
38010: PUSH
38011: LD_VAR 0 3
38015: ARRAY
38016: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38017: LD_VAR 0 5
38021: PUSH
38022: LD_INT 1
38024: ARRAY
38025: PPUSH
38026: CALL_OW 302
38030: NOT
38031: PUSH
38032: LD_VAR 0 5
38036: PUSH
38037: LD_INT 1
38039: ARRAY
38040: PPUSH
38041: CALL_OW 255
38045: PUSH
38046: LD_VAR 0 1
38050: PPUSH
38051: CALL_OW 255
38055: NONEQUAL
38056: OR
38057: IFFALSE 38163
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38059: LD_VAR 0 5
38063: PUSH
38064: LD_INT 1
38066: ARRAY
38067: PPUSH
38068: CALL_OW 305
38072: PUSH
38073: LD_VAR 0 5
38077: PUSH
38078: LD_INT 1
38080: ARRAY
38081: PPUSH
38082: CALL_OW 255
38086: PUSH
38087: LD_VAR 0 1
38091: PPUSH
38092: CALL_OW 255
38096: EQUAL
38097: AND
38098: IFFALSE 38122
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38100: LD_VAR 0 5
38104: PUSH
38105: LD_INT 1
38107: ARRAY
38108: PPUSH
38109: LD_VAR 0 5
38113: PUSH
38114: LD_INT 2
38116: ARRAY
38117: PPUSH
38118: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38122: LD_ADDR_EXP 18
38126: PUSH
38127: LD_EXP 18
38131: PPUSH
38132: LD_VAR 0 4
38136: PPUSH
38137: LD_EXP 18
38141: PUSH
38142: LD_VAR 0 4
38146: ARRAY
38147: PPUSH
38148: LD_VAR 0 3
38152: PPUSH
38153: CALL_OW 3
38157: PPUSH
38158: CALL_OW 1
38162: ST_TO_ADDR
// end ; end ;
38163: GO 37992
38165: POP
38166: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38167: LD_VAR 0 1
38171: PPUSH
38172: LD_EXP 18
38176: PUSH
38177: LD_VAR 0 4
38181: ARRAY
38182: PUSH
38183: LD_INT 0
38185: PLUS
38186: PPUSH
38187: CALL_OW 505
// end ; end_of_file
38191: LD_VAR 0 2
38195: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
38196: GO 38198
38198: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
38199: LD_STRING initStreamRollete();
38201: PPUSH
38202: CALL_OW 559
// InitStreamMode ;
38206: CALL 38215 0 0
// DefineStreamItems ( ) ;
38210: CALL 38655 0 0
// end ;
38214: END
// function InitStreamMode ; begin
38215: LD_INT 0
38217: PPUSH
// streamModeActive := false ;
38218: LD_ADDR_EXP 21
38222: PUSH
38223: LD_INT 0
38225: ST_TO_ADDR
// normalCounter := 36 ;
38226: LD_ADDR_EXP 22
38230: PUSH
38231: LD_INT 36
38233: ST_TO_ADDR
// hardcoreCounter := 16 ;
38234: LD_ADDR_EXP 23
38238: PUSH
38239: LD_INT 16
38241: ST_TO_ADDR
// sRocket := false ;
38242: LD_ADDR_EXP 26
38246: PUSH
38247: LD_INT 0
38249: ST_TO_ADDR
// sSpeed := false ;
38250: LD_ADDR_EXP 25
38254: PUSH
38255: LD_INT 0
38257: ST_TO_ADDR
// sEngine := false ;
38258: LD_ADDR_EXP 27
38262: PUSH
38263: LD_INT 0
38265: ST_TO_ADDR
// sSpec := false ;
38266: LD_ADDR_EXP 24
38270: PUSH
38271: LD_INT 0
38273: ST_TO_ADDR
// sLevel := false ;
38274: LD_ADDR_EXP 28
38278: PUSH
38279: LD_INT 0
38281: ST_TO_ADDR
// sArmoury := false ;
38282: LD_ADDR_EXP 29
38286: PUSH
38287: LD_INT 0
38289: ST_TO_ADDR
// sRadar := false ;
38290: LD_ADDR_EXP 30
38294: PUSH
38295: LD_INT 0
38297: ST_TO_ADDR
// sBunker := false ;
38298: LD_ADDR_EXP 31
38302: PUSH
38303: LD_INT 0
38305: ST_TO_ADDR
// sHack := false ;
38306: LD_ADDR_EXP 32
38310: PUSH
38311: LD_INT 0
38313: ST_TO_ADDR
// sFire := false ;
38314: LD_ADDR_EXP 33
38318: PUSH
38319: LD_INT 0
38321: ST_TO_ADDR
// sRefresh := false ;
38322: LD_ADDR_EXP 34
38326: PUSH
38327: LD_INT 0
38329: ST_TO_ADDR
// sExp := false ;
38330: LD_ADDR_EXP 35
38334: PUSH
38335: LD_INT 0
38337: ST_TO_ADDR
// sDepot := false ;
38338: LD_ADDR_EXP 36
38342: PUSH
38343: LD_INT 0
38345: ST_TO_ADDR
// sFlag := false ;
38346: LD_ADDR_EXP 37
38350: PUSH
38351: LD_INT 0
38353: ST_TO_ADDR
// sKamikadze := false ;
38354: LD_ADDR_EXP 45
38358: PUSH
38359: LD_INT 0
38361: ST_TO_ADDR
// sTroll := false ;
38362: LD_ADDR_EXP 46
38366: PUSH
38367: LD_INT 0
38369: ST_TO_ADDR
// sSlow := false ;
38370: LD_ADDR_EXP 47
38374: PUSH
38375: LD_INT 0
38377: ST_TO_ADDR
// sLack := false ;
38378: LD_ADDR_EXP 48
38382: PUSH
38383: LD_INT 0
38385: ST_TO_ADDR
// sTank := false ;
38386: LD_ADDR_EXP 50
38390: PUSH
38391: LD_INT 0
38393: ST_TO_ADDR
// sRemote := false ;
38394: LD_ADDR_EXP 51
38398: PUSH
38399: LD_INT 0
38401: ST_TO_ADDR
// sPowell := false ;
38402: LD_ADDR_EXP 52
38406: PUSH
38407: LD_INT 0
38409: ST_TO_ADDR
// sTeleport := false ;
38410: LD_ADDR_EXP 55
38414: PUSH
38415: LD_INT 0
38417: ST_TO_ADDR
// sOilTower := false ;
38418: LD_ADDR_EXP 57
38422: PUSH
38423: LD_INT 0
38425: ST_TO_ADDR
// sShovel := false ;
38426: LD_ADDR_EXP 58
38430: PUSH
38431: LD_INT 0
38433: ST_TO_ADDR
// sSheik := false ;
38434: LD_ADDR_EXP 59
38438: PUSH
38439: LD_INT 0
38441: ST_TO_ADDR
// sEarthquake := false ;
38442: LD_ADDR_EXP 61
38446: PUSH
38447: LD_INT 0
38449: ST_TO_ADDR
// sAI := false ;
38450: LD_ADDR_EXP 62
38454: PUSH
38455: LD_INT 0
38457: ST_TO_ADDR
// sCargo := false ;
38458: LD_ADDR_EXP 65
38462: PUSH
38463: LD_INT 0
38465: ST_TO_ADDR
// sDLaser := false ;
38466: LD_ADDR_EXP 66
38470: PUSH
38471: LD_INT 0
38473: ST_TO_ADDR
// sExchange := false ;
38474: LD_ADDR_EXP 67
38478: PUSH
38479: LD_INT 0
38481: ST_TO_ADDR
// sFac := false ;
38482: LD_ADDR_EXP 68
38486: PUSH
38487: LD_INT 0
38489: ST_TO_ADDR
// sPower := false ;
38490: LD_ADDR_EXP 69
38494: PUSH
38495: LD_INT 0
38497: ST_TO_ADDR
// sRandom := false ;
38498: LD_ADDR_EXP 70
38502: PUSH
38503: LD_INT 0
38505: ST_TO_ADDR
// sShield := false ;
38506: LD_ADDR_EXP 71
38510: PUSH
38511: LD_INT 0
38513: ST_TO_ADDR
// sTime := false ;
38514: LD_ADDR_EXP 72
38518: PUSH
38519: LD_INT 0
38521: ST_TO_ADDR
// sTools := false ;
38522: LD_ADDR_EXP 73
38526: PUSH
38527: LD_INT 0
38529: ST_TO_ADDR
// sSold := false ;
38530: LD_ADDR_EXP 38
38534: PUSH
38535: LD_INT 0
38537: ST_TO_ADDR
// sDiff := false ;
38538: LD_ADDR_EXP 39
38542: PUSH
38543: LD_INT 0
38545: ST_TO_ADDR
// sFog := false ;
38546: LD_ADDR_EXP 42
38550: PUSH
38551: LD_INT 0
38553: ST_TO_ADDR
// sReset := false ;
38554: LD_ADDR_EXP 43
38558: PUSH
38559: LD_INT 0
38561: ST_TO_ADDR
// sSun := false ;
38562: LD_ADDR_EXP 44
38566: PUSH
38567: LD_INT 0
38569: ST_TO_ADDR
// sTiger := false ;
38570: LD_ADDR_EXP 40
38574: PUSH
38575: LD_INT 0
38577: ST_TO_ADDR
// sBomb := false ;
38578: LD_ADDR_EXP 41
38582: PUSH
38583: LD_INT 0
38585: ST_TO_ADDR
// sWound := false ;
38586: LD_ADDR_EXP 49
38590: PUSH
38591: LD_INT 0
38593: ST_TO_ADDR
// sBetray := false ;
38594: LD_ADDR_EXP 53
38598: PUSH
38599: LD_INT 0
38601: ST_TO_ADDR
// sContamin := false ;
38602: LD_ADDR_EXP 54
38606: PUSH
38607: LD_INT 0
38609: ST_TO_ADDR
// sOil := false ;
38610: LD_ADDR_EXP 56
38614: PUSH
38615: LD_INT 0
38617: ST_TO_ADDR
// sStu := false ;
38618: LD_ADDR_EXP 60
38622: PUSH
38623: LD_INT 0
38625: ST_TO_ADDR
// sBazooka := false ;
38626: LD_ADDR_EXP 63
38630: PUSH
38631: LD_INT 0
38633: ST_TO_ADDR
// sMortar := false ;
38634: LD_ADDR_EXP 64
38638: PUSH
38639: LD_INT 0
38641: ST_TO_ADDR
// sRanger := false ;
38642: LD_ADDR_EXP 74
38646: PUSH
38647: LD_INT 0
38649: ST_TO_ADDR
// end ;
38650: LD_VAR 0 1
38654: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
38655: LD_INT 0
38657: PPUSH
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
// result := [ ] ;
38662: LD_ADDR_VAR 0 1
38666: PUSH
38667: EMPTY
38668: ST_TO_ADDR
// if campaign_id = 1 then
38669: LD_OWVAR 69
38673: PUSH
38674: LD_INT 1
38676: EQUAL
38677: IFFALSE 41615
// begin case mission_number of 1 :
38679: LD_OWVAR 70
38683: PUSH
38684: LD_INT 1
38686: DOUBLE
38687: EQUAL
38688: IFTRUE 38692
38690: GO 38756
38692: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
38693: LD_ADDR_VAR 0 1
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 4
38703: PUSH
38704: LD_INT 11
38706: PUSH
38707: LD_INT 12
38709: PUSH
38710: LD_INT 15
38712: PUSH
38713: LD_INT 16
38715: PUSH
38716: LD_INT 22
38718: PUSH
38719: LD_INT 23
38721: PUSH
38722: LD_INT 26
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 101
38738: PUSH
38739: LD_INT 102
38741: PUSH
38742: LD_INT 106
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: ST_TO_ADDR
38754: GO 41613
38756: LD_INT 2
38758: DOUBLE
38759: EQUAL
38760: IFTRUE 38764
38762: GO 38836
38764: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
38765: LD_ADDR_VAR 0 1
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 4
38775: PUSH
38776: LD_INT 11
38778: PUSH
38779: LD_INT 12
38781: PUSH
38782: LD_INT 15
38784: PUSH
38785: LD_INT 16
38787: PUSH
38788: LD_INT 22
38790: PUSH
38791: LD_INT 23
38793: PUSH
38794: LD_INT 26
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 101
38810: PUSH
38811: LD_INT 102
38813: PUSH
38814: LD_INT 105
38816: PUSH
38817: LD_INT 106
38819: PUSH
38820: LD_INT 108
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: ST_TO_ADDR
38834: GO 41613
38836: LD_INT 3
38838: DOUBLE
38839: EQUAL
38840: IFTRUE 38844
38842: GO 38920
38844: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
38845: LD_ADDR_VAR 0 1
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: LD_INT 4
38855: PUSH
38856: LD_INT 5
38858: PUSH
38859: LD_INT 11
38861: PUSH
38862: LD_INT 12
38864: PUSH
38865: LD_INT 15
38867: PUSH
38868: LD_INT 16
38870: PUSH
38871: LD_INT 22
38873: PUSH
38874: LD_INT 26
38876: PUSH
38877: LD_INT 36
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 101
38894: PUSH
38895: LD_INT 102
38897: PUSH
38898: LD_INT 105
38900: PUSH
38901: LD_INT 106
38903: PUSH
38904: LD_INT 108
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: ST_TO_ADDR
38918: GO 41613
38920: LD_INT 4
38922: DOUBLE
38923: EQUAL
38924: IFTRUE 38928
38926: GO 39012
38928: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
38929: LD_ADDR_VAR 0 1
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: LD_INT 4
38939: PUSH
38940: LD_INT 5
38942: PUSH
38943: LD_INT 8
38945: PUSH
38946: LD_INT 11
38948: PUSH
38949: LD_INT 12
38951: PUSH
38952: LD_INT 15
38954: PUSH
38955: LD_INT 16
38957: PUSH
38958: LD_INT 22
38960: PUSH
38961: LD_INT 23
38963: PUSH
38964: LD_INT 26
38966: PUSH
38967: LD_INT 36
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 101
38986: PUSH
38987: LD_INT 102
38989: PUSH
38990: LD_INT 105
38992: PUSH
38993: LD_INT 106
38995: PUSH
38996: LD_INT 108
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: ST_TO_ADDR
39010: GO 41613
39012: LD_INT 5
39014: DOUBLE
39015: EQUAL
39016: IFTRUE 39020
39018: GO 39120
39020: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
39021: LD_ADDR_VAR 0 1
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 4
39031: PUSH
39032: LD_INT 5
39034: PUSH
39035: LD_INT 6
39037: PUSH
39038: LD_INT 8
39040: PUSH
39041: LD_INT 11
39043: PUSH
39044: LD_INT 12
39046: PUSH
39047: LD_INT 15
39049: PUSH
39050: LD_INT 16
39052: PUSH
39053: LD_INT 22
39055: PUSH
39056: LD_INT 23
39058: PUSH
39059: LD_INT 25
39061: PUSH
39062: LD_INT 26
39064: PUSH
39065: LD_INT 36
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 101
39086: PUSH
39087: LD_INT 102
39089: PUSH
39090: LD_INT 105
39092: PUSH
39093: LD_INT 106
39095: PUSH
39096: LD_INT 108
39098: PUSH
39099: LD_INT 109
39101: PUSH
39102: LD_INT 112
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: ST_TO_ADDR
39118: GO 41613
39120: LD_INT 6
39122: DOUBLE
39123: EQUAL
39124: IFTRUE 39128
39126: GO 39248
39128: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
39129: LD_ADDR_VAR 0 1
39133: PUSH
39134: LD_INT 2
39136: PUSH
39137: LD_INT 4
39139: PUSH
39140: LD_INT 5
39142: PUSH
39143: LD_INT 6
39145: PUSH
39146: LD_INT 8
39148: PUSH
39149: LD_INT 11
39151: PUSH
39152: LD_INT 12
39154: PUSH
39155: LD_INT 15
39157: PUSH
39158: LD_INT 16
39160: PUSH
39161: LD_INT 20
39163: PUSH
39164: LD_INT 21
39166: PUSH
39167: LD_INT 22
39169: PUSH
39170: LD_INT 23
39172: PUSH
39173: LD_INT 25
39175: PUSH
39176: LD_INT 26
39178: PUSH
39179: LD_INT 30
39181: PUSH
39182: LD_INT 31
39184: PUSH
39185: LD_INT 32
39187: PUSH
39188: LD_INT 36
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 101
39214: PUSH
39215: LD_INT 102
39217: PUSH
39218: LD_INT 105
39220: PUSH
39221: LD_INT 106
39223: PUSH
39224: LD_INT 108
39226: PUSH
39227: LD_INT 109
39229: PUSH
39230: LD_INT 112
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: ST_TO_ADDR
39246: GO 41613
39248: LD_INT 7
39250: DOUBLE
39251: EQUAL
39252: IFTRUE 39256
39254: GO 39356
39256: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
39257: LD_ADDR_VAR 0 1
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: LD_INT 4
39267: PUSH
39268: LD_INT 5
39270: PUSH
39271: LD_INT 7
39273: PUSH
39274: LD_INT 11
39276: PUSH
39277: LD_INT 12
39279: PUSH
39280: LD_INT 15
39282: PUSH
39283: LD_INT 16
39285: PUSH
39286: LD_INT 20
39288: PUSH
39289: LD_INT 21
39291: PUSH
39292: LD_INT 22
39294: PUSH
39295: LD_INT 23
39297: PUSH
39298: LD_INT 25
39300: PUSH
39301: LD_INT 26
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 101
39322: PUSH
39323: LD_INT 102
39325: PUSH
39326: LD_INT 103
39328: PUSH
39329: LD_INT 105
39331: PUSH
39332: LD_INT 106
39334: PUSH
39335: LD_INT 108
39337: PUSH
39338: LD_INT 112
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: ST_TO_ADDR
39354: GO 41613
39356: LD_INT 8
39358: DOUBLE
39359: EQUAL
39360: IFTRUE 39364
39362: GO 39492
39364: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
39365: LD_ADDR_VAR 0 1
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 4
39375: PUSH
39376: LD_INT 5
39378: PUSH
39379: LD_INT 6
39381: PUSH
39382: LD_INT 7
39384: PUSH
39385: LD_INT 8
39387: PUSH
39388: LD_INT 11
39390: PUSH
39391: LD_INT 12
39393: PUSH
39394: LD_INT 15
39396: PUSH
39397: LD_INT 16
39399: PUSH
39400: LD_INT 20
39402: PUSH
39403: LD_INT 21
39405: PUSH
39406: LD_INT 22
39408: PUSH
39409: LD_INT 23
39411: PUSH
39412: LD_INT 25
39414: PUSH
39415: LD_INT 26
39417: PUSH
39418: LD_INT 30
39420: PUSH
39421: LD_INT 31
39423: PUSH
39424: LD_INT 32
39426: PUSH
39427: LD_INT 36
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 101
39454: PUSH
39455: LD_INT 102
39457: PUSH
39458: LD_INT 103
39460: PUSH
39461: LD_INT 105
39463: PUSH
39464: LD_INT 106
39466: PUSH
39467: LD_INT 108
39469: PUSH
39470: LD_INT 109
39472: PUSH
39473: LD_INT 112
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: ST_TO_ADDR
39490: GO 41613
39492: LD_INT 9
39494: DOUBLE
39495: EQUAL
39496: IFTRUE 39500
39498: GO 39636
39500: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
39501: LD_ADDR_VAR 0 1
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 4
39511: PUSH
39512: LD_INT 5
39514: PUSH
39515: LD_INT 6
39517: PUSH
39518: LD_INT 7
39520: PUSH
39521: LD_INT 8
39523: PUSH
39524: LD_INT 11
39526: PUSH
39527: LD_INT 12
39529: PUSH
39530: LD_INT 15
39532: PUSH
39533: LD_INT 16
39535: PUSH
39536: LD_INT 20
39538: PUSH
39539: LD_INT 21
39541: PUSH
39542: LD_INT 22
39544: PUSH
39545: LD_INT 23
39547: PUSH
39548: LD_INT 25
39550: PUSH
39551: LD_INT 26
39553: PUSH
39554: LD_INT 28
39556: PUSH
39557: LD_INT 30
39559: PUSH
39560: LD_INT 31
39562: PUSH
39563: LD_INT 32
39565: PUSH
39566: LD_INT 36
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 101
39594: PUSH
39595: LD_INT 102
39597: PUSH
39598: LD_INT 103
39600: PUSH
39601: LD_INT 105
39603: PUSH
39604: LD_INT 106
39606: PUSH
39607: LD_INT 108
39609: PUSH
39610: LD_INT 109
39612: PUSH
39613: LD_INT 112
39615: PUSH
39616: LD_INT 114
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: ST_TO_ADDR
39634: GO 41613
39636: LD_INT 10
39638: DOUBLE
39639: EQUAL
39640: IFTRUE 39644
39642: GO 39828
39644: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
39645: LD_ADDR_VAR 0 1
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: LD_INT 4
39655: PUSH
39656: LD_INT 5
39658: PUSH
39659: LD_INT 6
39661: PUSH
39662: LD_INT 7
39664: PUSH
39665: LD_INT 8
39667: PUSH
39668: LD_INT 9
39670: PUSH
39671: LD_INT 10
39673: PUSH
39674: LD_INT 11
39676: PUSH
39677: LD_INT 12
39679: PUSH
39680: LD_INT 13
39682: PUSH
39683: LD_INT 14
39685: PUSH
39686: LD_INT 15
39688: PUSH
39689: LD_INT 16
39691: PUSH
39692: LD_INT 17
39694: PUSH
39695: LD_INT 18
39697: PUSH
39698: LD_INT 19
39700: PUSH
39701: LD_INT 20
39703: PUSH
39704: LD_INT 21
39706: PUSH
39707: LD_INT 22
39709: PUSH
39710: LD_INT 23
39712: PUSH
39713: LD_INT 24
39715: PUSH
39716: LD_INT 25
39718: PUSH
39719: LD_INT 26
39721: PUSH
39722: LD_INT 28
39724: PUSH
39725: LD_INT 30
39727: PUSH
39728: LD_INT 31
39730: PUSH
39731: LD_INT 32
39733: PUSH
39734: LD_INT 36
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 101
39770: PUSH
39771: LD_INT 102
39773: PUSH
39774: LD_INT 103
39776: PUSH
39777: LD_INT 104
39779: PUSH
39780: LD_INT 105
39782: PUSH
39783: LD_INT 106
39785: PUSH
39786: LD_INT 107
39788: PUSH
39789: LD_INT 108
39791: PUSH
39792: LD_INT 109
39794: PUSH
39795: LD_INT 110
39797: PUSH
39798: LD_INT 111
39800: PUSH
39801: LD_INT 112
39803: PUSH
39804: LD_INT 114
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: ST_TO_ADDR
39826: GO 41613
39828: LD_INT 11
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 40028
39836: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
39837: LD_ADDR_VAR 0 1
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: LD_INT 4
39850: PUSH
39851: LD_INT 5
39853: PUSH
39854: LD_INT 6
39856: PUSH
39857: LD_INT 7
39859: PUSH
39860: LD_INT 8
39862: PUSH
39863: LD_INT 9
39865: PUSH
39866: LD_INT 10
39868: PUSH
39869: LD_INT 11
39871: PUSH
39872: LD_INT 12
39874: PUSH
39875: LD_INT 13
39877: PUSH
39878: LD_INT 14
39880: PUSH
39881: LD_INT 15
39883: PUSH
39884: LD_INT 16
39886: PUSH
39887: LD_INT 17
39889: PUSH
39890: LD_INT 18
39892: PUSH
39893: LD_INT 19
39895: PUSH
39896: LD_INT 20
39898: PUSH
39899: LD_INT 21
39901: PUSH
39902: LD_INT 22
39904: PUSH
39905: LD_INT 23
39907: PUSH
39908: LD_INT 24
39910: PUSH
39911: LD_INT 25
39913: PUSH
39914: LD_INT 26
39916: PUSH
39917: LD_INT 28
39919: PUSH
39920: LD_INT 30
39922: PUSH
39923: LD_INT 31
39925: PUSH
39926: LD_INT 32
39928: PUSH
39929: LD_INT 34
39931: PUSH
39932: LD_INT 36
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 101
39970: PUSH
39971: LD_INT 102
39973: PUSH
39974: LD_INT 103
39976: PUSH
39977: LD_INT 104
39979: PUSH
39980: LD_INT 105
39982: PUSH
39983: LD_INT 106
39985: PUSH
39986: LD_INT 107
39988: PUSH
39989: LD_INT 108
39991: PUSH
39992: LD_INT 109
39994: PUSH
39995: LD_INT 110
39997: PUSH
39998: LD_INT 111
40000: PUSH
40001: LD_INT 112
40003: PUSH
40004: LD_INT 114
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: ST_TO_ADDR
40026: GO 41613
40028: LD_INT 12
40030: DOUBLE
40031: EQUAL
40032: IFTRUE 40036
40034: GO 40244
40036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
40037: LD_ADDR_VAR 0 1
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 3
40050: PUSH
40051: LD_INT 4
40053: PUSH
40054: LD_INT 5
40056: PUSH
40057: LD_INT 6
40059: PUSH
40060: LD_INT 7
40062: PUSH
40063: LD_INT 8
40065: PUSH
40066: LD_INT 9
40068: PUSH
40069: LD_INT 10
40071: PUSH
40072: LD_INT 11
40074: PUSH
40075: LD_INT 12
40077: PUSH
40078: LD_INT 13
40080: PUSH
40081: LD_INT 14
40083: PUSH
40084: LD_INT 15
40086: PUSH
40087: LD_INT 16
40089: PUSH
40090: LD_INT 17
40092: PUSH
40093: LD_INT 18
40095: PUSH
40096: LD_INT 19
40098: PUSH
40099: LD_INT 20
40101: PUSH
40102: LD_INT 21
40104: PUSH
40105: LD_INT 22
40107: PUSH
40108: LD_INT 23
40110: PUSH
40111: LD_INT 24
40113: PUSH
40114: LD_INT 25
40116: PUSH
40117: LD_INT 26
40119: PUSH
40120: LD_INT 27
40122: PUSH
40123: LD_INT 28
40125: PUSH
40126: LD_INT 30
40128: PUSH
40129: LD_INT 31
40131: PUSH
40132: LD_INT 32
40134: PUSH
40135: LD_INT 33
40137: PUSH
40138: LD_INT 34
40140: PUSH
40141: LD_INT 36
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 101
40182: PUSH
40183: LD_INT 102
40185: PUSH
40186: LD_INT 103
40188: PUSH
40189: LD_INT 104
40191: PUSH
40192: LD_INT 105
40194: PUSH
40195: LD_INT 106
40197: PUSH
40198: LD_INT 107
40200: PUSH
40201: LD_INT 108
40203: PUSH
40204: LD_INT 109
40206: PUSH
40207: LD_INT 110
40209: PUSH
40210: LD_INT 111
40212: PUSH
40213: LD_INT 112
40215: PUSH
40216: LD_INT 113
40218: PUSH
40219: LD_INT 114
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: ST_TO_ADDR
40242: GO 41613
40244: LD_INT 13
40246: DOUBLE
40247: EQUAL
40248: IFTRUE 40252
40250: GO 40448
40252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
40253: LD_ADDR_VAR 0 1
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 3
40266: PUSH
40267: LD_INT 4
40269: PUSH
40270: LD_INT 5
40272: PUSH
40273: LD_INT 8
40275: PUSH
40276: LD_INT 9
40278: PUSH
40279: LD_INT 10
40281: PUSH
40282: LD_INT 11
40284: PUSH
40285: LD_INT 12
40287: PUSH
40288: LD_INT 14
40290: PUSH
40291: LD_INT 15
40293: PUSH
40294: LD_INT 16
40296: PUSH
40297: LD_INT 17
40299: PUSH
40300: LD_INT 18
40302: PUSH
40303: LD_INT 19
40305: PUSH
40306: LD_INT 20
40308: PUSH
40309: LD_INT 21
40311: PUSH
40312: LD_INT 22
40314: PUSH
40315: LD_INT 23
40317: PUSH
40318: LD_INT 24
40320: PUSH
40321: LD_INT 25
40323: PUSH
40324: LD_INT 26
40326: PUSH
40327: LD_INT 27
40329: PUSH
40330: LD_INT 28
40332: PUSH
40333: LD_INT 30
40335: PUSH
40336: LD_INT 31
40338: PUSH
40339: LD_INT 32
40341: PUSH
40342: LD_INT 33
40344: PUSH
40345: LD_INT 34
40347: PUSH
40348: LD_INT 36
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 101
40386: PUSH
40387: LD_INT 102
40389: PUSH
40390: LD_INT 103
40392: PUSH
40393: LD_INT 104
40395: PUSH
40396: LD_INT 105
40398: PUSH
40399: LD_INT 106
40401: PUSH
40402: LD_INT 107
40404: PUSH
40405: LD_INT 108
40407: PUSH
40408: LD_INT 109
40410: PUSH
40411: LD_INT 110
40413: PUSH
40414: LD_INT 111
40416: PUSH
40417: LD_INT 112
40419: PUSH
40420: LD_INT 113
40422: PUSH
40423: LD_INT 114
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: ST_TO_ADDR
40446: GO 41613
40448: LD_INT 14
40450: DOUBLE
40451: EQUAL
40452: IFTRUE 40456
40454: GO 40668
40456: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
40457: LD_ADDR_VAR 0 1
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: LD_INT 4
40473: PUSH
40474: LD_INT 5
40476: PUSH
40477: LD_INT 6
40479: PUSH
40480: LD_INT 7
40482: PUSH
40483: LD_INT 8
40485: PUSH
40486: LD_INT 9
40488: PUSH
40489: LD_INT 10
40491: PUSH
40492: LD_INT 11
40494: PUSH
40495: LD_INT 12
40497: PUSH
40498: LD_INT 13
40500: PUSH
40501: LD_INT 14
40503: PUSH
40504: LD_INT 15
40506: PUSH
40507: LD_INT 16
40509: PUSH
40510: LD_INT 17
40512: PUSH
40513: LD_INT 18
40515: PUSH
40516: LD_INT 19
40518: PUSH
40519: LD_INT 20
40521: PUSH
40522: LD_INT 21
40524: PUSH
40525: LD_INT 22
40527: PUSH
40528: LD_INT 23
40530: PUSH
40531: LD_INT 24
40533: PUSH
40534: LD_INT 25
40536: PUSH
40537: LD_INT 26
40539: PUSH
40540: LD_INT 27
40542: PUSH
40543: LD_INT 28
40545: PUSH
40546: LD_INT 29
40548: PUSH
40549: LD_INT 30
40551: PUSH
40552: LD_INT 31
40554: PUSH
40555: LD_INT 32
40557: PUSH
40558: LD_INT 33
40560: PUSH
40561: LD_INT 34
40563: PUSH
40564: LD_INT 36
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 101
40606: PUSH
40607: LD_INT 102
40609: PUSH
40610: LD_INT 103
40612: PUSH
40613: LD_INT 104
40615: PUSH
40616: LD_INT 105
40618: PUSH
40619: LD_INT 106
40621: PUSH
40622: LD_INT 107
40624: PUSH
40625: LD_INT 108
40627: PUSH
40628: LD_INT 109
40630: PUSH
40631: LD_INT 110
40633: PUSH
40634: LD_INT 111
40636: PUSH
40637: LD_INT 112
40639: PUSH
40640: LD_INT 113
40642: PUSH
40643: LD_INT 114
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: ST_TO_ADDR
40666: GO 41613
40668: LD_INT 15
40670: DOUBLE
40671: EQUAL
40672: IFTRUE 40676
40674: GO 40888
40676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
40677: LD_ADDR_VAR 0 1
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: LD_INT 3
40690: PUSH
40691: LD_INT 4
40693: PUSH
40694: LD_INT 5
40696: PUSH
40697: LD_INT 6
40699: PUSH
40700: LD_INT 7
40702: PUSH
40703: LD_INT 8
40705: PUSH
40706: LD_INT 9
40708: PUSH
40709: LD_INT 10
40711: PUSH
40712: LD_INT 11
40714: PUSH
40715: LD_INT 12
40717: PUSH
40718: LD_INT 13
40720: PUSH
40721: LD_INT 14
40723: PUSH
40724: LD_INT 15
40726: PUSH
40727: LD_INT 16
40729: PUSH
40730: LD_INT 17
40732: PUSH
40733: LD_INT 18
40735: PUSH
40736: LD_INT 19
40738: PUSH
40739: LD_INT 20
40741: PUSH
40742: LD_INT 21
40744: PUSH
40745: LD_INT 22
40747: PUSH
40748: LD_INT 23
40750: PUSH
40751: LD_INT 24
40753: PUSH
40754: LD_INT 25
40756: PUSH
40757: LD_INT 26
40759: PUSH
40760: LD_INT 27
40762: PUSH
40763: LD_INT 28
40765: PUSH
40766: LD_INT 29
40768: PUSH
40769: LD_INT 30
40771: PUSH
40772: LD_INT 31
40774: PUSH
40775: LD_INT 32
40777: PUSH
40778: LD_INT 33
40780: PUSH
40781: LD_INT 34
40783: PUSH
40784: LD_INT 36
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 101
40826: PUSH
40827: LD_INT 102
40829: PUSH
40830: LD_INT 103
40832: PUSH
40833: LD_INT 104
40835: PUSH
40836: LD_INT 105
40838: PUSH
40839: LD_INT 106
40841: PUSH
40842: LD_INT 107
40844: PUSH
40845: LD_INT 108
40847: PUSH
40848: LD_INT 109
40850: PUSH
40851: LD_INT 110
40853: PUSH
40854: LD_INT 111
40856: PUSH
40857: LD_INT 112
40859: PUSH
40860: LD_INT 113
40862: PUSH
40863: LD_INT 114
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: ST_TO_ADDR
40886: GO 41613
40888: LD_INT 16
40890: DOUBLE
40891: EQUAL
40892: IFTRUE 40896
40894: GO 41020
40896: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
40897: LD_ADDR_VAR 0 1
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 4
40907: PUSH
40908: LD_INT 5
40910: PUSH
40911: LD_INT 7
40913: PUSH
40914: LD_INT 11
40916: PUSH
40917: LD_INT 12
40919: PUSH
40920: LD_INT 15
40922: PUSH
40923: LD_INT 16
40925: PUSH
40926: LD_INT 20
40928: PUSH
40929: LD_INT 21
40931: PUSH
40932: LD_INT 22
40934: PUSH
40935: LD_INT 23
40937: PUSH
40938: LD_INT 25
40940: PUSH
40941: LD_INT 26
40943: PUSH
40944: LD_INT 30
40946: PUSH
40947: LD_INT 31
40949: PUSH
40950: LD_INT 32
40952: PUSH
40953: LD_INT 33
40955: PUSH
40956: LD_INT 34
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 101
40982: PUSH
40983: LD_INT 102
40985: PUSH
40986: LD_INT 103
40988: PUSH
40989: LD_INT 106
40991: PUSH
40992: LD_INT 108
40994: PUSH
40995: LD_INT 112
40997: PUSH
40998: LD_INT 113
41000: PUSH
41001: LD_INT 114
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: ST_TO_ADDR
41018: GO 41613
41020: LD_INT 17
41022: DOUBLE
41023: EQUAL
41024: IFTRUE 41028
41026: GO 41240
41028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
41029: LD_ADDR_VAR 0 1
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: LD_INT 3
41042: PUSH
41043: LD_INT 4
41045: PUSH
41046: LD_INT 5
41048: PUSH
41049: LD_INT 6
41051: PUSH
41052: LD_INT 7
41054: PUSH
41055: LD_INT 8
41057: PUSH
41058: LD_INT 9
41060: PUSH
41061: LD_INT 10
41063: PUSH
41064: LD_INT 11
41066: PUSH
41067: LD_INT 12
41069: PUSH
41070: LD_INT 13
41072: PUSH
41073: LD_INT 14
41075: PUSH
41076: LD_INT 15
41078: PUSH
41079: LD_INT 16
41081: PUSH
41082: LD_INT 17
41084: PUSH
41085: LD_INT 18
41087: PUSH
41088: LD_INT 19
41090: PUSH
41091: LD_INT 20
41093: PUSH
41094: LD_INT 21
41096: PUSH
41097: LD_INT 22
41099: PUSH
41100: LD_INT 23
41102: PUSH
41103: LD_INT 24
41105: PUSH
41106: LD_INT 25
41108: PUSH
41109: LD_INT 26
41111: PUSH
41112: LD_INT 27
41114: PUSH
41115: LD_INT 28
41117: PUSH
41118: LD_INT 29
41120: PUSH
41121: LD_INT 30
41123: PUSH
41124: LD_INT 31
41126: PUSH
41127: LD_INT 32
41129: PUSH
41130: LD_INT 33
41132: PUSH
41133: LD_INT 34
41135: PUSH
41136: LD_INT 36
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 101
41178: PUSH
41179: LD_INT 102
41181: PUSH
41182: LD_INT 103
41184: PUSH
41185: LD_INT 104
41187: PUSH
41188: LD_INT 105
41190: PUSH
41191: LD_INT 106
41193: PUSH
41194: LD_INT 107
41196: PUSH
41197: LD_INT 108
41199: PUSH
41200: LD_INT 109
41202: PUSH
41203: LD_INT 110
41205: PUSH
41206: LD_INT 111
41208: PUSH
41209: LD_INT 112
41211: PUSH
41212: LD_INT 113
41214: PUSH
41215: LD_INT 114
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: ST_TO_ADDR
41238: GO 41613
41240: LD_INT 18
41242: DOUBLE
41243: EQUAL
41244: IFTRUE 41248
41246: GO 41384
41248: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
41249: LD_ADDR_VAR 0 1
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: LD_INT 4
41259: PUSH
41260: LD_INT 5
41262: PUSH
41263: LD_INT 7
41265: PUSH
41266: LD_INT 11
41268: PUSH
41269: LD_INT 12
41271: PUSH
41272: LD_INT 15
41274: PUSH
41275: LD_INT 16
41277: PUSH
41278: LD_INT 20
41280: PUSH
41281: LD_INT 21
41283: PUSH
41284: LD_INT 22
41286: PUSH
41287: LD_INT 23
41289: PUSH
41290: LD_INT 25
41292: PUSH
41293: LD_INT 26
41295: PUSH
41296: LD_INT 30
41298: PUSH
41299: LD_INT 31
41301: PUSH
41302: LD_INT 32
41304: PUSH
41305: LD_INT 33
41307: PUSH
41308: LD_INT 34
41310: PUSH
41311: LD_INT 35
41313: PUSH
41314: LD_INT 36
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 101
41342: PUSH
41343: LD_INT 102
41345: PUSH
41346: LD_INT 103
41348: PUSH
41349: LD_INT 106
41351: PUSH
41352: LD_INT 108
41354: PUSH
41355: LD_INT 112
41357: PUSH
41358: LD_INT 113
41360: PUSH
41361: LD_INT 114
41363: PUSH
41364: LD_INT 115
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: ST_TO_ADDR
41382: GO 41613
41384: LD_INT 19
41386: DOUBLE
41387: EQUAL
41388: IFTRUE 41392
41390: GO 41612
41392: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
41393: LD_ADDR_VAR 0 1
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: LD_INT 3
41406: PUSH
41407: LD_INT 4
41409: PUSH
41410: LD_INT 5
41412: PUSH
41413: LD_INT 6
41415: PUSH
41416: LD_INT 7
41418: PUSH
41419: LD_INT 8
41421: PUSH
41422: LD_INT 9
41424: PUSH
41425: LD_INT 10
41427: PUSH
41428: LD_INT 11
41430: PUSH
41431: LD_INT 12
41433: PUSH
41434: LD_INT 13
41436: PUSH
41437: LD_INT 14
41439: PUSH
41440: LD_INT 15
41442: PUSH
41443: LD_INT 16
41445: PUSH
41446: LD_INT 17
41448: PUSH
41449: LD_INT 18
41451: PUSH
41452: LD_INT 19
41454: PUSH
41455: LD_INT 20
41457: PUSH
41458: LD_INT 21
41460: PUSH
41461: LD_INT 22
41463: PUSH
41464: LD_INT 23
41466: PUSH
41467: LD_INT 24
41469: PUSH
41470: LD_INT 25
41472: PUSH
41473: LD_INT 26
41475: PUSH
41476: LD_INT 27
41478: PUSH
41479: LD_INT 28
41481: PUSH
41482: LD_INT 29
41484: PUSH
41485: LD_INT 30
41487: PUSH
41488: LD_INT 31
41490: PUSH
41491: LD_INT 32
41493: PUSH
41494: LD_INT 33
41496: PUSH
41497: LD_INT 34
41499: PUSH
41500: LD_INT 35
41502: PUSH
41503: LD_INT 36
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 101
41546: PUSH
41547: LD_INT 102
41549: PUSH
41550: LD_INT 103
41552: PUSH
41553: LD_INT 104
41555: PUSH
41556: LD_INT 105
41558: PUSH
41559: LD_INT 106
41561: PUSH
41562: LD_INT 107
41564: PUSH
41565: LD_INT 108
41567: PUSH
41568: LD_INT 109
41570: PUSH
41571: LD_INT 110
41573: PUSH
41574: LD_INT 111
41576: PUSH
41577: LD_INT 112
41579: PUSH
41580: LD_INT 113
41582: PUSH
41583: LD_INT 114
41585: PUSH
41586: LD_INT 115
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: ST_TO_ADDR
41610: GO 41613
41612: POP
// end else
41613: GO 41832
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
41615: LD_ADDR_VAR 0 1
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: LD_INT 4
41631: PUSH
41632: LD_INT 5
41634: PUSH
41635: LD_INT 6
41637: PUSH
41638: LD_INT 7
41640: PUSH
41641: LD_INT 8
41643: PUSH
41644: LD_INT 9
41646: PUSH
41647: LD_INT 10
41649: PUSH
41650: LD_INT 11
41652: PUSH
41653: LD_INT 12
41655: PUSH
41656: LD_INT 13
41658: PUSH
41659: LD_INT 14
41661: PUSH
41662: LD_INT 15
41664: PUSH
41665: LD_INT 16
41667: PUSH
41668: LD_INT 17
41670: PUSH
41671: LD_INT 18
41673: PUSH
41674: LD_INT 19
41676: PUSH
41677: LD_INT 20
41679: PUSH
41680: LD_INT 21
41682: PUSH
41683: LD_INT 22
41685: PUSH
41686: LD_INT 23
41688: PUSH
41689: LD_INT 24
41691: PUSH
41692: LD_INT 25
41694: PUSH
41695: LD_INT 26
41697: PUSH
41698: LD_INT 27
41700: PUSH
41701: LD_INT 28
41703: PUSH
41704: LD_INT 29
41706: PUSH
41707: LD_INT 30
41709: PUSH
41710: LD_INT 31
41712: PUSH
41713: LD_INT 32
41715: PUSH
41716: LD_INT 33
41718: PUSH
41719: LD_INT 34
41721: PUSH
41722: LD_INT 35
41724: PUSH
41725: LD_INT 36
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 101
41768: PUSH
41769: LD_INT 102
41771: PUSH
41772: LD_INT 103
41774: PUSH
41775: LD_INT 104
41777: PUSH
41778: LD_INT 105
41780: PUSH
41781: LD_INT 106
41783: PUSH
41784: LD_INT 107
41786: PUSH
41787: LD_INT 108
41789: PUSH
41790: LD_INT 109
41792: PUSH
41793: LD_INT 110
41795: PUSH
41796: LD_INT 111
41798: PUSH
41799: LD_INT 112
41801: PUSH
41802: LD_INT 113
41804: PUSH
41805: LD_INT 114
41807: PUSH
41808: LD_INT 115
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: ST_TO_ADDR
// if result then
41832: LD_VAR 0 1
41836: IFFALSE 42125
// begin normal :=  ;
41838: LD_ADDR_VAR 0 3
41842: PUSH
41843: LD_STRING 
41845: ST_TO_ADDR
// hardcore :=  ;
41846: LD_ADDR_VAR 0 4
41850: PUSH
41851: LD_STRING 
41853: ST_TO_ADDR
// for i = 1 to normalCounter do
41854: LD_ADDR_VAR 0 5
41858: PUSH
41859: DOUBLE
41860: LD_INT 1
41862: DEC
41863: ST_TO_ADDR
41864: LD_EXP 22
41868: PUSH
41869: FOR_TO
41870: IFFALSE 41971
// begin tmp := 0 ;
41872: LD_ADDR_VAR 0 2
41876: PUSH
41877: LD_STRING 0
41879: ST_TO_ADDR
// if result [ 1 ] then
41880: LD_VAR 0 1
41884: PUSH
41885: LD_INT 1
41887: ARRAY
41888: IFFALSE 41953
// if result [ 1 ] [ 1 ] = i then
41890: LD_VAR 0 1
41894: PUSH
41895: LD_INT 1
41897: ARRAY
41898: PUSH
41899: LD_INT 1
41901: ARRAY
41902: PUSH
41903: LD_VAR 0 5
41907: EQUAL
41908: IFFALSE 41953
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
41910: LD_ADDR_VAR 0 1
41914: PUSH
41915: LD_VAR 0 1
41919: PPUSH
41920: LD_INT 1
41922: PPUSH
41923: LD_VAR 0 1
41927: PUSH
41928: LD_INT 1
41930: ARRAY
41931: PPUSH
41932: LD_INT 1
41934: PPUSH
41935: CALL_OW 3
41939: PPUSH
41940: CALL_OW 1
41944: ST_TO_ADDR
// tmp := 1 ;
41945: LD_ADDR_VAR 0 2
41949: PUSH
41950: LD_STRING 1
41952: ST_TO_ADDR
// end ; normal := normal & tmp ;
41953: LD_ADDR_VAR 0 3
41957: PUSH
41958: LD_VAR 0 3
41962: PUSH
41963: LD_VAR 0 2
41967: STR
41968: ST_TO_ADDR
// end ;
41969: GO 41869
41971: POP
41972: POP
// for i = 1 to hardcoreCounter do
41973: LD_ADDR_VAR 0 5
41977: PUSH
41978: DOUBLE
41979: LD_INT 1
41981: DEC
41982: ST_TO_ADDR
41983: LD_EXP 23
41987: PUSH
41988: FOR_TO
41989: IFFALSE 42094
// begin tmp := 0 ;
41991: LD_ADDR_VAR 0 2
41995: PUSH
41996: LD_STRING 0
41998: ST_TO_ADDR
// if result [ 2 ] then
41999: LD_VAR 0 1
42003: PUSH
42004: LD_INT 2
42006: ARRAY
42007: IFFALSE 42076
// if result [ 2 ] [ 1 ] = 100 + i then
42009: LD_VAR 0 1
42013: PUSH
42014: LD_INT 2
42016: ARRAY
42017: PUSH
42018: LD_INT 1
42020: ARRAY
42021: PUSH
42022: LD_INT 100
42024: PUSH
42025: LD_VAR 0 5
42029: PLUS
42030: EQUAL
42031: IFFALSE 42076
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
42033: LD_ADDR_VAR 0 1
42037: PUSH
42038: LD_VAR 0 1
42042: PPUSH
42043: LD_INT 2
42045: PPUSH
42046: LD_VAR 0 1
42050: PUSH
42051: LD_INT 2
42053: ARRAY
42054: PPUSH
42055: LD_INT 1
42057: PPUSH
42058: CALL_OW 3
42062: PPUSH
42063: CALL_OW 1
42067: ST_TO_ADDR
// tmp := 1 ;
42068: LD_ADDR_VAR 0 2
42072: PUSH
42073: LD_STRING 1
42075: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
42076: LD_ADDR_VAR 0 4
42080: PUSH
42081: LD_VAR 0 4
42085: PUSH
42086: LD_VAR 0 2
42090: STR
42091: ST_TO_ADDR
// end ;
42092: GO 41988
42094: POP
42095: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
42096: LD_STRING getStreamItemsFromMission("
42098: PUSH
42099: LD_VAR 0 3
42103: STR
42104: PUSH
42105: LD_STRING ","
42107: STR
42108: PUSH
42109: LD_VAR 0 4
42113: STR
42114: PUSH
42115: LD_STRING ")
42117: STR
42118: PPUSH
42119: CALL_OW 559
// end else
42123: GO 42132
// ToLua ( getStreamItemsFromMission("","") ) ;
42125: LD_STRING getStreamItemsFromMission("","")
42127: PPUSH
42128: CALL_OW 559
// end ;
42132: LD_VAR 0 1
42136: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
42137: LD_VAR 0 2
42141: PUSH
42142: LD_INT 100
42144: EQUAL
42145: IFFALSE 43094
// begin if not StreamModeActive then
42147: LD_EXP 21
42151: NOT
42152: IFFALSE 42162
// StreamModeActive := true ;
42154: LD_ADDR_EXP 21
42158: PUSH
42159: LD_INT 1
42161: ST_TO_ADDR
// if p3 = 0 then
42162: LD_VAR 0 3
42166: PUSH
42167: LD_INT 0
42169: EQUAL
42170: IFFALSE 42176
// InitStreamMode ;
42172: CALL 38215 0 0
// if p3 = 1 then
42176: LD_VAR 0 3
42180: PUSH
42181: LD_INT 1
42183: EQUAL
42184: IFFALSE 42194
// sRocket := true ;
42186: LD_ADDR_EXP 26
42190: PUSH
42191: LD_INT 1
42193: ST_TO_ADDR
// if p3 = 2 then
42194: LD_VAR 0 3
42198: PUSH
42199: LD_INT 2
42201: EQUAL
42202: IFFALSE 42212
// sSpeed := true ;
42204: LD_ADDR_EXP 25
42208: PUSH
42209: LD_INT 1
42211: ST_TO_ADDR
// if p3 = 3 then
42212: LD_VAR 0 3
42216: PUSH
42217: LD_INT 3
42219: EQUAL
42220: IFFALSE 42230
// sEngine := true ;
42222: LD_ADDR_EXP 27
42226: PUSH
42227: LD_INT 1
42229: ST_TO_ADDR
// if p3 = 4 then
42230: LD_VAR 0 3
42234: PUSH
42235: LD_INT 4
42237: EQUAL
42238: IFFALSE 42248
// sSpec := true ;
42240: LD_ADDR_EXP 24
42244: PUSH
42245: LD_INT 1
42247: ST_TO_ADDR
// if p3 = 5 then
42248: LD_VAR 0 3
42252: PUSH
42253: LD_INT 5
42255: EQUAL
42256: IFFALSE 42266
// sLevel := true ;
42258: LD_ADDR_EXP 28
42262: PUSH
42263: LD_INT 1
42265: ST_TO_ADDR
// if p3 = 6 then
42266: LD_VAR 0 3
42270: PUSH
42271: LD_INT 6
42273: EQUAL
42274: IFFALSE 42284
// sArmoury := true ;
42276: LD_ADDR_EXP 29
42280: PUSH
42281: LD_INT 1
42283: ST_TO_ADDR
// if p3 = 7 then
42284: LD_VAR 0 3
42288: PUSH
42289: LD_INT 7
42291: EQUAL
42292: IFFALSE 42302
// sRadar := true ;
42294: LD_ADDR_EXP 30
42298: PUSH
42299: LD_INT 1
42301: ST_TO_ADDR
// if p3 = 8 then
42302: LD_VAR 0 3
42306: PUSH
42307: LD_INT 8
42309: EQUAL
42310: IFFALSE 42320
// sBunker := true ;
42312: LD_ADDR_EXP 31
42316: PUSH
42317: LD_INT 1
42319: ST_TO_ADDR
// if p3 = 9 then
42320: LD_VAR 0 3
42324: PUSH
42325: LD_INT 9
42327: EQUAL
42328: IFFALSE 42338
// sHack := true ;
42330: LD_ADDR_EXP 32
42334: PUSH
42335: LD_INT 1
42337: ST_TO_ADDR
// if p3 = 10 then
42338: LD_VAR 0 3
42342: PUSH
42343: LD_INT 10
42345: EQUAL
42346: IFFALSE 42356
// sFire := true ;
42348: LD_ADDR_EXP 33
42352: PUSH
42353: LD_INT 1
42355: ST_TO_ADDR
// if p3 = 11 then
42356: LD_VAR 0 3
42360: PUSH
42361: LD_INT 11
42363: EQUAL
42364: IFFALSE 42374
// sRefresh := true ;
42366: LD_ADDR_EXP 34
42370: PUSH
42371: LD_INT 1
42373: ST_TO_ADDR
// if p3 = 12 then
42374: LD_VAR 0 3
42378: PUSH
42379: LD_INT 12
42381: EQUAL
42382: IFFALSE 42392
// sExp := true ;
42384: LD_ADDR_EXP 35
42388: PUSH
42389: LD_INT 1
42391: ST_TO_ADDR
// if p3 = 13 then
42392: LD_VAR 0 3
42396: PUSH
42397: LD_INT 13
42399: EQUAL
42400: IFFALSE 42410
// sDepot := true ;
42402: LD_ADDR_EXP 36
42406: PUSH
42407: LD_INT 1
42409: ST_TO_ADDR
// if p3 = 14 then
42410: LD_VAR 0 3
42414: PUSH
42415: LD_INT 14
42417: EQUAL
42418: IFFALSE 42428
// sFlag := true ;
42420: LD_ADDR_EXP 37
42424: PUSH
42425: LD_INT 1
42427: ST_TO_ADDR
// if p3 = 15 then
42428: LD_VAR 0 3
42432: PUSH
42433: LD_INT 15
42435: EQUAL
42436: IFFALSE 42446
// sKamikadze := true ;
42438: LD_ADDR_EXP 45
42442: PUSH
42443: LD_INT 1
42445: ST_TO_ADDR
// if p3 = 16 then
42446: LD_VAR 0 3
42450: PUSH
42451: LD_INT 16
42453: EQUAL
42454: IFFALSE 42464
// sTroll := true ;
42456: LD_ADDR_EXP 46
42460: PUSH
42461: LD_INT 1
42463: ST_TO_ADDR
// if p3 = 17 then
42464: LD_VAR 0 3
42468: PUSH
42469: LD_INT 17
42471: EQUAL
42472: IFFALSE 42482
// sSlow := true ;
42474: LD_ADDR_EXP 47
42478: PUSH
42479: LD_INT 1
42481: ST_TO_ADDR
// if p3 = 18 then
42482: LD_VAR 0 3
42486: PUSH
42487: LD_INT 18
42489: EQUAL
42490: IFFALSE 42500
// sLack := true ;
42492: LD_ADDR_EXP 48
42496: PUSH
42497: LD_INT 1
42499: ST_TO_ADDR
// if p3 = 19 then
42500: LD_VAR 0 3
42504: PUSH
42505: LD_INT 19
42507: EQUAL
42508: IFFALSE 42518
// sTank := true ;
42510: LD_ADDR_EXP 50
42514: PUSH
42515: LD_INT 1
42517: ST_TO_ADDR
// if p3 = 20 then
42518: LD_VAR 0 3
42522: PUSH
42523: LD_INT 20
42525: EQUAL
42526: IFFALSE 42536
// sRemote := true ;
42528: LD_ADDR_EXP 51
42532: PUSH
42533: LD_INT 1
42535: ST_TO_ADDR
// if p3 = 21 then
42536: LD_VAR 0 3
42540: PUSH
42541: LD_INT 21
42543: EQUAL
42544: IFFALSE 42554
// sPowell := true ;
42546: LD_ADDR_EXP 52
42550: PUSH
42551: LD_INT 1
42553: ST_TO_ADDR
// if p3 = 22 then
42554: LD_VAR 0 3
42558: PUSH
42559: LD_INT 22
42561: EQUAL
42562: IFFALSE 42572
// sTeleport := true ;
42564: LD_ADDR_EXP 55
42568: PUSH
42569: LD_INT 1
42571: ST_TO_ADDR
// if p3 = 23 then
42572: LD_VAR 0 3
42576: PUSH
42577: LD_INT 23
42579: EQUAL
42580: IFFALSE 42590
// sOilTower := true ;
42582: LD_ADDR_EXP 57
42586: PUSH
42587: LD_INT 1
42589: ST_TO_ADDR
// if p3 = 24 then
42590: LD_VAR 0 3
42594: PUSH
42595: LD_INT 24
42597: EQUAL
42598: IFFALSE 42608
// sShovel := true ;
42600: LD_ADDR_EXP 58
42604: PUSH
42605: LD_INT 1
42607: ST_TO_ADDR
// if p3 = 25 then
42608: LD_VAR 0 3
42612: PUSH
42613: LD_INT 25
42615: EQUAL
42616: IFFALSE 42626
// sSheik := true ;
42618: LD_ADDR_EXP 59
42622: PUSH
42623: LD_INT 1
42625: ST_TO_ADDR
// if p3 = 26 then
42626: LD_VAR 0 3
42630: PUSH
42631: LD_INT 26
42633: EQUAL
42634: IFFALSE 42644
// sEarthquake := true ;
42636: LD_ADDR_EXP 61
42640: PUSH
42641: LD_INT 1
42643: ST_TO_ADDR
// if p3 = 27 then
42644: LD_VAR 0 3
42648: PUSH
42649: LD_INT 27
42651: EQUAL
42652: IFFALSE 42662
// sAI := true ;
42654: LD_ADDR_EXP 62
42658: PUSH
42659: LD_INT 1
42661: ST_TO_ADDR
// if p3 = 28 then
42662: LD_VAR 0 3
42666: PUSH
42667: LD_INT 28
42669: EQUAL
42670: IFFALSE 42680
// sCargo := true ;
42672: LD_ADDR_EXP 65
42676: PUSH
42677: LD_INT 1
42679: ST_TO_ADDR
// if p3 = 29 then
42680: LD_VAR 0 3
42684: PUSH
42685: LD_INT 29
42687: EQUAL
42688: IFFALSE 42698
// sDLaser := true ;
42690: LD_ADDR_EXP 66
42694: PUSH
42695: LD_INT 1
42697: ST_TO_ADDR
// if p3 = 30 then
42698: LD_VAR 0 3
42702: PUSH
42703: LD_INT 30
42705: EQUAL
42706: IFFALSE 42716
// sExchange := true ;
42708: LD_ADDR_EXP 67
42712: PUSH
42713: LD_INT 1
42715: ST_TO_ADDR
// if p3 = 31 then
42716: LD_VAR 0 3
42720: PUSH
42721: LD_INT 31
42723: EQUAL
42724: IFFALSE 42734
// sFac := true ;
42726: LD_ADDR_EXP 68
42730: PUSH
42731: LD_INT 1
42733: ST_TO_ADDR
// if p3 = 32 then
42734: LD_VAR 0 3
42738: PUSH
42739: LD_INT 32
42741: EQUAL
42742: IFFALSE 42752
// sPower := true ;
42744: LD_ADDR_EXP 69
42748: PUSH
42749: LD_INT 1
42751: ST_TO_ADDR
// if p3 = 33 then
42752: LD_VAR 0 3
42756: PUSH
42757: LD_INT 33
42759: EQUAL
42760: IFFALSE 42770
// sRandom := true ;
42762: LD_ADDR_EXP 70
42766: PUSH
42767: LD_INT 1
42769: ST_TO_ADDR
// if p3 = 34 then
42770: LD_VAR 0 3
42774: PUSH
42775: LD_INT 34
42777: EQUAL
42778: IFFALSE 42788
// sShield := true ;
42780: LD_ADDR_EXP 71
42784: PUSH
42785: LD_INT 1
42787: ST_TO_ADDR
// if p3 = 35 then
42788: LD_VAR 0 3
42792: PUSH
42793: LD_INT 35
42795: EQUAL
42796: IFFALSE 42806
// sTime := true ;
42798: LD_ADDR_EXP 72
42802: PUSH
42803: LD_INT 1
42805: ST_TO_ADDR
// if p3 = 36 then
42806: LD_VAR 0 3
42810: PUSH
42811: LD_INT 36
42813: EQUAL
42814: IFFALSE 42824
// sTools := true ;
42816: LD_ADDR_EXP 73
42820: PUSH
42821: LD_INT 1
42823: ST_TO_ADDR
// if p3 = 101 then
42824: LD_VAR 0 3
42828: PUSH
42829: LD_INT 101
42831: EQUAL
42832: IFFALSE 42842
// sSold := true ;
42834: LD_ADDR_EXP 38
42838: PUSH
42839: LD_INT 1
42841: ST_TO_ADDR
// if p3 = 102 then
42842: LD_VAR 0 3
42846: PUSH
42847: LD_INT 102
42849: EQUAL
42850: IFFALSE 42860
// sDiff := true ;
42852: LD_ADDR_EXP 39
42856: PUSH
42857: LD_INT 1
42859: ST_TO_ADDR
// if p3 = 103 then
42860: LD_VAR 0 3
42864: PUSH
42865: LD_INT 103
42867: EQUAL
42868: IFFALSE 42878
// sFog := true ;
42870: LD_ADDR_EXP 42
42874: PUSH
42875: LD_INT 1
42877: ST_TO_ADDR
// if p3 = 104 then
42878: LD_VAR 0 3
42882: PUSH
42883: LD_INT 104
42885: EQUAL
42886: IFFALSE 42896
// sReset := true ;
42888: LD_ADDR_EXP 43
42892: PUSH
42893: LD_INT 1
42895: ST_TO_ADDR
// if p3 = 105 then
42896: LD_VAR 0 3
42900: PUSH
42901: LD_INT 105
42903: EQUAL
42904: IFFALSE 42914
// sSun := true ;
42906: LD_ADDR_EXP 44
42910: PUSH
42911: LD_INT 1
42913: ST_TO_ADDR
// if p3 = 106 then
42914: LD_VAR 0 3
42918: PUSH
42919: LD_INT 106
42921: EQUAL
42922: IFFALSE 42932
// sTiger := true ;
42924: LD_ADDR_EXP 40
42928: PUSH
42929: LD_INT 1
42931: ST_TO_ADDR
// if p3 = 107 then
42932: LD_VAR 0 3
42936: PUSH
42937: LD_INT 107
42939: EQUAL
42940: IFFALSE 42950
// sBomb := true ;
42942: LD_ADDR_EXP 41
42946: PUSH
42947: LD_INT 1
42949: ST_TO_ADDR
// if p3 = 108 then
42950: LD_VAR 0 3
42954: PUSH
42955: LD_INT 108
42957: EQUAL
42958: IFFALSE 42968
// sWound := true ;
42960: LD_ADDR_EXP 49
42964: PUSH
42965: LD_INT 1
42967: ST_TO_ADDR
// if p3 = 109 then
42968: LD_VAR 0 3
42972: PUSH
42973: LD_INT 109
42975: EQUAL
42976: IFFALSE 42986
// sBetray := true ;
42978: LD_ADDR_EXP 53
42982: PUSH
42983: LD_INT 1
42985: ST_TO_ADDR
// if p3 = 110 then
42986: LD_VAR 0 3
42990: PUSH
42991: LD_INT 110
42993: EQUAL
42994: IFFALSE 43004
// sContamin := true ;
42996: LD_ADDR_EXP 54
43000: PUSH
43001: LD_INT 1
43003: ST_TO_ADDR
// if p3 = 111 then
43004: LD_VAR 0 3
43008: PUSH
43009: LD_INT 111
43011: EQUAL
43012: IFFALSE 43022
// sOil := true ;
43014: LD_ADDR_EXP 56
43018: PUSH
43019: LD_INT 1
43021: ST_TO_ADDR
// if p3 = 112 then
43022: LD_VAR 0 3
43026: PUSH
43027: LD_INT 112
43029: EQUAL
43030: IFFALSE 43040
// sStu := true ;
43032: LD_ADDR_EXP 60
43036: PUSH
43037: LD_INT 1
43039: ST_TO_ADDR
// if p3 = 113 then
43040: LD_VAR 0 3
43044: PUSH
43045: LD_INT 113
43047: EQUAL
43048: IFFALSE 43058
// sBazooka := true ;
43050: LD_ADDR_EXP 63
43054: PUSH
43055: LD_INT 1
43057: ST_TO_ADDR
// if p3 = 114 then
43058: LD_VAR 0 3
43062: PUSH
43063: LD_INT 114
43065: EQUAL
43066: IFFALSE 43076
// sMortar := true ;
43068: LD_ADDR_EXP 64
43072: PUSH
43073: LD_INT 1
43075: ST_TO_ADDR
// if p3 = 115 then
43076: LD_VAR 0 3
43080: PUSH
43081: LD_INT 115
43083: EQUAL
43084: IFFALSE 43094
// sRanger := true ;
43086: LD_ADDR_EXP 74
43090: PUSH
43091: LD_INT 1
43093: ST_TO_ADDR
// end ; end ;
43094: PPOPN 6
43096: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
43097: LD_EXP 21
43101: PUSH
43102: LD_EXP 26
43106: AND
43107: IFFALSE 43231
43109: GO 43111
43111: DISABLE
43112: LD_INT 0
43114: PPUSH
43115: PPUSH
// begin enable ;
43116: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
43117: LD_ADDR_VAR 0 2
43121: PUSH
43122: LD_INT 22
43124: PUSH
43125: LD_OWVAR 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 34
43139: PUSH
43140: LD_INT 7
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 34
43149: PUSH
43150: LD_INT 45
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 34
43159: PUSH
43160: LD_INT 28
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 34
43169: PUSH
43170: LD_INT 47
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PPUSH
43188: CALL_OW 69
43192: ST_TO_ADDR
// if not tmp then
43193: LD_VAR 0 2
43197: NOT
43198: IFFALSE 43202
// exit ;
43200: GO 43231
// for i in tmp do
43202: LD_ADDR_VAR 0 1
43206: PUSH
43207: LD_VAR 0 2
43211: PUSH
43212: FOR_IN
43213: IFFALSE 43229
// begin SetLives ( i , 0 ) ;
43215: LD_VAR 0 1
43219: PPUSH
43220: LD_INT 0
43222: PPUSH
43223: CALL_OW 234
// end ;
43227: GO 43212
43229: POP
43230: POP
// end ;
43231: PPOPN 2
43233: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
43234: LD_EXP 21
43238: PUSH
43239: LD_EXP 27
43243: AND
43244: IFFALSE 43328
43246: GO 43248
43248: DISABLE
43249: LD_INT 0
43251: PPUSH
43252: PPUSH
// begin enable ;
43253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
43254: LD_ADDR_VAR 0 2
43258: PUSH
43259: LD_INT 22
43261: PUSH
43262: LD_OWVAR 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 32
43273: PUSH
43274: LD_INT 3
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PPUSH
43285: CALL_OW 69
43289: ST_TO_ADDR
// if not tmp then
43290: LD_VAR 0 2
43294: NOT
43295: IFFALSE 43299
// exit ;
43297: GO 43328
// for i in tmp do
43299: LD_ADDR_VAR 0 1
43303: PUSH
43304: LD_VAR 0 2
43308: PUSH
43309: FOR_IN
43310: IFFALSE 43326
// begin SetLives ( i , 0 ) ;
43312: LD_VAR 0 1
43316: PPUSH
43317: LD_INT 0
43319: PPUSH
43320: CALL_OW 234
// end ;
43324: GO 43309
43326: POP
43327: POP
// end ;
43328: PPOPN 2
43330: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
43331: LD_EXP 21
43335: PUSH
43336: LD_EXP 24
43340: AND
43341: IFFALSE 43434
43343: GO 43345
43345: DISABLE
43346: LD_INT 0
43348: PPUSH
// begin enable ;
43349: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
43350: LD_ADDR_VAR 0 1
43354: PUSH
43355: LD_INT 22
43357: PUSH
43358: LD_OWVAR 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: LD_INT 25
43372: PUSH
43373: LD_INT 5
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 25
43382: PUSH
43383: LD_INT 9
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 25
43392: PUSH
43393: LD_INT 8
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PPUSH
43410: CALL_OW 69
43414: PUSH
43415: FOR_IN
43416: IFFALSE 43432
// begin SetClass ( i , 1 ) ;
43418: LD_VAR 0 1
43422: PPUSH
43423: LD_INT 1
43425: PPUSH
43426: CALL_OW 336
// end ;
43430: GO 43415
43432: POP
43433: POP
// end ;
43434: PPOPN 1
43436: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
43437: LD_EXP 21
43441: PUSH
43442: LD_EXP 25
43446: AND
43447: PUSH
43448: LD_OWVAR 65
43452: PUSH
43453: LD_INT 7
43455: LESS
43456: AND
43457: IFFALSE 43471
43459: GO 43461
43461: DISABLE
// begin enable ;
43462: ENABLE
// game_speed := 7 ;
43463: LD_ADDR_OWVAR 65
43467: PUSH
43468: LD_INT 7
43470: ST_TO_ADDR
// end ;
43471: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
43472: LD_EXP 21
43476: PUSH
43477: LD_EXP 28
43481: AND
43482: IFFALSE 43684
43484: GO 43486
43486: DISABLE
43487: LD_INT 0
43489: PPUSH
43490: PPUSH
43491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
43492: LD_ADDR_VAR 0 3
43496: PUSH
43497: LD_INT 81
43499: PUSH
43500: LD_OWVAR 2
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 21
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PPUSH
43523: CALL_OW 69
43527: ST_TO_ADDR
// if not tmp then
43528: LD_VAR 0 3
43532: NOT
43533: IFFALSE 43537
// exit ;
43535: GO 43684
// if tmp > 5 then
43537: LD_VAR 0 3
43541: PUSH
43542: LD_INT 5
43544: GREATER
43545: IFFALSE 43557
// k := 5 else
43547: LD_ADDR_VAR 0 2
43551: PUSH
43552: LD_INT 5
43554: ST_TO_ADDR
43555: GO 43567
// k := tmp ;
43557: LD_ADDR_VAR 0 2
43561: PUSH
43562: LD_VAR 0 3
43566: ST_TO_ADDR
// for i := 1 to k do
43567: LD_ADDR_VAR 0 1
43571: PUSH
43572: DOUBLE
43573: LD_INT 1
43575: DEC
43576: ST_TO_ADDR
43577: LD_VAR 0 2
43581: PUSH
43582: FOR_TO
43583: IFFALSE 43682
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
43585: LD_VAR 0 3
43589: PUSH
43590: LD_VAR 0 1
43594: ARRAY
43595: PPUSH
43596: LD_VAR 0 1
43600: PUSH
43601: LD_INT 4
43603: MOD
43604: PUSH
43605: LD_INT 1
43607: PLUS
43608: PPUSH
43609: CALL_OW 259
43613: PUSH
43614: LD_INT 10
43616: LESS
43617: IFFALSE 43680
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
43619: LD_VAR 0 3
43623: PUSH
43624: LD_VAR 0 1
43628: ARRAY
43629: PPUSH
43630: LD_VAR 0 1
43634: PUSH
43635: LD_INT 4
43637: MOD
43638: PUSH
43639: LD_INT 1
43641: PLUS
43642: PPUSH
43643: LD_VAR 0 3
43647: PUSH
43648: LD_VAR 0 1
43652: ARRAY
43653: PPUSH
43654: LD_VAR 0 1
43658: PUSH
43659: LD_INT 4
43661: MOD
43662: PUSH
43663: LD_INT 1
43665: PLUS
43666: PPUSH
43667: CALL_OW 259
43671: PUSH
43672: LD_INT 1
43674: PLUS
43675: PPUSH
43676: CALL_OW 237
43680: GO 43582
43682: POP
43683: POP
// end ;
43684: PPOPN 3
43686: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
43687: LD_EXP 21
43691: PUSH
43692: LD_EXP 29
43696: AND
43697: IFFALSE 43717
43699: GO 43701
43701: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
43702: LD_INT 4
43704: PPUSH
43705: LD_OWVAR 2
43709: PPUSH
43710: LD_INT 0
43712: PPUSH
43713: CALL_OW 324
43717: END
// every 0 0$1 trigger StreamModeActive and sShovel do
43718: LD_EXP 21
43722: PUSH
43723: LD_EXP 58
43727: AND
43728: IFFALSE 43748
43730: GO 43732
43732: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
43733: LD_INT 19
43735: PPUSH
43736: LD_OWVAR 2
43740: PPUSH
43741: LD_INT 0
43743: PPUSH
43744: CALL_OW 324
43748: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
43749: LD_EXP 21
43753: PUSH
43754: LD_EXP 30
43758: AND
43759: IFFALSE 43861
43761: GO 43763
43763: DISABLE
43764: LD_INT 0
43766: PPUSH
43767: PPUSH
// begin enable ;
43768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
43769: LD_ADDR_VAR 0 2
43773: PUSH
43774: LD_INT 22
43776: PUSH
43777: LD_OWVAR 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: LD_INT 34
43791: PUSH
43792: LD_INT 11
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 34
43801: PUSH
43802: LD_INT 30
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: LIST
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PPUSH
43818: CALL_OW 69
43822: ST_TO_ADDR
// if not tmp then
43823: LD_VAR 0 2
43827: NOT
43828: IFFALSE 43832
// exit ;
43830: GO 43861
// for i in tmp do
43832: LD_ADDR_VAR 0 1
43836: PUSH
43837: LD_VAR 0 2
43841: PUSH
43842: FOR_IN
43843: IFFALSE 43859
// begin SetLives ( i , 0 ) ;
43845: LD_VAR 0 1
43849: PPUSH
43850: LD_INT 0
43852: PPUSH
43853: CALL_OW 234
// end ;
43857: GO 43842
43859: POP
43860: POP
// end ;
43861: PPOPN 2
43863: END
// every 0 0$1 trigger StreamModeActive and sBunker do
43864: LD_EXP 21
43868: PUSH
43869: LD_EXP 31
43873: AND
43874: IFFALSE 43894
43876: GO 43878
43878: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
43879: LD_INT 32
43881: PPUSH
43882: LD_OWVAR 2
43886: PPUSH
43887: LD_INT 0
43889: PPUSH
43890: CALL_OW 324
43894: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
43895: LD_EXP 21
43899: PUSH
43900: LD_EXP 32
43904: AND
43905: IFFALSE 44086
43907: GO 43909
43909: DISABLE
43910: LD_INT 0
43912: PPUSH
43913: PPUSH
43914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
43915: LD_ADDR_VAR 0 2
43919: PUSH
43920: LD_INT 22
43922: PUSH
43923: LD_OWVAR 2
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 33
43934: PUSH
43935: LD_INT 3
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PPUSH
43946: CALL_OW 69
43950: ST_TO_ADDR
// if not tmp then
43951: LD_VAR 0 2
43955: NOT
43956: IFFALSE 43960
// exit ;
43958: GO 44086
// side := 0 ;
43960: LD_ADDR_VAR 0 3
43964: PUSH
43965: LD_INT 0
43967: ST_TO_ADDR
// for i := 1 to 8 do
43968: LD_ADDR_VAR 0 1
43972: PUSH
43973: DOUBLE
43974: LD_INT 1
43976: DEC
43977: ST_TO_ADDR
43978: LD_INT 8
43980: PUSH
43981: FOR_TO
43982: IFFALSE 44030
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
43984: LD_OWVAR 2
43988: PUSH
43989: LD_VAR 0 1
43993: NONEQUAL
43994: PUSH
43995: LD_OWVAR 2
43999: PPUSH
44000: LD_VAR 0 1
44004: PPUSH
44005: CALL_OW 81
44009: PUSH
44010: LD_INT 2
44012: EQUAL
44013: AND
44014: IFFALSE 44028
// begin side := i ;
44016: LD_ADDR_VAR 0 3
44020: PUSH
44021: LD_VAR 0 1
44025: ST_TO_ADDR
// break ;
44026: GO 44030
// end ;
44028: GO 43981
44030: POP
44031: POP
// if not side then
44032: LD_VAR 0 3
44036: NOT
44037: IFFALSE 44041
// exit ;
44039: GO 44086
// for i := 1 to tmp do
44041: LD_ADDR_VAR 0 1
44045: PUSH
44046: DOUBLE
44047: LD_INT 1
44049: DEC
44050: ST_TO_ADDR
44051: LD_VAR 0 2
44055: PUSH
44056: FOR_TO
44057: IFFALSE 44084
// if Prob ( 60 ) then
44059: LD_INT 60
44061: PPUSH
44062: CALL_OW 13
44066: IFFALSE 44082
// SetSide ( i , side ) ;
44068: LD_VAR 0 1
44072: PPUSH
44073: LD_VAR 0 3
44077: PPUSH
44078: CALL_OW 235
44082: GO 44056
44084: POP
44085: POP
// end ;
44086: PPOPN 3
44088: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
44089: LD_EXP 21
44093: PUSH
44094: LD_EXP 34
44098: AND
44099: IFFALSE 44218
44101: GO 44103
44103: DISABLE
44104: LD_INT 0
44106: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
44107: LD_ADDR_VAR 0 1
44111: PUSH
44112: LD_INT 22
44114: PUSH
44115: LD_OWVAR 2
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 21
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 3
44136: PUSH
44137: LD_INT 23
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: PPUSH
44156: CALL_OW 69
44160: PUSH
44161: FOR_IN
44162: IFFALSE 44216
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
44164: LD_VAR 0 1
44168: PPUSH
44169: CALL_OW 257
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: LD_INT 4
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: IN
44192: IFFALSE 44214
// SetClass ( un , rand ( 1 , 4 ) ) ;
44194: LD_VAR 0 1
44198: PPUSH
44199: LD_INT 1
44201: PPUSH
44202: LD_INT 4
44204: PPUSH
44205: CALL_OW 12
44209: PPUSH
44210: CALL_OW 336
44214: GO 44161
44216: POP
44217: POP
// end ;
44218: PPOPN 1
44220: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
44221: LD_EXP 21
44225: PUSH
44226: LD_EXP 33
44230: AND
44231: IFFALSE 44310
44233: GO 44235
44235: DISABLE
44236: LD_INT 0
44238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
44239: LD_ADDR_VAR 0 1
44243: PUSH
44244: LD_INT 22
44246: PUSH
44247: LD_OWVAR 2
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 21
44258: PUSH
44259: LD_INT 3
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PPUSH
44270: CALL_OW 69
44274: ST_TO_ADDR
// if not tmp then
44275: LD_VAR 0 1
44279: NOT
44280: IFFALSE 44284
// exit ;
44282: GO 44310
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
44284: LD_VAR 0 1
44288: PUSH
44289: LD_INT 1
44291: PPUSH
44292: LD_VAR 0 1
44296: PPUSH
44297: CALL_OW 12
44301: ARRAY
44302: PPUSH
44303: LD_INT 100
44305: PPUSH
44306: CALL_OW 234
// end ;
44310: PPOPN 1
44312: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
44313: LD_EXP 21
44317: PUSH
44318: LD_EXP 35
44322: AND
44323: IFFALSE 44421
44325: GO 44327
44327: DISABLE
44328: LD_INT 0
44330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
44331: LD_ADDR_VAR 0 1
44335: PUSH
44336: LD_INT 22
44338: PUSH
44339: LD_OWVAR 2
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 21
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PPUSH
44362: CALL_OW 69
44366: ST_TO_ADDR
// if not tmp then
44367: LD_VAR 0 1
44371: NOT
44372: IFFALSE 44376
// exit ;
44374: GO 44421
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
44376: LD_VAR 0 1
44380: PUSH
44381: LD_INT 1
44383: PPUSH
44384: LD_VAR 0 1
44388: PPUSH
44389: CALL_OW 12
44393: ARRAY
44394: PPUSH
44395: LD_INT 1
44397: PPUSH
44398: LD_INT 4
44400: PPUSH
44401: CALL_OW 12
44405: PPUSH
44406: LD_INT 3000
44408: PPUSH
44409: LD_INT 9000
44411: PPUSH
44412: CALL_OW 12
44416: PPUSH
44417: CALL_OW 492
// end ;
44421: PPOPN 1
44423: END
// every 0 0$1 trigger StreamModeActive and sDepot do
44424: LD_EXP 21
44428: PUSH
44429: LD_EXP 36
44433: AND
44434: IFFALSE 44454
44436: GO 44438
44438: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
44439: LD_INT 1
44441: PPUSH
44442: LD_OWVAR 2
44446: PPUSH
44447: LD_INT 0
44449: PPUSH
44450: CALL_OW 324
44454: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
44455: LD_EXP 21
44459: PUSH
44460: LD_EXP 37
44464: AND
44465: IFFALSE 44548
44467: GO 44469
44469: DISABLE
44470: LD_INT 0
44472: PPUSH
44473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
44474: LD_ADDR_VAR 0 2
44478: PUSH
44479: LD_INT 22
44481: PUSH
44482: LD_OWVAR 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 21
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PPUSH
44505: CALL_OW 69
44509: ST_TO_ADDR
// if not tmp then
44510: LD_VAR 0 2
44514: NOT
44515: IFFALSE 44519
// exit ;
44517: GO 44548
// for i in tmp do
44519: LD_ADDR_VAR 0 1
44523: PUSH
44524: LD_VAR 0 2
44528: PUSH
44529: FOR_IN
44530: IFFALSE 44546
// SetBLevel ( i , 10 ) ;
44532: LD_VAR 0 1
44536: PPUSH
44537: LD_INT 10
44539: PPUSH
44540: CALL_OW 241
44544: GO 44529
44546: POP
44547: POP
// end ;
44548: PPOPN 2
44550: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
44551: LD_EXP 21
44555: PUSH
44556: LD_EXP 38
44560: AND
44561: IFFALSE 44672
44563: GO 44565
44565: DISABLE
44566: LD_INT 0
44568: PPUSH
44569: PPUSH
44570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44571: LD_ADDR_VAR 0 3
44575: PUSH
44576: LD_INT 22
44578: PUSH
44579: LD_OWVAR 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 25
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PPUSH
44602: CALL_OW 69
44606: ST_TO_ADDR
// if not tmp then
44607: LD_VAR 0 3
44611: NOT
44612: IFFALSE 44616
// exit ;
44614: GO 44672
// un := tmp [ rand ( 1 , tmp ) ] ;
44616: LD_ADDR_VAR 0 2
44620: PUSH
44621: LD_VAR 0 3
44625: PUSH
44626: LD_INT 1
44628: PPUSH
44629: LD_VAR 0 3
44633: PPUSH
44634: CALL_OW 12
44638: ARRAY
44639: ST_TO_ADDR
// if Crawls ( un ) then
44640: LD_VAR 0 2
44644: PPUSH
44645: CALL_OW 318
44649: IFFALSE 44660
// ComWalk ( un ) ;
44651: LD_VAR 0 2
44655: PPUSH
44656: CALL_OW 138
// SetClass ( un , class_sniper ) ;
44660: LD_VAR 0 2
44664: PPUSH
44665: LD_INT 5
44667: PPUSH
44668: CALL_OW 336
// end ;
44672: PPOPN 3
44674: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
44675: LD_EXP 21
44679: PUSH
44680: LD_EXP 39
44684: AND
44685: PUSH
44686: LD_OWVAR 67
44690: PUSH
44691: LD_INT 3
44693: LESS
44694: AND
44695: IFFALSE 44714
44697: GO 44699
44699: DISABLE
// Difficulty := Difficulty + 1 ;
44700: LD_ADDR_OWVAR 67
44704: PUSH
44705: LD_OWVAR 67
44709: PUSH
44710: LD_INT 1
44712: PLUS
44713: ST_TO_ADDR
44714: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
44715: LD_EXP 21
44719: PUSH
44720: LD_EXP 40
44724: AND
44725: IFFALSE 44828
44727: GO 44729
44729: DISABLE
44730: LD_INT 0
44732: PPUSH
// begin for i := 1 to 5 do
44733: LD_ADDR_VAR 0 1
44737: PUSH
44738: DOUBLE
44739: LD_INT 1
44741: DEC
44742: ST_TO_ADDR
44743: LD_INT 5
44745: PUSH
44746: FOR_TO
44747: IFFALSE 44826
// begin uc_nation := nation_nature ;
44749: LD_ADDR_OWVAR 21
44753: PUSH
44754: LD_INT 0
44756: ST_TO_ADDR
// uc_side := 0 ;
44757: LD_ADDR_OWVAR 20
44761: PUSH
44762: LD_INT 0
44764: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44765: LD_ADDR_OWVAR 29
44769: PUSH
44770: LD_INT 12
44772: PUSH
44773: LD_INT 12
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: ST_TO_ADDR
// hc_agressivity := 20 ;
44780: LD_ADDR_OWVAR 35
44784: PUSH
44785: LD_INT 20
44787: ST_TO_ADDR
// hc_class := class_tiger ;
44788: LD_ADDR_OWVAR 28
44792: PUSH
44793: LD_INT 14
44795: ST_TO_ADDR
// hc_gallery :=  ;
44796: LD_ADDR_OWVAR 33
44800: PUSH
44801: LD_STRING 
44803: ST_TO_ADDR
// hc_name :=  ;
44804: LD_ADDR_OWVAR 26
44808: PUSH
44809: LD_STRING 
44811: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
44812: CALL_OW 44
44816: PPUSH
44817: LD_INT 0
44819: PPUSH
44820: CALL_OW 51
// end ;
44824: GO 44746
44826: POP
44827: POP
// end ;
44828: PPOPN 1
44830: END
// every 0 0$1 trigger StreamModeActive and sBomb do
44831: LD_EXP 21
44835: PUSH
44836: LD_EXP 41
44840: AND
44841: IFFALSE 44850
44843: GO 44845
44845: DISABLE
// StreamSibBomb ;
44846: CALL 44851 0 0
44850: END
// export function StreamSibBomb ; var i , x , y ; begin
44851: LD_INT 0
44853: PPUSH
44854: PPUSH
44855: PPUSH
44856: PPUSH
// result := false ;
44857: LD_ADDR_VAR 0 1
44861: PUSH
44862: LD_INT 0
44864: ST_TO_ADDR
// for i := 1 to 16 do
44865: LD_ADDR_VAR 0 2
44869: PUSH
44870: DOUBLE
44871: LD_INT 1
44873: DEC
44874: ST_TO_ADDR
44875: LD_INT 16
44877: PUSH
44878: FOR_TO
44879: IFFALSE 45078
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_INT 10
44888: PUSH
44889: LD_INT 20
44891: PUSH
44892: LD_INT 30
44894: PUSH
44895: LD_INT 40
44897: PUSH
44898: LD_INT 50
44900: PUSH
44901: LD_INT 60
44903: PUSH
44904: LD_INT 70
44906: PUSH
44907: LD_INT 80
44909: PUSH
44910: LD_INT 90
44912: PUSH
44913: LD_INT 100
44915: PUSH
44916: LD_INT 110
44918: PUSH
44919: LD_INT 120
44921: PUSH
44922: LD_INT 130
44924: PUSH
44925: LD_INT 140
44927: PUSH
44928: LD_INT 150
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PPUSH
44951: LD_INT 15
44953: PPUSH
44954: CALL_OW 12
44958: ARRAY
44959: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
44960: LD_ADDR_VAR 0 4
44964: PUSH
44965: LD_INT 10
44967: PUSH
44968: LD_INT 20
44970: PUSH
44971: LD_INT 30
44973: PUSH
44974: LD_INT 40
44976: PUSH
44977: LD_INT 50
44979: PUSH
44980: LD_INT 60
44982: PUSH
44983: LD_INT 70
44985: PUSH
44986: LD_INT 80
44988: PUSH
44989: LD_INT 90
44991: PUSH
44992: LD_INT 100
44994: PUSH
44995: LD_INT 110
44997: PUSH
44998: LD_INT 120
45000: PUSH
45001: LD_INT 130
45003: PUSH
45004: LD_INT 140
45006: PUSH
45007: LD_INT 150
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PPUSH
45030: LD_INT 15
45032: PPUSH
45033: CALL_OW 12
45037: ARRAY
45038: ST_TO_ADDR
// if ValidHex ( x , y ) then
45039: LD_VAR 0 3
45043: PPUSH
45044: LD_VAR 0 4
45048: PPUSH
45049: CALL_OW 488
45053: IFFALSE 45076
// begin result := [ x , y ] ;
45055: LD_ADDR_VAR 0 1
45059: PUSH
45060: LD_VAR 0 3
45064: PUSH
45065: LD_VAR 0 4
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: ST_TO_ADDR
// break ;
45074: GO 45078
// end ; end ;
45076: GO 44878
45078: POP
45079: POP
// if result then
45080: LD_VAR 0 1
45084: IFFALSE 45144
// begin ToLua ( playSibBomb() ) ;
45086: LD_STRING playSibBomb()
45088: PPUSH
45089: CALL_OW 559
// wait ( 0 0$14 ) ;
45093: LD_INT 490
45095: PPUSH
45096: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
45100: LD_VAR 0 1
45104: PUSH
45105: LD_INT 1
45107: ARRAY
45108: PPUSH
45109: LD_VAR 0 1
45113: PUSH
45114: LD_INT 2
45116: ARRAY
45117: PPUSH
45118: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
45122: LD_VAR 0 1
45126: PUSH
45127: LD_INT 1
45129: ARRAY
45130: PPUSH
45131: LD_VAR 0 1
45135: PUSH
45136: LD_INT 2
45138: ARRAY
45139: PPUSH
45140: CALL_OW 429
// end ; end ;
45144: LD_VAR 0 1
45148: RET
// every 0 0$1 trigger StreamModeActive and sReset do
45149: LD_EXP 21
45153: PUSH
45154: LD_EXP 43
45158: AND
45159: IFFALSE 45171
45161: GO 45163
45163: DISABLE
// YouLost (  ) ;
45164: LD_STRING 
45166: PPUSH
45167: CALL_OW 104
45171: END
// every 0 0$1 trigger StreamModeActive and sFog do
45172: LD_EXP 21
45176: PUSH
45177: LD_EXP 42
45181: AND
45182: IFFALSE 45196
45184: GO 45186
45186: DISABLE
// FogOff ( your_side ) ;
45187: LD_OWVAR 2
45191: PPUSH
45192: CALL_OW 344
45196: END
// every 0 0$1 trigger StreamModeActive and sSun do
45197: LD_EXP 21
45201: PUSH
45202: LD_EXP 44
45206: AND
45207: IFFALSE 45235
45209: GO 45211
45211: DISABLE
// begin solar_recharge_percent := 0 ;
45212: LD_ADDR_OWVAR 79
45216: PUSH
45217: LD_INT 0
45219: ST_TO_ADDR
// wait ( 5 5$00 ) ;
45220: LD_INT 10500
45222: PPUSH
45223: CALL_OW 67
// solar_recharge_percent := 100 ;
45227: LD_ADDR_OWVAR 79
45231: PUSH
45232: LD_INT 100
45234: ST_TO_ADDR
// end ;
45235: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
45236: LD_EXP 21
45240: PUSH
45241: LD_EXP 45
45245: AND
45246: IFFALSE 45485
45248: GO 45250
45250: DISABLE
45251: LD_INT 0
45253: PPUSH
45254: PPUSH
45255: PPUSH
// begin tmp := [ ] ;
45256: LD_ADDR_VAR 0 3
45260: PUSH
45261: EMPTY
45262: ST_TO_ADDR
// for i := 1 to 6 do
45263: LD_ADDR_VAR 0 1
45267: PUSH
45268: DOUBLE
45269: LD_INT 1
45271: DEC
45272: ST_TO_ADDR
45273: LD_INT 6
45275: PUSH
45276: FOR_TO
45277: IFFALSE 45382
// begin uc_nation := nation_nature ;
45279: LD_ADDR_OWVAR 21
45283: PUSH
45284: LD_INT 0
45286: ST_TO_ADDR
// uc_side := 0 ;
45287: LD_ADDR_OWVAR 20
45291: PUSH
45292: LD_INT 0
45294: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45295: LD_ADDR_OWVAR 29
45299: PUSH
45300: LD_INT 12
45302: PUSH
45303: LD_INT 12
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: ST_TO_ADDR
// hc_agressivity := 20 ;
45310: LD_ADDR_OWVAR 35
45314: PUSH
45315: LD_INT 20
45317: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
45318: LD_ADDR_OWVAR 28
45322: PUSH
45323: LD_INT 17
45325: ST_TO_ADDR
// hc_gallery :=  ;
45326: LD_ADDR_OWVAR 33
45330: PUSH
45331: LD_STRING 
45333: ST_TO_ADDR
// hc_name :=  ;
45334: LD_ADDR_OWVAR 26
45338: PUSH
45339: LD_STRING 
45341: ST_TO_ADDR
// un := CreateHuman ;
45342: LD_ADDR_VAR 0 2
45346: PUSH
45347: CALL_OW 44
45351: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
45352: LD_VAR 0 2
45356: PPUSH
45357: LD_INT 1
45359: PPUSH
45360: CALL_OW 51
// tmp := tmp ^ un ;
45364: LD_ADDR_VAR 0 3
45368: PUSH
45369: LD_VAR 0 3
45373: PUSH
45374: LD_VAR 0 2
45378: ADD
45379: ST_TO_ADDR
// end ;
45380: GO 45276
45382: POP
45383: POP
// repeat wait ( 0 0$1 ) ;
45384: LD_INT 35
45386: PPUSH
45387: CALL_OW 67
// for un in tmp do
45391: LD_ADDR_VAR 0 2
45395: PUSH
45396: LD_VAR 0 3
45400: PUSH
45401: FOR_IN
45402: IFFALSE 45476
// begin if IsDead ( un ) then
45404: LD_VAR 0 2
45408: PPUSH
45409: CALL_OW 301
45413: IFFALSE 45433
// begin tmp := tmp diff un ;
45415: LD_ADDR_VAR 0 3
45419: PUSH
45420: LD_VAR 0 3
45424: PUSH
45425: LD_VAR 0 2
45429: DIFF
45430: ST_TO_ADDR
// continue ;
45431: GO 45401
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
45433: LD_VAR 0 2
45437: PPUSH
45438: LD_INT 3
45440: PUSH
45441: LD_INT 22
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PPUSH
45455: CALL_OW 69
45459: PPUSH
45460: LD_VAR 0 2
45464: PPUSH
45465: CALL_OW 74
45469: PPUSH
45470: CALL_OW 115
// end ;
45474: GO 45401
45476: POP
45477: POP
// until not tmp ;
45478: LD_VAR 0 3
45482: NOT
45483: IFFALSE 45384
// end ;
45485: PPOPN 3
45487: END
// every 0 0$1 trigger StreamModeActive and sTroll do
45488: LD_EXP 21
45492: PUSH
45493: LD_EXP 46
45497: AND
45498: IFFALSE 45552
45500: GO 45502
45502: DISABLE
// begin ToLua ( displayTroll(); ) ;
45503: LD_STRING displayTroll();
45505: PPUSH
45506: CALL_OW 559
// wait ( 3 3$00 ) ;
45510: LD_INT 6300
45512: PPUSH
45513: CALL_OW 67
// ToLua ( hideTroll(); ) ;
45517: LD_STRING hideTroll();
45519: PPUSH
45520: CALL_OW 559
// wait ( 1 1$00 ) ;
45524: LD_INT 2100
45526: PPUSH
45527: CALL_OW 67
// ToLua ( displayTroll(); ) ;
45531: LD_STRING displayTroll();
45533: PPUSH
45534: CALL_OW 559
// wait ( 1 1$00 ) ;
45538: LD_INT 2100
45540: PPUSH
45541: CALL_OW 67
// ToLua ( hideTroll(); ) ;
45545: LD_STRING hideTroll();
45547: PPUSH
45548: CALL_OW 559
// end ;
45552: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
45553: LD_EXP 21
45557: PUSH
45558: LD_EXP 47
45562: AND
45563: IFFALSE 45626
45565: GO 45567
45567: DISABLE
45568: LD_INT 0
45570: PPUSH
// begin p := 0 ;
45571: LD_ADDR_VAR 0 1
45575: PUSH
45576: LD_INT 0
45578: ST_TO_ADDR
// repeat game_speed := 1 ;
45579: LD_ADDR_OWVAR 65
45583: PUSH
45584: LD_INT 1
45586: ST_TO_ADDR
// wait ( 0 0$1 ) ;
45587: LD_INT 35
45589: PPUSH
45590: CALL_OW 67
// p := p + 1 ;
45594: LD_ADDR_VAR 0 1
45598: PUSH
45599: LD_VAR 0 1
45603: PUSH
45604: LD_INT 1
45606: PLUS
45607: ST_TO_ADDR
// until p >= 60 ;
45608: LD_VAR 0 1
45612: PUSH
45613: LD_INT 60
45615: GREATEREQUAL
45616: IFFALSE 45579
// game_speed := 4 ;
45618: LD_ADDR_OWVAR 65
45622: PUSH
45623: LD_INT 4
45625: ST_TO_ADDR
// end ;
45626: PPOPN 1
45628: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
45629: LD_EXP 21
45633: PUSH
45634: LD_EXP 48
45638: AND
45639: IFFALSE 45785
45641: GO 45643
45643: DISABLE
45644: LD_INT 0
45646: PPUSH
45647: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45648: LD_ADDR_VAR 0 1
45652: PUSH
45653: LD_INT 22
45655: PUSH
45656: LD_OWVAR 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 30
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 30
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: LIST
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PPUSH
45697: CALL_OW 69
45701: ST_TO_ADDR
// if not depot then
45702: LD_VAR 0 1
45706: NOT
45707: IFFALSE 45711
// exit ;
45709: GO 45785
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
45711: LD_ADDR_VAR 0 2
45715: PUSH
45716: LD_VAR 0 1
45720: PUSH
45721: LD_INT 1
45723: PPUSH
45724: LD_VAR 0 1
45728: PPUSH
45729: CALL_OW 12
45733: ARRAY
45734: PPUSH
45735: CALL_OW 274
45739: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
45740: LD_VAR 0 2
45744: PPUSH
45745: LD_INT 1
45747: PPUSH
45748: LD_INT 0
45750: PPUSH
45751: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
45755: LD_VAR 0 2
45759: PPUSH
45760: LD_INT 2
45762: PPUSH
45763: LD_INT 0
45765: PPUSH
45766: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
45770: LD_VAR 0 2
45774: PPUSH
45775: LD_INT 3
45777: PPUSH
45778: LD_INT 0
45780: PPUSH
45781: CALL_OW 277
// end ;
45785: PPOPN 2
45787: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
45788: LD_EXP 21
45792: PUSH
45793: LD_EXP 49
45797: AND
45798: IFFALSE 45895
45800: GO 45802
45802: DISABLE
45803: LD_INT 0
45805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45806: LD_ADDR_VAR 0 1
45810: PUSH
45811: LD_INT 22
45813: PUSH
45814: LD_OWVAR 2
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 21
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: LD_INT 23
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: PPUSH
45855: CALL_OW 69
45859: ST_TO_ADDR
// if not tmp then
45860: LD_VAR 0 1
45864: NOT
45865: IFFALSE 45869
// exit ;
45867: GO 45895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
45869: LD_VAR 0 1
45873: PUSH
45874: LD_INT 1
45876: PPUSH
45877: LD_VAR 0 1
45881: PPUSH
45882: CALL_OW 12
45886: ARRAY
45887: PPUSH
45888: LD_INT 200
45890: PPUSH
45891: CALL_OW 234
// end ;
45895: PPOPN 1
45897: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
45898: LD_EXP 21
45902: PUSH
45903: LD_EXP 50
45907: AND
45908: IFFALSE 45987
45910: GO 45912
45912: DISABLE
45913: LD_INT 0
45915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
45916: LD_ADDR_VAR 0 1
45920: PUSH
45921: LD_INT 22
45923: PUSH
45924: LD_OWVAR 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 21
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PPUSH
45947: CALL_OW 69
45951: ST_TO_ADDR
// if not tmp then
45952: LD_VAR 0 1
45956: NOT
45957: IFFALSE 45961
// exit ;
45959: GO 45987
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
45961: LD_VAR 0 1
45965: PUSH
45966: LD_INT 1
45968: PPUSH
45969: LD_VAR 0 1
45973: PPUSH
45974: CALL_OW 12
45978: ARRAY
45979: PPUSH
45980: LD_INT 60
45982: PPUSH
45983: CALL_OW 234
// end ;
45987: PPOPN 1
45989: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
45990: LD_EXP 21
45994: PUSH
45995: LD_EXP 51
45999: AND
46000: IFFALSE 46099
46002: GO 46004
46004: DISABLE
46005: LD_INT 0
46007: PPUSH
46008: PPUSH
// begin enable ;
46009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
46010: LD_ADDR_VAR 0 1
46014: PUSH
46015: LD_INT 22
46017: PUSH
46018: LD_OWVAR 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 61
46029: PUSH
46030: EMPTY
46031: LIST
46032: PUSH
46033: LD_INT 33
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: PPUSH
46048: CALL_OW 69
46052: ST_TO_ADDR
// if not tmp then
46053: LD_VAR 0 1
46057: NOT
46058: IFFALSE 46062
// exit ;
46060: GO 46099
// for i in tmp do
46062: LD_ADDR_VAR 0 2
46066: PUSH
46067: LD_VAR 0 1
46071: PUSH
46072: FOR_IN
46073: IFFALSE 46097
// if IsControledBy ( i ) then
46075: LD_VAR 0 2
46079: PPUSH
46080: CALL_OW 312
46084: IFFALSE 46095
// ComUnlink ( i ) ;
46086: LD_VAR 0 2
46090: PPUSH
46091: CALL_OW 136
46095: GO 46072
46097: POP
46098: POP
// end ;
46099: PPOPN 2
46101: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
46102: LD_EXP 21
46106: PUSH
46107: LD_EXP 52
46111: AND
46112: IFFALSE 46252
46114: GO 46116
46116: DISABLE
46117: LD_INT 0
46119: PPUSH
46120: PPUSH
// begin ToLua ( displayPowell(); ) ;
46121: LD_STRING displayPowell();
46123: PPUSH
46124: CALL_OW 559
// uc_side := 0 ;
46128: LD_ADDR_OWVAR 20
46132: PUSH
46133: LD_INT 0
46135: ST_TO_ADDR
// uc_nation := 2 ;
46136: LD_ADDR_OWVAR 21
46140: PUSH
46141: LD_INT 2
46143: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
46144: LD_ADDR_OWVAR 37
46148: PUSH
46149: LD_INT 14
46151: ST_TO_ADDR
// vc_engine := engine_siberite ;
46152: LD_ADDR_OWVAR 39
46156: PUSH
46157: LD_INT 3
46159: ST_TO_ADDR
// vc_control := control_apeman ;
46160: LD_ADDR_OWVAR 38
46164: PUSH
46165: LD_INT 5
46167: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
46168: LD_ADDR_OWVAR 40
46172: PUSH
46173: LD_INT 29
46175: ST_TO_ADDR
// un := CreateVehicle ;
46176: LD_ADDR_VAR 0 2
46180: PUSH
46181: CALL_OW 45
46185: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
46186: LD_VAR 0 2
46190: PPUSH
46191: LD_INT 1
46193: PPUSH
46194: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
46198: LD_INT 35
46200: PPUSH
46201: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
46205: LD_VAR 0 2
46209: PPUSH
46210: LD_INT 22
46212: PUSH
46213: LD_OWVAR 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PPUSH
46222: CALL_OW 69
46226: PPUSH
46227: LD_VAR 0 2
46231: PPUSH
46232: CALL_OW 74
46236: PPUSH
46237: CALL_OW 115
// until IsDead ( un ) ;
46241: LD_VAR 0 2
46245: PPUSH
46246: CALL_OW 301
46250: IFFALSE 46198
// end ;
46252: PPOPN 2
46254: END
// every 0 0$1 trigger StreamModeActive and sStu do
46255: LD_EXP 21
46259: PUSH
46260: LD_EXP 60
46264: AND
46265: IFFALSE 46281
46267: GO 46269
46269: DISABLE
// begin ToLua ( displayStucuk(); ) ;
46270: LD_STRING displayStucuk();
46272: PPUSH
46273: CALL_OW 559
// ResetFog ;
46277: CALL_OW 335
// end ;
46281: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
46282: LD_EXP 21
46286: PUSH
46287: LD_EXP 53
46291: AND
46292: IFFALSE 46433
46294: GO 46296
46296: DISABLE
46297: LD_INT 0
46299: PPUSH
46300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
46301: LD_ADDR_VAR 0 2
46305: PUSH
46306: LD_INT 22
46308: PUSH
46309: LD_OWVAR 2
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 21
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PPUSH
46332: CALL_OW 69
46336: ST_TO_ADDR
// if not tmp then
46337: LD_VAR 0 2
46341: NOT
46342: IFFALSE 46346
// exit ;
46344: GO 46433
// un := tmp [ rand ( 1 , tmp ) ] ;
46346: LD_ADDR_VAR 0 1
46350: PUSH
46351: LD_VAR 0 2
46355: PUSH
46356: LD_INT 1
46358: PPUSH
46359: LD_VAR 0 2
46363: PPUSH
46364: CALL_OW 12
46368: ARRAY
46369: ST_TO_ADDR
// SetSide ( un , 0 ) ;
46370: LD_VAR 0 1
46374: PPUSH
46375: LD_INT 0
46377: PPUSH
46378: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
46382: LD_VAR 0 1
46386: PPUSH
46387: LD_OWVAR 3
46391: PUSH
46392: LD_VAR 0 1
46396: DIFF
46397: PPUSH
46398: LD_VAR 0 1
46402: PPUSH
46403: CALL_OW 74
46407: PPUSH
46408: CALL_OW 115
// wait ( 0 0$20 ) ;
46412: LD_INT 700
46414: PPUSH
46415: CALL_OW 67
// SetSide ( un , your_side ) ;
46419: LD_VAR 0 1
46423: PPUSH
46424: LD_OWVAR 2
46428: PPUSH
46429: CALL_OW 235
// end ;
46433: PPOPN 2
46435: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
46436: LD_EXP 21
46440: PUSH
46441: LD_EXP 54
46445: AND
46446: IFFALSE 46552
46448: GO 46450
46450: DISABLE
46451: LD_INT 0
46453: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46454: LD_ADDR_VAR 0 1
46458: PUSH
46459: LD_INT 22
46461: PUSH
46462: LD_OWVAR 2
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 30
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 30
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PPUSH
46503: CALL_OW 69
46507: ST_TO_ADDR
// if not depot then
46508: LD_VAR 0 1
46512: NOT
46513: IFFALSE 46517
// exit ;
46515: GO 46552
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
46517: LD_VAR 0 1
46521: PUSH
46522: LD_INT 1
46524: ARRAY
46525: PPUSH
46526: CALL_OW 250
46530: PPUSH
46531: LD_VAR 0 1
46535: PUSH
46536: LD_INT 1
46538: ARRAY
46539: PPUSH
46540: CALL_OW 251
46544: PPUSH
46545: LD_INT 70
46547: PPUSH
46548: CALL_OW 495
// end ;
46552: PPOPN 1
46554: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
46555: LD_EXP 21
46559: PUSH
46560: LD_EXP 55
46564: AND
46565: IFFALSE 46776
46567: GO 46569
46569: DISABLE
46570: LD_INT 0
46572: PPUSH
46573: PPUSH
46574: PPUSH
46575: PPUSH
46576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
46577: LD_ADDR_VAR 0 5
46581: PUSH
46582: LD_INT 22
46584: PUSH
46585: LD_OWVAR 2
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 21
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PPUSH
46608: CALL_OW 69
46612: ST_TO_ADDR
// if not tmp then
46613: LD_VAR 0 5
46617: NOT
46618: IFFALSE 46622
// exit ;
46620: GO 46776
// for i in tmp do
46622: LD_ADDR_VAR 0 1
46626: PUSH
46627: LD_VAR 0 5
46631: PUSH
46632: FOR_IN
46633: IFFALSE 46774
// begin d := rand ( 0 , 5 ) ;
46635: LD_ADDR_VAR 0 4
46639: PUSH
46640: LD_INT 0
46642: PPUSH
46643: LD_INT 5
46645: PPUSH
46646: CALL_OW 12
46650: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
46651: LD_ADDR_VAR 0 2
46655: PUSH
46656: LD_VAR 0 1
46660: PPUSH
46661: CALL_OW 250
46665: PPUSH
46666: LD_VAR 0 4
46670: PPUSH
46671: LD_INT 3
46673: PPUSH
46674: LD_INT 12
46676: PPUSH
46677: CALL_OW 12
46681: PPUSH
46682: CALL_OW 272
46686: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
46687: LD_ADDR_VAR 0 3
46691: PUSH
46692: LD_VAR 0 1
46696: PPUSH
46697: CALL_OW 251
46701: PPUSH
46702: LD_VAR 0 4
46706: PPUSH
46707: LD_INT 3
46709: PPUSH
46710: LD_INT 12
46712: PPUSH
46713: CALL_OW 12
46717: PPUSH
46718: CALL_OW 273
46722: ST_TO_ADDR
// if ValidHex ( x , y ) then
46723: LD_VAR 0 2
46727: PPUSH
46728: LD_VAR 0 3
46732: PPUSH
46733: CALL_OW 488
46737: IFFALSE 46772
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
46739: LD_VAR 0 1
46743: PPUSH
46744: LD_VAR 0 2
46748: PPUSH
46749: LD_VAR 0 3
46753: PPUSH
46754: LD_INT 3
46756: PPUSH
46757: LD_INT 6
46759: PPUSH
46760: CALL_OW 12
46764: PPUSH
46765: LD_INT 1
46767: PPUSH
46768: CALL_OW 483
// end ;
46772: GO 46632
46774: POP
46775: POP
// end ;
46776: PPOPN 5
46778: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
46779: LD_EXP 21
46783: PUSH
46784: LD_EXP 56
46788: AND
46789: IFFALSE 46883
46791: GO 46793
46793: DISABLE
46794: LD_INT 0
46796: PPUSH
46797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
46798: LD_ADDR_VAR 0 2
46802: PUSH
46803: LD_INT 22
46805: PUSH
46806: LD_OWVAR 2
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 32
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 21
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: LIST
46839: PPUSH
46840: CALL_OW 69
46844: ST_TO_ADDR
// if not tmp then
46845: LD_VAR 0 2
46849: NOT
46850: IFFALSE 46854
// exit ;
46852: GO 46883
// for i in tmp do
46854: LD_ADDR_VAR 0 1
46858: PUSH
46859: LD_VAR 0 2
46863: PUSH
46864: FOR_IN
46865: IFFALSE 46881
// SetFuel ( i , 0 ) ;
46867: LD_VAR 0 1
46871: PPUSH
46872: LD_INT 0
46874: PPUSH
46875: CALL_OW 240
46879: GO 46864
46881: POP
46882: POP
// end ;
46883: PPOPN 2
46885: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
46886: LD_EXP 21
46890: PUSH
46891: LD_EXP 57
46895: AND
46896: IFFALSE 46962
46898: GO 46900
46900: DISABLE
46901: LD_INT 0
46903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
46904: LD_ADDR_VAR 0 1
46908: PUSH
46909: LD_INT 22
46911: PUSH
46912: LD_OWVAR 2
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 30
46923: PUSH
46924: LD_INT 29
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PPUSH
46935: CALL_OW 69
46939: ST_TO_ADDR
// if not tmp then
46940: LD_VAR 0 1
46944: NOT
46945: IFFALSE 46949
// exit ;
46947: GO 46962
// DestroyUnit ( tmp [ 1 ] ) ;
46949: LD_VAR 0 1
46953: PUSH
46954: LD_INT 1
46956: ARRAY
46957: PPUSH
46958: CALL_OW 65
// end ;
46962: PPOPN 1
46964: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
46965: LD_EXP 21
46969: PUSH
46970: LD_EXP 59
46974: AND
46975: IFFALSE 47104
46977: GO 46979
46979: DISABLE
46980: LD_INT 0
46982: PPUSH
// begin uc_side := 0 ;
46983: LD_ADDR_OWVAR 20
46987: PUSH
46988: LD_INT 0
46990: ST_TO_ADDR
// uc_nation := nation_arabian ;
46991: LD_ADDR_OWVAR 21
46995: PUSH
46996: LD_INT 2
46998: ST_TO_ADDR
// hc_gallery :=  ;
46999: LD_ADDR_OWVAR 33
47003: PUSH
47004: LD_STRING 
47006: ST_TO_ADDR
// hc_name :=  ;
47007: LD_ADDR_OWVAR 26
47011: PUSH
47012: LD_STRING 
47014: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
47015: LD_INT 1
47017: PPUSH
47018: LD_INT 11
47020: PPUSH
47021: LD_INT 10
47023: PPUSH
47024: CALL_OW 380
// un := CreateHuman ;
47028: LD_ADDR_VAR 0 1
47032: PUSH
47033: CALL_OW 44
47037: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
47038: LD_VAR 0 1
47042: PPUSH
47043: LD_INT 1
47045: PPUSH
47046: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
47050: LD_INT 35
47052: PPUSH
47053: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
47057: LD_VAR 0 1
47061: PPUSH
47062: LD_INT 22
47064: PUSH
47065: LD_OWVAR 2
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PPUSH
47074: CALL_OW 69
47078: PPUSH
47079: LD_VAR 0 1
47083: PPUSH
47084: CALL_OW 74
47088: PPUSH
47089: CALL_OW 115
// until IsDead ( un ) ;
47093: LD_VAR 0 1
47097: PPUSH
47098: CALL_OW 301
47102: IFFALSE 47050
// end ;
47104: PPOPN 1
47106: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
47107: LD_EXP 21
47111: PUSH
47112: LD_EXP 61
47116: AND
47117: IFFALSE 47129
47119: GO 47121
47121: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
47122: LD_STRING earthquake(getX(game), 0, 32)
47124: PPUSH
47125: CALL_OW 559
47129: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
47130: LD_EXP 21
47134: PUSH
47135: LD_EXP 62
47139: AND
47140: IFFALSE 47231
47142: GO 47144
47144: DISABLE
47145: LD_INT 0
47147: PPUSH
// begin enable ;
47148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
47149: LD_ADDR_VAR 0 1
47153: PUSH
47154: LD_INT 22
47156: PUSH
47157: LD_OWVAR 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 21
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 33
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: PPUSH
47191: CALL_OW 69
47195: ST_TO_ADDR
// if not tmp then
47196: LD_VAR 0 1
47200: NOT
47201: IFFALSE 47205
// exit ;
47203: GO 47231
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
47205: LD_VAR 0 1
47209: PUSH
47210: LD_INT 1
47212: PPUSH
47213: LD_VAR 0 1
47217: PPUSH
47218: CALL_OW 12
47222: ARRAY
47223: PPUSH
47224: LD_INT 1
47226: PPUSH
47227: CALL_OW 234
// end ;
47231: PPOPN 1
47233: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
47234: LD_EXP 21
47238: PUSH
47239: LD_EXP 63
47243: AND
47244: IFFALSE 47385
47246: GO 47248
47248: DISABLE
47249: LD_INT 0
47251: PPUSH
47252: PPUSH
47253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
47254: LD_ADDR_VAR 0 3
47258: PUSH
47259: LD_INT 22
47261: PUSH
47262: LD_OWVAR 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 25
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PPUSH
47285: CALL_OW 69
47289: ST_TO_ADDR
// if not tmp then
47290: LD_VAR 0 3
47294: NOT
47295: IFFALSE 47299
// exit ;
47297: GO 47385
// un := tmp [ rand ( 1 , tmp ) ] ;
47299: LD_ADDR_VAR 0 2
47303: PUSH
47304: LD_VAR 0 3
47308: PUSH
47309: LD_INT 1
47311: PPUSH
47312: LD_VAR 0 3
47316: PPUSH
47317: CALL_OW 12
47321: ARRAY
47322: ST_TO_ADDR
// if Crawls ( un ) then
47323: LD_VAR 0 2
47327: PPUSH
47328: CALL_OW 318
47332: IFFALSE 47343
// ComWalk ( un ) ;
47334: LD_VAR 0 2
47338: PPUSH
47339: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
47343: LD_VAR 0 2
47347: PPUSH
47348: LD_INT 9
47350: PPUSH
47351: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
47355: LD_INT 28
47357: PPUSH
47358: LD_OWVAR 2
47362: PPUSH
47363: LD_INT 2
47365: PPUSH
47366: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
47370: LD_INT 29
47372: PPUSH
47373: LD_OWVAR 2
47377: PPUSH
47378: LD_INT 2
47380: PPUSH
47381: CALL_OW 322
// end ;
47385: PPOPN 3
47387: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
47388: LD_EXP 21
47392: PUSH
47393: LD_EXP 64
47397: AND
47398: IFFALSE 47509
47400: GO 47402
47402: DISABLE
47403: LD_INT 0
47405: PPUSH
47406: PPUSH
47407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
47408: LD_ADDR_VAR 0 3
47412: PUSH
47413: LD_INT 22
47415: PUSH
47416: LD_OWVAR 2
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 25
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PPUSH
47439: CALL_OW 69
47443: ST_TO_ADDR
// if not tmp then
47444: LD_VAR 0 3
47448: NOT
47449: IFFALSE 47453
// exit ;
47451: GO 47509
// un := tmp [ rand ( 1 , tmp ) ] ;
47453: LD_ADDR_VAR 0 2
47457: PUSH
47458: LD_VAR 0 3
47462: PUSH
47463: LD_INT 1
47465: PPUSH
47466: LD_VAR 0 3
47470: PPUSH
47471: CALL_OW 12
47475: ARRAY
47476: ST_TO_ADDR
// if Crawls ( un ) then
47477: LD_VAR 0 2
47481: PPUSH
47482: CALL_OW 318
47486: IFFALSE 47497
// ComWalk ( un ) ;
47488: LD_VAR 0 2
47492: PPUSH
47493: CALL_OW 138
// SetClass ( un , class_mortar ) ;
47497: LD_VAR 0 2
47501: PPUSH
47502: LD_INT 8
47504: PPUSH
47505: CALL_OW 336
// end ;
47509: PPOPN 3
47511: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
47512: LD_EXP 21
47516: PUSH
47517: LD_EXP 65
47521: AND
47522: IFFALSE 47666
47524: GO 47526
47526: DISABLE
47527: LD_INT 0
47529: PPUSH
47530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
47531: LD_ADDR_VAR 0 2
47535: PUSH
47536: LD_INT 22
47538: PUSH
47539: LD_OWVAR 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 21
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 34
47563: PUSH
47564: LD_INT 12
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 34
47573: PUSH
47574: LD_INT 51
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 34
47583: PUSH
47584: LD_INT 32
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: PPUSH
47602: CALL_OW 69
47606: ST_TO_ADDR
// if not tmp then
47607: LD_VAR 0 2
47611: NOT
47612: IFFALSE 47616
// exit ;
47614: GO 47666
// for i in tmp do
47616: LD_ADDR_VAR 0 1
47620: PUSH
47621: LD_VAR 0 2
47625: PUSH
47626: FOR_IN
47627: IFFALSE 47664
// if GetCargo ( i , mat_artifact ) = 0 then
47629: LD_VAR 0 1
47633: PPUSH
47634: LD_INT 4
47636: PPUSH
47637: CALL_OW 289
47641: PUSH
47642: LD_INT 0
47644: EQUAL
47645: IFFALSE 47662
// SetCargo ( i , mat_siberit , 100 ) ;
47647: LD_VAR 0 1
47651: PPUSH
47652: LD_INT 3
47654: PPUSH
47655: LD_INT 100
47657: PPUSH
47658: CALL_OW 290
47662: GO 47626
47664: POP
47665: POP
// end ;
47666: PPOPN 2
47668: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
47669: LD_EXP 21
47673: PUSH
47674: LD_EXP 66
47678: AND
47679: IFFALSE 47862
47681: GO 47683
47683: DISABLE
47684: LD_INT 0
47686: PPUSH
47687: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
47688: LD_ADDR_VAR 0 2
47692: PUSH
47693: LD_INT 22
47695: PUSH
47696: LD_OWVAR 2
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PPUSH
47705: CALL_OW 69
47709: ST_TO_ADDR
// if not tmp then
47710: LD_VAR 0 2
47714: NOT
47715: IFFALSE 47719
// exit ;
47717: GO 47862
// for i := 1 to 2 do
47719: LD_ADDR_VAR 0 1
47723: PUSH
47724: DOUBLE
47725: LD_INT 1
47727: DEC
47728: ST_TO_ADDR
47729: LD_INT 2
47731: PUSH
47732: FOR_TO
47733: IFFALSE 47860
// begin uc_side := your_side ;
47735: LD_ADDR_OWVAR 20
47739: PUSH
47740: LD_OWVAR 2
47744: ST_TO_ADDR
// uc_nation := nation_american ;
47745: LD_ADDR_OWVAR 21
47749: PUSH
47750: LD_INT 1
47752: ST_TO_ADDR
// vc_chassis := us_morphling ;
47753: LD_ADDR_OWVAR 37
47757: PUSH
47758: LD_INT 5
47760: ST_TO_ADDR
// vc_engine := engine_siberite ;
47761: LD_ADDR_OWVAR 39
47765: PUSH
47766: LD_INT 3
47768: ST_TO_ADDR
// vc_control := control_computer ;
47769: LD_ADDR_OWVAR 38
47773: PUSH
47774: LD_INT 3
47776: ST_TO_ADDR
// vc_weapon := us_double_laser ;
47777: LD_ADDR_OWVAR 40
47781: PUSH
47782: LD_INT 10
47784: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
47785: LD_VAR 0 2
47789: PUSH
47790: LD_INT 1
47792: ARRAY
47793: PPUSH
47794: CALL_OW 310
47798: NOT
47799: IFFALSE 47846
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
47801: CALL_OW 45
47805: PPUSH
47806: LD_VAR 0 2
47810: PUSH
47811: LD_INT 1
47813: ARRAY
47814: PPUSH
47815: CALL_OW 250
47819: PPUSH
47820: LD_VAR 0 2
47824: PUSH
47825: LD_INT 1
47827: ARRAY
47828: PPUSH
47829: CALL_OW 251
47833: PPUSH
47834: LD_INT 12
47836: PPUSH
47837: LD_INT 1
47839: PPUSH
47840: CALL_OW 50
47844: GO 47858
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
47846: CALL_OW 45
47850: PPUSH
47851: LD_INT 1
47853: PPUSH
47854: CALL_OW 51
// end ;
47858: GO 47732
47860: POP
47861: POP
// end ;
47862: PPOPN 2
47864: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
47865: LD_EXP 21
47869: PUSH
47870: LD_EXP 67
47874: AND
47875: IFFALSE 48097
47877: GO 47879
47879: DISABLE
47880: LD_INT 0
47882: PPUSH
47883: PPUSH
47884: PPUSH
47885: PPUSH
47886: PPUSH
47887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
47888: LD_ADDR_VAR 0 6
47892: PUSH
47893: LD_INT 22
47895: PUSH
47896: LD_OWVAR 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 21
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: PUSH
47918: LD_INT 23
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: LIST
47936: PPUSH
47937: CALL_OW 69
47941: ST_TO_ADDR
// if not tmp then
47942: LD_VAR 0 6
47946: NOT
47947: IFFALSE 47951
// exit ;
47949: GO 48097
// s1 := rand ( 1 , 4 ) ;
47951: LD_ADDR_VAR 0 2
47955: PUSH
47956: LD_INT 1
47958: PPUSH
47959: LD_INT 4
47961: PPUSH
47962: CALL_OW 12
47966: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
47967: LD_ADDR_VAR 0 4
47971: PUSH
47972: LD_VAR 0 6
47976: PUSH
47977: LD_INT 1
47979: ARRAY
47980: PPUSH
47981: LD_VAR 0 2
47985: PPUSH
47986: CALL_OW 259
47990: ST_TO_ADDR
// if s1 = 1 then
47991: LD_VAR 0 2
47995: PUSH
47996: LD_INT 1
47998: EQUAL
47999: IFFALSE 48019
// s2 := rand ( 2 , 4 ) else
48001: LD_ADDR_VAR 0 3
48005: PUSH
48006: LD_INT 2
48008: PPUSH
48009: LD_INT 4
48011: PPUSH
48012: CALL_OW 12
48016: ST_TO_ADDR
48017: GO 48027
// s2 := 1 ;
48019: LD_ADDR_VAR 0 3
48023: PUSH
48024: LD_INT 1
48026: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
48027: LD_ADDR_VAR 0 5
48031: PUSH
48032: LD_VAR 0 6
48036: PUSH
48037: LD_INT 1
48039: ARRAY
48040: PPUSH
48041: LD_VAR 0 3
48045: PPUSH
48046: CALL_OW 259
48050: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
48051: LD_VAR 0 6
48055: PUSH
48056: LD_INT 1
48058: ARRAY
48059: PPUSH
48060: LD_VAR 0 2
48064: PPUSH
48065: LD_VAR 0 5
48069: PPUSH
48070: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
48074: LD_VAR 0 6
48078: PUSH
48079: LD_INT 1
48081: ARRAY
48082: PPUSH
48083: LD_VAR 0 3
48087: PPUSH
48088: LD_VAR 0 4
48092: PPUSH
48093: CALL_OW 237
// end ;
48097: PPOPN 6
48099: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
48100: LD_EXP 21
48104: PUSH
48105: LD_EXP 68
48109: AND
48110: IFFALSE 48189
48112: GO 48114
48114: DISABLE
48115: LD_INT 0
48117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
48118: LD_ADDR_VAR 0 1
48122: PUSH
48123: LD_INT 22
48125: PUSH
48126: LD_OWVAR 2
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 30
48137: PUSH
48138: LD_INT 3
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PPUSH
48149: CALL_OW 69
48153: ST_TO_ADDR
// if not tmp then
48154: LD_VAR 0 1
48158: NOT
48159: IFFALSE 48163
// exit ;
48161: GO 48189
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
48163: LD_VAR 0 1
48167: PUSH
48168: LD_INT 1
48170: PPUSH
48171: LD_VAR 0 1
48175: PPUSH
48176: CALL_OW 12
48180: ARRAY
48181: PPUSH
48182: LD_INT 1
48184: PPUSH
48185: CALL_OW 234
// end ;
48189: PPOPN 1
48191: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
48192: LD_EXP 21
48196: PUSH
48197: LD_EXP 69
48201: AND
48202: IFFALSE 48314
48204: GO 48206
48206: DISABLE
48207: LD_INT 0
48209: PPUSH
48210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
48211: LD_ADDR_VAR 0 2
48215: PUSH
48216: LD_INT 22
48218: PUSH
48219: LD_OWVAR 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 30
48233: PUSH
48234: LD_INT 27
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 30
48243: PUSH
48244: LD_INT 26
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 30
48253: PUSH
48254: LD_INT 28
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PPUSH
48271: CALL_OW 69
48275: ST_TO_ADDR
// if not tmp then
48276: LD_VAR 0 2
48280: NOT
48281: IFFALSE 48285
// exit ;
48283: GO 48314
// for i in tmp do
48285: LD_ADDR_VAR 0 1
48289: PUSH
48290: LD_VAR 0 2
48294: PUSH
48295: FOR_IN
48296: IFFALSE 48312
// SetLives ( i , 1 ) ;
48298: LD_VAR 0 1
48302: PPUSH
48303: LD_INT 1
48305: PPUSH
48306: CALL_OW 234
48310: GO 48295
48312: POP
48313: POP
// end ;
48314: PPOPN 2
48316: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
48317: LD_EXP 21
48321: PUSH
48322: LD_EXP 70
48326: AND
48327: IFFALSE 48601
48329: GO 48331
48331: DISABLE
48332: LD_INT 0
48334: PPUSH
48335: PPUSH
48336: PPUSH
// begin i := rand ( 1 , 7 ) ;
48337: LD_ADDR_VAR 0 1
48341: PUSH
48342: LD_INT 1
48344: PPUSH
48345: LD_INT 7
48347: PPUSH
48348: CALL_OW 12
48352: ST_TO_ADDR
// case i of 1 :
48353: LD_VAR 0 1
48357: PUSH
48358: LD_INT 1
48360: DOUBLE
48361: EQUAL
48362: IFTRUE 48366
48364: GO 48376
48366: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
48367: LD_STRING earthquake(getX(game), 0, 32)
48369: PPUSH
48370: CALL_OW 559
48374: GO 48601
48376: LD_INT 2
48378: DOUBLE
48379: EQUAL
48380: IFTRUE 48384
48382: GO 48398
48384: POP
// begin ToLua ( displayStucuk(); ) ;
48385: LD_STRING displayStucuk();
48387: PPUSH
48388: CALL_OW 559
// ResetFog ;
48392: CALL_OW 335
// end ; 3 :
48396: GO 48601
48398: LD_INT 3
48400: DOUBLE
48401: EQUAL
48402: IFTRUE 48406
48404: GO 48510
48406: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
48407: LD_ADDR_VAR 0 2
48411: PUSH
48412: LD_INT 22
48414: PUSH
48415: LD_OWVAR 2
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 25
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PPUSH
48438: CALL_OW 69
48442: ST_TO_ADDR
// if not tmp then
48443: LD_VAR 0 2
48447: NOT
48448: IFFALSE 48452
// exit ;
48450: GO 48601
// un := tmp [ rand ( 1 , tmp ) ] ;
48452: LD_ADDR_VAR 0 3
48456: PUSH
48457: LD_VAR 0 2
48461: PUSH
48462: LD_INT 1
48464: PPUSH
48465: LD_VAR 0 2
48469: PPUSH
48470: CALL_OW 12
48474: ARRAY
48475: ST_TO_ADDR
// if Crawls ( un ) then
48476: LD_VAR 0 3
48480: PPUSH
48481: CALL_OW 318
48485: IFFALSE 48496
// ComWalk ( un ) ;
48487: LD_VAR 0 3
48491: PPUSH
48492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
48496: LD_VAR 0 3
48500: PPUSH
48501: LD_INT 8
48503: PPUSH
48504: CALL_OW 336
// end ; 4 :
48508: GO 48601
48510: LD_INT 4
48512: DOUBLE
48513: EQUAL
48514: IFTRUE 48518
48516: GO 48579
48518: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
48519: LD_ADDR_VAR 0 2
48523: PUSH
48524: LD_INT 22
48526: PUSH
48527: LD_OWVAR 2
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 30
48538: PUSH
48539: LD_INT 29
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PPUSH
48550: CALL_OW 69
48554: ST_TO_ADDR
// if not tmp then
48555: LD_VAR 0 2
48559: NOT
48560: IFFALSE 48564
// exit ;
48562: GO 48601
// DestroyUnit ( tmp [ 1 ] ) ;
48564: LD_VAR 0 2
48568: PUSH
48569: LD_INT 1
48571: ARRAY
48572: PPUSH
48573: CALL_OW 65
// end ; 5 .. 7 :
48577: GO 48601
48579: LD_INT 5
48581: DOUBLE
48582: GREATEREQUAL
48583: IFFALSE 48591
48585: LD_INT 7
48587: DOUBLE
48588: LESSEQUAL
48589: IFTRUE 48593
48591: GO 48600
48593: POP
// StreamSibBomb ; end ;
48594: CALL 44851 0 0
48598: GO 48601
48600: POP
// end ;
48601: PPOPN 3
48603: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
48604: LD_EXP 21
48608: PUSH
48609: LD_EXP 71
48613: AND
48614: IFFALSE 48770
48616: GO 48618
48618: DISABLE
48619: LD_INT 0
48621: PPUSH
48622: PPUSH
48623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
48624: LD_ADDR_VAR 0 2
48628: PUSH
48629: LD_INT 81
48631: PUSH
48632: LD_OWVAR 2
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: LD_INT 21
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 21
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PPUSH
48673: CALL_OW 69
48677: ST_TO_ADDR
// if not tmp then
48678: LD_VAR 0 2
48682: NOT
48683: IFFALSE 48687
// exit ;
48685: GO 48770
// p := 0 ;
48687: LD_ADDR_VAR 0 3
48691: PUSH
48692: LD_INT 0
48694: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48695: LD_INT 35
48697: PPUSH
48698: CALL_OW 67
// p := p + 1 ;
48702: LD_ADDR_VAR 0 3
48706: PUSH
48707: LD_VAR 0 3
48711: PUSH
48712: LD_INT 1
48714: PLUS
48715: ST_TO_ADDR
// for i in tmp do
48716: LD_ADDR_VAR 0 1
48720: PUSH
48721: LD_VAR 0 2
48725: PUSH
48726: FOR_IN
48727: IFFALSE 48758
// if GetLives ( i ) < 1000 then
48729: LD_VAR 0 1
48733: PPUSH
48734: CALL_OW 256
48738: PUSH
48739: LD_INT 1000
48741: LESS
48742: IFFALSE 48756
// SetLives ( i , 1000 ) ;
48744: LD_VAR 0 1
48748: PPUSH
48749: LD_INT 1000
48751: PPUSH
48752: CALL_OW 234
48756: GO 48726
48758: POP
48759: POP
// until p > 20 ;
48760: LD_VAR 0 3
48764: PUSH
48765: LD_INT 20
48767: GREATER
48768: IFFALSE 48695
// end ;
48770: PPOPN 3
48772: END
// every 0 0$1 trigger StreamModeActive and sTime do
48773: LD_EXP 21
48777: PUSH
48778: LD_EXP 72
48782: AND
48783: IFFALSE 48818
48785: GO 48787
48787: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
48788: LD_INT 28
48790: PPUSH
48791: LD_OWVAR 2
48795: PPUSH
48796: LD_INT 2
48798: PPUSH
48799: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
48803: LD_INT 30
48805: PPUSH
48806: LD_OWVAR 2
48810: PPUSH
48811: LD_INT 2
48813: PPUSH
48814: CALL_OW 322
// end ;
48818: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
48819: LD_EXP 21
48823: PUSH
48824: LD_EXP 73
48828: AND
48829: IFFALSE 48950
48831: GO 48833
48833: DISABLE
48834: LD_INT 0
48836: PPUSH
48837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
48838: LD_ADDR_VAR 0 2
48842: PUSH
48843: LD_INT 22
48845: PUSH
48846: LD_OWVAR 2
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 21
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 3
48867: PUSH
48868: LD_INT 23
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: PPUSH
48887: CALL_OW 69
48891: ST_TO_ADDR
// if not tmp then
48892: LD_VAR 0 2
48896: NOT
48897: IFFALSE 48901
// exit ;
48899: GO 48950
// for i in tmp do
48901: LD_ADDR_VAR 0 1
48905: PUSH
48906: LD_VAR 0 2
48910: PUSH
48911: FOR_IN
48912: IFFALSE 48948
// begin if Crawls ( i ) then
48914: LD_VAR 0 1
48918: PPUSH
48919: CALL_OW 318
48923: IFFALSE 48934
// ComWalk ( i ) ;
48925: LD_VAR 0 1
48929: PPUSH
48930: CALL_OW 138
// SetClass ( i , 2 ) ;
48934: LD_VAR 0 1
48938: PPUSH
48939: LD_INT 2
48941: PPUSH
48942: CALL_OW 336
// end ;
48946: GO 48911
48948: POP
48949: POP
// end ;
48950: PPOPN 2
48952: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
48953: LD_EXP 21
48957: PUSH
48958: LD_EXP 74
48962: AND
48963: IFFALSE 49244
48965: GO 48967
48967: DISABLE
48968: LD_INT 0
48970: PPUSH
48971: PPUSH
48972: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
48973: LD_OWVAR 2
48977: PPUSH
48978: LD_INT 9
48980: PPUSH
48981: LD_INT 1
48983: PPUSH
48984: LD_INT 1
48986: PPUSH
48987: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
48991: LD_INT 9
48993: PPUSH
48994: LD_OWVAR 2
48998: PPUSH
48999: CALL_OW 343
// uc_side := 9 ;
49003: LD_ADDR_OWVAR 20
49007: PUSH
49008: LD_INT 9
49010: ST_TO_ADDR
// uc_nation := 2 ;
49011: LD_ADDR_OWVAR 21
49015: PUSH
49016: LD_INT 2
49018: ST_TO_ADDR
// hc_name := Dark Warrior ;
49019: LD_ADDR_OWVAR 26
49023: PUSH
49024: LD_STRING Dark Warrior
49026: ST_TO_ADDR
// hc_gallery :=  ;
49027: LD_ADDR_OWVAR 33
49031: PUSH
49032: LD_STRING 
49034: ST_TO_ADDR
// hc_noskilllimit := true ;
49035: LD_ADDR_OWVAR 76
49039: PUSH
49040: LD_INT 1
49042: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
49043: LD_ADDR_OWVAR 31
49047: PUSH
49048: LD_INT 30
49050: PUSH
49051: LD_INT 30
49053: PUSH
49054: LD_INT 30
49056: PUSH
49057: LD_INT 30
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: ST_TO_ADDR
// un := CreateHuman ;
49066: LD_ADDR_VAR 0 3
49070: PUSH
49071: CALL_OW 44
49075: ST_TO_ADDR
// hc_noskilllimit := false ;
49076: LD_ADDR_OWVAR 76
49080: PUSH
49081: LD_INT 0
49083: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
49084: LD_VAR 0 3
49088: PPUSH
49089: LD_INT 1
49091: PPUSH
49092: CALL_OW 51
// p := 0 ;
49096: LD_ADDR_VAR 0 2
49100: PUSH
49101: LD_INT 0
49103: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49104: LD_INT 35
49106: PPUSH
49107: CALL_OW 67
// p := p + 1 ;
49111: LD_ADDR_VAR 0 2
49115: PUSH
49116: LD_VAR 0 2
49120: PUSH
49121: LD_INT 1
49123: PLUS
49124: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
49125: LD_VAR 0 3
49129: PPUSH
49130: CALL_OW 256
49134: PUSH
49135: LD_INT 1000
49137: LESS
49138: IFFALSE 49152
// SetLives ( un , 1000 ) ;
49140: LD_VAR 0 3
49144: PPUSH
49145: LD_INT 1000
49147: PPUSH
49148: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
49152: LD_VAR 0 3
49156: PPUSH
49157: LD_INT 81
49159: PUSH
49160: LD_OWVAR 2
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 91
49171: PUSH
49172: LD_VAR 0 3
49176: PUSH
49177: LD_INT 30
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PPUSH
49189: CALL_OW 69
49193: PPUSH
49194: LD_VAR 0 3
49198: PPUSH
49199: CALL_OW 74
49203: PPUSH
49204: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
49208: LD_VAR 0 2
49212: PUSH
49213: LD_INT 60
49215: GREATER
49216: PUSH
49217: LD_VAR 0 3
49221: PPUSH
49222: CALL_OW 301
49226: OR
49227: IFFALSE 49104
// if un then
49229: LD_VAR 0 3
49233: IFFALSE 49244
// RemoveUnit ( un ) ;
49235: LD_VAR 0 3
49239: PPUSH
49240: CALL_OW 64
// end ; end_of_file
49244: PPOPN 3
49246: END
