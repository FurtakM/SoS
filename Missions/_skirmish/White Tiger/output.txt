// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 2753 0 0
// Init ;
   8: CALL 67 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 28
// Difficulty := 2 else
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 2
  25: ST_TO_ADDR
  26: GO 41
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// PrepareAlliance ;
  41: CALL 83 0 0
// PrepareRussian ;
  45: CALL 452 0 0
// Action ;
  49: CALL 2372 0 0
// if debug then
  53: LD_EXP 1
  57: IFFALSE 66
// FogOff ( 7 ) ;
  59: LD_INT 7
  61: PPUSH
  62: CALL_OW 344
// end ;
  66: END
// export debug ; export function Init ; begin
  67: LD_INT 0
  69: PPUSH
// debug := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// end ; end_of_file
  78: LD_VAR 0 1
  82: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  83: LD_INT 0
  85: PPUSH
  86: PPUSH
  87: PPUSH
// tmp := [ ] ;
  88: LD_ADDR_VAR 0 3
  92: PUSH
  93: EMPTY
  94: ST_TO_ADDR
// uc_side := 7 ;
  95: LD_ADDR_OWVAR 20
  99: PUSH
 100: LD_INT 7
 102: ST_TO_ADDR
// uc_nation := 1 ;
 103: LD_ADDR_OWVAR 21
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 111: LD_INT 5
 113: PPUSH
 114: LD_INT 3
 116: PPUSH
 117: LD_INT 3
 119: PPUSH
 120: LD_EXP 11
 124: PPUSH
 125: LD_INT 100
 127: PPUSH
 128: CALL 7737 0 5
// allianceHack := CreateVehicle ;
 132: LD_ADDR_EXP 2
 136: PUSH
 137: CALL_OW 45
 141: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 142: LD_EXP 2
 146: PPUSH
 147: LD_INT 7
 149: PPUSH
 150: LD_INT 0
 152: PPUSH
 153: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 157: LD_INT 5
 159: PPUSH
 160: LD_INT 3
 162: PPUSH
 163: LD_INT 3
 165: PPUSH
 166: LD_INT 10
 168: PPUSH
 169: LD_INT 100
 171: PPUSH
 172: CALL 7737 0 5
// for i := 1 to 2 do
 176: LD_ADDR_VAR 0 2
 180: PUSH
 181: DOUBLE
 182: LD_INT 1
 184: DEC
 185: ST_TO_ADDR
 186: LD_INT 2
 188: PUSH
 189: FOR_TO
 190: IFFALSE 209
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 192: CALL_OW 45
 196: PPUSH
 197: LD_INT 7
 199: PPUSH
 200: LD_INT 0
 202: PPUSH
 203: CALL_OW 49
 207: GO 189
 209: POP
 210: POP
// uc_side := 4 ;
 211: LD_ADDR_OWVAR 20
 215: PUSH
 216: LD_INT 4
 218: ST_TO_ADDR
// uc_nation := 1 ;
 219: LD_ADDR_OWVAR 21
 223: PUSH
 224: LD_INT 1
 226: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 227: LD_INT 1
 229: PPUSH
 230: LD_INT 9
 232: PPUSH
 233: CALL_OW 383
// allianceMechanic := CreateHuman ;
 237: LD_ADDR_EXP 3
 241: PUSH
 242: CALL_OW 44
 246: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 247: LD_EXP 3
 251: PPUSH
 252: LD_INT 96
 254: PPUSH
 255: CALL_OW 52
// end ;
 259: LD_VAR 0 1
 263: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 264: LD_INT 0
 266: PPUSH
 267: PPUSH
 268: PPUSH
// uc_side := 7 ;
 269: LD_ADDR_OWVAR 20
 273: PUSH
 274: LD_INT 7
 276: ST_TO_ADDR
// uc_nation := 1 ;
 277: LD_ADDR_OWVAR 21
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 285: LD_ADDR_VAR 0 2
 289: PUSH
 290: DOUBLE
 291: LD_INT 1
 293: DEC
 294: ST_TO_ADDR
 295: LD_INT 3
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_OWVAR 67
 313: ARRAY
 314: PUSH
 315: FOR_TO
 316: IFFALSE 386
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 318: LD_INT 5
 320: PPUSH
 321: LD_INT 3
 323: PPUSH
 324: LD_INT 3
 326: PPUSH
 327: LD_INT 7
 329: PPUSH
 330: LD_INT 100
 332: PPUSH
 333: CALL 7737 0 5
// un := CreateVehicle ;
 337: LD_ADDR_VAR 0 3
 341: PUSH
 342: CALL_OW 45
 346: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 347: LD_VAR 0 3
 351: PPUSH
 352: LD_INT 7
 354: PPUSH
 355: LD_INT 0
 357: PPUSH
 358: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 67
 369: PPUSH
 370: LD_INT 95
 372: PPUSH
 373: CALL_OW 111
// wait ( 0 0$2 ) ;
 377: LD_INT 70
 379: PPUSH
 380: CALL_OW 67
// end ;
 384: GO 315
 386: POP
 387: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 388: LD_INT 5
 390: PPUSH
 391: LD_INT 3
 393: PPUSH
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 11
 399: PPUSH
 400: LD_INT 100
 402: PPUSH
 403: CALL 7737 0 5
// un := CreateVehicle ;
 407: LD_ADDR_VAR 0 3
 411: PUSH
 412: CALL_OW 45
 416: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 417: LD_VAR 0 3
 421: PPUSH
 422: LD_INT 7
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 432: LD_VAR 0 3
 436: PPUSH
 437: LD_INT 67
 439: PPUSH
 440: LD_INT 95
 442: PPUSH
 443: CALL_OW 111
// end ; end_of_file
 447: LD_VAR 0 1
 451: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
// uc_side := 3 ;
 457: LD_ADDR_OWVAR 20
 461: PUSH
 462: LD_INT 3
 464: ST_TO_ADDR
// uc_nation := 3 ;
 465: LD_ADDR_OWVAR 21
 469: PUSH
 470: LD_INT 3
 472: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 473: LD_INT 14
 475: PPUSH
 476: CALL_OW 274
 480: PPUSH
 481: LD_INT 1
 483: PPUSH
 484: LD_INT 50000
 486: PPUSH
 487: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 491: LD_INT 14
 493: PPUSH
 494: CALL_OW 274
 498: PPUSH
 499: LD_INT 3
 501: PPUSH
 502: LD_INT 5000
 504: PPUSH
 505: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 509: LD_INT 45
 511: PPUSH
 512: LD_INT 132
 514: PPUSH
 515: LD_INT 89
 517: PPUSH
 518: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 522: LD_ADDR_VAR 0 2
 526: PUSH
 527: LD_INT 21
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PPUSH
 537: CALL_OW 69
 541: PUSH
 542: FOR_IN
 543: IFFALSE 576
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 545: LD_VAR 0 2
 549: PPUSH
 550: LD_INT 6
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 10
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_OWVAR 67
 568: ARRAY
 569: PPUSH
 570: CALL_OW 241
 574: GO 542
 576: POP
 577: POP
// for i := 1 to 4 do
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_INT 4
 590: PUSH
 591: FOR_TO
 592: IFFALSE 618
// begin PrepareMechanic ( false , 9 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 9
 599: PPUSH
 600: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 604: CALL_OW 44
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: CALL_OW 52
// end ;
 616: GO 591
 618: POP
 619: POP
// ruGuard1 := [ ] ;
 620: LD_ADDR_EXP 4
 624: PUSH
 625: EMPTY
 626: ST_TO_ADDR
// ruGuard2 := [ ] ;
 627: LD_ADDR_EXP 5
 631: PUSH
 632: EMPTY
 633: ST_TO_ADDR
// ruGuard3 := [ ] ;
 634: LD_ADDR_EXP 6
 638: PUSH
 639: EMPTY
 640: ST_TO_ADDR
// ruForces := [ ] ;
 641: LD_ADDR_EXP 7
 645: PUSH
 646: EMPTY
 647: ST_TO_ADDR
// ruEng := [ ] ;
 648: LD_ADDR_EXP 8
 652: PUSH
 653: EMPTY
 654: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: DOUBLE
 661: LD_INT 1
 663: DEC
 664: ST_TO_ADDR
 665: LD_INT 4
 667: PUSH
 668: LD_INT 5
 670: PUSH
 671: LD_INT 6
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: PUSH
 679: LD_OWVAR 67
 683: ARRAY
 684: PUSH
 685: FOR_TO
 686: IFFALSE 742
// begin PrepareEngineer ( false , 8 ) ;
 688: LD_INT 0
 690: PPUSH
 691: LD_INT 8
 693: PPUSH
 694: CALL_OW 382
// un := CreateHuman ;
 698: LD_ADDR_VAR 0 3
 702: PUSH
 703: CALL_OW 44
 707: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 708: LD_VAR 0 3
 712: PPUSH
 713: LD_INT 14
 715: PPUSH
 716: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 720: LD_ADDR_EXP 8
 724: PUSH
 725: LD_EXP 8
 729: PPUSH
 730: LD_VAR 0 3
 734: PPUSH
 735: CALL 39235 0 2
 739: ST_TO_ADDR
// end ;
 740: GO 685
 742: POP
 743: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 744: LD_ADDR_VAR 0 2
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_INT 5
 756: PUSH
 757: LD_INT 6
 759: PUSH
 760: LD_INT 7
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: PUSH
 768: LD_OWVAR 67
 772: ARRAY
 773: PUSH
 774: FOR_TO
 775: IFFALSE 885
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 777: LD_INT 24
 779: PPUSH
 780: LD_INT 3
 782: PPUSH
 783: LD_INT 3
 785: PPUSH
 786: LD_INT 46
 788: PUSH
 789: LD_INT 45
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: LD_VAR 0 2
 800: PUSH
 801: LD_INT 2
 803: MOD
 804: PUSH
 805: LD_INT 1
 807: PLUS
 808: ARRAY
 809: PPUSH
 810: LD_INT 100
 812: PPUSH
 813: CALL 7737 0 5
// un := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 4
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 854: LD_ADDR_EXP 4
 858: PUSH
 859: LD_EXP 4
 863: PPUSH
 864: LD_EXP 4
 868: PUSH
 869: LD_INT 1
 871: PLUS
 872: PPUSH
 873: LD_VAR 0 3
 877: PPUSH
 878: CALL_OW 1
 882: ST_TO_ADDR
// end ;
 883: GO 774
 885: POP
 886: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 887: LD_ADDR_VAR 0 2
 891: PUSH
 892: DOUBLE
 893: LD_INT 1
 895: DEC
 896: ST_TO_ADDR
 897: LD_INT 4
 899: PUSH
 900: LD_INT 4
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_OWVAR 67
 915: ARRAY
 916: PUSH
 917: FOR_TO
 918: IFFALSE 1028
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 920: LD_INT 24
 922: PPUSH
 923: LD_INT 3
 925: PPUSH
 926: LD_INT 3
 928: PPUSH
 929: LD_INT 46
 931: PUSH
 932: LD_INT 45
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: MOD
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: PPUSH
 953: LD_INT 100
 955: PPUSH
 956: CALL 7737 0 5
// un := CreateVehicle ;
 960: LD_ADDR_VAR 0 3
 964: PUSH
 965: CALL_OW 45
 969: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 970: LD_VAR 0 3
 974: PPUSH
 975: LD_INT 4
 977: PPUSH
 978: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 982: LD_VAR 0 3
 986: PPUSH
 987: LD_INT 5
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 997: LD_ADDR_EXP 5
1001: PUSH
1002: LD_EXP 5
1006: PPUSH
1007: LD_EXP 5
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: PPUSH
1016: LD_VAR 0 3
1020: PPUSH
1021: CALL_OW 1
1025: ST_TO_ADDR
// end ;
1026: GO 917
1028: POP
1029: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1030: LD_ADDR_VAR 0 2
1034: PUSH
1035: DOUBLE
1036: LD_INT 1
1038: DEC
1039: ST_TO_ADDR
1040: LD_INT 4
1042: PUSH
1043: LD_INT 4
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_OWVAR 67
1058: ARRAY
1059: PUSH
1060: FOR_TO
1061: IFFALSE 1171
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1063: LD_INT 24
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: LD_INT 3
1071: PPUSH
1072: LD_INT 46
1074: PUSH
1075: LD_INT 45
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 2
1089: MOD
1090: PUSH
1091: LD_INT 1
1093: PLUS
1094: ARRAY
1095: PPUSH
1096: LD_INT 100
1098: PPUSH
1099: CALL 7737 0 5
// un := CreateVehicle ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: CALL_OW 45
1112: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_INT 6
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1140: LD_ADDR_EXP 6
1144: PUSH
1145: LD_EXP 6
1149: PPUSH
1150: LD_EXP 6
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 1
1168: ST_TO_ADDR
// end ;
1169: GO 1060
1171: POP
1172: POP
// for i := 1 to 2 do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_INT 2
1185: PUSH
1186: FOR_TO
1187: IFFALSE 1235
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1189: LD_INT 22
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: LD_INT 3
1197: PPUSH
1198: LD_INT 52
1200: PPUSH
1201: LD_INT 100
1203: PPUSH
1204: CALL 7737 0 5
// un := CreateVehicle ;
1208: LD_ADDR_VAR 0 3
1212: PUSH
1213: CALL_OW 45
1217: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1218: LD_VAR 0 3
1222: PPUSH
1223: LD_INT 9
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// end ;
1233: GO 1186
1235: POP
1236: POP
// for i := 1 to 3 do
1237: LD_ADDR_VAR 0 2
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_INT 3
1249: PUSH
1250: FOR_TO
1251: IFFALSE 1288
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1253: LD_INT 0
1255: PPUSH
1256: LD_INT 9
1258: PPUSH
1259: LD_INT 8
1261: PPUSH
1262: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1266: CALL_OW 44
1270: PPUSH
1271: LD_INT 91
1273: PPUSH
1274: LD_INT 83
1276: PPUSH
1277: CALL_OW 428
1281: PPUSH
1282: CALL_OW 52
// end ;
1286: GO 1250
1288: POP
1289: POP
// end ;
1290: LD_VAR 0 1
1294: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1295: LD_EXP 8
1299: IFFALSE 1493
1301: GO 1303
1303: DISABLE
1304: LD_INT 0
1306: PPUSH
1307: PPUSH
// begin enable ;
1308: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1309: LD_ADDR_VAR 0 2
1313: PUSH
1314: LD_INT 10
1316: PPUSH
1317: LD_INT 21
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 24
1332: PUSH
1333: LD_INT 1000
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 70
1352: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1353: LD_VAR 0 2
1357: NOT
1358: PUSH
1359: LD_EXP 8
1363: PPUSH
1364: LD_INT 3
1366: PUSH
1367: LD_INT 54
1369: PUSH
1370: EMPTY
1371: LIST
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 72
1381: AND
1382: IFFALSE 1414
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1384: LD_EXP 8
1388: PPUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 54
1394: PUSH
1395: EMPTY
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 72
1406: PPUSH
1407: LD_INT 14
1409: PPUSH
1410: CALL_OW 120
// if tmp then
1414: LD_VAR 0 2
1418: IFFALSE 1493
// begin for i in ruEng do
1420: LD_ADDR_VAR 0 1
1424: PUSH
1425: LD_EXP 8
1429: PUSH
1430: FOR_IN
1431: IFFALSE 1491
// if IsInUnit ( i ) then
1433: LD_VAR 0 1
1437: PPUSH
1438: CALL_OW 310
1442: IFFALSE 1455
// ComExitBuilding ( i ) else
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 122
1453: GO 1489
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1455: LD_VAR 0 1
1459: PPUSH
1460: LD_VAR 0 1
1464: PPUSH
1465: LD_VAR 0 2
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 8294 0 4
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: CALL_OW 130
1489: GO 1430
1491: POP
1492: POP
// end ; end ;
1493: PPOPN 2
1495: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1496: LD_EXP 7
1500: NOT
1501: IFFALSE 1567
1503: GO 1505
1505: DISABLE
1506: LD_INT 0
1508: PPUSH
1509: PPUSH
// begin enable ;
1510: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1511: LD_ADDR_VAR 0 1
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_INT 4
1523: PUSH
1524: LD_INT 5
1526: PUSH
1527: LD_INT 6
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_OWVAR 67
1539: ARRAY
1540: PUSH
1541: FOR_TO
1542: IFFALSE 1565
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1544: LD_INT 50
1546: PPUSH
1547: LD_INT 24
1549: PPUSH
1550: LD_INT 3
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_INT 46
1558: PPUSH
1559: CALL_OW 185
1563: GO 1541
1565: POP
1566: POP
// end ;
1567: PPOPN 2
1569: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1570: LD_EXP 7
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: LD_INT 5
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_OWVAR 67
1593: ARRAY
1594: GREATEREQUAL
1595: IFFALSE 1748
1597: GO 1599
1599: DISABLE
1600: LD_INT 0
1602: PPUSH
1603: PPUSH
// begin enable ;
1604: ENABLE
// tmp := ruForces ;
1605: LD_ADDR_VAR 0 2
1609: PUSH
1610: LD_EXP 7
1614: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1615: LD_INT 0
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: CALL_OW 12
1625: IFFALSE 1646
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_INT 45
1634: PPUSH
1635: CALL_OW 120
// wait ( 0 0$20 ) ;
1639: LD_INT 700
1641: PPUSH
1642: CALL_OW 67
// end ; ruForces := [ ] ;
1646: LD_ADDR_EXP 7
1650: PUSH
1651: EMPTY
1652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1653: LD_INT 35
1655: PPUSH
1656: CALL_OW 67
// for i in tmp do
1660: LD_ADDR_VAR 0 1
1664: PUSH
1665: LD_VAR 0 2
1669: PUSH
1670: FOR_IN
1671: IFFALSE 1739
// if not IsOk ( i ) then
1673: LD_VAR 0 1
1677: PPUSH
1678: CALL_OW 302
1682: NOT
1683: IFFALSE 1703
// tmp := tmp diff i else
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_VAR 0 1
1699: DIFF
1700: ST_TO_ADDR
1701: GO 1737
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1703: LD_VAR 0 1
1707: PPUSH
1708: LD_INT 81
1710: PUSH
1711: LD_INT 3
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PPUSH
1718: CALL_OW 69
1722: PPUSH
1723: LD_VAR 0 1
1727: PPUSH
1728: CALL_OW 74
1732: PPUSH
1733: CALL_OW 115
1737: GO 1670
1739: POP
1740: POP
// until not tmp ;
1741: LD_VAR 0 2
1745: NOT
1746: IFFALSE 1653
// end ;
1748: PPOPN 2
1750: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1751: LD_INT 22
1753: PUSH
1754: LD_INT 7
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 92
1763: PUSH
1764: LD_INT 62
1766: PUSH
1767: LD_INT 83
1769: PUSH
1770: LD_INT 8
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PPUSH
1783: CALL_OW 69
1787: IFFALSE 1807
1789: GO 1791
1791: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1792: LD_EXP 4
1796: PPUSH
1797: LD_INT 69
1799: PPUSH
1800: LD_INT 100
1802: PPUSH
1803: CALL_OW 114
1807: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1808: LD_INT 22
1810: PUSH
1811: LD_INT 7
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 92
1820: PUSH
1821: LD_INT 85
1823: PUSH
1824: LD_INT 89
1826: PUSH
1827: LD_INT 8
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PPUSH
1840: CALL_OW 69
1844: IFFALSE 1864
1846: GO 1848
1848: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1849: LD_EXP 5
1853: PPUSH
1854: LD_INT 72
1856: PPUSH
1857: LD_INT 88
1859: PPUSH
1860: CALL_OW 114
1864: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 92
1877: PUSH
1878: LD_INT 89
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 8
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 69
1901: IFFALSE 1921
1903: GO 1905
1905: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1906: LD_EXP 6
1910: PPUSH
1911: LD_INT 107
1913: PPUSH
1914: LD_INT 26
1916: PPUSH
1917: CALL_OW 114
1921: END
// every 6 6$00 do var i , un , tmp ;
1922: GO 1924
1924: DISABLE
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
// begin enable ;
1930: ENABLE
// tmp := [ ] ;
1931: LD_ADDR_VAR 0 3
1935: PUSH
1936: EMPTY
1937: ST_TO_ADDR
// for i := 1 to 8 do
1938: LD_ADDR_VAR 0 1
1942: PUSH
1943: DOUBLE
1944: LD_INT 1
1946: DEC
1947: ST_TO_ADDR
1948: LD_INT 8
1950: PUSH
1951: FOR_TO
1952: IFFALSE 2095
// begin uc_side := 1 ;
1954: LD_ADDR_OWVAR 20
1958: PUSH
1959: LD_INT 1
1961: ST_TO_ADDR
// uc_nation := 1 ;
1962: LD_ADDR_OWVAR 21
1966: PUSH
1967: LD_INT 1
1969: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1970: LD_INT 5
1972: PPUSH
1973: LD_INT 3
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_INT 6
1981: PUSH
1982: LD_INT 9
1984: PUSH
1985: LD_INT 7
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 1
1997: PUSH
1998: LD_INT 3
2000: MOD
2001: PUSH
2002: LD_INT 1
2004: PLUS
2005: ARRAY
2006: PPUSH
2007: LD_INT 100
2009: PPUSH
2010: CALL 7737 0 5
// un := CreateVehicle ;
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: LD_VAR 0 3
2033: PPUSH
2034: LD_VAR 0 2
2038: PPUSH
2039: CALL 39235 0 2
2043: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 11
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2071: LD_VAR 0 2
2075: PPUSH
2076: LD_INT 16
2078: PPUSH
2079: LD_INT 13
2081: PPUSH
2082: CALL_OW 111
// wait ( 0 0$1 ) ;
2086: LD_INT 35
2088: PPUSH
2089: CALL_OW 67
// end ;
2093: GO 1951
2095: POP
2096: POP
// repeat wait ( 0 0$1 ) ;
2097: LD_INT 35
2099: PPUSH
2100: CALL_OW 67
// for i in tmp do
2104: LD_ADDR_VAR 0 1
2108: PUSH
2109: LD_VAR 0 3
2113: PUSH
2114: FOR_IN
2115: IFFALSE 2183
// if not IsOk ( i ) then
2117: LD_VAR 0 1
2121: PPUSH
2122: CALL_OW 302
2126: NOT
2127: IFFALSE 2147
// tmp := tmp diff i else
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: LD_VAR 0 3
2138: PUSH
2139: LD_VAR 0 1
2143: DIFF
2144: ST_TO_ADDR
2145: GO 2181
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2147: LD_VAR 0 1
2151: PPUSH
2152: LD_INT 81
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PPUSH
2162: CALL_OW 69
2166: PPUSH
2167: LD_VAR 0 1
2171: PPUSH
2172: CALL_OW 74
2176: PPUSH
2177: CALL_OW 115
2181: GO 2114
2183: POP
2184: POP
// until not tmp ;
2185: LD_VAR 0 3
2189: NOT
2190: IFFALSE 2097
// end ;
2192: PPOPN 3
2194: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2195: LD_INT 149
2197: PPUSH
2198: LD_INT 106
2200: PPUSH
2201: CALL_OW 428
2205: NOT
2206: IFFALSE 2369
2208: GO 2210
2210: DISABLE
2211: LD_INT 0
2213: PPUSH
// begin enable ;
2214: ENABLE
// uc_side := 1 ;
2215: LD_ADDR_OWVAR 20
2219: PUSH
2220: LD_INT 1
2222: ST_TO_ADDR
// uc_nation := 1 ;
2223: LD_ADDR_OWVAR 21
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2231: LD_INT 5
2233: PPUSH
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 12
2242: PPUSH
2243: LD_INT 100
2245: PPUSH
2246: CALL 7737 0 5
// un := CreateVehicle ;
2250: LD_ADDR_VAR 0 1
2254: PUSH
2255: CALL_OW 45
2259: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2260: LD_VAR 0 1
2264: PPUSH
2265: LD_INT 149
2267: PPUSH
2268: LD_INT 106
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2278: LD_VAR 0 1
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: LD_INT 100
2288: PPUSH
2289: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2293: LD_VAR 0 1
2297: PPUSH
2298: LD_INT 105
2300: PPUSH
2301: LD_INT 2
2303: PPUSH
2304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2308: LD_INT 35
2310: PPUSH
2311: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2315: LD_VAR 0 1
2319: PPUSH
2320: CALL_OW 301
2324: PUSH
2325: LD_VAR 0 1
2329: PPUSH
2330: CALL_OW 255
2334: PUSH
2335: LD_INT 1
2337: NONEQUAL
2338: OR
2339: IFFALSE 2343
// exit ;
2341: GO 2369
// until IsAt ( un , 105 , 2 ) ;
2343: LD_VAR 0 1
2347: PPUSH
2348: LD_INT 105
2350: PPUSH
2351: LD_INT 2
2353: PPUSH
2354: CALL_OW 307
2358: IFFALSE 2308
// RemoveUnit ( un ) ;
2360: LD_VAR 0 1
2364: PPUSH
2365: CALL_OW 64
// end ; end_of_file
2369: PPOPN 1
2371: END
// export function Action ; begin
2372: LD_INT 0
2374: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2375: LD_EXP 2
2379: PPUSH
2380: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2384: LD_STRING WT-Objectives-1
2386: PPUSH
2387: CALL_OW 337
// end ;
2391: LD_VAR 0 1
2395: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2396: LD_INT 7
2398: PPUSH
2399: LD_EXP 3
2403: PPUSH
2404: CALL_OW 292
2408: IFFALSE 2425
2410: GO 2412
2412: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2413: LD_EXP 3
2417: PPUSH
2418: LD_INT 7
2420: PPUSH
2421: CALL_OW 235
2425: END
// every 2 2$00 do
2426: GO 2428
2428: DISABLE
// PrepareReinforcements ( ) ;
2429: CALL 264 0 0
2433: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 469
2441: NOT
2442: IFFALSE 2457
2444: GO 2446
2446: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2447: LD_INT 8
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL_OW 424
2457: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2458: LD_INT 8
2460: PPUSH
2461: LD_INT 2
2463: PUSH
2464: LD_INT 34
2466: PUSH
2467: LD_INT 12
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 34
2476: PUSH
2477: LD_INT 51
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 70
2493: PUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 469
2501: NOT
2502: AND
2503: IFFALSE 2633
2505: GO 2507
2507: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2508: LD_STRING WT-med-1
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2518: LD_STRING WT-med-2
2520: PPUSH
2521: LD_INT 1
2523: NEG
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_EXP 3
2536: PPUSH
2537: CALL_OW 302
2541: PUSH
2542: LD_EXP 3
2546: PPUSH
2547: CALL_OW 255
2551: MUL
2552: PUSH
2553: LD_INT 7
2555: EQUAL
2556: PUSH
2557: LD_INT 1
2559: PLUS
2560: ARRAY
2561: PPUSH
2562: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2566: LD_STRING WT-med-3
2568: PPUSH
2569: LD_INT 1
2571: NEG
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 7
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 34
2592: PUSH
2593: LD_INT 10
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 69
2608: PUSH
2609: LD_INT 2
2611: GREATEREQUAL
2612: PUSH
2613: LD_INT 1
2615: PLUS
2616: ARRAY
2617: PPUSH
2618: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2622: LD_STRING WT-Main
2624: PPUSH
2625: CALL_OW 102
// YouWin ;
2629: CALL_OW 103
// end ; end_of_file
2633: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2634: LD_VAR 0 1
2638: PUSH
2639: LD_EXP 7
2643: IN
2644: IFFALSE 2662
// ruForces := ruForces diff un ;
2646: LD_ADDR_EXP 7
2650: PUSH
2651: LD_EXP 7
2655: PUSH
2656: LD_VAR 0 1
2660: DIFF
2661: ST_TO_ADDR
// end ;
2662: PPOPN 1
2664: END
// on UnitDestroyed ( un ) do begin if un = allianceHack then
2665: LD_VAR 0 1
2669: PUSH
2670: LD_EXP 2
2674: EQUAL
2675: IFFALSE 2684
// YouLost ( WT-HackLost ) ;
2677: LD_STRING WT-HackLost
2679: PPUSH
2680: CALL_OW 104
// if un in ruForces then
2684: LD_VAR 0 1
2688: PUSH
2689: LD_EXP 7
2693: IN
2694: IFFALSE 2712
// ruForces := ruForces diff un ;
2696: LD_ADDR_EXP 7
2700: PUSH
2701: LD_EXP 7
2705: PUSH
2706: LD_VAR 0 1
2710: DIFF
2711: ST_TO_ADDR
// end ;
2712: PPOPN 1
2714: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 3 then
2715: LD_VAR 0 1
2719: PPUSH
2720: CALL_OW 255
2724: PUSH
2725: LD_INT 3
2727: EQUAL
2728: IFFALSE 2750
// ruForces := Join ( ruForces , vehicle ) ;
2730: LD_ADDR_EXP 7
2734: PUSH
2735: LD_EXP 7
2739: PPUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL 39235 0 2
2749: ST_TO_ADDR
// end ; end_of_file
2750: PPOPN 2
2752: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
2753: LD_INT 0
2755: PPUSH
// ar_miner := 81 ;
2756: LD_ADDR_EXP 16
2760: PUSH
2761: LD_INT 81
2763: ST_TO_ADDR
// ar_crane := 88 ;
2764: LD_ADDR_EXP 15
2768: PUSH
2769: LD_INT 88
2771: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
2772: LD_ADDR_EXP 10
2776: PUSH
2777: LD_INT 89
2779: ST_TO_ADDR
// us_hack := 99 ;
2780: LD_ADDR_EXP 11
2784: PUSH
2785: LD_INT 99
2787: ST_TO_ADDR
// us_artillery := 97 ;
2788: LD_ADDR_EXP 12
2792: PUSH
2793: LD_INT 97
2795: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2796: LD_ADDR_EXP 13
2800: PUSH
2801: LD_INT 91
2803: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
2804: LD_ADDR_EXP 14
2808: PUSH
2809: LD_INT 92
2811: ST_TO_ADDR
// ru_radar := 98 ;
2812: LD_ADDR_EXP 9
2816: PUSH
2817: LD_INT 98
2819: ST_TO_ADDR
// tech_Artillery := 80 ;
2820: LD_ADDR_EXP 17
2824: PUSH
2825: LD_INT 80
2827: ST_TO_ADDR
// tech_RadMat := 81 ;
2828: LD_ADDR_EXP 18
2832: PUSH
2833: LD_INT 81
2835: ST_TO_ADDR
// tech_BasicTools := 82 ;
2836: LD_ADDR_EXP 19
2840: PUSH
2841: LD_INT 82
2843: ST_TO_ADDR
// tech_Cargo := 83 ;
2844: LD_ADDR_EXP 20
2848: PUSH
2849: LD_INT 83
2851: ST_TO_ADDR
// tech_Track := 84 ;
2852: LD_ADDR_EXP 21
2856: PUSH
2857: LD_INT 84
2859: ST_TO_ADDR
// tech_Crane := 85 ;
2860: LD_ADDR_EXP 22
2864: PUSH
2865: LD_INT 85
2867: ST_TO_ADDR
// tech_Bulldozer := 86 ;
2868: LD_ADDR_EXP 23
2872: PUSH
2873: LD_INT 86
2875: ST_TO_ADDR
// tech_Hovercraft := 87 ;
2876: LD_ADDR_EXP 24
2880: PUSH
2881: LD_INT 87
2883: ST_TO_ADDR
// class_mastodont := 31 ;
2884: LD_ADDR_EXP 25
2888: PUSH
2889: LD_INT 31
2891: ST_TO_ADDR
// class_horse := 21 ;
2892: LD_ADDR_EXP 26
2896: PUSH
2897: LD_INT 21
2899: ST_TO_ADDR
// end ;
2900: LD_VAR 0 1
2904: RET
// every 1 do
2905: GO 2907
2907: DISABLE
// InitGlobalVariables ; end_of_file
2908: CALL 2753 0 0
2912: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2913: LD_INT 0
2915: PPUSH
2916: PPUSH
// if exist_mode then
2917: LD_VAR 0 2
2921: IFFALSE 2946
// unit := CreateCharacter ( prefix & ident ) else
2923: LD_ADDR_VAR 0 5
2927: PUSH
2928: LD_VAR 0 3
2932: PUSH
2933: LD_VAR 0 1
2937: STR
2938: PPUSH
2939: CALL_OW 34
2943: ST_TO_ADDR
2944: GO 2961
// unit := NewCharacter ( ident ) ;
2946: LD_ADDR_VAR 0 5
2950: PUSH
2951: LD_VAR 0 1
2955: PPUSH
2956: CALL_OW 25
2960: ST_TO_ADDR
// result := unit ;
2961: LD_ADDR_VAR 0 4
2965: PUSH
2966: LD_VAR 0 5
2970: ST_TO_ADDR
// end ;
2971: LD_VAR 0 4
2975: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
// if not side or not nation then
2980: LD_VAR 0 1
2984: NOT
2985: PUSH
2986: LD_VAR 0 2
2990: NOT
2991: OR
2992: IFFALSE 2996
// exit ;
2994: GO 3760
// case nation of nation_american :
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 1
3003: DOUBLE
3004: EQUAL
3005: IFTRUE 3009
3007: GO 3223
3009: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3010: LD_ADDR_VAR 0 4
3014: PUSH
3015: LD_INT 35
3017: PUSH
3018: LD_INT 45
3020: PUSH
3021: LD_INT 46
3023: PUSH
3024: LD_INT 47
3026: PUSH
3027: LD_INT 82
3029: PUSH
3030: LD_INT 83
3032: PUSH
3033: LD_INT 84
3035: PUSH
3036: LD_INT 85
3038: PUSH
3039: LD_INT 86
3041: PUSH
3042: LD_INT 1
3044: PUSH
3045: LD_INT 2
3047: PUSH
3048: LD_INT 6
3050: PUSH
3051: LD_INT 15
3053: PUSH
3054: LD_INT 16
3056: PUSH
3057: LD_INT 7
3059: PUSH
3060: LD_INT 12
3062: PUSH
3063: LD_INT 13
3065: PUSH
3066: LD_INT 10
3068: PUSH
3069: LD_INT 14
3071: PUSH
3072: LD_INT 20
3074: PUSH
3075: LD_INT 21
3077: PUSH
3078: LD_INT 22
3080: PUSH
3081: LD_INT 25
3083: PUSH
3084: LD_INT 32
3086: PUSH
3087: LD_INT 27
3089: PUSH
3090: LD_INT 36
3092: PUSH
3093: LD_INT 69
3095: PUSH
3096: LD_INT 39
3098: PUSH
3099: LD_INT 34
3101: PUSH
3102: LD_INT 40
3104: PUSH
3105: LD_INT 48
3107: PUSH
3108: LD_INT 49
3110: PUSH
3111: LD_INT 50
3113: PUSH
3114: LD_INT 51
3116: PUSH
3117: LD_INT 52
3119: PUSH
3120: LD_INT 53
3122: PUSH
3123: LD_INT 54
3125: PUSH
3126: LD_INT 55
3128: PUSH
3129: LD_INT 56
3131: PUSH
3132: LD_INT 57
3134: PUSH
3135: LD_INT 58
3137: PUSH
3138: LD_INT 59
3140: PUSH
3141: LD_INT 60
3143: PUSH
3144: LD_INT 61
3146: PUSH
3147: LD_INT 62
3149: PUSH
3150: LD_INT 80
3152: PUSH
3153: LD_INT 82
3155: PUSH
3156: LD_INT 83
3158: PUSH
3159: LD_INT 84
3161: PUSH
3162: LD_INT 85
3164: PUSH
3165: LD_INT 86
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: ST_TO_ADDR
3221: GO 3684
3223: LD_INT 2
3225: DOUBLE
3226: EQUAL
3227: IFTRUE 3231
3229: GO 3453
3231: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
3232: LD_ADDR_VAR 0 4
3236: PUSH
3237: LD_INT 35
3239: PUSH
3240: LD_INT 45
3242: PUSH
3243: LD_INT 46
3245: PUSH
3246: LD_INT 47
3248: PUSH
3249: LD_INT 82
3251: PUSH
3252: LD_INT 83
3254: PUSH
3255: LD_INT 84
3257: PUSH
3258: LD_INT 85
3260: PUSH
3261: LD_INT 87
3263: PUSH
3264: LD_INT 70
3266: PUSH
3267: LD_INT 1
3269: PUSH
3270: LD_INT 11
3272: PUSH
3273: LD_INT 3
3275: PUSH
3276: LD_INT 4
3278: PUSH
3279: LD_INT 5
3281: PUSH
3282: LD_INT 6
3284: PUSH
3285: LD_INT 15
3287: PUSH
3288: LD_INT 18
3290: PUSH
3291: LD_INT 7
3293: PUSH
3294: LD_INT 17
3296: PUSH
3297: LD_INT 8
3299: PUSH
3300: LD_INT 20
3302: PUSH
3303: LD_INT 21
3305: PUSH
3306: LD_INT 22
3308: PUSH
3309: LD_INT 72
3311: PUSH
3312: LD_INT 26
3314: PUSH
3315: LD_INT 69
3317: PUSH
3318: LD_INT 39
3320: PUSH
3321: LD_INT 40
3323: PUSH
3324: LD_INT 41
3326: PUSH
3327: LD_INT 42
3329: PUSH
3330: LD_INT 43
3332: PUSH
3333: LD_INT 48
3335: PUSH
3336: LD_INT 49
3338: PUSH
3339: LD_INT 50
3341: PUSH
3342: LD_INT 51
3344: PUSH
3345: LD_INT 52
3347: PUSH
3348: LD_INT 53
3350: PUSH
3351: LD_INT 54
3353: PUSH
3354: LD_INT 55
3356: PUSH
3357: LD_INT 56
3359: PUSH
3360: LD_INT 60
3362: PUSH
3363: LD_INT 61
3365: PUSH
3366: LD_INT 62
3368: PUSH
3369: LD_INT 66
3371: PUSH
3372: LD_INT 67
3374: PUSH
3375: LD_INT 68
3377: PUSH
3378: LD_INT 81
3380: PUSH
3381: LD_INT 82
3383: PUSH
3384: LD_INT 83
3386: PUSH
3387: LD_INT 84
3389: PUSH
3390: LD_INT 85
3392: PUSH
3393: LD_INT 87
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: ST_TO_ADDR
3451: GO 3684
3453: LD_INT 3
3455: DOUBLE
3456: EQUAL
3457: IFTRUE 3461
3459: GO 3683
3461: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3462: LD_ADDR_VAR 0 4
3466: PUSH
3467: LD_INT 46
3469: PUSH
3470: LD_INT 47
3472: PUSH
3473: LD_INT 1
3475: PUSH
3476: LD_INT 2
3478: PUSH
3479: LD_INT 82
3481: PUSH
3482: LD_INT 83
3484: PUSH
3485: LD_INT 84
3487: PUSH
3488: LD_INT 85
3490: PUSH
3491: LD_INT 86
3493: PUSH
3494: LD_INT 11
3496: PUSH
3497: LD_INT 9
3499: PUSH
3500: LD_INT 20
3502: PUSH
3503: LD_INT 19
3505: PUSH
3506: LD_INT 21
3508: PUSH
3509: LD_INT 24
3511: PUSH
3512: LD_INT 22
3514: PUSH
3515: LD_INT 25
3517: PUSH
3518: LD_INT 28
3520: PUSH
3521: LD_INT 29
3523: PUSH
3524: LD_INT 30
3526: PUSH
3527: LD_INT 31
3529: PUSH
3530: LD_INT 37
3532: PUSH
3533: LD_INT 38
3535: PUSH
3536: LD_INT 32
3538: PUSH
3539: LD_INT 27
3541: PUSH
3542: LD_INT 33
3544: PUSH
3545: LD_INT 69
3547: PUSH
3548: LD_INT 39
3550: PUSH
3551: LD_INT 34
3553: PUSH
3554: LD_INT 40
3556: PUSH
3557: LD_INT 71
3559: PUSH
3560: LD_INT 23
3562: PUSH
3563: LD_INT 44
3565: PUSH
3566: LD_INT 48
3568: PUSH
3569: LD_INT 49
3571: PUSH
3572: LD_INT 50
3574: PUSH
3575: LD_INT 51
3577: PUSH
3578: LD_INT 52
3580: PUSH
3581: LD_INT 53
3583: PUSH
3584: LD_INT 54
3586: PUSH
3587: LD_INT 55
3589: PUSH
3590: LD_INT 56
3592: PUSH
3593: LD_INT 57
3595: PUSH
3596: LD_INT 58
3598: PUSH
3599: LD_INT 59
3601: PUSH
3602: LD_INT 63
3604: PUSH
3605: LD_INT 64
3607: PUSH
3608: LD_INT 65
3610: PUSH
3611: LD_INT 82
3613: PUSH
3614: LD_INT 83
3616: PUSH
3617: LD_INT 84
3619: PUSH
3620: LD_INT 85
3622: PUSH
3623: LD_INT 86
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: ST_TO_ADDR
3681: GO 3684
3683: POP
// if state > - 1 and state < 3 then
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: NEG
3692: GREATER
3693: PUSH
3694: LD_VAR 0 3
3698: PUSH
3699: LD_INT 3
3701: LESS
3702: AND
3703: IFFALSE 3760
// for i in result do
3705: LD_ADDR_VAR 0 5
3709: PUSH
3710: LD_VAR 0 4
3714: PUSH
3715: FOR_IN
3716: IFFALSE 3758
// if GetTech ( i , side ) <> state then
3718: LD_VAR 0 5
3722: PPUSH
3723: LD_VAR 0 1
3727: PPUSH
3728: CALL_OW 321
3732: PUSH
3733: LD_VAR 0 3
3737: NONEQUAL
3738: IFFALSE 3756
// result := result diff i ;
3740: LD_ADDR_VAR 0 4
3744: PUSH
3745: LD_VAR 0 4
3749: PUSH
3750: LD_VAR 0 5
3754: DIFF
3755: ST_TO_ADDR
3756: GO 3715
3758: POP
3759: POP
// end ;
3760: LD_VAR 0 4
3764: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3765: LD_INT 0
3767: PPUSH
3768: PPUSH
3769: PPUSH
// result := true ;
3770: LD_ADDR_VAR 0 3
3774: PUSH
3775: LD_INT 1
3777: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3778: LD_ADDR_VAR 0 5
3782: PUSH
3783: LD_VAR 0 2
3787: PPUSH
3788: CALL_OW 480
3792: ST_TO_ADDR
// if not tmp then
3793: LD_VAR 0 5
3797: NOT
3798: IFFALSE 3802
// exit ;
3800: GO 3851
// for i in tmp do
3802: LD_ADDR_VAR 0 4
3806: PUSH
3807: LD_VAR 0 5
3811: PUSH
3812: FOR_IN
3813: IFFALSE 3849
// if GetTech ( i , side ) <> state_researched then
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_VAR 0 1
3824: PPUSH
3825: CALL_OW 321
3829: PUSH
3830: LD_INT 2
3832: NONEQUAL
3833: IFFALSE 3847
// begin result := false ;
3835: LD_ADDR_VAR 0 3
3839: PUSH
3840: LD_INT 0
3842: ST_TO_ADDR
// exit ;
3843: POP
3844: POP
3845: GO 3851
// end ;
3847: GO 3812
3849: POP
3850: POP
// end ;
3851: LD_VAR 0 3
3855: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3856: LD_INT 0
3858: PPUSH
3859: PPUSH
3860: PPUSH
3861: PPUSH
3862: PPUSH
3863: PPUSH
3864: PPUSH
3865: PPUSH
3866: PPUSH
3867: PPUSH
3868: PPUSH
3869: PPUSH
3870: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3871: LD_VAR 0 1
3875: NOT
3876: PUSH
3877: LD_VAR 0 1
3881: PPUSH
3882: CALL_OW 257
3886: PUSH
3887: LD_INT 9
3889: NONEQUAL
3890: OR
3891: IFFALSE 3895
// exit ;
3893: GO 4468
// side := GetSide ( unit ) ;
3895: LD_ADDR_VAR 0 9
3899: PUSH
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL_OW 255
3909: ST_TO_ADDR
// tech_space := tech_spacanom ;
3910: LD_ADDR_VAR 0 12
3914: PUSH
3915: LD_INT 29
3917: ST_TO_ADDR
// tech_time := tech_taurad ;
3918: LD_ADDR_VAR 0 13
3922: PUSH
3923: LD_INT 28
3925: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3926: LD_ADDR_VAR 0 11
3930: PUSH
3931: LD_VAR 0 1
3935: PPUSH
3936: CALL_OW 310
3940: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3941: LD_VAR 0 11
3945: PPUSH
3946: CALL_OW 247
3950: PUSH
3951: LD_INT 2
3953: EQUAL
3954: IFFALSE 3958
// exit ;
3956: GO 4468
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3958: LD_ADDR_VAR 0 8
3962: PUSH
3963: LD_INT 81
3965: PUSH
3966: LD_VAR 0 9
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: LD_INT 21
3980: PUSH
3981: LD_INT 3
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PPUSH
3996: CALL_OW 69
4000: ST_TO_ADDR
// if not tmp then
4001: LD_VAR 0 8
4005: NOT
4006: IFFALSE 4010
// exit ;
4008: GO 4468
// if in_unit then
4010: LD_VAR 0 11
4014: IFFALSE 4038
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4016: LD_ADDR_VAR 0 10
4020: PUSH
4021: LD_VAR 0 8
4025: PPUSH
4026: LD_VAR 0 11
4030: PPUSH
4031: CALL_OW 74
4035: ST_TO_ADDR
4036: GO 4058
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4038: LD_ADDR_VAR 0 10
4042: PUSH
4043: LD_VAR 0 8
4047: PPUSH
4048: LD_VAR 0 1
4052: PPUSH
4053: CALL_OW 74
4057: ST_TO_ADDR
// if not enemy then
4058: LD_VAR 0 10
4062: NOT
4063: IFFALSE 4067
// exit ;
4065: GO 4468
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4067: LD_VAR 0 11
4071: PUSH
4072: LD_VAR 0 11
4076: PPUSH
4077: LD_VAR 0 10
4081: PPUSH
4082: CALL_OW 296
4086: PUSH
4087: LD_INT 13
4089: GREATER
4090: AND
4091: PUSH
4092: LD_VAR 0 1
4096: PPUSH
4097: LD_VAR 0 10
4101: PPUSH
4102: CALL_OW 296
4106: PUSH
4107: LD_INT 12
4109: GREATER
4110: OR
4111: IFFALSE 4115
// exit ;
4113: GO 4468
// missile := [ 1 ] ;
4115: LD_ADDR_VAR 0 14
4119: PUSH
4120: LD_INT 1
4122: PUSH
4123: EMPTY
4124: LIST
4125: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4126: LD_VAR 0 9
4130: PPUSH
4131: LD_VAR 0 12
4135: PPUSH
4136: CALL_OW 325
4140: IFFALSE 4169
// missile := Insert ( missile , missile + 1 , 2 ) ;
4142: LD_ADDR_VAR 0 14
4146: PUSH
4147: LD_VAR 0 14
4151: PPUSH
4152: LD_VAR 0 14
4156: PUSH
4157: LD_INT 1
4159: PLUS
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: CALL_OW 2
4168: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4169: LD_VAR 0 9
4173: PPUSH
4174: LD_VAR 0 13
4178: PPUSH
4179: CALL_OW 325
4183: PUSH
4184: LD_VAR 0 10
4188: PPUSH
4189: CALL_OW 255
4193: PPUSH
4194: LD_VAR 0 13
4198: PPUSH
4199: CALL_OW 325
4203: NOT
4204: AND
4205: IFFALSE 4234
// missile := Insert ( missile , missile + 1 , 3 ) ;
4207: LD_ADDR_VAR 0 14
4211: PUSH
4212: LD_VAR 0 14
4216: PPUSH
4217: LD_VAR 0 14
4221: PUSH
4222: LD_INT 1
4224: PLUS
4225: PPUSH
4226: LD_INT 3
4228: PPUSH
4229: CALL_OW 2
4233: ST_TO_ADDR
// if missile < 2 then
4234: LD_VAR 0 14
4238: PUSH
4239: LD_INT 2
4241: LESS
4242: IFFALSE 4246
// exit ;
4244: GO 4468
// x := GetX ( enemy ) ;
4246: LD_ADDR_VAR 0 4
4250: PUSH
4251: LD_VAR 0 10
4255: PPUSH
4256: CALL_OW 250
4260: ST_TO_ADDR
// y := GetY ( enemy ) ;
4261: LD_ADDR_VAR 0 5
4265: PUSH
4266: LD_VAR 0 10
4270: PPUSH
4271: CALL_OW 251
4275: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4276: LD_ADDR_VAR 0 6
4280: PUSH
4281: LD_VAR 0 4
4285: PUSH
4286: LD_INT 1
4288: NEG
4289: PPUSH
4290: LD_INT 1
4292: PPUSH
4293: CALL_OW 12
4297: PLUS
4298: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4299: LD_ADDR_VAR 0 7
4303: PUSH
4304: LD_VAR 0 5
4308: PUSH
4309: LD_INT 1
4311: NEG
4312: PPUSH
4313: LD_INT 1
4315: PPUSH
4316: CALL_OW 12
4320: PLUS
4321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4322: LD_VAR 0 6
4326: PPUSH
4327: LD_VAR 0 7
4331: PPUSH
4332: CALL_OW 488
4336: NOT
4337: IFFALSE 4359
// begin _x := x ;
4339: LD_ADDR_VAR 0 6
4343: PUSH
4344: LD_VAR 0 4
4348: ST_TO_ADDR
// _y := y ;
4349: LD_ADDR_VAR 0 7
4353: PUSH
4354: LD_VAR 0 5
4358: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4359: LD_ADDR_VAR 0 3
4363: PUSH
4364: LD_INT 1
4366: PPUSH
4367: LD_VAR 0 14
4371: PPUSH
4372: CALL_OW 12
4376: ST_TO_ADDR
// case i of 1 :
4377: LD_VAR 0 3
4381: PUSH
4382: LD_INT 1
4384: DOUBLE
4385: EQUAL
4386: IFTRUE 4390
4388: GO 4407
4390: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4391: LD_VAR 0 1
4395: PPUSH
4396: LD_VAR 0 10
4400: PPUSH
4401: CALL_OW 115
4405: GO 4468
4407: LD_INT 2
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4437
4415: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4416: LD_VAR 0 1
4420: PPUSH
4421: LD_VAR 0 6
4425: PPUSH
4426: LD_VAR 0 7
4430: PPUSH
4431: CALL_OW 153
4435: GO 4468
4437: LD_INT 3
4439: DOUBLE
4440: EQUAL
4441: IFTRUE 4445
4443: GO 4467
4445: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 6
4455: PPUSH
4456: LD_VAR 0 7
4460: PPUSH
4461: CALL_OW 154
4465: GO 4468
4467: POP
// end ;
4468: LD_VAR 0 2
4472: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4473: LD_INT 0
4475: PPUSH
4476: PPUSH
4477: PPUSH
4478: PPUSH
4479: PPUSH
4480: PPUSH
// if not unit or not building then
4481: LD_VAR 0 1
4485: NOT
4486: PUSH
4487: LD_VAR 0 2
4491: NOT
4492: OR
4493: IFFALSE 4497
// exit ;
4495: GO 4655
// x := GetX ( building ) ;
4497: LD_ADDR_VAR 0 5
4501: PUSH
4502: LD_VAR 0 2
4506: PPUSH
4507: CALL_OW 250
4511: ST_TO_ADDR
// y := GetY ( building ) ;
4512: LD_ADDR_VAR 0 6
4516: PUSH
4517: LD_VAR 0 2
4521: PPUSH
4522: CALL_OW 251
4526: ST_TO_ADDR
// for i = 0 to 5 do
4527: LD_ADDR_VAR 0 4
4531: PUSH
4532: DOUBLE
4533: LD_INT 0
4535: DEC
4536: ST_TO_ADDR
4537: LD_INT 5
4539: PUSH
4540: FOR_TO
4541: IFFALSE 4653
// begin _x := ShiftX ( x , i , 3 ) ;
4543: LD_ADDR_VAR 0 7
4547: PUSH
4548: LD_VAR 0 5
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: LD_INT 3
4560: PPUSH
4561: CALL_OW 272
4565: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4566: LD_ADDR_VAR 0 8
4570: PUSH
4571: LD_VAR 0 6
4575: PPUSH
4576: LD_VAR 0 4
4580: PPUSH
4581: LD_INT 3
4583: PPUSH
4584: CALL_OW 273
4588: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4589: LD_VAR 0 7
4593: PPUSH
4594: LD_VAR 0 8
4598: PPUSH
4599: CALL_OW 488
4603: NOT
4604: IFFALSE 4608
// continue ;
4606: GO 4540
// if HexInfo ( _x , _y ) = 0 then
4608: LD_VAR 0 7
4612: PPUSH
4613: LD_VAR 0 8
4617: PPUSH
4618: CALL_OW 428
4622: PUSH
4623: LD_INT 0
4625: EQUAL
4626: IFFALSE 4651
// begin ComMoveXY ( unit , _x , _y ) ;
4628: LD_VAR 0 1
4632: PPUSH
4633: LD_VAR 0 7
4637: PPUSH
4638: LD_VAR 0 8
4642: PPUSH
4643: CALL_OW 111
// exit ;
4647: POP
4648: POP
4649: GO 4655
// end ; end ;
4651: GO 4540
4653: POP
4654: POP
// end ;
4655: LD_VAR 0 3
4659: RET
// export function ScanBase ( side , base_area ) ; begin
4660: LD_INT 0
4662: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4663: LD_ADDR_VAR 0 3
4667: PUSH
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_INT 81
4675: PUSH
4676: LD_VAR 0 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 70
4689: ST_TO_ADDR
// end ;
4690: LD_VAR 0 3
4694: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
4699: PPUSH
4700: PPUSH
// result := false ;
4701: LD_ADDR_VAR 0 2
4705: PUSH
4706: LD_INT 0
4708: ST_TO_ADDR
// side := GetSide ( unit ) ;
4709: LD_ADDR_VAR 0 3
4713: PUSH
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 255
4723: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4724: LD_ADDR_VAR 0 4
4728: PUSH
4729: LD_VAR 0 1
4733: PPUSH
4734: CALL_OW 248
4738: ST_TO_ADDR
// case nat of 1 :
4739: LD_VAR 0 4
4743: PUSH
4744: LD_INT 1
4746: DOUBLE
4747: EQUAL
4748: IFTRUE 4752
4750: GO 4763
4752: POP
// tech := tech_lassight ; 2 :
4753: LD_ADDR_VAR 0 5
4757: PUSH
4758: LD_INT 12
4760: ST_TO_ADDR
4761: GO 4802
4763: LD_INT 2
4765: DOUBLE
4766: EQUAL
4767: IFTRUE 4771
4769: GO 4782
4771: POP
// tech := tech_mortar ; 3 :
4772: LD_ADDR_VAR 0 5
4776: PUSH
4777: LD_INT 41
4779: ST_TO_ADDR
4780: GO 4802
4782: LD_INT 3
4784: DOUBLE
4785: EQUAL
4786: IFTRUE 4790
4788: GO 4801
4790: POP
// tech := tech_bazooka ; end ;
4791: LD_ADDR_VAR 0 5
4795: PUSH
4796: LD_INT 44
4798: ST_TO_ADDR
4799: GO 4802
4801: POP
// if Researched ( side , tech ) then
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_VAR 0 5
4811: PPUSH
4812: CALL_OW 325
4816: IFFALSE 4843
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4818: LD_ADDR_VAR 0 2
4822: PUSH
4823: LD_INT 5
4825: PUSH
4826: LD_INT 8
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: LD_VAR 0 4
4841: ARRAY
4842: ST_TO_ADDR
// end ;
4843: LD_VAR 0 2
4847: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4848: LD_INT 0
4850: PPUSH
4851: PPUSH
4852: PPUSH
// if not mines then
4853: LD_VAR 0 2
4857: NOT
4858: IFFALSE 4862
// exit ;
4860: GO 5006
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4862: LD_ADDR_VAR 0 5
4866: PUSH
4867: LD_INT 81
4869: PUSH
4870: LD_VAR 0 1
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 3
4881: PUSH
4882: LD_INT 21
4884: PUSH
4885: LD_INT 3
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PPUSH
4900: CALL_OW 69
4904: ST_TO_ADDR
// for i in mines do
4905: LD_ADDR_VAR 0 4
4909: PUSH
4910: LD_VAR 0 2
4914: PUSH
4915: FOR_IN
4916: IFFALSE 5004
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4918: LD_VAR 0 4
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_VAR 0 4
4931: PUSH
4932: LD_INT 2
4934: ARRAY
4935: PPUSH
4936: CALL_OW 458
4940: NOT
4941: IFFALSE 4945
// continue ;
4943: GO 4915
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4945: LD_VAR 0 4
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_VAR 0 4
4958: PUSH
4959: LD_INT 2
4961: ARRAY
4962: PPUSH
4963: CALL_OW 428
4967: PUSH
4968: LD_VAR 0 5
4972: IN
4973: IFFALSE 5002
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4975: LD_VAR 0 4
4979: PUSH
4980: LD_INT 1
4982: ARRAY
4983: PPUSH
4984: LD_VAR 0 4
4988: PUSH
4989: LD_INT 2
4991: ARRAY
4992: PPUSH
4993: LD_VAR 0 1
4997: PPUSH
4998: CALL_OW 456
// end ;
5002: GO 4915
5004: POP
5005: POP
// end ;
5006: LD_VAR 0 3
5010: RET
// export function Count ( array ) ; var i ; begin
5011: LD_INT 0
5013: PPUSH
5014: PPUSH
// result := 0 ;
5015: LD_ADDR_VAR 0 2
5019: PUSH
5020: LD_INT 0
5022: ST_TO_ADDR
// for i in array do
5023: LD_ADDR_VAR 0 3
5027: PUSH
5028: LD_VAR 0 1
5032: PUSH
5033: FOR_IN
5034: IFFALSE 5058
// if i then
5036: LD_VAR 0 3
5040: IFFALSE 5056
// result := result + 1 ;
5042: LD_ADDR_VAR 0 2
5046: PUSH
5047: LD_VAR 0 2
5051: PUSH
5052: LD_INT 1
5054: PLUS
5055: ST_TO_ADDR
5056: GO 5033
5058: POP
5059: POP
// end ;
5060: LD_VAR 0 2
5064: RET
// export function IsEmpty ( building ) ; begin
5065: LD_INT 0
5067: PPUSH
// if not building then
5068: LD_VAR 0 1
5072: NOT
5073: IFFALSE 5077
// exit ;
5075: GO 5120
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5077: LD_ADDR_VAR 0 2
5081: PUSH
5082: LD_VAR 0 1
5086: PUSH
5087: LD_INT 22
5089: PUSH
5090: LD_VAR 0 1
5094: PPUSH
5095: CALL_OW 255
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 58
5106: PUSH
5107: EMPTY
5108: LIST
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PPUSH
5114: CALL_OW 69
5118: IN
5119: ST_TO_ADDR
// end ;
5120: LD_VAR 0 2
5124: RET
// export function IsNotFull ( building ) ; begin
5125: LD_INT 0
5127: PPUSH
// if not building then
5128: LD_VAR 0 1
5132: NOT
5133: IFFALSE 5137
// exit ;
5135: GO 5156
// result := UnitsInside ( building ) < 6 ;
5137: LD_ADDR_VAR 0 2
5141: PUSH
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 313
5151: PUSH
5152: LD_INT 6
5154: LESS
5155: ST_TO_ADDR
// end ;
5156: LD_VAR 0 2
5160: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5161: LD_INT 0
5163: PPUSH
5164: PPUSH
5165: PPUSH
5166: PPUSH
// tmp := [ ] ;
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: EMPTY
5173: ST_TO_ADDR
// list := [ ] ;
5174: LD_ADDR_VAR 0 5
5178: PUSH
5179: EMPTY
5180: ST_TO_ADDR
// for i = 16 to 25 do
5181: LD_ADDR_VAR 0 4
5185: PUSH
5186: DOUBLE
5187: LD_INT 16
5189: DEC
5190: ST_TO_ADDR
5191: LD_INT 25
5193: PUSH
5194: FOR_TO
5195: IFFALSE 5268
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5197: LD_ADDR_VAR 0 3
5201: PUSH
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_VAR 0 1
5214: PPUSH
5215: CALL_OW 255
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 91
5226: PUSH
5227: LD_VAR 0 1
5231: PUSH
5232: LD_INT 6
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 30
5242: PUSH
5243: LD_VAR 0 4
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: PPUSH
5260: CALL_OW 69
5264: ADD
5265: ST_TO_ADDR
5266: GO 5194
5268: POP
5269: POP
// for i = 1 to tmp do
5270: LD_ADDR_VAR 0 4
5274: PUSH
5275: DOUBLE
5276: LD_INT 1
5278: DEC
5279: ST_TO_ADDR
5280: LD_VAR 0 3
5284: PUSH
5285: FOR_TO
5286: IFFALSE 5374
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5288: LD_ADDR_VAR 0 5
5292: PUSH
5293: LD_VAR 0 5
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 4
5307: ARRAY
5308: PPUSH
5309: CALL_OW 266
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: LD_VAR 0 4
5323: ARRAY
5324: PPUSH
5325: CALL_OW 250
5329: PUSH
5330: LD_VAR 0 3
5334: PUSH
5335: LD_VAR 0 4
5339: ARRAY
5340: PPUSH
5341: CALL_OW 251
5345: PUSH
5346: LD_VAR 0 3
5350: PUSH
5351: LD_VAR 0 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 254
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: EMPTY
5369: LIST
5370: ADD
5371: ST_TO_ADDR
5372: GO 5285
5374: POP
5375: POP
// result := list ;
5376: LD_ADDR_VAR 0 2
5380: PUSH
5381: LD_VAR 0 5
5385: ST_TO_ADDR
// end ;
5386: LD_VAR 0 2
5390: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5391: LD_INT 0
5393: PPUSH
5394: PPUSH
5395: PPUSH
5396: PPUSH
5397: PPUSH
5398: PPUSH
5399: PPUSH
// if not factory then
5400: LD_VAR 0 1
5404: NOT
5405: IFFALSE 5409
// exit ;
5407: GO 6002
// if control = control_apeman then
5409: LD_VAR 0 4
5413: PUSH
5414: LD_INT 5
5416: EQUAL
5417: IFFALSE 5526
// begin tmp := UnitsInside ( factory ) ;
5419: LD_ADDR_VAR 0 8
5423: PUSH
5424: LD_VAR 0 1
5428: PPUSH
5429: CALL_OW 313
5433: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5434: LD_VAR 0 8
5438: PPUSH
5439: LD_INT 25
5441: PUSH
5442: LD_INT 12
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PPUSH
5449: CALL_OW 72
5453: NOT
5454: IFFALSE 5464
// control := control_manual ;
5456: LD_ADDR_VAR 0 4
5460: PUSH
5461: LD_INT 1
5463: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5464: LD_ADDR_VAR 0 8
5468: PUSH
5469: LD_VAR 0 1
5473: PPUSH
5474: CALL 5161 0 1
5478: ST_TO_ADDR
// if tmp then
5479: LD_VAR 0 8
5483: IFFALSE 5526
// begin for i in tmp do
5485: LD_ADDR_VAR 0 7
5489: PUSH
5490: LD_VAR 0 8
5494: PUSH
5495: FOR_IN
5496: IFFALSE 5524
// if i [ 1 ] = b_ext_radio then
5498: LD_VAR 0 7
5502: PUSH
5503: LD_INT 1
5505: ARRAY
5506: PUSH
5507: LD_INT 22
5509: EQUAL
5510: IFFALSE 5522
// begin control := control_remote ;
5512: LD_ADDR_VAR 0 4
5516: PUSH
5517: LD_INT 2
5519: ST_TO_ADDR
// break ;
5520: GO 5524
// end ;
5522: GO 5495
5524: POP
5525: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: LD_VAR 0 3
5540: PPUSH
5541: LD_VAR 0 4
5545: PPUSH
5546: LD_VAR 0 5
5550: PPUSH
5551: CALL_OW 448
5555: IFFALSE 5590
// begin result := [ chassis , engine , control , weapon ] ;
5557: LD_ADDR_VAR 0 6
5561: PUSH
5562: LD_VAR 0 2
5566: PUSH
5567: LD_VAR 0 3
5571: PUSH
5572: LD_VAR 0 4
5576: PUSH
5577: LD_VAR 0 5
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: ST_TO_ADDR
// exit ;
5588: GO 6002
// end ; _chassis := AvailableChassisList ( factory ) ;
5590: LD_ADDR_VAR 0 9
5594: PUSH
5595: LD_VAR 0 1
5599: PPUSH
5600: CALL_OW 475
5604: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5605: LD_ADDR_VAR 0 11
5609: PUSH
5610: LD_VAR 0 1
5614: PPUSH
5615: CALL_OW 476
5619: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5620: LD_ADDR_VAR 0 12
5624: PUSH
5625: LD_VAR 0 1
5629: PPUSH
5630: CALL_OW 477
5634: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5635: LD_ADDR_VAR 0 10
5639: PUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 478
5649: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5650: LD_VAR 0 9
5654: NOT
5655: PUSH
5656: LD_VAR 0 11
5660: NOT
5661: OR
5662: PUSH
5663: LD_VAR 0 12
5667: NOT
5668: OR
5669: PUSH
5670: LD_VAR 0 10
5674: NOT
5675: OR
5676: IFFALSE 5711
// begin result := [ chassis , engine , control , weapon ] ;
5678: LD_ADDR_VAR 0 6
5682: PUSH
5683: LD_VAR 0 2
5687: PUSH
5688: LD_VAR 0 3
5692: PUSH
5693: LD_VAR 0 4
5697: PUSH
5698: LD_VAR 0 5
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: ST_TO_ADDR
// exit ;
5709: GO 6002
// end ; if not chassis in _chassis then
5711: LD_VAR 0 2
5715: PUSH
5716: LD_VAR 0 9
5720: IN
5721: NOT
5722: IFFALSE 5748
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5724: LD_ADDR_VAR 0 2
5728: PUSH
5729: LD_VAR 0 9
5733: PUSH
5734: LD_INT 1
5736: PPUSH
5737: LD_VAR 0 9
5741: PPUSH
5742: CALL_OW 12
5746: ARRAY
5747: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5748: LD_VAR 0 2
5752: PPUSH
5753: LD_VAR 0 3
5757: PPUSH
5758: CALL 6007 0 2
5762: NOT
5763: IFFALSE 5822
// repeat engine := _engine [ 1 ] ;
5765: LD_ADDR_VAR 0 3
5769: PUSH
5770: LD_VAR 0 11
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5779: LD_ADDR_VAR 0 11
5783: PUSH
5784: LD_VAR 0 11
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: CALL_OW 3
5796: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5797: LD_VAR 0 2
5801: PPUSH
5802: LD_VAR 0 3
5806: PPUSH
5807: CALL 6007 0 2
5811: PUSH
5812: LD_VAR 0 11
5816: PUSH
5817: EMPTY
5818: EQUAL
5819: OR
5820: IFFALSE 5765
// if not control in _control then
5822: LD_VAR 0 4
5826: PUSH
5827: LD_VAR 0 12
5831: IN
5832: NOT
5833: IFFALSE 5859
// control := _control [ rand ( 1 , _control ) ] ;
5835: LD_ADDR_VAR 0 4
5839: PUSH
5840: LD_VAR 0 12
5844: PUSH
5845: LD_INT 1
5847: PPUSH
5848: LD_VAR 0 12
5852: PPUSH
5853: CALL_OW 12
5857: ARRAY
5858: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 5
5868: PPUSH
5869: CALL 6227 0 2
5873: NOT
5874: IFFALSE 5933
// repeat weapon := _weapon [ 1 ] ;
5876: LD_ADDR_VAR 0 5
5880: PUSH
5881: LD_VAR 0 10
5885: PUSH
5886: LD_INT 1
5888: ARRAY
5889: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5890: LD_ADDR_VAR 0 10
5894: PUSH
5895: LD_VAR 0 10
5899: PPUSH
5900: LD_INT 1
5902: PPUSH
5903: CALL_OW 3
5907: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_VAR 0 5
5917: PPUSH
5918: CALL 6227 0 2
5922: PUSH
5923: LD_VAR 0 10
5927: PUSH
5928: EMPTY
5929: EQUAL
5930: OR
5931: IFFALSE 5876
// result := [ ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: EMPTY
5939: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5940: LD_VAR 0 1
5944: PPUSH
5945: LD_VAR 0 2
5949: PPUSH
5950: LD_VAR 0 3
5954: PPUSH
5955: LD_VAR 0 4
5959: PPUSH
5960: LD_VAR 0 5
5964: PPUSH
5965: CALL_OW 448
5969: IFFALSE 6002
// result := [ chassis , engine , control , weapon ] ;
5971: LD_ADDR_VAR 0 6
5975: PUSH
5976: LD_VAR 0 2
5980: PUSH
5981: LD_VAR 0 3
5985: PUSH
5986: LD_VAR 0 4
5990: PUSH
5991: LD_VAR 0 5
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: ST_TO_ADDR
// end ;
6002: LD_VAR 0 6
6006: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6007: LD_INT 0
6009: PPUSH
// if not chassis or not engine then
6010: LD_VAR 0 1
6014: NOT
6015: PUSH
6016: LD_VAR 0 2
6020: NOT
6021: OR
6022: IFFALSE 6026
// exit ;
6024: GO 6222
// case engine of engine_solar :
6026: LD_VAR 0 2
6030: PUSH
6031: LD_INT 2
6033: DOUBLE
6034: EQUAL
6035: IFTRUE 6039
6037: GO 6077
6039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6040: LD_ADDR_VAR 0 3
6044: PUSH
6045: LD_INT 11
6047: PUSH
6048: LD_INT 12
6050: PUSH
6051: LD_INT 13
6053: PUSH
6054: LD_INT 14
6056: PUSH
6057: LD_INT 1
6059: PUSH
6060: LD_INT 2
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: ST_TO_ADDR
6075: GO 6206
6077: LD_INT 1
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6147
6085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6086: LD_ADDR_VAR 0 3
6090: PUSH
6091: LD_INT 11
6093: PUSH
6094: LD_INT 12
6096: PUSH
6097: LD_INT 13
6099: PUSH
6100: LD_INT 14
6102: PUSH
6103: LD_INT 1
6105: PUSH
6106: LD_INT 2
6108: PUSH
6109: LD_INT 3
6111: PUSH
6112: LD_INT 4
6114: PUSH
6115: LD_INT 5
6117: PUSH
6118: LD_INT 21
6120: PUSH
6121: LD_INT 23
6123: PUSH
6124: LD_INT 22
6126: PUSH
6127: LD_INT 24
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: ST_TO_ADDR
6145: GO 6206
6147: LD_INT 3
6149: DOUBLE
6150: EQUAL
6151: IFTRUE 6155
6153: GO 6205
6155: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6156: LD_ADDR_VAR 0 3
6160: PUSH
6161: LD_INT 13
6163: PUSH
6164: LD_INT 14
6166: PUSH
6167: LD_INT 2
6169: PUSH
6170: LD_INT 3
6172: PUSH
6173: LD_INT 4
6175: PUSH
6176: LD_INT 5
6178: PUSH
6179: LD_INT 21
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_INT 23
6187: PUSH
6188: LD_INT 24
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: ST_TO_ADDR
6203: GO 6206
6205: POP
// result := ( chassis in result ) ;
6206: LD_ADDR_VAR 0 3
6210: PUSH
6211: LD_VAR 0 1
6215: PUSH
6216: LD_VAR 0 3
6220: IN
6221: ST_TO_ADDR
// end ;
6222: LD_VAR 0 3
6226: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6227: LD_INT 0
6229: PPUSH
// if not chassis or not weapon then
6230: LD_VAR 0 1
6234: NOT
6235: PUSH
6236: LD_VAR 0 2
6240: NOT
6241: OR
6242: IFFALSE 6246
// exit ;
6244: GO 7272
// case weapon of us_machine_gun :
6246: LD_VAR 0 2
6250: PUSH
6251: LD_INT 2
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6289
6259: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6260: LD_ADDR_VAR 0 3
6264: PUSH
6265: LD_INT 1
6267: PUSH
6268: LD_INT 2
6270: PUSH
6271: LD_INT 3
6273: PUSH
6274: LD_INT 4
6276: PUSH
6277: LD_INT 5
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: ST_TO_ADDR
6287: GO 7256
6289: LD_INT 3
6291: DOUBLE
6292: EQUAL
6293: IFTRUE 6297
6295: GO 6327
6297: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6298: LD_ADDR_VAR 0 3
6302: PUSH
6303: LD_INT 1
6305: PUSH
6306: LD_INT 2
6308: PUSH
6309: LD_INT 3
6311: PUSH
6312: LD_INT 4
6314: PUSH
6315: LD_INT 5
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: ST_TO_ADDR
6325: GO 7256
6327: LD_INT 11
6329: DOUBLE
6330: EQUAL
6331: IFTRUE 6335
6333: GO 6365
6335: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: LD_INT 2
6346: PUSH
6347: LD_INT 3
6349: PUSH
6350: LD_INT 4
6352: PUSH
6353: LD_INT 5
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: ST_TO_ADDR
6363: GO 7256
6365: LD_INT 4
6367: DOUBLE
6368: EQUAL
6369: IFTRUE 6373
6371: GO 6399
6373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6374: LD_ADDR_VAR 0 3
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 4
6387: PUSH
6388: LD_INT 5
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: ST_TO_ADDR
6397: GO 7256
6399: LD_INT 5
6401: DOUBLE
6402: EQUAL
6403: IFTRUE 6407
6405: GO 6433
6407: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 3
6418: PUSH
6419: LD_INT 4
6421: PUSH
6422: LD_INT 5
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: ST_TO_ADDR
6431: GO 7256
6433: LD_INT 9
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6467
6441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: LD_INT 2
6449: PUSH
6450: LD_INT 3
6452: PUSH
6453: LD_INT 4
6455: PUSH
6456: LD_INT 5
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: ST_TO_ADDR
6465: GO 7256
6467: LD_INT 7
6469: DOUBLE
6470: EQUAL
6471: IFTRUE 6475
6473: GO 6501
6475: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6476: LD_ADDR_VAR 0 3
6480: PUSH
6481: LD_INT 2
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: LD_INT 4
6489: PUSH
6490: LD_INT 5
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: ST_TO_ADDR
6499: GO 7256
6501: LD_INT 12
6503: DOUBLE
6504: EQUAL
6505: IFTRUE 6509
6507: GO 6535
6509: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6510: LD_ADDR_VAR 0 3
6514: PUSH
6515: LD_INT 2
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: LD_INT 4
6523: PUSH
6524: LD_INT 5
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: ST_TO_ADDR
6533: GO 7256
6535: LD_INT 13
6537: DOUBLE
6538: EQUAL
6539: IFTRUE 6543
6541: GO 6569
6543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: LD_INT 2
6551: PUSH
6552: LD_INT 3
6554: PUSH
6555: LD_INT 4
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: ST_TO_ADDR
6567: GO 7256
6569: LD_INT 14
6571: DOUBLE
6572: EQUAL
6573: IFTRUE 6577
6575: GO 6595
6577: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6578: LD_ADDR_VAR 0 3
6582: PUSH
6583: LD_INT 4
6585: PUSH
6586: LD_INT 5
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: ST_TO_ADDR
6593: GO 7256
6595: LD_INT 6
6597: DOUBLE
6598: EQUAL
6599: IFTRUE 6603
6601: GO 6621
6603: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6604: LD_ADDR_VAR 0 3
6608: PUSH
6609: LD_INT 4
6611: PUSH
6612: LD_INT 5
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: ST_TO_ADDR
6619: GO 7256
6621: LD_INT 10
6623: DOUBLE
6624: EQUAL
6625: IFTRUE 6629
6627: GO 6647
6629: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6630: LD_ADDR_VAR 0 3
6634: PUSH
6635: LD_INT 4
6637: PUSH
6638: LD_INT 5
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: ST_TO_ADDR
6645: GO 7256
6647: LD_INT 22
6649: DOUBLE
6650: EQUAL
6651: IFTRUE 6655
6653: GO 6681
6655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6656: LD_ADDR_VAR 0 3
6660: PUSH
6661: LD_INT 11
6663: PUSH
6664: LD_INT 12
6666: PUSH
6667: LD_INT 13
6669: PUSH
6670: LD_INT 14
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: ST_TO_ADDR
6679: GO 7256
6681: LD_INT 23
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6689
6687: GO 6715
6689: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 11
6697: PUSH
6698: LD_INT 12
6700: PUSH
6701: LD_INT 13
6703: PUSH
6704: LD_INT 14
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: ST_TO_ADDR
6713: GO 7256
6715: LD_INT 24
6717: DOUBLE
6718: EQUAL
6719: IFTRUE 6723
6721: GO 6749
6723: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: LD_INT 11
6731: PUSH
6732: LD_INT 12
6734: PUSH
6735: LD_INT 13
6737: PUSH
6738: LD_INT 14
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: ST_TO_ADDR
6747: GO 7256
6749: LD_INT 30
6751: DOUBLE
6752: EQUAL
6753: IFTRUE 6757
6755: GO 6783
6757: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6758: LD_ADDR_VAR 0 3
6762: PUSH
6763: LD_INT 11
6765: PUSH
6766: LD_INT 12
6768: PUSH
6769: LD_INT 13
6771: PUSH
6772: LD_INT 14
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 7256
6783: LD_INT 25
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6809
6791: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6792: LD_ADDR_VAR 0 3
6796: PUSH
6797: LD_INT 13
6799: PUSH
6800: LD_INT 14
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: ST_TO_ADDR
6807: GO 7256
6809: LD_INT 27
6811: DOUBLE
6812: EQUAL
6813: IFTRUE 6817
6815: GO 6835
6817: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: LD_INT 13
6825: PUSH
6826: LD_INT 14
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: ST_TO_ADDR
6833: GO 7256
6835: LD_INT 28
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 6861
6843: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6844: LD_ADDR_VAR 0 3
6848: PUSH
6849: LD_INT 13
6851: PUSH
6852: LD_INT 14
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: ST_TO_ADDR
6859: GO 7256
6861: LD_INT 29
6863: DOUBLE
6864: EQUAL
6865: IFTRUE 6869
6867: GO 6887
6869: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6870: LD_ADDR_VAR 0 3
6874: PUSH
6875: LD_INT 13
6877: PUSH
6878: LD_INT 14
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: ST_TO_ADDR
6885: GO 7256
6887: LD_INT 31
6889: DOUBLE
6890: EQUAL
6891: IFTRUE 6895
6893: GO 6913
6895: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6896: LD_ADDR_VAR 0 3
6900: PUSH
6901: LD_INT 13
6903: PUSH
6904: LD_INT 14
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: ST_TO_ADDR
6911: GO 7256
6913: LD_INT 26
6915: DOUBLE
6916: EQUAL
6917: IFTRUE 6921
6919: GO 6939
6921: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6922: LD_ADDR_VAR 0 3
6926: PUSH
6927: LD_INT 13
6929: PUSH
6930: LD_INT 14
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: ST_TO_ADDR
6937: GO 7256
6939: LD_INT 42
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 6973
6947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6948: LD_ADDR_VAR 0 3
6952: PUSH
6953: LD_INT 21
6955: PUSH
6956: LD_INT 22
6958: PUSH
6959: LD_INT 23
6961: PUSH
6962: LD_INT 24
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: ST_TO_ADDR
6971: GO 7256
6973: LD_INT 43
6975: DOUBLE
6976: EQUAL
6977: IFTRUE 6981
6979: GO 7007
6981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: LD_INT 21
6989: PUSH
6990: LD_INT 22
6992: PUSH
6993: LD_INT 23
6995: PUSH
6996: LD_INT 24
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: ST_TO_ADDR
7005: GO 7256
7007: LD_INT 44
7009: DOUBLE
7010: EQUAL
7011: IFTRUE 7015
7013: GO 7041
7015: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7016: LD_ADDR_VAR 0 3
7020: PUSH
7021: LD_INT 21
7023: PUSH
7024: LD_INT 22
7026: PUSH
7027: LD_INT 23
7029: PUSH
7030: LD_INT 24
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: ST_TO_ADDR
7039: GO 7256
7041: LD_INT 45
7043: DOUBLE
7044: EQUAL
7045: IFTRUE 7049
7047: GO 7075
7049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7050: LD_ADDR_VAR 0 3
7054: PUSH
7055: LD_INT 21
7057: PUSH
7058: LD_INT 22
7060: PUSH
7061: LD_INT 23
7063: PUSH
7064: LD_INT 24
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: ST_TO_ADDR
7073: GO 7256
7075: LD_INT 49
7077: DOUBLE
7078: EQUAL
7079: IFTRUE 7083
7081: GO 7109
7083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7084: LD_ADDR_VAR 0 3
7088: PUSH
7089: LD_INT 21
7091: PUSH
7092: LD_INT 22
7094: PUSH
7095: LD_INT 23
7097: PUSH
7098: LD_INT 24
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: ST_TO_ADDR
7107: GO 7256
7109: LD_INT 51
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7143
7117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_INT 21
7125: PUSH
7126: LD_INT 22
7128: PUSH
7129: LD_INT 23
7131: PUSH
7132: LD_INT 24
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: ST_TO_ADDR
7141: GO 7256
7143: LD_INT 52
7145: DOUBLE
7146: EQUAL
7147: IFTRUE 7151
7149: GO 7177
7151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7152: LD_ADDR_VAR 0 3
7156: PUSH
7157: LD_INT 21
7159: PUSH
7160: LD_INT 22
7162: PUSH
7163: LD_INT 23
7165: PUSH
7166: LD_INT 24
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: ST_TO_ADDR
7175: GO 7256
7177: LD_INT 53
7179: DOUBLE
7180: EQUAL
7181: IFTRUE 7185
7183: GO 7203
7185: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7186: LD_ADDR_VAR 0 3
7190: PUSH
7191: LD_INT 23
7193: PUSH
7194: LD_INT 24
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: ST_TO_ADDR
7201: GO 7256
7203: LD_INT 46
7205: DOUBLE
7206: EQUAL
7207: IFTRUE 7211
7209: GO 7229
7211: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7212: LD_ADDR_VAR 0 3
7216: PUSH
7217: LD_INT 23
7219: PUSH
7220: LD_INT 24
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: ST_TO_ADDR
7227: GO 7256
7229: LD_INT 47
7231: DOUBLE
7232: EQUAL
7233: IFTRUE 7237
7235: GO 7255
7237: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7238: LD_ADDR_VAR 0 3
7242: PUSH
7243: LD_INT 23
7245: PUSH
7246: LD_INT 24
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: ST_TO_ADDR
7253: GO 7256
7255: POP
// result := ( chassis in result ) ;
7256: LD_ADDR_VAR 0 3
7260: PUSH
7261: LD_VAR 0 1
7265: PUSH
7266: LD_VAR 0 3
7270: IN
7271: ST_TO_ADDR
// end ;
7272: LD_VAR 0 3
7276: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7277: LD_INT 0
7279: PPUSH
7280: PPUSH
7281: PPUSH
7282: PPUSH
7283: PPUSH
7284: PPUSH
7285: PPUSH
// result := array ;
7286: LD_ADDR_VAR 0 5
7290: PUSH
7291: LD_VAR 0 1
7295: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7296: LD_VAR 0 1
7300: NOT
7301: PUSH
7302: LD_VAR 0 2
7306: NOT
7307: OR
7308: PUSH
7309: LD_VAR 0 3
7313: NOT
7314: OR
7315: PUSH
7316: LD_VAR 0 2
7320: PUSH
7321: LD_VAR 0 1
7325: GREATER
7326: OR
7327: PUSH
7328: LD_VAR 0 3
7332: PUSH
7333: LD_VAR 0 1
7337: GREATER
7338: OR
7339: IFFALSE 7343
// exit ;
7341: GO 7639
// if direction then
7343: LD_VAR 0 4
7347: IFFALSE 7411
// begin d := 1 ;
7349: LD_ADDR_VAR 0 9
7353: PUSH
7354: LD_INT 1
7356: ST_TO_ADDR
// if i_from > i_to then
7357: LD_VAR 0 2
7361: PUSH
7362: LD_VAR 0 3
7366: GREATER
7367: IFFALSE 7393
// length := ( array - i_from ) + i_to else
7369: LD_ADDR_VAR 0 11
7373: PUSH
7374: LD_VAR 0 1
7378: PUSH
7379: LD_VAR 0 2
7383: MINUS
7384: PUSH
7385: LD_VAR 0 3
7389: PLUS
7390: ST_TO_ADDR
7391: GO 7409
// length := i_to - i_from ;
7393: LD_ADDR_VAR 0 11
7397: PUSH
7398: LD_VAR 0 3
7402: PUSH
7403: LD_VAR 0 2
7407: MINUS
7408: ST_TO_ADDR
// end else
7409: GO 7472
// begin d := - 1 ;
7411: LD_ADDR_VAR 0 9
7415: PUSH
7416: LD_INT 1
7418: NEG
7419: ST_TO_ADDR
// if i_from > i_to then
7420: LD_VAR 0 2
7424: PUSH
7425: LD_VAR 0 3
7429: GREATER
7430: IFFALSE 7450
// length := i_from - i_to else
7432: LD_ADDR_VAR 0 11
7436: PUSH
7437: LD_VAR 0 2
7441: PUSH
7442: LD_VAR 0 3
7446: MINUS
7447: ST_TO_ADDR
7448: GO 7472
// length := ( array - i_to ) + i_from ;
7450: LD_ADDR_VAR 0 11
7454: PUSH
7455: LD_VAR 0 1
7459: PUSH
7460: LD_VAR 0 3
7464: MINUS
7465: PUSH
7466: LD_VAR 0 2
7470: PLUS
7471: ST_TO_ADDR
// end ; if not length then
7472: LD_VAR 0 11
7476: NOT
7477: IFFALSE 7481
// exit ;
7479: GO 7639
// tmp := array ;
7481: LD_ADDR_VAR 0 10
7485: PUSH
7486: LD_VAR 0 1
7490: ST_TO_ADDR
// for i = 1 to length do
7491: LD_ADDR_VAR 0 6
7495: PUSH
7496: DOUBLE
7497: LD_INT 1
7499: DEC
7500: ST_TO_ADDR
7501: LD_VAR 0 11
7505: PUSH
7506: FOR_TO
7507: IFFALSE 7627
// begin for j = 1 to array do
7509: LD_ADDR_VAR 0 7
7513: PUSH
7514: DOUBLE
7515: LD_INT 1
7517: DEC
7518: ST_TO_ADDR
7519: LD_VAR 0 1
7523: PUSH
7524: FOR_TO
7525: IFFALSE 7613
// begin k := j + d ;
7527: LD_ADDR_VAR 0 8
7531: PUSH
7532: LD_VAR 0 7
7536: PUSH
7537: LD_VAR 0 9
7541: PLUS
7542: ST_TO_ADDR
// if k > array then
7543: LD_VAR 0 8
7547: PUSH
7548: LD_VAR 0 1
7552: GREATER
7553: IFFALSE 7563
// k := 1 ;
7555: LD_ADDR_VAR 0 8
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
// if not k then
7563: LD_VAR 0 8
7567: NOT
7568: IFFALSE 7580
// k := array ;
7570: LD_ADDR_VAR 0 8
7574: PUSH
7575: LD_VAR 0 1
7579: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7580: LD_ADDR_VAR 0 10
7584: PUSH
7585: LD_VAR 0 10
7589: PPUSH
7590: LD_VAR 0 8
7594: PPUSH
7595: LD_VAR 0 1
7599: PUSH
7600: LD_VAR 0 7
7604: ARRAY
7605: PPUSH
7606: CALL_OW 1
7610: ST_TO_ADDR
// end ;
7611: GO 7524
7613: POP
7614: POP
// array := tmp ;
7615: LD_ADDR_VAR 0 1
7619: PUSH
7620: LD_VAR 0 10
7624: ST_TO_ADDR
// end ;
7625: GO 7506
7627: POP
7628: POP
// result := array ;
7629: LD_ADDR_VAR 0 5
7633: PUSH
7634: LD_VAR 0 1
7638: ST_TO_ADDR
// end ;
7639: LD_VAR 0 5
7643: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7644: LD_INT 0
7646: PPUSH
7647: PPUSH
// result := 0 ;
7648: LD_ADDR_VAR 0 3
7652: PUSH
7653: LD_INT 0
7655: ST_TO_ADDR
// if not array or not value in array then
7656: LD_VAR 0 1
7660: NOT
7661: PUSH
7662: LD_VAR 0 2
7666: PUSH
7667: LD_VAR 0 1
7671: IN
7672: NOT
7673: OR
7674: IFFALSE 7678
// exit ;
7676: GO 7732
// for i = 1 to array do
7678: LD_ADDR_VAR 0 4
7682: PUSH
7683: DOUBLE
7684: LD_INT 1
7686: DEC
7687: ST_TO_ADDR
7688: LD_VAR 0 1
7692: PUSH
7693: FOR_TO
7694: IFFALSE 7730
// if value = array [ i ] then
7696: LD_VAR 0 2
7700: PUSH
7701: LD_VAR 0 1
7705: PUSH
7706: LD_VAR 0 4
7710: ARRAY
7711: EQUAL
7712: IFFALSE 7728
// begin result := i ;
7714: LD_ADDR_VAR 0 3
7718: PUSH
7719: LD_VAR 0 4
7723: ST_TO_ADDR
// exit ;
7724: POP
7725: POP
7726: GO 7732
// end ;
7728: GO 7693
7730: POP
7731: POP
// end ;
7732: LD_VAR 0 3
7736: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7737: LD_INT 0
7739: PPUSH
// vc_chassis := chassis ;
7740: LD_ADDR_OWVAR 37
7744: PUSH
7745: LD_VAR 0 1
7749: ST_TO_ADDR
// vc_engine := engine ;
7750: LD_ADDR_OWVAR 39
7754: PUSH
7755: LD_VAR 0 2
7759: ST_TO_ADDR
// vc_control := control ;
7760: LD_ADDR_OWVAR 38
7764: PUSH
7765: LD_VAR 0 3
7769: ST_TO_ADDR
// vc_weapon := weapon ;
7770: LD_ADDR_OWVAR 40
7774: PUSH
7775: LD_VAR 0 4
7779: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7780: LD_ADDR_OWVAR 41
7784: PUSH
7785: LD_VAR 0 5
7789: ST_TO_ADDR
// end ;
7790: LD_VAR 0 6
7794: RET
// export function WantPlant ( unit ) ; var task ; begin
7795: LD_INT 0
7797: PPUSH
7798: PPUSH
// result := false ;
7799: LD_ADDR_VAR 0 2
7803: PUSH
7804: LD_INT 0
7806: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7807: LD_ADDR_VAR 0 3
7811: PUSH
7812: LD_VAR 0 1
7816: PPUSH
7817: CALL_OW 437
7821: ST_TO_ADDR
// if task then
7822: LD_VAR 0 3
7826: IFFALSE 7854
// if task [ 1 ] [ 1 ] = p then
7828: LD_VAR 0 3
7832: PUSH
7833: LD_INT 1
7835: ARRAY
7836: PUSH
7837: LD_INT 1
7839: ARRAY
7840: PUSH
7841: LD_STRING p
7843: EQUAL
7844: IFFALSE 7854
// result := true ;
7846: LD_ADDR_VAR 0 2
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// end ;
7854: LD_VAR 0 2
7858: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7859: LD_INT 0
7861: PPUSH
7862: PPUSH
7863: PPUSH
7864: PPUSH
// if pos < 1 then
7865: LD_VAR 0 2
7869: PUSH
7870: LD_INT 1
7872: LESS
7873: IFFALSE 7877
// exit ;
7875: GO 8180
// if pos = 1 then
7877: LD_VAR 0 2
7881: PUSH
7882: LD_INT 1
7884: EQUAL
7885: IFFALSE 7918
// result := Replace ( arr , pos [ 1 ] , value ) else
7887: LD_ADDR_VAR 0 4
7891: PUSH
7892: LD_VAR 0 1
7896: PPUSH
7897: LD_VAR 0 2
7901: PUSH
7902: LD_INT 1
7904: ARRAY
7905: PPUSH
7906: LD_VAR 0 3
7910: PPUSH
7911: CALL_OW 1
7915: ST_TO_ADDR
7916: GO 8180
// begin tmp := arr ;
7918: LD_ADDR_VAR 0 6
7922: PUSH
7923: LD_VAR 0 1
7927: ST_TO_ADDR
// s_arr := [ tmp ] ;
7928: LD_ADDR_VAR 0 7
7932: PUSH
7933: LD_VAR 0 6
7937: PUSH
7938: EMPTY
7939: LIST
7940: ST_TO_ADDR
// for i = 1 to pos - 1 do
7941: LD_ADDR_VAR 0 5
7945: PUSH
7946: DOUBLE
7947: LD_INT 1
7949: DEC
7950: ST_TO_ADDR
7951: LD_VAR 0 2
7955: PUSH
7956: LD_INT 1
7958: MINUS
7959: PUSH
7960: FOR_TO
7961: IFFALSE 8006
// begin tmp := tmp [ pos [ i ] ] ;
7963: LD_ADDR_VAR 0 6
7967: PUSH
7968: LD_VAR 0 6
7972: PUSH
7973: LD_VAR 0 2
7977: PUSH
7978: LD_VAR 0 5
7982: ARRAY
7983: ARRAY
7984: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7985: LD_ADDR_VAR 0 7
7989: PUSH
7990: LD_VAR 0 7
7994: PUSH
7995: LD_VAR 0 6
7999: PUSH
8000: EMPTY
8001: LIST
8002: ADD
8003: ST_TO_ADDR
// end ;
8004: GO 7960
8006: POP
8007: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8008: LD_ADDR_VAR 0 6
8012: PUSH
8013: LD_VAR 0 6
8017: PPUSH
8018: LD_VAR 0 2
8022: PUSH
8023: LD_VAR 0 2
8027: ARRAY
8028: PPUSH
8029: LD_VAR 0 3
8033: PPUSH
8034: CALL_OW 1
8038: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8039: LD_ADDR_VAR 0 7
8043: PUSH
8044: LD_VAR 0 7
8048: PPUSH
8049: LD_VAR 0 7
8053: PPUSH
8054: LD_VAR 0 6
8058: PPUSH
8059: CALL_OW 1
8063: ST_TO_ADDR
// for i = s_arr downto 2 do
8064: LD_ADDR_VAR 0 5
8068: PUSH
8069: DOUBLE
8070: LD_VAR 0 7
8074: INC
8075: ST_TO_ADDR
8076: LD_INT 2
8078: PUSH
8079: FOR_DOWNTO
8080: IFFALSE 8164
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8082: LD_ADDR_VAR 0 6
8086: PUSH
8087: LD_VAR 0 7
8091: PUSH
8092: LD_VAR 0 5
8096: PUSH
8097: LD_INT 1
8099: MINUS
8100: ARRAY
8101: PPUSH
8102: LD_VAR 0 2
8106: PUSH
8107: LD_VAR 0 5
8111: PUSH
8112: LD_INT 1
8114: MINUS
8115: ARRAY
8116: PPUSH
8117: LD_VAR 0 7
8121: PUSH
8122: LD_VAR 0 5
8126: ARRAY
8127: PPUSH
8128: CALL_OW 1
8132: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8133: LD_ADDR_VAR 0 7
8137: PUSH
8138: LD_VAR 0 7
8142: PPUSH
8143: LD_VAR 0 5
8147: PUSH
8148: LD_INT 1
8150: MINUS
8151: PPUSH
8152: LD_VAR 0 6
8156: PPUSH
8157: CALL_OW 1
8161: ST_TO_ADDR
// end ;
8162: GO 8079
8164: POP
8165: POP
// result := s_arr [ 1 ] ;
8166: LD_ADDR_VAR 0 4
8170: PUSH
8171: LD_VAR 0 7
8175: PUSH
8176: LD_INT 1
8178: ARRAY
8179: ST_TO_ADDR
// end ; end ;
8180: LD_VAR 0 4
8184: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8185: LD_INT 0
8187: PPUSH
8188: PPUSH
// if not list then
8189: LD_VAR 0 1
8193: NOT
8194: IFFALSE 8198
// exit ;
8196: GO 8289
// i := list [ pos1 ] ;
8198: LD_ADDR_VAR 0 5
8202: PUSH
8203: LD_VAR 0 1
8207: PUSH
8208: LD_VAR 0 2
8212: ARRAY
8213: ST_TO_ADDR
// if not i then
8214: LD_VAR 0 5
8218: NOT
8219: IFFALSE 8223
// exit ;
8221: GO 8289
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8223: LD_ADDR_VAR 0 1
8227: PUSH
8228: LD_VAR 0 1
8232: PPUSH
8233: LD_VAR 0 2
8237: PPUSH
8238: LD_VAR 0 1
8242: PUSH
8243: LD_VAR 0 3
8247: ARRAY
8248: PPUSH
8249: CALL_OW 1
8253: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8254: LD_ADDR_VAR 0 1
8258: PUSH
8259: LD_VAR 0 1
8263: PPUSH
8264: LD_VAR 0 3
8268: PPUSH
8269: LD_VAR 0 5
8273: PPUSH
8274: CALL_OW 1
8278: ST_TO_ADDR
// result := list ;
8279: LD_ADDR_VAR 0 4
8283: PUSH
8284: LD_VAR 0 1
8288: ST_TO_ADDR
// end ;
8289: LD_VAR 0 4
8293: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8294: LD_INT 0
8296: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8297: LD_ADDR_VAR 0 5
8301: PUSH
8302: LD_VAR 0 1
8306: PPUSH
8307: CALL_OW 250
8311: PPUSH
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 251
8321: PPUSH
8322: LD_VAR 0 2
8326: PPUSH
8327: LD_VAR 0 3
8331: PPUSH
8332: LD_VAR 0 4
8336: PPUSH
8337: CALL 8347 0 5
8341: ST_TO_ADDR
// end ;
8342: LD_VAR 0 5
8346: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8347: LD_INT 0
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
// if not list then
8353: LD_VAR 0 3
8357: NOT
8358: IFFALSE 8362
// exit ;
8360: GO 8750
// result := [ ] ;
8362: LD_ADDR_VAR 0 6
8366: PUSH
8367: EMPTY
8368: ST_TO_ADDR
// for i in list do
8369: LD_ADDR_VAR 0 7
8373: PUSH
8374: LD_VAR 0 3
8378: PUSH
8379: FOR_IN
8380: IFFALSE 8582
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8382: LD_ADDR_VAR 0 9
8386: PUSH
8387: LD_VAR 0 7
8391: PPUSH
8392: LD_VAR 0 1
8396: PPUSH
8397: LD_VAR 0 2
8401: PPUSH
8402: CALL_OW 297
8406: ST_TO_ADDR
// if not result then
8407: LD_VAR 0 6
8411: NOT
8412: IFFALSE 8438
// result := [ [ i , tmp ] ] else
8414: LD_ADDR_VAR 0 6
8418: PUSH
8419: LD_VAR 0 7
8423: PUSH
8424: LD_VAR 0 9
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PUSH
8433: EMPTY
8434: LIST
8435: ST_TO_ADDR
8436: GO 8580
// begin if result [ result ] [ 2 ] < tmp then
8438: LD_VAR 0 6
8442: PUSH
8443: LD_VAR 0 6
8447: ARRAY
8448: PUSH
8449: LD_INT 2
8451: ARRAY
8452: PUSH
8453: LD_VAR 0 9
8457: LESS
8458: IFFALSE 8500
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8460: LD_ADDR_VAR 0 6
8464: PUSH
8465: LD_VAR 0 6
8469: PPUSH
8470: LD_VAR 0 6
8474: PUSH
8475: LD_INT 1
8477: PLUS
8478: PPUSH
8479: LD_VAR 0 7
8483: PUSH
8484: LD_VAR 0 9
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 2
8497: ST_TO_ADDR
8498: GO 8580
// for j = 1 to result do
8500: LD_ADDR_VAR 0 8
8504: PUSH
8505: DOUBLE
8506: LD_INT 1
8508: DEC
8509: ST_TO_ADDR
8510: LD_VAR 0 6
8514: PUSH
8515: FOR_TO
8516: IFFALSE 8578
// begin if tmp < result [ j ] [ 2 ] then
8518: LD_VAR 0 9
8522: PUSH
8523: LD_VAR 0 6
8527: PUSH
8528: LD_VAR 0 8
8532: ARRAY
8533: PUSH
8534: LD_INT 2
8536: ARRAY
8537: LESS
8538: IFFALSE 8576
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8540: LD_ADDR_VAR 0 6
8544: PUSH
8545: LD_VAR 0 6
8549: PPUSH
8550: LD_VAR 0 8
8554: PPUSH
8555: LD_VAR 0 7
8559: PUSH
8560: LD_VAR 0 9
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 2
8573: ST_TO_ADDR
// break ;
8574: GO 8578
// end ; end ;
8576: GO 8515
8578: POP
8579: POP
// end ; end ;
8580: GO 8379
8582: POP
8583: POP
// if result and not asc then
8584: LD_VAR 0 6
8588: PUSH
8589: LD_VAR 0 4
8593: NOT
8594: AND
8595: IFFALSE 8670
// begin tmp := result ;
8597: LD_ADDR_VAR 0 9
8601: PUSH
8602: LD_VAR 0 6
8606: ST_TO_ADDR
// for i = tmp downto 1 do
8607: LD_ADDR_VAR 0 7
8611: PUSH
8612: DOUBLE
8613: LD_VAR 0 9
8617: INC
8618: ST_TO_ADDR
8619: LD_INT 1
8621: PUSH
8622: FOR_DOWNTO
8623: IFFALSE 8668
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8625: LD_ADDR_VAR 0 6
8629: PUSH
8630: LD_VAR 0 6
8634: PPUSH
8635: LD_VAR 0 9
8639: PUSH
8640: LD_VAR 0 7
8644: MINUS
8645: PUSH
8646: LD_INT 1
8648: PLUS
8649: PPUSH
8650: LD_VAR 0 9
8654: PUSH
8655: LD_VAR 0 7
8659: ARRAY
8660: PPUSH
8661: CALL_OW 1
8665: ST_TO_ADDR
8666: GO 8622
8668: POP
8669: POP
// end ; tmp := [ ] ;
8670: LD_ADDR_VAR 0 9
8674: PUSH
8675: EMPTY
8676: ST_TO_ADDR
// if mode then
8677: LD_VAR 0 5
8681: IFFALSE 8750
// begin for i = 1 to result do
8683: LD_ADDR_VAR 0 7
8687: PUSH
8688: DOUBLE
8689: LD_INT 1
8691: DEC
8692: ST_TO_ADDR
8693: LD_VAR 0 6
8697: PUSH
8698: FOR_TO
8699: IFFALSE 8738
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8701: LD_ADDR_VAR 0 9
8705: PUSH
8706: LD_VAR 0 9
8710: PPUSH
8711: LD_VAR 0 7
8715: PPUSH
8716: LD_VAR 0 6
8720: PUSH
8721: LD_VAR 0 7
8725: ARRAY
8726: PUSH
8727: LD_INT 1
8729: ARRAY
8730: PPUSH
8731: CALL_OW 1
8735: ST_TO_ADDR
8736: GO 8698
8738: POP
8739: POP
// result := tmp ;
8740: LD_ADDR_VAR 0 6
8744: PUSH
8745: LD_VAR 0 9
8749: ST_TO_ADDR
// end ; end ;
8750: LD_VAR 0 6
8754: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8755: LD_INT 0
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
8761: PPUSH
8762: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8763: LD_ADDR_VAR 0 5
8767: PUSH
8768: LD_INT 0
8770: PUSH
8771: LD_INT 0
8773: PUSH
8774: LD_INT 0
8776: PUSH
8777: EMPTY
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: ST_TO_ADDR
// if not x or not y then
8785: LD_VAR 0 2
8789: NOT
8790: PUSH
8791: LD_VAR 0 3
8795: NOT
8796: OR
8797: IFFALSE 8801
// exit ;
8799: GO 10447
// if not range then
8801: LD_VAR 0 4
8805: NOT
8806: IFFALSE 8816
// range := 10 ;
8808: LD_ADDR_VAR 0 4
8812: PUSH
8813: LD_INT 10
8815: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8816: LD_ADDR_VAR 0 8
8820: PUSH
8821: LD_INT 81
8823: PUSH
8824: LD_VAR 0 1
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 92
8835: PUSH
8836: LD_VAR 0 2
8840: PUSH
8841: LD_VAR 0 3
8845: PUSH
8846: LD_VAR 0 4
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: PUSH
8857: LD_INT 3
8859: PUSH
8860: LD_INT 21
8862: PUSH
8863: LD_INT 3
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PPUSH
8879: CALL_OW 69
8883: ST_TO_ADDR
// if not tmp then
8884: LD_VAR 0 8
8888: NOT
8889: IFFALSE 8893
// exit ;
8891: GO 10447
// for i in tmp do
8893: LD_ADDR_VAR 0 6
8897: PUSH
8898: LD_VAR 0 8
8902: PUSH
8903: FOR_IN
8904: IFFALSE 10422
// begin points := [ 0 , 0 , 0 ] ;
8906: LD_ADDR_VAR 0 9
8910: PUSH
8911: LD_INT 0
8913: PUSH
8914: LD_INT 0
8916: PUSH
8917: LD_INT 0
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: ST_TO_ADDR
// bpoints := 1 ;
8925: LD_ADDR_VAR 0 10
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8933: LD_VAR 0 6
8937: PPUSH
8938: CALL_OW 247
8942: PUSH
8943: LD_INT 1
8945: DOUBLE
8946: EQUAL
8947: IFTRUE 8951
8949: GO 9529
8951: POP
// begin if GetClass ( i ) = 1 then
8952: LD_VAR 0 6
8956: PPUSH
8957: CALL_OW 257
8961: PUSH
8962: LD_INT 1
8964: EQUAL
8965: IFFALSE 8986
// points := [ 10 , 5 , 3 ] ;
8967: LD_ADDR_VAR 0 9
8971: PUSH
8972: LD_INT 10
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 3
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8986: LD_VAR 0 6
8990: PPUSH
8991: CALL_OW 257
8995: PUSH
8996: LD_INT 2
8998: PUSH
8999: LD_INT 3
9001: PUSH
9002: LD_INT 4
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: IN
9010: IFFALSE 9031
// points := [ 3 , 2 , 1 ] ;
9012: LD_ADDR_VAR 0 9
9016: PUSH
9017: LD_INT 3
9019: PUSH
9020: LD_INT 2
9022: PUSH
9023: LD_INT 1
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: LIST
9030: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9031: LD_VAR 0 6
9035: PPUSH
9036: CALL_OW 257
9040: PUSH
9041: LD_INT 5
9043: EQUAL
9044: IFFALSE 9065
// points := [ 130 , 5 , 2 ] ;
9046: LD_ADDR_VAR 0 9
9050: PUSH
9051: LD_INT 130
9053: PUSH
9054: LD_INT 5
9056: PUSH
9057: LD_INT 2
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9065: LD_VAR 0 6
9069: PPUSH
9070: CALL_OW 257
9074: PUSH
9075: LD_INT 8
9077: EQUAL
9078: IFFALSE 9099
// points := [ 35 , 35 , 30 ] ;
9080: LD_ADDR_VAR 0 9
9084: PUSH
9085: LD_INT 35
9087: PUSH
9088: LD_INT 35
9090: PUSH
9091: LD_INT 30
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9099: LD_VAR 0 6
9103: PPUSH
9104: CALL_OW 257
9108: PUSH
9109: LD_INT 9
9111: EQUAL
9112: IFFALSE 9133
// points := [ 20 , 55 , 40 ] ;
9114: LD_ADDR_VAR 0 9
9118: PUSH
9119: LD_INT 20
9121: PUSH
9122: LD_INT 55
9124: PUSH
9125: LD_INT 40
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9133: LD_VAR 0 6
9137: PPUSH
9138: CALL_OW 257
9142: PUSH
9143: LD_INT 12
9145: PUSH
9146: LD_INT 16
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: IN
9153: IFFALSE 9174
// points := [ 5 , 3 , 2 ] ;
9155: LD_ADDR_VAR 0 9
9159: PUSH
9160: LD_INT 5
9162: PUSH
9163: LD_INT 3
9165: PUSH
9166: LD_INT 2
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9174: LD_VAR 0 6
9178: PPUSH
9179: CALL_OW 257
9183: PUSH
9184: LD_INT 17
9186: EQUAL
9187: IFFALSE 9208
// points := [ 100 , 50 , 75 ] ;
9189: LD_ADDR_VAR 0 9
9193: PUSH
9194: LD_INT 100
9196: PUSH
9197: LD_INT 50
9199: PUSH
9200: LD_INT 75
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: LIST
9207: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9208: LD_VAR 0 6
9212: PPUSH
9213: CALL_OW 257
9217: PUSH
9218: LD_INT 15
9220: EQUAL
9221: IFFALSE 9242
// points := [ 10 , 5 , 3 ] ;
9223: LD_ADDR_VAR 0 9
9227: PUSH
9228: LD_INT 10
9230: PUSH
9231: LD_INT 5
9233: PUSH
9234: LD_INT 3
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9242: LD_VAR 0 6
9246: PPUSH
9247: CALL_OW 257
9251: PUSH
9252: LD_INT 14
9254: EQUAL
9255: IFFALSE 9276
// points := [ 10 , 0 , 0 ] ;
9257: LD_ADDR_VAR 0 9
9261: PUSH
9262: LD_INT 10
9264: PUSH
9265: LD_INT 0
9267: PUSH
9268: LD_INT 0
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: LIST
9275: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9276: LD_VAR 0 6
9280: PPUSH
9281: CALL_OW 257
9285: PUSH
9286: LD_INT 11
9288: EQUAL
9289: IFFALSE 9310
// points := [ 30 , 10 , 5 ] ;
9291: LD_ADDR_VAR 0 9
9295: PUSH
9296: LD_INT 30
9298: PUSH
9299: LD_INT 10
9301: PUSH
9302: LD_INT 5
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9310: LD_VAR 0 1
9314: PPUSH
9315: LD_INT 5
9317: PPUSH
9318: CALL_OW 321
9322: PUSH
9323: LD_INT 2
9325: EQUAL
9326: IFFALSE 9343
// bpoints := bpoints * 1.8 ;
9328: LD_ADDR_VAR 0 10
9332: PUSH
9333: LD_VAR 0 10
9337: PUSH
9338: LD_REAL  1.80000000000000E+0000
9341: MUL
9342: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9343: LD_VAR 0 6
9347: PPUSH
9348: CALL_OW 257
9352: PUSH
9353: LD_INT 1
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: LD_INT 4
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: IN
9371: PUSH
9372: LD_VAR 0 1
9376: PPUSH
9377: LD_INT 51
9379: PPUSH
9380: CALL_OW 321
9384: PUSH
9385: LD_INT 2
9387: EQUAL
9388: AND
9389: IFFALSE 9406
// bpoints := bpoints * 1.2 ;
9391: LD_ADDR_VAR 0 10
9395: PUSH
9396: LD_VAR 0 10
9400: PUSH
9401: LD_REAL  1.20000000000000E+0000
9404: MUL
9405: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9406: LD_VAR 0 6
9410: PPUSH
9411: CALL_OW 257
9415: PUSH
9416: LD_INT 5
9418: PUSH
9419: LD_INT 7
9421: PUSH
9422: LD_INT 9
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: LIST
9429: IN
9430: PUSH
9431: LD_VAR 0 1
9435: PPUSH
9436: LD_INT 52
9438: PPUSH
9439: CALL_OW 321
9443: PUSH
9444: LD_INT 2
9446: EQUAL
9447: AND
9448: IFFALSE 9465
// bpoints := bpoints * 1.5 ;
9450: LD_ADDR_VAR 0 10
9454: PUSH
9455: LD_VAR 0 10
9459: PUSH
9460: LD_REAL  1.50000000000000E+0000
9463: MUL
9464: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9465: LD_VAR 0 1
9469: PPUSH
9470: LD_INT 66
9472: PPUSH
9473: CALL_OW 321
9477: PUSH
9478: LD_INT 2
9480: EQUAL
9481: IFFALSE 9498
// bpoints := bpoints * 1.1 ;
9483: LD_ADDR_VAR 0 10
9487: PUSH
9488: LD_VAR 0 10
9492: PUSH
9493: LD_REAL  1.10000000000000E+0000
9496: MUL
9497: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9498: LD_ADDR_VAR 0 10
9502: PUSH
9503: LD_VAR 0 10
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: CALL_OW 259
9520: PUSH
9521: LD_REAL  1.15000000000000E+0000
9524: MUL
9525: MUL
9526: ST_TO_ADDR
// end ; unit_vehicle :
9527: GO 10351
9529: LD_INT 2
9531: DOUBLE
9532: EQUAL
9533: IFTRUE 9537
9535: GO 10339
9537: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9538: LD_VAR 0 6
9542: PPUSH
9543: CALL_OW 264
9547: PUSH
9548: LD_INT 2
9550: PUSH
9551: LD_INT 42
9553: PUSH
9554: LD_INT 24
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: IN
9562: IFFALSE 9583
// points := [ 25 , 5 , 3 ] ;
9564: LD_ADDR_VAR 0 9
9568: PUSH
9569: LD_INT 25
9571: PUSH
9572: LD_INT 5
9574: PUSH
9575: LD_INT 3
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9583: LD_VAR 0 6
9587: PPUSH
9588: CALL_OW 264
9592: PUSH
9593: LD_INT 4
9595: PUSH
9596: LD_INT 43
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: LIST
9606: IN
9607: IFFALSE 9628
// points := [ 40 , 15 , 5 ] ;
9609: LD_ADDR_VAR 0 9
9613: PUSH
9614: LD_INT 40
9616: PUSH
9617: LD_INT 15
9619: PUSH
9620: LD_INT 5
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9628: LD_VAR 0 6
9632: PPUSH
9633: CALL_OW 264
9637: PUSH
9638: LD_INT 3
9640: PUSH
9641: LD_INT 23
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: IN
9648: IFFALSE 9669
// points := [ 7 , 25 , 8 ] ;
9650: LD_ADDR_VAR 0 9
9654: PUSH
9655: LD_INT 7
9657: PUSH
9658: LD_INT 25
9660: PUSH
9661: LD_INT 8
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9669: LD_VAR 0 6
9673: PPUSH
9674: CALL_OW 264
9678: PUSH
9679: LD_INT 5
9681: PUSH
9682: LD_INT 27
9684: PUSH
9685: LD_INT 44
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: IN
9693: IFFALSE 9714
// points := [ 14 , 50 , 16 ] ;
9695: LD_ADDR_VAR 0 9
9699: PUSH
9700: LD_INT 14
9702: PUSH
9703: LD_INT 50
9705: PUSH
9706: LD_INT 16
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9714: LD_VAR 0 6
9718: PPUSH
9719: CALL_OW 264
9723: PUSH
9724: LD_INT 6
9726: PUSH
9727: LD_INT 46
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: IN
9734: IFFALSE 9755
// points := [ 32 , 120 , 70 ] ;
9736: LD_ADDR_VAR 0 9
9740: PUSH
9741: LD_INT 32
9743: PUSH
9744: LD_INT 120
9746: PUSH
9747: LD_INT 70
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
9755: LD_VAR 0 6
9759: PPUSH
9760: CALL_OW 264
9764: PUSH
9765: LD_INT 7
9767: PUSH
9768: LD_INT 28
9770: PUSH
9771: LD_INT 45
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: IN
9779: IFFALSE 9800
// points := [ 35 , 20 , 45 ] ;
9781: LD_ADDR_VAR 0 9
9785: PUSH
9786: LD_INT 35
9788: PUSH
9789: LD_INT 20
9791: PUSH
9792: LD_INT 45
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: LIST
9799: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9800: LD_VAR 0 6
9804: PPUSH
9805: CALL_OW 264
9809: PUSH
9810: LD_INT 47
9812: PUSH
9813: EMPTY
9814: LIST
9815: IN
9816: IFFALSE 9837
// points := [ 67 , 45 , 75 ] ;
9818: LD_ADDR_VAR 0 9
9822: PUSH
9823: LD_INT 67
9825: PUSH
9826: LD_INT 45
9828: PUSH
9829: LD_INT 75
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: LIST
9836: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9837: LD_VAR 0 6
9841: PPUSH
9842: CALL_OW 264
9846: PUSH
9847: LD_INT 26
9849: PUSH
9850: EMPTY
9851: LIST
9852: IN
9853: IFFALSE 9874
// points := [ 120 , 30 , 80 ] ;
9855: LD_ADDR_VAR 0 9
9859: PUSH
9860: LD_INT 120
9862: PUSH
9863: LD_INT 30
9865: PUSH
9866: LD_INT 80
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9874: LD_VAR 0 6
9878: PPUSH
9879: CALL_OW 264
9883: PUSH
9884: LD_INT 22
9886: PUSH
9887: EMPTY
9888: LIST
9889: IN
9890: IFFALSE 9911
// points := [ 40 , 1 , 1 ] ;
9892: LD_ADDR_VAR 0 9
9896: PUSH
9897: LD_INT 40
9899: PUSH
9900: LD_INT 1
9902: PUSH
9903: LD_INT 1
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9911: LD_VAR 0 6
9915: PPUSH
9916: CALL_OW 264
9920: PUSH
9921: LD_INT 29
9923: PUSH
9924: EMPTY
9925: LIST
9926: IN
9927: IFFALSE 9948
// points := [ 70 , 200 , 400 ] ;
9929: LD_ADDR_VAR 0 9
9933: PUSH
9934: LD_INT 70
9936: PUSH
9937: LD_INT 200
9939: PUSH
9940: LD_INT 400
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9948: LD_VAR 0 6
9952: PPUSH
9953: CALL_OW 264
9957: PUSH
9958: LD_INT 14
9960: PUSH
9961: LD_INT 53
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: IN
9968: IFFALSE 9989
// points := [ 40 , 10 , 20 ] ;
9970: LD_ADDR_VAR 0 9
9974: PUSH
9975: LD_INT 40
9977: PUSH
9978: LD_INT 10
9980: PUSH
9981: LD_INT 20
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9989: LD_VAR 0 6
9993: PPUSH
9994: CALL_OW 264
9998: PUSH
9999: LD_INT 9
10001: PUSH
10002: EMPTY
10003: LIST
10004: IN
10005: IFFALSE 10026
// points := [ 5 , 70 , 20 ] ;
10007: LD_ADDR_VAR 0 9
10011: PUSH
10012: LD_INT 5
10014: PUSH
10015: LD_INT 70
10017: PUSH
10018: LD_INT 20
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10026: LD_VAR 0 6
10030: PPUSH
10031: CALL_OW 264
10035: PUSH
10036: LD_INT 10
10038: PUSH
10039: EMPTY
10040: LIST
10041: IN
10042: IFFALSE 10063
// points := [ 35 , 110 , 70 ] ;
10044: LD_ADDR_VAR 0 9
10048: PUSH
10049: LD_INT 35
10051: PUSH
10052: LD_INT 110
10054: PUSH
10055: LD_INT 70
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10063: LD_VAR 0 6
10067: PPUSH
10068: CALL_OW 265
10072: PUSH
10073: LD_INT 25
10075: EQUAL
10076: IFFALSE 10097
// points := [ 80 , 65 , 100 ] ;
10078: LD_ADDR_VAR 0 9
10082: PUSH
10083: LD_INT 80
10085: PUSH
10086: LD_INT 65
10088: PUSH
10089: LD_INT 100
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: LIST
10096: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10097: LD_VAR 0 6
10101: PPUSH
10102: CALL_OW 263
10106: PUSH
10107: LD_INT 1
10109: EQUAL
10110: IFFALSE 10145
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10112: LD_ADDR_VAR 0 10
10116: PUSH
10117: LD_VAR 0 10
10121: PUSH
10122: LD_VAR 0 6
10126: PPUSH
10127: CALL_OW 311
10131: PPUSH
10132: LD_INT 3
10134: PPUSH
10135: CALL_OW 259
10139: PUSH
10140: LD_INT 4
10142: MUL
10143: MUL
10144: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10145: LD_VAR 0 6
10149: PPUSH
10150: CALL_OW 263
10154: PUSH
10155: LD_INT 2
10157: EQUAL
10158: IFFALSE 10209
// begin j := IsControledBy ( i ) ;
10160: LD_ADDR_VAR 0 7
10164: PUSH
10165: LD_VAR 0 6
10169: PPUSH
10170: CALL_OW 312
10174: ST_TO_ADDR
// if j then
10175: LD_VAR 0 7
10179: IFFALSE 10209
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10181: LD_ADDR_VAR 0 10
10185: PUSH
10186: LD_VAR 0 10
10190: PUSH
10191: LD_VAR 0 7
10195: PPUSH
10196: LD_INT 3
10198: PPUSH
10199: CALL_OW 259
10203: PUSH
10204: LD_INT 3
10206: MUL
10207: MUL
10208: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10209: LD_VAR 0 6
10213: PPUSH
10214: CALL_OW 264
10218: PUSH
10219: LD_INT 5
10221: PUSH
10222: LD_INT 6
10224: PUSH
10225: LD_INT 46
10227: PUSH
10228: LD_INT 44
10230: PUSH
10231: LD_INT 47
10233: PUSH
10234: LD_INT 45
10236: PUSH
10237: LD_INT 28
10239: PUSH
10240: LD_INT 7
10242: PUSH
10243: LD_INT 27
10245: PUSH
10246: LD_INT 29
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: IN
10261: PUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: LD_INT 52
10269: PPUSH
10270: CALL_OW 321
10274: PUSH
10275: LD_INT 2
10277: EQUAL
10278: AND
10279: IFFALSE 10296
// bpoints := bpoints * 1.2 ;
10281: LD_ADDR_VAR 0 10
10285: PUSH
10286: LD_VAR 0 10
10290: PUSH
10291: LD_REAL  1.20000000000000E+0000
10294: MUL
10295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10296: LD_VAR 0 6
10300: PPUSH
10301: CALL_OW 264
10305: PUSH
10306: LD_INT 6
10308: PUSH
10309: LD_INT 46
10311: PUSH
10312: LD_INT 47
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: LIST
10319: IN
10320: IFFALSE 10337
// bpoints := bpoints * 1.2 ;
10322: LD_ADDR_VAR 0 10
10326: PUSH
10327: LD_VAR 0 10
10331: PUSH
10332: LD_REAL  1.20000000000000E+0000
10335: MUL
10336: ST_TO_ADDR
// end ; unit_building :
10337: GO 10351
10339: LD_INT 3
10341: DOUBLE
10342: EQUAL
10343: IFTRUE 10347
10345: GO 10350
10347: POP
// ; end ;
10348: GO 10351
10350: POP
// for j = 1 to 3 do
10351: LD_ADDR_VAR 0 7
10355: PUSH
10356: DOUBLE
10357: LD_INT 1
10359: DEC
10360: ST_TO_ADDR
10361: LD_INT 3
10363: PUSH
10364: FOR_TO
10365: IFFALSE 10418
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10367: LD_ADDR_VAR 0 5
10371: PUSH
10372: LD_VAR 0 5
10376: PPUSH
10377: LD_VAR 0 7
10381: PPUSH
10382: LD_VAR 0 5
10386: PUSH
10387: LD_VAR 0 7
10391: ARRAY
10392: PUSH
10393: LD_VAR 0 9
10397: PUSH
10398: LD_VAR 0 7
10402: ARRAY
10403: PUSH
10404: LD_VAR 0 10
10408: MUL
10409: PLUS
10410: PPUSH
10411: CALL_OW 1
10415: ST_TO_ADDR
10416: GO 10364
10418: POP
10419: POP
// end ;
10420: GO 8903
10422: POP
10423: POP
// result := Replace ( result , 4 , tmp ) ;
10424: LD_ADDR_VAR 0 5
10428: PUSH
10429: LD_VAR 0 5
10433: PPUSH
10434: LD_INT 4
10436: PPUSH
10437: LD_VAR 0 8
10441: PPUSH
10442: CALL_OW 1
10446: ST_TO_ADDR
// end ;
10447: LD_VAR 0 5
10451: RET
// export function DangerAtRange ( unit , range ) ; begin
10452: LD_INT 0
10454: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10455: LD_ADDR_VAR 0 3
10459: PUSH
10460: LD_VAR 0 1
10464: PPUSH
10465: CALL_OW 255
10469: PPUSH
10470: LD_VAR 0 1
10474: PPUSH
10475: CALL_OW 250
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: CALL_OW 251
10489: PPUSH
10490: LD_VAR 0 2
10494: PPUSH
10495: CALL 8755 0 4
10499: ST_TO_ADDR
// end ;
10500: LD_VAR 0 3
10504: RET
// export function DangerInArea ( side , area ) ; begin
10505: LD_INT 0
10507: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10508: LD_ADDR_VAR 0 3
10512: PUSH
10513: LD_VAR 0 2
10517: PPUSH
10518: LD_INT 81
10520: PUSH
10521: LD_VAR 0 1
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 70
10534: ST_TO_ADDR
// end ;
10535: LD_VAR 0 3
10539: RET
// export function IsExtension ( b ) ; begin
10540: LD_INT 0
10542: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10543: LD_ADDR_VAR 0 2
10547: PUSH
10548: LD_VAR 0 1
10552: PUSH
10553: LD_INT 23
10555: PUSH
10556: LD_INT 20
10558: PUSH
10559: LD_INT 22
10561: PUSH
10562: LD_INT 17
10564: PUSH
10565: LD_INT 24
10567: PUSH
10568: LD_INT 21
10570: PUSH
10571: LD_INT 19
10573: PUSH
10574: LD_INT 16
10576: PUSH
10577: LD_INT 25
10579: PUSH
10580: LD_INT 18
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: IN
10595: ST_TO_ADDR
// end ;
10596: LD_VAR 0 2
10600: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10601: LD_INT 0
10603: PPUSH
10604: PPUSH
10605: PPUSH
// result := [ ] ;
10606: LD_ADDR_VAR 0 4
10610: PUSH
10611: EMPTY
10612: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10613: LD_ADDR_VAR 0 5
10617: PUSH
10618: LD_VAR 0 2
10622: PPUSH
10623: LD_INT 21
10625: PUSH
10626: LD_INT 3
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PPUSH
10633: CALL_OW 70
10637: ST_TO_ADDR
// if not tmp then
10638: LD_VAR 0 5
10642: NOT
10643: IFFALSE 10647
// exit ;
10645: GO 10711
// if checkLink then
10647: LD_VAR 0 3
10651: IFFALSE 10701
// begin for i in tmp do
10653: LD_ADDR_VAR 0 6
10657: PUSH
10658: LD_VAR 0 5
10662: PUSH
10663: FOR_IN
10664: IFFALSE 10699
// if GetBase ( i ) <> base then
10666: LD_VAR 0 6
10670: PPUSH
10671: CALL_OW 274
10675: PUSH
10676: LD_VAR 0 1
10680: NONEQUAL
10681: IFFALSE 10697
// ComLinkToBase ( base , i ) ;
10683: LD_VAR 0 1
10687: PPUSH
10688: LD_VAR 0 6
10692: PPUSH
10693: CALL_OW 169
10697: GO 10663
10699: POP
10700: POP
// end ; result := tmp ;
10701: LD_ADDR_VAR 0 4
10705: PUSH
10706: LD_VAR 0 5
10710: ST_TO_ADDR
// end ;
10711: LD_VAR 0 4
10715: RET
// export function ComComplete ( units , b ) ; var i ; begin
10716: LD_INT 0
10718: PPUSH
10719: PPUSH
// if not units then
10720: LD_VAR 0 1
10724: NOT
10725: IFFALSE 10729
// exit ;
10727: GO 10819
// for i in units do
10729: LD_ADDR_VAR 0 4
10733: PUSH
10734: LD_VAR 0 1
10738: PUSH
10739: FOR_IN
10740: IFFALSE 10817
// if BuildingStatus ( b ) = bs_build then
10742: LD_VAR 0 2
10746: PPUSH
10747: CALL_OW 461
10751: PUSH
10752: LD_INT 1
10754: EQUAL
10755: IFFALSE 10815
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10757: LD_VAR 0 4
10761: PPUSH
10762: LD_STRING h
10764: PUSH
10765: LD_VAR 0 2
10769: PPUSH
10770: CALL_OW 250
10774: PUSH
10775: LD_VAR 0 2
10779: PPUSH
10780: CALL_OW 251
10784: PUSH
10785: LD_VAR 0 2
10789: PUSH
10790: LD_INT 0
10792: PUSH
10793: LD_INT 0
10795: PUSH
10796: LD_INT 0
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: EMPTY
10809: LIST
10810: PPUSH
10811: CALL_OW 446
10815: GO 10739
10817: POP
10818: POP
// end ;
10819: LD_VAR 0 3
10823: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10824: LD_INT 0
10826: PPUSH
10827: PPUSH
10828: PPUSH
10829: PPUSH
10830: PPUSH
10831: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
10832: LD_VAR 0 1
10836: NOT
10837: PUSH
10838: LD_VAR 0 1
10842: PPUSH
10843: CALL_OW 263
10847: PUSH
10848: LD_INT 2
10850: EQUAL
10851: NOT
10852: OR
10853: IFFALSE 10857
// exit ;
10855: GO 11173
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10857: LD_ADDR_VAR 0 6
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_VAR 0 1
10869: PPUSH
10870: CALL_OW 255
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 2
10881: PUSH
10882: LD_INT 30
10884: PUSH
10885: LD_INT 36
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 34
10894: PUSH
10895: LD_INT 31
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 69
10915: ST_TO_ADDR
// if not tmp then
10916: LD_VAR 0 6
10920: NOT
10921: IFFALSE 10925
// exit ;
10923: GO 11173
// result := [ ] ;
10925: LD_ADDR_VAR 0 2
10929: PUSH
10930: EMPTY
10931: ST_TO_ADDR
// for i in tmp do
10932: LD_ADDR_VAR 0 3
10936: PUSH
10937: LD_VAR 0 6
10941: PUSH
10942: FOR_IN
10943: IFFALSE 11014
// begin t := UnitsInside ( i ) ;
10945: LD_ADDR_VAR 0 4
10949: PUSH
10950: LD_VAR 0 3
10954: PPUSH
10955: CALL_OW 313
10959: ST_TO_ADDR
// if t then
10960: LD_VAR 0 4
10964: IFFALSE 11012
// for j in t do
10966: LD_ADDR_VAR 0 7
10970: PUSH
10971: LD_VAR 0 4
10975: PUSH
10976: FOR_IN
10977: IFFALSE 11010
// result := Insert ( result , result + 1 , j ) ;
10979: LD_ADDR_VAR 0 2
10983: PUSH
10984: LD_VAR 0 2
10988: PPUSH
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 1
10996: PLUS
10997: PPUSH
10998: LD_VAR 0 7
11002: PPUSH
11003: CALL_OW 2
11007: ST_TO_ADDR
11008: GO 10976
11010: POP
11011: POP
// end ;
11012: GO 10942
11014: POP
11015: POP
// if not result then
11016: LD_VAR 0 2
11020: NOT
11021: IFFALSE 11025
// exit ;
11023: GO 11173
// mech := result [ 1 ] ;
11025: LD_ADDR_VAR 0 5
11029: PUSH
11030: LD_VAR 0 2
11034: PUSH
11035: LD_INT 1
11037: ARRAY
11038: ST_TO_ADDR
// if result > 1 then
11039: LD_VAR 0 2
11043: PUSH
11044: LD_INT 1
11046: GREATER
11047: IFFALSE 11159
// for i = 2 to result do
11049: LD_ADDR_VAR 0 3
11053: PUSH
11054: DOUBLE
11055: LD_INT 2
11057: DEC
11058: ST_TO_ADDR
11059: LD_VAR 0 2
11063: PUSH
11064: FOR_TO
11065: IFFALSE 11157
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11067: LD_ADDR_VAR 0 4
11071: PUSH
11072: LD_VAR 0 2
11076: PUSH
11077: LD_VAR 0 3
11081: ARRAY
11082: PPUSH
11083: LD_INT 3
11085: PPUSH
11086: CALL_OW 259
11090: PUSH
11091: LD_VAR 0 2
11095: PUSH
11096: LD_VAR 0 3
11100: ARRAY
11101: PPUSH
11102: CALL_OW 432
11106: MINUS
11107: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11108: LD_VAR 0 4
11112: PUSH
11113: LD_VAR 0 5
11117: PPUSH
11118: LD_INT 3
11120: PPUSH
11121: CALL_OW 259
11125: PUSH
11126: LD_VAR 0 5
11130: PPUSH
11131: CALL_OW 432
11135: MINUS
11136: GREATEREQUAL
11137: IFFALSE 11155
// mech := result [ i ] ;
11139: LD_ADDR_VAR 0 5
11143: PUSH
11144: LD_VAR 0 2
11148: PUSH
11149: LD_VAR 0 3
11153: ARRAY
11154: ST_TO_ADDR
// end ;
11155: GO 11064
11157: POP
11158: POP
// ComLinkTo ( vehicle , mech ) ;
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_VAR 0 5
11168: PPUSH
11169: CALL_OW 135
// end ;
11173: LD_VAR 0 2
11177: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11178: LD_INT 0
11180: PPUSH
11181: PPUSH
11182: PPUSH
11183: PPUSH
11184: PPUSH
11185: PPUSH
11186: PPUSH
11187: PPUSH
11188: PPUSH
11189: PPUSH
11190: PPUSH
11191: PPUSH
11192: PPUSH
// result := [ ] ;
11193: LD_ADDR_VAR 0 7
11197: PUSH
11198: EMPTY
11199: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11200: LD_VAR 0 1
11204: PPUSH
11205: CALL_OW 266
11209: PUSH
11210: LD_INT 0
11212: PUSH
11213: LD_INT 1
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: IN
11220: NOT
11221: IFFALSE 11225
// exit ;
11223: GO 12859
// if name then
11225: LD_VAR 0 3
11229: IFFALSE 11245
// SetBName ( base_dep , name ) ;
11231: LD_VAR 0 1
11235: PPUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: CALL_OW 500
// base := GetBase ( base_dep ) ;
11245: LD_ADDR_VAR 0 15
11249: PUSH
11250: LD_VAR 0 1
11254: PPUSH
11255: CALL_OW 274
11259: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11260: LD_ADDR_VAR 0 16
11264: PUSH
11265: LD_VAR 0 1
11269: PPUSH
11270: CALL_OW 255
11274: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11275: LD_ADDR_VAR 0 17
11279: PUSH
11280: LD_VAR 0 1
11284: PPUSH
11285: CALL_OW 248
11289: ST_TO_ADDR
// if sources then
11290: LD_VAR 0 5
11294: IFFALSE 11341
// for i = 1 to 3 do
11296: LD_ADDR_VAR 0 8
11300: PUSH
11301: DOUBLE
11302: LD_INT 1
11304: DEC
11305: ST_TO_ADDR
11306: LD_INT 3
11308: PUSH
11309: FOR_TO
11310: IFFALSE 11339
// AddResourceType ( base , i , sources [ i ] ) ;
11312: LD_VAR 0 15
11316: PPUSH
11317: LD_VAR 0 8
11321: PPUSH
11322: LD_VAR 0 5
11326: PUSH
11327: LD_VAR 0 8
11331: ARRAY
11332: PPUSH
11333: CALL_OW 276
11337: GO 11309
11339: POP
11340: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11341: LD_ADDR_VAR 0 18
11345: PUSH
11346: LD_VAR 0 15
11350: PPUSH
11351: LD_VAR 0 2
11355: PPUSH
11356: LD_INT 1
11358: PPUSH
11359: CALL 10601 0 3
11363: ST_TO_ADDR
// InitHc ;
11364: CALL_OW 19
// InitUc ;
11368: CALL_OW 18
// uc_side := side ;
11372: LD_ADDR_OWVAR 20
11376: PUSH
11377: LD_VAR 0 16
11381: ST_TO_ADDR
// uc_nation := nation ;
11382: LD_ADDR_OWVAR 21
11386: PUSH
11387: LD_VAR 0 17
11391: ST_TO_ADDR
// if buildings then
11392: LD_VAR 0 18
11396: IFFALSE 12718
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11398: LD_ADDR_VAR 0 19
11402: PUSH
11403: LD_VAR 0 18
11407: PPUSH
11408: LD_INT 2
11410: PUSH
11411: LD_INT 30
11413: PUSH
11414: LD_INT 29
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: LD_INT 30
11423: PUSH
11424: LD_INT 30
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: PPUSH
11436: CALL_OW 72
11440: ST_TO_ADDR
// if tmp then
11441: LD_VAR 0 19
11445: IFFALSE 11493
// for i in tmp do
11447: LD_ADDR_VAR 0 8
11451: PUSH
11452: LD_VAR 0 19
11456: PUSH
11457: FOR_IN
11458: IFFALSE 11491
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11460: LD_VAR 0 8
11464: PPUSH
11465: CALL_OW 250
11469: PPUSH
11470: LD_VAR 0 8
11474: PPUSH
11475: CALL_OW 251
11479: PPUSH
11480: LD_VAR 0 16
11484: PPUSH
11485: CALL_OW 441
11489: GO 11457
11491: POP
11492: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11493: LD_VAR 0 18
11497: PPUSH
11498: LD_INT 2
11500: PUSH
11501: LD_INT 30
11503: PUSH
11504: LD_INT 32
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 30
11513: PUSH
11514: LD_INT 33
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: PPUSH
11526: CALL_OW 72
11530: IFFALSE 11618
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11532: LD_ADDR_VAR 0 8
11536: PUSH
11537: LD_VAR 0 18
11541: PPUSH
11542: LD_INT 2
11544: PUSH
11545: LD_INT 30
11547: PUSH
11548: LD_INT 32
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 30
11557: PUSH
11558: LD_INT 33
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: PPUSH
11570: CALL_OW 72
11574: PUSH
11575: FOR_IN
11576: IFFALSE 11616
// begin if not GetBWeapon ( i ) then
11578: LD_VAR 0 8
11582: PPUSH
11583: CALL_OW 269
11587: NOT
11588: IFFALSE 11614
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11590: LD_VAR 0 8
11594: PPUSH
11595: LD_VAR 0 8
11599: PPUSH
11600: LD_VAR 0 2
11604: PPUSH
11605: CALL 12864 0 2
11609: PPUSH
11610: CALL_OW 431
// end ;
11614: GO 11575
11616: POP
11617: POP
// end ; for i = 1 to personel do
11618: LD_ADDR_VAR 0 8
11622: PUSH
11623: DOUBLE
11624: LD_INT 1
11626: DEC
11627: ST_TO_ADDR
11628: LD_VAR 0 6
11632: PUSH
11633: FOR_TO
11634: IFFALSE 12698
// begin if i > 4 then
11636: LD_VAR 0 8
11640: PUSH
11641: LD_INT 4
11643: GREATER
11644: IFFALSE 11648
// break ;
11646: GO 12698
// case i of 1 :
11648: LD_VAR 0 8
11652: PUSH
11653: LD_INT 1
11655: DOUBLE
11656: EQUAL
11657: IFTRUE 11661
11659: GO 11741
11661: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11662: LD_ADDR_VAR 0 12
11666: PUSH
11667: LD_VAR 0 18
11671: PPUSH
11672: LD_INT 22
11674: PUSH
11675: LD_VAR 0 16
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 58
11686: PUSH
11687: EMPTY
11688: LIST
11689: PUSH
11690: LD_INT 2
11692: PUSH
11693: LD_INT 30
11695: PUSH
11696: LD_INT 32
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 30
11705: PUSH
11706: LD_INT 4
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: LD_INT 5
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 72
11738: ST_TO_ADDR
11739: GO 11963
11741: LD_INT 2
11743: DOUBLE
11744: EQUAL
11745: IFTRUE 11749
11747: GO 11811
11749: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11750: LD_ADDR_VAR 0 12
11754: PUSH
11755: LD_VAR 0 18
11759: PPUSH
11760: LD_INT 22
11762: PUSH
11763: LD_VAR 0 16
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 2
11774: PUSH
11775: LD_INT 30
11777: PUSH
11778: LD_INT 0
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 30
11787: PUSH
11788: LD_INT 1
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 72
11808: ST_TO_ADDR
11809: GO 11963
11811: LD_INT 3
11813: DOUBLE
11814: EQUAL
11815: IFTRUE 11819
11817: GO 11881
11819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11820: LD_ADDR_VAR 0 12
11824: PUSH
11825: LD_VAR 0 18
11829: PPUSH
11830: LD_INT 22
11832: PUSH
11833: LD_VAR 0 16
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: LD_INT 30
11847: PUSH
11848: LD_INT 2
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: LD_INT 30
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PPUSH
11874: CALL_OW 72
11878: ST_TO_ADDR
11879: GO 11963
11881: LD_INT 4
11883: DOUBLE
11884: EQUAL
11885: IFTRUE 11889
11887: GO 11962
11889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11890: LD_ADDR_VAR 0 12
11894: PUSH
11895: LD_VAR 0 18
11899: PPUSH
11900: LD_INT 22
11902: PUSH
11903: LD_VAR 0 16
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: LD_INT 30
11917: PUSH
11918: LD_INT 6
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 30
11927: PUSH
11928: LD_INT 7
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 30
11937: PUSH
11938: LD_INT 8
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 72
11959: ST_TO_ADDR
11960: GO 11963
11962: POP
// if i = 1 then
11963: LD_VAR 0 8
11967: PUSH
11968: LD_INT 1
11970: EQUAL
11971: IFFALSE 12082
// begin tmp := [ ] ;
11973: LD_ADDR_VAR 0 19
11977: PUSH
11978: EMPTY
11979: ST_TO_ADDR
// for j in f do
11980: LD_ADDR_VAR 0 9
11984: PUSH
11985: LD_VAR 0 12
11989: PUSH
11990: FOR_IN
11991: IFFALSE 12064
// if GetBType ( j ) = b_bunker then
11993: LD_VAR 0 9
11997: PPUSH
11998: CALL_OW 266
12002: PUSH
12003: LD_INT 32
12005: EQUAL
12006: IFFALSE 12033
// tmp := Insert ( tmp , 1 , j ) else
12008: LD_ADDR_VAR 0 19
12012: PUSH
12013: LD_VAR 0 19
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: LD_VAR 0 9
12025: PPUSH
12026: CALL_OW 2
12030: ST_TO_ADDR
12031: GO 12062
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12033: LD_ADDR_VAR 0 19
12037: PUSH
12038: LD_VAR 0 19
12042: PPUSH
12043: LD_VAR 0 19
12047: PUSH
12048: LD_INT 1
12050: PLUS
12051: PPUSH
12052: LD_VAR 0 9
12056: PPUSH
12057: CALL_OW 2
12061: ST_TO_ADDR
12062: GO 11990
12064: POP
12065: POP
// if tmp then
12066: LD_VAR 0 19
12070: IFFALSE 12082
// f := tmp ;
12072: LD_ADDR_VAR 0 12
12076: PUSH
12077: LD_VAR 0 19
12081: ST_TO_ADDR
// end ; x := personel [ i ] ;
12082: LD_ADDR_VAR 0 13
12086: PUSH
12087: LD_VAR 0 6
12091: PUSH
12092: LD_VAR 0 8
12096: ARRAY
12097: ST_TO_ADDR
// if x = - 1 then
12098: LD_VAR 0 13
12102: PUSH
12103: LD_INT 1
12105: NEG
12106: EQUAL
12107: IFFALSE 12316
// begin for j in f do
12109: LD_ADDR_VAR 0 9
12113: PUSH
12114: LD_VAR 0 12
12118: PUSH
12119: FOR_IN
12120: IFFALSE 12312
// repeat InitHc ;
12122: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12126: LD_VAR 0 9
12130: PPUSH
12131: CALL_OW 266
12135: PUSH
12136: LD_INT 5
12138: EQUAL
12139: IFFALSE 12209
// begin if UnitsInside ( j ) < 3 then
12141: LD_VAR 0 9
12145: PPUSH
12146: CALL_OW 313
12150: PUSH
12151: LD_INT 3
12153: LESS
12154: IFFALSE 12190
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12156: LD_INT 0
12158: PPUSH
12159: LD_INT 5
12161: PUSH
12162: LD_INT 8
12164: PUSH
12165: LD_INT 9
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: LD_VAR 0 17
12177: ARRAY
12178: PPUSH
12179: LD_VAR 0 4
12183: PPUSH
12184: CALL_OW 380
12188: GO 12207
// PrepareHuman ( false , i , skill ) ;
12190: LD_INT 0
12192: PPUSH
12193: LD_VAR 0 8
12197: PPUSH
12198: LD_VAR 0 4
12202: PPUSH
12203: CALL_OW 380
// end else
12207: GO 12226
// PrepareHuman ( false , i , skill ) ;
12209: LD_INT 0
12211: PPUSH
12212: LD_VAR 0 8
12216: PPUSH
12217: LD_VAR 0 4
12221: PPUSH
12222: CALL_OW 380
// un := CreateHuman ;
12226: LD_ADDR_VAR 0 14
12230: PUSH
12231: CALL_OW 44
12235: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12236: LD_ADDR_VAR 0 7
12240: PUSH
12241: LD_VAR 0 7
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: LD_VAR 0 14
12253: PPUSH
12254: CALL_OW 2
12258: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12259: LD_VAR 0 14
12263: PPUSH
12264: LD_VAR 0 9
12268: PPUSH
12269: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12273: LD_VAR 0 9
12277: PPUSH
12278: CALL_OW 313
12282: PUSH
12283: LD_INT 6
12285: EQUAL
12286: PUSH
12287: LD_VAR 0 9
12291: PPUSH
12292: CALL_OW 266
12296: PUSH
12297: LD_INT 32
12299: PUSH
12300: LD_INT 31
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: IN
12307: OR
12308: IFFALSE 12122
12310: GO 12119
12312: POP
12313: POP
// end else
12314: GO 12696
// for j = 1 to x do
12316: LD_ADDR_VAR 0 9
12320: PUSH
12321: DOUBLE
12322: LD_INT 1
12324: DEC
12325: ST_TO_ADDR
12326: LD_VAR 0 13
12330: PUSH
12331: FOR_TO
12332: IFFALSE 12694
// begin InitHc ;
12334: CALL_OW 19
// if not f then
12338: LD_VAR 0 12
12342: NOT
12343: IFFALSE 12432
// begin PrepareHuman ( false , i , skill ) ;
12345: LD_INT 0
12347: PPUSH
12348: LD_VAR 0 8
12352: PPUSH
12353: LD_VAR 0 4
12357: PPUSH
12358: CALL_OW 380
// un := CreateHuman ;
12362: LD_ADDR_VAR 0 14
12366: PUSH
12367: CALL_OW 44
12371: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12372: LD_ADDR_VAR 0 7
12376: PUSH
12377: LD_VAR 0 7
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: LD_VAR 0 14
12389: PPUSH
12390: CALL_OW 2
12394: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12395: LD_VAR 0 14
12399: PPUSH
12400: LD_VAR 0 1
12404: PPUSH
12405: CALL_OW 250
12409: PPUSH
12410: LD_VAR 0 1
12414: PPUSH
12415: CALL_OW 251
12419: PPUSH
12420: LD_INT 10
12422: PPUSH
12423: LD_INT 0
12425: PPUSH
12426: CALL_OW 50
// continue ;
12430: GO 12331
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12432: LD_VAR 0 12
12436: PUSH
12437: LD_INT 1
12439: ARRAY
12440: PPUSH
12441: CALL_OW 313
12445: PUSH
12446: LD_VAR 0 12
12450: PUSH
12451: LD_INT 1
12453: ARRAY
12454: PPUSH
12455: CALL_OW 266
12459: PUSH
12460: LD_INT 32
12462: PUSH
12463: LD_INT 31
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: IN
12470: AND
12471: PUSH
12472: LD_VAR 0 12
12476: PUSH
12477: LD_INT 1
12479: ARRAY
12480: PPUSH
12481: CALL_OW 313
12485: PUSH
12486: LD_INT 6
12488: EQUAL
12489: OR
12490: IFFALSE 12510
// f := Delete ( f , 1 ) ;
12492: LD_ADDR_VAR 0 12
12496: PUSH
12497: LD_VAR 0 12
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 3
12509: ST_TO_ADDR
// if not f then
12510: LD_VAR 0 12
12514: NOT
12515: IFFALSE 12533
// begin x := x + 2 ;
12517: LD_ADDR_VAR 0 13
12521: PUSH
12522: LD_VAR 0 13
12526: PUSH
12527: LD_INT 2
12529: PLUS
12530: ST_TO_ADDR
// continue ;
12531: GO 12331
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12533: LD_VAR 0 12
12537: PUSH
12538: LD_INT 1
12540: ARRAY
12541: PPUSH
12542: CALL_OW 266
12546: PUSH
12547: LD_INT 5
12549: EQUAL
12550: IFFALSE 12624
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12552: LD_VAR 0 12
12556: PUSH
12557: LD_INT 1
12559: ARRAY
12560: PPUSH
12561: CALL_OW 313
12565: PUSH
12566: LD_INT 3
12568: LESS
12569: IFFALSE 12605
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12571: LD_INT 0
12573: PPUSH
12574: LD_INT 5
12576: PUSH
12577: LD_INT 8
12579: PUSH
12580: LD_INT 9
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_VAR 0 17
12592: ARRAY
12593: PPUSH
12594: LD_VAR 0 4
12598: PPUSH
12599: CALL_OW 380
12603: GO 12622
// PrepareHuman ( false , i , skill ) ;
12605: LD_INT 0
12607: PPUSH
12608: LD_VAR 0 8
12612: PPUSH
12613: LD_VAR 0 4
12617: PPUSH
12618: CALL_OW 380
// end else
12622: GO 12641
// PrepareHuman ( false , i , skill ) ;
12624: LD_INT 0
12626: PPUSH
12627: LD_VAR 0 8
12631: PPUSH
12632: LD_VAR 0 4
12636: PPUSH
12637: CALL_OW 380
// un := CreateHuman ;
12641: LD_ADDR_VAR 0 14
12645: PUSH
12646: CALL_OW 44
12650: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12651: LD_ADDR_VAR 0 7
12655: PUSH
12656: LD_VAR 0 7
12660: PPUSH
12661: LD_INT 1
12663: PPUSH
12664: LD_VAR 0 14
12668: PPUSH
12669: CALL_OW 2
12673: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12674: LD_VAR 0 14
12678: PPUSH
12679: LD_VAR 0 12
12683: PUSH
12684: LD_INT 1
12686: ARRAY
12687: PPUSH
12688: CALL_OW 52
// end ;
12692: GO 12331
12694: POP
12695: POP
// end ;
12696: GO 11633
12698: POP
12699: POP
// result := result ^ buildings ;
12700: LD_ADDR_VAR 0 7
12704: PUSH
12705: LD_VAR 0 7
12709: PUSH
12710: LD_VAR 0 18
12714: ADD
12715: ST_TO_ADDR
// end else
12716: GO 12859
// begin for i = 1 to personel do
12718: LD_ADDR_VAR 0 8
12722: PUSH
12723: DOUBLE
12724: LD_INT 1
12726: DEC
12727: ST_TO_ADDR
12728: LD_VAR 0 6
12732: PUSH
12733: FOR_TO
12734: IFFALSE 12857
// begin if i > 4 then
12736: LD_VAR 0 8
12740: PUSH
12741: LD_INT 4
12743: GREATER
12744: IFFALSE 12748
// break ;
12746: GO 12857
// x := personel [ i ] ;
12748: LD_ADDR_VAR 0 13
12752: PUSH
12753: LD_VAR 0 6
12757: PUSH
12758: LD_VAR 0 8
12762: ARRAY
12763: ST_TO_ADDR
// if x = - 1 then
12764: LD_VAR 0 13
12768: PUSH
12769: LD_INT 1
12771: NEG
12772: EQUAL
12773: IFFALSE 12777
// continue ;
12775: GO 12733
// PrepareHuman ( false , i , skill ) ;
12777: LD_INT 0
12779: PPUSH
12780: LD_VAR 0 8
12784: PPUSH
12785: LD_VAR 0 4
12789: PPUSH
12790: CALL_OW 380
// un := CreateHuman ;
12794: LD_ADDR_VAR 0 14
12798: PUSH
12799: CALL_OW 44
12803: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12804: LD_VAR 0 14
12808: PPUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 250
12818: PPUSH
12819: LD_VAR 0 1
12823: PPUSH
12824: CALL_OW 251
12828: PPUSH
12829: LD_INT 10
12831: PPUSH
12832: LD_INT 0
12834: PPUSH
12835: CALL_OW 50
// result := result ^ un ;
12839: LD_ADDR_VAR 0 7
12843: PUSH
12844: LD_VAR 0 7
12848: PUSH
12849: LD_VAR 0 14
12853: ADD
12854: ST_TO_ADDR
// end ;
12855: GO 12733
12857: POP
12858: POP
// end ; end ;
12859: LD_VAR 0 7
12863: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
12868: PPUSH
12869: PPUSH
12870: PPUSH
12871: PPUSH
12872: PPUSH
12873: PPUSH
12874: PPUSH
12875: PPUSH
12876: PPUSH
12877: PPUSH
12878: PPUSH
12879: PPUSH
12880: PPUSH
12881: PPUSH
// result := false ;
12882: LD_ADDR_VAR 0 3
12886: PUSH
12887: LD_INT 0
12889: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12890: LD_VAR 0 1
12894: NOT
12895: PUSH
12896: LD_VAR 0 1
12900: PPUSH
12901: CALL_OW 266
12905: PUSH
12906: LD_INT 32
12908: PUSH
12909: LD_INT 33
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: IN
12916: NOT
12917: OR
12918: IFFALSE 12922
// exit ;
12920: GO 14061
// nat := GetNation ( tower ) ;
12922: LD_ADDR_VAR 0 12
12926: PUSH
12927: LD_VAR 0 1
12931: PPUSH
12932: CALL_OW 248
12936: ST_TO_ADDR
// side := GetSide ( tower ) ;
12937: LD_ADDR_VAR 0 16
12941: PUSH
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 255
12951: ST_TO_ADDR
// x := GetX ( tower ) ;
12952: LD_ADDR_VAR 0 10
12956: PUSH
12957: LD_VAR 0 1
12961: PPUSH
12962: CALL_OW 250
12966: ST_TO_ADDR
// y := GetY ( tower ) ;
12967: LD_ADDR_VAR 0 11
12971: PUSH
12972: LD_VAR 0 1
12976: PPUSH
12977: CALL_OW 251
12981: ST_TO_ADDR
// if not x or not y then
12982: LD_VAR 0 10
12986: NOT
12987: PUSH
12988: LD_VAR 0 11
12992: NOT
12993: OR
12994: IFFALSE 12998
// exit ;
12996: GO 14061
// weapon := 0 ;
12998: LD_ADDR_VAR 0 18
13002: PUSH
13003: LD_INT 0
13005: ST_TO_ADDR
// fac_list := [ ] ;
13006: LD_ADDR_VAR 0 17
13010: PUSH
13011: EMPTY
13012: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13013: LD_ADDR_VAR 0 6
13017: PUSH
13018: LD_VAR 0 1
13022: PPUSH
13023: CALL_OW 274
13027: PPUSH
13028: LD_VAR 0 2
13032: PPUSH
13033: LD_INT 0
13035: PPUSH
13036: CALL 10601 0 3
13040: PPUSH
13041: LD_INT 30
13043: PUSH
13044: LD_INT 3
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PPUSH
13051: CALL_OW 72
13055: ST_TO_ADDR
// if not factories then
13056: LD_VAR 0 6
13060: NOT
13061: IFFALSE 13065
// exit ;
13063: GO 14061
// for i in factories do
13065: LD_ADDR_VAR 0 8
13069: PUSH
13070: LD_VAR 0 6
13074: PUSH
13075: FOR_IN
13076: IFFALSE 13101
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13078: LD_ADDR_VAR 0 17
13082: PUSH
13083: LD_VAR 0 17
13087: PUSH
13088: LD_VAR 0 8
13092: PPUSH
13093: CALL_OW 478
13097: UNION
13098: ST_TO_ADDR
13099: GO 13075
13101: POP
13102: POP
// if not fac_list then
13103: LD_VAR 0 17
13107: NOT
13108: IFFALSE 13112
// exit ;
13110: GO 14061
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13112: LD_ADDR_VAR 0 5
13116: PUSH
13117: LD_INT 4
13119: PUSH
13120: LD_INT 5
13122: PUSH
13123: LD_INT 9
13125: PUSH
13126: LD_INT 10
13128: PUSH
13129: LD_INT 6
13131: PUSH
13132: LD_INT 7
13134: PUSH
13135: LD_INT 11
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 27
13149: PUSH
13150: LD_INT 28
13152: PUSH
13153: LD_INT 26
13155: PUSH
13156: LD_INT 30
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 43
13167: PUSH
13168: LD_INT 44
13170: PUSH
13171: LD_INT 46
13173: PUSH
13174: LD_INT 45
13176: PUSH
13177: LD_INT 47
13179: PUSH
13180: LD_INT 49
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_VAR 0 12
13200: ARRAY
13201: ST_TO_ADDR
// for i in list do
13202: LD_ADDR_VAR 0 8
13206: PUSH
13207: LD_VAR 0 5
13211: PUSH
13212: FOR_IN
13213: IFFALSE 13246
// if not i in fac_list then
13215: LD_VAR 0 8
13219: PUSH
13220: LD_VAR 0 17
13224: IN
13225: NOT
13226: IFFALSE 13244
// list := list diff i ;
13228: LD_ADDR_VAR 0 5
13232: PUSH
13233: LD_VAR 0 5
13237: PUSH
13238: LD_VAR 0 8
13242: DIFF
13243: ST_TO_ADDR
13244: GO 13212
13246: POP
13247: POP
// if not list then
13248: LD_VAR 0 5
13252: NOT
13253: IFFALSE 13257
// exit ;
13255: GO 14061
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13257: LD_VAR 0 12
13261: PUSH
13262: LD_INT 3
13264: EQUAL
13265: PUSH
13266: LD_INT 49
13268: PUSH
13269: LD_VAR 0 5
13273: IN
13274: AND
13275: PUSH
13276: LD_INT 31
13278: PPUSH
13279: LD_VAR 0 16
13283: PPUSH
13284: CALL_OW 321
13288: PUSH
13289: LD_INT 2
13291: EQUAL
13292: AND
13293: IFFALSE 13353
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13295: LD_INT 22
13297: PUSH
13298: LD_VAR 0 16
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 35
13309: PUSH
13310: LD_INT 49
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 91
13319: PUSH
13320: LD_VAR 0 1
13324: PUSH
13325: LD_INT 10
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: PPUSH
13338: CALL_OW 69
13342: NOT
13343: IFFALSE 13353
// weapon := ru_time_lapser ;
13345: LD_ADDR_VAR 0 18
13349: PUSH
13350: LD_INT 49
13352: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13353: LD_VAR 0 12
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: LD_INT 2
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: IN
13368: PUSH
13369: LD_INT 11
13371: PUSH
13372: LD_VAR 0 5
13376: IN
13377: PUSH
13378: LD_INT 30
13380: PUSH
13381: LD_VAR 0 5
13385: IN
13386: OR
13387: AND
13388: PUSH
13389: LD_INT 6
13391: PPUSH
13392: LD_VAR 0 16
13396: PPUSH
13397: CALL_OW 321
13401: PUSH
13402: LD_INT 2
13404: EQUAL
13405: AND
13406: IFFALSE 13571
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13408: LD_INT 22
13410: PUSH
13411: LD_VAR 0 16
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 2
13422: PUSH
13423: LD_INT 35
13425: PUSH
13426: LD_INT 11
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 35
13435: PUSH
13436: LD_INT 30
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 91
13450: PUSH
13451: LD_VAR 0 1
13455: PUSH
13456: LD_INT 18
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 69
13473: NOT
13474: PUSH
13475: LD_INT 22
13477: PUSH
13478: LD_VAR 0 16
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 2
13489: PUSH
13490: LD_INT 30
13492: PUSH
13493: LD_INT 32
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 30
13502: PUSH
13503: LD_INT 33
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 91
13517: PUSH
13518: LD_VAR 0 1
13522: PUSH
13523: LD_INT 12
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: EMPTY
13537: LIST
13538: PPUSH
13539: CALL_OW 69
13543: PUSH
13544: LD_INT 2
13546: GREATER
13547: AND
13548: IFFALSE 13571
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13550: LD_ADDR_VAR 0 18
13554: PUSH
13555: LD_INT 11
13557: PUSH
13558: LD_INT 30
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_VAR 0 12
13569: ARRAY
13570: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13571: LD_VAR 0 18
13575: NOT
13576: PUSH
13577: LD_INT 40
13579: PPUSH
13580: LD_VAR 0 16
13584: PPUSH
13585: CALL_OW 321
13589: PUSH
13590: LD_INT 2
13592: EQUAL
13593: AND
13594: PUSH
13595: LD_INT 7
13597: PUSH
13598: LD_VAR 0 5
13602: IN
13603: PUSH
13604: LD_INT 28
13606: PUSH
13607: LD_VAR 0 5
13611: IN
13612: OR
13613: PUSH
13614: LD_INT 45
13616: PUSH
13617: LD_VAR 0 5
13621: IN
13622: OR
13623: AND
13624: IFFALSE 13878
// begin hex := GetHexInfo ( x , y ) ;
13626: LD_ADDR_VAR 0 4
13630: PUSH
13631: LD_VAR 0 10
13635: PPUSH
13636: LD_VAR 0 11
13640: PPUSH
13641: CALL_OW 546
13645: ST_TO_ADDR
// if hex [ 1 ] then
13646: LD_VAR 0 4
13650: PUSH
13651: LD_INT 1
13653: ARRAY
13654: IFFALSE 13658
// exit ;
13656: GO 14061
// height := hex [ 2 ] ;
13658: LD_ADDR_VAR 0 15
13662: PUSH
13663: LD_VAR 0 4
13667: PUSH
13668: LD_INT 2
13670: ARRAY
13671: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13672: LD_ADDR_VAR 0 14
13676: PUSH
13677: LD_INT 0
13679: PUSH
13680: LD_INT 2
13682: PUSH
13683: LD_INT 3
13685: PUSH
13686: LD_INT 5
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: ST_TO_ADDR
// for i in tmp do
13695: LD_ADDR_VAR 0 8
13699: PUSH
13700: LD_VAR 0 14
13704: PUSH
13705: FOR_IN
13706: IFFALSE 13876
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13708: LD_ADDR_VAR 0 9
13712: PUSH
13713: LD_VAR 0 10
13717: PPUSH
13718: LD_VAR 0 8
13722: PPUSH
13723: LD_INT 5
13725: PPUSH
13726: CALL_OW 272
13730: PUSH
13731: LD_VAR 0 11
13735: PPUSH
13736: LD_VAR 0 8
13740: PPUSH
13741: LD_INT 5
13743: PPUSH
13744: CALL_OW 273
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13753: LD_VAR 0 9
13757: PUSH
13758: LD_INT 1
13760: ARRAY
13761: PPUSH
13762: LD_VAR 0 9
13766: PUSH
13767: LD_INT 2
13769: ARRAY
13770: PPUSH
13771: CALL_OW 488
13775: IFFALSE 13874
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13777: LD_ADDR_VAR 0 4
13781: PUSH
13782: LD_VAR 0 9
13786: PUSH
13787: LD_INT 1
13789: ARRAY
13790: PPUSH
13791: LD_VAR 0 9
13795: PUSH
13796: LD_INT 2
13798: ARRAY
13799: PPUSH
13800: CALL_OW 546
13804: ST_TO_ADDR
// if hex [ 1 ] then
13805: LD_VAR 0 4
13809: PUSH
13810: LD_INT 1
13812: ARRAY
13813: IFFALSE 13817
// continue ;
13815: GO 13705
// h := hex [ 2 ] ;
13817: LD_ADDR_VAR 0 13
13821: PUSH
13822: LD_VAR 0 4
13826: PUSH
13827: LD_INT 2
13829: ARRAY
13830: ST_TO_ADDR
// if h + 7 < height then
13831: LD_VAR 0 13
13835: PUSH
13836: LD_INT 7
13838: PLUS
13839: PUSH
13840: LD_VAR 0 15
13844: LESS
13845: IFFALSE 13874
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13847: LD_ADDR_VAR 0 18
13851: PUSH
13852: LD_INT 7
13854: PUSH
13855: LD_INT 28
13857: PUSH
13858: LD_INT 45
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: PUSH
13866: LD_VAR 0 12
13870: ARRAY
13871: ST_TO_ADDR
// break ;
13872: GO 13876
// end ; end ; end ;
13874: GO 13705
13876: POP
13877: POP
// end ; if not weapon then
13878: LD_VAR 0 18
13882: NOT
13883: IFFALSE 13943
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13885: LD_ADDR_VAR 0 5
13889: PUSH
13890: LD_VAR 0 5
13894: PUSH
13895: LD_INT 11
13897: PUSH
13898: LD_INT 30
13900: PUSH
13901: LD_INT 49
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: DIFF
13909: ST_TO_ADDR
// if not list then
13910: LD_VAR 0 5
13914: NOT
13915: IFFALSE 13919
// exit ;
13917: GO 14061
// weapon := list [ rand ( 1 , list ) ] ;
13919: LD_ADDR_VAR 0 18
13923: PUSH
13924: LD_VAR 0 5
13928: PUSH
13929: LD_INT 1
13931: PPUSH
13932: LD_VAR 0 5
13936: PPUSH
13937: CALL_OW 12
13941: ARRAY
13942: ST_TO_ADDR
// end ; if weapon then
13943: LD_VAR 0 18
13947: IFFALSE 14061
// begin tmp := CostOfWeapon ( weapon ) ;
13949: LD_ADDR_VAR 0 14
13953: PUSH
13954: LD_VAR 0 18
13958: PPUSH
13959: CALL_OW 451
13963: ST_TO_ADDR
// j := GetBase ( tower ) ;
13964: LD_ADDR_VAR 0 9
13968: PUSH
13969: LD_VAR 0 1
13973: PPUSH
13974: CALL_OW 274
13978: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13979: LD_VAR 0 9
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: CALL_OW 275
13991: PUSH
13992: LD_VAR 0 14
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: GREATEREQUAL
14001: PUSH
14002: LD_VAR 0 9
14006: PPUSH
14007: LD_INT 2
14009: PPUSH
14010: CALL_OW 275
14014: PUSH
14015: LD_VAR 0 14
14019: PUSH
14020: LD_INT 2
14022: ARRAY
14023: GREATEREQUAL
14024: AND
14025: PUSH
14026: LD_VAR 0 9
14030: PPUSH
14031: LD_INT 3
14033: PPUSH
14034: CALL_OW 275
14038: PUSH
14039: LD_VAR 0 14
14043: PUSH
14044: LD_INT 3
14046: ARRAY
14047: GREATEREQUAL
14048: AND
14049: IFFALSE 14061
// result := weapon ;
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: LD_VAR 0 18
14060: ST_TO_ADDR
// end ; end ;
14061: LD_VAR 0 3
14065: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14066: LD_INT 0
14068: PPUSH
14069: PPUSH
// result := true ;
14070: LD_ADDR_VAR 0 3
14074: PUSH
14075: LD_INT 1
14077: ST_TO_ADDR
// if array1 = array2 then
14078: LD_VAR 0 1
14082: PUSH
14083: LD_VAR 0 2
14087: EQUAL
14088: IFFALSE 14148
// begin for i = 1 to array1 do
14090: LD_ADDR_VAR 0 4
14094: PUSH
14095: DOUBLE
14096: LD_INT 1
14098: DEC
14099: ST_TO_ADDR
14100: LD_VAR 0 1
14104: PUSH
14105: FOR_TO
14106: IFFALSE 14144
// if array1 [ i ] <> array2 [ i ] then
14108: LD_VAR 0 1
14112: PUSH
14113: LD_VAR 0 4
14117: ARRAY
14118: PUSH
14119: LD_VAR 0 2
14123: PUSH
14124: LD_VAR 0 4
14128: ARRAY
14129: NONEQUAL
14130: IFFALSE 14142
// begin result := false ;
14132: LD_ADDR_VAR 0 3
14136: PUSH
14137: LD_INT 0
14139: ST_TO_ADDR
// break ;
14140: GO 14144
// end ;
14142: GO 14105
14144: POP
14145: POP
// end else
14146: GO 14156
// result := false ;
14148: LD_ADDR_VAR 0 3
14152: PUSH
14153: LD_INT 0
14155: ST_TO_ADDR
// end ;
14156: LD_VAR 0 3
14160: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14161: LD_INT 0
14163: PPUSH
14164: PPUSH
// if not array1 or not array2 then
14165: LD_VAR 0 1
14169: NOT
14170: PUSH
14171: LD_VAR 0 2
14175: NOT
14176: OR
14177: IFFALSE 14181
// exit ;
14179: GO 14245
// result := true ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 1
14188: ST_TO_ADDR
// for i = 1 to array1 do
14189: LD_ADDR_VAR 0 4
14193: PUSH
14194: DOUBLE
14195: LD_INT 1
14197: DEC
14198: ST_TO_ADDR
14199: LD_VAR 0 1
14203: PUSH
14204: FOR_TO
14205: IFFALSE 14243
// if array1 [ i ] <> array2 [ i ] then
14207: LD_VAR 0 1
14211: PUSH
14212: LD_VAR 0 4
14216: ARRAY
14217: PUSH
14218: LD_VAR 0 2
14222: PUSH
14223: LD_VAR 0 4
14227: ARRAY
14228: NONEQUAL
14229: IFFALSE 14241
// begin result := false ;
14231: LD_ADDR_VAR 0 3
14235: PUSH
14236: LD_INT 0
14238: ST_TO_ADDR
// break ;
14239: GO 14243
// end ;
14241: GO 14204
14243: POP
14244: POP
// end ;
14245: LD_VAR 0 3
14249: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14250: LD_INT 0
14252: PPUSH
14253: PPUSH
14254: PPUSH
// pom := GetBase ( fac ) ;
14255: LD_ADDR_VAR 0 5
14259: PUSH
14260: LD_VAR 0 1
14264: PPUSH
14265: CALL_OW 274
14269: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14270: LD_ADDR_VAR 0 4
14274: PUSH
14275: LD_VAR 0 2
14279: PUSH
14280: LD_INT 1
14282: ARRAY
14283: PPUSH
14284: LD_VAR 0 2
14288: PUSH
14289: LD_INT 2
14291: ARRAY
14292: PPUSH
14293: LD_VAR 0 2
14297: PUSH
14298: LD_INT 3
14300: ARRAY
14301: PPUSH
14302: LD_VAR 0 2
14306: PUSH
14307: LD_INT 4
14309: ARRAY
14310: PPUSH
14311: CALL_OW 449
14315: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14316: LD_ADDR_VAR 0 3
14320: PUSH
14321: LD_VAR 0 5
14325: PPUSH
14326: LD_INT 1
14328: PPUSH
14329: CALL_OW 275
14333: PUSH
14334: LD_VAR 0 4
14338: PUSH
14339: LD_INT 1
14341: ARRAY
14342: GREATEREQUAL
14343: PUSH
14344: LD_VAR 0 5
14348: PPUSH
14349: LD_INT 2
14351: PPUSH
14352: CALL_OW 275
14356: PUSH
14357: LD_VAR 0 4
14361: PUSH
14362: LD_INT 2
14364: ARRAY
14365: GREATEREQUAL
14366: AND
14367: PUSH
14368: LD_VAR 0 5
14372: PPUSH
14373: LD_INT 3
14375: PPUSH
14376: CALL_OW 275
14380: PUSH
14381: LD_VAR 0 4
14385: PUSH
14386: LD_INT 3
14388: ARRAY
14389: GREATEREQUAL
14390: AND
14391: ST_TO_ADDR
// end ;
14392: LD_VAR 0 3
14396: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14397: LD_INT 0
14399: PPUSH
14400: PPUSH
14401: PPUSH
14402: PPUSH
// pom := GetBase ( building ) ;
14403: LD_ADDR_VAR 0 3
14407: PUSH
14408: LD_VAR 0 1
14412: PPUSH
14413: CALL_OW 274
14417: ST_TO_ADDR
// if not pom then
14418: LD_VAR 0 3
14422: NOT
14423: IFFALSE 14427
// exit ;
14425: GO 14597
// btype := GetBType ( building ) ;
14427: LD_ADDR_VAR 0 5
14431: PUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 266
14441: ST_TO_ADDR
// if btype = b_armoury then
14442: LD_VAR 0 5
14446: PUSH
14447: LD_INT 4
14449: EQUAL
14450: IFFALSE 14460
// btype := b_barracks ;
14452: LD_ADDR_VAR 0 5
14456: PUSH
14457: LD_INT 5
14459: ST_TO_ADDR
// if btype = b_depot then
14460: LD_VAR 0 5
14464: PUSH
14465: LD_INT 0
14467: EQUAL
14468: IFFALSE 14478
// btype := b_warehouse ;
14470: LD_ADDR_VAR 0 5
14474: PUSH
14475: LD_INT 1
14477: ST_TO_ADDR
// if btype = b_workshop then
14478: LD_VAR 0 5
14482: PUSH
14483: LD_INT 2
14485: EQUAL
14486: IFFALSE 14496
// btype := b_factory ;
14488: LD_ADDR_VAR 0 5
14492: PUSH
14493: LD_INT 3
14495: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14496: LD_ADDR_VAR 0 4
14500: PUSH
14501: LD_VAR 0 5
14505: PPUSH
14506: LD_VAR 0 1
14510: PPUSH
14511: CALL_OW 248
14515: PPUSH
14516: CALL_OW 450
14520: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14521: LD_ADDR_VAR 0 2
14525: PUSH
14526: LD_VAR 0 3
14530: PPUSH
14531: LD_INT 1
14533: PPUSH
14534: CALL_OW 275
14538: PUSH
14539: LD_VAR 0 4
14543: PUSH
14544: LD_INT 1
14546: ARRAY
14547: GREATEREQUAL
14548: PUSH
14549: LD_VAR 0 3
14553: PPUSH
14554: LD_INT 2
14556: PPUSH
14557: CALL_OW 275
14561: PUSH
14562: LD_VAR 0 4
14566: PUSH
14567: LD_INT 2
14569: ARRAY
14570: GREATEREQUAL
14571: AND
14572: PUSH
14573: LD_VAR 0 3
14577: PPUSH
14578: LD_INT 3
14580: PPUSH
14581: CALL_OW 275
14585: PUSH
14586: LD_VAR 0 4
14590: PUSH
14591: LD_INT 3
14593: ARRAY
14594: GREATEREQUAL
14595: AND
14596: ST_TO_ADDR
// end ;
14597: LD_VAR 0 2
14601: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
// pom := GetBase ( building ) ;
14607: LD_ADDR_VAR 0 4
14611: PUSH
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 274
14621: ST_TO_ADDR
// if not pom then
14622: LD_VAR 0 4
14626: NOT
14627: IFFALSE 14631
// exit ;
14629: GO 14732
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14631: LD_ADDR_VAR 0 5
14635: PUSH
14636: LD_VAR 0 2
14640: PPUSH
14641: LD_VAR 0 1
14645: PPUSH
14646: CALL_OW 248
14650: PPUSH
14651: CALL_OW 450
14655: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14656: LD_ADDR_VAR 0 3
14660: PUSH
14661: LD_VAR 0 4
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 275
14673: PUSH
14674: LD_VAR 0 5
14678: PUSH
14679: LD_INT 1
14681: ARRAY
14682: GREATEREQUAL
14683: PUSH
14684: LD_VAR 0 4
14688: PPUSH
14689: LD_INT 2
14691: PPUSH
14692: CALL_OW 275
14696: PUSH
14697: LD_VAR 0 5
14701: PUSH
14702: LD_INT 2
14704: ARRAY
14705: GREATEREQUAL
14706: AND
14707: PUSH
14708: LD_VAR 0 4
14712: PPUSH
14713: LD_INT 3
14715: PPUSH
14716: CALL_OW 275
14720: PUSH
14721: LD_VAR 0 5
14725: PUSH
14726: LD_INT 3
14728: ARRAY
14729: GREATEREQUAL
14730: AND
14731: ST_TO_ADDR
// end ;
14732: LD_VAR 0 3
14736: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14737: LD_INT 0
14739: PPUSH
14740: PPUSH
14741: PPUSH
14742: PPUSH
14743: PPUSH
14744: PPUSH
14745: PPUSH
14746: PPUSH
14747: PPUSH
14748: PPUSH
14749: PPUSH
// result := false ;
14750: LD_ADDR_VAR 0 8
14754: PUSH
14755: LD_INT 0
14757: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14758: LD_VAR 0 5
14762: NOT
14763: PUSH
14764: LD_VAR 0 1
14768: NOT
14769: OR
14770: PUSH
14771: LD_VAR 0 2
14775: NOT
14776: OR
14777: PUSH
14778: LD_VAR 0 3
14782: NOT
14783: OR
14784: IFFALSE 14788
// exit ;
14786: GO 15602
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14788: LD_ADDR_VAR 0 14
14792: PUSH
14793: LD_VAR 0 1
14797: PPUSH
14798: LD_VAR 0 2
14802: PPUSH
14803: LD_VAR 0 3
14807: PPUSH
14808: LD_VAR 0 4
14812: PPUSH
14813: LD_VAR 0 5
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: PPUSH
14822: CALL_OW 248
14826: PPUSH
14827: LD_INT 0
14829: PPUSH
14830: CALL 16439 0 6
14834: ST_TO_ADDR
// if not hexes then
14835: LD_VAR 0 14
14839: NOT
14840: IFFALSE 14844
// exit ;
14842: GO 15602
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14844: LD_ADDR_VAR 0 17
14848: PUSH
14849: LD_VAR 0 5
14853: PPUSH
14854: LD_INT 22
14856: PUSH
14857: LD_VAR 0 13
14861: PPUSH
14862: CALL_OW 255
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 2
14873: PUSH
14874: LD_INT 30
14876: PUSH
14877: LD_INT 0
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 30
14886: PUSH
14887: LD_INT 1
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 72
14907: ST_TO_ADDR
// for i = 1 to hexes do
14908: LD_ADDR_VAR 0 9
14912: PUSH
14913: DOUBLE
14914: LD_INT 1
14916: DEC
14917: ST_TO_ADDR
14918: LD_VAR 0 14
14922: PUSH
14923: FOR_TO
14924: IFFALSE 15600
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14926: LD_ADDR_VAR 0 13
14930: PUSH
14931: LD_VAR 0 14
14935: PUSH
14936: LD_VAR 0 9
14940: ARRAY
14941: PUSH
14942: LD_INT 1
14944: ARRAY
14945: PPUSH
14946: LD_VAR 0 14
14950: PUSH
14951: LD_VAR 0 9
14955: ARRAY
14956: PUSH
14957: LD_INT 2
14959: ARRAY
14960: PPUSH
14961: CALL_OW 428
14965: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14966: LD_VAR 0 14
14970: PUSH
14971: LD_VAR 0 9
14975: ARRAY
14976: PUSH
14977: LD_INT 1
14979: ARRAY
14980: PPUSH
14981: LD_VAR 0 14
14985: PUSH
14986: LD_VAR 0 9
14990: ARRAY
14991: PUSH
14992: LD_INT 2
14994: ARRAY
14995: PPUSH
14996: CALL_OW 351
15000: PUSH
15001: LD_VAR 0 14
15005: PUSH
15006: LD_VAR 0 9
15010: ARRAY
15011: PUSH
15012: LD_INT 1
15014: ARRAY
15015: PPUSH
15016: LD_VAR 0 14
15020: PUSH
15021: LD_VAR 0 9
15025: ARRAY
15026: PUSH
15027: LD_INT 2
15029: ARRAY
15030: PPUSH
15031: CALL_OW 488
15035: NOT
15036: OR
15037: PUSH
15038: LD_VAR 0 13
15042: PPUSH
15043: CALL_OW 247
15047: PUSH
15048: LD_INT 3
15050: EQUAL
15051: OR
15052: IFFALSE 15058
// exit ;
15054: POP
15055: POP
15056: GO 15602
// if not tmp then
15058: LD_VAR 0 13
15062: NOT
15063: IFFALSE 15067
// continue ;
15065: GO 14923
// result := true ;
15067: LD_ADDR_VAR 0 8
15071: PUSH
15072: LD_INT 1
15074: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15075: LD_VAR 0 6
15079: PUSH
15080: LD_VAR 0 13
15084: PPUSH
15085: CALL_OW 247
15089: PUSH
15090: LD_INT 2
15092: EQUAL
15093: AND
15094: PUSH
15095: LD_VAR 0 13
15099: PPUSH
15100: CALL_OW 263
15104: PUSH
15105: LD_INT 1
15107: EQUAL
15108: AND
15109: IFFALSE 15273
// begin if IsDrivenBy ( tmp ) then
15111: LD_VAR 0 13
15115: PPUSH
15116: CALL_OW 311
15120: IFFALSE 15124
// continue ;
15122: GO 14923
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15124: LD_VAR 0 6
15128: PPUSH
15129: LD_INT 3
15131: PUSH
15132: LD_INT 60
15134: PUSH
15135: EMPTY
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 3
15144: PUSH
15145: LD_INT 55
15147: PUSH
15148: EMPTY
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PPUSH
15159: CALL_OW 72
15163: IFFALSE 15271
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15165: LD_ADDR_VAR 0 18
15169: PUSH
15170: LD_VAR 0 6
15174: PPUSH
15175: LD_INT 3
15177: PUSH
15178: LD_INT 60
15180: PUSH
15181: EMPTY
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 3
15190: PUSH
15191: LD_INT 55
15193: PUSH
15194: EMPTY
15195: LIST
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PPUSH
15205: CALL_OW 72
15209: PUSH
15210: LD_INT 1
15212: ARRAY
15213: ST_TO_ADDR
// if IsInUnit ( driver ) then
15214: LD_VAR 0 18
15218: PPUSH
15219: CALL_OW 310
15223: IFFALSE 15234
// ComExit ( driver ) ;
15225: LD_VAR 0 18
15229: PPUSH
15230: CALL 39623 0 1
// AddComEnterUnit ( driver , tmp ) ;
15234: LD_VAR 0 18
15238: PPUSH
15239: LD_VAR 0 13
15243: PPUSH
15244: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15248: LD_VAR 0 18
15252: PPUSH
15253: LD_VAR 0 7
15257: PPUSH
15258: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15262: LD_VAR 0 18
15266: PPUSH
15267: CALL_OW 181
// end ; continue ;
15271: GO 14923
// end ; if not cleaners or not tmp in cleaners then
15273: LD_VAR 0 6
15277: NOT
15278: PUSH
15279: LD_VAR 0 13
15283: PUSH
15284: LD_VAR 0 6
15288: IN
15289: NOT
15290: OR
15291: IFFALSE 15598
// begin if dep then
15293: LD_VAR 0 17
15297: IFFALSE 15433
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15299: LD_ADDR_VAR 0 16
15303: PUSH
15304: LD_VAR 0 17
15308: PUSH
15309: LD_INT 1
15311: ARRAY
15312: PPUSH
15313: CALL_OW 250
15317: PPUSH
15318: LD_VAR 0 17
15322: PUSH
15323: LD_INT 1
15325: ARRAY
15326: PPUSH
15327: CALL_OW 254
15331: PPUSH
15332: LD_INT 5
15334: PPUSH
15335: CALL_OW 272
15339: PUSH
15340: LD_VAR 0 17
15344: PUSH
15345: LD_INT 1
15347: ARRAY
15348: PPUSH
15349: CALL_OW 251
15353: PPUSH
15354: LD_VAR 0 17
15358: PUSH
15359: LD_INT 1
15361: ARRAY
15362: PPUSH
15363: CALL_OW 254
15367: PPUSH
15368: LD_INT 5
15370: PPUSH
15371: CALL_OW 273
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15380: LD_VAR 0 16
15384: PUSH
15385: LD_INT 1
15387: ARRAY
15388: PPUSH
15389: LD_VAR 0 16
15393: PUSH
15394: LD_INT 2
15396: ARRAY
15397: PPUSH
15398: CALL_OW 488
15402: IFFALSE 15433
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15404: LD_VAR 0 13
15408: PPUSH
15409: LD_VAR 0 16
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: LD_VAR 0 16
15422: PUSH
15423: LD_INT 2
15425: ARRAY
15426: PPUSH
15427: CALL_OW 111
// continue ;
15431: GO 14923
// end ; end ; r := GetDir ( tmp ) ;
15433: LD_ADDR_VAR 0 15
15437: PUSH
15438: LD_VAR 0 13
15442: PPUSH
15443: CALL_OW 254
15447: ST_TO_ADDR
// if r = 5 then
15448: LD_VAR 0 15
15452: PUSH
15453: LD_INT 5
15455: EQUAL
15456: IFFALSE 15466
// r := 0 ;
15458: LD_ADDR_VAR 0 15
15462: PUSH
15463: LD_INT 0
15465: ST_TO_ADDR
// for j = r to 5 do
15466: LD_ADDR_VAR 0 10
15470: PUSH
15471: DOUBLE
15472: LD_VAR 0 15
15476: DEC
15477: ST_TO_ADDR
15478: LD_INT 5
15480: PUSH
15481: FOR_TO
15482: IFFALSE 15596
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15484: LD_ADDR_VAR 0 11
15488: PUSH
15489: LD_VAR 0 13
15493: PPUSH
15494: CALL_OW 250
15498: PPUSH
15499: LD_VAR 0 10
15503: PPUSH
15504: LD_INT 2
15506: PPUSH
15507: CALL_OW 272
15511: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15512: LD_ADDR_VAR 0 12
15516: PUSH
15517: LD_VAR 0 13
15521: PPUSH
15522: CALL_OW 251
15526: PPUSH
15527: LD_VAR 0 10
15531: PPUSH
15532: LD_INT 2
15534: PPUSH
15535: CALL_OW 273
15539: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15540: LD_VAR 0 11
15544: PPUSH
15545: LD_VAR 0 12
15549: PPUSH
15550: CALL_OW 488
15554: PUSH
15555: LD_VAR 0 11
15559: PPUSH
15560: LD_VAR 0 12
15564: PPUSH
15565: CALL_OW 428
15569: NOT
15570: AND
15571: IFFALSE 15594
// begin ComMoveXY ( tmp , _x , _y ) ;
15573: LD_VAR 0 13
15577: PPUSH
15578: LD_VAR 0 11
15582: PPUSH
15583: LD_VAR 0 12
15587: PPUSH
15588: CALL_OW 111
// break ;
15592: GO 15596
// end ; end ;
15594: GO 15481
15596: POP
15597: POP
// end ; end ;
15598: GO 14923
15600: POP
15601: POP
// end ;
15602: LD_VAR 0 8
15606: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
15607: LD_INT 0
15609: PPUSH
15610: PPUSH
15611: PPUSH
15612: PPUSH
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
// result := false ;
15619: LD_ADDR_VAR 0 6
15623: PUSH
15624: LD_INT 0
15626: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15627: LD_VAR 0 1
15631: NOT
15632: PUSH
15633: LD_VAR 0 1
15637: PPUSH
15638: CALL_OW 266
15642: PUSH
15643: LD_INT 0
15645: PUSH
15646: LD_INT 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: IN
15653: NOT
15654: OR
15655: PUSH
15656: LD_VAR 0 2
15660: NOT
15661: OR
15662: PUSH
15663: LD_VAR 0 5
15667: PUSH
15668: LD_INT 0
15670: PUSH
15671: LD_INT 1
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: LD_INT 3
15679: PUSH
15680: LD_INT 4
15682: PUSH
15683: LD_INT 5
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: IN
15694: NOT
15695: OR
15696: PUSH
15697: LD_VAR 0 3
15701: PPUSH
15702: LD_VAR 0 4
15706: PPUSH
15707: CALL_OW 488
15711: NOT
15712: OR
15713: IFFALSE 15717
// exit ;
15715: GO 16434
// pom := GetBase ( depot ) ;
15717: LD_ADDR_VAR 0 10
15721: PUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 274
15731: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15732: LD_ADDR_VAR 0 11
15736: PUSH
15737: LD_VAR 0 2
15741: PPUSH
15742: LD_VAR 0 1
15746: PPUSH
15747: CALL_OW 248
15751: PPUSH
15752: CALL_OW 450
15756: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15757: LD_VAR 0 10
15761: PPUSH
15762: LD_INT 1
15764: PPUSH
15765: CALL_OW 275
15769: PUSH
15770: LD_VAR 0 11
15774: PUSH
15775: LD_INT 1
15777: ARRAY
15778: GREATEREQUAL
15779: PUSH
15780: LD_VAR 0 10
15784: PPUSH
15785: LD_INT 2
15787: PPUSH
15788: CALL_OW 275
15792: PUSH
15793: LD_VAR 0 11
15797: PUSH
15798: LD_INT 2
15800: ARRAY
15801: GREATEREQUAL
15802: AND
15803: PUSH
15804: LD_VAR 0 10
15808: PPUSH
15809: LD_INT 3
15811: PPUSH
15812: CALL_OW 275
15816: PUSH
15817: LD_VAR 0 11
15821: PUSH
15822: LD_INT 3
15824: ARRAY
15825: GREATEREQUAL
15826: AND
15827: NOT
15828: IFFALSE 15832
// exit ;
15830: GO 16434
// if GetBType ( depot ) = b_depot then
15832: LD_VAR 0 1
15836: PPUSH
15837: CALL_OW 266
15841: PUSH
15842: LD_INT 0
15844: EQUAL
15845: IFFALSE 15857
// dist := 28 else
15847: LD_ADDR_VAR 0 14
15851: PUSH
15852: LD_INT 28
15854: ST_TO_ADDR
15855: GO 15865
// dist := 36 ;
15857: LD_ADDR_VAR 0 14
15861: PUSH
15862: LD_INT 36
15864: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15865: LD_VAR 0 1
15869: PPUSH
15870: LD_VAR 0 3
15874: PPUSH
15875: LD_VAR 0 4
15879: PPUSH
15880: CALL_OW 297
15884: PUSH
15885: LD_VAR 0 14
15889: GREATER
15890: IFFALSE 15894
// exit ;
15892: GO 16434
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15894: LD_ADDR_VAR 0 12
15898: PUSH
15899: LD_VAR 0 2
15903: PPUSH
15904: LD_VAR 0 3
15908: PPUSH
15909: LD_VAR 0 4
15913: PPUSH
15914: LD_VAR 0 5
15918: PPUSH
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 248
15928: PPUSH
15929: LD_INT 0
15931: PPUSH
15932: CALL 16439 0 6
15936: ST_TO_ADDR
// if not hexes then
15937: LD_VAR 0 12
15941: NOT
15942: IFFALSE 15946
// exit ;
15944: GO 16434
// hex := GetHexInfo ( x , y ) ;
15946: LD_ADDR_VAR 0 15
15950: PUSH
15951: LD_VAR 0 3
15955: PPUSH
15956: LD_VAR 0 4
15960: PPUSH
15961: CALL_OW 546
15965: ST_TO_ADDR
// if hex [ 1 ] then
15966: LD_VAR 0 15
15970: PUSH
15971: LD_INT 1
15973: ARRAY
15974: IFFALSE 15978
// exit ;
15976: GO 16434
// height := hex [ 2 ] ;
15978: LD_ADDR_VAR 0 13
15982: PUSH
15983: LD_VAR 0 15
15987: PUSH
15988: LD_INT 2
15990: ARRAY
15991: ST_TO_ADDR
// for i = 1 to hexes do
15992: LD_ADDR_VAR 0 7
15996: PUSH
15997: DOUBLE
15998: LD_INT 1
16000: DEC
16001: ST_TO_ADDR
16002: LD_VAR 0 12
16006: PUSH
16007: FOR_TO
16008: IFFALSE 16338
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16010: LD_VAR 0 12
16014: PUSH
16015: LD_VAR 0 7
16019: ARRAY
16020: PUSH
16021: LD_INT 1
16023: ARRAY
16024: PPUSH
16025: LD_VAR 0 12
16029: PUSH
16030: LD_VAR 0 7
16034: ARRAY
16035: PUSH
16036: LD_INT 2
16038: ARRAY
16039: PPUSH
16040: CALL_OW 488
16044: NOT
16045: PUSH
16046: LD_VAR 0 12
16050: PUSH
16051: LD_VAR 0 7
16055: ARRAY
16056: PUSH
16057: LD_INT 1
16059: ARRAY
16060: PPUSH
16061: LD_VAR 0 12
16065: PUSH
16066: LD_VAR 0 7
16070: ARRAY
16071: PUSH
16072: LD_INT 2
16074: ARRAY
16075: PPUSH
16076: CALL_OW 428
16080: PUSH
16081: LD_INT 0
16083: GREATER
16084: OR
16085: PUSH
16086: LD_VAR 0 12
16090: PUSH
16091: LD_VAR 0 7
16095: ARRAY
16096: PUSH
16097: LD_INT 1
16099: ARRAY
16100: PPUSH
16101: LD_VAR 0 12
16105: PUSH
16106: LD_VAR 0 7
16110: ARRAY
16111: PUSH
16112: LD_INT 2
16114: ARRAY
16115: PPUSH
16116: CALL_OW 351
16120: OR
16121: IFFALSE 16127
// exit ;
16123: POP
16124: POP
16125: GO 16434
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16127: LD_ADDR_VAR 0 8
16131: PUSH
16132: LD_VAR 0 12
16136: PUSH
16137: LD_VAR 0 7
16141: ARRAY
16142: PUSH
16143: LD_INT 1
16145: ARRAY
16146: PPUSH
16147: LD_VAR 0 12
16151: PUSH
16152: LD_VAR 0 7
16156: ARRAY
16157: PUSH
16158: LD_INT 2
16160: ARRAY
16161: PPUSH
16162: CALL_OW 546
16166: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16167: LD_VAR 0 8
16171: PUSH
16172: LD_INT 1
16174: ARRAY
16175: PUSH
16176: LD_VAR 0 8
16180: PUSH
16181: LD_INT 2
16183: ARRAY
16184: PUSH
16185: LD_VAR 0 13
16189: PUSH
16190: LD_INT 2
16192: PLUS
16193: GREATER
16194: OR
16195: PUSH
16196: LD_VAR 0 8
16200: PUSH
16201: LD_INT 2
16203: ARRAY
16204: PUSH
16205: LD_VAR 0 13
16209: PUSH
16210: LD_INT 2
16212: MINUS
16213: LESS
16214: OR
16215: PUSH
16216: LD_VAR 0 8
16220: PUSH
16221: LD_INT 3
16223: ARRAY
16224: PUSH
16225: LD_INT 0
16227: PUSH
16228: LD_INT 8
16230: PUSH
16231: LD_INT 9
16233: PUSH
16234: LD_INT 10
16236: PUSH
16237: LD_INT 11
16239: PUSH
16240: LD_INT 12
16242: PUSH
16243: LD_INT 13
16245: PUSH
16246: LD_INT 16
16248: PUSH
16249: LD_INT 17
16251: PUSH
16252: LD_INT 18
16254: PUSH
16255: LD_INT 19
16257: PUSH
16258: LD_INT 20
16260: PUSH
16261: LD_INT 21
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: IN
16279: NOT
16280: OR
16281: PUSH
16282: LD_VAR 0 8
16286: PUSH
16287: LD_INT 5
16289: ARRAY
16290: NOT
16291: OR
16292: PUSH
16293: LD_VAR 0 8
16297: PUSH
16298: LD_INT 6
16300: ARRAY
16301: PUSH
16302: LD_INT 1
16304: PUSH
16305: LD_INT 2
16307: PUSH
16308: LD_INT 7
16310: PUSH
16311: LD_INT 9
16313: PUSH
16314: LD_INT 10
16316: PUSH
16317: LD_INT 11
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: IN
16328: NOT
16329: OR
16330: IFFALSE 16336
// exit ;
16332: POP
16333: POP
16334: GO 16434
// end ;
16336: GO 16007
16338: POP
16339: POP
// side := GetSide ( depot ) ;
16340: LD_ADDR_VAR 0 9
16344: PUSH
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 255
16354: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16355: LD_VAR 0 9
16359: PPUSH
16360: LD_VAR 0 3
16364: PPUSH
16365: LD_VAR 0 4
16369: PPUSH
16370: LD_INT 20
16372: PPUSH
16373: CALL 8755 0 4
16377: PUSH
16378: LD_INT 4
16380: ARRAY
16381: IFFALSE 16385
// exit ;
16383: GO 16434
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16385: LD_VAR 0 2
16389: PUSH
16390: LD_INT 29
16392: PUSH
16393: LD_INT 30
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: IN
16400: PUSH
16401: LD_VAR 0 3
16405: PPUSH
16406: LD_VAR 0 4
16410: PPUSH
16411: LD_VAR 0 9
16415: PPUSH
16416: CALL_OW 440
16420: NOT
16421: AND
16422: IFFALSE 16426
// exit ;
16424: GO 16434
// result := true ;
16426: LD_ADDR_VAR 0 6
16430: PUSH
16431: LD_INT 1
16433: ST_TO_ADDR
// end ;
16434: LD_VAR 0 6
16438: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16439: LD_INT 0
16441: PPUSH
16442: PPUSH
16443: PPUSH
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
16460: PPUSH
16461: PPUSH
16462: PPUSH
16463: PPUSH
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
16470: PPUSH
16471: PPUSH
16472: PPUSH
16473: PPUSH
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
16478: PPUSH
16479: PPUSH
16480: PPUSH
16481: PPUSH
16482: PPUSH
16483: PPUSH
16484: PPUSH
16485: PPUSH
16486: PPUSH
16487: PPUSH
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
16497: PPUSH
16498: PPUSH
// result = [ ] ;
16499: LD_ADDR_VAR 0 7
16503: PUSH
16504: EMPTY
16505: ST_TO_ADDR
// temp_list = [ ] ;
16506: LD_ADDR_VAR 0 9
16510: PUSH
16511: EMPTY
16512: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16513: LD_VAR 0 4
16517: PUSH
16518: LD_INT 0
16520: PUSH
16521: LD_INT 1
16523: PUSH
16524: LD_INT 2
16526: PUSH
16527: LD_INT 3
16529: PUSH
16530: LD_INT 4
16532: PUSH
16533: LD_INT 5
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: IN
16544: NOT
16545: PUSH
16546: LD_VAR 0 1
16550: PUSH
16551: LD_INT 0
16553: PUSH
16554: LD_INT 1
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: IN
16561: PUSH
16562: LD_VAR 0 5
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: LD_INT 2
16572: PUSH
16573: LD_INT 3
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: IN
16581: NOT
16582: AND
16583: OR
16584: IFFALSE 16588
// exit ;
16586: GO 34979
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16588: LD_VAR 0 1
16592: PUSH
16593: LD_INT 6
16595: PUSH
16596: LD_INT 7
16598: PUSH
16599: LD_INT 8
16601: PUSH
16602: LD_INT 13
16604: PUSH
16605: LD_INT 12
16607: PUSH
16608: LD_INT 15
16610: PUSH
16611: LD_INT 11
16613: PUSH
16614: LD_INT 14
16616: PUSH
16617: LD_INT 10
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: IN
16631: IFFALSE 16641
// btype = b_lab ;
16633: LD_ADDR_VAR 0 1
16637: PUSH
16638: LD_INT 6
16640: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16641: LD_VAR 0 6
16645: PUSH
16646: LD_INT 0
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: LD_INT 2
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: IN
16660: NOT
16661: PUSH
16662: LD_VAR 0 1
16666: PUSH
16667: LD_INT 0
16669: PUSH
16670: LD_INT 1
16672: PUSH
16673: LD_INT 2
16675: PUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 6
16681: PUSH
16682: LD_INT 36
16684: PUSH
16685: LD_INT 4
16687: PUSH
16688: LD_INT 5
16690: PUSH
16691: LD_INT 31
16693: PUSH
16694: LD_INT 32
16696: PUSH
16697: LD_INT 33
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: IN
16713: NOT
16714: PUSH
16715: LD_VAR 0 6
16719: PUSH
16720: LD_INT 1
16722: EQUAL
16723: AND
16724: OR
16725: PUSH
16726: LD_VAR 0 1
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: LD_INT 3
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: IN
16741: NOT
16742: PUSH
16743: LD_VAR 0 6
16747: PUSH
16748: LD_INT 2
16750: EQUAL
16751: AND
16752: OR
16753: IFFALSE 16763
// mode = 0 ;
16755: LD_ADDR_VAR 0 6
16759: PUSH
16760: LD_INT 0
16762: ST_TO_ADDR
// case mode of 0 :
16763: LD_VAR 0 6
16767: PUSH
16768: LD_INT 0
16770: DOUBLE
16771: EQUAL
16772: IFTRUE 16776
16774: GO 28229
16776: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16777: LD_ADDR_VAR 0 11
16781: PUSH
16782: LD_INT 0
16784: PUSH
16785: LD_INT 0
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 0
16794: PUSH
16795: LD_INT 1
16797: NEG
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: LD_INT 0
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: LD_INT 1
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 0
16825: PUSH
16826: LD_INT 1
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 1
16835: NEG
16836: PUSH
16837: LD_INT 0
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 1
16846: NEG
16847: PUSH
16848: LD_INT 1
16850: NEG
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 1
16858: NEG
16859: PUSH
16860: LD_INT 2
16862: NEG
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 0
16870: PUSH
16871: LD_INT 2
16873: NEG
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 1
16881: PUSH
16882: LD_INT 1
16884: NEG
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: LD_INT 2
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 1
16912: NEG
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 0
16933: PUSH
16934: LD_INT 3
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 1
16943: NEG
16944: PUSH
16945: LD_INT 2
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16970: LD_ADDR_VAR 0 12
16974: PUSH
16975: LD_INT 0
16977: PUSH
16978: LD_INT 0
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 0
16987: PUSH
16988: LD_INT 1
16990: NEG
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 1
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 0
17018: PUSH
17019: LD_INT 1
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 1
17028: NEG
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 1
17039: NEG
17040: PUSH
17041: LD_INT 1
17043: NEG
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: LD_INT 1
17054: NEG
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 2
17072: PUSH
17073: LD_INT 1
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 1
17082: NEG
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 2
17093: NEG
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 2
17104: NEG
17105: PUSH
17106: LD_INT 1
17108: NEG
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: NEG
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 3
17127: NEG
17128: PUSH
17129: LD_INT 0
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: LD_INT 3
17138: NEG
17139: PUSH
17140: LD_INT 1
17142: NEG
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17166: LD_ADDR_VAR 0 13
17170: PUSH
17171: LD_INT 0
17173: PUSH
17174: LD_INT 0
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 0
17183: PUSH
17184: LD_INT 1
17186: NEG
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: LD_INT 0
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 0
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 1
17224: NEG
17225: PUSH
17226: LD_INT 0
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 1
17235: NEG
17236: PUSH
17237: LD_INT 1
17239: NEG
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 1
17247: NEG
17248: PUSH
17249: LD_INT 2
17251: NEG
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 2
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 2
17269: PUSH
17270: LD_INT 2
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: LD_INT 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 2
17289: NEG
17290: PUSH
17291: LD_INT 1
17293: NEG
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 2
17301: NEG
17302: PUSH
17303: LD_INT 2
17305: NEG
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 2
17313: NEG
17314: PUSH
17315: LD_INT 3
17317: NEG
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 3
17325: NEG
17326: PUSH
17327: LD_INT 2
17329: NEG
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 3
17337: NEG
17338: PUSH
17339: LD_INT 3
17341: NEG
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17365: LD_ADDR_VAR 0 14
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 0
17382: PUSH
17383: LD_INT 1
17385: NEG
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 1
17403: PUSH
17404: LD_INT 1
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 0
17413: PUSH
17414: LD_INT 1
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 1
17423: NEG
17424: PUSH
17425: LD_INT 0
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 1
17434: NEG
17435: PUSH
17436: LD_INT 1
17438: NEG
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 1
17446: NEG
17447: PUSH
17448: LD_INT 2
17450: NEG
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 0
17458: PUSH
17459: LD_INT 2
17461: NEG
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 1
17469: PUSH
17470: LD_INT 1
17472: NEG
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: LD_INT 2
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 0
17490: PUSH
17491: LD_INT 2
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 1
17500: NEG
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 1
17511: NEG
17512: PUSH
17513: LD_INT 3
17515: NEG
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 0
17523: PUSH
17524: LD_INT 3
17526: NEG
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: LD_INT 2
17537: NEG
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17561: LD_ADDR_VAR 0 15
17565: PUSH
17566: LD_INT 0
17568: PUSH
17569: LD_INT 0
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 0
17578: PUSH
17579: LD_INT 1
17581: NEG
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: LD_INT 0
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 0
17609: PUSH
17610: LD_INT 1
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 1
17619: NEG
17620: PUSH
17621: LD_INT 0
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: NEG
17631: PUSH
17632: LD_INT 1
17634: NEG
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: LD_INT 1
17645: NEG
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: LD_INT 0
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 2
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 2
17684: NEG
17685: PUSH
17686: LD_INT 0
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 2
17695: NEG
17696: PUSH
17697: LD_INT 1
17699: NEG
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 2
17707: PUSH
17708: LD_INT 1
17710: NEG
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 3
17718: PUSH
17719: LD_INT 0
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 3
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17754: LD_ADDR_VAR 0 16
17758: PUSH
17759: LD_INT 0
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: LD_INT 1
17774: NEG
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 1
17782: PUSH
17783: LD_INT 0
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 1
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 1
17812: NEG
17813: PUSH
17814: LD_INT 0
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: NEG
17824: PUSH
17825: LD_INT 1
17827: NEG
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 1
17835: NEG
17836: PUSH
17837: LD_INT 2
17839: NEG
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 2
17847: PUSH
17848: LD_INT 1
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 2
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 2
17877: NEG
17878: PUSH
17879: LD_INT 1
17881: NEG
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 2
17889: NEG
17890: PUSH
17891: LD_INT 2
17893: NEG
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 3
17901: PUSH
17902: LD_INT 2
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 3
17911: PUSH
17912: LD_INT 3
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 2
17921: PUSH
17922: LD_INT 3
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17947: LD_ADDR_VAR 0 17
17951: PUSH
17952: LD_INT 0
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: LD_INT 1
17967: NEG
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: PUSH
17976: LD_INT 0
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 0
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: NEG
18006: PUSH
18007: LD_INT 0
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 1
18016: NEG
18017: PUSH
18018: LD_INT 1
18020: NEG
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 1
18028: NEG
18029: PUSH
18030: LD_INT 2
18032: NEG
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: LD_INT 2
18043: NEG
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 2
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 2
18082: PUSH
18083: LD_INT 2
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 1
18092: PUSH
18093: LD_INT 2
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 0
18102: PUSH
18103: LD_INT 2
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 1
18112: NEG
18113: PUSH
18114: LD_INT 1
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 2
18123: NEG
18124: PUSH
18125: LD_INT 0
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 2
18134: NEG
18135: PUSH
18136: LD_INT 1
18138: NEG
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 2
18146: NEG
18147: PUSH
18148: LD_INT 2
18150: NEG
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18177: LD_ADDR_VAR 0 18
18181: PUSH
18182: LD_INT 0
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 0
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 1
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 0
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 1
18235: NEG
18236: PUSH
18237: LD_INT 0
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: LD_INT 1
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 2
18262: NEG
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 2
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: LD_INT 2
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: LD_INT 2
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 1
18342: NEG
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 2
18353: NEG
18354: PUSH
18355: LD_INT 0
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 2
18364: NEG
18365: PUSH
18366: LD_INT 1
18368: NEG
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 2
18376: NEG
18377: PUSH
18378: LD_INT 2
18380: NEG
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18407: LD_ADDR_VAR 0 19
18411: PUSH
18412: LD_INT 0
18414: PUSH
18415: LD_INT 0
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: LD_INT 1
18427: NEG
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: LD_INT 1
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 1
18465: NEG
18466: PUSH
18467: LD_INT 0
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: NEG
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 1
18488: NEG
18489: PUSH
18490: LD_INT 2
18492: NEG
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: LD_INT 2
18503: NEG
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: LD_INT 1
18514: NEG
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: LD_INT 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 1
18552: PUSH
18553: LD_INT 2
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 0
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: NEG
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 2
18583: NEG
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 2
18594: NEG
18595: PUSH
18596: LD_INT 1
18598: NEG
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 2
18606: NEG
18607: PUSH
18608: LD_INT 2
18610: NEG
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18637: LD_ADDR_VAR 0 20
18641: PUSH
18642: LD_INT 0
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 0
18654: PUSH
18655: LD_INT 1
18657: NEG
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: LD_INT 0
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 0
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 1
18695: NEG
18696: PUSH
18697: LD_INT 0
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 1
18706: NEG
18707: PUSH
18708: LD_INT 1
18710: NEG
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: NEG
18719: PUSH
18720: LD_INT 2
18722: NEG
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 0
18730: PUSH
18731: LD_INT 2
18733: NEG
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 1
18741: PUSH
18742: LD_INT 1
18744: NEG
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 2
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: LD_INT 2
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 1
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 0
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 1
18802: NEG
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 2
18813: NEG
18814: PUSH
18815: LD_INT 0
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 2
18824: NEG
18825: PUSH
18826: LD_INT 1
18828: NEG
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 2
18836: NEG
18837: PUSH
18838: LD_INT 2
18840: NEG
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18867: LD_ADDR_VAR 0 21
18871: PUSH
18872: LD_INT 0
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 0
18884: PUSH
18885: LD_INT 1
18887: NEG
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 1
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: LD_INT 1
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 0
18915: PUSH
18916: LD_INT 1
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 1
18925: NEG
18926: PUSH
18927: LD_INT 0
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 1
18936: NEG
18937: PUSH
18938: LD_INT 1
18940: NEG
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: LD_INT 2
18952: NEG
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 2
18963: NEG
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: LD_INT 2
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 0
19022: PUSH
19023: LD_INT 2
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 2
19043: NEG
19044: PUSH
19045: LD_INT 0
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: NEG
19055: PUSH
19056: LD_INT 1
19058: NEG
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 2
19066: NEG
19067: PUSH
19068: LD_INT 2
19070: NEG
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19097: LD_ADDR_VAR 0 22
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 0
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 0
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: NEG
19156: PUSH
19157: LD_INT 0
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: LD_INT 1
19170: NEG
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: LD_INT 2
19182: NEG
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 0
19190: PUSH
19191: LD_INT 2
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 1
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 0
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 1
19262: NEG
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 2
19273: NEG
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: NEG
19285: PUSH
19286: LD_INT 1
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: NEG
19297: PUSH
19298: LD_INT 2
19300: NEG
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19327: LD_ADDR_VAR 0 23
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 0
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: LD_INT 0
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: LD_INT 2
19412: NEG
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 0
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: LD_INT 1
19434: NEG
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 2
19442: PUSH
19443: LD_INT 0
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 2
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 2
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 0
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 1
19492: NEG
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 2
19503: NEG
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: NEG
19515: PUSH
19516: LD_INT 1
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: NEG
19527: PUSH
19528: LD_INT 2
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 2
19538: NEG
19539: PUSH
19540: LD_INT 3
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: LD_INT 3
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_INT 2
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 1
19576: NEG
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19607: LD_ADDR_VAR 0 24
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: LD_INT 1
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 0
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 1
19676: NEG
19677: PUSH
19678: LD_INT 1
19680: NEG
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: PUSH
19690: LD_INT 2
19692: NEG
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 0
19700: PUSH
19701: LD_INT 2
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: LD_INT 1
19714: NEG
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: LD_INT 0
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 2
19732: PUSH
19733: LD_INT 1
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: NEG
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 2
19783: NEG
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: NEG
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 2
19806: NEG
19807: PUSH
19808: LD_INT 2
19810: NEG
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 2
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 3
19840: PUSH
19841: LD_INT 1
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 3
19850: PUSH
19851: LD_INT 2
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19883: LD_ADDR_VAR 0 25
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: LD_INT 0
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: LD_INT 1
19903: NEG
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: LD_INT 0
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: LD_INT 1
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 0
19931: PUSH
19932: LD_INT 1
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: LD_INT 0
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: LD_INT 1
19956: NEG
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 1
19964: NEG
19965: PUSH
19966: LD_INT 2
19968: NEG
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 0
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: LD_INT 1
19990: NEG
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 2
20018: PUSH
20019: LD_INT 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: LD_INT 2
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: LD_INT 2
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 2
20059: NEG
20060: PUSH
20061: LD_INT 0
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: LD_INT 1
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: NEG
20083: PUSH
20084: LD_INT 2
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 3
20094: PUSH
20095: LD_INT 1
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 3
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: LD_INT 3
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: LD_INT 3
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20157: LD_ADDR_VAR 0 26
20161: PUSH
20162: LD_INT 0
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 1
20185: PUSH
20186: LD_INT 0
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 1
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 0
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: LD_INT 0
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: LD_INT 1
20230: NEG
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 1
20238: NEG
20239: PUSH
20240: LD_INT 2
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: LD_INT 2
20253: NEG
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 1
20261: PUSH
20262: LD_INT 1
20264: NEG
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 2
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 2
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 2
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 0
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: NEG
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 2
20333: NEG
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: NEG
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 2
20356: NEG
20357: PUSH
20358: LD_INT 2
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 2
20368: PUSH
20369: LD_INT 3
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: LD_INT 3
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 1
20388: NEG
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 2
20399: NEG
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20433: LD_ADDR_VAR 0 27
20437: PUSH
20438: LD_INT 0
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 0
20450: PUSH
20451: LD_INT 1
20453: NEG
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: LD_INT 0
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 1
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 0
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 1
20502: NEG
20503: PUSH
20504: LD_INT 1
20506: NEG
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 1
20514: NEG
20515: PUSH
20516: LD_INT 2
20518: NEG
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 0
20526: PUSH
20527: LD_INT 2
20529: NEG
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 1
20537: PUSH
20538: LD_INT 1
20540: NEG
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 2
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 2
20568: PUSH
20569: LD_INT 2
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: LD_INT 2
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 0
20588: PUSH
20589: LD_INT 2
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 1
20598: NEG
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 2
20609: NEG
20610: PUSH
20611: LD_INT 0
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 2
20620: NEG
20621: PUSH
20622: LD_INT 1
20624: NEG
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 2
20632: NEG
20633: PUSH
20634: LD_INT 2
20636: NEG
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 1
20644: NEG
20645: PUSH
20646: LD_INT 2
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 2
20655: NEG
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 3
20666: NEG
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 3
20678: NEG
20679: PUSH
20680: LD_INT 2
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20713: LD_ADDR_VAR 0 28
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: LD_INT 0
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: LD_INT 1
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 0
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 1
20771: NEG
20772: PUSH
20773: LD_INT 0
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 1
20782: NEG
20783: PUSH
20784: LD_INT 1
20786: NEG
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 1
20794: NEG
20795: PUSH
20796: LD_INT 2
20798: NEG
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: LD_INT 2
20809: NEG
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 2
20838: PUSH
20839: LD_INT 1
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: LD_INT 2
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 2
20889: NEG
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 2
20900: NEG
20901: PUSH
20902: LD_INT 1
20904: NEG
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 2
20912: NEG
20913: PUSH
20914: LD_INT 2
20916: NEG
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 2
20924: NEG
20925: PUSH
20926: LD_INT 3
20928: NEG
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 3
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 3
20948: NEG
20949: PUSH
20950: LD_INT 1
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 3
20960: NEG
20961: PUSH
20962: LD_INT 2
20964: NEG
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20995: LD_ADDR_VAR 0 29
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: NEG
21054: PUSH
21055: LD_INT 0
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 1
21064: NEG
21065: PUSH
21066: LD_INT 1
21068: NEG
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 1
21076: NEG
21077: PUSH
21078: LD_INT 2
21080: NEG
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: LD_INT 2
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: LD_INT 1
21102: NEG
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 2
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 0
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 1
21150: NEG
21151: PUSH
21152: LD_INT 1
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 2
21161: NEG
21162: PUSH
21163: LD_INT 1
21165: NEG
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 2
21173: NEG
21174: PUSH
21175: LD_INT 2
21177: NEG
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 2
21185: NEG
21186: PUSH
21187: LD_INT 3
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: LD_INT 1
21200: NEG
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 3
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: LD_INT 3
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 3
21239: NEG
21240: PUSH
21241: LD_INT 2
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21274: LD_ADDR_VAR 0 30
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 1
21294: NEG
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 1
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 0
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: NEG
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: NEG
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: NEG
21356: PUSH
21357: LD_INT 2
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: LD_INT 2
21370: NEG
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 2
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 2
21399: PUSH
21400: LD_INT 1
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 2
21409: PUSH
21410: LD_INT 2
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 1
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 2
21440: NEG
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 2
21451: NEG
21452: PUSH
21453: LD_INT 1
21455: NEG
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 1
21463: NEG
21464: PUSH
21465: LD_INT 3
21467: NEG
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: LD_INT 2
21478: NEG
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 3
21486: PUSH
21487: LD_INT 2
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 2
21496: PUSH
21497: LD_INT 3
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 2
21506: NEG
21507: PUSH
21508: LD_INT 1
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 3
21517: NEG
21518: PUSH
21519: LD_INT 1
21521: NEG
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21552: LD_ADDR_VAR 0 31
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 0
21569: PUSH
21570: LD_INT 1
21572: NEG
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 0
21600: PUSH
21601: LD_INT 1
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: NEG
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 1
21621: NEG
21622: PUSH
21623: LD_INT 1
21625: NEG
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: NEG
21634: PUSH
21635: LD_INT 2
21637: NEG
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: LD_INT 1
21648: NEG
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 2
21666: PUSH
21667: LD_INT 1
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 2
21676: PUSH
21677: LD_INT 2
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: LD_INT 2
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 1
21706: NEG
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 2
21717: NEG
21718: PUSH
21719: LD_INT 1
21721: NEG
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 2
21729: NEG
21730: PUSH
21731: LD_INT 2
21733: NEG
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 2
21741: NEG
21742: PUSH
21743: LD_INT 3
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 2
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 3
21764: PUSH
21765: LD_INT 1
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: LD_INT 3
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 3
21795: NEG
21796: PUSH
21797: LD_INT 2
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21830: LD_ADDR_VAR 0 32
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 0
21847: PUSH
21848: LD_INT 1
21850: NEG
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: PUSH
21869: LD_INT 1
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 1
21888: NEG
21889: PUSH
21890: LD_INT 0
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 1
21899: NEG
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 1
21911: NEG
21912: PUSH
21913: LD_INT 2
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: LD_INT 2
21926: NEG
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 2
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 2
21955: PUSH
21956: LD_INT 2
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 2
21996: NEG
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 2
22007: NEG
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: LD_INT 3
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: LD_INT 2
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 3
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 2
22062: NEG
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 3
22073: NEG
22074: PUSH
22075: LD_INT 1
22077: NEG
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22108: LD_ADDR_VAR 0 33
22112: PUSH
22113: LD_INT 0
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 0
22125: PUSH
22126: LD_INT 1
22128: NEG
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 1
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 0
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 1
22166: NEG
22167: PUSH
22168: LD_INT 0
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 1
22177: NEG
22178: PUSH
22179: LD_INT 1
22181: NEG
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: NEG
22190: PUSH
22191: LD_INT 2
22193: NEG
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 2
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 1
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 2
22263: NEG
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 2
22274: NEG
22275: PUSH
22276: LD_INT 1
22278: NEG
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 2
22286: NEG
22287: PUSH
22288: LD_INT 2
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 2
22298: NEG
22299: PUSH
22300: LD_INT 3
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 2
22310: PUSH
22311: LD_INT 1
22313: NEG
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 3
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: LD_INT 3
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: NEG
22342: PUSH
22343: LD_INT 2
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 3
22352: NEG
22353: PUSH
22354: LD_INT 2
22356: NEG
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22387: LD_ADDR_VAR 0 34
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: LD_INT 0
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: LD_INT 0
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: NEG
22457: PUSH
22458: LD_INT 1
22460: NEG
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: NEG
22469: PUSH
22470: LD_INT 2
22472: NEG
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: LD_INT 2
22483: NEG
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 2
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: LD_INT 2
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: LD_INT 1
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 2
22543: NEG
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 2
22554: NEG
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 2
22566: NEG
22567: PUSH
22568: LD_INT 2
22570: NEG
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: LD_INT 3
22582: NEG
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 2
22593: NEG
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 3
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: LD_INT 3
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 2
22621: NEG
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 3
22632: NEG
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22667: LD_ADDR_VAR 0 35
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: LD_INT 1
22687: NEG
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: LD_INT 0
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: LD_INT 0
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: NEG
22737: PUSH
22738: LD_INT 1
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: NEG
22759: PUSH
22760: LD_INT 1
22762: NEG
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22779: LD_ADDR_VAR 0 36
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: LD_INT 1
22799: NEG
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: LD_INT 1
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 1
22848: NEG
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 1
22860: NEG
22861: PUSH
22862: LD_INT 2
22864: NEG
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22891: LD_ADDR_VAR 0 37
22895: PUSH
22896: LD_INT 0
22898: PUSH
22899: LD_INT 0
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: LD_INT 1
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 1
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: LD_INT 1
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: LD_INT 0
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 1
22960: NEG
22961: PUSH
22962: LD_INT 1
22964: NEG
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 1
22983: NEG
22984: PUSH
22985: LD_INT 1
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23003: LD_ADDR_VAR 0 38
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: LD_INT 1
23076: NEG
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: LD_INT 1
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 2
23094: NEG
23095: PUSH
23096: LD_INT 1
23098: NEG
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23115: LD_ADDR_VAR 0 39
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: LD_INT 1
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: LD_INT 2
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23227: LD_ADDR_VAR 0 40
23231: PUSH
23232: LD_INT 0
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: LD_INT 1
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 1
23285: NEG
23286: PUSH
23287: LD_INT 0
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: NEG
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: LD_INT 1
23311: NEG
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23339: LD_ADDR_VAR 0 41
23343: PUSH
23344: LD_INT 0
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 1
23397: NEG
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: NEG
23421: PUSH
23422: LD_INT 2
23424: NEG
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: PUSH
23433: LD_INT 1
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 2
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 1
23473: PUSH
23474: LD_INT 2
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: NEG
23484: PUSH
23485: LD_INT 1
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 2
23494: NEG
23495: PUSH
23496: LD_INT 0
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 2
23505: NEG
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 2
23517: NEG
23518: PUSH
23519: LD_INT 2
23521: NEG
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 2
23529: NEG
23530: PUSH
23531: LD_INT 3
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 3
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 3
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 3
23572: PUSH
23573: LD_INT 2
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 3
23582: PUSH
23583: LD_INT 3
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 2
23592: PUSH
23593: LD_INT 3
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: NEG
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 3
23613: NEG
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 3
23624: NEG
23625: PUSH
23626: LD_INT 1
23628: NEG
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 3
23636: NEG
23637: PUSH
23638: LD_INT 2
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 3
23648: NEG
23649: PUSH
23650: LD_INT 3
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23689: LD_ADDR_VAR 0 42
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 0
23706: PUSH
23707: LD_INT 1
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: LD_INT 0
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: PUSH
23772: LD_INT 2
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 2
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 1
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 2
23814: PUSH
23815: LD_INT 2
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 2
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 2
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: NEG
23868: PUSH
23869: LD_INT 2
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 2
23879: NEG
23880: PUSH
23881: LD_INT 3
23883: NEG
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: LD_INT 3
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: LD_INT 3
23906: NEG
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: LD_INT 2
23917: NEG
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 3
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 3
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: LD_INT 3
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: LD_INT 3
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: LD_INT 3
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 1
23975: NEG
23976: PUSH
23977: LD_INT 2
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 3
23986: NEG
23987: PUSH
23988: LD_INT 2
23990: NEG
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 3
23998: NEG
23999: PUSH
24000: LD_INT 3
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24039: LD_ADDR_VAR 0 43
24043: PUSH
24044: LD_INT 0
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 0
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 0
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 1
24108: NEG
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: LD_INT 2
24124: NEG
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: LD_INT 2
24135: NEG
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: LD_INT 1
24146: NEG
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 2
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 2
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: LD_INT 2
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 2
24205: NEG
24206: PUSH
24207: LD_INT 0
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 2
24216: NEG
24217: PUSH
24218: LD_INT 1
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: LD_INT 3
24232: NEG
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: LD_INT 3
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: LD_INT 2
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 3
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 3
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: LD_INT 3
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 0
24303: PUSH
24304: LD_INT 3
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: NEG
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 3
24335: NEG
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 3
24346: NEG
24347: PUSH
24348: LD_INT 1
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24387: LD_ADDR_VAR 0 44
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: NEG
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: LD_INT 2
24472: NEG
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 1
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 0
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 2
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 2
24511: PUSH
24512: LD_INT 2
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 2
24542: NEG
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: NEG
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 2
24577: NEG
24578: PUSH
24579: LD_INT 3
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 3
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 3
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 3
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 3
24630: PUSH
24631: LD_INT 3
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 2
24640: PUSH
24641: LD_INT 3
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 3
24661: NEG
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 3
24672: NEG
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 3
24684: NEG
24685: PUSH
24686: LD_INT 2
24688: NEG
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 3
24696: NEG
24697: PUSH
24698: LD_INT 3
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24737: LD_ADDR_VAR 0 45
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 0
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: NEG
24796: PUSH
24797: LD_INT 0
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: LD_INT 2
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: LD_INT 2
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: LD_INT 2
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: NEG
24928: PUSH
24929: LD_INT 3
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: LD_INT 3
24943: NEG
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: LD_INT 3
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: LD_INT 2
24965: NEG
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 3
24973: PUSH
24974: LD_INT 2
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 3
24983: PUSH
24984: LD_INT 3
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 3
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 3
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 0
25013: PUSH
25014: LD_INT 3
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 3
25034: NEG
25035: PUSH
25036: LD_INT 2
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 3
25046: NEG
25047: PUSH
25048: LD_INT 3
25050: NEG
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25087: LD_ADDR_VAR 0 46
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: LD_INT 2
25172: NEG
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: LD_INT 2
25183: NEG
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: LD_INT 1
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 2
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 0
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 2
25253: NEG
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 2
25264: NEG
25265: PUSH
25266: LD_INT 1
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: LD_INT 3
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: LD_INT 3
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: LD_INT 2
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 3
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 3
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: LD_INT 3
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: LD_INT 3
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: NEG
25362: PUSH
25363: LD_INT 2
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: NEG
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 3
25383: NEG
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 3
25394: NEG
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25435: LD_ADDR_VAR 0 47
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: LD_INT 1
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: LD_INT 2
25520: NEG
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: LD_INT 2
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: LD_INT 1
25542: NEG
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 2
25550: NEG
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 2
25562: NEG
25563: PUSH
25564: LD_INT 2
25566: NEG
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25586: LD_ADDR_VAR 0 48
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 1
25667: NEG
25668: PUSH
25669: LD_INT 2
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: LD_INT 2
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25733: LD_ADDR_VAR 0 49
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: PUSH
25772: LD_INT 1
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 0
25781: PUSH
25782: LD_INT 1
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 1
25791: NEG
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 2
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 2
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: LD_INT 2
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25877: LD_ADDR_VAR 0 50
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: LD_INT 1
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 2
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26021: LD_ADDR_VAR 0 51
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: NEG
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 2
26144: NEG
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26168: LD_ADDR_VAR 0 52
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: LD_INT 1
26188: NEG
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: LD_INT 0
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: LD_INT 1
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 2
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 2
26272: NEG
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26319: LD_ADDR_VAR 0 53
26323: PUSH
26324: LD_INT 0
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: LD_INT 2
26415: NEG
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 2
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 2
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: LD_INT 2
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 2
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 1
26484: NEG
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 2
26495: NEG
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: NEG
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: LD_INT 2
26522: NEG
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26549: LD_ADDR_VAR 0 54
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: PUSH
26632: LD_INT 2
26634: NEG
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: LD_INT 2
26645: NEG
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 2
26684: PUSH
26685: LD_INT 2
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: LD_INT 2
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: LD_INT 2
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 1
26714: NEG
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 2
26725: NEG
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 2
26736: NEG
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26779: LD_ADDR_VAR 0 55
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: LD_INT 2
26864: NEG
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: LD_INT 2
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 2
26914: PUSH
26915: LD_INT 2
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: LD_INT 2
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: NEG
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: NEG
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: NEG
26967: PUSH
26968: LD_INT 1
26970: NEG
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: LD_INT 2
26982: NEG
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27009: LD_ADDR_VAR 0 56
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: NEG
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: LD_INT 2
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: LD_INT 1
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 2
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 2
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: LD_INT 2
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: LD_INT 2
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: NEG
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: NEG
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: LD_INT 2
27212: NEG
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27239: LD_ADDR_VAR 0 57
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: LD_INT 2
27324: NEG
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 0
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: LD_INT 2
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: NEG
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: LD_INT 2
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27469: LD_ADDR_VAR 0 58
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: LD_INT 2
27554: NEG
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: LD_INT 2
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 2
27604: PUSH
27605: LD_INT 2
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: LD_INT 2
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: NEG
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 2
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27699: LD_ADDR_VAR 0 59
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: LD_INT 1
27719: NEG
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: LD_INT 1
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27787: LD_ADDR_VAR 0 60
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 1
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: NEG
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27875: LD_ADDR_VAR 0 61
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27963: LD_ADDR_VAR 0 62
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: NEG
28033: PUSH
28034: LD_INT 1
28036: NEG
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28051: LD_ADDR_VAR 0 63
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: LD_INT 1
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28139: LD_ADDR_VAR 0 64
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: LD_INT 1
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 1
28197: NEG
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: NEG
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// end ; 1 :
28227: GO 34124
28229: LD_INT 1
28231: DOUBLE
28232: EQUAL
28233: IFTRUE 28237
28235: GO 30860
28237: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28238: LD_ADDR_VAR 0 11
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: LD_INT 3
28249: NEG
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: LD_INT 3
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: LIST
28281: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28282: LD_ADDR_VAR 0 12
28286: PUSH
28287: LD_INT 2
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 3
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 3
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: LIST
28322: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28323: LD_ADDR_VAR 0 13
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 3
28340: PUSH
28341: LD_INT 3
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 2
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: LIST
28362: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28363: LD_ADDR_VAR 0 14
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: LD_INT 3
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: LD_INT 3
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 1
28390: NEG
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28404: LD_ADDR_VAR 0 15
28408: PUSH
28409: LD_INT 2
28411: NEG
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 3
28422: NEG
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 3
28433: NEG
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: LIST
28447: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28448: LD_ADDR_VAR 0 16
28452: PUSH
28453: LD_INT 2
28455: NEG
28456: PUSH
28457: LD_INT 3
28459: NEG
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 3
28467: NEG
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 3
28479: NEG
28480: PUSH
28481: LD_INT 3
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: LIST
28493: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28494: LD_ADDR_VAR 0 17
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: LD_INT 3
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 3
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: LD_INT 2
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28538: LD_ADDR_VAR 0 18
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 3
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 3
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28579: LD_ADDR_VAR 0 19
28583: PUSH
28584: LD_INT 3
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 3
28596: PUSH
28597: LD_INT 3
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 3
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28619: LD_ADDR_VAR 0 20
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 3
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 3
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: LIST
28659: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28660: LD_ADDR_VAR 0 21
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 3
28678: NEG
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 3
28689: NEG
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28704: LD_ADDR_VAR 0 22
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: LD_INT 3
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 3
28723: NEG
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 3
28735: NEG
28736: PUSH
28737: LD_INT 3
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28750: LD_ADDR_VAR 0 23
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 3
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: LD_INT 4
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: LD_INT 3
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: LIST
28793: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28794: LD_ADDR_VAR 0 24
28798: PUSH
28799: LD_INT 3
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 3
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 4
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: LIST
28834: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28835: LD_ADDR_VAR 0 25
28839: PUSH
28840: LD_INT 3
28842: PUSH
28843: LD_INT 3
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 4
28852: PUSH
28853: LD_INT 3
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 3
28862: PUSH
28863: LD_INT 4
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: LIST
28874: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28875: LD_ADDR_VAR 0 26
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: LD_INT 3
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 1
28892: PUSH
28893: LD_INT 4
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: LD_INT 3
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28916: LD_ADDR_VAR 0 27
28920: PUSH
28921: LD_INT 3
28923: NEG
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 3
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 4
28945: NEG
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: LIST
28959: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28960: LD_ADDR_VAR 0 28
28964: PUSH
28965: LD_INT 3
28967: NEG
28968: PUSH
28969: LD_INT 3
28971: NEG
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: NEG
28980: PUSH
28981: LD_INT 4
28983: NEG
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 4
28991: NEG
28992: PUSH
28993: LD_INT 3
28995: NEG
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29006: LD_ADDR_VAR 0 29
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 3
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: LD_INT 3
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: LD_INT 2
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 1
29047: NEG
29048: PUSH
29049: LD_INT 4
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: LD_INT 4
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: PUSH
29071: LD_INT 3
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 1
29081: NEG
29082: PUSH
29083: LD_INT 5
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 5
29096: NEG
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: LD_INT 4
29107: NEG
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: LD_INT 6
29119: NEG
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: LD_INT 6
29130: NEG
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: LD_INT 5
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29161: LD_ADDR_VAR 0 30
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 3
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 3
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 4
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 4
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 4
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 5
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 5
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 5
29261: PUSH
29262: LD_INT 1
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 6
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 6
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29304: LD_ADDR_VAR 0 31
29308: PUSH
29309: LD_INT 3
29311: PUSH
29312: LD_INT 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 3
29321: PUSH
29322: LD_INT 3
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: LD_INT 3
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 4
29341: PUSH
29342: LD_INT 3
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 4
29351: PUSH
29352: LD_INT 4
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: PUSH
29362: LD_INT 4
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 5
29371: PUSH
29372: LD_INT 4
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 5
29381: PUSH
29382: LD_INT 5
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 4
29391: PUSH
29392: LD_INT 5
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 6
29401: PUSH
29402: LD_INT 5
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 6
29411: PUSH
29412: LD_INT 6
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 5
29421: PUSH
29422: LD_INT 6
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29443: LD_ADDR_VAR 0 32
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: LD_INT 3
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: LD_INT 3
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: LD_INT 2
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: LD_INT 4
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: LD_INT 4
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: LD_INT 3
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: LD_INT 5
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: LD_INT 5
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: LD_INT 4
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 6
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: LD_INT 6
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: LD_INT 5
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29586: LD_ADDR_VAR 0 33
29590: PUSH
29591: LD_INT 2
29593: NEG
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 3
29604: NEG
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 3
29615: NEG
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 3
29627: NEG
29628: PUSH
29629: LD_INT 1
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 4
29638: NEG
29639: PUSH
29640: LD_INT 0
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 4
29649: NEG
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 4
29661: NEG
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 5
29672: NEG
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 5
29683: NEG
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 5
29695: NEG
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 6
29706: NEG
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 6
29717: NEG
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29741: LD_ADDR_VAR 0 34
29745: PUSH
29746: LD_INT 2
29748: NEG
29749: PUSH
29750: LD_INT 3
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 3
29760: NEG
29761: PUSH
29762: LD_INT 2
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 3
29772: NEG
29773: PUSH
29774: LD_INT 3
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 3
29784: NEG
29785: PUSH
29786: LD_INT 4
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 4
29796: NEG
29797: PUSH
29798: LD_INT 3
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 4
29808: NEG
29809: PUSH
29810: LD_INT 4
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 4
29820: NEG
29821: PUSH
29822: LD_INT 5
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 5
29832: NEG
29833: PUSH
29834: LD_INT 4
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 5
29844: NEG
29845: PUSH
29846: LD_INT 5
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 5
29856: NEG
29857: PUSH
29858: LD_INT 6
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 6
29868: NEG
29869: PUSH
29870: LD_INT 5
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 6
29880: NEG
29881: PUSH
29882: LD_INT 6
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29904: LD_ADDR_VAR 0 41
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: LD_INT 2
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: LD_INT 3
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: LD_INT 2
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29948: LD_ADDR_VAR 0 42
29952: PUSH
29953: LD_INT 2
29955: PUSH
29956: LD_INT 0
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: LD_INT 1
29968: NEG
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 3
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29989: LD_ADDR_VAR 0 43
29993: PUSH
29994: LD_INT 2
29996: PUSH
29997: LD_INT 2
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 3
30006: PUSH
30007: LD_INT 2
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 2
30016: PUSH
30017: LD_INT 3
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30029: LD_ADDR_VAR 0 44
30033: PUSH
30034: LD_INT 0
30036: PUSH
30037: LD_INT 2
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 1
30056: NEG
30057: PUSH
30058: LD_INT 2
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: LIST
30069: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30070: LD_ADDR_VAR 0 45
30074: PUSH
30075: LD_INT 2
30077: NEG
30078: PUSH
30079: LD_INT 0
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 3
30099: NEG
30100: PUSH
30101: LD_INT 1
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30114: LD_ADDR_VAR 0 46
30118: PUSH
30119: LD_INT 2
30121: NEG
30122: PUSH
30123: LD_INT 2
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 2
30133: NEG
30134: PUSH
30135: LD_INT 3
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 3
30145: NEG
30146: PUSH
30147: LD_INT 2
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30160: LD_ADDR_VAR 0 47
30164: PUSH
30165: LD_INT 2
30167: NEG
30168: PUSH
30169: LD_INT 3
30171: NEG
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: LD_INT 3
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30193: LD_ADDR_VAR 0 48
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: LD_INT 2
30203: NEG
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 2
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30224: LD_ADDR_VAR 0 49
30228: PUSH
30229: LD_INT 3
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 3
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30253: LD_ADDR_VAR 0 50
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 3
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 3
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30282: LD_ADDR_VAR 0 51
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: LD_INT 2
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 2
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30313: LD_ADDR_VAR 0 52
30317: PUSH
30318: LD_INT 3
30320: NEG
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 3
30332: NEG
30333: PUSH
30334: LD_INT 2
30336: NEG
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30346: LD_ADDR_VAR 0 53
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PUSH
30355: LD_INT 3
30357: NEG
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: LD_INT 3
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 2
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: LIST
30389: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30390: LD_ADDR_VAR 0 54
30394: PUSH
30395: LD_INT 2
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 3
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 3
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30431: LD_ADDR_VAR 0 55
30435: PUSH
30436: LD_INT 3
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 3
30448: PUSH
30449: LD_INT 3
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 3
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: LIST
30470: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30471: LD_ADDR_VAR 0 56
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: LD_INT 3
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30512: LD_ADDR_VAR 0 57
30516: PUSH
30517: LD_INT 2
30519: NEG
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 3
30530: NEG
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 3
30541: NEG
30542: PUSH
30543: LD_INT 1
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30556: LD_ADDR_VAR 0 58
30560: PUSH
30561: LD_INT 2
30563: NEG
30564: PUSH
30565: LD_INT 3
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 3
30575: NEG
30576: PUSH
30577: LD_INT 2
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 3
30587: NEG
30588: PUSH
30589: LD_INT 3
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: LIST
30601: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30602: LD_ADDR_VAR 0 59
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: LD_INT 2
30613: NEG
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: LD_INT 2
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30646: LD_ADDR_VAR 0 60
30650: PUSH
30651: LD_INT 1
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 2
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 2
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30687: LD_ADDR_VAR 0 61
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: LD_INT 2
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30727: LD_ADDR_VAR 0 62
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 2
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: NEG
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30768: LD_ADDR_VAR 0 63
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 2
30786: NEG
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 2
30797: NEG
30798: PUSH
30799: LD_INT 1
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30812: LD_ADDR_VAR 0 64
30816: PUSH
30817: LD_INT 1
30819: NEG
30820: PUSH
30821: LD_INT 2
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 2
30843: NEG
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: ST_TO_ADDR
// end ; 2 :
30858: GO 34124
30860: LD_INT 2
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 34123
30868: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30869: LD_ADDR_VAR 0 29
30873: PUSH
30874: LD_INT 4
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 4
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 5
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 5
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 4
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 3
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 3
30937: PUSH
30938: LD_INT 1
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 3
30948: PUSH
30949: LD_INT 2
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 5
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 3
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 3
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 4
30989: PUSH
30990: LD_INT 3
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 4
30999: PUSH
31000: LD_INT 4
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: LD_INT 4
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 2
31019: PUSH
31020: LD_INT 3
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 4
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 2
31049: PUSH
31050: LD_INT 4
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 4
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: LD_INT 3
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 4
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 5
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 5
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 4
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 2
31131: PUSH
31132: LD_INT 5
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 3
31152: NEG
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 3
31163: NEG
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 2
31175: NEG
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 2
31186: NEG
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 3
31197: NEG
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 4
31208: NEG
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 4
31219: NEG
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 4
31231: NEG
31232: PUSH
31233: LD_INT 2
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: NEG
31244: PUSH
31245: LD_INT 2
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 4
31254: NEG
31255: PUSH
31256: LD_INT 4
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 4
31266: NEG
31267: PUSH
31268: LD_INT 5
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 3
31278: NEG
31279: PUSH
31280: LD_INT 4
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 3
31290: NEG
31291: PUSH
31292: LD_INT 3
31294: NEG
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 4
31302: NEG
31303: PUSH
31304: LD_INT 3
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 5
31314: NEG
31315: PUSH
31316: LD_INT 4
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 5
31326: NEG
31327: PUSH
31328: LD_INT 5
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 3
31338: NEG
31339: PUSH
31340: LD_INT 5
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 5
31350: NEG
31351: PUSH
31352: LD_INT 3
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31407: LD_ADDR_VAR 0 30
31411: PUSH
31412: LD_INT 4
31414: PUSH
31415: LD_INT 4
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 4
31424: PUSH
31425: LD_INT 3
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 5
31434: PUSH
31435: LD_INT 4
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 5
31444: PUSH
31445: LD_INT 5
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 4
31454: PUSH
31455: LD_INT 5
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: LD_INT 4
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 3
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 5
31484: PUSH
31485: LD_INT 3
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: LD_INT 5
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: LD_INT 3
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: LD_INT 2
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: LD_INT 3
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: LD_INT 4
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: LD_INT 4
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: LD_INT 3
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 4
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 4
31597: NEG
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 4
31608: NEG
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 3
31620: NEG
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 3
31631: NEG
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 4
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 5
31653: NEG
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 5
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 5
31676: NEG
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 3
31688: NEG
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 3
31699: NEG
31700: PUSH
31701: LD_INT 3
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 3
31711: NEG
31712: PUSH
31713: LD_INT 4
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 2
31723: NEG
31724: PUSH
31725: LD_INT 3
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: LD_INT 2
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 3
31747: NEG
31748: PUSH
31749: LD_INT 2
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 4
31759: NEG
31760: PUSH
31761: LD_INT 3
31763: NEG
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 4
31771: NEG
31772: PUSH
31773: LD_INT 4
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: LD_INT 4
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 4
31795: NEG
31796: PUSH
31797: LD_INT 2
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 4
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 5
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 4
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 3
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 3
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: LD_INT 4
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: LD_INT 5
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 3
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: LD_INT 5
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31954: LD_ADDR_VAR 0 31
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 4
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: LD_INT 3
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: LD_INT 4
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: LD_INT 5
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 5
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: LD_INT 4
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: LD_INT 3
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: LD_INT 5
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 2
32043: NEG
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 3
32054: NEG
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 3
32065: NEG
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: NEG
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 4
32110: NEG
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 4
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 4
32133: NEG
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 2
32145: NEG
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 4
32156: NEG
32157: PUSH
32158: LD_INT 4
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 4
32168: NEG
32169: PUSH
32170: LD_INT 5
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 3
32180: NEG
32181: PUSH
32182: LD_INT 4
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: NEG
32193: PUSH
32194: LD_INT 3
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 4
32204: NEG
32205: PUSH
32206: LD_INT 3
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 5
32216: NEG
32217: PUSH
32218: LD_INT 4
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 5
32228: NEG
32229: PUSH
32230: LD_INT 5
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 3
32240: NEG
32241: PUSH
32242: LD_INT 5
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 5
32252: NEG
32253: PUSH
32254: LD_INT 3
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: LD_INT 3
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: LD_INT 4
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 3
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 2
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: LD_INT 2
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: LD_INT 3
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: LD_INT 4
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: LD_INT 2
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: LD_INT 4
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 4
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 4
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 5
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 5
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 4
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 3
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 3
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 5
32449: PUSH
32450: LD_INT 2
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32504: LD_ADDR_VAR 0 32
32508: PUSH
32509: LD_INT 4
32511: NEG
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 4
32522: NEG
32523: PUSH
32524: LD_INT 1
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 3
32534: NEG
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 3
32545: NEG
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 4
32556: NEG
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 5
32567: NEG
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 5
32578: NEG
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 5
32590: NEG
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 3
32602: NEG
32603: PUSH
32604: LD_INT 2
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 3
32613: NEG
32614: PUSH
32615: LD_INT 3
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 3
32625: NEG
32626: PUSH
32627: LD_INT 4
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: NEG
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 2
32649: NEG
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 3
32661: NEG
32662: PUSH
32663: LD_INT 2
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 4
32673: NEG
32674: PUSH
32675: LD_INT 3
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 4
32685: NEG
32686: PUSH
32687: LD_INT 4
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 2
32697: NEG
32698: PUSH
32699: LD_INT 4
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 4
32709: NEG
32710: PUSH
32711: LD_INT 2
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: LD_INT 4
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 5
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 4
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: LD_INT 3
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 3
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: LD_INT 4
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: LD_INT 5
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: LD_INT 3
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: NEG
32812: PUSH
32813: LD_INT 5
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 3
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 4
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 4
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 3
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 2
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 2
32895: PUSH
32896: LD_INT 2
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 4
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 4
32916: PUSH
32917: LD_INT 4
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 4
32926: PUSH
32927: LD_INT 3
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 5
32936: PUSH
32937: LD_INT 4
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 5
32946: PUSH
32947: LD_INT 5
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: PUSH
32957: LD_INT 5
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 3
32966: PUSH
32967: LD_INT 4
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 3
32976: PUSH
32977: LD_INT 3
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 5
32986: PUSH
32987: LD_INT 3
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 3
32996: PUSH
32997: LD_INT 5
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33051: LD_ADDR_VAR 0 33
33055: PUSH
33056: LD_INT 4
33058: NEG
33059: PUSH
33060: LD_INT 4
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 4
33070: NEG
33071: PUSH
33072: LD_INT 5
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 3
33082: NEG
33083: PUSH
33084: LD_INT 4
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 3
33094: NEG
33095: PUSH
33096: LD_INT 3
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 4
33106: NEG
33107: PUSH
33108: LD_INT 3
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 5
33118: NEG
33119: PUSH
33120: LD_INT 4
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 5
33130: NEG
33131: PUSH
33132: LD_INT 5
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 3
33142: NEG
33143: PUSH
33144: LD_INT 5
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 5
33154: NEG
33155: PUSH
33156: LD_INT 3
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 3
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 4
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 3
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 2
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: NEG
33222: PUSH
33223: LD_INT 3
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: LD_INT 4
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 2
33256: NEG
33257: PUSH
33258: LD_INT 4
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 4
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 4
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 5
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 5
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 4
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 3
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 3
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: LD_INT 2
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 5
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 3
33361: PUSH
33362: LD_INT 3
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 3
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 4
33381: PUSH
33382: LD_INT 3
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 4
33391: PUSH
33392: LD_INT 4
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: LD_INT 4
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 3
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 2
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 4
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 4
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 4
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: LD_INT 4
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: LD_INT 5
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 5
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: LD_INT 4
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: NEG
33513: PUSH
33514: LD_INT 3
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 2
33523: PUSH
33524: LD_INT 5
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 2
33533: NEG
33534: PUSH
33535: LD_INT 3
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33589: LD_ADDR_VAR 0 34
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: LD_INT 4
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: LD_INT 5
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 4
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: LD_INT 3
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: LD_INT 3
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: LD_INT 4
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: LD_INT 5
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: LD_INT 3
33678: NEG
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 2
33686: NEG
33687: PUSH
33688: LD_INT 5
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 3
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 3
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 4
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 4
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 3
33739: PUSH
33740: LD_INT 1
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: LD_INT 2
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 4
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 4
33791: PUSH
33792: LD_INT 4
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 4
33801: PUSH
33802: LD_INT 3
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 5
33811: PUSH
33812: LD_INT 4
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 5
33821: PUSH
33822: LD_INT 5
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 4
33831: PUSH
33832: LD_INT 5
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: PUSH
33842: LD_INT 4
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 3
33851: PUSH
33852: LD_INT 3
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 5
33861: PUSH
33862: LD_INT 3
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: LD_INT 5
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 3
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 3
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: LD_INT 4
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 4
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: NEG
33932: PUSH
33933: LD_INT 3
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 2
33953: PUSH
33954: LD_INT 4
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: NEG
33964: PUSH
33965: LD_INT 2
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 4
33974: NEG
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 4
33985: NEG
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 3
33997: NEG
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 3
34008: NEG
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 4
34019: NEG
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 5
34030: NEG
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 5
34041: NEG
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 5
34053: NEG
34054: PUSH
34055: LD_INT 2
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 3
34065: NEG
34066: PUSH
34067: LD_INT 2
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: ST_TO_ADDR
// end ; end ;
34121: GO 34124
34123: POP
// case btype of b_depot , b_warehouse :
34124: LD_VAR 0 1
34128: PUSH
34129: LD_INT 0
34131: DOUBLE
34132: EQUAL
34133: IFTRUE 34143
34135: LD_INT 1
34137: DOUBLE
34138: EQUAL
34139: IFTRUE 34143
34141: GO 34344
34143: POP
// case nation of nation_american :
34144: LD_VAR 0 5
34148: PUSH
34149: LD_INT 1
34151: DOUBLE
34152: EQUAL
34153: IFTRUE 34157
34155: GO 34213
34157: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34158: LD_ADDR_VAR 0 9
34162: PUSH
34163: LD_VAR 0 11
34167: PUSH
34168: LD_VAR 0 12
34172: PUSH
34173: LD_VAR 0 13
34177: PUSH
34178: LD_VAR 0 14
34182: PUSH
34183: LD_VAR 0 15
34187: PUSH
34188: LD_VAR 0 16
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: PUSH
34201: LD_VAR 0 4
34205: PUSH
34206: LD_INT 1
34208: PLUS
34209: ARRAY
34210: ST_TO_ADDR
34211: GO 34342
34213: LD_INT 2
34215: DOUBLE
34216: EQUAL
34217: IFTRUE 34221
34219: GO 34277
34221: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34222: LD_ADDR_VAR 0 9
34226: PUSH
34227: LD_VAR 0 17
34231: PUSH
34232: LD_VAR 0 18
34236: PUSH
34237: LD_VAR 0 19
34241: PUSH
34242: LD_VAR 0 20
34246: PUSH
34247: LD_VAR 0 21
34251: PUSH
34252: LD_VAR 0 22
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: PUSH
34265: LD_VAR 0 4
34269: PUSH
34270: LD_INT 1
34272: PLUS
34273: ARRAY
34274: ST_TO_ADDR
34275: GO 34342
34277: LD_INT 3
34279: DOUBLE
34280: EQUAL
34281: IFTRUE 34285
34283: GO 34341
34285: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34286: LD_ADDR_VAR 0 9
34290: PUSH
34291: LD_VAR 0 23
34295: PUSH
34296: LD_VAR 0 24
34300: PUSH
34301: LD_VAR 0 25
34305: PUSH
34306: LD_VAR 0 26
34310: PUSH
34311: LD_VAR 0 27
34315: PUSH
34316: LD_VAR 0 28
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: PUSH
34329: LD_VAR 0 4
34333: PUSH
34334: LD_INT 1
34336: PLUS
34337: ARRAY
34338: ST_TO_ADDR
34339: GO 34342
34341: POP
34342: GO 34897
34344: LD_INT 2
34346: DOUBLE
34347: EQUAL
34348: IFTRUE 34358
34350: LD_INT 3
34352: DOUBLE
34353: EQUAL
34354: IFTRUE 34358
34356: GO 34414
34358: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34359: LD_ADDR_VAR 0 9
34363: PUSH
34364: LD_VAR 0 29
34368: PUSH
34369: LD_VAR 0 30
34373: PUSH
34374: LD_VAR 0 31
34378: PUSH
34379: LD_VAR 0 32
34383: PUSH
34384: LD_VAR 0 33
34388: PUSH
34389: LD_VAR 0 34
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: PUSH
34402: LD_VAR 0 4
34406: PUSH
34407: LD_INT 1
34409: PLUS
34410: ARRAY
34411: ST_TO_ADDR
34412: GO 34897
34414: LD_INT 16
34416: DOUBLE
34417: EQUAL
34418: IFTRUE 34476
34420: LD_INT 17
34422: DOUBLE
34423: EQUAL
34424: IFTRUE 34476
34426: LD_INT 18
34428: DOUBLE
34429: EQUAL
34430: IFTRUE 34476
34432: LD_INT 19
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34476
34438: LD_INT 22
34440: DOUBLE
34441: EQUAL
34442: IFTRUE 34476
34444: LD_INT 20
34446: DOUBLE
34447: EQUAL
34448: IFTRUE 34476
34450: LD_INT 21
34452: DOUBLE
34453: EQUAL
34454: IFTRUE 34476
34456: LD_INT 23
34458: DOUBLE
34459: EQUAL
34460: IFTRUE 34476
34462: LD_INT 24
34464: DOUBLE
34465: EQUAL
34466: IFTRUE 34476
34468: LD_INT 25
34470: DOUBLE
34471: EQUAL
34472: IFTRUE 34476
34474: GO 34532
34476: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34477: LD_ADDR_VAR 0 9
34481: PUSH
34482: LD_VAR 0 35
34486: PUSH
34487: LD_VAR 0 36
34491: PUSH
34492: LD_VAR 0 37
34496: PUSH
34497: LD_VAR 0 38
34501: PUSH
34502: LD_VAR 0 39
34506: PUSH
34507: LD_VAR 0 40
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: PUSH
34520: LD_VAR 0 4
34524: PUSH
34525: LD_INT 1
34527: PLUS
34528: ARRAY
34529: ST_TO_ADDR
34530: GO 34897
34532: LD_INT 6
34534: DOUBLE
34535: EQUAL
34536: IFTRUE 34588
34538: LD_INT 7
34540: DOUBLE
34541: EQUAL
34542: IFTRUE 34588
34544: LD_INT 8
34546: DOUBLE
34547: EQUAL
34548: IFTRUE 34588
34550: LD_INT 13
34552: DOUBLE
34553: EQUAL
34554: IFTRUE 34588
34556: LD_INT 12
34558: DOUBLE
34559: EQUAL
34560: IFTRUE 34588
34562: LD_INT 15
34564: DOUBLE
34565: EQUAL
34566: IFTRUE 34588
34568: LD_INT 11
34570: DOUBLE
34571: EQUAL
34572: IFTRUE 34588
34574: LD_INT 14
34576: DOUBLE
34577: EQUAL
34578: IFTRUE 34588
34580: LD_INT 10
34582: DOUBLE
34583: EQUAL
34584: IFTRUE 34588
34586: GO 34644
34588: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34589: LD_ADDR_VAR 0 9
34593: PUSH
34594: LD_VAR 0 41
34598: PUSH
34599: LD_VAR 0 42
34603: PUSH
34604: LD_VAR 0 43
34608: PUSH
34609: LD_VAR 0 44
34613: PUSH
34614: LD_VAR 0 45
34618: PUSH
34619: LD_VAR 0 46
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: PUSH
34632: LD_VAR 0 4
34636: PUSH
34637: LD_INT 1
34639: PLUS
34640: ARRAY
34641: ST_TO_ADDR
34642: GO 34897
34644: LD_INT 36
34646: DOUBLE
34647: EQUAL
34648: IFTRUE 34652
34650: GO 34708
34652: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34653: LD_ADDR_VAR 0 9
34657: PUSH
34658: LD_VAR 0 47
34662: PUSH
34663: LD_VAR 0 48
34667: PUSH
34668: LD_VAR 0 49
34672: PUSH
34673: LD_VAR 0 50
34677: PUSH
34678: LD_VAR 0 51
34682: PUSH
34683: LD_VAR 0 52
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: PUSH
34696: LD_VAR 0 4
34700: PUSH
34701: LD_INT 1
34703: PLUS
34704: ARRAY
34705: ST_TO_ADDR
34706: GO 34897
34708: LD_INT 4
34710: DOUBLE
34711: EQUAL
34712: IFTRUE 34734
34714: LD_INT 5
34716: DOUBLE
34717: EQUAL
34718: IFTRUE 34734
34720: LD_INT 34
34722: DOUBLE
34723: EQUAL
34724: IFTRUE 34734
34726: LD_INT 37
34728: DOUBLE
34729: EQUAL
34730: IFTRUE 34734
34732: GO 34790
34734: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34735: LD_ADDR_VAR 0 9
34739: PUSH
34740: LD_VAR 0 53
34744: PUSH
34745: LD_VAR 0 54
34749: PUSH
34750: LD_VAR 0 55
34754: PUSH
34755: LD_VAR 0 56
34759: PUSH
34760: LD_VAR 0 57
34764: PUSH
34765: LD_VAR 0 58
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: PUSH
34778: LD_VAR 0 4
34782: PUSH
34783: LD_INT 1
34785: PLUS
34786: ARRAY
34787: ST_TO_ADDR
34788: GO 34897
34790: LD_INT 31
34792: DOUBLE
34793: EQUAL
34794: IFTRUE 34840
34796: LD_INT 32
34798: DOUBLE
34799: EQUAL
34800: IFTRUE 34840
34802: LD_INT 33
34804: DOUBLE
34805: EQUAL
34806: IFTRUE 34840
34808: LD_INT 27
34810: DOUBLE
34811: EQUAL
34812: IFTRUE 34840
34814: LD_INT 26
34816: DOUBLE
34817: EQUAL
34818: IFTRUE 34840
34820: LD_INT 28
34822: DOUBLE
34823: EQUAL
34824: IFTRUE 34840
34826: LD_INT 29
34828: DOUBLE
34829: EQUAL
34830: IFTRUE 34840
34832: LD_INT 30
34834: DOUBLE
34835: EQUAL
34836: IFTRUE 34840
34838: GO 34896
34840: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34841: LD_ADDR_VAR 0 9
34845: PUSH
34846: LD_VAR 0 59
34850: PUSH
34851: LD_VAR 0 60
34855: PUSH
34856: LD_VAR 0 61
34860: PUSH
34861: LD_VAR 0 62
34865: PUSH
34866: LD_VAR 0 63
34870: PUSH
34871: LD_VAR 0 64
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: PUSH
34884: LD_VAR 0 4
34888: PUSH
34889: LD_INT 1
34891: PLUS
34892: ARRAY
34893: ST_TO_ADDR
34894: GO 34897
34896: POP
// temp_list2 = [ ] ;
34897: LD_ADDR_VAR 0 10
34901: PUSH
34902: EMPTY
34903: ST_TO_ADDR
// for i in temp_list do
34904: LD_ADDR_VAR 0 8
34908: PUSH
34909: LD_VAR 0 9
34913: PUSH
34914: FOR_IN
34915: IFFALSE 34967
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34917: LD_ADDR_VAR 0 10
34921: PUSH
34922: LD_VAR 0 10
34926: PUSH
34927: LD_VAR 0 8
34931: PUSH
34932: LD_INT 1
34934: ARRAY
34935: PUSH
34936: LD_VAR 0 2
34940: PLUS
34941: PUSH
34942: LD_VAR 0 8
34946: PUSH
34947: LD_INT 2
34949: ARRAY
34950: PUSH
34951: LD_VAR 0 3
34955: PLUS
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: EMPTY
34962: LIST
34963: ADD
34964: ST_TO_ADDR
34965: GO 34914
34967: POP
34968: POP
// result = temp_list2 ;
34969: LD_ADDR_VAR 0 7
34973: PUSH
34974: LD_VAR 0 10
34978: ST_TO_ADDR
// end ;
34979: LD_VAR 0 7
34983: RET
// export function EnemyInRange ( unit , dist ) ; begin
34984: LD_INT 0
34986: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34987: LD_ADDR_VAR 0 3
34991: PUSH
34992: LD_VAR 0 1
34996: PPUSH
34997: CALL_OW 255
35001: PPUSH
35002: LD_VAR 0 1
35006: PPUSH
35007: CALL_OW 250
35011: PPUSH
35012: LD_VAR 0 1
35016: PPUSH
35017: CALL_OW 251
35021: PPUSH
35022: LD_VAR 0 2
35026: PPUSH
35027: CALL 8755 0 4
35031: PUSH
35032: LD_INT 4
35034: ARRAY
35035: ST_TO_ADDR
// end ;
35036: LD_VAR 0 3
35040: RET
// export function PlayerSeeMe ( unit ) ; begin
35041: LD_INT 0
35043: PPUSH
// result := See ( your_side , unit ) ;
35044: LD_ADDR_VAR 0 2
35048: PUSH
35049: LD_OWVAR 2
35053: PPUSH
35054: LD_VAR 0 1
35058: PPUSH
35059: CALL_OW 292
35063: ST_TO_ADDR
// end ;
35064: LD_VAR 0 2
35068: RET
// export function ReverseDir ( unit ) ; begin
35069: LD_INT 0
35071: PPUSH
// if not unit then
35072: LD_VAR 0 1
35076: NOT
35077: IFFALSE 35081
// exit ;
35079: GO 35104
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35081: LD_ADDR_VAR 0 2
35085: PUSH
35086: LD_VAR 0 1
35090: PPUSH
35091: CALL_OW 254
35095: PUSH
35096: LD_INT 3
35098: PLUS
35099: PUSH
35100: LD_INT 6
35102: MOD
35103: ST_TO_ADDR
// end ;
35104: LD_VAR 0 2
35108: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
35109: LD_INT 0
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
// if not hexes then
35116: LD_VAR 0 2
35120: NOT
35121: IFFALSE 35125
// exit ;
35123: GO 35273
// dist := 9999 ;
35125: LD_ADDR_VAR 0 5
35129: PUSH
35130: LD_INT 9999
35132: ST_TO_ADDR
// for i = 1 to hexes do
35133: LD_ADDR_VAR 0 4
35137: PUSH
35138: DOUBLE
35139: LD_INT 1
35141: DEC
35142: ST_TO_ADDR
35143: LD_VAR 0 2
35147: PUSH
35148: FOR_TO
35149: IFFALSE 35261
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
35151: LD_VAR 0 1
35155: PPUSH
35156: LD_VAR 0 2
35160: PUSH
35161: LD_VAR 0 4
35165: ARRAY
35166: PUSH
35167: LD_INT 1
35169: ARRAY
35170: PPUSH
35171: LD_VAR 0 2
35175: PUSH
35176: LD_VAR 0 4
35180: ARRAY
35181: PUSH
35182: LD_INT 2
35184: ARRAY
35185: PPUSH
35186: CALL_OW 297
35190: PUSH
35191: LD_VAR 0 5
35195: LESS
35196: IFFALSE 35259
// begin hex := hexes [ i ] ;
35198: LD_ADDR_VAR 0 7
35202: PUSH
35203: LD_VAR 0 2
35207: PUSH
35208: LD_VAR 0 4
35212: ARRAY
35213: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35214: LD_ADDR_VAR 0 5
35218: PUSH
35219: LD_VAR 0 1
35223: PPUSH
35224: LD_VAR 0 2
35228: PUSH
35229: LD_VAR 0 4
35233: ARRAY
35234: PUSH
35235: LD_INT 1
35237: ARRAY
35238: PPUSH
35239: LD_VAR 0 2
35243: PUSH
35244: LD_VAR 0 4
35248: ARRAY
35249: PUSH
35250: LD_INT 2
35252: ARRAY
35253: PPUSH
35254: CALL_OW 297
35258: ST_TO_ADDR
// end ; end ;
35259: GO 35148
35261: POP
35262: POP
// result := hex ;
35263: LD_ADDR_VAR 0 3
35267: PUSH
35268: LD_VAR 0 7
35272: ST_TO_ADDR
// end ;
35273: LD_VAR 0 3
35277: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35278: LD_INT 0
35280: PPUSH
35281: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35282: LD_VAR 0 1
35286: NOT
35287: PUSH
35288: LD_VAR 0 1
35292: PUSH
35293: LD_INT 21
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 23
35305: PUSH
35306: LD_INT 2
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PPUSH
35317: CALL_OW 69
35321: IN
35322: NOT
35323: OR
35324: IFFALSE 35328
// exit ;
35326: GO 35375
// for i = 1 to 3 do
35328: LD_ADDR_VAR 0 3
35332: PUSH
35333: DOUBLE
35334: LD_INT 1
35336: DEC
35337: ST_TO_ADDR
35338: LD_INT 3
35340: PUSH
35341: FOR_TO
35342: IFFALSE 35373
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35344: LD_VAR 0 1
35348: PPUSH
35349: CALL_OW 250
35353: PPUSH
35354: LD_VAR 0 1
35358: PPUSH
35359: CALL_OW 251
35363: PPUSH
35364: LD_INT 1
35366: PPUSH
35367: CALL_OW 453
35371: GO 35341
35373: POP
35374: POP
// end ;
35375: LD_VAR 0 2
35379: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35380: LD_INT 0
35382: PPUSH
35383: PPUSH
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35388: LD_VAR 0 1
35392: NOT
35393: PUSH
35394: LD_VAR 0 2
35398: NOT
35399: OR
35400: PUSH
35401: LD_VAR 0 1
35405: PPUSH
35406: CALL_OW 314
35410: OR
35411: IFFALSE 35415
// exit ;
35413: GO 35856
// x := GetX ( enemy_unit ) ;
35415: LD_ADDR_VAR 0 7
35419: PUSH
35420: LD_VAR 0 2
35424: PPUSH
35425: CALL_OW 250
35429: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35430: LD_ADDR_VAR 0 8
35434: PUSH
35435: LD_VAR 0 2
35439: PPUSH
35440: CALL_OW 251
35444: ST_TO_ADDR
// if not x or not y then
35445: LD_VAR 0 7
35449: NOT
35450: PUSH
35451: LD_VAR 0 8
35455: NOT
35456: OR
35457: IFFALSE 35461
// exit ;
35459: GO 35856
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35461: LD_ADDR_VAR 0 6
35465: PUSH
35466: LD_VAR 0 7
35470: PPUSH
35471: LD_INT 0
35473: PPUSH
35474: LD_INT 4
35476: PPUSH
35477: CALL_OW 272
35481: PUSH
35482: LD_VAR 0 8
35486: PPUSH
35487: LD_INT 0
35489: PPUSH
35490: LD_INT 4
35492: PPUSH
35493: CALL_OW 273
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_VAR 0 7
35506: PPUSH
35507: LD_INT 1
35509: PPUSH
35510: LD_INT 4
35512: PPUSH
35513: CALL_OW 272
35517: PUSH
35518: LD_VAR 0 8
35522: PPUSH
35523: LD_INT 1
35525: PPUSH
35526: LD_INT 4
35528: PPUSH
35529: CALL_OW 273
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_VAR 0 7
35542: PPUSH
35543: LD_INT 2
35545: PPUSH
35546: LD_INT 4
35548: PPUSH
35549: CALL_OW 272
35553: PUSH
35554: LD_VAR 0 8
35558: PPUSH
35559: LD_INT 2
35561: PPUSH
35562: LD_INT 4
35564: PPUSH
35565: CALL_OW 273
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_VAR 0 7
35578: PPUSH
35579: LD_INT 3
35581: PPUSH
35582: LD_INT 4
35584: PPUSH
35585: CALL_OW 272
35589: PUSH
35590: LD_VAR 0 8
35594: PPUSH
35595: LD_INT 3
35597: PPUSH
35598: LD_INT 4
35600: PPUSH
35601: CALL_OW 273
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_VAR 0 7
35614: PPUSH
35615: LD_INT 4
35617: PPUSH
35618: LD_INT 4
35620: PPUSH
35621: CALL_OW 272
35625: PUSH
35626: LD_VAR 0 8
35630: PPUSH
35631: LD_INT 4
35633: PPUSH
35634: LD_INT 4
35636: PPUSH
35637: CALL_OW 273
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_VAR 0 7
35650: PPUSH
35651: LD_INT 5
35653: PPUSH
35654: LD_INT 4
35656: PPUSH
35657: CALL_OW 272
35661: PUSH
35662: LD_VAR 0 8
35666: PPUSH
35667: LD_INT 5
35669: PPUSH
35670: LD_INT 4
35672: PPUSH
35673: CALL_OW 273
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: ST_TO_ADDR
// for i = tmp downto 1 do
35690: LD_ADDR_VAR 0 4
35694: PUSH
35695: DOUBLE
35696: LD_VAR 0 6
35700: INC
35701: ST_TO_ADDR
35702: LD_INT 1
35704: PUSH
35705: FOR_DOWNTO
35706: IFFALSE 35807
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35708: LD_VAR 0 6
35712: PUSH
35713: LD_VAR 0 4
35717: ARRAY
35718: PUSH
35719: LD_INT 1
35721: ARRAY
35722: PPUSH
35723: LD_VAR 0 6
35727: PUSH
35728: LD_VAR 0 4
35732: ARRAY
35733: PUSH
35734: LD_INT 2
35736: ARRAY
35737: PPUSH
35738: CALL_OW 488
35742: NOT
35743: PUSH
35744: LD_VAR 0 6
35748: PUSH
35749: LD_VAR 0 4
35753: ARRAY
35754: PUSH
35755: LD_INT 1
35757: ARRAY
35758: PPUSH
35759: LD_VAR 0 6
35763: PUSH
35764: LD_VAR 0 4
35768: ARRAY
35769: PUSH
35770: LD_INT 2
35772: ARRAY
35773: PPUSH
35774: CALL_OW 428
35778: PUSH
35779: LD_INT 0
35781: NONEQUAL
35782: OR
35783: IFFALSE 35805
// tmp := Delete ( tmp , i ) ;
35785: LD_ADDR_VAR 0 6
35789: PUSH
35790: LD_VAR 0 6
35794: PPUSH
35795: LD_VAR 0 4
35799: PPUSH
35800: CALL_OW 3
35804: ST_TO_ADDR
35805: GO 35705
35807: POP
35808: POP
// j := GetClosestHex ( unit , tmp ) ;
35809: LD_ADDR_VAR 0 5
35813: PUSH
35814: LD_VAR 0 1
35818: PPUSH
35819: LD_VAR 0 6
35823: PPUSH
35824: CALL 35109 0 2
35828: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35829: LD_VAR 0 1
35833: PPUSH
35834: LD_VAR 0 5
35838: PUSH
35839: LD_INT 1
35841: ARRAY
35842: PPUSH
35843: LD_VAR 0 5
35847: PUSH
35848: LD_INT 2
35850: ARRAY
35851: PPUSH
35852: CALL_OW 111
// end ;
35856: LD_VAR 0 3
35860: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35861: LD_INT 0
35863: PPUSH
35864: PPUSH
35865: PPUSH
// uc_side = 0 ;
35866: LD_ADDR_OWVAR 20
35870: PUSH
35871: LD_INT 0
35873: ST_TO_ADDR
// uc_nation = 0 ;
35874: LD_ADDR_OWVAR 21
35878: PUSH
35879: LD_INT 0
35881: ST_TO_ADDR
// InitHc_All ( ) ;
35882: CALL_OW 584
// InitVc ;
35886: CALL_OW 20
// if mastodonts then
35890: LD_VAR 0 6
35894: IFFALSE 35961
// for i = 1 to mastodonts do
35896: LD_ADDR_VAR 0 11
35900: PUSH
35901: DOUBLE
35902: LD_INT 1
35904: DEC
35905: ST_TO_ADDR
35906: LD_VAR 0 6
35910: PUSH
35911: FOR_TO
35912: IFFALSE 35959
// begin vc_chassis := 31 ;
35914: LD_ADDR_OWVAR 37
35918: PUSH
35919: LD_INT 31
35921: ST_TO_ADDR
// vc_control := control_rider ;
35922: LD_ADDR_OWVAR 38
35926: PUSH
35927: LD_INT 4
35929: ST_TO_ADDR
// animal := CreateVehicle ;
35930: LD_ADDR_VAR 0 12
35934: PUSH
35935: CALL_OW 45
35939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35940: LD_VAR 0 12
35944: PPUSH
35945: LD_VAR 0 8
35949: PPUSH
35950: LD_INT 0
35952: PPUSH
35953: CALL 38149 0 3
// end ;
35957: GO 35911
35959: POP
35960: POP
// if horses then
35961: LD_VAR 0 5
35965: IFFALSE 36032
// for i = 1 to horses do
35967: LD_ADDR_VAR 0 11
35971: PUSH
35972: DOUBLE
35973: LD_INT 1
35975: DEC
35976: ST_TO_ADDR
35977: LD_VAR 0 5
35981: PUSH
35982: FOR_TO
35983: IFFALSE 36030
// begin hc_class := 21 ;
35985: LD_ADDR_OWVAR 28
35989: PUSH
35990: LD_INT 21
35992: ST_TO_ADDR
// hc_gallery :=  ;
35993: LD_ADDR_OWVAR 33
35997: PUSH
35998: LD_STRING 
36000: ST_TO_ADDR
// animal := CreateHuman ;
36001: LD_ADDR_VAR 0 12
36005: PUSH
36006: CALL_OW 44
36010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36011: LD_VAR 0 12
36015: PPUSH
36016: LD_VAR 0 8
36020: PPUSH
36021: LD_INT 0
36023: PPUSH
36024: CALL 38149 0 3
// end ;
36028: GO 35982
36030: POP
36031: POP
// if birds then
36032: LD_VAR 0 1
36036: IFFALSE 36103
// for i = 1 to birds do
36038: LD_ADDR_VAR 0 11
36042: PUSH
36043: DOUBLE
36044: LD_INT 1
36046: DEC
36047: ST_TO_ADDR
36048: LD_VAR 0 1
36052: PUSH
36053: FOR_TO
36054: IFFALSE 36101
// begin hc_class = 18 ;
36056: LD_ADDR_OWVAR 28
36060: PUSH
36061: LD_INT 18
36063: ST_TO_ADDR
// hc_gallery =  ;
36064: LD_ADDR_OWVAR 33
36068: PUSH
36069: LD_STRING 
36071: ST_TO_ADDR
// animal := CreateHuman ;
36072: LD_ADDR_VAR 0 12
36076: PUSH
36077: CALL_OW 44
36081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36082: LD_VAR 0 12
36086: PPUSH
36087: LD_VAR 0 8
36091: PPUSH
36092: LD_INT 0
36094: PPUSH
36095: CALL 38149 0 3
// end ;
36099: GO 36053
36101: POP
36102: POP
// if tigers then
36103: LD_VAR 0 2
36107: IFFALSE 36191
// for i = 1 to tigers do
36109: LD_ADDR_VAR 0 11
36113: PUSH
36114: DOUBLE
36115: LD_INT 1
36117: DEC
36118: ST_TO_ADDR
36119: LD_VAR 0 2
36123: PUSH
36124: FOR_TO
36125: IFFALSE 36189
// begin hc_class = class_tiger ;
36127: LD_ADDR_OWVAR 28
36131: PUSH
36132: LD_INT 14
36134: ST_TO_ADDR
// hc_gallery =  ;
36135: LD_ADDR_OWVAR 33
36139: PUSH
36140: LD_STRING 
36142: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36143: LD_ADDR_OWVAR 35
36147: PUSH
36148: LD_INT 7
36150: NEG
36151: PPUSH
36152: LD_INT 7
36154: PPUSH
36155: CALL_OW 12
36159: ST_TO_ADDR
// animal := CreateHuman ;
36160: LD_ADDR_VAR 0 12
36164: PUSH
36165: CALL_OW 44
36169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36170: LD_VAR 0 12
36174: PPUSH
36175: LD_VAR 0 8
36179: PPUSH
36180: LD_INT 0
36182: PPUSH
36183: CALL 38149 0 3
// end ;
36187: GO 36124
36189: POP
36190: POP
// if apemans then
36191: LD_VAR 0 3
36195: IFFALSE 36318
// for i = 1 to apemans do
36197: LD_ADDR_VAR 0 11
36201: PUSH
36202: DOUBLE
36203: LD_INT 1
36205: DEC
36206: ST_TO_ADDR
36207: LD_VAR 0 3
36211: PUSH
36212: FOR_TO
36213: IFFALSE 36316
// begin hc_class = class_apeman ;
36215: LD_ADDR_OWVAR 28
36219: PUSH
36220: LD_INT 12
36222: ST_TO_ADDR
// hc_gallery =  ;
36223: LD_ADDR_OWVAR 33
36227: PUSH
36228: LD_STRING 
36230: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
36231: LD_ADDR_OWVAR 35
36235: PUSH
36236: LD_INT 5
36238: NEG
36239: PPUSH
36240: LD_INT 5
36242: PPUSH
36243: CALL_OW 12
36247: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36248: LD_ADDR_OWVAR 31
36252: PUSH
36253: LD_INT 1
36255: PPUSH
36256: LD_INT 3
36258: PPUSH
36259: CALL_OW 12
36263: PUSH
36264: LD_INT 1
36266: PPUSH
36267: LD_INT 3
36269: PPUSH
36270: CALL_OW 12
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: ST_TO_ADDR
// animal := CreateHuman ;
36287: LD_ADDR_VAR 0 12
36291: PUSH
36292: CALL_OW 44
36296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36297: LD_VAR 0 12
36301: PPUSH
36302: LD_VAR 0 8
36306: PPUSH
36307: LD_INT 0
36309: PPUSH
36310: CALL 38149 0 3
// end ;
36314: GO 36212
36316: POP
36317: POP
// if enchidnas then
36318: LD_VAR 0 4
36322: IFFALSE 36389
// for i = 1 to enchidnas do
36324: LD_ADDR_VAR 0 11
36328: PUSH
36329: DOUBLE
36330: LD_INT 1
36332: DEC
36333: ST_TO_ADDR
36334: LD_VAR 0 4
36338: PUSH
36339: FOR_TO
36340: IFFALSE 36387
// begin hc_class = 13 ;
36342: LD_ADDR_OWVAR 28
36346: PUSH
36347: LD_INT 13
36349: ST_TO_ADDR
// hc_gallery =  ;
36350: LD_ADDR_OWVAR 33
36354: PUSH
36355: LD_STRING 
36357: ST_TO_ADDR
// animal := CreateHuman ;
36358: LD_ADDR_VAR 0 12
36362: PUSH
36363: CALL_OW 44
36367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36368: LD_VAR 0 12
36372: PPUSH
36373: LD_VAR 0 8
36377: PPUSH
36378: LD_INT 0
36380: PPUSH
36381: CALL 38149 0 3
// end ;
36385: GO 36339
36387: POP
36388: POP
// if fishes then
36389: LD_VAR 0 7
36393: IFFALSE 36460
// for i = 1 to fishes do
36395: LD_ADDR_VAR 0 11
36399: PUSH
36400: DOUBLE
36401: LD_INT 1
36403: DEC
36404: ST_TO_ADDR
36405: LD_VAR 0 7
36409: PUSH
36410: FOR_TO
36411: IFFALSE 36458
// begin hc_class = 20 ;
36413: LD_ADDR_OWVAR 28
36417: PUSH
36418: LD_INT 20
36420: ST_TO_ADDR
// hc_gallery =  ;
36421: LD_ADDR_OWVAR 33
36425: PUSH
36426: LD_STRING 
36428: ST_TO_ADDR
// animal := CreateHuman ;
36429: LD_ADDR_VAR 0 12
36433: PUSH
36434: CALL_OW 44
36438: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36439: LD_VAR 0 12
36443: PPUSH
36444: LD_VAR 0 9
36448: PPUSH
36449: LD_INT 0
36451: PPUSH
36452: CALL 38149 0 3
// end ;
36456: GO 36410
36458: POP
36459: POP
// end ;
36460: LD_VAR 0 10
36464: RET
// export function WantHeal ( sci , unit ) ; begin
36465: LD_INT 0
36467: PPUSH
// if GetTaskList ( sci ) > 0 then
36468: LD_VAR 0 1
36472: PPUSH
36473: CALL_OW 437
36477: PUSH
36478: LD_INT 0
36480: GREATER
36481: IFFALSE 36551
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36483: LD_VAR 0 1
36487: PPUSH
36488: CALL_OW 437
36492: PUSH
36493: LD_INT 1
36495: ARRAY
36496: PUSH
36497: LD_INT 1
36499: ARRAY
36500: PUSH
36501: LD_STRING l
36503: EQUAL
36504: PUSH
36505: LD_VAR 0 1
36509: PPUSH
36510: CALL_OW 437
36514: PUSH
36515: LD_INT 1
36517: ARRAY
36518: PUSH
36519: LD_INT 4
36521: ARRAY
36522: PUSH
36523: LD_VAR 0 2
36527: EQUAL
36528: AND
36529: IFFALSE 36541
// result := true else
36531: LD_ADDR_VAR 0 3
36535: PUSH
36536: LD_INT 1
36538: ST_TO_ADDR
36539: GO 36549
// result := false ;
36541: LD_ADDR_VAR 0 3
36545: PUSH
36546: LD_INT 0
36548: ST_TO_ADDR
// end else
36549: GO 36559
// result := false ;
36551: LD_ADDR_VAR 0 3
36555: PUSH
36556: LD_INT 0
36558: ST_TO_ADDR
// end ;
36559: LD_VAR 0 3
36563: RET
// export function HealTarget ( sci ) ; begin
36564: LD_INT 0
36566: PPUSH
// if not sci then
36567: LD_VAR 0 1
36571: NOT
36572: IFFALSE 36576
// exit ;
36574: GO 36641
// result := 0 ;
36576: LD_ADDR_VAR 0 2
36580: PUSH
36581: LD_INT 0
36583: ST_TO_ADDR
// if GetTaskList ( sci ) then
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL_OW 437
36593: IFFALSE 36641
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36595: LD_VAR 0 1
36599: PPUSH
36600: CALL_OW 437
36604: PUSH
36605: LD_INT 1
36607: ARRAY
36608: PUSH
36609: LD_INT 1
36611: ARRAY
36612: PUSH
36613: LD_STRING l
36615: EQUAL
36616: IFFALSE 36641
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36618: LD_ADDR_VAR 0 2
36622: PUSH
36623: LD_VAR 0 1
36627: PPUSH
36628: CALL_OW 437
36632: PUSH
36633: LD_INT 1
36635: ARRAY
36636: PUSH
36637: LD_INT 4
36639: ARRAY
36640: ST_TO_ADDR
// end ;
36641: LD_VAR 0 2
36645: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36646: LD_INT 0
36648: PPUSH
36649: PPUSH
36650: PPUSH
36651: PPUSH
// if not base_units then
36652: LD_VAR 0 1
36656: NOT
36657: IFFALSE 36661
// exit ;
36659: GO 36748
// result := false ;
36661: LD_ADDR_VAR 0 2
36665: PUSH
36666: LD_INT 0
36668: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36669: LD_ADDR_VAR 0 5
36673: PUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: LD_INT 21
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PPUSH
36689: CALL_OW 72
36693: ST_TO_ADDR
// if not tmp then
36694: LD_VAR 0 5
36698: NOT
36699: IFFALSE 36703
// exit ;
36701: GO 36748
// for i in tmp do
36703: LD_ADDR_VAR 0 3
36707: PUSH
36708: LD_VAR 0 5
36712: PUSH
36713: FOR_IN
36714: IFFALSE 36746
// begin result := EnemyInRange ( i , 22 ) ;
36716: LD_ADDR_VAR 0 2
36720: PUSH
36721: LD_VAR 0 3
36725: PPUSH
36726: LD_INT 22
36728: PPUSH
36729: CALL 34984 0 2
36733: ST_TO_ADDR
// if result then
36734: LD_VAR 0 2
36738: IFFALSE 36744
// exit ;
36740: POP
36741: POP
36742: GO 36748
// end ;
36744: GO 36713
36746: POP
36747: POP
// end ;
36748: LD_VAR 0 2
36752: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
36753: LD_INT 0
36755: PPUSH
36756: PPUSH
// if not units then
36757: LD_VAR 0 1
36761: NOT
36762: IFFALSE 36766
// exit ;
36764: GO 36836
// result := [ ] ;
36766: LD_ADDR_VAR 0 3
36770: PUSH
36771: EMPTY
36772: ST_TO_ADDR
// for i in units do
36773: LD_ADDR_VAR 0 4
36777: PUSH
36778: LD_VAR 0 1
36782: PUSH
36783: FOR_IN
36784: IFFALSE 36834
// if GetTag ( i ) = tag then
36786: LD_VAR 0 4
36790: PPUSH
36791: CALL_OW 110
36795: PUSH
36796: LD_VAR 0 2
36800: EQUAL
36801: IFFALSE 36832
// result := Insert ( result , result + 1 , i ) ;
36803: LD_ADDR_VAR 0 3
36807: PUSH
36808: LD_VAR 0 3
36812: PPUSH
36813: LD_VAR 0 3
36817: PUSH
36818: LD_INT 1
36820: PLUS
36821: PPUSH
36822: LD_VAR 0 4
36826: PPUSH
36827: CALL_OW 2
36831: ST_TO_ADDR
36832: GO 36783
36834: POP
36835: POP
// end ;
36836: LD_VAR 0 3
36840: RET
// export function IsDriver ( un ) ; begin
36841: LD_INT 0
36843: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36844: LD_ADDR_VAR 0 2
36848: PUSH
36849: LD_VAR 0 1
36853: PUSH
36854: LD_INT 55
36856: PUSH
36857: EMPTY
36858: LIST
36859: PPUSH
36860: CALL_OW 69
36864: IN
36865: ST_TO_ADDR
// end ;
36866: LD_VAR 0 2
36870: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36871: LD_INT 0
36873: PPUSH
36874: PPUSH
// list := [ ] ;
36875: LD_ADDR_VAR 0 5
36879: PUSH
36880: EMPTY
36881: ST_TO_ADDR
// case d of 0 :
36882: LD_VAR 0 3
36886: PUSH
36887: LD_INT 0
36889: DOUBLE
36890: EQUAL
36891: IFTRUE 36895
36893: GO 37028
36895: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36896: LD_ADDR_VAR 0 5
36900: PUSH
36901: LD_VAR 0 1
36905: PUSH
36906: LD_INT 4
36908: MINUS
36909: PUSH
36910: LD_VAR 0 2
36914: PUSH
36915: LD_INT 4
36917: MINUS
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: PUSH
36927: LD_VAR 0 1
36931: PUSH
36932: LD_INT 3
36934: MINUS
36935: PUSH
36936: LD_VAR 0 2
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: PUSH
36949: LD_VAR 0 1
36953: PUSH
36954: LD_INT 4
36956: PLUS
36957: PUSH
36958: LD_VAR 0 2
36962: PUSH
36963: LD_INT 4
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: LIST
36970: PUSH
36971: LD_VAR 0 1
36975: PUSH
36976: LD_INT 3
36978: PLUS
36979: PUSH
36980: LD_VAR 0 2
36984: PUSH
36985: LD_INT 3
36987: PLUS
36988: PUSH
36989: LD_INT 5
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: PUSH
36997: LD_VAR 0 1
37001: PUSH
37002: LD_VAR 0 2
37006: PUSH
37007: LD_INT 4
37009: PLUS
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: ST_TO_ADDR
// end ; 1 :
37026: GO 37726
37028: LD_INT 1
37030: DOUBLE
37031: EQUAL
37032: IFTRUE 37036
37034: GO 37169
37036: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37037: LD_ADDR_VAR 0 5
37041: PUSH
37042: LD_VAR 0 1
37046: PUSH
37047: LD_VAR 0 2
37051: PUSH
37052: LD_INT 4
37054: MINUS
37055: PUSH
37056: LD_INT 3
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: PUSH
37064: LD_VAR 0 1
37068: PUSH
37069: LD_INT 3
37071: MINUS
37072: PUSH
37073: LD_VAR 0 2
37077: PUSH
37078: LD_INT 3
37080: MINUS
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: PUSH
37090: LD_VAR 0 1
37094: PUSH
37095: LD_INT 4
37097: MINUS
37098: PUSH
37099: LD_VAR 0 2
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: PUSH
37112: LD_VAR 0 1
37116: PUSH
37117: LD_VAR 0 2
37121: PUSH
37122: LD_INT 3
37124: PLUS
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: PUSH
37134: LD_VAR 0 1
37138: PUSH
37139: LD_INT 4
37141: PLUS
37142: PUSH
37143: LD_VAR 0 2
37147: PUSH
37148: LD_INT 4
37150: PLUS
37151: PUSH
37152: LD_INT 5
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: ST_TO_ADDR
// end ; 2 :
37167: GO 37726
37169: LD_INT 2
37171: DOUBLE
37172: EQUAL
37173: IFTRUE 37177
37175: GO 37306
37177: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37178: LD_ADDR_VAR 0 5
37182: PUSH
37183: LD_VAR 0 1
37187: PUSH
37188: LD_VAR 0 2
37192: PUSH
37193: LD_INT 3
37195: MINUS
37196: PUSH
37197: LD_INT 3
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: PUSH
37205: LD_VAR 0 1
37209: PUSH
37210: LD_INT 4
37212: PLUS
37213: PUSH
37214: LD_VAR 0 2
37218: PUSH
37219: LD_INT 4
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: PUSH
37227: LD_VAR 0 1
37231: PUSH
37232: LD_VAR 0 2
37236: PUSH
37237: LD_INT 4
37239: PLUS
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: LIST
37248: PUSH
37249: LD_VAR 0 1
37253: PUSH
37254: LD_INT 3
37256: MINUS
37257: PUSH
37258: LD_VAR 0 2
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: PUSH
37271: LD_VAR 0 1
37275: PUSH
37276: LD_INT 4
37278: MINUS
37279: PUSH
37280: LD_VAR 0 2
37284: PUSH
37285: LD_INT 4
37287: MINUS
37288: PUSH
37289: LD_INT 2
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: ST_TO_ADDR
// end ; 3 :
37304: GO 37726
37306: LD_INT 3
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37314
37312: GO 37447
37314: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37315: LD_ADDR_VAR 0 5
37319: PUSH
37320: LD_VAR 0 1
37324: PUSH
37325: LD_INT 3
37327: PLUS
37328: PUSH
37329: LD_VAR 0 2
37333: PUSH
37334: LD_INT 4
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: PUSH
37342: LD_VAR 0 1
37346: PUSH
37347: LD_INT 4
37349: PLUS
37350: PUSH
37351: LD_VAR 0 2
37355: PUSH
37356: LD_INT 4
37358: PLUS
37359: PUSH
37360: LD_INT 5
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: LIST
37367: PUSH
37368: LD_VAR 0 1
37372: PUSH
37373: LD_INT 4
37375: MINUS
37376: PUSH
37377: LD_VAR 0 2
37381: PUSH
37382: LD_INT 1
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: PUSH
37390: LD_VAR 0 1
37394: PUSH
37395: LD_VAR 0 2
37399: PUSH
37400: LD_INT 4
37402: MINUS
37403: PUSH
37404: LD_INT 3
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: PUSH
37412: LD_VAR 0 1
37416: PUSH
37417: LD_INT 3
37419: MINUS
37420: PUSH
37421: LD_VAR 0 2
37425: PUSH
37426: LD_INT 3
37428: MINUS
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: ST_TO_ADDR
// end ; 4 :
37445: GO 37726
37447: LD_INT 4
37449: DOUBLE
37450: EQUAL
37451: IFTRUE 37455
37453: GO 37588
37455: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37456: LD_ADDR_VAR 0 5
37460: PUSH
37461: LD_VAR 0 1
37465: PUSH
37466: LD_VAR 0 2
37470: PUSH
37471: LD_INT 4
37473: PLUS
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: LIST
37482: PUSH
37483: LD_VAR 0 1
37487: PUSH
37488: LD_INT 3
37490: PLUS
37491: PUSH
37492: LD_VAR 0 2
37496: PUSH
37497: LD_INT 3
37499: PLUS
37500: PUSH
37501: LD_INT 5
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: PUSH
37509: LD_VAR 0 1
37513: PUSH
37514: LD_INT 4
37516: PLUS
37517: PUSH
37518: LD_VAR 0 2
37522: PUSH
37523: LD_INT 4
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: PUSH
37531: LD_VAR 0 1
37535: PUSH
37536: LD_VAR 0 2
37540: PUSH
37541: LD_INT 3
37543: MINUS
37544: PUSH
37545: LD_INT 3
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: PUSH
37553: LD_VAR 0 1
37557: PUSH
37558: LD_INT 4
37560: MINUS
37561: PUSH
37562: LD_VAR 0 2
37566: PUSH
37567: LD_INT 4
37569: MINUS
37570: PUSH
37571: LD_INT 2
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: ST_TO_ADDR
// end ; 5 :
37586: GO 37726
37588: LD_INT 5
37590: DOUBLE
37591: EQUAL
37592: IFTRUE 37596
37594: GO 37725
37596: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37597: LD_ADDR_VAR 0 5
37601: PUSH
37602: LD_VAR 0 1
37606: PUSH
37607: LD_INT 4
37609: MINUS
37610: PUSH
37611: LD_VAR 0 2
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: PUSH
37624: LD_VAR 0 1
37628: PUSH
37629: LD_VAR 0 2
37633: PUSH
37634: LD_INT 4
37636: MINUS
37637: PUSH
37638: LD_INT 3
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: PUSH
37646: LD_VAR 0 1
37650: PUSH
37651: LD_INT 4
37653: PLUS
37654: PUSH
37655: LD_VAR 0 2
37659: PUSH
37660: LD_INT 4
37662: PLUS
37663: PUSH
37664: LD_INT 5
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: PUSH
37672: LD_VAR 0 1
37676: PUSH
37677: LD_INT 3
37679: PLUS
37680: PUSH
37681: LD_VAR 0 2
37685: PUSH
37686: LD_INT 4
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: PUSH
37694: LD_VAR 0 1
37698: PUSH
37699: LD_VAR 0 2
37703: PUSH
37704: LD_INT 3
37706: PLUS
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: LIST
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: ST_TO_ADDR
// end ; end ;
37723: GO 37726
37725: POP
// result := list ;
37726: LD_ADDR_VAR 0 4
37730: PUSH
37731: LD_VAR 0 5
37735: ST_TO_ADDR
// end ;
37736: LD_VAR 0 4
37740: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37741: LD_INT 0
37743: PPUSH
37744: PPUSH
37745: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37746: LD_VAR 0 1
37750: NOT
37751: PUSH
37752: LD_VAR 0 2
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: LD_INT 3
37765: PUSH
37766: LD_INT 4
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: IN
37775: NOT
37776: OR
37777: IFFALSE 37781
// exit ;
37779: GO 37873
// tmp := [ ] ;
37781: LD_ADDR_VAR 0 5
37785: PUSH
37786: EMPTY
37787: ST_TO_ADDR
// for i in units do
37788: LD_ADDR_VAR 0 4
37792: PUSH
37793: LD_VAR 0 1
37797: PUSH
37798: FOR_IN
37799: IFFALSE 37842
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
37801: LD_ADDR_VAR 0 5
37805: PUSH
37806: LD_VAR 0 5
37810: PPUSH
37811: LD_VAR 0 5
37815: PUSH
37816: LD_INT 1
37818: PLUS
37819: PPUSH
37820: LD_VAR 0 4
37824: PPUSH
37825: LD_VAR 0 2
37829: PPUSH
37830: CALL_OW 259
37834: PPUSH
37835: CALL_OW 2
37839: ST_TO_ADDR
37840: GO 37798
37842: POP
37843: POP
// if not tmp then
37844: LD_VAR 0 5
37848: NOT
37849: IFFALSE 37853
// exit ;
37851: GO 37873
// result := SortListByListDesc ( units , tmp ) ;
37853: LD_ADDR_VAR 0 3
37857: PUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: LD_VAR 0 5
37867: PPUSH
37868: CALL_OW 77
37872: ST_TO_ADDR
// end ;
37873: LD_VAR 0 3
37877: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37878: LD_INT 0
37880: PPUSH
37881: PPUSH
37882: PPUSH
// result := false ;
37883: LD_ADDR_VAR 0 3
37887: PUSH
37888: LD_INT 0
37890: ST_TO_ADDR
// x := GetX ( building ) ;
37891: LD_ADDR_VAR 0 4
37895: PUSH
37896: LD_VAR 0 2
37900: PPUSH
37901: CALL_OW 250
37905: ST_TO_ADDR
// y := GetY ( building ) ;
37906: LD_ADDR_VAR 0 5
37910: PUSH
37911: LD_VAR 0 2
37915: PPUSH
37916: CALL_OW 251
37920: ST_TO_ADDR
// if not building or not x or not y then
37921: LD_VAR 0 2
37925: NOT
37926: PUSH
37927: LD_VAR 0 4
37931: NOT
37932: OR
37933: PUSH
37934: LD_VAR 0 5
37938: NOT
37939: OR
37940: IFFALSE 37944
// exit ;
37942: GO 38036
// if GetTaskList ( unit ) then
37944: LD_VAR 0 1
37948: PPUSH
37949: CALL_OW 437
37953: IFFALSE 38036
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37955: LD_STRING e
37957: PUSH
37958: LD_VAR 0 1
37962: PPUSH
37963: CALL_OW 437
37967: PUSH
37968: LD_INT 1
37970: ARRAY
37971: PUSH
37972: LD_INT 1
37974: ARRAY
37975: EQUAL
37976: PUSH
37977: LD_VAR 0 4
37981: PUSH
37982: LD_VAR 0 1
37986: PPUSH
37987: CALL_OW 437
37991: PUSH
37992: LD_INT 1
37994: ARRAY
37995: PUSH
37996: LD_INT 2
37998: ARRAY
37999: EQUAL
38000: AND
38001: PUSH
38002: LD_VAR 0 5
38006: PUSH
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 437
38016: PUSH
38017: LD_INT 1
38019: ARRAY
38020: PUSH
38021: LD_INT 3
38023: ARRAY
38024: EQUAL
38025: AND
38026: IFFALSE 38036
// result := true end ;
38028: LD_ADDR_VAR 0 3
38032: PUSH
38033: LD_INT 1
38035: ST_TO_ADDR
// end ;
38036: LD_VAR 0 3
38040: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38041: LD_INT 0
38043: PPUSH
// result := false ;
38044: LD_ADDR_VAR 0 4
38048: PUSH
38049: LD_INT 0
38051: ST_TO_ADDR
// if GetTaskList ( unit ) then
38052: LD_VAR 0 1
38056: PPUSH
38057: CALL_OW 437
38061: IFFALSE 38144
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38063: LD_STRING M
38065: PUSH
38066: LD_VAR 0 1
38070: PPUSH
38071: CALL_OW 437
38075: PUSH
38076: LD_INT 1
38078: ARRAY
38079: PUSH
38080: LD_INT 1
38082: ARRAY
38083: EQUAL
38084: PUSH
38085: LD_VAR 0 2
38089: PUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: CALL_OW 437
38099: PUSH
38100: LD_INT 1
38102: ARRAY
38103: PUSH
38104: LD_INT 2
38106: ARRAY
38107: EQUAL
38108: AND
38109: PUSH
38110: LD_VAR 0 3
38114: PUSH
38115: LD_VAR 0 1
38119: PPUSH
38120: CALL_OW 437
38124: PUSH
38125: LD_INT 1
38127: ARRAY
38128: PUSH
38129: LD_INT 3
38131: ARRAY
38132: EQUAL
38133: AND
38134: IFFALSE 38144
// result := true ;
38136: LD_ADDR_VAR 0 4
38140: PUSH
38141: LD_INT 1
38143: ST_TO_ADDR
// end ; end ;
38144: LD_VAR 0 4
38148: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38149: LD_INT 0
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
// if not unit or not area then
38155: LD_VAR 0 1
38159: NOT
38160: PUSH
38161: LD_VAR 0 2
38165: NOT
38166: OR
38167: IFFALSE 38171
// exit ;
38169: GO 38335
// tmp := AreaToList ( area , i ) ;
38171: LD_ADDR_VAR 0 6
38175: PUSH
38176: LD_VAR 0 2
38180: PPUSH
38181: LD_VAR 0 5
38185: PPUSH
38186: CALL_OW 517
38190: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38191: LD_ADDR_VAR 0 5
38195: PUSH
38196: DOUBLE
38197: LD_INT 1
38199: DEC
38200: ST_TO_ADDR
38201: LD_VAR 0 6
38205: PUSH
38206: LD_INT 1
38208: ARRAY
38209: PUSH
38210: FOR_TO
38211: IFFALSE 38333
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38213: LD_ADDR_VAR 0 7
38217: PUSH
38218: LD_VAR 0 6
38222: PUSH
38223: LD_INT 1
38225: ARRAY
38226: PUSH
38227: LD_VAR 0 5
38231: ARRAY
38232: PUSH
38233: LD_VAR 0 6
38237: PUSH
38238: LD_INT 2
38240: ARRAY
38241: PUSH
38242: LD_VAR 0 5
38246: ARRAY
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
38252: LD_VAR 0 7
38256: PUSH
38257: LD_INT 1
38259: ARRAY
38260: PPUSH
38261: LD_VAR 0 7
38265: PUSH
38266: LD_INT 2
38268: ARRAY
38269: PPUSH
38270: CALL_OW 428
38274: PUSH
38275: LD_INT 0
38277: EQUAL
38278: IFFALSE 38331
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38280: LD_VAR 0 1
38284: PPUSH
38285: LD_VAR 0 7
38289: PUSH
38290: LD_INT 1
38292: ARRAY
38293: PPUSH
38294: LD_VAR 0 7
38298: PUSH
38299: LD_INT 2
38301: ARRAY
38302: PPUSH
38303: LD_VAR 0 3
38307: PPUSH
38308: CALL_OW 48
// result := IsPlaced ( unit ) ;
38312: LD_ADDR_VAR 0 4
38316: PUSH
38317: LD_VAR 0 1
38321: PPUSH
38322: CALL_OW 305
38326: ST_TO_ADDR
// exit ;
38327: POP
38328: POP
38329: GO 38335
// end ; end ;
38331: GO 38210
38333: POP
38334: POP
// end ;
38335: LD_VAR 0 4
38339: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38340: LD_INT 0
38342: PPUSH
38343: PPUSH
38344: PPUSH
// if not side or side > 8 then
38345: LD_VAR 0 1
38349: NOT
38350: PUSH
38351: LD_VAR 0 1
38355: PUSH
38356: LD_INT 8
38358: GREATER
38359: OR
38360: IFFALSE 38364
// exit ;
38362: GO 38551
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38364: LD_ADDR_VAR 0 4
38368: PUSH
38369: LD_INT 22
38371: PUSH
38372: LD_VAR 0 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 21
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PPUSH
38395: CALL_OW 69
38399: ST_TO_ADDR
// if not tmp then
38400: LD_VAR 0 4
38404: NOT
38405: IFFALSE 38409
// exit ;
38407: GO 38551
// enable_addtolog := true ;
38409: LD_ADDR_OWVAR 81
38413: PUSH
38414: LD_INT 1
38416: ST_TO_ADDR
// AddToLog ( [ ) ;
38417: LD_STRING [
38419: PPUSH
38420: CALL_OW 561
// for i in tmp do
38424: LD_ADDR_VAR 0 3
38428: PUSH
38429: LD_VAR 0 4
38433: PUSH
38434: FOR_IN
38435: IFFALSE 38542
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38437: LD_STRING [
38439: PUSH
38440: LD_VAR 0 3
38444: PPUSH
38445: CALL_OW 266
38449: STR
38450: PUSH
38451: LD_STRING , 
38453: STR
38454: PUSH
38455: LD_VAR 0 3
38459: PPUSH
38460: CALL_OW 250
38464: STR
38465: PUSH
38466: LD_STRING , 
38468: STR
38469: PUSH
38470: LD_VAR 0 3
38474: PPUSH
38475: CALL_OW 251
38479: STR
38480: PUSH
38481: LD_STRING , 
38483: STR
38484: PUSH
38485: LD_VAR 0 3
38489: PPUSH
38490: CALL_OW 254
38494: STR
38495: PUSH
38496: LD_STRING , 
38498: STR
38499: PUSH
38500: LD_VAR 0 3
38504: PPUSH
38505: LD_INT 1
38507: PPUSH
38508: CALL_OW 268
38512: STR
38513: PUSH
38514: LD_STRING , 
38516: STR
38517: PUSH
38518: LD_VAR 0 3
38522: PPUSH
38523: LD_INT 2
38525: PPUSH
38526: CALL_OW 268
38530: STR
38531: PUSH
38532: LD_STRING ],
38534: STR
38535: PPUSH
38536: CALL_OW 561
// end ;
38540: GO 38434
38542: POP
38543: POP
// AddToLog ( ]; ) ;
38544: LD_STRING ];
38546: PPUSH
38547: CALL_OW 561
// end ;
38551: LD_VAR 0 2
38555: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38556: LD_INT 0
38558: PPUSH
38559: PPUSH
38560: PPUSH
38561: PPUSH
38562: PPUSH
// if not area or not rate or not max then
38563: LD_VAR 0 1
38567: NOT
38568: PUSH
38569: LD_VAR 0 2
38573: NOT
38574: OR
38575: PUSH
38576: LD_VAR 0 4
38580: NOT
38581: OR
38582: IFFALSE 38586
// exit ;
38584: GO 38778
// while 1 do
38586: LD_INT 1
38588: IFFALSE 38778
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38590: LD_ADDR_VAR 0 9
38594: PUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: LD_INT 1
38602: PPUSH
38603: CALL_OW 287
38607: PUSH
38608: LD_INT 10
38610: MUL
38611: ST_TO_ADDR
// r := rate / 10 ;
38612: LD_ADDR_VAR 0 7
38616: PUSH
38617: LD_VAR 0 2
38621: PUSH
38622: LD_INT 10
38624: DIVREAL
38625: ST_TO_ADDR
// time := 1 1$00 ;
38626: LD_ADDR_VAR 0 8
38630: PUSH
38631: LD_INT 2100
38633: ST_TO_ADDR
// if amount < min then
38634: LD_VAR 0 9
38638: PUSH
38639: LD_VAR 0 3
38643: LESS
38644: IFFALSE 38662
// r := r * 2 else
38646: LD_ADDR_VAR 0 7
38650: PUSH
38651: LD_VAR 0 7
38655: PUSH
38656: LD_INT 2
38658: MUL
38659: ST_TO_ADDR
38660: GO 38688
// if amount > max then
38662: LD_VAR 0 9
38666: PUSH
38667: LD_VAR 0 4
38671: GREATER
38672: IFFALSE 38688
// r := r / 2 ;
38674: LD_ADDR_VAR 0 7
38678: PUSH
38679: LD_VAR 0 7
38683: PUSH
38684: LD_INT 2
38686: DIVREAL
38687: ST_TO_ADDR
// time := time / r ;
38688: LD_ADDR_VAR 0 8
38692: PUSH
38693: LD_VAR 0 8
38697: PUSH
38698: LD_VAR 0 7
38702: DIVREAL
38703: ST_TO_ADDR
// if time < 0 then
38704: LD_VAR 0 8
38708: PUSH
38709: LD_INT 0
38711: LESS
38712: IFFALSE 38729
// time := time * - 1 ;
38714: LD_ADDR_VAR 0 8
38718: PUSH
38719: LD_VAR 0 8
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: MUL
38728: ST_TO_ADDR
// wait ( time ) ;
38729: LD_VAR 0 8
38733: PPUSH
38734: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
38738: LD_INT 35
38740: PPUSH
38741: LD_INT 875
38743: PPUSH
38744: CALL_OW 12
38748: PPUSH
38749: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38753: LD_INT 1
38755: PPUSH
38756: LD_INT 5
38758: PPUSH
38759: CALL_OW 12
38763: PPUSH
38764: LD_VAR 0 1
38768: PPUSH
38769: LD_INT 1
38771: PPUSH
38772: CALL_OW 55
// end ;
38776: GO 38586
// end ;
38778: LD_VAR 0 5
38782: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38783: LD_INT 0
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
// if not turrets or not factories then
38793: LD_VAR 0 1
38797: NOT
38798: PUSH
38799: LD_VAR 0 2
38803: NOT
38804: OR
38805: IFFALSE 38809
// exit ;
38807: GO 39116
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38809: LD_ADDR_VAR 0 10
38813: PUSH
38814: LD_INT 5
38816: PUSH
38817: LD_INT 6
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: LD_INT 4
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 3
38836: PUSH
38837: LD_INT 5
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 24
38851: PUSH
38852: LD_INT 25
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 23
38861: PUSH
38862: LD_INT 27
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 42
38875: PUSH
38876: LD_INT 43
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 44
38885: PUSH
38886: LD_INT 46
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 45
38895: PUSH
38896: LD_INT 47
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: ST_TO_ADDR
// result := [ ] ;
38913: LD_ADDR_VAR 0 3
38917: PUSH
38918: EMPTY
38919: ST_TO_ADDR
// for i in turrets do
38920: LD_ADDR_VAR 0 4
38924: PUSH
38925: LD_VAR 0 1
38929: PUSH
38930: FOR_IN
38931: IFFALSE 39114
// begin nat := GetNation ( i ) ;
38933: LD_ADDR_VAR 0 7
38937: PUSH
38938: LD_VAR 0 4
38942: PPUSH
38943: CALL_OW 248
38947: ST_TO_ADDR
// weapon := 0 ;
38948: LD_ADDR_VAR 0 8
38952: PUSH
38953: LD_INT 0
38955: ST_TO_ADDR
// if not nat then
38956: LD_VAR 0 7
38960: NOT
38961: IFFALSE 38965
// continue ;
38963: GO 38930
// for j in list [ nat ] do
38965: LD_ADDR_VAR 0 5
38969: PUSH
38970: LD_VAR 0 10
38974: PUSH
38975: LD_VAR 0 7
38979: ARRAY
38980: PUSH
38981: FOR_IN
38982: IFFALSE 39023
// if GetBWeapon ( i ) = j [ 1 ] then
38984: LD_VAR 0 4
38988: PPUSH
38989: CALL_OW 269
38993: PUSH
38994: LD_VAR 0 5
38998: PUSH
38999: LD_INT 1
39001: ARRAY
39002: EQUAL
39003: IFFALSE 39021
// begin weapon := j [ 2 ] ;
39005: LD_ADDR_VAR 0 8
39009: PUSH
39010: LD_VAR 0 5
39014: PUSH
39015: LD_INT 2
39017: ARRAY
39018: ST_TO_ADDR
// break ;
39019: GO 39023
// end ;
39021: GO 38981
39023: POP
39024: POP
// if not weapon then
39025: LD_VAR 0 8
39029: NOT
39030: IFFALSE 39034
// continue ;
39032: GO 38930
// for k in factories do
39034: LD_ADDR_VAR 0 6
39038: PUSH
39039: LD_VAR 0 2
39043: PUSH
39044: FOR_IN
39045: IFFALSE 39110
// begin weapons := AvailableWeaponList ( k ) ;
39047: LD_ADDR_VAR 0 9
39051: PUSH
39052: LD_VAR 0 6
39056: PPUSH
39057: CALL_OW 478
39061: ST_TO_ADDR
// if not weapons then
39062: LD_VAR 0 9
39066: NOT
39067: IFFALSE 39071
// continue ;
39069: GO 39044
// if weapon in weapons then
39071: LD_VAR 0 8
39075: PUSH
39076: LD_VAR 0 9
39080: IN
39081: IFFALSE 39108
// begin result := [ i , weapon ] ;
39083: LD_ADDR_VAR 0 3
39087: PUSH
39088: LD_VAR 0 4
39092: PUSH
39093: LD_VAR 0 8
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: ST_TO_ADDR
// exit ;
39102: POP
39103: POP
39104: POP
39105: POP
39106: GO 39116
// end ; end ;
39108: GO 39044
39110: POP
39111: POP
// end ;
39112: GO 38930
39114: POP
39115: POP
// end ;
39116: LD_VAR 0 3
39120: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39121: LD_INT 0
39123: PPUSH
// if not side or side > 8 then
39124: LD_VAR 0 3
39128: NOT
39129: PUSH
39130: LD_VAR 0 3
39134: PUSH
39135: LD_INT 8
39137: GREATER
39138: OR
39139: IFFALSE 39143
// exit ;
39141: GO 39202
// if not range then
39143: LD_VAR 0 4
39147: NOT
39148: IFFALSE 39159
// range := - 12 ;
39150: LD_ADDR_VAR 0 4
39154: PUSH
39155: LD_INT 12
39157: NEG
39158: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39159: LD_VAR 0 1
39163: PPUSH
39164: LD_VAR 0 2
39168: PPUSH
39169: LD_VAR 0 3
39173: PPUSH
39174: LD_VAR 0 4
39178: PPUSH
39179: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39183: LD_VAR 0 1
39187: PPUSH
39188: LD_VAR 0 2
39192: PPUSH
39193: LD_VAR 0 3
39197: PPUSH
39198: CALL_OW 331
// end ;
39202: LD_VAR 0 5
39206: RET
// export function Video ( mode ) ; begin
39207: LD_INT 0
39209: PPUSH
// ingame_video = mode ;
39210: LD_ADDR_OWVAR 52
39214: PUSH
39215: LD_VAR 0 1
39219: ST_TO_ADDR
// interface_hidden = mode ;
39220: LD_ADDR_OWVAR 54
39224: PUSH
39225: LD_VAR 0 1
39229: ST_TO_ADDR
// end ;
39230: LD_VAR 0 2
39234: RET
// export function Join ( array , element ) ; begin
39235: LD_INT 0
39237: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39238: LD_ADDR_VAR 0 3
39242: PUSH
39243: LD_VAR 0 1
39247: PPUSH
39248: LD_VAR 0 1
39252: PUSH
39253: LD_INT 1
39255: PLUS
39256: PPUSH
39257: LD_VAR 0 2
39261: PPUSH
39262: CALL_OW 1
39266: ST_TO_ADDR
// end ;
39267: LD_VAR 0 3
39271: RET
// export function JoinUnion ( array , element ) ; begin
39272: LD_INT 0
39274: PPUSH
// result := array union element ;
39275: LD_ADDR_VAR 0 3
39279: PUSH
39280: LD_VAR 0 1
39284: PUSH
39285: LD_VAR 0 2
39289: UNION
39290: ST_TO_ADDR
// end ;
39291: LD_VAR 0 3
39295: RET
// export function GetBehemoths ( side ) ; begin
39296: LD_INT 0
39298: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
39299: LD_ADDR_VAR 0 2
39303: PUSH
39304: LD_INT 22
39306: PUSH
39307: LD_VAR 0 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 31
39318: PUSH
39319: LD_INT 25
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PPUSH
39330: CALL_OW 69
39334: ST_TO_ADDR
// end ;
39335: LD_VAR 0 2
39339: RET
// export function Shuffle ( array ) ; var i , index ; begin
39340: LD_INT 0
39342: PPUSH
39343: PPUSH
39344: PPUSH
// result := [ ] ;
39345: LD_ADDR_VAR 0 2
39349: PUSH
39350: EMPTY
39351: ST_TO_ADDR
// if not array then
39352: LD_VAR 0 1
39356: NOT
39357: IFFALSE 39361
// exit ;
39359: GO 39460
// Randomize ;
39361: CALL_OW 10
// for i = array downto 1 do
39365: LD_ADDR_VAR 0 3
39369: PUSH
39370: DOUBLE
39371: LD_VAR 0 1
39375: INC
39376: ST_TO_ADDR
39377: LD_INT 1
39379: PUSH
39380: FOR_DOWNTO
39381: IFFALSE 39458
// begin index := rand ( 1 , array ) ;
39383: LD_ADDR_VAR 0 4
39387: PUSH
39388: LD_INT 1
39390: PPUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: CALL_OW 12
39400: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39401: LD_ADDR_VAR 0 2
39405: PUSH
39406: LD_VAR 0 2
39410: PPUSH
39411: LD_VAR 0 2
39415: PUSH
39416: LD_INT 1
39418: PLUS
39419: PPUSH
39420: LD_VAR 0 1
39424: PUSH
39425: LD_VAR 0 4
39429: ARRAY
39430: PPUSH
39431: CALL_OW 2
39435: ST_TO_ADDR
// array := Delete ( array , index ) ;
39436: LD_ADDR_VAR 0 1
39440: PUSH
39441: LD_VAR 0 1
39445: PPUSH
39446: LD_VAR 0 4
39450: PPUSH
39451: CALL_OW 3
39455: ST_TO_ADDR
// end ;
39456: GO 39380
39458: POP
39459: POP
// end ;
39460: LD_VAR 0 2
39464: RET
// export function GetBaseMaterials ( base ) ; begin
39465: LD_INT 0
39467: PPUSH
// result := [ 0 , 0 , 0 ] ;
39468: LD_ADDR_VAR 0 2
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: ST_TO_ADDR
// if not base then
39487: LD_VAR 0 1
39491: NOT
39492: IFFALSE 39496
// exit ;
39494: GO 39545
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39496: LD_ADDR_VAR 0 2
39500: PUSH
39501: LD_VAR 0 1
39505: PPUSH
39506: LD_INT 1
39508: PPUSH
39509: CALL_OW 275
39513: PUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: LD_INT 2
39521: PPUSH
39522: CALL_OW 275
39526: PUSH
39527: LD_VAR 0 1
39531: PPUSH
39532: LD_INT 3
39534: PPUSH
39535: CALL_OW 275
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: ST_TO_ADDR
// end ;
39545: LD_VAR 0 2
39549: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39550: LD_INT 0
39552: PPUSH
39553: PPUSH
// result := array ;
39554: LD_ADDR_VAR 0 3
39558: PUSH
39559: LD_VAR 0 1
39563: ST_TO_ADDR
// if size > 0 then
39564: LD_VAR 0 2
39568: PUSH
39569: LD_INT 0
39571: GREATER
39572: IFFALSE 39618
// for i := array downto size do
39574: LD_ADDR_VAR 0 4
39578: PUSH
39579: DOUBLE
39580: LD_VAR 0 1
39584: INC
39585: ST_TO_ADDR
39586: LD_VAR 0 2
39590: PUSH
39591: FOR_DOWNTO
39592: IFFALSE 39616
// result := Delete ( result , result ) ;
39594: LD_ADDR_VAR 0 3
39598: PUSH
39599: LD_VAR 0 3
39603: PPUSH
39604: LD_VAR 0 3
39608: PPUSH
39609: CALL_OW 3
39613: ST_TO_ADDR
39614: GO 39591
39616: POP
39617: POP
// end ;
39618: LD_VAR 0 3
39622: RET
// export function ComExit ( unit ) ; var tmp ; begin
39623: LD_INT 0
39625: PPUSH
39626: PPUSH
// if not IsInUnit ( unit ) then
39627: LD_VAR 0 1
39631: PPUSH
39632: CALL_OW 310
39636: NOT
39637: IFFALSE 39641
// exit ;
39639: GO 39701
// tmp := IsInUnit ( unit ) ;
39641: LD_ADDR_VAR 0 3
39645: PUSH
39646: LD_VAR 0 1
39650: PPUSH
39651: CALL_OW 310
39655: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39656: LD_VAR 0 3
39660: PPUSH
39661: CALL_OW 247
39665: PUSH
39666: LD_INT 2
39668: EQUAL
39669: IFFALSE 39682
// ComExitVehicle ( unit ) else
39671: LD_VAR 0 1
39675: PPUSH
39676: CALL_OW 121
39680: GO 39691
// ComExitBuilding ( unit ) ;
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 122
// result := tmp ;
39691: LD_ADDR_VAR 0 2
39695: PUSH
39696: LD_VAR 0 3
39700: ST_TO_ADDR
// end ;
39701: LD_VAR 0 2
39705: RET
// export function ComExitAll ( units ) ; var i ; begin
39706: LD_INT 0
39708: PPUSH
39709: PPUSH
// if not units then
39710: LD_VAR 0 1
39714: NOT
39715: IFFALSE 39719
// exit ;
39717: GO 39745
// for i in units do
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_VAR 0 1
39728: PUSH
39729: FOR_IN
39730: IFFALSE 39743
// ComExit ( i ) ;
39732: LD_VAR 0 3
39736: PPUSH
39737: CALL 39623 0 1
39741: GO 39729
39743: POP
39744: POP
// end ;
39745: LD_VAR 0 2
39749: RET
// export function ResetHc ; begin
39750: LD_INT 0
39752: PPUSH
// InitHc ;
39753: CALL_OW 19
// hc_importance := 0 ;
39757: LD_ADDR_OWVAR 32
39761: PUSH
39762: LD_INT 0
39764: ST_TO_ADDR
// end ;
39765: LD_VAR 0 1
39769: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39770: LD_INT 0
39772: PPUSH
39773: PPUSH
39774: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39775: LD_ADDR_VAR 0 6
39779: PUSH
39780: LD_VAR 0 1
39784: PUSH
39785: LD_VAR 0 3
39789: PLUS
39790: PUSH
39791: LD_INT 2
39793: DIV
39794: ST_TO_ADDR
// if _x < 0 then
39795: LD_VAR 0 6
39799: PUSH
39800: LD_INT 0
39802: LESS
39803: IFFALSE 39820
// _x := _x * - 1 ;
39805: LD_ADDR_VAR 0 6
39809: PUSH
39810: LD_VAR 0 6
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: MUL
39819: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39820: LD_ADDR_VAR 0 7
39824: PUSH
39825: LD_VAR 0 2
39829: PUSH
39830: LD_VAR 0 4
39834: PLUS
39835: PUSH
39836: LD_INT 2
39838: DIV
39839: ST_TO_ADDR
// if _y < 0 then
39840: LD_VAR 0 7
39844: PUSH
39845: LD_INT 0
39847: LESS
39848: IFFALSE 39865
// _y := _y * - 1 ;
39850: LD_ADDR_VAR 0 7
39854: PUSH
39855: LD_VAR 0 7
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: MUL
39864: ST_TO_ADDR
// result := [ _x , _y ] ;
39865: LD_ADDR_VAR 0 5
39869: PUSH
39870: LD_VAR 0 6
39874: PUSH
39875: LD_VAR 0 7
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: ST_TO_ADDR
// end ;
39884: LD_VAR 0 5
39888: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39889: LD_INT 0
39891: PPUSH
39892: PPUSH
39893: PPUSH
39894: PPUSH
// task := GetTaskList ( unit ) ;
39895: LD_ADDR_VAR 0 7
39899: PUSH
39900: LD_VAR 0 1
39904: PPUSH
39905: CALL_OW 437
39909: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39910: LD_VAR 0 7
39914: NOT
39915: PUSH
39916: LD_VAR 0 1
39920: PPUSH
39921: LD_VAR 0 2
39925: PPUSH
39926: CALL_OW 308
39930: NOT
39931: AND
39932: IFFALSE 39936
// exit ;
39934: GO 40054
// if IsInArea ( unit , area ) then
39936: LD_VAR 0 1
39940: PPUSH
39941: LD_VAR 0 2
39945: PPUSH
39946: CALL_OW 308
39950: IFFALSE 39968
// begin ComMoveToArea ( unit , goAway ) ;
39952: LD_VAR 0 1
39956: PPUSH
39957: LD_VAR 0 3
39961: PPUSH
39962: CALL_OW 113
// exit ;
39966: GO 40054
// end ; if task [ 1 ] [ 1 ] <> M then
39968: LD_VAR 0 7
39972: PUSH
39973: LD_INT 1
39975: ARRAY
39976: PUSH
39977: LD_INT 1
39979: ARRAY
39980: PUSH
39981: LD_STRING M
39983: NONEQUAL
39984: IFFALSE 39988
// exit ;
39986: GO 40054
// x := task [ 1 ] [ 2 ] ;
39988: LD_ADDR_VAR 0 5
39992: PUSH
39993: LD_VAR 0 7
39997: PUSH
39998: LD_INT 1
40000: ARRAY
40001: PUSH
40002: LD_INT 2
40004: ARRAY
40005: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40006: LD_ADDR_VAR 0 6
40010: PUSH
40011: LD_VAR 0 7
40015: PUSH
40016: LD_INT 1
40018: ARRAY
40019: PUSH
40020: LD_INT 3
40022: ARRAY
40023: ST_TO_ADDR
// if InArea ( x , y , area ) then
40024: LD_VAR 0 5
40028: PPUSH
40029: LD_VAR 0 6
40033: PPUSH
40034: LD_VAR 0 2
40038: PPUSH
40039: CALL_OW 309
40043: IFFALSE 40054
// ComStop ( unit ) ;
40045: LD_VAR 0 1
40049: PPUSH
40050: CALL_OW 141
// end ;
40054: LD_VAR 0 4
40058: RET
// export function Abs ( value ) ; begin
40059: LD_INT 0
40061: PPUSH
// result := value ;
40062: LD_ADDR_VAR 0 2
40066: PUSH
40067: LD_VAR 0 1
40071: ST_TO_ADDR
// if value < 0 then
40072: LD_VAR 0 1
40076: PUSH
40077: LD_INT 0
40079: LESS
40080: IFFALSE 40097
// result := value * - 1 ;
40082: LD_ADDR_VAR 0 2
40086: PUSH
40087: LD_VAR 0 1
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: MUL
40096: ST_TO_ADDR
// end ;
40097: LD_VAR 0 2
40101: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40102: LD_INT 0
40104: PPUSH
40105: PPUSH
40106: PPUSH
40107: PPUSH
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
// if not unit or not building then
40112: LD_VAR 0 1
40116: NOT
40117: PUSH
40118: LD_VAR 0 2
40122: NOT
40123: OR
40124: IFFALSE 40128
// exit ;
40126: GO 40354
// x := GetX ( building ) ;
40128: LD_ADDR_VAR 0 4
40132: PUSH
40133: LD_VAR 0 2
40137: PPUSH
40138: CALL_OW 250
40142: ST_TO_ADDR
// y := GetY ( building ) ;
40143: LD_ADDR_VAR 0 6
40147: PUSH
40148: LD_VAR 0 2
40152: PPUSH
40153: CALL_OW 251
40157: ST_TO_ADDR
// d := GetDir ( building ) ;
40158: LD_ADDR_VAR 0 8
40162: PUSH
40163: LD_VAR 0 2
40167: PPUSH
40168: CALL_OW 254
40172: ST_TO_ADDR
// r := 4 ;
40173: LD_ADDR_VAR 0 9
40177: PUSH
40178: LD_INT 4
40180: ST_TO_ADDR
// for i := 1 to 5 do
40181: LD_ADDR_VAR 0 10
40185: PUSH
40186: DOUBLE
40187: LD_INT 1
40189: DEC
40190: ST_TO_ADDR
40191: LD_INT 5
40193: PUSH
40194: FOR_TO
40195: IFFALSE 40352
// begin _x := ShiftX ( x , d , r + i ) ;
40197: LD_ADDR_VAR 0 5
40201: PUSH
40202: LD_VAR 0 4
40206: PPUSH
40207: LD_VAR 0 8
40211: PPUSH
40212: LD_VAR 0 9
40216: PUSH
40217: LD_VAR 0 10
40221: PLUS
40222: PPUSH
40223: CALL_OW 272
40227: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40228: LD_ADDR_VAR 0 7
40232: PUSH
40233: LD_VAR 0 6
40237: PPUSH
40238: LD_VAR 0 8
40242: PPUSH
40243: LD_VAR 0 9
40247: PUSH
40248: LD_VAR 0 10
40252: PLUS
40253: PPUSH
40254: CALL_OW 273
40258: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40259: LD_VAR 0 5
40263: PPUSH
40264: LD_VAR 0 7
40268: PPUSH
40269: CALL_OW 488
40273: PUSH
40274: LD_VAR 0 5
40278: PPUSH
40279: LD_VAR 0 7
40283: PPUSH
40284: CALL_OW 428
40288: PPUSH
40289: CALL_OW 247
40293: PUSH
40294: LD_INT 3
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: IN
40304: NOT
40305: AND
40306: IFFALSE 40350
// begin ComMoveXY ( unit , _x , _y ) ;
40308: LD_VAR 0 1
40312: PPUSH
40313: LD_VAR 0 5
40317: PPUSH
40318: LD_VAR 0 7
40322: PPUSH
40323: CALL_OW 111
// result := [ _x , _y ] ;
40327: LD_ADDR_VAR 0 3
40331: PUSH
40332: LD_VAR 0 5
40336: PUSH
40337: LD_VAR 0 7
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: ST_TO_ADDR
// exit ;
40346: POP
40347: POP
40348: GO 40354
// end ; end ;
40350: GO 40194
40352: POP
40353: POP
// end ;
40354: LD_VAR 0 3
40358: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40359: LD_INT 0
40361: PPUSH
40362: PPUSH
40363: PPUSH
// result := 0 ;
40364: LD_ADDR_VAR 0 3
40368: PUSH
40369: LD_INT 0
40371: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40372: LD_VAR 0 1
40376: PUSH
40377: LD_INT 0
40379: LESS
40380: PUSH
40381: LD_VAR 0 1
40385: PUSH
40386: LD_INT 8
40388: GREATER
40389: OR
40390: PUSH
40391: LD_VAR 0 2
40395: PUSH
40396: LD_INT 0
40398: LESS
40399: OR
40400: PUSH
40401: LD_VAR 0 2
40405: PUSH
40406: LD_INT 8
40408: GREATER
40409: OR
40410: IFFALSE 40414
// exit ;
40412: GO 40489
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40414: LD_ADDR_VAR 0 4
40418: PUSH
40419: LD_INT 22
40421: PUSH
40422: LD_VAR 0 2
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PPUSH
40431: CALL_OW 69
40435: PUSH
40436: FOR_IN
40437: IFFALSE 40487
// begin un := UnitShoot ( i ) ;
40439: LD_ADDR_VAR 0 5
40443: PUSH
40444: LD_VAR 0 4
40448: PPUSH
40449: CALL_OW 504
40453: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40454: LD_VAR 0 5
40458: PPUSH
40459: CALL_OW 255
40463: PUSH
40464: LD_VAR 0 1
40468: EQUAL
40469: IFFALSE 40485
// begin result := un ;
40471: LD_ADDR_VAR 0 3
40475: PUSH
40476: LD_VAR 0 5
40480: ST_TO_ADDR
// exit ;
40481: POP
40482: POP
40483: GO 40489
// end ; end ;
40485: GO 40436
40487: POP
40488: POP
// end ;
40489: LD_VAR 0 3
40493: RET
// export function GetCargoBay ( units ) ; begin
40494: LD_INT 0
40496: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40497: LD_ADDR_VAR 0 2
40501: PUSH
40502: LD_VAR 0 1
40506: PPUSH
40507: LD_INT 2
40509: PUSH
40510: LD_INT 34
40512: PUSH
40513: LD_INT 12
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 34
40522: PUSH
40523: LD_INT 51
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 34
40532: PUSH
40533: LD_INT 32
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 34
40542: PUSH
40543: LD_EXP 10
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: PPUSH
40559: CALL_OW 72
40563: ST_TO_ADDR
// end ; end_of_file
40564: LD_VAR 0 2
40568: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
40569: LD_INT 0
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
40575: LD_VAR 0 1
40579: PPUSH
40580: CALL_OW 264
40584: PUSH
40585: LD_EXP 13
40589: EQUAL
40590: IFFALSE 40662
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
40592: LD_INT 68
40594: PPUSH
40595: LD_VAR 0 1
40599: PPUSH
40600: CALL_OW 255
40604: PPUSH
40605: CALL_OW 321
40609: PUSH
40610: LD_INT 2
40612: EQUAL
40613: IFFALSE 40625
// eff := 70 else
40615: LD_ADDR_VAR 0 4
40619: PUSH
40620: LD_INT 70
40622: ST_TO_ADDR
40623: GO 40633
// eff := 30 ;
40625: LD_ADDR_VAR 0 4
40629: PUSH
40630: LD_INT 30
40632: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 250
40642: PPUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 251
40652: PPUSH
40653: LD_VAR 0 4
40657: PPUSH
40658: CALL_OW 495
// end ; end ;
40662: LD_VAR 0 2
40666: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40667: LD_INT 0
40669: PPUSH
// end ;
40670: LD_VAR 0 4
40674: RET
// export function SOS_Command ( cmd ) ; begin
40675: LD_INT 0
40677: PPUSH
// end ;
40678: LD_VAR 0 2
40682: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
40683: LD_INT 0
40685: PPUSH
// if cmd = 121 then
40686: LD_VAR 0 1
40690: PUSH
40691: LD_INT 121
40693: EQUAL
40694: IFFALSE 40696
// end ;
40696: LD_VAR 0 6
40700: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40701: LD_INT 0
40703: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40704: LD_VAR 0 1
40708: PUSH
40709: LD_INT 250
40711: EQUAL
40712: PUSH
40713: LD_VAR 0 2
40717: PPUSH
40718: CALL_OW 264
40722: PUSH
40723: LD_EXP 16
40727: EQUAL
40728: AND
40729: IFFALSE 40750
// MinerPlaceMine ( unit , x , y ) ;
40731: LD_VAR 0 2
40735: PPUSH
40736: LD_VAR 0 4
40740: PPUSH
40741: LD_VAR 0 5
40745: PPUSH
40746: CALL 43099 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40750: LD_VAR 0 1
40754: PUSH
40755: LD_INT 251
40757: EQUAL
40758: PUSH
40759: LD_VAR 0 2
40763: PPUSH
40764: CALL_OW 264
40768: PUSH
40769: LD_EXP 16
40773: EQUAL
40774: AND
40775: IFFALSE 40796
// MinerDetonateMine ( unit , x , y ) ;
40777: LD_VAR 0 2
40781: PPUSH
40782: LD_VAR 0 4
40786: PPUSH
40787: LD_VAR 0 5
40791: PPUSH
40792: CALL 43376 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40796: LD_VAR 0 1
40800: PUSH
40801: LD_INT 252
40803: EQUAL
40804: PUSH
40805: LD_VAR 0 2
40809: PPUSH
40810: CALL_OW 264
40814: PUSH
40815: LD_EXP 16
40819: EQUAL
40820: AND
40821: IFFALSE 40842
// MinerCreateMinefield ( unit , x , y ) ;
40823: LD_VAR 0 2
40827: PPUSH
40828: LD_VAR 0 4
40832: PPUSH
40833: LD_VAR 0 5
40837: PPUSH
40838: CALL 43793 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40842: LD_VAR 0 1
40846: PUSH
40847: LD_INT 253
40849: EQUAL
40850: PUSH
40851: LD_VAR 0 2
40855: PPUSH
40856: CALL_OW 257
40860: PUSH
40861: LD_INT 5
40863: EQUAL
40864: AND
40865: IFFALSE 40886
// ComBinocular ( unit , x , y ) ;
40867: LD_VAR 0 2
40871: PPUSH
40872: LD_VAR 0 4
40876: PPUSH
40877: LD_VAR 0 5
40881: PPUSH
40882: CALL 44164 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40886: LD_VAR 0 1
40890: PUSH
40891: LD_INT 254
40893: EQUAL
40894: PUSH
40895: LD_VAR 0 2
40899: PPUSH
40900: CALL_OW 264
40904: PUSH
40905: LD_EXP 11
40909: EQUAL
40910: AND
40911: PUSH
40912: LD_VAR 0 3
40916: PPUSH
40917: CALL_OW 263
40921: PUSH
40922: LD_INT 3
40924: EQUAL
40925: AND
40926: IFFALSE 40942
// HackDestroyVehicle ( unit , selectedUnit ) ;
40928: LD_VAR 0 2
40932: PPUSH
40933: LD_VAR 0 3
40937: PPUSH
40938: CALL 42459 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40942: LD_VAR 0 1
40946: PUSH
40947: LD_INT 255
40949: EQUAL
40950: PUSH
40951: LD_VAR 0 2
40955: PPUSH
40956: CALL_OW 264
40960: PUSH
40961: LD_INT 14
40963: PUSH
40964: LD_INT 53
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: IN
40971: AND
40972: PUSH
40973: LD_VAR 0 4
40977: PPUSH
40978: LD_VAR 0 5
40982: PPUSH
40983: CALL_OW 488
40987: AND
40988: IFFALSE 41012
// CutTreeXYR ( unit , x , y , 12 ) ;
40990: LD_VAR 0 2
40994: PPUSH
40995: LD_VAR 0 4
40999: PPUSH
41000: LD_VAR 0 5
41004: PPUSH
41005: LD_INT 12
41007: PPUSH
41008: CALL 41025 0 4
// end ;
41012: LD_VAR 0 6
41016: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
41017: LD_INT 0
41019: PPUSH
// end ;
41020: LD_VAR 0 4
41024: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
41025: LD_INT 0
41027: PPUSH
41028: PPUSH
41029: PPUSH
41030: PPUSH
41031: PPUSH
41032: PPUSH
41033: PPUSH
41034: PPUSH
41035: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
41036: LD_VAR 0 1
41040: NOT
41041: PUSH
41042: LD_VAR 0 2
41046: PPUSH
41047: LD_VAR 0 3
41051: PPUSH
41052: CALL_OW 488
41056: NOT
41057: OR
41058: PUSH
41059: LD_VAR 0 4
41063: NOT
41064: OR
41065: IFFALSE 41069
// exit ;
41067: GO 41409
// list := [ ] ;
41069: LD_ADDR_VAR 0 13
41073: PUSH
41074: EMPTY
41075: ST_TO_ADDR
// if x - r < 0 then
41076: LD_VAR 0 2
41080: PUSH
41081: LD_VAR 0 4
41085: MINUS
41086: PUSH
41087: LD_INT 0
41089: LESS
41090: IFFALSE 41102
// min_x := 0 else
41092: LD_ADDR_VAR 0 7
41096: PUSH
41097: LD_INT 0
41099: ST_TO_ADDR
41100: GO 41118
// min_x := x - r ;
41102: LD_ADDR_VAR 0 7
41106: PUSH
41107: LD_VAR 0 2
41111: PUSH
41112: LD_VAR 0 4
41116: MINUS
41117: ST_TO_ADDR
// if y - r < 0 then
41118: LD_VAR 0 3
41122: PUSH
41123: LD_VAR 0 4
41127: MINUS
41128: PUSH
41129: LD_INT 0
41131: LESS
41132: IFFALSE 41144
// min_y := 0 else
41134: LD_ADDR_VAR 0 8
41138: PUSH
41139: LD_INT 0
41141: ST_TO_ADDR
41142: GO 41160
// min_y := y - r ;
41144: LD_ADDR_VAR 0 8
41148: PUSH
41149: LD_VAR 0 3
41153: PUSH
41154: LD_VAR 0 4
41158: MINUS
41159: ST_TO_ADDR
// max_x := x + r ;
41160: LD_ADDR_VAR 0 9
41164: PUSH
41165: LD_VAR 0 2
41169: PUSH
41170: LD_VAR 0 4
41174: PLUS
41175: ST_TO_ADDR
// max_y := y + r ;
41176: LD_ADDR_VAR 0 10
41180: PUSH
41181: LD_VAR 0 3
41185: PUSH
41186: LD_VAR 0 4
41190: PLUS
41191: ST_TO_ADDR
// for _x = min_x to max_x do
41192: LD_ADDR_VAR 0 11
41196: PUSH
41197: DOUBLE
41198: LD_VAR 0 7
41202: DEC
41203: ST_TO_ADDR
41204: LD_VAR 0 9
41208: PUSH
41209: FOR_TO
41210: IFFALSE 41327
// for _y = min_y to max_y do
41212: LD_ADDR_VAR 0 12
41216: PUSH
41217: DOUBLE
41218: LD_VAR 0 8
41222: DEC
41223: ST_TO_ADDR
41224: LD_VAR 0 10
41228: PUSH
41229: FOR_TO
41230: IFFALSE 41323
// begin if not ValidHex ( _x , _y ) then
41232: LD_VAR 0 11
41236: PPUSH
41237: LD_VAR 0 12
41241: PPUSH
41242: CALL_OW 488
41246: NOT
41247: IFFALSE 41251
// continue ;
41249: GO 41229
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
41251: LD_VAR 0 11
41255: PPUSH
41256: LD_VAR 0 12
41260: PPUSH
41261: CALL_OW 351
41265: PUSH
41266: LD_VAR 0 11
41270: PPUSH
41271: LD_VAR 0 12
41275: PPUSH
41276: CALL_OW 554
41280: AND
41281: IFFALSE 41321
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
41283: LD_ADDR_VAR 0 13
41287: PUSH
41288: LD_VAR 0 13
41292: PPUSH
41293: LD_VAR 0 13
41297: PUSH
41298: LD_INT 1
41300: PLUS
41301: PPUSH
41302: LD_VAR 0 11
41306: PUSH
41307: LD_VAR 0 12
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PPUSH
41316: CALL_OW 2
41320: ST_TO_ADDR
// end ;
41321: GO 41229
41323: POP
41324: POP
41325: GO 41209
41327: POP
41328: POP
// if not list then
41329: LD_VAR 0 13
41333: NOT
41334: IFFALSE 41338
// exit ;
41336: GO 41409
// for i in list do
41338: LD_ADDR_VAR 0 6
41342: PUSH
41343: LD_VAR 0 13
41347: PUSH
41348: FOR_IN
41349: IFFALSE 41407
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
41351: LD_VAR 0 1
41355: PPUSH
41356: LD_STRING M
41358: PUSH
41359: LD_VAR 0 6
41363: PUSH
41364: LD_INT 1
41366: ARRAY
41367: PUSH
41368: LD_VAR 0 6
41372: PUSH
41373: LD_INT 2
41375: ARRAY
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: PUSH
41398: EMPTY
41399: LIST
41400: PPUSH
41401: CALL_OW 447
41405: GO 41348
41407: POP
41408: POP
// end ;
41409: LD_VAR 0 5
41413: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
41414: LD_EXP 29
41418: NOT
41419: IFFALSE 41469
41421: GO 41423
41423: DISABLE
// begin initHack := true ;
41424: LD_ADDR_EXP 29
41428: PUSH
41429: LD_INT 1
41431: ST_TO_ADDR
// hackTanks := [ ] ;
41432: LD_ADDR_EXP 30
41436: PUSH
41437: EMPTY
41438: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
41439: LD_ADDR_EXP 31
41443: PUSH
41444: EMPTY
41445: ST_TO_ADDR
// hackLimit := 3 ;
41446: LD_ADDR_EXP 32
41450: PUSH
41451: LD_INT 3
41453: ST_TO_ADDR
// hackDist := 12 ;
41454: LD_ADDR_EXP 33
41458: PUSH
41459: LD_INT 12
41461: ST_TO_ADDR
// hackCounter := [ ] ;
41462: LD_ADDR_EXP 34
41466: PUSH
41467: EMPTY
41468: ST_TO_ADDR
// end ;
41469: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41470: LD_EXP 29
41474: PUSH
41475: LD_INT 34
41477: PUSH
41478: LD_EXP 11
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PPUSH
41487: CALL_OW 69
41491: AND
41492: IFFALSE 41747
41494: GO 41496
41496: DISABLE
41497: LD_INT 0
41499: PPUSH
41500: PPUSH
// begin enable ;
41501: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41502: LD_ADDR_VAR 0 1
41506: PUSH
41507: LD_INT 34
41509: PUSH
41510: LD_EXP 11
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PPUSH
41519: CALL_OW 69
41523: PUSH
41524: FOR_IN
41525: IFFALSE 41745
// begin if not i in hackTanks then
41527: LD_VAR 0 1
41531: PUSH
41532: LD_EXP 30
41536: IN
41537: NOT
41538: IFFALSE 41621
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41540: LD_ADDR_EXP 30
41544: PUSH
41545: LD_EXP 30
41549: PPUSH
41550: LD_EXP 30
41554: PUSH
41555: LD_INT 1
41557: PLUS
41558: PPUSH
41559: LD_VAR 0 1
41563: PPUSH
41564: CALL_OW 1
41568: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41569: LD_ADDR_EXP 31
41573: PUSH
41574: LD_EXP 31
41578: PPUSH
41579: LD_EXP 31
41583: PUSH
41584: LD_INT 1
41586: PLUS
41587: PPUSH
41588: EMPTY
41589: PPUSH
41590: CALL_OW 1
41594: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41595: LD_ADDR_EXP 34
41599: PUSH
41600: LD_EXP 34
41604: PPUSH
41605: LD_EXP 34
41609: PUSH
41610: LD_INT 1
41612: PLUS
41613: PPUSH
41614: EMPTY
41615: PPUSH
41616: CALL_OW 1
41620: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41621: LD_VAR 0 1
41625: PPUSH
41626: CALL_OW 302
41630: NOT
41631: IFFALSE 41644
// begin HackUnlinkAll ( i ) ;
41633: LD_VAR 0 1
41637: PPUSH
41638: CALL 41750 0 1
// continue ;
41642: GO 41524
// end ; HackCheckCapturedStatus ( i ) ;
41644: LD_VAR 0 1
41648: PPUSH
41649: CALL 42193 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41653: LD_ADDR_VAR 0 2
41657: PUSH
41658: LD_INT 81
41660: PUSH
41661: LD_VAR 0 1
41665: PPUSH
41666: CALL_OW 255
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 33
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 91
41687: PUSH
41688: LD_VAR 0 1
41692: PUSH
41693: LD_EXP 33
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 50
41705: PUSH
41706: EMPTY
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: PPUSH
41715: CALL_OW 69
41719: ST_TO_ADDR
// if not tmp then
41720: LD_VAR 0 2
41724: NOT
41725: IFFALSE 41729
// continue ;
41727: GO 41524
// HackLink ( i , tmp ) ;
41729: LD_VAR 0 1
41733: PPUSH
41734: LD_VAR 0 2
41738: PPUSH
41739: CALL 41886 0 2
// end ;
41743: GO 41524
41745: POP
41746: POP
// end ;
41747: PPOPN 2
41749: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41750: LD_INT 0
41752: PPUSH
41753: PPUSH
41754: PPUSH
// if not hack in hackTanks then
41755: LD_VAR 0 1
41759: PUSH
41760: LD_EXP 30
41764: IN
41765: NOT
41766: IFFALSE 41770
// exit ;
41768: GO 41881
// index := GetElementIndex ( hackTanks , hack ) ;
41770: LD_ADDR_VAR 0 4
41774: PUSH
41775: LD_EXP 30
41779: PPUSH
41780: LD_VAR 0 1
41784: PPUSH
41785: CALL 7644 0 2
41789: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41790: LD_EXP 31
41794: PUSH
41795: LD_VAR 0 4
41799: ARRAY
41800: IFFALSE 41881
// begin for i in hackTanksCaptured [ index ] do
41802: LD_ADDR_VAR 0 3
41806: PUSH
41807: LD_EXP 31
41811: PUSH
41812: LD_VAR 0 4
41816: ARRAY
41817: PUSH
41818: FOR_IN
41819: IFFALSE 41845
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41821: LD_VAR 0 3
41825: PUSH
41826: LD_INT 1
41828: ARRAY
41829: PPUSH
41830: LD_VAR 0 3
41834: PUSH
41835: LD_INT 2
41837: ARRAY
41838: PPUSH
41839: CALL_OW 235
41843: GO 41818
41845: POP
41846: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41847: LD_ADDR_EXP 31
41851: PUSH
41852: LD_EXP 31
41856: PPUSH
41857: LD_VAR 0 4
41861: PPUSH
41862: EMPTY
41863: PPUSH
41864: CALL_OW 1
41868: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41869: LD_VAR 0 1
41873: PPUSH
41874: LD_INT 0
41876: PPUSH
41877: CALL_OW 505
// end ; end ;
41881: LD_VAR 0 2
41885: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41886: LD_INT 0
41888: PPUSH
41889: PPUSH
41890: PPUSH
// if not hack in hackTanks or not vehicles then
41891: LD_VAR 0 1
41895: PUSH
41896: LD_EXP 30
41900: IN
41901: NOT
41902: PUSH
41903: LD_VAR 0 2
41907: NOT
41908: OR
41909: IFFALSE 41913
// exit ;
41911: GO 42188
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41913: LD_ADDR_VAR 0 2
41917: PUSH
41918: LD_VAR 0 1
41922: PPUSH
41923: LD_VAR 0 2
41927: PPUSH
41928: LD_INT 1
41930: PPUSH
41931: LD_INT 1
41933: PPUSH
41934: CALL 8294 0 4
41938: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41939: LD_ADDR_VAR 0 5
41943: PUSH
41944: LD_EXP 30
41948: PPUSH
41949: LD_VAR 0 1
41953: PPUSH
41954: CALL 7644 0 2
41958: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41959: LD_EXP 31
41963: PUSH
41964: LD_VAR 0 5
41968: ARRAY
41969: PUSH
41970: LD_EXP 32
41974: LESS
41975: IFFALSE 42164
// begin for i := 1 to vehicles do
41977: LD_ADDR_VAR 0 4
41981: PUSH
41982: DOUBLE
41983: LD_INT 1
41985: DEC
41986: ST_TO_ADDR
41987: LD_VAR 0 2
41991: PUSH
41992: FOR_TO
41993: IFFALSE 42162
// begin if hackTanksCaptured [ index ] = hackLimit then
41995: LD_EXP 31
41999: PUSH
42000: LD_VAR 0 5
42004: ARRAY
42005: PUSH
42006: LD_EXP 32
42010: EQUAL
42011: IFFALSE 42015
// break ;
42013: GO 42162
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
42015: LD_ADDR_EXP 34
42019: PUSH
42020: LD_EXP 34
42024: PPUSH
42025: LD_VAR 0 5
42029: PPUSH
42030: LD_EXP 34
42034: PUSH
42035: LD_VAR 0 5
42039: ARRAY
42040: PUSH
42041: LD_INT 1
42043: PLUS
42044: PPUSH
42045: CALL_OW 1
42049: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
42050: LD_ADDR_EXP 31
42054: PUSH
42055: LD_EXP 31
42059: PPUSH
42060: LD_VAR 0 5
42064: PUSH
42065: LD_EXP 31
42069: PUSH
42070: LD_VAR 0 5
42074: ARRAY
42075: PUSH
42076: LD_INT 1
42078: PLUS
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PPUSH
42084: LD_VAR 0 2
42088: PUSH
42089: LD_VAR 0 4
42093: ARRAY
42094: PUSH
42095: LD_VAR 0 2
42099: PUSH
42100: LD_VAR 0 4
42104: ARRAY
42105: PPUSH
42106: CALL_OW 255
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PPUSH
42115: CALL 7859 0 3
42119: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
42120: LD_VAR 0 2
42124: PUSH
42125: LD_VAR 0 4
42129: ARRAY
42130: PPUSH
42131: LD_VAR 0 1
42135: PPUSH
42136: CALL_OW 255
42140: PPUSH
42141: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
42145: LD_VAR 0 2
42149: PUSH
42150: LD_VAR 0 4
42154: ARRAY
42155: PPUSH
42156: CALL_OW 141
// end ;
42160: GO 41992
42162: POP
42163: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42164: LD_VAR 0 1
42168: PPUSH
42169: LD_EXP 31
42173: PUSH
42174: LD_VAR 0 5
42178: ARRAY
42179: PUSH
42180: LD_INT 0
42182: PLUS
42183: PPUSH
42184: CALL_OW 505
// end ;
42188: LD_VAR 0 3
42192: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
42193: LD_INT 0
42195: PPUSH
42196: PPUSH
42197: PPUSH
42198: PPUSH
// if not hack in hackTanks then
42199: LD_VAR 0 1
42203: PUSH
42204: LD_EXP 30
42208: IN
42209: NOT
42210: IFFALSE 42214
// exit ;
42212: GO 42454
// index := GetElementIndex ( hackTanks , hack ) ;
42214: LD_ADDR_VAR 0 4
42218: PUSH
42219: LD_EXP 30
42223: PPUSH
42224: LD_VAR 0 1
42228: PPUSH
42229: CALL 7644 0 2
42233: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
42234: LD_ADDR_VAR 0 3
42238: PUSH
42239: DOUBLE
42240: LD_EXP 31
42244: PUSH
42245: LD_VAR 0 4
42249: ARRAY
42250: INC
42251: ST_TO_ADDR
42252: LD_INT 1
42254: PUSH
42255: FOR_DOWNTO
42256: IFFALSE 42428
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
42258: LD_ADDR_VAR 0 5
42262: PUSH
42263: LD_EXP 31
42267: PUSH
42268: LD_VAR 0 4
42272: ARRAY
42273: PUSH
42274: LD_VAR 0 3
42278: ARRAY
42279: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
42280: LD_VAR 0 5
42284: PUSH
42285: LD_INT 1
42287: ARRAY
42288: PPUSH
42289: CALL_OW 302
42293: NOT
42294: PUSH
42295: LD_VAR 0 5
42299: PUSH
42300: LD_INT 1
42302: ARRAY
42303: PPUSH
42304: CALL_OW 255
42308: PUSH
42309: LD_VAR 0 1
42313: PPUSH
42314: CALL_OW 255
42318: NONEQUAL
42319: OR
42320: IFFALSE 42426
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
42322: LD_VAR 0 5
42326: PUSH
42327: LD_INT 1
42329: ARRAY
42330: PPUSH
42331: CALL_OW 305
42335: PUSH
42336: LD_VAR 0 5
42340: PUSH
42341: LD_INT 1
42343: ARRAY
42344: PPUSH
42345: CALL_OW 255
42349: PUSH
42350: LD_VAR 0 1
42354: PPUSH
42355: CALL_OW 255
42359: EQUAL
42360: AND
42361: IFFALSE 42385
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
42363: LD_VAR 0 5
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: PPUSH
42372: LD_VAR 0 5
42376: PUSH
42377: LD_INT 2
42379: ARRAY
42380: PPUSH
42381: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
42385: LD_ADDR_EXP 31
42389: PUSH
42390: LD_EXP 31
42394: PPUSH
42395: LD_VAR 0 4
42399: PPUSH
42400: LD_EXP 31
42404: PUSH
42405: LD_VAR 0 4
42409: ARRAY
42410: PPUSH
42411: LD_VAR 0 3
42415: PPUSH
42416: CALL_OW 3
42420: PPUSH
42421: CALL_OW 1
42425: ST_TO_ADDR
// end ; end ;
42426: GO 42255
42428: POP
42429: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42430: LD_VAR 0 1
42434: PPUSH
42435: LD_EXP 31
42439: PUSH
42440: LD_VAR 0 4
42444: ARRAY
42445: PUSH
42446: LD_INT 0
42448: PLUS
42449: PPUSH
42450: CALL_OW 505
// end ;
42454: LD_VAR 0 2
42458: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42459: LD_INT 0
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
// if not hack in hackTanks then
42465: LD_VAR 0 1
42469: PUSH
42470: LD_EXP 30
42474: IN
42475: NOT
42476: IFFALSE 42480
// exit ;
42478: GO 42565
// index := GetElementIndex ( hackTanks , hack ) ;
42480: LD_ADDR_VAR 0 5
42484: PUSH
42485: LD_EXP 30
42489: PPUSH
42490: LD_VAR 0 1
42494: PPUSH
42495: CALL 7644 0 2
42499: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42500: LD_ADDR_VAR 0 4
42504: PUSH
42505: DOUBLE
42506: LD_INT 1
42508: DEC
42509: ST_TO_ADDR
42510: LD_EXP 31
42514: PUSH
42515: LD_VAR 0 5
42519: ARRAY
42520: PUSH
42521: FOR_TO
42522: IFFALSE 42563
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42524: LD_EXP 31
42528: PUSH
42529: LD_VAR 0 5
42533: ARRAY
42534: PUSH
42535: LD_VAR 0 4
42539: ARRAY
42540: PUSH
42541: LD_INT 1
42543: ARRAY
42544: PUSH
42545: LD_VAR 0 2
42549: EQUAL
42550: IFFALSE 42561
// KillUnit ( vehicle ) ;
42552: LD_VAR 0 2
42556: PPUSH
42557: CALL_OW 66
42561: GO 42521
42563: POP
42564: POP
// end ;
42565: LD_VAR 0 3
42569: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42570: LD_EXP 35
42574: NOT
42575: IFFALSE 42610
42577: GO 42579
42579: DISABLE
// begin initMiner := true ;
42580: LD_ADDR_EXP 35
42584: PUSH
42585: LD_INT 1
42587: ST_TO_ADDR
// minersList := [ ] ;
42588: LD_ADDR_EXP 36
42592: PUSH
42593: EMPTY
42594: ST_TO_ADDR
// minerMinesList := [ ] ;
42595: LD_ADDR_EXP 37
42599: PUSH
42600: EMPTY
42601: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42602: LD_ADDR_EXP 38
42606: PUSH
42607: LD_INT 5
42609: ST_TO_ADDR
// end ;
42610: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42611: LD_EXP 35
42615: PUSH
42616: LD_INT 34
42618: PUSH
42619: LD_EXP 16
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PPUSH
42628: CALL_OW 69
42632: AND
42633: IFFALSE 43096
42635: GO 42637
42637: DISABLE
42638: LD_INT 0
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
// begin enable ;
42644: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42645: LD_ADDR_VAR 0 1
42649: PUSH
42650: LD_INT 34
42652: PUSH
42653: LD_EXP 16
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PPUSH
42662: CALL_OW 69
42666: PUSH
42667: FOR_IN
42668: IFFALSE 42740
// begin if not i in minersList then
42670: LD_VAR 0 1
42674: PUSH
42675: LD_EXP 36
42679: IN
42680: NOT
42681: IFFALSE 42738
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42683: LD_ADDR_EXP 36
42687: PUSH
42688: LD_EXP 36
42692: PPUSH
42693: LD_EXP 36
42697: PUSH
42698: LD_INT 1
42700: PLUS
42701: PPUSH
42702: LD_VAR 0 1
42706: PPUSH
42707: CALL_OW 1
42711: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42712: LD_ADDR_EXP 37
42716: PUSH
42717: LD_EXP 37
42721: PPUSH
42722: LD_EXP 37
42726: PUSH
42727: LD_INT 1
42729: PLUS
42730: PPUSH
42731: EMPTY
42732: PPUSH
42733: CALL_OW 1
42737: ST_TO_ADDR
// end end ;
42738: GO 42667
42740: POP
42741: POP
// for i := minerMinesList downto 1 do
42742: LD_ADDR_VAR 0 1
42746: PUSH
42747: DOUBLE
42748: LD_EXP 37
42752: INC
42753: ST_TO_ADDR
42754: LD_INT 1
42756: PUSH
42757: FOR_DOWNTO
42758: IFFALSE 43094
// begin if IsLive ( minersList [ i ] ) then
42760: LD_EXP 36
42764: PUSH
42765: LD_VAR 0 1
42769: ARRAY
42770: PPUSH
42771: CALL_OW 300
42775: IFFALSE 42803
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42777: LD_EXP 36
42781: PUSH
42782: LD_VAR 0 1
42786: ARRAY
42787: PPUSH
42788: LD_EXP 37
42792: PUSH
42793: LD_VAR 0 1
42797: ARRAY
42798: PPUSH
42799: CALL_OW 505
// if not minerMinesList [ i ] then
42803: LD_EXP 37
42807: PUSH
42808: LD_VAR 0 1
42812: ARRAY
42813: NOT
42814: IFFALSE 42818
// continue ;
42816: GO 42757
// for j := minerMinesList [ i ] downto 1 do
42818: LD_ADDR_VAR 0 2
42822: PUSH
42823: DOUBLE
42824: LD_EXP 37
42828: PUSH
42829: LD_VAR 0 1
42833: ARRAY
42834: INC
42835: ST_TO_ADDR
42836: LD_INT 1
42838: PUSH
42839: FOR_DOWNTO
42840: IFFALSE 43090
// begin side := GetSide ( minersList [ i ] ) ;
42842: LD_ADDR_VAR 0 3
42846: PUSH
42847: LD_EXP 36
42851: PUSH
42852: LD_VAR 0 1
42856: ARRAY
42857: PPUSH
42858: CALL_OW 255
42862: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42863: LD_ADDR_VAR 0 4
42867: PUSH
42868: LD_EXP 37
42872: PUSH
42873: LD_VAR 0 1
42877: ARRAY
42878: PUSH
42879: LD_VAR 0 2
42883: ARRAY
42884: PUSH
42885: LD_INT 1
42887: ARRAY
42888: PPUSH
42889: LD_EXP 37
42893: PUSH
42894: LD_VAR 0 1
42898: ARRAY
42899: PUSH
42900: LD_VAR 0 2
42904: ARRAY
42905: PUSH
42906: LD_INT 2
42908: ARRAY
42909: PPUSH
42910: CALL_OW 428
42914: ST_TO_ADDR
// if not tmp then
42915: LD_VAR 0 4
42919: NOT
42920: IFFALSE 42924
// continue ;
42922: GO 42839
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42924: LD_VAR 0 4
42928: PUSH
42929: LD_INT 81
42931: PUSH
42932: LD_VAR 0 3
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PPUSH
42941: CALL_OW 69
42945: IN
42946: PUSH
42947: LD_EXP 37
42951: PUSH
42952: LD_VAR 0 1
42956: ARRAY
42957: PUSH
42958: LD_VAR 0 2
42962: ARRAY
42963: PUSH
42964: LD_INT 1
42966: ARRAY
42967: PPUSH
42968: LD_EXP 37
42972: PUSH
42973: LD_VAR 0 1
42977: ARRAY
42978: PUSH
42979: LD_VAR 0 2
42983: ARRAY
42984: PUSH
42985: LD_INT 2
42987: ARRAY
42988: PPUSH
42989: CALL_OW 458
42993: AND
42994: IFFALSE 43088
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42996: LD_EXP 37
43000: PUSH
43001: LD_VAR 0 1
43005: ARRAY
43006: PUSH
43007: LD_VAR 0 2
43011: ARRAY
43012: PUSH
43013: LD_INT 1
43015: ARRAY
43016: PPUSH
43017: LD_EXP 37
43021: PUSH
43022: LD_VAR 0 1
43026: ARRAY
43027: PUSH
43028: LD_VAR 0 2
43032: ARRAY
43033: PUSH
43034: LD_INT 2
43036: ARRAY
43037: PPUSH
43038: LD_VAR 0 3
43042: PPUSH
43043: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
43047: LD_ADDR_EXP 37
43051: PUSH
43052: LD_EXP 37
43056: PPUSH
43057: LD_VAR 0 1
43061: PPUSH
43062: LD_EXP 37
43066: PUSH
43067: LD_VAR 0 1
43071: ARRAY
43072: PPUSH
43073: LD_VAR 0 2
43077: PPUSH
43078: CALL_OW 3
43082: PPUSH
43083: CALL_OW 1
43087: ST_TO_ADDR
// end ; end ;
43088: GO 42839
43090: POP
43091: POP
// end ;
43092: GO 42757
43094: POP
43095: POP
// end ;
43096: PPOPN 4
43098: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
43099: LD_INT 0
43101: PPUSH
43102: PPUSH
// result := false ;
43103: LD_ADDR_VAR 0 4
43107: PUSH
43108: LD_INT 0
43110: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
43111: LD_VAR 0 1
43115: PPUSH
43116: CALL_OW 264
43120: PUSH
43121: LD_EXP 16
43125: EQUAL
43126: NOT
43127: IFFALSE 43131
// exit ;
43129: GO 43371
// index := GetElementIndex ( minersList , unit ) ;
43131: LD_ADDR_VAR 0 5
43135: PUSH
43136: LD_EXP 36
43140: PPUSH
43141: LD_VAR 0 1
43145: PPUSH
43146: CALL 7644 0 2
43150: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
43151: LD_EXP 37
43155: PUSH
43156: LD_VAR 0 5
43160: ARRAY
43161: PUSH
43162: LD_EXP 38
43166: GREATEREQUAL
43167: IFFALSE 43171
// exit ;
43169: GO 43371
// ComMoveXY ( unit , x , y ) ;
43171: LD_VAR 0 1
43175: PPUSH
43176: LD_VAR 0 2
43180: PPUSH
43181: LD_VAR 0 3
43185: PPUSH
43186: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43190: LD_INT 35
43192: PPUSH
43193: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
43197: LD_VAR 0 1
43201: PPUSH
43202: LD_VAR 0 2
43206: PPUSH
43207: LD_VAR 0 3
43211: PPUSH
43212: CALL 38041 0 3
43216: NOT
43217: PUSH
43218: LD_VAR 0 1
43222: PPUSH
43223: CALL_OW 314
43227: AND
43228: IFFALSE 43232
// exit ;
43230: GO 43371
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
43232: LD_VAR 0 2
43236: PPUSH
43237: LD_VAR 0 3
43241: PPUSH
43242: CALL_OW 428
43246: PUSH
43247: LD_VAR 0 1
43251: EQUAL
43252: PUSH
43253: LD_VAR 0 1
43257: PPUSH
43258: CALL_OW 314
43262: NOT
43263: AND
43264: IFFALSE 43190
// PlaySoundXY ( x , y , PlantMine ) ;
43266: LD_VAR 0 2
43270: PPUSH
43271: LD_VAR 0 3
43275: PPUSH
43276: LD_STRING PlantMine
43278: PPUSH
43279: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
43283: LD_VAR 0 2
43287: PPUSH
43288: LD_VAR 0 3
43292: PPUSH
43293: LD_VAR 0 1
43297: PPUSH
43298: CALL_OW 255
43302: PPUSH
43303: LD_INT 0
43305: PPUSH
43306: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
43310: LD_ADDR_EXP 37
43314: PUSH
43315: LD_EXP 37
43319: PPUSH
43320: LD_VAR 0 5
43324: PUSH
43325: LD_EXP 37
43329: PUSH
43330: LD_VAR 0 5
43334: ARRAY
43335: PUSH
43336: LD_INT 1
43338: PLUS
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PPUSH
43344: LD_VAR 0 2
43348: PUSH
43349: LD_VAR 0 3
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PPUSH
43358: CALL 7859 0 3
43362: ST_TO_ADDR
// result := true ;
43363: LD_ADDR_VAR 0 4
43367: PUSH
43368: LD_INT 1
43370: ST_TO_ADDR
// end ;
43371: LD_VAR 0 4
43375: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
43376: LD_INT 0
43378: PPUSH
43379: PPUSH
43380: PPUSH
// if not unit in minersList then
43381: LD_VAR 0 1
43385: PUSH
43386: LD_EXP 36
43390: IN
43391: NOT
43392: IFFALSE 43396
// exit ;
43394: GO 43788
// index := GetElementIndex ( minersList , unit ) ;
43396: LD_ADDR_VAR 0 6
43400: PUSH
43401: LD_EXP 36
43405: PPUSH
43406: LD_VAR 0 1
43410: PPUSH
43411: CALL 7644 0 2
43415: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
43416: LD_ADDR_VAR 0 5
43420: PUSH
43421: DOUBLE
43422: LD_EXP 37
43426: PUSH
43427: LD_VAR 0 6
43431: ARRAY
43432: INC
43433: ST_TO_ADDR
43434: LD_INT 1
43436: PUSH
43437: FOR_DOWNTO
43438: IFFALSE 43599
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
43440: LD_EXP 37
43444: PUSH
43445: LD_VAR 0 6
43449: ARRAY
43450: PUSH
43451: LD_VAR 0 5
43455: ARRAY
43456: PUSH
43457: LD_INT 1
43459: ARRAY
43460: PUSH
43461: LD_VAR 0 2
43465: EQUAL
43466: PUSH
43467: LD_EXP 37
43471: PUSH
43472: LD_VAR 0 6
43476: ARRAY
43477: PUSH
43478: LD_VAR 0 5
43482: ARRAY
43483: PUSH
43484: LD_INT 2
43486: ARRAY
43487: PUSH
43488: LD_VAR 0 3
43492: EQUAL
43493: AND
43494: IFFALSE 43597
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43496: LD_EXP 37
43500: PUSH
43501: LD_VAR 0 6
43505: ARRAY
43506: PUSH
43507: LD_VAR 0 5
43511: ARRAY
43512: PUSH
43513: LD_INT 1
43515: ARRAY
43516: PPUSH
43517: LD_EXP 37
43521: PUSH
43522: LD_VAR 0 6
43526: ARRAY
43527: PUSH
43528: LD_VAR 0 5
43532: ARRAY
43533: PUSH
43534: LD_INT 2
43536: ARRAY
43537: PPUSH
43538: LD_VAR 0 1
43542: PPUSH
43543: CALL_OW 255
43547: PPUSH
43548: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43552: LD_ADDR_EXP 37
43556: PUSH
43557: LD_EXP 37
43561: PPUSH
43562: LD_VAR 0 6
43566: PPUSH
43567: LD_EXP 37
43571: PUSH
43572: LD_VAR 0 6
43576: ARRAY
43577: PPUSH
43578: LD_VAR 0 5
43582: PPUSH
43583: CALL_OW 3
43587: PPUSH
43588: CALL_OW 1
43592: ST_TO_ADDR
// exit ;
43593: POP
43594: POP
43595: GO 43788
// end ; end ;
43597: GO 43437
43599: POP
43600: POP
// for i := minerMinesList [ index ] downto 1 do
43601: LD_ADDR_VAR 0 5
43605: PUSH
43606: DOUBLE
43607: LD_EXP 37
43611: PUSH
43612: LD_VAR 0 6
43616: ARRAY
43617: INC
43618: ST_TO_ADDR
43619: LD_INT 1
43621: PUSH
43622: FOR_DOWNTO
43623: IFFALSE 43786
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43625: LD_EXP 37
43629: PUSH
43630: LD_VAR 0 6
43634: ARRAY
43635: PUSH
43636: LD_VAR 0 5
43640: ARRAY
43641: PUSH
43642: LD_INT 1
43644: ARRAY
43645: PPUSH
43646: LD_EXP 37
43650: PUSH
43651: LD_VAR 0 6
43655: ARRAY
43656: PUSH
43657: LD_VAR 0 5
43661: ARRAY
43662: PUSH
43663: LD_INT 2
43665: ARRAY
43666: PPUSH
43667: LD_VAR 0 2
43671: PPUSH
43672: LD_VAR 0 3
43676: PPUSH
43677: CALL_OW 298
43681: PUSH
43682: LD_INT 6
43684: LESS
43685: IFFALSE 43784
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43687: LD_EXP 37
43691: PUSH
43692: LD_VAR 0 6
43696: ARRAY
43697: PUSH
43698: LD_VAR 0 5
43702: ARRAY
43703: PUSH
43704: LD_INT 1
43706: ARRAY
43707: PPUSH
43708: LD_EXP 37
43712: PUSH
43713: LD_VAR 0 6
43717: ARRAY
43718: PUSH
43719: LD_VAR 0 5
43723: ARRAY
43724: PUSH
43725: LD_INT 2
43727: ARRAY
43728: PPUSH
43729: LD_VAR 0 1
43733: PPUSH
43734: CALL_OW 255
43738: PPUSH
43739: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43743: LD_ADDR_EXP 37
43747: PUSH
43748: LD_EXP 37
43752: PPUSH
43753: LD_VAR 0 6
43757: PPUSH
43758: LD_EXP 37
43762: PUSH
43763: LD_VAR 0 6
43767: ARRAY
43768: PPUSH
43769: LD_VAR 0 5
43773: PPUSH
43774: CALL_OW 3
43778: PPUSH
43779: CALL_OW 1
43783: ST_TO_ADDR
// end ; end ;
43784: GO 43622
43786: POP
43787: POP
// end ;
43788: LD_VAR 0 4
43792: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43793: LD_INT 0
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43804: LD_VAR 0 1
43808: PPUSH
43809: CALL_OW 264
43813: PUSH
43814: LD_EXP 16
43818: EQUAL
43819: NOT
43820: PUSH
43821: LD_VAR 0 1
43825: PUSH
43826: LD_EXP 36
43830: IN
43831: NOT
43832: OR
43833: IFFALSE 43837
// exit ;
43835: GO 44159
// index := GetElementIndex ( minersList , unit ) ;
43837: LD_ADDR_VAR 0 6
43841: PUSH
43842: LD_EXP 36
43846: PPUSH
43847: LD_VAR 0 1
43851: PPUSH
43852: CALL 7644 0 2
43856: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43857: LD_ADDR_VAR 0 8
43861: PUSH
43862: LD_EXP 38
43866: PUSH
43867: LD_EXP 37
43871: PUSH
43872: LD_VAR 0 6
43876: ARRAY
43877: MINUS
43878: ST_TO_ADDR
// if not minesFreeAmount then
43879: LD_VAR 0 8
43883: NOT
43884: IFFALSE 43888
// exit ;
43886: GO 44159
// tmp := [ ] ;
43888: LD_ADDR_VAR 0 7
43892: PUSH
43893: EMPTY
43894: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43895: LD_ADDR_VAR 0 5
43899: PUSH
43900: DOUBLE
43901: LD_INT 1
43903: DEC
43904: ST_TO_ADDR
43905: LD_VAR 0 8
43909: PUSH
43910: FOR_TO
43911: IFFALSE 44106
// begin _d := rand ( 0 , 5 ) ;
43913: LD_ADDR_VAR 0 11
43917: PUSH
43918: LD_INT 0
43920: PPUSH
43921: LD_INT 5
43923: PPUSH
43924: CALL_OW 12
43928: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43929: LD_ADDR_VAR 0 12
43933: PUSH
43934: LD_INT 2
43936: PPUSH
43937: LD_INT 6
43939: PPUSH
43940: CALL_OW 12
43944: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43945: LD_ADDR_VAR 0 9
43949: PUSH
43950: LD_VAR 0 2
43954: PPUSH
43955: LD_VAR 0 11
43959: PPUSH
43960: LD_VAR 0 12
43964: PPUSH
43965: CALL_OW 272
43969: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43970: LD_ADDR_VAR 0 10
43974: PUSH
43975: LD_VAR 0 3
43979: PPUSH
43980: LD_VAR 0 11
43984: PPUSH
43985: LD_VAR 0 12
43989: PPUSH
43990: CALL_OW 273
43994: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43995: LD_VAR 0 9
43999: PPUSH
44000: LD_VAR 0 10
44004: PPUSH
44005: CALL_OW 488
44009: PUSH
44010: LD_VAR 0 9
44014: PUSH
44015: LD_VAR 0 10
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_VAR 0 7
44028: IN
44029: NOT
44030: AND
44031: PUSH
44032: LD_VAR 0 9
44036: PPUSH
44037: LD_VAR 0 10
44041: PPUSH
44042: CALL_OW 458
44046: NOT
44047: AND
44048: IFFALSE 44090
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
44050: LD_ADDR_VAR 0 7
44054: PUSH
44055: LD_VAR 0 7
44059: PPUSH
44060: LD_VAR 0 7
44064: PUSH
44065: LD_INT 1
44067: PLUS
44068: PPUSH
44069: LD_VAR 0 9
44073: PUSH
44074: LD_VAR 0 10
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PPUSH
44083: CALL_OW 1
44087: ST_TO_ADDR
44088: GO 44104
// i := i - 1 ;
44090: LD_ADDR_VAR 0 5
44094: PUSH
44095: LD_VAR 0 5
44099: PUSH
44100: LD_INT 1
44102: MINUS
44103: ST_TO_ADDR
// end ;
44104: GO 43910
44106: POP
44107: POP
// for i in tmp do
44108: LD_ADDR_VAR 0 5
44112: PUSH
44113: LD_VAR 0 7
44117: PUSH
44118: FOR_IN
44119: IFFALSE 44157
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
44121: LD_VAR 0 1
44125: PPUSH
44126: LD_VAR 0 5
44130: PUSH
44131: LD_INT 1
44133: ARRAY
44134: PPUSH
44135: LD_VAR 0 5
44139: PUSH
44140: LD_INT 2
44142: ARRAY
44143: PPUSH
44144: CALL 43099 0 3
44148: NOT
44149: IFFALSE 44155
// exit ;
44151: POP
44152: POP
44153: GO 44159
44155: GO 44118
44157: POP
44158: POP
// end ;
44159: LD_VAR 0 4
44163: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
44164: LD_INT 0
44166: PPUSH
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
// if not GetClass ( unit ) = class_sniper then
44173: LD_VAR 0 1
44177: PPUSH
44178: CALL_OW 257
44182: PUSH
44183: LD_INT 5
44185: EQUAL
44186: NOT
44187: IFFALSE 44191
// exit ;
44189: GO 44579
// dist := 8 ;
44191: LD_ADDR_VAR 0 5
44195: PUSH
44196: LD_INT 8
44198: ST_TO_ADDR
// viewRange := 12 ;
44199: LD_ADDR_VAR 0 7
44203: PUSH
44204: LD_INT 12
44206: ST_TO_ADDR
// side := GetSide ( unit ) ;
44207: LD_ADDR_VAR 0 6
44211: PUSH
44212: LD_VAR 0 1
44216: PPUSH
44217: CALL_OW 255
44221: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
44222: LD_INT 61
44224: PPUSH
44225: LD_VAR 0 6
44229: PPUSH
44230: CALL_OW 321
44234: PUSH
44235: LD_INT 2
44237: EQUAL
44238: IFFALSE 44248
// viewRange := 16 ;
44240: LD_ADDR_VAR 0 7
44244: PUSH
44245: LD_INT 16
44247: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
44248: LD_VAR 0 1
44252: PPUSH
44253: LD_VAR 0 2
44257: PPUSH
44258: LD_VAR 0 3
44262: PPUSH
44263: CALL_OW 297
44267: PUSH
44268: LD_VAR 0 5
44272: GREATER
44273: IFFALSE 44352
// begin ComMoveXY ( unit , x , y ) ;
44275: LD_VAR 0 1
44279: PPUSH
44280: LD_VAR 0 2
44284: PPUSH
44285: LD_VAR 0 3
44289: PPUSH
44290: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44294: LD_INT 35
44296: PPUSH
44297: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
44301: LD_VAR 0 1
44305: PPUSH
44306: LD_VAR 0 2
44310: PPUSH
44311: LD_VAR 0 3
44315: PPUSH
44316: CALL 38041 0 3
44320: NOT
44321: IFFALSE 44325
// exit ;
44323: GO 44579
// until GetDistUnitXY ( unit , x , y ) < dist ;
44325: LD_VAR 0 1
44329: PPUSH
44330: LD_VAR 0 2
44334: PPUSH
44335: LD_VAR 0 3
44339: PPUSH
44340: CALL_OW 297
44344: PUSH
44345: LD_VAR 0 5
44349: LESS
44350: IFFALSE 44294
// end ; ComTurnXY ( unit , x , y ) ;
44352: LD_VAR 0 1
44356: PPUSH
44357: LD_VAR 0 2
44361: PPUSH
44362: LD_VAR 0 3
44366: PPUSH
44367: CALL_OW 118
// wait ( 5 ) ;
44371: LD_INT 5
44373: PPUSH
44374: CALL_OW 67
// _d := GetDir ( unit ) ;
44378: LD_ADDR_VAR 0 10
44382: PUSH
44383: LD_VAR 0 1
44387: PPUSH
44388: CALL_OW 254
44392: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
44393: LD_ADDR_VAR 0 8
44397: PUSH
44398: LD_VAR 0 1
44402: PPUSH
44403: CALL_OW 250
44407: PPUSH
44408: LD_VAR 0 10
44412: PPUSH
44413: LD_VAR 0 5
44417: PPUSH
44418: CALL_OW 272
44422: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
44423: LD_ADDR_VAR 0 9
44427: PUSH
44428: LD_VAR 0 1
44432: PPUSH
44433: CALL_OW 251
44437: PPUSH
44438: LD_VAR 0 10
44442: PPUSH
44443: LD_VAR 0 5
44447: PPUSH
44448: CALL_OW 273
44452: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44453: LD_VAR 0 8
44457: PPUSH
44458: LD_VAR 0 9
44462: PPUSH
44463: CALL_OW 488
44467: NOT
44468: IFFALSE 44472
// exit ;
44470: GO 44579
// ComAnimCustom ( unit , 1 ) ;
44472: LD_VAR 0 1
44476: PPUSH
44477: LD_INT 1
44479: PPUSH
44480: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44484: LD_VAR 0 8
44488: PPUSH
44489: LD_VAR 0 9
44493: PPUSH
44494: LD_VAR 0 6
44498: PPUSH
44499: LD_VAR 0 7
44503: PPUSH
44504: CALL_OW 330
// repeat wait ( 1 ) ;
44508: LD_INT 1
44510: PPUSH
44511: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44515: LD_VAR 0 1
44519: PPUSH
44520: CALL_OW 316
44524: PUSH
44525: LD_VAR 0 1
44529: PPUSH
44530: CALL_OW 314
44534: OR
44535: PUSH
44536: LD_VAR 0 1
44540: PPUSH
44541: CALL_OW 302
44545: NOT
44546: OR
44547: PUSH
44548: LD_VAR 0 1
44552: PPUSH
44553: CALL_OW 301
44557: OR
44558: IFFALSE 44508
// RemoveSeeing ( _x , _y , side ) ;
44560: LD_VAR 0 8
44564: PPUSH
44565: LD_VAR 0 9
44569: PPUSH
44570: LD_VAR 0 6
44574: PPUSH
44575: CALL_OW 331
// end ; end_of_file
44579: LD_VAR 0 4
44583: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
44584: LD_INT 0
44586: PPUSH
// if p2 = 100 then
44587: LD_VAR 0 2
44591: PUSH
44592: LD_INT 100
44594: EQUAL
44595: IFFALSE 45544
// begin if not StreamModeActive then
44597: LD_EXP 39
44601: NOT
44602: IFFALSE 44612
// StreamModeActive := true ;
44604: LD_ADDR_EXP 39
44608: PUSH
44609: LD_INT 1
44611: ST_TO_ADDR
// if p3 = 0 then
44612: LD_VAR 0 3
44616: PUSH
44617: LD_INT 0
44619: EQUAL
44620: IFFALSE 44626
// InitStreamMode ;
44622: CALL 45704 0 0
// if p3 = 1 then
44626: LD_VAR 0 3
44630: PUSH
44631: LD_INT 1
44633: EQUAL
44634: IFFALSE 44644
// sRocket := true ;
44636: LD_ADDR_EXP 44
44640: PUSH
44641: LD_INT 1
44643: ST_TO_ADDR
// if p3 = 2 then
44644: LD_VAR 0 3
44648: PUSH
44649: LD_INT 2
44651: EQUAL
44652: IFFALSE 44662
// sSpeed := true ;
44654: LD_ADDR_EXP 43
44658: PUSH
44659: LD_INT 1
44661: ST_TO_ADDR
// if p3 = 3 then
44662: LD_VAR 0 3
44666: PUSH
44667: LD_INT 3
44669: EQUAL
44670: IFFALSE 44680
// sEngine := true ;
44672: LD_ADDR_EXP 45
44676: PUSH
44677: LD_INT 1
44679: ST_TO_ADDR
// if p3 = 4 then
44680: LD_VAR 0 3
44684: PUSH
44685: LD_INT 4
44687: EQUAL
44688: IFFALSE 44698
// sSpec := true ;
44690: LD_ADDR_EXP 42
44694: PUSH
44695: LD_INT 1
44697: ST_TO_ADDR
// if p3 = 5 then
44698: LD_VAR 0 3
44702: PUSH
44703: LD_INT 5
44705: EQUAL
44706: IFFALSE 44716
// sLevel := true ;
44708: LD_ADDR_EXP 46
44712: PUSH
44713: LD_INT 1
44715: ST_TO_ADDR
// if p3 = 6 then
44716: LD_VAR 0 3
44720: PUSH
44721: LD_INT 6
44723: EQUAL
44724: IFFALSE 44734
// sArmoury := true ;
44726: LD_ADDR_EXP 47
44730: PUSH
44731: LD_INT 1
44733: ST_TO_ADDR
// if p3 = 7 then
44734: LD_VAR 0 3
44738: PUSH
44739: LD_INT 7
44741: EQUAL
44742: IFFALSE 44752
// sRadar := true ;
44744: LD_ADDR_EXP 48
44748: PUSH
44749: LD_INT 1
44751: ST_TO_ADDR
// if p3 = 8 then
44752: LD_VAR 0 3
44756: PUSH
44757: LD_INT 8
44759: EQUAL
44760: IFFALSE 44770
// sBunker := true ;
44762: LD_ADDR_EXP 49
44766: PUSH
44767: LD_INT 1
44769: ST_TO_ADDR
// if p3 = 9 then
44770: LD_VAR 0 3
44774: PUSH
44775: LD_INT 9
44777: EQUAL
44778: IFFALSE 44788
// sHack := true ;
44780: LD_ADDR_EXP 50
44784: PUSH
44785: LD_INT 1
44787: ST_TO_ADDR
// if p3 = 10 then
44788: LD_VAR 0 3
44792: PUSH
44793: LD_INT 10
44795: EQUAL
44796: IFFALSE 44806
// sFire := true ;
44798: LD_ADDR_EXP 51
44802: PUSH
44803: LD_INT 1
44805: ST_TO_ADDR
// if p3 = 11 then
44806: LD_VAR 0 3
44810: PUSH
44811: LD_INT 11
44813: EQUAL
44814: IFFALSE 44824
// sRefresh := true ;
44816: LD_ADDR_EXP 52
44820: PUSH
44821: LD_INT 1
44823: ST_TO_ADDR
// if p3 = 12 then
44824: LD_VAR 0 3
44828: PUSH
44829: LD_INT 12
44831: EQUAL
44832: IFFALSE 44842
// sExp := true ;
44834: LD_ADDR_EXP 53
44838: PUSH
44839: LD_INT 1
44841: ST_TO_ADDR
// if p3 = 13 then
44842: LD_VAR 0 3
44846: PUSH
44847: LD_INT 13
44849: EQUAL
44850: IFFALSE 44860
// sDepot := true ;
44852: LD_ADDR_EXP 54
44856: PUSH
44857: LD_INT 1
44859: ST_TO_ADDR
// if p3 = 14 then
44860: LD_VAR 0 3
44864: PUSH
44865: LD_INT 14
44867: EQUAL
44868: IFFALSE 44878
// sFlag := true ;
44870: LD_ADDR_EXP 55
44874: PUSH
44875: LD_INT 1
44877: ST_TO_ADDR
// if p3 = 15 then
44878: LD_VAR 0 3
44882: PUSH
44883: LD_INT 15
44885: EQUAL
44886: IFFALSE 44896
// sKamikadze := true ;
44888: LD_ADDR_EXP 63
44892: PUSH
44893: LD_INT 1
44895: ST_TO_ADDR
// if p3 = 16 then
44896: LD_VAR 0 3
44900: PUSH
44901: LD_INT 16
44903: EQUAL
44904: IFFALSE 44914
// sTroll := true ;
44906: LD_ADDR_EXP 64
44910: PUSH
44911: LD_INT 1
44913: ST_TO_ADDR
// if p3 = 17 then
44914: LD_VAR 0 3
44918: PUSH
44919: LD_INT 17
44921: EQUAL
44922: IFFALSE 44932
// sSlow := true ;
44924: LD_ADDR_EXP 65
44928: PUSH
44929: LD_INT 1
44931: ST_TO_ADDR
// if p3 = 18 then
44932: LD_VAR 0 3
44936: PUSH
44937: LD_INT 18
44939: EQUAL
44940: IFFALSE 44950
// sLack := true ;
44942: LD_ADDR_EXP 66
44946: PUSH
44947: LD_INT 1
44949: ST_TO_ADDR
// if p3 = 19 then
44950: LD_VAR 0 3
44954: PUSH
44955: LD_INT 19
44957: EQUAL
44958: IFFALSE 44968
// sTank := true ;
44960: LD_ADDR_EXP 68
44964: PUSH
44965: LD_INT 1
44967: ST_TO_ADDR
// if p3 = 20 then
44968: LD_VAR 0 3
44972: PUSH
44973: LD_INT 20
44975: EQUAL
44976: IFFALSE 44986
// sRemote := true ;
44978: LD_ADDR_EXP 69
44982: PUSH
44983: LD_INT 1
44985: ST_TO_ADDR
// if p3 = 21 then
44986: LD_VAR 0 3
44990: PUSH
44991: LD_INT 21
44993: EQUAL
44994: IFFALSE 45004
// sPowell := true ;
44996: LD_ADDR_EXP 70
45000: PUSH
45001: LD_INT 1
45003: ST_TO_ADDR
// if p3 = 22 then
45004: LD_VAR 0 3
45008: PUSH
45009: LD_INT 22
45011: EQUAL
45012: IFFALSE 45022
// sTeleport := true ;
45014: LD_ADDR_EXP 73
45018: PUSH
45019: LD_INT 1
45021: ST_TO_ADDR
// if p3 = 23 then
45022: LD_VAR 0 3
45026: PUSH
45027: LD_INT 23
45029: EQUAL
45030: IFFALSE 45040
// sOilTower := true ;
45032: LD_ADDR_EXP 75
45036: PUSH
45037: LD_INT 1
45039: ST_TO_ADDR
// if p3 = 24 then
45040: LD_VAR 0 3
45044: PUSH
45045: LD_INT 24
45047: EQUAL
45048: IFFALSE 45058
// sShovel := true ;
45050: LD_ADDR_EXP 76
45054: PUSH
45055: LD_INT 1
45057: ST_TO_ADDR
// if p3 = 25 then
45058: LD_VAR 0 3
45062: PUSH
45063: LD_INT 25
45065: EQUAL
45066: IFFALSE 45076
// sSheik := true ;
45068: LD_ADDR_EXP 77
45072: PUSH
45073: LD_INT 1
45075: ST_TO_ADDR
// if p3 = 26 then
45076: LD_VAR 0 3
45080: PUSH
45081: LD_INT 26
45083: EQUAL
45084: IFFALSE 45094
// sEarthquake := true ;
45086: LD_ADDR_EXP 79
45090: PUSH
45091: LD_INT 1
45093: ST_TO_ADDR
// if p3 = 27 then
45094: LD_VAR 0 3
45098: PUSH
45099: LD_INT 27
45101: EQUAL
45102: IFFALSE 45112
// sAI := true ;
45104: LD_ADDR_EXP 80
45108: PUSH
45109: LD_INT 1
45111: ST_TO_ADDR
// if p3 = 28 then
45112: LD_VAR 0 3
45116: PUSH
45117: LD_INT 28
45119: EQUAL
45120: IFFALSE 45130
// sCargo := true ;
45122: LD_ADDR_EXP 83
45126: PUSH
45127: LD_INT 1
45129: ST_TO_ADDR
// if p3 = 29 then
45130: LD_VAR 0 3
45134: PUSH
45135: LD_INT 29
45137: EQUAL
45138: IFFALSE 45148
// sDLaser := true ;
45140: LD_ADDR_EXP 84
45144: PUSH
45145: LD_INT 1
45147: ST_TO_ADDR
// if p3 = 30 then
45148: LD_VAR 0 3
45152: PUSH
45153: LD_INT 30
45155: EQUAL
45156: IFFALSE 45166
// sExchange := true ;
45158: LD_ADDR_EXP 85
45162: PUSH
45163: LD_INT 1
45165: ST_TO_ADDR
// if p3 = 31 then
45166: LD_VAR 0 3
45170: PUSH
45171: LD_INT 31
45173: EQUAL
45174: IFFALSE 45184
// sFac := true ;
45176: LD_ADDR_EXP 86
45180: PUSH
45181: LD_INT 1
45183: ST_TO_ADDR
// if p3 = 32 then
45184: LD_VAR 0 3
45188: PUSH
45189: LD_INT 32
45191: EQUAL
45192: IFFALSE 45202
// sPower := true ;
45194: LD_ADDR_EXP 87
45198: PUSH
45199: LD_INT 1
45201: ST_TO_ADDR
// if p3 = 33 then
45202: LD_VAR 0 3
45206: PUSH
45207: LD_INT 33
45209: EQUAL
45210: IFFALSE 45220
// sRandom := true ;
45212: LD_ADDR_EXP 88
45216: PUSH
45217: LD_INT 1
45219: ST_TO_ADDR
// if p3 = 34 then
45220: LD_VAR 0 3
45224: PUSH
45225: LD_INT 34
45227: EQUAL
45228: IFFALSE 45238
// sShield := true ;
45230: LD_ADDR_EXP 89
45234: PUSH
45235: LD_INT 1
45237: ST_TO_ADDR
// if p3 = 35 then
45238: LD_VAR 0 3
45242: PUSH
45243: LD_INT 35
45245: EQUAL
45246: IFFALSE 45256
// sTime := true ;
45248: LD_ADDR_EXP 90
45252: PUSH
45253: LD_INT 1
45255: ST_TO_ADDR
// if p3 = 36 then
45256: LD_VAR 0 3
45260: PUSH
45261: LD_INT 36
45263: EQUAL
45264: IFFALSE 45274
// sTools := true ;
45266: LD_ADDR_EXP 91
45270: PUSH
45271: LD_INT 1
45273: ST_TO_ADDR
// if p3 = 101 then
45274: LD_VAR 0 3
45278: PUSH
45279: LD_INT 101
45281: EQUAL
45282: IFFALSE 45292
// sSold := true ;
45284: LD_ADDR_EXP 56
45288: PUSH
45289: LD_INT 1
45291: ST_TO_ADDR
// if p3 = 102 then
45292: LD_VAR 0 3
45296: PUSH
45297: LD_INT 102
45299: EQUAL
45300: IFFALSE 45310
// sDiff := true ;
45302: LD_ADDR_EXP 57
45306: PUSH
45307: LD_INT 1
45309: ST_TO_ADDR
// if p3 = 103 then
45310: LD_VAR 0 3
45314: PUSH
45315: LD_INT 103
45317: EQUAL
45318: IFFALSE 45328
// sFog := true ;
45320: LD_ADDR_EXP 60
45324: PUSH
45325: LD_INT 1
45327: ST_TO_ADDR
// if p3 = 104 then
45328: LD_VAR 0 3
45332: PUSH
45333: LD_INT 104
45335: EQUAL
45336: IFFALSE 45346
// sReset := true ;
45338: LD_ADDR_EXP 61
45342: PUSH
45343: LD_INT 1
45345: ST_TO_ADDR
// if p3 = 105 then
45346: LD_VAR 0 3
45350: PUSH
45351: LD_INT 105
45353: EQUAL
45354: IFFALSE 45364
// sSun := true ;
45356: LD_ADDR_EXP 62
45360: PUSH
45361: LD_INT 1
45363: ST_TO_ADDR
// if p3 = 106 then
45364: LD_VAR 0 3
45368: PUSH
45369: LD_INT 106
45371: EQUAL
45372: IFFALSE 45382
// sTiger := true ;
45374: LD_ADDR_EXP 58
45378: PUSH
45379: LD_INT 1
45381: ST_TO_ADDR
// if p3 = 107 then
45382: LD_VAR 0 3
45386: PUSH
45387: LD_INT 107
45389: EQUAL
45390: IFFALSE 45400
// sBomb := true ;
45392: LD_ADDR_EXP 59
45396: PUSH
45397: LD_INT 1
45399: ST_TO_ADDR
// if p3 = 108 then
45400: LD_VAR 0 3
45404: PUSH
45405: LD_INT 108
45407: EQUAL
45408: IFFALSE 45418
// sWound := true ;
45410: LD_ADDR_EXP 67
45414: PUSH
45415: LD_INT 1
45417: ST_TO_ADDR
// if p3 = 109 then
45418: LD_VAR 0 3
45422: PUSH
45423: LD_INT 109
45425: EQUAL
45426: IFFALSE 45436
// sBetray := true ;
45428: LD_ADDR_EXP 71
45432: PUSH
45433: LD_INT 1
45435: ST_TO_ADDR
// if p3 = 110 then
45436: LD_VAR 0 3
45440: PUSH
45441: LD_INT 110
45443: EQUAL
45444: IFFALSE 45454
// sContamin := true ;
45446: LD_ADDR_EXP 72
45450: PUSH
45451: LD_INT 1
45453: ST_TO_ADDR
// if p3 = 111 then
45454: LD_VAR 0 3
45458: PUSH
45459: LD_INT 111
45461: EQUAL
45462: IFFALSE 45472
// sOil := true ;
45464: LD_ADDR_EXP 74
45468: PUSH
45469: LD_INT 1
45471: ST_TO_ADDR
// if p3 = 112 then
45472: LD_VAR 0 3
45476: PUSH
45477: LD_INT 112
45479: EQUAL
45480: IFFALSE 45490
// sStu := true ;
45482: LD_ADDR_EXP 78
45486: PUSH
45487: LD_INT 1
45489: ST_TO_ADDR
// if p3 = 113 then
45490: LD_VAR 0 3
45494: PUSH
45495: LD_INT 113
45497: EQUAL
45498: IFFALSE 45508
// sBazooka := true ;
45500: LD_ADDR_EXP 81
45504: PUSH
45505: LD_INT 1
45507: ST_TO_ADDR
// if p3 = 114 then
45508: LD_VAR 0 3
45512: PUSH
45513: LD_INT 114
45515: EQUAL
45516: IFFALSE 45526
// sMortar := true ;
45518: LD_ADDR_EXP 82
45522: PUSH
45523: LD_INT 1
45525: ST_TO_ADDR
// if p3 = 115 then
45526: LD_VAR 0 3
45530: PUSH
45531: LD_INT 115
45533: EQUAL
45534: IFFALSE 45544
// sRanger := true ;
45536: LD_ADDR_EXP 92
45540: PUSH
45541: LD_INT 1
45543: ST_TO_ADDR
// end ; if p2 = 101 then
45544: LD_VAR 0 2
45548: PUSH
45549: LD_INT 101
45551: EQUAL
45552: IFFALSE 45680
// begin case p3 of 1 :
45554: LD_VAR 0 3
45558: PUSH
45559: LD_INT 1
45561: DOUBLE
45562: EQUAL
45563: IFTRUE 45567
45565: GO 45574
45567: POP
// hHackUnlimitedResources ; 2 :
45568: CALL 56717 0 0
45572: GO 45680
45574: LD_INT 2
45576: DOUBLE
45577: EQUAL
45578: IFTRUE 45582
45580: GO 45589
45582: POP
// hHackSetLevel10 ; 3 :
45583: CALL 56850 0 0
45587: GO 45680
45589: LD_INT 3
45591: DOUBLE
45592: EQUAL
45593: IFTRUE 45597
45595: GO 45604
45597: POP
// hHackSetLevel10YourUnits ; 4 :
45598: CALL 56935 0 0
45602: GO 45680
45604: LD_INT 4
45606: DOUBLE
45607: EQUAL
45608: IFTRUE 45612
45610: GO 45619
45612: POP
// hHackInvincible ; 5 :
45613: CALL 57383 0 0
45617: GO 45680
45619: LD_INT 5
45621: DOUBLE
45622: EQUAL
45623: IFTRUE 45627
45625: GO 45634
45627: POP
// hHackInvisible ; 6 :
45628: CALL 57494 0 0
45632: GO 45680
45634: LD_INT 6
45636: DOUBLE
45637: EQUAL
45638: IFTRUE 45642
45640: GO 45649
45642: POP
// hHackChangeYourSide ; 7 :
45643: CALL 57551 0 0
45647: GO 45680
45649: LD_INT 7
45651: DOUBLE
45652: EQUAL
45653: IFTRUE 45657
45655: GO 45664
45657: POP
// hHackChangeUnitSide ; 8 :
45658: CALL 57593 0 0
45662: GO 45680
45664: LD_INT 8
45666: DOUBLE
45667: EQUAL
45668: IFTRUE 45672
45670: GO 45679
45672: POP
// hHackFog ; end ;
45673: CALL 57694 0 0
45677: GO 45680
45679: POP
// end ; end ;
45680: LD_VAR 0 7
45684: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
45685: GO 45687
45687: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
45688: LD_STRING initStreamRollete();
45690: PPUSH
45691: CALL_OW 559
// InitStreamMode ;
45695: CALL 45704 0 0
// DefineStreamItems ( ) ;
45699: CALL 46144 0 0
// end ;
45703: END
// function InitStreamMode ; begin
45704: LD_INT 0
45706: PPUSH
// streamModeActive := false ;
45707: LD_ADDR_EXP 39
45711: PUSH
45712: LD_INT 0
45714: ST_TO_ADDR
// normalCounter := 36 ;
45715: LD_ADDR_EXP 40
45719: PUSH
45720: LD_INT 36
45722: ST_TO_ADDR
// hardcoreCounter := 16 ;
45723: LD_ADDR_EXP 41
45727: PUSH
45728: LD_INT 16
45730: ST_TO_ADDR
// sRocket := false ;
45731: LD_ADDR_EXP 44
45735: PUSH
45736: LD_INT 0
45738: ST_TO_ADDR
// sSpeed := false ;
45739: LD_ADDR_EXP 43
45743: PUSH
45744: LD_INT 0
45746: ST_TO_ADDR
// sEngine := false ;
45747: LD_ADDR_EXP 45
45751: PUSH
45752: LD_INT 0
45754: ST_TO_ADDR
// sSpec := false ;
45755: LD_ADDR_EXP 42
45759: PUSH
45760: LD_INT 0
45762: ST_TO_ADDR
// sLevel := false ;
45763: LD_ADDR_EXP 46
45767: PUSH
45768: LD_INT 0
45770: ST_TO_ADDR
// sArmoury := false ;
45771: LD_ADDR_EXP 47
45775: PUSH
45776: LD_INT 0
45778: ST_TO_ADDR
// sRadar := false ;
45779: LD_ADDR_EXP 48
45783: PUSH
45784: LD_INT 0
45786: ST_TO_ADDR
// sBunker := false ;
45787: LD_ADDR_EXP 49
45791: PUSH
45792: LD_INT 0
45794: ST_TO_ADDR
// sHack := false ;
45795: LD_ADDR_EXP 50
45799: PUSH
45800: LD_INT 0
45802: ST_TO_ADDR
// sFire := false ;
45803: LD_ADDR_EXP 51
45807: PUSH
45808: LD_INT 0
45810: ST_TO_ADDR
// sRefresh := false ;
45811: LD_ADDR_EXP 52
45815: PUSH
45816: LD_INT 0
45818: ST_TO_ADDR
// sExp := false ;
45819: LD_ADDR_EXP 53
45823: PUSH
45824: LD_INT 0
45826: ST_TO_ADDR
// sDepot := false ;
45827: LD_ADDR_EXP 54
45831: PUSH
45832: LD_INT 0
45834: ST_TO_ADDR
// sFlag := false ;
45835: LD_ADDR_EXP 55
45839: PUSH
45840: LD_INT 0
45842: ST_TO_ADDR
// sKamikadze := false ;
45843: LD_ADDR_EXP 63
45847: PUSH
45848: LD_INT 0
45850: ST_TO_ADDR
// sTroll := false ;
45851: LD_ADDR_EXP 64
45855: PUSH
45856: LD_INT 0
45858: ST_TO_ADDR
// sSlow := false ;
45859: LD_ADDR_EXP 65
45863: PUSH
45864: LD_INT 0
45866: ST_TO_ADDR
// sLack := false ;
45867: LD_ADDR_EXP 66
45871: PUSH
45872: LD_INT 0
45874: ST_TO_ADDR
// sTank := false ;
45875: LD_ADDR_EXP 68
45879: PUSH
45880: LD_INT 0
45882: ST_TO_ADDR
// sRemote := false ;
45883: LD_ADDR_EXP 69
45887: PUSH
45888: LD_INT 0
45890: ST_TO_ADDR
// sPowell := false ;
45891: LD_ADDR_EXP 70
45895: PUSH
45896: LD_INT 0
45898: ST_TO_ADDR
// sTeleport := false ;
45899: LD_ADDR_EXP 73
45903: PUSH
45904: LD_INT 0
45906: ST_TO_ADDR
// sOilTower := false ;
45907: LD_ADDR_EXP 75
45911: PUSH
45912: LD_INT 0
45914: ST_TO_ADDR
// sShovel := false ;
45915: LD_ADDR_EXP 76
45919: PUSH
45920: LD_INT 0
45922: ST_TO_ADDR
// sSheik := false ;
45923: LD_ADDR_EXP 77
45927: PUSH
45928: LD_INT 0
45930: ST_TO_ADDR
// sEarthquake := false ;
45931: LD_ADDR_EXP 79
45935: PUSH
45936: LD_INT 0
45938: ST_TO_ADDR
// sAI := false ;
45939: LD_ADDR_EXP 80
45943: PUSH
45944: LD_INT 0
45946: ST_TO_ADDR
// sCargo := false ;
45947: LD_ADDR_EXP 83
45951: PUSH
45952: LD_INT 0
45954: ST_TO_ADDR
// sDLaser := false ;
45955: LD_ADDR_EXP 84
45959: PUSH
45960: LD_INT 0
45962: ST_TO_ADDR
// sExchange := false ;
45963: LD_ADDR_EXP 85
45967: PUSH
45968: LD_INT 0
45970: ST_TO_ADDR
// sFac := false ;
45971: LD_ADDR_EXP 86
45975: PUSH
45976: LD_INT 0
45978: ST_TO_ADDR
// sPower := false ;
45979: LD_ADDR_EXP 87
45983: PUSH
45984: LD_INT 0
45986: ST_TO_ADDR
// sRandom := false ;
45987: LD_ADDR_EXP 88
45991: PUSH
45992: LD_INT 0
45994: ST_TO_ADDR
// sShield := false ;
45995: LD_ADDR_EXP 89
45999: PUSH
46000: LD_INT 0
46002: ST_TO_ADDR
// sTime := false ;
46003: LD_ADDR_EXP 90
46007: PUSH
46008: LD_INT 0
46010: ST_TO_ADDR
// sTools := false ;
46011: LD_ADDR_EXP 91
46015: PUSH
46016: LD_INT 0
46018: ST_TO_ADDR
// sSold := false ;
46019: LD_ADDR_EXP 56
46023: PUSH
46024: LD_INT 0
46026: ST_TO_ADDR
// sDiff := false ;
46027: LD_ADDR_EXP 57
46031: PUSH
46032: LD_INT 0
46034: ST_TO_ADDR
// sFog := false ;
46035: LD_ADDR_EXP 60
46039: PUSH
46040: LD_INT 0
46042: ST_TO_ADDR
// sReset := false ;
46043: LD_ADDR_EXP 61
46047: PUSH
46048: LD_INT 0
46050: ST_TO_ADDR
// sSun := false ;
46051: LD_ADDR_EXP 62
46055: PUSH
46056: LD_INT 0
46058: ST_TO_ADDR
// sTiger := false ;
46059: LD_ADDR_EXP 58
46063: PUSH
46064: LD_INT 0
46066: ST_TO_ADDR
// sBomb := false ;
46067: LD_ADDR_EXP 59
46071: PUSH
46072: LD_INT 0
46074: ST_TO_ADDR
// sWound := false ;
46075: LD_ADDR_EXP 67
46079: PUSH
46080: LD_INT 0
46082: ST_TO_ADDR
// sBetray := false ;
46083: LD_ADDR_EXP 71
46087: PUSH
46088: LD_INT 0
46090: ST_TO_ADDR
// sContamin := false ;
46091: LD_ADDR_EXP 72
46095: PUSH
46096: LD_INT 0
46098: ST_TO_ADDR
// sOil := false ;
46099: LD_ADDR_EXP 74
46103: PUSH
46104: LD_INT 0
46106: ST_TO_ADDR
// sStu := false ;
46107: LD_ADDR_EXP 78
46111: PUSH
46112: LD_INT 0
46114: ST_TO_ADDR
// sBazooka := false ;
46115: LD_ADDR_EXP 81
46119: PUSH
46120: LD_INT 0
46122: ST_TO_ADDR
// sMortar := false ;
46123: LD_ADDR_EXP 82
46127: PUSH
46128: LD_INT 0
46130: ST_TO_ADDR
// sRanger := false ;
46131: LD_ADDR_EXP 92
46135: PUSH
46136: LD_INT 0
46138: ST_TO_ADDR
// end ;
46139: LD_VAR 0 1
46143: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
46144: LD_INT 0
46146: PPUSH
46147: PPUSH
46148: PPUSH
46149: PPUSH
46150: PPUSH
// result := [ ] ;
46151: LD_ADDR_VAR 0 1
46155: PUSH
46156: EMPTY
46157: ST_TO_ADDR
// if campaign_id = 1 then
46158: LD_OWVAR 69
46162: PUSH
46163: LD_INT 1
46165: EQUAL
46166: IFFALSE 49104
// begin case mission_number of 1 :
46168: LD_OWVAR 70
46172: PUSH
46173: LD_INT 1
46175: DOUBLE
46176: EQUAL
46177: IFTRUE 46181
46179: GO 46245
46181: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
46182: LD_ADDR_VAR 0 1
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 4
46192: PUSH
46193: LD_INT 11
46195: PUSH
46196: LD_INT 12
46198: PUSH
46199: LD_INT 15
46201: PUSH
46202: LD_INT 16
46204: PUSH
46205: LD_INT 22
46207: PUSH
46208: LD_INT 23
46210: PUSH
46211: LD_INT 26
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 101
46227: PUSH
46228: LD_INT 102
46230: PUSH
46231: LD_INT 106
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: ST_TO_ADDR
46243: GO 49102
46245: LD_INT 2
46247: DOUBLE
46248: EQUAL
46249: IFTRUE 46253
46251: GO 46325
46253: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
46254: LD_ADDR_VAR 0 1
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 4
46264: PUSH
46265: LD_INT 11
46267: PUSH
46268: LD_INT 12
46270: PUSH
46271: LD_INT 15
46273: PUSH
46274: LD_INT 16
46276: PUSH
46277: LD_INT 22
46279: PUSH
46280: LD_INT 23
46282: PUSH
46283: LD_INT 26
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 101
46299: PUSH
46300: LD_INT 102
46302: PUSH
46303: LD_INT 105
46305: PUSH
46306: LD_INT 106
46308: PUSH
46309: LD_INT 108
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: ST_TO_ADDR
46323: GO 49102
46325: LD_INT 3
46327: DOUBLE
46328: EQUAL
46329: IFTRUE 46333
46331: GO 46409
46333: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
46334: LD_ADDR_VAR 0 1
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: LD_INT 4
46344: PUSH
46345: LD_INT 5
46347: PUSH
46348: LD_INT 11
46350: PUSH
46351: LD_INT 12
46353: PUSH
46354: LD_INT 15
46356: PUSH
46357: LD_INT 16
46359: PUSH
46360: LD_INT 22
46362: PUSH
46363: LD_INT 26
46365: PUSH
46366: LD_INT 36
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 101
46383: PUSH
46384: LD_INT 102
46386: PUSH
46387: LD_INT 105
46389: PUSH
46390: LD_INT 106
46392: PUSH
46393: LD_INT 108
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: ST_TO_ADDR
46407: GO 49102
46409: LD_INT 4
46411: DOUBLE
46412: EQUAL
46413: IFTRUE 46417
46415: GO 46501
46417: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
46418: LD_ADDR_VAR 0 1
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: LD_INT 4
46428: PUSH
46429: LD_INT 5
46431: PUSH
46432: LD_INT 8
46434: PUSH
46435: LD_INT 11
46437: PUSH
46438: LD_INT 12
46440: PUSH
46441: LD_INT 15
46443: PUSH
46444: LD_INT 16
46446: PUSH
46447: LD_INT 22
46449: PUSH
46450: LD_INT 23
46452: PUSH
46453: LD_INT 26
46455: PUSH
46456: LD_INT 36
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 101
46475: PUSH
46476: LD_INT 102
46478: PUSH
46479: LD_INT 105
46481: PUSH
46482: LD_INT 106
46484: PUSH
46485: LD_INT 108
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: ST_TO_ADDR
46499: GO 49102
46501: LD_INT 5
46503: DOUBLE
46504: EQUAL
46505: IFTRUE 46509
46507: GO 46609
46509: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
46510: LD_ADDR_VAR 0 1
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: LD_INT 4
46520: PUSH
46521: LD_INT 5
46523: PUSH
46524: LD_INT 6
46526: PUSH
46527: LD_INT 8
46529: PUSH
46530: LD_INT 11
46532: PUSH
46533: LD_INT 12
46535: PUSH
46536: LD_INT 15
46538: PUSH
46539: LD_INT 16
46541: PUSH
46542: LD_INT 22
46544: PUSH
46545: LD_INT 23
46547: PUSH
46548: LD_INT 25
46550: PUSH
46551: LD_INT 26
46553: PUSH
46554: LD_INT 36
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 101
46575: PUSH
46576: LD_INT 102
46578: PUSH
46579: LD_INT 105
46581: PUSH
46582: LD_INT 106
46584: PUSH
46585: LD_INT 108
46587: PUSH
46588: LD_INT 109
46590: PUSH
46591: LD_INT 112
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: ST_TO_ADDR
46607: GO 49102
46609: LD_INT 6
46611: DOUBLE
46612: EQUAL
46613: IFTRUE 46617
46615: GO 46737
46617: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
46618: LD_ADDR_VAR 0 1
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 4
46628: PUSH
46629: LD_INT 5
46631: PUSH
46632: LD_INT 6
46634: PUSH
46635: LD_INT 8
46637: PUSH
46638: LD_INT 11
46640: PUSH
46641: LD_INT 12
46643: PUSH
46644: LD_INT 15
46646: PUSH
46647: LD_INT 16
46649: PUSH
46650: LD_INT 20
46652: PUSH
46653: LD_INT 21
46655: PUSH
46656: LD_INT 22
46658: PUSH
46659: LD_INT 23
46661: PUSH
46662: LD_INT 25
46664: PUSH
46665: LD_INT 26
46667: PUSH
46668: LD_INT 30
46670: PUSH
46671: LD_INT 31
46673: PUSH
46674: LD_INT 32
46676: PUSH
46677: LD_INT 36
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 101
46703: PUSH
46704: LD_INT 102
46706: PUSH
46707: LD_INT 105
46709: PUSH
46710: LD_INT 106
46712: PUSH
46713: LD_INT 108
46715: PUSH
46716: LD_INT 109
46718: PUSH
46719: LD_INT 112
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: ST_TO_ADDR
46735: GO 49102
46737: LD_INT 7
46739: DOUBLE
46740: EQUAL
46741: IFTRUE 46745
46743: GO 46845
46745: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
46746: LD_ADDR_VAR 0 1
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: LD_INT 4
46756: PUSH
46757: LD_INT 5
46759: PUSH
46760: LD_INT 7
46762: PUSH
46763: LD_INT 11
46765: PUSH
46766: LD_INT 12
46768: PUSH
46769: LD_INT 15
46771: PUSH
46772: LD_INT 16
46774: PUSH
46775: LD_INT 20
46777: PUSH
46778: LD_INT 21
46780: PUSH
46781: LD_INT 22
46783: PUSH
46784: LD_INT 23
46786: PUSH
46787: LD_INT 25
46789: PUSH
46790: LD_INT 26
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 101
46811: PUSH
46812: LD_INT 102
46814: PUSH
46815: LD_INT 103
46817: PUSH
46818: LD_INT 105
46820: PUSH
46821: LD_INT 106
46823: PUSH
46824: LD_INT 108
46826: PUSH
46827: LD_INT 112
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: ST_TO_ADDR
46843: GO 49102
46845: LD_INT 8
46847: DOUBLE
46848: EQUAL
46849: IFTRUE 46853
46851: GO 46981
46853: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
46854: LD_ADDR_VAR 0 1
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 4
46864: PUSH
46865: LD_INT 5
46867: PUSH
46868: LD_INT 6
46870: PUSH
46871: LD_INT 7
46873: PUSH
46874: LD_INT 8
46876: PUSH
46877: LD_INT 11
46879: PUSH
46880: LD_INT 12
46882: PUSH
46883: LD_INT 15
46885: PUSH
46886: LD_INT 16
46888: PUSH
46889: LD_INT 20
46891: PUSH
46892: LD_INT 21
46894: PUSH
46895: LD_INT 22
46897: PUSH
46898: LD_INT 23
46900: PUSH
46901: LD_INT 25
46903: PUSH
46904: LD_INT 26
46906: PUSH
46907: LD_INT 30
46909: PUSH
46910: LD_INT 31
46912: PUSH
46913: LD_INT 32
46915: PUSH
46916: LD_INT 36
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 101
46943: PUSH
46944: LD_INT 102
46946: PUSH
46947: LD_INT 103
46949: PUSH
46950: LD_INT 105
46952: PUSH
46953: LD_INT 106
46955: PUSH
46956: LD_INT 108
46958: PUSH
46959: LD_INT 109
46961: PUSH
46962: LD_INT 112
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: ST_TO_ADDR
46979: GO 49102
46981: LD_INT 9
46983: DOUBLE
46984: EQUAL
46985: IFTRUE 46989
46987: GO 47125
46989: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
46990: LD_ADDR_VAR 0 1
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 4
47000: PUSH
47001: LD_INT 5
47003: PUSH
47004: LD_INT 6
47006: PUSH
47007: LD_INT 7
47009: PUSH
47010: LD_INT 8
47012: PUSH
47013: LD_INT 11
47015: PUSH
47016: LD_INT 12
47018: PUSH
47019: LD_INT 15
47021: PUSH
47022: LD_INT 16
47024: PUSH
47025: LD_INT 20
47027: PUSH
47028: LD_INT 21
47030: PUSH
47031: LD_INT 22
47033: PUSH
47034: LD_INT 23
47036: PUSH
47037: LD_INT 25
47039: PUSH
47040: LD_INT 26
47042: PUSH
47043: LD_INT 28
47045: PUSH
47046: LD_INT 30
47048: PUSH
47049: LD_INT 31
47051: PUSH
47052: LD_INT 32
47054: PUSH
47055: LD_INT 36
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 101
47083: PUSH
47084: LD_INT 102
47086: PUSH
47087: LD_INT 103
47089: PUSH
47090: LD_INT 105
47092: PUSH
47093: LD_INT 106
47095: PUSH
47096: LD_INT 108
47098: PUSH
47099: LD_INT 109
47101: PUSH
47102: LD_INT 112
47104: PUSH
47105: LD_INT 114
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: ST_TO_ADDR
47123: GO 49102
47125: LD_INT 10
47127: DOUBLE
47128: EQUAL
47129: IFTRUE 47133
47131: GO 47317
47133: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
47134: LD_ADDR_VAR 0 1
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: LD_INT 4
47144: PUSH
47145: LD_INT 5
47147: PUSH
47148: LD_INT 6
47150: PUSH
47151: LD_INT 7
47153: PUSH
47154: LD_INT 8
47156: PUSH
47157: LD_INT 9
47159: PUSH
47160: LD_INT 10
47162: PUSH
47163: LD_INT 11
47165: PUSH
47166: LD_INT 12
47168: PUSH
47169: LD_INT 13
47171: PUSH
47172: LD_INT 14
47174: PUSH
47175: LD_INT 15
47177: PUSH
47178: LD_INT 16
47180: PUSH
47181: LD_INT 17
47183: PUSH
47184: LD_INT 18
47186: PUSH
47187: LD_INT 19
47189: PUSH
47190: LD_INT 20
47192: PUSH
47193: LD_INT 21
47195: PUSH
47196: LD_INT 22
47198: PUSH
47199: LD_INT 23
47201: PUSH
47202: LD_INT 24
47204: PUSH
47205: LD_INT 25
47207: PUSH
47208: LD_INT 26
47210: PUSH
47211: LD_INT 28
47213: PUSH
47214: LD_INT 30
47216: PUSH
47217: LD_INT 31
47219: PUSH
47220: LD_INT 32
47222: PUSH
47223: LD_INT 36
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 101
47259: PUSH
47260: LD_INT 102
47262: PUSH
47263: LD_INT 103
47265: PUSH
47266: LD_INT 104
47268: PUSH
47269: LD_INT 105
47271: PUSH
47272: LD_INT 106
47274: PUSH
47275: LD_INT 107
47277: PUSH
47278: LD_INT 108
47280: PUSH
47281: LD_INT 109
47283: PUSH
47284: LD_INT 110
47286: PUSH
47287: LD_INT 111
47289: PUSH
47290: LD_INT 112
47292: PUSH
47293: LD_INT 114
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: ST_TO_ADDR
47315: GO 49102
47317: LD_INT 11
47319: DOUBLE
47320: EQUAL
47321: IFTRUE 47325
47323: GO 47517
47325: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
47326: LD_ADDR_VAR 0 1
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: LD_INT 3
47336: PUSH
47337: LD_INT 4
47339: PUSH
47340: LD_INT 5
47342: PUSH
47343: LD_INT 6
47345: PUSH
47346: LD_INT 7
47348: PUSH
47349: LD_INT 8
47351: PUSH
47352: LD_INT 9
47354: PUSH
47355: LD_INT 10
47357: PUSH
47358: LD_INT 11
47360: PUSH
47361: LD_INT 12
47363: PUSH
47364: LD_INT 13
47366: PUSH
47367: LD_INT 14
47369: PUSH
47370: LD_INT 15
47372: PUSH
47373: LD_INT 16
47375: PUSH
47376: LD_INT 17
47378: PUSH
47379: LD_INT 18
47381: PUSH
47382: LD_INT 19
47384: PUSH
47385: LD_INT 20
47387: PUSH
47388: LD_INT 21
47390: PUSH
47391: LD_INT 22
47393: PUSH
47394: LD_INT 23
47396: PUSH
47397: LD_INT 24
47399: PUSH
47400: LD_INT 25
47402: PUSH
47403: LD_INT 26
47405: PUSH
47406: LD_INT 28
47408: PUSH
47409: LD_INT 30
47411: PUSH
47412: LD_INT 31
47414: PUSH
47415: LD_INT 32
47417: PUSH
47418: LD_INT 34
47420: PUSH
47421: LD_INT 36
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 101
47459: PUSH
47460: LD_INT 102
47462: PUSH
47463: LD_INT 103
47465: PUSH
47466: LD_INT 104
47468: PUSH
47469: LD_INT 105
47471: PUSH
47472: LD_INT 106
47474: PUSH
47475: LD_INT 107
47477: PUSH
47478: LD_INT 108
47480: PUSH
47481: LD_INT 109
47483: PUSH
47484: LD_INT 110
47486: PUSH
47487: LD_INT 111
47489: PUSH
47490: LD_INT 112
47492: PUSH
47493: LD_INT 114
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: ST_TO_ADDR
47515: GO 49102
47517: LD_INT 12
47519: DOUBLE
47520: EQUAL
47521: IFTRUE 47525
47523: GO 47733
47525: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
47526: LD_ADDR_VAR 0 1
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: LD_INT 3
47539: PUSH
47540: LD_INT 4
47542: PUSH
47543: LD_INT 5
47545: PUSH
47546: LD_INT 6
47548: PUSH
47549: LD_INT 7
47551: PUSH
47552: LD_INT 8
47554: PUSH
47555: LD_INT 9
47557: PUSH
47558: LD_INT 10
47560: PUSH
47561: LD_INT 11
47563: PUSH
47564: LD_INT 12
47566: PUSH
47567: LD_INT 13
47569: PUSH
47570: LD_INT 14
47572: PUSH
47573: LD_INT 15
47575: PUSH
47576: LD_INT 16
47578: PUSH
47579: LD_INT 17
47581: PUSH
47582: LD_INT 18
47584: PUSH
47585: LD_INT 19
47587: PUSH
47588: LD_INT 20
47590: PUSH
47591: LD_INT 21
47593: PUSH
47594: LD_INT 22
47596: PUSH
47597: LD_INT 23
47599: PUSH
47600: LD_INT 24
47602: PUSH
47603: LD_INT 25
47605: PUSH
47606: LD_INT 26
47608: PUSH
47609: LD_INT 27
47611: PUSH
47612: LD_INT 28
47614: PUSH
47615: LD_INT 30
47617: PUSH
47618: LD_INT 31
47620: PUSH
47621: LD_INT 32
47623: PUSH
47624: LD_INT 33
47626: PUSH
47627: LD_INT 34
47629: PUSH
47630: LD_INT 36
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 101
47671: PUSH
47672: LD_INT 102
47674: PUSH
47675: LD_INT 103
47677: PUSH
47678: LD_INT 104
47680: PUSH
47681: LD_INT 105
47683: PUSH
47684: LD_INT 106
47686: PUSH
47687: LD_INT 107
47689: PUSH
47690: LD_INT 108
47692: PUSH
47693: LD_INT 109
47695: PUSH
47696: LD_INT 110
47698: PUSH
47699: LD_INT 111
47701: PUSH
47702: LD_INT 112
47704: PUSH
47705: LD_INT 113
47707: PUSH
47708: LD_INT 114
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: ST_TO_ADDR
47731: GO 49102
47733: LD_INT 13
47735: DOUBLE
47736: EQUAL
47737: IFTRUE 47741
47739: GO 47937
47741: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
47742: LD_ADDR_VAR 0 1
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 3
47755: PUSH
47756: LD_INT 4
47758: PUSH
47759: LD_INT 5
47761: PUSH
47762: LD_INT 8
47764: PUSH
47765: LD_INT 9
47767: PUSH
47768: LD_INT 10
47770: PUSH
47771: LD_INT 11
47773: PUSH
47774: LD_INT 12
47776: PUSH
47777: LD_INT 14
47779: PUSH
47780: LD_INT 15
47782: PUSH
47783: LD_INT 16
47785: PUSH
47786: LD_INT 17
47788: PUSH
47789: LD_INT 18
47791: PUSH
47792: LD_INT 19
47794: PUSH
47795: LD_INT 20
47797: PUSH
47798: LD_INT 21
47800: PUSH
47801: LD_INT 22
47803: PUSH
47804: LD_INT 23
47806: PUSH
47807: LD_INT 24
47809: PUSH
47810: LD_INT 25
47812: PUSH
47813: LD_INT 26
47815: PUSH
47816: LD_INT 27
47818: PUSH
47819: LD_INT 28
47821: PUSH
47822: LD_INT 30
47824: PUSH
47825: LD_INT 31
47827: PUSH
47828: LD_INT 32
47830: PUSH
47831: LD_INT 33
47833: PUSH
47834: LD_INT 34
47836: PUSH
47837: LD_INT 36
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 101
47875: PUSH
47876: LD_INT 102
47878: PUSH
47879: LD_INT 103
47881: PUSH
47882: LD_INT 104
47884: PUSH
47885: LD_INT 105
47887: PUSH
47888: LD_INT 106
47890: PUSH
47891: LD_INT 107
47893: PUSH
47894: LD_INT 108
47896: PUSH
47897: LD_INT 109
47899: PUSH
47900: LD_INT 110
47902: PUSH
47903: LD_INT 111
47905: PUSH
47906: LD_INT 112
47908: PUSH
47909: LD_INT 113
47911: PUSH
47912: LD_INT 114
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: ST_TO_ADDR
47935: GO 49102
47937: LD_INT 14
47939: DOUBLE
47940: EQUAL
47941: IFTRUE 47945
47943: GO 48157
47945: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
47946: LD_ADDR_VAR 0 1
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: LD_INT 3
47959: PUSH
47960: LD_INT 4
47962: PUSH
47963: LD_INT 5
47965: PUSH
47966: LD_INT 6
47968: PUSH
47969: LD_INT 7
47971: PUSH
47972: LD_INT 8
47974: PUSH
47975: LD_INT 9
47977: PUSH
47978: LD_INT 10
47980: PUSH
47981: LD_INT 11
47983: PUSH
47984: LD_INT 12
47986: PUSH
47987: LD_INT 13
47989: PUSH
47990: LD_INT 14
47992: PUSH
47993: LD_INT 15
47995: PUSH
47996: LD_INT 16
47998: PUSH
47999: LD_INT 17
48001: PUSH
48002: LD_INT 18
48004: PUSH
48005: LD_INT 19
48007: PUSH
48008: LD_INT 20
48010: PUSH
48011: LD_INT 21
48013: PUSH
48014: LD_INT 22
48016: PUSH
48017: LD_INT 23
48019: PUSH
48020: LD_INT 24
48022: PUSH
48023: LD_INT 25
48025: PUSH
48026: LD_INT 26
48028: PUSH
48029: LD_INT 27
48031: PUSH
48032: LD_INT 28
48034: PUSH
48035: LD_INT 29
48037: PUSH
48038: LD_INT 30
48040: PUSH
48041: LD_INT 31
48043: PUSH
48044: LD_INT 32
48046: PUSH
48047: LD_INT 33
48049: PUSH
48050: LD_INT 34
48052: PUSH
48053: LD_INT 36
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 101
48095: PUSH
48096: LD_INT 102
48098: PUSH
48099: LD_INT 103
48101: PUSH
48102: LD_INT 104
48104: PUSH
48105: LD_INT 105
48107: PUSH
48108: LD_INT 106
48110: PUSH
48111: LD_INT 107
48113: PUSH
48114: LD_INT 108
48116: PUSH
48117: LD_INT 109
48119: PUSH
48120: LD_INT 110
48122: PUSH
48123: LD_INT 111
48125: PUSH
48126: LD_INT 112
48128: PUSH
48129: LD_INT 113
48131: PUSH
48132: LD_INT 114
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: ST_TO_ADDR
48155: GO 49102
48157: LD_INT 15
48159: DOUBLE
48160: EQUAL
48161: IFTRUE 48165
48163: GO 48377
48165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
48166: LD_ADDR_VAR 0 1
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: LD_INT 3
48179: PUSH
48180: LD_INT 4
48182: PUSH
48183: LD_INT 5
48185: PUSH
48186: LD_INT 6
48188: PUSH
48189: LD_INT 7
48191: PUSH
48192: LD_INT 8
48194: PUSH
48195: LD_INT 9
48197: PUSH
48198: LD_INT 10
48200: PUSH
48201: LD_INT 11
48203: PUSH
48204: LD_INT 12
48206: PUSH
48207: LD_INT 13
48209: PUSH
48210: LD_INT 14
48212: PUSH
48213: LD_INT 15
48215: PUSH
48216: LD_INT 16
48218: PUSH
48219: LD_INT 17
48221: PUSH
48222: LD_INT 18
48224: PUSH
48225: LD_INT 19
48227: PUSH
48228: LD_INT 20
48230: PUSH
48231: LD_INT 21
48233: PUSH
48234: LD_INT 22
48236: PUSH
48237: LD_INT 23
48239: PUSH
48240: LD_INT 24
48242: PUSH
48243: LD_INT 25
48245: PUSH
48246: LD_INT 26
48248: PUSH
48249: LD_INT 27
48251: PUSH
48252: LD_INT 28
48254: PUSH
48255: LD_INT 29
48257: PUSH
48258: LD_INT 30
48260: PUSH
48261: LD_INT 31
48263: PUSH
48264: LD_INT 32
48266: PUSH
48267: LD_INT 33
48269: PUSH
48270: LD_INT 34
48272: PUSH
48273: LD_INT 36
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 101
48315: PUSH
48316: LD_INT 102
48318: PUSH
48319: LD_INT 103
48321: PUSH
48322: LD_INT 104
48324: PUSH
48325: LD_INT 105
48327: PUSH
48328: LD_INT 106
48330: PUSH
48331: LD_INT 107
48333: PUSH
48334: LD_INT 108
48336: PUSH
48337: LD_INT 109
48339: PUSH
48340: LD_INT 110
48342: PUSH
48343: LD_INT 111
48345: PUSH
48346: LD_INT 112
48348: PUSH
48349: LD_INT 113
48351: PUSH
48352: LD_INT 114
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: ST_TO_ADDR
48375: GO 49102
48377: LD_INT 16
48379: DOUBLE
48380: EQUAL
48381: IFTRUE 48385
48383: GO 48509
48385: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
48386: LD_ADDR_VAR 0 1
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 4
48396: PUSH
48397: LD_INT 5
48399: PUSH
48400: LD_INT 7
48402: PUSH
48403: LD_INT 11
48405: PUSH
48406: LD_INT 12
48408: PUSH
48409: LD_INT 15
48411: PUSH
48412: LD_INT 16
48414: PUSH
48415: LD_INT 20
48417: PUSH
48418: LD_INT 21
48420: PUSH
48421: LD_INT 22
48423: PUSH
48424: LD_INT 23
48426: PUSH
48427: LD_INT 25
48429: PUSH
48430: LD_INT 26
48432: PUSH
48433: LD_INT 30
48435: PUSH
48436: LD_INT 31
48438: PUSH
48439: LD_INT 32
48441: PUSH
48442: LD_INT 33
48444: PUSH
48445: LD_INT 34
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 101
48471: PUSH
48472: LD_INT 102
48474: PUSH
48475: LD_INT 103
48477: PUSH
48478: LD_INT 106
48480: PUSH
48481: LD_INT 108
48483: PUSH
48484: LD_INT 112
48486: PUSH
48487: LD_INT 113
48489: PUSH
48490: LD_INT 114
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: ST_TO_ADDR
48507: GO 49102
48509: LD_INT 17
48511: DOUBLE
48512: EQUAL
48513: IFTRUE 48517
48515: GO 48729
48517: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
48518: LD_ADDR_VAR 0 1
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: LD_INT 4
48534: PUSH
48535: LD_INT 5
48537: PUSH
48538: LD_INT 6
48540: PUSH
48541: LD_INT 7
48543: PUSH
48544: LD_INT 8
48546: PUSH
48547: LD_INT 9
48549: PUSH
48550: LD_INT 10
48552: PUSH
48553: LD_INT 11
48555: PUSH
48556: LD_INT 12
48558: PUSH
48559: LD_INT 13
48561: PUSH
48562: LD_INT 14
48564: PUSH
48565: LD_INT 15
48567: PUSH
48568: LD_INT 16
48570: PUSH
48571: LD_INT 17
48573: PUSH
48574: LD_INT 18
48576: PUSH
48577: LD_INT 19
48579: PUSH
48580: LD_INT 20
48582: PUSH
48583: LD_INT 21
48585: PUSH
48586: LD_INT 22
48588: PUSH
48589: LD_INT 23
48591: PUSH
48592: LD_INT 24
48594: PUSH
48595: LD_INT 25
48597: PUSH
48598: LD_INT 26
48600: PUSH
48601: LD_INT 27
48603: PUSH
48604: LD_INT 28
48606: PUSH
48607: LD_INT 29
48609: PUSH
48610: LD_INT 30
48612: PUSH
48613: LD_INT 31
48615: PUSH
48616: LD_INT 32
48618: PUSH
48619: LD_INT 33
48621: PUSH
48622: LD_INT 34
48624: PUSH
48625: LD_INT 36
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 101
48667: PUSH
48668: LD_INT 102
48670: PUSH
48671: LD_INT 103
48673: PUSH
48674: LD_INT 104
48676: PUSH
48677: LD_INT 105
48679: PUSH
48680: LD_INT 106
48682: PUSH
48683: LD_INT 107
48685: PUSH
48686: LD_INT 108
48688: PUSH
48689: LD_INT 109
48691: PUSH
48692: LD_INT 110
48694: PUSH
48695: LD_INT 111
48697: PUSH
48698: LD_INT 112
48700: PUSH
48701: LD_INT 113
48703: PUSH
48704: LD_INT 114
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: ST_TO_ADDR
48727: GO 49102
48729: LD_INT 18
48731: DOUBLE
48732: EQUAL
48733: IFTRUE 48737
48735: GO 48873
48737: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
48738: LD_ADDR_VAR 0 1
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 4
48748: PUSH
48749: LD_INT 5
48751: PUSH
48752: LD_INT 7
48754: PUSH
48755: LD_INT 11
48757: PUSH
48758: LD_INT 12
48760: PUSH
48761: LD_INT 15
48763: PUSH
48764: LD_INT 16
48766: PUSH
48767: LD_INT 20
48769: PUSH
48770: LD_INT 21
48772: PUSH
48773: LD_INT 22
48775: PUSH
48776: LD_INT 23
48778: PUSH
48779: LD_INT 25
48781: PUSH
48782: LD_INT 26
48784: PUSH
48785: LD_INT 30
48787: PUSH
48788: LD_INT 31
48790: PUSH
48791: LD_INT 32
48793: PUSH
48794: LD_INT 33
48796: PUSH
48797: LD_INT 34
48799: PUSH
48800: LD_INT 35
48802: PUSH
48803: LD_INT 36
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 101
48831: PUSH
48832: LD_INT 102
48834: PUSH
48835: LD_INT 103
48837: PUSH
48838: LD_INT 106
48840: PUSH
48841: LD_INT 108
48843: PUSH
48844: LD_INT 112
48846: PUSH
48847: LD_INT 113
48849: PUSH
48850: LD_INT 114
48852: PUSH
48853: LD_INT 115
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: ST_TO_ADDR
48871: GO 49102
48873: LD_INT 19
48875: DOUBLE
48876: EQUAL
48877: IFTRUE 48881
48879: GO 49101
48881: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
48882: LD_ADDR_VAR 0 1
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: LD_INT 4
48898: PUSH
48899: LD_INT 5
48901: PUSH
48902: LD_INT 6
48904: PUSH
48905: LD_INT 7
48907: PUSH
48908: LD_INT 8
48910: PUSH
48911: LD_INT 9
48913: PUSH
48914: LD_INT 10
48916: PUSH
48917: LD_INT 11
48919: PUSH
48920: LD_INT 12
48922: PUSH
48923: LD_INT 13
48925: PUSH
48926: LD_INT 14
48928: PUSH
48929: LD_INT 15
48931: PUSH
48932: LD_INT 16
48934: PUSH
48935: LD_INT 17
48937: PUSH
48938: LD_INT 18
48940: PUSH
48941: LD_INT 19
48943: PUSH
48944: LD_INT 20
48946: PUSH
48947: LD_INT 21
48949: PUSH
48950: LD_INT 22
48952: PUSH
48953: LD_INT 23
48955: PUSH
48956: LD_INT 24
48958: PUSH
48959: LD_INT 25
48961: PUSH
48962: LD_INT 26
48964: PUSH
48965: LD_INT 27
48967: PUSH
48968: LD_INT 28
48970: PUSH
48971: LD_INT 29
48973: PUSH
48974: LD_INT 30
48976: PUSH
48977: LD_INT 31
48979: PUSH
48980: LD_INT 32
48982: PUSH
48983: LD_INT 33
48985: PUSH
48986: LD_INT 34
48988: PUSH
48989: LD_INT 35
48991: PUSH
48992: LD_INT 36
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 101
49035: PUSH
49036: LD_INT 102
49038: PUSH
49039: LD_INT 103
49041: PUSH
49042: LD_INT 104
49044: PUSH
49045: LD_INT 105
49047: PUSH
49048: LD_INT 106
49050: PUSH
49051: LD_INT 107
49053: PUSH
49054: LD_INT 108
49056: PUSH
49057: LD_INT 109
49059: PUSH
49060: LD_INT 110
49062: PUSH
49063: LD_INT 111
49065: PUSH
49066: LD_INT 112
49068: PUSH
49069: LD_INT 113
49071: PUSH
49072: LD_INT 114
49074: PUSH
49075: LD_INT 115
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: ST_TO_ADDR
49099: GO 49102
49101: POP
// end else
49102: GO 49321
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
49104: LD_ADDR_VAR 0 1
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: LD_INT 3
49117: PUSH
49118: LD_INT 4
49120: PUSH
49121: LD_INT 5
49123: PUSH
49124: LD_INT 6
49126: PUSH
49127: LD_INT 7
49129: PUSH
49130: LD_INT 8
49132: PUSH
49133: LD_INT 9
49135: PUSH
49136: LD_INT 10
49138: PUSH
49139: LD_INT 11
49141: PUSH
49142: LD_INT 12
49144: PUSH
49145: LD_INT 13
49147: PUSH
49148: LD_INT 14
49150: PUSH
49151: LD_INT 15
49153: PUSH
49154: LD_INT 16
49156: PUSH
49157: LD_INT 17
49159: PUSH
49160: LD_INT 18
49162: PUSH
49163: LD_INT 19
49165: PUSH
49166: LD_INT 20
49168: PUSH
49169: LD_INT 21
49171: PUSH
49172: LD_INT 22
49174: PUSH
49175: LD_INT 23
49177: PUSH
49178: LD_INT 24
49180: PUSH
49181: LD_INT 25
49183: PUSH
49184: LD_INT 26
49186: PUSH
49187: LD_INT 27
49189: PUSH
49190: LD_INT 28
49192: PUSH
49193: LD_INT 29
49195: PUSH
49196: LD_INT 30
49198: PUSH
49199: LD_INT 31
49201: PUSH
49202: LD_INT 32
49204: PUSH
49205: LD_INT 33
49207: PUSH
49208: LD_INT 34
49210: PUSH
49211: LD_INT 35
49213: PUSH
49214: LD_INT 36
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 101
49257: PUSH
49258: LD_INT 102
49260: PUSH
49261: LD_INT 103
49263: PUSH
49264: LD_INT 104
49266: PUSH
49267: LD_INT 105
49269: PUSH
49270: LD_INT 106
49272: PUSH
49273: LD_INT 107
49275: PUSH
49276: LD_INT 108
49278: PUSH
49279: LD_INT 109
49281: PUSH
49282: LD_INT 110
49284: PUSH
49285: LD_INT 111
49287: PUSH
49288: LD_INT 112
49290: PUSH
49291: LD_INT 113
49293: PUSH
49294: LD_INT 114
49296: PUSH
49297: LD_INT 115
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: ST_TO_ADDR
// if result then
49321: LD_VAR 0 1
49325: IFFALSE 49614
// begin normal :=  ;
49327: LD_ADDR_VAR 0 3
49331: PUSH
49332: LD_STRING 
49334: ST_TO_ADDR
// hardcore :=  ;
49335: LD_ADDR_VAR 0 4
49339: PUSH
49340: LD_STRING 
49342: ST_TO_ADDR
// for i = 1 to normalCounter do
49343: LD_ADDR_VAR 0 5
49347: PUSH
49348: DOUBLE
49349: LD_INT 1
49351: DEC
49352: ST_TO_ADDR
49353: LD_EXP 40
49357: PUSH
49358: FOR_TO
49359: IFFALSE 49460
// begin tmp := 0 ;
49361: LD_ADDR_VAR 0 2
49365: PUSH
49366: LD_STRING 0
49368: ST_TO_ADDR
// if result [ 1 ] then
49369: LD_VAR 0 1
49373: PUSH
49374: LD_INT 1
49376: ARRAY
49377: IFFALSE 49442
// if result [ 1 ] [ 1 ] = i then
49379: LD_VAR 0 1
49383: PUSH
49384: LD_INT 1
49386: ARRAY
49387: PUSH
49388: LD_INT 1
49390: ARRAY
49391: PUSH
49392: LD_VAR 0 5
49396: EQUAL
49397: IFFALSE 49442
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
49399: LD_ADDR_VAR 0 1
49403: PUSH
49404: LD_VAR 0 1
49408: PPUSH
49409: LD_INT 1
49411: PPUSH
49412: LD_VAR 0 1
49416: PUSH
49417: LD_INT 1
49419: ARRAY
49420: PPUSH
49421: LD_INT 1
49423: PPUSH
49424: CALL_OW 3
49428: PPUSH
49429: CALL_OW 1
49433: ST_TO_ADDR
// tmp := 1 ;
49434: LD_ADDR_VAR 0 2
49438: PUSH
49439: LD_STRING 1
49441: ST_TO_ADDR
// end ; normal := normal & tmp ;
49442: LD_ADDR_VAR 0 3
49446: PUSH
49447: LD_VAR 0 3
49451: PUSH
49452: LD_VAR 0 2
49456: STR
49457: ST_TO_ADDR
// end ;
49458: GO 49358
49460: POP
49461: POP
// for i = 1 to hardcoreCounter do
49462: LD_ADDR_VAR 0 5
49466: PUSH
49467: DOUBLE
49468: LD_INT 1
49470: DEC
49471: ST_TO_ADDR
49472: LD_EXP 41
49476: PUSH
49477: FOR_TO
49478: IFFALSE 49583
// begin tmp := 0 ;
49480: LD_ADDR_VAR 0 2
49484: PUSH
49485: LD_STRING 0
49487: ST_TO_ADDR
// if result [ 2 ] then
49488: LD_VAR 0 1
49492: PUSH
49493: LD_INT 2
49495: ARRAY
49496: IFFALSE 49565
// if result [ 2 ] [ 1 ] = 100 + i then
49498: LD_VAR 0 1
49502: PUSH
49503: LD_INT 2
49505: ARRAY
49506: PUSH
49507: LD_INT 1
49509: ARRAY
49510: PUSH
49511: LD_INT 100
49513: PUSH
49514: LD_VAR 0 5
49518: PLUS
49519: EQUAL
49520: IFFALSE 49565
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
49522: LD_ADDR_VAR 0 1
49526: PUSH
49527: LD_VAR 0 1
49531: PPUSH
49532: LD_INT 2
49534: PPUSH
49535: LD_VAR 0 1
49539: PUSH
49540: LD_INT 2
49542: ARRAY
49543: PPUSH
49544: LD_INT 1
49546: PPUSH
49547: CALL_OW 3
49551: PPUSH
49552: CALL_OW 1
49556: ST_TO_ADDR
// tmp := 1 ;
49557: LD_ADDR_VAR 0 2
49561: PUSH
49562: LD_STRING 1
49564: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
49565: LD_ADDR_VAR 0 4
49569: PUSH
49570: LD_VAR 0 4
49574: PUSH
49575: LD_VAR 0 2
49579: STR
49580: ST_TO_ADDR
// end ;
49581: GO 49477
49583: POP
49584: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
49585: LD_STRING getStreamItemsFromMission("
49587: PUSH
49588: LD_VAR 0 3
49592: STR
49593: PUSH
49594: LD_STRING ","
49596: STR
49597: PUSH
49598: LD_VAR 0 4
49602: STR
49603: PUSH
49604: LD_STRING ")
49606: STR
49607: PPUSH
49608: CALL_OW 559
// end else
49612: GO 49621
// ToLua ( getStreamItemsFromMission("","") ) ;
49614: LD_STRING getStreamItemsFromMission("","")
49616: PPUSH
49617: CALL_OW 559
// end ;
49621: LD_VAR 0 1
49625: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
49626: LD_EXP 39
49630: PUSH
49631: LD_EXP 44
49635: AND
49636: IFFALSE 49760
49638: GO 49640
49640: DISABLE
49641: LD_INT 0
49643: PPUSH
49644: PPUSH
// begin enable ;
49645: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
49646: LD_ADDR_VAR 0 2
49650: PUSH
49651: LD_INT 22
49653: PUSH
49654: LD_OWVAR 2
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 34
49668: PUSH
49669: LD_INT 7
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 34
49678: PUSH
49679: LD_INT 45
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 34
49688: PUSH
49689: LD_INT 28
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 34
49698: PUSH
49699: LD_INT 47
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PPUSH
49717: CALL_OW 69
49721: ST_TO_ADDR
// if not tmp then
49722: LD_VAR 0 2
49726: NOT
49727: IFFALSE 49731
// exit ;
49729: GO 49760
// for i in tmp do
49731: LD_ADDR_VAR 0 1
49735: PUSH
49736: LD_VAR 0 2
49740: PUSH
49741: FOR_IN
49742: IFFALSE 49758
// begin SetLives ( i , 0 ) ;
49744: LD_VAR 0 1
49748: PPUSH
49749: LD_INT 0
49751: PPUSH
49752: CALL_OW 234
// end ;
49756: GO 49741
49758: POP
49759: POP
// end ;
49760: PPOPN 2
49762: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
49763: LD_EXP 39
49767: PUSH
49768: LD_EXP 45
49772: AND
49773: IFFALSE 49857
49775: GO 49777
49777: DISABLE
49778: LD_INT 0
49780: PPUSH
49781: PPUSH
// begin enable ;
49782: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
49783: LD_ADDR_VAR 0 2
49787: PUSH
49788: LD_INT 22
49790: PUSH
49791: LD_OWVAR 2
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 32
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PPUSH
49814: CALL_OW 69
49818: ST_TO_ADDR
// if not tmp then
49819: LD_VAR 0 2
49823: NOT
49824: IFFALSE 49828
// exit ;
49826: GO 49857
// for i in tmp do
49828: LD_ADDR_VAR 0 1
49832: PUSH
49833: LD_VAR 0 2
49837: PUSH
49838: FOR_IN
49839: IFFALSE 49855
// begin SetLives ( i , 0 ) ;
49841: LD_VAR 0 1
49845: PPUSH
49846: LD_INT 0
49848: PPUSH
49849: CALL_OW 234
// end ;
49853: GO 49838
49855: POP
49856: POP
// end ;
49857: PPOPN 2
49859: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
49860: LD_EXP 39
49864: PUSH
49865: LD_EXP 42
49869: AND
49870: IFFALSE 49963
49872: GO 49874
49874: DISABLE
49875: LD_INT 0
49877: PPUSH
// begin enable ;
49878: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
49879: LD_ADDR_VAR 0 1
49883: PUSH
49884: LD_INT 22
49886: PUSH
49887: LD_OWVAR 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: LD_INT 25
49901: PUSH
49902: LD_INT 5
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 25
49911: PUSH
49912: LD_INT 9
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 25
49921: PUSH
49922: LD_INT 8
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PPUSH
49939: CALL_OW 69
49943: PUSH
49944: FOR_IN
49945: IFFALSE 49961
// begin SetClass ( i , 1 ) ;
49947: LD_VAR 0 1
49951: PPUSH
49952: LD_INT 1
49954: PPUSH
49955: CALL_OW 336
// end ;
49959: GO 49944
49961: POP
49962: POP
// end ;
49963: PPOPN 1
49965: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
49966: LD_EXP 39
49970: PUSH
49971: LD_EXP 43
49975: AND
49976: PUSH
49977: LD_OWVAR 65
49981: PUSH
49982: LD_INT 7
49984: LESS
49985: AND
49986: IFFALSE 50000
49988: GO 49990
49990: DISABLE
// begin enable ;
49991: ENABLE
// game_speed := 7 ;
49992: LD_ADDR_OWVAR 65
49996: PUSH
49997: LD_INT 7
49999: ST_TO_ADDR
// end ;
50000: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
50001: LD_EXP 39
50005: PUSH
50006: LD_EXP 46
50010: AND
50011: IFFALSE 50213
50013: GO 50015
50015: DISABLE
50016: LD_INT 0
50018: PPUSH
50019: PPUSH
50020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
50021: LD_ADDR_VAR 0 3
50025: PUSH
50026: LD_INT 81
50028: PUSH
50029: LD_OWVAR 2
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 21
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PPUSH
50052: CALL_OW 69
50056: ST_TO_ADDR
// if not tmp then
50057: LD_VAR 0 3
50061: NOT
50062: IFFALSE 50066
// exit ;
50064: GO 50213
// if tmp > 5 then
50066: LD_VAR 0 3
50070: PUSH
50071: LD_INT 5
50073: GREATER
50074: IFFALSE 50086
// k := 5 else
50076: LD_ADDR_VAR 0 2
50080: PUSH
50081: LD_INT 5
50083: ST_TO_ADDR
50084: GO 50096
// k := tmp ;
50086: LD_ADDR_VAR 0 2
50090: PUSH
50091: LD_VAR 0 3
50095: ST_TO_ADDR
// for i := 1 to k do
50096: LD_ADDR_VAR 0 1
50100: PUSH
50101: DOUBLE
50102: LD_INT 1
50104: DEC
50105: ST_TO_ADDR
50106: LD_VAR 0 2
50110: PUSH
50111: FOR_TO
50112: IFFALSE 50211
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
50114: LD_VAR 0 3
50118: PUSH
50119: LD_VAR 0 1
50123: ARRAY
50124: PPUSH
50125: LD_VAR 0 1
50129: PUSH
50130: LD_INT 4
50132: MOD
50133: PUSH
50134: LD_INT 1
50136: PLUS
50137: PPUSH
50138: CALL_OW 259
50142: PUSH
50143: LD_INT 10
50145: LESS
50146: IFFALSE 50209
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
50148: LD_VAR 0 3
50152: PUSH
50153: LD_VAR 0 1
50157: ARRAY
50158: PPUSH
50159: LD_VAR 0 1
50163: PUSH
50164: LD_INT 4
50166: MOD
50167: PUSH
50168: LD_INT 1
50170: PLUS
50171: PPUSH
50172: LD_VAR 0 3
50176: PUSH
50177: LD_VAR 0 1
50181: ARRAY
50182: PPUSH
50183: LD_VAR 0 1
50187: PUSH
50188: LD_INT 4
50190: MOD
50191: PUSH
50192: LD_INT 1
50194: PLUS
50195: PPUSH
50196: CALL_OW 259
50200: PUSH
50201: LD_INT 1
50203: PLUS
50204: PPUSH
50205: CALL_OW 237
50209: GO 50111
50211: POP
50212: POP
// end ;
50213: PPOPN 3
50215: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
50216: LD_EXP 39
50220: PUSH
50221: LD_EXP 47
50225: AND
50226: IFFALSE 50246
50228: GO 50230
50230: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
50231: LD_INT 4
50233: PPUSH
50234: LD_OWVAR 2
50238: PPUSH
50239: LD_INT 0
50241: PPUSH
50242: CALL_OW 324
50246: END
// every 0 0$1 trigger StreamModeActive and sShovel do
50247: LD_EXP 39
50251: PUSH
50252: LD_EXP 76
50256: AND
50257: IFFALSE 50277
50259: GO 50261
50261: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
50262: LD_INT 19
50264: PPUSH
50265: LD_OWVAR 2
50269: PPUSH
50270: LD_INT 0
50272: PPUSH
50273: CALL_OW 324
50277: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
50278: LD_EXP 39
50282: PUSH
50283: LD_EXP 48
50287: AND
50288: IFFALSE 50390
50290: GO 50292
50292: DISABLE
50293: LD_INT 0
50295: PPUSH
50296: PPUSH
// begin enable ;
50297: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
50298: LD_ADDR_VAR 0 2
50302: PUSH
50303: LD_INT 22
50305: PUSH
50306: LD_OWVAR 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: LD_INT 34
50320: PUSH
50321: LD_INT 11
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 34
50330: PUSH
50331: LD_INT 30
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: LIST
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PPUSH
50347: CALL_OW 69
50351: ST_TO_ADDR
// if not tmp then
50352: LD_VAR 0 2
50356: NOT
50357: IFFALSE 50361
// exit ;
50359: GO 50390
// for i in tmp do
50361: LD_ADDR_VAR 0 1
50365: PUSH
50366: LD_VAR 0 2
50370: PUSH
50371: FOR_IN
50372: IFFALSE 50388
// begin SetLives ( i , 0 ) ;
50374: LD_VAR 0 1
50378: PPUSH
50379: LD_INT 0
50381: PPUSH
50382: CALL_OW 234
// end ;
50386: GO 50371
50388: POP
50389: POP
// end ;
50390: PPOPN 2
50392: END
// every 0 0$1 trigger StreamModeActive and sBunker do
50393: LD_EXP 39
50397: PUSH
50398: LD_EXP 49
50402: AND
50403: IFFALSE 50423
50405: GO 50407
50407: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
50408: LD_INT 32
50410: PPUSH
50411: LD_OWVAR 2
50415: PPUSH
50416: LD_INT 0
50418: PPUSH
50419: CALL_OW 324
50423: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
50424: LD_EXP 39
50428: PUSH
50429: LD_EXP 50
50433: AND
50434: IFFALSE 50615
50436: GO 50438
50438: DISABLE
50439: LD_INT 0
50441: PPUSH
50442: PPUSH
50443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
50444: LD_ADDR_VAR 0 2
50448: PUSH
50449: LD_INT 22
50451: PUSH
50452: LD_OWVAR 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 33
50463: PUSH
50464: LD_INT 3
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PPUSH
50475: CALL_OW 69
50479: ST_TO_ADDR
// if not tmp then
50480: LD_VAR 0 2
50484: NOT
50485: IFFALSE 50489
// exit ;
50487: GO 50615
// side := 0 ;
50489: LD_ADDR_VAR 0 3
50493: PUSH
50494: LD_INT 0
50496: ST_TO_ADDR
// for i := 1 to 8 do
50497: LD_ADDR_VAR 0 1
50501: PUSH
50502: DOUBLE
50503: LD_INT 1
50505: DEC
50506: ST_TO_ADDR
50507: LD_INT 8
50509: PUSH
50510: FOR_TO
50511: IFFALSE 50559
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
50513: LD_OWVAR 2
50517: PUSH
50518: LD_VAR 0 1
50522: NONEQUAL
50523: PUSH
50524: LD_OWVAR 2
50528: PPUSH
50529: LD_VAR 0 1
50533: PPUSH
50534: CALL_OW 81
50538: PUSH
50539: LD_INT 2
50541: EQUAL
50542: AND
50543: IFFALSE 50557
// begin side := i ;
50545: LD_ADDR_VAR 0 3
50549: PUSH
50550: LD_VAR 0 1
50554: ST_TO_ADDR
// break ;
50555: GO 50559
// end ;
50557: GO 50510
50559: POP
50560: POP
// if not side then
50561: LD_VAR 0 3
50565: NOT
50566: IFFALSE 50570
// exit ;
50568: GO 50615
// for i := 1 to tmp do
50570: LD_ADDR_VAR 0 1
50574: PUSH
50575: DOUBLE
50576: LD_INT 1
50578: DEC
50579: ST_TO_ADDR
50580: LD_VAR 0 2
50584: PUSH
50585: FOR_TO
50586: IFFALSE 50613
// if Prob ( 60 ) then
50588: LD_INT 60
50590: PPUSH
50591: CALL_OW 13
50595: IFFALSE 50611
// SetSide ( i , side ) ;
50597: LD_VAR 0 1
50601: PPUSH
50602: LD_VAR 0 3
50606: PPUSH
50607: CALL_OW 235
50611: GO 50585
50613: POP
50614: POP
// end ;
50615: PPOPN 3
50617: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
50618: LD_EXP 39
50622: PUSH
50623: LD_EXP 52
50627: AND
50628: IFFALSE 50747
50630: GO 50632
50632: DISABLE
50633: LD_INT 0
50635: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
50636: LD_ADDR_VAR 0 1
50640: PUSH
50641: LD_INT 22
50643: PUSH
50644: LD_OWVAR 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 21
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 3
50665: PUSH
50666: LD_INT 23
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: LIST
50684: PPUSH
50685: CALL_OW 69
50689: PUSH
50690: FOR_IN
50691: IFFALSE 50745
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
50693: LD_VAR 0 1
50697: PPUSH
50698: CALL_OW 257
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: LD_INT 4
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: IN
50721: IFFALSE 50743
// SetClass ( un , rand ( 1 , 4 ) ) ;
50723: LD_VAR 0 1
50727: PPUSH
50728: LD_INT 1
50730: PPUSH
50731: LD_INT 4
50733: PPUSH
50734: CALL_OW 12
50738: PPUSH
50739: CALL_OW 336
50743: GO 50690
50745: POP
50746: POP
// end ;
50747: PPOPN 1
50749: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
50750: LD_EXP 39
50754: PUSH
50755: LD_EXP 51
50759: AND
50760: IFFALSE 50839
50762: GO 50764
50764: DISABLE
50765: LD_INT 0
50767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
50768: LD_ADDR_VAR 0 1
50772: PUSH
50773: LD_INT 22
50775: PUSH
50776: LD_OWVAR 2
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 21
50787: PUSH
50788: LD_INT 3
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PPUSH
50799: CALL_OW 69
50803: ST_TO_ADDR
// if not tmp then
50804: LD_VAR 0 1
50808: NOT
50809: IFFALSE 50813
// exit ;
50811: GO 50839
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
50813: LD_VAR 0 1
50817: PUSH
50818: LD_INT 1
50820: PPUSH
50821: LD_VAR 0 1
50825: PPUSH
50826: CALL_OW 12
50830: ARRAY
50831: PPUSH
50832: LD_INT 100
50834: PPUSH
50835: CALL_OW 234
// end ;
50839: PPOPN 1
50841: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
50842: LD_EXP 39
50846: PUSH
50847: LD_EXP 53
50851: AND
50852: IFFALSE 50950
50854: GO 50856
50856: DISABLE
50857: LD_INT 0
50859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50860: LD_ADDR_VAR 0 1
50864: PUSH
50865: LD_INT 22
50867: PUSH
50868: LD_OWVAR 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 21
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PPUSH
50891: CALL_OW 69
50895: ST_TO_ADDR
// if not tmp then
50896: LD_VAR 0 1
50900: NOT
50901: IFFALSE 50905
// exit ;
50903: GO 50950
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
50905: LD_VAR 0 1
50909: PUSH
50910: LD_INT 1
50912: PPUSH
50913: LD_VAR 0 1
50917: PPUSH
50918: CALL_OW 12
50922: ARRAY
50923: PPUSH
50924: LD_INT 1
50926: PPUSH
50927: LD_INT 4
50929: PPUSH
50930: CALL_OW 12
50934: PPUSH
50935: LD_INT 3000
50937: PPUSH
50938: LD_INT 9000
50940: PPUSH
50941: CALL_OW 12
50945: PPUSH
50946: CALL_OW 492
// end ;
50950: PPOPN 1
50952: END
// every 0 0$1 trigger StreamModeActive and sDepot do
50953: LD_EXP 39
50957: PUSH
50958: LD_EXP 54
50962: AND
50963: IFFALSE 50983
50965: GO 50967
50967: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
50968: LD_INT 1
50970: PPUSH
50971: LD_OWVAR 2
50975: PPUSH
50976: LD_INT 0
50978: PPUSH
50979: CALL_OW 324
50983: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
50984: LD_EXP 39
50988: PUSH
50989: LD_EXP 55
50993: AND
50994: IFFALSE 51077
50996: GO 50998
50998: DISABLE
50999: LD_INT 0
51001: PPUSH
51002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51003: LD_ADDR_VAR 0 2
51007: PUSH
51008: LD_INT 22
51010: PUSH
51011: LD_OWVAR 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 21
51022: PUSH
51023: LD_INT 3
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PPUSH
51034: CALL_OW 69
51038: ST_TO_ADDR
// if not tmp then
51039: LD_VAR 0 2
51043: NOT
51044: IFFALSE 51048
// exit ;
51046: GO 51077
// for i in tmp do
51048: LD_ADDR_VAR 0 1
51052: PUSH
51053: LD_VAR 0 2
51057: PUSH
51058: FOR_IN
51059: IFFALSE 51075
// SetBLevel ( i , 10 ) ;
51061: LD_VAR 0 1
51065: PPUSH
51066: LD_INT 10
51068: PPUSH
51069: CALL_OW 241
51073: GO 51058
51075: POP
51076: POP
// end ;
51077: PPOPN 2
51079: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
51080: LD_EXP 39
51084: PUSH
51085: LD_EXP 56
51089: AND
51090: IFFALSE 51201
51092: GO 51094
51094: DISABLE
51095: LD_INT 0
51097: PPUSH
51098: PPUSH
51099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51100: LD_ADDR_VAR 0 3
51104: PUSH
51105: LD_INT 22
51107: PUSH
51108: LD_OWVAR 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 25
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PPUSH
51131: CALL_OW 69
51135: ST_TO_ADDR
// if not tmp then
51136: LD_VAR 0 3
51140: NOT
51141: IFFALSE 51145
// exit ;
51143: GO 51201
// un := tmp [ rand ( 1 , tmp ) ] ;
51145: LD_ADDR_VAR 0 2
51149: PUSH
51150: LD_VAR 0 3
51154: PUSH
51155: LD_INT 1
51157: PPUSH
51158: LD_VAR 0 3
51162: PPUSH
51163: CALL_OW 12
51167: ARRAY
51168: ST_TO_ADDR
// if Crawls ( un ) then
51169: LD_VAR 0 2
51173: PPUSH
51174: CALL_OW 318
51178: IFFALSE 51189
// ComWalk ( un ) ;
51180: LD_VAR 0 2
51184: PPUSH
51185: CALL_OW 138
// SetClass ( un , class_sniper ) ;
51189: LD_VAR 0 2
51193: PPUSH
51194: LD_INT 5
51196: PPUSH
51197: CALL_OW 336
// end ;
51201: PPOPN 3
51203: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
51204: LD_EXP 39
51208: PUSH
51209: LD_EXP 57
51213: AND
51214: PUSH
51215: LD_OWVAR 67
51219: PUSH
51220: LD_INT 3
51222: LESS
51223: AND
51224: IFFALSE 51243
51226: GO 51228
51228: DISABLE
// Difficulty := Difficulty + 1 ;
51229: LD_ADDR_OWVAR 67
51233: PUSH
51234: LD_OWVAR 67
51238: PUSH
51239: LD_INT 1
51241: PLUS
51242: ST_TO_ADDR
51243: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
51244: LD_EXP 39
51248: PUSH
51249: LD_EXP 58
51253: AND
51254: IFFALSE 51357
51256: GO 51258
51258: DISABLE
51259: LD_INT 0
51261: PPUSH
// begin for i := 1 to 5 do
51262: LD_ADDR_VAR 0 1
51266: PUSH
51267: DOUBLE
51268: LD_INT 1
51270: DEC
51271: ST_TO_ADDR
51272: LD_INT 5
51274: PUSH
51275: FOR_TO
51276: IFFALSE 51355
// begin uc_nation := nation_nature ;
51278: LD_ADDR_OWVAR 21
51282: PUSH
51283: LD_INT 0
51285: ST_TO_ADDR
// uc_side := 0 ;
51286: LD_ADDR_OWVAR 20
51290: PUSH
51291: LD_INT 0
51293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51294: LD_ADDR_OWVAR 29
51298: PUSH
51299: LD_INT 12
51301: PUSH
51302: LD_INT 12
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// hc_agressivity := 20 ;
51309: LD_ADDR_OWVAR 35
51313: PUSH
51314: LD_INT 20
51316: ST_TO_ADDR
// hc_class := class_tiger ;
51317: LD_ADDR_OWVAR 28
51321: PUSH
51322: LD_INT 14
51324: ST_TO_ADDR
// hc_gallery :=  ;
51325: LD_ADDR_OWVAR 33
51329: PUSH
51330: LD_STRING 
51332: ST_TO_ADDR
// hc_name :=  ;
51333: LD_ADDR_OWVAR 26
51337: PUSH
51338: LD_STRING 
51340: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
51341: CALL_OW 44
51345: PPUSH
51346: LD_INT 0
51348: PPUSH
51349: CALL_OW 51
// end ;
51353: GO 51275
51355: POP
51356: POP
// end ;
51357: PPOPN 1
51359: END
// every 0 0$1 trigger StreamModeActive and sBomb do
51360: LD_EXP 39
51364: PUSH
51365: LD_EXP 59
51369: AND
51370: IFFALSE 51379
51372: GO 51374
51374: DISABLE
// StreamSibBomb ;
51375: CALL 51380 0 0
51379: END
// export function StreamSibBomb ; var i , x , y ; begin
51380: LD_INT 0
51382: PPUSH
51383: PPUSH
51384: PPUSH
51385: PPUSH
// result := false ;
51386: LD_ADDR_VAR 0 1
51390: PUSH
51391: LD_INT 0
51393: ST_TO_ADDR
// for i := 1 to 16 do
51394: LD_ADDR_VAR 0 2
51398: PUSH
51399: DOUBLE
51400: LD_INT 1
51402: DEC
51403: ST_TO_ADDR
51404: LD_INT 16
51406: PUSH
51407: FOR_TO
51408: IFFALSE 51607
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51410: LD_ADDR_VAR 0 3
51414: PUSH
51415: LD_INT 10
51417: PUSH
51418: LD_INT 20
51420: PUSH
51421: LD_INT 30
51423: PUSH
51424: LD_INT 40
51426: PUSH
51427: LD_INT 50
51429: PUSH
51430: LD_INT 60
51432: PUSH
51433: LD_INT 70
51435: PUSH
51436: LD_INT 80
51438: PUSH
51439: LD_INT 90
51441: PUSH
51442: LD_INT 100
51444: PUSH
51445: LD_INT 110
51447: PUSH
51448: LD_INT 120
51450: PUSH
51451: LD_INT 130
51453: PUSH
51454: LD_INT 140
51456: PUSH
51457: LD_INT 150
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PPUSH
51480: LD_INT 15
51482: PPUSH
51483: CALL_OW 12
51487: ARRAY
51488: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51489: LD_ADDR_VAR 0 4
51493: PUSH
51494: LD_INT 10
51496: PUSH
51497: LD_INT 20
51499: PUSH
51500: LD_INT 30
51502: PUSH
51503: LD_INT 40
51505: PUSH
51506: LD_INT 50
51508: PUSH
51509: LD_INT 60
51511: PUSH
51512: LD_INT 70
51514: PUSH
51515: LD_INT 80
51517: PUSH
51518: LD_INT 90
51520: PUSH
51521: LD_INT 100
51523: PUSH
51524: LD_INT 110
51526: PUSH
51527: LD_INT 120
51529: PUSH
51530: LD_INT 130
51532: PUSH
51533: LD_INT 140
51535: PUSH
51536: LD_INT 150
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PPUSH
51559: LD_INT 15
51561: PPUSH
51562: CALL_OW 12
51566: ARRAY
51567: ST_TO_ADDR
// if ValidHex ( x , y ) then
51568: LD_VAR 0 3
51572: PPUSH
51573: LD_VAR 0 4
51577: PPUSH
51578: CALL_OW 488
51582: IFFALSE 51605
// begin result := [ x , y ] ;
51584: LD_ADDR_VAR 0 1
51588: PUSH
51589: LD_VAR 0 3
51593: PUSH
51594: LD_VAR 0 4
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: ST_TO_ADDR
// break ;
51603: GO 51607
// end ; end ;
51605: GO 51407
51607: POP
51608: POP
// if result then
51609: LD_VAR 0 1
51613: IFFALSE 51673
// begin ToLua ( playSibBomb() ) ;
51615: LD_STRING playSibBomb()
51617: PPUSH
51618: CALL_OW 559
// wait ( 0 0$14 ) ;
51622: LD_INT 490
51624: PPUSH
51625: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
51629: LD_VAR 0 1
51633: PUSH
51634: LD_INT 1
51636: ARRAY
51637: PPUSH
51638: LD_VAR 0 1
51642: PUSH
51643: LD_INT 2
51645: ARRAY
51646: PPUSH
51647: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
51651: LD_VAR 0 1
51655: PUSH
51656: LD_INT 1
51658: ARRAY
51659: PPUSH
51660: LD_VAR 0 1
51664: PUSH
51665: LD_INT 2
51667: ARRAY
51668: PPUSH
51669: CALL_OW 429
// end ; end ;
51673: LD_VAR 0 1
51677: RET
// every 0 0$1 trigger StreamModeActive and sReset do
51678: LD_EXP 39
51682: PUSH
51683: LD_EXP 61
51687: AND
51688: IFFALSE 51700
51690: GO 51692
51692: DISABLE
// YouLost (  ) ;
51693: LD_STRING 
51695: PPUSH
51696: CALL_OW 104
51700: END
// every 0 0$1 trigger StreamModeActive and sFog do
51701: LD_EXP 39
51705: PUSH
51706: LD_EXP 60
51710: AND
51711: IFFALSE 51725
51713: GO 51715
51715: DISABLE
// FogOff ( your_side ) ;
51716: LD_OWVAR 2
51720: PPUSH
51721: CALL_OW 344
51725: END
// every 0 0$1 trigger StreamModeActive and sSun do
51726: LD_EXP 39
51730: PUSH
51731: LD_EXP 62
51735: AND
51736: IFFALSE 51764
51738: GO 51740
51740: DISABLE
// begin solar_recharge_percent := 0 ;
51741: LD_ADDR_OWVAR 79
51745: PUSH
51746: LD_INT 0
51748: ST_TO_ADDR
// wait ( 5 5$00 ) ;
51749: LD_INT 10500
51751: PPUSH
51752: CALL_OW 67
// solar_recharge_percent := 100 ;
51756: LD_ADDR_OWVAR 79
51760: PUSH
51761: LD_INT 100
51763: ST_TO_ADDR
// end ;
51764: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
51765: LD_EXP 39
51769: PUSH
51770: LD_EXP 63
51774: AND
51775: IFFALSE 52014
51777: GO 51779
51779: DISABLE
51780: LD_INT 0
51782: PPUSH
51783: PPUSH
51784: PPUSH
// begin tmp := [ ] ;
51785: LD_ADDR_VAR 0 3
51789: PUSH
51790: EMPTY
51791: ST_TO_ADDR
// for i := 1 to 6 do
51792: LD_ADDR_VAR 0 1
51796: PUSH
51797: DOUBLE
51798: LD_INT 1
51800: DEC
51801: ST_TO_ADDR
51802: LD_INT 6
51804: PUSH
51805: FOR_TO
51806: IFFALSE 51911
// begin uc_nation := nation_nature ;
51808: LD_ADDR_OWVAR 21
51812: PUSH
51813: LD_INT 0
51815: ST_TO_ADDR
// uc_side := 0 ;
51816: LD_ADDR_OWVAR 20
51820: PUSH
51821: LD_INT 0
51823: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51824: LD_ADDR_OWVAR 29
51828: PUSH
51829: LD_INT 12
51831: PUSH
51832: LD_INT 12
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: ST_TO_ADDR
// hc_agressivity := 20 ;
51839: LD_ADDR_OWVAR 35
51843: PUSH
51844: LD_INT 20
51846: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
51847: LD_ADDR_OWVAR 28
51851: PUSH
51852: LD_INT 17
51854: ST_TO_ADDR
// hc_gallery :=  ;
51855: LD_ADDR_OWVAR 33
51859: PUSH
51860: LD_STRING 
51862: ST_TO_ADDR
// hc_name :=  ;
51863: LD_ADDR_OWVAR 26
51867: PUSH
51868: LD_STRING 
51870: ST_TO_ADDR
// un := CreateHuman ;
51871: LD_ADDR_VAR 0 2
51875: PUSH
51876: CALL_OW 44
51880: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
51881: LD_VAR 0 2
51885: PPUSH
51886: LD_INT 1
51888: PPUSH
51889: CALL_OW 51
// tmp := tmp ^ un ;
51893: LD_ADDR_VAR 0 3
51897: PUSH
51898: LD_VAR 0 3
51902: PUSH
51903: LD_VAR 0 2
51907: ADD
51908: ST_TO_ADDR
// end ;
51909: GO 51805
51911: POP
51912: POP
// repeat wait ( 0 0$1 ) ;
51913: LD_INT 35
51915: PPUSH
51916: CALL_OW 67
// for un in tmp do
51920: LD_ADDR_VAR 0 2
51924: PUSH
51925: LD_VAR 0 3
51929: PUSH
51930: FOR_IN
51931: IFFALSE 52005
// begin if IsDead ( un ) then
51933: LD_VAR 0 2
51937: PPUSH
51938: CALL_OW 301
51942: IFFALSE 51962
// begin tmp := tmp diff un ;
51944: LD_ADDR_VAR 0 3
51948: PUSH
51949: LD_VAR 0 3
51953: PUSH
51954: LD_VAR 0 2
51958: DIFF
51959: ST_TO_ADDR
// continue ;
51960: GO 51930
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
51962: LD_VAR 0 2
51966: PPUSH
51967: LD_INT 3
51969: PUSH
51970: LD_INT 22
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PPUSH
51984: CALL_OW 69
51988: PPUSH
51989: LD_VAR 0 2
51993: PPUSH
51994: CALL_OW 74
51998: PPUSH
51999: CALL_OW 115
// end ;
52003: GO 51930
52005: POP
52006: POP
// until not tmp ;
52007: LD_VAR 0 3
52011: NOT
52012: IFFALSE 51913
// end ;
52014: PPOPN 3
52016: END
// every 0 0$1 trigger StreamModeActive and sTroll do
52017: LD_EXP 39
52021: PUSH
52022: LD_EXP 64
52026: AND
52027: IFFALSE 52081
52029: GO 52031
52031: DISABLE
// begin ToLua ( displayTroll(); ) ;
52032: LD_STRING displayTroll();
52034: PPUSH
52035: CALL_OW 559
// wait ( 3 3$00 ) ;
52039: LD_INT 6300
52041: PPUSH
52042: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52046: LD_STRING hideTroll();
52048: PPUSH
52049: CALL_OW 559
// wait ( 1 1$00 ) ;
52053: LD_INT 2100
52055: PPUSH
52056: CALL_OW 67
// ToLua ( displayTroll(); ) ;
52060: LD_STRING displayTroll();
52062: PPUSH
52063: CALL_OW 559
// wait ( 1 1$00 ) ;
52067: LD_INT 2100
52069: PPUSH
52070: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52074: LD_STRING hideTroll();
52076: PPUSH
52077: CALL_OW 559
// end ;
52081: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
52082: LD_EXP 39
52086: PUSH
52087: LD_EXP 65
52091: AND
52092: IFFALSE 52155
52094: GO 52096
52096: DISABLE
52097: LD_INT 0
52099: PPUSH
// begin p := 0 ;
52100: LD_ADDR_VAR 0 1
52104: PUSH
52105: LD_INT 0
52107: ST_TO_ADDR
// repeat game_speed := 1 ;
52108: LD_ADDR_OWVAR 65
52112: PUSH
52113: LD_INT 1
52115: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52116: LD_INT 35
52118: PPUSH
52119: CALL_OW 67
// p := p + 1 ;
52123: LD_ADDR_VAR 0 1
52127: PUSH
52128: LD_VAR 0 1
52132: PUSH
52133: LD_INT 1
52135: PLUS
52136: ST_TO_ADDR
// until p >= 60 ;
52137: LD_VAR 0 1
52141: PUSH
52142: LD_INT 60
52144: GREATEREQUAL
52145: IFFALSE 52108
// game_speed := 4 ;
52147: LD_ADDR_OWVAR 65
52151: PUSH
52152: LD_INT 4
52154: ST_TO_ADDR
// end ;
52155: PPOPN 1
52157: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
52158: LD_EXP 39
52162: PUSH
52163: LD_EXP 66
52167: AND
52168: IFFALSE 52314
52170: GO 52172
52172: DISABLE
52173: LD_INT 0
52175: PPUSH
52176: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52177: LD_ADDR_VAR 0 1
52181: PUSH
52182: LD_INT 22
52184: PUSH
52185: LD_OWVAR 2
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 30
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 30
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PPUSH
52226: CALL_OW 69
52230: ST_TO_ADDR
// if not depot then
52231: LD_VAR 0 1
52235: NOT
52236: IFFALSE 52240
// exit ;
52238: GO 52314
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
52240: LD_ADDR_VAR 0 2
52244: PUSH
52245: LD_VAR 0 1
52249: PUSH
52250: LD_INT 1
52252: PPUSH
52253: LD_VAR 0 1
52257: PPUSH
52258: CALL_OW 12
52262: ARRAY
52263: PPUSH
52264: CALL_OW 274
52268: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
52269: LD_VAR 0 2
52273: PPUSH
52274: LD_INT 1
52276: PPUSH
52277: LD_INT 0
52279: PPUSH
52280: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
52284: LD_VAR 0 2
52288: PPUSH
52289: LD_INT 2
52291: PPUSH
52292: LD_INT 0
52294: PPUSH
52295: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
52299: LD_VAR 0 2
52303: PPUSH
52304: LD_INT 3
52306: PPUSH
52307: LD_INT 0
52309: PPUSH
52310: CALL_OW 277
// end ;
52314: PPOPN 2
52316: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
52317: LD_EXP 39
52321: PUSH
52322: LD_EXP 67
52326: AND
52327: IFFALSE 52424
52329: GO 52331
52331: DISABLE
52332: LD_INT 0
52334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52335: LD_ADDR_VAR 0 1
52339: PUSH
52340: LD_INT 22
52342: PUSH
52343: LD_OWVAR 2
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 21
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: PUSH
52365: LD_INT 23
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: LIST
52383: PPUSH
52384: CALL_OW 69
52388: ST_TO_ADDR
// if not tmp then
52389: LD_VAR 0 1
52393: NOT
52394: IFFALSE 52398
// exit ;
52396: GO 52424
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
52398: LD_VAR 0 1
52402: PUSH
52403: LD_INT 1
52405: PPUSH
52406: LD_VAR 0 1
52410: PPUSH
52411: CALL_OW 12
52415: ARRAY
52416: PPUSH
52417: LD_INT 200
52419: PPUSH
52420: CALL_OW 234
// end ;
52424: PPOPN 1
52426: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
52427: LD_EXP 39
52431: PUSH
52432: LD_EXP 68
52436: AND
52437: IFFALSE 52516
52439: GO 52441
52441: DISABLE
52442: LD_INT 0
52444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
52445: LD_ADDR_VAR 0 1
52449: PUSH
52450: LD_INT 22
52452: PUSH
52453: LD_OWVAR 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 21
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PPUSH
52476: CALL_OW 69
52480: ST_TO_ADDR
// if not tmp then
52481: LD_VAR 0 1
52485: NOT
52486: IFFALSE 52490
// exit ;
52488: GO 52516
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
52490: LD_VAR 0 1
52494: PUSH
52495: LD_INT 1
52497: PPUSH
52498: LD_VAR 0 1
52502: PPUSH
52503: CALL_OW 12
52507: ARRAY
52508: PPUSH
52509: LD_INT 60
52511: PPUSH
52512: CALL_OW 234
// end ;
52516: PPOPN 1
52518: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
52519: LD_EXP 39
52523: PUSH
52524: LD_EXP 69
52528: AND
52529: IFFALSE 52628
52531: GO 52533
52533: DISABLE
52534: LD_INT 0
52536: PPUSH
52537: PPUSH
// begin enable ;
52538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
52539: LD_ADDR_VAR 0 1
52543: PUSH
52544: LD_INT 22
52546: PUSH
52547: LD_OWVAR 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 61
52558: PUSH
52559: EMPTY
52560: LIST
52561: PUSH
52562: LD_INT 33
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: PPUSH
52577: CALL_OW 69
52581: ST_TO_ADDR
// if not tmp then
52582: LD_VAR 0 1
52586: NOT
52587: IFFALSE 52591
// exit ;
52589: GO 52628
// for i in tmp do
52591: LD_ADDR_VAR 0 2
52595: PUSH
52596: LD_VAR 0 1
52600: PUSH
52601: FOR_IN
52602: IFFALSE 52626
// if IsControledBy ( i ) then
52604: LD_VAR 0 2
52608: PPUSH
52609: CALL_OW 312
52613: IFFALSE 52624
// ComUnlink ( i ) ;
52615: LD_VAR 0 2
52619: PPUSH
52620: CALL_OW 136
52624: GO 52601
52626: POP
52627: POP
// end ;
52628: PPOPN 2
52630: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
52631: LD_EXP 39
52635: PUSH
52636: LD_EXP 70
52640: AND
52641: IFFALSE 52781
52643: GO 52645
52645: DISABLE
52646: LD_INT 0
52648: PPUSH
52649: PPUSH
// begin ToLua ( displayPowell(); ) ;
52650: LD_STRING displayPowell();
52652: PPUSH
52653: CALL_OW 559
// uc_side := 0 ;
52657: LD_ADDR_OWVAR 20
52661: PUSH
52662: LD_INT 0
52664: ST_TO_ADDR
// uc_nation := 2 ;
52665: LD_ADDR_OWVAR 21
52669: PUSH
52670: LD_INT 2
52672: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
52673: LD_ADDR_OWVAR 37
52677: PUSH
52678: LD_INT 14
52680: ST_TO_ADDR
// vc_engine := engine_siberite ;
52681: LD_ADDR_OWVAR 39
52685: PUSH
52686: LD_INT 3
52688: ST_TO_ADDR
// vc_control := control_apeman ;
52689: LD_ADDR_OWVAR 38
52693: PUSH
52694: LD_INT 5
52696: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
52697: LD_ADDR_OWVAR 40
52701: PUSH
52702: LD_INT 29
52704: ST_TO_ADDR
// un := CreateVehicle ;
52705: LD_ADDR_VAR 0 2
52709: PUSH
52710: CALL_OW 45
52714: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52715: LD_VAR 0 2
52719: PPUSH
52720: LD_INT 1
52722: PPUSH
52723: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
52727: LD_INT 35
52729: PPUSH
52730: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
52734: LD_VAR 0 2
52738: PPUSH
52739: LD_INT 22
52741: PUSH
52742: LD_OWVAR 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PPUSH
52751: CALL_OW 69
52755: PPUSH
52756: LD_VAR 0 2
52760: PPUSH
52761: CALL_OW 74
52765: PPUSH
52766: CALL_OW 115
// until IsDead ( un ) ;
52770: LD_VAR 0 2
52774: PPUSH
52775: CALL_OW 301
52779: IFFALSE 52727
// end ;
52781: PPOPN 2
52783: END
// every 0 0$1 trigger StreamModeActive and sStu do
52784: LD_EXP 39
52788: PUSH
52789: LD_EXP 78
52793: AND
52794: IFFALSE 52810
52796: GO 52798
52798: DISABLE
// begin ToLua ( displayStucuk(); ) ;
52799: LD_STRING displayStucuk();
52801: PPUSH
52802: CALL_OW 559
// ResetFog ;
52806: CALL_OW 335
// end ;
52810: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
52811: LD_EXP 39
52815: PUSH
52816: LD_EXP 71
52820: AND
52821: IFFALSE 52962
52823: GO 52825
52825: DISABLE
52826: LD_INT 0
52828: PPUSH
52829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52830: LD_ADDR_VAR 0 2
52834: PUSH
52835: LD_INT 22
52837: PUSH
52838: LD_OWVAR 2
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 21
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PPUSH
52861: CALL_OW 69
52865: ST_TO_ADDR
// if not tmp then
52866: LD_VAR 0 2
52870: NOT
52871: IFFALSE 52875
// exit ;
52873: GO 52962
// un := tmp [ rand ( 1 , tmp ) ] ;
52875: LD_ADDR_VAR 0 1
52879: PUSH
52880: LD_VAR 0 2
52884: PUSH
52885: LD_INT 1
52887: PPUSH
52888: LD_VAR 0 2
52892: PPUSH
52893: CALL_OW 12
52897: ARRAY
52898: ST_TO_ADDR
// SetSide ( un , 0 ) ;
52899: LD_VAR 0 1
52903: PPUSH
52904: LD_INT 0
52906: PPUSH
52907: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
52911: LD_VAR 0 1
52915: PPUSH
52916: LD_OWVAR 3
52920: PUSH
52921: LD_VAR 0 1
52925: DIFF
52926: PPUSH
52927: LD_VAR 0 1
52931: PPUSH
52932: CALL_OW 74
52936: PPUSH
52937: CALL_OW 115
// wait ( 0 0$20 ) ;
52941: LD_INT 700
52943: PPUSH
52944: CALL_OW 67
// SetSide ( un , your_side ) ;
52948: LD_VAR 0 1
52952: PPUSH
52953: LD_OWVAR 2
52957: PPUSH
52958: CALL_OW 235
// end ;
52962: PPOPN 2
52964: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
52965: LD_EXP 39
52969: PUSH
52970: LD_EXP 72
52974: AND
52975: IFFALSE 53081
52977: GO 52979
52979: DISABLE
52980: LD_INT 0
52982: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52983: LD_ADDR_VAR 0 1
52987: PUSH
52988: LD_INT 22
52990: PUSH
52991: LD_OWVAR 2
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: LD_INT 30
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 30
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PPUSH
53032: CALL_OW 69
53036: ST_TO_ADDR
// if not depot then
53037: LD_VAR 0 1
53041: NOT
53042: IFFALSE 53046
// exit ;
53044: GO 53081
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
53046: LD_VAR 0 1
53050: PUSH
53051: LD_INT 1
53053: ARRAY
53054: PPUSH
53055: CALL_OW 250
53059: PPUSH
53060: LD_VAR 0 1
53064: PUSH
53065: LD_INT 1
53067: ARRAY
53068: PPUSH
53069: CALL_OW 251
53073: PPUSH
53074: LD_INT 70
53076: PPUSH
53077: CALL_OW 495
// end ;
53081: PPOPN 1
53083: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
53084: LD_EXP 39
53088: PUSH
53089: LD_EXP 73
53093: AND
53094: IFFALSE 53305
53096: GO 53098
53098: DISABLE
53099: LD_INT 0
53101: PPUSH
53102: PPUSH
53103: PPUSH
53104: PPUSH
53105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53106: LD_ADDR_VAR 0 5
53110: PUSH
53111: LD_INT 22
53113: PUSH
53114: LD_OWVAR 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 21
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PPUSH
53137: CALL_OW 69
53141: ST_TO_ADDR
// if not tmp then
53142: LD_VAR 0 5
53146: NOT
53147: IFFALSE 53151
// exit ;
53149: GO 53305
// for i in tmp do
53151: LD_ADDR_VAR 0 1
53155: PUSH
53156: LD_VAR 0 5
53160: PUSH
53161: FOR_IN
53162: IFFALSE 53303
// begin d := rand ( 0 , 5 ) ;
53164: LD_ADDR_VAR 0 4
53168: PUSH
53169: LD_INT 0
53171: PPUSH
53172: LD_INT 5
53174: PPUSH
53175: CALL_OW 12
53179: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
53180: LD_ADDR_VAR 0 2
53184: PUSH
53185: LD_VAR 0 1
53189: PPUSH
53190: CALL_OW 250
53194: PPUSH
53195: LD_VAR 0 4
53199: PPUSH
53200: LD_INT 3
53202: PPUSH
53203: LD_INT 12
53205: PPUSH
53206: CALL_OW 12
53210: PPUSH
53211: CALL_OW 272
53215: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
53216: LD_ADDR_VAR 0 3
53220: PUSH
53221: LD_VAR 0 1
53225: PPUSH
53226: CALL_OW 251
53230: PPUSH
53231: LD_VAR 0 4
53235: PPUSH
53236: LD_INT 3
53238: PPUSH
53239: LD_INT 12
53241: PPUSH
53242: CALL_OW 12
53246: PPUSH
53247: CALL_OW 273
53251: ST_TO_ADDR
// if ValidHex ( x , y ) then
53252: LD_VAR 0 2
53256: PPUSH
53257: LD_VAR 0 3
53261: PPUSH
53262: CALL_OW 488
53266: IFFALSE 53301
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
53268: LD_VAR 0 1
53272: PPUSH
53273: LD_VAR 0 2
53277: PPUSH
53278: LD_VAR 0 3
53282: PPUSH
53283: LD_INT 3
53285: PPUSH
53286: LD_INT 6
53288: PPUSH
53289: CALL_OW 12
53293: PPUSH
53294: LD_INT 1
53296: PPUSH
53297: CALL_OW 483
// end ;
53301: GO 53161
53303: POP
53304: POP
// end ;
53305: PPOPN 5
53307: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
53308: LD_EXP 39
53312: PUSH
53313: LD_EXP 74
53317: AND
53318: IFFALSE 53412
53320: GO 53322
53322: DISABLE
53323: LD_INT 0
53325: PPUSH
53326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
53327: LD_ADDR_VAR 0 2
53331: PUSH
53332: LD_INT 22
53334: PUSH
53335: LD_OWVAR 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 32
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 21
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: PPUSH
53369: CALL_OW 69
53373: ST_TO_ADDR
// if not tmp then
53374: LD_VAR 0 2
53378: NOT
53379: IFFALSE 53383
// exit ;
53381: GO 53412
// for i in tmp do
53383: LD_ADDR_VAR 0 1
53387: PUSH
53388: LD_VAR 0 2
53392: PUSH
53393: FOR_IN
53394: IFFALSE 53410
// SetFuel ( i , 0 ) ;
53396: LD_VAR 0 1
53400: PPUSH
53401: LD_INT 0
53403: PPUSH
53404: CALL_OW 240
53408: GO 53393
53410: POP
53411: POP
// end ;
53412: PPOPN 2
53414: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
53415: LD_EXP 39
53419: PUSH
53420: LD_EXP 75
53424: AND
53425: IFFALSE 53491
53427: GO 53429
53429: DISABLE
53430: LD_INT 0
53432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53433: LD_ADDR_VAR 0 1
53437: PUSH
53438: LD_INT 22
53440: PUSH
53441: LD_OWVAR 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 30
53452: PUSH
53453: LD_INT 29
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PPUSH
53464: CALL_OW 69
53468: ST_TO_ADDR
// if not tmp then
53469: LD_VAR 0 1
53473: NOT
53474: IFFALSE 53478
// exit ;
53476: GO 53491
// DestroyUnit ( tmp [ 1 ] ) ;
53478: LD_VAR 0 1
53482: PUSH
53483: LD_INT 1
53485: ARRAY
53486: PPUSH
53487: CALL_OW 65
// end ;
53491: PPOPN 1
53493: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
53494: LD_EXP 39
53498: PUSH
53499: LD_EXP 77
53503: AND
53504: IFFALSE 53633
53506: GO 53508
53508: DISABLE
53509: LD_INT 0
53511: PPUSH
// begin uc_side := 0 ;
53512: LD_ADDR_OWVAR 20
53516: PUSH
53517: LD_INT 0
53519: ST_TO_ADDR
// uc_nation := nation_arabian ;
53520: LD_ADDR_OWVAR 21
53524: PUSH
53525: LD_INT 2
53527: ST_TO_ADDR
// hc_gallery :=  ;
53528: LD_ADDR_OWVAR 33
53532: PUSH
53533: LD_STRING 
53535: ST_TO_ADDR
// hc_name :=  ;
53536: LD_ADDR_OWVAR 26
53540: PUSH
53541: LD_STRING 
53543: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
53544: LD_INT 1
53546: PPUSH
53547: LD_INT 11
53549: PPUSH
53550: LD_INT 10
53552: PPUSH
53553: CALL_OW 380
// un := CreateHuman ;
53557: LD_ADDR_VAR 0 1
53561: PUSH
53562: CALL_OW 44
53566: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53567: LD_VAR 0 1
53571: PPUSH
53572: LD_INT 1
53574: PPUSH
53575: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53579: LD_INT 35
53581: PPUSH
53582: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53586: LD_VAR 0 1
53590: PPUSH
53591: LD_INT 22
53593: PUSH
53594: LD_OWVAR 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PPUSH
53603: CALL_OW 69
53607: PPUSH
53608: LD_VAR 0 1
53612: PPUSH
53613: CALL_OW 74
53617: PPUSH
53618: CALL_OW 115
// until IsDead ( un ) ;
53622: LD_VAR 0 1
53626: PPUSH
53627: CALL_OW 301
53631: IFFALSE 53579
// end ;
53633: PPOPN 1
53635: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
53636: LD_EXP 39
53640: PUSH
53641: LD_EXP 79
53645: AND
53646: IFFALSE 53658
53648: GO 53650
53650: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
53651: LD_STRING earthquake(getX(game), 0, 32)
53653: PPUSH
53654: CALL_OW 559
53658: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
53659: LD_EXP 39
53663: PUSH
53664: LD_EXP 80
53668: AND
53669: IFFALSE 53760
53671: GO 53673
53673: DISABLE
53674: LD_INT 0
53676: PPUSH
// begin enable ;
53677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
53678: LD_ADDR_VAR 0 1
53682: PUSH
53683: LD_INT 22
53685: PUSH
53686: LD_OWVAR 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 21
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 33
53707: PUSH
53708: LD_INT 3
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: PPUSH
53720: CALL_OW 69
53724: ST_TO_ADDR
// if not tmp then
53725: LD_VAR 0 1
53729: NOT
53730: IFFALSE 53734
// exit ;
53732: GO 53760
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
53734: LD_VAR 0 1
53738: PUSH
53739: LD_INT 1
53741: PPUSH
53742: LD_VAR 0 1
53746: PPUSH
53747: CALL_OW 12
53751: ARRAY
53752: PPUSH
53753: LD_INT 1
53755: PPUSH
53756: CALL_OW 234
// end ;
53760: PPOPN 1
53762: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
53763: LD_EXP 39
53767: PUSH
53768: LD_EXP 81
53772: AND
53773: IFFALSE 53914
53775: GO 53777
53777: DISABLE
53778: LD_INT 0
53780: PPUSH
53781: PPUSH
53782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53783: LD_ADDR_VAR 0 3
53787: PUSH
53788: LD_INT 22
53790: PUSH
53791: LD_OWVAR 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 25
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PPUSH
53814: CALL_OW 69
53818: ST_TO_ADDR
// if not tmp then
53819: LD_VAR 0 3
53823: NOT
53824: IFFALSE 53828
// exit ;
53826: GO 53914
// un := tmp [ rand ( 1 , tmp ) ] ;
53828: LD_ADDR_VAR 0 2
53832: PUSH
53833: LD_VAR 0 3
53837: PUSH
53838: LD_INT 1
53840: PPUSH
53841: LD_VAR 0 3
53845: PPUSH
53846: CALL_OW 12
53850: ARRAY
53851: ST_TO_ADDR
// if Crawls ( un ) then
53852: LD_VAR 0 2
53856: PPUSH
53857: CALL_OW 318
53861: IFFALSE 53872
// ComWalk ( un ) ;
53863: LD_VAR 0 2
53867: PPUSH
53868: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
53872: LD_VAR 0 2
53876: PPUSH
53877: LD_INT 9
53879: PPUSH
53880: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
53884: LD_INT 28
53886: PPUSH
53887: LD_OWVAR 2
53891: PPUSH
53892: LD_INT 2
53894: PPUSH
53895: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
53899: LD_INT 29
53901: PPUSH
53902: LD_OWVAR 2
53906: PPUSH
53907: LD_INT 2
53909: PPUSH
53910: CALL_OW 322
// end ;
53914: PPOPN 3
53916: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
53917: LD_EXP 39
53921: PUSH
53922: LD_EXP 82
53926: AND
53927: IFFALSE 54038
53929: GO 53931
53931: DISABLE
53932: LD_INT 0
53934: PPUSH
53935: PPUSH
53936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53937: LD_ADDR_VAR 0 3
53941: PUSH
53942: LD_INT 22
53944: PUSH
53945: LD_OWVAR 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 25
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PPUSH
53968: CALL_OW 69
53972: ST_TO_ADDR
// if not tmp then
53973: LD_VAR 0 3
53977: NOT
53978: IFFALSE 53982
// exit ;
53980: GO 54038
// un := tmp [ rand ( 1 , tmp ) ] ;
53982: LD_ADDR_VAR 0 2
53986: PUSH
53987: LD_VAR 0 3
53991: PUSH
53992: LD_INT 1
53994: PPUSH
53995: LD_VAR 0 3
53999: PPUSH
54000: CALL_OW 12
54004: ARRAY
54005: ST_TO_ADDR
// if Crawls ( un ) then
54006: LD_VAR 0 2
54010: PPUSH
54011: CALL_OW 318
54015: IFFALSE 54026
// ComWalk ( un ) ;
54017: LD_VAR 0 2
54021: PPUSH
54022: CALL_OW 138
// SetClass ( un , class_mortar ) ;
54026: LD_VAR 0 2
54030: PPUSH
54031: LD_INT 8
54033: PPUSH
54034: CALL_OW 336
// end ;
54038: PPOPN 3
54040: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
54041: LD_EXP 39
54045: PUSH
54046: LD_EXP 83
54050: AND
54051: IFFALSE 54195
54053: GO 54055
54055: DISABLE
54056: LD_INT 0
54058: PPUSH
54059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
54060: LD_ADDR_VAR 0 2
54064: PUSH
54065: LD_INT 22
54067: PUSH
54068: LD_OWVAR 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 21
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: LD_INT 34
54092: PUSH
54093: LD_INT 12
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 34
54102: PUSH
54103: LD_INT 51
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 34
54112: PUSH
54113: LD_INT 32
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: PPUSH
54131: CALL_OW 69
54135: ST_TO_ADDR
// if not tmp then
54136: LD_VAR 0 2
54140: NOT
54141: IFFALSE 54145
// exit ;
54143: GO 54195
// for i in tmp do
54145: LD_ADDR_VAR 0 1
54149: PUSH
54150: LD_VAR 0 2
54154: PUSH
54155: FOR_IN
54156: IFFALSE 54193
// if GetCargo ( i , mat_artifact ) = 0 then
54158: LD_VAR 0 1
54162: PPUSH
54163: LD_INT 4
54165: PPUSH
54166: CALL_OW 289
54170: PUSH
54171: LD_INT 0
54173: EQUAL
54174: IFFALSE 54191
// SetCargo ( i , mat_siberit , 100 ) ;
54176: LD_VAR 0 1
54180: PPUSH
54181: LD_INT 3
54183: PPUSH
54184: LD_INT 100
54186: PPUSH
54187: CALL_OW 290
54191: GO 54155
54193: POP
54194: POP
// end ;
54195: PPOPN 2
54197: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
54198: LD_EXP 39
54202: PUSH
54203: LD_EXP 84
54207: AND
54208: IFFALSE 54391
54210: GO 54212
54212: DISABLE
54213: LD_INT 0
54215: PPUSH
54216: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54217: LD_ADDR_VAR 0 2
54221: PUSH
54222: LD_INT 22
54224: PUSH
54225: LD_OWVAR 2
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PPUSH
54234: CALL_OW 69
54238: ST_TO_ADDR
// if not tmp then
54239: LD_VAR 0 2
54243: NOT
54244: IFFALSE 54248
// exit ;
54246: GO 54391
// for i := 1 to 2 do
54248: LD_ADDR_VAR 0 1
54252: PUSH
54253: DOUBLE
54254: LD_INT 1
54256: DEC
54257: ST_TO_ADDR
54258: LD_INT 2
54260: PUSH
54261: FOR_TO
54262: IFFALSE 54389
// begin uc_side := your_side ;
54264: LD_ADDR_OWVAR 20
54268: PUSH
54269: LD_OWVAR 2
54273: ST_TO_ADDR
// uc_nation := nation_american ;
54274: LD_ADDR_OWVAR 21
54278: PUSH
54279: LD_INT 1
54281: ST_TO_ADDR
// vc_chassis := us_morphling ;
54282: LD_ADDR_OWVAR 37
54286: PUSH
54287: LD_INT 5
54289: ST_TO_ADDR
// vc_engine := engine_siberite ;
54290: LD_ADDR_OWVAR 39
54294: PUSH
54295: LD_INT 3
54297: ST_TO_ADDR
// vc_control := control_computer ;
54298: LD_ADDR_OWVAR 38
54302: PUSH
54303: LD_INT 3
54305: ST_TO_ADDR
// vc_weapon := us_double_laser ;
54306: LD_ADDR_OWVAR 40
54310: PUSH
54311: LD_INT 10
54313: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
54314: LD_VAR 0 2
54318: PUSH
54319: LD_INT 1
54321: ARRAY
54322: PPUSH
54323: CALL_OW 310
54327: NOT
54328: IFFALSE 54375
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
54330: CALL_OW 45
54334: PPUSH
54335: LD_VAR 0 2
54339: PUSH
54340: LD_INT 1
54342: ARRAY
54343: PPUSH
54344: CALL_OW 250
54348: PPUSH
54349: LD_VAR 0 2
54353: PUSH
54354: LD_INT 1
54356: ARRAY
54357: PPUSH
54358: CALL_OW 251
54362: PPUSH
54363: LD_INT 12
54365: PPUSH
54366: LD_INT 1
54368: PPUSH
54369: CALL_OW 50
54373: GO 54387
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
54375: CALL_OW 45
54379: PPUSH
54380: LD_INT 1
54382: PPUSH
54383: CALL_OW 51
// end ;
54387: GO 54261
54389: POP
54390: POP
// end ;
54391: PPOPN 2
54393: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
54394: LD_EXP 39
54398: PUSH
54399: LD_EXP 85
54403: AND
54404: IFFALSE 54626
54406: GO 54408
54408: DISABLE
54409: LD_INT 0
54411: PPUSH
54412: PPUSH
54413: PPUSH
54414: PPUSH
54415: PPUSH
54416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54417: LD_ADDR_VAR 0 6
54421: PUSH
54422: LD_INT 22
54424: PUSH
54425: LD_OWVAR 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 21
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 23
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: PPUSH
54466: CALL_OW 69
54470: ST_TO_ADDR
// if not tmp then
54471: LD_VAR 0 6
54475: NOT
54476: IFFALSE 54480
// exit ;
54478: GO 54626
// s1 := rand ( 1 , 4 ) ;
54480: LD_ADDR_VAR 0 2
54484: PUSH
54485: LD_INT 1
54487: PPUSH
54488: LD_INT 4
54490: PPUSH
54491: CALL_OW 12
54495: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
54496: LD_ADDR_VAR 0 4
54500: PUSH
54501: LD_VAR 0 6
54505: PUSH
54506: LD_INT 1
54508: ARRAY
54509: PPUSH
54510: LD_VAR 0 2
54514: PPUSH
54515: CALL_OW 259
54519: ST_TO_ADDR
// if s1 = 1 then
54520: LD_VAR 0 2
54524: PUSH
54525: LD_INT 1
54527: EQUAL
54528: IFFALSE 54548
// s2 := rand ( 2 , 4 ) else
54530: LD_ADDR_VAR 0 3
54534: PUSH
54535: LD_INT 2
54537: PPUSH
54538: LD_INT 4
54540: PPUSH
54541: CALL_OW 12
54545: ST_TO_ADDR
54546: GO 54556
// s2 := 1 ;
54548: LD_ADDR_VAR 0 3
54552: PUSH
54553: LD_INT 1
54555: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
54556: LD_ADDR_VAR 0 5
54560: PUSH
54561: LD_VAR 0 6
54565: PUSH
54566: LD_INT 1
54568: ARRAY
54569: PPUSH
54570: LD_VAR 0 3
54574: PPUSH
54575: CALL_OW 259
54579: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
54580: LD_VAR 0 6
54584: PUSH
54585: LD_INT 1
54587: ARRAY
54588: PPUSH
54589: LD_VAR 0 2
54593: PPUSH
54594: LD_VAR 0 5
54598: PPUSH
54599: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
54603: LD_VAR 0 6
54607: PUSH
54608: LD_INT 1
54610: ARRAY
54611: PPUSH
54612: LD_VAR 0 3
54616: PPUSH
54617: LD_VAR 0 4
54621: PPUSH
54622: CALL_OW 237
// end ;
54626: PPOPN 6
54628: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
54629: LD_EXP 39
54633: PUSH
54634: LD_EXP 86
54638: AND
54639: IFFALSE 54718
54641: GO 54643
54643: DISABLE
54644: LD_INT 0
54646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
54647: LD_ADDR_VAR 0 1
54651: PUSH
54652: LD_INT 22
54654: PUSH
54655: LD_OWVAR 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 30
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PPUSH
54678: CALL_OW 69
54682: ST_TO_ADDR
// if not tmp then
54683: LD_VAR 0 1
54687: NOT
54688: IFFALSE 54692
// exit ;
54690: GO 54718
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54692: LD_VAR 0 1
54696: PUSH
54697: LD_INT 1
54699: PPUSH
54700: LD_VAR 0 1
54704: PPUSH
54705: CALL_OW 12
54709: ARRAY
54710: PPUSH
54711: LD_INT 1
54713: PPUSH
54714: CALL_OW 234
// end ;
54718: PPOPN 1
54720: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
54721: LD_EXP 39
54725: PUSH
54726: LD_EXP 87
54730: AND
54731: IFFALSE 54843
54733: GO 54735
54735: DISABLE
54736: LD_INT 0
54738: PPUSH
54739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
54740: LD_ADDR_VAR 0 2
54744: PUSH
54745: LD_INT 22
54747: PUSH
54748: LD_OWVAR 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: LD_INT 30
54762: PUSH
54763: LD_INT 27
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 30
54772: PUSH
54773: LD_INT 26
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 30
54782: PUSH
54783: LD_INT 28
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PPUSH
54800: CALL_OW 69
54804: ST_TO_ADDR
// if not tmp then
54805: LD_VAR 0 2
54809: NOT
54810: IFFALSE 54814
// exit ;
54812: GO 54843
// for i in tmp do
54814: LD_ADDR_VAR 0 1
54818: PUSH
54819: LD_VAR 0 2
54823: PUSH
54824: FOR_IN
54825: IFFALSE 54841
// SetLives ( i , 1 ) ;
54827: LD_VAR 0 1
54831: PPUSH
54832: LD_INT 1
54834: PPUSH
54835: CALL_OW 234
54839: GO 54824
54841: POP
54842: POP
// end ;
54843: PPOPN 2
54845: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
54846: LD_EXP 39
54850: PUSH
54851: LD_EXP 88
54855: AND
54856: IFFALSE 55130
54858: GO 54860
54860: DISABLE
54861: LD_INT 0
54863: PPUSH
54864: PPUSH
54865: PPUSH
// begin i := rand ( 1 , 7 ) ;
54866: LD_ADDR_VAR 0 1
54870: PUSH
54871: LD_INT 1
54873: PPUSH
54874: LD_INT 7
54876: PPUSH
54877: CALL_OW 12
54881: ST_TO_ADDR
// case i of 1 :
54882: LD_VAR 0 1
54886: PUSH
54887: LD_INT 1
54889: DOUBLE
54890: EQUAL
54891: IFTRUE 54895
54893: GO 54905
54895: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
54896: LD_STRING earthquake(getX(game), 0, 32)
54898: PPUSH
54899: CALL_OW 559
54903: GO 55130
54905: LD_INT 2
54907: DOUBLE
54908: EQUAL
54909: IFTRUE 54913
54911: GO 54927
54913: POP
// begin ToLua ( displayStucuk(); ) ;
54914: LD_STRING displayStucuk();
54916: PPUSH
54917: CALL_OW 559
// ResetFog ;
54921: CALL_OW 335
// end ; 3 :
54925: GO 55130
54927: LD_INT 3
54929: DOUBLE
54930: EQUAL
54931: IFTRUE 54935
54933: GO 55039
54935: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54936: LD_ADDR_VAR 0 2
54940: PUSH
54941: LD_INT 22
54943: PUSH
54944: LD_OWVAR 2
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 25
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PPUSH
54967: CALL_OW 69
54971: ST_TO_ADDR
// if not tmp then
54972: LD_VAR 0 2
54976: NOT
54977: IFFALSE 54981
// exit ;
54979: GO 55130
// un := tmp [ rand ( 1 , tmp ) ] ;
54981: LD_ADDR_VAR 0 3
54985: PUSH
54986: LD_VAR 0 2
54990: PUSH
54991: LD_INT 1
54993: PPUSH
54994: LD_VAR 0 2
54998: PPUSH
54999: CALL_OW 12
55003: ARRAY
55004: ST_TO_ADDR
// if Crawls ( un ) then
55005: LD_VAR 0 3
55009: PPUSH
55010: CALL_OW 318
55014: IFFALSE 55025
// ComWalk ( un ) ;
55016: LD_VAR 0 3
55020: PPUSH
55021: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55025: LD_VAR 0 3
55029: PPUSH
55030: LD_INT 8
55032: PPUSH
55033: CALL_OW 336
// end ; 4 :
55037: GO 55130
55039: LD_INT 4
55041: DOUBLE
55042: EQUAL
55043: IFTRUE 55047
55045: GO 55108
55047: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55048: LD_ADDR_VAR 0 2
55052: PUSH
55053: LD_INT 22
55055: PUSH
55056: LD_OWVAR 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 30
55067: PUSH
55068: LD_INT 29
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PPUSH
55079: CALL_OW 69
55083: ST_TO_ADDR
// if not tmp then
55084: LD_VAR 0 2
55088: NOT
55089: IFFALSE 55093
// exit ;
55091: GO 55130
// DestroyUnit ( tmp [ 1 ] ) ;
55093: LD_VAR 0 2
55097: PUSH
55098: LD_INT 1
55100: ARRAY
55101: PPUSH
55102: CALL_OW 65
// end ; 5 .. 7 :
55106: GO 55130
55108: LD_INT 5
55110: DOUBLE
55111: GREATEREQUAL
55112: IFFALSE 55120
55114: LD_INT 7
55116: DOUBLE
55117: LESSEQUAL
55118: IFTRUE 55122
55120: GO 55129
55122: POP
// StreamSibBomb ; end ;
55123: CALL 51380 0 0
55127: GO 55130
55129: POP
// end ;
55130: PPOPN 3
55132: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
55133: LD_EXP 39
55137: PUSH
55138: LD_EXP 89
55142: AND
55143: IFFALSE 55299
55145: GO 55147
55147: DISABLE
55148: LD_INT 0
55150: PPUSH
55151: PPUSH
55152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
55153: LD_ADDR_VAR 0 2
55157: PUSH
55158: LD_INT 81
55160: PUSH
55161: LD_OWVAR 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 21
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 21
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: LIST
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PPUSH
55202: CALL_OW 69
55206: ST_TO_ADDR
// if not tmp then
55207: LD_VAR 0 2
55211: NOT
55212: IFFALSE 55216
// exit ;
55214: GO 55299
// p := 0 ;
55216: LD_ADDR_VAR 0 3
55220: PUSH
55221: LD_INT 0
55223: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55224: LD_INT 35
55226: PPUSH
55227: CALL_OW 67
// p := p + 1 ;
55231: LD_ADDR_VAR 0 3
55235: PUSH
55236: LD_VAR 0 3
55240: PUSH
55241: LD_INT 1
55243: PLUS
55244: ST_TO_ADDR
// for i in tmp do
55245: LD_ADDR_VAR 0 1
55249: PUSH
55250: LD_VAR 0 2
55254: PUSH
55255: FOR_IN
55256: IFFALSE 55287
// if GetLives ( i ) < 1000 then
55258: LD_VAR 0 1
55262: PPUSH
55263: CALL_OW 256
55267: PUSH
55268: LD_INT 1000
55270: LESS
55271: IFFALSE 55285
// SetLives ( i , 1000 ) ;
55273: LD_VAR 0 1
55277: PPUSH
55278: LD_INT 1000
55280: PPUSH
55281: CALL_OW 234
55285: GO 55255
55287: POP
55288: POP
// until p > 20 ;
55289: LD_VAR 0 3
55293: PUSH
55294: LD_INT 20
55296: GREATER
55297: IFFALSE 55224
// end ;
55299: PPOPN 3
55301: END
// every 0 0$1 trigger StreamModeActive and sTime do
55302: LD_EXP 39
55306: PUSH
55307: LD_EXP 90
55311: AND
55312: IFFALSE 55347
55314: GO 55316
55316: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
55317: LD_INT 28
55319: PPUSH
55320: LD_OWVAR 2
55324: PPUSH
55325: LD_INT 2
55327: PPUSH
55328: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
55332: LD_INT 30
55334: PPUSH
55335: LD_OWVAR 2
55339: PPUSH
55340: LD_INT 2
55342: PPUSH
55343: CALL_OW 322
// end ;
55347: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
55348: LD_EXP 39
55352: PUSH
55353: LD_EXP 91
55357: AND
55358: IFFALSE 55479
55360: GO 55362
55362: DISABLE
55363: LD_INT 0
55365: PPUSH
55366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55367: LD_ADDR_VAR 0 2
55371: PUSH
55372: LD_INT 22
55374: PUSH
55375: LD_OWVAR 2
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 21
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 3
55396: PUSH
55397: LD_INT 23
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: LIST
55415: PPUSH
55416: CALL_OW 69
55420: ST_TO_ADDR
// if not tmp then
55421: LD_VAR 0 2
55425: NOT
55426: IFFALSE 55430
// exit ;
55428: GO 55479
// for i in tmp do
55430: LD_ADDR_VAR 0 1
55434: PUSH
55435: LD_VAR 0 2
55439: PUSH
55440: FOR_IN
55441: IFFALSE 55477
// begin if Crawls ( i ) then
55443: LD_VAR 0 1
55447: PPUSH
55448: CALL_OW 318
55452: IFFALSE 55463
// ComWalk ( i ) ;
55454: LD_VAR 0 1
55458: PPUSH
55459: CALL_OW 138
// SetClass ( i , 2 ) ;
55463: LD_VAR 0 1
55467: PPUSH
55468: LD_INT 2
55470: PPUSH
55471: CALL_OW 336
// end ;
55475: GO 55440
55477: POP
55478: POP
// end ;
55479: PPOPN 2
55481: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
55482: LD_EXP 39
55486: PUSH
55487: LD_EXP 92
55491: AND
55492: IFFALSE 55773
55494: GO 55496
55496: DISABLE
55497: LD_INT 0
55499: PPUSH
55500: PPUSH
55501: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
55502: LD_OWVAR 2
55506: PPUSH
55507: LD_INT 9
55509: PPUSH
55510: LD_INT 1
55512: PPUSH
55513: LD_INT 1
55515: PPUSH
55516: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
55520: LD_INT 9
55522: PPUSH
55523: LD_OWVAR 2
55527: PPUSH
55528: CALL_OW 343
// uc_side := 9 ;
55532: LD_ADDR_OWVAR 20
55536: PUSH
55537: LD_INT 9
55539: ST_TO_ADDR
// uc_nation := 2 ;
55540: LD_ADDR_OWVAR 21
55544: PUSH
55545: LD_INT 2
55547: ST_TO_ADDR
// hc_name := Dark Warrior ;
55548: LD_ADDR_OWVAR 26
55552: PUSH
55553: LD_STRING Dark Warrior
55555: ST_TO_ADDR
// hc_gallery :=  ;
55556: LD_ADDR_OWVAR 33
55560: PUSH
55561: LD_STRING 
55563: ST_TO_ADDR
// hc_noskilllimit := true ;
55564: LD_ADDR_OWVAR 76
55568: PUSH
55569: LD_INT 1
55571: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
55572: LD_ADDR_OWVAR 31
55576: PUSH
55577: LD_INT 30
55579: PUSH
55580: LD_INT 30
55582: PUSH
55583: LD_INT 30
55585: PUSH
55586: LD_INT 30
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: ST_TO_ADDR
// un := CreateHuman ;
55595: LD_ADDR_VAR 0 3
55599: PUSH
55600: CALL_OW 44
55604: ST_TO_ADDR
// hc_noskilllimit := false ;
55605: LD_ADDR_OWVAR 76
55609: PUSH
55610: LD_INT 0
55612: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55613: LD_VAR 0 3
55617: PPUSH
55618: LD_INT 1
55620: PPUSH
55621: CALL_OW 51
// p := 0 ;
55625: LD_ADDR_VAR 0 2
55629: PUSH
55630: LD_INT 0
55632: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55633: LD_INT 35
55635: PPUSH
55636: CALL_OW 67
// p := p + 1 ;
55640: LD_ADDR_VAR 0 2
55644: PUSH
55645: LD_VAR 0 2
55649: PUSH
55650: LD_INT 1
55652: PLUS
55653: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
55654: LD_VAR 0 3
55658: PPUSH
55659: CALL_OW 256
55663: PUSH
55664: LD_INT 1000
55666: LESS
55667: IFFALSE 55681
// SetLives ( un , 1000 ) ;
55669: LD_VAR 0 3
55673: PPUSH
55674: LD_INT 1000
55676: PPUSH
55677: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
55681: LD_VAR 0 3
55685: PPUSH
55686: LD_INT 81
55688: PUSH
55689: LD_OWVAR 2
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 91
55700: PUSH
55701: LD_VAR 0 3
55705: PUSH
55706: LD_INT 30
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PPUSH
55718: CALL_OW 69
55722: PPUSH
55723: LD_VAR 0 3
55727: PPUSH
55728: CALL_OW 74
55732: PPUSH
55733: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
55737: LD_VAR 0 2
55741: PUSH
55742: LD_INT 60
55744: GREATER
55745: PUSH
55746: LD_VAR 0 3
55750: PPUSH
55751: CALL_OW 301
55755: OR
55756: IFFALSE 55633
// if un then
55758: LD_VAR 0 3
55762: IFFALSE 55773
// RemoveUnit ( un ) ;
55764: LD_VAR 0 3
55768: PPUSH
55769: CALL_OW 64
// end ;
55773: PPOPN 3
55775: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
55776: LD_INT 0
55778: PPUSH
// case cmd of 301 :
55779: LD_VAR 0 1
55783: PUSH
55784: LD_INT 301
55786: DOUBLE
55787: EQUAL
55788: IFTRUE 55792
55790: GO 55824
55792: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
55793: LD_VAR 0 6
55797: PPUSH
55798: LD_VAR 0 7
55802: PPUSH
55803: LD_VAR 0 8
55807: PPUSH
55808: LD_VAR 0 4
55812: PPUSH
55813: LD_VAR 0 5
55817: PPUSH
55818: CALL 57025 0 5
55822: GO 55945
55824: LD_INT 302
55826: DOUBLE
55827: EQUAL
55828: IFTRUE 55832
55830: GO 55869
55832: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
55833: LD_VAR 0 6
55837: PPUSH
55838: LD_VAR 0 7
55842: PPUSH
55843: LD_VAR 0 8
55847: PPUSH
55848: LD_VAR 0 9
55852: PPUSH
55853: LD_VAR 0 4
55857: PPUSH
55858: LD_VAR 0 5
55862: PPUSH
55863: CALL 57116 0 6
55867: GO 55945
55869: LD_INT 303
55871: DOUBLE
55872: EQUAL
55873: IFTRUE 55877
55875: GO 55914
55877: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
55878: LD_VAR 0 6
55882: PPUSH
55883: LD_VAR 0 7
55887: PPUSH
55888: LD_VAR 0 8
55892: PPUSH
55893: LD_VAR 0 9
55897: PPUSH
55898: LD_VAR 0 4
55902: PPUSH
55903: LD_VAR 0 5
55907: PPUSH
55908: CALL 55950 0 6
55912: GO 55945
55914: LD_INT 304
55916: DOUBLE
55917: EQUAL
55918: IFTRUE 55922
55920: GO 55944
55922: POP
// hHackTeleport ( unit , x , y ) ; end ;
55923: LD_VAR 0 2
55927: PPUSH
55928: LD_VAR 0 4
55932: PPUSH
55933: LD_VAR 0 5
55937: PPUSH
55938: CALL 57709 0 3
55942: GO 55945
55944: POP
// end ;
55945: LD_VAR 0 12
55949: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
55950: LD_INT 0
55952: PPUSH
55953: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
55954: LD_VAR 0 1
55958: PUSH
55959: LD_INT 1
55961: LESS
55962: PUSH
55963: LD_VAR 0 1
55967: PUSH
55968: LD_INT 3
55970: GREATER
55971: OR
55972: PUSH
55973: LD_VAR 0 5
55977: PPUSH
55978: LD_VAR 0 6
55982: PPUSH
55983: CALL_OW 428
55987: OR
55988: IFFALSE 55992
// exit ;
55990: GO 56712
// uc_side := your_side ;
55992: LD_ADDR_OWVAR 20
55996: PUSH
55997: LD_OWVAR 2
56001: ST_TO_ADDR
// uc_nation := nation ;
56002: LD_ADDR_OWVAR 21
56006: PUSH
56007: LD_VAR 0 1
56011: ST_TO_ADDR
// bc_level = 1 ;
56012: LD_ADDR_OWVAR 43
56016: PUSH
56017: LD_INT 1
56019: ST_TO_ADDR
// case btype of 1 :
56020: LD_VAR 0 2
56024: PUSH
56025: LD_INT 1
56027: DOUBLE
56028: EQUAL
56029: IFTRUE 56033
56031: GO 56044
56033: POP
// bc_type := b_depot ; 2 :
56034: LD_ADDR_OWVAR 42
56038: PUSH
56039: LD_INT 0
56041: ST_TO_ADDR
56042: GO 56656
56044: LD_INT 2
56046: DOUBLE
56047: EQUAL
56048: IFTRUE 56052
56050: GO 56063
56052: POP
// bc_type := b_warehouse ; 3 :
56053: LD_ADDR_OWVAR 42
56057: PUSH
56058: LD_INT 1
56060: ST_TO_ADDR
56061: GO 56656
56063: LD_INT 3
56065: DOUBLE
56066: EQUAL
56067: IFTRUE 56071
56069: GO 56082
56071: POP
// bc_type := b_lab ; 4 .. 9 :
56072: LD_ADDR_OWVAR 42
56076: PUSH
56077: LD_INT 6
56079: ST_TO_ADDR
56080: GO 56656
56082: LD_INT 4
56084: DOUBLE
56085: GREATEREQUAL
56086: IFFALSE 56094
56088: LD_INT 9
56090: DOUBLE
56091: LESSEQUAL
56092: IFTRUE 56096
56094: GO 56148
56096: POP
// begin bc_type := b_lab_half ;
56097: LD_ADDR_OWVAR 42
56101: PUSH
56102: LD_INT 7
56104: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
56105: LD_ADDR_OWVAR 44
56109: PUSH
56110: LD_INT 10
56112: PUSH
56113: LD_INT 11
56115: PUSH
56116: LD_INT 12
56118: PUSH
56119: LD_INT 15
56121: PUSH
56122: LD_INT 14
56124: PUSH
56125: LD_INT 13
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: PUSH
56136: LD_VAR 0 2
56140: PUSH
56141: LD_INT 3
56143: MINUS
56144: ARRAY
56145: ST_TO_ADDR
// end ; 10 .. 13 :
56146: GO 56656
56148: LD_INT 10
56150: DOUBLE
56151: GREATEREQUAL
56152: IFFALSE 56160
56154: LD_INT 13
56156: DOUBLE
56157: LESSEQUAL
56158: IFTRUE 56162
56160: GO 56239
56162: POP
// begin bc_type := b_lab_full ;
56163: LD_ADDR_OWVAR 42
56167: PUSH
56168: LD_INT 8
56170: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
56171: LD_ADDR_OWVAR 44
56175: PUSH
56176: LD_INT 10
56178: PUSH
56179: LD_INT 12
56181: PUSH
56182: LD_INT 14
56184: PUSH
56185: LD_INT 13
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: PUSH
56194: LD_VAR 0 2
56198: PUSH
56199: LD_INT 9
56201: MINUS
56202: ARRAY
56203: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
56204: LD_ADDR_OWVAR 45
56208: PUSH
56209: LD_INT 11
56211: PUSH
56212: LD_INT 15
56214: PUSH
56215: LD_INT 12
56217: PUSH
56218: LD_INT 15
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: PUSH
56227: LD_VAR 0 2
56231: PUSH
56232: LD_INT 9
56234: MINUS
56235: ARRAY
56236: ST_TO_ADDR
// end ; 14 :
56237: GO 56656
56239: LD_INT 14
56241: DOUBLE
56242: EQUAL
56243: IFTRUE 56247
56245: GO 56258
56247: POP
// bc_type := b_workshop ; 15 :
56248: LD_ADDR_OWVAR 42
56252: PUSH
56253: LD_INT 2
56255: ST_TO_ADDR
56256: GO 56656
56258: LD_INT 15
56260: DOUBLE
56261: EQUAL
56262: IFTRUE 56266
56264: GO 56277
56266: POP
// bc_type := b_factory ; 16 :
56267: LD_ADDR_OWVAR 42
56271: PUSH
56272: LD_INT 3
56274: ST_TO_ADDR
56275: GO 56656
56277: LD_INT 16
56279: DOUBLE
56280: EQUAL
56281: IFTRUE 56285
56283: GO 56296
56285: POP
// bc_type := b_ext_gun ; 17 :
56286: LD_ADDR_OWVAR 42
56290: PUSH
56291: LD_INT 17
56293: ST_TO_ADDR
56294: GO 56656
56296: LD_INT 17
56298: DOUBLE
56299: EQUAL
56300: IFTRUE 56304
56302: GO 56332
56304: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
56305: LD_ADDR_OWVAR 42
56309: PUSH
56310: LD_INT 19
56312: PUSH
56313: LD_INT 23
56315: PUSH
56316: LD_INT 19
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: LIST
56323: PUSH
56324: LD_VAR 0 1
56328: ARRAY
56329: ST_TO_ADDR
56330: GO 56656
56332: LD_INT 18
56334: DOUBLE
56335: EQUAL
56336: IFTRUE 56340
56338: GO 56351
56340: POP
// bc_type := b_ext_radar ; 19 :
56341: LD_ADDR_OWVAR 42
56345: PUSH
56346: LD_INT 20
56348: ST_TO_ADDR
56349: GO 56656
56351: LD_INT 19
56353: DOUBLE
56354: EQUAL
56355: IFTRUE 56359
56357: GO 56370
56359: POP
// bc_type := b_ext_radio ; 20 :
56360: LD_ADDR_OWVAR 42
56364: PUSH
56365: LD_INT 22
56367: ST_TO_ADDR
56368: GO 56656
56370: LD_INT 20
56372: DOUBLE
56373: EQUAL
56374: IFTRUE 56378
56376: GO 56389
56378: POP
// bc_type := b_ext_siberium ; 21 :
56379: LD_ADDR_OWVAR 42
56383: PUSH
56384: LD_INT 21
56386: ST_TO_ADDR
56387: GO 56656
56389: LD_INT 21
56391: DOUBLE
56392: EQUAL
56393: IFTRUE 56397
56395: GO 56408
56397: POP
// bc_type := b_ext_computer ; 22 :
56398: LD_ADDR_OWVAR 42
56402: PUSH
56403: LD_INT 24
56405: ST_TO_ADDR
56406: GO 56656
56408: LD_INT 22
56410: DOUBLE
56411: EQUAL
56412: IFTRUE 56416
56414: GO 56427
56416: POP
// bc_type := b_ext_track ; 23 :
56417: LD_ADDR_OWVAR 42
56421: PUSH
56422: LD_INT 16
56424: ST_TO_ADDR
56425: GO 56656
56427: LD_INT 23
56429: DOUBLE
56430: EQUAL
56431: IFTRUE 56435
56433: GO 56446
56435: POP
// bc_type := b_ext_laser ; 24 :
56436: LD_ADDR_OWVAR 42
56440: PUSH
56441: LD_INT 25
56443: ST_TO_ADDR
56444: GO 56656
56446: LD_INT 24
56448: DOUBLE
56449: EQUAL
56450: IFTRUE 56454
56452: GO 56465
56454: POP
// bc_type := b_control_tower ; 25 :
56455: LD_ADDR_OWVAR 42
56459: PUSH
56460: LD_INT 36
56462: ST_TO_ADDR
56463: GO 56656
56465: LD_INT 25
56467: DOUBLE
56468: EQUAL
56469: IFTRUE 56473
56471: GO 56484
56473: POP
// bc_type := b_breastwork ; 26 :
56474: LD_ADDR_OWVAR 42
56478: PUSH
56479: LD_INT 31
56481: ST_TO_ADDR
56482: GO 56656
56484: LD_INT 26
56486: DOUBLE
56487: EQUAL
56488: IFTRUE 56492
56490: GO 56503
56492: POP
// bc_type := b_bunker ; 27 :
56493: LD_ADDR_OWVAR 42
56497: PUSH
56498: LD_INT 32
56500: ST_TO_ADDR
56501: GO 56656
56503: LD_INT 27
56505: DOUBLE
56506: EQUAL
56507: IFTRUE 56511
56509: GO 56522
56511: POP
// bc_type := b_turret ; 28 :
56512: LD_ADDR_OWVAR 42
56516: PUSH
56517: LD_INT 33
56519: ST_TO_ADDR
56520: GO 56656
56522: LD_INT 28
56524: DOUBLE
56525: EQUAL
56526: IFTRUE 56530
56528: GO 56541
56530: POP
// bc_type := b_armoury ; 29 :
56531: LD_ADDR_OWVAR 42
56535: PUSH
56536: LD_INT 4
56538: ST_TO_ADDR
56539: GO 56656
56541: LD_INT 29
56543: DOUBLE
56544: EQUAL
56545: IFTRUE 56549
56547: GO 56560
56549: POP
// bc_type := b_barracks ; 30 :
56550: LD_ADDR_OWVAR 42
56554: PUSH
56555: LD_INT 5
56557: ST_TO_ADDR
56558: GO 56656
56560: LD_INT 30
56562: DOUBLE
56563: EQUAL
56564: IFTRUE 56568
56566: GO 56579
56568: POP
// bc_type := b_solar_power ; 31 :
56569: LD_ADDR_OWVAR 42
56573: PUSH
56574: LD_INT 27
56576: ST_TO_ADDR
56577: GO 56656
56579: LD_INT 31
56581: DOUBLE
56582: EQUAL
56583: IFTRUE 56587
56585: GO 56598
56587: POP
// bc_type := b_oil_power ; 32 :
56588: LD_ADDR_OWVAR 42
56592: PUSH
56593: LD_INT 26
56595: ST_TO_ADDR
56596: GO 56656
56598: LD_INT 32
56600: DOUBLE
56601: EQUAL
56602: IFTRUE 56606
56604: GO 56617
56606: POP
// bc_type := b_siberite_power ; 33 :
56607: LD_ADDR_OWVAR 42
56611: PUSH
56612: LD_INT 28
56614: ST_TO_ADDR
56615: GO 56656
56617: LD_INT 33
56619: DOUBLE
56620: EQUAL
56621: IFTRUE 56625
56623: GO 56636
56625: POP
// bc_type := b_oil_mine ; 34 :
56626: LD_ADDR_OWVAR 42
56630: PUSH
56631: LD_INT 29
56633: ST_TO_ADDR
56634: GO 56656
56636: LD_INT 34
56638: DOUBLE
56639: EQUAL
56640: IFTRUE 56644
56642: GO 56655
56644: POP
// bc_type := b_siberite_mine ; end ;
56645: LD_ADDR_OWVAR 42
56649: PUSH
56650: LD_INT 30
56652: ST_TO_ADDR
56653: GO 56656
56655: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
56656: LD_ADDR_VAR 0 8
56660: PUSH
56661: LD_VAR 0 5
56665: PPUSH
56666: LD_VAR 0 6
56670: PPUSH
56671: LD_VAR 0 3
56675: PPUSH
56676: CALL_OW 47
56680: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
56681: LD_OWVAR 42
56685: PUSH
56686: LD_INT 32
56688: PUSH
56689: LD_INT 33
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: IN
56696: IFFALSE 56712
// PlaceWeaponTurret ( b , weapon ) ;
56698: LD_VAR 0 8
56702: PPUSH
56703: LD_VAR 0 4
56707: PPUSH
56708: CALL_OW 431
// end ;
56712: LD_VAR 0 7
56716: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
56717: LD_INT 0
56719: PPUSH
56720: PPUSH
56721: PPUSH
56722: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56723: LD_ADDR_VAR 0 4
56727: PUSH
56728: LD_INT 22
56730: PUSH
56731: LD_OWVAR 2
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: LD_INT 30
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 30
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PPUSH
56772: CALL_OW 69
56776: ST_TO_ADDR
// if not tmp then
56777: LD_VAR 0 4
56781: NOT
56782: IFFALSE 56786
// exit ;
56784: GO 56845
// for i in tmp do
56786: LD_ADDR_VAR 0 2
56790: PUSH
56791: LD_VAR 0 4
56795: PUSH
56796: FOR_IN
56797: IFFALSE 56843
// for j = 1 to 3 do
56799: LD_ADDR_VAR 0 3
56803: PUSH
56804: DOUBLE
56805: LD_INT 1
56807: DEC
56808: ST_TO_ADDR
56809: LD_INT 3
56811: PUSH
56812: FOR_TO
56813: IFFALSE 56839
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
56815: LD_VAR 0 2
56819: PPUSH
56820: CALL_OW 274
56824: PPUSH
56825: LD_VAR 0 3
56829: PPUSH
56830: LD_INT 99999
56832: PPUSH
56833: CALL_OW 277
56837: GO 56812
56839: POP
56840: POP
56841: GO 56796
56843: POP
56844: POP
// end ;
56845: LD_VAR 0 1
56849: RET
// export function hHackSetLevel10 ; var i , j ; begin
56850: LD_INT 0
56852: PPUSH
56853: PPUSH
56854: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
56855: LD_ADDR_VAR 0 2
56859: PUSH
56860: LD_INT 21
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PPUSH
56870: CALL_OW 69
56874: PUSH
56875: FOR_IN
56876: IFFALSE 56928
// if IsSelected ( i ) then
56878: LD_VAR 0 2
56882: PPUSH
56883: CALL_OW 306
56887: IFFALSE 56926
// begin for j := 1 to 4 do
56889: LD_ADDR_VAR 0 3
56893: PUSH
56894: DOUBLE
56895: LD_INT 1
56897: DEC
56898: ST_TO_ADDR
56899: LD_INT 4
56901: PUSH
56902: FOR_TO
56903: IFFALSE 56924
// SetSkill ( i , j , 10 ) ;
56905: LD_VAR 0 2
56909: PPUSH
56910: LD_VAR 0 3
56914: PPUSH
56915: LD_INT 10
56917: PPUSH
56918: CALL_OW 237
56922: GO 56902
56924: POP
56925: POP
// end ;
56926: GO 56875
56928: POP
56929: POP
// end ;
56930: LD_VAR 0 1
56934: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
56935: LD_INT 0
56937: PPUSH
56938: PPUSH
56939: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
56940: LD_ADDR_VAR 0 2
56944: PUSH
56945: LD_INT 22
56947: PUSH
56948: LD_OWVAR 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 21
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PPUSH
56971: CALL_OW 69
56975: PUSH
56976: FOR_IN
56977: IFFALSE 57018
// begin for j := 1 to 4 do
56979: LD_ADDR_VAR 0 3
56983: PUSH
56984: DOUBLE
56985: LD_INT 1
56987: DEC
56988: ST_TO_ADDR
56989: LD_INT 4
56991: PUSH
56992: FOR_TO
56993: IFFALSE 57014
// SetSkill ( i , j , 10 ) ;
56995: LD_VAR 0 2
56999: PPUSH
57000: LD_VAR 0 3
57004: PPUSH
57005: LD_INT 10
57007: PPUSH
57008: CALL_OW 237
57012: GO 56992
57014: POP
57015: POP
// end ;
57016: GO 56976
57018: POP
57019: POP
// end ;
57020: LD_VAR 0 1
57024: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
57025: LD_INT 0
57027: PPUSH
// uc_side := your_side ;
57028: LD_ADDR_OWVAR 20
57032: PUSH
57033: LD_OWVAR 2
57037: ST_TO_ADDR
// uc_nation := nation ;
57038: LD_ADDR_OWVAR 21
57042: PUSH
57043: LD_VAR 0 1
57047: ST_TO_ADDR
// InitHc ;
57048: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
57052: LD_INT 0
57054: PPUSH
57055: LD_VAR 0 2
57059: PPUSH
57060: LD_VAR 0 3
57064: PPUSH
57065: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
57069: LD_VAR 0 4
57073: PPUSH
57074: LD_VAR 0 5
57078: PPUSH
57079: CALL_OW 428
57083: PUSH
57084: LD_INT 0
57086: EQUAL
57087: IFFALSE 57111
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
57089: CALL_OW 44
57093: PPUSH
57094: LD_VAR 0 4
57098: PPUSH
57099: LD_VAR 0 5
57103: PPUSH
57104: LD_INT 1
57106: PPUSH
57107: CALL_OW 48
// end ;
57111: LD_VAR 0 6
57115: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
57116: LD_INT 0
57118: PPUSH
57119: PPUSH
// uc_side := your_side ;
57120: LD_ADDR_OWVAR 20
57124: PUSH
57125: LD_OWVAR 2
57129: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
57130: LD_VAR 0 1
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 3
57143: PUSH
57144: LD_INT 4
57146: PUSH
57147: LD_INT 5
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: IN
57157: IFFALSE 57169
// uc_nation := nation_american else
57159: LD_ADDR_OWVAR 21
57163: PUSH
57164: LD_INT 1
57166: ST_TO_ADDR
57167: GO 57212
// if chassis in [ 11 , 12 , 13 , 14 ] then
57169: LD_VAR 0 1
57173: PUSH
57174: LD_INT 11
57176: PUSH
57177: LD_INT 12
57179: PUSH
57180: LD_INT 13
57182: PUSH
57183: LD_INT 14
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: IN
57192: IFFALSE 57204
// uc_nation := nation_arabian else
57194: LD_ADDR_OWVAR 21
57198: PUSH
57199: LD_INT 2
57201: ST_TO_ADDR
57202: GO 57212
// uc_nation := nation_russian ;
57204: LD_ADDR_OWVAR 21
57208: PUSH
57209: LD_INT 3
57211: ST_TO_ADDR
// vc_chassis := chassis ;
57212: LD_ADDR_OWVAR 37
57216: PUSH
57217: LD_VAR 0 1
57221: ST_TO_ADDR
// vc_engine := engine ;
57222: LD_ADDR_OWVAR 39
57226: PUSH
57227: LD_VAR 0 2
57231: ST_TO_ADDR
// vc_control := control ;
57232: LD_ADDR_OWVAR 38
57236: PUSH
57237: LD_VAR 0 3
57241: ST_TO_ADDR
// vc_weapon := weapon ;
57242: LD_ADDR_OWVAR 40
57246: PUSH
57247: LD_VAR 0 4
57251: ST_TO_ADDR
// un := CreateVehicle ;
57252: LD_ADDR_VAR 0 8
57256: PUSH
57257: CALL_OW 45
57261: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
57262: LD_VAR 0 8
57266: PPUSH
57267: LD_INT 0
57269: PPUSH
57270: LD_INT 5
57272: PPUSH
57273: CALL_OW 12
57277: PPUSH
57278: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
57282: LD_VAR 0 8
57286: PPUSH
57287: LD_VAR 0 5
57291: PPUSH
57292: LD_VAR 0 6
57296: PPUSH
57297: LD_INT 1
57299: PPUSH
57300: CALL_OW 48
// end ;
57304: LD_VAR 0 7
57308: RET
// export hInvincible ; every 1 do
57309: GO 57311
57311: DISABLE
// hInvincible := [ ] ;
57312: LD_ADDR_EXP 93
57316: PUSH
57317: EMPTY
57318: ST_TO_ADDR
57319: END
// every 10 do var i ;
57320: GO 57322
57322: DISABLE
57323: LD_INT 0
57325: PPUSH
// begin enable ;
57326: ENABLE
// if not hInvincible then
57327: LD_EXP 93
57331: NOT
57332: IFFALSE 57336
// exit ;
57334: GO 57380
// for i in hInvincible do
57336: LD_ADDR_VAR 0 1
57340: PUSH
57341: LD_EXP 93
57345: PUSH
57346: FOR_IN
57347: IFFALSE 57378
// if GetLives ( i ) < 1000 then
57349: LD_VAR 0 1
57353: PPUSH
57354: CALL_OW 256
57358: PUSH
57359: LD_INT 1000
57361: LESS
57362: IFFALSE 57376
// SetLives ( i , 1000 ) ;
57364: LD_VAR 0 1
57368: PPUSH
57369: LD_INT 1000
57371: PPUSH
57372: CALL_OW 234
57376: GO 57346
57378: POP
57379: POP
// end ;
57380: PPOPN 1
57382: END
// export function hHackInvincible ; var i ; begin
57383: LD_INT 0
57385: PPUSH
57386: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
57387: LD_ADDR_VAR 0 2
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 21
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 21
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: PPUSH
57420: CALL_OW 69
57424: PUSH
57425: FOR_IN
57426: IFFALSE 57487
// if IsSelected ( i ) then
57428: LD_VAR 0 2
57432: PPUSH
57433: CALL_OW 306
57437: IFFALSE 57485
// begin if i in hInvincible then
57439: LD_VAR 0 2
57443: PUSH
57444: LD_EXP 93
57448: IN
57449: IFFALSE 57469
// hInvincible := hInvincible diff i else
57451: LD_ADDR_EXP 93
57455: PUSH
57456: LD_EXP 93
57460: PUSH
57461: LD_VAR 0 2
57465: DIFF
57466: ST_TO_ADDR
57467: GO 57485
// hInvincible := hInvincible union i ;
57469: LD_ADDR_EXP 93
57473: PUSH
57474: LD_EXP 93
57478: PUSH
57479: LD_VAR 0 2
57483: UNION
57484: ST_TO_ADDR
// end ;
57485: GO 57425
57487: POP
57488: POP
// end ;
57489: LD_VAR 0 1
57493: RET
// export function hHackInvisible ; var i , j ; begin
57494: LD_INT 0
57496: PPUSH
57497: PPUSH
57498: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
57499: LD_ADDR_VAR 0 2
57503: PUSH
57504: LD_INT 21
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PPUSH
57514: CALL_OW 69
57518: PUSH
57519: FOR_IN
57520: IFFALSE 57544
// if IsSelected ( i ) then
57522: LD_VAR 0 2
57526: PPUSH
57527: CALL_OW 306
57531: IFFALSE 57542
// ComForceInvisible ( i ) ;
57533: LD_VAR 0 2
57537: PPUSH
57538: CALL_OW 496
57542: GO 57519
57544: POP
57545: POP
// end ;
57546: LD_VAR 0 1
57550: RET
// export function hHackChangeYourSide ; begin
57551: LD_INT 0
57553: PPUSH
// if your_side = 8 then
57554: LD_OWVAR 2
57558: PUSH
57559: LD_INT 8
57561: EQUAL
57562: IFFALSE 57574
// your_side := 0 else
57564: LD_ADDR_OWVAR 2
57568: PUSH
57569: LD_INT 0
57571: ST_TO_ADDR
57572: GO 57588
// your_side := your_side + 1 ;
57574: LD_ADDR_OWVAR 2
57578: PUSH
57579: LD_OWVAR 2
57583: PUSH
57584: LD_INT 1
57586: PLUS
57587: ST_TO_ADDR
// end ;
57588: LD_VAR 0 1
57592: RET
// export function hHackChangeUnitSide ; var i , j ; begin
57593: LD_INT 0
57595: PPUSH
57596: PPUSH
57597: PPUSH
// for i in all_units do
57598: LD_ADDR_VAR 0 2
57602: PUSH
57603: LD_OWVAR 3
57607: PUSH
57608: FOR_IN
57609: IFFALSE 57687
// if IsSelected ( i ) then
57611: LD_VAR 0 2
57615: PPUSH
57616: CALL_OW 306
57620: IFFALSE 57685
// begin j := GetSide ( i ) ;
57622: LD_ADDR_VAR 0 3
57626: PUSH
57627: LD_VAR 0 2
57631: PPUSH
57632: CALL_OW 255
57636: ST_TO_ADDR
// if j = 8 then
57637: LD_VAR 0 3
57641: PUSH
57642: LD_INT 8
57644: EQUAL
57645: IFFALSE 57657
// j := 0 else
57647: LD_ADDR_VAR 0 3
57651: PUSH
57652: LD_INT 0
57654: ST_TO_ADDR
57655: GO 57671
// j := j + 1 ;
57657: LD_ADDR_VAR 0 3
57661: PUSH
57662: LD_VAR 0 3
57666: PUSH
57667: LD_INT 1
57669: PLUS
57670: ST_TO_ADDR
// SetSide ( i , j ) ;
57671: LD_VAR 0 2
57675: PPUSH
57676: LD_VAR 0 3
57680: PPUSH
57681: CALL_OW 235
// end ;
57685: GO 57608
57687: POP
57688: POP
// end ;
57689: LD_VAR 0 1
57693: RET
// export function hHackFog ; begin
57694: LD_INT 0
57696: PPUSH
// FogOff ( true ) ;
57697: LD_INT 1
57699: PPUSH
57700: CALL_OW 344
// end ;
57704: LD_VAR 0 1
57708: RET
// export function hHackTeleport ( unit , x , y ) ; begin
57709: LD_INT 0
57711: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
57712: LD_VAR 0 1
57716: PPUSH
57717: LD_VAR 0 2
57721: PPUSH
57722: LD_VAR 0 3
57726: PPUSH
57727: LD_INT 1
57729: PPUSH
57730: LD_INT 1
57732: PPUSH
57733: CALL_OW 483
// CenterOnXY ( x , y ) ;
57737: LD_VAR 0 2
57741: PPUSH
57742: LD_VAR 0 3
57746: PPUSH
57747: CALL_OW 84
// end ; end_of_file end_of_file
57751: LD_VAR 0 4
57755: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57756: LD_VAR 0 1
57760: PUSH
57761: LD_INT 200
57763: DOUBLE
57764: GREATEREQUAL
57765: IFFALSE 57773
57767: LD_INT 299
57769: DOUBLE
57770: LESSEQUAL
57771: IFTRUE 57775
57773: GO 57807
57775: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57776: LD_VAR 0 1
57780: PPUSH
57781: LD_VAR 0 2
57785: PPUSH
57786: LD_VAR 0 3
57790: PPUSH
57791: LD_VAR 0 4
57795: PPUSH
57796: LD_VAR 0 5
57800: PPUSH
57801: CALL 40701 0 5
57805: GO 57884
57807: LD_INT 300
57809: DOUBLE
57810: GREATEREQUAL
57811: IFFALSE 57819
57813: LD_INT 399
57815: DOUBLE
57816: LESSEQUAL
57817: IFTRUE 57821
57819: GO 57883
57821: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57822: LD_VAR 0 1
57826: PPUSH
57827: LD_VAR 0 2
57831: PPUSH
57832: LD_VAR 0 3
57836: PPUSH
57837: LD_VAR 0 4
57841: PPUSH
57842: LD_VAR 0 5
57846: PPUSH
57847: LD_VAR 0 6
57851: PPUSH
57852: LD_VAR 0 7
57856: PPUSH
57857: LD_VAR 0 8
57861: PPUSH
57862: LD_VAR 0 9
57866: PPUSH
57867: LD_VAR 0 10
57871: PPUSH
57872: LD_VAR 0 11
57876: PPUSH
57877: CALL 55776 0 11
57881: GO 57884
57883: POP
// end ;
57884: PPOPN 11
57886: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57887: LD_VAR 0 1
57891: PPUSH
57892: LD_VAR 0 2
57896: PPUSH
57897: LD_VAR 0 3
57901: PPUSH
57902: LD_VAR 0 4
57906: PPUSH
57907: LD_VAR 0 5
57911: PPUSH
57912: CALL 40683 0 5
// end ; end_of_file
57916: PPOPN 5
57918: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
57919: LD_VAR 0 1
57923: PPUSH
57924: LD_VAR 0 2
57928: PPUSH
57929: LD_VAR 0 3
57933: PPUSH
57934: LD_VAR 0 4
57938: PPUSH
57939: LD_VAR 0 5
57943: PPUSH
57944: LD_VAR 0 6
57948: PPUSH
57949: CALL 44584 0 6
// end ;
57953: PPOPN 6
57955: END
