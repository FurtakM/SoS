// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 63 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareAlliance ;
  37: CALL 79 0 0
// PrepareRussian ;
  41: CALL 446 0 0
// Action ;
  45: CALL 2366 0 0
// if debug then
  49: LD_EXP 1
  53: IFFALSE 62
// FogOff ( 7 ) ;
  55: LD_INT 7
  57: PPUSH
  58: CALL_OW 344
// end ;
  62: END
// export debug ; export function Init ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 1
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// end ; end_of_file
  74: LD_VAR 0 1
  78: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  79: LD_INT 0
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp := [ ] ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: EMPTY
  90: ST_TO_ADDR
// uc_side := 7 ;
  91: LD_ADDR_OWVAR 20
  95: PUSH
  96: LD_INT 7
  98: ST_TO_ADDR
// uc_nation := 1 ;
  99: LD_ADDR_OWVAR 21
 103: PUSH
 104: LD_INT 1
 106: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 107: LD_INT 5
 109: PPUSH
 110: LD_INT 3
 112: PPUSH
 113: LD_INT 3
 115: PPUSH
 116: LD_INT 99
 118: PPUSH
 119: LD_INT 100
 121: PPUSH
 122: CALL 7785 0 5
// allianceHack := CreateVehicle ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: CALL_OW 45
 135: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 136: LD_EXP 2
 140: PPUSH
 141: LD_INT 7
 143: PPUSH
 144: LD_INT 0
 146: PPUSH
 147: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 151: LD_INT 5
 153: PPUSH
 154: LD_INT 3
 156: PPUSH
 157: LD_INT 3
 159: PPUSH
 160: LD_INT 10
 162: PPUSH
 163: LD_INT 100
 165: PPUSH
 166: CALL 7785 0 5
// for i := 1 to 2 do
 170: LD_ADDR_VAR 0 2
 174: PUSH
 175: DOUBLE
 176: LD_INT 1
 178: DEC
 179: ST_TO_ADDR
 180: LD_INT 2
 182: PUSH
 183: FOR_TO
 184: IFFALSE 203
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 186: CALL_OW 45
 190: PPUSH
 191: LD_INT 7
 193: PPUSH
 194: LD_INT 0
 196: PPUSH
 197: CALL_OW 49
 201: GO 183
 203: POP
 204: POP
// uc_side := 4 ;
 205: LD_ADDR_OWVAR 20
 209: PUSH
 210: LD_INT 4
 212: ST_TO_ADDR
// uc_nation := 1 ;
 213: LD_ADDR_OWVAR 21
 217: PUSH
 218: LD_INT 1
 220: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 9
 226: PPUSH
 227: CALL_OW 383
// allianceMechanic := CreateHuman ;
 231: LD_ADDR_EXP 3
 235: PUSH
 236: CALL_OW 44
 240: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 241: LD_EXP 3
 245: PPUSH
 246: LD_INT 96
 248: PPUSH
 249: CALL_OW 52
// end ;
 253: LD_VAR 0 1
 257: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 258: LD_INT 0
 260: PPUSH
 261: PPUSH
 262: PPUSH
// uc_side := 7 ;
 263: LD_ADDR_OWVAR 20
 267: PUSH
 268: LD_INT 7
 270: ST_TO_ADDR
// uc_nation := 1 ;
 271: LD_ADDR_OWVAR 21
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 3
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: LD_OWVAR 67
 307: ARRAY
 308: PUSH
 309: FOR_TO
 310: IFFALSE 380
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 312: LD_INT 5
 314: PPUSH
 315: LD_INT 3
 317: PPUSH
 318: LD_INT 3
 320: PPUSH
 321: LD_INT 7
 323: PPUSH
 324: LD_INT 100
 326: PPUSH
 327: CALL 7785 0 5
// un := CreateVehicle ;
 331: LD_ADDR_VAR 0 3
 335: PUSH
 336: CALL_OW 45
 340: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 341: LD_VAR 0 3
 345: PPUSH
 346: LD_INT 7
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 356: LD_VAR 0 3
 360: PPUSH
 361: LD_INT 67
 363: PPUSH
 364: LD_INT 95
 366: PPUSH
 367: CALL_OW 111
// wait ( 0 0$2 ) ;
 371: LD_INT 70
 373: PPUSH
 374: CALL_OW 67
// end ;
 378: GO 309
 380: POP
 381: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 3
 387: PPUSH
 388: LD_INT 3
 390: PPUSH
 391: LD_INT 11
 393: PPUSH
 394: LD_INT 100
 396: PPUSH
 397: CALL 7785 0 5
// un := CreateVehicle ;
 401: LD_ADDR_VAR 0 3
 405: PUSH
 406: CALL_OW 45
 410: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 411: LD_VAR 0 3
 415: PPUSH
 416: LD_INT 7
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 426: LD_VAR 0 3
 430: PPUSH
 431: LD_INT 67
 433: PPUSH
 434: LD_INT 95
 436: PPUSH
 437: CALL_OW 111
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
 450: PPUSH
// uc_side := 3 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 3
 458: ST_TO_ADDR
// uc_nation := 3 ;
 459: LD_ADDR_OWVAR 21
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 467: LD_INT 14
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 1
 477: PPUSH
 478: LD_INT 50000
 480: PPUSH
 481: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 485: LD_INT 14
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 3
 495: PPUSH
 496: LD_INT 5000
 498: PPUSH
 499: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 503: LD_INT 45
 505: PPUSH
 506: LD_INT 132
 508: PPUSH
 509: LD_INT 89
 511: PPUSH
 512: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 516: LD_ADDR_VAR 0 2
 520: PUSH
 521: LD_INT 21
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 570
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 539: LD_VAR 0 2
 543: PPUSH
 544: LD_INT 6
 546: PUSH
 547: LD_INT 8
 549: PUSH
 550: LD_INT 10
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: PPUSH
 564: CALL_OW 241
 568: GO 536
 570: POP
 571: POP
// for i := 1 to 4 do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_INT 4
 584: PUSH
 585: FOR_TO
 586: IFFALSE 612
// begin PrepareMechanic ( false , 9 ) ;
 588: LD_INT 0
 590: PPUSH
 591: LD_INT 9
 593: PPUSH
 594: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 598: CALL_OW 44
 602: PPUSH
 603: LD_INT 50
 605: PPUSH
 606: CALL_OW 52
// end ;
 610: GO 585
 612: POP
 613: POP
// ruGuard1 := [ ] ;
 614: LD_ADDR_EXP 4
 618: PUSH
 619: EMPTY
 620: ST_TO_ADDR
// ruGuard2 := [ ] ;
 621: LD_ADDR_EXP 5
 625: PUSH
 626: EMPTY
 627: ST_TO_ADDR
// ruGuard3 := [ ] ;
 628: LD_ADDR_EXP 6
 632: PUSH
 633: EMPTY
 634: ST_TO_ADDR
// ruForces := [ ] ;
 635: LD_ADDR_EXP 7
 639: PUSH
 640: EMPTY
 641: ST_TO_ADDR
// ruEng := [ ] ;
 642: LD_ADDR_EXP 8
 646: PUSH
 647: EMPTY
 648: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 4
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 6
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: LD_OWVAR 67
 677: ARRAY
 678: PUSH
 679: FOR_TO
 680: IFFALSE 736
// begin PrepareEngineer ( false , 8 ) ;
 682: LD_INT 0
 684: PPUSH
 685: LD_INT 8
 687: PPUSH
 688: CALL_OW 382
// un := CreateHuman ;
 692: LD_ADDR_VAR 0 3
 696: PUSH
 697: CALL_OW 44
 701: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 702: LD_VAR 0 3
 706: PPUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 714: LD_ADDR_EXP 8
 718: PUSH
 719: LD_EXP 8
 723: PPUSH
 724: LD_VAR 0 3
 728: PPUSH
 729: CALL 40238 0 2
 733: ST_TO_ADDR
// end ;
 734: GO 679
 736: POP
 737: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: DOUBLE
 744: LD_INT 1
 746: DEC
 747: ST_TO_ADDR
 748: LD_INT 5
 750: PUSH
 751: LD_INT 6
 753: PUSH
 754: LD_INT 7
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_OWVAR 67
 766: ARRAY
 767: PUSH
 768: FOR_TO
 769: IFFALSE 879
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 771: LD_INT 24
 773: PPUSH
 774: LD_INT 3
 776: PPUSH
 777: LD_INT 3
 779: PPUSH
 780: LD_INT 46
 782: PUSH
 783: LD_INT 45
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 2
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 100
 806: PPUSH
 807: CALL 7785 0 5
// un := CreateVehicle ;
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: CALL_OW 45
 820: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 821: LD_VAR 0 3
 825: PPUSH
 826: LD_INT 3
 828: PPUSH
 829: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 833: LD_VAR 0 3
 837: PPUSH
 838: LD_INT 4
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 848: LD_ADDR_EXP 4
 852: PUSH
 853: LD_EXP 4
 857: PPUSH
 858: LD_EXP 4
 862: PUSH
 863: LD_INT 1
 865: PLUS
 866: PPUSH
 867: LD_VAR 0 3
 871: PPUSH
 872: CALL_OW 1
 876: ST_TO_ADDR
// end ;
 877: GO 768
 879: POP
 880: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: DOUBLE
 887: LD_INT 1
 889: DEC
 890: ST_TO_ADDR
 891: LD_INT 4
 893: PUSH
 894: LD_INT 4
 896: PUSH
 897: LD_INT 5
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: LD_OWVAR 67
 909: ARRAY
 910: PUSH
 911: FOR_TO
 912: IFFALSE 1022
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 914: LD_INT 24
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 3
 922: PPUSH
 923: LD_INT 46
 925: PUSH
 926: LD_INT 45
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_VAR 0 2
 937: PUSH
 938: LD_INT 2
 940: MOD
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: PPUSH
 947: LD_INT 100
 949: PPUSH
 950: CALL 7785 0 5
// un := CreateVehicle ;
 954: LD_ADDR_VAR 0 3
 958: PUSH
 959: CALL_OW 45
 963: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_INT 4
 971: PPUSH
 972: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 991: LD_ADDR_EXP 5
 995: PUSH
 996: LD_EXP 5
1000: PPUSH
1001: LD_EXP 5
1005: PUSH
1006: LD_INT 1
1008: PLUS
1009: PPUSH
1010: LD_VAR 0 3
1014: PPUSH
1015: CALL_OW 1
1019: ST_TO_ADDR
// end ;
1020: GO 911
1022: POP
1023: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1024: LD_ADDR_VAR 0 2
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 4
1036: PUSH
1037: LD_INT 4
1039: PUSH
1040: LD_INT 5
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: LD_OWVAR 67
1052: ARRAY
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1165
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1057: LD_INT 24
1059: PPUSH
1060: LD_INT 3
1062: PPUSH
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 46
1068: PUSH
1069: LD_INT 45
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: MOD
1084: PUSH
1085: LD_INT 1
1087: PLUS
1088: ARRAY
1089: PPUSH
1090: LD_INT 100
1092: PPUSH
1093: CALL 7785 0 5
// un := CreateVehicle ;
1097: LD_ADDR_VAR 0 3
1101: PUSH
1102: CALL_OW 45
1106: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1107: LD_VAR 0 3
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_INT 6
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1134: LD_ADDR_EXP 6
1138: PUSH
1139: LD_EXP 6
1143: PPUSH
1144: LD_EXP 6
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: PPUSH
1153: LD_VAR 0 3
1157: PPUSH
1158: CALL_OW 1
1162: ST_TO_ADDR
// end ;
1163: GO 1054
1165: POP
1166: POP
// for i := 1 to 2 do
1167: LD_ADDR_VAR 0 2
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_INT 2
1179: PUSH
1180: FOR_TO
1181: IFFALSE 1229
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1183: LD_INT 22
1185: PPUSH
1186: LD_INT 3
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 52
1194: PPUSH
1195: LD_INT 100
1197: PPUSH
1198: CALL 7785 0 5
// un := CreateVehicle ;
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: CALL_OW 45
1211: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1212: LD_VAR 0 3
1216: PPUSH
1217: LD_INT 9
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 49
// end ;
1227: GO 1180
1229: POP
1230: POP
// for i := 1 to 3 do
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: DOUBLE
1237: LD_INT 1
1239: DEC
1240: ST_TO_ADDR
1241: LD_INT 3
1243: PUSH
1244: FOR_TO
1245: IFFALSE 1282
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1247: LD_INT 0
1249: PPUSH
1250: LD_INT 9
1252: PPUSH
1253: LD_INT 8
1255: PPUSH
1256: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1260: CALL_OW 44
1264: PPUSH
1265: LD_INT 91
1267: PPUSH
1268: LD_INT 83
1270: PPUSH
1271: CALL_OW 428
1275: PPUSH
1276: CALL_OW 52
// end ;
1280: GO 1244
1282: POP
1283: POP
// end ;
1284: LD_VAR 0 1
1288: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1289: LD_EXP 8
1293: IFFALSE 1487
1295: GO 1297
1297: DISABLE
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// begin enable ;
1302: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1303: LD_ADDR_VAR 0 2
1307: PUSH
1308: LD_INT 10
1310: PPUSH
1311: LD_INT 21
1313: PUSH
1314: LD_INT 3
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 24
1326: PUSH
1327: LD_INT 1000
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PPUSH
1342: CALL_OW 70
1346: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1347: LD_VAR 0 2
1351: NOT
1352: PUSH
1353: LD_EXP 8
1357: PPUSH
1358: LD_INT 3
1360: PUSH
1361: LD_INT 54
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 72
1375: AND
1376: IFFALSE 1408
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1378: LD_EXP 8
1382: PPUSH
1383: LD_INT 3
1385: PUSH
1386: LD_INT 54
1388: PUSH
1389: EMPTY
1390: LIST
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PPUSH
1396: CALL_OW 72
1400: PPUSH
1401: LD_INT 14
1403: PPUSH
1404: CALL_OW 120
// if tmp then
1408: LD_VAR 0 2
1412: IFFALSE 1487
// begin for i in ruEng do
1414: LD_ADDR_VAR 0 1
1418: PUSH
1419: LD_EXP 8
1423: PUSH
1424: FOR_IN
1425: IFFALSE 1485
// if IsInUnit ( i ) then
1427: LD_VAR 0 1
1431: PPUSH
1432: CALL_OW 310
1436: IFFALSE 1449
// ComExitBuilding ( i ) else
1438: LD_VAR 0 1
1442: PPUSH
1443: CALL_OW 122
1447: GO 1483
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1449: LD_VAR 0 1
1453: PPUSH
1454: LD_VAR 0 1
1458: PPUSH
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL 8342 0 4
1474: PUSH
1475: LD_INT 1
1477: ARRAY
1478: PPUSH
1479: CALL_OW 130
1483: GO 1424
1485: POP
1486: POP
// end ; end ;
1487: PPOPN 2
1489: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1490: LD_EXP 7
1494: NOT
1495: IFFALSE 1561
1497: GO 1499
1499: DISABLE
1500: LD_INT 0
1502: PPUSH
1503: PPUSH
// begin enable ;
1504: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1505: LD_ADDR_VAR 0 1
1509: PUSH
1510: DOUBLE
1511: LD_INT 1
1513: DEC
1514: ST_TO_ADDR
1515: LD_INT 4
1517: PUSH
1518: LD_INT 5
1520: PUSH
1521: LD_INT 6
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_OWVAR 67
1533: ARRAY
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1559
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1538: LD_INT 50
1540: PPUSH
1541: LD_INT 24
1543: PPUSH
1544: LD_INT 3
1546: PPUSH
1547: LD_INT 3
1549: PPUSH
1550: LD_INT 46
1552: PPUSH
1553: CALL_OW 185
1557: GO 1535
1559: POP
1560: POP
// end ;
1561: PPOPN 2
1563: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1564: LD_EXP 7
1568: PUSH
1569: LD_INT 4
1571: PUSH
1572: LD_INT 5
1574: PUSH
1575: LD_INT 6
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: LD_OWVAR 67
1587: ARRAY
1588: GREATEREQUAL
1589: IFFALSE 1742
1591: GO 1593
1593: DISABLE
1594: LD_INT 0
1596: PPUSH
1597: PPUSH
// begin enable ;
1598: ENABLE
// tmp := ruForces ;
1599: LD_ADDR_VAR 0 2
1603: PUSH
1604: LD_EXP 7
1608: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1609: LD_INT 0
1611: PPUSH
1612: LD_INT 1
1614: PPUSH
1615: CALL_OW 12
1619: IFFALSE 1640
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 45
1628: PPUSH
1629: CALL_OW 120
// wait ( 0 0$20 ) ;
1633: LD_INT 700
1635: PPUSH
1636: CALL_OW 67
// end ; ruForces := [ ] ;
1640: LD_ADDR_EXP 7
1644: PUSH
1645: EMPTY
1646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1647: LD_INT 35
1649: PPUSH
1650: CALL_OW 67
// for i in tmp do
1654: LD_ADDR_VAR 0 1
1658: PUSH
1659: LD_VAR 0 2
1663: PUSH
1664: FOR_IN
1665: IFFALSE 1733
// if not IsOk ( i ) then
1667: LD_VAR 0 1
1671: PPUSH
1672: CALL_OW 302
1676: NOT
1677: IFFALSE 1697
// tmp := tmp diff i else
1679: LD_ADDR_VAR 0 2
1683: PUSH
1684: LD_VAR 0 2
1688: PUSH
1689: LD_VAR 0 1
1693: DIFF
1694: ST_TO_ADDR
1695: GO 1731
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1697: LD_VAR 0 1
1701: PPUSH
1702: LD_INT 81
1704: PUSH
1705: LD_INT 3
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PPUSH
1712: CALL_OW 69
1716: PPUSH
1717: LD_VAR 0 1
1721: PPUSH
1722: CALL_OW 74
1726: PPUSH
1727: CALL_OW 115
1731: GO 1664
1733: POP
1734: POP
// until not tmp ;
1735: LD_VAR 0 2
1739: NOT
1740: IFFALSE 1647
// end ;
1742: PPOPN 2
1744: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1745: LD_INT 22
1747: PUSH
1748: LD_INT 7
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 92
1757: PUSH
1758: LD_INT 62
1760: PUSH
1761: LD_INT 83
1763: PUSH
1764: LD_INT 8
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 69
1781: IFFALSE 1801
1783: GO 1785
1785: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1786: LD_EXP 4
1790: PPUSH
1791: LD_INT 69
1793: PPUSH
1794: LD_INT 100
1796: PPUSH
1797: CALL_OW 114
1801: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1802: LD_INT 22
1804: PUSH
1805: LD_INT 7
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 92
1814: PUSH
1815: LD_INT 85
1817: PUSH
1818: LD_INT 89
1820: PUSH
1821: LD_INT 8
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: CALL_OW 69
1838: IFFALSE 1858
1840: GO 1842
1842: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1843: LD_EXP 5
1847: PPUSH
1848: LD_INT 72
1850: PPUSH
1851: LD_INT 88
1853: PPUSH
1854: CALL_OW 114
1858: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1859: LD_INT 22
1861: PUSH
1862: LD_INT 7
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 92
1871: PUSH
1872: LD_INT 89
1874: PUSH
1875: LD_INT 13
1877: PUSH
1878: LD_INT 8
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: IFFALSE 1915
1897: GO 1899
1899: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1900: LD_EXP 6
1904: PPUSH
1905: LD_INT 107
1907: PPUSH
1908: LD_INT 26
1910: PPUSH
1911: CALL_OW 114
1915: END
// every 6 6$00 do var i , un , tmp ;
1916: GO 1918
1918: DISABLE
1919: LD_INT 0
1921: PPUSH
1922: PPUSH
1923: PPUSH
// begin enable ;
1924: ENABLE
// tmp := [ ] ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: EMPTY
1931: ST_TO_ADDR
// for i := 1 to 8 do
1932: LD_ADDR_VAR 0 1
1936: PUSH
1937: DOUBLE
1938: LD_INT 1
1940: DEC
1941: ST_TO_ADDR
1942: LD_INT 8
1944: PUSH
1945: FOR_TO
1946: IFFALSE 2089
// begin uc_side := 1 ;
1948: LD_ADDR_OWVAR 20
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// uc_nation := 1 ;
1956: LD_ADDR_OWVAR 21
1960: PUSH
1961: LD_INT 1
1963: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1964: LD_INT 5
1966: PPUSH
1967: LD_INT 3
1969: PPUSH
1970: LD_INT 3
1972: PPUSH
1973: LD_INT 6
1975: PUSH
1976: LD_INT 9
1978: PUSH
1979: LD_INT 7
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: PUSH
1987: LD_VAR 0 1
1991: PUSH
1992: LD_INT 3
1994: MOD
1995: PUSH
1996: LD_INT 1
1998: PLUS
1999: ARRAY
2000: PPUSH
2001: LD_INT 100
2003: PPUSH
2004: CALL 7785 0 5
// un := CreateVehicle ;
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: CALL_OW 45
2017: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2018: LD_ADDR_VAR 0 3
2022: PUSH
2023: LD_VAR 0 3
2027: PPUSH
2028: LD_VAR 0 2
2032: PPUSH
2033: CALL 40238 0 2
2037: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2038: LD_VAR 0 2
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2050: LD_VAR 0 2
2054: PPUSH
2055: LD_INT 11
2057: PPUSH
2058: LD_INT 0
2060: PPUSH
2061: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_INT 16
2072: PPUSH
2073: LD_INT 13
2075: PPUSH
2076: CALL_OW 111
// wait ( 0 0$1 ) ;
2080: LD_INT 35
2082: PPUSH
2083: CALL_OW 67
// end ;
2087: GO 1945
2089: POP
2090: POP
// repeat wait ( 0 0$1 ) ;
2091: LD_INT 35
2093: PPUSH
2094: CALL_OW 67
// for i in tmp do
2098: LD_ADDR_VAR 0 1
2102: PUSH
2103: LD_VAR 0 3
2107: PUSH
2108: FOR_IN
2109: IFFALSE 2177
// if not IsOk ( i ) then
2111: LD_VAR 0 1
2115: PPUSH
2116: CALL_OW 302
2120: NOT
2121: IFFALSE 2141
// tmp := tmp diff i else
2123: LD_ADDR_VAR 0 3
2127: PUSH
2128: LD_VAR 0 3
2132: PUSH
2133: LD_VAR 0 1
2137: DIFF
2138: ST_TO_ADDR
2139: GO 2175
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2141: LD_VAR 0 1
2145: PPUSH
2146: LD_INT 81
2148: PUSH
2149: LD_INT 1
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PPUSH
2156: CALL_OW 69
2160: PPUSH
2161: LD_VAR 0 1
2165: PPUSH
2166: CALL_OW 74
2170: PPUSH
2171: CALL_OW 115
2175: GO 2108
2177: POP
2178: POP
// until not tmp ;
2179: LD_VAR 0 3
2183: NOT
2184: IFFALSE 2091
// end ;
2186: PPOPN 3
2188: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2189: LD_INT 149
2191: PPUSH
2192: LD_INT 106
2194: PPUSH
2195: CALL_OW 428
2199: NOT
2200: IFFALSE 2363
2202: GO 2204
2204: DISABLE
2205: LD_INT 0
2207: PPUSH
// begin enable ;
2208: ENABLE
// uc_side := 1 ;
2209: LD_ADDR_OWVAR 20
2213: PUSH
2214: LD_INT 1
2216: ST_TO_ADDR
// uc_nation := 1 ;
2217: LD_ADDR_OWVAR 21
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2225: LD_INT 5
2227: PPUSH
2228: LD_INT 3
2230: PPUSH
2231: LD_INT 3
2233: PPUSH
2234: LD_INT 12
2236: PPUSH
2237: LD_INT 100
2239: PPUSH
2240: CALL 7785 0 5
// un := CreateVehicle ;
2244: LD_ADDR_VAR 0 1
2248: PUSH
2249: CALL_OW 45
2253: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 149
2261: PPUSH
2262: LD_INT 106
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 100
2282: PPUSH
2283: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2287: LD_VAR 0 1
2291: PPUSH
2292: LD_INT 105
2294: PPUSH
2295: LD_INT 2
2297: PPUSH
2298: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2302: LD_INT 35
2304: PPUSH
2305: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2309: LD_VAR 0 1
2313: PPUSH
2314: CALL_OW 301
2318: PUSH
2319: LD_VAR 0 1
2323: PPUSH
2324: CALL_OW 255
2328: PUSH
2329: LD_INT 1
2331: NONEQUAL
2332: OR
2333: IFFALSE 2337
// exit ;
2335: GO 2363
// until IsAt ( un , 105 , 2 ) ;
2337: LD_VAR 0 1
2341: PPUSH
2342: LD_INT 105
2344: PPUSH
2345: LD_INT 2
2347: PPUSH
2348: CALL_OW 307
2352: IFFALSE 2302
// RemoveUnit ( un ) ;
2354: LD_VAR 0 1
2358: PPUSH
2359: CALL_OW 64
// end ; end_of_file
2363: PPOPN 1
2365: END
// export function Action ; begin
2366: LD_INT 0
2368: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2369: LD_EXP 2
2373: PPUSH
2374: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2378: LD_STRING WT-Objectives-1
2380: PPUSH
2381: CALL_OW 337
// end ;
2385: LD_VAR 0 1
2389: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2390: LD_INT 7
2392: PPUSH
2393: LD_EXP 3
2397: PPUSH
2398: CALL_OW 292
2402: IFFALSE 2419
2404: GO 2406
2406: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2407: LD_EXP 3
2411: PPUSH
2412: LD_INT 7
2414: PPUSH
2415: CALL_OW 235
2419: END
// every 2 2$00 do
2420: GO 2422
2422: DISABLE
// PrepareReinforcements ( ) ;
2423: CALL 258 0 0
2427: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2428: LD_INT 2
2430: PPUSH
2431: CALL_OW 469
2435: NOT
2436: IFFALSE 2451
2438: GO 2440
2440: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2441: LD_INT 8
2443: PPUSH
2444: LD_INT 1
2446: PPUSH
2447: CALL_OW 424
2451: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2452: LD_INT 8
2454: PPUSH
2455: LD_INT 2
2457: PUSH
2458: LD_INT 34
2460: PUSH
2461: LD_INT 12
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: LD_INT 34
2470: PUSH
2471: LD_INT 51
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PPUSH
2483: CALL_OW 70
2487: PUSH
2488: LD_INT 2
2490: PPUSH
2491: CALL_OW 469
2495: NOT
2496: AND
2497: IFFALSE 2627
2499: GO 2501
2501: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2502: LD_STRING WT-med-1
2504: PPUSH
2505: LD_INT 1
2507: PPUSH
2508: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2512: LD_STRING WT-med-2
2514: PPUSH
2515: LD_INT 1
2517: NEG
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_EXP 3
2530: PPUSH
2531: CALL_OW 302
2535: PUSH
2536: LD_EXP 3
2540: PPUSH
2541: CALL_OW 255
2545: MUL
2546: PUSH
2547: LD_INT 7
2549: EQUAL
2550: PUSH
2551: LD_INT 1
2553: PLUS
2554: ARRAY
2555: PPUSH
2556: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2560: LD_STRING WT-med-3
2562: PPUSH
2563: LD_INT 1
2565: NEG
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 22
2576: PUSH
2577: LD_INT 7
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: LD_INT 34
2586: PUSH
2587: LD_INT 10
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PPUSH
2598: CALL_OW 69
2602: PUSH
2603: LD_INT 2
2605: GREATEREQUAL
2606: PUSH
2607: LD_INT 1
2609: PLUS
2610: ARRAY
2611: PPUSH
2612: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2616: LD_STRING WT-Main
2618: PPUSH
2619: CALL_OW 102
// YouWin ;
2623: CALL_OW 103
// end ; end_of_file
2627: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2628: LD_VAR 0 1
2632: PUSH
2633: LD_EXP 7
2637: IN
2638: IFFALSE 2656
// ruForces := ruForces diff un ;
2640: LD_ADDR_EXP 7
2644: PUSH
2645: LD_EXP 7
2649: PUSH
2650: LD_VAR 0 1
2654: DIFF
2655: ST_TO_ADDR
// end ;
2656: PPOPN 1
2658: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 44191 0 1
// if un = allianceHack then
2668: LD_VAR 0 1
2672: PUSH
2673: LD_EXP 2
2677: EQUAL
2678: IFFALSE 2687
// YouLost ( WT-HackLost ) ;
2680: LD_STRING WT-HackLost
2682: PPUSH
2683: CALL_OW 104
// if un in ruForces then
2687: LD_VAR 0 1
2691: PUSH
2692: LD_EXP 7
2696: IN
2697: IFFALSE 2715
// ruForces := ruForces diff un ;
2699: LD_ADDR_EXP 7
2703: PUSH
2704: LD_EXP 7
2708: PUSH
2709: LD_VAR 0 1
2713: DIFF
2714: ST_TO_ADDR
// end ;
2715: PPOPN 1
2717: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
2718: LD_VAR 0 1
2722: PPUSH
2723: LD_VAR 0 2
2727: PPUSH
2728: CALL 44311 0 2
// if GetSide ( vehicle ) = 3 then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 255
2741: PUSH
2742: LD_INT 3
2744: EQUAL
2745: IFFALSE 2767
// ruForces := Join ( ruForces , vehicle ) ;
2747: LD_ADDR_EXP 7
2751: PUSH
2752: LD_EXP 7
2756: PPUSH
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 40238 0 2
2766: ST_TO_ADDR
// end ; end_of_file
2767: PPOPN 2
2769: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2770: LD_INT 0
2772: PPUSH
2773: PPUSH
// if exist_mode then
2774: LD_VAR 0 2
2778: IFFALSE 2803
// unit := CreateCharacter ( prefix & ident ) else
2780: LD_ADDR_VAR 0 5
2784: PUSH
2785: LD_VAR 0 3
2789: PUSH
2790: LD_VAR 0 1
2794: STR
2795: PPUSH
2796: CALL_OW 34
2800: ST_TO_ADDR
2801: GO 2818
// unit := NewCharacter ( ident ) ;
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: LD_VAR 0 1
2812: PPUSH
2813: CALL_OW 25
2817: ST_TO_ADDR
// result := unit ;
2818: LD_ADDR_VAR 0 4
2822: PUSH
2823: LD_VAR 0 5
2827: ST_TO_ADDR
// end ;
2828: LD_VAR 0 4
2832: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2833: LD_INT 0
2835: PPUSH
2836: PPUSH
// if not side or not nation then
2837: LD_VAR 0 1
2841: NOT
2842: PUSH
2843: LD_VAR 0 2
2847: NOT
2848: OR
2849: IFFALSE 2853
// exit ;
2851: GO 3621
// case nation of nation_american :
2853: LD_VAR 0 2
2857: PUSH
2858: LD_INT 1
2860: DOUBLE
2861: EQUAL
2862: IFTRUE 2866
2864: GO 3080
2866: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2867: LD_ADDR_VAR 0 4
2871: PUSH
2872: LD_INT 35
2874: PUSH
2875: LD_INT 45
2877: PUSH
2878: LD_INT 46
2880: PUSH
2881: LD_INT 47
2883: PUSH
2884: LD_INT 82
2886: PUSH
2887: LD_INT 83
2889: PUSH
2890: LD_INT 84
2892: PUSH
2893: LD_INT 85
2895: PUSH
2896: LD_INT 86
2898: PUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 6
2907: PUSH
2908: LD_INT 15
2910: PUSH
2911: LD_INT 16
2913: PUSH
2914: LD_INT 7
2916: PUSH
2917: LD_INT 12
2919: PUSH
2920: LD_INT 13
2922: PUSH
2923: LD_INT 10
2925: PUSH
2926: LD_INT 14
2928: PUSH
2929: LD_INT 20
2931: PUSH
2932: LD_INT 21
2934: PUSH
2935: LD_INT 22
2937: PUSH
2938: LD_INT 25
2940: PUSH
2941: LD_INT 32
2943: PUSH
2944: LD_INT 27
2946: PUSH
2947: LD_INT 36
2949: PUSH
2950: LD_INT 69
2952: PUSH
2953: LD_INT 39
2955: PUSH
2956: LD_INT 34
2958: PUSH
2959: LD_INT 40
2961: PUSH
2962: LD_INT 48
2964: PUSH
2965: LD_INT 49
2967: PUSH
2968: LD_INT 50
2970: PUSH
2971: LD_INT 51
2973: PUSH
2974: LD_INT 52
2976: PUSH
2977: LD_INT 53
2979: PUSH
2980: LD_INT 54
2982: PUSH
2983: LD_INT 55
2985: PUSH
2986: LD_INT 56
2988: PUSH
2989: LD_INT 57
2991: PUSH
2992: LD_INT 58
2994: PUSH
2995: LD_INT 59
2997: PUSH
2998: LD_INT 60
3000: PUSH
3001: LD_INT 61
3003: PUSH
3004: LD_INT 62
3006: PUSH
3007: LD_INT 80
3009: PUSH
3010: LD_INT 82
3012: PUSH
3013: LD_INT 83
3015: PUSH
3016: LD_INT 84
3018: PUSH
3019: LD_INT 85
3021: PUSH
3022: LD_INT 86
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
3078: GO 3545
3080: LD_INT 2
3082: DOUBLE
3083: EQUAL
3084: IFTRUE 3088
3086: GO 3314
3088: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3089: LD_ADDR_VAR 0 4
3093: PUSH
3094: LD_INT 35
3096: PUSH
3097: LD_INT 45
3099: PUSH
3100: LD_INT 46
3102: PUSH
3103: LD_INT 47
3105: PUSH
3106: LD_INT 82
3108: PUSH
3109: LD_INT 83
3111: PUSH
3112: LD_INT 84
3114: PUSH
3115: LD_INT 85
3117: PUSH
3118: LD_INT 87
3120: PUSH
3121: LD_INT 70
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: LD_INT 11
3129: PUSH
3130: LD_INT 3
3132: PUSH
3133: LD_INT 4
3135: PUSH
3136: LD_INT 5
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: LD_INT 15
3144: PUSH
3145: LD_INT 18
3147: PUSH
3148: LD_INT 7
3150: PUSH
3151: LD_INT 17
3153: PUSH
3154: LD_INT 8
3156: PUSH
3157: LD_INT 20
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 22
3165: PUSH
3166: LD_INT 72
3168: PUSH
3169: LD_INT 26
3171: PUSH
3172: LD_INT 69
3174: PUSH
3175: LD_INT 39
3177: PUSH
3178: LD_INT 40
3180: PUSH
3181: LD_INT 41
3183: PUSH
3184: LD_INT 42
3186: PUSH
3187: LD_INT 43
3189: PUSH
3190: LD_INT 48
3192: PUSH
3193: LD_INT 49
3195: PUSH
3196: LD_INT 50
3198: PUSH
3199: LD_INT 51
3201: PUSH
3202: LD_INT 52
3204: PUSH
3205: LD_INT 53
3207: PUSH
3208: LD_INT 54
3210: PUSH
3211: LD_INT 55
3213: PUSH
3214: LD_INT 56
3216: PUSH
3217: LD_INT 60
3219: PUSH
3220: LD_INT 61
3222: PUSH
3223: LD_INT 62
3225: PUSH
3226: LD_INT 66
3228: PUSH
3229: LD_INT 67
3231: PUSH
3232: LD_INT 68
3234: PUSH
3235: LD_INT 81
3237: PUSH
3238: LD_INT 82
3240: PUSH
3241: LD_INT 83
3243: PUSH
3244: LD_INT 84
3246: PUSH
3247: LD_INT 85
3249: PUSH
3250: LD_INT 87
3252: PUSH
3253: LD_INT 88
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
3312: GO 3545
3314: LD_INT 3
3316: DOUBLE
3317: EQUAL
3318: IFTRUE 3322
3320: GO 3544
3322: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3323: LD_ADDR_VAR 0 4
3327: PUSH
3328: LD_INT 46
3330: PUSH
3331: LD_INT 47
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: LD_INT 2
3339: PUSH
3340: LD_INT 82
3342: PUSH
3343: LD_INT 83
3345: PUSH
3346: LD_INT 84
3348: PUSH
3349: LD_INT 85
3351: PUSH
3352: LD_INT 86
3354: PUSH
3355: LD_INT 11
3357: PUSH
3358: LD_INT 9
3360: PUSH
3361: LD_INT 20
3363: PUSH
3364: LD_INT 19
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 24
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 25
3378: PUSH
3379: LD_INT 28
3381: PUSH
3382: LD_INT 29
3384: PUSH
3385: LD_INT 30
3387: PUSH
3388: LD_INT 31
3390: PUSH
3391: LD_INT 37
3393: PUSH
3394: LD_INT 38
3396: PUSH
3397: LD_INT 32
3399: PUSH
3400: LD_INT 27
3402: PUSH
3403: LD_INT 33
3405: PUSH
3406: LD_INT 69
3408: PUSH
3409: LD_INT 39
3411: PUSH
3412: LD_INT 34
3414: PUSH
3415: LD_INT 40
3417: PUSH
3418: LD_INT 71
3420: PUSH
3421: LD_INT 23
3423: PUSH
3424: LD_INT 44
3426: PUSH
3427: LD_INT 48
3429: PUSH
3430: LD_INT 49
3432: PUSH
3433: LD_INT 50
3435: PUSH
3436: LD_INT 51
3438: PUSH
3439: LD_INT 52
3441: PUSH
3442: LD_INT 53
3444: PUSH
3445: LD_INT 54
3447: PUSH
3448: LD_INT 55
3450: PUSH
3451: LD_INT 56
3453: PUSH
3454: LD_INT 57
3456: PUSH
3457: LD_INT 58
3459: PUSH
3460: LD_INT 59
3462: PUSH
3463: LD_INT 63
3465: PUSH
3466: LD_INT 64
3468: PUSH
3469: LD_INT 65
3471: PUSH
3472: LD_INT 82
3474: PUSH
3475: LD_INT 83
3477: PUSH
3478: LD_INT 84
3480: PUSH
3481: LD_INT 85
3483: PUSH
3484: LD_INT 86
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: ST_TO_ADDR
3542: GO 3545
3544: POP
// if state > - 1 and state < 3 then
3545: LD_VAR 0 3
3549: PUSH
3550: LD_INT 1
3552: NEG
3553: GREATER
3554: PUSH
3555: LD_VAR 0 3
3559: PUSH
3560: LD_INT 3
3562: LESS
3563: AND
3564: IFFALSE 3621
// for i in result do
3566: LD_ADDR_VAR 0 5
3570: PUSH
3571: LD_VAR 0 4
3575: PUSH
3576: FOR_IN
3577: IFFALSE 3619
// if GetTech ( i , side ) <> state then
3579: LD_VAR 0 5
3583: PPUSH
3584: LD_VAR 0 1
3588: PPUSH
3589: CALL_OW 321
3593: PUSH
3594: LD_VAR 0 3
3598: NONEQUAL
3599: IFFALSE 3617
// result := result diff i ;
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: LD_VAR 0 4
3610: PUSH
3611: LD_VAR 0 5
3615: DIFF
3616: ST_TO_ADDR
3617: GO 3576
3619: POP
3620: POP
// end ;
3621: LD_VAR 0 4
3625: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3626: LD_INT 0
3628: PPUSH
3629: PPUSH
3630: PPUSH
// result := true ;
3631: LD_ADDR_VAR 0 3
3635: PUSH
3636: LD_INT 1
3638: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3639: LD_ADDR_VAR 0 5
3643: PUSH
3644: LD_VAR 0 2
3648: PPUSH
3649: CALL_OW 480
3653: ST_TO_ADDR
// if not tmp then
3654: LD_VAR 0 5
3658: NOT
3659: IFFALSE 3663
// exit ;
3661: GO 3712
// for i in tmp do
3663: LD_ADDR_VAR 0 4
3667: PUSH
3668: LD_VAR 0 5
3672: PUSH
3673: FOR_IN
3674: IFFALSE 3710
// if GetTech ( i , side ) <> state_researched then
3676: LD_VAR 0 4
3680: PPUSH
3681: LD_VAR 0 1
3685: PPUSH
3686: CALL_OW 321
3690: PUSH
3691: LD_INT 2
3693: NONEQUAL
3694: IFFALSE 3708
// begin result := false ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_INT 0
3703: ST_TO_ADDR
// exit ;
3704: POP
3705: POP
3706: GO 3712
// end ;
3708: GO 3673
3710: POP
3711: POP
// end ;
3712: LD_VAR 0 3
3716: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3717: LD_INT 0
3719: PPUSH
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
3730: PPUSH
3731: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3732: LD_VAR 0 1
3736: NOT
3737: PUSH
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 257
3747: PUSH
3748: LD_INT 9
3750: NONEQUAL
3751: OR
3752: IFFALSE 3756
// exit ;
3754: GO 4329
// side := GetSide ( unit ) ;
3756: LD_ADDR_VAR 0 9
3760: PUSH
3761: LD_VAR 0 1
3765: PPUSH
3766: CALL_OW 255
3770: ST_TO_ADDR
// tech_space := tech_spacanom ;
3771: LD_ADDR_VAR 0 12
3775: PUSH
3776: LD_INT 29
3778: ST_TO_ADDR
// tech_time := tech_taurad ;
3779: LD_ADDR_VAR 0 13
3783: PUSH
3784: LD_INT 28
3786: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3787: LD_ADDR_VAR 0 11
3791: PUSH
3792: LD_VAR 0 1
3796: PPUSH
3797: CALL_OW 310
3801: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3802: LD_VAR 0 11
3806: PPUSH
3807: CALL_OW 247
3811: PUSH
3812: LD_INT 2
3814: EQUAL
3815: IFFALSE 3819
// exit ;
3817: GO 4329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3819: LD_ADDR_VAR 0 8
3823: PUSH
3824: LD_INT 81
3826: PUSH
3827: LD_VAR 0 9
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 21
3841: PUSH
3842: LD_INT 3
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: ST_TO_ADDR
// if not tmp then
3862: LD_VAR 0 8
3866: NOT
3867: IFFALSE 3871
// exit ;
3869: GO 4329
// if in_unit then
3871: LD_VAR 0 11
3875: IFFALSE 3899
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3877: LD_ADDR_VAR 0 10
3881: PUSH
3882: LD_VAR 0 8
3886: PPUSH
3887: LD_VAR 0 11
3891: PPUSH
3892: CALL_OW 74
3896: ST_TO_ADDR
3897: GO 3919
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3899: LD_ADDR_VAR 0 10
3903: PUSH
3904: LD_VAR 0 8
3908: PPUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 74
3918: ST_TO_ADDR
// if not enemy then
3919: LD_VAR 0 10
3923: NOT
3924: IFFALSE 3928
// exit ;
3926: GO 4329
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3928: LD_VAR 0 11
3932: PUSH
3933: LD_VAR 0 11
3937: PPUSH
3938: LD_VAR 0 10
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 13
3950: GREATER
3951: AND
3952: PUSH
3953: LD_VAR 0 1
3957: PPUSH
3958: LD_VAR 0 10
3962: PPUSH
3963: CALL_OW 296
3967: PUSH
3968: LD_INT 12
3970: GREATER
3971: OR
3972: IFFALSE 3976
// exit ;
3974: GO 4329
// missile := [ 1 ] ;
3976: LD_ADDR_VAR 0 14
3980: PUSH
3981: LD_INT 1
3983: PUSH
3984: EMPTY
3985: LIST
3986: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3987: LD_VAR 0 9
3991: PPUSH
3992: LD_VAR 0 12
3996: PPUSH
3997: CALL_OW 325
4001: IFFALSE 4030
// missile := Replace ( missile , missile + 1 , 2 ) ;
4003: LD_ADDR_VAR 0 14
4007: PUSH
4008: LD_VAR 0 14
4012: PPUSH
4013: LD_VAR 0 14
4017: PUSH
4018: LD_INT 1
4020: PLUS
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 1
4029: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4030: LD_VAR 0 9
4034: PPUSH
4035: LD_VAR 0 13
4039: PPUSH
4040: CALL_OW 325
4044: PUSH
4045: LD_VAR 0 10
4049: PPUSH
4050: CALL_OW 255
4054: PPUSH
4055: LD_VAR 0 13
4059: PPUSH
4060: CALL_OW 325
4064: NOT
4065: AND
4066: IFFALSE 4095
// missile := Replace ( missile , missile + 1 , 3 ) ;
4068: LD_ADDR_VAR 0 14
4072: PUSH
4073: LD_VAR 0 14
4077: PPUSH
4078: LD_VAR 0 14
4082: PUSH
4083: LD_INT 1
4085: PLUS
4086: PPUSH
4087: LD_INT 3
4089: PPUSH
4090: CALL_OW 1
4094: ST_TO_ADDR
// if missile < 2 then
4095: LD_VAR 0 14
4099: PUSH
4100: LD_INT 2
4102: LESS
4103: IFFALSE 4107
// exit ;
4105: GO 4329
// x := GetX ( enemy ) ;
4107: LD_ADDR_VAR 0 4
4111: PUSH
4112: LD_VAR 0 10
4116: PPUSH
4117: CALL_OW 250
4121: ST_TO_ADDR
// y := GetY ( enemy ) ;
4122: LD_ADDR_VAR 0 5
4126: PUSH
4127: LD_VAR 0 10
4131: PPUSH
4132: CALL_OW 251
4136: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4137: LD_ADDR_VAR 0 6
4141: PUSH
4142: LD_VAR 0 4
4146: PUSH
4147: LD_INT 1
4149: NEG
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: CALL_OW 12
4158: PLUS
4159: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4160: LD_ADDR_VAR 0 7
4164: PUSH
4165: LD_VAR 0 5
4169: PUSH
4170: LD_INT 1
4172: NEG
4173: PPUSH
4174: LD_INT 1
4176: PPUSH
4177: CALL_OW 12
4181: PLUS
4182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4183: LD_VAR 0 6
4187: PPUSH
4188: LD_VAR 0 7
4192: PPUSH
4193: CALL_OW 488
4197: NOT
4198: IFFALSE 4220
// begin _x := x ;
4200: LD_ADDR_VAR 0 6
4204: PUSH
4205: LD_VAR 0 4
4209: ST_TO_ADDR
// _y := y ;
4210: LD_ADDR_VAR 0 7
4214: PUSH
4215: LD_VAR 0 5
4219: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 14
4232: PPUSH
4233: CALL_OW 12
4237: ST_TO_ADDR
// case i of 1 :
4238: LD_VAR 0 3
4242: PUSH
4243: LD_INT 1
4245: DOUBLE
4246: EQUAL
4247: IFTRUE 4251
4249: GO 4268
4251: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 10
4261: PPUSH
4262: CALL_OW 115
4266: GO 4329
4268: LD_INT 2
4270: DOUBLE
4271: EQUAL
4272: IFTRUE 4276
4274: GO 4298
4276: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4277: LD_VAR 0 1
4281: PPUSH
4282: LD_VAR 0 6
4286: PPUSH
4287: LD_VAR 0 7
4291: PPUSH
4292: CALL_OW 153
4296: GO 4329
4298: LD_INT 3
4300: DOUBLE
4301: EQUAL
4302: IFTRUE 4306
4304: GO 4328
4306: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4307: LD_VAR 0 1
4311: PPUSH
4312: LD_VAR 0 6
4316: PPUSH
4317: LD_VAR 0 7
4321: PPUSH
4322: CALL_OW 154
4326: GO 4329
4328: POP
// end ;
4329: LD_VAR 0 2
4333: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4334: LD_INT 0
4336: PPUSH
4337: PPUSH
4338: PPUSH
4339: PPUSH
4340: PPUSH
4341: PPUSH
// if not unit or not building then
4342: LD_VAR 0 1
4346: NOT
4347: PUSH
4348: LD_VAR 0 2
4352: NOT
4353: OR
4354: IFFALSE 4358
// exit ;
4356: GO 4516
// x := GetX ( building ) ;
4358: LD_ADDR_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PPUSH
4368: CALL_OW 250
4372: ST_TO_ADDR
// y := GetY ( building ) ;
4373: LD_ADDR_VAR 0 6
4377: PUSH
4378: LD_VAR 0 2
4382: PPUSH
4383: CALL_OW 251
4387: ST_TO_ADDR
// for i = 0 to 5 do
4388: LD_ADDR_VAR 0 4
4392: PUSH
4393: DOUBLE
4394: LD_INT 0
4396: DEC
4397: ST_TO_ADDR
4398: LD_INT 5
4400: PUSH
4401: FOR_TO
4402: IFFALSE 4514
// begin _x := ShiftX ( x , i , 3 ) ;
4404: LD_ADDR_VAR 0 7
4408: PUSH
4409: LD_VAR 0 5
4413: PPUSH
4414: LD_VAR 0 4
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: CALL_OW 272
4426: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4427: LD_ADDR_VAR 0 8
4431: PUSH
4432: LD_VAR 0 6
4436: PPUSH
4437: LD_VAR 0 4
4441: PPUSH
4442: LD_INT 3
4444: PPUSH
4445: CALL_OW 273
4449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4450: LD_VAR 0 7
4454: PPUSH
4455: LD_VAR 0 8
4459: PPUSH
4460: CALL_OW 488
4464: NOT
4465: IFFALSE 4469
// continue ;
4467: GO 4401
// if HexInfo ( _x , _y ) = 0 then
4469: LD_VAR 0 7
4473: PPUSH
4474: LD_VAR 0 8
4478: PPUSH
4479: CALL_OW 428
4483: PUSH
4484: LD_INT 0
4486: EQUAL
4487: IFFALSE 4512
// begin ComMoveXY ( unit , _x , _y ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_VAR 0 7
4498: PPUSH
4499: LD_VAR 0 8
4503: PPUSH
4504: CALL_OW 111
// exit ;
4508: POP
4509: POP
4510: GO 4516
// end ; end ;
4512: GO 4401
4514: POP
4515: POP
// end ;
4516: LD_VAR 0 3
4520: RET
// export function ScanBase ( side , base_area ) ; begin
4521: LD_INT 0
4523: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4524: LD_ADDR_VAR 0 3
4528: PUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: LD_INT 81
4536: PUSH
4537: LD_VAR 0 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PPUSH
4546: CALL_OW 70
4550: ST_TO_ADDR
// end ;
4551: LD_VAR 0 3
4555: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4556: LD_INT 0
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
// result := false ;
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: LD_INT 0
4569: ST_TO_ADDR
// side := GetSide ( unit ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_VAR 0 1
4579: PPUSH
4580: CALL_OW 255
4584: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4585: LD_ADDR_VAR 0 4
4589: PUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 248
4599: ST_TO_ADDR
// case nat of 1 :
4600: LD_VAR 0 4
4604: PUSH
4605: LD_INT 1
4607: DOUBLE
4608: EQUAL
4609: IFTRUE 4613
4611: GO 4624
4613: POP
// tech := tech_lassight ; 2 :
4614: LD_ADDR_VAR 0 5
4618: PUSH
4619: LD_INT 12
4621: ST_TO_ADDR
4622: GO 4663
4624: LD_INT 2
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// tech := tech_mortar ; 3 :
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 41
4640: ST_TO_ADDR
4641: GO 4663
4643: LD_INT 3
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// tech := tech_bazooka ; end ;
4652: LD_ADDR_VAR 0 5
4656: PUSH
4657: LD_INT 44
4659: ST_TO_ADDR
4660: GO 4663
4662: POP
// if Researched ( side , tech ) then
4663: LD_VAR 0 3
4667: PPUSH
4668: LD_VAR 0 5
4672: PPUSH
4673: CALL_OW 325
4677: IFFALSE 4704
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4679: LD_ADDR_VAR 0 2
4683: PUSH
4684: LD_INT 5
4686: PUSH
4687: LD_INT 8
4689: PUSH
4690: LD_INT 9
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: PUSH
4698: LD_VAR 0 4
4702: ARRAY
4703: ST_TO_ADDR
// end ;
4704: LD_VAR 0 2
4708: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4709: LD_INT 0
4711: PPUSH
4712: PPUSH
4713: PPUSH
// if not mines then
4714: LD_VAR 0 2
4718: NOT
4719: IFFALSE 4723
// exit ;
4721: GO 4867
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4723: LD_ADDR_VAR 0 5
4727: PUSH
4728: LD_INT 81
4730: PUSH
4731: LD_VAR 0 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 69
4765: ST_TO_ADDR
// for i in mines do
4766: LD_ADDR_VAR 0 4
4770: PUSH
4771: LD_VAR 0 2
4775: PUSH
4776: FOR_IN
4777: IFFALSE 4865
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4779: LD_VAR 0 4
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PPUSH
4788: LD_VAR 0 4
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 458
4801: NOT
4802: IFFALSE 4806
// continue ;
4804: GO 4776
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4806: LD_VAR 0 4
4810: PUSH
4811: LD_INT 1
4813: ARRAY
4814: PPUSH
4815: LD_VAR 0 4
4819: PUSH
4820: LD_INT 2
4822: ARRAY
4823: PPUSH
4824: CALL_OW 428
4828: PUSH
4829: LD_VAR 0 5
4833: IN
4834: IFFALSE 4863
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4836: LD_VAR 0 4
4840: PUSH
4841: LD_INT 1
4843: ARRAY
4844: PPUSH
4845: LD_VAR 0 4
4849: PUSH
4850: LD_INT 2
4852: ARRAY
4853: PPUSH
4854: LD_VAR 0 1
4858: PPUSH
4859: CALL_OW 456
// end ;
4863: GO 4776
4865: POP
4866: POP
// end ;
4867: LD_VAR 0 3
4871: RET
// export function Count ( array ) ; var i ; begin
4872: LD_INT 0
4874: PPUSH
4875: PPUSH
// result := 0 ;
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: LD_INT 0
4883: ST_TO_ADDR
// for i in array do
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: LD_VAR 0 1
4893: PUSH
4894: FOR_IN
4895: IFFALSE 4919
// if i then
4897: LD_VAR 0 3
4901: IFFALSE 4917
// result := result + 1 ;
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: LD_VAR 0 2
4912: PUSH
4913: LD_INT 1
4915: PLUS
4916: ST_TO_ADDR
4917: GO 4894
4919: POP
4920: POP
// end ;
4921: LD_VAR 0 2
4925: RET
// export function IsEmpty ( building ) ; begin
4926: LD_INT 0
4928: PPUSH
// if not building then
4929: LD_VAR 0 1
4933: NOT
4934: IFFALSE 4938
// exit ;
4936: GO 4981
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: LD_VAR 0 1
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_VAR 0 1
4955: PPUSH
4956: CALL_OW 255
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PUSH
4965: LD_INT 58
4967: PUSH
4968: EMPTY
4969: LIST
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PPUSH
4975: CALL_OW 69
4979: IN
4980: ST_TO_ADDR
// end ;
4981: LD_VAR 0 2
4985: RET
// export function IsNotFull ( building ) ; var places ; begin
4986: LD_INT 0
4988: PPUSH
4989: PPUSH
// if not building then
4990: LD_VAR 0 1
4994: NOT
4995: IFFALSE 4999
// exit ;
4997: GO 5170
// result := false ;
4999: LD_ADDR_VAR 0 2
5003: PUSH
5004: LD_INT 0
5006: ST_TO_ADDR
// places := 0 ;
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: LD_INT 0
5014: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5015: LD_VAR 0 1
5019: PPUSH
5020: CALL_OW 266
5024: PUSH
5025: LD_INT 0
5027: DOUBLE
5028: EQUAL
5029: IFTRUE 5087
5031: LD_INT 1
5033: DOUBLE
5034: EQUAL
5035: IFTRUE 5087
5037: LD_INT 6
5039: DOUBLE
5040: EQUAL
5041: IFTRUE 5087
5043: LD_INT 7
5045: DOUBLE
5046: EQUAL
5047: IFTRUE 5087
5049: LD_INT 8
5051: DOUBLE
5052: EQUAL
5053: IFTRUE 5087
5055: LD_INT 4
5057: DOUBLE
5058: EQUAL
5059: IFTRUE 5087
5061: LD_INT 5
5063: DOUBLE
5064: EQUAL
5065: IFTRUE 5087
5067: LD_INT 2
5069: DOUBLE
5070: EQUAL
5071: IFTRUE 5087
5073: LD_INT 3
5075: DOUBLE
5076: EQUAL
5077: IFTRUE 5087
5079: LD_INT 35
5081: DOUBLE
5082: EQUAL
5083: IFTRUE 5087
5085: GO 5098
5087: POP
// places := 6 ; b_bunker , b_breastwork :
5088: LD_ADDR_VAR 0 3
5092: PUSH
5093: LD_INT 6
5095: ST_TO_ADDR
5096: GO 5143
5098: LD_INT 32
5100: DOUBLE
5101: EQUAL
5102: IFTRUE 5112
5104: LD_INT 31
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5123
5112: POP
// places := 1 ; b_control_tower :
5113: LD_ADDR_VAR 0 3
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
5121: GO 5143
5123: LD_INT 36
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5142
5131: POP
// places := 3 ; end ;
5132: LD_ADDR_VAR 0 3
5136: PUSH
5137: LD_INT 3
5139: ST_TO_ADDR
5140: GO 5143
5142: POP
// if places then
5143: LD_VAR 0 3
5147: IFFALSE 5170
// result := UnitsInside ( building ) < places ;
5149: LD_ADDR_VAR 0 2
5153: PUSH
5154: LD_VAR 0 1
5158: PPUSH
5159: CALL_OW 313
5163: PUSH
5164: LD_VAR 0 3
5168: LESS
5169: ST_TO_ADDR
// end ;
5170: LD_VAR 0 2
5174: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5175: LD_INT 0
5177: PPUSH
5178: PPUSH
5179: PPUSH
5180: PPUSH
// tmp := [ ] ;
5181: LD_ADDR_VAR 0 3
5185: PUSH
5186: EMPTY
5187: ST_TO_ADDR
// list := [ ] ;
5188: LD_ADDR_VAR 0 5
5192: PUSH
5193: EMPTY
5194: ST_TO_ADDR
// for i = 16 to 25 do
5195: LD_ADDR_VAR 0 4
5199: PUSH
5200: DOUBLE
5201: LD_INT 16
5203: DEC
5204: ST_TO_ADDR
5205: LD_INT 25
5207: PUSH
5208: FOR_TO
5209: IFFALSE 5282
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5211: LD_ADDR_VAR 0 3
5215: PUSH
5216: LD_VAR 0 3
5220: PUSH
5221: LD_INT 22
5223: PUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: CALL_OW 255
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PUSH
5238: LD_INT 91
5240: PUSH
5241: LD_VAR 0 1
5245: PUSH
5246: LD_INT 6
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PUSH
5254: LD_INT 30
5256: PUSH
5257: LD_VAR 0 4
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: LIST
5270: PUSH
5271: EMPTY
5272: LIST
5273: PPUSH
5274: CALL_OW 69
5278: ADD
5279: ST_TO_ADDR
5280: GO 5208
5282: POP
5283: POP
// for i = 1 to tmp do
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: DOUBLE
5290: LD_INT 1
5292: DEC
5293: ST_TO_ADDR
5294: LD_VAR 0 3
5298: PUSH
5299: FOR_TO
5300: IFFALSE 5388
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5302: LD_ADDR_VAR 0 5
5306: PUSH
5307: LD_VAR 0 5
5311: PUSH
5312: LD_VAR 0 3
5316: PUSH
5317: LD_VAR 0 4
5321: ARRAY
5322: PPUSH
5323: CALL_OW 266
5327: PUSH
5328: LD_VAR 0 3
5332: PUSH
5333: LD_VAR 0 4
5337: ARRAY
5338: PPUSH
5339: CALL_OW 250
5343: PUSH
5344: LD_VAR 0 3
5348: PUSH
5349: LD_VAR 0 4
5353: ARRAY
5354: PPUSH
5355: CALL_OW 251
5359: PUSH
5360: LD_VAR 0 3
5364: PUSH
5365: LD_VAR 0 4
5369: ARRAY
5370: PPUSH
5371: CALL_OW 254
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: ADD
5385: ST_TO_ADDR
5386: GO 5299
5388: POP
5389: POP
// result := list ;
5390: LD_ADDR_VAR 0 2
5394: PUSH
5395: LD_VAR 0 5
5399: ST_TO_ADDR
// end ;
5400: LD_VAR 0 2
5404: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5405: LD_INT 0
5407: PPUSH
5408: PPUSH
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
// if not factory then
5414: LD_VAR 0 1
5418: NOT
5419: IFFALSE 5423
// exit ;
5421: GO 6016
// if control = control_apeman then
5423: LD_VAR 0 4
5427: PUSH
5428: LD_INT 5
5430: EQUAL
5431: IFFALSE 5540
// begin tmp := UnitsInside ( factory ) ;
5433: LD_ADDR_VAR 0 8
5437: PUSH
5438: LD_VAR 0 1
5442: PPUSH
5443: CALL_OW 313
5447: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5448: LD_VAR 0 8
5452: PPUSH
5453: LD_INT 25
5455: PUSH
5456: LD_INT 12
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PPUSH
5463: CALL_OW 72
5467: NOT
5468: IFFALSE 5478
// control := control_manual ;
5470: LD_ADDR_VAR 0 4
5474: PUSH
5475: LD_INT 1
5477: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5478: LD_ADDR_VAR 0 8
5482: PUSH
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL 5175 0 1
5492: ST_TO_ADDR
// if tmp then
5493: LD_VAR 0 8
5497: IFFALSE 5540
// begin for i in tmp do
5499: LD_ADDR_VAR 0 7
5503: PUSH
5504: LD_VAR 0 8
5508: PUSH
5509: FOR_IN
5510: IFFALSE 5538
// if i [ 1 ] = b_ext_radio then
5512: LD_VAR 0 7
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PUSH
5521: LD_INT 22
5523: EQUAL
5524: IFFALSE 5536
// begin control := control_remote ;
5526: LD_ADDR_VAR 0 4
5530: PUSH
5531: LD_INT 2
5533: ST_TO_ADDR
// break ;
5534: GO 5538
// end ;
5536: GO 5509
5538: POP
5539: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5540: LD_VAR 0 1
5544: PPUSH
5545: LD_VAR 0 2
5549: PPUSH
5550: LD_VAR 0 3
5554: PPUSH
5555: LD_VAR 0 4
5559: PPUSH
5560: LD_VAR 0 5
5564: PPUSH
5565: CALL_OW 448
5569: IFFALSE 5604
// begin result := [ chassis , engine , control , weapon ] ;
5571: LD_ADDR_VAR 0 6
5575: PUSH
5576: LD_VAR 0 2
5580: PUSH
5581: LD_VAR 0 3
5585: PUSH
5586: LD_VAR 0 4
5590: PUSH
5591: LD_VAR 0 5
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: ST_TO_ADDR
// exit ;
5602: GO 6016
// end ; _chassis := AvailableChassisList ( factory ) ;
5604: LD_ADDR_VAR 0 9
5608: PUSH
5609: LD_VAR 0 1
5613: PPUSH
5614: CALL_OW 475
5618: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5619: LD_ADDR_VAR 0 11
5623: PUSH
5624: LD_VAR 0 1
5628: PPUSH
5629: CALL_OW 476
5633: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5634: LD_ADDR_VAR 0 12
5638: PUSH
5639: LD_VAR 0 1
5643: PPUSH
5644: CALL_OW 477
5648: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5649: LD_ADDR_VAR 0 10
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 478
5663: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5664: LD_VAR 0 9
5668: NOT
5669: PUSH
5670: LD_VAR 0 11
5674: NOT
5675: OR
5676: PUSH
5677: LD_VAR 0 12
5681: NOT
5682: OR
5683: PUSH
5684: LD_VAR 0 10
5688: NOT
5689: OR
5690: IFFALSE 5725
// begin result := [ chassis , engine , control , weapon ] ;
5692: LD_ADDR_VAR 0 6
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: LD_VAR 0 3
5706: PUSH
5707: LD_VAR 0 4
5711: PUSH
5712: LD_VAR 0 5
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// exit ;
5723: GO 6016
// end ; if not chassis in _chassis then
5725: LD_VAR 0 2
5729: PUSH
5730: LD_VAR 0 9
5734: IN
5735: NOT
5736: IFFALSE 5762
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5738: LD_ADDR_VAR 0 2
5742: PUSH
5743: LD_VAR 0 9
5747: PUSH
5748: LD_INT 1
5750: PPUSH
5751: LD_VAR 0 9
5755: PPUSH
5756: CALL_OW 12
5760: ARRAY
5761: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_VAR 0 3
5771: PPUSH
5772: CALL 6021 0 2
5776: NOT
5777: IFFALSE 5836
// repeat engine := _engine [ 1 ] ;
5779: LD_ADDR_VAR 0 3
5783: PUSH
5784: LD_VAR 0 11
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5793: LD_ADDR_VAR 0 11
5797: PUSH
5798: LD_VAR 0 11
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: CALL_OW 3
5810: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 3
5820: PPUSH
5821: CALL 6021 0 2
5825: PUSH
5826: LD_VAR 0 11
5830: PUSH
5831: EMPTY
5832: EQUAL
5833: OR
5834: IFFALSE 5779
// if not control in _control then
5836: LD_VAR 0 4
5840: PUSH
5841: LD_VAR 0 12
5845: IN
5846: NOT
5847: IFFALSE 5873
// control := _control [ rand ( 1 , _control ) ] ;
5849: LD_ADDR_VAR 0 4
5853: PUSH
5854: LD_VAR 0 12
5858: PUSH
5859: LD_INT 1
5861: PPUSH
5862: LD_VAR 0 12
5866: PPUSH
5867: CALL_OW 12
5871: ARRAY
5872: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5873: LD_VAR 0 2
5877: PPUSH
5878: LD_VAR 0 5
5882: PPUSH
5883: CALL 6241 0 2
5887: NOT
5888: IFFALSE 5947
// repeat weapon := _weapon [ 1 ] ;
5890: LD_ADDR_VAR 0 5
5894: PUSH
5895: LD_VAR 0 10
5899: PUSH
5900: LD_INT 1
5902: ARRAY
5903: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5904: LD_ADDR_VAR 0 10
5908: PUSH
5909: LD_VAR 0 10
5913: PPUSH
5914: LD_INT 1
5916: PPUSH
5917: CALL_OW 3
5921: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5922: LD_VAR 0 2
5926: PPUSH
5927: LD_VAR 0 5
5931: PPUSH
5932: CALL 6241 0 2
5936: PUSH
5937: LD_VAR 0 10
5941: PUSH
5942: EMPTY
5943: EQUAL
5944: OR
5945: IFFALSE 5890
// result := [ ] ;
5947: LD_ADDR_VAR 0 6
5951: PUSH
5952: EMPTY
5953: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5954: LD_VAR 0 1
5958: PPUSH
5959: LD_VAR 0 2
5963: PPUSH
5964: LD_VAR 0 3
5968: PPUSH
5969: LD_VAR 0 4
5973: PPUSH
5974: LD_VAR 0 5
5978: PPUSH
5979: CALL_OW 448
5983: IFFALSE 6016
// result := [ chassis , engine , control , weapon ] ;
5985: LD_ADDR_VAR 0 6
5989: PUSH
5990: LD_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: LD_VAR 0 4
6004: PUSH
6005: LD_VAR 0 5
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: ST_TO_ADDR
// end ;
6016: LD_VAR 0 6
6020: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6021: LD_INT 0
6023: PPUSH
// if not chassis or not engine then
6024: LD_VAR 0 1
6028: NOT
6029: PUSH
6030: LD_VAR 0 2
6034: NOT
6035: OR
6036: IFFALSE 6040
// exit ;
6038: GO 6236
// case engine of engine_solar :
6040: LD_VAR 0 2
6044: PUSH
6045: LD_INT 2
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6053
6051: GO 6091
6053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6054: LD_ADDR_VAR 0 3
6058: PUSH
6059: LD_INT 11
6061: PUSH
6062: LD_INT 12
6064: PUSH
6065: LD_INT 13
6067: PUSH
6068: LD_INT 14
6070: PUSH
6071: LD_INT 1
6073: PUSH
6074: LD_INT 2
6076: PUSH
6077: LD_INT 3
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: ST_TO_ADDR
6089: GO 6220
6091: LD_INT 1
6093: DOUBLE
6094: EQUAL
6095: IFTRUE 6099
6097: GO 6161
6099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6100: LD_ADDR_VAR 0 3
6104: PUSH
6105: LD_INT 11
6107: PUSH
6108: LD_INT 12
6110: PUSH
6111: LD_INT 13
6113: PUSH
6114: LD_INT 14
6116: PUSH
6117: LD_INT 1
6119: PUSH
6120: LD_INT 2
6122: PUSH
6123: LD_INT 3
6125: PUSH
6126: LD_INT 4
6128: PUSH
6129: LD_INT 5
6131: PUSH
6132: LD_INT 21
6134: PUSH
6135: LD_INT 23
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_INT 24
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: ST_TO_ADDR
6159: GO 6220
6161: LD_INT 3
6163: DOUBLE
6164: EQUAL
6165: IFTRUE 6169
6167: GO 6219
6169: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6170: LD_ADDR_VAR 0 3
6174: PUSH
6175: LD_INT 13
6177: PUSH
6178: LD_INT 14
6180: PUSH
6181: LD_INT 2
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: LD_INT 5
6192: PUSH
6193: LD_INT 21
6195: PUSH
6196: LD_INT 22
6198: PUSH
6199: LD_INT 23
6201: PUSH
6202: LD_INT 24
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: ST_TO_ADDR
6217: GO 6220
6219: POP
// result := ( chassis in result ) ;
6220: LD_ADDR_VAR 0 3
6224: PUSH
6225: LD_VAR 0 1
6229: PUSH
6230: LD_VAR 0 3
6234: IN
6235: ST_TO_ADDR
// end ;
6236: LD_VAR 0 3
6240: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6241: LD_INT 0
6243: PPUSH
// if not chassis or not weapon then
6244: LD_VAR 0 1
6248: NOT
6249: PUSH
6250: LD_VAR 0 2
6254: NOT
6255: OR
6256: IFFALSE 6260
// exit ;
6258: GO 7320
// case weapon of us_machine_gun :
6260: LD_VAR 0 2
6264: PUSH
6265: LD_INT 2
6267: DOUBLE
6268: EQUAL
6269: IFTRUE 6273
6271: GO 6303
6273: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6274: LD_ADDR_VAR 0 3
6278: PUSH
6279: LD_INT 1
6281: PUSH
6282: LD_INT 2
6284: PUSH
6285: LD_INT 3
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 5
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: ST_TO_ADDR
6301: GO 7304
6303: LD_INT 3
6305: DOUBLE
6306: EQUAL
6307: IFTRUE 6311
6309: GO 6341
6311: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6312: LD_ADDR_VAR 0 3
6316: PUSH
6317: LD_INT 1
6319: PUSH
6320: LD_INT 2
6322: PUSH
6323: LD_INT 3
6325: PUSH
6326: LD_INT 4
6328: PUSH
6329: LD_INT 5
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: ST_TO_ADDR
6339: GO 7304
6341: LD_INT 11
6343: DOUBLE
6344: EQUAL
6345: IFTRUE 6349
6347: GO 6379
6349: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6350: LD_ADDR_VAR 0 3
6354: PUSH
6355: LD_INT 1
6357: PUSH
6358: LD_INT 2
6360: PUSH
6361: LD_INT 3
6363: PUSH
6364: LD_INT 4
6366: PUSH
6367: LD_INT 5
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: ST_TO_ADDR
6377: GO 7304
6379: LD_INT 4
6381: DOUBLE
6382: EQUAL
6383: IFTRUE 6387
6385: GO 6413
6387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_INT 2
6395: PUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 4
6401: PUSH
6402: LD_INT 5
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: ST_TO_ADDR
6411: GO 7304
6413: LD_INT 5
6415: DOUBLE
6416: EQUAL
6417: IFTRUE 6421
6419: GO 6447
6421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6422: LD_ADDR_VAR 0 3
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: LD_INT 3
6432: PUSH
6433: LD_INT 4
6435: PUSH
6436: LD_INT 5
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: ST_TO_ADDR
6445: GO 7304
6447: LD_INT 9
6449: DOUBLE
6450: EQUAL
6451: IFTRUE 6455
6453: GO 6481
6455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6456: LD_ADDR_VAR 0 3
6460: PUSH
6461: LD_INT 2
6463: PUSH
6464: LD_INT 3
6466: PUSH
6467: LD_INT 4
6469: PUSH
6470: LD_INT 5
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: ST_TO_ADDR
6479: GO 7304
6481: LD_INT 7
6483: DOUBLE
6484: EQUAL
6485: IFTRUE 6489
6487: GO 6515
6489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6490: LD_ADDR_VAR 0 3
6494: PUSH
6495: LD_INT 2
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: LD_INT 4
6503: PUSH
6504: LD_INT 5
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: ST_TO_ADDR
6513: GO 7304
6515: LD_INT 12
6517: DOUBLE
6518: EQUAL
6519: IFTRUE 6523
6521: GO 6549
6523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6524: LD_ADDR_VAR 0 3
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: LD_INT 4
6537: PUSH
6538: LD_INT 5
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: ST_TO_ADDR
6547: GO 7304
6549: LD_INT 13
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6557
6555: GO 6583
6557: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6558: LD_ADDR_VAR 0 3
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: LD_INT 3
6568: PUSH
6569: LD_INT 4
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: ST_TO_ADDR
6581: GO 7304
6583: LD_INT 14
6585: DOUBLE
6586: EQUAL
6587: IFTRUE 6591
6589: GO 6609
6591: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: LD_INT 4
6599: PUSH
6600: LD_INT 5
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: ST_TO_ADDR
6607: GO 7304
6609: LD_INT 6
6611: DOUBLE
6612: EQUAL
6613: IFTRUE 6617
6615: GO 6635
6617: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: LD_INT 4
6625: PUSH
6626: LD_INT 5
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: ST_TO_ADDR
6633: GO 7304
6635: LD_INT 10
6637: DOUBLE
6638: EQUAL
6639: IFTRUE 6643
6641: GO 6661
6643: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: LD_INT 4
6651: PUSH
6652: LD_INT 5
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: ST_TO_ADDR
6659: GO 7304
6661: LD_INT 22
6663: DOUBLE
6664: EQUAL
6665: IFTRUE 6669
6667: GO 6695
6669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6670: LD_ADDR_VAR 0 3
6674: PUSH
6675: LD_INT 11
6677: PUSH
6678: LD_INT 12
6680: PUSH
6681: LD_INT 13
6683: PUSH
6684: LD_INT 14
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: ST_TO_ADDR
6693: GO 7304
6695: LD_INT 23
6697: DOUBLE
6698: EQUAL
6699: IFTRUE 6703
6701: GO 6729
6703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6704: LD_ADDR_VAR 0 3
6708: PUSH
6709: LD_INT 11
6711: PUSH
6712: LD_INT 12
6714: PUSH
6715: LD_INT 13
6717: PUSH
6718: LD_INT 14
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: ST_TO_ADDR
6727: GO 7304
6729: LD_INT 24
6731: DOUBLE
6732: EQUAL
6733: IFTRUE 6737
6735: GO 6763
6737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: LD_INT 11
6745: PUSH
6746: LD_INT 12
6748: PUSH
6749: LD_INT 13
6751: PUSH
6752: LD_INT 14
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: ST_TO_ADDR
6761: GO 7304
6763: LD_INT 30
6765: DOUBLE
6766: EQUAL
6767: IFTRUE 6771
6769: GO 6797
6771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6772: LD_ADDR_VAR 0 3
6776: PUSH
6777: LD_INT 11
6779: PUSH
6780: LD_INT 12
6782: PUSH
6783: LD_INT 13
6785: PUSH
6786: LD_INT 14
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: ST_TO_ADDR
6795: GO 7304
6797: LD_INT 25
6799: DOUBLE
6800: EQUAL
6801: IFTRUE 6805
6803: GO 6823
6805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6806: LD_ADDR_VAR 0 3
6810: PUSH
6811: LD_INT 13
6813: PUSH
6814: LD_INT 14
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: ST_TO_ADDR
6821: GO 7304
6823: LD_INT 27
6825: DOUBLE
6826: EQUAL
6827: IFTRUE 6831
6829: GO 6849
6831: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6832: LD_ADDR_VAR 0 3
6836: PUSH
6837: LD_INT 13
6839: PUSH
6840: LD_INT 14
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: ST_TO_ADDR
6847: GO 7304
6849: LD_INT 92
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6883
6857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_INT 11
6865: PUSH
6866: LD_INT 12
6868: PUSH
6869: LD_INT 13
6871: PUSH
6872: LD_INT 14
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: ST_TO_ADDR
6881: GO 7304
6883: LD_INT 28
6885: DOUBLE
6886: EQUAL
6887: IFTRUE 6891
6889: GO 6909
6891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6892: LD_ADDR_VAR 0 3
6896: PUSH
6897: LD_INT 13
6899: PUSH
6900: LD_INT 14
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: ST_TO_ADDR
6907: GO 7304
6909: LD_INT 29
6911: DOUBLE
6912: EQUAL
6913: IFTRUE 6917
6915: GO 6935
6917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6918: LD_ADDR_VAR 0 3
6922: PUSH
6923: LD_INT 13
6925: PUSH
6926: LD_INT 14
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: ST_TO_ADDR
6933: GO 7304
6935: LD_INT 31
6937: DOUBLE
6938: EQUAL
6939: IFTRUE 6943
6941: GO 6961
6943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6944: LD_ADDR_VAR 0 3
6948: PUSH
6949: LD_INT 13
6951: PUSH
6952: LD_INT 14
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: ST_TO_ADDR
6959: GO 7304
6961: LD_INT 26
6963: DOUBLE
6964: EQUAL
6965: IFTRUE 6969
6967: GO 6987
6969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6970: LD_ADDR_VAR 0 3
6974: PUSH
6975: LD_INT 13
6977: PUSH
6978: LD_INT 14
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: ST_TO_ADDR
6985: GO 7304
6987: LD_INT 42
6989: DOUBLE
6990: EQUAL
6991: IFTRUE 6995
6993: GO 7021
6995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6996: LD_ADDR_VAR 0 3
7000: PUSH
7001: LD_INT 21
7003: PUSH
7004: LD_INT 22
7006: PUSH
7007: LD_INT 23
7009: PUSH
7010: LD_INT 24
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: ST_TO_ADDR
7019: GO 7304
7021: LD_INT 43
7023: DOUBLE
7024: EQUAL
7025: IFTRUE 7029
7027: GO 7055
7029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7030: LD_ADDR_VAR 0 3
7034: PUSH
7035: LD_INT 21
7037: PUSH
7038: LD_INT 22
7040: PUSH
7041: LD_INT 23
7043: PUSH
7044: LD_INT 24
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: ST_TO_ADDR
7053: GO 7304
7055: LD_INT 44
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7089
7063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7064: LD_ADDR_VAR 0 3
7068: PUSH
7069: LD_INT 21
7071: PUSH
7072: LD_INT 22
7074: PUSH
7075: LD_INT 23
7077: PUSH
7078: LD_INT 24
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: ST_TO_ADDR
7087: GO 7304
7089: LD_INT 45
7091: DOUBLE
7092: EQUAL
7093: IFTRUE 7097
7095: GO 7123
7097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7098: LD_ADDR_VAR 0 3
7102: PUSH
7103: LD_INT 21
7105: PUSH
7106: LD_INT 22
7108: PUSH
7109: LD_INT 23
7111: PUSH
7112: LD_INT 24
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: ST_TO_ADDR
7121: GO 7304
7123: LD_INT 49
7125: DOUBLE
7126: EQUAL
7127: IFTRUE 7131
7129: GO 7157
7131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 22
7142: PUSH
7143: LD_INT 23
7145: PUSH
7146: LD_INT 24
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: ST_TO_ADDR
7155: GO 7304
7157: LD_INT 51
7159: DOUBLE
7160: EQUAL
7161: IFTRUE 7165
7163: GO 7191
7165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7166: LD_ADDR_VAR 0 3
7170: PUSH
7171: LD_INT 21
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_INT 23
7179: PUSH
7180: LD_INT 24
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: ST_TO_ADDR
7189: GO 7304
7191: LD_INT 52
7193: DOUBLE
7194: EQUAL
7195: IFTRUE 7199
7197: GO 7225
7199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7200: LD_ADDR_VAR 0 3
7204: PUSH
7205: LD_INT 21
7207: PUSH
7208: LD_INT 22
7210: PUSH
7211: LD_INT 23
7213: PUSH
7214: LD_INT 24
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: ST_TO_ADDR
7223: GO 7304
7225: LD_INT 53
7227: DOUBLE
7228: EQUAL
7229: IFTRUE 7233
7231: GO 7251
7233: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7234: LD_ADDR_VAR 0 3
7238: PUSH
7239: LD_INT 23
7241: PUSH
7242: LD_INT 24
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: ST_TO_ADDR
7249: GO 7304
7251: LD_INT 46
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7277
7259: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7260: LD_ADDR_VAR 0 3
7264: PUSH
7265: LD_INT 23
7267: PUSH
7268: LD_INT 24
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: ST_TO_ADDR
7275: GO 7304
7277: LD_INT 47
7279: DOUBLE
7280: EQUAL
7281: IFTRUE 7285
7283: GO 7303
7285: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7286: LD_ADDR_VAR 0 3
7290: PUSH
7291: LD_INT 23
7293: PUSH
7294: LD_INT 24
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: ST_TO_ADDR
7301: GO 7304
7303: POP
// result := ( chassis in result ) ;
7304: LD_ADDR_VAR 0 3
7308: PUSH
7309: LD_VAR 0 1
7313: PUSH
7314: LD_VAR 0 3
7318: IN
7319: ST_TO_ADDR
// end ;
7320: LD_VAR 0 3
7324: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7325: LD_INT 0
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
// result := array ;
7334: LD_ADDR_VAR 0 5
7338: PUSH
7339: LD_VAR 0 1
7343: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7344: LD_VAR 0 1
7348: NOT
7349: PUSH
7350: LD_VAR 0 2
7354: NOT
7355: OR
7356: PUSH
7357: LD_VAR 0 3
7361: NOT
7362: OR
7363: PUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 1
7373: GREATER
7374: OR
7375: PUSH
7376: LD_VAR 0 3
7380: PUSH
7381: LD_VAR 0 1
7385: GREATER
7386: OR
7387: IFFALSE 7391
// exit ;
7389: GO 7687
// if direction then
7391: LD_VAR 0 4
7395: IFFALSE 7459
// begin d := 1 ;
7397: LD_ADDR_VAR 0 9
7401: PUSH
7402: LD_INT 1
7404: ST_TO_ADDR
// if i_from > i_to then
7405: LD_VAR 0 2
7409: PUSH
7410: LD_VAR 0 3
7414: GREATER
7415: IFFALSE 7441
// length := ( array - i_from ) + i_to else
7417: LD_ADDR_VAR 0 11
7421: PUSH
7422: LD_VAR 0 1
7426: PUSH
7427: LD_VAR 0 2
7431: MINUS
7432: PUSH
7433: LD_VAR 0 3
7437: PLUS
7438: ST_TO_ADDR
7439: GO 7457
// length := i_to - i_from ;
7441: LD_ADDR_VAR 0 11
7445: PUSH
7446: LD_VAR 0 3
7450: PUSH
7451: LD_VAR 0 2
7455: MINUS
7456: ST_TO_ADDR
// end else
7457: GO 7520
// begin d := - 1 ;
7459: LD_ADDR_VAR 0 9
7463: PUSH
7464: LD_INT 1
7466: NEG
7467: ST_TO_ADDR
// if i_from > i_to then
7468: LD_VAR 0 2
7472: PUSH
7473: LD_VAR 0 3
7477: GREATER
7478: IFFALSE 7498
// length := i_from - i_to else
7480: LD_ADDR_VAR 0 11
7484: PUSH
7485: LD_VAR 0 2
7489: PUSH
7490: LD_VAR 0 3
7494: MINUS
7495: ST_TO_ADDR
7496: GO 7520
// length := ( array - i_to ) + i_from ;
7498: LD_ADDR_VAR 0 11
7502: PUSH
7503: LD_VAR 0 1
7507: PUSH
7508: LD_VAR 0 3
7512: MINUS
7513: PUSH
7514: LD_VAR 0 2
7518: PLUS
7519: ST_TO_ADDR
// end ; if not length then
7520: LD_VAR 0 11
7524: NOT
7525: IFFALSE 7529
// exit ;
7527: GO 7687
// tmp := array ;
7529: LD_ADDR_VAR 0 10
7533: PUSH
7534: LD_VAR 0 1
7538: ST_TO_ADDR
// for i = 1 to length do
7539: LD_ADDR_VAR 0 6
7543: PUSH
7544: DOUBLE
7545: LD_INT 1
7547: DEC
7548: ST_TO_ADDR
7549: LD_VAR 0 11
7553: PUSH
7554: FOR_TO
7555: IFFALSE 7675
// begin for j = 1 to array do
7557: LD_ADDR_VAR 0 7
7561: PUSH
7562: DOUBLE
7563: LD_INT 1
7565: DEC
7566: ST_TO_ADDR
7567: LD_VAR 0 1
7571: PUSH
7572: FOR_TO
7573: IFFALSE 7661
// begin k := j + d ;
7575: LD_ADDR_VAR 0 8
7579: PUSH
7580: LD_VAR 0 7
7584: PUSH
7585: LD_VAR 0 9
7589: PLUS
7590: ST_TO_ADDR
// if k > array then
7591: LD_VAR 0 8
7595: PUSH
7596: LD_VAR 0 1
7600: GREATER
7601: IFFALSE 7611
// k := 1 ;
7603: LD_ADDR_VAR 0 8
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if not k then
7611: LD_VAR 0 8
7615: NOT
7616: IFFALSE 7628
// k := array ;
7618: LD_ADDR_VAR 0 8
7622: PUSH
7623: LD_VAR 0 1
7627: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7628: LD_ADDR_VAR 0 10
7632: PUSH
7633: LD_VAR 0 10
7637: PPUSH
7638: LD_VAR 0 8
7642: PPUSH
7643: LD_VAR 0 1
7647: PUSH
7648: LD_VAR 0 7
7652: ARRAY
7653: PPUSH
7654: CALL_OW 1
7658: ST_TO_ADDR
// end ;
7659: GO 7572
7661: POP
7662: POP
// array := tmp ;
7663: LD_ADDR_VAR 0 1
7667: PUSH
7668: LD_VAR 0 10
7672: ST_TO_ADDR
// end ;
7673: GO 7554
7675: POP
7676: POP
// result := array ;
7677: LD_ADDR_VAR 0 5
7681: PUSH
7682: LD_VAR 0 1
7686: ST_TO_ADDR
// end ;
7687: LD_VAR 0 5
7691: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7692: LD_INT 0
7694: PPUSH
7695: PPUSH
// result := 0 ;
7696: LD_ADDR_VAR 0 3
7700: PUSH
7701: LD_INT 0
7703: ST_TO_ADDR
// if not array or not value in array then
7704: LD_VAR 0 1
7708: NOT
7709: PUSH
7710: LD_VAR 0 2
7714: PUSH
7715: LD_VAR 0 1
7719: IN
7720: NOT
7721: OR
7722: IFFALSE 7726
// exit ;
7724: GO 7780
// for i = 1 to array do
7726: LD_ADDR_VAR 0 4
7730: PUSH
7731: DOUBLE
7732: LD_INT 1
7734: DEC
7735: ST_TO_ADDR
7736: LD_VAR 0 1
7740: PUSH
7741: FOR_TO
7742: IFFALSE 7778
// if value = array [ i ] then
7744: LD_VAR 0 2
7748: PUSH
7749: LD_VAR 0 1
7753: PUSH
7754: LD_VAR 0 4
7758: ARRAY
7759: EQUAL
7760: IFFALSE 7776
// begin result := i ;
7762: LD_ADDR_VAR 0 3
7766: PUSH
7767: LD_VAR 0 4
7771: ST_TO_ADDR
// exit ;
7772: POP
7773: POP
7774: GO 7780
// end ;
7776: GO 7741
7778: POP
7779: POP
// end ;
7780: LD_VAR 0 3
7784: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7785: LD_INT 0
7787: PPUSH
// vc_chassis := chassis ;
7788: LD_ADDR_OWVAR 37
7792: PUSH
7793: LD_VAR 0 1
7797: ST_TO_ADDR
// vc_engine := engine ;
7798: LD_ADDR_OWVAR 39
7802: PUSH
7803: LD_VAR 0 2
7807: ST_TO_ADDR
// vc_control := control ;
7808: LD_ADDR_OWVAR 38
7812: PUSH
7813: LD_VAR 0 3
7817: ST_TO_ADDR
// vc_weapon := weapon ;
7818: LD_ADDR_OWVAR 40
7822: PUSH
7823: LD_VAR 0 4
7827: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7828: LD_ADDR_OWVAR 41
7832: PUSH
7833: LD_VAR 0 5
7837: ST_TO_ADDR
// end ;
7838: LD_VAR 0 6
7842: RET
// export function WantPlant ( unit ) ; var task ; begin
7843: LD_INT 0
7845: PPUSH
7846: PPUSH
// result := false ;
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_INT 0
7854: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7855: LD_ADDR_VAR 0 3
7859: PUSH
7860: LD_VAR 0 1
7864: PPUSH
7865: CALL_OW 437
7869: ST_TO_ADDR
// if task then
7870: LD_VAR 0 3
7874: IFFALSE 7902
// if task [ 1 ] [ 1 ] = p then
7876: LD_VAR 0 3
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PUSH
7889: LD_STRING p
7891: EQUAL
7892: IFFALSE 7902
// result := true ;
7894: LD_ADDR_VAR 0 2
7898: PUSH
7899: LD_INT 1
7901: ST_TO_ADDR
// end ;
7902: LD_VAR 0 2
7906: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7907: LD_INT 0
7909: PPUSH
7910: PPUSH
7911: PPUSH
7912: PPUSH
// if pos < 1 then
7913: LD_VAR 0 2
7917: PUSH
7918: LD_INT 1
7920: LESS
7921: IFFALSE 7925
// exit ;
7923: GO 8228
// if pos = 1 then
7925: LD_VAR 0 2
7929: PUSH
7930: LD_INT 1
7932: EQUAL
7933: IFFALSE 7966
// result := Replace ( arr , pos [ 1 ] , value ) else
7935: LD_ADDR_VAR 0 4
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: LD_VAR 0 2
7949: PUSH
7950: LD_INT 1
7952: ARRAY
7953: PPUSH
7954: LD_VAR 0 3
7958: PPUSH
7959: CALL_OW 1
7963: ST_TO_ADDR
7964: GO 8228
// begin tmp := arr ;
7966: LD_ADDR_VAR 0 6
7970: PUSH
7971: LD_VAR 0 1
7975: ST_TO_ADDR
// s_arr := [ tmp ] ;
7976: LD_ADDR_VAR 0 7
7980: PUSH
7981: LD_VAR 0 6
7985: PUSH
7986: EMPTY
7987: LIST
7988: ST_TO_ADDR
// for i = 1 to pos - 1 do
7989: LD_ADDR_VAR 0 5
7993: PUSH
7994: DOUBLE
7995: LD_INT 1
7997: DEC
7998: ST_TO_ADDR
7999: LD_VAR 0 2
8003: PUSH
8004: LD_INT 1
8006: MINUS
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8054
// begin tmp := tmp [ pos [ i ] ] ;
8011: LD_ADDR_VAR 0 6
8015: PUSH
8016: LD_VAR 0 6
8020: PUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_VAR 0 5
8030: ARRAY
8031: ARRAY
8032: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8033: LD_ADDR_VAR 0 7
8037: PUSH
8038: LD_VAR 0 7
8042: PUSH
8043: LD_VAR 0 6
8047: PUSH
8048: EMPTY
8049: LIST
8050: ADD
8051: ST_TO_ADDR
// end ;
8052: GO 8008
8054: POP
8055: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8056: LD_ADDR_VAR 0 6
8060: PUSH
8061: LD_VAR 0 6
8065: PPUSH
8066: LD_VAR 0 2
8070: PUSH
8071: LD_VAR 0 2
8075: ARRAY
8076: PPUSH
8077: LD_VAR 0 3
8081: PPUSH
8082: CALL_OW 1
8086: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8087: LD_ADDR_VAR 0 7
8091: PUSH
8092: LD_VAR 0 7
8096: PPUSH
8097: LD_VAR 0 7
8101: PPUSH
8102: LD_VAR 0 6
8106: PPUSH
8107: CALL_OW 1
8111: ST_TO_ADDR
// for i = s_arr downto 2 do
8112: LD_ADDR_VAR 0 5
8116: PUSH
8117: DOUBLE
8118: LD_VAR 0 7
8122: INC
8123: ST_TO_ADDR
8124: LD_INT 2
8126: PUSH
8127: FOR_DOWNTO
8128: IFFALSE 8212
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8130: LD_ADDR_VAR 0 6
8134: PUSH
8135: LD_VAR 0 7
8139: PUSH
8140: LD_VAR 0 5
8144: PUSH
8145: LD_INT 1
8147: MINUS
8148: ARRAY
8149: PPUSH
8150: LD_VAR 0 2
8154: PUSH
8155: LD_VAR 0 5
8159: PUSH
8160: LD_INT 1
8162: MINUS
8163: ARRAY
8164: PPUSH
8165: LD_VAR 0 7
8169: PUSH
8170: LD_VAR 0 5
8174: ARRAY
8175: PPUSH
8176: CALL_OW 1
8180: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8181: LD_ADDR_VAR 0 7
8185: PUSH
8186: LD_VAR 0 7
8190: PPUSH
8191: LD_VAR 0 5
8195: PUSH
8196: LD_INT 1
8198: MINUS
8199: PPUSH
8200: LD_VAR 0 6
8204: PPUSH
8205: CALL_OW 1
8209: ST_TO_ADDR
// end ;
8210: GO 8127
8212: POP
8213: POP
// result := s_arr [ 1 ] ;
8214: LD_ADDR_VAR 0 4
8218: PUSH
8219: LD_VAR 0 7
8223: PUSH
8224: LD_INT 1
8226: ARRAY
8227: ST_TO_ADDR
// end ; end ;
8228: LD_VAR 0 4
8232: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8233: LD_INT 0
8235: PPUSH
8236: PPUSH
// if not list then
8237: LD_VAR 0 1
8241: NOT
8242: IFFALSE 8246
// exit ;
8244: GO 8337
// i := list [ pos1 ] ;
8246: LD_ADDR_VAR 0 5
8250: PUSH
8251: LD_VAR 0 1
8255: PUSH
8256: LD_VAR 0 2
8260: ARRAY
8261: ST_TO_ADDR
// if not i then
8262: LD_VAR 0 5
8266: NOT
8267: IFFALSE 8271
// exit ;
8269: GO 8337
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8271: LD_ADDR_VAR 0 1
8275: PUSH
8276: LD_VAR 0 1
8280: PPUSH
8281: LD_VAR 0 2
8285: PPUSH
8286: LD_VAR 0 1
8290: PUSH
8291: LD_VAR 0 3
8295: ARRAY
8296: PPUSH
8297: CALL_OW 1
8301: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8302: LD_ADDR_VAR 0 1
8306: PUSH
8307: LD_VAR 0 1
8311: PPUSH
8312: LD_VAR 0 3
8316: PPUSH
8317: LD_VAR 0 5
8321: PPUSH
8322: CALL_OW 1
8326: ST_TO_ADDR
// result := list ;
8327: LD_ADDR_VAR 0 4
8331: PUSH
8332: LD_VAR 0 1
8336: ST_TO_ADDR
// end ;
8337: LD_VAR 0 4
8341: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8342: LD_INT 0
8344: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8345: LD_ADDR_VAR 0 5
8349: PUSH
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 250
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: CALL_OW 251
8369: PPUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: LD_VAR 0 3
8379: PPUSH
8380: LD_VAR 0 4
8384: PPUSH
8385: CALL 8395 0 5
8389: ST_TO_ADDR
// end ;
8390: LD_VAR 0 5
8394: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8395: LD_INT 0
8397: PPUSH
8398: PPUSH
8399: PPUSH
8400: PPUSH
// if not list then
8401: LD_VAR 0 3
8405: NOT
8406: IFFALSE 8410
// exit ;
8408: GO 8798
// result := [ ] ;
8410: LD_ADDR_VAR 0 6
8414: PUSH
8415: EMPTY
8416: ST_TO_ADDR
// for i in list do
8417: LD_ADDR_VAR 0 7
8421: PUSH
8422: LD_VAR 0 3
8426: PUSH
8427: FOR_IN
8428: IFFALSE 8630
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8430: LD_ADDR_VAR 0 9
8434: PUSH
8435: LD_VAR 0 7
8439: PPUSH
8440: LD_VAR 0 1
8444: PPUSH
8445: LD_VAR 0 2
8449: PPUSH
8450: CALL_OW 297
8454: ST_TO_ADDR
// if not result then
8455: LD_VAR 0 6
8459: NOT
8460: IFFALSE 8486
// result := [ [ i , tmp ] ] else
8462: LD_ADDR_VAR 0 6
8466: PUSH
8467: LD_VAR 0 7
8471: PUSH
8472: LD_VAR 0 9
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: ST_TO_ADDR
8484: GO 8628
// begin if result [ result ] [ 2 ] < tmp then
8486: LD_VAR 0 6
8490: PUSH
8491: LD_VAR 0 6
8495: ARRAY
8496: PUSH
8497: LD_INT 2
8499: ARRAY
8500: PUSH
8501: LD_VAR 0 9
8505: LESS
8506: IFFALSE 8548
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8508: LD_ADDR_VAR 0 6
8512: PUSH
8513: LD_VAR 0 6
8517: PPUSH
8518: LD_VAR 0 6
8522: PUSH
8523: LD_INT 1
8525: PLUS
8526: PPUSH
8527: LD_VAR 0 7
8531: PUSH
8532: LD_VAR 0 9
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PPUSH
8541: CALL_OW 2
8545: ST_TO_ADDR
8546: GO 8628
// for j = 1 to result do
8548: LD_ADDR_VAR 0 8
8552: PUSH
8553: DOUBLE
8554: LD_INT 1
8556: DEC
8557: ST_TO_ADDR
8558: LD_VAR 0 6
8562: PUSH
8563: FOR_TO
8564: IFFALSE 8626
// begin if tmp < result [ j ] [ 2 ] then
8566: LD_VAR 0 9
8570: PUSH
8571: LD_VAR 0 6
8575: PUSH
8576: LD_VAR 0 8
8580: ARRAY
8581: PUSH
8582: LD_INT 2
8584: ARRAY
8585: LESS
8586: IFFALSE 8624
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8588: LD_ADDR_VAR 0 6
8592: PUSH
8593: LD_VAR 0 6
8597: PPUSH
8598: LD_VAR 0 8
8602: PPUSH
8603: LD_VAR 0 7
8607: PUSH
8608: LD_VAR 0 9
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 2
8621: ST_TO_ADDR
// break ;
8622: GO 8626
// end ; end ;
8624: GO 8563
8626: POP
8627: POP
// end ; end ;
8628: GO 8427
8630: POP
8631: POP
// if result and not asc then
8632: LD_VAR 0 6
8636: PUSH
8637: LD_VAR 0 4
8641: NOT
8642: AND
8643: IFFALSE 8718
// begin tmp := result ;
8645: LD_ADDR_VAR 0 9
8649: PUSH
8650: LD_VAR 0 6
8654: ST_TO_ADDR
// for i = tmp downto 1 do
8655: LD_ADDR_VAR 0 7
8659: PUSH
8660: DOUBLE
8661: LD_VAR 0 9
8665: INC
8666: ST_TO_ADDR
8667: LD_INT 1
8669: PUSH
8670: FOR_DOWNTO
8671: IFFALSE 8716
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8673: LD_ADDR_VAR 0 6
8677: PUSH
8678: LD_VAR 0 6
8682: PPUSH
8683: LD_VAR 0 9
8687: PUSH
8688: LD_VAR 0 7
8692: MINUS
8693: PUSH
8694: LD_INT 1
8696: PLUS
8697: PPUSH
8698: LD_VAR 0 9
8702: PUSH
8703: LD_VAR 0 7
8707: ARRAY
8708: PPUSH
8709: CALL_OW 1
8713: ST_TO_ADDR
8714: GO 8670
8716: POP
8717: POP
// end ; tmp := [ ] ;
8718: LD_ADDR_VAR 0 9
8722: PUSH
8723: EMPTY
8724: ST_TO_ADDR
// if mode then
8725: LD_VAR 0 5
8729: IFFALSE 8798
// begin for i = 1 to result do
8731: LD_ADDR_VAR 0 7
8735: PUSH
8736: DOUBLE
8737: LD_INT 1
8739: DEC
8740: ST_TO_ADDR
8741: LD_VAR 0 6
8745: PUSH
8746: FOR_TO
8747: IFFALSE 8786
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8749: LD_ADDR_VAR 0 9
8753: PUSH
8754: LD_VAR 0 9
8758: PPUSH
8759: LD_VAR 0 7
8763: PPUSH
8764: LD_VAR 0 6
8768: PUSH
8769: LD_VAR 0 7
8773: ARRAY
8774: PUSH
8775: LD_INT 1
8777: ARRAY
8778: PPUSH
8779: CALL_OW 1
8783: ST_TO_ADDR
8784: GO 8746
8786: POP
8787: POP
// result := tmp ;
8788: LD_ADDR_VAR 0 6
8792: PUSH
8793: LD_VAR 0 9
8797: ST_TO_ADDR
// end ; end ;
8798: LD_VAR 0 6
8802: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8803: LD_INT 0
8805: PPUSH
8806: PPUSH
8807: PPUSH
8808: PPUSH
8809: PPUSH
8810: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8811: LD_ADDR_VAR 0 5
8815: PUSH
8816: LD_INT 0
8818: PUSH
8819: LD_INT 0
8821: PUSH
8822: LD_INT 0
8824: PUSH
8825: EMPTY
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: ST_TO_ADDR
// if not x or not y then
8833: LD_VAR 0 2
8837: NOT
8838: PUSH
8839: LD_VAR 0 3
8843: NOT
8844: OR
8845: IFFALSE 8849
// exit ;
8847: GO 10499
// if not range then
8849: LD_VAR 0 4
8853: NOT
8854: IFFALSE 8864
// range := 10 ;
8856: LD_ADDR_VAR 0 4
8860: PUSH
8861: LD_INT 10
8863: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8864: LD_ADDR_VAR 0 8
8868: PUSH
8869: LD_INT 81
8871: PUSH
8872: LD_VAR 0 1
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 92
8883: PUSH
8884: LD_VAR 0 2
8888: PUSH
8889: LD_VAR 0 3
8893: PUSH
8894: LD_VAR 0 4
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 3
8907: PUSH
8908: LD_INT 21
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: ST_TO_ADDR
// if not tmp then
8932: LD_VAR 0 8
8936: NOT
8937: IFFALSE 8941
// exit ;
8939: GO 10499
// for i in tmp do
8941: LD_ADDR_VAR 0 6
8945: PUSH
8946: LD_VAR 0 8
8950: PUSH
8951: FOR_IN
8952: IFFALSE 10474
// begin points := [ 0 , 0 , 0 ] ;
8954: LD_ADDR_VAR 0 9
8958: PUSH
8959: LD_INT 0
8961: PUSH
8962: LD_INT 0
8964: PUSH
8965: LD_INT 0
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: ST_TO_ADDR
// bpoints := 1 ;
8973: LD_ADDR_VAR 0 10
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8981: LD_VAR 0 6
8985: PPUSH
8986: CALL_OW 247
8990: PUSH
8991: LD_INT 1
8993: DOUBLE
8994: EQUAL
8995: IFTRUE 8999
8997: GO 9577
8999: POP
// begin if GetClass ( i ) = 1 then
9000: LD_VAR 0 6
9004: PPUSH
9005: CALL_OW 257
9009: PUSH
9010: LD_INT 1
9012: EQUAL
9013: IFFALSE 9034
// points := [ 10 , 5 , 3 ] ;
9015: LD_ADDR_VAR 0 9
9019: PUSH
9020: LD_INT 10
9022: PUSH
9023: LD_INT 5
9025: PUSH
9026: LD_INT 3
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: LIST
9033: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9034: LD_VAR 0 6
9038: PPUSH
9039: CALL_OW 257
9043: PUSH
9044: LD_INT 2
9046: PUSH
9047: LD_INT 3
9049: PUSH
9050: LD_INT 4
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: IN
9058: IFFALSE 9079
// points := [ 3 , 2 , 1 ] ;
9060: LD_ADDR_VAR 0 9
9064: PUSH
9065: LD_INT 3
9067: PUSH
9068: LD_INT 2
9070: PUSH
9071: LD_INT 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: LIST
9078: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9079: LD_VAR 0 6
9083: PPUSH
9084: CALL_OW 257
9088: PUSH
9089: LD_INT 5
9091: EQUAL
9092: IFFALSE 9113
// points := [ 130 , 5 , 2 ] ;
9094: LD_ADDR_VAR 0 9
9098: PUSH
9099: LD_INT 130
9101: PUSH
9102: LD_INT 5
9104: PUSH
9105: LD_INT 2
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9113: LD_VAR 0 6
9117: PPUSH
9118: CALL_OW 257
9122: PUSH
9123: LD_INT 8
9125: EQUAL
9126: IFFALSE 9147
// points := [ 35 , 35 , 30 ] ;
9128: LD_ADDR_VAR 0 9
9132: PUSH
9133: LD_INT 35
9135: PUSH
9136: LD_INT 35
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9147: LD_VAR 0 6
9151: PPUSH
9152: CALL_OW 257
9156: PUSH
9157: LD_INT 9
9159: EQUAL
9160: IFFALSE 9181
// points := [ 20 , 55 , 40 ] ;
9162: LD_ADDR_VAR 0 9
9166: PUSH
9167: LD_INT 20
9169: PUSH
9170: LD_INT 55
9172: PUSH
9173: LD_INT 40
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9181: LD_VAR 0 6
9185: PPUSH
9186: CALL_OW 257
9190: PUSH
9191: LD_INT 12
9193: PUSH
9194: LD_INT 16
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: IN
9201: IFFALSE 9222
// points := [ 5 , 3 , 2 ] ;
9203: LD_ADDR_VAR 0 9
9207: PUSH
9208: LD_INT 5
9210: PUSH
9211: LD_INT 3
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9222: LD_VAR 0 6
9226: PPUSH
9227: CALL_OW 257
9231: PUSH
9232: LD_INT 17
9234: EQUAL
9235: IFFALSE 9256
// points := [ 100 , 50 , 75 ] ;
9237: LD_ADDR_VAR 0 9
9241: PUSH
9242: LD_INT 100
9244: PUSH
9245: LD_INT 50
9247: PUSH
9248: LD_INT 75
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9256: LD_VAR 0 6
9260: PPUSH
9261: CALL_OW 257
9265: PUSH
9266: LD_INT 15
9268: EQUAL
9269: IFFALSE 9290
// points := [ 10 , 5 , 3 ] ;
9271: LD_ADDR_VAR 0 9
9275: PUSH
9276: LD_INT 10
9278: PUSH
9279: LD_INT 5
9281: PUSH
9282: LD_INT 3
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9290: LD_VAR 0 6
9294: PPUSH
9295: CALL_OW 257
9299: PUSH
9300: LD_INT 14
9302: EQUAL
9303: IFFALSE 9324
// points := [ 10 , 0 , 0 ] ;
9305: LD_ADDR_VAR 0 9
9309: PUSH
9310: LD_INT 10
9312: PUSH
9313: LD_INT 0
9315: PUSH
9316: LD_INT 0
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9324: LD_VAR 0 6
9328: PPUSH
9329: CALL_OW 257
9333: PUSH
9334: LD_INT 11
9336: EQUAL
9337: IFFALSE 9358
// points := [ 30 , 10 , 5 ] ;
9339: LD_ADDR_VAR 0 9
9343: PUSH
9344: LD_INT 30
9346: PUSH
9347: LD_INT 10
9349: PUSH
9350: LD_INT 5
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_INT 5
9365: PPUSH
9366: CALL_OW 321
9370: PUSH
9371: LD_INT 2
9373: EQUAL
9374: IFFALSE 9391
// bpoints := bpoints * 1.8 ;
9376: LD_ADDR_VAR 0 10
9380: PUSH
9381: LD_VAR 0 10
9385: PUSH
9386: LD_REAL  1.80000000000000E+0000
9389: MUL
9390: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9391: LD_VAR 0 6
9395: PPUSH
9396: CALL_OW 257
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: LD_INT 4
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: IN
9419: PUSH
9420: LD_VAR 0 1
9424: PPUSH
9425: LD_INT 51
9427: PPUSH
9428: CALL_OW 321
9432: PUSH
9433: LD_INT 2
9435: EQUAL
9436: AND
9437: IFFALSE 9454
// bpoints := bpoints * 1.2 ;
9439: LD_ADDR_VAR 0 10
9443: PUSH
9444: LD_VAR 0 10
9448: PUSH
9449: LD_REAL  1.20000000000000E+0000
9452: MUL
9453: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9454: LD_VAR 0 6
9458: PPUSH
9459: CALL_OW 257
9463: PUSH
9464: LD_INT 5
9466: PUSH
9467: LD_INT 7
9469: PUSH
9470: LD_INT 9
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: IN
9478: PUSH
9479: LD_VAR 0 1
9483: PPUSH
9484: LD_INT 52
9486: PPUSH
9487: CALL_OW 321
9491: PUSH
9492: LD_INT 2
9494: EQUAL
9495: AND
9496: IFFALSE 9513
// bpoints := bpoints * 1.5 ;
9498: LD_ADDR_VAR 0 10
9502: PUSH
9503: LD_VAR 0 10
9507: PUSH
9508: LD_REAL  1.50000000000000E+0000
9511: MUL
9512: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9513: LD_VAR 0 1
9517: PPUSH
9518: LD_INT 66
9520: PPUSH
9521: CALL_OW 321
9525: PUSH
9526: LD_INT 2
9528: EQUAL
9529: IFFALSE 9546
// bpoints := bpoints * 1.1 ;
9531: LD_ADDR_VAR 0 10
9535: PUSH
9536: LD_VAR 0 10
9540: PUSH
9541: LD_REAL  1.10000000000000E+0000
9544: MUL
9545: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9546: LD_ADDR_VAR 0 10
9550: PUSH
9551: LD_VAR 0 10
9555: PUSH
9556: LD_VAR 0 6
9560: PPUSH
9561: LD_INT 1
9563: PPUSH
9564: CALL_OW 259
9568: PUSH
9569: LD_REAL  1.15000000000000E+0000
9572: MUL
9573: MUL
9574: ST_TO_ADDR
// end ; unit_vehicle :
9575: GO 10403
9577: LD_INT 2
9579: DOUBLE
9580: EQUAL
9581: IFTRUE 9585
9583: GO 10391
9585: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9586: LD_VAR 0 6
9590: PPUSH
9591: CALL_OW 264
9595: PUSH
9596: LD_INT 2
9598: PUSH
9599: LD_INT 42
9601: PUSH
9602: LD_INT 24
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: IN
9610: IFFALSE 9631
// points := [ 25 , 5 , 3 ] ;
9612: LD_ADDR_VAR 0 9
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 5
9622: PUSH
9623: LD_INT 3
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: LIST
9630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9631: LD_VAR 0 6
9635: PPUSH
9636: CALL_OW 264
9640: PUSH
9641: LD_INT 4
9643: PUSH
9644: LD_INT 43
9646: PUSH
9647: LD_INT 25
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: IN
9655: IFFALSE 9676
// points := [ 40 , 15 , 5 ] ;
9657: LD_ADDR_VAR 0 9
9661: PUSH
9662: LD_INT 40
9664: PUSH
9665: LD_INT 15
9667: PUSH
9668: LD_INT 5
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9676: LD_VAR 0 6
9680: PPUSH
9681: CALL_OW 264
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 23
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: IN
9696: IFFALSE 9717
// points := [ 7 , 25 , 8 ] ;
9698: LD_ADDR_VAR 0 9
9702: PUSH
9703: LD_INT 7
9705: PUSH
9706: LD_INT 25
9708: PUSH
9709: LD_INT 8
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9717: LD_VAR 0 6
9721: PPUSH
9722: CALL_OW 264
9726: PUSH
9727: LD_INT 5
9729: PUSH
9730: LD_INT 27
9732: PUSH
9733: LD_INT 44
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: IN
9741: IFFALSE 9762
// points := [ 14 , 50 , 16 ] ;
9743: LD_ADDR_VAR 0 9
9747: PUSH
9748: LD_INT 14
9750: PUSH
9751: LD_INT 50
9753: PUSH
9754: LD_INT 16
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9762: LD_VAR 0 6
9766: PPUSH
9767: CALL_OW 264
9771: PUSH
9772: LD_INT 6
9774: PUSH
9775: LD_INT 46
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: IN
9782: IFFALSE 9803
// points := [ 32 , 120 , 70 ] ;
9784: LD_ADDR_VAR 0 9
9788: PUSH
9789: LD_INT 32
9791: PUSH
9792: LD_INT 120
9794: PUSH
9795: LD_INT 70
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9803: LD_VAR 0 6
9807: PPUSH
9808: CALL_OW 264
9812: PUSH
9813: LD_INT 7
9815: PUSH
9816: LD_INT 28
9818: PUSH
9819: LD_INT 45
9821: PUSH
9822: LD_INT 92
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: IN
9831: IFFALSE 9852
// points := [ 35 , 20 , 45 ] ;
9833: LD_ADDR_VAR 0 9
9837: PUSH
9838: LD_INT 35
9840: PUSH
9841: LD_INT 20
9843: PUSH
9844: LD_INT 45
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9852: LD_VAR 0 6
9856: PPUSH
9857: CALL_OW 264
9861: PUSH
9862: LD_INT 47
9864: PUSH
9865: EMPTY
9866: LIST
9867: IN
9868: IFFALSE 9889
// points := [ 67 , 45 , 75 ] ;
9870: LD_ADDR_VAR 0 9
9874: PUSH
9875: LD_INT 67
9877: PUSH
9878: LD_INT 45
9880: PUSH
9881: LD_INT 75
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9889: LD_VAR 0 6
9893: PPUSH
9894: CALL_OW 264
9898: PUSH
9899: LD_INT 26
9901: PUSH
9902: EMPTY
9903: LIST
9904: IN
9905: IFFALSE 9926
// points := [ 120 , 30 , 80 ] ;
9907: LD_ADDR_VAR 0 9
9911: PUSH
9912: LD_INT 120
9914: PUSH
9915: LD_INT 30
9917: PUSH
9918: LD_INT 80
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9926: LD_VAR 0 6
9930: PPUSH
9931: CALL_OW 264
9935: PUSH
9936: LD_INT 22
9938: PUSH
9939: EMPTY
9940: LIST
9941: IN
9942: IFFALSE 9963
// points := [ 40 , 1 , 1 ] ;
9944: LD_ADDR_VAR 0 9
9948: PUSH
9949: LD_INT 40
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: LD_INT 1
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9963: LD_VAR 0 6
9967: PPUSH
9968: CALL_OW 264
9972: PUSH
9973: LD_INT 29
9975: PUSH
9976: EMPTY
9977: LIST
9978: IN
9979: IFFALSE 10000
// points := [ 70 , 200 , 400 ] ;
9981: LD_ADDR_VAR 0 9
9985: PUSH
9986: LD_INT 70
9988: PUSH
9989: LD_INT 200
9991: PUSH
9992: LD_INT 400
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10000: LD_VAR 0 6
10004: PPUSH
10005: CALL_OW 264
10009: PUSH
10010: LD_INT 14
10012: PUSH
10013: LD_INT 53
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: IN
10020: IFFALSE 10041
// points := [ 40 , 10 , 20 ] ;
10022: LD_ADDR_VAR 0 9
10026: PUSH
10027: LD_INT 40
10029: PUSH
10030: LD_INT 10
10032: PUSH
10033: LD_INT 20
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10041: LD_VAR 0 6
10045: PPUSH
10046: CALL_OW 264
10050: PUSH
10051: LD_INT 9
10053: PUSH
10054: EMPTY
10055: LIST
10056: IN
10057: IFFALSE 10078
// points := [ 5 , 70 , 20 ] ;
10059: LD_ADDR_VAR 0 9
10063: PUSH
10064: LD_INT 5
10066: PUSH
10067: LD_INT 70
10069: PUSH
10070: LD_INT 20
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: LIST
10077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10078: LD_VAR 0 6
10082: PPUSH
10083: CALL_OW 264
10087: PUSH
10088: LD_INT 10
10090: PUSH
10091: EMPTY
10092: LIST
10093: IN
10094: IFFALSE 10115
// points := [ 35 , 110 , 70 ] ;
10096: LD_ADDR_VAR 0 9
10100: PUSH
10101: LD_INT 35
10103: PUSH
10104: LD_INT 110
10106: PUSH
10107: LD_INT 70
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10115: LD_VAR 0 6
10119: PPUSH
10120: CALL_OW 265
10124: PUSH
10125: LD_INT 25
10127: EQUAL
10128: IFFALSE 10149
// points := [ 80 , 65 , 100 ] ;
10130: LD_ADDR_VAR 0 9
10134: PUSH
10135: LD_INT 80
10137: PUSH
10138: LD_INT 65
10140: PUSH
10141: LD_INT 100
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10149: LD_VAR 0 6
10153: PPUSH
10154: CALL_OW 263
10158: PUSH
10159: LD_INT 1
10161: EQUAL
10162: IFFALSE 10197
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10164: LD_ADDR_VAR 0 10
10168: PUSH
10169: LD_VAR 0 10
10173: PUSH
10174: LD_VAR 0 6
10178: PPUSH
10179: CALL_OW 311
10183: PPUSH
10184: LD_INT 3
10186: PPUSH
10187: CALL_OW 259
10191: PUSH
10192: LD_INT 4
10194: MUL
10195: MUL
10196: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10197: LD_VAR 0 6
10201: PPUSH
10202: CALL_OW 263
10206: PUSH
10207: LD_INT 2
10209: EQUAL
10210: IFFALSE 10261
// begin j := IsControledBy ( i ) ;
10212: LD_ADDR_VAR 0 7
10216: PUSH
10217: LD_VAR 0 6
10221: PPUSH
10222: CALL_OW 312
10226: ST_TO_ADDR
// if j then
10227: LD_VAR 0 7
10231: IFFALSE 10261
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10233: LD_ADDR_VAR 0 10
10237: PUSH
10238: LD_VAR 0 10
10242: PUSH
10243: LD_VAR 0 7
10247: PPUSH
10248: LD_INT 3
10250: PPUSH
10251: CALL_OW 259
10255: PUSH
10256: LD_INT 3
10258: MUL
10259: MUL
10260: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10261: LD_VAR 0 6
10265: PPUSH
10266: CALL_OW 264
10270: PUSH
10271: LD_INT 5
10273: PUSH
10274: LD_INT 6
10276: PUSH
10277: LD_INT 46
10279: PUSH
10280: LD_INT 44
10282: PUSH
10283: LD_INT 47
10285: PUSH
10286: LD_INT 45
10288: PUSH
10289: LD_INT 28
10291: PUSH
10292: LD_INT 7
10294: PUSH
10295: LD_INT 27
10297: PUSH
10298: LD_INT 29
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: IN
10313: PUSH
10314: LD_VAR 0 1
10318: PPUSH
10319: LD_INT 52
10321: PPUSH
10322: CALL_OW 321
10326: PUSH
10327: LD_INT 2
10329: EQUAL
10330: AND
10331: IFFALSE 10348
// bpoints := bpoints * 1.2 ;
10333: LD_ADDR_VAR 0 10
10337: PUSH
10338: LD_VAR 0 10
10342: PUSH
10343: LD_REAL  1.20000000000000E+0000
10346: MUL
10347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10348: LD_VAR 0 6
10352: PPUSH
10353: CALL_OW 264
10357: PUSH
10358: LD_INT 6
10360: PUSH
10361: LD_INT 46
10363: PUSH
10364: LD_INT 47
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: IN
10372: IFFALSE 10389
// bpoints := bpoints * 1.2 ;
10374: LD_ADDR_VAR 0 10
10378: PUSH
10379: LD_VAR 0 10
10383: PUSH
10384: LD_REAL  1.20000000000000E+0000
10387: MUL
10388: ST_TO_ADDR
// end ; unit_building :
10389: GO 10403
10391: LD_INT 3
10393: DOUBLE
10394: EQUAL
10395: IFTRUE 10399
10397: GO 10402
10399: POP
// ; end ;
10400: GO 10403
10402: POP
// for j = 1 to 3 do
10403: LD_ADDR_VAR 0 7
10407: PUSH
10408: DOUBLE
10409: LD_INT 1
10411: DEC
10412: ST_TO_ADDR
10413: LD_INT 3
10415: PUSH
10416: FOR_TO
10417: IFFALSE 10470
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10419: LD_ADDR_VAR 0 5
10423: PUSH
10424: LD_VAR 0 5
10428: PPUSH
10429: LD_VAR 0 7
10433: PPUSH
10434: LD_VAR 0 5
10438: PUSH
10439: LD_VAR 0 7
10443: ARRAY
10444: PUSH
10445: LD_VAR 0 9
10449: PUSH
10450: LD_VAR 0 7
10454: ARRAY
10455: PUSH
10456: LD_VAR 0 10
10460: MUL
10461: PLUS
10462: PPUSH
10463: CALL_OW 1
10467: ST_TO_ADDR
10468: GO 10416
10470: POP
10471: POP
// end ;
10472: GO 8951
10474: POP
10475: POP
// result := Replace ( result , 4 , tmp ) ;
10476: LD_ADDR_VAR 0 5
10480: PUSH
10481: LD_VAR 0 5
10485: PPUSH
10486: LD_INT 4
10488: PPUSH
10489: LD_VAR 0 8
10493: PPUSH
10494: CALL_OW 1
10498: ST_TO_ADDR
// end ;
10499: LD_VAR 0 5
10503: RET
// export function DangerAtRange ( unit , range ) ; begin
10504: LD_INT 0
10506: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10507: LD_ADDR_VAR 0 3
10511: PUSH
10512: LD_VAR 0 1
10516: PPUSH
10517: CALL_OW 255
10521: PPUSH
10522: LD_VAR 0 1
10526: PPUSH
10527: CALL_OW 250
10531: PPUSH
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 251
10541: PPUSH
10542: LD_VAR 0 2
10546: PPUSH
10547: CALL 8803 0 4
10551: ST_TO_ADDR
// end ;
10552: LD_VAR 0 3
10556: RET
// export function DangerInArea ( side , area ) ; begin
10557: LD_INT 0
10559: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10560: LD_ADDR_VAR 0 3
10564: PUSH
10565: LD_VAR 0 2
10569: PPUSH
10570: LD_INT 81
10572: PUSH
10573: LD_VAR 0 1
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 70
10586: ST_TO_ADDR
// end ;
10587: LD_VAR 0 3
10591: RET
// export function IsExtension ( b ) ; begin
10592: LD_INT 0
10594: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_VAR 0 1
10604: PUSH
10605: LD_INT 23
10607: PUSH
10608: LD_INT 20
10610: PUSH
10611: LD_INT 22
10613: PUSH
10614: LD_INT 17
10616: PUSH
10617: LD_INT 24
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 19
10625: PUSH
10626: LD_INT 16
10628: PUSH
10629: LD_INT 25
10631: PUSH
10632: LD_INT 18
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: IN
10647: ST_TO_ADDR
// end ;
10648: LD_VAR 0 2
10652: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10653: LD_INT 0
10655: PPUSH
10656: PPUSH
10657: PPUSH
// result := [ ] ;
10658: LD_ADDR_VAR 0 4
10662: PUSH
10663: EMPTY
10664: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10665: LD_ADDR_VAR 0 5
10669: PUSH
10670: LD_VAR 0 2
10674: PPUSH
10675: LD_INT 21
10677: PUSH
10678: LD_INT 3
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: ST_TO_ADDR
// if not tmp then
10690: LD_VAR 0 5
10694: NOT
10695: IFFALSE 10699
// exit ;
10697: GO 10763
// if checkLink then
10699: LD_VAR 0 3
10703: IFFALSE 10753
// begin for i in tmp do
10705: LD_ADDR_VAR 0 6
10709: PUSH
10710: LD_VAR 0 5
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10751
// if GetBase ( i ) <> base then
10718: LD_VAR 0 6
10722: PPUSH
10723: CALL_OW 274
10727: PUSH
10728: LD_VAR 0 1
10732: NONEQUAL
10733: IFFALSE 10749
// ComLinkToBase ( base , i ) ;
10735: LD_VAR 0 1
10739: PPUSH
10740: LD_VAR 0 6
10744: PPUSH
10745: CALL_OW 169
10749: GO 10715
10751: POP
10752: POP
// end ; result := tmp ;
10753: LD_ADDR_VAR 0 4
10757: PUSH
10758: LD_VAR 0 5
10762: ST_TO_ADDR
// end ;
10763: LD_VAR 0 4
10767: RET
// export function ComComplete ( units , b ) ; var i ; begin
10768: LD_INT 0
10770: PPUSH
10771: PPUSH
// if not units then
10772: LD_VAR 0 1
10776: NOT
10777: IFFALSE 10781
// exit ;
10779: GO 10871
// for i in units do
10781: LD_ADDR_VAR 0 4
10785: PUSH
10786: LD_VAR 0 1
10790: PUSH
10791: FOR_IN
10792: IFFALSE 10869
// if BuildingStatus ( b ) = bs_build then
10794: LD_VAR 0 2
10798: PPUSH
10799: CALL_OW 461
10803: PUSH
10804: LD_INT 1
10806: EQUAL
10807: IFFALSE 10867
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10809: LD_VAR 0 4
10813: PPUSH
10814: LD_STRING h
10816: PUSH
10817: LD_VAR 0 2
10821: PPUSH
10822: CALL_OW 250
10826: PUSH
10827: LD_VAR 0 2
10831: PPUSH
10832: CALL_OW 251
10836: PUSH
10837: LD_VAR 0 2
10841: PUSH
10842: LD_INT 0
10844: PUSH
10845: LD_INT 0
10847: PUSH
10848: LD_INT 0
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: PPUSH
10863: CALL_OW 446
10867: GO 10791
10869: POP
10870: POP
// end ;
10871: LD_VAR 0 3
10875: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10876: LD_INT 0
10878: PPUSH
10879: PPUSH
10880: PPUSH
10881: PPUSH
10882: PPUSH
10883: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10884: LD_VAR 0 1
10888: NOT
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 263
10899: PUSH
10900: LD_INT 2
10902: NONEQUAL
10903: OR
10904: IFFALSE 10908
// exit ;
10906: GO 11224
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10908: LD_ADDR_VAR 0 6
10912: PUSH
10913: LD_INT 22
10915: PUSH
10916: LD_VAR 0 1
10920: PPUSH
10921: CALL_OW 255
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 2
10932: PUSH
10933: LD_INT 30
10935: PUSH
10936: LD_INT 36
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 34
10945: PUSH
10946: LD_INT 31
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 69
10966: ST_TO_ADDR
// if not tmp then
10967: LD_VAR 0 6
10971: NOT
10972: IFFALSE 10976
// exit ;
10974: GO 11224
// result := [ ] ;
10976: LD_ADDR_VAR 0 2
10980: PUSH
10981: EMPTY
10982: ST_TO_ADDR
// for i in tmp do
10983: LD_ADDR_VAR 0 3
10987: PUSH
10988: LD_VAR 0 6
10992: PUSH
10993: FOR_IN
10994: IFFALSE 11065
// begin t := UnitsInside ( i ) ;
10996: LD_ADDR_VAR 0 4
11000: PUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: CALL_OW 313
11010: ST_TO_ADDR
// if t then
11011: LD_VAR 0 4
11015: IFFALSE 11063
// for j in t do
11017: LD_ADDR_VAR 0 7
11021: PUSH
11022: LD_VAR 0 4
11026: PUSH
11027: FOR_IN
11028: IFFALSE 11061
// result := Replace ( result , result + 1 , j ) ;
11030: LD_ADDR_VAR 0 2
11034: PUSH
11035: LD_VAR 0 2
11039: PPUSH
11040: LD_VAR 0 2
11044: PUSH
11045: LD_INT 1
11047: PLUS
11048: PPUSH
11049: LD_VAR 0 7
11053: PPUSH
11054: CALL_OW 1
11058: ST_TO_ADDR
11059: GO 11027
11061: POP
11062: POP
// end ;
11063: GO 10993
11065: POP
11066: POP
// if not result then
11067: LD_VAR 0 2
11071: NOT
11072: IFFALSE 11076
// exit ;
11074: GO 11224
// mech := result [ 1 ] ;
11076: LD_ADDR_VAR 0 5
11080: PUSH
11081: LD_VAR 0 2
11085: PUSH
11086: LD_INT 1
11088: ARRAY
11089: ST_TO_ADDR
// if result > 1 then
11090: LD_VAR 0 2
11094: PUSH
11095: LD_INT 1
11097: GREATER
11098: IFFALSE 11210
// begin for i = 2 to result do
11100: LD_ADDR_VAR 0 3
11104: PUSH
11105: DOUBLE
11106: LD_INT 2
11108: DEC
11109: ST_TO_ADDR
11110: LD_VAR 0 2
11114: PUSH
11115: FOR_TO
11116: IFFALSE 11208
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11118: LD_ADDR_VAR 0 4
11122: PUSH
11123: LD_VAR 0 2
11127: PUSH
11128: LD_VAR 0 3
11132: ARRAY
11133: PPUSH
11134: LD_INT 3
11136: PPUSH
11137: CALL_OW 259
11141: PUSH
11142: LD_VAR 0 2
11146: PUSH
11147: LD_VAR 0 3
11151: ARRAY
11152: PPUSH
11153: CALL_OW 432
11157: MINUS
11158: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11159: LD_VAR 0 4
11163: PUSH
11164: LD_VAR 0 5
11168: PPUSH
11169: LD_INT 3
11171: PPUSH
11172: CALL_OW 259
11176: PUSH
11177: LD_VAR 0 5
11181: PPUSH
11182: CALL_OW 432
11186: MINUS
11187: GREATEREQUAL
11188: IFFALSE 11206
// mech := result [ i ] ;
11190: LD_ADDR_VAR 0 5
11194: PUSH
11195: LD_VAR 0 2
11199: PUSH
11200: LD_VAR 0 3
11204: ARRAY
11205: ST_TO_ADDR
// end ;
11206: GO 11115
11208: POP
11209: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11210: LD_VAR 0 1
11214: PPUSH
11215: LD_VAR 0 5
11219: PPUSH
11220: CALL_OW 135
// end ;
11224: LD_VAR 0 2
11228: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11229: LD_INT 0
11231: PPUSH
11232: PPUSH
11233: PPUSH
11234: PPUSH
11235: PPUSH
11236: PPUSH
11237: PPUSH
11238: PPUSH
11239: PPUSH
11240: PPUSH
11241: PPUSH
11242: PPUSH
11243: PPUSH
// result := [ ] ;
11244: LD_ADDR_VAR 0 7
11248: PUSH
11249: EMPTY
11250: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11251: LD_VAR 0 1
11255: PPUSH
11256: CALL_OW 266
11260: PUSH
11261: LD_INT 0
11263: PUSH
11264: LD_INT 1
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: IN
11271: NOT
11272: IFFALSE 11276
// exit ;
11274: GO 12910
// if name then
11276: LD_VAR 0 3
11280: IFFALSE 11296
// SetBName ( base_dep , name ) ;
11282: LD_VAR 0 1
11286: PPUSH
11287: LD_VAR 0 3
11291: PPUSH
11292: CALL_OW 500
// base := GetBase ( base_dep ) ;
11296: LD_ADDR_VAR 0 15
11300: PUSH
11301: LD_VAR 0 1
11305: PPUSH
11306: CALL_OW 274
11310: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11311: LD_ADDR_VAR 0 16
11315: PUSH
11316: LD_VAR 0 1
11320: PPUSH
11321: CALL_OW 255
11325: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11326: LD_ADDR_VAR 0 17
11330: PUSH
11331: LD_VAR 0 1
11335: PPUSH
11336: CALL_OW 248
11340: ST_TO_ADDR
// if sources then
11341: LD_VAR 0 5
11345: IFFALSE 11392
// for i = 1 to 3 do
11347: LD_ADDR_VAR 0 8
11351: PUSH
11352: DOUBLE
11353: LD_INT 1
11355: DEC
11356: ST_TO_ADDR
11357: LD_INT 3
11359: PUSH
11360: FOR_TO
11361: IFFALSE 11390
// AddResourceType ( base , i , sources [ i ] ) ;
11363: LD_VAR 0 15
11367: PPUSH
11368: LD_VAR 0 8
11372: PPUSH
11373: LD_VAR 0 5
11377: PUSH
11378: LD_VAR 0 8
11382: ARRAY
11383: PPUSH
11384: CALL_OW 276
11388: GO 11360
11390: POP
11391: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11392: LD_ADDR_VAR 0 18
11396: PUSH
11397: LD_VAR 0 15
11401: PPUSH
11402: LD_VAR 0 2
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: CALL 10653 0 3
11414: ST_TO_ADDR
// InitHc ;
11415: CALL_OW 19
// InitUc ;
11419: CALL_OW 18
// uc_side := side ;
11423: LD_ADDR_OWVAR 20
11427: PUSH
11428: LD_VAR 0 16
11432: ST_TO_ADDR
// uc_nation := nation ;
11433: LD_ADDR_OWVAR 21
11437: PUSH
11438: LD_VAR 0 17
11442: ST_TO_ADDR
// if buildings then
11443: LD_VAR 0 18
11447: IFFALSE 12769
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11449: LD_ADDR_VAR 0 19
11453: PUSH
11454: LD_VAR 0 18
11458: PPUSH
11459: LD_INT 2
11461: PUSH
11462: LD_INT 30
11464: PUSH
11465: LD_INT 29
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 30
11474: PUSH
11475: LD_INT 30
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: LIST
11486: PPUSH
11487: CALL_OW 72
11491: ST_TO_ADDR
// if tmp then
11492: LD_VAR 0 19
11496: IFFALSE 11544
// for i in tmp do
11498: LD_ADDR_VAR 0 8
11502: PUSH
11503: LD_VAR 0 19
11507: PUSH
11508: FOR_IN
11509: IFFALSE 11542
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11511: LD_VAR 0 8
11515: PPUSH
11516: CALL_OW 250
11520: PPUSH
11521: LD_VAR 0 8
11525: PPUSH
11526: CALL_OW 251
11530: PPUSH
11531: LD_VAR 0 16
11535: PPUSH
11536: CALL_OW 441
11540: GO 11508
11542: POP
11543: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11544: LD_VAR 0 18
11548: PPUSH
11549: LD_INT 2
11551: PUSH
11552: LD_INT 30
11554: PUSH
11555: LD_INT 32
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 30
11564: PUSH
11565: LD_INT 33
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: PPUSH
11577: CALL_OW 72
11581: IFFALSE 11669
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11583: LD_ADDR_VAR 0 8
11587: PUSH
11588: LD_VAR 0 18
11592: PPUSH
11593: LD_INT 2
11595: PUSH
11596: LD_INT 30
11598: PUSH
11599: LD_INT 32
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 30
11608: PUSH
11609: LD_INT 33
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: PPUSH
11621: CALL_OW 72
11625: PUSH
11626: FOR_IN
11627: IFFALSE 11667
// begin if not GetBWeapon ( i ) then
11629: LD_VAR 0 8
11633: PPUSH
11634: CALL_OW 269
11638: NOT
11639: IFFALSE 11665
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11641: LD_VAR 0 8
11645: PPUSH
11646: LD_VAR 0 8
11650: PPUSH
11651: LD_VAR 0 2
11655: PPUSH
11656: CALL 12915 0 2
11660: PPUSH
11661: CALL_OW 431
// end ;
11665: GO 11626
11667: POP
11668: POP
// end ; for i = 1 to personel do
11669: LD_ADDR_VAR 0 8
11673: PUSH
11674: DOUBLE
11675: LD_INT 1
11677: DEC
11678: ST_TO_ADDR
11679: LD_VAR 0 6
11683: PUSH
11684: FOR_TO
11685: IFFALSE 12749
// begin if i > 4 then
11687: LD_VAR 0 8
11691: PUSH
11692: LD_INT 4
11694: GREATER
11695: IFFALSE 11699
// break ;
11697: GO 12749
// case i of 1 :
11699: LD_VAR 0 8
11703: PUSH
11704: LD_INT 1
11706: DOUBLE
11707: EQUAL
11708: IFTRUE 11712
11710: GO 11792
11712: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11713: LD_ADDR_VAR 0 12
11717: PUSH
11718: LD_VAR 0 18
11722: PPUSH
11723: LD_INT 22
11725: PUSH
11726: LD_VAR 0 16
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 58
11737: PUSH
11738: EMPTY
11739: LIST
11740: PUSH
11741: LD_INT 2
11743: PUSH
11744: LD_INT 30
11746: PUSH
11747: LD_INT 32
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 30
11756: PUSH
11757: LD_INT 4
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 30
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: LIST
11784: PPUSH
11785: CALL_OW 72
11789: ST_TO_ADDR
11790: GO 12014
11792: LD_INT 2
11794: DOUBLE
11795: EQUAL
11796: IFTRUE 11800
11798: GO 11862
11800: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11801: LD_ADDR_VAR 0 12
11805: PUSH
11806: LD_VAR 0 18
11810: PPUSH
11811: LD_INT 22
11813: PUSH
11814: LD_VAR 0 16
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 2
11825: PUSH
11826: LD_INT 30
11828: PUSH
11829: LD_INT 0
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 30
11838: PUSH
11839: LD_INT 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PPUSH
11855: CALL_OW 72
11859: ST_TO_ADDR
11860: GO 12014
11862: LD_INT 3
11864: DOUBLE
11865: EQUAL
11866: IFTRUE 11870
11868: GO 11932
11870: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11871: LD_ADDR_VAR 0 12
11875: PUSH
11876: LD_VAR 0 18
11880: PPUSH
11881: LD_INT 22
11883: PUSH
11884: LD_VAR 0 16
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 2
11895: PUSH
11896: LD_INT 30
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 30
11908: PUSH
11909: LD_INT 3
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 72
11929: ST_TO_ADDR
11930: GO 12014
11932: LD_INT 4
11934: DOUBLE
11935: EQUAL
11936: IFTRUE 11940
11938: GO 12013
11940: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11941: LD_ADDR_VAR 0 12
11945: PUSH
11946: LD_VAR 0 18
11950: PPUSH
11951: LD_INT 22
11953: PUSH
11954: LD_VAR 0 16
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 2
11965: PUSH
11966: LD_INT 30
11968: PUSH
11969: LD_INT 6
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 30
11978: PUSH
11979: LD_INT 7
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 30
11988: PUSH
11989: LD_INT 8
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PPUSH
12006: CALL_OW 72
12010: ST_TO_ADDR
12011: GO 12014
12013: POP
// if i = 1 then
12014: LD_VAR 0 8
12018: PUSH
12019: LD_INT 1
12021: EQUAL
12022: IFFALSE 12133
// begin tmp := [ ] ;
12024: LD_ADDR_VAR 0 19
12028: PUSH
12029: EMPTY
12030: ST_TO_ADDR
// for j in f do
12031: LD_ADDR_VAR 0 9
12035: PUSH
12036: LD_VAR 0 12
12040: PUSH
12041: FOR_IN
12042: IFFALSE 12115
// if GetBType ( j ) = b_bunker then
12044: LD_VAR 0 9
12048: PPUSH
12049: CALL_OW 266
12053: PUSH
12054: LD_INT 32
12056: EQUAL
12057: IFFALSE 12084
// tmp := Insert ( tmp , 1 , j ) else
12059: LD_ADDR_VAR 0 19
12063: PUSH
12064: LD_VAR 0 19
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: LD_VAR 0 9
12076: PPUSH
12077: CALL_OW 2
12081: ST_TO_ADDR
12082: GO 12113
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12084: LD_ADDR_VAR 0 19
12088: PUSH
12089: LD_VAR 0 19
12093: PPUSH
12094: LD_VAR 0 19
12098: PUSH
12099: LD_INT 1
12101: PLUS
12102: PPUSH
12103: LD_VAR 0 9
12107: PPUSH
12108: CALL_OW 2
12112: ST_TO_ADDR
12113: GO 12041
12115: POP
12116: POP
// if tmp then
12117: LD_VAR 0 19
12121: IFFALSE 12133
// f := tmp ;
12123: LD_ADDR_VAR 0 12
12127: PUSH
12128: LD_VAR 0 19
12132: ST_TO_ADDR
// end ; x := personel [ i ] ;
12133: LD_ADDR_VAR 0 13
12137: PUSH
12138: LD_VAR 0 6
12142: PUSH
12143: LD_VAR 0 8
12147: ARRAY
12148: ST_TO_ADDR
// if x = - 1 then
12149: LD_VAR 0 13
12153: PUSH
12154: LD_INT 1
12156: NEG
12157: EQUAL
12158: IFFALSE 12367
// begin for j in f do
12160: LD_ADDR_VAR 0 9
12164: PUSH
12165: LD_VAR 0 12
12169: PUSH
12170: FOR_IN
12171: IFFALSE 12363
// repeat InitHc ;
12173: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12177: LD_VAR 0 9
12181: PPUSH
12182: CALL_OW 266
12186: PUSH
12187: LD_INT 5
12189: EQUAL
12190: IFFALSE 12260
// begin if UnitsInside ( j ) < 3 then
12192: LD_VAR 0 9
12196: PPUSH
12197: CALL_OW 313
12201: PUSH
12202: LD_INT 3
12204: LESS
12205: IFFALSE 12241
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12207: LD_INT 0
12209: PPUSH
12210: LD_INT 5
12212: PUSH
12213: LD_INT 8
12215: PUSH
12216: LD_INT 9
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: LD_VAR 0 17
12228: ARRAY
12229: PPUSH
12230: LD_VAR 0 4
12234: PPUSH
12235: CALL_OW 380
12239: GO 12258
// PrepareHuman ( false , i , skill ) ;
12241: LD_INT 0
12243: PPUSH
12244: LD_VAR 0 8
12248: PPUSH
12249: LD_VAR 0 4
12253: PPUSH
12254: CALL_OW 380
// end else
12258: GO 12277
// PrepareHuman ( false , i , skill ) ;
12260: LD_INT 0
12262: PPUSH
12263: LD_VAR 0 8
12267: PPUSH
12268: LD_VAR 0 4
12272: PPUSH
12273: CALL_OW 380
// un := CreateHuman ;
12277: LD_ADDR_VAR 0 14
12281: PUSH
12282: CALL_OW 44
12286: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12287: LD_ADDR_VAR 0 7
12291: PUSH
12292: LD_VAR 0 7
12296: PPUSH
12297: LD_INT 1
12299: PPUSH
12300: LD_VAR 0 14
12304: PPUSH
12305: CALL_OW 2
12309: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12310: LD_VAR 0 14
12314: PPUSH
12315: LD_VAR 0 9
12319: PPUSH
12320: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12324: LD_VAR 0 9
12328: PPUSH
12329: CALL_OW 313
12333: PUSH
12334: LD_INT 6
12336: EQUAL
12337: PUSH
12338: LD_VAR 0 9
12342: PPUSH
12343: CALL_OW 266
12347: PUSH
12348: LD_INT 32
12350: PUSH
12351: LD_INT 31
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: IN
12358: OR
12359: IFFALSE 12173
12361: GO 12170
12363: POP
12364: POP
// end else
12365: GO 12747
// for j = 1 to x do
12367: LD_ADDR_VAR 0 9
12371: PUSH
12372: DOUBLE
12373: LD_INT 1
12375: DEC
12376: ST_TO_ADDR
12377: LD_VAR 0 13
12381: PUSH
12382: FOR_TO
12383: IFFALSE 12745
// begin InitHc ;
12385: CALL_OW 19
// if not f then
12389: LD_VAR 0 12
12393: NOT
12394: IFFALSE 12483
// begin PrepareHuman ( false , i , skill ) ;
12396: LD_INT 0
12398: PPUSH
12399: LD_VAR 0 8
12403: PPUSH
12404: LD_VAR 0 4
12408: PPUSH
12409: CALL_OW 380
// un := CreateHuman ;
12413: LD_ADDR_VAR 0 14
12417: PUSH
12418: CALL_OW 44
12422: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12423: LD_ADDR_VAR 0 7
12427: PUSH
12428: LD_VAR 0 7
12432: PPUSH
12433: LD_INT 1
12435: PPUSH
12436: LD_VAR 0 14
12440: PPUSH
12441: CALL_OW 2
12445: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12446: LD_VAR 0 14
12450: PPUSH
12451: LD_VAR 0 1
12455: PPUSH
12456: CALL_OW 250
12460: PPUSH
12461: LD_VAR 0 1
12465: PPUSH
12466: CALL_OW 251
12470: PPUSH
12471: LD_INT 10
12473: PPUSH
12474: LD_INT 0
12476: PPUSH
12477: CALL_OW 50
// continue ;
12481: GO 12382
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12483: LD_VAR 0 12
12487: PUSH
12488: LD_INT 1
12490: ARRAY
12491: PPUSH
12492: CALL_OW 313
12496: PUSH
12497: LD_VAR 0 12
12501: PUSH
12502: LD_INT 1
12504: ARRAY
12505: PPUSH
12506: CALL_OW 266
12510: PUSH
12511: LD_INT 32
12513: PUSH
12514: LD_INT 31
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: IN
12521: AND
12522: PUSH
12523: LD_VAR 0 12
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: CALL_OW 313
12536: PUSH
12537: LD_INT 6
12539: EQUAL
12540: OR
12541: IFFALSE 12561
// f := Delete ( f , 1 ) ;
12543: LD_ADDR_VAR 0 12
12547: PUSH
12548: LD_VAR 0 12
12552: PPUSH
12553: LD_INT 1
12555: PPUSH
12556: CALL_OW 3
12560: ST_TO_ADDR
// if not f then
12561: LD_VAR 0 12
12565: NOT
12566: IFFALSE 12584
// begin x := x + 2 ;
12568: LD_ADDR_VAR 0 13
12572: PUSH
12573: LD_VAR 0 13
12577: PUSH
12578: LD_INT 2
12580: PLUS
12581: ST_TO_ADDR
// continue ;
12582: GO 12382
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12584: LD_VAR 0 12
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: CALL_OW 266
12597: PUSH
12598: LD_INT 5
12600: EQUAL
12601: IFFALSE 12675
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12603: LD_VAR 0 12
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 313
12616: PUSH
12617: LD_INT 3
12619: LESS
12620: IFFALSE 12656
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12622: LD_INT 0
12624: PPUSH
12625: LD_INT 5
12627: PUSH
12628: LD_INT 8
12630: PUSH
12631: LD_INT 9
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: LD_VAR 0 17
12643: ARRAY
12644: PPUSH
12645: LD_VAR 0 4
12649: PPUSH
12650: CALL_OW 380
12654: GO 12673
// PrepareHuman ( false , i , skill ) ;
12656: LD_INT 0
12658: PPUSH
12659: LD_VAR 0 8
12663: PPUSH
12664: LD_VAR 0 4
12668: PPUSH
12669: CALL_OW 380
// end else
12673: GO 12692
// PrepareHuman ( false , i , skill ) ;
12675: LD_INT 0
12677: PPUSH
12678: LD_VAR 0 8
12682: PPUSH
12683: LD_VAR 0 4
12687: PPUSH
12688: CALL_OW 380
// un := CreateHuman ;
12692: LD_ADDR_VAR 0 14
12696: PUSH
12697: CALL_OW 44
12701: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12702: LD_ADDR_VAR 0 7
12706: PUSH
12707: LD_VAR 0 7
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: LD_VAR 0 14
12719: PPUSH
12720: CALL_OW 2
12724: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12725: LD_VAR 0 14
12729: PPUSH
12730: LD_VAR 0 12
12734: PUSH
12735: LD_INT 1
12737: ARRAY
12738: PPUSH
12739: CALL_OW 52
// end ;
12743: GO 12382
12745: POP
12746: POP
// end ;
12747: GO 11684
12749: POP
12750: POP
// result := result ^ buildings ;
12751: LD_ADDR_VAR 0 7
12755: PUSH
12756: LD_VAR 0 7
12760: PUSH
12761: LD_VAR 0 18
12765: ADD
12766: ST_TO_ADDR
// end else
12767: GO 12910
// begin for i = 1 to personel do
12769: LD_ADDR_VAR 0 8
12773: PUSH
12774: DOUBLE
12775: LD_INT 1
12777: DEC
12778: ST_TO_ADDR
12779: LD_VAR 0 6
12783: PUSH
12784: FOR_TO
12785: IFFALSE 12908
// begin if i > 4 then
12787: LD_VAR 0 8
12791: PUSH
12792: LD_INT 4
12794: GREATER
12795: IFFALSE 12799
// break ;
12797: GO 12908
// x := personel [ i ] ;
12799: LD_ADDR_VAR 0 13
12803: PUSH
12804: LD_VAR 0 6
12808: PUSH
12809: LD_VAR 0 8
12813: ARRAY
12814: ST_TO_ADDR
// if x = - 1 then
12815: LD_VAR 0 13
12819: PUSH
12820: LD_INT 1
12822: NEG
12823: EQUAL
12824: IFFALSE 12828
// continue ;
12826: GO 12784
// PrepareHuman ( false , i , skill ) ;
12828: LD_INT 0
12830: PPUSH
12831: LD_VAR 0 8
12835: PPUSH
12836: LD_VAR 0 4
12840: PPUSH
12841: CALL_OW 380
// un := CreateHuman ;
12845: LD_ADDR_VAR 0 14
12849: PUSH
12850: CALL_OW 44
12854: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12855: LD_VAR 0 14
12859: PPUSH
12860: LD_VAR 0 1
12864: PPUSH
12865: CALL_OW 250
12869: PPUSH
12870: LD_VAR 0 1
12874: PPUSH
12875: CALL_OW 251
12879: PPUSH
12880: LD_INT 10
12882: PPUSH
12883: LD_INT 0
12885: PPUSH
12886: CALL_OW 50
// result := result ^ un ;
12890: LD_ADDR_VAR 0 7
12894: PUSH
12895: LD_VAR 0 7
12899: PUSH
12900: LD_VAR 0 14
12904: ADD
12905: ST_TO_ADDR
// end ;
12906: GO 12784
12908: POP
12909: POP
// end ; end ;
12910: LD_VAR 0 7
12914: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12915: LD_INT 0
12917: PPUSH
12918: PPUSH
12919: PPUSH
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
12927: PPUSH
12928: PPUSH
12929: PPUSH
12930: PPUSH
12931: PPUSH
12932: PPUSH
// result := false ;
12933: LD_ADDR_VAR 0 3
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12941: LD_VAR 0 1
12945: NOT
12946: PUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 266
12956: PUSH
12957: LD_INT 32
12959: PUSH
12960: LD_INT 33
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: IN
12967: NOT
12968: OR
12969: IFFALSE 12973
// exit ;
12971: GO 14082
// nat := GetNation ( tower ) ;
12973: LD_ADDR_VAR 0 12
12977: PUSH
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL_OW 248
12987: ST_TO_ADDR
// side := GetSide ( tower ) ;
12988: LD_ADDR_VAR 0 16
12992: PUSH
12993: LD_VAR 0 1
12997: PPUSH
12998: CALL_OW 255
13002: ST_TO_ADDR
// x := GetX ( tower ) ;
13003: LD_ADDR_VAR 0 10
13007: PUSH
13008: LD_VAR 0 1
13012: PPUSH
13013: CALL_OW 250
13017: ST_TO_ADDR
// y := GetY ( tower ) ;
13018: LD_ADDR_VAR 0 11
13022: PUSH
13023: LD_VAR 0 1
13027: PPUSH
13028: CALL_OW 251
13032: ST_TO_ADDR
// if not x or not y then
13033: LD_VAR 0 10
13037: NOT
13038: PUSH
13039: LD_VAR 0 11
13043: NOT
13044: OR
13045: IFFALSE 13049
// exit ;
13047: GO 14082
// weapon := 0 ;
13049: LD_ADDR_VAR 0 18
13053: PUSH
13054: LD_INT 0
13056: ST_TO_ADDR
// fac_list := [ ] ;
13057: LD_ADDR_VAR 0 17
13061: PUSH
13062: EMPTY
13063: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_VAR 0 1
13073: PPUSH
13074: CALL_OW 274
13078: PPUSH
13079: LD_VAR 0 2
13083: PPUSH
13084: LD_INT 0
13086: PPUSH
13087: CALL 10653 0 3
13091: PPUSH
13092: LD_INT 30
13094: PUSH
13095: LD_INT 3
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 72
13106: ST_TO_ADDR
// if not factories then
13107: LD_VAR 0 6
13111: NOT
13112: IFFALSE 13116
// exit ;
13114: GO 14082
// for i in factories do
13116: LD_ADDR_VAR 0 8
13120: PUSH
13121: LD_VAR 0 6
13125: PUSH
13126: FOR_IN
13127: IFFALSE 13152
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13129: LD_ADDR_VAR 0 17
13133: PUSH
13134: LD_VAR 0 17
13138: PUSH
13139: LD_VAR 0 8
13143: PPUSH
13144: CALL_OW 478
13148: UNION
13149: ST_TO_ADDR
13150: GO 13126
13152: POP
13153: POP
// if not fac_list then
13154: LD_VAR 0 17
13158: NOT
13159: IFFALSE 13163
// exit ;
13161: GO 14082
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13163: LD_ADDR_VAR 0 5
13167: PUSH
13168: LD_INT 4
13170: PUSH
13171: LD_INT 5
13173: PUSH
13174: LD_INT 9
13176: PUSH
13177: LD_INT 10
13179: PUSH
13180: LD_INT 6
13182: PUSH
13183: LD_INT 7
13185: PUSH
13186: LD_INT 11
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 27
13200: PUSH
13201: LD_INT 28
13203: PUSH
13204: LD_INT 26
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 43
13218: PUSH
13219: LD_INT 44
13221: PUSH
13222: LD_INT 46
13224: PUSH
13225: LD_INT 45
13227: PUSH
13228: LD_INT 47
13230: PUSH
13231: LD_INT 49
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: PUSH
13247: LD_VAR 0 12
13251: ARRAY
13252: ST_TO_ADDR
// list := list isect fac_list ;
13253: LD_ADDR_VAR 0 5
13257: PUSH
13258: LD_VAR 0 5
13262: PUSH
13263: LD_VAR 0 17
13267: ISECT
13268: ST_TO_ADDR
// if not list then
13269: LD_VAR 0 5
13273: NOT
13274: IFFALSE 13278
// exit ;
13276: GO 14082
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13278: LD_VAR 0 12
13282: PUSH
13283: LD_INT 3
13285: EQUAL
13286: PUSH
13287: LD_INT 49
13289: PUSH
13290: LD_VAR 0 5
13294: IN
13295: AND
13296: PUSH
13297: LD_INT 31
13299: PPUSH
13300: LD_VAR 0 16
13304: PPUSH
13305: CALL_OW 321
13309: PUSH
13310: LD_INT 2
13312: EQUAL
13313: AND
13314: IFFALSE 13374
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13316: LD_INT 22
13318: PUSH
13319: LD_VAR 0 16
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 35
13330: PUSH
13331: LD_INT 49
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 91
13340: PUSH
13341: LD_VAR 0 1
13345: PUSH
13346: LD_INT 10
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: PPUSH
13359: CALL_OW 69
13363: NOT
13364: IFFALSE 13374
// weapon := ru_time_lapser ;
13366: LD_ADDR_VAR 0 18
13370: PUSH
13371: LD_INT 49
13373: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13374: LD_VAR 0 12
13378: PUSH
13379: LD_INT 1
13381: PUSH
13382: LD_INT 2
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: IN
13389: PUSH
13390: LD_INT 11
13392: PUSH
13393: LD_VAR 0 5
13397: IN
13398: PUSH
13399: LD_INT 30
13401: PUSH
13402: LD_VAR 0 5
13406: IN
13407: OR
13408: AND
13409: PUSH
13410: LD_INT 6
13412: PPUSH
13413: LD_VAR 0 16
13417: PPUSH
13418: CALL_OW 321
13422: PUSH
13423: LD_INT 2
13425: EQUAL
13426: AND
13427: IFFALSE 13592
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13429: LD_INT 22
13431: PUSH
13432: LD_VAR 0 16
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: LD_INT 35
13446: PUSH
13447: LD_INT 11
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 35
13456: PUSH
13457: LD_INT 30
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 91
13471: PUSH
13472: LD_VAR 0 1
13476: PUSH
13477: LD_INT 18
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: PPUSH
13490: CALL_OW 69
13494: NOT
13495: PUSH
13496: LD_INT 22
13498: PUSH
13499: LD_VAR 0 16
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 2
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 32
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 33
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 91
13538: PUSH
13539: LD_VAR 0 1
13543: PUSH
13544: LD_INT 12
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: PUSH
13565: LD_INT 2
13567: GREATER
13568: AND
13569: IFFALSE 13592
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13571: LD_ADDR_VAR 0 18
13575: PUSH
13576: LD_INT 11
13578: PUSH
13579: LD_INT 30
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_VAR 0 12
13590: ARRAY
13591: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13592: LD_VAR 0 18
13596: NOT
13597: PUSH
13598: LD_INT 40
13600: PPUSH
13601: LD_VAR 0 16
13605: PPUSH
13606: CALL_OW 321
13610: PUSH
13611: LD_INT 2
13613: EQUAL
13614: AND
13615: PUSH
13616: LD_INT 7
13618: PUSH
13619: LD_VAR 0 5
13623: IN
13624: PUSH
13625: LD_INT 28
13627: PUSH
13628: LD_VAR 0 5
13632: IN
13633: OR
13634: PUSH
13635: LD_INT 45
13637: PUSH
13638: LD_VAR 0 5
13642: IN
13643: OR
13644: AND
13645: IFFALSE 13899
// begin hex := GetHexInfo ( x , y ) ;
13647: LD_ADDR_VAR 0 4
13651: PUSH
13652: LD_VAR 0 10
13656: PPUSH
13657: LD_VAR 0 11
13661: PPUSH
13662: CALL_OW 546
13666: ST_TO_ADDR
// if hex [ 1 ] then
13667: LD_VAR 0 4
13671: PUSH
13672: LD_INT 1
13674: ARRAY
13675: IFFALSE 13679
// exit ;
13677: GO 14082
// height := hex [ 2 ] ;
13679: LD_ADDR_VAR 0 15
13683: PUSH
13684: LD_VAR 0 4
13688: PUSH
13689: LD_INT 2
13691: ARRAY
13692: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13693: LD_ADDR_VAR 0 14
13697: PUSH
13698: LD_INT 0
13700: PUSH
13701: LD_INT 2
13703: PUSH
13704: LD_INT 3
13706: PUSH
13707: LD_INT 5
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: ST_TO_ADDR
// for i in tmp do
13716: LD_ADDR_VAR 0 8
13720: PUSH
13721: LD_VAR 0 14
13725: PUSH
13726: FOR_IN
13727: IFFALSE 13897
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13729: LD_ADDR_VAR 0 9
13733: PUSH
13734: LD_VAR 0 10
13738: PPUSH
13739: LD_VAR 0 8
13743: PPUSH
13744: LD_INT 5
13746: PPUSH
13747: CALL_OW 272
13751: PUSH
13752: LD_VAR 0 11
13756: PPUSH
13757: LD_VAR 0 8
13761: PPUSH
13762: LD_INT 5
13764: PPUSH
13765: CALL_OW 273
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13774: LD_VAR 0 9
13778: PUSH
13779: LD_INT 1
13781: ARRAY
13782: PPUSH
13783: LD_VAR 0 9
13787: PUSH
13788: LD_INT 2
13790: ARRAY
13791: PPUSH
13792: CALL_OW 488
13796: IFFALSE 13895
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13798: LD_ADDR_VAR 0 4
13802: PUSH
13803: LD_VAR 0 9
13807: PUSH
13808: LD_INT 1
13810: ARRAY
13811: PPUSH
13812: LD_VAR 0 9
13816: PUSH
13817: LD_INT 2
13819: ARRAY
13820: PPUSH
13821: CALL_OW 546
13825: ST_TO_ADDR
// if hex [ 1 ] then
13826: LD_VAR 0 4
13830: PUSH
13831: LD_INT 1
13833: ARRAY
13834: IFFALSE 13838
// continue ;
13836: GO 13726
// h := hex [ 2 ] ;
13838: LD_ADDR_VAR 0 13
13842: PUSH
13843: LD_VAR 0 4
13847: PUSH
13848: LD_INT 2
13850: ARRAY
13851: ST_TO_ADDR
// if h + 7 < height then
13852: LD_VAR 0 13
13856: PUSH
13857: LD_INT 7
13859: PLUS
13860: PUSH
13861: LD_VAR 0 15
13865: LESS
13866: IFFALSE 13895
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13868: LD_ADDR_VAR 0 18
13872: PUSH
13873: LD_INT 7
13875: PUSH
13876: LD_INT 28
13878: PUSH
13879: LD_INT 45
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: PUSH
13887: LD_VAR 0 12
13891: ARRAY
13892: ST_TO_ADDR
// break ;
13893: GO 13897
// end ; end ; end ;
13895: GO 13726
13897: POP
13898: POP
// end ; if not weapon then
13899: LD_VAR 0 18
13903: NOT
13904: IFFALSE 13964
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13906: LD_ADDR_VAR 0 5
13910: PUSH
13911: LD_VAR 0 5
13915: PUSH
13916: LD_INT 11
13918: PUSH
13919: LD_INT 30
13921: PUSH
13922: LD_INT 49
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: DIFF
13930: ST_TO_ADDR
// if not list then
13931: LD_VAR 0 5
13935: NOT
13936: IFFALSE 13940
// exit ;
13938: GO 14082
// weapon := list [ rand ( 1 , list ) ] ;
13940: LD_ADDR_VAR 0 18
13944: PUSH
13945: LD_VAR 0 5
13949: PUSH
13950: LD_INT 1
13952: PPUSH
13953: LD_VAR 0 5
13957: PPUSH
13958: CALL_OW 12
13962: ARRAY
13963: ST_TO_ADDR
// end ; if weapon then
13964: LD_VAR 0 18
13968: IFFALSE 14082
// begin tmp := CostOfWeapon ( weapon ) ;
13970: LD_ADDR_VAR 0 14
13974: PUSH
13975: LD_VAR 0 18
13979: PPUSH
13980: CALL_OW 451
13984: ST_TO_ADDR
// j := GetBase ( tower ) ;
13985: LD_ADDR_VAR 0 9
13989: PUSH
13990: LD_VAR 0 1
13994: PPUSH
13995: CALL_OW 274
13999: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14000: LD_VAR 0 9
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 275
14012: PUSH
14013: LD_VAR 0 14
14017: PUSH
14018: LD_INT 1
14020: ARRAY
14021: GREATEREQUAL
14022: PUSH
14023: LD_VAR 0 9
14027: PPUSH
14028: LD_INT 2
14030: PPUSH
14031: CALL_OW 275
14035: PUSH
14036: LD_VAR 0 14
14040: PUSH
14041: LD_INT 2
14043: ARRAY
14044: GREATEREQUAL
14045: AND
14046: PUSH
14047: LD_VAR 0 9
14051: PPUSH
14052: LD_INT 3
14054: PPUSH
14055: CALL_OW 275
14059: PUSH
14060: LD_VAR 0 14
14064: PUSH
14065: LD_INT 3
14067: ARRAY
14068: GREATEREQUAL
14069: AND
14070: IFFALSE 14082
// result := weapon ;
14072: LD_ADDR_VAR 0 3
14076: PUSH
14077: LD_VAR 0 18
14081: ST_TO_ADDR
// end ; end ;
14082: LD_VAR 0 3
14086: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14087: LD_INT 0
14089: PPUSH
14090: PPUSH
// result := true ;
14091: LD_ADDR_VAR 0 3
14095: PUSH
14096: LD_INT 1
14098: ST_TO_ADDR
// if array1 = array2 then
14099: LD_VAR 0 1
14103: PUSH
14104: LD_VAR 0 2
14108: EQUAL
14109: IFFALSE 14169
// begin for i = 1 to array1 do
14111: LD_ADDR_VAR 0 4
14115: PUSH
14116: DOUBLE
14117: LD_INT 1
14119: DEC
14120: ST_TO_ADDR
14121: LD_VAR 0 1
14125: PUSH
14126: FOR_TO
14127: IFFALSE 14165
// if array1 [ i ] <> array2 [ i ] then
14129: LD_VAR 0 1
14133: PUSH
14134: LD_VAR 0 4
14138: ARRAY
14139: PUSH
14140: LD_VAR 0 2
14144: PUSH
14145: LD_VAR 0 4
14149: ARRAY
14150: NONEQUAL
14151: IFFALSE 14163
// begin result := false ;
14153: LD_ADDR_VAR 0 3
14157: PUSH
14158: LD_INT 0
14160: ST_TO_ADDR
// break ;
14161: GO 14165
// end ;
14163: GO 14126
14165: POP
14166: POP
// end else
14167: GO 14177
// result := false ;
14169: LD_ADDR_VAR 0 3
14173: PUSH
14174: LD_INT 0
14176: ST_TO_ADDR
// end ;
14177: LD_VAR 0 3
14181: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14182: LD_INT 0
14184: PPUSH
14185: PPUSH
// if not array1 or not array2 then
14186: LD_VAR 0 1
14190: NOT
14191: PUSH
14192: LD_VAR 0 2
14196: NOT
14197: OR
14198: IFFALSE 14202
// exit ;
14200: GO 14266
// result := true ;
14202: LD_ADDR_VAR 0 3
14206: PUSH
14207: LD_INT 1
14209: ST_TO_ADDR
// for i = 1 to array1 do
14210: LD_ADDR_VAR 0 4
14214: PUSH
14215: DOUBLE
14216: LD_INT 1
14218: DEC
14219: ST_TO_ADDR
14220: LD_VAR 0 1
14224: PUSH
14225: FOR_TO
14226: IFFALSE 14264
// if array1 [ i ] <> array2 [ i ] then
14228: LD_VAR 0 1
14232: PUSH
14233: LD_VAR 0 4
14237: ARRAY
14238: PUSH
14239: LD_VAR 0 2
14243: PUSH
14244: LD_VAR 0 4
14248: ARRAY
14249: NONEQUAL
14250: IFFALSE 14262
// begin result := false ;
14252: LD_ADDR_VAR 0 3
14256: PUSH
14257: LD_INT 0
14259: ST_TO_ADDR
// break ;
14260: GO 14264
// end ;
14262: GO 14225
14264: POP
14265: POP
// end ;
14266: LD_VAR 0 3
14270: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14271: LD_INT 0
14273: PPUSH
14274: PPUSH
14275: PPUSH
// pom := GetBase ( fac ) ;
14276: LD_ADDR_VAR 0 5
14280: PUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 274
14290: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14291: LD_ADDR_VAR 0 4
14295: PUSH
14296: LD_VAR 0 2
14300: PUSH
14301: LD_INT 1
14303: ARRAY
14304: PPUSH
14305: LD_VAR 0 2
14309: PUSH
14310: LD_INT 2
14312: ARRAY
14313: PPUSH
14314: LD_VAR 0 2
14318: PUSH
14319: LD_INT 3
14321: ARRAY
14322: PPUSH
14323: LD_VAR 0 2
14327: PUSH
14328: LD_INT 4
14330: ARRAY
14331: PPUSH
14332: CALL_OW 449
14336: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14337: LD_ADDR_VAR 0 3
14341: PUSH
14342: LD_VAR 0 5
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 275
14354: PUSH
14355: LD_VAR 0 4
14359: PUSH
14360: LD_INT 1
14362: ARRAY
14363: GREATEREQUAL
14364: PUSH
14365: LD_VAR 0 5
14369: PPUSH
14370: LD_INT 2
14372: PPUSH
14373: CALL_OW 275
14377: PUSH
14378: LD_VAR 0 4
14382: PUSH
14383: LD_INT 2
14385: ARRAY
14386: GREATEREQUAL
14387: AND
14388: PUSH
14389: LD_VAR 0 5
14393: PPUSH
14394: LD_INT 3
14396: PPUSH
14397: CALL_OW 275
14401: PUSH
14402: LD_VAR 0 4
14406: PUSH
14407: LD_INT 3
14409: ARRAY
14410: GREATEREQUAL
14411: AND
14412: ST_TO_ADDR
// end ;
14413: LD_VAR 0 3
14417: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14418: LD_INT 0
14420: PPUSH
14421: PPUSH
14422: PPUSH
14423: PPUSH
// pom := GetBase ( building ) ;
14424: LD_ADDR_VAR 0 3
14428: PUSH
14429: LD_VAR 0 1
14433: PPUSH
14434: CALL_OW 274
14438: ST_TO_ADDR
// if not pom then
14439: LD_VAR 0 3
14443: NOT
14444: IFFALSE 14448
// exit ;
14446: GO 14618
// btype := GetBType ( building ) ;
14448: LD_ADDR_VAR 0 5
14452: PUSH
14453: LD_VAR 0 1
14457: PPUSH
14458: CALL_OW 266
14462: ST_TO_ADDR
// if btype = b_armoury then
14463: LD_VAR 0 5
14467: PUSH
14468: LD_INT 4
14470: EQUAL
14471: IFFALSE 14481
// btype := b_barracks ;
14473: LD_ADDR_VAR 0 5
14477: PUSH
14478: LD_INT 5
14480: ST_TO_ADDR
// if btype = b_depot then
14481: LD_VAR 0 5
14485: PUSH
14486: LD_INT 0
14488: EQUAL
14489: IFFALSE 14499
// btype := b_warehouse ;
14491: LD_ADDR_VAR 0 5
14495: PUSH
14496: LD_INT 1
14498: ST_TO_ADDR
// if btype = b_workshop then
14499: LD_VAR 0 5
14503: PUSH
14504: LD_INT 2
14506: EQUAL
14507: IFFALSE 14517
// btype := b_factory ;
14509: LD_ADDR_VAR 0 5
14513: PUSH
14514: LD_INT 3
14516: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14517: LD_ADDR_VAR 0 4
14521: PUSH
14522: LD_VAR 0 5
14526: PPUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 248
14536: PPUSH
14537: CALL_OW 450
14541: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14542: LD_ADDR_VAR 0 2
14546: PUSH
14547: LD_VAR 0 3
14551: PPUSH
14552: LD_INT 1
14554: PPUSH
14555: CALL_OW 275
14559: PUSH
14560: LD_VAR 0 4
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: GREATEREQUAL
14569: PUSH
14570: LD_VAR 0 3
14574: PPUSH
14575: LD_INT 2
14577: PPUSH
14578: CALL_OW 275
14582: PUSH
14583: LD_VAR 0 4
14587: PUSH
14588: LD_INT 2
14590: ARRAY
14591: GREATEREQUAL
14592: AND
14593: PUSH
14594: LD_VAR 0 3
14598: PPUSH
14599: LD_INT 3
14601: PPUSH
14602: CALL_OW 275
14606: PUSH
14607: LD_VAR 0 4
14611: PUSH
14612: LD_INT 3
14614: ARRAY
14615: GREATEREQUAL
14616: AND
14617: ST_TO_ADDR
// end ;
14618: LD_VAR 0 2
14622: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
14627: PPUSH
// pom := GetBase ( building ) ;
14628: LD_ADDR_VAR 0 4
14632: PUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 274
14642: ST_TO_ADDR
// if not pom then
14643: LD_VAR 0 4
14647: NOT
14648: IFFALSE 14652
// exit ;
14650: GO 14753
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14652: LD_ADDR_VAR 0 5
14656: PUSH
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL_OW 248
14671: PPUSH
14672: CALL_OW 450
14676: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14677: LD_ADDR_VAR 0 3
14681: PUSH
14682: LD_VAR 0 4
14686: PPUSH
14687: LD_INT 1
14689: PPUSH
14690: CALL_OW 275
14694: PUSH
14695: LD_VAR 0 5
14699: PUSH
14700: LD_INT 1
14702: ARRAY
14703: GREATEREQUAL
14704: PUSH
14705: LD_VAR 0 4
14709: PPUSH
14710: LD_INT 2
14712: PPUSH
14713: CALL_OW 275
14717: PUSH
14718: LD_VAR 0 5
14722: PUSH
14723: LD_INT 2
14725: ARRAY
14726: GREATEREQUAL
14727: AND
14728: PUSH
14729: LD_VAR 0 4
14733: PPUSH
14734: LD_INT 3
14736: PPUSH
14737: CALL_OW 275
14741: PUSH
14742: LD_VAR 0 5
14746: PUSH
14747: LD_INT 3
14749: ARRAY
14750: GREATEREQUAL
14751: AND
14752: ST_TO_ADDR
// end ;
14753: LD_VAR 0 3
14757: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14758: LD_INT 0
14760: PPUSH
14761: PPUSH
14762: PPUSH
14763: PPUSH
14764: PPUSH
14765: PPUSH
14766: PPUSH
14767: PPUSH
14768: PPUSH
14769: PPUSH
14770: PPUSH
// result := false ;
14771: LD_ADDR_VAR 0 8
14775: PUSH
14776: LD_INT 0
14778: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14779: LD_VAR 0 5
14783: NOT
14784: PUSH
14785: LD_VAR 0 1
14789: NOT
14790: OR
14791: PUSH
14792: LD_VAR 0 2
14796: NOT
14797: OR
14798: PUSH
14799: LD_VAR 0 3
14803: NOT
14804: OR
14805: IFFALSE 14809
// exit ;
14807: GO 15623
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14809: LD_ADDR_VAR 0 14
14813: PUSH
14814: LD_VAR 0 1
14818: PPUSH
14819: LD_VAR 0 2
14823: PPUSH
14824: LD_VAR 0 3
14828: PPUSH
14829: LD_VAR 0 4
14833: PPUSH
14834: LD_VAR 0 5
14838: PUSH
14839: LD_INT 1
14841: ARRAY
14842: PPUSH
14843: CALL_OW 248
14847: PPUSH
14848: LD_INT 0
14850: PPUSH
14851: CALL 16856 0 6
14855: ST_TO_ADDR
// if not hexes then
14856: LD_VAR 0 14
14860: NOT
14861: IFFALSE 14865
// exit ;
14863: GO 15623
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14865: LD_ADDR_VAR 0 17
14869: PUSH
14870: LD_VAR 0 5
14874: PPUSH
14875: LD_INT 22
14877: PUSH
14878: LD_VAR 0 13
14882: PPUSH
14883: CALL_OW 255
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 30
14897: PUSH
14898: LD_INT 0
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 30
14907: PUSH
14908: LD_INT 1
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PPUSH
14924: CALL_OW 72
14928: ST_TO_ADDR
// for i = 1 to hexes do
14929: LD_ADDR_VAR 0 9
14933: PUSH
14934: DOUBLE
14935: LD_INT 1
14937: DEC
14938: ST_TO_ADDR
14939: LD_VAR 0 14
14943: PUSH
14944: FOR_TO
14945: IFFALSE 15621
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14947: LD_ADDR_VAR 0 13
14951: PUSH
14952: LD_VAR 0 14
14956: PUSH
14957: LD_VAR 0 9
14961: ARRAY
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: LD_VAR 0 14
14971: PUSH
14972: LD_VAR 0 9
14976: ARRAY
14977: PUSH
14978: LD_INT 2
14980: ARRAY
14981: PPUSH
14982: CALL_OW 428
14986: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14987: LD_VAR 0 14
14991: PUSH
14992: LD_VAR 0 9
14996: ARRAY
14997: PUSH
14998: LD_INT 1
15000: ARRAY
15001: PPUSH
15002: LD_VAR 0 14
15006: PUSH
15007: LD_VAR 0 9
15011: ARRAY
15012: PUSH
15013: LD_INT 2
15015: ARRAY
15016: PPUSH
15017: CALL_OW 351
15021: PUSH
15022: LD_VAR 0 14
15026: PUSH
15027: LD_VAR 0 9
15031: ARRAY
15032: PUSH
15033: LD_INT 1
15035: ARRAY
15036: PPUSH
15037: LD_VAR 0 14
15041: PUSH
15042: LD_VAR 0 9
15046: ARRAY
15047: PUSH
15048: LD_INT 2
15050: ARRAY
15051: PPUSH
15052: CALL_OW 488
15056: NOT
15057: OR
15058: PUSH
15059: LD_VAR 0 13
15063: PPUSH
15064: CALL_OW 247
15068: PUSH
15069: LD_INT 3
15071: EQUAL
15072: OR
15073: IFFALSE 15079
// exit ;
15075: POP
15076: POP
15077: GO 15623
// if not tmp then
15079: LD_VAR 0 13
15083: NOT
15084: IFFALSE 15088
// continue ;
15086: GO 14944
// result := true ;
15088: LD_ADDR_VAR 0 8
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15096: LD_VAR 0 6
15100: PUSH
15101: LD_VAR 0 13
15105: PPUSH
15106: CALL_OW 247
15110: PUSH
15111: LD_INT 2
15113: EQUAL
15114: AND
15115: PUSH
15116: LD_VAR 0 13
15120: PPUSH
15121: CALL_OW 263
15125: PUSH
15126: LD_INT 1
15128: EQUAL
15129: AND
15130: IFFALSE 15294
// begin if IsDrivenBy ( tmp ) then
15132: LD_VAR 0 13
15136: PPUSH
15137: CALL_OW 311
15141: IFFALSE 15145
// continue ;
15143: GO 14944
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15145: LD_VAR 0 6
15149: PPUSH
15150: LD_INT 3
15152: PUSH
15153: LD_INT 60
15155: PUSH
15156: EMPTY
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 3
15165: PUSH
15166: LD_INT 55
15168: PUSH
15169: EMPTY
15170: LIST
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PPUSH
15180: CALL_OW 72
15184: IFFALSE 15292
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15186: LD_ADDR_VAR 0 18
15190: PUSH
15191: LD_VAR 0 6
15195: PPUSH
15196: LD_INT 3
15198: PUSH
15199: LD_INT 60
15201: PUSH
15202: EMPTY
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: LD_INT 3
15211: PUSH
15212: LD_INT 55
15214: PUSH
15215: EMPTY
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 72
15230: PUSH
15231: LD_INT 1
15233: ARRAY
15234: ST_TO_ADDR
// if IsInUnit ( driver ) then
15235: LD_VAR 0 18
15239: PPUSH
15240: CALL_OW 310
15244: IFFALSE 15255
// ComExit ( driver ) ;
15246: LD_VAR 0 18
15250: PPUSH
15251: CALL 40636 0 1
// AddComEnterUnit ( driver , tmp ) ;
15255: LD_VAR 0 18
15259: PPUSH
15260: LD_VAR 0 13
15264: PPUSH
15265: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15269: LD_VAR 0 18
15273: PPUSH
15274: LD_VAR 0 7
15278: PPUSH
15279: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15283: LD_VAR 0 18
15287: PPUSH
15288: CALL_OW 181
// end ; continue ;
15292: GO 14944
// end ; if not cleaners or not tmp in cleaners then
15294: LD_VAR 0 6
15298: NOT
15299: PUSH
15300: LD_VAR 0 13
15304: PUSH
15305: LD_VAR 0 6
15309: IN
15310: NOT
15311: OR
15312: IFFALSE 15619
// begin if dep then
15314: LD_VAR 0 17
15318: IFFALSE 15454
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15320: LD_ADDR_VAR 0 16
15324: PUSH
15325: LD_VAR 0 17
15329: PUSH
15330: LD_INT 1
15332: ARRAY
15333: PPUSH
15334: CALL_OW 250
15338: PPUSH
15339: LD_VAR 0 17
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PPUSH
15348: CALL_OW 254
15352: PPUSH
15353: LD_INT 5
15355: PPUSH
15356: CALL_OW 272
15360: PUSH
15361: LD_VAR 0 17
15365: PUSH
15366: LD_INT 1
15368: ARRAY
15369: PPUSH
15370: CALL_OW 251
15374: PPUSH
15375: LD_VAR 0 17
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: CALL_OW 254
15388: PPUSH
15389: LD_INT 5
15391: PPUSH
15392: CALL_OW 273
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15401: LD_VAR 0 16
15405: PUSH
15406: LD_INT 1
15408: ARRAY
15409: PPUSH
15410: LD_VAR 0 16
15414: PUSH
15415: LD_INT 2
15417: ARRAY
15418: PPUSH
15419: CALL_OW 488
15423: IFFALSE 15454
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15425: LD_VAR 0 13
15429: PPUSH
15430: LD_VAR 0 16
15434: PUSH
15435: LD_INT 1
15437: ARRAY
15438: PPUSH
15439: LD_VAR 0 16
15443: PUSH
15444: LD_INT 2
15446: ARRAY
15447: PPUSH
15448: CALL_OW 111
// continue ;
15452: GO 14944
// end ; end ; r := GetDir ( tmp ) ;
15454: LD_ADDR_VAR 0 15
15458: PUSH
15459: LD_VAR 0 13
15463: PPUSH
15464: CALL_OW 254
15468: ST_TO_ADDR
// if r = 5 then
15469: LD_VAR 0 15
15473: PUSH
15474: LD_INT 5
15476: EQUAL
15477: IFFALSE 15487
// r := 0 ;
15479: LD_ADDR_VAR 0 15
15483: PUSH
15484: LD_INT 0
15486: ST_TO_ADDR
// for j = r to 5 do
15487: LD_ADDR_VAR 0 10
15491: PUSH
15492: DOUBLE
15493: LD_VAR 0 15
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 5
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15617
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15505: LD_ADDR_VAR 0 11
15509: PUSH
15510: LD_VAR 0 13
15514: PPUSH
15515: CALL_OW 250
15519: PPUSH
15520: LD_VAR 0 10
15524: PPUSH
15525: LD_INT 2
15527: PPUSH
15528: CALL_OW 272
15532: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15533: LD_ADDR_VAR 0 12
15537: PUSH
15538: LD_VAR 0 13
15542: PPUSH
15543: CALL_OW 251
15547: PPUSH
15548: LD_VAR 0 10
15552: PPUSH
15553: LD_INT 2
15555: PPUSH
15556: CALL_OW 273
15560: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15561: LD_VAR 0 11
15565: PPUSH
15566: LD_VAR 0 12
15570: PPUSH
15571: CALL_OW 488
15575: PUSH
15576: LD_VAR 0 11
15580: PPUSH
15581: LD_VAR 0 12
15585: PPUSH
15586: CALL_OW 428
15590: NOT
15591: AND
15592: IFFALSE 15615
// begin ComMoveXY ( tmp , _x , _y ) ;
15594: LD_VAR 0 13
15598: PPUSH
15599: LD_VAR 0 11
15603: PPUSH
15604: LD_VAR 0 12
15608: PPUSH
15609: CALL_OW 111
// break ;
15613: GO 15617
// end ; end ;
15615: GO 15502
15617: POP
15618: POP
// end ; end ;
15619: GO 14944
15621: POP
15622: POP
// end ;
15623: LD_VAR 0 8
15627: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15628: LD_INT 0
15630: PPUSH
// result := true ;
15631: LD_ADDR_VAR 0 3
15635: PUSH
15636: LD_INT 1
15638: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15639: LD_VAR 0 2
15643: PUSH
15644: LD_INT 24
15646: DOUBLE
15647: EQUAL
15648: IFTRUE 15658
15650: LD_INT 33
15652: DOUBLE
15653: EQUAL
15654: IFTRUE 15658
15656: GO 15683
15658: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15659: LD_ADDR_VAR 0 3
15663: PUSH
15664: LD_INT 32
15666: PPUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 321
15676: PUSH
15677: LD_INT 2
15679: EQUAL
15680: ST_TO_ADDR
15681: GO 15999
15683: LD_INT 20
15685: DOUBLE
15686: EQUAL
15687: IFTRUE 15691
15689: GO 15716
15691: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15692: LD_ADDR_VAR 0 3
15696: PUSH
15697: LD_INT 6
15699: PPUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 321
15709: PUSH
15710: LD_INT 2
15712: EQUAL
15713: ST_TO_ADDR
15714: GO 15999
15716: LD_INT 22
15718: DOUBLE
15719: EQUAL
15720: IFTRUE 15730
15722: LD_INT 36
15724: DOUBLE
15725: EQUAL
15726: IFTRUE 15730
15728: GO 15755
15730: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15731: LD_ADDR_VAR 0 3
15735: PUSH
15736: LD_INT 15
15738: PPUSH
15739: LD_VAR 0 1
15743: PPUSH
15744: CALL_OW 321
15748: PUSH
15749: LD_INT 2
15751: EQUAL
15752: ST_TO_ADDR
15753: GO 15999
15755: LD_INT 30
15757: DOUBLE
15758: EQUAL
15759: IFTRUE 15763
15761: GO 15788
15763: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15764: LD_ADDR_VAR 0 3
15768: PUSH
15769: LD_INT 20
15771: PPUSH
15772: LD_VAR 0 1
15776: PPUSH
15777: CALL_OW 321
15781: PUSH
15782: LD_INT 2
15784: EQUAL
15785: ST_TO_ADDR
15786: GO 15999
15788: LD_INT 28
15790: DOUBLE
15791: EQUAL
15792: IFTRUE 15802
15794: LD_INT 21
15796: DOUBLE
15797: EQUAL
15798: IFTRUE 15802
15800: GO 15827
15802: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15803: LD_ADDR_VAR 0 3
15807: PUSH
15808: LD_INT 21
15810: PPUSH
15811: LD_VAR 0 1
15815: PPUSH
15816: CALL_OW 321
15820: PUSH
15821: LD_INT 2
15823: EQUAL
15824: ST_TO_ADDR
15825: GO 15999
15827: LD_INT 16
15829: DOUBLE
15830: EQUAL
15831: IFTRUE 15835
15833: GO 15860
15835: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15836: LD_ADDR_VAR 0 3
15840: PUSH
15841: LD_INT 84
15843: PPUSH
15844: LD_VAR 0 1
15848: PPUSH
15849: CALL_OW 321
15853: PUSH
15854: LD_INT 2
15856: EQUAL
15857: ST_TO_ADDR
15858: GO 15999
15860: LD_INT 19
15862: DOUBLE
15863: EQUAL
15864: IFTRUE 15874
15866: LD_INT 23
15868: DOUBLE
15869: EQUAL
15870: IFTRUE 15874
15872: GO 15899
15874: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15875: LD_ADDR_VAR 0 3
15879: PUSH
15880: LD_INT 83
15882: PPUSH
15883: LD_VAR 0 1
15887: PPUSH
15888: CALL_OW 321
15892: PUSH
15893: LD_INT 2
15895: EQUAL
15896: ST_TO_ADDR
15897: GO 15999
15899: LD_INT 17
15901: DOUBLE
15902: EQUAL
15903: IFTRUE 15907
15905: GO 15932
15907: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15908: LD_ADDR_VAR 0 3
15912: PUSH
15913: LD_INT 39
15915: PPUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 321
15925: PUSH
15926: LD_INT 2
15928: EQUAL
15929: ST_TO_ADDR
15930: GO 15999
15932: LD_INT 18
15934: DOUBLE
15935: EQUAL
15936: IFTRUE 15940
15938: GO 15965
15940: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15941: LD_ADDR_VAR 0 3
15945: PUSH
15946: LD_INT 40
15948: PPUSH
15949: LD_VAR 0 1
15953: PPUSH
15954: CALL_OW 321
15958: PUSH
15959: LD_INT 2
15961: EQUAL
15962: ST_TO_ADDR
15963: GO 15999
15965: LD_INT 27
15967: DOUBLE
15968: EQUAL
15969: IFTRUE 15973
15971: GO 15998
15973: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15974: LD_ADDR_VAR 0 3
15978: PUSH
15979: LD_INT 35
15981: PPUSH
15982: LD_VAR 0 1
15986: PPUSH
15987: CALL_OW 321
15991: PUSH
15992: LD_INT 2
15994: EQUAL
15995: ST_TO_ADDR
15996: GO 15999
15998: POP
// end ;
15999: LD_VAR 0 3
16003: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16004: LD_INT 0
16006: PPUSH
16007: PPUSH
16008: PPUSH
16009: PPUSH
16010: PPUSH
16011: PPUSH
16012: PPUSH
16013: PPUSH
16014: PPUSH
16015: PPUSH
16016: PPUSH
// result := false ;
16017: LD_ADDR_VAR 0 6
16021: PUSH
16022: LD_INT 0
16024: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16025: LD_VAR 0 1
16029: NOT
16030: PUSH
16031: LD_VAR 0 1
16035: PPUSH
16036: CALL_OW 266
16040: PUSH
16041: LD_INT 0
16043: PUSH
16044: LD_INT 1
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: IN
16051: NOT
16052: OR
16053: PUSH
16054: LD_VAR 0 2
16058: NOT
16059: OR
16060: PUSH
16061: LD_VAR 0 5
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: LD_INT 2
16074: PUSH
16075: LD_INT 3
16077: PUSH
16078: LD_INT 4
16080: PUSH
16081: LD_INT 5
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: IN
16092: NOT
16093: OR
16094: PUSH
16095: LD_VAR 0 3
16099: PPUSH
16100: LD_VAR 0 4
16104: PPUSH
16105: CALL_OW 488
16109: NOT
16110: OR
16111: IFFALSE 16115
// exit ;
16113: GO 16851
// side := GetSide ( depot ) ;
16115: LD_ADDR_VAR 0 9
16119: PUSH
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 255
16129: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16130: LD_VAR 0 9
16134: PPUSH
16135: LD_VAR 0 2
16139: PPUSH
16140: CALL 15628 0 2
16144: NOT
16145: IFFALSE 16149
// exit ;
16147: GO 16851
// pom := GetBase ( depot ) ;
16149: LD_ADDR_VAR 0 10
16153: PUSH
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 274
16163: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16164: LD_ADDR_VAR 0 11
16168: PUSH
16169: LD_VAR 0 2
16173: PPUSH
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 248
16183: PPUSH
16184: CALL_OW 450
16188: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16189: LD_VAR 0 10
16193: PPUSH
16194: LD_INT 1
16196: PPUSH
16197: CALL_OW 275
16201: PUSH
16202: LD_VAR 0 11
16206: PUSH
16207: LD_INT 1
16209: ARRAY
16210: GREATEREQUAL
16211: PUSH
16212: LD_VAR 0 10
16216: PPUSH
16217: LD_INT 2
16219: PPUSH
16220: CALL_OW 275
16224: PUSH
16225: LD_VAR 0 11
16229: PUSH
16230: LD_INT 2
16232: ARRAY
16233: GREATEREQUAL
16234: AND
16235: PUSH
16236: LD_VAR 0 10
16240: PPUSH
16241: LD_INT 3
16243: PPUSH
16244: CALL_OW 275
16248: PUSH
16249: LD_VAR 0 11
16253: PUSH
16254: LD_INT 3
16256: ARRAY
16257: GREATEREQUAL
16258: AND
16259: NOT
16260: IFFALSE 16264
// exit ;
16262: GO 16851
// if GetBType ( depot ) = b_depot then
16264: LD_VAR 0 1
16268: PPUSH
16269: CALL_OW 266
16273: PUSH
16274: LD_INT 0
16276: EQUAL
16277: IFFALSE 16289
// dist := 28 else
16279: LD_ADDR_VAR 0 14
16283: PUSH
16284: LD_INT 28
16286: ST_TO_ADDR
16287: GO 16297
// dist := 36 ;
16289: LD_ADDR_VAR 0 14
16293: PUSH
16294: LD_INT 36
16296: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16297: LD_VAR 0 1
16301: PPUSH
16302: LD_VAR 0 3
16306: PPUSH
16307: LD_VAR 0 4
16311: PPUSH
16312: CALL_OW 297
16316: PUSH
16317: LD_VAR 0 14
16321: GREATER
16322: IFFALSE 16326
// exit ;
16324: GO 16851
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16326: LD_ADDR_VAR 0 12
16330: PUSH
16331: LD_VAR 0 2
16335: PPUSH
16336: LD_VAR 0 3
16340: PPUSH
16341: LD_VAR 0 4
16345: PPUSH
16346: LD_VAR 0 5
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 248
16360: PPUSH
16361: LD_INT 0
16363: PPUSH
16364: CALL 16856 0 6
16368: ST_TO_ADDR
// if not hexes then
16369: LD_VAR 0 12
16373: NOT
16374: IFFALSE 16378
// exit ;
16376: GO 16851
// hex := GetHexInfo ( x , y ) ;
16378: LD_ADDR_VAR 0 15
16382: PUSH
16383: LD_VAR 0 3
16387: PPUSH
16388: LD_VAR 0 4
16392: PPUSH
16393: CALL_OW 546
16397: ST_TO_ADDR
// if hex [ 1 ] then
16398: LD_VAR 0 15
16402: PUSH
16403: LD_INT 1
16405: ARRAY
16406: IFFALSE 16410
// exit ;
16408: GO 16851
// height := hex [ 2 ] ;
16410: LD_ADDR_VAR 0 13
16414: PUSH
16415: LD_VAR 0 15
16419: PUSH
16420: LD_INT 2
16422: ARRAY
16423: ST_TO_ADDR
// for i = 1 to hexes do
16424: LD_ADDR_VAR 0 7
16428: PUSH
16429: DOUBLE
16430: LD_INT 1
16432: DEC
16433: ST_TO_ADDR
16434: LD_VAR 0 12
16438: PUSH
16439: FOR_TO
16440: IFFALSE 16770
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16442: LD_VAR 0 12
16446: PUSH
16447: LD_VAR 0 7
16451: ARRAY
16452: PUSH
16453: LD_INT 1
16455: ARRAY
16456: PPUSH
16457: LD_VAR 0 12
16461: PUSH
16462: LD_VAR 0 7
16466: ARRAY
16467: PUSH
16468: LD_INT 2
16470: ARRAY
16471: PPUSH
16472: CALL_OW 488
16476: NOT
16477: PUSH
16478: LD_VAR 0 12
16482: PUSH
16483: LD_VAR 0 7
16487: ARRAY
16488: PUSH
16489: LD_INT 1
16491: ARRAY
16492: PPUSH
16493: LD_VAR 0 12
16497: PUSH
16498: LD_VAR 0 7
16502: ARRAY
16503: PUSH
16504: LD_INT 2
16506: ARRAY
16507: PPUSH
16508: CALL_OW 428
16512: PUSH
16513: LD_INT 0
16515: GREATER
16516: OR
16517: PUSH
16518: LD_VAR 0 12
16522: PUSH
16523: LD_VAR 0 7
16527: ARRAY
16528: PUSH
16529: LD_INT 1
16531: ARRAY
16532: PPUSH
16533: LD_VAR 0 12
16537: PUSH
16538: LD_VAR 0 7
16542: ARRAY
16543: PUSH
16544: LD_INT 2
16546: ARRAY
16547: PPUSH
16548: CALL_OW 351
16552: OR
16553: IFFALSE 16559
// exit ;
16555: POP
16556: POP
16557: GO 16851
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16559: LD_ADDR_VAR 0 8
16563: PUSH
16564: LD_VAR 0 12
16568: PUSH
16569: LD_VAR 0 7
16573: ARRAY
16574: PUSH
16575: LD_INT 1
16577: ARRAY
16578: PPUSH
16579: LD_VAR 0 12
16583: PUSH
16584: LD_VAR 0 7
16588: ARRAY
16589: PUSH
16590: LD_INT 2
16592: ARRAY
16593: PPUSH
16594: CALL_OW 546
16598: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16599: LD_VAR 0 8
16603: PUSH
16604: LD_INT 1
16606: ARRAY
16607: PUSH
16608: LD_VAR 0 8
16612: PUSH
16613: LD_INT 2
16615: ARRAY
16616: PUSH
16617: LD_VAR 0 13
16621: PUSH
16622: LD_INT 2
16624: PLUS
16625: GREATER
16626: OR
16627: PUSH
16628: LD_VAR 0 8
16632: PUSH
16633: LD_INT 2
16635: ARRAY
16636: PUSH
16637: LD_VAR 0 13
16641: PUSH
16642: LD_INT 2
16644: MINUS
16645: LESS
16646: OR
16647: PUSH
16648: LD_VAR 0 8
16652: PUSH
16653: LD_INT 3
16655: ARRAY
16656: PUSH
16657: LD_INT 0
16659: PUSH
16660: LD_INT 8
16662: PUSH
16663: LD_INT 9
16665: PUSH
16666: LD_INT 10
16668: PUSH
16669: LD_INT 11
16671: PUSH
16672: LD_INT 12
16674: PUSH
16675: LD_INT 13
16677: PUSH
16678: LD_INT 16
16680: PUSH
16681: LD_INT 17
16683: PUSH
16684: LD_INT 18
16686: PUSH
16687: LD_INT 19
16689: PUSH
16690: LD_INT 20
16692: PUSH
16693: LD_INT 21
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: IN
16711: NOT
16712: OR
16713: PUSH
16714: LD_VAR 0 8
16718: PUSH
16719: LD_INT 5
16721: ARRAY
16722: NOT
16723: OR
16724: PUSH
16725: LD_VAR 0 8
16729: PUSH
16730: LD_INT 6
16732: ARRAY
16733: PUSH
16734: LD_INT 1
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 7
16742: PUSH
16743: LD_INT 9
16745: PUSH
16746: LD_INT 10
16748: PUSH
16749: LD_INT 11
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: IN
16760: NOT
16761: OR
16762: IFFALSE 16768
// exit ;
16764: POP
16765: POP
16766: GO 16851
// end ;
16768: GO 16439
16770: POP
16771: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16772: LD_VAR 0 9
16776: PPUSH
16777: LD_VAR 0 3
16781: PPUSH
16782: LD_VAR 0 4
16786: PPUSH
16787: LD_INT 20
16789: PPUSH
16790: CALL 8803 0 4
16794: PUSH
16795: LD_INT 4
16797: ARRAY
16798: IFFALSE 16802
// exit ;
16800: GO 16851
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16802: LD_VAR 0 2
16806: PUSH
16807: LD_INT 29
16809: PUSH
16810: LD_INT 30
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: IN
16817: PUSH
16818: LD_VAR 0 3
16822: PPUSH
16823: LD_VAR 0 4
16827: PPUSH
16828: LD_VAR 0 9
16832: PPUSH
16833: CALL_OW 440
16837: NOT
16838: AND
16839: IFFALSE 16843
// exit ;
16841: GO 16851
// result := true ;
16843: LD_ADDR_VAR 0 6
16847: PUSH
16848: LD_INT 1
16850: ST_TO_ADDR
// end ;
16851: LD_VAR 0 6
16855: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16856: LD_INT 0
16858: PPUSH
16859: PPUSH
16860: PPUSH
16861: PPUSH
16862: PPUSH
16863: PPUSH
16864: PPUSH
16865: PPUSH
16866: PPUSH
16867: PPUSH
16868: PPUSH
16869: PPUSH
16870: PPUSH
16871: PPUSH
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
16879: PPUSH
16880: PPUSH
16881: PPUSH
16882: PPUSH
16883: PPUSH
16884: PPUSH
16885: PPUSH
16886: PPUSH
16887: PPUSH
16888: PPUSH
16889: PPUSH
16890: PPUSH
16891: PPUSH
16892: PPUSH
16893: PPUSH
16894: PPUSH
16895: PPUSH
16896: PPUSH
16897: PPUSH
16898: PPUSH
16899: PPUSH
16900: PPUSH
16901: PPUSH
16902: PPUSH
16903: PPUSH
16904: PPUSH
16905: PPUSH
16906: PPUSH
16907: PPUSH
16908: PPUSH
16909: PPUSH
16910: PPUSH
16911: PPUSH
16912: PPUSH
16913: PPUSH
16914: PPUSH
16915: PPUSH
// result = [ ] ;
16916: LD_ADDR_VAR 0 7
16920: PUSH
16921: EMPTY
16922: ST_TO_ADDR
// temp_list = [ ] ;
16923: LD_ADDR_VAR 0 9
16927: PUSH
16928: EMPTY
16929: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16930: LD_VAR 0 4
16934: PUSH
16935: LD_INT 0
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: LD_INT 3
16946: PUSH
16947: LD_INT 4
16949: PUSH
16950: LD_INT 5
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: IN
16961: NOT
16962: PUSH
16963: LD_VAR 0 1
16967: PUSH
16968: LD_INT 0
16970: PUSH
16971: LD_INT 1
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: IN
16978: PUSH
16979: LD_VAR 0 5
16983: PUSH
16984: LD_INT 1
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: LD_INT 3
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: IN
16998: NOT
16999: AND
17000: OR
17001: IFFALSE 17005
// exit ;
17003: GO 35396
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17005: LD_VAR 0 1
17009: PUSH
17010: LD_INT 6
17012: PUSH
17013: LD_INT 7
17015: PUSH
17016: LD_INT 8
17018: PUSH
17019: LD_INT 13
17021: PUSH
17022: LD_INT 12
17024: PUSH
17025: LD_INT 15
17027: PUSH
17028: LD_INT 11
17030: PUSH
17031: LD_INT 14
17033: PUSH
17034: LD_INT 10
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: IN
17048: IFFALSE 17058
// btype = b_lab ;
17050: LD_ADDR_VAR 0 1
17054: PUSH
17055: LD_INT 6
17057: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17058: LD_VAR 0 6
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: IN
17077: NOT
17078: PUSH
17079: LD_VAR 0 1
17083: PUSH
17084: LD_INT 0
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: LD_INT 2
17092: PUSH
17093: LD_INT 3
17095: PUSH
17096: LD_INT 6
17098: PUSH
17099: LD_INT 36
17101: PUSH
17102: LD_INT 4
17104: PUSH
17105: LD_INT 5
17107: PUSH
17108: LD_INT 31
17110: PUSH
17111: LD_INT 32
17113: PUSH
17114: LD_INT 33
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: IN
17130: NOT
17131: PUSH
17132: LD_VAR 0 6
17136: PUSH
17137: LD_INT 1
17139: EQUAL
17140: AND
17141: OR
17142: PUSH
17143: LD_VAR 0 1
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 3
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: IN
17158: NOT
17159: PUSH
17160: LD_VAR 0 6
17164: PUSH
17165: LD_INT 2
17167: EQUAL
17168: AND
17169: OR
17170: IFFALSE 17180
// mode = 0 ;
17172: LD_ADDR_VAR 0 6
17176: PUSH
17177: LD_INT 0
17179: ST_TO_ADDR
// case mode of 0 :
17180: LD_VAR 0 6
17184: PUSH
17185: LD_INT 0
17187: DOUBLE
17188: EQUAL
17189: IFTRUE 17193
17191: GO 28646
17193: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17194: LD_ADDR_VAR 0 11
17198: PUSH
17199: LD_INT 0
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 1
17252: NEG
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: NEG
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 1
17275: NEG
17276: PUSH
17277: LD_INT 2
17279: NEG
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 2
17290: NEG
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: LD_INT 1
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: LD_INT 2
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 0
17319: PUSH
17320: LD_INT 2
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 1
17329: NEG
17330: PUSH
17331: LD_INT 1
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 1
17340: PUSH
17341: LD_INT 3
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 0
17350: PUSH
17351: LD_INT 3
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 1
17360: NEG
17361: PUSH
17362: LD_INT 2
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17387: LD_ADDR_VAR 0 12
17391: PUSH
17392: LD_INT 0
17394: PUSH
17395: LD_INT 0
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: LD_INT 1
17407: NEG
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 1
17415: PUSH
17416: LD_INT 0
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: LD_INT 1
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 1
17445: NEG
17446: PUSH
17447: LD_INT 0
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 1
17456: NEG
17457: PUSH
17458: LD_INT 1
17460: NEG
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: LD_INT 1
17468: PUSH
17469: LD_INT 1
17471: NEG
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: LD_INT 0
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: NEG
17500: PUSH
17501: LD_INT 1
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 2
17510: NEG
17511: PUSH
17512: LD_INT 0
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 2
17521: NEG
17522: PUSH
17523: LD_INT 1
17525: NEG
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 2
17533: NEG
17534: PUSH
17535: LD_INT 1
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 3
17544: NEG
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 3
17555: NEG
17556: PUSH
17557: LD_INT 1
17559: NEG
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17583: LD_ADDR_VAR 0 13
17587: PUSH
17588: LD_INT 0
17590: PUSH
17591: LD_INT 0
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: LD_INT 1
17603: NEG
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 1
17611: PUSH
17612: LD_INT 0
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 0
17631: PUSH
17632: LD_INT 1
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: NEG
17642: PUSH
17643: LD_INT 0
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 1
17652: NEG
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 1
17664: NEG
17665: PUSH
17666: LD_INT 2
17668: NEG
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 2
17676: PUSH
17677: LD_INT 1
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 2
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 2
17706: NEG
17707: PUSH
17708: LD_INT 1
17710: NEG
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 2
17718: NEG
17719: PUSH
17720: LD_INT 2
17722: NEG
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 2
17730: NEG
17731: PUSH
17732: LD_INT 3
17734: NEG
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 3
17742: NEG
17743: PUSH
17744: LD_INT 2
17746: NEG
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 3
17754: NEG
17755: PUSH
17756: LD_INT 3
17758: NEG
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17782: LD_ADDR_VAR 0 14
17786: PUSH
17787: LD_INT 0
17789: PUSH
17790: LD_INT 0
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: LD_INT 1
17802: NEG
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 1
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: LD_INT 0
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 1
17851: NEG
17852: PUSH
17853: LD_INT 1
17855: NEG
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 0
17875: PUSH
17876: LD_INT 2
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: LD_INT 1
17889: NEG
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: LD_INT 2
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 1
17928: NEG
17929: PUSH
17930: LD_INT 3
17932: NEG
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: LD_INT 3
17943: NEG
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 1
17951: PUSH
17952: LD_INT 2
17954: NEG
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17978: LD_ADDR_VAR 0 15
17982: PUSH
17983: LD_INT 0
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 0
17995: PUSH
17996: LD_INT 1
17998: NEG
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 1
18006: PUSH
18007: LD_INT 0
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: LD_INT 1
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 1
18036: NEG
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 1
18047: NEG
18048: PUSH
18049: LD_INT 1
18051: NEG
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 2
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 1
18090: NEG
18091: PUSH
18092: LD_INT 1
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 2
18101: NEG
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: NEG
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 2
18124: PUSH
18125: LD_INT 1
18127: NEG
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 3
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 3
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18171: LD_ADDR_VAR 0 16
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: LD_INT 1
18191: NEG
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: LD_INT 0
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: LD_INT 0
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 1
18240: NEG
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: NEG
18253: PUSH
18254: LD_INT 2
18256: NEG
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 2
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 2
18274: PUSH
18275: LD_INT 2
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 2
18294: NEG
18295: PUSH
18296: LD_INT 1
18298: NEG
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 2
18306: NEG
18307: PUSH
18308: LD_INT 2
18310: NEG
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 3
18328: PUSH
18329: LD_INT 3
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 2
18338: PUSH
18339: LD_INT 3
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18364: LD_ADDR_VAR 0 17
18368: PUSH
18369: LD_INT 0
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: LD_INT 0
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 1
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: NEG
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 1
18433: NEG
18434: PUSH
18435: LD_INT 1
18437: NEG
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 1
18445: NEG
18446: PUSH
18447: LD_INT 2
18449: NEG
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: LD_INT 2
18460: NEG
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 1
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 2
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: LD_INT 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 1
18529: NEG
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 2
18540: NEG
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 2
18551: NEG
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 2
18563: NEG
18564: PUSH
18565: LD_INT 2
18567: NEG
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18594: LD_ADDR_VAR 0 18
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: NEG
18676: PUSH
18677: LD_INT 2
18679: NEG
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: LD_INT 2
18690: NEG
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 1
18701: NEG
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 2
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 2
18719: PUSH
18720: LD_INT 1
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 2
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: LD_INT 2
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 2
18770: NEG
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 2
18781: NEG
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 2
18793: NEG
18794: PUSH
18795: LD_INT 2
18797: NEG
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18824: LD_ADDR_VAR 0 19
18828: PUSH
18829: LD_INT 0
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: LD_INT 0
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: NEG
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: NEG
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: NEG
18906: PUSH
18907: LD_INT 2
18909: NEG
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 0
18917: PUSH
18918: LD_INT 2
18920: NEG
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: LD_INT 1
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: LD_INT 2
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 1
18989: NEG
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 2
19000: NEG
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 2
19011: NEG
19012: PUSH
19013: LD_INT 1
19015: NEG
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 2
19023: NEG
19024: PUSH
19025: LD_INT 2
19027: NEG
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19054: LD_ADDR_VAR 0 20
19058: PUSH
19059: LD_INT 0
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 0
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 1
19112: NEG
19113: PUSH
19114: LD_INT 0
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 1
19123: NEG
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: NEG
19136: PUSH
19137: LD_INT 2
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 0
19147: PUSH
19148: LD_INT 2
19150: NEG
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 2
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 2
19189: PUSH
19190: LD_INT 2
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 2
19230: NEG
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 2
19241: NEG
19242: PUSH
19243: LD_INT 1
19245: NEG
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 2
19253: NEG
19254: PUSH
19255: LD_INT 2
19257: NEG
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19284: LD_ADDR_VAR 0 21
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 1
19353: NEG
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: LD_INT 2
19380: NEG
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: LD_INT 1
19391: NEG
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 2
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 2
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: LD_INT 2
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 2
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 2
19460: NEG
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 2
19471: NEG
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 2
19483: NEG
19484: PUSH
19485: LD_INT 2
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19514: LD_ADDR_VAR 0 22
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: LD_INT 1
19534: NEG
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 1
19542: PUSH
19543: LD_INT 0
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: LD_INT 1
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: LD_INT 1
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: NEG
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: LD_INT 1
19587: NEG
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 1
19595: NEG
19596: PUSH
19597: LD_INT 2
19599: NEG
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 0
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: LD_INT 1
19621: NEG
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 2
19639: PUSH
19640: LD_INT 1
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: LD_INT 2
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: LD_INT 2
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 2
19690: NEG
19691: PUSH
19692: LD_INT 0
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 2
19701: NEG
19702: PUSH
19703: LD_INT 1
19705: NEG
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 2
19713: NEG
19714: PUSH
19715: LD_INT 2
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19744: LD_ADDR_VAR 0 23
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: LD_INT 0
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: LD_INT 1
19817: NEG
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 1
19825: NEG
19826: PUSH
19827: LD_INT 2
19829: NEG
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 0
19837: PUSH
19838: LD_INT 2
19840: NEG
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 2
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: LD_INT 2
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 1
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: LD_INT 0
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 2
19931: NEG
19932: PUSH
19933: LD_INT 1
19935: NEG
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: NEG
19944: PUSH
19945: LD_INT 2
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 2
19955: NEG
19956: PUSH
19957: LD_INT 3
19959: NEG
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: LD_INT 3
19971: NEG
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: LD_INT 2
19982: NEG
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 1
19993: NEG
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20024: LD_ADDR_VAR 0 24
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: LD_INT 1
20044: NEG
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: LD_INT 0
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 1
20062: PUSH
20063: LD_INT 1
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 1
20082: NEG
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: LD_INT 2
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: LD_INT 1
20131: NEG
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 0
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 2
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 2
20200: NEG
20201: PUSH
20202: LD_INT 0
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 2
20211: NEG
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: NEG
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 2
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 3
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 3
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20300: LD_ADDR_VAR 0 25
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: LD_INT 1
20373: NEG
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 1
20381: NEG
20382: PUSH
20383: LD_INT 2
20385: NEG
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 1
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 2
20476: NEG
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: LD_INT 2
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 3
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 3
20521: PUSH
20522: LD_INT 2
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 2
20531: PUSH
20532: LD_INT 3
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: LD_INT 3
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20574: LD_ADDR_VAR 0 26
20578: PUSH
20579: LD_INT 0
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: LD_INT 1
20594: NEG
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: LD_INT 0
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 1
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 1
20632: NEG
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: LD_INT 1
20647: NEG
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: NEG
20656: PUSH
20657: LD_INT 2
20659: NEG
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 0
20667: PUSH
20668: LD_INT 2
20670: NEG
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 2
20699: PUSH
20700: LD_INT 1
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 2
20709: PUSH
20710: LD_INT 2
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: LD_INT 2
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 0
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 2
20750: NEG
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 2
20761: NEG
20762: PUSH
20763: LD_INT 1
20765: NEG
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 2
20773: NEG
20774: PUSH
20775: LD_INT 2
20777: NEG
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: LD_INT 3
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 1
20795: PUSH
20796: LD_INT 3
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 2
20816: NEG
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20850: LD_ADDR_VAR 0 27
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: NEG
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: LD_INT 1
20923: NEG
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 1
20931: NEG
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: LD_INT 2
20946: NEG
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: LD_INT 1
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 2
20975: PUSH
20976: LD_INT 1
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 2
21026: NEG
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 2
21037: NEG
21038: PUSH
21039: LD_INT 1
21041: NEG
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: NEG
21050: PUSH
21051: LD_INT 2
21053: NEG
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 2
21072: NEG
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 3
21083: NEG
21084: PUSH
21085: LD_INT 1
21087: NEG
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 3
21095: NEG
21096: PUSH
21097: LD_INT 2
21099: NEG
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21130: LD_ADDR_VAR 0 28
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: LD_INT 0
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 0
21147: PUSH
21148: LD_INT 1
21150: NEG
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: LD_INT 0
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: LD_INT 1
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: LD_INT 0
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: LD_INT 1
21203: NEG
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 1
21211: NEG
21212: PUSH
21213: LD_INT 2
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 0
21223: PUSH
21224: LD_INT 2
21226: NEG
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 2
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 2
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: LD_INT 2
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: LD_INT 2
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 1
21295: NEG
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 2
21306: NEG
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 2
21317: NEG
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: NEG
21330: PUSH
21331: LD_INT 2
21333: NEG
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 2
21341: NEG
21342: PUSH
21343: LD_INT 3
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: NEG
21354: PUSH
21355: LD_INT 3
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 3
21365: NEG
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 3
21377: NEG
21378: PUSH
21379: LD_INT 2
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21412: LD_ADDR_VAR 0 29
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: LD_INT 1
21432: NEG
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 0
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: LD_INT 1
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: LD_INT 2
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 0
21505: PUSH
21506: LD_INT 2
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: LD_INT 0
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 2
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 1
21547: PUSH
21548: LD_INT 2
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: LD_INT 2
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: NEG
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 2
21590: NEG
21591: PUSH
21592: LD_INT 2
21594: NEG
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 2
21602: NEG
21603: PUSH
21604: LD_INT 3
21606: NEG
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 2
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 3
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: LD_INT 3
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: LD_INT 2
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 3
21656: NEG
21657: PUSH
21658: LD_INT 2
21660: NEG
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21691: LD_ADDR_VAR 0 30
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: LD_INT 0
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: LD_INT 1
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: NEG
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 1
21760: NEG
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: LD_INT 2
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: LD_INT 1
21798: NEG
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 2
21806: PUSH
21807: LD_INT 0
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 2
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: LD_INT 2
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: NEG
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 2
21857: NEG
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 2
21868: NEG
21869: PUSH
21870: LD_INT 1
21872: NEG
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 1
21880: NEG
21881: PUSH
21882: LD_INT 3
21884: NEG
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: LD_INT 2
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 3
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: LD_INT 3
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 2
21923: NEG
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 3
21934: NEG
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21969: LD_ADDR_VAR 0 31
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 1
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 0
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: LD_INT 1
22042: NEG
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: NEG
22051: PUSH
22052: LD_INT 2
22054: NEG
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: LD_INT 1
22065: NEG
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 2
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 2
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: LD_INT 2
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 0
22113: PUSH
22114: LD_INT 2
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 2
22134: NEG
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 2
22146: NEG
22147: PUSH
22148: LD_INT 2
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 2
22158: NEG
22159: PUSH
22160: LD_INT 3
22162: NEG
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 2
22170: PUSH
22171: LD_INT 1
22173: NEG
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 3
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: LD_INT 3
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 3
22212: NEG
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22247: LD_ADDR_VAR 0 32
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: LD_INT 0
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 2
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 0
22340: PUSH
22341: LD_INT 2
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 2
22413: NEG
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 2
22424: NEG
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: LD_INT 3
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: LD_INT 2
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 3
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 2
22469: PUSH
22470: LD_INT 3
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 2
22479: NEG
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 3
22490: NEG
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22525: LD_ADDR_VAR 0 33
22529: PUSH
22530: LD_INT 0
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 1
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: LD_INT 0
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: NEG
22595: PUSH
22596: LD_INT 1
22598: NEG
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: LD_INT 2
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 0
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: NEG
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 2
22691: NEG
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: LD_INT 2
22707: NEG
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 2
22715: NEG
22716: PUSH
22717: LD_INT 3
22719: NEG
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 3
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 1
22758: NEG
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 3
22769: NEG
22770: PUSH
22771: LD_INT 2
22773: NEG
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22804: LD_ADDR_VAR 0 34
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: NEG
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: LD_INT 2
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: LD_INT 2
22900: NEG
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 1
22908: PUSH
22909: LD_INT 1
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 2
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 2
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: LD_INT 2
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: NEG
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 2
22971: NEG
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 2
22983: NEG
22984: PUSH
22985: LD_INT 2
22987: NEG
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 1
22995: NEG
22996: PUSH
22997: LD_INT 3
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: LD_INT 2
23010: NEG
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 3
23018: PUSH
23019: LD_INT 2
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: LD_INT 3
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 2
23038: NEG
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 3
23049: NEG
23050: PUSH
23051: LD_INT 1
23053: NEG
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23084: LD_ADDR_VAR 0 35
23088: PUSH
23089: LD_INT 0
23091: PUSH
23092: LD_INT 0
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: LD_INT 1
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 2
23175: NEG
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23196: LD_ADDR_VAR 0 36
23200: PUSH
23201: LD_INT 0
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: LD_INT 1
23269: NEG
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23308: LD_ADDR_VAR 0 37
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 1
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 1
23366: NEG
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23420: LD_ADDR_VAR 0 38
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 1
23478: NEG
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 1
23489: NEG
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 2
23511: NEG
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23532: LD_ADDR_VAR 0 39
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: LD_INT 0
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: LD_INT 1
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: NEG
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 1
23601: NEG
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: LD_INT 2
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23644: LD_ADDR_VAR 0 40
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 0
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: LD_INT 0
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 1
23713: NEG
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23756: LD_ADDR_VAR 0 41
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: LD_INT 1
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: NEG
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PUSH
23827: LD_INT 1
23829: NEG
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: LD_INT 2
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: LD_INT 1
23852: NEG
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: LD_INT 0
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 2
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: LD_INT 2
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 2
23911: NEG
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 2
23922: NEG
23923: PUSH
23924: LD_INT 1
23926: NEG
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 2
23934: NEG
23935: PUSH
23936: LD_INT 2
23938: NEG
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 2
23946: NEG
23947: PUSH
23948: LD_INT 3
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: LD_INT 1
23961: NEG
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 3
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 3
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 3
23989: PUSH
23990: LD_INT 2
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 3
23999: PUSH
24000: LD_INT 3
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: LD_INT 3
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 2
24019: NEG
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 3
24030: NEG
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 3
24041: NEG
24042: PUSH
24043: LD_INT 1
24045: NEG
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 3
24053: NEG
24054: PUSH
24055: LD_INT 2
24057: NEG
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 3
24065: NEG
24066: PUSH
24067: LD_INT 3
24069: NEG
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24106: LD_ADDR_VAR 0 42
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 1
24164: NEG
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 1
24175: NEG
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 2
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 0
24199: PUSH
24200: LD_INT 2
24202: NEG
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 2
24231: PUSH
24232: LD_INT 2
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: PUSH
24242: LD_INT 2
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 2
24284: NEG
24285: PUSH
24286: LD_INT 2
24288: NEG
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 2
24296: NEG
24297: PUSH
24298: LD_INT 3
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: LD_INT 3
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: LD_INT 3
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: LD_INT 2
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 3
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 3
24352: PUSH
24353: LD_INT 3
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: LD_INT 3
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: LD_INT 3
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 0
24382: PUSH
24383: LD_INT 3
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 3
24403: NEG
24404: PUSH
24405: LD_INT 2
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 3
24415: NEG
24416: PUSH
24417: LD_INT 3
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24456: LD_ADDR_VAR 0 43
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: LD_INT 0
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 0
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 1
24537: NEG
24538: PUSH
24539: LD_INT 2
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: LD_INT 2
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 2
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 2
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: NEG
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: NEG
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: LD_INT 3
24649: NEG
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: LD_INT 3
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: LD_INT 2
24671: NEG
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 3
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 3
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: LD_INT 3
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: LD_INT 3
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 2
24741: NEG
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 3
24752: NEG
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 3
24763: NEG
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24804: LD_ADDR_VAR 0 44
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 1
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: NEG
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: LD_INT 2
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: LD_INT 2
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 2
24959: NEG
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 2
24970: NEG
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: LD_INT 2
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 2
24994: NEG
24995: PUSH
24996: LD_INT 3
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: LD_INT 1
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 3
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 3
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 3
25037: PUSH
25038: LD_INT 2
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 3
25047: PUSH
25048: LD_INT 3
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 3
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: NEG
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 3
25078: NEG
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 3
25089: NEG
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 3
25101: NEG
25102: PUSH
25103: LD_INT 2
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 3
25113: NEG
25114: PUSH
25115: LD_INT 3
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25154: LD_ADDR_VAR 0 45
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: LD_INT 2
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: LD_INT 2
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 2
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: LD_INT 1
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 2
25320: NEG
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 2
25332: NEG
25333: PUSH
25334: LD_INT 2
25336: NEG
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: NEG
25345: PUSH
25346: LD_INT 3
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: LD_INT 3
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: LD_INT 3
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: LD_INT 2
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 3
25390: PUSH
25391: LD_INT 2
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 3
25400: PUSH
25401: LD_INT 3
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 2
25410: PUSH
25411: LD_INT 3
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: LD_INT 3
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: LD_INT 3
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: LD_INT 2
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 3
25451: NEG
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 3
25463: NEG
25464: PUSH
25465: LD_INT 3
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25504: LD_ADDR_VAR 0 46
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: LD_INT 2
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: LD_INT 2
25600: NEG
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 2
25670: NEG
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: NEG
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 3
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: LD_INT 3
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: LD_INT 2
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: LD_INT 1
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 3
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 3
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: LD_INT 3
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: LD_INT 3
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: NEG
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 2
25789: NEG
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 3
25800: NEG
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 3
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25852: LD_ADDR_VAR 0 47
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: LD_INT 1
25872: NEG
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: NEG
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: NEG
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: LD_INT 2
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: LD_INT 2
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: LD_INT 1
25959: NEG
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 2
25967: NEG
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26003: LD_ADDR_VAR 0 48
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: LD_INT 1
26023: NEG
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 1
26072: NEG
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: LD_INT 2
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 0
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26150: LD_ADDR_VAR 0 49
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26294: LD_ADDR_VAR 0 50
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 2
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26438: LD_ADDR_VAR 0 51
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 1
26458: NEG
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: NEG
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 2
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26585: LD_ADDR_VAR 0 52
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: LD_INT 1
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: LD_INT 2
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 2
26689: NEG
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: NEG
26701: PUSH
26702: LD_INT 1
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 2
26712: NEG
26713: PUSH
26714: LD_INT 2
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26736: LD_ADDR_VAR 0 53
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: LD_INT 2
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 2
26912: NEG
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 2
26923: NEG
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: NEG
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26966: LD_ADDR_VAR 0 54
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: LD_INT 1
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PUSH
27037: LD_INT 1
27039: NEG
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: LD_INT 2
27062: NEG
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: LD_INT 2
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: LD_INT 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 2
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: NEG
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: NEG
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27196: LD_ADDR_VAR 0 55
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: NEG
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 2
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: LD_INT 2
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 2
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: LD_INT 2
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: LD_INT 2
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 2
27372: NEG
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 2
27383: NEG
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: NEG
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27426: LD_ADDR_VAR 0 56
27430: PUSH
27431: LD_INT 0
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 1
27495: NEG
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: LD_INT 2
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: LD_INT 2
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 2
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: LD_INT 2
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 2
27602: NEG
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 2
27613: NEG
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 2
27625: NEG
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27656: LD_ADDR_VAR 0 57
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: LD_INT 2
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 2
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 2
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 2
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: LD_INT 2
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: LD_INT 2
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: NEG
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: NEG
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: NEG
27856: PUSH
27857: LD_INT 2
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27886: LD_ADDR_VAR 0 58
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 1
27955: NEG
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: LD_INT 2
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 2
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: LD_INT 2
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 2
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: NEG
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: NEG
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: NEG
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28116: LD_ADDR_VAR 0 59
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: LD_INT 0
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28204: LD_ADDR_VAR 0 60
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28292: LD_ADDR_VAR 0 61
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 1
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28380: LD_ADDR_VAR 0 62
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28468: LD_ADDR_VAR 0 63
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28556: LD_ADDR_VAR 0 64
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 1
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
// end ; 1 :
28644: GO 34541
28646: LD_INT 1
28648: DOUBLE
28649: EQUAL
28650: IFTRUE 28654
28652: GO 31277
28654: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28655: LD_ADDR_VAR 0 11
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: LD_INT 3
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: LD_INT 3
28677: NEG
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: LD_INT 2
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: LIST
28698: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28699: LD_ADDR_VAR 0 12
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 3
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 3
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28740: LD_ADDR_VAR 0 13
28744: PUSH
28745: LD_INT 3
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 3
28757: PUSH
28758: LD_INT 3
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 2
28767: PUSH
28768: LD_INT 3
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28780: LD_ADDR_VAR 0 14
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: LD_INT 3
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28821: LD_ADDR_VAR 0 15
28825: PUSH
28826: LD_INT 2
28828: NEG
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 3
28839: NEG
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 3
28850: NEG
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28865: LD_ADDR_VAR 0 16
28869: PUSH
28870: LD_INT 2
28872: NEG
28873: PUSH
28874: LD_INT 3
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 3
28884: NEG
28885: PUSH
28886: LD_INT 2
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 3
28896: NEG
28897: PUSH
28898: LD_INT 3
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: LIST
28910: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28911: LD_ADDR_VAR 0 17
28915: PUSH
28916: LD_INT 1
28918: NEG
28919: PUSH
28920: LD_INT 3
28922: NEG
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: LD_INT 3
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 2
28944: NEG
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28955: LD_ADDR_VAR 0 18
28959: PUSH
28960: LD_INT 2
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 3
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 3
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: LIST
28995: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28996: LD_ADDR_VAR 0 19
29000: PUSH
29001: LD_INT 3
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 3
29013: PUSH
29014: LD_INT 3
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: LD_INT 3
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: LIST
29035: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29036: LD_ADDR_VAR 0 20
29040: PUSH
29041: LD_INT 1
29043: PUSH
29044: LD_INT 3
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 3
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: NEG
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29077: LD_ADDR_VAR 0 21
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: NEG
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 3
29106: NEG
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29121: LD_ADDR_VAR 0 22
29125: PUSH
29126: LD_INT 2
29128: NEG
29129: PUSH
29130: LD_INT 3
29132: NEG
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 3
29140: NEG
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 3
29152: NEG
29153: PUSH
29154: LD_INT 3
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29167: LD_ADDR_VAR 0 23
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: LD_INT 3
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: LD_INT 4
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: LD_INT 3
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29211: LD_ADDR_VAR 0 24
29215: PUSH
29216: LD_INT 3
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 4
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29252: LD_ADDR_VAR 0 25
29256: PUSH
29257: LD_INT 3
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 4
29269: PUSH
29270: LD_INT 3
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: LD_INT 4
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: LIST
29291: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29292: LD_ADDR_VAR 0 26
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: LD_INT 4
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 3
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29333: LD_ADDR_VAR 0 27
29337: PUSH
29338: LD_INT 3
29340: NEG
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 3
29351: NEG
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 4
29362: NEG
29363: PUSH
29364: LD_INT 1
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29377: LD_ADDR_VAR 0 28
29381: PUSH
29382: LD_INT 3
29384: NEG
29385: PUSH
29386: LD_INT 3
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 3
29396: NEG
29397: PUSH
29398: LD_INT 4
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 4
29408: NEG
29409: PUSH
29410: LD_INT 3
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29423: LD_ADDR_VAR 0 29
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: LD_INT 3
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: LD_INT 3
29445: NEG
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: LD_INT 2
29456: NEG
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: LD_INT 4
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: LD_INT 4
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: LD_INT 3
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 1
29498: NEG
29499: PUSH
29500: LD_INT 5
29502: NEG
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: LD_INT 5
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: LD_INT 4
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: LD_INT 6
29536: NEG
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: LD_INT 6
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: LD_INT 5
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29578: LD_ADDR_VAR 0 30
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 3
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 4
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 4
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 4
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 5
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 5
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 5
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 6
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 6
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29721: LD_ADDR_VAR 0 31
29725: PUSH
29726: LD_INT 3
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 2
29748: PUSH
29749: LD_INT 3
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 4
29758: PUSH
29759: LD_INT 3
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 4
29768: PUSH
29769: LD_INT 4
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 3
29778: PUSH
29779: LD_INT 4
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 5
29788: PUSH
29789: LD_INT 4
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 5
29798: PUSH
29799: LD_INT 5
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 4
29808: PUSH
29809: LD_INT 5
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 6
29818: PUSH
29819: LD_INT 5
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 6
29828: PUSH
29829: LD_INT 6
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 5
29838: PUSH
29839: LD_INT 6
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29860: LD_ADDR_VAR 0 32
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: LD_INT 3
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: LD_INT 4
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 4
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 3
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 5
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: LD_INT 5
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 4
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 6
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: LD_INT 6
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: NEG
29981: PUSH
29982: LD_INT 5
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30003: LD_ADDR_VAR 0 33
30007: PUSH
30008: LD_INT 2
30010: NEG
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 3
30021: NEG
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 3
30032: NEG
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 3
30044: NEG
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 4
30055: NEG
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 4
30066: NEG
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 4
30078: NEG
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 5
30089: NEG
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 5
30100: NEG
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 5
30112: NEG
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 6
30123: NEG
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 6
30134: NEG
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30158: LD_ADDR_VAR 0 34
30162: PUSH
30163: LD_INT 2
30165: NEG
30166: PUSH
30167: LD_INT 3
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 3
30177: NEG
30178: PUSH
30179: LD_INT 2
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 3
30189: NEG
30190: PUSH
30191: LD_INT 3
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: NEG
30202: PUSH
30203: LD_INT 4
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 4
30213: NEG
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 4
30225: NEG
30226: PUSH
30227: LD_INT 4
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 4
30237: NEG
30238: PUSH
30239: LD_INT 5
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 5
30249: NEG
30250: PUSH
30251: LD_INT 4
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 5
30261: NEG
30262: PUSH
30263: LD_INT 5
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 5
30273: NEG
30274: PUSH
30275: LD_INT 6
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 6
30285: NEG
30286: PUSH
30287: LD_INT 5
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 6
30297: NEG
30298: PUSH
30299: LD_INT 6
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30321: LD_ADDR_VAR 0 41
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: PUSH
30341: LD_INT 3
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30365: LD_ADDR_VAR 0 42
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30406: LD_ADDR_VAR 0 43
30410: PUSH
30411: LD_INT 2
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: LD_INT 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30446: LD_ADDR_VAR 0 44
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 2
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30487: LD_ADDR_VAR 0 45
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 3
30516: NEG
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: LIST
30530: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30531: LD_ADDR_VAR 0 46
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: LD_INT 2
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 2
30550: NEG
30551: PUSH
30552: LD_INT 3
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 3
30562: NEG
30563: PUSH
30564: LD_INT 2
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30577: LD_ADDR_VAR 0 47
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: LD_INT 3
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 1
30596: NEG
30597: PUSH
30598: LD_INT 3
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30610: LD_ADDR_VAR 0 48
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30641: LD_ADDR_VAR 0 49
30645: PUSH
30646: LD_INT 3
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 3
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30670: LD_ADDR_VAR 0 50
30674: PUSH
30675: LD_INT 2
30677: PUSH
30678: LD_INT 3
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: LD_INT 3
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30699: LD_ADDR_VAR 0 51
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30730: LD_ADDR_VAR 0 52
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: LD_INT 2
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30763: LD_ADDR_VAR 0 53
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: LD_INT 3
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: LD_INT 3
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: LD_INT 2
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30807: LD_ADDR_VAR 0 54
30811: PUSH
30812: LD_INT 2
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30848: LD_ADDR_VAR 0 55
30852: PUSH
30853: LD_INT 3
30855: PUSH
30856: LD_INT 2
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 3
30865: PUSH
30866: LD_INT 3
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: LD_INT 3
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: LIST
30887: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30888: LD_ADDR_VAR 0 56
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: LIST
30928: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30929: LD_ADDR_VAR 0 57
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 3
30947: NEG
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 3
30958: NEG
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30973: LD_ADDR_VAR 0 58
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: LD_INT 3
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: LD_INT 2
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: LIST
31018: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31019: LD_ADDR_VAR 0 59
31023: PUSH
31024: LD_INT 1
31026: NEG
31027: PUSH
31028: LD_INT 2
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: LD_INT 2
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31063: LD_ADDR_VAR 0 60
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31104: LD_ADDR_VAR 0 61
31108: PUSH
31109: LD_INT 2
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 2
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: LD_INT 2
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31144: LD_ADDR_VAR 0 62
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: LIST
31184: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31185: LD_ADDR_VAR 0 63
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 2
31203: NEG
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: NEG
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31229: LD_ADDR_VAR 0 64
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 2
31248: NEG
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: ST_TO_ADDR
// end ; 2 :
31275: GO 34541
31277: LD_INT 2
31279: DOUBLE
31280: EQUAL
31281: IFTRUE 31285
31283: GO 34540
31285: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31286: LD_ADDR_VAR 0 29
31290: PUSH
31291: LD_INT 4
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 4
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 5
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 5
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 4
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 3
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: LD_INT 2
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 5
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 3
31386: PUSH
31387: LD_INT 3
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 3
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 4
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 4
31416: PUSH
31417: LD_INT 4
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: LD_INT 4
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: LD_INT 3
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 4
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 4
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: LD_INT 4
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: PUSH
31497: LD_INT 4
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 5
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: LD_INT 5
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: LD_INT 4
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: LD_INT 5
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: LD_INT 3
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 3
31569: NEG
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 3
31580: NEG
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: NEG
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 4
31625: NEG
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 4
31636: NEG
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 4
31648: NEG
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 2
31660: NEG
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 4
31671: NEG
31672: PUSH
31673: LD_INT 4
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 4
31683: NEG
31684: PUSH
31685: LD_INT 5
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 3
31695: NEG
31696: PUSH
31697: LD_INT 4
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 3
31707: NEG
31708: PUSH
31709: LD_INT 3
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 4
31719: NEG
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 5
31731: NEG
31732: PUSH
31733: LD_INT 4
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 5
31743: NEG
31744: PUSH
31745: LD_INT 5
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: LD_INT 5
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 5
31767: NEG
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31824: LD_ADDR_VAR 0 30
31828: PUSH
31829: LD_INT 4
31831: PUSH
31832: LD_INT 4
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 4
31841: PUSH
31842: LD_INT 3
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 5
31851: PUSH
31852: LD_INT 4
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 5
31861: PUSH
31862: LD_INT 5
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: LD_INT 5
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: LD_INT 4
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: PUSH
31892: LD_INT 3
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 5
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 3
31911: PUSH
31912: LD_INT 5
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: LD_INT 3
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: LD_INT 2
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: LD_INT 4
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 4
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: LD_INT 3
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 4
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 4
32014: NEG
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 4
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: NEG
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 3
32048: NEG
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 4
32059: NEG
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 5
32070: NEG
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 5
32081: NEG
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 5
32093: NEG
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 3
32105: NEG
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: NEG
32117: PUSH
32118: LD_INT 3
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: LD_INT 4
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: LD_INT 3
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: LD_INT 2
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 3
32164: NEG
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 4
32176: NEG
32177: PUSH
32178: LD_INT 3
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 4
32188: NEG
32189: PUSH
32190: LD_INT 4
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: LD_INT 4
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 4
32212: NEG
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: LD_INT 4
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: LD_INT 5
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 4
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: LD_INT 3
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: LD_INT 3
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: LD_INT 4
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 5
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 3
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 5
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32371: LD_ADDR_VAR 0 31
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 4
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 3
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 4
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: LD_INT 5
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: LD_INT 5
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 5
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 2
32460: NEG
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 3
32471: NEG
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 3
32482: NEG
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 3
32516: NEG
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 4
32527: NEG
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 4
32538: NEG
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 4
32550: NEG
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 4
32573: NEG
32574: PUSH
32575: LD_INT 4
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 4
32585: NEG
32586: PUSH
32587: LD_INT 5
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 3
32597: NEG
32598: PUSH
32599: LD_INT 4
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 3
32609: NEG
32610: PUSH
32611: LD_INT 3
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 4
32621: NEG
32622: PUSH
32623: LD_INT 3
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 5
32633: NEG
32634: PUSH
32635: LD_INT 4
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 5
32645: NEG
32646: PUSH
32647: LD_INT 5
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 3
32657: NEG
32658: PUSH
32659: LD_INT 5
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 5
32669: NEG
32670: PUSH
32671: LD_INT 3
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 3
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: LD_INT 4
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: LD_INT 3
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 2
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: LD_INT 3
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: LD_INT 4
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 2
32760: PUSH
32761: LD_INT 2
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: NEG
32772: PUSH
32773: LD_INT 4
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 4
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 4
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 5
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 5
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 4
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 3
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 3
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 5
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32921: LD_ADDR_VAR 0 32
32925: PUSH
32926: LD_INT 4
32928: NEG
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 4
32939: NEG
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 3
32962: NEG
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 4
32973: NEG
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 5
32984: NEG
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 5
32995: NEG
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 5
33007: NEG
33008: PUSH
33009: LD_INT 2
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 3
33019: NEG
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 3
33030: NEG
33031: PUSH
33032: LD_INT 3
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 3
33042: NEG
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: NEG
33055: PUSH
33056: LD_INT 3
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: LD_INT 2
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 4
33090: NEG
33091: PUSH
33092: LD_INT 3
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 4
33102: NEG
33103: PUSH
33104: LD_INT 4
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 2
33114: NEG
33115: PUSH
33116: LD_INT 4
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 4
33126: NEG
33127: PUSH
33128: LD_INT 2
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 4
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: LD_INT 5
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: LD_INT 4
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: LD_INT 3
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 3
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: NEG
33194: PUSH
33195: LD_INT 4
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: LD_INT 5
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 2
33217: PUSH
33218: LD_INT 3
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 2
33228: NEG
33229: PUSH
33230: LD_INT 5
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 3
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 4
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 4
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 3
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 2
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 4
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 4
33333: PUSH
33334: LD_INT 4
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 4
33343: PUSH
33344: LD_INT 3
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 5
33353: PUSH
33354: LD_INT 4
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 5
33363: PUSH
33364: LD_INT 5
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 4
33373: PUSH
33374: LD_INT 5
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 3
33383: PUSH
33384: LD_INT 4
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: LD_INT 3
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 5
33403: PUSH
33404: LD_INT 3
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: LD_INT 5
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33468: LD_ADDR_VAR 0 33
33472: PUSH
33473: LD_INT 4
33475: NEG
33476: PUSH
33477: LD_INT 4
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 4
33487: NEG
33488: PUSH
33489: LD_INT 5
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 3
33499: NEG
33500: PUSH
33501: LD_INT 4
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 3
33511: NEG
33512: PUSH
33513: LD_INT 3
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 4
33523: NEG
33524: PUSH
33525: LD_INT 3
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 5
33535: NEG
33536: PUSH
33537: LD_INT 4
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 5
33547: NEG
33548: PUSH
33549: LD_INT 5
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 3
33559: NEG
33560: PUSH
33561: LD_INT 5
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 5
33571: NEG
33572: PUSH
33573: LD_INT 3
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 3
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: LD_INT 4
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 2
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: LD_INT 3
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: LD_INT 4
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: LD_INT 2
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: LD_INT 4
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 4
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 4
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 5
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 5
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 4
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 3
33736: PUSH
33737: LD_INT 0
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 3
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 5
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 3
33778: PUSH
33779: LD_INT 3
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 3
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 4
33798: PUSH
33799: LD_INT 3
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 4
33808: PUSH
33809: LD_INT 4
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 3
33818: PUSH
33819: LD_INT 4
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: LD_INT 2
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 4
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: LD_INT 4
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 4
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 3
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 4
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: LD_INT 5
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 5
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 4
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: LD_INT 3
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: LD_INT 5
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: NEG
33951: PUSH
33952: LD_INT 3
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34006: LD_ADDR_VAR 0 34
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: LD_INT 4
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 5
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: LD_INT 4
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 3
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 3
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: LD_INT 4
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: LD_INT 5
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: LD_INT 3
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 2
34103: NEG
34104: PUSH
34105: LD_INT 5
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 3
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 4
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 4
34146: PUSH
34147: LD_INT 1
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: LD_INT 1
34179: NEG
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: LD_INT 2
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 4
34198: PUSH
34199: LD_INT 2
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 4
34208: PUSH
34209: LD_INT 4
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 4
34218: PUSH
34219: LD_INT 3
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 5
34228: PUSH
34229: LD_INT 4
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 5
34238: PUSH
34239: LD_INT 5
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 4
34248: PUSH
34249: LD_INT 5
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: LD_INT 4
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 3
34268: PUSH
34269: LD_INT 3
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 5
34278: PUSH
34279: LD_INT 3
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 3
34288: PUSH
34289: LD_INT 5
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: LD_INT 3
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: LD_INT 4
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: LD_INT 4
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: LD_INT 3
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: LD_INT 4
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 4
34391: NEG
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 4
34402: NEG
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 3
34414: NEG
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 3
34425: NEG
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 4
34436: NEG
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 5
34447: NEG
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 5
34458: NEG
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 5
34470: NEG
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 3
34482: NEG
34483: PUSH
34484: LD_INT 2
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: ST_TO_ADDR
// end ; end ;
34538: GO 34541
34540: POP
// case btype of b_depot , b_warehouse :
34541: LD_VAR 0 1
34545: PUSH
34546: LD_INT 0
34548: DOUBLE
34549: EQUAL
34550: IFTRUE 34560
34552: LD_INT 1
34554: DOUBLE
34555: EQUAL
34556: IFTRUE 34560
34558: GO 34761
34560: POP
// case nation of nation_american :
34561: LD_VAR 0 5
34565: PUSH
34566: LD_INT 1
34568: DOUBLE
34569: EQUAL
34570: IFTRUE 34574
34572: GO 34630
34574: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34575: LD_ADDR_VAR 0 9
34579: PUSH
34580: LD_VAR 0 11
34584: PUSH
34585: LD_VAR 0 12
34589: PUSH
34590: LD_VAR 0 13
34594: PUSH
34595: LD_VAR 0 14
34599: PUSH
34600: LD_VAR 0 15
34604: PUSH
34605: LD_VAR 0 16
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: PUSH
34618: LD_VAR 0 4
34622: PUSH
34623: LD_INT 1
34625: PLUS
34626: ARRAY
34627: ST_TO_ADDR
34628: GO 34759
34630: LD_INT 2
34632: DOUBLE
34633: EQUAL
34634: IFTRUE 34638
34636: GO 34694
34638: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34639: LD_ADDR_VAR 0 9
34643: PUSH
34644: LD_VAR 0 17
34648: PUSH
34649: LD_VAR 0 18
34653: PUSH
34654: LD_VAR 0 19
34658: PUSH
34659: LD_VAR 0 20
34663: PUSH
34664: LD_VAR 0 21
34668: PUSH
34669: LD_VAR 0 22
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: PUSH
34682: LD_VAR 0 4
34686: PUSH
34687: LD_INT 1
34689: PLUS
34690: ARRAY
34691: ST_TO_ADDR
34692: GO 34759
34694: LD_INT 3
34696: DOUBLE
34697: EQUAL
34698: IFTRUE 34702
34700: GO 34758
34702: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34703: LD_ADDR_VAR 0 9
34707: PUSH
34708: LD_VAR 0 23
34712: PUSH
34713: LD_VAR 0 24
34717: PUSH
34718: LD_VAR 0 25
34722: PUSH
34723: LD_VAR 0 26
34727: PUSH
34728: LD_VAR 0 27
34732: PUSH
34733: LD_VAR 0 28
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: PUSH
34746: LD_VAR 0 4
34750: PUSH
34751: LD_INT 1
34753: PLUS
34754: ARRAY
34755: ST_TO_ADDR
34756: GO 34759
34758: POP
34759: GO 35314
34761: LD_INT 2
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34775
34767: LD_INT 3
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34775
34773: GO 34831
34775: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34776: LD_ADDR_VAR 0 9
34780: PUSH
34781: LD_VAR 0 29
34785: PUSH
34786: LD_VAR 0 30
34790: PUSH
34791: LD_VAR 0 31
34795: PUSH
34796: LD_VAR 0 32
34800: PUSH
34801: LD_VAR 0 33
34805: PUSH
34806: LD_VAR 0 34
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: PUSH
34819: LD_VAR 0 4
34823: PUSH
34824: LD_INT 1
34826: PLUS
34827: ARRAY
34828: ST_TO_ADDR
34829: GO 35314
34831: LD_INT 16
34833: DOUBLE
34834: EQUAL
34835: IFTRUE 34893
34837: LD_INT 17
34839: DOUBLE
34840: EQUAL
34841: IFTRUE 34893
34843: LD_INT 18
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34893
34849: LD_INT 19
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34893
34855: LD_INT 22
34857: DOUBLE
34858: EQUAL
34859: IFTRUE 34893
34861: LD_INT 20
34863: DOUBLE
34864: EQUAL
34865: IFTRUE 34893
34867: LD_INT 21
34869: DOUBLE
34870: EQUAL
34871: IFTRUE 34893
34873: LD_INT 23
34875: DOUBLE
34876: EQUAL
34877: IFTRUE 34893
34879: LD_INT 24
34881: DOUBLE
34882: EQUAL
34883: IFTRUE 34893
34885: LD_INT 25
34887: DOUBLE
34888: EQUAL
34889: IFTRUE 34893
34891: GO 34949
34893: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34894: LD_ADDR_VAR 0 9
34898: PUSH
34899: LD_VAR 0 35
34903: PUSH
34904: LD_VAR 0 36
34908: PUSH
34909: LD_VAR 0 37
34913: PUSH
34914: LD_VAR 0 38
34918: PUSH
34919: LD_VAR 0 39
34923: PUSH
34924: LD_VAR 0 40
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: PUSH
34937: LD_VAR 0 4
34941: PUSH
34942: LD_INT 1
34944: PLUS
34945: ARRAY
34946: ST_TO_ADDR
34947: GO 35314
34949: LD_INT 6
34951: DOUBLE
34952: EQUAL
34953: IFTRUE 35005
34955: LD_INT 7
34957: DOUBLE
34958: EQUAL
34959: IFTRUE 35005
34961: LD_INT 8
34963: DOUBLE
34964: EQUAL
34965: IFTRUE 35005
34967: LD_INT 13
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 35005
34973: LD_INT 12
34975: DOUBLE
34976: EQUAL
34977: IFTRUE 35005
34979: LD_INT 15
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 35005
34985: LD_INT 11
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 35005
34991: LD_INT 14
34993: DOUBLE
34994: EQUAL
34995: IFTRUE 35005
34997: LD_INT 10
34999: DOUBLE
35000: EQUAL
35001: IFTRUE 35005
35003: GO 35061
35005: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35006: LD_ADDR_VAR 0 9
35010: PUSH
35011: LD_VAR 0 41
35015: PUSH
35016: LD_VAR 0 42
35020: PUSH
35021: LD_VAR 0 43
35025: PUSH
35026: LD_VAR 0 44
35030: PUSH
35031: LD_VAR 0 45
35035: PUSH
35036: LD_VAR 0 46
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: PUSH
35049: LD_VAR 0 4
35053: PUSH
35054: LD_INT 1
35056: PLUS
35057: ARRAY
35058: ST_TO_ADDR
35059: GO 35314
35061: LD_INT 36
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35069
35067: GO 35125
35069: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35070: LD_ADDR_VAR 0 9
35074: PUSH
35075: LD_VAR 0 47
35079: PUSH
35080: LD_VAR 0 48
35084: PUSH
35085: LD_VAR 0 49
35089: PUSH
35090: LD_VAR 0 50
35094: PUSH
35095: LD_VAR 0 51
35099: PUSH
35100: LD_VAR 0 52
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: PUSH
35113: LD_VAR 0 4
35117: PUSH
35118: LD_INT 1
35120: PLUS
35121: ARRAY
35122: ST_TO_ADDR
35123: GO 35314
35125: LD_INT 4
35127: DOUBLE
35128: EQUAL
35129: IFTRUE 35151
35131: LD_INT 5
35133: DOUBLE
35134: EQUAL
35135: IFTRUE 35151
35137: LD_INT 34
35139: DOUBLE
35140: EQUAL
35141: IFTRUE 35151
35143: LD_INT 37
35145: DOUBLE
35146: EQUAL
35147: IFTRUE 35151
35149: GO 35207
35151: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35152: LD_ADDR_VAR 0 9
35156: PUSH
35157: LD_VAR 0 53
35161: PUSH
35162: LD_VAR 0 54
35166: PUSH
35167: LD_VAR 0 55
35171: PUSH
35172: LD_VAR 0 56
35176: PUSH
35177: LD_VAR 0 57
35181: PUSH
35182: LD_VAR 0 58
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: PUSH
35195: LD_VAR 0 4
35199: PUSH
35200: LD_INT 1
35202: PLUS
35203: ARRAY
35204: ST_TO_ADDR
35205: GO 35314
35207: LD_INT 31
35209: DOUBLE
35210: EQUAL
35211: IFTRUE 35257
35213: LD_INT 32
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35257
35219: LD_INT 33
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35257
35225: LD_INT 27
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35257
35231: LD_INT 26
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35257
35237: LD_INT 28
35239: DOUBLE
35240: EQUAL
35241: IFTRUE 35257
35243: LD_INT 29
35245: DOUBLE
35246: EQUAL
35247: IFTRUE 35257
35249: LD_INT 30
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35257
35255: GO 35313
35257: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35258: LD_ADDR_VAR 0 9
35262: PUSH
35263: LD_VAR 0 59
35267: PUSH
35268: LD_VAR 0 60
35272: PUSH
35273: LD_VAR 0 61
35277: PUSH
35278: LD_VAR 0 62
35282: PUSH
35283: LD_VAR 0 63
35287: PUSH
35288: LD_VAR 0 64
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: PUSH
35301: LD_VAR 0 4
35305: PUSH
35306: LD_INT 1
35308: PLUS
35309: ARRAY
35310: ST_TO_ADDR
35311: GO 35314
35313: POP
// temp_list2 = [ ] ;
35314: LD_ADDR_VAR 0 10
35318: PUSH
35319: EMPTY
35320: ST_TO_ADDR
// for i in temp_list do
35321: LD_ADDR_VAR 0 8
35325: PUSH
35326: LD_VAR 0 9
35330: PUSH
35331: FOR_IN
35332: IFFALSE 35384
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35334: LD_ADDR_VAR 0 10
35338: PUSH
35339: LD_VAR 0 10
35343: PUSH
35344: LD_VAR 0 8
35348: PUSH
35349: LD_INT 1
35351: ARRAY
35352: PUSH
35353: LD_VAR 0 2
35357: PLUS
35358: PUSH
35359: LD_VAR 0 8
35363: PUSH
35364: LD_INT 2
35366: ARRAY
35367: PUSH
35368: LD_VAR 0 3
35372: PLUS
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: EMPTY
35379: LIST
35380: ADD
35381: ST_TO_ADDR
35382: GO 35331
35384: POP
35385: POP
// result = temp_list2 ;
35386: LD_ADDR_VAR 0 7
35390: PUSH
35391: LD_VAR 0 10
35395: ST_TO_ADDR
// end ;
35396: LD_VAR 0 7
35400: RET
// export function EnemyInRange ( unit , dist ) ; begin
35401: LD_INT 0
35403: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35404: LD_ADDR_VAR 0 3
35408: PUSH
35409: LD_VAR 0 1
35413: PPUSH
35414: CALL_OW 255
35418: PPUSH
35419: LD_VAR 0 1
35423: PPUSH
35424: CALL_OW 250
35428: PPUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 251
35438: PPUSH
35439: LD_VAR 0 2
35443: PPUSH
35444: CALL 8803 0 4
35448: PUSH
35449: LD_INT 4
35451: ARRAY
35452: ST_TO_ADDR
// end ;
35453: LD_VAR 0 3
35457: RET
// export function PlayerSeeMe ( unit ) ; begin
35458: LD_INT 0
35460: PPUSH
// result := See ( your_side , unit ) ;
35461: LD_ADDR_VAR 0 2
35465: PUSH
35466: LD_OWVAR 2
35470: PPUSH
35471: LD_VAR 0 1
35475: PPUSH
35476: CALL_OW 292
35480: ST_TO_ADDR
// end ;
35481: LD_VAR 0 2
35485: RET
// export function ReverseDir ( unit ) ; begin
35486: LD_INT 0
35488: PPUSH
// if not unit then
35489: LD_VAR 0 1
35493: NOT
35494: IFFALSE 35498
// exit ;
35496: GO 35521
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35498: LD_ADDR_VAR 0 2
35502: PUSH
35503: LD_VAR 0 1
35507: PPUSH
35508: CALL_OW 254
35512: PUSH
35513: LD_INT 3
35515: PLUS
35516: PUSH
35517: LD_INT 6
35519: MOD
35520: ST_TO_ADDR
// end ;
35521: LD_VAR 0 2
35525: RET
// export function ReverseArray ( array ) ; var i ; begin
35526: LD_INT 0
35528: PPUSH
35529: PPUSH
// if not array then
35530: LD_VAR 0 1
35534: NOT
35535: IFFALSE 35539
// exit ;
35537: GO 35594
// result := [ ] ;
35539: LD_ADDR_VAR 0 2
35543: PUSH
35544: EMPTY
35545: ST_TO_ADDR
// for i := array downto 1 do
35546: LD_ADDR_VAR 0 3
35550: PUSH
35551: DOUBLE
35552: LD_VAR 0 1
35556: INC
35557: ST_TO_ADDR
35558: LD_INT 1
35560: PUSH
35561: FOR_DOWNTO
35562: IFFALSE 35592
// result := Join ( result , array [ i ] ) ;
35564: LD_ADDR_VAR 0 2
35568: PUSH
35569: LD_VAR 0 2
35573: PPUSH
35574: LD_VAR 0 1
35578: PUSH
35579: LD_VAR 0 3
35583: ARRAY
35584: PPUSH
35585: CALL 40238 0 2
35589: ST_TO_ADDR
35590: GO 35561
35592: POP
35593: POP
// end ;
35594: LD_VAR 0 2
35598: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35599: LD_INT 0
35601: PPUSH
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
35606: PPUSH
// if not unit or not hexes then
35607: LD_VAR 0 1
35611: NOT
35612: PUSH
35613: LD_VAR 0 2
35617: NOT
35618: OR
35619: IFFALSE 35623
// exit ;
35621: GO 35746
// dist := 9999 ;
35623: LD_ADDR_VAR 0 5
35627: PUSH
35628: LD_INT 9999
35630: ST_TO_ADDR
// for i = 1 to hexes do
35631: LD_ADDR_VAR 0 4
35635: PUSH
35636: DOUBLE
35637: LD_INT 1
35639: DEC
35640: ST_TO_ADDR
35641: LD_VAR 0 2
35645: PUSH
35646: FOR_TO
35647: IFFALSE 35734
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35649: LD_ADDR_VAR 0 6
35653: PUSH
35654: LD_VAR 0 1
35658: PPUSH
35659: LD_VAR 0 2
35663: PUSH
35664: LD_VAR 0 4
35668: ARRAY
35669: PUSH
35670: LD_INT 1
35672: ARRAY
35673: PPUSH
35674: LD_VAR 0 2
35678: PUSH
35679: LD_VAR 0 4
35683: ARRAY
35684: PUSH
35685: LD_INT 2
35687: ARRAY
35688: PPUSH
35689: CALL_OW 297
35693: ST_TO_ADDR
// if tdist < dist then
35694: LD_VAR 0 6
35698: PUSH
35699: LD_VAR 0 5
35703: LESS
35704: IFFALSE 35732
// begin hex := hexes [ i ] ;
35706: LD_ADDR_VAR 0 8
35710: PUSH
35711: LD_VAR 0 2
35715: PUSH
35716: LD_VAR 0 4
35720: ARRAY
35721: ST_TO_ADDR
// dist := tdist ;
35722: LD_ADDR_VAR 0 5
35726: PUSH
35727: LD_VAR 0 6
35731: ST_TO_ADDR
// end ; end ;
35732: GO 35646
35734: POP
35735: POP
// result := hex ;
35736: LD_ADDR_VAR 0 3
35740: PUSH
35741: LD_VAR 0 8
35745: ST_TO_ADDR
// end ;
35746: LD_VAR 0 3
35750: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35751: LD_INT 0
35753: PPUSH
35754: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35755: LD_VAR 0 1
35759: NOT
35760: PUSH
35761: LD_VAR 0 1
35765: PUSH
35766: LD_INT 21
35768: PUSH
35769: LD_INT 2
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 23
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PPUSH
35790: CALL_OW 69
35794: IN
35795: NOT
35796: OR
35797: IFFALSE 35801
// exit ;
35799: GO 35848
// for i = 1 to 3 do
35801: LD_ADDR_VAR 0 3
35805: PUSH
35806: DOUBLE
35807: LD_INT 1
35809: DEC
35810: ST_TO_ADDR
35811: LD_INT 3
35813: PUSH
35814: FOR_TO
35815: IFFALSE 35846
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35817: LD_VAR 0 1
35821: PPUSH
35822: CALL_OW 250
35826: PPUSH
35827: LD_VAR 0 1
35831: PPUSH
35832: CALL_OW 251
35836: PPUSH
35837: LD_INT 1
35839: PPUSH
35840: CALL_OW 453
35844: GO 35814
35846: POP
35847: POP
// end ;
35848: LD_VAR 0 2
35852: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35853: LD_INT 0
35855: PPUSH
35856: PPUSH
35857: PPUSH
35858: PPUSH
35859: PPUSH
35860: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35861: LD_VAR 0 1
35865: NOT
35866: PUSH
35867: LD_VAR 0 2
35871: NOT
35872: OR
35873: PUSH
35874: LD_VAR 0 1
35878: PPUSH
35879: CALL_OW 314
35883: OR
35884: IFFALSE 35888
// exit ;
35886: GO 36355
// if GetLives ( i ) < 250 then
35888: LD_VAR 0 4
35892: PPUSH
35893: CALL_OW 256
35897: PUSH
35898: LD_INT 250
35900: LESS
35901: IFFALSE 35914
// begin ComAutodestruct ( i ) ;
35903: LD_VAR 0 4
35907: PPUSH
35908: CALL 35751 0 1
// exit ;
35912: GO 36355
// end ; x := GetX ( enemy_unit ) ;
35914: LD_ADDR_VAR 0 7
35918: PUSH
35919: LD_VAR 0 2
35923: PPUSH
35924: CALL_OW 250
35928: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35929: LD_ADDR_VAR 0 8
35933: PUSH
35934: LD_VAR 0 2
35938: PPUSH
35939: CALL_OW 251
35943: ST_TO_ADDR
// if not x or not y then
35944: LD_VAR 0 7
35948: NOT
35949: PUSH
35950: LD_VAR 0 8
35954: NOT
35955: OR
35956: IFFALSE 35960
// exit ;
35958: GO 36355
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35960: LD_ADDR_VAR 0 6
35964: PUSH
35965: LD_VAR 0 7
35969: PPUSH
35970: LD_INT 0
35972: PPUSH
35973: LD_INT 4
35975: PPUSH
35976: CALL_OW 272
35980: PUSH
35981: LD_VAR 0 8
35985: PPUSH
35986: LD_INT 0
35988: PPUSH
35989: LD_INT 4
35991: PPUSH
35992: CALL_OW 273
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_VAR 0 7
36005: PPUSH
36006: LD_INT 1
36008: PPUSH
36009: LD_INT 4
36011: PPUSH
36012: CALL_OW 272
36016: PUSH
36017: LD_VAR 0 8
36021: PPUSH
36022: LD_INT 1
36024: PPUSH
36025: LD_INT 4
36027: PPUSH
36028: CALL_OW 273
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_VAR 0 7
36041: PPUSH
36042: LD_INT 2
36044: PPUSH
36045: LD_INT 4
36047: PPUSH
36048: CALL_OW 272
36052: PUSH
36053: LD_VAR 0 8
36057: PPUSH
36058: LD_INT 2
36060: PPUSH
36061: LD_INT 4
36063: PPUSH
36064: CALL_OW 273
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_VAR 0 7
36077: PPUSH
36078: LD_INT 3
36080: PPUSH
36081: LD_INT 4
36083: PPUSH
36084: CALL_OW 272
36088: PUSH
36089: LD_VAR 0 8
36093: PPUSH
36094: LD_INT 3
36096: PPUSH
36097: LD_INT 4
36099: PPUSH
36100: CALL_OW 273
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_VAR 0 7
36113: PPUSH
36114: LD_INT 4
36116: PPUSH
36117: LD_INT 4
36119: PPUSH
36120: CALL_OW 272
36124: PUSH
36125: LD_VAR 0 8
36129: PPUSH
36130: LD_INT 4
36132: PPUSH
36133: LD_INT 4
36135: PPUSH
36136: CALL_OW 273
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_VAR 0 7
36149: PPUSH
36150: LD_INT 5
36152: PPUSH
36153: LD_INT 4
36155: PPUSH
36156: CALL_OW 272
36160: PUSH
36161: LD_VAR 0 8
36165: PPUSH
36166: LD_INT 5
36168: PPUSH
36169: LD_INT 4
36171: PPUSH
36172: CALL_OW 273
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
// for i = tmp downto 1 do
36189: LD_ADDR_VAR 0 4
36193: PUSH
36194: DOUBLE
36195: LD_VAR 0 6
36199: INC
36200: ST_TO_ADDR
36201: LD_INT 1
36203: PUSH
36204: FOR_DOWNTO
36205: IFFALSE 36306
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36207: LD_VAR 0 6
36211: PUSH
36212: LD_VAR 0 4
36216: ARRAY
36217: PUSH
36218: LD_INT 1
36220: ARRAY
36221: PPUSH
36222: LD_VAR 0 6
36226: PUSH
36227: LD_VAR 0 4
36231: ARRAY
36232: PUSH
36233: LD_INT 2
36235: ARRAY
36236: PPUSH
36237: CALL_OW 488
36241: NOT
36242: PUSH
36243: LD_VAR 0 6
36247: PUSH
36248: LD_VAR 0 4
36252: ARRAY
36253: PUSH
36254: LD_INT 1
36256: ARRAY
36257: PPUSH
36258: LD_VAR 0 6
36262: PUSH
36263: LD_VAR 0 4
36267: ARRAY
36268: PUSH
36269: LD_INT 2
36271: ARRAY
36272: PPUSH
36273: CALL_OW 428
36277: PUSH
36278: LD_INT 0
36280: NONEQUAL
36281: OR
36282: IFFALSE 36304
// tmp := Delete ( tmp , i ) ;
36284: LD_ADDR_VAR 0 6
36288: PUSH
36289: LD_VAR 0 6
36293: PPUSH
36294: LD_VAR 0 4
36298: PPUSH
36299: CALL_OW 3
36303: ST_TO_ADDR
36304: GO 36204
36306: POP
36307: POP
// j := GetClosestHex ( unit , tmp ) ;
36308: LD_ADDR_VAR 0 5
36312: PUSH
36313: LD_VAR 0 1
36317: PPUSH
36318: LD_VAR 0 6
36322: PPUSH
36323: CALL 35599 0 2
36327: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36328: LD_VAR 0 1
36332: PPUSH
36333: LD_VAR 0 5
36337: PUSH
36338: LD_INT 1
36340: ARRAY
36341: PPUSH
36342: LD_VAR 0 5
36346: PUSH
36347: LD_INT 2
36349: ARRAY
36350: PPUSH
36351: CALL_OW 111
// end ;
36355: LD_VAR 0 3
36359: RET
// export function PrepareApemanSoldier ( ) ; begin
36360: LD_INT 0
36362: PPUSH
// uc_nation := 0 ;
36363: LD_ADDR_OWVAR 21
36367: PUSH
36368: LD_INT 0
36370: ST_TO_ADDR
// hc_sex := sex_male ;
36371: LD_ADDR_OWVAR 27
36375: PUSH
36376: LD_INT 1
36378: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36379: LD_ADDR_OWVAR 28
36383: PUSH
36384: LD_INT 15
36386: ST_TO_ADDR
// hc_gallery :=  ;
36387: LD_ADDR_OWVAR 33
36391: PUSH
36392: LD_STRING 
36394: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36395: LD_ADDR_OWVAR 31
36399: PUSH
36400: LD_INT 0
36402: PPUSH
36403: LD_INT 3
36405: PPUSH
36406: CALL_OW 12
36410: PUSH
36411: LD_INT 0
36413: PPUSH
36414: LD_INT 3
36416: PPUSH
36417: CALL_OW 12
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: ST_TO_ADDR
// end ;
36434: LD_VAR 0 1
36438: RET
// export function PrepareApemanEngineer ( ) ; begin
36439: LD_INT 0
36441: PPUSH
// uc_nation := 0 ;
36442: LD_ADDR_OWVAR 21
36446: PUSH
36447: LD_INT 0
36449: ST_TO_ADDR
// hc_sex := sex_male ;
36450: LD_ADDR_OWVAR 27
36454: PUSH
36455: LD_INT 1
36457: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36458: LD_ADDR_OWVAR 28
36462: PUSH
36463: LD_INT 16
36465: ST_TO_ADDR
// hc_gallery :=  ;
36466: LD_ADDR_OWVAR 33
36470: PUSH
36471: LD_STRING 
36473: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36474: LD_ADDR_OWVAR 31
36478: PUSH
36479: LD_INT 0
36481: PPUSH
36482: LD_INT 3
36484: PPUSH
36485: CALL_OW 12
36489: PUSH
36490: LD_INT 0
36492: PPUSH
36493: LD_INT 3
36495: PPUSH
36496: CALL_OW 12
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: ST_TO_ADDR
// end ;
36513: LD_VAR 0 1
36517: RET
// export function PrepareApeman ( agressivity ) ; begin
36518: LD_INT 0
36520: PPUSH
// uc_side := 0 ;
36521: LD_ADDR_OWVAR 20
36525: PUSH
36526: LD_INT 0
36528: ST_TO_ADDR
// uc_nation := 0 ;
36529: LD_ADDR_OWVAR 21
36533: PUSH
36534: LD_INT 0
36536: ST_TO_ADDR
// hc_sex := sex_male ;
36537: LD_ADDR_OWVAR 27
36541: PUSH
36542: LD_INT 1
36544: ST_TO_ADDR
// hc_class := class_apeman ;
36545: LD_ADDR_OWVAR 28
36549: PUSH
36550: LD_INT 12
36552: ST_TO_ADDR
// hc_gallery :=  ;
36553: LD_ADDR_OWVAR 33
36557: PUSH
36558: LD_STRING 
36560: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36561: LD_ADDR_OWVAR 35
36565: PUSH
36566: LD_VAR 0 1
36570: NEG
36571: PPUSH
36572: LD_VAR 0 1
36576: PPUSH
36577: CALL_OW 12
36581: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36582: LD_ADDR_OWVAR 31
36586: PUSH
36587: LD_INT 0
36589: PPUSH
36590: LD_INT 3
36592: PPUSH
36593: CALL_OW 12
36597: PUSH
36598: LD_INT 0
36600: PPUSH
36601: LD_INT 3
36603: PPUSH
36604: CALL_OW 12
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: ST_TO_ADDR
// end ;
36621: LD_VAR 0 2
36625: RET
// export function PrepareTiger ( agressivity ) ; begin
36626: LD_INT 0
36628: PPUSH
// uc_side := 0 ;
36629: LD_ADDR_OWVAR 20
36633: PUSH
36634: LD_INT 0
36636: ST_TO_ADDR
// uc_nation := 0 ;
36637: LD_ADDR_OWVAR 21
36641: PUSH
36642: LD_INT 0
36644: ST_TO_ADDR
// hc_class := class_tiger ;
36645: LD_ADDR_OWVAR 28
36649: PUSH
36650: LD_INT 14
36652: ST_TO_ADDR
// hc_gallery :=  ;
36653: LD_ADDR_OWVAR 33
36657: PUSH
36658: LD_STRING 
36660: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36661: LD_ADDR_OWVAR 35
36665: PUSH
36666: LD_VAR 0 1
36670: NEG
36671: PPUSH
36672: LD_VAR 0 1
36676: PPUSH
36677: CALL_OW 12
36681: ST_TO_ADDR
// end ;
36682: LD_VAR 0 2
36686: RET
// export function PrepareEnchidna ( ) ; begin
36687: LD_INT 0
36689: PPUSH
// uc_side := 0 ;
36690: LD_ADDR_OWVAR 20
36694: PUSH
36695: LD_INT 0
36697: ST_TO_ADDR
// uc_nation := 0 ;
36698: LD_ADDR_OWVAR 21
36702: PUSH
36703: LD_INT 0
36705: ST_TO_ADDR
// hc_class := class_baggie ;
36706: LD_ADDR_OWVAR 28
36710: PUSH
36711: LD_INT 13
36713: ST_TO_ADDR
// hc_gallery :=  ;
36714: LD_ADDR_OWVAR 33
36718: PUSH
36719: LD_STRING 
36721: ST_TO_ADDR
// end ;
36722: LD_VAR 0 1
36726: RET
// export function PrepareFrog ( ) ; begin
36727: LD_INT 0
36729: PPUSH
// uc_side := 0 ;
36730: LD_ADDR_OWVAR 20
36734: PUSH
36735: LD_INT 0
36737: ST_TO_ADDR
// uc_nation := 0 ;
36738: LD_ADDR_OWVAR 21
36742: PUSH
36743: LD_INT 0
36745: ST_TO_ADDR
// hc_class := class_frog ;
36746: LD_ADDR_OWVAR 28
36750: PUSH
36751: LD_INT 19
36753: ST_TO_ADDR
// hc_gallery :=  ;
36754: LD_ADDR_OWVAR 33
36758: PUSH
36759: LD_STRING 
36761: ST_TO_ADDR
// end ;
36762: LD_VAR 0 1
36766: RET
// export function PrepareFish ( ) ; begin
36767: LD_INT 0
36769: PPUSH
// uc_side := 0 ;
36770: LD_ADDR_OWVAR 20
36774: PUSH
36775: LD_INT 0
36777: ST_TO_ADDR
// uc_nation := 0 ;
36778: LD_ADDR_OWVAR 21
36782: PUSH
36783: LD_INT 0
36785: ST_TO_ADDR
// hc_class := class_fish ;
36786: LD_ADDR_OWVAR 28
36790: PUSH
36791: LD_INT 20
36793: ST_TO_ADDR
// hc_gallery :=  ;
36794: LD_ADDR_OWVAR 33
36798: PUSH
36799: LD_STRING 
36801: ST_TO_ADDR
// end ;
36802: LD_VAR 0 1
36806: RET
// export function PrepareBird ( ) ; begin
36807: LD_INT 0
36809: PPUSH
// uc_side := 0 ;
36810: LD_ADDR_OWVAR 20
36814: PUSH
36815: LD_INT 0
36817: ST_TO_ADDR
// uc_nation := 0 ;
36818: LD_ADDR_OWVAR 21
36822: PUSH
36823: LD_INT 0
36825: ST_TO_ADDR
// hc_class := class_phororhacos ;
36826: LD_ADDR_OWVAR 28
36830: PUSH
36831: LD_INT 18
36833: ST_TO_ADDR
// hc_gallery :=  ;
36834: LD_ADDR_OWVAR 33
36838: PUSH
36839: LD_STRING 
36841: ST_TO_ADDR
// end ;
36842: LD_VAR 0 1
36846: RET
// export function PrepareHorse ( ) ; begin
36847: LD_INT 0
36849: PPUSH
// uc_side := 0 ;
36850: LD_ADDR_OWVAR 20
36854: PUSH
36855: LD_INT 0
36857: ST_TO_ADDR
// uc_nation := 0 ;
36858: LD_ADDR_OWVAR 21
36862: PUSH
36863: LD_INT 0
36865: ST_TO_ADDR
// hc_class := class_horse ;
36866: LD_ADDR_OWVAR 28
36870: PUSH
36871: LD_INT 21
36873: ST_TO_ADDR
// hc_gallery :=  ;
36874: LD_ADDR_OWVAR 33
36878: PUSH
36879: LD_STRING 
36881: ST_TO_ADDR
// end ;
36882: LD_VAR 0 1
36886: RET
// export function PrepareMastodont ( ) ; begin
36887: LD_INT 0
36889: PPUSH
// uc_side := 0 ;
36890: LD_ADDR_OWVAR 20
36894: PUSH
36895: LD_INT 0
36897: ST_TO_ADDR
// uc_nation := 0 ;
36898: LD_ADDR_OWVAR 21
36902: PUSH
36903: LD_INT 0
36905: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36906: LD_ADDR_OWVAR 37
36910: PUSH
36911: LD_INT 31
36913: ST_TO_ADDR
// vc_control := control_rider ;
36914: LD_ADDR_OWVAR 38
36918: PUSH
36919: LD_INT 4
36921: ST_TO_ADDR
// end ;
36922: LD_VAR 0 1
36926: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36927: LD_INT 0
36929: PPUSH
36930: PPUSH
36931: PPUSH
// uc_side = 0 ;
36932: LD_ADDR_OWVAR 20
36936: PUSH
36937: LD_INT 0
36939: ST_TO_ADDR
// uc_nation = 0 ;
36940: LD_ADDR_OWVAR 21
36944: PUSH
36945: LD_INT 0
36947: ST_TO_ADDR
// InitHc_All ( ) ;
36948: CALL_OW 584
// InitVc ;
36952: CALL_OW 20
// if mastodonts then
36956: LD_VAR 0 6
36960: IFFALSE 37027
// for i = 1 to mastodonts do
36962: LD_ADDR_VAR 0 11
36966: PUSH
36967: DOUBLE
36968: LD_INT 1
36970: DEC
36971: ST_TO_ADDR
36972: LD_VAR 0 6
36976: PUSH
36977: FOR_TO
36978: IFFALSE 37025
// begin vc_chassis := 31 ;
36980: LD_ADDR_OWVAR 37
36984: PUSH
36985: LD_INT 31
36987: ST_TO_ADDR
// vc_control := control_rider ;
36988: LD_ADDR_OWVAR 38
36992: PUSH
36993: LD_INT 4
36995: ST_TO_ADDR
// animal := CreateVehicle ;
36996: LD_ADDR_VAR 0 12
37000: PUSH
37001: CALL_OW 45
37005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37006: LD_VAR 0 12
37010: PPUSH
37011: LD_VAR 0 8
37015: PPUSH
37016: LD_INT 0
37018: PPUSH
37019: CALL 39155 0 3
// end ;
37023: GO 36977
37025: POP
37026: POP
// if horses then
37027: LD_VAR 0 5
37031: IFFALSE 37098
// for i = 1 to horses do
37033: LD_ADDR_VAR 0 11
37037: PUSH
37038: DOUBLE
37039: LD_INT 1
37041: DEC
37042: ST_TO_ADDR
37043: LD_VAR 0 5
37047: PUSH
37048: FOR_TO
37049: IFFALSE 37096
// begin hc_class := 21 ;
37051: LD_ADDR_OWVAR 28
37055: PUSH
37056: LD_INT 21
37058: ST_TO_ADDR
// hc_gallery :=  ;
37059: LD_ADDR_OWVAR 33
37063: PUSH
37064: LD_STRING 
37066: ST_TO_ADDR
// animal := CreateHuman ;
37067: LD_ADDR_VAR 0 12
37071: PUSH
37072: CALL_OW 44
37076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37077: LD_VAR 0 12
37081: PPUSH
37082: LD_VAR 0 8
37086: PPUSH
37087: LD_INT 0
37089: PPUSH
37090: CALL 39155 0 3
// end ;
37094: GO 37048
37096: POP
37097: POP
// if birds then
37098: LD_VAR 0 1
37102: IFFALSE 37169
// for i = 1 to birds do
37104: LD_ADDR_VAR 0 11
37108: PUSH
37109: DOUBLE
37110: LD_INT 1
37112: DEC
37113: ST_TO_ADDR
37114: LD_VAR 0 1
37118: PUSH
37119: FOR_TO
37120: IFFALSE 37167
// begin hc_class = 18 ;
37122: LD_ADDR_OWVAR 28
37126: PUSH
37127: LD_INT 18
37129: ST_TO_ADDR
// hc_gallery =  ;
37130: LD_ADDR_OWVAR 33
37134: PUSH
37135: LD_STRING 
37137: ST_TO_ADDR
// animal := CreateHuman ;
37138: LD_ADDR_VAR 0 12
37142: PUSH
37143: CALL_OW 44
37147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37148: LD_VAR 0 12
37152: PPUSH
37153: LD_VAR 0 8
37157: PPUSH
37158: LD_INT 0
37160: PPUSH
37161: CALL 39155 0 3
// end ;
37165: GO 37119
37167: POP
37168: POP
// if tigers then
37169: LD_VAR 0 2
37173: IFFALSE 37257
// for i = 1 to tigers do
37175: LD_ADDR_VAR 0 11
37179: PUSH
37180: DOUBLE
37181: LD_INT 1
37183: DEC
37184: ST_TO_ADDR
37185: LD_VAR 0 2
37189: PUSH
37190: FOR_TO
37191: IFFALSE 37255
// begin hc_class = class_tiger ;
37193: LD_ADDR_OWVAR 28
37197: PUSH
37198: LD_INT 14
37200: ST_TO_ADDR
// hc_gallery =  ;
37201: LD_ADDR_OWVAR 33
37205: PUSH
37206: LD_STRING 
37208: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37209: LD_ADDR_OWVAR 35
37213: PUSH
37214: LD_INT 7
37216: NEG
37217: PPUSH
37218: LD_INT 7
37220: PPUSH
37221: CALL_OW 12
37225: ST_TO_ADDR
// animal := CreateHuman ;
37226: LD_ADDR_VAR 0 12
37230: PUSH
37231: CALL_OW 44
37235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37236: LD_VAR 0 12
37240: PPUSH
37241: LD_VAR 0 8
37245: PPUSH
37246: LD_INT 0
37248: PPUSH
37249: CALL 39155 0 3
// end ;
37253: GO 37190
37255: POP
37256: POP
// if apemans then
37257: LD_VAR 0 3
37261: IFFALSE 37384
// for i = 1 to apemans do
37263: LD_ADDR_VAR 0 11
37267: PUSH
37268: DOUBLE
37269: LD_INT 1
37271: DEC
37272: ST_TO_ADDR
37273: LD_VAR 0 3
37277: PUSH
37278: FOR_TO
37279: IFFALSE 37382
// begin hc_class = class_apeman ;
37281: LD_ADDR_OWVAR 28
37285: PUSH
37286: LD_INT 12
37288: ST_TO_ADDR
// hc_gallery =  ;
37289: LD_ADDR_OWVAR 33
37293: PUSH
37294: LD_STRING 
37296: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37297: LD_ADDR_OWVAR 35
37301: PUSH
37302: LD_INT 2
37304: NEG
37305: PPUSH
37306: LD_INT 2
37308: PPUSH
37309: CALL_OW 12
37313: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37314: LD_ADDR_OWVAR 31
37318: PUSH
37319: LD_INT 1
37321: PPUSH
37322: LD_INT 3
37324: PPUSH
37325: CALL_OW 12
37329: PUSH
37330: LD_INT 1
37332: PPUSH
37333: LD_INT 3
37335: PPUSH
37336: CALL_OW 12
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: ST_TO_ADDR
// animal := CreateHuman ;
37353: LD_ADDR_VAR 0 12
37357: PUSH
37358: CALL_OW 44
37362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37363: LD_VAR 0 12
37367: PPUSH
37368: LD_VAR 0 8
37372: PPUSH
37373: LD_INT 0
37375: PPUSH
37376: CALL 39155 0 3
// end ;
37380: GO 37278
37382: POP
37383: POP
// if enchidnas then
37384: LD_VAR 0 4
37388: IFFALSE 37455
// for i = 1 to enchidnas do
37390: LD_ADDR_VAR 0 11
37394: PUSH
37395: DOUBLE
37396: LD_INT 1
37398: DEC
37399: ST_TO_ADDR
37400: LD_VAR 0 4
37404: PUSH
37405: FOR_TO
37406: IFFALSE 37453
// begin hc_class = 13 ;
37408: LD_ADDR_OWVAR 28
37412: PUSH
37413: LD_INT 13
37415: ST_TO_ADDR
// hc_gallery =  ;
37416: LD_ADDR_OWVAR 33
37420: PUSH
37421: LD_STRING 
37423: ST_TO_ADDR
// animal := CreateHuman ;
37424: LD_ADDR_VAR 0 12
37428: PUSH
37429: CALL_OW 44
37433: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37434: LD_VAR 0 12
37438: PPUSH
37439: LD_VAR 0 8
37443: PPUSH
37444: LD_INT 0
37446: PPUSH
37447: CALL 39155 0 3
// end ;
37451: GO 37405
37453: POP
37454: POP
// if fishes then
37455: LD_VAR 0 7
37459: IFFALSE 37526
// for i = 1 to fishes do
37461: LD_ADDR_VAR 0 11
37465: PUSH
37466: DOUBLE
37467: LD_INT 1
37469: DEC
37470: ST_TO_ADDR
37471: LD_VAR 0 7
37475: PUSH
37476: FOR_TO
37477: IFFALSE 37524
// begin hc_class = 20 ;
37479: LD_ADDR_OWVAR 28
37483: PUSH
37484: LD_INT 20
37486: ST_TO_ADDR
// hc_gallery =  ;
37487: LD_ADDR_OWVAR 33
37491: PUSH
37492: LD_STRING 
37494: ST_TO_ADDR
// animal := CreateHuman ;
37495: LD_ADDR_VAR 0 12
37499: PUSH
37500: CALL_OW 44
37504: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37505: LD_VAR 0 12
37509: PPUSH
37510: LD_VAR 0 9
37514: PPUSH
37515: LD_INT 0
37517: PPUSH
37518: CALL 39155 0 3
// end ;
37522: GO 37476
37524: POP
37525: POP
// end ;
37526: LD_VAR 0 10
37530: RET
// export function WantHeal ( sci , unit ) ; begin
37531: LD_INT 0
37533: PPUSH
// if GetTaskList ( sci ) > 0 then
37534: LD_VAR 0 1
37538: PPUSH
37539: CALL_OW 437
37543: PUSH
37544: LD_INT 0
37546: GREATER
37547: IFFALSE 37617
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 437
37558: PUSH
37559: LD_INT 1
37561: ARRAY
37562: PUSH
37563: LD_INT 1
37565: ARRAY
37566: PUSH
37567: LD_STRING l
37569: EQUAL
37570: PUSH
37571: LD_VAR 0 1
37575: PPUSH
37576: CALL_OW 437
37580: PUSH
37581: LD_INT 1
37583: ARRAY
37584: PUSH
37585: LD_INT 4
37587: ARRAY
37588: PUSH
37589: LD_VAR 0 2
37593: EQUAL
37594: AND
37595: IFFALSE 37607
// result := true else
37597: LD_ADDR_VAR 0 3
37601: PUSH
37602: LD_INT 1
37604: ST_TO_ADDR
37605: GO 37615
// result := false ;
37607: LD_ADDR_VAR 0 3
37611: PUSH
37612: LD_INT 0
37614: ST_TO_ADDR
// end else
37615: GO 37625
// result := false ;
37617: LD_ADDR_VAR 0 3
37621: PUSH
37622: LD_INT 0
37624: ST_TO_ADDR
// end ;
37625: LD_VAR 0 3
37629: RET
// export function HealTarget ( sci ) ; begin
37630: LD_INT 0
37632: PPUSH
// if not sci then
37633: LD_VAR 0 1
37637: NOT
37638: IFFALSE 37642
// exit ;
37640: GO 37707
// result := 0 ;
37642: LD_ADDR_VAR 0 2
37646: PUSH
37647: LD_INT 0
37649: ST_TO_ADDR
// if GetTaskList ( sci ) then
37650: LD_VAR 0 1
37654: PPUSH
37655: CALL_OW 437
37659: IFFALSE 37707
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37661: LD_VAR 0 1
37665: PPUSH
37666: CALL_OW 437
37670: PUSH
37671: LD_INT 1
37673: ARRAY
37674: PUSH
37675: LD_INT 1
37677: ARRAY
37678: PUSH
37679: LD_STRING l
37681: EQUAL
37682: IFFALSE 37707
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37684: LD_ADDR_VAR 0 2
37688: PUSH
37689: LD_VAR 0 1
37693: PPUSH
37694: CALL_OW 437
37698: PUSH
37699: LD_INT 1
37701: ARRAY
37702: PUSH
37703: LD_INT 4
37705: ARRAY
37706: ST_TO_ADDR
// end ;
37707: LD_VAR 0 2
37711: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37712: LD_INT 0
37714: PPUSH
37715: PPUSH
37716: PPUSH
37717: PPUSH
// if not base_units then
37718: LD_VAR 0 1
37722: NOT
37723: IFFALSE 37727
// exit ;
37725: GO 37814
// result := false ;
37727: LD_ADDR_VAR 0 2
37731: PUSH
37732: LD_INT 0
37734: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37735: LD_ADDR_VAR 0 5
37739: PUSH
37740: LD_VAR 0 1
37744: PPUSH
37745: LD_INT 21
37747: PUSH
37748: LD_INT 3
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PPUSH
37755: CALL_OW 72
37759: ST_TO_ADDR
// if not tmp then
37760: LD_VAR 0 5
37764: NOT
37765: IFFALSE 37769
// exit ;
37767: GO 37814
// for i in tmp do
37769: LD_ADDR_VAR 0 3
37773: PUSH
37774: LD_VAR 0 5
37778: PUSH
37779: FOR_IN
37780: IFFALSE 37812
// begin result := EnemyInRange ( i , 22 ) ;
37782: LD_ADDR_VAR 0 2
37786: PUSH
37787: LD_VAR 0 3
37791: PPUSH
37792: LD_INT 22
37794: PPUSH
37795: CALL 35401 0 2
37799: ST_TO_ADDR
// if result then
37800: LD_VAR 0 2
37804: IFFALSE 37810
// exit ;
37806: POP
37807: POP
37808: GO 37814
// end ;
37810: GO 37779
37812: POP
37813: POP
// end ;
37814: LD_VAR 0 2
37818: RET
// export function FilterByTag ( units , tag ) ; begin
37819: LD_INT 0
37821: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37822: LD_ADDR_VAR 0 3
37826: PUSH
37827: LD_VAR 0 1
37831: PPUSH
37832: LD_INT 120
37834: PUSH
37835: LD_VAR 0 2
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PPUSH
37844: CALL_OW 72
37848: ST_TO_ADDR
// end ;
37849: LD_VAR 0 3
37853: RET
// export function IsDriver ( un ) ; begin
37854: LD_INT 0
37856: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37857: LD_ADDR_VAR 0 2
37861: PUSH
37862: LD_VAR 0 1
37866: PUSH
37867: LD_INT 55
37869: PUSH
37870: EMPTY
37871: LIST
37872: PPUSH
37873: CALL_OW 69
37877: IN
37878: ST_TO_ADDR
// end ;
37879: LD_VAR 0 2
37883: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37884: LD_INT 0
37886: PPUSH
37887: PPUSH
// list := [ ] ;
37888: LD_ADDR_VAR 0 5
37892: PUSH
37893: EMPTY
37894: ST_TO_ADDR
// case d of 0 :
37895: LD_VAR 0 3
37899: PUSH
37900: LD_INT 0
37902: DOUBLE
37903: EQUAL
37904: IFTRUE 37908
37906: GO 38041
37908: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37909: LD_ADDR_VAR 0 5
37913: PUSH
37914: LD_VAR 0 1
37918: PUSH
37919: LD_INT 4
37921: MINUS
37922: PUSH
37923: LD_VAR 0 2
37927: PUSH
37928: LD_INT 4
37930: MINUS
37931: PUSH
37932: LD_INT 2
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: PUSH
37940: LD_VAR 0 1
37944: PUSH
37945: LD_INT 3
37947: MINUS
37948: PUSH
37949: LD_VAR 0 2
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: PUSH
37962: LD_VAR 0 1
37966: PUSH
37967: LD_INT 4
37969: PLUS
37970: PUSH
37971: LD_VAR 0 2
37975: PUSH
37976: LD_INT 4
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: PUSH
37984: LD_VAR 0 1
37988: PUSH
37989: LD_INT 3
37991: PLUS
37992: PUSH
37993: LD_VAR 0 2
37997: PUSH
37998: LD_INT 3
38000: PLUS
38001: PUSH
38002: LD_INT 5
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: PUSH
38010: LD_VAR 0 1
38014: PUSH
38015: LD_VAR 0 2
38019: PUSH
38020: LD_INT 4
38022: PLUS
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: ST_TO_ADDR
// end ; 1 :
38039: GO 38739
38041: LD_INT 1
38043: DOUBLE
38044: EQUAL
38045: IFTRUE 38049
38047: GO 38182
38049: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38050: LD_ADDR_VAR 0 5
38054: PUSH
38055: LD_VAR 0 1
38059: PUSH
38060: LD_VAR 0 2
38064: PUSH
38065: LD_INT 4
38067: MINUS
38068: PUSH
38069: LD_INT 3
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: PUSH
38077: LD_VAR 0 1
38081: PUSH
38082: LD_INT 3
38084: MINUS
38085: PUSH
38086: LD_VAR 0 2
38090: PUSH
38091: LD_INT 3
38093: MINUS
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: PUSH
38103: LD_VAR 0 1
38107: PUSH
38108: LD_INT 4
38110: MINUS
38111: PUSH
38112: LD_VAR 0 2
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: LIST
38124: PUSH
38125: LD_VAR 0 1
38129: PUSH
38130: LD_VAR 0 2
38134: PUSH
38135: LD_INT 3
38137: PLUS
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: PUSH
38147: LD_VAR 0 1
38151: PUSH
38152: LD_INT 4
38154: PLUS
38155: PUSH
38156: LD_VAR 0 2
38160: PUSH
38161: LD_INT 4
38163: PLUS
38164: PUSH
38165: LD_INT 5
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: ST_TO_ADDR
// end ; 2 :
38180: GO 38739
38182: LD_INT 2
38184: DOUBLE
38185: EQUAL
38186: IFTRUE 38190
38188: GO 38319
38190: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38191: LD_ADDR_VAR 0 5
38195: PUSH
38196: LD_VAR 0 1
38200: PUSH
38201: LD_VAR 0 2
38205: PUSH
38206: LD_INT 3
38208: MINUS
38209: PUSH
38210: LD_INT 3
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: PUSH
38218: LD_VAR 0 1
38222: PUSH
38223: LD_INT 4
38225: PLUS
38226: PUSH
38227: LD_VAR 0 2
38231: PUSH
38232: LD_INT 4
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: PUSH
38240: LD_VAR 0 1
38244: PUSH
38245: LD_VAR 0 2
38249: PUSH
38250: LD_INT 4
38252: PLUS
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: PUSH
38262: LD_VAR 0 1
38266: PUSH
38267: LD_INT 3
38269: MINUS
38270: PUSH
38271: LD_VAR 0 2
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: PUSH
38284: LD_VAR 0 1
38288: PUSH
38289: LD_INT 4
38291: MINUS
38292: PUSH
38293: LD_VAR 0 2
38297: PUSH
38298: LD_INT 4
38300: MINUS
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: ST_TO_ADDR
// end ; 3 :
38317: GO 38739
38319: LD_INT 3
38321: DOUBLE
38322: EQUAL
38323: IFTRUE 38327
38325: GO 38460
38327: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38328: LD_ADDR_VAR 0 5
38332: PUSH
38333: LD_VAR 0 1
38337: PUSH
38338: LD_INT 3
38340: PLUS
38341: PUSH
38342: LD_VAR 0 2
38346: PUSH
38347: LD_INT 4
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: PUSH
38355: LD_VAR 0 1
38359: PUSH
38360: LD_INT 4
38362: PLUS
38363: PUSH
38364: LD_VAR 0 2
38368: PUSH
38369: LD_INT 4
38371: PLUS
38372: PUSH
38373: LD_INT 5
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: PUSH
38381: LD_VAR 0 1
38385: PUSH
38386: LD_INT 4
38388: MINUS
38389: PUSH
38390: LD_VAR 0 2
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: PUSH
38403: LD_VAR 0 1
38407: PUSH
38408: LD_VAR 0 2
38412: PUSH
38413: LD_INT 4
38415: MINUS
38416: PUSH
38417: LD_INT 3
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: PUSH
38425: LD_VAR 0 1
38429: PUSH
38430: LD_INT 3
38432: MINUS
38433: PUSH
38434: LD_VAR 0 2
38438: PUSH
38439: LD_INT 3
38441: MINUS
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: ST_TO_ADDR
// end ; 4 :
38458: GO 38739
38460: LD_INT 4
38462: DOUBLE
38463: EQUAL
38464: IFTRUE 38468
38466: GO 38601
38468: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38469: LD_ADDR_VAR 0 5
38473: PUSH
38474: LD_VAR 0 1
38478: PUSH
38479: LD_VAR 0 2
38483: PUSH
38484: LD_INT 4
38486: PLUS
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: PUSH
38496: LD_VAR 0 1
38500: PUSH
38501: LD_INT 3
38503: PLUS
38504: PUSH
38505: LD_VAR 0 2
38509: PUSH
38510: LD_INT 3
38512: PLUS
38513: PUSH
38514: LD_INT 5
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: LIST
38521: PUSH
38522: LD_VAR 0 1
38526: PUSH
38527: LD_INT 4
38529: PLUS
38530: PUSH
38531: LD_VAR 0 2
38535: PUSH
38536: LD_INT 4
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: LIST
38543: PUSH
38544: LD_VAR 0 1
38548: PUSH
38549: LD_VAR 0 2
38553: PUSH
38554: LD_INT 3
38556: MINUS
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: PUSH
38566: LD_VAR 0 1
38570: PUSH
38571: LD_INT 4
38573: MINUS
38574: PUSH
38575: LD_VAR 0 2
38579: PUSH
38580: LD_INT 4
38582: MINUS
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: ST_TO_ADDR
// end ; 5 :
38599: GO 38739
38601: LD_INT 5
38603: DOUBLE
38604: EQUAL
38605: IFTRUE 38609
38607: GO 38738
38609: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38610: LD_ADDR_VAR 0 5
38614: PUSH
38615: LD_VAR 0 1
38619: PUSH
38620: LD_INT 4
38622: MINUS
38623: PUSH
38624: LD_VAR 0 2
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: PUSH
38637: LD_VAR 0 1
38641: PUSH
38642: LD_VAR 0 2
38646: PUSH
38647: LD_INT 4
38649: MINUS
38650: PUSH
38651: LD_INT 3
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: PUSH
38659: LD_VAR 0 1
38663: PUSH
38664: LD_INT 4
38666: PLUS
38667: PUSH
38668: LD_VAR 0 2
38672: PUSH
38673: LD_INT 4
38675: PLUS
38676: PUSH
38677: LD_INT 5
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: PUSH
38685: LD_VAR 0 1
38689: PUSH
38690: LD_INT 3
38692: PLUS
38693: PUSH
38694: LD_VAR 0 2
38698: PUSH
38699: LD_INT 4
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: PUSH
38707: LD_VAR 0 1
38711: PUSH
38712: LD_VAR 0 2
38716: PUSH
38717: LD_INT 3
38719: PLUS
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: ST_TO_ADDR
// end ; end ;
38736: GO 38739
38738: POP
// result := list ;
38739: LD_ADDR_VAR 0 4
38743: PUSH
38744: LD_VAR 0 5
38748: ST_TO_ADDR
// end ;
38749: LD_VAR 0 4
38753: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38754: LD_INT 0
38756: PPUSH
38757: PPUSH
38758: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38759: LD_VAR 0 1
38763: NOT
38764: PUSH
38765: LD_VAR 0 2
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: LD_INT 3
38778: PUSH
38779: LD_INT 4
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: IN
38788: NOT
38789: OR
38790: IFFALSE 38794
// exit ;
38792: GO 38877
// tmp := [ ] ;
38794: LD_ADDR_VAR 0 5
38798: PUSH
38799: EMPTY
38800: ST_TO_ADDR
// for i in units do
38801: LD_ADDR_VAR 0 4
38805: PUSH
38806: LD_VAR 0 1
38810: PUSH
38811: FOR_IN
38812: IFFALSE 38846
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38814: LD_ADDR_VAR 0 5
38818: PUSH
38819: LD_VAR 0 5
38823: PPUSH
38824: LD_VAR 0 4
38828: PPUSH
38829: LD_VAR 0 2
38833: PPUSH
38834: CALL_OW 259
38838: PPUSH
38839: CALL 40238 0 2
38843: ST_TO_ADDR
38844: GO 38811
38846: POP
38847: POP
// if not tmp then
38848: LD_VAR 0 5
38852: NOT
38853: IFFALSE 38857
// exit ;
38855: GO 38877
// result := SortListByListDesc ( units , tmp ) ;
38857: LD_ADDR_VAR 0 3
38861: PUSH
38862: LD_VAR 0 1
38866: PPUSH
38867: LD_VAR 0 5
38871: PPUSH
38872: CALL_OW 77
38876: ST_TO_ADDR
// end ;
38877: LD_VAR 0 3
38881: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38882: LD_INT 0
38884: PPUSH
38885: PPUSH
38886: PPUSH
// result := false ;
38887: LD_ADDR_VAR 0 3
38891: PUSH
38892: LD_INT 0
38894: ST_TO_ADDR
// if not building then
38895: LD_VAR 0 2
38899: NOT
38900: IFFALSE 38904
// exit ;
38902: GO 39042
// x := GetX ( building ) ;
38904: LD_ADDR_VAR 0 4
38908: PUSH
38909: LD_VAR 0 2
38913: PPUSH
38914: CALL_OW 250
38918: ST_TO_ADDR
// y := GetY ( building ) ;
38919: LD_ADDR_VAR 0 5
38923: PUSH
38924: LD_VAR 0 2
38928: PPUSH
38929: CALL_OW 251
38933: ST_TO_ADDR
// if not x or not y then
38934: LD_VAR 0 4
38938: NOT
38939: PUSH
38940: LD_VAR 0 5
38944: NOT
38945: OR
38946: IFFALSE 38950
// exit ;
38948: GO 39042
// if GetTaskList ( unit ) then
38950: LD_VAR 0 1
38954: PPUSH
38955: CALL_OW 437
38959: IFFALSE 39042
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38961: LD_STRING e
38963: PUSH
38964: LD_VAR 0 1
38968: PPUSH
38969: CALL_OW 437
38973: PUSH
38974: LD_INT 1
38976: ARRAY
38977: PUSH
38978: LD_INT 1
38980: ARRAY
38981: EQUAL
38982: PUSH
38983: LD_VAR 0 4
38987: PUSH
38988: LD_VAR 0 1
38992: PPUSH
38993: CALL_OW 437
38997: PUSH
38998: LD_INT 1
39000: ARRAY
39001: PUSH
39002: LD_INT 2
39004: ARRAY
39005: EQUAL
39006: AND
39007: PUSH
39008: LD_VAR 0 5
39012: PUSH
39013: LD_VAR 0 1
39017: PPUSH
39018: CALL_OW 437
39022: PUSH
39023: LD_INT 1
39025: ARRAY
39026: PUSH
39027: LD_INT 3
39029: ARRAY
39030: EQUAL
39031: AND
39032: IFFALSE 39042
// result := true end ;
39034: LD_ADDR_VAR 0 3
39038: PUSH
39039: LD_INT 1
39041: ST_TO_ADDR
// end ;
39042: LD_VAR 0 3
39046: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39047: LD_INT 0
39049: PPUSH
// result := false ;
39050: LD_ADDR_VAR 0 4
39054: PUSH
39055: LD_INT 0
39057: ST_TO_ADDR
// if GetTaskList ( unit ) then
39058: LD_VAR 0 1
39062: PPUSH
39063: CALL_OW 437
39067: IFFALSE 39150
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39069: LD_STRING M
39071: PUSH
39072: LD_VAR 0 1
39076: PPUSH
39077: CALL_OW 437
39081: PUSH
39082: LD_INT 1
39084: ARRAY
39085: PUSH
39086: LD_INT 1
39088: ARRAY
39089: EQUAL
39090: PUSH
39091: LD_VAR 0 2
39095: PUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 437
39105: PUSH
39106: LD_INT 1
39108: ARRAY
39109: PUSH
39110: LD_INT 2
39112: ARRAY
39113: EQUAL
39114: AND
39115: PUSH
39116: LD_VAR 0 3
39120: PUSH
39121: LD_VAR 0 1
39125: PPUSH
39126: CALL_OW 437
39130: PUSH
39131: LD_INT 1
39133: ARRAY
39134: PUSH
39135: LD_INT 3
39137: ARRAY
39138: EQUAL
39139: AND
39140: IFFALSE 39150
// result := true ;
39142: LD_ADDR_VAR 0 4
39146: PUSH
39147: LD_INT 1
39149: ST_TO_ADDR
// end ; end ;
39150: LD_VAR 0 4
39154: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39155: LD_INT 0
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
// if not unit or not area then
39161: LD_VAR 0 1
39165: NOT
39166: PUSH
39167: LD_VAR 0 2
39171: NOT
39172: OR
39173: IFFALSE 39177
// exit ;
39175: GO 39341
// tmp := AreaToList ( area , i ) ;
39177: LD_ADDR_VAR 0 6
39181: PUSH
39182: LD_VAR 0 2
39186: PPUSH
39187: LD_VAR 0 5
39191: PPUSH
39192: CALL_OW 517
39196: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39197: LD_ADDR_VAR 0 5
39201: PUSH
39202: DOUBLE
39203: LD_INT 1
39205: DEC
39206: ST_TO_ADDR
39207: LD_VAR 0 6
39211: PUSH
39212: LD_INT 1
39214: ARRAY
39215: PUSH
39216: FOR_TO
39217: IFFALSE 39339
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39219: LD_ADDR_VAR 0 7
39223: PUSH
39224: LD_VAR 0 6
39228: PUSH
39229: LD_INT 1
39231: ARRAY
39232: PUSH
39233: LD_VAR 0 5
39237: ARRAY
39238: PUSH
39239: LD_VAR 0 6
39243: PUSH
39244: LD_INT 2
39246: ARRAY
39247: PUSH
39248: LD_VAR 0 5
39252: ARRAY
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39258: LD_VAR 0 7
39262: PUSH
39263: LD_INT 1
39265: ARRAY
39266: PPUSH
39267: LD_VAR 0 7
39271: PUSH
39272: LD_INT 2
39274: ARRAY
39275: PPUSH
39276: CALL_OW 428
39280: PUSH
39281: LD_INT 0
39283: EQUAL
39284: IFFALSE 39337
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39286: LD_VAR 0 1
39290: PPUSH
39291: LD_VAR 0 7
39295: PUSH
39296: LD_INT 1
39298: ARRAY
39299: PPUSH
39300: LD_VAR 0 7
39304: PUSH
39305: LD_INT 2
39307: ARRAY
39308: PPUSH
39309: LD_VAR 0 3
39313: PPUSH
39314: CALL_OW 48
// result := IsPlaced ( unit ) ;
39318: LD_ADDR_VAR 0 4
39322: PUSH
39323: LD_VAR 0 1
39327: PPUSH
39328: CALL_OW 305
39332: ST_TO_ADDR
// exit ;
39333: POP
39334: POP
39335: GO 39341
// end ; end ;
39337: GO 39216
39339: POP
39340: POP
// end ;
39341: LD_VAR 0 4
39345: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39346: LD_INT 0
39348: PPUSH
39349: PPUSH
39350: PPUSH
// if not side or side > 8 then
39351: LD_VAR 0 1
39355: NOT
39356: PUSH
39357: LD_VAR 0 1
39361: PUSH
39362: LD_INT 8
39364: GREATER
39365: OR
39366: IFFALSE 39370
// exit ;
39368: GO 39557
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39370: LD_ADDR_VAR 0 4
39374: PUSH
39375: LD_INT 22
39377: PUSH
39378: LD_VAR 0 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 21
39389: PUSH
39390: LD_INT 3
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PPUSH
39401: CALL_OW 69
39405: ST_TO_ADDR
// if not tmp then
39406: LD_VAR 0 4
39410: NOT
39411: IFFALSE 39415
// exit ;
39413: GO 39557
// enable_addtolog := true ;
39415: LD_ADDR_OWVAR 81
39419: PUSH
39420: LD_INT 1
39422: ST_TO_ADDR
// AddToLog ( [ ) ;
39423: LD_STRING [
39425: PPUSH
39426: CALL_OW 561
// for i in tmp do
39430: LD_ADDR_VAR 0 3
39434: PUSH
39435: LD_VAR 0 4
39439: PUSH
39440: FOR_IN
39441: IFFALSE 39548
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39443: LD_STRING [
39445: PUSH
39446: LD_VAR 0 3
39450: PPUSH
39451: CALL_OW 266
39455: STR
39456: PUSH
39457: LD_STRING , 
39459: STR
39460: PUSH
39461: LD_VAR 0 3
39465: PPUSH
39466: CALL_OW 250
39470: STR
39471: PUSH
39472: LD_STRING , 
39474: STR
39475: PUSH
39476: LD_VAR 0 3
39480: PPUSH
39481: CALL_OW 251
39485: STR
39486: PUSH
39487: LD_STRING , 
39489: STR
39490: PUSH
39491: LD_VAR 0 3
39495: PPUSH
39496: CALL_OW 254
39500: STR
39501: PUSH
39502: LD_STRING , 
39504: STR
39505: PUSH
39506: LD_VAR 0 3
39510: PPUSH
39511: LD_INT 1
39513: PPUSH
39514: CALL_OW 268
39518: STR
39519: PUSH
39520: LD_STRING , 
39522: STR
39523: PUSH
39524: LD_VAR 0 3
39528: PPUSH
39529: LD_INT 2
39531: PPUSH
39532: CALL_OW 268
39536: STR
39537: PUSH
39538: LD_STRING ],
39540: STR
39541: PPUSH
39542: CALL_OW 561
// end ;
39546: GO 39440
39548: POP
39549: POP
// AddToLog ( ]; ) ;
39550: LD_STRING ];
39552: PPUSH
39553: CALL_OW 561
// end ;
39557: LD_VAR 0 2
39561: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39562: LD_INT 0
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
39568: PPUSH
// if not area or not rate or not max then
39569: LD_VAR 0 1
39573: NOT
39574: PUSH
39575: LD_VAR 0 2
39579: NOT
39580: OR
39581: PUSH
39582: LD_VAR 0 4
39586: NOT
39587: OR
39588: IFFALSE 39592
// exit ;
39590: GO 39781
// while 1 do
39592: LD_INT 1
39594: IFFALSE 39781
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39596: LD_ADDR_VAR 0 9
39600: PUSH
39601: LD_VAR 0 1
39605: PPUSH
39606: LD_INT 1
39608: PPUSH
39609: CALL_OW 287
39613: PUSH
39614: LD_INT 10
39616: MUL
39617: ST_TO_ADDR
// r := rate / 10 ;
39618: LD_ADDR_VAR 0 7
39622: PUSH
39623: LD_VAR 0 2
39627: PUSH
39628: LD_INT 10
39630: DIVREAL
39631: ST_TO_ADDR
// time := 1 1$00 ;
39632: LD_ADDR_VAR 0 8
39636: PUSH
39637: LD_INT 2100
39639: ST_TO_ADDR
// if amount < min then
39640: LD_VAR 0 9
39644: PUSH
39645: LD_VAR 0 3
39649: LESS
39650: IFFALSE 39668
// r := r * 2 else
39652: LD_ADDR_VAR 0 7
39656: PUSH
39657: LD_VAR 0 7
39661: PUSH
39662: LD_INT 2
39664: MUL
39665: ST_TO_ADDR
39666: GO 39694
// if amount > max then
39668: LD_VAR 0 9
39672: PUSH
39673: LD_VAR 0 4
39677: GREATER
39678: IFFALSE 39694
// r := r / 2 ;
39680: LD_ADDR_VAR 0 7
39684: PUSH
39685: LD_VAR 0 7
39689: PUSH
39690: LD_INT 2
39692: DIVREAL
39693: ST_TO_ADDR
// time := time / r ;
39694: LD_ADDR_VAR 0 8
39698: PUSH
39699: LD_VAR 0 8
39703: PUSH
39704: LD_VAR 0 7
39708: DIVREAL
39709: ST_TO_ADDR
// if time < 0 then
39710: LD_VAR 0 8
39714: PUSH
39715: LD_INT 0
39717: LESS
39718: IFFALSE 39735
// time := time * - 1 ;
39720: LD_ADDR_VAR 0 8
39724: PUSH
39725: LD_VAR 0 8
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: MUL
39734: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39735: LD_VAR 0 8
39739: PUSH
39740: LD_INT 35
39742: PPUSH
39743: LD_INT 875
39745: PPUSH
39746: CALL_OW 12
39750: PLUS
39751: PPUSH
39752: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39756: LD_INT 1
39758: PPUSH
39759: LD_INT 5
39761: PPUSH
39762: CALL_OW 12
39766: PPUSH
39767: LD_VAR 0 1
39771: PPUSH
39772: LD_INT 1
39774: PPUSH
39775: CALL_OW 55
// end ;
39779: GO 39592
// end ;
39781: LD_VAR 0 5
39785: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39786: LD_INT 0
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
// if not turrets or not factories then
39796: LD_VAR 0 1
39800: NOT
39801: PUSH
39802: LD_VAR 0 2
39806: NOT
39807: OR
39808: IFFALSE 39812
// exit ;
39810: GO 40119
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39812: LD_ADDR_VAR 0 10
39816: PUSH
39817: LD_INT 5
39819: PUSH
39820: LD_INT 6
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: LD_INT 4
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 3
39839: PUSH
39840: LD_INT 5
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 24
39854: PUSH
39855: LD_INT 25
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 23
39864: PUSH
39865: LD_INT 27
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 42
39878: PUSH
39879: LD_INT 43
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 44
39888: PUSH
39889: LD_INT 46
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 45
39898: PUSH
39899: LD_INT 47
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: LIST
39915: ST_TO_ADDR
// result := [ ] ;
39916: LD_ADDR_VAR 0 3
39920: PUSH
39921: EMPTY
39922: ST_TO_ADDR
// for i in turrets do
39923: LD_ADDR_VAR 0 4
39927: PUSH
39928: LD_VAR 0 1
39932: PUSH
39933: FOR_IN
39934: IFFALSE 40117
// begin nat := GetNation ( i ) ;
39936: LD_ADDR_VAR 0 7
39940: PUSH
39941: LD_VAR 0 4
39945: PPUSH
39946: CALL_OW 248
39950: ST_TO_ADDR
// weapon := 0 ;
39951: LD_ADDR_VAR 0 8
39955: PUSH
39956: LD_INT 0
39958: ST_TO_ADDR
// if not nat then
39959: LD_VAR 0 7
39963: NOT
39964: IFFALSE 39968
// continue ;
39966: GO 39933
// for j in list [ nat ] do
39968: LD_ADDR_VAR 0 5
39972: PUSH
39973: LD_VAR 0 10
39977: PUSH
39978: LD_VAR 0 7
39982: ARRAY
39983: PUSH
39984: FOR_IN
39985: IFFALSE 40026
// if GetBWeapon ( i ) = j [ 1 ] then
39987: LD_VAR 0 4
39991: PPUSH
39992: CALL_OW 269
39996: PUSH
39997: LD_VAR 0 5
40001: PUSH
40002: LD_INT 1
40004: ARRAY
40005: EQUAL
40006: IFFALSE 40024
// begin weapon := j [ 2 ] ;
40008: LD_ADDR_VAR 0 8
40012: PUSH
40013: LD_VAR 0 5
40017: PUSH
40018: LD_INT 2
40020: ARRAY
40021: ST_TO_ADDR
// break ;
40022: GO 40026
// end ;
40024: GO 39984
40026: POP
40027: POP
// if not weapon then
40028: LD_VAR 0 8
40032: NOT
40033: IFFALSE 40037
// continue ;
40035: GO 39933
// for k in factories do
40037: LD_ADDR_VAR 0 6
40041: PUSH
40042: LD_VAR 0 2
40046: PUSH
40047: FOR_IN
40048: IFFALSE 40113
// begin weapons := AvailableWeaponList ( k ) ;
40050: LD_ADDR_VAR 0 9
40054: PUSH
40055: LD_VAR 0 6
40059: PPUSH
40060: CALL_OW 478
40064: ST_TO_ADDR
// if not weapons then
40065: LD_VAR 0 9
40069: NOT
40070: IFFALSE 40074
// continue ;
40072: GO 40047
// if weapon in weapons then
40074: LD_VAR 0 8
40078: PUSH
40079: LD_VAR 0 9
40083: IN
40084: IFFALSE 40111
// begin result := [ i , weapon ] ;
40086: LD_ADDR_VAR 0 3
40090: PUSH
40091: LD_VAR 0 4
40095: PUSH
40096: LD_VAR 0 8
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: ST_TO_ADDR
// exit ;
40105: POP
40106: POP
40107: POP
40108: POP
40109: GO 40119
// end ; end ;
40111: GO 40047
40113: POP
40114: POP
// end ;
40115: GO 39933
40117: POP
40118: POP
// end ;
40119: LD_VAR 0 3
40123: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40124: LD_INT 0
40126: PPUSH
// if not side or side > 8 then
40127: LD_VAR 0 3
40131: NOT
40132: PUSH
40133: LD_VAR 0 3
40137: PUSH
40138: LD_INT 8
40140: GREATER
40141: OR
40142: IFFALSE 40146
// exit ;
40144: GO 40205
// if not range then
40146: LD_VAR 0 4
40150: NOT
40151: IFFALSE 40162
// range := - 12 ;
40153: LD_ADDR_VAR 0 4
40157: PUSH
40158: LD_INT 12
40160: NEG
40161: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40162: LD_VAR 0 1
40166: PPUSH
40167: LD_VAR 0 2
40171: PPUSH
40172: LD_VAR 0 3
40176: PPUSH
40177: LD_VAR 0 4
40181: PPUSH
40182: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40186: LD_VAR 0 1
40190: PPUSH
40191: LD_VAR 0 2
40195: PPUSH
40196: LD_VAR 0 3
40200: PPUSH
40201: CALL_OW 331
// end ;
40205: LD_VAR 0 5
40209: RET
// export function Video ( mode ) ; begin
40210: LD_INT 0
40212: PPUSH
// ingame_video = mode ;
40213: LD_ADDR_OWVAR 52
40217: PUSH
40218: LD_VAR 0 1
40222: ST_TO_ADDR
// interface_hidden = mode ;
40223: LD_ADDR_OWVAR 54
40227: PUSH
40228: LD_VAR 0 1
40232: ST_TO_ADDR
// end ;
40233: LD_VAR 0 2
40237: RET
// export function Join ( array , element ) ; begin
40238: LD_INT 0
40240: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40241: LD_ADDR_VAR 0 3
40245: PUSH
40246: LD_VAR 0 1
40250: PPUSH
40251: LD_VAR 0 1
40255: PUSH
40256: LD_INT 1
40258: PLUS
40259: PPUSH
40260: LD_VAR 0 2
40264: PPUSH
40265: CALL_OW 1
40269: ST_TO_ADDR
// end ;
40270: LD_VAR 0 3
40274: RET
// export function JoinUnion ( array , element ) ; begin
40275: LD_INT 0
40277: PPUSH
// result := array union element ;
40278: LD_ADDR_VAR 0 3
40282: PUSH
40283: LD_VAR 0 1
40287: PUSH
40288: LD_VAR 0 2
40292: UNION
40293: ST_TO_ADDR
// end ;
40294: LD_VAR 0 3
40298: RET
// export function GetBehemoths ( side ) ; begin
40299: LD_INT 0
40301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40302: LD_ADDR_VAR 0 2
40306: PUSH
40307: LD_INT 22
40309: PUSH
40310: LD_VAR 0 1
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 31
40321: PUSH
40322: LD_INT 25
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PPUSH
40333: CALL_OW 69
40337: ST_TO_ADDR
// end ;
40338: LD_VAR 0 2
40342: RET
// export function Shuffle ( array ) ; var i , index ; begin
40343: LD_INT 0
40345: PPUSH
40346: PPUSH
40347: PPUSH
// result := [ ] ;
40348: LD_ADDR_VAR 0 2
40352: PUSH
40353: EMPTY
40354: ST_TO_ADDR
// if not array then
40355: LD_VAR 0 1
40359: NOT
40360: IFFALSE 40364
// exit ;
40362: GO 40463
// Randomize ;
40364: CALL_OW 10
// for i = array downto 1 do
40368: LD_ADDR_VAR 0 3
40372: PUSH
40373: DOUBLE
40374: LD_VAR 0 1
40378: INC
40379: ST_TO_ADDR
40380: LD_INT 1
40382: PUSH
40383: FOR_DOWNTO
40384: IFFALSE 40461
// begin index := rand ( 1 , array ) ;
40386: LD_ADDR_VAR 0 4
40390: PUSH
40391: LD_INT 1
40393: PPUSH
40394: LD_VAR 0 1
40398: PPUSH
40399: CALL_OW 12
40403: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40404: LD_ADDR_VAR 0 2
40408: PUSH
40409: LD_VAR 0 2
40413: PPUSH
40414: LD_VAR 0 2
40418: PUSH
40419: LD_INT 1
40421: PLUS
40422: PPUSH
40423: LD_VAR 0 1
40427: PUSH
40428: LD_VAR 0 4
40432: ARRAY
40433: PPUSH
40434: CALL_OW 2
40438: ST_TO_ADDR
// array := Delete ( array , index ) ;
40439: LD_ADDR_VAR 0 1
40443: PUSH
40444: LD_VAR 0 1
40448: PPUSH
40449: LD_VAR 0 4
40453: PPUSH
40454: CALL_OW 3
40458: ST_TO_ADDR
// end ;
40459: GO 40383
40461: POP
40462: POP
// end ;
40463: LD_VAR 0 2
40467: RET
// export function GetBaseMaterials ( base ) ; begin
40468: LD_INT 0
40470: PPUSH
// result := [ 0 , 0 , 0 ] ;
40471: LD_ADDR_VAR 0 2
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: LIST
40489: ST_TO_ADDR
// if not base then
40490: LD_VAR 0 1
40494: NOT
40495: IFFALSE 40499
// exit ;
40497: GO 40548
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40499: LD_ADDR_VAR 0 2
40503: PUSH
40504: LD_VAR 0 1
40508: PPUSH
40509: LD_INT 1
40511: PPUSH
40512: CALL_OW 275
40516: PUSH
40517: LD_VAR 0 1
40521: PPUSH
40522: LD_INT 2
40524: PPUSH
40525: CALL_OW 275
40529: PUSH
40530: LD_VAR 0 1
40534: PPUSH
40535: LD_INT 3
40537: PPUSH
40538: CALL_OW 275
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: ST_TO_ADDR
// end ;
40548: LD_VAR 0 2
40552: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40553: LD_INT 0
40555: PPUSH
40556: PPUSH
// result := array ;
40557: LD_ADDR_VAR 0 3
40561: PUSH
40562: LD_VAR 0 1
40566: ST_TO_ADDR
// if size >= result then
40567: LD_VAR 0 2
40571: PUSH
40572: LD_VAR 0 3
40576: GREATEREQUAL
40577: IFFALSE 40581
// exit ;
40579: GO 40631
// if size then
40581: LD_VAR 0 2
40585: IFFALSE 40631
// for i := array downto size do
40587: LD_ADDR_VAR 0 4
40591: PUSH
40592: DOUBLE
40593: LD_VAR 0 1
40597: INC
40598: ST_TO_ADDR
40599: LD_VAR 0 2
40603: PUSH
40604: FOR_DOWNTO
40605: IFFALSE 40629
// result := Delete ( result , result ) ;
40607: LD_ADDR_VAR 0 3
40611: PUSH
40612: LD_VAR 0 3
40616: PPUSH
40617: LD_VAR 0 3
40621: PPUSH
40622: CALL_OW 3
40626: ST_TO_ADDR
40627: GO 40604
40629: POP
40630: POP
// end ;
40631: LD_VAR 0 3
40635: RET
// export function ComExit ( unit ) ; var tmp ; begin
40636: LD_INT 0
40638: PPUSH
40639: PPUSH
// if not IsInUnit ( unit ) then
40640: LD_VAR 0 1
40644: PPUSH
40645: CALL_OW 310
40649: NOT
40650: IFFALSE 40654
// exit ;
40652: GO 40714
// tmp := IsInUnit ( unit ) ;
40654: LD_ADDR_VAR 0 3
40658: PUSH
40659: LD_VAR 0 1
40663: PPUSH
40664: CALL_OW 310
40668: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40669: LD_VAR 0 3
40673: PPUSH
40674: CALL_OW 247
40678: PUSH
40679: LD_INT 2
40681: EQUAL
40682: IFFALSE 40695
// ComExitVehicle ( unit ) else
40684: LD_VAR 0 1
40688: PPUSH
40689: CALL_OW 121
40693: GO 40704
// ComExitBuilding ( unit ) ;
40695: LD_VAR 0 1
40699: PPUSH
40700: CALL_OW 122
// result := tmp ;
40704: LD_ADDR_VAR 0 2
40708: PUSH
40709: LD_VAR 0 3
40713: ST_TO_ADDR
// end ;
40714: LD_VAR 0 2
40718: RET
// export function ComExitAll ( units ) ; var i ; begin
40719: LD_INT 0
40721: PPUSH
40722: PPUSH
// if not units then
40723: LD_VAR 0 1
40727: NOT
40728: IFFALSE 40732
// exit ;
40730: GO 40758
// for i in units do
40732: LD_ADDR_VAR 0 3
40736: PUSH
40737: LD_VAR 0 1
40741: PUSH
40742: FOR_IN
40743: IFFALSE 40756
// ComExit ( i ) ;
40745: LD_VAR 0 3
40749: PPUSH
40750: CALL 40636 0 1
40754: GO 40742
40756: POP
40757: POP
// end ;
40758: LD_VAR 0 2
40762: RET
// export function ResetHc ; begin
40763: LD_INT 0
40765: PPUSH
// InitHc ;
40766: CALL_OW 19
// hc_importance := 0 ;
40770: LD_ADDR_OWVAR 32
40774: PUSH
40775: LD_INT 0
40777: ST_TO_ADDR
// end ;
40778: LD_VAR 0 1
40782: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40783: LD_INT 0
40785: PPUSH
40786: PPUSH
40787: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40788: LD_ADDR_VAR 0 6
40792: PUSH
40793: LD_VAR 0 1
40797: PUSH
40798: LD_VAR 0 3
40802: PLUS
40803: PUSH
40804: LD_INT 2
40806: DIV
40807: ST_TO_ADDR
// if _x < 0 then
40808: LD_VAR 0 6
40812: PUSH
40813: LD_INT 0
40815: LESS
40816: IFFALSE 40833
// _x := _x * - 1 ;
40818: LD_ADDR_VAR 0 6
40822: PUSH
40823: LD_VAR 0 6
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: MUL
40832: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40833: LD_ADDR_VAR 0 7
40837: PUSH
40838: LD_VAR 0 2
40842: PUSH
40843: LD_VAR 0 4
40847: PLUS
40848: PUSH
40849: LD_INT 2
40851: DIV
40852: ST_TO_ADDR
// if _y < 0 then
40853: LD_VAR 0 7
40857: PUSH
40858: LD_INT 0
40860: LESS
40861: IFFALSE 40878
// _y := _y * - 1 ;
40863: LD_ADDR_VAR 0 7
40867: PUSH
40868: LD_VAR 0 7
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: MUL
40877: ST_TO_ADDR
// result := [ _x , _y ] ;
40878: LD_ADDR_VAR 0 5
40882: PUSH
40883: LD_VAR 0 6
40887: PUSH
40888: LD_VAR 0 7
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: ST_TO_ADDR
// end ;
40897: LD_VAR 0 5
40901: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40902: LD_INT 0
40904: PPUSH
40905: PPUSH
40906: PPUSH
40907: PPUSH
// task := GetTaskList ( unit ) ;
40908: LD_ADDR_VAR 0 7
40912: PUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: CALL_OW 437
40922: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40923: LD_VAR 0 7
40927: NOT
40928: PUSH
40929: LD_VAR 0 1
40933: PPUSH
40934: LD_VAR 0 2
40938: PPUSH
40939: CALL_OW 308
40943: NOT
40944: AND
40945: IFFALSE 40949
// exit ;
40947: GO 41067
// if IsInArea ( unit , area ) then
40949: LD_VAR 0 1
40953: PPUSH
40954: LD_VAR 0 2
40958: PPUSH
40959: CALL_OW 308
40963: IFFALSE 40981
// begin ComMoveToArea ( unit , goAway ) ;
40965: LD_VAR 0 1
40969: PPUSH
40970: LD_VAR 0 3
40974: PPUSH
40975: CALL_OW 113
// exit ;
40979: GO 41067
// end ; if task [ 1 ] [ 1 ] <> M then
40981: LD_VAR 0 7
40985: PUSH
40986: LD_INT 1
40988: ARRAY
40989: PUSH
40990: LD_INT 1
40992: ARRAY
40993: PUSH
40994: LD_STRING M
40996: NONEQUAL
40997: IFFALSE 41001
// exit ;
40999: GO 41067
// x := task [ 1 ] [ 2 ] ;
41001: LD_ADDR_VAR 0 5
41005: PUSH
41006: LD_VAR 0 7
41010: PUSH
41011: LD_INT 1
41013: ARRAY
41014: PUSH
41015: LD_INT 2
41017: ARRAY
41018: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41019: LD_ADDR_VAR 0 6
41023: PUSH
41024: LD_VAR 0 7
41028: PUSH
41029: LD_INT 1
41031: ARRAY
41032: PUSH
41033: LD_INT 3
41035: ARRAY
41036: ST_TO_ADDR
// if InArea ( x , y , area ) then
41037: LD_VAR 0 5
41041: PPUSH
41042: LD_VAR 0 6
41046: PPUSH
41047: LD_VAR 0 2
41051: PPUSH
41052: CALL_OW 309
41056: IFFALSE 41067
// ComStop ( unit ) ;
41058: LD_VAR 0 1
41062: PPUSH
41063: CALL_OW 141
// end ;
41067: LD_VAR 0 4
41071: RET
// export function Abs ( value ) ; begin
41072: LD_INT 0
41074: PPUSH
// result := value ;
41075: LD_ADDR_VAR 0 2
41079: PUSH
41080: LD_VAR 0 1
41084: ST_TO_ADDR
// if value < 0 then
41085: LD_VAR 0 1
41089: PUSH
41090: LD_INT 0
41092: LESS
41093: IFFALSE 41110
// result := value * - 1 ;
41095: LD_ADDR_VAR 0 2
41099: PUSH
41100: LD_VAR 0 1
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: MUL
41109: ST_TO_ADDR
// end ;
41110: LD_VAR 0 2
41114: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41115: LD_INT 0
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
41124: PPUSH
// if not unit or not building then
41125: LD_VAR 0 1
41129: NOT
41130: PUSH
41131: LD_VAR 0 2
41135: NOT
41136: OR
41137: IFFALSE 41141
// exit ;
41139: GO 41367
// x := GetX ( building ) ;
41141: LD_ADDR_VAR 0 4
41145: PUSH
41146: LD_VAR 0 2
41150: PPUSH
41151: CALL_OW 250
41155: ST_TO_ADDR
// y := GetY ( building ) ;
41156: LD_ADDR_VAR 0 6
41160: PUSH
41161: LD_VAR 0 2
41165: PPUSH
41166: CALL_OW 251
41170: ST_TO_ADDR
// d := GetDir ( building ) ;
41171: LD_ADDR_VAR 0 8
41175: PUSH
41176: LD_VAR 0 2
41180: PPUSH
41181: CALL_OW 254
41185: ST_TO_ADDR
// r := 4 ;
41186: LD_ADDR_VAR 0 9
41190: PUSH
41191: LD_INT 4
41193: ST_TO_ADDR
// for i := 1 to 5 do
41194: LD_ADDR_VAR 0 10
41198: PUSH
41199: DOUBLE
41200: LD_INT 1
41202: DEC
41203: ST_TO_ADDR
41204: LD_INT 5
41206: PUSH
41207: FOR_TO
41208: IFFALSE 41365
// begin _x := ShiftX ( x , d , r + i ) ;
41210: LD_ADDR_VAR 0 5
41214: PUSH
41215: LD_VAR 0 4
41219: PPUSH
41220: LD_VAR 0 8
41224: PPUSH
41225: LD_VAR 0 9
41229: PUSH
41230: LD_VAR 0 10
41234: PLUS
41235: PPUSH
41236: CALL_OW 272
41240: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41241: LD_ADDR_VAR 0 7
41245: PUSH
41246: LD_VAR 0 6
41250: PPUSH
41251: LD_VAR 0 8
41255: PPUSH
41256: LD_VAR 0 9
41260: PUSH
41261: LD_VAR 0 10
41265: PLUS
41266: PPUSH
41267: CALL_OW 273
41271: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41272: LD_VAR 0 5
41276: PPUSH
41277: LD_VAR 0 7
41281: PPUSH
41282: CALL_OW 488
41286: PUSH
41287: LD_VAR 0 5
41291: PPUSH
41292: LD_VAR 0 7
41296: PPUSH
41297: CALL_OW 428
41301: PPUSH
41302: CALL_OW 247
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: IN
41317: NOT
41318: AND
41319: IFFALSE 41363
// begin ComMoveXY ( unit , _x , _y ) ;
41321: LD_VAR 0 1
41325: PPUSH
41326: LD_VAR 0 5
41330: PPUSH
41331: LD_VAR 0 7
41335: PPUSH
41336: CALL_OW 111
// result := [ _x , _y ] ;
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: LD_VAR 0 5
41349: PUSH
41350: LD_VAR 0 7
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: ST_TO_ADDR
// exit ;
41359: POP
41360: POP
41361: GO 41367
// end ; end ;
41363: GO 41207
41365: POP
41366: POP
// end ;
41367: LD_VAR 0 3
41371: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41372: LD_INT 0
41374: PPUSH
41375: PPUSH
41376: PPUSH
// result := 0 ;
41377: LD_ADDR_VAR 0 3
41381: PUSH
41382: LD_INT 0
41384: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41385: LD_VAR 0 1
41389: PUSH
41390: LD_INT 0
41392: LESS
41393: PUSH
41394: LD_VAR 0 1
41398: PUSH
41399: LD_INT 8
41401: GREATER
41402: OR
41403: PUSH
41404: LD_VAR 0 2
41408: PUSH
41409: LD_INT 0
41411: LESS
41412: OR
41413: PUSH
41414: LD_VAR 0 2
41418: PUSH
41419: LD_INT 8
41421: GREATER
41422: OR
41423: IFFALSE 41427
// exit ;
41425: GO 41502
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41427: LD_ADDR_VAR 0 4
41431: PUSH
41432: LD_INT 22
41434: PUSH
41435: LD_VAR 0 2
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PPUSH
41444: CALL_OW 69
41448: PUSH
41449: FOR_IN
41450: IFFALSE 41500
// begin un := UnitShoot ( i ) ;
41452: LD_ADDR_VAR 0 5
41456: PUSH
41457: LD_VAR 0 4
41461: PPUSH
41462: CALL_OW 504
41466: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41467: LD_VAR 0 5
41471: PPUSH
41472: CALL_OW 255
41476: PUSH
41477: LD_VAR 0 1
41481: EQUAL
41482: IFFALSE 41498
// begin result := un ;
41484: LD_ADDR_VAR 0 3
41488: PUSH
41489: LD_VAR 0 5
41493: ST_TO_ADDR
// exit ;
41494: POP
41495: POP
41496: GO 41502
// end ; end ;
41498: GO 41449
41500: POP
41501: POP
// end ;
41502: LD_VAR 0 3
41506: RET
// export function GetCargoBay ( units ) ; begin
41507: LD_INT 0
41509: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41510: LD_ADDR_VAR 0 2
41514: PUSH
41515: LD_VAR 0 1
41519: PPUSH
41520: LD_INT 2
41522: PUSH
41523: LD_INT 34
41525: PUSH
41526: LD_INT 12
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 34
41535: PUSH
41536: LD_INT 51
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 34
41545: PUSH
41546: LD_INT 32
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 34
41555: PUSH
41556: LD_INT 89
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: PPUSH
41570: CALL_OW 72
41574: ST_TO_ADDR
// end ;
41575: LD_VAR 0 2
41579: RET
// export function Negate ( value ) ; begin
41580: LD_INT 0
41582: PPUSH
// result := not value ;
41583: LD_ADDR_VAR 0 2
41587: PUSH
41588: LD_VAR 0 1
41592: NOT
41593: ST_TO_ADDR
// end ;
41594: LD_VAR 0 2
41598: RET
// export function Inc ( value ) ; begin
41599: LD_INT 0
41601: PPUSH
// result := value + 1 ;
41602: LD_ADDR_VAR 0 2
41606: PUSH
41607: LD_VAR 0 1
41611: PUSH
41612: LD_INT 1
41614: PLUS
41615: ST_TO_ADDR
// end ;
41616: LD_VAR 0 2
41620: RET
// export function Dec ( value ) ; begin
41621: LD_INT 0
41623: PPUSH
// result := value - 1 ;
41624: LD_ADDR_VAR 0 2
41628: PUSH
41629: LD_VAR 0 1
41633: PUSH
41634: LD_INT 1
41636: MINUS
41637: ST_TO_ADDR
// end ;
41638: LD_VAR 0 2
41642: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41643: LD_INT 0
41645: PPUSH
41646: PPUSH
41647: PPUSH
41648: PPUSH
41649: PPUSH
41650: PPUSH
41651: PPUSH
41652: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41653: LD_VAR 0 1
41657: PPUSH
41658: LD_VAR 0 2
41662: PPUSH
41663: CALL_OW 488
41667: NOT
41668: PUSH
41669: LD_VAR 0 3
41673: PPUSH
41674: LD_VAR 0 4
41678: PPUSH
41679: CALL_OW 488
41683: NOT
41684: OR
41685: IFFALSE 41698
// begin result := - 1 ;
41687: LD_ADDR_VAR 0 5
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: ST_TO_ADDR
// exit ;
41696: GO 41933
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41698: LD_ADDR_VAR 0 12
41702: PUSH
41703: LD_VAR 0 1
41707: PPUSH
41708: LD_VAR 0 2
41712: PPUSH
41713: LD_VAR 0 3
41717: PPUSH
41718: LD_VAR 0 4
41722: PPUSH
41723: CALL 40783 0 4
41727: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41728: LD_ADDR_VAR 0 11
41732: PUSH
41733: LD_VAR 0 1
41737: PPUSH
41738: LD_VAR 0 2
41742: PPUSH
41743: LD_VAR 0 12
41747: PUSH
41748: LD_INT 1
41750: ARRAY
41751: PPUSH
41752: LD_VAR 0 12
41756: PUSH
41757: LD_INT 2
41759: ARRAY
41760: PPUSH
41761: CALL_OW 298
41765: ST_TO_ADDR
// distance := 9999 ;
41766: LD_ADDR_VAR 0 10
41770: PUSH
41771: LD_INT 9999
41773: ST_TO_ADDR
// for i := 0 to 5 do
41774: LD_ADDR_VAR 0 6
41778: PUSH
41779: DOUBLE
41780: LD_INT 0
41782: DEC
41783: ST_TO_ADDR
41784: LD_INT 5
41786: PUSH
41787: FOR_TO
41788: IFFALSE 41931
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41790: LD_ADDR_VAR 0 7
41794: PUSH
41795: LD_VAR 0 1
41799: PPUSH
41800: LD_VAR 0 6
41804: PPUSH
41805: LD_VAR 0 11
41809: PPUSH
41810: CALL_OW 272
41814: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41815: LD_ADDR_VAR 0 8
41819: PUSH
41820: LD_VAR 0 2
41824: PPUSH
41825: LD_VAR 0 6
41829: PPUSH
41830: LD_VAR 0 11
41834: PPUSH
41835: CALL_OW 273
41839: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41840: LD_VAR 0 7
41844: PPUSH
41845: LD_VAR 0 8
41849: PPUSH
41850: CALL_OW 488
41854: NOT
41855: IFFALSE 41859
// continue ;
41857: GO 41787
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41859: LD_ADDR_VAR 0 9
41863: PUSH
41864: LD_VAR 0 12
41868: PUSH
41869: LD_INT 1
41871: ARRAY
41872: PPUSH
41873: LD_VAR 0 12
41877: PUSH
41878: LD_INT 2
41880: ARRAY
41881: PPUSH
41882: LD_VAR 0 7
41886: PPUSH
41887: LD_VAR 0 8
41891: PPUSH
41892: CALL_OW 298
41896: ST_TO_ADDR
// if tmp < distance then
41897: LD_VAR 0 9
41901: PUSH
41902: LD_VAR 0 10
41906: LESS
41907: IFFALSE 41929
// begin result := i ;
41909: LD_ADDR_VAR 0 5
41913: PUSH
41914: LD_VAR 0 6
41918: ST_TO_ADDR
// distance := tmp ;
41919: LD_ADDR_VAR 0 10
41923: PUSH
41924: LD_VAR 0 9
41928: ST_TO_ADDR
// end ; end ;
41929: GO 41787
41931: POP
41932: POP
// end ;
41933: LD_VAR 0 5
41937: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41938: LD_INT 0
41940: PPUSH
41941: PPUSH
// if not driver or not IsInUnit ( driver ) then
41942: LD_VAR 0 1
41946: NOT
41947: PUSH
41948: LD_VAR 0 1
41952: PPUSH
41953: CALL_OW 310
41957: NOT
41958: OR
41959: IFFALSE 41963
// exit ;
41961: GO 42053
// vehicle := IsInUnit ( driver ) ;
41963: LD_ADDR_VAR 0 3
41967: PUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 310
41977: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41978: LD_VAR 0 1
41982: PPUSH
41983: LD_STRING \
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: PUSH
42013: LD_STRING E
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_VAR 0 3
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PPUSH
42049: CALL_OW 446
// end ;
42053: LD_VAR 0 2
42057: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42058: LD_INT 0
42060: PPUSH
42061: PPUSH
// if not driver or not IsInUnit ( driver ) then
42062: LD_VAR 0 1
42066: NOT
42067: PUSH
42068: LD_VAR 0 1
42072: PPUSH
42073: CALL_OW 310
42077: NOT
42078: OR
42079: IFFALSE 42083
// exit ;
42081: GO 42173
// vehicle := IsInUnit ( driver ) ;
42083: LD_ADDR_VAR 0 3
42087: PUSH
42088: LD_VAR 0 1
42092: PPUSH
42093: CALL_OW 310
42097: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42098: LD_VAR 0 1
42102: PPUSH
42103: LD_STRING \
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: PUSH
42133: LD_STRING E
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_VAR 0 3
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PPUSH
42169: CALL_OW 447
// end ;
42173: LD_VAR 0 2
42177: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42178: LD_INT 0
42180: PPUSH
42181: PPUSH
42182: PPUSH
// tmp := [ ] ;
42183: LD_ADDR_VAR 0 5
42187: PUSH
42188: EMPTY
42189: ST_TO_ADDR
// for i in units do
42190: LD_ADDR_VAR 0 4
42194: PUSH
42195: LD_VAR 0 1
42199: PUSH
42200: FOR_IN
42201: IFFALSE 42239
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42203: LD_ADDR_VAR 0 5
42207: PUSH
42208: LD_VAR 0 5
42212: PPUSH
42213: LD_VAR 0 5
42217: PUSH
42218: LD_INT 1
42220: PLUS
42221: PPUSH
42222: LD_VAR 0 4
42226: PPUSH
42227: CALL_OW 256
42231: PPUSH
42232: CALL_OW 2
42236: ST_TO_ADDR
42237: GO 42200
42239: POP
42240: POP
// if not tmp then
42241: LD_VAR 0 5
42245: NOT
42246: IFFALSE 42250
// exit ;
42248: GO 42298
// if asc then
42250: LD_VAR 0 2
42254: IFFALSE 42278
// result := SortListByListAsc ( units , tmp ) else
42256: LD_ADDR_VAR 0 3
42260: PUSH
42261: LD_VAR 0 1
42265: PPUSH
42266: LD_VAR 0 5
42270: PPUSH
42271: CALL_OW 76
42275: ST_TO_ADDR
42276: GO 42298
// result := SortListByListDesc ( units , tmp ) ;
42278: LD_ADDR_VAR 0 3
42282: PUSH
42283: LD_VAR 0 1
42287: PPUSH
42288: LD_VAR 0 5
42292: PPUSH
42293: CALL_OW 77
42297: ST_TO_ADDR
// end ;
42298: LD_VAR 0 3
42302: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42303: LD_INT 0
42305: PPUSH
42306: PPUSH
// task := GetTaskList ( mech ) ;
42307: LD_ADDR_VAR 0 4
42311: PUSH
42312: LD_VAR 0 1
42316: PPUSH
42317: CALL_OW 437
42321: ST_TO_ADDR
// if not task then
42322: LD_VAR 0 4
42326: NOT
42327: IFFALSE 42331
// exit ;
42329: GO 42373
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42331: LD_ADDR_VAR 0 3
42335: PUSH
42336: LD_VAR 0 4
42340: PUSH
42341: LD_INT 1
42343: ARRAY
42344: PUSH
42345: LD_INT 1
42347: ARRAY
42348: PUSH
42349: LD_STRING r
42351: EQUAL
42352: PUSH
42353: LD_VAR 0 4
42357: PUSH
42358: LD_INT 1
42360: ARRAY
42361: PUSH
42362: LD_INT 4
42364: ARRAY
42365: PUSH
42366: LD_VAR 0 2
42370: EQUAL
42371: AND
42372: ST_TO_ADDR
// end ;
42373: LD_VAR 0 3
42377: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42378: LD_INT 0
42380: PPUSH
// SetDir ( unit , d ) ;
42381: LD_VAR 0 1
42385: PPUSH
42386: LD_VAR 0 4
42390: PPUSH
42391: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42395: LD_VAR 0 1
42399: PPUSH
42400: LD_VAR 0 2
42404: PPUSH
42405: LD_VAR 0 3
42409: PPUSH
42410: LD_VAR 0 5
42414: PPUSH
42415: CALL_OW 48
// end ;
42419: LD_VAR 0 6
42423: RET
// export function ToNaturalNumber ( number ) ; begin
42424: LD_INT 0
42426: PPUSH
// result := number div 1 ;
42427: LD_ADDR_VAR 0 2
42431: PUSH
42432: LD_VAR 0 1
42436: PUSH
42437: LD_INT 1
42439: DIV
42440: ST_TO_ADDR
// if number < 0 then
42441: LD_VAR 0 1
42445: PUSH
42446: LD_INT 0
42448: LESS
42449: IFFALSE 42459
// result := 0 ;
42451: LD_ADDR_VAR 0 2
42455: PUSH
42456: LD_INT 0
42458: ST_TO_ADDR
// end ;
42459: LD_VAR 0 2
42463: RET
// export function SortByClass ( units , class ) ; var un ; begin
42464: LD_INT 0
42466: PPUSH
42467: PPUSH
// if not units or not class then
42468: LD_VAR 0 1
42472: NOT
42473: PUSH
42474: LD_VAR 0 2
42478: NOT
42479: OR
42480: IFFALSE 42484
// exit ;
42482: GO 42579
// result := [ ] ;
42484: LD_ADDR_VAR 0 3
42488: PUSH
42489: EMPTY
42490: ST_TO_ADDR
// for un in units do
42491: LD_ADDR_VAR 0 4
42495: PUSH
42496: LD_VAR 0 1
42500: PUSH
42501: FOR_IN
42502: IFFALSE 42577
// if GetClass ( un ) = class then
42504: LD_VAR 0 4
42508: PPUSH
42509: CALL_OW 257
42513: PUSH
42514: LD_VAR 0 2
42518: EQUAL
42519: IFFALSE 42546
// result := Insert ( result , 1 , un ) else
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: LD_VAR 0 3
42530: PPUSH
42531: LD_INT 1
42533: PPUSH
42534: LD_VAR 0 4
42538: PPUSH
42539: CALL_OW 2
42543: ST_TO_ADDR
42544: GO 42575
// result := Replace ( result , result + 1 , un ) ;
42546: LD_ADDR_VAR 0 3
42550: PUSH
42551: LD_VAR 0 3
42555: PPUSH
42556: LD_VAR 0 3
42560: PUSH
42561: LD_INT 1
42563: PLUS
42564: PPUSH
42565: LD_VAR 0 4
42569: PPUSH
42570: CALL_OW 1
42574: ST_TO_ADDR
42575: GO 42501
42577: POP
42578: POP
// end ;
42579: LD_VAR 0 3
42583: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42584: LD_INT 0
42586: PPUSH
42587: PPUSH
42588: PPUSH
42589: PPUSH
42590: PPUSH
42591: PPUSH
42592: PPUSH
// result := [ ] ;
42593: LD_ADDR_VAR 0 4
42597: PUSH
42598: EMPTY
42599: ST_TO_ADDR
// if x - r < 0 then
42600: LD_VAR 0 1
42604: PUSH
42605: LD_VAR 0 3
42609: MINUS
42610: PUSH
42611: LD_INT 0
42613: LESS
42614: IFFALSE 42626
// min_x := 0 else
42616: LD_ADDR_VAR 0 8
42620: PUSH
42621: LD_INT 0
42623: ST_TO_ADDR
42624: GO 42642
// min_x := x - r ;
42626: LD_ADDR_VAR 0 8
42630: PUSH
42631: LD_VAR 0 1
42635: PUSH
42636: LD_VAR 0 3
42640: MINUS
42641: ST_TO_ADDR
// if y - r < 0 then
42642: LD_VAR 0 2
42646: PUSH
42647: LD_VAR 0 3
42651: MINUS
42652: PUSH
42653: LD_INT 0
42655: LESS
42656: IFFALSE 42668
// min_y := 0 else
42658: LD_ADDR_VAR 0 7
42662: PUSH
42663: LD_INT 0
42665: ST_TO_ADDR
42666: GO 42684
// min_y := y - r ;
42668: LD_ADDR_VAR 0 7
42672: PUSH
42673: LD_VAR 0 2
42677: PUSH
42678: LD_VAR 0 3
42682: MINUS
42683: ST_TO_ADDR
// max_x := x + r ;
42684: LD_ADDR_VAR 0 9
42688: PUSH
42689: LD_VAR 0 1
42693: PUSH
42694: LD_VAR 0 3
42698: PLUS
42699: ST_TO_ADDR
// max_y := y + r ;
42700: LD_ADDR_VAR 0 10
42704: PUSH
42705: LD_VAR 0 2
42709: PUSH
42710: LD_VAR 0 3
42714: PLUS
42715: ST_TO_ADDR
// for _x = min_x to max_x do
42716: LD_ADDR_VAR 0 5
42720: PUSH
42721: DOUBLE
42722: LD_VAR 0 8
42726: DEC
42727: ST_TO_ADDR
42728: LD_VAR 0 9
42732: PUSH
42733: FOR_TO
42734: IFFALSE 42835
// for _y = min_y to max_y do
42736: LD_ADDR_VAR 0 6
42740: PUSH
42741: DOUBLE
42742: LD_VAR 0 7
42746: DEC
42747: ST_TO_ADDR
42748: LD_VAR 0 10
42752: PUSH
42753: FOR_TO
42754: IFFALSE 42831
// begin if not ValidHex ( _x , _y ) then
42756: LD_VAR 0 5
42760: PPUSH
42761: LD_VAR 0 6
42765: PPUSH
42766: CALL_OW 488
42770: NOT
42771: IFFALSE 42775
// continue ;
42773: GO 42753
// if GetResourceTypeXY ( _x , _y ) then
42775: LD_VAR 0 5
42779: PPUSH
42780: LD_VAR 0 6
42784: PPUSH
42785: CALL_OW 283
42789: IFFALSE 42829
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42791: LD_ADDR_VAR 0 4
42795: PUSH
42796: LD_VAR 0 4
42800: PPUSH
42801: LD_VAR 0 4
42805: PUSH
42806: LD_INT 1
42808: PLUS
42809: PPUSH
42810: LD_VAR 0 5
42814: PUSH
42815: LD_VAR 0 6
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PPUSH
42824: CALL_OW 1
42828: ST_TO_ADDR
// end ;
42829: GO 42753
42831: POP
42832: POP
42833: GO 42733
42835: POP
42836: POP
// end ;
42837: LD_VAR 0 4
42841: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42842: LD_INT 0
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
42851: PPUSH
// if not units then
42852: LD_VAR 0 1
42856: NOT
42857: IFFALSE 42861
// exit ;
42859: GO 43385
// result := UnitFilter ( units , [ f_ok ] ) ;
42861: LD_ADDR_VAR 0 3
42865: PUSH
42866: LD_VAR 0 1
42870: PPUSH
42871: LD_INT 50
42873: PUSH
42874: EMPTY
42875: LIST
42876: PPUSH
42877: CALL_OW 72
42881: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42882: LD_ADDR_VAR 0 8
42886: PUSH
42887: LD_VAR 0 1
42891: PUSH
42892: LD_INT 1
42894: ARRAY
42895: PPUSH
42896: CALL_OW 255
42900: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42901: LD_ADDR_VAR 0 10
42905: PUSH
42906: LD_INT 29
42908: PUSH
42909: LD_INT 91
42911: PUSH
42912: LD_INT 49
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
// if not result then
42920: LD_VAR 0 3
42924: NOT
42925: IFFALSE 42929
// exit ;
42927: GO 43385
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42929: LD_ADDR_VAR 0 5
42933: PUSH
42934: LD_INT 81
42936: PUSH
42937: LD_VAR 0 8
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PPUSH
42946: CALL_OW 69
42950: ST_TO_ADDR
// for i in result do
42951: LD_ADDR_VAR 0 4
42955: PUSH
42956: LD_VAR 0 3
42960: PUSH
42961: FOR_IN
42962: IFFALSE 43383
// begin tag := GetTag ( i ) + 1 ;
42964: LD_ADDR_VAR 0 9
42968: PUSH
42969: LD_VAR 0 4
42973: PPUSH
42974: CALL_OW 110
42978: PUSH
42979: LD_INT 1
42981: PLUS
42982: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42983: LD_ADDR_VAR 0 7
42987: PUSH
42988: LD_VAR 0 4
42992: PPUSH
42993: CALL_OW 250
42997: PPUSH
42998: LD_VAR 0 4
43002: PPUSH
43003: CALL_OW 251
43007: PPUSH
43008: LD_INT 6
43010: PPUSH
43011: CALL 42584 0 3
43015: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43016: LD_VAR 0 4
43020: PPUSH
43021: CALL_OW 247
43025: PUSH
43026: LD_INT 2
43028: EQUAL
43029: PUSH
43030: LD_VAR 0 7
43034: AND
43035: PUSH
43036: LD_VAR 0 4
43040: PPUSH
43041: CALL_OW 264
43045: PUSH
43046: LD_VAR 0 10
43050: IN
43051: NOT
43052: AND
43053: IFFALSE 43092
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43055: LD_VAR 0 4
43059: PPUSH
43060: LD_VAR 0 7
43064: PUSH
43065: LD_INT 1
43067: ARRAY
43068: PUSH
43069: LD_INT 1
43071: ARRAY
43072: PPUSH
43073: LD_VAR 0 7
43077: PUSH
43078: LD_INT 1
43080: ARRAY
43081: PUSH
43082: LD_INT 2
43084: ARRAY
43085: PPUSH
43086: CALL_OW 116
43090: GO 43381
// if path > tag then
43092: LD_VAR 0 2
43096: PUSH
43097: LD_VAR 0 9
43101: GREATER
43102: IFFALSE 43310
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43104: LD_ADDR_VAR 0 6
43108: PUSH
43109: LD_VAR 0 5
43113: PPUSH
43114: LD_INT 91
43116: PUSH
43117: LD_VAR 0 4
43121: PUSH
43122: LD_INT 8
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: PPUSH
43130: CALL_OW 72
43134: ST_TO_ADDR
// if nearEnemy then
43135: LD_VAR 0 6
43139: IFFALSE 43208
// begin if GetWeapon ( i ) = ru_time_lapser then
43141: LD_VAR 0 4
43145: PPUSH
43146: CALL_OW 264
43150: PUSH
43151: LD_INT 49
43153: EQUAL
43154: IFFALSE 43182
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43156: LD_VAR 0 4
43160: PPUSH
43161: LD_VAR 0 6
43165: PPUSH
43166: LD_VAR 0 4
43170: PPUSH
43171: CALL_OW 74
43175: PPUSH
43176: CALL_OW 112
43180: GO 43206
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43182: LD_VAR 0 4
43186: PPUSH
43187: LD_VAR 0 6
43191: PPUSH
43192: LD_VAR 0 4
43196: PPUSH
43197: CALL_OW 74
43201: PPUSH
43202: CALL_OW 115
// end else
43206: GO 43308
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43208: LD_VAR 0 4
43212: PPUSH
43213: LD_VAR 0 2
43217: PUSH
43218: LD_VAR 0 9
43222: ARRAY
43223: PUSH
43224: LD_INT 1
43226: ARRAY
43227: PPUSH
43228: LD_VAR 0 2
43232: PUSH
43233: LD_VAR 0 9
43237: ARRAY
43238: PUSH
43239: LD_INT 2
43241: ARRAY
43242: PPUSH
43243: CALL_OW 297
43247: PUSH
43248: LD_INT 6
43250: GREATER
43251: IFFALSE 43294
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43253: LD_VAR 0 4
43257: PPUSH
43258: LD_VAR 0 2
43262: PUSH
43263: LD_VAR 0 9
43267: ARRAY
43268: PUSH
43269: LD_INT 1
43271: ARRAY
43272: PPUSH
43273: LD_VAR 0 2
43277: PUSH
43278: LD_VAR 0 9
43282: ARRAY
43283: PUSH
43284: LD_INT 2
43286: ARRAY
43287: PPUSH
43288: CALL_OW 114
43292: GO 43308
// SetTag ( i , tag ) ;
43294: LD_VAR 0 4
43298: PPUSH
43299: LD_VAR 0 9
43303: PPUSH
43304: CALL_OW 109
// end else
43308: GO 43381
// if enemy then
43310: LD_VAR 0 5
43314: IFFALSE 43381
// begin if GetWeapon ( i ) = ru_time_lapser then
43316: LD_VAR 0 4
43320: PPUSH
43321: CALL_OW 264
43325: PUSH
43326: LD_INT 49
43328: EQUAL
43329: IFFALSE 43357
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43331: LD_VAR 0 4
43335: PPUSH
43336: LD_VAR 0 5
43340: PPUSH
43341: LD_VAR 0 4
43345: PPUSH
43346: CALL_OW 74
43350: PPUSH
43351: CALL_OW 112
43355: GO 43381
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43357: LD_VAR 0 4
43361: PPUSH
43362: LD_VAR 0 5
43366: PPUSH
43367: LD_VAR 0 4
43371: PPUSH
43372: CALL_OW 74
43376: PPUSH
43377: CALL_OW 115
// end ; end ;
43381: GO 42961
43383: POP
43384: POP
// end ;
43385: LD_VAR 0 3
43389: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43390: LD_INT 0
43392: PPUSH
43393: PPUSH
43394: PPUSH
// if not unit or IsInUnit ( unit ) then
43395: LD_VAR 0 1
43399: NOT
43400: PUSH
43401: LD_VAR 0 1
43405: PPUSH
43406: CALL_OW 310
43410: OR
43411: IFFALSE 43415
// exit ;
43413: GO 43506
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43415: LD_ADDR_VAR 0 4
43419: PUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: CALL_OW 250
43429: PPUSH
43430: LD_VAR 0 2
43434: PPUSH
43435: LD_INT 1
43437: PPUSH
43438: CALL_OW 272
43442: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43443: LD_ADDR_VAR 0 5
43447: PUSH
43448: LD_VAR 0 1
43452: PPUSH
43453: CALL_OW 251
43457: PPUSH
43458: LD_VAR 0 2
43462: PPUSH
43463: LD_INT 1
43465: PPUSH
43466: CALL_OW 273
43470: ST_TO_ADDR
// if ValidHex ( x , y ) then
43471: LD_VAR 0 4
43475: PPUSH
43476: LD_VAR 0 5
43480: PPUSH
43481: CALL_OW 488
43485: IFFALSE 43506
// ComTurnXY ( unit , x , y ) ;
43487: LD_VAR 0 1
43491: PPUSH
43492: LD_VAR 0 4
43496: PPUSH
43497: LD_VAR 0 5
43501: PPUSH
43502: CALL_OW 118
// end ;
43506: LD_VAR 0 3
43510: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43511: LD_INT 0
43513: PPUSH
43514: PPUSH
// result := false ;
43515: LD_ADDR_VAR 0 3
43519: PUSH
43520: LD_INT 0
43522: ST_TO_ADDR
// if not units then
43523: LD_VAR 0 2
43527: NOT
43528: IFFALSE 43532
// exit ;
43530: GO 43577
// for i in units do
43532: LD_ADDR_VAR 0 4
43536: PUSH
43537: LD_VAR 0 2
43541: PUSH
43542: FOR_IN
43543: IFFALSE 43575
// if See ( side , i ) then
43545: LD_VAR 0 1
43549: PPUSH
43550: LD_VAR 0 4
43554: PPUSH
43555: CALL_OW 292
43559: IFFALSE 43573
// begin result := true ;
43561: LD_ADDR_VAR 0 3
43565: PUSH
43566: LD_INT 1
43568: ST_TO_ADDR
// exit ;
43569: POP
43570: POP
43571: GO 43577
// end ;
43573: GO 43542
43575: POP
43576: POP
// end ;
43577: LD_VAR 0 3
43581: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43582: LD_INT 0
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
// if not unit or not points then
43588: LD_VAR 0 1
43592: NOT
43593: PUSH
43594: LD_VAR 0 2
43598: NOT
43599: OR
43600: IFFALSE 43604
// exit ;
43602: GO 43694
// dist := 99999 ;
43604: LD_ADDR_VAR 0 5
43608: PUSH
43609: LD_INT 99999
43611: ST_TO_ADDR
// for i in points do
43612: LD_ADDR_VAR 0 4
43616: PUSH
43617: LD_VAR 0 2
43621: PUSH
43622: FOR_IN
43623: IFFALSE 43692
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43625: LD_ADDR_VAR 0 6
43629: PUSH
43630: LD_VAR 0 1
43634: PPUSH
43635: LD_VAR 0 4
43639: PUSH
43640: LD_INT 1
43642: ARRAY
43643: PPUSH
43644: LD_VAR 0 4
43648: PUSH
43649: LD_INT 2
43651: ARRAY
43652: PPUSH
43653: CALL_OW 297
43657: ST_TO_ADDR
// if tmpDist < dist then
43658: LD_VAR 0 6
43662: PUSH
43663: LD_VAR 0 5
43667: LESS
43668: IFFALSE 43690
// begin result := i ;
43670: LD_ADDR_VAR 0 3
43674: PUSH
43675: LD_VAR 0 4
43679: ST_TO_ADDR
// dist := tmpDist ;
43680: LD_ADDR_VAR 0 5
43684: PUSH
43685: LD_VAR 0 6
43689: ST_TO_ADDR
// end ; end ;
43690: GO 43622
43692: POP
43693: POP
// end ;
43694: LD_VAR 0 3
43698: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43699: LD_INT 0
43701: PPUSH
// uc_side := side ;
43702: LD_ADDR_OWVAR 20
43706: PUSH
43707: LD_VAR 0 1
43711: ST_TO_ADDR
// uc_nation := 3 ;
43712: LD_ADDR_OWVAR 21
43716: PUSH
43717: LD_INT 3
43719: ST_TO_ADDR
// vc_chassis := 25 ;
43720: LD_ADDR_OWVAR 37
43724: PUSH
43725: LD_INT 25
43727: ST_TO_ADDR
// vc_engine := engine_siberite ;
43728: LD_ADDR_OWVAR 39
43732: PUSH
43733: LD_INT 3
43735: ST_TO_ADDR
// vc_control := control_computer ;
43736: LD_ADDR_OWVAR 38
43740: PUSH
43741: LD_INT 3
43743: ST_TO_ADDR
// vc_weapon := 59 ;
43744: LD_ADDR_OWVAR 40
43748: PUSH
43749: LD_INT 59
43751: ST_TO_ADDR
// result := CreateVehicle ;
43752: LD_ADDR_VAR 0 5
43756: PUSH
43757: CALL_OW 45
43761: ST_TO_ADDR
// SetDir ( result , d ) ;
43762: LD_VAR 0 5
43766: PPUSH
43767: LD_VAR 0 4
43771: PPUSH
43772: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43776: LD_VAR 0 5
43780: PPUSH
43781: LD_VAR 0 2
43785: PPUSH
43786: LD_VAR 0 3
43790: PPUSH
43791: LD_INT 0
43793: PPUSH
43794: CALL_OW 48
// end ;
43798: LD_VAR 0 5
43802: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43803: LD_INT 0
43805: PPUSH
43806: PPUSH
43807: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43808: LD_ADDR_VAR 0 2
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43831: LD_VAR 0 1
43835: NOT
43836: PUSH
43837: LD_VAR 0 1
43841: PPUSH
43842: CALL_OW 264
43846: PUSH
43847: LD_INT 12
43849: PUSH
43850: LD_INT 51
43852: PUSH
43853: LD_INT 32
43855: PUSH
43856: LD_INT 89
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: IN
43865: NOT
43866: OR
43867: IFFALSE 43871
// exit ;
43869: GO 43969
// for i := 1 to 3 do
43871: LD_ADDR_VAR 0 3
43875: PUSH
43876: DOUBLE
43877: LD_INT 1
43879: DEC
43880: ST_TO_ADDR
43881: LD_INT 3
43883: PUSH
43884: FOR_TO
43885: IFFALSE 43967
// begin tmp := GetCargo ( cargo , i ) ;
43887: LD_ADDR_VAR 0 4
43891: PUSH
43892: LD_VAR 0 1
43896: PPUSH
43897: LD_VAR 0 3
43901: PPUSH
43902: CALL_OW 289
43906: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43907: LD_ADDR_VAR 0 2
43911: PUSH
43912: LD_VAR 0 2
43916: PPUSH
43917: LD_VAR 0 3
43921: PPUSH
43922: LD_VAR 0 4
43926: PPUSH
43927: CALL_OW 1
43931: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43932: LD_ADDR_VAR 0 2
43936: PUSH
43937: LD_VAR 0 2
43941: PPUSH
43942: LD_INT 4
43944: PPUSH
43945: LD_VAR 0 2
43949: PUSH
43950: LD_INT 4
43952: ARRAY
43953: PUSH
43954: LD_VAR 0 4
43958: PLUS
43959: PPUSH
43960: CALL_OW 1
43964: ST_TO_ADDR
// end ;
43965: GO 43884
43967: POP
43968: POP
// end ;
43969: LD_VAR 0 2
43973: RET
// export function Length ( array ) ; begin
43974: LD_INT 0
43976: PPUSH
// result := array + 0 ;
43977: LD_ADDR_VAR 0 2
43981: PUSH
43982: LD_VAR 0 1
43986: PUSH
43987: LD_INT 0
43989: PLUS
43990: ST_TO_ADDR
// end ;
43991: LD_VAR 0 2
43995: RET
// export function PrepareArray ( array ) ; begin
43996: LD_INT 0
43998: PPUSH
// result := array diff 0 ;
43999: LD_ADDR_VAR 0 2
44003: PUSH
44004: LD_VAR 0 1
44008: PUSH
44009: LD_INT 0
44011: DIFF
44012: ST_TO_ADDR
// if not result [ 1 ] then
44013: LD_VAR 0 2
44017: PUSH
44018: LD_INT 1
44020: ARRAY
44021: NOT
44022: IFFALSE 44042
// result := Delete ( result , 1 ) ;
44024: LD_ADDR_VAR 0 2
44028: PUSH
44029: LD_VAR 0 2
44033: PPUSH
44034: LD_INT 1
44036: PPUSH
44037: CALL_OW 3
44041: ST_TO_ADDR
// end ;
44042: LD_VAR 0 2
44046: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44047: LD_INT 0
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
// sibRocketRange := 25 ;
44053: LD_ADDR_VAR 0 6
44057: PUSH
44058: LD_INT 25
44060: ST_TO_ADDR
// result := false ;
44061: LD_ADDR_VAR 0 4
44065: PUSH
44066: LD_INT 0
44068: ST_TO_ADDR
// for i := 0 to 5 do
44069: LD_ADDR_VAR 0 5
44073: PUSH
44074: DOUBLE
44075: LD_INT 0
44077: DEC
44078: ST_TO_ADDR
44079: LD_INT 5
44081: PUSH
44082: FOR_TO
44083: IFFALSE 44150
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44085: LD_VAR 0 1
44089: PPUSH
44090: LD_VAR 0 5
44094: PPUSH
44095: LD_VAR 0 6
44099: PPUSH
44100: CALL_OW 272
44104: PPUSH
44105: LD_VAR 0 2
44109: PPUSH
44110: LD_VAR 0 5
44114: PPUSH
44115: LD_VAR 0 6
44119: PPUSH
44120: CALL_OW 273
44124: PPUSH
44125: LD_VAR 0 3
44129: PPUSH
44130: CALL_OW 309
44134: IFFALSE 44148
// begin result := true ;
44136: LD_ADDR_VAR 0 4
44140: PUSH
44141: LD_INT 1
44143: ST_TO_ADDR
// exit ;
44144: POP
44145: POP
44146: GO 44152
// end ;
44148: GO 44082
44150: POP
44151: POP
// end ;
44152: LD_VAR 0 4
44156: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44157: LD_INT 0
44159: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44160: LD_VAR 0 1
44164: PPUSH
44165: LD_VAR 0 2
44169: PPUSH
44170: LD_INT 0
44172: PPUSH
44173: LD_INT 0
44175: PPUSH
44176: LD_INT 1
44178: PPUSH
44179: LD_INT 0
44181: PPUSH
44182: CALL_OW 587
// end ; end_of_file
44186: LD_VAR 0 3
44190: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
44191: LD_INT 0
44193: PPUSH
44194: PPUSH
44195: PPUSH
44196: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
44197: LD_VAR 0 1
44201: PPUSH
44202: CALL_OW 264
44206: PUSH
44207: LD_INT 91
44209: EQUAL
44210: IFFALSE 44282
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
44212: LD_INT 68
44214: PPUSH
44215: LD_VAR 0 1
44219: PPUSH
44220: CALL_OW 255
44224: PPUSH
44225: CALL_OW 321
44229: PUSH
44230: LD_INT 2
44232: EQUAL
44233: IFFALSE 44245
// eff := 70 else
44235: LD_ADDR_VAR 0 4
44239: PUSH
44240: LD_INT 70
44242: ST_TO_ADDR
44243: GO 44253
// eff := 30 ;
44245: LD_ADDR_VAR 0 4
44249: PUSH
44250: LD_INT 30
44252: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
44253: LD_VAR 0 1
44257: PPUSH
44258: CALL_OW 250
44262: PPUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: CALL_OW 251
44272: PPUSH
44273: LD_VAR 0 4
44277: PPUSH
44278: CALL_OW 495
// end ; end ;
44282: LD_VAR 0 2
44286: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44287: LD_INT 0
44289: PPUSH
// end ;
44290: LD_VAR 0 4
44294: RET
// export function SOS_Command ( cmd ) ; begin
44295: LD_INT 0
44297: PPUSH
// end ;
44298: LD_VAR 0 2
44302: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44303: LD_INT 0
44305: PPUSH
// end ;
44306: LD_VAR 0 6
44310: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
44311: LD_INT 0
44313: PPUSH
44314: PPUSH
// if not vehicle or not factory then
44315: LD_VAR 0 1
44319: NOT
44320: PUSH
44321: LD_VAR 0 2
44325: NOT
44326: OR
44327: IFFALSE 44331
// exit ;
44329: GO 44562
// if factoryWaypoints >= factory then
44331: LD_EXP 78
44335: PUSH
44336: LD_VAR 0 2
44340: GREATEREQUAL
44341: IFFALSE 44562
// if factoryWaypoints [ factory ] then
44343: LD_EXP 78
44347: PUSH
44348: LD_VAR 0 2
44352: ARRAY
44353: IFFALSE 44562
// begin if GetControl ( vehicle ) = control_manual then
44355: LD_VAR 0 1
44359: PPUSH
44360: CALL_OW 263
44364: PUSH
44365: LD_INT 1
44367: EQUAL
44368: IFFALSE 44449
// begin driver := IsDrivenBy ( vehicle ) ;
44370: LD_ADDR_VAR 0 4
44374: PUSH
44375: LD_VAR 0 1
44379: PPUSH
44380: CALL_OW 311
44384: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44385: LD_VAR 0 4
44389: PPUSH
44390: LD_EXP 78
44394: PUSH
44395: LD_VAR 0 2
44399: ARRAY
44400: PUSH
44401: LD_INT 3
44403: ARRAY
44404: PPUSH
44405: LD_EXP 78
44409: PUSH
44410: LD_VAR 0 2
44414: ARRAY
44415: PUSH
44416: LD_INT 4
44418: ARRAY
44419: PPUSH
44420: CALL_OW 171
// AddComExitVehicle ( driver ) ;
44424: LD_VAR 0 4
44428: PPUSH
44429: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
44433: LD_VAR 0 4
44437: PPUSH
44438: LD_VAR 0 2
44442: PPUSH
44443: CALL_OW 180
// end else
44447: GO 44562
// if GetControl ( vehicle ) = control_remote then
44449: LD_VAR 0 1
44453: PPUSH
44454: CALL_OW 263
44458: PUSH
44459: LD_INT 2
44461: EQUAL
44462: IFFALSE 44523
// begin wait ( 0 0$2 ) ;
44464: LD_INT 70
44466: PPUSH
44467: CALL_OW 67
// if Connect ( vehicle ) then
44471: LD_VAR 0 1
44475: PPUSH
44476: CALL 10876 0 1
44480: IFFALSE 44521
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44482: LD_VAR 0 1
44486: PPUSH
44487: LD_EXP 78
44491: PUSH
44492: LD_VAR 0 2
44496: ARRAY
44497: PUSH
44498: LD_INT 3
44500: ARRAY
44501: PPUSH
44502: LD_EXP 78
44506: PUSH
44507: LD_VAR 0 2
44511: ARRAY
44512: PUSH
44513: LD_INT 4
44515: ARRAY
44516: PPUSH
44517: CALL_OW 171
// end else
44521: GO 44562
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44523: LD_VAR 0 1
44527: PPUSH
44528: LD_EXP 78
44532: PUSH
44533: LD_VAR 0 2
44537: ARRAY
44538: PUSH
44539: LD_INT 3
44541: ARRAY
44542: PPUSH
44543: LD_EXP 78
44547: PUSH
44548: LD_VAR 0 2
44552: ARRAY
44553: PUSH
44554: LD_INT 4
44556: ARRAY
44557: PPUSH
44558: CALL_OW 171
// end ; end ;
44562: LD_VAR 0 3
44566: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
44567: LD_INT 0
44569: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
44570: LD_VAR 0 1
44574: PUSH
44575: LD_INT 250
44577: EQUAL
44578: PUSH
44579: LD_VAR 0 2
44583: PPUSH
44584: CALL_OW 264
44588: PUSH
44589: LD_INT 81
44591: EQUAL
44592: AND
44593: IFFALSE 44614
// MinerPlaceMine ( unit , x , y ) ;
44595: LD_VAR 0 2
44599: PPUSH
44600: LD_VAR 0 4
44604: PPUSH
44605: LD_VAR 0 5
44609: PPUSH
44610: CALL 46999 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
44614: LD_VAR 0 1
44618: PUSH
44619: LD_INT 251
44621: EQUAL
44622: PUSH
44623: LD_VAR 0 2
44627: PPUSH
44628: CALL_OW 264
44632: PUSH
44633: LD_INT 81
44635: EQUAL
44636: AND
44637: IFFALSE 44658
// MinerDetonateMine ( unit , x , y ) ;
44639: LD_VAR 0 2
44643: PPUSH
44644: LD_VAR 0 4
44648: PPUSH
44649: LD_VAR 0 5
44653: PPUSH
44654: CALL 47274 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
44658: LD_VAR 0 1
44662: PUSH
44663: LD_INT 252
44665: EQUAL
44666: PUSH
44667: LD_VAR 0 2
44671: PPUSH
44672: CALL_OW 264
44676: PUSH
44677: LD_INT 81
44679: EQUAL
44680: AND
44681: IFFALSE 44702
// MinerCreateMinefield ( unit , x , y ) ;
44683: LD_VAR 0 2
44687: PPUSH
44688: LD_VAR 0 4
44692: PPUSH
44693: LD_VAR 0 5
44697: PPUSH
44698: CALL 47691 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
44702: LD_VAR 0 1
44706: PUSH
44707: LD_INT 253
44709: EQUAL
44710: PUSH
44711: LD_VAR 0 2
44715: PPUSH
44716: CALL_OW 257
44720: PUSH
44721: LD_INT 5
44723: EQUAL
44724: AND
44725: IFFALSE 44746
// ComBinocular ( unit , x , y ) ;
44727: LD_VAR 0 2
44731: PPUSH
44732: LD_VAR 0 4
44736: PPUSH
44737: LD_VAR 0 5
44741: PPUSH
44742: CALL 48060 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
44746: LD_VAR 0 1
44750: PUSH
44751: LD_INT 254
44753: EQUAL
44754: PUSH
44755: LD_VAR 0 2
44759: PPUSH
44760: CALL_OW 264
44764: PUSH
44765: LD_INT 99
44767: EQUAL
44768: AND
44769: PUSH
44770: LD_VAR 0 3
44774: PPUSH
44775: CALL_OW 263
44779: PUSH
44780: LD_INT 3
44782: EQUAL
44783: AND
44784: IFFALSE 44800
// HackDestroyVehicle ( unit , selectedUnit ) ;
44786: LD_VAR 0 2
44790: PPUSH
44791: LD_VAR 0 3
44795: PPUSH
44796: CALL 46363 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
44800: LD_VAR 0 1
44804: PUSH
44805: LD_INT 255
44807: EQUAL
44808: PUSH
44809: LD_VAR 0 2
44813: PPUSH
44814: CALL_OW 264
44818: PUSH
44819: LD_INT 14
44821: PUSH
44822: LD_INT 53
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: IN
44829: AND
44830: PUSH
44831: LD_VAR 0 4
44835: PPUSH
44836: LD_VAR 0 5
44840: PPUSH
44841: CALL_OW 488
44845: AND
44846: IFFALSE 44870
// CutTreeXYR ( unit , x , y , 12 ) ;
44848: LD_VAR 0 2
44852: PPUSH
44853: LD_VAR 0 4
44857: PPUSH
44858: LD_VAR 0 5
44862: PPUSH
44863: LD_INT 12
44865: PPUSH
44866: CALL 44933 0 4
// if cmd = 256 then
44870: LD_VAR 0 1
44874: PUSH
44875: LD_INT 256
44877: EQUAL
44878: IFFALSE 44899
// SetFactoryWaypoint ( unit , x , y ) ;
44880: LD_VAR 0 2
44884: PPUSH
44885: LD_VAR 0 4
44889: PPUSH
44890: LD_VAR 0 5
44894: PPUSH
44895: CALL 62968 0 3
// if cmd = 257 then
44899: LD_VAR 0 1
44903: PUSH
44904: LD_INT 257
44906: EQUAL
44907: IFFALSE 44928
// SetWarehouseGatheringPoint ( unit , x , y ) ;
44909: LD_VAR 0 2
44913: PPUSH
44914: LD_VAR 0 4
44918: PPUSH
44919: LD_VAR 0 5
44923: PPUSH
44924: CALL 63330 0 3
// end ;
44928: LD_VAR 0 6
44932: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
44933: LD_INT 0
44935: PPUSH
44936: PPUSH
44937: PPUSH
44938: PPUSH
44939: PPUSH
44940: PPUSH
44941: PPUSH
44942: PPUSH
44943: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
44944: LD_VAR 0 1
44948: NOT
44949: PUSH
44950: LD_VAR 0 2
44954: PPUSH
44955: LD_VAR 0 3
44959: PPUSH
44960: CALL_OW 488
44964: NOT
44965: OR
44966: PUSH
44967: LD_VAR 0 4
44971: NOT
44972: OR
44973: IFFALSE 44977
// exit ;
44975: GO 45317
// list := [ ] ;
44977: LD_ADDR_VAR 0 13
44981: PUSH
44982: EMPTY
44983: ST_TO_ADDR
// if x - r < 0 then
44984: LD_VAR 0 2
44988: PUSH
44989: LD_VAR 0 4
44993: MINUS
44994: PUSH
44995: LD_INT 0
44997: LESS
44998: IFFALSE 45010
// min_x := 0 else
45000: LD_ADDR_VAR 0 7
45004: PUSH
45005: LD_INT 0
45007: ST_TO_ADDR
45008: GO 45026
// min_x := x - r ;
45010: LD_ADDR_VAR 0 7
45014: PUSH
45015: LD_VAR 0 2
45019: PUSH
45020: LD_VAR 0 4
45024: MINUS
45025: ST_TO_ADDR
// if y - r < 0 then
45026: LD_VAR 0 3
45030: PUSH
45031: LD_VAR 0 4
45035: MINUS
45036: PUSH
45037: LD_INT 0
45039: LESS
45040: IFFALSE 45052
// min_y := 0 else
45042: LD_ADDR_VAR 0 8
45046: PUSH
45047: LD_INT 0
45049: ST_TO_ADDR
45050: GO 45068
// min_y := y - r ;
45052: LD_ADDR_VAR 0 8
45056: PUSH
45057: LD_VAR 0 3
45061: PUSH
45062: LD_VAR 0 4
45066: MINUS
45067: ST_TO_ADDR
// max_x := x + r ;
45068: LD_ADDR_VAR 0 9
45072: PUSH
45073: LD_VAR 0 2
45077: PUSH
45078: LD_VAR 0 4
45082: PLUS
45083: ST_TO_ADDR
// max_y := y + r ;
45084: LD_ADDR_VAR 0 10
45088: PUSH
45089: LD_VAR 0 3
45093: PUSH
45094: LD_VAR 0 4
45098: PLUS
45099: ST_TO_ADDR
// for _x = min_x to max_x do
45100: LD_ADDR_VAR 0 11
45104: PUSH
45105: DOUBLE
45106: LD_VAR 0 7
45110: DEC
45111: ST_TO_ADDR
45112: LD_VAR 0 9
45116: PUSH
45117: FOR_TO
45118: IFFALSE 45235
// for _y = min_y to max_y do
45120: LD_ADDR_VAR 0 12
45124: PUSH
45125: DOUBLE
45126: LD_VAR 0 8
45130: DEC
45131: ST_TO_ADDR
45132: LD_VAR 0 10
45136: PUSH
45137: FOR_TO
45138: IFFALSE 45231
// begin if not ValidHex ( _x , _y ) then
45140: LD_VAR 0 11
45144: PPUSH
45145: LD_VAR 0 12
45149: PPUSH
45150: CALL_OW 488
45154: NOT
45155: IFFALSE 45159
// continue ;
45157: GO 45137
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45159: LD_VAR 0 11
45163: PPUSH
45164: LD_VAR 0 12
45168: PPUSH
45169: CALL_OW 351
45173: PUSH
45174: LD_VAR 0 11
45178: PPUSH
45179: LD_VAR 0 12
45183: PPUSH
45184: CALL_OW 554
45188: AND
45189: IFFALSE 45229
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45191: LD_ADDR_VAR 0 13
45195: PUSH
45196: LD_VAR 0 13
45200: PPUSH
45201: LD_VAR 0 13
45205: PUSH
45206: LD_INT 1
45208: PLUS
45209: PPUSH
45210: LD_VAR 0 11
45214: PUSH
45215: LD_VAR 0 12
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PPUSH
45224: CALL_OW 2
45228: ST_TO_ADDR
// end ;
45229: GO 45137
45231: POP
45232: POP
45233: GO 45117
45235: POP
45236: POP
// if not list then
45237: LD_VAR 0 13
45241: NOT
45242: IFFALSE 45246
// exit ;
45244: GO 45317
// for i in list do
45246: LD_ADDR_VAR 0 6
45250: PUSH
45251: LD_VAR 0 13
45255: PUSH
45256: FOR_IN
45257: IFFALSE 45315
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45259: LD_VAR 0 1
45263: PPUSH
45264: LD_STRING M
45266: PUSH
45267: LD_VAR 0 6
45271: PUSH
45272: LD_INT 1
45274: ARRAY
45275: PUSH
45276: LD_VAR 0 6
45280: PUSH
45281: LD_INT 2
45283: ARRAY
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: PUSH
45306: EMPTY
45307: LIST
45308: PPUSH
45309: CALL_OW 447
45313: GO 45256
45315: POP
45316: POP
// end ;
45317: LD_VAR 0 5
45321: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
45322: LD_EXP 9
45326: NOT
45327: IFFALSE 45377
45329: GO 45331
45331: DISABLE
// begin initHack := true ;
45332: LD_ADDR_EXP 9
45336: PUSH
45337: LD_INT 1
45339: ST_TO_ADDR
// hackTanks := [ ] ;
45340: LD_ADDR_EXP 10
45344: PUSH
45345: EMPTY
45346: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
45347: LD_ADDR_EXP 11
45351: PUSH
45352: EMPTY
45353: ST_TO_ADDR
// hackLimit := 3 ;
45354: LD_ADDR_EXP 12
45358: PUSH
45359: LD_INT 3
45361: ST_TO_ADDR
// hackDist := 12 ;
45362: LD_ADDR_EXP 13
45366: PUSH
45367: LD_INT 12
45369: ST_TO_ADDR
// hackCounter := [ ] ;
45370: LD_ADDR_EXP 14
45374: PUSH
45375: EMPTY
45376: ST_TO_ADDR
// end ;
45377: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
45378: LD_EXP 9
45382: PUSH
45383: LD_INT 34
45385: PUSH
45386: LD_INT 99
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PPUSH
45393: CALL_OW 69
45397: AND
45398: IFFALSE 45651
45400: GO 45402
45402: DISABLE
45403: LD_INT 0
45405: PPUSH
45406: PPUSH
// begin enable ;
45407: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
45408: LD_ADDR_VAR 0 1
45412: PUSH
45413: LD_INT 34
45415: PUSH
45416: LD_INT 99
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PPUSH
45423: CALL_OW 69
45427: PUSH
45428: FOR_IN
45429: IFFALSE 45649
// begin if not i in hackTanks then
45431: LD_VAR 0 1
45435: PUSH
45436: LD_EXP 10
45440: IN
45441: NOT
45442: IFFALSE 45525
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
45444: LD_ADDR_EXP 10
45448: PUSH
45449: LD_EXP 10
45453: PPUSH
45454: LD_EXP 10
45458: PUSH
45459: LD_INT 1
45461: PLUS
45462: PPUSH
45463: LD_VAR 0 1
45467: PPUSH
45468: CALL_OW 1
45472: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
45473: LD_ADDR_EXP 11
45477: PUSH
45478: LD_EXP 11
45482: PPUSH
45483: LD_EXP 11
45487: PUSH
45488: LD_INT 1
45490: PLUS
45491: PPUSH
45492: EMPTY
45493: PPUSH
45494: CALL_OW 1
45498: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
45499: LD_ADDR_EXP 14
45503: PUSH
45504: LD_EXP 14
45508: PPUSH
45509: LD_EXP 14
45513: PUSH
45514: LD_INT 1
45516: PLUS
45517: PPUSH
45518: EMPTY
45519: PPUSH
45520: CALL_OW 1
45524: ST_TO_ADDR
// end ; if not IsOk ( i ) then
45525: LD_VAR 0 1
45529: PPUSH
45530: CALL_OW 302
45534: NOT
45535: IFFALSE 45548
// begin HackUnlinkAll ( i ) ;
45537: LD_VAR 0 1
45541: PPUSH
45542: CALL 45654 0 1
// continue ;
45546: GO 45428
// end ; HackCheckCapturedStatus ( i ) ;
45548: LD_VAR 0 1
45552: PPUSH
45553: CALL 46097 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
45557: LD_ADDR_VAR 0 2
45561: PUSH
45562: LD_INT 81
45564: PUSH
45565: LD_VAR 0 1
45569: PPUSH
45570: CALL_OW 255
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 33
45581: PUSH
45582: LD_INT 3
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 91
45591: PUSH
45592: LD_VAR 0 1
45596: PUSH
45597: LD_EXP 13
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 50
45609: PUSH
45610: EMPTY
45611: LIST
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: PPUSH
45619: CALL_OW 69
45623: ST_TO_ADDR
// if not tmp then
45624: LD_VAR 0 2
45628: NOT
45629: IFFALSE 45633
// continue ;
45631: GO 45428
// HackLink ( i , tmp ) ;
45633: LD_VAR 0 1
45637: PPUSH
45638: LD_VAR 0 2
45642: PPUSH
45643: CALL 45790 0 2
// end ;
45647: GO 45428
45649: POP
45650: POP
// end ;
45651: PPOPN 2
45653: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
45654: LD_INT 0
45656: PPUSH
45657: PPUSH
45658: PPUSH
// if not hack in hackTanks then
45659: LD_VAR 0 1
45663: PUSH
45664: LD_EXP 10
45668: IN
45669: NOT
45670: IFFALSE 45674
// exit ;
45672: GO 45785
// index := GetElementIndex ( hackTanks , hack ) ;
45674: LD_ADDR_VAR 0 4
45678: PUSH
45679: LD_EXP 10
45683: PPUSH
45684: LD_VAR 0 1
45688: PPUSH
45689: CALL 7692 0 2
45693: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
45694: LD_EXP 11
45698: PUSH
45699: LD_VAR 0 4
45703: ARRAY
45704: IFFALSE 45785
// begin for i in hackTanksCaptured [ index ] do
45706: LD_ADDR_VAR 0 3
45710: PUSH
45711: LD_EXP 11
45715: PUSH
45716: LD_VAR 0 4
45720: ARRAY
45721: PUSH
45722: FOR_IN
45723: IFFALSE 45749
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
45725: LD_VAR 0 3
45729: PUSH
45730: LD_INT 1
45732: ARRAY
45733: PPUSH
45734: LD_VAR 0 3
45738: PUSH
45739: LD_INT 2
45741: ARRAY
45742: PPUSH
45743: CALL_OW 235
45747: GO 45722
45749: POP
45750: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
45751: LD_ADDR_EXP 11
45755: PUSH
45756: LD_EXP 11
45760: PPUSH
45761: LD_VAR 0 4
45765: PPUSH
45766: EMPTY
45767: PPUSH
45768: CALL_OW 1
45772: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
45773: LD_VAR 0 1
45777: PPUSH
45778: LD_INT 0
45780: PPUSH
45781: CALL_OW 505
// end ; end ;
45785: LD_VAR 0 2
45789: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
45790: LD_INT 0
45792: PPUSH
45793: PPUSH
45794: PPUSH
// if not hack in hackTanks or not vehicles then
45795: LD_VAR 0 1
45799: PUSH
45800: LD_EXP 10
45804: IN
45805: NOT
45806: PUSH
45807: LD_VAR 0 2
45811: NOT
45812: OR
45813: IFFALSE 45817
// exit ;
45815: GO 46092
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
45817: LD_ADDR_VAR 0 2
45821: PUSH
45822: LD_VAR 0 1
45826: PPUSH
45827: LD_VAR 0 2
45831: PPUSH
45832: LD_INT 1
45834: PPUSH
45835: LD_INT 1
45837: PPUSH
45838: CALL 8342 0 4
45842: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
45843: LD_ADDR_VAR 0 5
45847: PUSH
45848: LD_EXP 10
45852: PPUSH
45853: LD_VAR 0 1
45857: PPUSH
45858: CALL 7692 0 2
45862: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
45863: LD_EXP 11
45867: PUSH
45868: LD_VAR 0 5
45872: ARRAY
45873: PUSH
45874: LD_EXP 12
45878: LESS
45879: IFFALSE 46068
// begin for i := 1 to vehicles do
45881: LD_ADDR_VAR 0 4
45885: PUSH
45886: DOUBLE
45887: LD_INT 1
45889: DEC
45890: ST_TO_ADDR
45891: LD_VAR 0 2
45895: PUSH
45896: FOR_TO
45897: IFFALSE 46066
// begin if hackTanksCaptured [ index ] = hackLimit then
45899: LD_EXP 11
45903: PUSH
45904: LD_VAR 0 5
45908: ARRAY
45909: PUSH
45910: LD_EXP 12
45914: EQUAL
45915: IFFALSE 45919
// break ;
45917: GO 46066
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
45919: LD_ADDR_EXP 14
45923: PUSH
45924: LD_EXP 14
45928: PPUSH
45929: LD_VAR 0 5
45933: PPUSH
45934: LD_EXP 14
45938: PUSH
45939: LD_VAR 0 5
45943: ARRAY
45944: PUSH
45945: LD_INT 1
45947: PLUS
45948: PPUSH
45949: CALL_OW 1
45953: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
45954: LD_ADDR_EXP 11
45958: PUSH
45959: LD_EXP 11
45963: PPUSH
45964: LD_VAR 0 5
45968: PUSH
45969: LD_EXP 11
45973: PUSH
45974: LD_VAR 0 5
45978: ARRAY
45979: PUSH
45980: LD_INT 1
45982: PLUS
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PPUSH
45988: LD_VAR 0 2
45992: PUSH
45993: LD_VAR 0 4
45997: ARRAY
45998: PUSH
45999: LD_VAR 0 2
46003: PUSH
46004: LD_VAR 0 4
46008: ARRAY
46009: PPUSH
46010: CALL_OW 255
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PPUSH
46019: CALL 7907 0 3
46023: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
46024: LD_VAR 0 2
46028: PUSH
46029: LD_VAR 0 4
46033: ARRAY
46034: PPUSH
46035: LD_VAR 0 1
46039: PPUSH
46040: CALL_OW 255
46044: PPUSH
46045: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
46049: LD_VAR 0 2
46053: PUSH
46054: LD_VAR 0 4
46058: ARRAY
46059: PPUSH
46060: CALL_OW 141
// end ;
46064: GO 45896
46066: POP
46067: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46068: LD_VAR 0 1
46072: PPUSH
46073: LD_EXP 11
46077: PUSH
46078: LD_VAR 0 5
46082: ARRAY
46083: PUSH
46084: LD_INT 0
46086: PLUS
46087: PPUSH
46088: CALL_OW 505
// end ;
46092: LD_VAR 0 3
46096: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
46097: LD_INT 0
46099: PPUSH
46100: PPUSH
46101: PPUSH
46102: PPUSH
// if not hack in hackTanks then
46103: LD_VAR 0 1
46107: PUSH
46108: LD_EXP 10
46112: IN
46113: NOT
46114: IFFALSE 46118
// exit ;
46116: GO 46358
// index := GetElementIndex ( hackTanks , hack ) ;
46118: LD_ADDR_VAR 0 4
46122: PUSH
46123: LD_EXP 10
46127: PPUSH
46128: LD_VAR 0 1
46132: PPUSH
46133: CALL 7692 0 2
46137: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
46138: LD_ADDR_VAR 0 3
46142: PUSH
46143: DOUBLE
46144: LD_EXP 11
46148: PUSH
46149: LD_VAR 0 4
46153: ARRAY
46154: INC
46155: ST_TO_ADDR
46156: LD_INT 1
46158: PUSH
46159: FOR_DOWNTO
46160: IFFALSE 46332
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
46162: LD_ADDR_VAR 0 5
46166: PUSH
46167: LD_EXP 11
46171: PUSH
46172: LD_VAR 0 4
46176: ARRAY
46177: PUSH
46178: LD_VAR 0 3
46182: ARRAY
46183: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
46184: LD_VAR 0 5
46188: PUSH
46189: LD_INT 1
46191: ARRAY
46192: PPUSH
46193: CALL_OW 302
46197: NOT
46198: PUSH
46199: LD_VAR 0 5
46203: PUSH
46204: LD_INT 1
46206: ARRAY
46207: PPUSH
46208: CALL_OW 255
46212: PUSH
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL_OW 255
46222: NONEQUAL
46223: OR
46224: IFFALSE 46330
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
46226: LD_VAR 0 5
46230: PUSH
46231: LD_INT 1
46233: ARRAY
46234: PPUSH
46235: CALL_OW 305
46239: PUSH
46240: LD_VAR 0 5
46244: PUSH
46245: LD_INT 1
46247: ARRAY
46248: PPUSH
46249: CALL_OW 255
46253: PUSH
46254: LD_VAR 0 1
46258: PPUSH
46259: CALL_OW 255
46263: EQUAL
46264: AND
46265: IFFALSE 46289
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
46267: LD_VAR 0 5
46271: PUSH
46272: LD_INT 1
46274: ARRAY
46275: PPUSH
46276: LD_VAR 0 5
46280: PUSH
46281: LD_INT 2
46283: ARRAY
46284: PPUSH
46285: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
46289: LD_ADDR_EXP 11
46293: PUSH
46294: LD_EXP 11
46298: PPUSH
46299: LD_VAR 0 4
46303: PPUSH
46304: LD_EXP 11
46308: PUSH
46309: LD_VAR 0 4
46313: ARRAY
46314: PPUSH
46315: LD_VAR 0 3
46319: PPUSH
46320: CALL_OW 3
46324: PPUSH
46325: CALL_OW 1
46329: ST_TO_ADDR
// end ; end ;
46330: GO 46159
46332: POP
46333: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46334: LD_VAR 0 1
46338: PPUSH
46339: LD_EXP 11
46343: PUSH
46344: LD_VAR 0 4
46348: ARRAY
46349: PUSH
46350: LD_INT 0
46352: PLUS
46353: PPUSH
46354: CALL_OW 505
// end ;
46358: LD_VAR 0 2
46362: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
46363: LD_INT 0
46365: PPUSH
46366: PPUSH
46367: PPUSH
46368: PPUSH
// if not hack in hackTanks then
46369: LD_VAR 0 1
46373: PUSH
46374: LD_EXP 10
46378: IN
46379: NOT
46380: IFFALSE 46384
// exit ;
46382: GO 46469
// index := GetElementIndex ( hackTanks , hack ) ;
46384: LD_ADDR_VAR 0 5
46388: PUSH
46389: LD_EXP 10
46393: PPUSH
46394: LD_VAR 0 1
46398: PPUSH
46399: CALL 7692 0 2
46403: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
46404: LD_ADDR_VAR 0 4
46408: PUSH
46409: DOUBLE
46410: LD_INT 1
46412: DEC
46413: ST_TO_ADDR
46414: LD_EXP 11
46418: PUSH
46419: LD_VAR 0 5
46423: ARRAY
46424: PUSH
46425: FOR_TO
46426: IFFALSE 46467
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
46428: LD_EXP 11
46432: PUSH
46433: LD_VAR 0 5
46437: ARRAY
46438: PUSH
46439: LD_VAR 0 4
46443: ARRAY
46444: PUSH
46445: LD_INT 1
46447: ARRAY
46448: PUSH
46449: LD_VAR 0 2
46453: EQUAL
46454: IFFALSE 46465
// KillUnit ( vehicle ) ;
46456: LD_VAR 0 2
46460: PPUSH
46461: CALL_OW 66
46465: GO 46425
46467: POP
46468: POP
// end ;
46469: LD_VAR 0 3
46473: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
46474: LD_EXP 15
46478: NOT
46479: IFFALSE 46514
46481: GO 46483
46483: DISABLE
// begin initMiner := true ;
46484: LD_ADDR_EXP 15
46488: PUSH
46489: LD_INT 1
46491: ST_TO_ADDR
// minersList := [ ] ;
46492: LD_ADDR_EXP 16
46496: PUSH
46497: EMPTY
46498: ST_TO_ADDR
// minerMinesList := [ ] ;
46499: LD_ADDR_EXP 17
46503: PUSH
46504: EMPTY
46505: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
46506: LD_ADDR_EXP 18
46510: PUSH
46511: LD_INT 5
46513: ST_TO_ADDR
// end ;
46514: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
46515: LD_EXP 15
46519: PUSH
46520: LD_INT 34
46522: PUSH
46523: LD_INT 81
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PPUSH
46530: CALL_OW 69
46534: AND
46535: IFFALSE 46996
46537: GO 46539
46539: DISABLE
46540: LD_INT 0
46542: PPUSH
46543: PPUSH
46544: PPUSH
46545: PPUSH
// begin enable ;
46546: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
46547: LD_ADDR_VAR 0 1
46551: PUSH
46552: LD_INT 34
46554: PUSH
46555: LD_INT 81
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PPUSH
46562: CALL_OW 69
46566: PUSH
46567: FOR_IN
46568: IFFALSE 46640
// begin if not i in minersList then
46570: LD_VAR 0 1
46574: PUSH
46575: LD_EXP 16
46579: IN
46580: NOT
46581: IFFALSE 46638
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
46583: LD_ADDR_EXP 16
46587: PUSH
46588: LD_EXP 16
46592: PPUSH
46593: LD_EXP 16
46597: PUSH
46598: LD_INT 1
46600: PLUS
46601: PPUSH
46602: LD_VAR 0 1
46606: PPUSH
46607: CALL_OW 1
46611: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
46612: LD_ADDR_EXP 17
46616: PUSH
46617: LD_EXP 17
46621: PPUSH
46622: LD_EXP 17
46626: PUSH
46627: LD_INT 1
46629: PLUS
46630: PPUSH
46631: EMPTY
46632: PPUSH
46633: CALL_OW 1
46637: ST_TO_ADDR
// end end ;
46638: GO 46567
46640: POP
46641: POP
// for i := minerMinesList downto 1 do
46642: LD_ADDR_VAR 0 1
46646: PUSH
46647: DOUBLE
46648: LD_EXP 17
46652: INC
46653: ST_TO_ADDR
46654: LD_INT 1
46656: PUSH
46657: FOR_DOWNTO
46658: IFFALSE 46994
// begin if IsLive ( minersList [ i ] ) then
46660: LD_EXP 16
46664: PUSH
46665: LD_VAR 0 1
46669: ARRAY
46670: PPUSH
46671: CALL_OW 300
46675: IFFALSE 46703
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
46677: LD_EXP 16
46681: PUSH
46682: LD_VAR 0 1
46686: ARRAY
46687: PPUSH
46688: LD_EXP 17
46692: PUSH
46693: LD_VAR 0 1
46697: ARRAY
46698: PPUSH
46699: CALL_OW 505
// if not minerMinesList [ i ] then
46703: LD_EXP 17
46707: PUSH
46708: LD_VAR 0 1
46712: ARRAY
46713: NOT
46714: IFFALSE 46718
// continue ;
46716: GO 46657
// for j := minerMinesList [ i ] downto 1 do
46718: LD_ADDR_VAR 0 2
46722: PUSH
46723: DOUBLE
46724: LD_EXP 17
46728: PUSH
46729: LD_VAR 0 1
46733: ARRAY
46734: INC
46735: ST_TO_ADDR
46736: LD_INT 1
46738: PUSH
46739: FOR_DOWNTO
46740: IFFALSE 46990
// begin side := GetSide ( minersList [ i ] ) ;
46742: LD_ADDR_VAR 0 3
46746: PUSH
46747: LD_EXP 16
46751: PUSH
46752: LD_VAR 0 1
46756: ARRAY
46757: PPUSH
46758: CALL_OW 255
46762: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
46763: LD_ADDR_VAR 0 4
46767: PUSH
46768: LD_EXP 17
46772: PUSH
46773: LD_VAR 0 1
46777: ARRAY
46778: PUSH
46779: LD_VAR 0 2
46783: ARRAY
46784: PUSH
46785: LD_INT 1
46787: ARRAY
46788: PPUSH
46789: LD_EXP 17
46793: PUSH
46794: LD_VAR 0 1
46798: ARRAY
46799: PUSH
46800: LD_VAR 0 2
46804: ARRAY
46805: PUSH
46806: LD_INT 2
46808: ARRAY
46809: PPUSH
46810: CALL_OW 428
46814: ST_TO_ADDR
// if not tmp then
46815: LD_VAR 0 4
46819: NOT
46820: IFFALSE 46824
// continue ;
46822: GO 46739
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
46824: LD_VAR 0 4
46828: PUSH
46829: LD_INT 81
46831: PUSH
46832: LD_VAR 0 3
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PPUSH
46841: CALL_OW 69
46845: IN
46846: PUSH
46847: LD_EXP 17
46851: PUSH
46852: LD_VAR 0 1
46856: ARRAY
46857: PUSH
46858: LD_VAR 0 2
46862: ARRAY
46863: PUSH
46864: LD_INT 1
46866: ARRAY
46867: PPUSH
46868: LD_EXP 17
46872: PUSH
46873: LD_VAR 0 1
46877: ARRAY
46878: PUSH
46879: LD_VAR 0 2
46883: ARRAY
46884: PUSH
46885: LD_INT 2
46887: ARRAY
46888: PPUSH
46889: CALL_OW 458
46893: AND
46894: IFFALSE 46988
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
46896: LD_EXP 17
46900: PUSH
46901: LD_VAR 0 1
46905: ARRAY
46906: PUSH
46907: LD_VAR 0 2
46911: ARRAY
46912: PUSH
46913: LD_INT 1
46915: ARRAY
46916: PPUSH
46917: LD_EXP 17
46921: PUSH
46922: LD_VAR 0 1
46926: ARRAY
46927: PUSH
46928: LD_VAR 0 2
46932: ARRAY
46933: PUSH
46934: LD_INT 2
46936: ARRAY
46937: PPUSH
46938: LD_VAR 0 3
46942: PPUSH
46943: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
46947: LD_ADDR_EXP 17
46951: PUSH
46952: LD_EXP 17
46956: PPUSH
46957: LD_VAR 0 1
46961: PPUSH
46962: LD_EXP 17
46966: PUSH
46967: LD_VAR 0 1
46971: ARRAY
46972: PPUSH
46973: LD_VAR 0 2
46977: PPUSH
46978: CALL_OW 3
46982: PPUSH
46983: CALL_OW 1
46987: ST_TO_ADDR
// end ; end ;
46988: GO 46739
46990: POP
46991: POP
// end ;
46992: GO 46657
46994: POP
46995: POP
// end ;
46996: PPOPN 4
46998: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
46999: LD_INT 0
47001: PPUSH
47002: PPUSH
// result := false ;
47003: LD_ADDR_VAR 0 4
47007: PUSH
47008: LD_INT 0
47010: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
47011: LD_VAR 0 1
47015: PPUSH
47016: CALL_OW 264
47020: PUSH
47021: LD_INT 81
47023: EQUAL
47024: NOT
47025: IFFALSE 47029
// exit ;
47027: GO 47269
// index := GetElementIndex ( minersList , unit ) ;
47029: LD_ADDR_VAR 0 5
47033: PUSH
47034: LD_EXP 16
47038: PPUSH
47039: LD_VAR 0 1
47043: PPUSH
47044: CALL 7692 0 2
47048: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
47049: LD_EXP 17
47053: PUSH
47054: LD_VAR 0 5
47058: ARRAY
47059: PUSH
47060: LD_EXP 18
47064: GREATEREQUAL
47065: IFFALSE 47069
// exit ;
47067: GO 47269
// ComMoveXY ( unit , x , y ) ;
47069: LD_VAR 0 1
47073: PPUSH
47074: LD_VAR 0 2
47078: PPUSH
47079: LD_VAR 0 3
47083: PPUSH
47084: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47088: LD_INT 35
47090: PPUSH
47091: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
47095: LD_VAR 0 1
47099: PPUSH
47100: LD_VAR 0 2
47104: PPUSH
47105: LD_VAR 0 3
47109: PPUSH
47110: CALL 39047 0 3
47114: NOT
47115: PUSH
47116: LD_VAR 0 1
47120: PPUSH
47121: CALL_OW 314
47125: AND
47126: IFFALSE 47130
// exit ;
47128: GO 47269
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
47130: LD_VAR 0 2
47134: PPUSH
47135: LD_VAR 0 3
47139: PPUSH
47140: CALL_OW 428
47144: PUSH
47145: LD_VAR 0 1
47149: EQUAL
47150: PUSH
47151: LD_VAR 0 1
47155: PPUSH
47156: CALL_OW 314
47160: NOT
47161: AND
47162: IFFALSE 47088
// PlaySoundXY ( x , y , PlantMine ) ;
47164: LD_VAR 0 2
47168: PPUSH
47169: LD_VAR 0 3
47173: PPUSH
47174: LD_STRING PlantMine
47176: PPUSH
47177: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
47181: LD_VAR 0 2
47185: PPUSH
47186: LD_VAR 0 3
47190: PPUSH
47191: LD_VAR 0 1
47195: PPUSH
47196: CALL_OW 255
47200: PPUSH
47201: LD_INT 0
47203: PPUSH
47204: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
47208: LD_ADDR_EXP 17
47212: PUSH
47213: LD_EXP 17
47217: PPUSH
47218: LD_VAR 0 5
47222: PUSH
47223: LD_EXP 17
47227: PUSH
47228: LD_VAR 0 5
47232: ARRAY
47233: PUSH
47234: LD_INT 1
47236: PLUS
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PPUSH
47242: LD_VAR 0 2
47246: PUSH
47247: LD_VAR 0 3
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PPUSH
47256: CALL 7907 0 3
47260: ST_TO_ADDR
// result := true ;
47261: LD_ADDR_VAR 0 4
47265: PUSH
47266: LD_INT 1
47268: ST_TO_ADDR
// end ;
47269: LD_VAR 0 4
47273: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
47274: LD_INT 0
47276: PPUSH
47277: PPUSH
47278: PPUSH
// if not unit in minersList then
47279: LD_VAR 0 1
47283: PUSH
47284: LD_EXP 16
47288: IN
47289: NOT
47290: IFFALSE 47294
// exit ;
47292: GO 47686
// index := GetElementIndex ( minersList , unit ) ;
47294: LD_ADDR_VAR 0 6
47298: PUSH
47299: LD_EXP 16
47303: PPUSH
47304: LD_VAR 0 1
47308: PPUSH
47309: CALL 7692 0 2
47313: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
47314: LD_ADDR_VAR 0 5
47318: PUSH
47319: DOUBLE
47320: LD_EXP 17
47324: PUSH
47325: LD_VAR 0 6
47329: ARRAY
47330: INC
47331: ST_TO_ADDR
47332: LD_INT 1
47334: PUSH
47335: FOR_DOWNTO
47336: IFFALSE 47497
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
47338: LD_EXP 17
47342: PUSH
47343: LD_VAR 0 6
47347: ARRAY
47348: PUSH
47349: LD_VAR 0 5
47353: ARRAY
47354: PUSH
47355: LD_INT 1
47357: ARRAY
47358: PUSH
47359: LD_VAR 0 2
47363: EQUAL
47364: PUSH
47365: LD_EXP 17
47369: PUSH
47370: LD_VAR 0 6
47374: ARRAY
47375: PUSH
47376: LD_VAR 0 5
47380: ARRAY
47381: PUSH
47382: LD_INT 2
47384: ARRAY
47385: PUSH
47386: LD_VAR 0 3
47390: EQUAL
47391: AND
47392: IFFALSE 47495
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47394: LD_EXP 17
47398: PUSH
47399: LD_VAR 0 6
47403: ARRAY
47404: PUSH
47405: LD_VAR 0 5
47409: ARRAY
47410: PUSH
47411: LD_INT 1
47413: ARRAY
47414: PPUSH
47415: LD_EXP 17
47419: PUSH
47420: LD_VAR 0 6
47424: ARRAY
47425: PUSH
47426: LD_VAR 0 5
47430: ARRAY
47431: PUSH
47432: LD_INT 2
47434: ARRAY
47435: PPUSH
47436: LD_VAR 0 1
47440: PPUSH
47441: CALL_OW 255
47445: PPUSH
47446: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47450: LD_ADDR_EXP 17
47454: PUSH
47455: LD_EXP 17
47459: PPUSH
47460: LD_VAR 0 6
47464: PPUSH
47465: LD_EXP 17
47469: PUSH
47470: LD_VAR 0 6
47474: ARRAY
47475: PPUSH
47476: LD_VAR 0 5
47480: PPUSH
47481: CALL_OW 3
47485: PPUSH
47486: CALL_OW 1
47490: ST_TO_ADDR
// exit ;
47491: POP
47492: POP
47493: GO 47686
// end ; end ;
47495: GO 47335
47497: POP
47498: POP
// for i := minerMinesList [ index ] downto 1 do
47499: LD_ADDR_VAR 0 5
47503: PUSH
47504: DOUBLE
47505: LD_EXP 17
47509: PUSH
47510: LD_VAR 0 6
47514: ARRAY
47515: INC
47516: ST_TO_ADDR
47517: LD_INT 1
47519: PUSH
47520: FOR_DOWNTO
47521: IFFALSE 47684
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
47523: LD_EXP 17
47527: PUSH
47528: LD_VAR 0 6
47532: ARRAY
47533: PUSH
47534: LD_VAR 0 5
47538: ARRAY
47539: PUSH
47540: LD_INT 1
47542: ARRAY
47543: PPUSH
47544: LD_EXP 17
47548: PUSH
47549: LD_VAR 0 6
47553: ARRAY
47554: PUSH
47555: LD_VAR 0 5
47559: ARRAY
47560: PUSH
47561: LD_INT 2
47563: ARRAY
47564: PPUSH
47565: LD_VAR 0 2
47569: PPUSH
47570: LD_VAR 0 3
47574: PPUSH
47575: CALL_OW 298
47579: PUSH
47580: LD_INT 6
47582: LESS
47583: IFFALSE 47682
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47585: LD_EXP 17
47589: PUSH
47590: LD_VAR 0 6
47594: ARRAY
47595: PUSH
47596: LD_VAR 0 5
47600: ARRAY
47601: PUSH
47602: LD_INT 1
47604: ARRAY
47605: PPUSH
47606: LD_EXP 17
47610: PUSH
47611: LD_VAR 0 6
47615: ARRAY
47616: PUSH
47617: LD_VAR 0 5
47621: ARRAY
47622: PUSH
47623: LD_INT 2
47625: ARRAY
47626: PPUSH
47627: LD_VAR 0 1
47631: PPUSH
47632: CALL_OW 255
47636: PPUSH
47637: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47641: LD_ADDR_EXP 17
47645: PUSH
47646: LD_EXP 17
47650: PPUSH
47651: LD_VAR 0 6
47655: PPUSH
47656: LD_EXP 17
47660: PUSH
47661: LD_VAR 0 6
47665: ARRAY
47666: PPUSH
47667: LD_VAR 0 5
47671: PPUSH
47672: CALL_OW 3
47676: PPUSH
47677: CALL_OW 1
47681: ST_TO_ADDR
// end ; end ;
47682: GO 47520
47684: POP
47685: POP
// end ;
47686: LD_VAR 0 4
47690: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
47691: LD_INT 0
47693: PPUSH
47694: PPUSH
47695: PPUSH
47696: PPUSH
47697: PPUSH
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
47702: LD_VAR 0 1
47706: PPUSH
47707: CALL_OW 264
47711: PUSH
47712: LD_INT 81
47714: EQUAL
47715: NOT
47716: PUSH
47717: LD_VAR 0 1
47721: PUSH
47722: LD_EXP 16
47726: IN
47727: NOT
47728: OR
47729: IFFALSE 47733
// exit ;
47731: GO 48055
// index := GetElementIndex ( minersList , unit ) ;
47733: LD_ADDR_VAR 0 6
47737: PUSH
47738: LD_EXP 16
47742: PPUSH
47743: LD_VAR 0 1
47747: PPUSH
47748: CALL 7692 0 2
47752: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
47753: LD_ADDR_VAR 0 8
47757: PUSH
47758: LD_EXP 18
47762: PUSH
47763: LD_EXP 17
47767: PUSH
47768: LD_VAR 0 6
47772: ARRAY
47773: MINUS
47774: ST_TO_ADDR
// if not minesFreeAmount then
47775: LD_VAR 0 8
47779: NOT
47780: IFFALSE 47784
// exit ;
47782: GO 48055
// tmp := [ ] ;
47784: LD_ADDR_VAR 0 7
47788: PUSH
47789: EMPTY
47790: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
47791: LD_ADDR_VAR 0 5
47795: PUSH
47796: DOUBLE
47797: LD_INT 1
47799: DEC
47800: ST_TO_ADDR
47801: LD_VAR 0 8
47805: PUSH
47806: FOR_TO
47807: IFFALSE 48002
// begin _d := rand ( 0 , 5 ) ;
47809: LD_ADDR_VAR 0 11
47813: PUSH
47814: LD_INT 0
47816: PPUSH
47817: LD_INT 5
47819: PPUSH
47820: CALL_OW 12
47824: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
47825: LD_ADDR_VAR 0 12
47829: PUSH
47830: LD_INT 2
47832: PPUSH
47833: LD_INT 6
47835: PPUSH
47836: CALL_OW 12
47840: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
47841: LD_ADDR_VAR 0 9
47845: PUSH
47846: LD_VAR 0 2
47850: PPUSH
47851: LD_VAR 0 11
47855: PPUSH
47856: LD_VAR 0 12
47860: PPUSH
47861: CALL_OW 272
47865: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
47866: LD_ADDR_VAR 0 10
47870: PUSH
47871: LD_VAR 0 3
47875: PPUSH
47876: LD_VAR 0 11
47880: PPUSH
47881: LD_VAR 0 12
47885: PPUSH
47886: CALL_OW 273
47890: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
47891: LD_VAR 0 9
47895: PPUSH
47896: LD_VAR 0 10
47900: PPUSH
47901: CALL_OW 488
47905: PUSH
47906: LD_VAR 0 9
47910: PUSH
47911: LD_VAR 0 10
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_VAR 0 7
47924: IN
47925: NOT
47926: AND
47927: PUSH
47928: LD_VAR 0 9
47932: PPUSH
47933: LD_VAR 0 10
47937: PPUSH
47938: CALL_OW 458
47942: NOT
47943: AND
47944: IFFALSE 47986
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
47946: LD_ADDR_VAR 0 7
47950: PUSH
47951: LD_VAR 0 7
47955: PPUSH
47956: LD_VAR 0 7
47960: PUSH
47961: LD_INT 1
47963: PLUS
47964: PPUSH
47965: LD_VAR 0 9
47969: PUSH
47970: LD_VAR 0 10
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PPUSH
47979: CALL_OW 1
47983: ST_TO_ADDR
47984: GO 48000
// i := i - 1 ;
47986: LD_ADDR_VAR 0 5
47990: PUSH
47991: LD_VAR 0 5
47995: PUSH
47996: LD_INT 1
47998: MINUS
47999: ST_TO_ADDR
// end ;
48000: GO 47806
48002: POP
48003: POP
// for i in tmp do
48004: LD_ADDR_VAR 0 5
48008: PUSH
48009: LD_VAR 0 7
48013: PUSH
48014: FOR_IN
48015: IFFALSE 48053
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
48017: LD_VAR 0 1
48021: PPUSH
48022: LD_VAR 0 5
48026: PUSH
48027: LD_INT 1
48029: ARRAY
48030: PPUSH
48031: LD_VAR 0 5
48035: PUSH
48036: LD_INT 2
48038: ARRAY
48039: PPUSH
48040: CALL 46999 0 3
48044: NOT
48045: IFFALSE 48051
// exit ;
48047: POP
48048: POP
48049: GO 48055
48051: GO 48014
48053: POP
48054: POP
// end ;
48055: LD_VAR 0 4
48059: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
48060: LD_INT 0
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
// if not GetClass ( unit ) = class_sniper then
48069: LD_VAR 0 1
48073: PPUSH
48074: CALL_OW 257
48078: PUSH
48079: LD_INT 5
48081: EQUAL
48082: NOT
48083: IFFALSE 48087
// exit ;
48085: GO 48475
// dist := 8 ;
48087: LD_ADDR_VAR 0 5
48091: PUSH
48092: LD_INT 8
48094: ST_TO_ADDR
// viewRange := 12 ;
48095: LD_ADDR_VAR 0 7
48099: PUSH
48100: LD_INT 12
48102: ST_TO_ADDR
// side := GetSide ( unit ) ;
48103: LD_ADDR_VAR 0 6
48107: PUSH
48108: LD_VAR 0 1
48112: PPUSH
48113: CALL_OW 255
48117: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
48118: LD_INT 61
48120: PPUSH
48121: LD_VAR 0 6
48125: PPUSH
48126: CALL_OW 321
48130: PUSH
48131: LD_INT 2
48133: EQUAL
48134: IFFALSE 48144
// viewRange := 16 ;
48136: LD_ADDR_VAR 0 7
48140: PUSH
48141: LD_INT 16
48143: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
48144: LD_VAR 0 1
48148: PPUSH
48149: LD_VAR 0 2
48153: PPUSH
48154: LD_VAR 0 3
48158: PPUSH
48159: CALL_OW 297
48163: PUSH
48164: LD_VAR 0 5
48168: GREATER
48169: IFFALSE 48248
// begin ComMoveXY ( unit , x , y ) ;
48171: LD_VAR 0 1
48175: PPUSH
48176: LD_VAR 0 2
48180: PPUSH
48181: LD_VAR 0 3
48185: PPUSH
48186: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48190: LD_INT 35
48192: PPUSH
48193: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
48197: LD_VAR 0 1
48201: PPUSH
48202: LD_VAR 0 2
48206: PPUSH
48207: LD_VAR 0 3
48211: PPUSH
48212: CALL 39047 0 3
48216: NOT
48217: IFFALSE 48221
// exit ;
48219: GO 48475
// until GetDistUnitXY ( unit , x , y ) < dist ;
48221: LD_VAR 0 1
48225: PPUSH
48226: LD_VAR 0 2
48230: PPUSH
48231: LD_VAR 0 3
48235: PPUSH
48236: CALL_OW 297
48240: PUSH
48241: LD_VAR 0 5
48245: LESS
48246: IFFALSE 48190
// end ; ComTurnXY ( unit , x , y ) ;
48248: LD_VAR 0 1
48252: PPUSH
48253: LD_VAR 0 2
48257: PPUSH
48258: LD_VAR 0 3
48262: PPUSH
48263: CALL_OW 118
// wait ( 5 ) ;
48267: LD_INT 5
48269: PPUSH
48270: CALL_OW 67
// _d := GetDir ( unit ) ;
48274: LD_ADDR_VAR 0 10
48278: PUSH
48279: LD_VAR 0 1
48283: PPUSH
48284: CALL_OW 254
48288: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
48289: LD_ADDR_VAR 0 8
48293: PUSH
48294: LD_VAR 0 1
48298: PPUSH
48299: CALL_OW 250
48303: PPUSH
48304: LD_VAR 0 10
48308: PPUSH
48309: LD_VAR 0 5
48313: PPUSH
48314: CALL_OW 272
48318: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
48319: LD_ADDR_VAR 0 9
48323: PUSH
48324: LD_VAR 0 1
48328: PPUSH
48329: CALL_OW 251
48333: PPUSH
48334: LD_VAR 0 10
48338: PPUSH
48339: LD_VAR 0 5
48343: PPUSH
48344: CALL_OW 273
48348: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48349: LD_VAR 0 8
48353: PPUSH
48354: LD_VAR 0 9
48358: PPUSH
48359: CALL_OW 488
48363: NOT
48364: IFFALSE 48368
// exit ;
48366: GO 48475
// ComAnimCustom ( unit , 1 ) ;
48368: LD_VAR 0 1
48372: PPUSH
48373: LD_INT 1
48375: PPUSH
48376: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
48380: LD_VAR 0 8
48384: PPUSH
48385: LD_VAR 0 9
48389: PPUSH
48390: LD_VAR 0 6
48394: PPUSH
48395: LD_VAR 0 7
48399: PPUSH
48400: CALL_OW 330
// repeat wait ( 1 ) ;
48404: LD_INT 1
48406: PPUSH
48407: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
48411: LD_VAR 0 1
48415: PPUSH
48416: CALL_OW 316
48420: PUSH
48421: LD_VAR 0 1
48425: PPUSH
48426: CALL_OW 314
48430: OR
48431: PUSH
48432: LD_VAR 0 1
48436: PPUSH
48437: CALL_OW 302
48441: NOT
48442: OR
48443: PUSH
48444: LD_VAR 0 1
48448: PPUSH
48449: CALL_OW 301
48453: OR
48454: IFFALSE 48404
// RemoveSeeing ( _x , _y , side ) ;
48456: LD_VAR 0 8
48460: PPUSH
48461: LD_VAR 0 9
48465: PPUSH
48466: LD_VAR 0 6
48470: PPUSH
48471: CALL_OW 331
// end ; end_of_file
48475: LD_VAR 0 4
48479: RET
// every 0 0$1 do
48480: GO 48482
48482: DISABLE
// begin enable ;
48483: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48484: LD_STRING updateTimer(
48486: PUSH
48487: LD_OWVAR 1
48491: STR
48492: PUSH
48493: LD_STRING );
48495: STR
48496: PPUSH
48497: CALL_OW 559
// end ;
48501: END
// export function SOS_MapStart ( ) ; begin
48502: LD_INT 0
48504: PPUSH
// if streamModeActive then
48505: LD_EXP 20
48509: IFFALSE 48518
// DefineStreamItems ( true ) ;
48511: LD_INT 1
48513: PPUSH
48514: CALL 50322 0 1
// UpdateLuaVariables ( ) ;
48518: CALL 48535 0 0
// UpdateFactoryWaypoints ( ) ;
48522: CALL 63183 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48526: CALL 63440 0 0
// end ;
48530: LD_VAR 0 1
48534: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
48535: LD_INT 0
48537: PPUSH
// if not globalGameSaveCounter then
48538: LD_EXP 19
48542: NOT
48543: IFFALSE 48554
// ToLua ( setGameSaveCounter(0) ) else
48545: LD_STRING setGameSaveCounter(0)
48547: PPUSH
48548: CALL_OW 559
48552: GO 48586
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
48554: LD_ADDR_EXP 19
48558: PUSH
48559: LD_EXP 19
48563: PPUSH
48564: CALL 41599 0 1
48568: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48569: LD_STRING setGameSaveCounter(
48571: PUSH
48572: LD_EXP 19
48576: STR
48577: PUSH
48578: LD_STRING )
48580: STR
48581: PPUSH
48582: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
48586: LD_STRING setGameDifficulty(
48588: PUSH
48589: LD_OWVAR 67
48593: STR
48594: PUSH
48595: LD_STRING )
48597: STR
48598: PPUSH
48599: CALL_OW 559
// end ;
48603: LD_VAR 0 1
48607: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48608: LD_INT 0
48610: PPUSH
// if p2 = stream_mode then
48611: LD_VAR 0 2
48615: PUSH
48616: LD_INT 100
48618: EQUAL
48619: IFFALSE 49622
// begin if not StreamModeActive then
48621: LD_EXP 20
48625: NOT
48626: IFFALSE 48636
// StreamModeActive := true ;
48628: LD_ADDR_EXP 20
48632: PUSH
48633: LD_INT 1
48635: ST_TO_ADDR
// if p3 = 0 then
48636: LD_VAR 0 3
48640: PUSH
48641: LD_INT 0
48643: EQUAL
48644: IFFALSE 48650
// InitStreamMode ;
48646: CALL 49858 0 0
// if p3 = 1 then
48650: LD_VAR 0 3
48654: PUSH
48655: LD_INT 1
48657: EQUAL
48658: IFFALSE 48668
// sRocket := true ;
48660: LD_ADDR_EXP 25
48664: PUSH
48665: LD_INT 1
48667: ST_TO_ADDR
// if p3 = 2 then
48668: LD_VAR 0 3
48672: PUSH
48673: LD_INT 2
48675: EQUAL
48676: IFFALSE 48686
// sSpeed := true ;
48678: LD_ADDR_EXP 24
48682: PUSH
48683: LD_INT 1
48685: ST_TO_ADDR
// if p3 = 3 then
48686: LD_VAR 0 3
48690: PUSH
48691: LD_INT 3
48693: EQUAL
48694: IFFALSE 48704
// sEngine := true ;
48696: LD_ADDR_EXP 26
48700: PUSH
48701: LD_INT 1
48703: ST_TO_ADDR
// if p3 = 4 then
48704: LD_VAR 0 3
48708: PUSH
48709: LD_INT 4
48711: EQUAL
48712: IFFALSE 48722
// sSpec := true ;
48714: LD_ADDR_EXP 23
48718: PUSH
48719: LD_INT 1
48721: ST_TO_ADDR
// if p3 = 5 then
48722: LD_VAR 0 3
48726: PUSH
48727: LD_INT 5
48729: EQUAL
48730: IFFALSE 48740
// sLevel := true ;
48732: LD_ADDR_EXP 27
48736: PUSH
48737: LD_INT 1
48739: ST_TO_ADDR
// if p3 = 6 then
48740: LD_VAR 0 3
48744: PUSH
48745: LD_INT 6
48747: EQUAL
48748: IFFALSE 48758
// sArmoury := true ;
48750: LD_ADDR_EXP 28
48754: PUSH
48755: LD_INT 1
48757: ST_TO_ADDR
// if p3 = 7 then
48758: LD_VAR 0 3
48762: PUSH
48763: LD_INT 7
48765: EQUAL
48766: IFFALSE 48776
// sRadar := true ;
48768: LD_ADDR_EXP 29
48772: PUSH
48773: LD_INT 1
48775: ST_TO_ADDR
// if p3 = 8 then
48776: LD_VAR 0 3
48780: PUSH
48781: LD_INT 8
48783: EQUAL
48784: IFFALSE 48794
// sBunker := true ;
48786: LD_ADDR_EXP 30
48790: PUSH
48791: LD_INT 1
48793: ST_TO_ADDR
// if p3 = 9 then
48794: LD_VAR 0 3
48798: PUSH
48799: LD_INT 9
48801: EQUAL
48802: IFFALSE 48812
// sHack := true ;
48804: LD_ADDR_EXP 31
48808: PUSH
48809: LD_INT 1
48811: ST_TO_ADDR
// if p3 = 10 then
48812: LD_VAR 0 3
48816: PUSH
48817: LD_INT 10
48819: EQUAL
48820: IFFALSE 48830
// sFire := true ;
48822: LD_ADDR_EXP 32
48826: PUSH
48827: LD_INT 1
48829: ST_TO_ADDR
// if p3 = 11 then
48830: LD_VAR 0 3
48834: PUSH
48835: LD_INT 11
48837: EQUAL
48838: IFFALSE 48848
// sRefresh := true ;
48840: LD_ADDR_EXP 33
48844: PUSH
48845: LD_INT 1
48847: ST_TO_ADDR
// if p3 = 12 then
48848: LD_VAR 0 3
48852: PUSH
48853: LD_INT 12
48855: EQUAL
48856: IFFALSE 48866
// sExp := true ;
48858: LD_ADDR_EXP 34
48862: PUSH
48863: LD_INT 1
48865: ST_TO_ADDR
// if p3 = 13 then
48866: LD_VAR 0 3
48870: PUSH
48871: LD_INT 13
48873: EQUAL
48874: IFFALSE 48884
// sDepot := true ;
48876: LD_ADDR_EXP 35
48880: PUSH
48881: LD_INT 1
48883: ST_TO_ADDR
// if p3 = 14 then
48884: LD_VAR 0 3
48888: PUSH
48889: LD_INT 14
48891: EQUAL
48892: IFFALSE 48902
// sFlag := true ;
48894: LD_ADDR_EXP 36
48898: PUSH
48899: LD_INT 1
48901: ST_TO_ADDR
// if p3 = 15 then
48902: LD_VAR 0 3
48906: PUSH
48907: LD_INT 15
48909: EQUAL
48910: IFFALSE 48920
// sKamikadze := true ;
48912: LD_ADDR_EXP 44
48916: PUSH
48917: LD_INT 1
48919: ST_TO_ADDR
// if p3 = 16 then
48920: LD_VAR 0 3
48924: PUSH
48925: LD_INT 16
48927: EQUAL
48928: IFFALSE 48938
// sTroll := true ;
48930: LD_ADDR_EXP 45
48934: PUSH
48935: LD_INT 1
48937: ST_TO_ADDR
// if p3 = 17 then
48938: LD_VAR 0 3
48942: PUSH
48943: LD_INT 17
48945: EQUAL
48946: IFFALSE 48956
// sSlow := true ;
48948: LD_ADDR_EXP 46
48952: PUSH
48953: LD_INT 1
48955: ST_TO_ADDR
// if p3 = 18 then
48956: LD_VAR 0 3
48960: PUSH
48961: LD_INT 18
48963: EQUAL
48964: IFFALSE 48974
// sLack := true ;
48966: LD_ADDR_EXP 47
48970: PUSH
48971: LD_INT 1
48973: ST_TO_ADDR
// if p3 = 19 then
48974: LD_VAR 0 3
48978: PUSH
48979: LD_INT 19
48981: EQUAL
48982: IFFALSE 48992
// sTank := true ;
48984: LD_ADDR_EXP 49
48988: PUSH
48989: LD_INT 1
48991: ST_TO_ADDR
// if p3 = 20 then
48992: LD_VAR 0 3
48996: PUSH
48997: LD_INT 20
48999: EQUAL
49000: IFFALSE 49010
// sRemote := true ;
49002: LD_ADDR_EXP 50
49006: PUSH
49007: LD_INT 1
49009: ST_TO_ADDR
// if p3 = 21 then
49010: LD_VAR 0 3
49014: PUSH
49015: LD_INT 21
49017: EQUAL
49018: IFFALSE 49028
// sPowell := true ;
49020: LD_ADDR_EXP 51
49024: PUSH
49025: LD_INT 1
49027: ST_TO_ADDR
// if p3 = 22 then
49028: LD_VAR 0 3
49032: PUSH
49033: LD_INT 22
49035: EQUAL
49036: IFFALSE 49046
// sTeleport := true ;
49038: LD_ADDR_EXP 54
49042: PUSH
49043: LD_INT 1
49045: ST_TO_ADDR
// if p3 = 23 then
49046: LD_VAR 0 3
49050: PUSH
49051: LD_INT 23
49053: EQUAL
49054: IFFALSE 49064
// sOilTower := true ;
49056: LD_ADDR_EXP 56
49060: PUSH
49061: LD_INT 1
49063: ST_TO_ADDR
// if p3 = 24 then
49064: LD_VAR 0 3
49068: PUSH
49069: LD_INT 24
49071: EQUAL
49072: IFFALSE 49082
// sShovel := true ;
49074: LD_ADDR_EXP 57
49078: PUSH
49079: LD_INT 1
49081: ST_TO_ADDR
// if p3 = 25 then
49082: LD_VAR 0 3
49086: PUSH
49087: LD_INT 25
49089: EQUAL
49090: IFFALSE 49100
// sSheik := true ;
49092: LD_ADDR_EXP 58
49096: PUSH
49097: LD_INT 1
49099: ST_TO_ADDR
// if p3 = 26 then
49100: LD_VAR 0 3
49104: PUSH
49105: LD_INT 26
49107: EQUAL
49108: IFFALSE 49118
// sEarthquake := true ;
49110: LD_ADDR_EXP 60
49114: PUSH
49115: LD_INT 1
49117: ST_TO_ADDR
// if p3 = 27 then
49118: LD_VAR 0 3
49122: PUSH
49123: LD_INT 27
49125: EQUAL
49126: IFFALSE 49136
// sAI := true ;
49128: LD_ADDR_EXP 61
49132: PUSH
49133: LD_INT 1
49135: ST_TO_ADDR
// if p3 = 28 then
49136: LD_VAR 0 3
49140: PUSH
49141: LD_INT 28
49143: EQUAL
49144: IFFALSE 49154
// sCargo := true ;
49146: LD_ADDR_EXP 64
49150: PUSH
49151: LD_INT 1
49153: ST_TO_ADDR
// if p3 = 29 then
49154: LD_VAR 0 3
49158: PUSH
49159: LD_INT 29
49161: EQUAL
49162: IFFALSE 49172
// sDLaser := true ;
49164: LD_ADDR_EXP 65
49168: PUSH
49169: LD_INT 1
49171: ST_TO_ADDR
// if p3 = 30 then
49172: LD_VAR 0 3
49176: PUSH
49177: LD_INT 30
49179: EQUAL
49180: IFFALSE 49190
// sExchange := true ;
49182: LD_ADDR_EXP 66
49186: PUSH
49187: LD_INT 1
49189: ST_TO_ADDR
// if p3 = 31 then
49190: LD_VAR 0 3
49194: PUSH
49195: LD_INT 31
49197: EQUAL
49198: IFFALSE 49208
// sFac := true ;
49200: LD_ADDR_EXP 67
49204: PUSH
49205: LD_INT 1
49207: ST_TO_ADDR
// if p3 = 32 then
49208: LD_VAR 0 3
49212: PUSH
49213: LD_INT 32
49215: EQUAL
49216: IFFALSE 49226
// sPower := true ;
49218: LD_ADDR_EXP 68
49222: PUSH
49223: LD_INT 1
49225: ST_TO_ADDR
// if p3 = 33 then
49226: LD_VAR 0 3
49230: PUSH
49231: LD_INT 33
49233: EQUAL
49234: IFFALSE 49244
// sRandom := true ;
49236: LD_ADDR_EXP 69
49240: PUSH
49241: LD_INT 1
49243: ST_TO_ADDR
// if p3 = 34 then
49244: LD_VAR 0 3
49248: PUSH
49249: LD_INT 34
49251: EQUAL
49252: IFFALSE 49262
// sShield := true ;
49254: LD_ADDR_EXP 70
49258: PUSH
49259: LD_INT 1
49261: ST_TO_ADDR
// if p3 = 35 then
49262: LD_VAR 0 3
49266: PUSH
49267: LD_INT 35
49269: EQUAL
49270: IFFALSE 49280
// sTime := true ;
49272: LD_ADDR_EXP 71
49276: PUSH
49277: LD_INT 1
49279: ST_TO_ADDR
// if p3 = 36 then
49280: LD_VAR 0 3
49284: PUSH
49285: LD_INT 36
49287: EQUAL
49288: IFFALSE 49298
// sTools := true ;
49290: LD_ADDR_EXP 72
49294: PUSH
49295: LD_INT 1
49297: ST_TO_ADDR
// if p3 = 101 then
49298: LD_VAR 0 3
49302: PUSH
49303: LD_INT 101
49305: EQUAL
49306: IFFALSE 49316
// sSold := true ;
49308: LD_ADDR_EXP 37
49312: PUSH
49313: LD_INT 1
49315: ST_TO_ADDR
// if p3 = 102 then
49316: LD_VAR 0 3
49320: PUSH
49321: LD_INT 102
49323: EQUAL
49324: IFFALSE 49334
// sDiff := true ;
49326: LD_ADDR_EXP 38
49330: PUSH
49331: LD_INT 1
49333: ST_TO_ADDR
// if p3 = 103 then
49334: LD_VAR 0 3
49338: PUSH
49339: LD_INT 103
49341: EQUAL
49342: IFFALSE 49352
// sFog := true ;
49344: LD_ADDR_EXP 41
49348: PUSH
49349: LD_INT 1
49351: ST_TO_ADDR
// if p3 = 104 then
49352: LD_VAR 0 3
49356: PUSH
49357: LD_INT 104
49359: EQUAL
49360: IFFALSE 49370
// sReset := true ;
49362: LD_ADDR_EXP 42
49366: PUSH
49367: LD_INT 1
49369: ST_TO_ADDR
// if p3 = 105 then
49370: LD_VAR 0 3
49374: PUSH
49375: LD_INT 105
49377: EQUAL
49378: IFFALSE 49388
// sSun := true ;
49380: LD_ADDR_EXP 43
49384: PUSH
49385: LD_INT 1
49387: ST_TO_ADDR
// if p3 = 106 then
49388: LD_VAR 0 3
49392: PUSH
49393: LD_INT 106
49395: EQUAL
49396: IFFALSE 49406
// sTiger := true ;
49398: LD_ADDR_EXP 39
49402: PUSH
49403: LD_INT 1
49405: ST_TO_ADDR
// if p3 = 107 then
49406: LD_VAR 0 3
49410: PUSH
49411: LD_INT 107
49413: EQUAL
49414: IFFALSE 49424
// sBomb := true ;
49416: LD_ADDR_EXP 40
49420: PUSH
49421: LD_INT 1
49423: ST_TO_ADDR
// if p3 = 108 then
49424: LD_VAR 0 3
49428: PUSH
49429: LD_INT 108
49431: EQUAL
49432: IFFALSE 49442
// sWound := true ;
49434: LD_ADDR_EXP 48
49438: PUSH
49439: LD_INT 1
49441: ST_TO_ADDR
// if p3 = 109 then
49442: LD_VAR 0 3
49446: PUSH
49447: LD_INT 109
49449: EQUAL
49450: IFFALSE 49460
// sBetray := true ;
49452: LD_ADDR_EXP 52
49456: PUSH
49457: LD_INT 1
49459: ST_TO_ADDR
// if p3 = 110 then
49460: LD_VAR 0 3
49464: PUSH
49465: LD_INT 110
49467: EQUAL
49468: IFFALSE 49478
// sContamin := true ;
49470: LD_ADDR_EXP 53
49474: PUSH
49475: LD_INT 1
49477: ST_TO_ADDR
// if p3 = 111 then
49478: LD_VAR 0 3
49482: PUSH
49483: LD_INT 111
49485: EQUAL
49486: IFFALSE 49496
// sOil := true ;
49488: LD_ADDR_EXP 55
49492: PUSH
49493: LD_INT 1
49495: ST_TO_ADDR
// if p3 = 112 then
49496: LD_VAR 0 3
49500: PUSH
49501: LD_INT 112
49503: EQUAL
49504: IFFALSE 49514
// sStu := true ;
49506: LD_ADDR_EXP 59
49510: PUSH
49511: LD_INT 1
49513: ST_TO_ADDR
// if p3 = 113 then
49514: LD_VAR 0 3
49518: PUSH
49519: LD_INT 113
49521: EQUAL
49522: IFFALSE 49532
// sBazooka := true ;
49524: LD_ADDR_EXP 62
49528: PUSH
49529: LD_INT 1
49531: ST_TO_ADDR
// if p3 = 114 then
49532: LD_VAR 0 3
49536: PUSH
49537: LD_INT 114
49539: EQUAL
49540: IFFALSE 49550
// sMortar := true ;
49542: LD_ADDR_EXP 63
49546: PUSH
49547: LD_INT 1
49549: ST_TO_ADDR
// if p3 = 115 then
49550: LD_VAR 0 3
49554: PUSH
49555: LD_INT 115
49557: EQUAL
49558: IFFALSE 49568
// sRanger := true ;
49560: LD_ADDR_EXP 73
49564: PUSH
49565: LD_INT 1
49567: ST_TO_ADDR
// if p3 = 116 then
49568: LD_VAR 0 3
49572: PUSH
49573: LD_INT 116
49575: EQUAL
49576: IFFALSE 49586
// sComputer := true ;
49578: LD_ADDR_EXP 74
49582: PUSH
49583: LD_INT 1
49585: ST_TO_ADDR
// if p3 = 117 then
49586: LD_VAR 0 3
49590: PUSH
49591: LD_INT 117
49593: EQUAL
49594: IFFALSE 49604
// s30 := true ;
49596: LD_ADDR_EXP 75
49600: PUSH
49601: LD_INT 1
49603: ST_TO_ADDR
// if p3 = 118 then
49604: LD_VAR 0 3
49608: PUSH
49609: LD_INT 118
49611: EQUAL
49612: IFFALSE 49622
// s60 := true ;
49614: LD_ADDR_EXP 76
49618: PUSH
49619: LD_INT 1
49621: ST_TO_ADDR
// end ; if p2 = hack_mode then
49622: LD_VAR 0 2
49626: PUSH
49627: LD_INT 101
49629: EQUAL
49630: IFFALSE 49758
// begin case p3 of 1 :
49632: LD_VAR 0 3
49636: PUSH
49637: LD_INT 1
49639: DOUBLE
49640: EQUAL
49641: IFTRUE 49645
49643: GO 49652
49645: POP
// hHackUnlimitedResources ; 2 :
49646: CALL 61929 0 0
49650: GO 49758
49652: LD_INT 2
49654: DOUBLE
49655: EQUAL
49656: IFTRUE 49660
49658: GO 49667
49660: POP
// hHackSetLevel10 ; 3 :
49661: CALL 62062 0 0
49665: GO 49758
49667: LD_INT 3
49669: DOUBLE
49670: EQUAL
49671: IFTRUE 49675
49673: GO 49682
49675: POP
// hHackSetLevel10YourUnits ; 4 :
49676: CALL 62147 0 0
49680: GO 49758
49682: LD_INT 4
49684: DOUBLE
49685: EQUAL
49686: IFTRUE 49690
49688: GO 49697
49690: POP
// hHackInvincible ; 5 :
49691: CALL 62595 0 0
49695: GO 49758
49697: LD_INT 5
49699: DOUBLE
49700: EQUAL
49701: IFTRUE 49705
49703: GO 49712
49705: POP
// hHackInvisible ; 6 :
49706: CALL 62706 0 0
49710: GO 49758
49712: LD_INT 6
49714: DOUBLE
49715: EQUAL
49716: IFTRUE 49720
49718: GO 49727
49720: POP
// hHackChangeYourSide ; 7 :
49721: CALL 62763 0 0
49725: GO 49758
49727: LD_INT 7
49729: DOUBLE
49730: EQUAL
49731: IFTRUE 49735
49733: GO 49742
49735: POP
// hHackChangeUnitSide ; 8 :
49736: CALL 62805 0 0
49740: GO 49758
49742: LD_INT 8
49744: DOUBLE
49745: EQUAL
49746: IFTRUE 49750
49748: GO 49757
49750: POP
// hHackFog ; end ;
49751: CALL 62906 0 0
49755: GO 49758
49757: POP
// end ; if p2 = game_save_mode then
49758: LD_VAR 0 2
49762: PUSH
49763: LD_INT 102
49765: EQUAL
49766: IFFALSE 49831
// begin if p3 = 1 then
49768: LD_VAR 0 3
49772: PUSH
49773: LD_INT 1
49775: EQUAL
49776: IFFALSE 49788
// globalGameSaveCounter := p4 ;
49778: LD_ADDR_EXP 19
49782: PUSH
49783: LD_VAR 0 4
49787: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49788: LD_VAR 0 3
49792: PUSH
49793: LD_INT 2
49795: EQUAL
49796: PUSH
49797: LD_EXP 19
49801: AND
49802: IFFALSE 49821
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49804: LD_STRING setGameSaveCounter(
49806: PUSH
49807: LD_EXP 19
49811: STR
49812: PUSH
49813: LD_STRING )
49815: STR
49816: PPUSH
49817: CALL_OW 559
// display_strings := globalGameSaveCounter ;
49821: LD_ADDR_OWVAR 47
49825: PUSH
49826: LD_EXP 19
49830: ST_TO_ADDR
// end ; end ;
49831: LD_VAR 0 7
49835: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
49836: GO 49838
49838: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
49839: LD_STRING initStreamRollete();
49841: PPUSH
49842: CALL_OW 559
// InitStreamMode ;
49846: CALL 49858 0 0
// DefineStreamItems ( false ) ;
49850: LD_INT 0
49852: PPUSH
49853: CALL 50322 0 1
// end ;
49857: END
// function InitStreamMode ; begin
49858: LD_INT 0
49860: PPUSH
// streamModeActive := false ;
49861: LD_ADDR_EXP 20
49865: PUSH
49866: LD_INT 0
49868: ST_TO_ADDR
// normalCounter := 36 ;
49869: LD_ADDR_EXP 21
49873: PUSH
49874: LD_INT 36
49876: ST_TO_ADDR
// hardcoreCounter := 18 ;
49877: LD_ADDR_EXP 22
49881: PUSH
49882: LD_INT 18
49884: ST_TO_ADDR
// sRocket := false ;
49885: LD_ADDR_EXP 25
49889: PUSH
49890: LD_INT 0
49892: ST_TO_ADDR
// sSpeed := false ;
49893: LD_ADDR_EXP 24
49897: PUSH
49898: LD_INT 0
49900: ST_TO_ADDR
// sEngine := false ;
49901: LD_ADDR_EXP 26
49905: PUSH
49906: LD_INT 0
49908: ST_TO_ADDR
// sSpec := false ;
49909: LD_ADDR_EXP 23
49913: PUSH
49914: LD_INT 0
49916: ST_TO_ADDR
// sLevel := false ;
49917: LD_ADDR_EXP 27
49921: PUSH
49922: LD_INT 0
49924: ST_TO_ADDR
// sArmoury := false ;
49925: LD_ADDR_EXP 28
49929: PUSH
49930: LD_INT 0
49932: ST_TO_ADDR
// sRadar := false ;
49933: LD_ADDR_EXP 29
49937: PUSH
49938: LD_INT 0
49940: ST_TO_ADDR
// sBunker := false ;
49941: LD_ADDR_EXP 30
49945: PUSH
49946: LD_INT 0
49948: ST_TO_ADDR
// sHack := false ;
49949: LD_ADDR_EXP 31
49953: PUSH
49954: LD_INT 0
49956: ST_TO_ADDR
// sFire := false ;
49957: LD_ADDR_EXP 32
49961: PUSH
49962: LD_INT 0
49964: ST_TO_ADDR
// sRefresh := false ;
49965: LD_ADDR_EXP 33
49969: PUSH
49970: LD_INT 0
49972: ST_TO_ADDR
// sExp := false ;
49973: LD_ADDR_EXP 34
49977: PUSH
49978: LD_INT 0
49980: ST_TO_ADDR
// sDepot := false ;
49981: LD_ADDR_EXP 35
49985: PUSH
49986: LD_INT 0
49988: ST_TO_ADDR
// sFlag := false ;
49989: LD_ADDR_EXP 36
49993: PUSH
49994: LD_INT 0
49996: ST_TO_ADDR
// sKamikadze := false ;
49997: LD_ADDR_EXP 44
50001: PUSH
50002: LD_INT 0
50004: ST_TO_ADDR
// sTroll := false ;
50005: LD_ADDR_EXP 45
50009: PUSH
50010: LD_INT 0
50012: ST_TO_ADDR
// sSlow := false ;
50013: LD_ADDR_EXP 46
50017: PUSH
50018: LD_INT 0
50020: ST_TO_ADDR
// sLack := false ;
50021: LD_ADDR_EXP 47
50025: PUSH
50026: LD_INT 0
50028: ST_TO_ADDR
// sTank := false ;
50029: LD_ADDR_EXP 49
50033: PUSH
50034: LD_INT 0
50036: ST_TO_ADDR
// sRemote := false ;
50037: LD_ADDR_EXP 50
50041: PUSH
50042: LD_INT 0
50044: ST_TO_ADDR
// sPowell := false ;
50045: LD_ADDR_EXP 51
50049: PUSH
50050: LD_INT 0
50052: ST_TO_ADDR
// sTeleport := false ;
50053: LD_ADDR_EXP 54
50057: PUSH
50058: LD_INT 0
50060: ST_TO_ADDR
// sOilTower := false ;
50061: LD_ADDR_EXP 56
50065: PUSH
50066: LD_INT 0
50068: ST_TO_ADDR
// sShovel := false ;
50069: LD_ADDR_EXP 57
50073: PUSH
50074: LD_INT 0
50076: ST_TO_ADDR
// sSheik := false ;
50077: LD_ADDR_EXP 58
50081: PUSH
50082: LD_INT 0
50084: ST_TO_ADDR
// sEarthquake := false ;
50085: LD_ADDR_EXP 60
50089: PUSH
50090: LD_INT 0
50092: ST_TO_ADDR
// sAI := false ;
50093: LD_ADDR_EXP 61
50097: PUSH
50098: LD_INT 0
50100: ST_TO_ADDR
// sCargo := false ;
50101: LD_ADDR_EXP 64
50105: PUSH
50106: LD_INT 0
50108: ST_TO_ADDR
// sDLaser := false ;
50109: LD_ADDR_EXP 65
50113: PUSH
50114: LD_INT 0
50116: ST_TO_ADDR
// sExchange := false ;
50117: LD_ADDR_EXP 66
50121: PUSH
50122: LD_INT 0
50124: ST_TO_ADDR
// sFac := false ;
50125: LD_ADDR_EXP 67
50129: PUSH
50130: LD_INT 0
50132: ST_TO_ADDR
// sPower := false ;
50133: LD_ADDR_EXP 68
50137: PUSH
50138: LD_INT 0
50140: ST_TO_ADDR
// sRandom := false ;
50141: LD_ADDR_EXP 69
50145: PUSH
50146: LD_INT 0
50148: ST_TO_ADDR
// sShield := false ;
50149: LD_ADDR_EXP 70
50153: PUSH
50154: LD_INT 0
50156: ST_TO_ADDR
// sTime := false ;
50157: LD_ADDR_EXP 71
50161: PUSH
50162: LD_INT 0
50164: ST_TO_ADDR
// sTools := false ;
50165: LD_ADDR_EXP 72
50169: PUSH
50170: LD_INT 0
50172: ST_TO_ADDR
// sSold := false ;
50173: LD_ADDR_EXP 37
50177: PUSH
50178: LD_INT 0
50180: ST_TO_ADDR
// sDiff := false ;
50181: LD_ADDR_EXP 38
50185: PUSH
50186: LD_INT 0
50188: ST_TO_ADDR
// sFog := false ;
50189: LD_ADDR_EXP 41
50193: PUSH
50194: LD_INT 0
50196: ST_TO_ADDR
// sReset := false ;
50197: LD_ADDR_EXP 42
50201: PUSH
50202: LD_INT 0
50204: ST_TO_ADDR
// sSun := false ;
50205: LD_ADDR_EXP 43
50209: PUSH
50210: LD_INT 0
50212: ST_TO_ADDR
// sTiger := false ;
50213: LD_ADDR_EXP 39
50217: PUSH
50218: LD_INT 0
50220: ST_TO_ADDR
// sBomb := false ;
50221: LD_ADDR_EXP 40
50225: PUSH
50226: LD_INT 0
50228: ST_TO_ADDR
// sWound := false ;
50229: LD_ADDR_EXP 48
50233: PUSH
50234: LD_INT 0
50236: ST_TO_ADDR
// sBetray := false ;
50237: LD_ADDR_EXP 52
50241: PUSH
50242: LD_INT 0
50244: ST_TO_ADDR
// sContamin := false ;
50245: LD_ADDR_EXP 53
50249: PUSH
50250: LD_INT 0
50252: ST_TO_ADDR
// sOil := false ;
50253: LD_ADDR_EXP 55
50257: PUSH
50258: LD_INT 0
50260: ST_TO_ADDR
// sStu := false ;
50261: LD_ADDR_EXP 59
50265: PUSH
50266: LD_INT 0
50268: ST_TO_ADDR
// sBazooka := false ;
50269: LD_ADDR_EXP 62
50273: PUSH
50274: LD_INT 0
50276: ST_TO_ADDR
// sMortar := false ;
50277: LD_ADDR_EXP 63
50281: PUSH
50282: LD_INT 0
50284: ST_TO_ADDR
// sRanger := false ;
50285: LD_ADDR_EXP 73
50289: PUSH
50290: LD_INT 0
50292: ST_TO_ADDR
// sComputer := false ;
50293: LD_ADDR_EXP 74
50297: PUSH
50298: LD_INT 0
50300: ST_TO_ADDR
// s30 := false ;
50301: LD_ADDR_EXP 75
50305: PUSH
50306: LD_INT 0
50308: ST_TO_ADDR
// s60 := false ;
50309: LD_ADDR_EXP 76
50313: PUSH
50314: LD_INT 0
50316: ST_TO_ADDR
// end ;
50317: LD_VAR 0 1
50321: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50322: LD_INT 0
50324: PPUSH
50325: PPUSH
50326: PPUSH
50327: PPUSH
50328: PPUSH
50329: PPUSH
50330: PPUSH
// result := [ ] ;
50331: LD_ADDR_VAR 0 2
50335: PUSH
50336: EMPTY
50337: ST_TO_ADDR
// if campaign_id = 1 then
50338: LD_OWVAR 69
50342: PUSH
50343: LD_INT 1
50345: EQUAL
50346: IFFALSE 53512
// begin case mission_number of 1 :
50348: LD_OWVAR 70
50352: PUSH
50353: LD_INT 1
50355: DOUBLE
50356: EQUAL
50357: IFTRUE 50361
50359: GO 50437
50361: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
50362: LD_ADDR_VAR 0 2
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 4
50372: PUSH
50373: LD_INT 11
50375: PUSH
50376: LD_INT 12
50378: PUSH
50379: LD_INT 15
50381: PUSH
50382: LD_INT 16
50384: PUSH
50385: LD_INT 22
50387: PUSH
50388: LD_INT 23
50390: PUSH
50391: LD_INT 26
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 101
50407: PUSH
50408: LD_INT 102
50410: PUSH
50411: LD_INT 106
50413: PUSH
50414: LD_INT 116
50416: PUSH
50417: LD_INT 117
50419: PUSH
50420: LD_INT 118
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: ST_TO_ADDR
50435: GO 53510
50437: LD_INT 2
50439: DOUBLE
50440: EQUAL
50441: IFTRUE 50445
50443: GO 50529
50445: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
50446: LD_ADDR_VAR 0 2
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: LD_INT 4
50456: PUSH
50457: LD_INT 11
50459: PUSH
50460: LD_INT 12
50462: PUSH
50463: LD_INT 15
50465: PUSH
50466: LD_INT 16
50468: PUSH
50469: LD_INT 22
50471: PUSH
50472: LD_INT 23
50474: PUSH
50475: LD_INT 26
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 101
50491: PUSH
50492: LD_INT 102
50494: PUSH
50495: LD_INT 105
50497: PUSH
50498: LD_INT 106
50500: PUSH
50501: LD_INT 108
50503: PUSH
50504: LD_INT 116
50506: PUSH
50507: LD_INT 117
50509: PUSH
50510: LD_INT 118
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: ST_TO_ADDR
50527: GO 53510
50529: LD_INT 3
50531: DOUBLE
50532: EQUAL
50533: IFTRUE 50537
50535: GO 50625
50537: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50538: LD_ADDR_VAR 0 2
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 4
50548: PUSH
50549: LD_INT 5
50551: PUSH
50552: LD_INT 11
50554: PUSH
50555: LD_INT 12
50557: PUSH
50558: LD_INT 15
50560: PUSH
50561: LD_INT 16
50563: PUSH
50564: LD_INT 22
50566: PUSH
50567: LD_INT 26
50569: PUSH
50570: LD_INT 36
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 101
50587: PUSH
50588: LD_INT 102
50590: PUSH
50591: LD_INT 105
50593: PUSH
50594: LD_INT 106
50596: PUSH
50597: LD_INT 108
50599: PUSH
50600: LD_INT 116
50602: PUSH
50603: LD_INT 117
50605: PUSH
50606: LD_INT 118
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: ST_TO_ADDR
50623: GO 53510
50625: LD_INT 4
50627: DOUBLE
50628: EQUAL
50629: IFTRUE 50633
50631: GO 50729
50633: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50634: LD_ADDR_VAR 0 2
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: LD_INT 4
50644: PUSH
50645: LD_INT 5
50647: PUSH
50648: LD_INT 8
50650: PUSH
50651: LD_INT 11
50653: PUSH
50654: LD_INT 12
50656: PUSH
50657: LD_INT 15
50659: PUSH
50660: LD_INT 16
50662: PUSH
50663: LD_INT 22
50665: PUSH
50666: LD_INT 23
50668: PUSH
50669: LD_INT 26
50671: PUSH
50672: LD_INT 36
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 101
50691: PUSH
50692: LD_INT 102
50694: PUSH
50695: LD_INT 105
50697: PUSH
50698: LD_INT 106
50700: PUSH
50701: LD_INT 108
50703: PUSH
50704: LD_INT 116
50706: PUSH
50707: LD_INT 117
50709: PUSH
50710: LD_INT 118
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: ST_TO_ADDR
50727: GO 53510
50729: LD_INT 5
50731: DOUBLE
50732: EQUAL
50733: IFTRUE 50737
50735: GO 50849
50737: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50738: LD_ADDR_VAR 0 2
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 4
50748: PUSH
50749: LD_INT 5
50751: PUSH
50752: LD_INT 6
50754: PUSH
50755: LD_INT 8
50757: PUSH
50758: LD_INT 11
50760: PUSH
50761: LD_INT 12
50763: PUSH
50764: LD_INT 15
50766: PUSH
50767: LD_INT 16
50769: PUSH
50770: LD_INT 22
50772: PUSH
50773: LD_INT 23
50775: PUSH
50776: LD_INT 25
50778: PUSH
50779: LD_INT 26
50781: PUSH
50782: LD_INT 36
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 101
50803: PUSH
50804: LD_INT 102
50806: PUSH
50807: LD_INT 105
50809: PUSH
50810: LD_INT 106
50812: PUSH
50813: LD_INT 108
50815: PUSH
50816: LD_INT 109
50818: PUSH
50819: LD_INT 112
50821: PUSH
50822: LD_INT 116
50824: PUSH
50825: LD_INT 117
50827: PUSH
50828: LD_INT 118
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: ST_TO_ADDR
50847: GO 53510
50849: LD_INT 6
50851: DOUBLE
50852: EQUAL
50853: IFTRUE 50857
50855: GO 50989
50857: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50858: LD_ADDR_VAR 0 2
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 4
50868: PUSH
50869: LD_INT 5
50871: PUSH
50872: LD_INT 6
50874: PUSH
50875: LD_INT 8
50877: PUSH
50878: LD_INT 11
50880: PUSH
50881: LD_INT 12
50883: PUSH
50884: LD_INT 15
50886: PUSH
50887: LD_INT 16
50889: PUSH
50890: LD_INT 20
50892: PUSH
50893: LD_INT 21
50895: PUSH
50896: LD_INT 22
50898: PUSH
50899: LD_INT 23
50901: PUSH
50902: LD_INT 25
50904: PUSH
50905: LD_INT 26
50907: PUSH
50908: LD_INT 30
50910: PUSH
50911: LD_INT 31
50913: PUSH
50914: LD_INT 32
50916: PUSH
50917: LD_INT 36
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 101
50943: PUSH
50944: LD_INT 102
50946: PUSH
50947: LD_INT 105
50949: PUSH
50950: LD_INT 106
50952: PUSH
50953: LD_INT 108
50955: PUSH
50956: LD_INT 109
50958: PUSH
50959: LD_INT 112
50961: PUSH
50962: LD_INT 116
50964: PUSH
50965: LD_INT 117
50967: PUSH
50968: LD_INT 118
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: ST_TO_ADDR
50987: GO 53510
50989: LD_INT 7
50991: DOUBLE
50992: EQUAL
50993: IFTRUE 50997
50995: GO 51109
50997: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50998: LD_ADDR_VAR 0 2
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: LD_INT 4
51008: PUSH
51009: LD_INT 5
51011: PUSH
51012: LD_INT 7
51014: PUSH
51015: LD_INT 11
51017: PUSH
51018: LD_INT 12
51020: PUSH
51021: LD_INT 15
51023: PUSH
51024: LD_INT 16
51026: PUSH
51027: LD_INT 20
51029: PUSH
51030: LD_INT 21
51032: PUSH
51033: LD_INT 22
51035: PUSH
51036: LD_INT 23
51038: PUSH
51039: LD_INT 25
51041: PUSH
51042: LD_INT 26
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 101
51063: PUSH
51064: LD_INT 102
51066: PUSH
51067: LD_INT 103
51069: PUSH
51070: LD_INT 105
51072: PUSH
51073: LD_INT 106
51075: PUSH
51076: LD_INT 108
51078: PUSH
51079: LD_INT 112
51081: PUSH
51082: LD_INT 116
51084: PUSH
51085: LD_INT 117
51087: PUSH
51088: LD_INT 118
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: ST_TO_ADDR
51107: GO 53510
51109: LD_INT 8
51111: DOUBLE
51112: EQUAL
51113: IFTRUE 51117
51115: GO 51257
51117: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51118: LD_ADDR_VAR 0 2
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: LD_INT 4
51128: PUSH
51129: LD_INT 5
51131: PUSH
51132: LD_INT 6
51134: PUSH
51135: LD_INT 7
51137: PUSH
51138: LD_INT 8
51140: PUSH
51141: LD_INT 11
51143: PUSH
51144: LD_INT 12
51146: PUSH
51147: LD_INT 15
51149: PUSH
51150: LD_INT 16
51152: PUSH
51153: LD_INT 20
51155: PUSH
51156: LD_INT 21
51158: PUSH
51159: LD_INT 22
51161: PUSH
51162: LD_INT 23
51164: PUSH
51165: LD_INT 25
51167: PUSH
51168: LD_INT 26
51170: PUSH
51171: LD_INT 30
51173: PUSH
51174: LD_INT 31
51176: PUSH
51177: LD_INT 32
51179: PUSH
51180: LD_INT 36
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 101
51207: PUSH
51208: LD_INT 102
51210: PUSH
51211: LD_INT 103
51213: PUSH
51214: LD_INT 105
51216: PUSH
51217: LD_INT 106
51219: PUSH
51220: LD_INT 108
51222: PUSH
51223: LD_INT 109
51225: PUSH
51226: LD_INT 112
51228: PUSH
51229: LD_INT 116
51231: PUSH
51232: LD_INT 117
51234: PUSH
51235: LD_INT 118
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: ST_TO_ADDR
51255: GO 53510
51257: LD_INT 9
51259: DOUBLE
51260: EQUAL
51261: IFTRUE 51265
51263: GO 51413
51265: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51266: LD_ADDR_VAR 0 2
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: LD_INT 4
51276: PUSH
51277: LD_INT 5
51279: PUSH
51280: LD_INT 6
51282: PUSH
51283: LD_INT 7
51285: PUSH
51286: LD_INT 8
51288: PUSH
51289: LD_INT 11
51291: PUSH
51292: LD_INT 12
51294: PUSH
51295: LD_INT 15
51297: PUSH
51298: LD_INT 16
51300: PUSH
51301: LD_INT 20
51303: PUSH
51304: LD_INT 21
51306: PUSH
51307: LD_INT 22
51309: PUSH
51310: LD_INT 23
51312: PUSH
51313: LD_INT 25
51315: PUSH
51316: LD_INT 26
51318: PUSH
51319: LD_INT 28
51321: PUSH
51322: LD_INT 30
51324: PUSH
51325: LD_INT 31
51327: PUSH
51328: LD_INT 32
51330: PUSH
51331: LD_INT 36
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 101
51359: PUSH
51360: LD_INT 102
51362: PUSH
51363: LD_INT 103
51365: PUSH
51366: LD_INT 105
51368: PUSH
51369: LD_INT 106
51371: PUSH
51372: LD_INT 108
51374: PUSH
51375: LD_INT 109
51377: PUSH
51378: LD_INT 112
51380: PUSH
51381: LD_INT 114
51383: PUSH
51384: LD_INT 116
51386: PUSH
51387: LD_INT 117
51389: PUSH
51390: LD_INT 118
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: ST_TO_ADDR
51411: GO 53510
51413: LD_INT 10
51415: DOUBLE
51416: EQUAL
51417: IFTRUE 51421
51419: GO 51617
51421: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
51422: LD_ADDR_VAR 0 2
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 4
51432: PUSH
51433: LD_INT 5
51435: PUSH
51436: LD_INT 6
51438: PUSH
51439: LD_INT 7
51441: PUSH
51442: LD_INT 8
51444: PUSH
51445: LD_INT 9
51447: PUSH
51448: LD_INT 10
51450: PUSH
51451: LD_INT 11
51453: PUSH
51454: LD_INT 12
51456: PUSH
51457: LD_INT 13
51459: PUSH
51460: LD_INT 14
51462: PUSH
51463: LD_INT 15
51465: PUSH
51466: LD_INT 16
51468: PUSH
51469: LD_INT 17
51471: PUSH
51472: LD_INT 18
51474: PUSH
51475: LD_INT 19
51477: PUSH
51478: LD_INT 20
51480: PUSH
51481: LD_INT 21
51483: PUSH
51484: LD_INT 22
51486: PUSH
51487: LD_INT 23
51489: PUSH
51490: LD_INT 24
51492: PUSH
51493: LD_INT 25
51495: PUSH
51496: LD_INT 26
51498: PUSH
51499: LD_INT 28
51501: PUSH
51502: LD_INT 30
51504: PUSH
51505: LD_INT 31
51507: PUSH
51508: LD_INT 32
51510: PUSH
51511: LD_INT 36
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 101
51547: PUSH
51548: LD_INT 102
51550: PUSH
51551: LD_INT 103
51553: PUSH
51554: LD_INT 104
51556: PUSH
51557: LD_INT 105
51559: PUSH
51560: LD_INT 106
51562: PUSH
51563: LD_INT 107
51565: PUSH
51566: LD_INT 108
51568: PUSH
51569: LD_INT 109
51571: PUSH
51572: LD_INT 110
51574: PUSH
51575: LD_INT 111
51577: PUSH
51578: LD_INT 112
51580: PUSH
51581: LD_INT 114
51583: PUSH
51584: LD_INT 116
51586: PUSH
51587: LD_INT 117
51589: PUSH
51590: LD_INT 118
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: ST_TO_ADDR
51615: GO 53510
51617: LD_INT 11
51619: DOUBLE
51620: EQUAL
51621: IFTRUE 51625
51623: GO 51829
51625: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51626: LD_ADDR_VAR 0 2
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: LD_INT 4
51639: PUSH
51640: LD_INT 5
51642: PUSH
51643: LD_INT 6
51645: PUSH
51646: LD_INT 7
51648: PUSH
51649: LD_INT 8
51651: PUSH
51652: LD_INT 9
51654: PUSH
51655: LD_INT 10
51657: PUSH
51658: LD_INT 11
51660: PUSH
51661: LD_INT 12
51663: PUSH
51664: LD_INT 13
51666: PUSH
51667: LD_INT 14
51669: PUSH
51670: LD_INT 15
51672: PUSH
51673: LD_INT 16
51675: PUSH
51676: LD_INT 17
51678: PUSH
51679: LD_INT 18
51681: PUSH
51682: LD_INT 19
51684: PUSH
51685: LD_INT 20
51687: PUSH
51688: LD_INT 21
51690: PUSH
51691: LD_INT 22
51693: PUSH
51694: LD_INT 23
51696: PUSH
51697: LD_INT 24
51699: PUSH
51700: LD_INT 25
51702: PUSH
51703: LD_INT 26
51705: PUSH
51706: LD_INT 28
51708: PUSH
51709: LD_INT 30
51711: PUSH
51712: LD_INT 31
51714: PUSH
51715: LD_INT 32
51717: PUSH
51718: LD_INT 34
51720: PUSH
51721: LD_INT 36
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 101
51759: PUSH
51760: LD_INT 102
51762: PUSH
51763: LD_INT 103
51765: PUSH
51766: LD_INT 104
51768: PUSH
51769: LD_INT 105
51771: PUSH
51772: LD_INT 106
51774: PUSH
51775: LD_INT 107
51777: PUSH
51778: LD_INT 108
51780: PUSH
51781: LD_INT 109
51783: PUSH
51784: LD_INT 110
51786: PUSH
51787: LD_INT 111
51789: PUSH
51790: LD_INT 112
51792: PUSH
51793: LD_INT 114
51795: PUSH
51796: LD_INT 116
51798: PUSH
51799: LD_INT 117
51801: PUSH
51802: LD_INT 118
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: ST_TO_ADDR
51827: GO 53510
51829: LD_INT 12
51831: DOUBLE
51832: EQUAL
51833: IFTRUE 51837
51835: GO 52057
51837: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51838: LD_ADDR_VAR 0 2
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: LD_INT 3
51851: PUSH
51852: LD_INT 4
51854: PUSH
51855: LD_INT 5
51857: PUSH
51858: LD_INT 6
51860: PUSH
51861: LD_INT 7
51863: PUSH
51864: LD_INT 8
51866: PUSH
51867: LD_INT 9
51869: PUSH
51870: LD_INT 10
51872: PUSH
51873: LD_INT 11
51875: PUSH
51876: LD_INT 12
51878: PUSH
51879: LD_INT 13
51881: PUSH
51882: LD_INT 14
51884: PUSH
51885: LD_INT 15
51887: PUSH
51888: LD_INT 16
51890: PUSH
51891: LD_INT 17
51893: PUSH
51894: LD_INT 18
51896: PUSH
51897: LD_INT 19
51899: PUSH
51900: LD_INT 20
51902: PUSH
51903: LD_INT 21
51905: PUSH
51906: LD_INT 22
51908: PUSH
51909: LD_INT 23
51911: PUSH
51912: LD_INT 24
51914: PUSH
51915: LD_INT 25
51917: PUSH
51918: LD_INT 26
51920: PUSH
51921: LD_INT 27
51923: PUSH
51924: LD_INT 28
51926: PUSH
51927: LD_INT 30
51929: PUSH
51930: LD_INT 31
51932: PUSH
51933: LD_INT 32
51935: PUSH
51936: LD_INT 33
51938: PUSH
51939: LD_INT 34
51941: PUSH
51942: LD_INT 36
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 101
51983: PUSH
51984: LD_INT 102
51986: PUSH
51987: LD_INT 103
51989: PUSH
51990: LD_INT 104
51992: PUSH
51993: LD_INT 105
51995: PUSH
51996: LD_INT 106
51998: PUSH
51999: LD_INT 107
52001: PUSH
52002: LD_INT 108
52004: PUSH
52005: LD_INT 109
52007: PUSH
52008: LD_INT 110
52010: PUSH
52011: LD_INT 111
52013: PUSH
52014: LD_INT 112
52016: PUSH
52017: LD_INT 113
52019: PUSH
52020: LD_INT 114
52022: PUSH
52023: LD_INT 116
52025: PUSH
52026: LD_INT 117
52028: PUSH
52029: LD_INT 118
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: ST_TO_ADDR
52055: GO 53510
52057: LD_INT 13
52059: DOUBLE
52060: EQUAL
52061: IFTRUE 52065
52063: GO 52273
52065: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
52066: LD_ADDR_VAR 0 2
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: LD_INT 4
52082: PUSH
52083: LD_INT 5
52085: PUSH
52086: LD_INT 8
52088: PUSH
52089: LD_INT 9
52091: PUSH
52092: LD_INT 10
52094: PUSH
52095: LD_INT 11
52097: PUSH
52098: LD_INT 12
52100: PUSH
52101: LD_INT 14
52103: PUSH
52104: LD_INT 15
52106: PUSH
52107: LD_INT 16
52109: PUSH
52110: LD_INT 17
52112: PUSH
52113: LD_INT 18
52115: PUSH
52116: LD_INT 19
52118: PUSH
52119: LD_INT 20
52121: PUSH
52122: LD_INT 21
52124: PUSH
52125: LD_INT 22
52127: PUSH
52128: LD_INT 23
52130: PUSH
52131: LD_INT 24
52133: PUSH
52134: LD_INT 25
52136: PUSH
52137: LD_INT 26
52139: PUSH
52140: LD_INT 27
52142: PUSH
52143: LD_INT 28
52145: PUSH
52146: LD_INT 30
52148: PUSH
52149: LD_INT 31
52151: PUSH
52152: LD_INT 32
52154: PUSH
52155: LD_INT 33
52157: PUSH
52158: LD_INT 34
52160: PUSH
52161: LD_INT 36
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 101
52199: PUSH
52200: LD_INT 102
52202: PUSH
52203: LD_INT 103
52205: PUSH
52206: LD_INT 104
52208: PUSH
52209: LD_INT 105
52211: PUSH
52212: LD_INT 106
52214: PUSH
52215: LD_INT 107
52217: PUSH
52218: LD_INT 108
52220: PUSH
52221: LD_INT 109
52223: PUSH
52224: LD_INT 110
52226: PUSH
52227: LD_INT 111
52229: PUSH
52230: LD_INT 112
52232: PUSH
52233: LD_INT 113
52235: PUSH
52236: LD_INT 114
52238: PUSH
52239: LD_INT 116
52241: PUSH
52242: LD_INT 117
52244: PUSH
52245: LD_INT 118
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: ST_TO_ADDR
52271: GO 53510
52273: LD_INT 14
52275: DOUBLE
52276: EQUAL
52277: IFTRUE 52281
52279: GO 52505
52281: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52282: LD_ADDR_VAR 0 2
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: LD_INT 4
52298: PUSH
52299: LD_INT 5
52301: PUSH
52302: LD_INT 6
52304: PUSH
52305: LD_INT 7
52307: PUSH
52308: LD_INT 8
52310: PUSH
52311: LD_INT 9
52313: PUSH
52314: LD_INT 10
52316: PUSH
52317: LD_INT 11
52319: PUSH
52320: LD_INT 12
52322: PUSH
52323: LD_INT 13
52325: PUSH
52326: LD_INT 14
52328: PUSH
52329: LD_INT 15
52331: PUSH
52332: LD_INT 16
52334: PUSH
52335: LD_INT 17
52337: PUSH
52338: LD_INT 18
52340: PUSH
52341: LD_INT 19
52343: PUSH
52344: LD_INT 20
52346: PUSH
52347: LD_INT 21
52349: PUSH
52350: LD_INT 22
52352: PUSH
52353: LD_INT 23
52355: PUSH
52356: LD_INT 24
52358: PUSH
52359: LD_INT 25
52361: PUSH
52362: LD_INT 26
52364: PUSH
52365: LD_INT 27
52367: PUSH
52368: LD_INT 28
52370: PUSH
52371: LD_INT 29
52373: PUSH
52374: LD_INT 30
52376: PUSH
52377: LD_INT 31
52379: PUSH
52380: LD_INT 32
52382: PUSH
52383: LD_INT 33
52385: PUSH
52386: LD_INT 34
52388: PUSH
52389: LD_INT 36
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 101
52431: PUSH
52432: LD_INT 102
52434: PUSH
52435: LD_INT 103
52437: PUSH
52438: LD_INT 104
52440: PUSH
52441: LD_INT 105
52443: PUSH
52444: LD_INT 106
52446: PUSH
52447: LD_INT 107
52449: PUSH
52450: LD_INT 108
52452: PUSH
52453: LD_INT 109
52455: PUSH
52456: LD_INT 110
52458: PUSH
52459: LD_INT 111
52461: PUSH
52462: LD_INT 112
52464: PUSH
52465: LD_INT 113
52467: PUSH
52468: LD_INT 114
52470: PUSH
52471: LD_INT 116
52473: PUSH
52474: LD_INT 117
52476: PUSH
52477: LD_INT 118
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: ST_TO_ADDR
52503: GO 53510
52505: LD_INT 15
52507: DOUBLE
52508: EQUAL
52509: IFTRUE 52513
52511: GO 52737
52513: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52514: LD_ADDR_VAR 0 2
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 3
52527: PUSH
52528: LD_INT 4
52530: PUSH
52531: LD_INT 5
52533: PUSH
52534: LD_INT 6
52536: PUSH
52537: LD_INT 7
52539: PUSH
52540: LD_INT 8
52542: PUSH
52543: LD_INT 9
52545: PUSH
52546: LD_INT 10
52548: PUSH
52549: LD_INT 11
52551: PUSH
52552: LD_INT 12
52554: PUSH
52555: LD_INT 13
52557: PUSH
52558: LD_INT 14
52560: PUSH
52561: LD_INT 15
52563: PUSH
52564: LD_INT 16
52566: PUSH
52567: LD_INT 17
52569: PUSH
52570: LD_INT 18
52572: PUSH
52573: LD_INT 19
52575: PUSH
52576: LD_INT 20
52578: PUSH
52579: LD_INT 21
52581: PUSH
52582: LD_INT 22
52584: PUSH
52585: LD_INT 23
52587: PUSH
52588: LD_INT 24
52590: PUSH
52591: LD_INT 25
52593: PUSH
52594: LD_INT 26
52596: PUSH
52597: LD_INT 27
52599: PUSH
52600: LD_INT 28
52602: PUSH
52603: LD_INT 29
52605: PUSH
52606: LD_INT 30
52608: PUSH
52609: LD_INT 31
52611: PUSH
52612: LD_INT 32
52614: PUSH
52615: LD_INT 33
52617: PUSH
52618: LD_INT 34
52620: PUSH
52621: LD_INT 36
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 101
52663: PUSH
52664: LD_INT 102
52666: PUSH
52667: LD_INT 103
52669: PUSH
52670: LD_INT 104
52672: PUSH
52673: LD_INT 105
52675: PUSH
52676: LD_INT 106
52678: PUSH
52679: LD_INT 107
52681: PUSH
52682: LD_INT 108
52684: PUSH
52685: LD_INT 109
52687: PUSH
52688: LD_INT 110
52690: PUSH
52691: LD_INT 111
52693: PUSH
52694: LD_INT 112
52696: PUSH
52697: LD_INT 113
52699: PUSH
52700: LD_INT 114
52702: PUSH
52703: LD_INT 116
52705: PUSH
52706: LD_INT 117
52708: PUSH
52709: LD_INT 118
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: ST_TO_ADDR
52735: GO 53510
52737: LD_INT 16
52739: DOUBLE
52740: EQUAL
52741: IFTRUE 52745
52743: GO 52881
52745: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52746: LD_ADDR_VAR 0 2
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: LD_INT 4
52756: PUSH
52757: LD_INT 5
52759: PUSH
52760: LD_INT 7
52762: PUSH
52763: LD_INT 11
52765: PUSH
52766: LD_INT 12
52768: PUSH
52769: LD_INT 15
52771: PUSH
52772: LD_INT 16
52774: PUSH
52775: LD_INT 20
52777: PUSH
52778: LD_INT 21
52780: PUSH
52781: LD_INT 22
52783: PUSH
52784: LD_INT 23
52786: PUSH
52787: LD_INT 25
52789: PUSH
52790: LD_INT 26
52792: PUSH
52793: LD_INT 30
52795: PUSH
52796: LD_INT 31
52798: PUSH
52799: LD_INT 32
52801: PUSH
52802: LD_INT 33
52804: PUSH
52805: LD_INT 34
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 101
52831: PUSH
52832: LD_INT 102
52834: PUSH
52835: LD_INT 103
52837: PUSH
52838: LD_INT 106
52840: PUSH
52841: LD_INT 108
52843: PUSH
52844: LD_INT 112
52846: PUSH
52847: LD_INT 113
52849: PUSH
52850: LD_INT 114
52852: PUSH
52853: LD_INT 116
52855: PUSH
52856: LD_INT 117
52858: PUSH
52859: LD_INT 118
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: ST_TO_ADDR
52879: GO 53510
52881: LD_INT 17
52883: DOUBLE
52884: EQUAL
52885: IFTRUE 52889
52887: GO 53113
52889: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52890: LD_ADDR_VAR 0 2
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: LD_INT 4
52906: PUSH
52907: LD_INT 5
52909: PUSH
52910: LD_INT 6
52912: PUSH
52913: LD_INT 7
52915: PUSH
52916: LD_INT 8
52918: PUSH
52919: LD_INT 9
52921: PUSH
52922: LD_INT 10
52924: PUSH
52925: LD_INT 11
52927: PUSH
52928: LD_INT 12
52930: PUSH
52931: LD_INT 13
52933: PUSH
52934: LD_INT 14
52936: PUSH
52937: LD_INT 15
52939: PUSH
52940: LD_INT 16
52942: PUSH
52943: LD_INT 17
52945: PUSH
52946: LD_INT 18
52948: PUSH
52949: LD_INT 19
52951: PUSH
52952: LD_INT 20
52954: PUSH
52955: LD_INT 21
52957: PUSH
52958: LD_INT 22
52960: PUSH
52961: LD_INT 23
52963: PUSH
52964: LD_INT 24
52966: PUSH
52967: LD_INT 25
52969: PUSH
52970: LD_INT 26
52972: PUSH
52973: LD_INT 27
52975: PUSH
52976: LD_INT 28
52978: PUSH
52979: LD_INT 29
52981: PUSH
52982: LD_INT 30
52984: PUSH
52985: LD_INT 31
52987: PUSH
52988: LD_INT 32
52990: PUSH
52991: LD_INT 33
52993: PUSH
52994: LD_INT 34
52996: PUSH
52997: LD_INT 36
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 101
53039: PUSH
53040: LD_INT 102
53042: PUSH
53043: LD_INT 103
53045: PUSH
53046: LD_INT 104
53048: PUSH
53049: LD_INT 105
53051: PUSH
53052: LD_INT 106
53054: PUSH
53055: LD_INT 107
53057: PUSH
53058: LD_INT 108
53060: PUSH
53061: LD_INT 109
53063: PUSH
53064: LD_INT 110
53066: PUSH
53067: LD_INT 111
53069: PUSH
53070: LD_INT 112
53072: PUSH
53073: LD_INT 113
53075: PUSH
53076: LD_INT 114
53078: PUSH
53079: LD_INT 116
53081: PUSH
53082: LD_INT 117
53084: PUSH
53085: LD_INT 118
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: ST_TO_ADDR
53111: GO 53510
53113: LD_INT 18
53115: DOUBLE
53116: EQUAL
53117: IFTRUE 53121
53119: GO 53269
53121: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53122: LD_ADDR_VAR 0 2
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 4
53132: PUSH
53133: LD_INT 5
53135: PUSH
53136: LD_INT 7
53138: PUSH
53139: LD_INT 11
53141: PUSH
53142: LD_INT 12
53144: PUSH
53145: LD_INT 15
53147: PUSH
53148: LD_INT 16
53150: PUSH
53151: LD_INT 20
53153: PUSH
53154: LD_INT 21
53156: PUSH
53157: LD_INT 22
53159: PUSH
53160: LD_INT 23
53162: PUSH
53163: LD_INT 25
53165: PUSH
53166: LD_INT 26
53168: PUSH
53169: LD_INT 30
53171: PUSH
53172: LD_INT 31
53174: PUSH
53175: LD_INT 32
53177: PUSH
53178: LD_INT 33
53180: PUSH
53181: LD_INT 34
53183: PUSH
53184: LD_INT 35
53186: PUSH
53187: LD_INT 36
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 101
53215: PUSH
53216: LD_INT 102
53218: PUSH
53219: LD_INT 103
53221: PUSH
53222: LD_INT 106
53224: PUSH
53225: LD_INT 108
53227: PUSH
53228: LD_INT 112
53230: PUSH
53231: LD_INT 113
53233: PUSH
53234: LD_INT 114
53236: PUSH
53237: LD_INT 115
53239: PUSH
53240: LD_INT 116
53242: PUSH
53243: LD_INT 117
53245: PUSH
53246: LD_INT 118
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: ST_TO_ADDR
53267: GO 53510
53269: LD_INT 19
53271: DOUBLE
53272: EQUAL
53273: IFTRUE 53277
53275: GO 53509
53277: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53278: LD_ADDR_VAR 0 2
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: LD_INT 3
53291: PUSH
53292: LD_INT 4
53294: PUSH
53295: LD_INT 5
53297: PUSH
53298: LD_INT 6
53300: PUSH
53301: LD_INT 7
53303: PUSH
53304: LD_INT 8
53306: PUSH
53307: LD_INT 9
53309: PUSH
53310: LD_INT 10
53312: PUSH
53313: LD_INT 11
53315: PUSH
53316: LD_INT 12
53318: PUSH
53319: LD_INT 13
53321: PUSH
53322: LD_INT 14
53324: PUSH
53325: LD_INT 15
53327: PUSH
53328: LD_INT 16
53330: PUSH
53331: LD_INT 17
53333: PUSH
53334: LD_INT 18
53336: PUSH
53337: LD_INT 19
53339: PUSH
53340: LD_INT 20
53342: PUSH
53343: LD_INT 21
53345: PUSH
53346: LD_INT 22
53348: PUSH
53349: LD_INT 23
53351: PUSH
53352: LD_INT 24
53354: PUSH
53355: LD_INT 25
53357: PUSH
53358: LD_INT 26
53360: PUSH
53361: LD_INT 27
53363: PUSH
53364: LD_INT 28
53366: PUSH
53367: LD_INT 29
53369: PUSH
53370: LD_INT 30
53372: PUSH
53373: LD_INT 31
53375: PUSH
53376: LD_INT 32
53378: PUSH
53379: LD_INT 33
53381: PUSH
53382: LD_INT 34
53384: PUSH
53385: LD_INT 35
53387: PUSH
53388: LD_INT 36
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 101
53431: PUSH
53432: LD_INT 102
53434: PUSH
53435: LD_INT 103
53437: PUSH
53438: LD_INT 104
53440: PUSH
53441: LD_INT 105
53443: PUSH
53444: LD_INT 106
53446: PUSH
53447: LD_INT 107
53449: PUSH
53450: LD_INT 108
53452: PUSH
53453: LD_INT 109
53455: PUSH
53456: LD_INT 110
53458: PUSH
53459: LD_INT 111
53461: PUSH
53462: LD_INT 112
53464: PUSH
53465: LD_INT 113
53467: PUSH
53468: LD_INT 114
53470: PUSH
53471: LD_INT 115
53473: PUSH
53474: LD_INT 116
53476: PUSH
53477: LD_INT 117
53479: PUSH
53480: LD_INT 118
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: ST_TO_ADDR
53507: GO 53510
53509: POP
// end else
53510: GO 53741
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53512: LD_ADDR_VAR 0 2
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: LD_INT 4
53528: PUSH
53529: LD_INT 5
53531: PUSH
53532: LD_INT 6
53534: PUSH
53535: LD_INT 7
53537: PUSH
53538: LD_INT 8
53540: PUSH
53541: LD_INT 9
53543: PUSH
53544: LD_INT 10
53546: PUSH
53547: LD_INT 11
53549: PUSH
53550: LD_INT 12
53552: PUSH
53553: LD_INT 13
53555: PUSH
53556: LD_INT 14
53558: PUSH
53559: LD_INT 15
53561: PUSH
53562: LD_INT 16
53564: PUSH
53565: LD_INT 17
53567: PUSH
53568: LD_INT 18
53570: PUSH
53571: LD_INT 19
53573: PUSH
53574: LD_INT 20
53576: PUSH
53577: LD_INT 21
53579: PUSH
53580: LD_INT 22
53582: PUSH
53583: LD_INT 23
53585: PUSH
53586: LD_INT 24
53588: PUSH
53589: LD_INT 25
53591: PUSH
53592: LD_INT 26
53594: PUSH
53595: LD_INT 27
53597: PUSH
53598: LD_INT 28
53600: PUSH
53601: LD_INT 29
53603: PUSH
53604: LD_INT 30
53606: PUSH
53607: LD_INT 31
53609: PUSH
53610: LD_INT 32
53612: PUSH
53613: LD_INT 33
53615: PUSH
53616: LD_INT 34
53618: PUSH
53619: LD_INT 35
53621: PUSH
53622: LD_INT 36
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 101
53665: PUSH
53666: LD_INT 102
53668: PUSH
53669: LD_INT 103
53671: PUSH
53672: LD_INT 104
53674: PUSH
53675: LD_INT 105
53677: PUSH
53678: LD_INT 106
53680: PUSH
53681: LD_INT 107
53683: PUSH
53684: LD_INT 108
53686: PUSH
53687: LD_INT 109
53689: PUSH
53690: LD_INT 110
53692: PUSH
53693: LD_INT 111
53695: PUSH
53696: LD_INT 112
53698: PUSH
53699: LD_INT 113
53701: PUSH
53702: LD_INT 114
53704: PUSH
53705: LD_INT 115
53707: PUSH
53708: LD_INT 116
53710: PUSH
53711: LD_INT 117
53713: PUSH
53714: LD_INT 118
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: ST_TO_ADDR
// if result then
53741: LD_VAR 0 2
53745: IFFALSE 54531
// begin normal :=  ;
53747: LD_ADDR_VAR 0 5
53751: PUSH
53752: LD_STRING 
53754: ST_TO_ADDR
// hardcore :=  ;
53755: LD_ADDR_VAR 0 6
53759: PUSH
53760: LD_STRING 
53762: ST_TO_ADDR
// active :=  ;
53763: LD_ADDR_VAR 0 7
53767: PUSH
53768: LD_STRING 
53770: ST_TO_ADDR
// for i = 1 to normalCounter do
53771: LD_ADDR_VAR 0 8
53775: PUSH
53776: DOUBLE
53777: LD_INT 1
53779: DEC
53780: ST_TO_ADDR
53781: LD_EXP 21
53785: PUSH
53786: FOR_TO
53787: IFFALSE 53888
// begin tmp := 0 ;
53789: LD_ADDR_VAR 0 3
53793: PUSH
53794: LD_STRING 0
53796: ST_TO_ADDR
// if result [ 1 ] then
53797: LD_VAR 0 2
53801: PUSH
53802: LD_INT 1
53804: ARRAY
53805: IFFALSE 53870
// if result [ 1 ] [ 1 ] = i then
53807: LD_VAR 0 2
53811: PUSH
53812: LD_INT 1
53814: ARRAY
53815: PUSH
53816: LD_INT 1
53818: ARRAY
53819: PUSH
53820: LD_VAR 0 8
53824: EQUAL
53825: IFFALSE 53870
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53827: LD_ADDR_VAR 0 2
53831: PUSH
53832: LD_VAR 0 2
53836: PPUSH
53837: LD_INT 1
53839: PPUSH
53840: LD_VAR 0 2
53844: PUSH
53845: LD_INT 1
53847: ARRAY
53848: PPUSH
53849: LD_INT 1
53851: PPUSH
53852: CALL_OW 3
53856: PPUSH
53857: CALL_OW 1
53861: ST_TO_ADDR
// tmp := 1 ;
53862: LD_ADDR_VAR 0 3
53866: PUSH
53867: LD_STRING 1
53869: ST_TO_ADDR
// end ; normal := normal & tmp ;
53870: LD_ADDR_VAR 0 5
53874: PUSH
53875: LD_VAR 0 5
53879: PUSH
53880: LD_VAR 0 3
53884: STR
53885: ST_TO_ADDR
// end ;
53886: GO 53786
53888: POP
53889: POP
// for i = 1 to hardcoreCounter do
53890: LD_ADDR_VAR 0 8
53894: PUSH
53895: DOUBLE
53896: LD_INT 1
53898: DEC
53899: ST_TO_ADDR
53900: LD_EXP 22
53904: PUSH
53905: FOR_TO
53906: IFFALSE 54011
// begin tmp := 0 ;
53908: LD_ADDR_VAR 0 3
53912: PUSH
53913: LD_STRING 0
53915: ST_TO_ADDR
// if result [ 2 ] then
53916: LD_VAR 0 2
53920: PUSH
53921: LD_INT 2
53923: ARRAY
53924: IFFALSE 53993
// if result [ 2 ] [ 1 ] = 100 + i then
53926: LD_VAR 0 2
53930: PUSH
53931: LD_INT 2
53933: ARRAY
53934: PUSH
53935: LD_INT 1
53937: ARRAY
53938: PUSH
53939: LD_INT 100
53941: PUSH
53942: LD_VAR 0 8
53946: PLUS
53947: EQUAL
53948: IFFALSE 53993
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53950: LD_ADDR_VAR 0 2
53954: PUSH
53955: LD_VAR 0 2
53959: PPUSH
53960: LD_INT 2
53962: PPUSH
53963: LD_VAR 0 2
53967: PUSH
53968: LD_INT 2
53970: ARRAY
53971: PPUSH
53972: LD_INT 1
53974: PPUSH
53975: CALL_OW 3
53979: PPUSH
53980: CALL_OW 1
53984: ST_TO_ADDR
// tmp := 1 ;
53985: LD_ADDR_VAR 0 3
53989: PUSH
53990: LD_STRING 1
53992: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53993: LD_ADDR_VAR 0 6
53997: PUSH
53998: LD_VAR 0 6
54002: PUSH
54003: LD_VAR 0 3
54007: STR
54008: ST_TO_ADDR
// end ;
54009: GO 53905
54011: POP
54012: POP
// if isGameLoad then
54013: LD_VAR 0 1
54017: IFFALSE 54492
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
54019: LD_ADDR_VAR 0 4
54023: PUSH
54024: LD_EXP 25
54028: PUSH
54029: LD_EXP 24
54033: PUSH
54034: LD_EXP 26
54038: PUSH
54039: LD_EXP 23
54043: PUSH
54044: LD_EXP 27
54048: PUSH
54049: LD_EXP 28
54053: PUSH
54054: LD_EXP 29
54058: PUSH
54059: LD_EXP 30
54063: PUSH
54064: LD_EXP 31
54068: PUSH
54069: LD_EXP 32
54073: PUSH
54074: LD_EXP 33
54078: PUSH
54079: LD_EXP 34
54083: PUSH
54084: LD_EXP 35
54088: PUSH
54089: LD_EXP 36
54093: PUSH
54094: LD_EXP 44
54098: PUSH
54099: LD_EXP 45
54103: PUSH
54104: LD_EXP 46
54108: PUSH
54109: LD_EXP 47
54113: PUSH
54114: LD_EXP 49
54118: PUSH
54119: LD_EXP 50
54123: PUSH
54124: LD_EXP 51
54128: PUSH
54129: LD_EXP 54
54133: PUSH
54134: LD_EXP 56
54138: PUSH
54139: LD_EXP 57
54143: PUSH
54144: LD_EXP 58
54148: PUSH
54149: LD_EXP 60
54153: PUSH
54154: LD_EXP 61
54158: PUSH
54159: LD_EXP 64
54163: PUSH
54164: LD_EXP 65
54168: PUSH
54169: LD_EXP 66
54173: PUSH
54174: LD_EXP 67
54178: PUSH
54179: LD_EXP 68
54183: PUSH
54184: LD_EXP 69
54188: PUSH
54189: LD_EXP 70
54193: PUSH
54194: LD_EXP 71
54198: PUSH
54199: LD_EXP 72
54203: PUSH
54204: LD_EXP 37
54208: PUSH
54209: LD_EXP 38
54213: PUSH
54214: LD_EXP 41
54218: PUSH
54219: LD_EXP 42
54223: PUSH
54224: LD_EXP 43
54228: PUSH
54229: LD_EXP 39
54233: PUSH
54234: LD_EXP 40
54238: PUSH
54239: LD_EXP 48
54243: PUSH
54244: LD_EXP 52
54248: PUSH
54249: LD_EXP 53
54253: PUSH
54254: LD_EXP 55
54258: PUSH
54259: LD_EXP 59
54263: PUSH
54264: LD_EXP 62
54268: PUSH
54269: LD_EXP 63
54273: PUSH
54274: LD_EXP 73
54278: PUSH
54279: LD_EXP 74
54283: PUSH
54284: LD_EXP 75
54288: PUSH
54289: LD_EXP 76
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: ST_TO_ADDR
// tmp :=  ;
54350: LD_ADDR_VAR 0 3
54354: PUSH
54355: LD_STRING 
54357: ST_TO_ADDR
// for i = 1 to normalCounter do
54358: LD_ADDR_VAR 0 8
54362: PUSH
54363: DOUBLE
54364: LD_INT 1
54366: DEC
54367: ST_TO_ADDR
54368: LD_EXP 21
54372: PUSH
54373: FOR_TO
54374: IFFALSE 54410
// begin if flags [ i ] then
54376: LD_VAR 0 4
54380: PUSH
54381: LD_VAR 0 8
54385: ARRAY
54386: IFFALSE 54408
// tmp := tmp & i & ; ;
54388: LD_ADDR_VAR 0 3
54392: PUSH
54393: LD_VAR 0 3
54397: PUSH
54398: LD_VAR 0 8
54402: STR
54403: PUSH
54404: LD_STRING ;
54406: STR
54407: ST_TO_ADDR
// end ;
54408: GO 54373
54410: POP
54411: POP
// for i = 1 to hardcoreCounter do
54412: LD_ADDR_VAR 0 8
54416: PUSH
54417: DOUBLE
54418: LD_INT 1
54420: DEC
54421: ST_TO_ADDR
54422: LD_EXP 22
54426: PUSH
54427: FOR_TO
54428: IFFALSE 54474
// begin if flags [ normalCounter + i ] then
54430: LD_VAR 0 4
54434: PUSH
54435: LD_EXP 21
54439: PUSH
54440: LD_VAR 0 8
54444: PLUS
54445: ARRAY
54446: IFFALSE 54472
// tmp := tmp & ( 100 + i ) & ; ;
54448: LD_ADDR_VAR 0 3
54452: PUSH
54453: LD_VAR 0 3
54457: PUSH
54458: LD_INT 100
54460: PUSH
54461: LD_VAR 0 8
54465: PLUS
54466: STR
54467: PUSH
54468: LD_STRING ;
54470: STR
54471: ST_TO_ADDR
// end ;
54472: GO 54427
54474: POP
54475: POP
// if tmp then
54476: LD_VAR 0 3
54480: IFFALSE 54492
// active := tmp ;
54482: LD_ADDR_VAR 0 7
54486: PUSH
54487: LD_VAR 0 3
54491: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54492: LD_STRING getStreamItemsFromMission("
54494: PUSH
54495: LD_VAR 0 5
54499: STR
54500: PUSH
54501: LD_STRING ","
54503: STR
54504: PUSH
54505: LD_VAR 0 6
54509: STR
54510: PUSH
54511: LD_STRING ","
54513: STR
54514: PUSH
54515: LD_VAR 0 7
54519: STR
54520: PUSH
54521: LD_STRING ")
54523: STR
54524: PPUSH
54525: CALL_OW 559
// end else
54529: GO 54538
// ToLua ( getStreamItemsFromMission("","","") ) ;
54531: LD_STRING getStreamItemsFromMission("","","")
54533: PPUSH
54534: CALL_OW 559
// end ;
54538: LD_VAR 0 2
54542: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54543: LD_EXP 20
54547: PUSH
54548: LD_EXP 25
54552: AND
54553: IFFALSE 54677
54555: GO 54557
54557: DISABLE
54558: LD_INT 0
54560: PPUSH
54561: PPUSH
// begin enable ;
54562: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54563: LD_ADDR_VAR 0 2
54567: PUSH
54568: LD_INT 22
54570: PUSH
54571: LD_OWVAR 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: LD_INT 34
54585: PUSH
54586: LD_INT 7
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 34
54595: PUSH
54596: LD_INT 45
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 34
54605: PUSH
54606: LD_INT 28
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 34
54615: PUSH
54616: LD_INT 47
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PPUSH
54634: CALL_OW 69
54638: ST_TO_ADDR
// if not tmp then
54639: LD_VAR 0 2
54643: NOT
54644: IFFALSE 54648
// exit ;
54646: GO 54677
// for i in tmp do
54648: LD_ADDR_VAR 0 1
54652: PUSH
54653: LD_VAR 0 2
54657: PUSH
54658: FOR_IN
54659: IFFALSE 54675
// begin SetLives ( i , 0 ) ;
54661: LD_VAR 0 1
54665: PPUSH
54666: LD_INT 0
54668: PPUSH
54669: CALL_OW 234
// end ;
54673: GO 54658
54675: POP
54676: POP
// end ;
54677: PPOPN 2
54679: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54680: LD_EXP 20
54684: PUSH
54685: LD_EXP 26
54689: AND
54690: IFFALSE 54774
54692: GO 54694
54694: DISABLE
54695: LD_INT 0
54697: PPUSH
54698: PPUSH
// begin enable ;
54699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54700: LD_ADDR_VAR 0 2
54704: PUSH
54705: LD_INT 22
54707: PUSH
54708: LD_OWVAR 2
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 32
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PPUSH
54731: CALL_OW 69
54735: ST_TO_ADDR
// if not tmp then
54736: LD_VAR 0 2
54740: NOT
54741: IFFALSE 54745
// exit ;
54743: GO 54774
// for i in tmp do
54745: LD_ADDR_VAR 0 1
54749: PUSH
54750: LD_VAR 0 2
54754: PUSH
54755: FOR_IN
54756: IFFALSE 54772
// begin SetLives ( i , 0 ) ;
54758: LD_VAR 0 1
54762: PPUSH
54763: LD_INT 0
54765: PPUSH
54766: CALL_OW 234
// end ;
54770: GO 54755
54772: POP
54773: POP
// end ;
54774: PPOPN 2
54776: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54777: LD_EXP 20
54781: PUSH
54782: LD_EXP 23
54786: AND
54787: IFFALSE 54880
54789: GO 54791
54791: DISABLE
54792: LD_INT 0
54794: PPUSH
// begin enable ;
54795: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54796: LD_ADDR_VAR 0 1
54800: PUSH
54801: LD_INT 22
54803: PUSH
54804: LD_OWVAR 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 25
54818: PUSH
54819: LD_INT 5
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 25
54828: PUSH
54829: LD_INT 9
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 25
54838: PUSH
54839: LD_INT 8
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PPUSH
54856: CALL_OW 69
54860: PUSH
54861: FOR_IN
54862: IFFALSE 54878
// begin SetClass ( i , 1 ) ;
54864: LD_VAR 0 1
54868: PPUSH
54869: LD_INT 1
54871: PPUSH
54872: CALL_OW 336
// end ;
54876: GO 54861
54878: POP
54879: POP
// end ;
54880: PPOPN 1
54882: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54883: LD_EXP 20
54887: PUSH
54888: LD_EXP 24
54892: AND
54893: PUSH
54894: LD_OWVAR 65
54898: PUSH
54899: LD_INT 7
54901: LESS
54902: AND
54903: IFFALSE 54917
54905: GO 54907
54907: DISABLE
// begin enable ;
54908: ENABLE
// game_speed := 7 ;
54909: LD_ADDR_OWVAR 65
54913: PUSH
54914: LD_INT 7
54916: ST_TO_ADDR
// end ;
54917: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54918: LD_EXP 20
54922: PUSH
54923: LD_EXP 27
54927: AND
54928: IFFALSE 55130
54930: GO 54932
54932: DISABLE
54933: LD_INT 0
54935: PPUSH
54936: PPUSH
54937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54938: LD_ADDR_VAR 0 3
54942: PUSH
54943: LD_INT 81
54945: PUSH
54946: LD_OWVAR 2
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 21
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PPUSH
54969: CALL_OW 69
54973: ST_TO_ADDR
// if not tmp then
54974: LD_VAR 0 3
54978: NOT
54979: IFFALSE 54983
// exit ;
54981: GO 55130
// if tmp > 5 then
54983: LD_VAR 0 3
54987: PUSH
54988: LD_INT 5
54990: GREATER
54991: IFFALSE 55003
// k := 5 else
54993: LD_ADDR_VAR 0 2
54997: PUSH
54998: LD_INT 5
55000: ST_TO_ADDR
55001: GO 55013
// k := tmp ;
55003: LD_ADDR_VAR 0 2
55007: PUSH
55008: LD_VAR 0 3
55012: ST_TO_ADDR
// for i := 1 to k do
55013: LD_ADDR_VAR 0 1
55017: PUSH
55018: DOUBLE
55019: LD_INT 1
55021: DEC
55022: ST_TO_ADDR
55023: LD_VAR 0 2
55027: PUSH
55028: FOR_TO
55029: IFFALSE 55128
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
55031: LD_VAR 0 3
55035: PUSH
55036: LD_VAR 0 1
55040: ARRAY
55041: PPUSH
55042: LD_VAR 0 1
55046: PUSH
55047: LD_INT 4
55049: MOD
55050: PUSH
55051: LD_INT 1
55053: PLUS
55054: PPUSH
55055: CALL_OW 259
55059: PUSH
55060: LD_INT 10
55062: LESS
55063: IFFALSE 55126
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55065: LD_VAR 0 3
55069: PUSH
55070: LD_VAR 0 1
55074: ARRAY
55075: PPUSH
55076: LD_VAR 0 1
55080: PUSH
55081: LD_INT 4
55083: MOD
55084: PUSH
55085: LD_INT 1
55087: PLUS
55088: PPUSH
55089: LD_VAR 0 3
55093: PUSH
55094: LD_VAR 0 1
55098: ARRAY
55099: PPUSH
55100: LD_VAR 0 1
55104: PUSH
55105: LD_INT 4
55107: MOD
55108: PUSH
55109: LD_INT 1
55111: PLUS
55112: PPUSH
55113: CALL_OW 259
55117: PUSH
55118: LD_INT 1
55120: PLUS
55121: PPUSH
55122: CALL_OW 237
55126: GO 55028
55128: POP
55129: POP
// end ;
55130: PPOPN 3
55132: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55133: LD_EXP 20
55137: PUSH
55138: LD_EXP 28
55142: AND
55143: IFFALSE 55163
55145: GO 55147
55147: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55148: LD_INT 4
55150: PPUSH
55151: LD_OWVAR 2
55155: PPUSH
55156: LD_INT 0
55158: PPUSH
55159: CALL_OW 324
55163: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55164: LD_EXP 20
55168: PUSH
55169: LD_EXP 57
55173: AND
55174: IFFALSE 55194
55176: GO 55178
55178: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55179: LD_INT 19
55181: PPUSH
55182: LD_OWVAR 2
55186: PPUSH
55187: LD_INT 0
55189: PPUSH
55190: CALL_OW 324
55194: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55195: LD_EXP 20
55199: PUSH
55200: LD_EXP 29
55204: AND
55205: IFFALSE 55307
55207: GO 55209
55209: DISABLE
55210: LD_INT 0
55212: PPUSH
55213: PPUSH
// begin enable ;
55214: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55215: LD_ADDR_VAR 0 2
55219: PUSH
55220: LD_INT 22
55222: PUSH
55223: LD_OWVAR 2
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: LD_INT 34
55237: PUSH
55238: LD_INT 11
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 34
55247: PUSH
55248: LD_INT 30
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: LIST
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PPUSH
55264: CALL_OW 69
55268: ST_TO_ADDR
// if not tmp then
55269: LD_VAR 0 2
55273: NOT
55274: IFFALSE 55278
// exit ;
55276: GO 55307
// for i in tmp do
55278: LD_ADDR_VAR 0 1
55282: PUSH
55283: LD_VAR 0 2
55287: PUSH
55288: FOR_IN
55289: IFFALSE 55305
// begin SetLives ( i , 0 ) ;
55291: LD_VAR 0 1
55295: PPUSH
55296: LD_INT 0
55298: PPUSH
55299: CALL_OW 234
// end ;
55303: GO 55288
55305: POP
55306: POP
// end ;
55307: PPOPN 2
55309: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55310: LD_EXP 20
55314: PUSH
55315: LD_EXP 30
55319: AND
55320: IFFALSE 55340
55322: GO 55324
55324: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
55325: LD_INT 32
55327: PPUSH
55328: LD_OWVAR 2
55332: PPUSH
55333: LD_INT 0
55335: PPUSH
55336: CALL_OW 324
55340: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
55341: LD_EXP 20
55345: PUSH
55346: LD_EXP 31
55350: AND
55351: IFFALSE 55532
55353: GO 55355
55355: DISABLE
55356: LD_INT 0
55358: PPUSH
55359: PPUSH
55360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
55361: LD_ADDR_VAR 0 2
55365: PUSH
55366: LD_INT 22
55368: PUSH
55369: LD_OWVAR 2
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 33
55380: PUSH
55381: LD_INT 3
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PPUSH
55392: CALL_OW 69
55396: ST_TO_ADDR
// if not tmp then
55397: LD_VAR 0 2
55401: NOT
55402: IFFALSE 55406
// exit ;
55404: GO 55532
// side := 0 ;
55406: LD_ADDR_VAR 0 3
55410: PUSH
55411: LD_INT 0
55413: ST_TO_ADDR
// for i := 1 to 8 do
55414: LD_ADDR_VAR 0 1
55418: PUSH
55419: DOUBLE
55420: LD_INT 1
55422: DEC
55423: ST_TO_ADDR
55424: LD_INT 8
55426: PUSH
55427: FOR_TO
55428: IFFALSE 55476
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
55430: LD_OWVAR 2
55434: PUSH
55435: LD_VAR 0 1
55439: NONEQUAL
55440: PUSH
55441: LD_OWVAR 2
55445: PPUSH
55446: LD_VAR 0 1
55450: PPUSH
55451: CALL_OW 81
55455: PUSH
55456: LD_INT 2
55458: EQUAL
55459: AND
55460: IFFALSE 55474
// begin side := i ;
55462: LD_ADDR_VAR 0 3
55466: PUSH
55467: LD_VAR 0 1
55471: ST_TO_ADDR
// break ;
55472: GO 55476
// end ;
55474: GO 55427
55476: POP
55477: POP
// if not side then
55478: LD_VAR 0 3
55482: NOT
55483: IFFALSE 55487
// exit ;
55485: GO 55532
// for i := 1 to tmp do
55487: LD_ADDR_VAR 0 1
55491: PUSH
55492: DOUBLE
55493: LD_INT 1
55495: DEC
55496: ST_TO_ADDR
55497: LD_VAR 0 2
55501: PUSH
55502: FOR_TO
55503: IFFALSE 55530
// if Prob ( 60 ) then
55505: LD_INT 60
55507: PPUSH
55508: CALL_OW 13
55512: IFFALSE 55528
// SetSide ( i , side ) ;
55514: LD_VAR 0 1
55518: PPUSH
55519: LD_VAR 0 3
55523: PPUSH
55524: CALL_OW 235
55528: GO 55502
55530: POP
55531: POP
// end ;
55532: PPOPN 3
55534: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55535: LD_EXP 20
55539: PUSH
55540: LD_EXP 33
55544: AND
55545: IFFALSE 55664
55547: GO 55549
55549: DISABLE
55550: LD_INT 0
55552: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55553: LD_ADDR_VAR 0 1
55557: PUSH
55558: LD_INT 22
55560: PUSH
55561: LD_OWVAR 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 21
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 3
55582: PUSH
55583: LD_INT 23
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: PPUSH
55602: CALL_OW 69
55606: PUSH
55607: FOR_IN
55608: IFFALSE 55662
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55610: LD_VAR 0 1
55614: PPUSH
55615: CALL_OW 257
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: LD_INT 4
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: IN
55638: IFFALSE 55660
// SetClass ( un , rand ( 1 , 4 ) ) ;
55640: LD_VAR 0 1
55644: PPUSH
55645: LD_INT 1
55647: PPUSH
55648: LD_INT 4
55650: PPUSH
55651: CALL_OW 12
55655: PPUSH
55656: CALL_OW 336
55660: GO 55607
55662: POP
55663: POP
// end ;
55664: PPOPN 1
55666: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55667: LD_EXP 20
55671: PUSH
55672: LD_EXP 32
55676: AND
55677: IFFALSE 55756
55679: GO 55681
55681: DISABLE
55682: LD_INT 0
55684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55685: LD_ADDR_VAR 0 1
55689: PUSH
55690: LD_INT 22
55692: PUSH
55693: LD_OWVAR 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 21
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PPUSH
55716: CALL_OW 69
55720: ST_TO_ADDR
// if not tmp then
55721: LD_VAR 0 1
55725: NOT
55726: IFFALSE 55730
// exit ;
55728: GO 55756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55730: LD_VAR 0 1
55734: PUSH
55735: LD_INT 1
55737: PPUSH
55738: LD_VAR 0 1
55742: PPUSH
55743: CALL_OW 12
55747: ARRAY
55748: PPUSH
55749: LD_INT 100
55751: PPUSH
55752: CALL_OW 234
// end ;
55756: PPOPN 1
55758: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55759: LD_EXP 20
55763: PUSH
55764: LD_EXP 34
55768: AND
55769: IFFALSE 55867
55771: GO 55773
55773: DISABLE
55774: LD_INT 0
55776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55777: LD_ADDR_VAR 0 1
55781: PUSH
55782: LD_INT 22
55784: PUSH
55785: LD_OWVAR 2
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 21
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PPUSH
55808: CALL_OW 69
55812: ST_TO_ADDR
// if not tmp then
55813: LD_VAR 0 1
55817: NOT
55818: IFFALSE 55822
// exit ;
55820: GO 55867
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55822: LD_VAR 0 1
55826: PUSH
55827: LD_INT 1
55829: PPUSH
55830: LD_VAR 0 1
55834: PPUSH
55835: CALL_OW 12
55839: ARRAY
55840: PPUSH
55841: LD_INT 1
55843: PPUSH
55844: LD_INT 4
55846: PPUSH
55847: CALL_OW 12
55851: PPUSH
55852: LD_INT 3000
55854: PPUSH
55855: LD_INT 9000
55857: PPUSH
55858: CALL_OW 12
55862: PPUSH
55863: CALL_OW 492
// end ;
55867: PPOPN 1
55869: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55870: LD_EXP 20
55874: PUSH
55875: LD_EXP 35
55879: AND
55880: IFFALSE 55900
55882: GO 55884
55884: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55885: LD_INT 1
55887: PPUSH
55888: LD_OWVAR 2
55892: PPUSH
55893: LD_INT 0
55895: PPUSH
55896: CALL_OW 324
55900: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55901: LD_EXP 20
55905: PUSH
55906: LD_EXP 36
55910: AND
55911: IFFALSE 55994
55913: GO 55915
55915: DISABLE
55916: LD_INT 0
55918: PPUSH
55919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55920: LD_ADDR_VAR 0 2
55924: PUSH
55925: LD_INT 22
55927: PUSH
55928: LD_OWVAR 2
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 21
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PPUSH
55951: CALL_OW 69
55955: ST_TO_ADDR
// if not tmp then
55956: LD_VAR 0 2
55960: NOT
55961: IFFALSE 55965
// exit ;
55963: GO 55994
// for i in tmp do
55965: LD_ADDR_VAR 0 1
55969: PUSH
55970: LD_VAR 0 2
55974: PUSH
55975: FOR_IN
55976: IFFALSE 55992
// SetBLevel ( i , 10 ) ;
55978: LD_VAR 0 1
55982: PPUSH
55983: LD_INT 10
55985: PPUSH
55986: CALL_OW 241
55990: GO 55975
55992: POP
55993: POP
// end ;
55994: PPOPN 2
55996: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55997: LD_EXP 20
56001: PUSH
56002: LD_EXP 37
56006: AND
56007: IFFALSE 56118
56009: GO 56011
56011: DISABLE
56012: LD_INT 0
56014: PPUSH
56015: PPUSH
56016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56017: LD_ADDR_VAR 0 3
56021: PUSH
56022: LD_INT 22
56024: PUSH
56025: LD_OWVAR 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 25
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PPUSH
56048: CALL_OW 69
56052: ST_TO_ADDR
// if not tmp then
56053: LD_VAR 0 3
56057: NOT
56058: IFFALSE 56062
// exit ;
56060: GO 56118
// un := tmp [ rand ( 1 , tmp ) ] ;
56062: LD_ADDR_VAR 0 2
56066: PUSH
56067: LD_VAR 0 3
56071: PUSH
56072: LD_INT 1
56074: PPUSH
56075: LD_VAR 0 3
56079: PPUSH
56080: CALL_OW 12
56084: ARRAY
56085: ST_TO_ADDR
// if Crawls ( un ) then
56086: LD_VAR 0 2
56090: PPUSH
56091: CALL_OW 318
56095: IFFALSE 56106
// ComWalk ( un ) ;
56097: LD_VAR 0 2
56101: PPUSH
56102: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56106: LD_VAR 0 2
56110: PPUSH
56111: LD_INT 5
56113: PPUSH
56114: CALL_OW 336
// end ;
56118: PPOPN 3
56120: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56121: LD_EXP 20
56125: PUSH
56126: LD_EXP 38
56130: AND
56131: PUSH
56132: LD_OWVAR 67
56136: PUSH
56137: LD_INT 4
56139: LESS
56140: AND
56141: IFFALSE 56160
56143: GO 56145
56145: DISABLE
// begin Difficulty := Difficulty + 1 ;
56146: LD_ADDR_OWVAR 67
56150: PUSH
56151: LD_OWVAR 67
56155: PUSH
56156: LD_INT 1
56158: PLUS
56159: ST_TO_ADDR
// end ;
56160: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56161: LD_EXP 20
56165: PUSH
56166: LD_EXP 39
56170: AND
56171: IFFALSE 56274
56173: GO 56175
56175: DISABLE
56176: LD_INT 0
56178: PPUSH
// begin for i := 1 to 5 do
56179: LD_ADDR_VAR 0 1
56183: PUSH
56184: DOUBLE
56185: LD_INT 1
56187: DEC
56188: ST_TO_ADDR
56189: LD_INT 5
56191: PUSH
56192: FOR_TO
56193: IFFALSE 56272
// begin uc_nation := nation_nature ;
56195: LD_ADDR_OWVAR 21
56199: PUSH
56200: LD_INT 0
56202: ST_TO_ADDR
// uc_side := 0 ;
56203: LD_ADDR_OWVAR 20
56207: PUSH
56208: LD_INT 0
56210: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56211: LD_ADDR_OWVAR 29
56215: PUSH
56216: LD_INT 12
56218: PUSH
56219: LD_INT 12
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// hc_agressivity := 20 ;
56226: LD_ADDR_OWVAR 35
56230: PUSH
56231: LD_INT 20
56233: ST_TO_ADDR
// hc_class := class_tiger ;
56234: LD_ADDR_OWVAR 28
56238: PUSH
56239: LD_INT 14
56241: ST_TO_ADDR
// hc_gallery :=  ;
56242: LD_ADDR_OWVAR 33
56246: PUSH
56247: LD_STRING 
56249: ST_TO_ADDR
// hc_name :=  ;
56250: LD_ADDR_OWVAR 26
56254: PUSH
56255: LD_STRING 
56257: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56258: CALL_OW 44
56262: PPUSH
56263: LD_INT 0
56265: PPUSH
56266: CALL_OW 51
// end ;
56270: GO 56192
56272: POP
56273: POP
// end ;
56274: PPOPN 1
56276: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56277: LD_EXP 20
56281: PUSH
56282: LD_EXP 40
56286: AND
56287: IFFALSE 56296
56289: GO 56291
56291: DISABLE
// StreamSibBomb ;
56292: CALL 56297 0 0
56296: END
// export function StreamSibBomb ; var i , x , y ; begin
56297: LD_INT 0
56299: PPUSH
56300: PPUSH
56301: PPUSH
56302: PPUSH
// result := false ;
56303: LD_ADDR_VAR 0 1
56307: PUSH
56308: LD_INT 0
56310: ST_TO_ADDR
// for i := 1 to 16 do
56311: LD_ADDR_VAR 0 2
56315: PUSH
56316: DOUBLE
56317: LD_INT 1
56319: DEC
56320: ST_TO_ADDR
56321: LD_INT 16
56323: PUSH
56324: FOR_TO
56325: IFFALSE 56524
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56327: LD_ADDR_VAR 0 3
56331: PUSH
56332: LD_INT 10
56334: PUSH
56335: LD_INT 20
56337: PUSH
56338: LD_INT 30
56340: PUSH
56341: LD_INT 40
56343: PUSH
56344: LD_INT 50
56346: PUSH
56347: LD_INT 60
56349: PUSH
56350: LD_INT 70
56352: PUSH
56353: LD_INT 80
56355: PUSH
56356: LD_INT 90
56358: PUSH
56359: LD_INT 100
56361: PUSH
56362: LD_INT 110
56364: PUSH
56365: LD_INT 120
56367: PUSH
56368: LD_INT 130
56370: PUSH
56371: LD_INT 140
56373: PUSH
56374: LD_INT 150
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PPUSH
56397: LD_INT 15
56399: PPUSH
56400: CALL_OW 12
56404: ARRAY
56405: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56406: LD_ADDR_VAR 0 4
56410: PUSH
56411: LD_INT 10
56413: PUSH
56414: LD_INT 20
56416: PUSH
56417: LD_INT 30
56419: PUSH
56420: LD_INT 40
56422: PUSH
56423: LD_INT 50
56425: PUSH
56426: LD_INT 60
56428: PUSH
56429: LD_INT 70
56431: PUSH
56432: LD_INT 80
56434: PUSH
56435: LD_INT 90
56437: PUSH
56438: LD_INT 100
56440: PUSH
56441: LD_INT 110
56443: PUSH
56444: LD_INT 120
56446: PUSH
56447: LD_INT 130
56449: PUSH
56450: LD_INT 140
56452: PUSH
56453: LD_INT 150
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PPUSH
56476: LD_INT 15
56478: PPUSH
56479: CALL_OW 12
56483: ARRAY
56484: ST_TO_ADDR
// if ValidHex ( x , y ) then
56485: LD_VAR 0 3
56489: PPUSH
56490: LD_VAR 0 4
56494: PPUSH
56495: CALL_OW 488
56499: IFFALSE 56522
// begin result := [ x , y ] ;
56501: LD_ADDR_VAR 0 1
56505: PUSH
56506: LD_VAR 0 3
56510: PUSH
56511: LD_VAR 0 4
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: ST_TO_ADDR
// break ;
56520: GO 56524
// end ; end ;
56522: GO 56324
56524: POP
56525: POP
// if result then
56526: LD_VAR 0 1
56530: IFFALSE 56590
// begin ToLua ( playSibBomb() ) ;
56532: LD_STRING playSibBomb()
56534: PPUSH
56535: CALL_OW 559
// wait ( 0 0$14 ) ;
56539: LD_INT 490
56541: PPUSH
56542: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56546: LD_VAR 0 1
56550: PUSH
56551: LD_INT 1
56553: ARRAY
56554: PPUSH
56555: LD_VAR 0 1
56559: PUSH
56560: LD_INT 2
56562: ARRAY
56563: PPUSH
56564: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56568: LD_VAR 0 1
56572: PUSH
56573: LD_INT 1
56575: ARRAY
56576: PPUSH
56577: LD_VAR 0 1
56581: PUSH
56582: LD_INT 2
56584: ARRAY
56585: PPUSH
56586: CALL_OW 429
// end ; end ;
56590: LD_VAR 0 1
56594: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56595: LD_EXP 20
56599: PUSH
56600: LD_EXP 42
56604: AND
56605: IFFALSE 56617
56607: GO 56609
56609: DISABLE
// YouLost (  ) ;
56610: LD_STRING 
56612: PPUSH
56613: CALL_OW 104
56617: END
// every 0 0$1 trigger StreamModeActive and sFog do
56618: LD_EXP 20
56622: PUSH
56623: LD_EXP 41
56627: AND
56628: IFFALSE 56642
56630: GO 56632
56632: DISABLE
// FogOff ( your_side ) ;
56633: LD_OWVAR 2
56637: PPUSH
56638: CALL_OW 344
56642: END
// every 0 0$1 trigger StreamModeActive and sSun do
56643: LD_EXP 20
56647: PUSH
56648: LD_EXP 43
56652: AND
56653: IFFALSE 56681
56655: GO 56657
56657: DISABLE
// begin solar_recharge_percent := 0 ;
56658: LD_ADDR_OWVAR 79
56662: PUSH
56663: LD_INT 0
56665: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56666: LD_INT 10500
56668: PPUSH
56669: CALL_OW 67
// solar_recharge_percent := 100 ;
56673: LD_ADDR_OWVAR 79
56677: PUSH
56678: LD_INT 100
56680: ST_TO_ADDR
// end ;
56681: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56682: LD_EXP 20
56686: PUSH
56687: LD_EXP 44
56691: AND
56692: IFFALSE 56931
56694: GO 56696
56696: DISABLE
56697: LD_INT 0
56699: PPUSH
56700: PPUSH
56701: PPUSH
// begin tmp := [ ] ;
56702: LD_ADDR_VAR 0 3
56706: PUSH
56707: EMPTY
56708: ST_TO_ADDR
// for i := 1 to 6 do
56709: LD_ADDR_VAR 0 1
56713: PUSH
56714: DOUBLE
56715: LD_INT 1
56717: DEC
56718: ST_TO_ADDR
56719: LD_INT 6
56721: PUSH
56722: FOR_TO
56723: IFFALSE 56828
// begin uc_nation := nation_nature ;
56725: LD_ADDR_OWVAR 21
56729: PUSH
56730: LD_INT 0
56732: ST_TO_ADDR
// uc_side := 0 ;
56733: LD_ADDR_OWVAR 20
56737: PUSH
56738: LD_INT 0
56740: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56741: LD_ADDR_OWVAR 29
56745: PUSH
56746: LD_INT 12
56748: PUSH
56749: LD_INT 12
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// hc_agressivity := 20 ;
56756: LD_ADDR_OWVAR 35
56760: PUSH
56761: LD_INT 20
56763: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56764: LD_ADDR_OWVAR 28
56768: PUSH
56769: LD_INT 17
56771: ST_TO_ADDR
// hc_gallery :=  ;
56772: LD_ADDR_OWVAR 33
56776: PUSH
56777: LD_STRING 
56779: ST_TO_ADDR
// hc_name :=  ;
56780: LD_ADDR_OWVAR 26
56784: PUSH
56785: LD_STRING 
56787: ST_TO_ADDR
// un := CreateHuman ;
56788: LD_ADDR_VAR 0 2
56792: PUSH
56793: CALL_OW 44
56797: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56798: LD_VAR 0 2
56802: PPUSH
56803: LD_INT 1
56805: PPUSH
56806: CALL_OW 51
// tmp := tmp ^ un ;
56810: LD_ADDR_VAR 0 3
56814: PUSH
56815: LD_VAR 0 3
56819: PUSH
56820: LD_VAR 0 2
56824: ADD
56825: ST_TO_ADDR
// end ;
56826: GO 56722
56828: POP
56829: POP
// repeat wait ( 0 0$1 ) ;
56830: LD_INT 35
56832: PPUSH
56833: CALL_OW 67
// for un in tmp do
56837: LD_ADDR_VAR 0 2
56841: PUSH
56842: LD_VAR 0 3
56846: PUSH
56847: FOR_IN
56848: IFFALSE 56922
// begin if IsDead ( un ) then
56850: LD_VAR 0 2
56854: PPUSH
56855: CALL_OW 301
56859: IFFALSE 56879
// begin tmp := tmp diff un ;
56861: LD_ADDR_VAR 0 3
56865: PUSH
56866: LD_VAR 0 3
56870: PUSH
56871: LD_VAR 0 2
56875: DIFF
56876: ST_TO_ADDR
// continue ;
56877: GO 56847
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56879: LD_VAR 0 2
56883: PPUSH
56884: LD_INT 3
56886: PUSH
56887: LD_INT 22
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PPUSH
56901: CALL_OW 69
56905: PPUSH
56906: LD_VAR 0 2
56910: PPUSH
56911: CALL_OW 74
56915: PPUSH
56916: CALL_OW 115
// end ;
56920: GO 56847
56922: POP
56923: POP
// until not tmp ;
56924: LD_VAR 0 3
56928: NOT
56929: IFFALSE 56830
// end ;
56931: PPOPN 3
56933: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56934: LD_EXP 20
56938: PUSH
56939: LD_EXP 45
56943: AND
56944: IFFALSE 56998
56946: GO 56948
56948: DISABLE
// begin ToLua ( displayTroll(); ) ;
56949: LD_STRING displayTroll();
56951: PPUSH
56952: CALL_OW 559
// wait ( 3 3$00 ) ;
56956: LD_INT 6300
56958: PPUSH
56959: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56963: LD_STRING hideTroll();
56965: PPUSH
56966: CALL_OW 559
// wait ( 1 1$00 ) ;
56970: LD_INT 2100
56972: PPUSH
56973: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56977: LD_STRING displayTroll();
56979: PPUSH
56980: CALL_OW 559
// wait ( 1 1$00 ) ;
56984: LD_INT 2100
56986: PPUSH
56987: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56991: LD_STRING hideTroll();
56993: PPUSH
56994: CALL_OW 559
// end ;
56998: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56999: LD_EXP 20
57003: PUSH
57004: LD_EXP 46
57008: AND
57009: IFFALSE 57072
57011: GO 57013
57013: DISABLE
57014: LD_INT 0
57016: PPUSH
// begin p := 0 ;
57017: LD_ADDR_VAR 0 1
57021: PUSH
57022: LD_INT 0
57024: ST_TO_ADDR
// repeat game_speed := 1 ;
57025: LD_ADDR_OWVAR 65
57029: PUSH
57030: LD_INT 1
57032: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57033: LD_INT 35
57035: PPUSH
57036: CALL_OW 67
// p := p + 1 ;
57040: LD_ADDR_VAR 0 1
57044: PUSH
57045: LD_VAR 0 1
57049: PUSH
57050: LD_INT 1
57052: PLUS
57053: ST_TO_ADDR
// until p >= 60 ;
57054: LD_VAR 0 1
57058: PUSH
57059: LD_INT 60
57061: GREATEREQUAL
57062: IFFALSE 57025
// game_speed := 4 ;
57064: LD_ADDR_OWVAR 65
57068: PUSH
57069: LD_INT 4
57071: ST_TO_ADDR
// end ;
57072: PPOPN 1
57074: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57075: LD_EXP 20
57079: PUSH
57080: LD_EXP 47
57084: AND
57085: IFFALSE 57231
57087: GO 57089
57089: DISABLE
57090: LD_INT 0
57092: PPUSH
57093: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57094: LD_ADDR_VAR 0 1
57098: PUSH
57099: LD_INT 22
57101: PUSH
57102: LD_OWVAR 2
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 30
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 30
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PPUSH
57143: CALL_OW 69
57147: ST_TO_ADDR
// if not depot then
57148: LD_VAR 0 1
57152: NOT
57153: IFFALSE 57157
// exit ;
57155: GO 57231
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57157: LD_ADDR_VAR 0 2
57161: PUSH
57162: LD_VAR 0 1
57166: PUSH
57167: LD_INT 1
57169: PPUSH
57170: LD_VAR 0 1
57174: PPUSH
57175: CALL_OW 12
57179: ARRAY
57180: PPUSH
57181: CALL_OW 274
57185: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57186: LD_VAR 0 2
57190: PPUSH
57191: LD_INT 1
57193: PPUSH
57194: LD_INT 0
57196: PPUSH
57197: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57201: LD_VAR 0 2
57205: PPUSH
57206: LD_INT 2
57208: PPUSH
57209: LD_INT 0
57211: PPUSH
57212: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57216: LD_VAR 0 2
57220: PPUSH
57221: LD_INT 3
57223: PPUSH
57224: LD_INT 0
57226: PPUSH
57227: CALL_OW 277
// end ;
57231: PPOPN 2
57233: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57234: LD_EXP 20
57238: PUSH
57239: LD_EXP 48
57243: AND
57244: IFFALSE 57341
57246: GO 57248
57248: DISABLE
57249: LD_INT 0
57251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57252: LD_ADDR_VAR 0 1
57256: PUSH
57257: LD_INT 22
57259: PUSH
57260: LD_OWVAR 2
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 21
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 23
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: PPUSH
57301: CALL_OW 69
57305: ST_TO_ADDR
// if not tmp then
57306: LD_VAR 0 1
57310: NOT
57311: IFFALSE 57315
// exit ;
57313: GO 57341
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57315: LD_VAR 0 1
57319: PUSH
57320: LD_INT 1
57322: PPUSH
57323: LD_VAR 0 1
57327: PPUSH
57328: CALL_OW 12
57332: ARRAY
57333: PPUSH
57334: LD_INT 200
57336: PPUSH
57337: CALL_OW 234
// end ;
57341: PPOPN 1
57343: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
57344: LD_EXP 20
57348: PUSH
57349: LD_EXP 49
57353: AND
57354: IFFALSE 57433
57356: GO 57358
57358: DISABLE
57359: LD_INT 0
57361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
57362: LD_ADDR_VAR 0 1
57366: PUSH
57367: LD_INT 22
57369: PUSH
57370: LD_OWVAR 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 21
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PPUSH
57393: CALL_OW 69
57397: ST_TO_ADDR
// if not tmp then
57398: LD_VAR 0 1
57402: NOT
57403: IFFALSE 57407
// exit ;
57405: GO 57433
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
57407: LD_VAR 0 1
57411: PUSH
57412: LD_INT 1
57414: PPUSH
57415: LD_VAR 0 1
57419: PPUSH
57420: CALL_OW 12
57424: ARRAY
57425: PPUSH
57426: LD_INT 60
57428: PPUSH
57429: CALL_OW 234
// end ;
57433: PPOPN 1
57435: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
57436: LD_EXP 20
57440: PUSH
57441: LD_EXP 50
57445: AND
57446: IFFALSE 57545
57448: GO 57450
57450: DISABLE
57451: LD_INT 0
57453: PPUSH
57454: PPUSH
// begin enable ;
57455: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
57456: LD_ADDR_VAR 0 1
57460: PUSH
57461: LD_INT 22
57463: PUSH
57464: LD_OWVAR 2
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 61
57475: PUSH
57476: EMPTY
57477: LIST
57478: PUSH
57479: LD_INT 33
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: PPUSH
57494: CALL_OW 69
57498: ST_TO_ADDR
// if not tmp then
57499: LD_VAR 0 1
57503: NOT
57504: IFFALSE 57508
// exit ;
57506: GO 57545
// for i in tmp do
57508: LD_ADDR_VAR 0 2
57512: PUSH
57513: LD_VAR 0 1
57517: PUSH
57518: FOR_IN
57519: IFFALSE 57543
// if IsControledBy ( i ) then
57521: LD_VAR 0 2
57525: PPUSH
57526: CALL_OW 312
57530: IFFALSE 57541
// ComUnlink ( i ) ;
57532: LD_VAR 0 2
57536: PPUSH
57537: CALL_OW 136
57541: GO 57518
57543: POP
57544: POP
// end ;
57545: PPOPN 2
57547: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57548: LD_EXP 20
57552: PUSH
57553: LD_EXP 51
57557: AND
57558: IFFALSE 57698
57560: GO 57562
57562: DISABLE
57563: LD_INT 0
57565: PPUSH
57566: PPUSH
// begin ToLua ( displayPowell(); ) ;
57567: LD_STRING displayPowell();
57569: PPUSH
57570: CALL_OW 559
// uc_side := 0 ;
57574: LD_ADDR_OWVAR 20
57578: PUSH
57579: LD_INT 0
57581: ST_TO_ADDR
// uc_nation := 2 ;
57582: LD_ADDR_OWVAR 21
57586: PUSH
57587: LD_INT 2
57589: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57590: LD_ADDR_OWVAR 37
57594: PUSH
57595: LD_INT 14
57597: ST_TO_ADDR
// vc_engine := engine_siberite ;
57598: LD_ADDR_OWVAR 39
57602: PUSH
57603: LD_INT 3
57605: ST_TO_ADDR
// vc_control := control_apeman ;
57606: LD_ADDR_OWVAR 38
57610: PUSH
57611: LD_INT 5
57613: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57614: LD_ADDR_OWVAR 40
57618: PUSH
57619: LD_INT 29
57621: ST_TO_ADDR
// un := CreateVehicle ;
57622: LD_ADDR_VAR 0 2
57626: PUSH
57627: CALL_OW 45
57631: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57632: LD_VAR 0 2
57636: PPUSH
57637: LD_INT 1
57639: PPUSH
57640: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57644: LD_INT 35
57646: PPUSH
57647: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57651: LD_VAR 0 2
57655: PPUSH
57656: LD_INT 22
57658: PUSH
57659: LD_OWVAR 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PPUSH
57668: CALL_OW 69
57672: PPUSH
57673: LD_VAR 0 2
57677: PPUSH
57678: CALL_OW 74
57682: PPUSH
57683: CALL_OW 115
// until IsDead ( un ) ;
57687: LD_VAR 0 2
57691: PPUSH
57692: CALL_OW 301
57696: IFFALSE 57644
// end ;
57698: PPOPN 2
57700: END
// every 0 0$1 trigger StreamModeActive and sStu do
57701: LD_EXP 20
57705: PUSH
57706: LD_EXP 59
57710: AND
57711: IFFALSE 57727
57713: GO 57715
57715: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57716: LD_STRING displayStucuk();
57718: PPUSH
57719: CALL_OW 559
// ResetFog ;
57723: CALL_OW 335
// end ;
57727: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57728: LD_EXP 20
57732: PUSH
57733: LD_EXP 52
57737: AND
57738: IFFALSE 57879
57740: GO 57742
57742: DISABLE
57743: LD_INT 0
57745: PPUSH
57746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57747: LD_ADDR_VAR 0 2
57751: PUSH
57752: LD_INT 22
57754: PUSH
57755: LD_OWVAR 2
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 21
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PPUSH
57778: CALL_OW 69
57782: ST_TO_ADDR
// if not tmp then
57783: LD_VAR 0 2
57787: NOT
57788: IFFALSE 57792
// exit ;
57790: GO 57879
// un := tmp [ rand ( 1 , tmp ) ] ;
57792: LD_ADDR_VAR 0 1
57796: PUSH
57797: LD_VAR 0 2
57801: PUSH
57802: LD_INT 1
57804: PPUSH
57805: LD_VAR 0 2
57809: PPUSH
57810: CALL_OW 12
57814: ARRAY
57815: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57816: LD_VAR 0 1
57820: PPUSH
57821: LD_INT 0
57823: PPUSH
57824: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57828: LD_VAR 0 1
57832: PPUSH
57833: LD_OWVAR 3
57837: PUSH
57838: LD_VAR 0 1
57842: DIFF
57843: PPUSH
57844: LD_VAR 0 1
57848: PPUSH
57849: CALL_OW 74
57853: PPUSH
57854: CALL_OW 115
// wait ( 0 0$20 ) ;
57858: LD_INT 700
57860: PPUSH
57861: CALL_OW 67
// SetSide ( un , your_side ) ;
57865: LD_VAR 0 1
57869: PPUSH
57870: LD_OWVAR 2
57874: PPUSH
57875: CALL_OW 235
// end ;
57879: PPOPN 2
57881: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57882: LD_EXP 20
57886: PUSH
57887: LD_EXP 53
57891: AND
57892: IFFALSE 57998
57894: GO 57896
57896: DISABLE
57897: LD_INT 0
57899: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57900: LD_ADDR_VAR 0 1
57904: PUSH
57905: LD_INT 22
57907: PUSH
57908: LD_OWVAR 2
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: LD_INT 30
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 30
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PPUSH
57949: CALL_OW 69
57953: ST_TO_ADDR
// if not depot then
57954: LD_VAR 0 1
57958: NOT
57959: IFFALSE 57963
// exit ;
57961: GO 57998
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57963: LD_VAR 0 1
57967: PUSH
57968: LD_INT 1
57970: ARRAY
57971: PPUSH
57972: CALL_OW 250
57976: PPUSH
57977: LD_VAR 0 1
57981: PUSH
57982: LD_INT 1
57984: ARRAY
57985: PPUSH
57986: CALL_OW 251
57990: PPUSH
57991: LD_INT 70
57993: PPUSH
57994: CALL_OW 495
// end ;
57998: PPOPN 1
58000: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58001: LD_EXP 20
58005: PUSH
58006: LD_EXP 54
58010: AND
58011: IFFALSE 58222
58013: GO 58015
58015: DISABLE
58016: LD_INT 0
58018: PPUSH
58019: PPUSH
58020: PPUSH
58021: PPUSH
58022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58023: LD_ADDR_VAR 0 5
58027: PUSH
58028: LD_INT 22
58030: PUSH
58031: LD_OWVAR 2
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 21
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PPUSH
58054: CALL_OW 69
58058: ST_TO_ADDR
// if not tmp then
58059: LD_VAR 0 5
58063: NOT
58064: IFFALSE 58068
// exit ;
58066: GO 58222
// for i in tmp do
58068: LD_ADDR_VAR 0 1
58072: PUSH
58073: LD_VAR 0 5
58077: PUSH
58078: FOR_IN
58079: IFFALSE 58220
// begin d := rand ( 0 , 5 ) ;
58081: LD_ADDR_VAR 0 4
58085: PUSH
58086: LD_INT 0
58088: PPUSH
58089: LD_INT 5
58091: PPUSH
58092: CALL_OW 12
58096: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58097: LD_ADDR_VAR 0 2
58101: PUSH
58102: LD_VAR 0 1
58106: PPUSH
58107: CALL_OW 250
58111: PPUSH
58112: LD_VAR 0 4
58116: PPUSH
58117: LD_INT 3
58119: PPUSH
58120: LD_INT 12
58122: PPUSH
58123: CALL_OW 12
58127: PPUSH
58128: CALL_OW 272
58132: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58133: LD_ADDR_VAR 0 3
58137: PUSH
58138: LD_VAR 0 1
58142: PPUSH
58143: CALL_OW 251
58147: PPUSH
58148: LD_VAR 0 4
58152: PPUSH
58153: LD_INT 3
58155: PPUSH
58156: LD_INT 12
58158: PPUSH
58159: CALL_OW 12
58163: PPUSH
58164: CALL_OW 273
58168: ST_TO_ADDR
// if ValidHex ( x , y ) then
58169: LD_VAR 0 2
58173: PPUSH
58174: LD_VAR 0 3
58178: PPUSH
58179: CALL_OW 488
58183: IFFALSE 58218
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58185: LD_VAR 0 1
58189: PPUSH
58190: LD_VAR 0 2
58194: PPUSH
58195: LD_VAR 0 3
58199: PPUSH
58200: LD_INT 3
58202: PPUSH
58203: LD_INT 6
58205: PPUSH
58206: CALL_OW 12
58210: PPUSH
58211: LD_INT 1
58213: PPUSH
58214: CALL_OW 483
// end ;
58218: GO 58078
58220: POP
58221: POP
// end ;
58222: PPOPN 5
58224: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58225: LD_EXP 20
58229: PUSH
58230: LD_EXP 55
58234: AND
58235: IFFALSE 58329
58237: GO 58239
58239: DISABLE
58240: LD_INT 0
58242: PPUSH
58243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58244: LD_ADDR_VAR 0 2
58248: PUSH
58249: LD_INT 22
58251: PUSH
58252: LD_OWVAR 2
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 32
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 21
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: LIST
58285: PPUSH
58286: CALL_OW 69
58290: ST_TO_ADDR
// if not tmp then
58291: LD_VAR 0 2
58295: NOT
58296: IFFALSE 58300
// exit ;
58298: GO 58329
// for i in tmp do
58300: LD_ADDR_VAR 0 1
58304: PUSH
58305: LD_VAR 0 2
58309: PUSH
58310: FOR_IN
58311: IFFALSE 58327
// SetFuel ( i , 0 ) ;
58313: LD_VAR 0 1
58317: PPUSH
58318: LD_INT 0
58320: PPUSH
58321: CALL_OW 240
58325: GO 58310
58327: POP
58328: POP
// end ;
58329: PPOPN 2
58331: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
58332: LD_EXP 20
58336: PUSH
58337: LD_EXP 56
58341: AND
58342: IFFALSE 58408
58344: GO 58346
58346: DISABLE
58347: LD_INT 0
58349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58350: LD_ADDR_VAR 0 1
58354: PUSH
58355: LD_INT 22
58357: PUSH
58358: LD_OWVAR 2
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 30
58369: PUSH
58370: LD_INT 29
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PPUSH
58381: CALL_OW 69
58385: ST_TO_ADDR
// if not tmp then
58386: LD_VAR 0 1
58390: NOT
58391: IFFALSE 58395
// exit ;
58393: GO 58408
// DestroyUnit ( tmp [ 1 ] ) ;
58395: LD_VAR 0 1
58399: PUSH
58400: LD_INT 1
58402: ARRAY
58403: PPUSH
58404: CALL_OW 65
// end ;
58408: PPOPN 1
58410: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
58411: LD_EXP 20
58415: PUSH
58416: LD_EXP 58
58420: AND
58421: IFFALSE 58550
58423: GO 58425
58425: DISABLE
58426: LD_INT 0
58428: PPUSH
// begin uc_side := 0 ;
58429: LD_ADDR_OWVAR 20
58433: PUSH
58434: LD_INT 0
58436: ST_TO_ADDR
// uc_nation := nation_arabian ;
58437: LD_ADDR_OWVAR 21
58441: PUSH
58442: LD_INT 2
58444: ST_TO_ADDR
// hc_gallery :=  ;
58445: LD_ADDR_OWVAR 33
58449: PUSH
58450: LD_STRING 
58452: ST_TO_ADDR
// hc_name :=  ;
58453: LD_ADDR_OWVAR 26
58457: PUSH
58458: LD_STRING 
58460: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58461: LD_INT 1
58463: PPUSH
58464: LD_INT 11
58466: PPUSH
58467: LD_INT 10
58469: PPUSH
58470: CALL_OW 380
// un := CreateHuman ;
58474: LD_ADDR_VAR 0 1
58478: PUSH
58479: CALL_OW 44
58483: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58484: LD_VAR 0 1
58488: PPUSH
58489: LD_INT 1
58491: PPUSH
58492: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58496: LD_INT 35
58498: PPUSH
58499: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58503: LD_VAR 0 1
58507: PPUSH
58508: LD_INT 22
58510: PUSH
58511: LD_OWVAR 2
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PPUSH
58520: CALL_OW 69
58524: PPUSH
58525: LD_VAR 0 1
58529: PPUSH
58530: CALL_OW 74
58534: PPUSH
58535: CALL_OW 115
// until IsDead ( un ) ;
58539: LD_VAR 0 1
58543: PPUSH
58544: CALL_OW 301
58548: IFFALSE 58496
// end ;
58550: PPOPN 1
58552: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58553: LD_EXP 20
58557: PUSH
58558: LD_EXP 60
58562: AND
58563: IFFALSE 58575
58565: GO 58567
58567: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58568: LD_STRING earthquake(getX(game), 0, 32)
58570: PPUSH
58571: CALL_OW 559
58575: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58576: LD_EXP 20
58580: PUSH
58581: LD_EXP 61
58585: AND
58586: IFFALSE 58677
58588: GO 58590
58590: DISABLE
58591: LD_INT 0
58593: PPUSH
// begin enable ;
58594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58595: LD_ADDR_VAR 0 1
58599: PUSH
58600: LD_INT 22
58602: PUSH
58603: LD_OWVAR 2
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 21
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 33
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: PPUSH
58637: CALL_OW 69
58641: ST_TO_ADDR
// if not tmp then
58642: LD_VAR 0 1
58646: NOT
58647: IFFALSE 58651
// exit ;
58649: GO 58677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58651: LD_VAR 0 1
58655: PUSH
58656: LD_INT 1
58658: PPUSH
58659: LD_VAR 0 1
58663: PPUSH
58664: CALL_OW 12
58668: ARRAY
58669: PPUSH
58670: LD_INT 1
58672: PPUSH
58673: CALL_OW 234
// end ;
58677: PPOPN 1
58679: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58680: LD_EXP 20
58684: PUSH
58685: LD_EXP 62
58689: AND
58690: IFFALSE 58831
58692: GO 58694
58694: DISABLE
58695: LD_INT 0
58697: PPUSH
58698: PPUSH
58699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58700: LD_ADDR_VAR 0 3
58704: PUSH
58705: LD_INT 22
58707: PUSH
58708: LD_OWVAR 2
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 25
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PPUSH
58731: CALL_OW 69
58735: ST_TO_ADDR
// if not tmp then
58736: LD_VAR 0 3
58740: NOT
58741: IFFALSE 58745
// exit ;
58743: GO 58831
// un := tmp [ rand ( 1 , tmp ) ] ;
58745: LD_ADDR_VAR 0 2
58749: PUSH
58750: LD_VAR 0 3
58754: PUSH
58755: LD_INT 1
58757: PPUSH
58758: LD_VAR 0 3
58762: PPUSH
58763: CALL_OW 12
58767: ARRAY
58768: ST_TO_ADDR
// if Crawls ( un ) then
58769: LD_VAR 0 2
58773: PPUSH
58774: CALL_OW 318
58778: IFFALSE 58789
// ComWalk ( un ) ;
58780: LD_VAR 0 2
58784: PPUSH
58785: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58789: LD_VAR 0 2
58793: PPUSH
58794: LD_INT 9
58796: PPUSH
58797: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58801: LD_INT 28
58803: PPUSH
58804: LD_OWVAR 2
58808: PPUSH
58809: LD_INT 2
58811: PPUSH
58812: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58816: LD_INT 29
58818: PPUSH
58819: LD_OWVAR 2
58823: PPUSH
58824: LD_INT 2
58826: PPUSH
58827: CALL_OW 322
// end ;
58831: PPOPN 3
58833: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58834: LD_EXP 20
58838: PUSH
58839: LD_EXP 63
58843: AND
58844: IFFALSE 58955
58846: GO 58848
58848: DISABLE
58849: LD_INT 0
58851: PPUSH
58852: PPUSH
58853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58854: LD_ADDR_VAR 0 3
58858: PUSH
58859: LD_INT 22
58861: PUSH
58862: LD_OWVAR 2
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 25
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PPUSH
58885: CALL_OW 69
58889: ST_TO_ADDR
// if not tmp then
58890: LD_VAR 0 3
58894: NOT
58895: IFFALSE 58899
// exit ;
58897: GO 58955
// un := tmp [ rand ( 1 , tmp ) ] ;
58899: LD_ADDR_VAR 0 2
58903: PUSH
58904: LD_VAR 0 3
58908: PUSH
58909: LD_INT 1
58911: PPUSH
58912: LD_VAR 0 3
58916: PPUSH
58917: CALL_OW 12
58921: ARRAY
58922: ST_TO_ADDR
// if Crawls ( un ) then
58923: LD_VAR 0 2
58927: PPUSH
58928: CALL_OW 318
58932: IFFALSE 58943
// ComWalk ( un ) ;
58934: LD_VAR 0 2
58938: PPUSH
58939: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58943: LD_VAR 0 2
58947: PPUSH
58948: LD_INT 8
58950: PPUSH
58951: CALL_OW 336
// end ;
58955: PPOPN 3
58957: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58958: LD_EXP 20
58962: PUSH
58963: LD_EXP 64
58967: AND
58968: IFFALSE 59112
58970: GO 58972
58972: DISABLE
58973: LD_INT 0
58975: PPUSH
58976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58977: LD_ADDR_VAR 0 2
58981: PUSH
58982: LD_INT 22
58984: PUSH
58985: LD_OWVAR 2
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 21
58996: PUSH
58997: LD_INT 2
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 34
59009: PUSH
59010: LD_INT 12
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 34
59019: PUSH
59020: LD_INT 51
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 34
59029: PUSH
59030: LD_INT 32
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: LIST
59047: PPUSH
59048: CALL_OW 69
59052: ST_TO_ADDR
// if not tmp then
59053: LD_VAR 0 2
59057: NOT
59058: IFFALSE 59062
// exit ;
59060: GO 59112
// for i in tmp do
59062: LD_ADDR_VAR 0 1
59066: PUSH
59067: LD_VAR 0 2
59071: PUSH
59072: FOR_IN
59073: IFFALSE 59110
// if GetCargo ( i , mat_artifact ) = 0 then
59075: LD_VAR 0 1
59079: PPUSH
59080: LD_INT 4
59082: PPUSH
59083: CALL_OW 289
59087: PUSH
59088: LD_INT 0
59090: EQUAL
59091: IFFALSE 59108
// SetCargo ( i , mat_siberit , 100 ) ;
59093: LD_VAR 0 1
59097: PPUSH
59098: LD_INT 3
59100: PPUSH
59101: LD_INT 100
59103: PPUSH
59104: CALL_OW 290
59108: GO 59072
59110: POP
59111: POP
// end ;
59112: PPOPN 2
59114: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59115: LD_EXP 20
59119: PUSH
59120: LD_EXP 65
59124: AND
59125: IFFALSE 59308
59127: GO 59129
59129: DISABLE
59130: LD_INT 0
59132: PPUSH
59133: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59134: LD_ADDR_VAR 0 2
59138: PUSH
59139: LD_INT 22
59141: PUSH
59142: LD_OWVAR 2
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PPUSH
59151: CALL_OW 69
59155: ST_TO_ADDR
// if not tmp then
59156: LD_VAR 0 2
59160: NOT
59161: IFFALSE 59165
// exit ;
59163: GO 59308
// for i := 1 to 2 do
59165: LD_ADDR_VAR 0 1
59169: PUSH
59170: DOUBLE
59171: LD_INT 1
59173: DEC
59174: ST_TO_ADDR
59175: LD_INT 2
59177: PUSH
59178: FOR_TO
59179: IFFALSE 59306
// begin uc_side := your_side ;
59181: LD_ADDR_OWVAR 20
59185: PUSH
59186: LD_OWVAR 2
59190: ST_TO_ADDR
// uc_nation := nation_american ;
59191: LD_ADDR_OWVAR 21
59195: PUSH
59196: LD_INT 1
59198: ST_TO_ADDR
// vc_chassis := us_morphling ;
59199: LD_ADDR_OWVAR 37
59203: PUSH
59204: LD_INT 5
59206: ST_TO_ADDR
// vc_engine := engine_siberite ;
59207: LD_ADDR_OWVAR 39
59211: PUSH
59212: LD_INT 3
59214: ST_TO_ADDR
// vc_control := control_computer ;
59215: LD_ADDR_OWVAR 38
59219: PUSH
59220: LD_INT 3
59222: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59223: LD_ADDR_OWVAR 40
59227: PUSH
59228: LD_INT 10
59230: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59231: LD_VAR 0 2
59235: PUSH
59236: LD_INT 1
59238: ARRAY
59239: PPUSH
59240: CALL_OW 310
59244: NOT
59245: IFFALSE 59292
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59247: CALL_OW 45
59251: PPUSH
59252: LD_VAR 0 2
59256: PUSH
59257: LD_INT 1
59259: ARRAY
59260: PPUSH
59261: CALL_OW 250
59265: PPUSH
59266: LD_VAR 0 2
59270: PUSH
59271: LD_INT 1
59273: ARRAY
59274: PPUSH
59275: CALL_OW 251
59279: PPUSH
59280: LD_INT 12
59282: PPUSH
59283: LD_INT 1
59285: PPUSH
59286: CALL_OW 50
59290: GO 59304
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59292: CALL_OW 45
59296: PPUSH
59297: LD_INT 1
59299: PPUSH
59300: CALL_OW 51
// end ;
59304: GO 59178
59306: POP
59307: POP
// end ;
59308: PPOPN 2
59310: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59311: LD_EXP 20
59315: PUSH
59316: LD_EXP 66
59320: AND
59321: IFFALSE 59543
59323: GO 59325
59325: DISABLE
59326: LD_INT 0
59328: PPUSH
59329: PPUSH
59330: PPUSH
59331: PPUSH
59332: PPUSH
59333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59334: LD_ADDR_VAR 0 6
59338: PUSH
59339: LD_INT 22
59341: PUSH
59342: LD_OWVAR 2
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 21
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 3
59363: PUSH
59364: LD_INT 23
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: LIST
59382: PPUSH
59383: CALL_OW 69
59387: ST_TO_ADDR
// if not tmp then
59388: LD_VAR 0 6
59392: NOT
59393: IFFALSE 59397
// exit ;
59395: GO 59543
// s1 := rand ( 1 , 4 ) ;
59397: LD_ADDR_VAR 0 2
59401: PUSH
59402: LD_INT 1
59404: PPUSH
59405: LD_INT 4
59407: PPUSH
59408: CALL_OW 12
59412: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
59413: LD_ADDR_VAR 0 4
59417: PUSH
59418: LD_VAR 0 6
59422: PUSH
59423: LD_INT 1
59425: ARRAY
59426: PPUSH
59427: LD_VAR 0 2
59431: PPUSH
59432: CALL_OW 259
59436: ST_TO_ADDR
// if s1 = 1 then
59437: LD_VAR 0 2
59441: PUSH
59442: LD_INT 1
59444: EQUAL
59445: IFFALSE 59465
// s2 := rand ( 2 , 4 ) else
59447: LD_ADDR_VAR 0 3
59451: PUSH
59452: LD_INT 2
59454: PPUSH
59455: LD_INT 4
59457: PPUSH
59458: CALL_OW 12
59462: ST_TO_ADDR
59463: GO 59473
// s2 := 1 ;
59465: LD_ADDR_VAR 0 3
59469: PUSH
59470: LD_INT 1
59472: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59473: LD_ADDR_VAR 0 5
59477: PUSH
59478: LD_VAR 0 6
59482: PUSH
59483: LD_INT 1
59485: ARRAY
59486: PPUSH
59487: LD_VAR 0 3
59491: PPUSH
59492: CALL_OW 259
59496: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59497: LD_VAR 0 6
59501: PUSH
59502: LD_INT 1
59504: ARRAY
59505: PPUSH
59506: LD_VAR 0 2
59510: PPUSH
59511: LD_VAR 0 5
59515: PPUSH
59516: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59520: LD_VAR 0 6
59524: PUSH
59525: LD_INT 1
59527: ARRAY
59528: PPUSH
59529: LD_VAR 0 3
59533: PPUSH
59534: LD_VAR 0 4
59538: PPUSH
59539: CALL_OW 237
// end ;
59543: PPOPN 6
59545: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59546: LD_EXP 20
59550: PUSH
59551: LD_EXP 67
59555: AND
59556: IFFALSE 59635
59558: GO 59560
59560: DISABLE
59561: LD_INT 0
59563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59564: LD_ADDR_VAR 0 1
59568: PUSH
59569: LD_INT 22
59571: PUSH
59572: LD_OWVAR 2
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 30
59583: PUSH
59584: LD_INT 3
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PPUSH
59595: CALL_OW 69
59599: ST_TO_ADDR
// if not tmp then
59600: LD_VAR 0 1
59604: NOT
59605: IFFALSE 59609
// exit ;
59607: GO 59635
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59609: LD_VAR 0 1
59613: PUSH
59614: LD_INT 1
59616: PPUSH
59617: LD_VAR 0 1
59621: PPUSH
59622: CALL_OW 12
59626: ARRAY
59627: PPUSH
59628: LD_INT 1
59630: PPUSH
59631: CALL_OW 234
// end ;
59635: PPOPN 1
59637: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59638: LD_EXP 20
59642: PUSH
59643: LD_EXP 68
59647: AND
59648: IFFALSE 59760
59650: GO 59652
59652: DISABLE
59653: LD_INT 0
59655: PPUSH
59656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59657: LD_ADDR_VAR 0 2
59661: PUSH
59662: LD_INT 22
59664: PUSH
59665: LD_OWVAR 2
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 30
59679: PUSH
59680: LD_INT 27
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 30
59689: PUSH
59690: LD_INT 26
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 30
59699: PUSH
59700: LD_INT 28
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PPUSH
59717: CALL_OW 69
59721: ST_TO_ADDR
// if not tmp then
59722: LD_VAR 0 2
59726: NOT
59727: IFFALSE 59731
// exit ;
59729: GO 59760
// for i in tmp do
59731: LD_ADDR_VAR 0 1
59735: PUSH
59736: LD_VAR 0 2
59740: PUSH
59741: FOR_IN
59742: IFFALSE 59758
// SetLives ( i , 1 ) ;
59744: LD_VAR 0 1
59748: PPUSH
59749: LD_INT 1
59751: PPUSH
59752: CALL_OW 234
59756: GO 59741
59758: POP
59759: POP
// end ;
59760: PPOPN 2
59762: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59763: LD_EXP 20
59767: PUSH
59768: LD_EXP 69
59772: AND
59773: IFFALSE 60060
59775: GO 59777
59777: DISABLE
59778: LD_INT 0
59780: PPUSH
59781: PPUSH
59782: PPUSH
// begin i := rand ( 1 , 7 ) ;
59783: LD_ADDR_VAR 0 1
59787: PUSH
59788: LD_INT 1
59790: PPUSH
59791: LD_INT 7
59793: PPUSH
59794: CALL_OW 12
59798: ST_TO_ADDR
// case i of 1 :
59799: LD_VAR 0 1
59803: PUSH
59804: LD_INT 1
59806: DOUBLE
59807: EQUAL
59808: IFTRUE 59812
59810: GO 59822
59812: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59813: LD_STRING earthquake(getX(game), 0, 32)
59815: PPUSH
59816: CALL_OW 559
59820: GO 60060
59822: LD_INT 2
59824: DOUBLE
59825: EQUAL
59826: IFTRUE 59830
59828: GO 59844
59830: POP
// begin ToLua ( displayStucuk(); ) ;
59831: LD_STRING displayStucuk();
59833: PPUSH
59834: CALL_OW 559
// ResetFog ;
59838: CALL_OW 335
// end ; 3 :
59842: GO 60060
59844: LD_INT 3
59846: DOUBLE
59847: EQUAL
59848: IFTRUE 59852
59850: GO 59956
59852: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59853: LD_ADDR_VAR 0 2
59857: PUSH
59858: LD_INT 22
59860: PUSH
59861: LD_OWVAR 2
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 25
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PPUSH
59884: CALL_OW 69
59888: ST_TO_ADDR
// if not tmp then
59889: LD_VAR 0 2
59893: NOT
59894: IFFALSE 59898
// exit ;
59896: GO 60060
// un := tmp [ rand ( 1 , tmp ) ] ;
59898: LD_ADDR_VAR 0 3
59902: PUSH
59903: LD_VAR 0 2
59907: PUSH
59908: LD_INT 1
59910: PPUSH
59911: LD_VAR 0 2
59915: PPUSH
59916: CALL_OW 12
59920: ARRAY
59921: ST_TO_ADDR
// if Crawls ( un ) then
59922: LD_VAR 0 3
59926: PPUSH
59927: CALL_OW 318
59931: IFFALSE 59942
// ComWalk ( un ) ;
59933: LD_VAR 0 3
59937: PPUSH
59938: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59942: LD_VAR 0 3
59946: PPUSH
59947: LD_INT 8
59949: PPUSH
59950: CALL_OW 336
// end ; 4 :
59954: GO 60060
59956: LD_INT 4
59958: DOUBLE
59959: EQUAL
59960: IFTRUE 59964
59962: GO 60038
59964: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59965: LD_ADDR_VAR 0 2
59969: PUSH
59970: LD_INT 22
59972: PUSH
59973: LD_OWVAR 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 30
59984: PUSH
59985: LD_INT 29
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PPUSH
59996: CALL_OW 69
60000: ST_TO_ADDR
// if not tmp then
60001: LD_VAR 0 2
60005: NOT
60006: IFFALSE 60010
// exit ;
60008: GO 60060
// CenterNowOnUnits ( tmp [ 1 ] ) ;
60010: LD_VAR 0 2
60014: PUSH
60015: LD_INT 1
60017: ARRAY
60018: PPUSH
60019: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60023: LD_VAR 0 2
60027: PUSH
60028: LD_INT 1
60030: ARRAY
60031: PPUSH
60032: CALL_OW 65
// end ; 5 .. 7 :
60036: GO 60060
60038: LD_INT 5
60040: DOUBLE
60041: GREATEREQUAL
60042: IFFALSE 60050
60044: LD_INT 7
60046: DOUBLE
60047: LESSEQUAL
60048: IFTRUE 60052
60050: GO 60059
60052: POP
// StreamSibBomb ; end ;
60053: CALL 56297 0 0
60057: GO 60060
60059: POP
// end ;
60060: PPOPN 3
60062: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60063: LD_EXP 20
60067: PUSH
60068: LD_EXP 70
60072: AND
60073: IFFALSE 60229
60075: GO 60077
60077: DISABLE
60078: LD_INT 0
60080: PPUSH
60081: PPUSH
60082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60083: LD_ADDR_VAR 0 2
60087: PUSH
60088: LD_INT 81
60090: PUSH
60091: LD_OWVAR 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: LD_INT 21
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 21
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PPUSH
60132: CALL_OW 69
60136: ST_TO_ADDR
// if not tmp then
60137: LD_VAR 0 2
60141: NOT
60142: IFFALSE 60146
// exit ;
60144: GO 60229
// p := 0 ;
60146: LD_ADDR_VAR 0 3
60150: PUSH
60151: LD_INT 0
60153: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60154: LD_INT 35
60156: PPUSH
60157: CALL_OW 67
// p := p + 1 ;
60161: LD_ADDR_VAR 0 3
60165: PUSH
60166: LD_VAR 0 3
60170: PUSH
60171: LD_INT 1
60173: PLUS
60174: ST_TO_ADDR
// for i in tmp do
60175: LD_ADDR_VAR 0 1
60179: PUSH
60180: LD_VAR 0 2
60184: PUSH
60185: FOR_IN
60186: IFFALSE 60217
// if GetLives ( i ) < 1000 then
60188: LD_VAR 0 1
60192: PPUSH
60193: CALL_OW 256
60197: PUSH
60198: LD_INT 1000
60200: LESS
60201: IFFALSE 60215
// SetLives ( i , 1000 ) ;
60203: LD_VAR 0 1
60207: PPUSH
60208: LD_INT 1000
60210: PPUSH
60211: CALL_OW 234
60215: GO 60185
60217: POP
60218: POP
// until p > 20 ;
60219: LD_VAR 0 3
60223: PUSH
60224: LD_INT 20
60226: GREATER
60227: IFFALSE 60154
// end ;
60229: PPOPN 3
60231: END
// every 0 0$1 trigger StreamModeActive and sTime do
60232: LD_EXP 20
60236: PUSH
60237: LD_EXP 71
60241: AND
60242: IFFALSE 60277
60244: GO 60246
60246: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60247: LD_INT 28
60249: PPUSH
60250: LD_OWVAR 2
60254: PPUSH
60255: LD_INT 2
60257: PPUSH
60258: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60262: LD_INT 30
60264: PPUSH
60265: LD_OWVAR 2
60269: PPUSH
60270: LD_INT 2
60272: PPUSH
60273: CALL_OW 322
// end ;
60277: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60278: LD_EXP 20
60282: PUSH
60283: LD_EXP 72
60287: AND
60288: IFFALSE 60409
60290: GO 60292
60292: DISABLE
60293: LD_INT 0
60295: PPUSH
60296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60297: LD_ADDR_VAR 0 2
60301: PUSH
60302: LD_INT 22
60304: PUSH
60305: LD_OWVAR 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 21
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: LD_INT 23
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: LIST
60345: PPUSH
60346: CALL_OW 69
60350: ST_TO_ADDR
// if not tmp then
60351: LD_VAR 0 2
60355: NOT
60356: IFFALSE 60360
// exit ;
60358: GO 60409
// for i in tmp do
60360: LD_ADDR_VAR 0 1
60364: PUSH
60365: LD_VAR 0 2
60369: PUSH
60370: FOR_IN
60371: IFFALSE 60407
// begin if Crawls ( i ) then
60373: LD_VAR 0 1
60377: PPUSH
60378: CALL_OW 318
60382: IFFALSE 60393
// ComWalk ( i ) ;
60384: LD_VAR 0 1
60388: PPUSH
60389: CALL_OW 138
// SetClass ( i , 2 ) ;
60393: LD_VAR 0 1
60397: PPUSH
60398: LD_INT 2
60400: PPUSH
60401: CALL_OW 336
// end ;
60405: GO 60370
60407: POP
60408: POP
// end ;
60409: PPOPN 2
60411: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
60412: LD_EXP 20
60416: PUSH
60417: LD_EXP 73
60421: AND
60422: IFFALSE 60710
60424: GO 60426
60426: DISABLE
60427: LD_INT 0
60429: PPUSH
60430: PPUSH
60431: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
60432: LD_OWVAR 2
60436: PPUSH
60437: LD_INT 9
60439: PPUSH
60440: LD_INT 1
60442: PPUSH
60443: LD_INT 1
60445: PPUSH
60446: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
60450: LD_INT 9
60452: PPUSH
60453: LD_OWVAR 2
60457: PPUSH
60458: CALL_OW 343
// uc_side := 9 ;
60462: LD_ADDR_OWVAR 20
60466: PUSH
60467: LD_INT 9
60469: ST_TO_ADDR
// uc_nation := 2 ;
60470: LD_ADDR_OWVAR 21
60474: PUSH
60475: LD_INT 2
60477: ST_TO_ADDR
// hc_name := Dark Warrior ;
60478: LD_ADDR_OWVAR 26
60482: PUSH
60483: LD_STRING Dark Warrior
60485: ST_TO_ADDR
// hc_gallery :=  ;
60486: LD_ADDR_OWVAR 33
60490: PUSH
60491: LD_STRING 
60493: ST_TO_ADDR
// hc_noskilllimit := true ;
60494: LD_ADDR_OWVAR 76
60498: PUSH
60499: LD_INT 1
60501: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60502: LD_ADDR_OWVAR 31
60506: PUSH
60507: LD_INT 30
60509: PUSH
60510: LD_INT 30
60512: PUSH
60513: LD_INT 30
60515: PUSH
60516: LD_INT 30
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: ST_TO_ADDR
// un := CreateHuman ;
60525: LD_ADDR_VAR 0 3
60529: PUSH
60530: CALL_OW 44
60534: ST_TO_ADDR
// hc_noskilllimit := false ;
60535: LD_ADDR_OWVAR 76
60539: PUSH
60540: LD_INT 0
60542: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60543: LD_VAR 0 3
60547: PPUSH
60548: LD_INT 1
60550: PPUSH
60551: CALL_OW 51
// ToLua ( playRanger() ) ;
60555: LD_STRING playRanger()
60557: PPUSH
60558: CALL_OW 559
// p := 0 ;
60562: LD_ADDR_VAR 0 2
60566: PUSH
60567: LD_INT 0
60569: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60570: LD_INT 35
60572: PPUSH
60573: CALL_OW 67
// p := p + 1 ;
60577: LD_ADDR_VAR 0 2
60581: PUSH
60582: LD_VAR 0 2
60586: PUSH
60587: LD_INT 1
60589: PLUS
60590: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60591: LD_VAR 0 3
60595: PPUSH
60596: CALL_OW 256
60600: PUSH
60601: LD_INT 1000
60603: LESS
60604: IFFALSE 60618
// SetLives ( un , 1000 ) ;
60606: LD_VAR 0 3
60610: PPUSH
60611: LD_INT 1000
60613: PPUSH
60614: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60618: LD_VAR 0 3
60622: PPUSH
60623: LD_INT 81
60625: PUSH
60626: LD_OWVAR 2
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 91
60637: PUSH
60638: LD_VAR 0 3
60642: PUSH
60643: LD_INT 30
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PPUSH
60655: CALL_OW 69
60659: PPUSH
60660: LD_VAR 0 3
60664: PPUSH
60665: CALL_OW 74
60669: PPUSH
60670: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60674: LD_VAR 0 2
60678: PUSH
60679: LD_INT 80
60681: GREATER
60682: PUSH
60683: LD_VAR 0 3
60687: PPUSH
60688: CALL_OW 301
60692: OR
60693: IFFALSE 60570
// if un then
60695: LD_VAR 0 3
60699: IFFALSE 60710
// RemoveUnit ( un ) ;
60701: LD_VAR 0 3
60705: PPUSH
60706: CALL_OW 64
// end ;
60710: PPOPN 3
60712: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60713: LD_EXP 74
60717: IFFALSE 60833
60719: GO 60721
60721: DISABLE
60722: LD_INT 0
60724: PPUSH
60725: PPUSH
60726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60727: LD_ADDR_VAR 0 2
60731: PUSH
60732: LD_INT 81
60734: PUSH
60735: LD_OWVAR 2
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 21
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PPUSH
60758: CALL_OW 69
60762: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60763: LD_STRING playComputer()
60765: PPUSH
60766: CALL_OW 559
// if not tmp then
60770: LD_VAR 0 2
60774: NOT
60775: IFFALSE 60779
// exit ;
60777: GO 60833
// for i in tmp do
60779: LD_ADDR_VAR 0 1
60783: PUSH
60784: LD_VAR 0 2
60788: PUSH
60789: FOR_IN
60790: IFFALSE 60831
// for j := 1 to 4 do
60792: LD_ADDR_VAR 0 3
60796: PUSH
60797: DOUBLE
60798: LD_INT 1
60800: DEC
60801: ST_TO_ADDR
60802: LD_INT 4
60804: PUSH
60805: FOR_TO
60806: IFFALSE 60827
// SetSkill ( i , j , 10 ) ;
60808: LD_VAR 0 1
60812: PPUSH
60813: LD_VAR 0 3
60817: PPUSH
60818: LD_INT 10
60820: PPUSH
60821: CALL_OW 237
60825: GO 60805
60827: POP
60828: POP
60829: GO 60789
60831: POP
60832: POP
// end ;
60833: PPOPN 3
60835: END
// every 0 0$1 trigger s30 do var i , tmp ;
60836: LD_EXP 75
60840: IFFALSE 60909
60842: GO 60844
60844: DISABLE
60845: LD_INT 0
60847: PPUSH
60848: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60849: LD_ADDR_VAR 0 2
60853: PUSH
60854: LD_INT 22
60856: PUSH
60857: LD_OWVAR 2
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PPUSH
60866: CALL_OW 69
60870: ST_TO_ADDR
// if not tmp then
60871: LD_VAR 0 2
60875: NOT
60876: IFFALSE 60880
// exit ;
60878: GO 60909
// for i in tmp do
60880: LD_ADDR_VAR 0 1
60884: PUSH
60885: LD_VAR 0 2
60889: PUSH
60890: FOR_IN
60891: IFFALSE 60907
// SetLives ( i , 300 ) ;
60893: LD_VAR 0 1
60897: PPUSH
60898: LD_INT 300
60900: PPUSH
60901: CALL_OW 234
60905: GO 60890
60907: POP
60908: POP
// end ;
60909: PPOPN 2
60911: END
// every 0 0$1 trigger s60 do var i , tmp ;
60912: LD_EXP 76
60916: IFFALSE 60985
60918: GO 60920
60920: DISABLE
60921: LD_INT 0
60923: PPUSH
60924: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60925: LD_ADDR_VAR 0 2
60929: PUSH
60930: LD_INT 22
60932: PUSH
60933: LD_OWVAR 2
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PPUSH
60942: CALL_OW 69
60946: ST_TO_ADDR
// if not tmp then
60947: LD_VAR 0 2
60951: NOT
60952: IFFALSE 60956
// exit ;
60954: GO 60985
// for i in tmp do
60956: LD_ADDR_VAR 0 1
60960: PUSH
60961: LD_VAR 0 2
60965: PUSH
60966: FOR_IN
60967: IFFALSE 60983
// SetLives ( i , 600 ) ;
60969: LD_VAR 0 1
60973: PPUSH
60974: LD_INT 600
60976: PPUSH
60977: CALL_OW 234
60981: GO 60966
60983: POP
60984: POP
// end ;
60985: PPOPN 2
60987: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60988: LD_INT 0
60990: PPUSH
// case cmd of 301 :
60991: LD_VAR 0 1
60995: PUSH
60996: LD_INT 301
60998: DOUBLE
60999: EQUAL
61000: IFTRUE 61004
61002: GO 61036
61004: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61005: LD_VAR 0 6
61009: PPUSH
61010: LD_VAR 0 7
61014: PPUSH
61015: LD_VAR 0 8
61019: PPUSH
61020: LD_VAR 0 4
61024: PPUSH
61025: LD_VAR 0 5
61029: PPUSH
61030: CALL 62237 0 5
61034: GO 61157
61036: LD_INT 302
61038: DOUBLE
61039: EQUAL
61040: IFTRUE 61044
61042: GO 61081
61044: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61045: LD_VAR 0 6
61049: PPUSH
61050: LD_VAR 0 7
61054: PPUSH
61055: LD_VAR 0 8
61059: PPUSH
61060: LD_VAR 0 9
61064: PPUSH
61065: LD_VAR 0 4
61069: PPUSH
61070: LD_VAR 0 5
61074: PPUSH
61075: CALL 62328 0 6
61079: GO 61157
61081: LD_INT 303
61083: DOUBLE
61084: EQUAL
61085: IFTRUE 61089
61087: GO 61126
61089: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61090: LD_VAR 0 6
61094: PPUSH
61095: LD_VAR 0 7
61099: PPUSH
61100: LD_VAR 0 8
61104: PPUSH
61105: LD_VAR 0 9
61109: PPUSH
61110: LD_VAR 0 4
61114: PPUSH
61115: LD_VAR 0 5
61119: PPUSH
61120: CALL 61162 0 6
61124: GO 61157
61126: LD_INT 304
61128: DOUBLE
61129: EQUAL
61130: IFTRUE 61134
61132: GO 61156
61134: POP
// hHackTeleport ( unit , x , y ) ; end ;
61135: LD_VAR 0 2
61139: PPUSH
61140: LD_VAR 0 4
61144: PPUSH
61145: LD_VAR 0 5
61149: PPUSH
61150: CALL 62921 0 3
61154: GO 61157
61156: POP
// end ;
61157: LD_VAR 0 12
61161: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61162: LD_INT 0
61164: PPUSH
61165: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61166: LD_VAR 0 1
61170: PUSH
61171: LD_INT 1
61173: LESS
61174: PUSH
61175: LD_VAR 0 1
61179: PUSH
61180: LD_INT 3
61182: GREATER
61183: OR
61184: PUSH
61185: LD_VAR 0 5
61189: PPUSH
61190: LD_VAR 0 6
61194: PPUSH
61195: CALL_OW 428
61199: OR
61200: IFFALSE 61204
// exit ;
61202: GO 61924
// uc_side := your_side ;
61204: LD_ADDR_OWVAR 20
61208: PUSH
61209: LD_OWVAR 2
61213: ST_TO_ADDR
// uc_nation := nation ;
61214: LD_ADDR_OWVAR 21
61218: PUSH
61219: LD_VAR 0 1
61223: ST_TO_ADDR
// bc_level = 1 ;
61224: LD_ADDR_OWVAR 43
61228: PUSH
61229: LD_INT 1
61231: ST_TO_ADDR
// case btype of 1 :
61232: LD_VAR 0 2
61236: PUSH
61237: LD_INT 1
61239: DOUBLE
61240: EQUAL
61241: IFTRUE 61245
61243: GO 61256
61245: POP
// bc_type := b_depot ; 2 :
61246: LD_ADDR_OWVAR 42
61250: PUSH
61251: LD_INT 0
61253: ST_TO_ADDR
61254: GO 61868
61256: LD_INT 2
61258: DOUBLE
61259: EQUAL
61260: IFTRUE 61264
61262: GO 61275
61264: POP
// bc_type := b_warehouse ; 3 :
61265: LD_ADDR_OWVAR 42
61269: PUSH
61270: LD_INT 1
61272: ST_TO_ADDR
61273: GO 61868
61275: LD_INT 3
61277: DOUBLE
61278: EQUAL
61279: IFTRUE 61283
61281: GO 61294
61283: POP
// bc_type := b_lab ; 4 .. 9 :
61284: LD_ADDR_OWVAR 42
61288: PUSH
61289: LD_INT 6
61291: ST_TO_ADDR
61292: GO 61868
61294: LD_INT 4
61296: DOUBLE
61297: GREATEREQUAL
61298: IFFALSE 61306
61300: LD_INT 9
61302: DOUBLE
61303: LESSEQUAL
61304: IFTRUE 61308
61306: GO 61360
61308: POP
// begin bc_type := b_lab_half ;
61309: LD_ADDR_OWVAR 42
61313: PUSH
61314: LD_INT 7
61316: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61317: LD_ADDR_OWVAR 44
61321: PUSH
61322: LD_INT 10
61324: PUSH
61325: LD_INT 11
61327: PUSH
61328: LD_INT 12
61330: PUSH
61331: LD_INT 15
61333: PUSH
61334: LD_INT 14
61336: PUSH
61337: LD_INT 13
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: PUSH
61348: LD_VAR 0 2
61352: PUSH
61353: LD_INT 3
61355: MINUS
61356: ARRAY
61357: ST_TO_ADDR
// end ; 10 .. 13 :
61358: GO 61868
61360: LD_INT 10
61362: DOUBLE
61363: GREATEREQUAL
61364: IFFALSE 61372
61366: LD_INT 13
61368: DOUBLE
61369: LESSEQUAL
61370: IFTRUE 61374
61372: GO 61451
61374: POP
// begin bc_type := b_lab_full ;
61375: LD_ADDR_OWVAR 42
61379: PUSH
61380: LD_INT 8
61382: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
61383: LD_ADDR_OWVAR 44
61387: PUSH
61388: LD_INT 10
61390: PUSH
61391: LD_INT 12
61393: PUSH
61394: LD_INT 14
61396: PUSH
61397: LD_INT 13
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: PUSH
61406: LD_VAR 0 2
61410: PUSH
61411: LD_INT 9
61413: MINUS
61414: ARRAY
61415: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61416: LD_ADDR_OWVAR 45
61420: PUSH
61421: LD_INT 11
61423: PUSH
61424: LD_INT 15
61426: PUSH
61427: LD_INT 12
61429: PUSH
61430: LD_INT 15
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: PUSH
61439: LD_VAR 0 2
61443: PUSH
61444: LD_INT 9
61446: MINUS
61447: ARRAY
61448: ST_TO_ADDR
// end ; 14 :
61449: GO 61868
61451: LD_INT 14
61453: DOUBLE
61454: EQUAL
61455: IFTRUE 61459
61457: GO 61470
61459: POP
// bc_type := b_workshop ; 15 :
61460: LD_ADDR_OWVAR 42
61464: PUSH
61465: LD_INT 2
61467: ST_TO_ADDR
61468: GO 61868
61470: LD_INT 15
61472: DOUBLE
61473: EQUAL
61474: IFTRUE 61478
61476: GO 61489
61478: POP
// bc_type := b_factory ; 16 :
61479: LD_ADDR_OWVAR 42
61483: PUSH
61484: LD_INT 3
61486: ST_TO_ADDR
61487: GO 61868
61489: LD_INT 16
61491: DOUBLE
61492: EQUAL
61493: IFTRUE 61497
61495: GO 61508
61497: POP
// bc_type := b_ext_gun ; 17 :
61498: LD_ADDR_OWVAR 42
61502: PUSH
61503: LD_INT 17
61505: ST_TO_ADDR
61506: GO 61868
61508: LD_INT 17
61510: DOUBLE
61511: EQUAL
61512: IFTRUE 61516
61514: GO 61544
61516: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61517: LD_ADDR_OWVAR 42
61521: PUSH
61522: LD_INT 19
61524: PUSH
61525: LD_INT 23
61527: PUSH
61528: LD_INT 19
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: PUSH
61536: LD_VAR 0 1
61540: ARRAY
61541: ST_TO_ADDR
61542: GO 61868
61544: LD_INT 18
61546: DOUBLE
61547: EQUAL
61548: IFTRUE 61552
61550: GO 61563
61552: POP
// bc_type := b_ext_radar ; 19 :
61553: LD_ADDR_OWVAR 42
61557: PUSH
61558: LD_INT 20
61560: ST_TO_ADDR
61561: GO 61868
61563: LD_INT 19
61565: DOUBLE
61566: EQUAL
61567: IFTRUE 61571
61569: GO 61582
61571: POP
// bc_type := b_ext_radio ; 20 :
61572: LD_ADDR_OWVAR 42
61576: PUSH
61577: LD_INT 22
61579: ST_TO_ADDR
61580: GO 61868
61582: LD_INT 20
61584: DOUBLE
61585: EQUAL
61586: IFTRUE 61590
61588: GO 61601
61590: POP
// bc_type := b_ext_siberium ; 21 :
61591: LD_ADDR_OWVAR 42
61595: PUSH
61596: LD_INT 21
61598: ST_TO_ADDR
61599: GO 61868
61601: LD_INT 21
61603: DOUBLE
61604: EQUAL
61605: IFTRUE 61609
61607: GO 61620
61609: POP
// bc_type := b_ext_computer ; 22 :
61610: LD_ADDR_OWVAR 42
61614: PUSH
61615: LD_INT 24
61617: ST_TO_ADDR
61618: GO 61868
61620: LD_INT 22
61622: DOUBLE
61623: EQUAL
61624: IFTRUE 61628
61626: GO 61639
61628: POP
// bc_type := b_ext_track ; 23 :
61629: LD_ADDR_OWVAR 42
61633: PUSH
61634: LD_INT 16
61636: ST_TO_ADDR
61637: GO 61868
61639: LD_INT 23
61641: DOUBLE
61642: EQUAL
61643: IFTRUE 61647
61645: GO 61658
61647: POP
// bc_type := b_ext_laser ; 24 :
61648: LD_ADDR_OWVAR 42
61652: PUSH
61653: LD_INT 25
61655: ST_TO_ADDR
61656: GO 61868
61658: LD_INT 24
61660: DOUBLE
61661: EQUAL
61662: IFTRUE 61666
61664: GO 61677
61666: POP
// bc_type := b_control_tower ; 25 :
61667: LD_ADDR_OWVAR 42
61671: PUSH
61672: LD_INT 36
61674: ST_TO_ADDR
61675: GO 61868
61677: LD_INT 25
61679: DOUBLE
61680: EQUAL
61681: IFTRUE 61685
61683: GO 61696
61685: POP
// bc_type := b_breastwork ; 26 :
61686: LD_ADDR_OWVAR 42
61690: PUSH
61691: LD_INT 31
61693: ST_TO_ADDR
61694: GO 61868
61696: LD_INT 26
61698: DOUBLE
61699: EQUAL
61700: IFTRUE 61704
61702: GO 61715
61704: POP
// bc_type := b_bunker ; 27 :
61705: LD_ADDR_OWVAR 42
61709: PUSH
61710: LD_INT 32
61712: ST_TO_ADDR
61713: GO 61868
61715: LD_INT 27
61717: DOUBLE
61718: EQUAL
61719: IFTRUE 61723
61721: GO 61734
61723: POP
// bc_type := b_turret ; 28 :
61724: LD_ADDR_OWVAR 42
61728: PUSH
61729: LD_INT 33
61731: ST_TO_ADDR
61732: GO 61868
61734: LD_INT 28
61736: DOUBLE
61737: EQUAL
61738: IFTRUE 61742
61740: GO 61753
61742: POP
// bc_type := b_armoury ; 29 :
61743: LD_ADDR_OWVAR 42
61747: PUSH
61748: LD_INT 4
61750: ST_TO_ADDR
61751: GO 61868
61753: LD_INT 29
61755: DOUBLE
61756: EQUAL
61757: IFTRUE 61761
61759: GO 61772
61761: POP
// bc_type := b_barracks ; 30 :
61762: LD_ADDR_OWVAR 42
61766: PUSH
61767: LD_INT 5
61769: ST_TO_ADDR
61770: GO 61868
61772: LD_INT 30
61774: DOUBLE
61775: EQUAL
61776: IFTRUE 61780
61778: GO 61791
61780: POP
// bc_type := b_solar_power ; 31 :
61781: LD_ADDR_OWVAR 42
61785: PUSH
61786: LD_INT 27
61788: ST_TO_ADDR
61789: GO 61868
61791: LD_INT 31
61793: DOUBLE
61794: EQUAL
61795: IFTRUE 61799
61797: GO 61810
61799: POP
// bc_type := b_oil_power ; 32 :
61800: LD_ADDR_OWVAR 42
61804: PUSH
61805: LD_INT 26
61807: ST_TO_ADDR
61808: GO 61868
61810: LD_INT 32
61812: DOUBLE
61813: EQUAL
61814: IFTRUE 61818
61816: GO 61829
61818: POP
// bc_type := b_siberite_power ; 33 :
61819: LD_ADDR_OWVAR 42
61823: PUSH
61824: LD_INT 28
61826: ST_TO_ADDR
61827: GO 61868
61829: LD_INT 33
61831: DOUBLE
61832: EQUAL
61833: IFTRUE 61837
61835: GO 61848
61837: POP
// bc_type := b_oil_mine ; 34 :
61838: LD_ADDR_OWVAR 42
61842: PUSH
61843: LD_INT 29
61845: ST_TO_ADDR
61846: GO 61868
61848: LD_INT 34
61850: DOUBLE
61851: EQUAL
61852: IFTRUE 61856
61854: GO 61867
61856: POP
// bc_type := b_siberite_mine ; end ;
61857: LD_ADDR_OWVAR 42
61861: PUSH
61862: LD_INT 30
61864: ST_TO_ADDR
61865: GO 61868
61867: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61868: LD_ADDR_VAR 0 8
61872: PUSH
61873: LD_VAR 0 5
61877: PPUSH
61878: LD_VAR 0 6
61882: PPUSH
61883: LD_VAR 0 3
61887: PPUSH
61888: CALL_OW 47
61892: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61893: LD_OWVAR 42
61897: PUSH
61898: LD_INT 32
61900: PUSH
61901: LD_INT 33
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: IN
61908: IFFALSE 61924
// PlaceWeaponTurret ( b , weapon ) ;
61910: LD_VAR 0 8
61914: PPUSH
61915: LD_VAR 0 4
61919: PPUSH
61920: CALL_OW 431
// end ;
61924: LD_VAR 0 7
61928: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61929: LD_INT 0
61931: PPUSH
61932: PPUSH
61933: PPUSH
61934: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61935: LD_ADDR_VAR 0 4
61939: PUSH
61940: LD_INT 22
61942: PUSH
61943: LD_OWVAR 2
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 30
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 30
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: LIST
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PPUSH
61984: CALL_OW 69
61988: ST_TO_ADDR
// if not tmp then
61989: LD_VAR 0 4
61993: NOT
61994: IFFALSE 61998
// exit ;
61996: GO 62057
// for i in tmp do
61998: LD_ADDR_VAR 0 2
62002: PUSH
62003: LD_VAR 0 4
62007: PUSH
62008: FOR_IN
62009: IFFALSE 62055
// for j = 1 to 3 do
62011: LD_ADDR_VAR 0 3
62015: PUSH
62016: DOUBLE
62017: LD_INT 1
62019: DEC
62020: ST_TO_ADDR
62021: LD_INT 3
62023: PUSH
62024: FOR_TO
62025: IFFALSE 62051
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62027: LD_VAR 0 2
62031: PPUSH
62032: CALL_OW 274
62036: PPUSH
62037: LD_VAR 0 3
62041: PPUSH
62042: LD_INT 99999
62044: PPUSH
62045: CALL_OW 277
62049: GO 62024
62051: POP
62052: POP
62053: GO 62008
62055: POP
62056: POP
// end ;
62057: LD_VAR 0 1
62061: RET
// export function hHackSetLevel10 ; var i , j ; begin
62062: LD_INT 0
62064: PPUSH
62065: PPUSH
62066: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62067: LD_ADDR_VAR 0 2
62071: PUSH
62072: LD_INT 21
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PPUSH
62082: CALL_OW 69
62086: PUSH
62087: FOR_IN
62088: IFFALSE 62140
// if IsSelected ( i ) then
62090: LD_VAR 0 2
62094: PPUSH
62095: CALL_OW 306
62099: IFFALSE 62138
// begin for j := 1 to 4 do
62101: LD_ADDR_VAR 0 3
62105: PUSH
62106: DOUBLE
62107: LD_INT 1
62109: DEC
62110: ST_TO_ADDR
62111: LD_INT 4
62113: PUSH
62114: FOR_TO
62115: IFFALSE 62136
// SetSkill ( i , j , 10 ) ;
62117: LD_VAR 0 2
62121: PPUSH
62122: LD_VAR 0 3
62126: PPUSH
62127: LD_INT 10
62129: PPUSH
62130: CALL_OW 237
62134: GO 62114
62136: POP
62137: POP
// end ;
62138: GO 62087
62140: POP
62141: POP
// end ;
62142: LD_VAR 0 1
62146: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62147: LD_INT 0
62149: PPUSH
62150: PPUSH
62151: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62152: LD_ADDR_VAR 0 2
62156: PUSH
62157: LD_INT 22
62159: PUSH
62160: LD_OWVAR 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 21
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PPUSH
62183: CALL_OW 69
62187: PUSH
62188: FOR_IN
62189: IFFALSE 62230
// begin for j := 1 to 4 do
62191: LD_ADDR_VAR 0 3
62195: PUSH
62196: DOUBLE
62197: LD_INT 1
62199: DEC
62200: ST_TO_ADDR
62201: LD_INT 4
62203: PUSH
62204: FOR_TO
62205: IFFALSE 62226
// SetSkill ( i , j , 10 ) ;
62207: LD_VAR 0 2
62211: PPUSH
62212: LD_VAR 0 3
62216: PPUSH
62217: LD_INT 10
62219: PPUSH
62220: CALL_OW 237
62224: GO 62204
62226: POP
62227: POP
// end ;
62228: GO 62188
62230: POP
62231: POP
// end ;
62232: LD_VAR 0 1
62236: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62237: LD_INT 0
62239: PPUSH
// uc_side := your_side ;
62240: LD_ADDR_OWVAR 20
62244: PUSH
62245: LD_OWVAR 2
62249: ST_TO_ADDR
// uc_nation := nation ;
62250: LD_ADDR_OWVAR 21
62254: PUSH
62255: LD_VAR 0 1
62259: ST_TO_ADDR
// InitHc ;
62260: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62264: LD_INT 0
62266: PPUSH
62267: LD_VAR 0 2
62271: PPUSH
62272: LD_VAR 0 3
62276: PPUSH
62277: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62281: LD_VAR 0 4
62285: PPUSH
62286: LD_VAR 0 5
62290: PPUSH
62291: CALL_OW 428
62295: PUSH
62296: LD_INT 0
62298: EQUAL
62299: IFFALSE 62323
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62301: CALL_OW 44
62305: PPUSH
62306: LD_VAR 0 4
62310: PPUSH
62311: LD_VAR 0 5
62315: PPUSH
62316: LD_INT 1
62318: PPUSH
62319: CALL_OW 48
// end ;
62323: LD_VAR 0 6
62327: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62328: LD_INT 0
62330: PPUSH
62331: PPUSH
// uc_side := your_side ;
62332: LD_ADDR_OWVAR 20
62336: PUSH
62337: LD_OWVAR 2
62341: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62342: LD_VAR 0 1
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: LD_INT 3
62355: PUSH
62356: LD_INT 4
62358: PUSH
62359: LD_INT 5
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: IN
62369: IFFALSE 62381
// uc_nation := nation_american else
62371: LD_ADDR_OWVAR 21
62375: PUSH
62376: LD_INT 1
62378: ST_TO_ADDR
62379: GO 62424
// if chassis in [ 11 , 12 , 13 , 14 ] then
62381: LD_VAR 0 1
62385: PUSH
62386: LD_INT 11
62388: PUSH
62389: LD_INT 12
62391: PUSH
62392: LD_INT 13
62394: PUSH
62395: LD_INT 14
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: IN
62404: IFFALSE 62416
// uc_nation := nation_arabian else
62406: LD_ADDR_OWVAR 21
62410: PUSH
62411: LD_INT 2
62413: ST_TO_ADDR
62414: GO 62424
// uc_nation := nation_russian ;
62416: LD_ADDR_OWVAR 21
62420: PUSH
62421: LD_INT 3
62423: ST_TO_ADDR
// vc_chassis := chassis ;
62424: LD_ADDR_OWVAR 37
62428: PUSH
62429: LD_VAR 0 1
62433: ST_TO_ADDR
// vc_engine := engine ;
62434: LD_ADDR_OWVAR 39
62438: PUSH
62439: LD_VAR 0 2
62443: ST_TO_ADDR
// vc_control := control ;
62444: LD_ADDR_OWVAR 38
62448: PUSH
62449: LD_VAR 0 3
62453: ST_TO_ADDR
// vc_weapon := weapon ;
62454: LD_ADDR_OWVAR 40
62458: PUSH
62459: LD_VAR 0 4
62463: ST_TO_ADDR
// un := CreateVehicle ;
62464: LD_ADDR_VAR 0 8
62468: PUSH
62469: CALL_OW 45
62473: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62474: LD_VAR 0 8
62478: PPUSH
62479: LD_INT 0
62481: PPUSH
62482: LD_INT 5
62484: PPUSH
62485: CALL_OW 12
62489: PPUSH
62490: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62494: LD_VAR 0 8
62498: PPUSH
62499: LD_VAR 0 5
62503: PPUSH
62504: LD_VAR 0 6
62508: PPUSH
62509: LD_INT 1
62511: PPUSH
62512: CALL_OW 48
// end ;
62516: LD_VAR 0 7
62520: RET
// export hInvincible ; every 1 do
62521: GO 62523
62523: DISABLE
// hInvincible := [ ] ;
62524: LD_ADDR_EXP 77
62528: PUSH
62529: EMPTY
62530: ST_TO_ADDR
62531: END
// every 10 do var i ;
62532: GO 62534
62534: DISABLE
62535: LD_INT 0
62537: PPUSH
// begin enable ;
62538: ENABLE
// if not hInvincible then
62539: LD_EXP 77
62543: NOT
62544: IFFALSE 62548
// exit ;
62546: GO 62592
// for i in hInvincible do
62548: LD_ADDR_VAR 0 1
62552: PUSH
62553: LD_EXP 77
62557: PUSH
62558: FOR_IN
62559: IFFALSE 62590
// if GetLives ( i ) < 1000 then
62561: LD_VAR 0 1
62565: PPUSH
62566: CALL_OW 256
62570: PUSH
62571: LD_INT 1000
62573: LESS
62574: IFFALSE 62588
// SetLives ( i , 1000 ) ;
62576: LD_VAR 0 1
62580: PPUSH
62581: LD_INT 1000
62583: PPUSH
62584: CALL_OW 234
62588: GO 62558
62590: POP
62591: POP
// end ;
62592: PPOPN 1
62594: END
// export function hHackInvincible ; var i ; begin
62595: LD_INT 0
62597: PPUSH
62598: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62599: LD_ADDR_VAR 0 2
62603: PUSH
62604: LD_INT 2
62606: PUSH
62607: LD_INT 21
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 21
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: PPUSH
62632: CALL_OW 69
62636: PUSH
62637: FOR_IN
62638: IFFALSE 62699
// if IsSelected ( i ) then
62640: LD_VAR 0 2
62644: PPUSH
62645: CALL_OW 306
62649: IFFALSE 62697
// begin if i in hInvincible then
62651: LD_VAR 0 2
62655: PUSH
62656: LD_EXP 77
62660: IN
62661: IFFALSE 62681
// hInvincible := hInvincible diff i else
62663: LD_ADDR_EXP 77
62667: PUSH
62668: LD_EXP 77
62672: PUSH
62673: LD_VAR 0 2
62677: DIFF
62678: ST_TO_ADDR
62679: GO 62697
// hInvincible := hInvincible union i ;
62681: LD_ADDR_EXP 77
62685: PUSH
62686: LD_EXP 77
62690: PUSH
62691: LD_VAR 0 2
62695: UNION
62696: ST_TO_ADDR
// end ;
62697: GO 62637
62699: POP
62700: POP
// end ;
62701: LD_VAR 0 1
62705: RET
// export function hHackInvisible ; var i , j ; begin
62706: LD_INT 0
62708: PPUSH
62709: PPUSH
62710: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62711: LD_ADDR_VAR 0 2
62715: PUSH
62716: LD_INT 21
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PPUSH
62726: CALL_OW 69
62730: PUSH
62731: FOR_IN
62732: IFFALSE 62756
// if IsSelected ( i ) then
62734: LD_VAR 0 2
62738: PPUSH
62739: CALL_OW 306
62743: IFFALSE 62754
// ComForceInvisible ( i ) ;
62745: LD_VAR 0 2
62749: PPUSH
62750: CALL_OW 496
62754: GO 62731
62756: POP
62757: POP
// end ;
62758: LD_VAR 0 1
62762: RET
// export function hHackChangeYourSide ; begin
62763: LD_INT 0
62765: PPUSH
// if your_side = 8 then
62766: LD_OWVAR 2
62770: PUSH
62771: LD_INT 8
62773: EQUAL
62774: IFFALSE 62786
// your_side := 0 else
62776: LD_ADDR_OWVAR 2
62780: PUSH
62781: LD_INT 0
62783: ST_TO_ADDR
62784: GO 62800
// your_side := your_side + 1 ;
62786: LD_ADDR_OWVAR 2
62790: PUSH
62791: LD_OWVAR 2
62795: PUSH
62796: LD_INT 1
62798: PLUS
62799: ST_TO_ADDR
// end ;
62800: LD_VAR 0 1
62804: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62805: LD_INT 0
62807: PPUSH
62808: PPUSH
62809: PPUSH
// for i in all_units do
62810: LD_ADDR_VAR 0 2
62814: PUSH
62815: LD_OWVAR 3
62819: PUSH
62820: FOR_IN
62821: IFFALSE 62899
// if IsSelected ( i ) then
62823: LD_VAR 0 2
62827: PPUSH
62828: CALL_OW 306
62832: IFFALSE 62897
// begin j := GetSide ( i ) ;
62834: LD_ADDR_VAR 0 3
62838: PUSH
62839: LD_VAR 0 2
62843: PPUSH
62844: CALL_OW 255
62848: ST_TO_ADDR
// if j = 8 then
62849: LD_VAR 0 3
62853: PUSH
62854: LD_INT 8
62856: EQUAL
62857: IFFALSE 62869
// j := 0 else
62859: LD_ADDR_VAR 0 3
62863: PUSH
62864: LD_INT 0
62866: ST_TO_ADDR
62867: GO 62883
// j := j + 1 ;
62869: LD_ADDR_VAR 0 3
62873: PUSH
62874: LD_VAR 0 3
62878: PUSH
62879: LD_INT 1
62881: PLUS
62882: ST_TO_ADDR
// SetSide ( i , j ) ;
62883: LD_VAR 0 2
62887: PPUSH
62888: LD_VAR 0 3
62892: PPUSH
62893: CALL_OW 235
// end ;
62897: GO 62820
62899: POP
62900: POP
// end ;
62901: LD_VAR 0 1
62905: RET
// export function hHackFog ; begin
62906: LD_INT 0
62908: PPUSH
// FogOff ( true ) ;
62909: LD_INT 1
62911: PPUSH
62912: CALL_OW 344
// end ;
62916: LD_VAR 0 1
62920: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62921: LD_INT 0
62923: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62924: LD_VAR 0 1
62928: PPUSH
62929: LD_VAR 0 2
62933: PPUSH
62934: LD_VAR 0 3
62938: PPUSH
62939: LD_INT 1
62941: PPUSH
62942: LD_INT 1
62944: PPUSH
62945: CALL_OW 483
// CenterOnXY ( x , y ) ;
62949: LD_VAR 0 2
62953: PPUSH
62954: LD_VAR 0 3
62958: PPUSH
62959: CALL_OW 84
// end ;
62963: LD_VAR 0 4
62967: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62968: LD_INT 0
62970: PPUSH
62971: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62972: LD_VAR 0 1
62976: NOT
62977: PUSH
62978: LD_VAR 0 2
62982: PPUSH
62983: LD_VAR 0 3
62987: PPUSH
62988: CALL_OW 488
62992: NOT
62993: OR
62994: PUSH
62995: LD_VAR 0 1
62999: PPUSH
63000: CALL_OW 266
63004: PUSH
63005: LD_INT 3
63007: NONEQUAL
63008: PUSH
63009: LD_VAR 0 1
63013: PPUSH
63014: CALL_OW 247
63018: PUSH
63019: LD_INT 1
63021: EQUAL
63022: NOT
63023: AND
63024: OR
63025: IFFALSE 63029
// exit ;
63027: GO 63178
// if GetType ( factory ) = unit_human then
63029: LD_VAR 0 1
63033: PPUSH
63034: CALL_OW 247
63038: PUSH
63039: LD_INT 1
63041: EQUAL
63042: IFFALSE 63059
// factory := IsInUnit ( factory ) ;
63044: LD_ADDR_VAR 0 1
63048: PUSH
63049: LD_VAR 0 1
63053: PPUSH
63054: CALL_OW 310
63058: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63059: LD_VAR 0 1
63063: PPUSH
63064: CALL_OW 266
63068: PUSH
63069: LD_INT 3
63071: NONEQUAL
63072: IFFALSE 63076
// exit ;
63074: GO 63178
// if HexInfo ( x , y ) = factory then
63076: LD_VAR 0 2
63080: PPUSH
63081: LD_VAR 0 3
63085: PPUSH
63086: CALL_OW 428
63090: PUSH
63091: LD_VAR 0 1
63095: EQUAL
63096: IFFALSE 63123
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
63098: LD_ADDR_EXP 78
63102: PUSH
63103: LD_EXP 78
63107: PPUSH
63108: LD_VAR 0 1
63112: PPUSH
63113: LD_INT 0
63115: PPUSH
63116: CALL_OW 1
63120: ST_TO_ADDR
63121: GO 63174
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
63123: LD_ADDR_EXP 78
63127: PUSH
63128: LD_EXP 78
63132: PPUSH
63133: LD_VAR 0 1
63137: PPUSH
63138: LD_VAR 0 1
63142: PPUSH
63143: CALL_OW 255
63147: PUSH
63148: LD_VAR 0 1
63152: PUSH
63153: LD_VAR 0 2
63157: PUSH
63158: LD_VAR 0 3
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: PPUSH
63169: CALL_OW 1
63173: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63174: CALL 63183 0 0
// end ;
63178: LD_VAR 0 4
63182: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63183: LD_INT 0
63185: PPUSH
63186: PPUSH
63187: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63188: LD_STRING resetFactoryWaypoint();
63190: PPUSH
63191: CALL_OW 559
// if factoryWaypoints then
63195: LD_EXP 78
63199: IFFALSE 63325
// begin list := PrepareArray ( factoryWaypoints ) ;
63201: LD_ADDR_VAR 0 3
63205: PUSH
63206: LD_EXP 78
63210: PPUSH
63211: CALL 43996 0 1
63215: ST_TO_ADDR
// for i := 1 to list do
63216: LD_ADDR_VAR 0 2
63220: PUSH
63221: DOUBLE
63222: LD_INT 1
63224: DEC
63225: ST_TO_ADDR
63226: LD_VAR 0 3
63230: PUSH
63231: FOR_TO
63232: IFFALSE 63323
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63234: LD_STRING setFactoryWaypointXY(
63236: PUSH
63237: LD_VAR 0 3
63241: PUSH
63242: LD_VAR 0 2
63246: ARRAY
63247: PUSH
63248: LD_INT 1
63250: ARRAY
63251: STR
63252: PUSH
63253: LD_STRING ,
63255: STR
63256: PUSH
63257: LD_VAR 0 3
63261: PUSH
63262: LD_VAR 0 2
63266: ARRAY
63267: PUSH
63268: LD_INT 2
63270: ARRAY
63271: STR
63272: PUSH
63273: LD_STRING ,
63275: STR
63276: PUSH
63277: LD_VAR 0 3
63281: PUSH
63282: LD_VAR 0 2
63286: ARRAY
63287: PUSH
63288: LD_INT 3
63290: ARRAY
63291: STR
63292: PUSH
63293: LD_STRING ,
63295: STR
63296: PUSH
63297: LD_VAR 0 3
63301: PUSH
63302: LD_VAR 0 2
63306: ARRAY
63307: PUSH
63308: LD_INT 4
63310: ARRAY
63311: STR
63312: PUSH
63313: LD_STRING )
63315: STR
63316: PPUSH
63317: CALL_OW 559
63321: GO 63231
63323: POP
63324: POP
// end ; end ;
63325: LD_VAR 0 1
63329: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63330: LD_INT 0
63332: PPUSH
// if HexInfo ( x , y ) = warehouse then
63333: LD_VAR 0 2
63337: PPUSH
63338: LD_VAR 0 3
63342: PPUSH
63343: CALL_OW 428
63347: PUSH
63348: LD_VAR 0 1
63352: EQUAL
63353: IFFALSE 63380
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63355: LD_ADDR_EXP 79
63359: PUSH
63360: LD_EXP 79
63364: PPUSH
63365: LD_VAR 0 1
63369: PPUSH
63370: LD_INT 0
63372: PPUSH
63373: CALL_OW 1
63377: ST_TO_ADDR
63378: GO 63431
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63380: LD_ADDR_EXP 79
63384: PUSH
63385: LD_EXP 79
63389: PPUSH
63390: LD_VAR 0 1
63394: PPUSH
63395: LD_VAR 0 1
63399: PPUSH
63400: CALL_OW 255
63404: PUSH
63405: LD_VAR 0 1
63409: PUSH
63410: LD_VAR 0 2
63414: PUSH
63415: LD_VAR 0 3
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: PPUSH
63426: CALL_OW 1
63430: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63431: CALL 63440 0 0
// end ;
63435: LD_VAR 0 4
63439: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63440: LD_INT 0
63442: PPUSH
63443: PPUSH
63444: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63445: LD_STRING resetWarehouseGatheringPoints();
63447: PPUSH
63448: CALL_OW 559
// if warehouseGatheringPoints then
63452: LD_EXP 79
63456: IFFALSE 63582
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63458: LD_ADDR_VAR 0 3
63462: PUSH
63463: LD_EXP 79
63467: PPUSH
63468: CALL 43996 0 1
63472: ST_TO_ADDR
// for i := 1 to list do
63473: LD_ADDR_VAR 0 2
63477: PUSH
63478: DOUBLE
63479: LD_INT 1
63481: DEC
63482: ST_TO_ADDR
63483: LD_VAR 0 3
63487: PUSH
63488: FOR_TO
63489: IFFALSE 63580
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63491: LD_STRING setWarehouseGatheringPointXY(
63493: PUSH
63494: LD_VAR 0 3
63498: PUSH
63499: LD_VAR 0 2
63503: ARRAY
63504: PUSH
63505: LD_INT 1
63507: ARRAY
63508: STR
63509: PUSH
63510: LD_STRING ,
63512: STR
63513: PUSH
63514: LD_VAR 0 3
63518: PUSH
63519: LD_VAR 0 2
63523: ARRAY
63524: PUSH
63525: LD_INT 2
63527: ARRAY
63528: STR
63529: PUSH
63530: LD_STRING ,
63532: STR
63533: PUSH
63534: LD_VAR 0 3
63538: PUSH
63539: LD_VAR 0 2
63543: ARRAY
63544: PUSH
63545: LD_INT 3
63547: ARRAY
63548: STR
63549: PUSH
63550: LD_STRING ,
63552: STR
63553: PUSH
63554: LD_VAR 0 3
63558: PUSH
63559: LD_VAR 0 2
63563: ARRAY
63564: PUSH
63565: LD_INT 4
63567: ARRAY
63568: STR
63569: PUSH
63570: LD_STRING )
63572: STR
63573: PPUSH
63574: CALL_OW 559
63578: GO 63488
63580: POP
63581: POP
// end ; end ;
63582: LD_VAR 0 1
63586: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63587: LD_EXP 79
63591: IFFALSE 64276
63593: GO 63595
63595: DISABLE
63596: LD_INT 0
63598: PPUSH
63599: PPUSH
63600: PPUSH
63601: PPUSH
63602: PPUSH
63603: PPUSH
63604: PPUSH
63605: PPUSH
63606: PPUSH
// begin enable ;
63607: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63608: LD_ADDR_VAR 0 3
63612: PUSH
63613: LD_EXP 79
63617: PPUSH
63618: CALL 43996 0 1
63622: ST_TO_ADDR
// if not list then
63623: LD_VAR 0 3
63627: NOT
63628: IFFALSE 63632
// exit ;
63630: GO 64276
// for i := 1 to list do
63632: LD_ADDR_VAR 0 1
63636: PUSH
63637: DOUBLE
63638: LD_INT 1
63640: DEC
63641: ST_TO_ADDR
63642: LD_VAR 0 3
63646: PUSH
63647: FOR_TO
63648: IFFALSE 64274
// begin depot := list [ i ] [ 2 ] ;
63650: LD_ADDR_VAR 0 8
63654: PUSH
63655: LD_VAR 0 3
63659: PUSH
63660: LD_VAR 0 1
63664: ARRAY
63665: PUSH
63666: LD_INT 2
63668: ARRAY
63669: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63670: LD_ADDR_VAR 0 5
63674: PUSH
63675: LD_VAR 0 3
63679: PUSH
63680: LD_VAR 0 1
63684: ARRAY
63685: PUSH
63686: LD_INT 1
63688: ARRAY
63689: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63690: LD_VAR 0 8
63694: PPUSH
63695: CALL_OW 301
63699: PUSH
63700: LD_VAR 0 5
63704: PUSH
63705: LD_VAR 0 8
63709: PPUSH
63710: CALL_OW 255
63714: NONEQUAL
63715: OR
63716: IFFALSE 63745
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63718: LD_ADDR_EXP 79
63722: PUSH
63723: LD_EXP 79
63727: PPUSH
63728: LD_VAR 0 8
63732: PPUSH
63733: LD_INT 0
63735: PPUSH
63736: CALL_OW 1
63740: ST_TO_ADDR
// exit ;
63741: POP
63742: POP
63743: GO 64276
// end ; x := list [ i ] [ 3 ] ;
63745: LD_ADDR_VAR 0 6
63749: PUSH
63750: LD_VAR 0 3
63754: PUSH
63755: LD_VAR 0 1
63759: ARRAY
63760: PUSH
63761: LD_INT 3
63763: ARRAY
63764: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63765: LD_ADDR_VAR 0 7
63769: PUSH
63770: LD_VAR 0 3
63774: PUSH
63775: LD_VAR 0 1
63779: ARRAY
63780: PUSH
63781: LD_INT 4
63783: ARRAY
63784: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63785: LD_ADDR_VAR 0 9
63789: PUSH
63790: LD_VAR 0 6
63794: PPUSH
63795: LD_VAR 0 7
63799: PPUSH
63800: LD_INT 16
63802: PPUSH
63803: CALL 42584 0 3
63807: ST_TO_ADDR
// if not cratesNearbyPoint then
63808: LD_VAR 0 9
63812: NOT
63813: IFFALSE 63819
// exit ;
63815: POP
63816: POP
63817: GO 64276
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63819: LD_ADDR_VAR 0 4
63823: PUSH
63824: LD_INT 22
63826: PUSH
63827: LD_VAR 0 5
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 3
63838: PUSH
63839: LD_INT 60
63841: PUSH
63842: EMPTY
63843: LIST
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 91
63851: PUSH
63852: LD_VAR 0 8
63856: PUSH
63857: LD_INT 6
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: LD_INT 25
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 25
63880: PUSH
63881: LD_INT 16
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: PPUSH
63899: CALL_OW 69
63903: PUSH
63904: LD_VAR 0 8
63908: PPUSH
63909: CALL_OW 313
63913: PPUSH
63914: LD_INT 3
63916: PUSH
63917: LD_INT 60
63919: PUSH
63920: EMPTY
63921: LIST
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 2
63929: PUSH
63930: LD_INT 25
63932: PUSH
63933: LD_INT 2
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 25
63942: PUSH
63943: LD_INT 16
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: LIST
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PPUSH
63959: CALL_OW 72
63963: UNION
63964: ST_TO_ADDR
// if tmp then
63965: LD_VAR 0 4
63969: IFFALSE 64049
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63971: LD_ADDR_VAR 0 4
63975: PUSH
63976: LD_VAR 0 4
63980: PPUSH
63981: LD_INT 3
63983: PPUSH
63984: CALL 40553 0 2
63988: ST_TO_ADDR
// for j in tmp do
63989: LD_ADDR_VAR 0 2
63993: PUSH
63994: LD_VAR 0 4
63998: PUSH
63999: FOR_IN
64000: IFFALSE 64043
// begin if IsInUnit ( j ) then
64002: LD_VAR 0 2
64006: PPUSH
64007: CALL_OW 310
64011: IFFALSE 64022
// ComExit ( j ) ;
64013: LD_VAR 0 2
64017: PPUSH
64018: CALL 40636 0 1
// AddComCollect ( j , x , y ) ;
64022: LD_VAR 0 2
64026: PPUSH
64027: LD_VAR 0 6
64031: PPUSH
64032: LD_VAR 0 7
64036: PPUSH
64037: CALL_OW 177
// end ;
64041: GO 63999
64043: POP
64044: POP
// exit ;
64045: POP
64046: POP
64047: GO 64276
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
64049: LD_ADDR_VAR 0 4
64053: PUSH
64054: LD_INT 22
64056: PUSH
64057: LD_VAR 0 5
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 91
64068: PUSH
64069: LD_VAR 0 8
64073: PUSH
64074: LD_INT 8
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: LD_INT 34
64087: PUSH
64088: LD_INT 12
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 34
64097: PUSH
64098: LD_INT 51
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 34
64107: PUSH
64108: LD_INT 32
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 34
64117: PUSH
64118: LD_INT 89
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: PPUSH
64137: CALL_OW 69
64141: ST_TO_ADDR
// if tmp then
64142: LD_VAR 0 4
64146: IFFALSE 64272
// begin for j in tmp do
64148: LD_ADDR_VAR 0 2
64152: PUSH
64153: LD_VAR 0 4
64157: PUSH
64158: FOR_IN
64159: IFFALSE 64270
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
64161: LD_VAR 0 2
64165: PPUSH
64166: CALL_OW 262
64170: PUSH
64171: LD_INT 3
64173: EQUAL
64174: PUSH
64175: LD_VAR 0 2
64179: PPUSH
64180: CALL_OW 261
64184: PUSH
64185: LD_INT 20
64187: GREATER
64188: OR
64189: PUSH
64190: LD_VAR 0 2
64194: PPUSH
64195: CALL_OW 314
64199: NOT
64200: AND
64201: PUSH
64202: LD_VAR 0 2
64206: PPUSH
64207: CALL_OW 263
64211: PUSH
64212: LD_INT 1
64214: NONEQUAL
64215: PUSH
64216: LD_VAR 0 2
64220: PPUSH
64221: CALL_OW 311
64225: OR
64226: AND
64227: IFFALSE 64268
// begin ComCollect ( j , x , y ) ;
64229: LD_VAR 0 2
64233: PPUSH
64234: LD_VAR 0 6
64238: PPUSH
64239: LD_VAR 0 7
64243: PPUSH
64244: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
64248: LD_VAR 0 2
64252: PPUSH
64253: LD_VAR 0 8
64257: PPUSH
64258: CALL_OW 172
// exit ;
64262: POP
64263: POP
64264: POP
64265: POP
64266: GO 64276
// end ;
64268: GO 64158
64270: POP
64271: POP
// end ; end ;
64272: GO 63647
64274: POP
64275: POP
// end ; end_of_file end_of_file
64276: PPOPN 9
64278: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64279: LD_VAR 0 1
64283: PUSH
64284: LD_INT 200
64286: DOUBLE
64287: GREATEREQUAL
64288: IFFALSE 64296
64290: LD_INT 299
64292: DOUBLE
64293: LESSEQUAL
64294: IFTRUE 64298
64296: GO 64330
64298: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64299: LD_VAR 0 1
64303: PPUSH
64304: LD_VAR 0 2
64308: PPUSH
64309: LD_VAR 0 3
64313: PPUSH
64314: LD_VAR 0 4
64318: PPUSH
64319: LD_VAR 0 5
64323: PPUSH
64324: CALL 44567 0 5
64328: GO 64407
64330: LD_INT 300
64332: DOUBLE
64333: GREATEREQUAL
64334: IFFALSE 64342
64336: LD_INT 399
64338: DOUBLE
64339: LESSEQUAL
64340: IFTRUE 64344
64342: GO 64406
64344: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64345: LD_VAR 0 1
64349: PPUSH
64350: LD_VAR 0 2
64354: PPUSH
64355: LD_VAR 0 3
64359: PPUSH
64360: LD_VAR 0 4
64364: PPUSH
64365: LD_VAR 0 5
64369: PPUSH
64370: LD_VAR 0 6
64374: PPUSH
64375: LD_VAR 0 7
64379: PPUSH
64380: LD_VAR 0 8
64384: PPUSH
64385: LD_VAR 0 9
64389: PPUSH
64390: LD_VAR 0 10
64394: PPUSH
64395: LD_VAR 0 11
64399: PPUSH
64400: CALL 60988 0 11
64404: GO 64407
64406: POP
// end ;
64407: PPOPN 11
64409: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64410: LD_VAR 0 1
64414: PPUSH
64415: LD_VAR 0 2
64419: PPUSH
64420: LD_VAR 0 3
64424: PPUSH
64425: LD_VAR 0 4
64429: PPUSH
64430: LD_VAR 0 5
64434: PPUSH
64435: CALL 44303 0 5
// end ; end_of_file
64439: PPOPN 5
64441: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64442: LD_VAR 0 1
64446: PPUSH
64447: LD_VAR 0 2
64451: PPUSH
64452: LD_VAR 0 3
64456: PPUSH
64457: LD_VAR 0 4
64461: PPUSH
64462: LD_VAR 0 5
64466: PPUSH
64467: LD_VAR 0 6
64471: PPUSH
64472: CALL 48608 0 6
// end ;
64476: PPOPN 6
64478: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64479: LD_INT 0
64481: PPUSH
// begin if not units then
64482: LD_VAR 0 1
64486: NOT
64487: IFFALSE 64491
// exit ;
64489: GO 64491
// end ;
64491: PPOPN 7
64493: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64494: CALL 48502 0 0
// end ;
64498: PPOPN 1
64500: END
