// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 63 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareAlliance ;
  37: CALL 79 0 0
// PrepareRussian ;
  41: CALL 446 0 0
// Action ;
  45: CALL 2366 0 0
// if debug then
  49: LD_EXP 1
  53: IFFALSE 62
// FogOff ( 7 ) ;
  55: LD_INT 7
  57: PPUSH
  58: CALL_OW 344
// end ;
  62: END
// export debug ; export function Init ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 1
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// end ; end_of_file
  74: LD_VAR 0 1
  78: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  79: LD_INT 0
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp := [ ] ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: EMPTY
  90: ST_TO_ADDR
// uc_side := 7 ;
  91: LD_ADDR_OWVAR 20
  95: PUSH
  96: LD_INT 7
  98: ST_TO_ADDR
// uc_nation := 1 ;
  99: LD_ADDR_OWVAR 21
 103: PUSH
 104: LD_INT 1
 106: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 107: LD_INT 5
 109: PPUSH
 110: LD_INT 3
 112: PPUSH
 113: LD_INT 3
 115: PPUSH
 116: LD_INT 99
 118: PPUSH
 119: LD_INT 100
 121: PPUSH
 122: CALL 7610 0 5
// allianceHack := CreateVehicle ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: CALL_OW 45
 135: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 136: LD_EXP 2
 140: PPUSH
 141: LD_INT 7
 143: PPUSH
 144: LD_INT 0
 146: PPUSH
 147: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 151: LD_INT 5
 153: PPUSH
 154: LD_INT 3
 156: PPUSH
 157: LD_INT 3
 159: PPUSH
 160: LD_INT 10
 162: PPUSH
 163: LD_INT 100
 165: PPUSH
 166: CALL 7610 0 5
// for i := 1 to 2 do
 170: LD_ADDR_VAR 0 2
 174: PUSH
 175: DOUBLE
 176: LD_INT 1
 178: DEC
 179: ST_TO_ADDR
 180: LD_INT 2
 182: PUSH
 183: FOR_TO
 184: IFFALSE 203
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 186: CALL_OW 45
 190: PPUSH
 191: LD_INT 7
 193: PPUSH
 194: LD_INT 0
 196: PPUSH
 197: CALL_OW 49
 201: GO 183
 203: POP
 204: POP
// uc_side := 4 ;
 205: LD_ADDR_OWVAR 20
 209: PUSH
 210: LD_INT 4
 212: ST_TO_ADDR
// uc_nation := 1 ;
 213: LD_ADDR_OWVAR 21
 217: PUSH
 218: LD_INT 1
 220: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 9
 226: PPUSH
 227: CALL_OW 383
// allianceMechanic := CreateHuman ;
 231: LD_ADDR_EXP 3
 235: PUSH
 236: CALL_OW 44
 240: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 241: LD_EXP 3
 245: PPUSH
 246: LD_INT 96
 248: PPUSH
 249: CALL_OW 52
// end ;
 253: LD_VAR 0 1
 257: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 258: LD_INT 0
 260: PPUSH
 261: PPUSH
 262: PPUSH
// uc_side := 7 ;
 263: LD_ADDR_OWVAR 20
 267: PUSH
 268: LD_INT 7
 270: ST_TO_ADDR
// uc_nation := 1 ;
 271: LD_ADDR_OWVAR 21
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 3
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: LD_OWVAR 67
 307: ARRAY
 308: PUSH
 309: FOR_TO
 310: IFFALSE 380
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 312: LD_INT 5
 314: PPUSH
 315: LD_INT 3
 317: PPUSH
 318: LD_INT 3
 320: PPUSH
 321: LD_INT 7
 323: PPUSH
 324: LD_INT 100
 326: PPUSH
 327: CALL 7610 0 5
// un := CreateVehicle ;
 331: LD_ADDR_VAR 0 3
 335: PUSH
 336: CALL_OW 45
 340: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 341: LD_VAR 0 3
 345: PPUSH
 346: LD_INT 7
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 356: LD_VAR 0 3
 360: PPUSH
 361: LD_INT 67
 363: PPUSH
 364: LD_INT 95
 366: PPUSH
 367: CALL_OW 111
// wait ( 0 0$2 ) ;
 371: LD_INT 70
 373: PPUSH
 374: CALL_OW 67
// end ;
 378: GO 309
 380: POP
 381: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 3
 387: PPUSH
 388: LD_INT 3
 390: PPUSH
 391: LD_INT 11
 393: PPUSH
 394: LD_INT 100
 396: PPUSH
 397: CALL 7610 0 5
// un := CreateVehicle ;
 401: LD_ADDR_VAR 0 3
 405: PUSH
 406: CALL_OW 45
 410: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 411: LD_VAR 0 3
 415: PPUSH
 416: LD_INT 7
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 426: LD_VAR 0 3
 430: PPUSH
 431: LD_INT 67
 433: PPUSH
 434: LD_INT 95
 436: PPUSH
 437: CALL_OW 111
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
 450: PPUSH
// uc_side := 3 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 3
 458: ST_TO_ADDR
// uc_nation := 3 ;
 459: LD_ADDR_OWVAR 21
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 467: LD_INT 14
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 1
 477: PPUSH
 478: LD_INT 50000
 480: PPUSH
 481: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 485: LD_INT 14
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 3
 495: PPUSH
 496: LD_INT 5000
 498: PPUSH
 499: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 503: LD_INT 45
 505: PPUSH
 506: LD_INT 132
 508: PPUSH
 509: LD_INT 89
 511: PPUSH
 512: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 516: LD_ADDR_VAR 0 2
 520: PUSH
 521: LD_INT 21
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 570
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 539: LD_VAR 0 2
 543: PPUSH
 544: LD_INT 6
 546: PUSH
 547: LD_INT 8
 549: PUSH
 550: LD_INT 10
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: PPUSH
 564: CALL_OW 241
 568: GO 536
 570: POP
 571: POP
// for i := 1 to 4 do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_INT 4
 584: PUSH
 585: FOR_TO
 586: IFFALSE 612
// begin PrepareMechanic ( false , 9 ) ;
 588: LD_INT 0
 590: PPUSH
 591: LD_INT 9
 593: PPUSH
 594: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 598: CALL_OW 44
 602: PPUSH
 603: LD_INT 50
 605: PPUSH
 606: CALL_OW 52
// end ;
 610: GO 585
 612: POP
 613: POP
// ruGuard1 := [ ] ;
 614: LD_ADDR_EXP 4
 618: PUSH
 619: EMPTY
 620: ST_TO_ADDR
// ruGuard2 := [ ] ;
 621: LD_ADDR_EXP 5
 625: PUSH
 626: EMPTY
 627: ST_TO_ADDR
// ruGuard3 := [ ] ;
 628: LD_ADDR_EXP 6
 632: PUSH
 633: EMPTY
 634: ST_TO_ADDR
// ruForces := [ ] ;
 635: LD_ADDR_EXP 7
 639: PUSH
 640: EMPTY
 641: ST_TO_ADDR
// ruEng := [ ] ;
 642: LD_ADDR_EXP 8
 646: PUSH
 647: EMPTY
 648: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 4
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 6
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: LD_OWVAR 67
 677: ARRAY
 678: PUSH
 679: FOR_TO
 680: IFFALSE 736
// begin PrepareEngineer ( false , 8 ) ;
 682: LD_INT 0
 684: PPUSH
 685: LD_INT 8
 687: PPUSH
 688: CALL_OW 382
// un := CreateHuman ;
 692: LD_ADDR_VAR 0 3
 696: PUSH
 697: CALL_OW 44
 701: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 702: LD_VAR 0 3
 706: PPUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 714: LD_ADDR_EXP 8
 718: PUSH
 719: LD_EXP 8
 723: PPUSH
 724: LD_VAR 0 3
 728: PPUSH
 729: CALL 40091 0 2
 733: ST_TO_ADDR
// end ;
 734: GO 679
 736: POP
 737: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: DOUBLE
 744: LD_INT 1
 746: DEC
 747: ST_TO_ADDR
 748: LD_INT 5
 750: PUSH
 751: LD_INT 6
 753: PUSH
 754: LD_INT 7
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_OWVAR 67
 766: ARRAY
 767: PUSH
 768: FOR_TO
 769: IFFALSE 879
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 771: LD_INT 24
 773: PPUSH
 774: LD_INT 3
 776: PPUSH
 777: LD_INT 3
 779: PPUSH
 780: LD_INT 46
 782: PUSH
 783: LD_INT 45
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 2
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 100
 806: PPUSH
 807: CALL 7610 0 5
// un := CreateVehicle ;
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: CALL_OW 45
 820: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 821: LD_VAR 0 3
 825: PPUSH
 826: LD_INT 3
 828: PPUSH
 829: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 833: LD_VAR 0 3
 837: PPUSH
 838: LD_INT 4
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 848: LD_ADDR_EXP 4
 852: PUSH
 853: LD_EXP 4
 857: PPUSH
 858: LD_EXP 4
 862: PUSH
 863: LD_INT 1
 865: PLUS
 866: PPUSH
 867: LD_VAR 0 3
 871: PPUSH
 872: CALL_OW 1
 876: ST_TO_ADDR
// end ;
 877: GO 768
 879: POP
 880: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: DOUBLE
 887: LD_INT 1
 889: DEC
 890: ST_TO_ADDR
 891: LD_INT 4
 893: PUSH
 894: LD_INT 4
 896: PUSH
 897: LD_INT 5
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: LD_OWVAR 67
 909: ARRAY
 910: PUSH
 911: FOR_TO
 912: IFFALSE 1022
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 914: LD_INT 24
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 3
 922: PPUSH
 923: LD_INT 46
 925: PUSH
 926: LD_INT 45
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_VAR 0 2
 937: PUSH
 938: LD_INT 2
 940: MOD
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: PPUSH
 947: LD_INT 100
 949: PPUSH
 950: CALL 7610 0 5
// un := CreateVehicle ;
 954: LD_ADDR_VAR 0 3
 958: PUSH
 959: CALL_OW 45
 963: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_INT 4
 971: PPUSH
 972: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 991: LD_ADDR_EXP 5
 995: PUSH
 996: LD_EXP 5
1000: PPUSH
1001: LD_EXP 5
1005: PUSH
1006: LD_INT 1
1008: PLUS
1009: PPUSH
1010: LD_VAR 0 3
1014: PPUSH
1015: CALL_OW 1
1019: ST_TO_ADDR
// end ;
1020: GO 911
1022: POP
1023: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1024: LD_ADDR_VAR 0 2
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 4
1036: PUSH
1037: LD_INT 4
1039: PUSH
1040: LD_INT 5
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: LD_OWVAR 67
1052: ARRAY
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1165
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1057: LD_INT 24
1059: PPUSH
1060: LD_INT 3
1062: PPUSH
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 46
1068: PUSH
1069: LD_INT 45
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: MOD
1084: PUSH
1085: LD_INT 1
1087: PLUS
1088: ARRAY
1089: PPUSH
1090: LD_INT 100
1092: PPUSH
1093: CALL 7610 0 5
// un := CreateVehicle ;
1097: LD_ADDR_VAR 0 3
1101: PUSH
1102: CALL_OW 45
1106: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1107: LD_VAR 0 3
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_INT 6
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1134: LD_ADDR_EXP 6
1138: PUSH
1139: LD_EXP 6
1143: PPUSH
1144: LD_EXP 6
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: PPUSH
1153: LD_VAR 0 3
1157: PPUSH
1158: CALL_OW 1
1162: ST_TO_ADDR
// end ;
1163: GO 1054
1165: POP
1166: POP
// for i := 1 to 2 do
1167: LD_ADDR_VAR 0 2
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_INT 2
1179: PUSH
1180: FOR_TO
1181: IFFALSE 1229
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1183: LD_INT 22
1185: PPUSH
1186: LD_INT 3
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 52
1194: PPUSH
1195: LD_INT 100
1197: PPUSH
1198: CALL 7610 0 5
// un := CreateVehicle ;
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: CALL_OW 45
1211: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1212: LD_VAR 0 3
1216: PPUSH
1217: LD_INT 9
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 49
// end ;
1227: GO 1180
1229: POP
1230: POP
// for i := 1 to 3 do
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: DOUBLE
1237: LD_INT 1
1239: DEC
1240: ST_TO_ADDR
1241: LD_INT 3
1243: PUSH
1244: FOR_TO
1245: IFFALSE 1282
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1247: LD_INT 0
1249: PPUSH
1250: LD_INT 9
1252: PPUSH
1253: LD_INT 8
1255: PPUSH
1256: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1260: CALL_OW 44
1264: PPUSH
1265: LD_INT 91
1267: PPUSH
1268: LD_INT 83
1270: PPUSH
1271: CALL_OW 428
1275: PPUSH
1276: CALL_OW 52
// end ;
1280: GO 1244
1282: POP
1283: POP
// end ;
1284: LD_VAR 0 1
1288: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1289: LD_EXP 8
1293: IFFALSE 1487
1295: GO 1297
1297: DISABLE
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// begin enable ;
1302: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1303: LD_ADDR_VAR 0 2
1307: PUSH
1308: LD_INT 10
1310: PPUSH
1311: LD_INT 21
1313: PUSH
1314: LD_INT 3
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 24
1326: PUSH
1327: LD_INT 1000
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PPUSH
1342: CALL_OW 70
1346: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1347: LD_VAR 0 2
1351: NOT
1352: PUSH
1353: LD_EXP 8
1357: PPUSH
1358: LD_INT 3
1360: PUSH
1361: LD_INT 54
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 72
1375: AND
1376: IFFALSE 1408
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1378: LD_EXP 8
1382: PPUSH
1383: LD_INT 3
1385: PUSH
1386: LD_INT 54
1388: PUSH
1389: EMPTY
1390: LIST
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PPUSH
1396: CALL_OW 72
1400: PPUSH
1401: LD_INT 14
1403: PPUSH
1404: CALL_OW 120
// if tmp then
1408: LD_VAR 0 2
1412: IFFALSE 1487
// begin for i in ruEng do
1414: LD_ADDR_VAR 0 1
1418: PUSH
1419: LD_EXP 8
1423: PUSH
1424: FOR_IN
1425: IFFALSE 1485
// if IsInUnit ( i ) then
1427: LD_VAR 0 1
1431: PPUSH
1432: CALL_OW 310
1436: IFFALSE 1449
// ComExitBuilding ( i ) else
1438: LD_VAR 0 1
1442: PPUSH
1443: CALL_OW 122
1447: GO 1483
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1449: LD_VAR 0 1
1453: PPUSH
1454: LD_VAR 0 1
1458: PPUSH
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL 8167 0 4
1474: PUSH
1475: LD_INT 1
1477: ARRAY
1478: PPUSH
1479: CALL_OW 130
1483: GO 1424
1485: POP
1486: POP
// end ; end ;
1487: PPOPN 2
1489: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1490: LD_EXP 7
1494: NOT
1495: IFFALSE 1561
1497: GO 1499
1499: DISABLE
1500: LD_INT 0
1502: PPUSH
1503: PPUSH
// begin enable ;
1504: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1505: LD_ADDR_VAR 0 1
1509: PUSH
1510: DOUBLE
1511: LD_INT 1
1513: DEC
1514: ST_TO_ADDR
1515: LD_INT 4
1517: PUSH
1518: LD_INT 5
1520: PUSH
1521: LD_INT 6
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_OWVAR 67
1533: ARRAY
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1559
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1538: LD_INT 50
1540: PPUSH
1541: LD_INT 24
1543: PPUSH
1544: LD_INT 3
1546: PPUSH
1547: LD_INT 3
1549: PPUSH
1550: LD_INT 46
1552: PPUSH
1553: CALL_OW 185
1557: GO 1535
1559: POP
1560: POP
// end ;
1561: PPOPN 2
1563: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1564: LD_EXP 7
1568: PUSH
1569: LD_INT 4
1571: PUSH
1572: LD_INT 5
1574: PUSH
1575: LD_INT 6
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: LD_OWVAR 67
1587: ARRAY
1588: GREATEREQUAL
1589: IFFALSE 1742
1591: GO 1593
1593: DISABLE
1594: LD_INT 0
1596: PPUSH
1597: PPUSH
// begin enable ;
1598: ENABLE
// tmp := ruForces ;
1599: LD_ADDR_VAR 0 2
1603: PUSH
1604: LD_EXP 7
1608: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1609: LD_INT 0
1611: PPUSH
1612: LD_INT 1
1614: PPUSH
1615: CALL_OW 12
1619: IFFALSE 1640
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 45
1628: PPUSH
1629: CALL_OW 120
// wait ( 0 0$20 ) ;
1633: LD_INT 700
1635: PPUSH
1636: CALL_OW 67
// end ; ruForces := [ ] ;
1640: LD_ADDR_EXP 7
1644: PUSH
1645: EMPTY
1646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1647: LD_INT 35
1649: PPUSH
1650: CALL_OW 67
// for i in tmp do
1654: LD_ADDR_VAR 0 1
1658: PUSH
1659: LD_VAR 0 2
1663: PUSH
1664: FOR_IN
1665: IFFALSE 1733
// if not IsOk ( i ) then
1667: LD_VAR 0 1
1671: PPUSH
1672: CALL_OW 302
1676: NOT
1677: IFFALSE 1697
// tmp := tmp diff i else
1679: LD_ADDR_VAR 0 2
1683: PUSH
1684: LD_VAR 0 2
1688: PUSH
1689: LD_VAR 0 1
1693: DIFF
1694: ST_TO_ADDR
1695: GO 1731
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1697: LD_VAR 0 1
1701: PPUSH
1702: LD_INT 81
1704: PUSH
1705: LD_INT 3
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PPUSH
1712: CALL_OW 69
1716: PPUSH
1717: LD_VAR 0 1
1721: PPUSH
1722: CALL_OW 74
1726: PPUSH
1727: CALL_OW 115
1731: GO 1664
1733: POP
1734: POP
// until not tmp ;
1735: LD_VAR 0 2
1739: NOT
1740: IFFALSE 1647
// end ;
1742: PPOPN 2
1744: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1745: LD_INT 22
1747: PUSH
1748: LD_INT 7
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 92
1757: PUSH
1758: LD_INT 62
1760: PUSH
1761: LD_INT 83
1763: PUSH
1764: LD_INT 8
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 69
1781: IFFALSE 1801
1783: GO 1785
1785: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1786: LD_EXP 4
1790: PPUSH
1791: LD_INT 69
1793: PPUSH
1794: LD_INT 100
1796: PPUSH
1797: CALL_OW 114
1801: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1802: LD_INT 22
1804: PUSH
1805: LD_INT 7
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 92
1814: PUSH
1815: LD_INT 85
1817: PUSH
1818: LD_INT 89
1820: PUSH
1821: LD_INT 8
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: CALL_OW 69
1838: IFFALSE 1858
1840: GO 1842
1842: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1843: LD_EXP 5
1847: PPUSH
1848: LD_INT 72
1850: PPUSH
1851: LD_INT 88
1853: PPUSH
1854: CALL_OW 114
1858: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1859: LD_INT 22
1861: PUSH
1862: LD_INT 7
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 92
1871: PUSH
1872: LD_INT 89
1874: PUSH
1875: LD_INT 13
1877: PUSH
1878: LD_INT 8
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: IFFALSE 1915
1897: GO 1899
1899: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1900: LD_EXP 6
1904: PPUSH
1905: LD_INT 107
1907: PPUSH
1908: LD_INT 26
1910: PPUSH
1911: CALL_OW 114
1915: END
// every 6 6$00 do var i , un , tmp ;
1916: GO 1918
1918: DISABLE
1919: LD_INT 0
1921: PPUSH
1922: PPUSH
1923: PPUSH
// begin enable ;
1924: ENABLE
// tmp := [ ] ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: EMPTY
1931: ST_TO_ADDR
// for i := 1 to 8 do
1932: LD_ADDR_VAR 0 1
1936: PUSH
1937: DOUBLE
1938: LD_INT 1
1940: DEC
1941: ST_TO_ADDR
1942: LD_INT 8
1944: PUSH
1945: FOR_TO
1946: IFFALSE 2089
// begin uc_side := 1 ;
1948: LD_ADDR_OWVAR 20
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// uc_nation := 1 ;
1956: LD_ADDR_OWVAR 21
1960: PUSH
1961: LD_INT 1
1963: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1964: LD_INT 5
1966: PPUSH
1967: LD_INT 3
1969: PPUSH
1970: LD_INT 3
1972: PPUSH
1973: LD_INT 6
1975: PUSH
1976: LD_INT 9
1978: PUSH
1979: LD_INT 7
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: PUSH
1987: LD_VAR 0 1
1991: PUSH
1992: LD_INT 3
1994: MOD
1995: PUSH
1996: LD_INT 1
1998: PLUS
1999: ARRAY
2000: PPUSH
2001: LD_INT 100
2003: PPUSH
2004: CALL 7610 0 5
// un := CreateVehicle ;
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: CALL_OW 45
2017: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2018: LD_ADDR_VAR 0 3
2022: PUSH
2023: LD_VAR 0 3
2027: PPUSH
2028: LD_VAR 0 2
2032: PPUSH
2033: CALL 40091 0 2
2037: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2038: LD_VAR 0 2
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2050: LD_VAR 0 2
2054: PPUSH
2055: LD_INT 11
2057: PPUSH
2058: LD_INT 0
2060: PPUSH
2061: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_INT 16
2072: PPUSH
2073: LD_INT 13
2075: PPUSH
2076: CALL_OW 111
// wait ( 0 0$1 ) ;
2080: LD_INT 35
2082: PPUSH
2083: CALL_OW 67
// end ;
2087: GO 1945
2089: POP
2090: POP
// repeat wait ( 0 0$1 ) ;
2091: LD_INT 35
2093: PPUSH
2094: CALL_OW 67
// for i in tmp do
2098: LD_ADDR_VAR 0 1
2102: PUSH
2103: LD_VAR 0 3
2107: PUSH
2108: FOR_IN
2109: IFFALSE 2177
// if not IsOk ( i ) then
2111: LD_VAR 0 1
2115: PPUSH
2116: CALL_OW 302
2120: NOT
2121: IFFALSE 2141
// tmp := tmp diff i else
2123: LD_ADDR_VAR 0 3
2127: PUSH
2128: LD_VAR 0 3
2132: PUSH
2133: LD_VAR 0 1
2137: DIFF
2138: ST_TO_ADDR
2139: GO 2175
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2141: LD_VAR 0 1
2145: PPUSH
2146: LD_INT 81
2148: PUSH
2149: LD_INT 1
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PPUSH
2156: CALL_OW 69
2160: PPUSH
2161: LD_VAR 0 1
2165: PPUSH
2166: CALL_OW 74
2170: PPUSH
2171: CALL_OW 115
2175: GO 2108
2177: POP
2178: POP
// until not tmp ;
2179: LD_VAR 0 3
2183: NOT
2184: IFFALSE 2091
// end ;
2186: PPOPN 3
2188: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2189: LD_INT 149
2191: PPUSH
2192: LD_INT 106
2194: PPUSH
2195: CALL_OW 428
2199: NOT
2200: IFFALSE 2363
2202: GO 2204
2204: DISABLE
2205: LD_INT 0
2207: PPUSH
// begin enable ;
2208: ENABLE
// uc_side := 1 ;
2209: LD_ADDR_OWVAR 20
2213: PUSH
2214: LD_INT 1
2216: ST_TO_ADDR
// uc_nation := 1 ;
2217: LD_ADDR_OWVAR 21
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2225: LD_INT 5
2227: PPUSH
2228: LD_INT 3
2230: PPUSH
2231: LD_INT 3
2233: PPUSH
2234: LD_INT 12
2236: PPUSH
2237: LD_INT 100
2239: PPUSH
2240: CALL 7610 0 5
// un := CreateVehicle ;
2244: LD_ADDR_VAR 0 1
2248: PUSH
2249: CALL_OW 45
2253: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 149
2261: PPUSH
2262: LD_INT 106
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 100
2282: PPUSH
2283: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2287: LD_VAR 0 1
2291: PPUSH
2292: LD_INT 105
2294: PPUSH
2295: LD_INT 2
2297: PPUSH
2298: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2302: LD_INT 35
2304: PPUSH
2305: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2309: LD_VAR 0 1
2313: PPUSH
2314: CALL_OW 301
2318: PUSH
2319: LD_VAR 0 1
2323: PPUSH
2324: CALL_OW 255
2328: PUSH
2329: LD_INT 1
2331: NONEQUAL
2332: OR
2333: IFFALSE 2337
// exit ;
2335: GO 2363
// until IsAt ( un , 105 , 2 ) ;
2337: LD_VAR 0 1
2341: PPUSH
2342: LD_INT 105
2344: PPUSH
2345: LD_INT 2
2347: PPUSH
2348: CALL_OW 307
2352: IFFALSE 2302
// RemoveUnit ( un ) ;
2354: LD_VAR 0 1
2358: PPUSH
2359: CALL_OW 64
// end ; end_of_file
2363: PPOPN 1
2365: END
// export function Action ; begin
2366: LD_INT 0
2368: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2369: LD_EXP 2
2373: PPUSH
2374: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2378: LD_STRING WT-Objectives-1
2380: PPUSH
2381: CALL_OW 337
// end ;
2385: LD_VAR 0 1
2389: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2390: LD_INT 7
2392: PPUSH
2393: LD_EXP 3
2397: PPUSH
2398: CALL_OW 292
2402: IFFALSE 2419
2404: GO 2406
2406: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2407: LD_EXP 3
2411: PPUSH
2412: LD_INT 7
2414: PPUSH
2415: CALL_OW 235
2419: END
// every 2 2$00 do
2420: GO 2422
2422: DISABLE
// PrepareReinforcements ( ) ;
2423: CALL 258 0 0
2427: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2428: LD_INT 2
2430: PPUSH
2431: CALL_OW 469
2435: NOT
2436: IFFALSE 2451
2438: GO 2440
2440: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2441: LD_INT 8
2443: PPUSH
2444: LD_INT 1
2446: PPUSH
2447: CALL_OW 424
2451: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2452: LD_INT 8
2454: PPUSH
2455: LD_INT 2
2457: PUSH
2458: LD_INT 34
2460: PUSH
2461: LD_INT 12
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: LD_INT 34
2470: PUSH
2471: LD_INT 51
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PPUSH
2483: CALL_OW 70
2487: PUSH
2488: LD_INT 2
2490: PPUSH
2491: CALL_OW 469
2495: NOT
2496: AND
2497: IFFALSE 2627
2499: GO 2501
2501: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2502: LD_STRING WT-med-1
2504: PPUSH
2505: LD_INT 1
2507: PPUSH
2508: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2512: LD_STRING WT-med-2
2514: PPUSH
2515: LD_INT 1
2517: NEG
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_EXP 3
2530: PPUSH
2531: CALL_OW 302
2535: PUSH
2536: LD_EXP 3
2540: PPUSH
2541: CALL_OW 255
2545: MUL
2546: PUSH
2547: LD_INT 7
2549: EQUAL
2550: PUSH
2551: LD_INT 1
2553: PLUS
2554: ARRAY
2555: PPUSH
2556: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2560: LD_STRING WT-med-3
2562: PPUSH
2563: LD_INT 1
2565: NEG
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 22
2576: PUSH
2577: LD_INT 7
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: LD_INT 34
2586: PUSH
2587: LD_INT 10
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PPUSH
2598: CALL_OW 69
2602: PUSH
2603: LD_INT 2
2605: GREATEREQUAL
2606: PUSH
2607: LD_INT 1
2609: PLUS
2610: ARRAY
2611: PPUSH
2612: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2616: LD_STRING WT-Main
2618: PPUSH
2619: CALL_OW 102
// YouWin ;
2623: CALL_OW 103
// end ; end_of_file
2627: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2628: LD_VAR 0 1
2632: PUSH
2633: LD_EXP 7
2637: IN
2638: IFFALSE 2656
// ruForces := ruForces diff un ;
2640: LD_ADDR_EXP 7
2644: PUSH
2645: LD_EXP 7
2649: PUSH
2650: LD_VAR 0 1
2654: DIFF
2655: ST_TO_ADDR
// end ;
2656: PPOPN 1
2658: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 44313 0 1
// if un = allianceHack then
2668: LD_VAR 0 1
2672: PUSH
2673: LD_EXP 2
2677: EQUAL
2678: IFFALSE 2687
// YouLost ( WT-HackLost ) ;
2680: LD_STRING WT-HackLost
2682: PPUSH
2683: CALL_OW 104
// if un in ruForces then
2687: LD_VAR 0 1
2691: PUSH
2692: LD_EXP 7
2696: IN
2697: IFFALSE 2715
// ruForces := ruForces diff un ;
2699: LD_ADDR_EXP 7
2703: PUSH
2704: LD_EXP 7
2708: PUSH
2709: LD_VAR 0 1
2713: DIFF
2714: ST_TO_ADDR
// end ;
2715: PPOPN 1
2717: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
2718: LD_VAR 0 1
2722: PPUSH
2723: LD_VAR 0 2
2727: PPUSH
2728: CALL 44433 0 2
// if GetSide ( vehicle ) = 3 then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 255
2741: PUSH
2742: LD_INT 3
2744: EQUAL
2745: IFFALSE 2767
// ruForces := Join ( ruForces , vehicle ) ;
2747: LD_ADDR_EXP 7
2751: PUSH
2752: LD_EXP 7
2756: PPUSH
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 40091 0 2
2766: ST_TO_ADDR
// end ; end_of_file
2767: PPOPN 2
2769: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2770: LD_INT 0
2772: PPUSH
2773: PPUSH
// if exist_mode then
2774: LD_VAR 0 2
2778: IFFALSE 2803
// unit := CreateCharacter ( prefix & ident ) else
2780: LD_ADDR_VAR 0 5
2784: PUSH
2785: LD_VAR 0 3
2789: PUSH
2790: LD_VAR 0 1
2794: STR
2795: PPUSH
2796: CALL_OW 34
2800: ST_TO_ADDR
2801: GO 2818
// unit := NewCharacter ( ident ) ;
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: LD_VAR 0 1
2812: PPUSH
2813: CALL_OW 25
2817: ST_TO_ADDR
// result := unit ;
2818: LD_ADDR_VAR 0 4
2822: PUSH
2823: LD_VAR 0 5
2827: ST_TO_ADDR
// end ;
2828: LD_VAR 0 4
2832: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2833: LD_INT 0
2835: PPUSH
2836: PPUSH
// if not side or not nation then
2837: LD_VAR 0 1
2841: NOT
2842: PUSH
2843: LD_VAR 0 2
2847: NOT
2848: OR
2849: IFFALSE 2853
// exit ;
2851: GO 3621
// case nation of nation_american :
2853: LD_VAR 0 2
2857: PUSH
2858: LD_INT 1
2860: DOUBLE
2861: EQUAL
2862: IFTRUE 2866
2864: GO 3080
2866: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2867: LD_ADDR_VAR 0 4
2871: PUSH
2872: LD_INT 35
2874: PUSH
2875: LD_INT 45
2877: PUSH
2878: LD_INT 46
2880: PUSH
2881: LD_INT 47
2883: PUSH
2884: LD_INT 82
2886: PUSH
2887: LD_INT 83
2889: PUSH
2890: LD_INT 84
2892: PUSH
2893: LD_INT 85
2895: PUSH
2896: LD_INT 86
2898: PUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 6
2907: PUSH
2908: LD_INT 15
2910: PUSH
2911: LD_INT 16
2913: PUSH
2914: LD_INT 7
2916: PUSH
2917: LD_INT 12
2919: PUSH
2920: LD_INT 13
2922: PUSH
2923: LD_INT 10
2925: PUSH
2926: LD_INT 14
2928: PUSH
2929: LD_INT 20
2931: PUSH
2932: LD_INT 21
2934: PUSH
2935: LD_INT 22
2937: PUSH
2938: LD_INT 25
2940: PUSH
2941: LD_INT 32
2943: PUSH
2944: LD_INT 27
2946: PUSH
2947: LD_INT 36
2949: PUSH
2950: LD_INT 69
2952: PUSH
2953: LD_INT 39
2955: PUSH
2956: LD_INT 34
2958: PUSH
2959: LD_INT 40
2961: PUSH
2962: LD_INT 48
2964: PUSH
2965: LD_INT 49
2967: PUSH
2968: LD_INT 50
2970: PUSH
2971: LD_INT 51
2973: PUSH
2974: LD_INT 52
2976: PUSH
2977: LD_INT 53
2979: PUSH
2980: LD_INT 54
2982: PUSH
2983: LD_INT 55
2985: PUSH
2986: LD_INT 56
2988: PUSH
2989: LD_INT 57
2991: PUSH
2992: LD_INT 58
2994: PUSH
2995: LD_INT 59
2997: PUSH
2998: LD_INT 60
3000: PUSH
3001: LD_INT 61
3003: PUSH
3004: LD_INT 62
3006: PUSH
3007: LD_INT 80
3009: PUSH
3010: LD_INT 82
3012: PUSH
3013: LD_INT 83
3015: PUSH
3016: LD_INT 84
3018: PUSH
3019: LD_INT 85
3021: PUSH
3022: LD_INT 86
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
3078: GO 3545
3080: LD_INT 2
3082: DOUBLE
3083: EQUAL
3084: IFTRUE 3088
3086: GO 3314
3088: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3089: LD_ADDR_VAR 0 4
3093: PUSH
3094: LD_INT 35
3096: PUSH
3097: LD_INT 45
3099: PUSH
3100: LD_INT 46
3102: PUSH
3103: LD_INT 47
3105: PUSH
3106: LD_INT 82
3108: PUSH
3109: LD_INT 83
3111: PUSH
3112: LD_INT 84
3114: PUSH
3115: LD_INT 85
3117: PUSH
3118: LD_INT 87
3120: PUSH
3121: LD_INT 70
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: LD_INT 11
3129: PUSH
3130: LD_INT 3
3132: PUSH
3133: LD_INT 4
3135: PUSH
3136: LD_INT 5
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: LD_INT 15
3144: PUSH
3145: LD_INT 18
3147: PUSH
3148: LD_INT 7
3150: PUSH
3151: LD_INT 17
3153: PUSH
3154: LD_INT 8
3156: PUSH
3157: LD_INT 20
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 22
3165: PUSH
3166: LD_INT 72
3168: PUSH
3169: LD_INT 26
3171: PUSH
3172: LD_INT 69
3174: PUSH
3175: LD_INT 39
3177: PUSH
3178: LD_INT 40
3180: PUSH
3181: LD_INT 41
3183: PUSH
3184: LD_INT 42
3186: PUSH
3187: LD_INT 43
3189: PUSH
3190: LD_INT 48
3192: PUSH
3193: LD_INT 49
3195: PUSH
3196: LD_INT 50
3198: PUSH
3199: LD_INT 51
3201: PUSH
3202: LD_INT 52
3204: PUSH
3205: LD_INT 53
3207: PUSH
3208: LD_INT 54
3210: PUSH
3211: LD_INT 55
3213: PUSH
3214: LD_INT 56
3216: PUSH
3217: LD_INT 60
3219: PUSH
3220: LD_INT 61
3222: PUSH
3223: LD_INT 62
3225: PUSH
3226: LD_INT 66
3228: PUSH
3229: LD_INT 67
3231: PUSH
3232: LD_INT 68
3234: PUSH
3235: LD_INT 81
3237: PUSH
3238: LD_INT 82
3240: PUSH
3241: LD_INT 83
3243: PUSH
3244: LD_INT 84
3246: PUSH
3247: LD_INT 85
3249: PUSH
3250: LD_INT 87
3252: PUSH
3253: LD_INT 88
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
3312: GO 3545
3314: LD_INT 3
3316: DOUBLE
3317: EQUAL
3318: IFTRUE 3322
3320: GO 3544
3322: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3323: LD_ADDR_VAR 0 4
3327: PUSH
3328: LD_INT 46
3330: PUSH
3331: LD_INT 47
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: LD_INT 2
3339: PUSH
3340: LD_INT 82
3342: PUSH
3343: LD_INT 83
3345: PUSH
3346: LD_INT 84
3348: PUSH
3349: LD_INT 85
3351: PUSH
3352: LD_INT 86
3354: PUSH
3355: LD_INT 11
3357: PUSH
3358: LD_INT 9
3360: PUSH
3361: LD_INT 20
3363: PUSH
3364: LD_INT 19
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 24
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 25
3378: PUSH
3379: LD_INT 28
3381: PUSH
3382: LD_INT 29
3384: PUSH
3385: LD_INT 30
3387: PUSH
3388: LD_INT 31
3390: PUSH
3391: LD_INT 37
3393: PUSH
3394: LD_INT 38
3396: PUSH
3397: LD_INT 32
3399: PUSH
3400: LD_INT 27
3402: PUSH
3403: LD_INT 33
3405: PUSH
3406: LD_INT 69
3408: PUSH
3409: LD_INT 39
3411: PUSH
3412: LD_INT 34
3414: PUSH
3415: LD_INT 40
3417: PUSH
3418: LD_INT 71
3420: PUSH
3421: LD_INT 23
3423: PUSH
3424: LD_INT 44
3426: PUSH
3427: LD_INT 48
3429: PUSH
3430: LD_INT 49
3432: PUSH
3433: LD_INT 50
3435: PUSH
3436: LD_INT 51
3438: PUSH
3439: LD_INT 52
3441: PUSH
3442: LD_INT 53
3444: PUSH
3445: LD_INT 54
3447: PUSH
3448: LD_INT 55
3450: PUSH
3451: LD_INT 56
3453: PUSH
3454: LD_INT 57
3456: PUSH
3457: LD_INT 58
3459: PUSH
3460: LD_INT 59
3462: PUSH
3463: LD_INT 63
3465: PUSH
3466: LD_INT 64
3468: PUSH
3469: LD_INT 65
3471: PUSH
3472: LD_INT 82
3474: PUSH
3475: LD_INT 83
3477: PUSH
3478: LD_INT 84
3480: PUSH
3481: LD_INT 85
3483: PUSH
3484: LD_INT 86
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: ST_TO_ADDR
3542: GO 3545
3544: POP
// if state > - 1 and state < 3 then
3545: LD_VAR 0 3
3549: PUSH
3550: LD_INT 1
3552: NEG
3553: GREATER
3554: PUSH
3555: LD_VAR 0 3
3559: PUSH
3560: LD_INT 3
3562: LESS
3563: AND
3564: IFFALSE 3621
// for i in result do
3566: LD_ADDR_VAR 0 5
3570: PUSH
3571: LD_VAR 0 4
3575: PUSH
3576: FOR_IN
3577: IFFALSE 3619
// if GetTech ( i , side ) <> state then
3579: LD_VAR 0 5
3583: PPUSH
3584: LD_VAR 0 1
3588: PPUSH
3589: CALL_OW 321
3593: PUSH
3594: LD_VAR 0 3
3598: NONEQUAL
3599: IFFALSE 3617
// result := result diff i ;
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: LD_VAR 0 4
3610: PUSH
3611: LD_VAR 0 5
3615: DIFF
3616: ST_TO_ADDR
3617: GO 3576
3619: POP
3620: POP
// end ;
3621: LD_VAR 0 4
3625: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3626: LD_INT 0
3628: PPUSH
3629: PPUSH
3630: PPUSH
// result := true ;
3631: LD_ADDR_VAR 0 3
3635: PUSH
3636: LD_INT 1
3638: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3639: LD_ADDR_VAR 0 5
3643: PUSH
3644: LD_VAR 0 2
3648: PPUSH
3649: CALL_OW 480
3653: ST_TO_ADDR
// if not tmp then
3654: LD_VAR 0 5
3658: NOT
3659: IFFALSE 3663
// exit ;
3661: GO 3712
// for i in tmp do
3663: LD_ADDR_VAR 0 4
3667: PUSH
3668: LD_VAR 0 5
3672: PUSH
3673: FOR_IN
3674: IFFALSE 3710
// if GetTech ( i , side ) <> state_researched then
3676: LD_VAR 0 4
3680: PPUSH
3681: LD_VAR 0 1
3685: PPUSH
3686: CALL_OW 321
3690: PUSH
3691: LD_INT 2
3693: NONEQUAL
3694: IFFALSE 3708
// begin result := false ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_INT 0
3703: ST_TO_ADDR
// exit ;
3704: POP
3705: POP
3706: GO 3712
// end ;
3708: GO 3673
3710: POP
3711: POP
// end ;
3712: LD_VAR 0 3
3716: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3717: LD_INT 0
3719: PPUSH
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
3730: PPUSH
3731: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3732: LD_VAR 0 1
3736: NOT
3737: PUSH
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 257
3747: PUSH
3748: LD_INT 9
3750: NONEQUAL
3751: OR
3752: IFFALSE 3756
// exit ;
3754: GO 4329
// side := GetSide ( unit ) ;
3756: LD_ADDR_VAR 0 9
3760: PUSH
3761: LD_VAR 0 1
3765: PPUSH
3766: CALL_OW 255
3770: ST_TO_ADDR
// tech_space := tech_spacanom ;
3771: LD_ADDR_VAR 0 12
3775: PUSH
3776: LD_INT 29
3778: ST_TO_ADDR
// tech_time := tech_taurad ;
3779: LD_ADDR_VAR 0 13
3783: PUSH
3784: LD_INT 28
3786: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3787: LD_ADDR_VAR 0 11
3791: PUSH
3792: LD_VAR 0 1
3796: PPUSH
3797: CALL_OW 310
3801: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3802: LD_VAR 0 11
3806: PPUSH
3807: CALL_OW 247
3811: PUSH
3812: LD_INT 2
3814: EQUAL
3815: IFFALSE 3819
// exit ;
3817: GO 4329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3819: LD_ADDR_VAR 0 8
3823: PUSH
3824: LD_INT 81
3826: PUSH
3827: LD_VAR 0 9
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 21
3841: PUSH
3842: LD_INT 3
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: ST_TO_ADDR
// if not tmp then
3862: LD_VAR 0 8
3866: NOT
3867: IFFALSE 3871
// exit ;
3869: GO 4329
// if in_unit then
3871: LD_VAR 0 11
3875: IFFALSE 3899
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3877: LD_ADDR_VAR 0 10
3881: PUSH
3882: LD_VAR 0 8
3886: PPUSH
3887: LD_VAR 0 11
3891: PPUSH
3892: CALL_OW 74
3896: ST_TO_ADDR
3897: GO 3919
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3899: LD_ADDR_VAR 0 10
3903: PUSH
3904: LD_VAR 0 8
3908: PPUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 74
3918: ST_TO_ADDR
// if not enemy then
3919: LD_VAR 0 10
3923: NOT
3924: IFFALSE 3928
// exit ;
3926: GO 4329
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3928: LD_VAR 0 11
3932: PUSH
3933: LD_VAR 0 11
3937: PPUSH
3938: LD_VAR 0 10
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 13
3950: GREATER
3951: AND
3952: PUSH
3953: LD_VAR 0 1
3957: PPUSH
3958: LD_VAR 0 10
3962: PPUSH
3963: CALL_OW 296
3967: PUSH
3968: LD_INT 12
3970: GREATER
3971: OR
3972: IFFALSE 3976
// exit ;
3974: GO 4329
// missile := [ 1 ] ;
3976: LD_ADDR_VAR 0 14
3980: PUSH
3981: LD_INT 1
3983: PUSH
3984: EMPTY
3985: LIST
3986: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3987: LD_VAR 0 9
3991: PPUSH
3992: LD_VAR 0 12
3996: PPUSH
3997: CALL_OW 325
4001: IFFALSE 4030
// missile := Replace ( missile , missile + 1 , 2 ) ;
4003: LD_ADDR_VAR 0 14
4007: PUSH
4008: LD_VAR 0 14
4012: PPUSH
4013: LD_VAR 0 14
4017: PUSH
4018: LD_INT 1
4020: PLUS
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 1
4029: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4030: LD_VAR 0 9
4034: PPUSH
4035: LD_VAR 0 13
4039: PPUSH
4040: CALL_OW 325
4044: PUSH
4045: LD_VAR 0 10
4049: PPUSH
4050: CALL_OW 255
4054: PPUSH
4055: LD_VAR 0 13
4059: PPUSH
4060: CALL_OW 325
4064: NOT
4065: AND
4066: IFFALSE 4095
// missile := Replace ( missile , missile + 1 , 3 ) ;
4068: LD_ADDR_VAR 0 14
4072: PUSH
4073: LD_VAR 0 14
4077: PPUSH
4078: LD_VAR 0 14
4082: PUSH
4083: LD_INT 1
4085: PLUS
4086: PPUSH
4087: LD_INT 3
4089: PPUSH
4090: CALL_OW 1
4094: ST_TO_ADDR
// if missile < 2 then
4095: LD_VAR 0 14
4099: PUSH
4100: LD_INT 2
4102: LESS
4103: IFFALSE 4107
// exit ;
4105: GO 4329
// x := GetX ( enemy ) ;
4107: LD_ADDR_VAR 0 4
4111: PUSH
4112: LD_VAR 0 10
4116: PPUSH
4117: CALL_OW 250
4121: ST_TO_ADDR
// y := GetY ( enemy ) ;
4122: LD_ADDR_VAR 0 5
4126: PUSH
4127: LD_VAR 0 10
4131: PPUSH
4132: CALL_OW 251
4136: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4137: LD_ADDR_VAR 0 6
4141: PUSH
4142: LD_VAR 0 4
4146: PUSH
4147: LD_INT 1
4149: NEG
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: CALL_OW 12
4158: PLUS
4159: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4160: LD_ADDR_VAR 0 7
4164: PUSH
4165: LD_VAR 0 5
4169: PUSH
4170: LD_INT 1
4172: NEG
4173: PPUSH
4174: LD_INT 1
4176: PPUSH
4177: CALL_OW 12
4181: PLUS
4182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4183: LD_VAR 0 6
4187: PPUSH
4188: LD_VAR 0 7
4192: PPUSH
4193: CALL_OW 488
4197: NOT
4198: IFFALSE 4220
// begin _x := x ;
4200: LD_ADDR_VAR 0 6
4204: PUSH
4205: LD_VAR 0 4
4209: ST_TO_ADDR
// _y := y ;
4210: LD_ADDR_VAR 0 7
4214: PUSH
4215: LD_VAR 0 5
4219: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 14
4232: PPUSH
4233: CALL_OW 12
4237: ST_TO_ADDR
// case i of 1 :
4238: LD_VAR 0 3
4242: PUSH
4243: LD_INT 1
4245: DOUBLE
4246: EQUAL
4247: IFTRUE 4251
4249: GO 4268
4251: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 10
4261: PPUSH
4262: CALL_OW 115
4266: GO 4329
4268: LD_INT 2
4270: DOUBLE
4271: EQUAL
4272: IFTRUE 4276
4274: GO 4298
4276: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4277: LD_VAR 0 1
4281: PPUSH
4282: LD_VAR 0 6
4286: PPUSH
4287: LD_VAR 0 7
4291: PPUSH
4292: CALL_OW 153
4296: GO 4329
4298: LD_INT 3
4300: DOUBLE
4301: EQUAL
4302: IFTRUE 4306
4304: GO 4328
4306: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4307: LD_VAR 0 1
4311: PPUSH
4312: LD_VAR 0 6
4316: PPUSH
4317: LD_VAR 0 7
4321: PPUSH
4322: CALL_OW 154
4326: GO 4329
4328: POP
// end ;
4329: LD_VAR 0 2
4333: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4334: LD_INT 0
4336: PPUSH
4337: PPUSH
4338: PPUSH
4339: PPUSH
4340: PPUSH
4341: PPUSH
// if not unit or not building then
4342: LD_VAR 0 1
4346: NOT
4347: PUSH
4348: LD_VAR 0 2
4352: NOT
4353: OR
4354: IFFALSE 4358
// exit ;
4356: GO 4516
// x := GetX ( building ) ;
4358: LD_ADDR_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PPUSH
4368: CALL_OW 250
4372: ST_TO_ADDR
// y := GetY ( building ) ;
4373: LD_ADDR_VAR 0 6
4377: PUSH
4378: LD_VAR 0 2
4382: PPUSH
4383: CALL_OW 251
4387: ST_TO_ADDR
// for i = 0 to 5 do
4388: LD_ADDR_VAR 0 4
4392: PUSH
4393: DOUBLE
4394: LD_INT 0
4396: DEC
4397: ST_TO_ADDR
4398: LD_INT 5
4400: PUSH
4401: FOR_TO
4402: IFFALSE 4514
// begin _x := ShiftX ( x , i , 3 ) ;
4404: LD_ADDR_VAR 0 7
4408: PUSH
4409: LD_VAR 0 5
4413: PPUSH
4414: LD_VAR 0 4
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: CALL_OW 272
4426: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4427: LD_ADDR_VAR 0 8
4431: PUSH
4432: LD_VAR 0 6
4436: PPUSH
4437: LD_VAR 0 4
4441: PPUSH
4442: LD_INT 3
4444: PPUSH
4445: CALL_OW 273
4449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4450: LD_VAR 0 7
4454: PPUSH
4455: LD_VAR 0 8
4459: PPUSH
4460: CALL_OW 488
4464: NOT
4465: IFFALSE 4469
// continue ;
4467: GO 4401
// if HexInfo ( _x , _y ) = 0 then
4469: LD_VAR 0 7
4473: PPUSH
4474: LD_VAR 0 8
4478: PPUSH
4479: CALL_OW 428
4483: PUSH
4484: LD_INT 0
4486: EQUAL
4487: IFFALSE 4512
// begin ComMoveXY ( unit , _x , _y ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_VAR 0 7
4498: PPUSH
4499: LD_VAR 0 8
4503: PPUSH
4504: CALL_OW 111
// exit ;
4508: POP
4509: POP
4510: GO 4516
// end ; end ;
4512: GO 4401
4514: POP
4515: POP
// end ;
4516: LD_VAR 0 3
4520: RET
// export function ScanBase ( side , base_area ) ; begin
4521: LD_INT 0
4523: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4524: LD_ADDR_VAR 0 3
4528: PUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: LD_INT 81
4536: PUSH
4537: LD_VAR 0 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PPUSH
4546: CALL_OW 70
4550: ST_TO_ADDR
// end ;
4551: LD_VAR 0 3
4555: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4556: LD_INT 0
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
// result := false ;
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: LD_INT 0
4569: ST_TO_ADDR
// side := GetSide ( unit ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_VAR 0 1
4579: PPUSH
4580: CALL_OW 255
4584: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4585: LD_ADDR_VAR 0 4
4589: PUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 248
4599: ST_TO_ADDR
// case nat of 1 :
4600: LD_VAR 0 4
4604: PUSH
4605: LD_INT 1
4607: DOUBLE
4608: EQUAL
4609: IFTRUE 4613
4611: GO 4624
4613: POP
// tech := tech_lassight ; 2 :
4614: LD_ADDR_VAR 0 5
4618: PUSH
4619: LD_INT 12
4621: ST_TO_ADDR
4622: GO 4663
4624: LD_INT 2
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// tech := tech_mortar ; 3 :
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 41
4640: ST_TO_ADDR
4641: GO 4663
4643: LD_INT 3
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// tech := tech_bazooka ; end ;
4652: LD_ADDR_VAR 0 5
4656: PUSH
4657: LD_INT 44
4659: ST_TO_ADDR
4660: GO 4663
4662: POP
// if Researched ( side , tech ) then
4663: LD_VAR 0 3
4667: PPUSH
4668: LD_VAR 0 5
4672: PPUSH
4673: CALL_OW 325
4677: IFFALSE 4704
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4679: LD_ADDR_VAR 0 2
4683: PUSH
4684: LD_INT 5
4686: PUSH
4687: LD_INT 8
4689: PUSH
4690: LD_INT 9
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: PUSH
4698: LD_VAR 0 4
4702: ARRAY
4703: ST_TO_ADDR
// end ;
4704: LD_VAR 0 2
4708: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4709: LD_INT 0
4711: PPUSH
4712: PPUSH
4713: PPUSH
// if not mines then
4714: LD_VAR 0 2
4718: NOT
4719: IFFALSE 4723
// exit ;
4721: GO 4867
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4723: LD_ADDR_VAR 0 5
4727: PUSH
4728: LD_INT 81
4730: PUSH
4731: LD_VAR 0 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 69
4765: ST_TO_ADDR
// for i in mines do
4766: LD_ADDR_VAR 0 4
4770: PUSH
4771: LD_VAR 0 2
4775: PUSH
4776: FOR_IN
4777: IFFALSE 4865
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4779: LD_VAR 0 4
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PPUSH
4788: LD_VAR 0 4
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 458
4801: NOT
4802: IFFALSE 4806
// continue ;
4804: GO 4776
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4806: LD_VAR 0 4
4810: PUSH
4811: LD_INT 1
4813: ARRAY
4814: PPUSH
4815: LD_VAR 0 4
4819: PUSH
4820: LD_INT 2
4822: ARRAY
4823: PPUSH
4824: CALL_OW 428
4828: PUSH
4829: LD_VAR 0 5
4833: IN
4834: IFFALSE 4863
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4836: LD_VAR 0 4
4840: PUSH
4841: LD_INT 1
4843: ARRAY
4844: PPUSH
4845: LD_VAR 0 4
4849: PUSH
4850: LD_INT 2
4852: ARRAY
4853: PPUSH
4854: LD_VAR 0 1
4858: PPUSH
4859: CALL_OW 456
// end ;
4863: GO 4776
4865: POP
4866: POP
// end ;
4867: LD_VAR 0 3
4871: RET
// export function Count ( array ) ; begin
4872: LD_INT 0
4874: PPUSH
// result := array + 0 ;
4875: LD_ADDR_VAR 0 2
4879: PUSH
4880: LD_VAR 0 1
4884: PUSH
4885: LD_INT 0
4887: PLUS
4888: ST_TO_ADDR
// end ;
4889: LD_VAR 0 2
4893: RET
// export function IsEmpty ( building ) ; begin
4894: LD_INT 0
4896: PPUSH
// if not building then
4897: LD_VAR 0 1
4901: NOT
4902: IFFALSE 4906
// exit ;
4904: GO 4949
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: LD_VAR 0 1
4915: PUSH
4916: LD_INT 22
4918: PUSH
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 255
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 58
4935: PUSH
4936: EMPTY
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: IN
4948: ST_TO_ADDR
// end ;
4949: LD_VAR 0 2
4953: RET
// export function IsNotFull ( building ) ; var places ; begin
4954: LD_INT 0
4956: PPUSH
4957: PPUSH
// if not building then
4958: LD_VAR 0 1
4962: NOT
4963: IFFALSE 4967
// exit ;
4965: GO 4995
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4967: LD_ADDR_VAR 0 2
4971: PUSH
4972: LD_VAR 0 1
4976: PPUSH
4977: LD_INT 3
4979: PUSH
4980: LD_INT 62
4982: PUSH
4983: EMPTY
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 72
4994: ST_TO_ADDR
// end ;
4995: LD_VAR 0 2
4999: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5000: LD_INT 0
5002: PPUSH
5003: PPUSH
5004: PPUSH
5005: PPUSH
// tmp := [ ] ;
5006: LD_ADDR_VAR 0 3
5010: PUSH
5011: EMPTY
5012: ST_TO_ADDR
// list := [ ] ;
5013: LD_ADDR_VAR 0 5
5017: PUSH
5018: EMPTY
5019: ST_TO_ADDR
// for i = 16 to 25 do
5020: LD_ADDR_VAR 0 4
5024: PUSH
5025: DOUBLE
5026: LD_INT 16
5028: DEC
5029: ST_TO_ADDR
5030: LD_INT 25
5032: PUSH
5033: FOR_TO
5034: IFFALSE 5107
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5036: LD_ADDR_VAR 0 3
5040: PUSH
5041: LD_VAR 0 3
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 91
5065: PUSH
5066: LD_VAR 0 1
5070: PUSH
5071: LD_INT 6
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 30
5081: PUSH
5082: LD_VAR 0 4
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: PPUSH
5099: CALL_OW 69
5103: ADD
5104: ST_TO_ADDR
5105: GO 5033
5107: POP
5108: POP
// for i = 1 to tmp do
5109: LD_ADDR_VAR 0 4
5113: PUSH
5114: DOUBLE
5115: LD_INT 1
5117: DEC
5118: ST_TO_ADDR
5119: LD_VAR 0 3
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5213
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5127: LD_ADDR_VAR 0 5
5131: PUSH
5132: LD_VAR 0 5
5136: PUSH
5137: LD_VAR 0 3
5141: PUSH
5142: LD_VAR 0 4
5146: ARRAY
5147: PPUSH
5148: CALL_OW 266
5152: PUSH
5153: LD_VAR 0 3
5157: PUSH
5158: LD_VAR 0 4
5162: ARRAY
5163: PPUSH
5164: CALL_OW 250
5168: PUSH
5169: LD_VAR 0 3
5173: PUSH
5174: LD_VAR 0 4
5178: ARRAY
5179: PPUSH
5180: CALL_OW 251
5184: PUSH
5185: LD_VAR 0 3
5189: PUSH
5190: LD_VAR 0 4
5194: ARRAY
5195: PPUSH
5196: CALL_OW 254
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: PUSH
5207: EMPTY
5208: LIST
5209: ADD
5210: ST_TO_ADDR
5211: GO 5124
5213: POP
5214: POP
// result := list ;
5215: LD_ADDR_VAR 0 2
5219: PUSH
5220: LD_VAR 0 5
5224: ST_TO_ADDR
// end ;
5225: LD_VAR 0 2
5229: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5230: LD_INT 0
5232: PPUSH
5233: PPUSH
5234: PPUSH
5235: PPUSH
5236: PPUSH
5237: PPUSH
5238: PPUSH
// if not factory then
5239: LD_VAR 0 1
5243: NOT
5244: IFFALSE 5248
// exit ;
5246: GO 5841
// if control = control_apeman then
5248: LD_VAR 0 4
5252: PUSH
5253: LD_INT 5
5255: EQUAL
5256: IFFALSE 5365
// begin tmp := UnitsInside ( factory ) ;
5258: LD_ADDR_VAR 0 8
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 313
5272: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5273: LD_VAR 0 8
5277: PPUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 12
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PPUSH
5288: CALL_OW 72
5292: NOT
5293: IFFALSE 5303
// control := control_manual ;
5295: LD_ADDR_VAR 0 4
5299: PUSH
5300: LD_INT 1
5302: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5303: LD_ADDR_VAR 0 8
5307: PUSH
5308: LD_VAR 0 1
5312: PPUSH
5313: CALL 5000 0 1
5317: ST_TO_ADDR
// if tmp then
5318: LD_VAR 0 8
5322: IFFALSE 5365
// begin for i in tmp do
5324: LD_ADDR_VAR 0 7
5328: PUSH
5329: LD_VAR 0 8
5333: PUSH
5334: FOR_IN
5335: IFFALSE 5363
// if i [ 1 ] = b_ext_radio then
5337: LD_VAR 0 7
5341: PUSH
5342: LD_INT 1
5344: ARRAY
5345: PUSH
5346: LD_INT 22
5348: EQUAL
5349: IFFALSE 5361
// begin control := control_remote ;
5351: LD_ADDR_VAR 0 4
5355: PUSH
5356: LD_INT 2
5358: ST_TO_ADDR
// break ;
5359: GO 5363
// end ;
5361: GO 5334
5363: POP
5364: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5365: LD_VAR 0 1
5369: PPUSH
5370: LD_VAR 0 2
5374: PPUSH
5375: LD_VAR 0 3
5379: PPUSH
5380: LD_VAR 0 4
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: CALL_OW 448
5394: IFFALSE 5429
// begin result := [ chassis , engine , control , weapon ] ;
5396: LD_ADDR_VAR 0 6
5400: PUSH
5401: LD_VAR 0 2
5405: PUSH
5406: LD_VAR 0 3
5410: PUSH
5411: LD_VAR 0 4
5415: PUSH
5416: LD_VAR 0 5
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: ST_TO_ADDR
// exit ;
5427: GO 5841
// end ; _chassis := AvailableChassisList ( factory ) ;
5429: LD_ADDR_VAR 0 9
5433: PUSH
5434: LD_VAR 0 1
5438: PPUSH
5439: CALL_OW 475
5443: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5444: LD_ADDR_VAR 0 11
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 476
5458: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5459: LD_ADDR_VAR 0 12
5463: PUSH
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 477
5473: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5474: LD_ADDR_VAR 0 10
5478: PUSH
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 478
5488: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5489: LD_VAR 0 9
5493: NOT
5494: PUSH
5495: LD_VAR 0 11
5499: NOT
5500: OR
5501: PUSH
5502: LD_VAR 0 12
5506: NOT
5507: OR
5508: PUSH
5509: LD_VAR 0 10
5513: NOT
5514: OR
5515: IFFALSE 5550
// begin result := [ chassis , engine , control , weapon ] ;
5517: LD_ADDR_VAR 0 6
5521: PUSH
5522: LD_VAR 0 2
5526: PUSH
5527: LD_VAR 0 3
5531: PUSH
5532: LD_VAR 0 4
5536: PUSH
5537: LD_VAR 0 5
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: ST_TO_ADDR
// exit ;
5548: GO 5841
// end ; if not chassis in _chassis then
5550: LD_VAR 0 2
5554: PUSH
5555: LD_VAR 0 9
5559: IN
5560: NOT
5561: IFFALSE 5587
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5563: LD_ADDR_VAR 0 2
5567: PUSH
5568: LD_VAR 0 9
5572: PUSH
5573: LD_INT 1
5575: PPUSH
5576: LD_VAR 0 9
5580: PPUSH
5581: CALL_OW 12
5585: ARRAY
5586: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5587: LD_VAR 0 2
5591: PPUSH
5592: LD_VAR 0 3
5596: PPUSH
5597: CALL 5846 0 2
5601: NOT
5602: IFFALSE 5661
// repeat engine := _engine [ 1 ] ;
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: LD_VAR 0 11
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5618: LD_ADDR_VAR 0 11
5622: PUSH
5623: LD_VAR 0 11
5627: PPUSH
5628: LD_INT 1
5630: PPUSH
5631: CALL_OW 3
5635: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_VAR 0 3
5645: PPUSH
5646: CALL 5846 0 2
5650: PUSH
5651: LD_VAR 0 11
5655: PUSH
5656: EMPTY
5657: EQUAL
5658: OR
5659: IFFALSE 5604
// if not control in _control then
5661: LD_VAR 0 4
5665: PUSH
5666: LD_VAR 0 12
5670: IN
5671: NOT
5672: IFFALSE 5698
// control := _control [ rand ( 1 , _control ) ] ;
5674: LD_ADDR_VAR 0 4
5678: PUSH
5679: LD_VAR 0 12
5683: PUSH
5684: LD_INT 1
5686: PPUSH
5687: LD_VAR 0 12
5691: PPUSH
5692: CALL_OW 12
5696: ARRAY
5697: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5698: LD_VAR 0 2
5702: PPUSH
5703: LD_VAR 0 5
5707: PPUSH
5708: CALL 6066 0 2
5712: NOT
5713: IFFALSE 5772
// repeat weapon := _weapon [ 1 ] ;
5715: LD_ADDR_VAR 0 5
5719: PUSH
5720: LD_VAR 0 10
5724: PUSH
5725: LD_INT 1
5727: ARRAY
5728: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5729: LD_ADDR_VAR 0 10
5733: PUSH
5734: LD_VAR 0 10
5738: PPUSH
5739: LD_INT 1
5741: PPUSH
5742: CALL_OW 3
5746: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5747: LD_VAR 0 2
5751: PPUSH
5752: LD_VAR 0 5
5756: PPUSH
5757: CALL 6066 0 2
5761: PUSH
5762: LD_VAR 0 10
5766: PUSH
5767: EMPTY
5768: EQUAL
5769: OR
5770: IFFALSE 5715
// result := [ ] ;
5772: LD_ADDR_VAR 0 6
5776: PUSH
5777: EMPTY
5778: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5779: LD_VAR 0 1
5783: PPUSH
5784: LD_VAR 0 2
5788: PPUSH
5789: LD_VAR 0 3
5793: PPUSH
5794: LD_VAR 0 4
5798: PPUSH
5799: LD_VAR 0 5
5803: PPUSH
5804: CALL_OW 448
5808: IFFALSE 5841
// result := [ chassis , engine , control , weapon ] ;
5810: LD_ADDR_VAR 0 6
5814: PUSH
5815: LD_VAR 0 2
5819: PUSH
5820: LD_VAR 0 3
5824: PUSH
5825: LD_VAR 0 4
5829: PUSH
5830: LD_VAR 0 5
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: ST_TO_ADDR
// end ;
5841: LD_VAR 0 6
5845: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5846: LD_INT 0
5848: PPUSH
// if not chassis or not engine then
5849: LD_VAR 0 1
5853: NOT
5854: PUSH
5855: LD_VAR 0 2
5859: NOT
5860: OR
5861: IFFALSE 5865
// exit ;
5863: GO 6061
// case engine of engine_solar :
5865: LD_VAR 0 2
5869: PUSH
5870: LD_INT 2
5872: DOUBLE
5873: EQUAL
5874: IFTRUE 5878
5876: GO 5916
5878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5879: LD_ADDR_VAR 0 3
5883: PUSH
5884: LD_INT 11
5886: PUSH
5887: LD_INT 12
5889: PUSH
5890: LD_INT 13
5892: PUSH
5893: LD_INT 14
5895: PUSH
5896: LD_INT 1
5898: PUSH
5899: LD_INT 2
5901: PUSH
5902: LD_INT 3
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: ST_TO_ADDR
5914: GO 6045
5916: LD_INT 1
5918: DOUBLE
5919: EQUAL
5920: IFTRUE 5924
5922: GO 5986
5924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5925: LD_ADDR_VAR 0 3
5929: PUSH
5930: LD_INT 11
5932: PUSH
5933: LD_INT 12
5935: PUSH
5936: LD_INT 13
5938: PUSH
5939: LD_INT 14
5941: PUSH
5942: LD_INT 1
5944: PUSH
5945: LD_INT 2
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: LD_INT 4
5953: PUSH
5954: LD_INT 5
5956: PUSH
5957: LD_INT 21
5959: PUSH
5960: LD_INT 23
5962: PUSH
5963: LD_INT 22
5965: PUSH
5966: LD_INT 24
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: ST_TO_ADDR
5984: GO 6045
5986: LD_INT 3
5988: DOUBLE
5989: EQUAL
5990: IFTRUE 5994
5992: GO 6044
5994: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5995: LD_ADDR_VAR 0 3
5999: PUSH
6000: LD_INT 13
6002: PUSH
6003: LD_INT 14
6005: PUSH
6006: LD_INT 2
6008: PUSH
6009: LD_INT 3
6011: PUSH
6012: LD_INT 4
6014: PUSH
6015: LD_INT 5
6017: PUSH
6018: LD_INT 21
6020: PUSH
6021: LD_INT 22
6023: PUSH
6024: LD_INT 23
6026: PUSH
6027: LD_INT 24
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: ST_TO_ADDR
6042: GO 6045
6044: POP
// result := ( chassis in result ) ;
6045: LD_ADDR_VAR 0 3
6049: PUSH
6050: LD_VAR 0 1
6054: PUSH
6055: LD_VAR 0 3
6059: IN
6060: ST_TO_ADDR
// end ;
6061: LD_VAR 0 3
6065: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6066: LD_INT 0
6068: PPUSH
// if not chassis or not weapon then
6069: LD_VAR 0 1
6073: NOT
6074: PUSH
6075: LD_VAR 0 2
6079: NOT
6080: OR
6081: IFFALSE 6085
// exit ;
6083: GO 7145
// case weapon of us_machine_gun :
6085: LD_VAR 0 2
6089: PUSH
6090: LD_INT 2
6092: DOUBLE
6093: EQUAL
6094: IFTRUE 6098
6096: GO 6128
6098: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6099: LD_ADDR_VAR 0 3
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: LD_INT 2
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 4
6115: PUSH
6116: LD_INT 5
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: ST_TO_ADDR
6126: GO 7129
6128: LD_INT 3
6130: DOUBLE
6131: EQUAL
6132: IFTRUE 6136
6134: GO 6166
6136: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: LD_INT 1
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: ST_TO_ADDR
6164: GO 7129
6166: LD_INT 11
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6204
6174: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6175: LD_ADDR_VAR 0 3
6179: PUSH
6180: LD_INT 1
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: LD_INT 4
6191: PUSH
6192: LD_INT 5
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: ST_TO_ADDR
6202: GO 7129
6204: LD_INT 4
6206: DOUBLE
6207: EQUAL
6208: IFTRUE 6212
6210: GO 6238
6212: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6213: LD_ADDR_VAR 0 3
6217: PUSH
6218: LD_INT 2
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 5
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: ST_TO_ADDR
6236: GO 7129
6238: LD_INT 5
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6246
6244: GO 6272
6246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6247: LD_ADDR_VAR 0 3
6251: PUSH
6252: LD_INT 2
6254: PUSH
6255: LD_INT 3
6257: PUSH
6258: LD_INT 4
6260: PUSH
6261: LD_INT 5
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: ST_TO_ADDR
6270: GO 7129
6272: LD_INT 9
6274: DOUBLE
6275: EQUAL
6276: IFTRUE 6280
6278: GO 6306
6280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6281: LD_ADDR_VAR 0 3
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: LD_INT 3
6291: PUSH
6292: LD_INT 4
6294: PUSH
6295: LD_INT 5
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: ST_TO_ADDR
6304: GO 7129
6306: LD_INT 7
6308: DOUBLE
6309: EQUAL
6310: IFTRUE 6314
6312: GO 6340
6314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6315: LD_ADDR_VAR 0 3
6319: PUSH
6320: LD_INT 2
6322: PUSH
6323: LD_INT 3
6325: PUSH
6326: LD_INT 4
6328: PUSH
6329: LD_INT 5
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: ST_TO_ADDR
6338: GO 7129
6340: LD_INT 12
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6374
6348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6349: LD_ADDR_VAR 0 3
6353: PUSH
6354: LD_INT 2
6356: PUSH
6357: LD_INT 3
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: LD_INT 5
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: ST_TO_ADDR
6372: GO 7129
6374: LD_INT 13
6376: DOUBLE
6377: EQUAL
6378: IFTRUE 6382
6380: GO 6408
6382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6383: LD_ADDR_VAR 0 3
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 4
6396: PUSH
6397: LD_INT 5
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: ST_TO_ADDR
6406: GO 7129
6408: LD_INT 14
6410: DOUBLE
6411: EQUAL
6412: IFTRUE 6416
6414: GO 6434
6416: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6417: LD_ADDR_VAR 0 3
6421: PUSH
6422: LD_INT 4
6424: PUSH
6425: LD_INT 5
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: ST_TO_ADDR
6432: GO 7129
6434: LD_INT 6
6436: DOUBLE
6437: EQUAL
6438: IFTRUE 6442
6440: GO 6460
6442: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 4
6450: PUSH
6451: LD_INT 5
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: ST_TO_ADDR
6458: GO 7129
6460: LD_INT 10
6462: DOUBLE
6463: EQUAL
6464: IFTRUE 6468
6466: GO 6486
6468: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6469: LD_ADDR_VAR 0 3
6473: PUSH
6474: LD_INT 4
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: ST_TO_ADDR
6484: GO 7129
6486: LD_INT 22
6488: DOUBLE
6489: EQUAL
6490: IFTRUE 6494
6492: GO 6520
6494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6495: LD_ADDR_VAR 0 3
6499: PUSH
6500: LD_INT 11
6502: PUSH
6503: LD_INT 12
6505: PUSH
6506: LD_INT 13
6508: PUSH
6509: LD_INT 14
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: ST_TO_ADDR
6518: GO 7129
6520: LD_INT 23
6522: DOUBLE
6523: EQUAL
6524: IFTRUE 6528
6526: GO 6554
6528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_INT 11
6536: PUSH
6537: LD_INT 12
6539: PUSH
6540: LD_INT 13
6542: PUSH
6543: LD_INT 14
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: ST_TO_ADDR
6552: GO 7129
6554: LD_INT 24
6556: DOUBLE
6557: EQUAL
6558: IFTRUE 6562
6560: GO 6588
6562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6563: LD_ADDR_VAR 0 3
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: LD_INT 12
6573: PUSH
6574: LD_INT 13
6576: PUSH
6577: LD_INT 14
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: ST_TO_ADDR
6586: GO 7129
6588: LD_INT 30
6590: DOUBLE
6591: EQUAL
6592: IFTRUE 6596
6594: GO 6622
6596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6597: LD_ADDR_VAR 0 3
6601: PUSH
6602: LD_INT 11
6604: PUSH
6605: LD_INT 12
6607: PUSH
6608: LD_INT 13
6610: PUSH
6611: LD_INT 14
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
6620: GO 7129
6622: LD_INT 25
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6648
6630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 13
6638: PUSH
6639: LD_INT 14
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: ST_TO_ADDR
6646: GO 7129
6648: LD_INT 27
6650: DOUBLE
6651: EQUAL
6652: IFTRUE 6656
6654: GO 6674
6656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6657: LD_ADDR_VAR 0 3
6661: PUSH
6662: LD_INT 13
6664: PUSH
6665: LD_INT 14
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: ST_TO_ADDR
6672: GO 7129
6674: LD_INT 92
6676: DOUBLE
6677: EQUAL
6678: IFTRUE 6682
6680: GO 6708
6682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6683: LD_ADDR_VAR 0 3
6687: PUSH
6688: LD_INT 11
6690: PUSH
6691: LD_INT 12
6693: PUSH
6694: LD_INT 13
6696: PUSH
6697: LD_INT 14
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: ST_TO_ADDR
6706: GO 7129
6708: LD_INT 28
6710: DOUBLE
6711: EQUAL
6712: IFTRUE 6716
6714: GO 6734
6716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6717: LD_ADDR_VAR 0 3
6721: PUSH
6722: LD_INT 13
6724: PUSH
6725: LD_INT 14
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: ST_TO_ADDR
6732: GO 7129
6734: LD_INT 29
6736: DOUBLE
6737: EQUAL
6738: IFTRUE 6742
6740: GO 6760
6742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6743: LD_ADDR_VAR 0 3
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: ST_TO_ADDR
6758: GO 7129
6760: LD_INT 31
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6786
6768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_INT 13
6776: PUSH
6777: LD_INT 14
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: ST_TO_ADDR
6784: GO 7129
6786: LD_INT 26
6788: DOUBLE
6789: EQUAL
6790: IFTRUE 6794
6792: GO 6812
6794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: LD_INT 13
6802: PUSH
6803: LD_INT 14
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: ST_TO_ADDR
6810: GO 7129
6812: LD_INT 42
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6846
6820: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_INT 21
6828: PUSH
6829: LD_INT 22
6831: PUSH
6832: LD_INT 23
6834: PUSH
6835: LD_INT 24
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 7129
6846: LD_INT 43
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6880
6854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 21
6862: PUSH
6863: LD_INT 22
6865: PUSH
6866: LD_INT 23
6868: PUSH
6869: LD_INT 24
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 7129
6880: LD_INT 44
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6914
6888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: LD_INT 21
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_INT 23
6902: PUSH
6903: LD_INT 24
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: ST_TO_ADDR
6912: GO 7129
6914: LD_INT 45
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 6948
6922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6923: LD_ADDR_VAR 0 3
6927: PUSH
6928: LD_INT 21
6930: PUSH
6931: LD_INT 22
6933: PUSH
6934: LD_INT 23
6936: PUSH
6937: LD_INT 24
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7129
6948: LD_INT 49
6950: DOUBLE
6951: EQUAL
6952: IFTRUE 6956
6954: GO 6982
6956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6957: LD_ADDR_VAR 0 3
6961: PUSH
6962: LD_INT 21
6964: PUSH
6965: LD_INT 22
6967: PUSH
6968: LD_INT 23
6970: PUSH
6971: LD_INT 24
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: ST_TO_ADDR
6980: GO 7129
6982: LD_INT 51
6984: DOUBLE
6985: EQUAL
6986: IFTRUE 6990
6988: GO 7016
6990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6991: LD_ADDR_VAR 0 3
6995: PUSH
6996: LD_INT 21
6998: PUSH
6999: LD_INT 22
7001: PUSH
7002: LD_INT 23
7004: PUSH
7005: LD_INT 24
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: ST_TO_ADDR
7014: GO 7129
7016: LD_INT 52
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7050
7024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: LD_INT 21
7032: PUSH
7033: LD_INT 22
7035: PUSH
7036: LD_INT 23
7038: PUSH
7039: LD_INT 24
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: ST_TO_ADDR
7048: GO 7129
7050: LD_INT 53
7052: DOUBLE
7053: EQUAL
7054: IFTRUE 7058
7056: GO 7076
7058: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7059: LD_ADDR_VAR 0 3
7063: PUSH
7064: LD_INT 23
7066: PUSH
7067: LD_INT 24
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: ST_TO_ADDR
7074: GO 7129
7076: LD_INT 46
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7102
7084: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7085: LD_ADDR_VAR 0 3
7089: PUSH
7090: LD_INT 23
7092: PUSH
7093: LD_INT 24
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: ST_TO_ADDR
7100: GO 7129
7102: LD_INT 47
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7128
7110: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7111: LD_ADDR_VAR 0 3
7115: PUSH
7116: LD_INT 23
7118: PUSH
7119: LD_INT 24
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: ST_TO_ADDR
7126: GO 7129
7128: POP
// result := ( chassis in result ) ;
7129: LD_ADDR_VAR 0 3
7133: PUSH
7134: LD_VAR 0 1
7138: PUSH
7139: LD_VAR 0 3
7143: IN
7144: ST_TO_ADDR
// end ;
7145: LD_VAR 0 3
7149: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7150: LD_INT 0
7152: PPUSH
7153: PPUSH
7154: PPUSH
7155: PPUSH
7156: PPUSH
7157: PPUSH
7158: PPUSH
// result := array ;
7159: LD_ADDR_VAR 0 5
7163: PUSH
7164: LD_VAR 0 1
7168: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7169: LD_VAR 0 1
7173: NOT
7174: PUSH
7175: LD_VAR 0 2
7179: NOT
7180: OR
7181: PUSH
7182: LD_VAR 0 3
7186: NOT
7187: OR
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: LD_VAR 0 1
7198: GREATER
7199: OR
7200: PUSH
7201: LD_VAR 0 3
7205: PUSH
7206: LD_VAR 0 1
7210: GREATER
7211: OR
7212: IFFALSE 7216
// exit ;
7214: GO 7512
// if direction then
7216: LD_VAR 0 4
7220: IFFALSE 7284
// begin d := 1 ;
7222: LD_ADDR_VAR 0 9
7226: PUSH
7227: LD_INT 1
7229: ST_TO_ADDR
// if i_from > i_to then
7230: LD_VAR 0 2
7234: PUSH
7235: LD_VAR 0 3
7239: GREATER
7240: IFFALSE 7266
// length := ( array - i_from ) + i_to else
7242: LD_ADDR_VAR 0 11
7246: PUSH
7247: LD_VAR 0 1
7251: PUSH
7252: LD_VAR 0 2
7256: MINUS
7257: PUSH
7258: LD_VAR 0 3
7262: PLUS
7263: ST_TO_ADDR
7264: GO 7282
// length := i_to - i_from ;
7266: LD_ADDR_VAR 0 11
7270: PUSH
7271: LD_VAR 0 3
7275: PUSH
7276: LD_VAR 0 2
7280: MINUS
7281: ST_TO_ADDR
// end else
7282: GO 7345
// begin d := - 1 ;
7284: LD_ADDR_VAR 0 9
7288: PUSH
7289: LD_INT 1
7291: NEG
7292: ST_TO_ADDR
// if i_from > i_to then
7293: LD_VAR 0 2
7297: PUSH
7298: LD_VAR 0 3
7302: GREATER
7303: IFFALSE 7323
// length := i_from - i_to else
7305: LD_ADDR_VAR 0 11
7309: PUSH
7310: LD_VAR 0 2
7314: PUSH
7315: LD_VAR 0 3
7319: MINUS
7320: ST_TO_ADDR
7321: GO 7345
// length := ( array - i_to ) + i_from ;
7323: LD_ADDR_VAR 0 11
7327: PUSH
7328: LD_VAR 0 1
7332: PUSH
7333: LD_VAR 0 3
7337: MINUS
7338: PUSH
7339: LD_VAR 0 2
7343: PLUS
7344: ST_TO_ADDR
// end ; if not length then
7345: LD_VAR 0 11
7349: NOT
7350: IFFALSE 7354
// exit ;
7352: GO 7512
// tmp := array ;
7354: LD_ADDR_VAR 0 10
7358: PUSH
7359: LD_VAR 0 1
7363: ST_TO_ADDR
// for i = 1 to length do
7364: LD_ADDR_VAR 0 6
7368: PUSH
7369: DOUBLE
7370: LD_INT 1
7372: DEC
7373: ST_TO_ADDR
7374: LD_VAR 0 11
7378: PUSH
7379: FOR_TO
7380: IFFALSE 7500
// begin for j = 1 to array do
7382: LD_ADDR_VAR 0 7
7386: PUSH
7387: DOUBLE
7388: LD_INT 1
7390: DEC
7391: ST_TO_ADDR
7392: LD_VAR 0 1
7396: PUSH
7397: FOR_TO
7398: IFFALSE 7486
// begin k := j + d ;
7400: LD_ADDR_VAR 0 8
7404: PUSH
7405: LD_VAR 0 7
7409: PUSH
7410: LD_VAR 0 9
7414: PLUS
7415: ST_TO_ADDR
// if k > array then
7416: LD_VAR 0 8
7420: PUSH
7421: LD_VAR 0 1
7425: GREATER
7426: IFFALSE 7436
// k := 1 ;
7428: LD_ADDR_VAR 0 8
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if not k then
7436: LD_VAR 0 8
7440: NOT
7441: IFFALSE 7453
// k := array ;
7443: LD_ADDR_VAR 0 8
7447: PUSH
7448: LD_VAR 0 1
7452: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7453: LD_ADDR_VAR 0 10
7457: PUSH
7458: LD_VAR 0 10
7462: PPUSH
7463: LD_VAR 0 8
7467: PPUSH
7468: LD_VAR 0 1
7472: PUSH
7473: LD_VAR 0 7
7477: ARRAY
7478: PPUSH
7479: CALL_OW 1
7483: ST_TO_ADDR
// end ;
7484: GO 7397
7486: POP
7487: POP
// array := tmp ;
7488: LD_ADDR_VAR 0 1
7492: PUSH
7493: LD_VAR 0 10
7497: ST_TO_ADDR
// end ;
7498: GO 7379
7500: POP
7501: POP
// result := array ;
7502: LD_ADDR_VAR 0 5
7506: PUSH
7507: LD_VAR 0 1
7511: ST_TO_ADDR
// end ;
7512: LD_VAR 0 5
7516: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
// result := 0 ;
7521: LD_ADDR_VAR 0 3
7525: PUSH
7526: LD_INT 0
7528: ST_TO_ADDR
// if not array or not value in array then
7529: LD_VAR 0 1
7533: NOT
7534: PUSH
7535: LD_VAR 0 2
7539: PUSH
7540: LD_VAR 0 1
7544: IN
7545: NOT
7546: OR
7547: IFFALSE 7551
// exit ;
7549: GO 7605
// for i = 1 to array do
7551: LD_ADDR_VAR 0 4
7555: PUSH
7556: DOUBLE
7557: LD_INT 1
7559: DEC
7560: ST_TO_ADDR
7561: LD_VAR 0 1
7565: PUSH
7566: FOR_TO
7567: IFFALSE 7603
// if value = array [ i ] then
7569: LD_VAR 0 2
7573: PUSH
7574: LD_VAR 0 1
7578: PUSH
7579: LD_VAR 0 4
7583: ARRAY
7584: EQUAL
7585: IFFALSE 7601
// begin result := i ;
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: LD_VAR 0 4
7596: ST_TO_ADDR
// exit ;
7597: POP
7598: POP
7599: GO 7605
// end ;
7601: GO 7566
7603: POP
7604: POP
// end ;
7605: LD_VAR 0 3
7609: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7610: LD_INT 0
7612: PPUSH
// vc_chassis := chassis ;
7613: LD_ADDR_OWVAR 37
7617: PUSH
7618: LD_VAR 0 1
7622: ST_TO_ADDR
// vc_engine := engine ;
7623: LD_ADDR_OWVAR 39
7627: PUSH
7628: LD_VAR 0 2
7632: ST_TO_ADDR
// vc_control := control ;
7633: LD_ADDR_OWVAR 38
7637: PUSH
7638: LD_VAR 0 3
7642: ST_TO_ADDR
// vc_weapon := weapon ;
7643: LD_ADDR_OWVAR 40
7647: PUSH
7648: LD_VAR 0 4
7652: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7653: LD_ADDR_OWVAR 41
7657: PUSH
7658: LD_VAR 0 5
7662: ST_TO_ADDR
// end ;
7663: LD_VAR 0 6
7667: RET
// export function WantPlant ( unit ) ; var task ; begin
7668: LD_INT 0
7670: PPUSH
7671: PPUSH
// result := false ;
7672: LD_ADDR_VAR 0 2
7676: PUSH
7677: LD_INT 0
7679: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7680: LD_ADDR_VAR 0 3
7684: PUSH
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 437
7694: ST_TO_ADDR
// if task then
7695: LD_VAR 0 3
7699: IFFALSE 7727
// if task [ 1 ] [ 1 ] = p then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 1
7708: ARRAY
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PUSH
7714: LD_STRING p
7716: EQUAL
7717: IFFALSE 7727
// result := true ;
7719: LD_ADDR_VAR 0 2
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// end ;
7727: LD_VAR 0 2
7731: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7732: LD_INT 0
7734: PPUSH
7735: PPUSH
7736: PPUSH
7737: PPUSH
// if pos < 1 then
7738: LD_VAR 0 2
7742: PUSH
7743: LD_INT 1
7745: LESS
7746: IFFALSE 7750
// exit ;
7748: GO 8053
// if pos = 1 then
7750: LD_VAR 0 2
7754: PUSH
7755: LD_INT 1
7757: EQUAL
7758: IFFALSE 7791
// result := Replace ( arr , pos [ 1 ] , value ) else
7760: LD_ADDR_VAR 0 4
7764: PUSH
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_VAR 0 2
7774: PUSH
7775: LD_INT 1
7777: ARRAY
7778: PPUSH
7779: LD_VAR 0 3
7783: PPUSH
7784: CALL_OW 1
7788: ST_TO_ADDR
7789: GO 8053
// begin tmp := arr ;
7791: LD_ADDR_VAR 0 6
7795: PUSH
7796: LD_VAR 0 1
7800: ST_TO_ADDR
// s_arr := [ tmp ] ;
7801: LD_ADDR_VAR 0 7
7805: PUSH
7806: LD_VAR 0 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: ST_TO_ADDR
// for i = 1 to pos - 1 do
7814: LD_ADDR_VAR 0 5
7818: PUSH
7819: DOUBLE
7820: LD_INT 1
7822: DEC
7823: ST_TO_ADDR
7824: LD_VAR 0 2
7828: PUSH
7829: LD_INT 1
7831: MINUS
7832: PUSH
7833: FOR_TO
7834: IFFALSE 7879
// begin tmp := tmp [ pos [ i ] ] ;
7836: LD_ADDR_VAR 0 6
7840: PUSH
7841: LD_VAR 0 6
7845: PUSH
7846: LD_VAR 0 2
7850: PUSH
7851: LD_VAR 0 5
7855: ARRAY
7856: ARRAY
7857: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7858: LD_ADDR_VAR 0 7
7862: PUSH
7863: LD_VAR 0 7
7867: PUSH
7868: LD_VAR 0 6
7872: PUSH
7873: EMPTY
7874: LIST
7875: ADD
7876: ST_TO_ADDR
// end ;
7877: GO 7833
7879: POP
7880: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7881: LD_ADDR_VAR 0 6
7885: PUSH
7886: LD_VAR 0 6
7890: PPUSH
7891: LD_VAR 0 2
7895: PUSH
7896: LD_VAR 0 2
7900: ARRAY
7901: PPUSH
7902: LD_VAR 0 3
7906: PPUSH
7907: CALL_OW 1
7911: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7912: LD_ADDR_VAR 0 7
7916: PUSH
7917: LD_VAR 0 7
7921: PPUSH
7922: LD_VAR 0 7
7926: PPUSH
7927: LD_VAR 0 6
7931: PPUSH
7932: CALL_OW 1
7936: ST_TO_ADDR
// for i = s_arr downto 2 do
7937: LD_ADDR_VAR 0 5
7941: PUSH
7942: DOUBLE
7943: LD_VAR 0 7
7947: INC
7948: ST_TO_ADDR
7949: LD_INT 2
7951: PUSH
7952: FOR_DOWNTO
7953: IFFALSE 8037
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7955: LD_ADDR_VAR 0 6
7959: PUSH
7960: LD_VAR 0 7
7964: PUSH
7965: LD_VAR 0 5
7969: PUSH
7970: LD_INT 1
7972: MINUS
7973: ARRAY
7974: PPUSH
7975: LD_VAR 0 2
7979: PUSH
7980: LD_VAR 0 5
7984: PUSH
7985: LD_INT 1
7987: MINUS
7988: ARRAY
7989: PPUSH
7990: LD_VAR 0 7
7994: PUSH
7995: LD_VAR 0 5
7999: ARRAY
8000: PPUSH
8001: CALL_OW 1
8005: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8006: LD_ADDR_VAR 0 7
8010: PUSH
8011: LD_VAR 0 7
8015: PPUSH
8016: LD_VAR 0 5
8020: PUSH
8021: LD_INT 1
8023: MINUS
8024: PPUSH
8025: LD_VAR 0 6
8029: PPUSH
8030: CALL_OW 1
8034: ST_TO_ADDR
// end ;
8035: GO 7952
8037: POP
8038: POP
// result := s_arr [ 1 ] ;
8039: LD_ADDR_VAR 0 4
8043: PUSH
8044: LD_VAR 0 7
8048: PUSH
8049: LD_INT 1
8051: ARRAY
8052: ST_TO_ADDR
// end ; end ;
8053: LD_VAR 0 4
8057: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8058: LD_INT 0
8060: PPUSH
8061: PPUSH
// if not list then
8062: LD_VAR 0 1
8066: NOT
8067: IFFALSE 8071
// exit ;
8069: GO 8162
// i := list [ pos1 ] ;
8071: LD_ADDR_VAR 0 5
8075: PUSH
8076: LD_VAR 0 1
8080: PUSH
8081: LD_VAR 0 2
8085: ARRAY
8086: ST_TO_ADDR
// if not i then
8087: LD_VAR 0 5
8091: NOT
8092: IFFALSE 8096
// exit ;
8094: GO 8162
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8096: LD_ADDR_VAR 0 1
8100: PUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_VAR 0 1
8115: PUSH
8116: LD_VAR 0 3
8120: ARRAY
8121: PPUSH
8122: CALL_OW 1
8126: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8127: LD_ADDR_VAR 0 1
8131: PUSH
8132: LD_VAR 0 1
8136: PPUSH
8137: LD_VAR 0 3
8141: PPUSH
8142: LD_VAR 0 5
8146: PPUSH
8147: CALL_OW 1
8151: ST_TO_ADDR
// result := list ;
8152: LD_ADDR_VAR 0 4
8156: PUSH
8157: LD_VAR 0 1
8161: ST_TO_ADDR
// end ;
8162: LD_VAR 0 4
8166: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8167: LD_INT 0
8169: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8170: LD_ADDR_VAR 0 5
8174: PUSH
8175: LD_VAR 0 1
8179: PPUSH
8180: CALL_OW 250
8184: PPUSH
8185: LD_VAR 0 1
8189: PPUSH
8190: CALL_OW 251
8194: PPUSH
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_VAR 0 3
8204: PPUSH
8205: LD_VAR 0 4
8209: PPUSH
8210: CALL 8220 0 5
8214: ST_TO_ADDR
// end ;
8215: LD_VAR 0 5
8219: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8220: LD_INT 0
8222: PPUSH
8223: PPUSH
8224: PPUSH
8225: PPUSH
// if not list then
8226: LD_VAR 0 3
8230: NOT
8231: IFFALSE 8235
// exit ;
8233: GO 8623
// result := [ ] ;
8235: LD_ADDR_VAR 0 6
8239: PUSH
8240: EMPTY
8241: ST_TO_ADDR
// for i in list do
8242: LD_ADDR_VAR 0 7
8246: PUSH
8247: LD_VAR 0 3
8251: PUSH
8252: FOR_IN
8253: IFFALSE 8455
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8255: LD_ADDR_VAR 0 9
8259: PUSH
8260: LD_VAR 0 7
8264: PPUSH
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: CALL_OW 297
8279: ST_TO_ADDR
// if not result then
8280: LD_VAR 0 6
8284: NOT
8285: IFFALSE 8311
// result := [ [ i , tmp ] ] else
8287: LD_ADDR_VAR 0 6
8291: PUSH
8292: LD_VAR 0 7
8296: PUSH
8297: LD_VAR 0 9
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: ST_TO_ADDR
8309: GO 8453
// begin if result [ result ] [ 2 ] < tmp then
8311: LD_VAR 0 6
8315: PUSH
8316: LD_VAR 0 6
8320: ARRAY
8321: PUSH
8322: LD_INT 2
8324: ARRAY
8325: PUSH
8326: LD_VAR 0 9
8330: LESS
8331: IFFALSE 8373
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8333: LD_ADDR_VAR 0 6
8337: PUSH
8338: LD_VAR 0 6
8342: PPUSH
8343: LD_VAR 0 6
8347: PUSH
8348: LD_INT 1
8350: PLUS
8351: PPUSH
8352: LD_VAR 0 7
8356: PUSH
8357: LD_VAR 0 9
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PPUSH
8366: CALL_OW 2
8370: ST_TO_ADDR
8371: GO 8453
// for j = 1 to result do
8373: LD_ADDR_VAR 0 8
8377: PUSH
8378: DOUBLE
8379: LD_INT 1
8381: DEC
8382: ST_TO_ADDR
8383: LD_VAR 0 6
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8451
// begin if tmp < result [ j ] [ 2 ] then
8391: LD_VAR 0 9
8395: PUSH
8396: LD_VAR 0 6
8400: PUSH
8401: LD_VAR 0 8
8405: ARRAY
8406: PUSH
8407: LD_INT 2
8409: ARRAY
8410: LESS
8411: IFFALSE 8449
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8413: LD_ADDR_VAR 0 6
8417: PUSH
8418: LD_VAR 0 6
8422: PPUSH
8423: LD_VAR 0 8
8427: PPUSH
8428: LD_VAR 0 7
8432: PUSH
8433: LD_VAR 0 9
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PPUSH
8442: CALL_OW 2
8446: ST_TO_ADDR
// break ;
8447: GO 8451
// end ; end ;
8449: GO 8388
8451: POP
8452: POP
// end ; end ;
8453: GO 8252
8455: POP
8456: POP
// if result and not asc then
8457: LD_VAR 0 6
8461: PUSH
8462: LD_VAR 0 4
8466: NOT
8467: AND
8468: IFFALSE 8543
// begin tmp := result ;
8470: LD_ADDR_VAR 0 9
8474: PUSH
8475: LD_VAR 0 6
8479: ST_TO_ADDR
// for i = tmp downto 1 do
8480: LD_ADDR_VAR 0 7
8484: PUSH
8485: DOUBLE
8486: LD_VAR 0 9
8490: INC
8491: ST_TO_ADDR
8492: LD_INT 1
8494: PUSH
8495: FOR_DOWNTO
8496: IFFALSE 8541
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8498: LD_ADDR_VAR 0 6
8502: PUSH
8503: LD_VAR 0 6
8507: PPUSH
8508: LD_VAR 0 9
8512: PUSH
8513: LD_VAR 0 7
8517: MINUS
8518: PUSH
8519: LD_INT 1
8521: PLUS
8522: PPUSH
8523: LD_VAR 0 9
8527: PUSH
8528: LD_VAR 0 7
8532: ARRAY
8533: PPUSH
8534: CALL_OW 1
8538: ST_TO_ADDR
8539: GO 8495
8541: POP
8542: POP
// end ; tmp := [ ] ;
8543: LD_ADDR_VAR 0 9
8547: PUSH
8548: EMPTY
8549: ST_TO_ADDR
// if mode then
8550: LD_VAR 0 5
8554: IFFALSE 8623
// begin for i = 1 to result do
8556: LD_ADDR_VAR 0 7
8560: PUSH
8561: DOUBLE
8562: LD_INT 1
8564: DEC
8565: ST_TO_ADDR
8566: LD_VAR 0 6
8570: PUSH
8571: FOR_TO
8572: IFFALSE 8611
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8574: LD_ADDR_VAR 0 9
8578: PUSH
8579: LD_VAR 0 9
8583: PPUSH
8584: LD_VAR 0 7
8588: PPUSH
8589: LD_VAR 0 6
8593: PUSH
8594: LD_VAR 0 7
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: CALL_OW 1
8608: ST_TO_ADDR
8609: GO 8571
8611: POP
8612: POP
// result := tmp ;
8613: LD_ADDR_VAR 0 6
8617: PUSH
8618: LD_VAR 0 9
8622: ST_TO_ADDR
// end ; end ;
8623: LD_VAR 0 6
8627: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8628: LD_INT 0
8630: PPUSH
8631: PPUSH
8632: PPUSH
8633: PPUSH
8634: PPUSH
8635: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8636: LD_ADDR_VAR 0 5
8640: PUSH
8641: LD_INT 0
8643: PUSH
8644: LD_INT 0
8646: PUSH
8647: LD_INT 0
8649: PUSH
8650: EMPTY
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: ST_TO_ADDR
// if not x or not y then
8658: LD_VAR 0 2
8662: NOT
8663: PUSH
8664: LD_VAR 0 3
8668: NOT
8669: OR
8670: IFFALSE 8674
// exit ;
8672: GO 10324
// if not range then
8674: LD_VAR 0 4
8678: NOT
8679: IFFALSE 8689
// range := 10 ;
8681: LD_ADDR_VAR 0 4
8685: PUSH
8686: LD_INT 10
8688: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8689: LD_ADDR_VAR 0 8
8693: PUSH
8694: LD_INT 81
8696: PUSH
8697: LD_VAR 0 1
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 92
8708: PUSH
8709: LD_VAR 0 2
8713: PUSH
8714: LD_VAR 0 3
8718: PUSH
8719: LD_VAR 0 4
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: PUSH
8730: LD_INT 3
8732: PUSH
8733: LD_INT 21
8735: PUSH
8736: LD_INT 3
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: PPUSH
8752: CALL_OW 69
8756: ST_TO_ADDR
// if not tmp then
8757: LD_VAR 0 8
8761: NOT
8762: IFFALSE 8766
// exit ;
8764: GO 10324
// for i in tmp do
8766: LD_ADDR_VAR 0 6
8770: PUSH
8771: LD_VAR 0 8
8775: PUSH
8776: FOR_IN
8777: IFFALSE 10299
// begin points := [ 0 , 0 , 0 ] ;
8779: LD_ADDR_VAR 0 9
8783: PUSH
8784: LD_INT 0
8786: PUSH
8787: LD_INT 0
8789: PUSH
8790: LD_INT 0
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: LIST
8797: ST_TO_ADDR
// bpoints := 1 ;
8798: LD_ADDR_VAR 0 10
8802: PUSH
8803: LD_INT 1
8805: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8806: LD_VAR 0 6
8810: PPUSH
8811: CALL_OW 247
8815: PUSH
8816: LD_INT 1
8818: DOUBLE
8819: EQUAL
8820: IFTRUE 8824
8822: GO 9402
8824: POP
// begin if GetClass ( i ) = 1 then
8825: LD_VAR 0 6
8829: PPUSH
8830: CALL_OW 257
8834: PUSH
8835: LD_INT 1
8837: EQUAL
8838: IFFALSE 8859
// points := [ 10 , 5 , 3 ] ;
8840: LD_ADDR_VAR 0 9
8844: PUSH
8845: LD_INT 10
8847: PUSH
8848: LD_INT 5
8850: PUSH
8851: LD_INT 3
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8859: LD_VAR 0 6
8863: PPUSH
8864: CALL_OW 257
8868: PUSH
8869: LD_INT 2
8871: PUSH
8872: LD_INT 3
8874: PUSH
8875: LD_INT 4
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: IN
8883: IFFALSE 8904
// points := [ 3 , 2 , 1 ] ;
8885: LD_ADDR_VAR 0 9
8889: PUSH
8890: LD_INT 3
8892: PUSH
8893: LD_INT 2
8895: PUSH
8896: LD_INT 1
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8904: LD_VAR 0 6
8908: PPUSH
8909: CALL_OW 257
8913: PUSH
8914: LD_INT 5
8916: EQUAL
8917: IFFALSE 8938
// points := [ 130 , 5 , 2 ] ;
8919: LD_ADDR_VAR 0 9
8923: PUSH
8924: LD_INT 130
8926: PUSH
8927: LD_INT 5
8929: PUSH
8930: LD_INT 2
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: LIST
8937: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8938: LD_VAR 0 6
8942: PPUSH
8943: CALL_OW 257
8947: PUSH
8948: LD_INT 8
8950: EQUAL
8951: IFFALSE 8972
// points := [ 35 , 35 , 30 ] ;
8953: LD_ADDR_VAR 0 9
8957: PUSH
8958: LD_INT 35
8960: PUSH
8961: LD_INT 35
8963: PUSH
8964: LD_INT 30
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8972: LD_VAR 0 6
8976: PPUSH
8977: CALL_OW 257
8981: PUSH
8982: LD_INT 9
8984: EQUAL
8985: IFFALSE 9006
// points := [ 20 , 55 , 40 ] ;
8987: LD_ADDR_VAR 0 9
8991: PUSH
8992: LD_INT 20
8994: PUSH
8995: LD_INT 55
8997: PUSH
8998: LD_INT 40
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9006: LD_VAR 0 6
9010: PPUSH
9011: CALL_OW 257
9015: PUSH
9016: LD_INT 12
9018: PUSH
9019: LD_INT 16
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: IN
9026: IFFALSE 9047
// points := [ 5 , 3 , 2 ] ;
9028: LD_ADDR_VAR 0 9
9032: PUSH
9033: LD_INT 5
9035: PUSH
9036: LD_INT 3
9038: PUSH
9039: LD_INT 2
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: LIST
9046: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9047: LD_VAR 0 6
9051: PPUSH
9052: CALL_OW 257
9056: PUSH
9057: LD_INT 17
9059: EQUAL
9060: IFFALSE 9081
// points := [ 100 , 50 , 75 ] ;
9062: LD_ADDR_VAR 0 9
9066: PUSH
9067: LD_INT 100
9069: PUSH
9070: LD_INT 50
9072: PUSH
9073: LD_INT 75
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9081: LD_VAR 0 6
9085: PPUSH
9086: CALL_OW 257
9090: PUSH
9091: LD_INT 15
9093: EQUAL
9094: IFFALSE 9115
// points := [ 10 , 5 , 3 ] ;
9096: LD_ADDR_VAR 0 9
9100: PUSH
9101: LD_INT 10
9103: PUSH
9104: LD_INT 5
9106: PUSH
9107: LD_INT 3
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9115: LD_VAR 0 6
9119: PPUSH
9120: CALL_OW 257
9124: PUSH
9125: LD_INT 14
9127: EQUAL
9128: IFFALSE 9149
// points := [ 10 , 0 , 0 ] ;
9130: LD_ADDR_VAR 0 9
9134: PUSH
9135: LD_INT 10
9137: PUSH
9138: LD_INT 0
9140: PUSH
9141: LD_INT 0
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9149: LD_VAR 0 6
9153: PPUSH
9154: CALL_OW 257
9158: PUSH
9159: LD_INT 11
9161: EQUAL
9162: IFFALSE 9183
// points := [ 30 , 10 , 5 ] ;
9164: LD_ADDR_VAR 0 9
9168: PUSH
9169: LD_INT 30
9171: PUSH
9172: LD_INT 10
9174: PUSH
9175: LD_INT 5
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: LIST
9182: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9183: LD_VAR 0 1
9187: PPUSH
9188: LD_INT 5
9190: PPUSH
9191: CALL_OW 321
9195: PUSH
9196: LD_INT 2
9198: EQUAL
9199: IFFALSE 9216
// bpoints := bpoints * 1.8 ;
9201: LD_ADDR_VAR 0 10
9205: PUSH
9206: LD_VAR 0 10
9210: PUSH
9211: LD_REAL  1.80000000000000E+0000
9214: MUL
9215: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9216: LD_VAR 0 6
9220: PPUSH
9221: CALL_OW 257
9225: PUSH
9226: LD_INT 1
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: LD_INT 3
9234: PUSH
9235: LD_INT 4
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: IN
9244: PUSH
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 51
9252: PPUSH
9253: CALL_OW 321
9257: PUSH
9258: LD_INT 2
9260: EQUAL
9261: AND
9262: IFFALSE 9279
// bpoints := bpoints * 1.2 ;
9264: LD_ADDR_VAR 0 10
9268: PUSH
9269: LD_VAR 0 10
9273: PUSH
9274: LD_REAL  1.20000000000000E+0000
9277: MUL
9278: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9279: LD_VAR 0 6
9283: PPUSH
9284: CALL_OW 257
9288: PUSH
9289: LD_INT 5
9291: PUSH
9292: LD_INT 7
9294: PUSH
9295: LD_INT 9
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: IN
9303: PUSH
9304: LD_VAR 0 1
9308: PPUSH
9309: LD_INT 52
9311: PPUSH
9312: CALL_OW 321
9316: PUSH
9317: LD_INT 2
9319: EQUAL
9320: AND
9321: IFFALSE 9338
// bpoints := bpoints * 1.5 ;
9323: LD_ADDR_VAR 0 10
9327: PUSH
9328: LD_VAR 0 10
9332: PUSH
9333: LD_REAL  1.50000000000000E+0000
9336: MUL
9337: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9338: LD_VAR 0 1
9342: PPUSH
9343: LD_INT 66
9345: PPUSH
9346: CALL_OW 321
9350: PUSH
9351: LD_INT 2
9353: EQUAL
9354: IFFALSE 9371
// bpoints := bpoints * 1.1 ;
9356: LD_ADDR_VAR 0 10
9360: PUSH
9361: LD_VAR 0 10
9365: PUSH
9366: LD_REAL  1.10000000000000E+0000
9369: MUL
9370: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9371: LD_ADDR_VAR 0 10
9375: PUSH
9376: LD_VAR 0 10
9380: PUSH
9381: LD_VAR 0 6
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: CALL_OW 259
9393: PUSH
9394: LD_REAL  1.15000000000000E+0000
9397: MUL
9398: MUL
9399: ST_TO_ADDR
// end ; unit_vehicle :
9400: GO 10228
9402: LD_INT 2
9404: DOUBLE
9405: EQUAL
9406: IFTRUE 9410
9408: GO 10216
9410: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9411: LD_VAR 0 6
9415: PPUSH
9416: CALL_OW 264
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: LD_INT 42
9426: PUSH
9427: LD_INT 24
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: IN
9435: IFFALSE 9456
// points := [ 25 , 5 , 3 ] ;
9437: LD_ADDR_VAR 0 9
9441: PUSH
9442: LD_INT 25
9444: PUSH
9445: LD_INT 5
9447: PUSH
9448: LD_INT 3
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9456: LD_VAR 0 6
9460: PPUSH
9461: CALL_OW 264
9465: PUSH
9466: LD_INT 4
9468: PUSH
9469: LD_INT 43
9471: PUSH
9472: LD_INT 25
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: LIST
9479: IN
9480: IFFALSE 9501
// points := [ 40 , 15 , 5 ] ;
9482: LD_ADDR_VAR 0 9
9486: PUSH
9487: LD_INT 40
9489: PUSH
9490: LD_INT 15
9492: PUSH
9493: LD_INT 5
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: LIST
9500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9501: LD_VAR 0 6
9505: PPUSH
9506: CALL_OW 264
9510: PUSH
9511: LD_INT 3
9513: PUSH
9514: LD_INT 23
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: IN
9521: IFFALSE 9542
// points := [ 7 , 25 , 8 ] ;
9523: LD_ADDR_VAR 0 9
9527: PUSH
9528: LD_INT 7
9530: PUSH
9531: LD_INT 25
9533: PUSH
9534: LD_INT 8
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9542: LD_VAR 0 6
9546: PPUSH
9547: CALL_OW 264
9551: PUSH
9552: LD_INT 5
9554: PUSH
9555: LD_INT 27
9557: PUSH
9558: LD_INT 44
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: IN
9566: IFFALSE 9587
// points := [ 14 , 50 , 16 ] ;
9568: LD_ADDR_VAR 0 9
9572: PUSH
9573: LD_INT 14
9575: PUSH
9576: LD_INT 50
9578: PUSH
9579: LD_INT 16
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9587: LD_VAR 0 6
9591: PPUSH
9592: CALL_OW 264
9596: PUSH
9597: LD_INT 6
9599: PUSH
9600: LD_INT 46
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: IN
9607: IFFALSE 9628
// points := [ 32 , 120 , 70 ] ;
9609: LD_ADDR_VAR 0 9
9613: PUSH
9614: LD_INT 32
9616: PUSH
9617: LD_INT 120
9619: PUSH
9620: LD_INT 70
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9628: LD_VAR 0 6
9632: PPUSH
9633: CALL_OW 264
9637: PUSH
9638: LD_INT 7
9640: PUSH
9641: LD_INT 28
9643: PUSH
9644: LD_INT 45
9646: PUSH
9647: LD_INT 92
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: IN
9656: IFFALSE 9677
// points := [ 35 , 20 , 45 ] ;
9658: LD_ADDR_VAR 0 9
9662: PUSH
9663: LD_INT 35
9665: PUSH
9666: LD_INT 20
9668: PUSH
9669: LD_INT 45
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9677: LD_VAR 0 6
9681: PPUSH
9682: CALL_OW 264
9686: PUSH
9687: LD_INT 47
9689: PUSH
9690: EMPTY
9691: LIST
9692: IN
9693: IFFALSE 9714
// points := [ 67 , 45 , 75 ] ;
9695: LD_ADDR_VAR 0 9
9699: PUSH
9700: LD_INT 67
9702: PUSH
9703: LD_INT 45
9705: PUSH
9706: LD_INT 75
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9714: LD_VAR 0 6
9718: PPUSH
9719: CALL_OW 264
9723: PUSH
9724: LD_INT 26
9726: PUSH
9727: EMPTY
9728: LIST
9729: IN
9730: IFFALSE 9751
// points := [ 120 , 30 , 80 ] ;
9732: LD_ADDR_VAR 0 9
9736: PUSH
9737: LD_INT 120
9739: PUSH
9740: LD_INT 30
9742: PUSH
9743: LD_INT 80
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9751: LD_VAR 0 6
9755: PPUSH
9756: CALL_OW 264
9760: PUSH
9761: LD_INT 22
9763: PUSH
9764: EMPTY
9765: LIST
9766: IN
9767: IFFALSE 9788
// points := [ 40 , 1 , 1 ] ;
9769: LD_ADDR_VAR 0 9
9773: PUSH
9774: LD_INT 40
9776: PUSH
9777: LD_INT 1
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9788: LD_VAR 0 6
9792: PPUSH
9793: CALL_OW 264
9797: PUSH
9798: LD_INT 29
9800: PUSH
9801: EMPTY
9802: LIST
9803: IN
9804: IFFALSE 9825
// points := [ 70 , 200 , 400 ] ;
9806: LD_ADDR_VAR 0 9
9810: PUSH
9811: LD_INT 70
9813: PUSH
9814: LD_INT 200
9816: PUSH
9817: LD_INT 400
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9825: LD_VAR 0 6
9829: PPUSH
9830: CALL_OW 264
9834: PUSH
9835: LD_INT 14
9837: PUSH
9838: LD_INT 53
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: IN
9845: IFFALSE 9866
// points := [ 40 , 10 , 20 ] ;
9847: LD_ADDR_VAR 0 9
9851: PUSH
9852: LD_INT 40
9854: PUSH
9855: LD_INT 10
9857: PUSH
9858: LD_INT 20
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: LIST
9865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9866: LD_VAR 0 6
9870: PPUSH
9871: CALL_OW 264
9875: PUSH
9876: LD_INT 9
9878: PUSH
9879: EMPTY
9880: LIST
9881: IN
9882: IFFALSE 9903
// points := [ 5 , 70 , 20 ] ;
9884: LD_ADDR_VAR 0 9
9888: PUSH
9889: LD_INT 5
9891: PUSH
9892: LD_INT 70
9894: PUSH
9895: LD_INT 20
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9903: LD_VAR 0 6
9907: PPUSH
9908: CALL_OW 264
9912: PUSH
9913: LD_INT 10
9915: PUSH
9916: EMPTY
9917: LIST
9918: IN
9919: IFFALSE 9940
// points := [ 35 , 110 , 70 ] ;
9921: LD_ADDR_VAR 0 9
9925: PUSH
9926: LD_INT 35
9928: PUSH
9929: LD_INT 110
9931: PUSH
9932: LD_INT 70
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: LIST
9939: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9940: LD_VAR 0 6
9944: PPUSH
9945: CALL_OW 265
9949: PUSH
9950: LD_INT 25
9952: EQUAL
9953: IFFALSE 9974
// points := [ 80 , 65 , 100 ] ;
9955: LD_ADDR_VAR 0 9
9959: PUSH
9960: LD_INT 80
9962: PUSH
9963: LD_INT 65
9965: PUSH
9966: LD_INT 100
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: LIST
9973: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9974: LD_VAR 0 6
9978: PPUSH
9979: CALL_OW 263
9983: PUSH
9984: LD_INT 1
9986: EQUAL
9987: IFFALSE 10022
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9989: LD_ADDR_VAR 0 10
9993: PUSH
9994: LD_VAR 0 10
9998: PUSH
9999: LD_VAR 0 6
10003: PPUSH
10004: CALL_OW 311
10008: PPUSH
10009: LD_INT 3
10011: PPUSH
10012: CALL_OW 259
10016: PUSH
10017: LD_INT 4
10019: MUL
10020: MUL
10021: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10022: LD_VAR 0 6
10026: PPUSH
10027: CALL_OW 263
10031: PUSH
10032: LD_INT 2
10034: EQUAL
10035: IFFALSE 10086
// begin j := IsControledBy ( i ) ;
10037: LD_ADDR_VAR 0 7
10041: PUSH
10042: LD_VAR 0 6
10046: PPUSH
10047: CALL_OW 312
10051: ST_TO_ADDR
// if j then
10052: LD_VAR 0 7
10056: IFFALSE 10086
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10058: LD_ADDR_VAR 0 10
10062: PUSH
10063: LD_VAR 0 10
10067: PUSH
10068: LD_VAR 0 7
10072: PPUSH
10073: LD_INT 3
10075: PPUSH
10076: CALL_OW 259
10080: PUSH
10081: LD_INT 3
10083: MUL
10084: MUL
10085: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10086: LD_VAR 0 6
10090: PPUSH
10091: CALL_OW 264
10095: PUSH
10096: LD_INT 5
10098: PUSH
10099: LD_INT 6
10101: PUSH
10102: LD_INT 46
10104: PUSH
10105: LD_INT 44
10107: PUSH
10108: LD_INT 47
10110: PUSH
10111: LD_INT 45
10113: PUSH
10114: LD_INT 28
10116: PUSH
10117: LD_INT 7
10119: PUSH
10120: LD_INT 27
10122: PUSH
10123: LD_INT 29
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: IN
10138: PUSH
10139: LD_VAR 0 1
10143: PPUSH
10144: LD_INT 52
10146: PPUSH
10147: CALL_OW 321
10151: PUSH
10152: LD_INT 2
10154: EQUAL
10155: AND
10156: IFFALSE 10173
// bpoints := bpoints * 1.2 ;
10158: LD_ADDR_VAR 0 10
10162: PUSH
10163: LD_VAR 0 10
10167: PUSH
10168: LD_REAL  1.20000000000000E+0000
10171: MUL
10172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10173: LD_VAR 0 6
10177: PPUSH
10178: CALL_OW 264
10182: PUSH
10183: LD_INT 6
10185: PUSH
10186: LD_INT 46
10188: PUSH
10189: LD_INT 47
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: IN
10197: IFFALSE 10214
// bpoints := bpoints * 1.2 ;
10199: LD_ADDR_VAR 0 10
10203: PUSH
10204: LD_VAR 0 10
10208: PUSH
10209: LD_REAL  1.20000000000000E+0000
10212: MUL
10213: ST_TO_ADDR
// end ; unit_building :
10214: GO 10228
10216: LD_INT 3
10218: DOUBLE
10219: EQUAL
10220: IFTRUE 10224
10222: GO 10227
10224: POP
// ; end ;
10225: GO 10228
10227: POP
// for j = 1 to 3 do
10228: LD_ADDR_VAR 0 7
10232: PUSH
10233: DOUBLE
10234: LD_INT 1
10236: DEC
10237: ST_TO_ADDR
10238: LD_INT 3
10240: PUSH
10241: FOR_TO
10242: IFFALSE 10295
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10244: LD_ADDR_VAR 0 5
10248: PUSH
10249: LD_VAR 0 5
10253: PPUSH
10254: LD_VAR 0 7
10258: PPUSH
10259: LD_VAR 0 5
10263: PUSH
10264: LD_VAR 0 7
10268: ARRAY
10269: PUSH
10270: LD_VAR 0 9
10274: PUSH
10275: LD_VAR 0 7
10279: ARRAY
10280: PUSH
10281: LD_VAR 0 10
10285: MUL
10286: PLUS
10287: PPUSH
10288: CALL_OW 1
10292: ST_TO_ADDR
10293: GO 10241
10295: POP
10296: POP
// end ;
10297: GO 8776
10299: POP
10300: POP
// result := Replace ( result , 4 , tmp ) ;
10301: LD_ADDR_VAR 0 5
10305: PUSH
10306: LD_VAR 0 5
10310: PPUSH
10311: LD_INT 4
10313: PPUSH
10314: LD_VAR 0 8
10318: PPUSH
10319: CALL_OW 1
10323: ST_TO_ADDR
// end ;
10324: LD_VAR 0 5
10328: RET
// export function DangerAtRange ( unit , range ) ; begin
10329: LD_INT 0
10331: PPUSH
// if not unit then
10332: LD_VAR 0 1
10336: NOT
10337: IFFALSE 10341
// exit ;
10339: GO 10386
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10341: LD_ADDR_VAR 0 3
10345: PUSH
10346: LD_VAR 0 1
10350: PPUSH
10351: CALL_OW 255
10355: PPUSH
10356: LD_VAR 0 1
10360: PPUSH
10361: CALL_OW 250
10365: PPUSH
10366: LD_VAR 0 1
10370: PPUSH
10371: CALL_OW 251
10375: PPUSH
10376: LD_VAR 0 2
10380: PPUSH
10381: CALL 8628 0 4
10385: ST_TO_ADDR
// end ;
10386: LD_VAR 0 3
10390: RET
// export function DangerInArea ( side , area ) ; begin
10391: LD_INT 0
10393: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10394: LD_ADDR_VAR 0 3
10398: PUSH
10399: LD_VAR 0 2
10403: PPUSH
10404: LD_INT 81
10406: PUSH
10407: LD_VAR 0 1
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PPUSH
10416: CALL_OW 70
10420: ST_TO_ADDR
// end ;
10421: LD_VAR 0 3
10425: RET
// export function IsExtension ( b ) ; begin
10426: LD_INT 0
10428: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10429: LD_ADDR_VAR 0 2
10433: PUSH
10434: LD_VAR 0 1
10438: PUSH
10439: LD_INT 23
10441: PUSH
10442: LD_INT 20
10444: PUSH
10445: LD_INT 22
10447: PUSH
10448: LD_INT 17
10450: PUSH
10451: LD_INT 24
10453: PUSH
10454: LD_INT 21
10456: PUSH
10457: LD_INT 19
10459: PUSH
10460: LD_INT 16
10462: PUSH
10463: LD_INT 25
10465: PUSH
10466: LD_INT 18
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: IN
10481: ST_TO_ADDR
// end ;
10482: LD_VAR 0 2
10486: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10487: LD_INT 0
10489: PPUSH
10490: PPUSH
10491: PPUSH
// result := [ ] ;
10492: LD_ADDR_VAR 0 4
10496: PUSH
10497: EMPTY
10498: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10499: LD_ADDR_VAR 0 5
10503: PUSH
10504: LD_VAR 0 2
10508: PPUSH
10509: LD_INT 21
10511: PUSH
10512: LD_INT 3
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PPUSH
10519: CALL_OW 70
10523: ST_TO_ADDR
// if not tmp then
10524: LD_VAR 0 5
10528: NOT
10529: IFFALSE 10533
// exit ;
10531: GO 10597
// if checkLink then
10533: LD_VAR 0 3
10537: IFFALSE 10587
// begin for i in tmp do
10539: LD_ADDR_VAR 0 6
10543: PUSH
10544: LD_VAR 0 5
10548: PUSH
10549: FOR_IN
10550: IFFALSE 10585
// if GetBase ( i ) <> base then
10552: LD_VAR 0 6
10556: PPUSH
10557: CALL_OW 274
10561: PUSH
10562: LD_VAR 0 1
10566: NONEQUAL
10567: IFFALSE 10583
// ComLinkToBase ( base , i ) ;
10569: LD_VAR 0 1
10573: PPUSH
10574: LD_VAR 0 6
10578: PPUSH
10579: CALL_OW 169
10583: GO 10549
10585: POP
10586: POP
// end ; result := tmp ;
10587: LD_ADDR_VAR 0 4
10591: PUSH
10592: LD_VAR 0 5
10596: ST_TO_ADDR
// end ;
10597: LD_VAR 0 4
10601: RET
// export function ComComplete ( units , b ) ; var i ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
// if not units then
10606: LD_VAR 0 1
10610: NOT
10611: IFFALSE 10615
// exit ;
10613: GO 10705
// for i in units do
10615: LD_ADDR_VAR 0 4
10619: PUSH
10620: LD_VAR 0 1
10624: PUSH
10625: FOR_IN
10626: IFFALSE 10703
// if BuildingStatus ( b ) = bs_build then
10628: LD_VAR 0 2
10632: PPUSH
10633: CALL_OW 461
10637: PUSH
10638: LD_INT 1
10640: EQUAL
10641: IFFALSE 10701
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10643: LD_VAR 0 4
10647: PPUSH
10648: LD_STRING h
10650: PUSH
10651: LD_VAR 0 2
10655: PPUSH
10656: CALL_OW 250
10660: PUSH
10661: LD_VAR 0 2
10665: PPUSH
10666: CALL_OW 251
10670: PUSH
10671: LD_VAR 0 2
10675: PUSH
10676: LD_INT 0
10678: PUSH
10679: LD_INT 0
10681: PUSH
10682: LD_INT 0
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: PPUSH
10697: CALL_OW 446
10701: GO 10625
10703: POP
10704: POP
// end ;
10705: LD_VAR 0 3
10709: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10710: LD_INT 0
10712: PPUSH
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
10717: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10718: LD_VAR 0 1
10722: NOT
10723: PUSH
10724: LD_VAR 0 1
10728: PPUSH
10729: CALL_OW 263
10733: PUSH
10734: LD_INT 2
10736: NONEQUAL
10737: OR
10738: IFFALSE 10742
// exit ;
10740: GO 11058
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10742: LD_ADDR_VAR 0 6
10746: PUSH
10747: LD_INT 22
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 255
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: LD_INT 30
10769: PUSH
10770: LD_INT 36
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 34
10779: PUSH
10780: LD_INT 31
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 69
10800: ST_TO_ADDR
// if not tmp then
10801: LD_VAR 0 6
10805: NOT
10806: IFFALSE 10810
// exit ;
10808: GO 11058
// result := [ ] ;
10810: LD_ADDR_VAR 0 2
10814: PUSH
10815: EMPTY
10816: ST_TO_ADDR
// for i in tmp do
10817: LD_ADDR_VAR 0 3
10821: PUSH
10822: LD_VAR 0 6
10826: PUSH
10827: FOR_IN
10828: IFFALSE 10899
// begin t := UnitsInside ( i ) ;
10830: LD_ADDR_VAR 0 4
10834: PUSH
10835: LD_VAR 0 3
10839: PPUSH
10840: CALL_OW 313
10844: ST_TO_ADDR
// if t then
10845: LD_VAR 0 4
10849: IFFALSE 10897
// for j in t do
10851: LD_ADDR_VAR 0 7
10855: PUSH
10856: LD_VAR 0 4
10860: PUSH
10861: FOR_IN
10862: IFFALSE 10895
// result := Replace ( result , result + 1 , j ) ;
10864: LD_ADDR_VAR 0 2
10868: PUSH
10869: LD_VAR 0 2
10873: PPUSH
10874: LD_VAR 0 2
10878: PUSH
10879: LD_INT 1
10881: PLUS
10882: PPUSH
10883: LD_VAR 0 7
10887: PPUSH
10888: CALL_OW 1
10892: ST_TO_ADDR
10893: GO 10861
10895: POP
10896: POP
// end ;
10897: GO 10827
10899: POP
10900: POP
// if not result then
10901: LD_VAR 0 2
10905: NOT
10906: IFFALSE 10910
// exit ;
10908: GO 11058
// mech := result [ 1 ] ;
10910: LD_ADDR_VAR 0 5
10914: PUSH
10915: LD_VAR 0 2
10919: PUSH
10920: LD_INT 1
10922: ARRAY
10923: ST_TO_ADDR
// if result > 1 then
10924: LD_VAR 0 2
10928: PUSH
10929: LD_INT 1
10931: GREATER
10932: IFFALSE 11044
// begin for i = 2 to result do
10934: LD_ADDR_VAR 0 3
10938: PUSH
10939: DOUBLE
10940: LD_INT 2
10942: DEC
10943: ST_TO_ADDR
10944: LD_VAR 0 2
10948: PUSH
10949: FOR_TO
10950: IFFALSE 11042
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10952: LD_ADDR_VAR 0 4
10956: PUSH
10957: LD_VAR 0 2
10961: PUSH
10962: LD_VAR 0 3
10966: ARRAY
10967: PPUSH
10968: LD_INT 3
10970: PPUSH
10971: CALL_OW 259
10975: PUSH
10976: LD_VAR 0 2
10980: PUSH
10981: LD_VAR 0 3
10985: ARRAY
10986: PPUSH
10987: CALL_OW 432
10991: MINUS
10992: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10993: LD_VAR 0 4
10997: PUSH
10998: LD_VAR 0 5
11002: PPUSH
11003: LD_INT 3
11005: PPUSH
11006: CALL_OW 259
11010: PUSH
11011: LD_VAR 0 5
11015: PPUSH
11016: CALL_OW 432
11020: MINUS
11021: GREATEREQUAL
11022: IFFALSE 11040
// mech := result [ i ] ;
11024: LD_ADDR_VAR 0 5
11028: PUSH
11029: LD_VAR 0 2
11033: PUSH
11034: LD_VAR 0 3
11038: ARRAY
11039: ST_TO_ADDR
// end ;
11040: GO 10949
11042: POP
11043: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11044: LD_VAR 0 1
11048: PPUSH
11049: LD_VAR 0 5
11053: PPUSH
11054: CALL_OW 135
// end ;
11058: LD_VAR 0 2
11062: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11063: LD_INT 0
11065: PPUSH
11066: PPUSH
11067: PPUSH
11068: PPUSH
11069: PPUSH
11070: PPUSH
11071: PPUSH
11072: PPUSH
11073: PPUSH
11074: PPUSH
11075: PPUSH
11076: PPUSH
11077: PPUSH
// result := [ ] ;
11078: LD_ADDR_VAR 0 7
11082: PUSH
11083: EMPTY
11084: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11085: LD_VAR 0 1
11089: PPUSH
11090: CALL_OW 266
11094: PUSH
11095: LD_INT 0
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: IN
11105: NOT
11106: IFFALSE 11110
// exit ;
11108: GO 12744
// if name then
11110: LD_VAR 0 3
11114: IFFALSE 11130
// SetBName ( base_dep , name ) ;
11116: LD_VAR 0 1
11120: PPUSH
11121: LD_VAR 0 3
11125: PPUSH
11126: CALL_OW 500
// base := GetBase ( base_dep ) ;
11130: LD_ADDR_VAR 0 15
11134: PUSH
11135: LD_VAR 0 1
11139: PPUSH
11140: CALL_OW 274
11144: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11145: LD_ADDR_VAR 0 16
11149: PUSH
11150: LD_VAR 0 1
11154: PPUSH
11155: CALL_OW 255
11159: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11160: LD_ADDR_VAR 0 17
11164: PUSH
11165: LD_VAR 0 1
11169: PPUSH
11170: CALL_OW 248
11174: ST_TO_ADDR
// if sources then
11175: LD_VAR 0 5
11179: IFFALSE 11226
// for i = 1 to 3 do
11181: LD_ADDR_VAR 0 8
11185: PUSH
11186: DOUBLE
11187: LD_INT 1
11189: DEC
11190: ST_TO_ADDR
11191: LD_INT 3
11193: PUSH
11194: FOR_TO
11195: IFFALSE 11224
// AddResourceType ( base , i , sources [ i ] ) ;
11197: LD_VAR 0 15
11201: PPUSH
11202: LD_VAR 0 8
11206: PPUSH
11207: LD_VAR 0 5
11211: PUSH
11212: LD_VAR 0 8
11216: ARRAY
11217: PPUSH
11218: CALL_OW 276
11222: GO 11194
11224: POP
11225: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11226: LD_ADDR_VAR 0 18
11230: PUSH
11231: LD_VAR 0 15
11235: PPUSH
11236: LD_VAR 0 2
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: CALL 10487 0 3
11248: ST_TO_ADDR
// InitHc ;
11249: CALL_OW 19
// InitUc ;
11253: CALL_OW 18
// uc_side := side ;
11257: LD_ADDR_OWVAR 20
11261: PUSH
11262: LD_VAR 0 16
11266: ST_TO_ADDR
// uc_nation := nation ;
11267: LD_ADDR_OWVAR 21
11271: PUSH
11272: LD_VAR 0 17
11276: ST_TO_ADDR
// if buildings then
11277: LD_VAR 0 18
11281: IFFALSE 12603
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11283: LD_ADDR_VAR 0 19
11287: PUSH
11288: LD_VAR 0 18
11292: PPUSH
11293: LD_INT 2
11295: PUSH
11296: LD_INT 30
11298: PUSH
11299: LD_INT 29
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 30
11308: PUSH
11309: LD_INT 30
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: LIST
11320: PPUSH
11321: CALL_OW 72
11325: ST_TO_ADDR
// if tmp then
11326: LD_VAR 0 19
11330: IFFALSE 11378
// for i in tmp do
11332: LD_ADDR_VAR 0 8
11336: PUSH
11337: LD_VAR 0 19
11341: PUSH
11342: FOR_IN
11343: IFFALSE 11376
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11345: LD_VAR 0 8
11349: PPUSH
11350: CALL_OW 250
11354: PPUSH
11355: LD_VAR 0 8
11359: PPUSH
11360: CALL_OW 251
11364: PPUSH
11365: LD_VAR 0 16
11369: PPUSH
11370: CALL_OW 441
11374: GO 11342
11376: POP
11377: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11378: LD_VAR 0 18
11382: PPUSH
11383: LD_INT 2
11385: PUSH
11386: LD_INT 30
11388: PUSH
11389: LD_INT 32
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 30
11398: PUSH
11399: LD_INT 33
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: PPUSH
11411: CALL_OW 72
11415: IFFALSE 11503
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11417: LD_ADDR_VAR 0 8
11421: PUSH
11422: LD_VAR 0 18
11426: PPUSH
11427: LD_INT 2
11429: PUSH
11430: LD_INT 30
11432: PUSH
11433: LD_INT 32
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 30
11442: PUSH
11443: LD_INT 33
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: PPUSH
11455: CALL_OW 72
11459: PUSH
11460: FOR_IN
11461: IFFALSE 11501
// begin if not GetBWeapon ( i ) then
11463: LD_VAR 0 8
11467: PPUSH
11468: CALL_OW 269
11472: NOT
11473: IFFALSE 11499
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11475: LD_VAR 0 8
11479: PPUSH
11480: LD_VAR 0 8
11484: PPUSH
11485: LD_VAR 0 2
11489: PPUSH
11490: CALL 12749 0 2
11494: PPUSH
11495: CALL_OW 431
// end ;
11499: GO 11460
11501: POP
11502: POP
// end ; for i = 1 to personel do
11503: LD_ADDR_VAR 0 8
11507: PUSH
11508: DOUBLE
11509: LD_INT 1
11511: DEC
11512: ST_TO_ADDR
11513: LD_VAR 0 6
11517: PUSH
11518: FOR_TO
11519: IFFALSE 12583
// begin if i > 4 then
11521: LD_VAR 0 8
11525: PUSH
11526: LD_INT 4
11528: GREATER
11529: IFFALSE 11533
// break ;
11531: GO 12583
// case i of 1 :
11533: LD_VAR 0 8
11537: PUSH
11538: LD_INT 1
11540: DOUBLE
11541: EQUAL
11542: IFTRUE 11546
11544: GO 11626
11546: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11547: LD_ADDR_VAR 0 12
11551: PUSH
11552: LD_VAR 0 18
11556: PPUSH
11557: LD_INT 22
11559: PUSH
11560: LD_VAR 0 16
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 58
11571: PUSH
11572: EMPTY
11573: LIST
11574: PUSH
11575: LD_INT 2
11577: PUSH
11578: LD_INT 30
11580: PUSH
11581: LD_INT 32
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 30
11590: PUSH
11591: LD_INT 4
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 30
11600: PUSH
11601: LD_INT 5
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: PPUSH
11619: CALL_OW 72
11623: ST_TO_ADDR
11624: GO 11848
11626: LD_INT 2
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11696
11634: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11635: LD_ADDR_VAR 0 12
11639: PUSH
11640: LD_VAR 0 18
11644: PPUSH
11645: LD_INT 22
11647: PUSH
11648: LD_VAR 0 16
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: LD_INT 30
11662: PUSH
11663: LD_INT 0
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 30
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PPUSH
11689: CALL_OW 72
11693: ST_TO_ADDR
11694: GO 11848
11696: LD_INT 3
11698: DOUBLE
11699: EQUAL
11700: IFTRUE 11704
11702: GO 11766
11704: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11705: LD_ADDR_VAR 0 12
11709: PUSH
11710: LD_VAR 0 18
11714: PPUSH
11715: LD_INT 22
11717: PUSH
11718: LD_VAR 0 16
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 30
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 30
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PPUSH
11759: CALL_OW 72
11763: ST_TO_ADDR
11764: GO 11848
11766: LD_INT 4
11768: DOUBLE
11769: EQUAL
11770: IFTRUE 11774
11772: GO 11847
11774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11775: LD_ADDR_VAR 0 12
11779: PUSH
11780: LD_VAR 0 18
11784: PPUSH
11785: LD_INT 22
11787: PUSH
11788: LD_VAR 0 16
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 2
11799: PUSH
11800: LD_INT 30
11802: PUSH
11803: LD_INT 6
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PUSH
11810: LD_INT 30
11812: PUSH
11813: LD_INT 7
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PUSH
11820: LD_INT 30
11822: PUSH
11823: LD_INT 8
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 72
11844: ST_TO_ADDR
11845: GO 11848
11847: POP
// if i = 1 then
11848: LD_VAR 0 8
11852: PUSH
11853: LD_INT 1
11855: EQUAL
11856: IFFALSE 11967
// begin tmp := [ ] ;
11858: LD_ADDR_VAR 0 19
11862: PUSH
11863: EMPTY
11864: ST_TO_ADDR
// for j in f do
11865: LD_ADDR_VAR 0 9
11869: PUSH
11870: LD_VAR 0 12
11874: PUSH
11875: FOR_IN
11876: IFFALSE 11949
// if GetBType ( j ) = b_bunker then
11878: LD_VAR 0 9
11882: PPUSH
11883: CALL_OW 266
11887: PUSH
11888: LD_INT 32
11890: EQUAL
11891: IFFALSE 11918
// tmp := Insert ( tmp , 1 , j ) else
11893: LD_ADDR_VAR 0 19
11897: PUSH
11898: LD_VAR 0 19
11902: PPUSH
11903: LD_INT 1
11905: PPUSH
11906: LD_VAR 0 9
11910: PPUSH
11911: CALL_OW 2
11915: ST_TO_ADDR
11916: GO 11947
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11918: LD_ADDR_VAR 0 19
11922: PUSH
11923: LD_VAR 0 19
11927: PPUSH
11928: LD_VAR 0 19
11932: PUSH
11933: LD_INT 1
11935: PLUS
11936: PPUSH
11937: LD_VAR 0 9
11941: PPUSH
11942: CALL_OW 2
11946: ST_TO_ADDR
11947: GO 11875
11949: POP
11950: POP
// if tmp then
11951: LD_VAR 0 19
11955: IFFALSE 11967
// f := tmp ;
11957: LD_ADDR_VAR 0 12
11961: PUSH
11962: LD_VAR 0 19
11966: ST_TO_ADDR
// end ; x := personel [ i ] ;
11967: LD_ADDR_VAR 0 13
11971: PUSH
11972: LD_VAR 0 6
11976: PUSH
11977: LD_VAR 0 8
11981: ARRAY
11982: ST_TO_ADDR
// if x = - 1 then
11983: LD_VAR 0 13
11987: PUSH
11988: LD_INT 1
11990: NEG
11991: EQUAL
11992: IFFALSE 12201
// begin for j in f do
11994: LD_ADDR_VAR 0 9
11998: PUSH
11999: LD_VAR 0 12
12003: PUSH
12004: FOR_IN
12005: IFFALSE 12197
// repeat InitHc ;
12007: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12011: LD_VAR 0 9
12015: PPUSH
12016: CALL_OW 266
12020: PUSH
12021: LD_INT 5
12023: EQUAL
12024: IFFALSE 12094
// begin if UnitsInside ( j ) < 3 then
12026: LD_VAR 0 9
12030: PPUSH
12031: CALL_OW 313
12035: PUSH
12036: LD_INT 3
12038: LESS
12039: IFFALSE 12075
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12041: LD_INT 0
12043: PPUSH
12044: LD_INT 5
12046: PUSH
12047: LD_INT 8
12049: PUSH
12050: LD_INT 9
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: PUSH
12058: LD_VAR 0 17
12062: ARRAY
12063: PPUSH
12064: LD_VAR 0 4
12068: PPUSH
12069: CALL_OW 380
12073: GO 12092
// PrepareHuman ( false , i , skill ) ;
12075: LD_INT 0
12077: PPUSH
12078: LD_VAR 0 8
12082: PPUSH
12083: LD_VAR 0 4
12087: PPUSH
12088: CALL_OW 380
// end else
12092: GO 12111
// PrepareHuman ( false , i , skill ) ;
12094: LD_INT 0
12096: PPUSH
12097: LD_VAR 0 8
12101: PPUSH
12102: LD_VAR 0 4
12106: PPUSH
12107: CALL_OW 380
// un := CreateHuman ;
12111: LD_ADDR_VAR 0 14
12115: PUSH
12116: CALL_OW 44
12120: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12121: LD_ADDR_VAR 0 7
12125: PUSH
12126: LD_VAR 0 7
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: LD_VAR 0 14
12138: PPUSH
12139: CALL_OW 2
12143: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12144: LD_VAR 0 14
12148: PPUSH
12149: LD_VAR 0 9
12153: PPUSH
12154: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12158: LD_VAR 0 9
12162: PPUSH
12163: CALL_OW 313
12167: PUSH
12168: LD_INT 6
12170: EQUAL
12171: PUSH
12172: LD_VAR 0 9
12176: PPUSH
12177: CALL_OW 266
12181: PUSH
12182: LD_INT 32
12184: PUSH
12185: LD_INT 31
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: IN
12192: OR
12193: IFFALSE 12007
12195: GO 12004
12197: POP
12198: POP
// end else
12199: GO 12581
// for j = 1 to x do
12201: LD_ADDR_VAR 0 9
12205: PUSH
12206: DOUBLE
12207: LD_INT 1
12209: DEC
12210: ST_TO_ADDR
12211: LD_VAR 0 13
12215: PUSH
12216: FOR_TO
12217: IFFALSE 12579
// begin InitHc ;
12219: CALL_OW 19
// if not f then
12223: LD_VAR 0 12
12227: NOT
12228: IFFALSE 12317
// begin PrepareHuman ( false , i , skill ) ;
12230: LD_INT 0
12232: PPUSH
12233: LD_VAR 0 8
12237: PPUSH
12238: LD_VAR 0 4
12242: PPUSH
12243: CALL_OW 380
// un := CreateHuman ;
12247: LD_ADDR_VAR 0 14
12251: PUSH
12252: CALL_OW 44
12256: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12257: LD_ADDR_VAR 0 7
12261: PUSH
12262: LD_VAR 0 7
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: LD_VAR 0 14
12274: PPUSH
12275: CALL_OW 2
12279: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12280: LD_VAR 0 14
12284: PPUSH
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 250
12294: PPUSH
12295: LD_VAR 0 1
12299: PPUSH
12300: CALL_OW 251
12304: PPUSH
12305: LD_INT 10
12307: PPUSH
12308: LD_INT 0
12310: PPUSH
12311: CALL_OW 50
// continue ;
12315: GO 12216
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12317: LD_VAR 0 12
12321: PUSH
12322: LD_INT 1
12324: ARRAY
12325: PPUSH
12326: CALL_OW 313
12330: PUSH
12331: LD_VAR 0 12
12335: PUSH
12336: LD_INT 1
12338: ARRAY
12339: PPUSH
12340: CALL_OW 266
12344: PUSH
12345: LD_INT 32
12347: PUSH
12348: LD_INT 31
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: IN
12355: AND
12356: PUSH
12357: LD_VAR 0 12
12361: PUSH
12362: LD_INT 1
12364: ARRAY
12365: PPUSH
12366: CALL_OW 313
12370: PUSH
12371: LD_INT 6
12373: EQUAL
12374: OR
12375: IFFALSE 12395
// f := Delete ( f , 1 ) ;
12377: LD_ADDR_VAR 0 12
12381: PUSH
12382: LD_VAR 0 12
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 3
12394: ST_TO_ADDR
// if not f then
12395: LD_VAR 0 12
12399: NOT
12400: IFFALSE 12418
// begin x := x + 2 ;
12402: LD_ADDR_VAR 0 13
12406: PUSH
12407: LD_VAR 0 13
12411: PUSH
12412: LD_INT 2
12414: PLUS
12415: ST_TO_ADDR
// continue ;
12416: GO 12216
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12418: LD_VAR 0 12
12422: PUSH
12423: LD_INT 1
12425: ARRAY
12426: PPUSH
12427: CALL_OW 266
12431: PUSH
12432: LD_INT 5
12434: EQUAL
12435: IFFALSE 12509
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12437: LD_VAR 0 12
12441: PUSH
12442: LD_INT 1
12444: ARRAY
12445: PPUSH
12446: CALL_OW 313
12450: PUSH
12451: LD_INT 3
12453: LESS
12454: IFFALSE 12490
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12456: LD_INT 0
12458: PPUSH
12459: LD_INT 5
12461: PUSH
12462: LD_INT 8
12464: PUSH
12465: LD_INT 9
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: PUSH
12473: LD_VAR 0 17
12477: ARRAY
12478: PPUSH
12479: LD_VAR 0 4
12483: PPUSH
12484: CALL_OW 380
12488: GO 12507
// PrepareHuman ( false , i , skill ) ;
12490: LD_INT 0
12492: PPUSH
12493: LD_VAR 0 8
12497: PPUSH
12498: LD_VAR 0 4
12502: PPUSH
12503: CALL_OW 380
// end else
12507: GO 12526
// PrepareHuman ( false , i , skill ) ;
12509: LD_INT 0
12511: PPUSH
12512: LD_VAR 0 8
12516: PPUSH
12517: LD_VAR 0 4
12521: PPUSH
12522: CALL_OW 380
// un := CreateHuman ;
12526: LD_ADDR_VAR 0 14
12530: PUSH
12531: CALL_OW 44
12535: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12536: LD_ADDR_VAR 0 7
12540: PUSH
12541: LD_VAR 0 7
12545: PPUSH
12546: LD_INT 1
12548: PPUSH
12549: LD_VAR 0 14
12553: PPUSH
12554: CALL_OW 2
12558: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12559: LD_VAR 0 14
12563: PPUSH
12564: LD_VAR 0 12
12568: PUSH
12569: LD_INT 1
12571: ARRAY
12572: PPUSH
12573: CALL_OW 52
// end ;
12577: GO 12216
12579: POP
12580: POP
// end ;
12581: GO 11518
12583: POP
12584: POP
// result := result ^ buildings ;
12585: LD_ADDR_VAR 0 7
12589: PUSH
12590: LD_VAR 0 7
12594: PUSH
12595: LD_VAR 0 18
12599: ADD
12600: ST_TO_ADDR
// end else
12601: GO 12744
// begin for i = 1 to personel do
12603: LD_ADDR_VAR 0 8
12607: PUSH
12608: DOUBLE
12609: LD_INT 1
12611: DEC
12612: ST_TO_ADDR
12613: LD_VAR 0 6
12617: PUSH
12618: FOR_TO
12619: IFFALSE 12742
// begin if i > 4 then
12621: LD_VAR 0 8
12625: PUSH
12626: LD_INT 4
12628: GREATER
12629: IFFALSE 12633
// break ;
12631: GO 12742
// x := personel [ i ] ;
12633: LD_ADDR_VAR 0 13
12637: PUSH
12638: LD_VAR 0 6
12642: PUSH
12643: LD_VAR 0 8
12647: ARRAY
12648: ST_TO_ADDR
// if x = - 1 then
12649: LD_VAR 0 13
12653: PUSH
12654: LD_INT 1
12656: NEG
12657: EQUAL
12658: IFFALSE 12662
// continue ;
12660: GO 12618
// PrepareHuman ( false , i , skill ) ;
12662: LD_INT 0
12664: PPUSH
12665: LD_VAR 0 8
12669: PPUSH
12670: LD_VAR 0 4
12674: PPUSH
12675: CALL_OW 380
// un := CreateHuman ;
12679: LD_ADDR_VAR 0 14
12683: PUSH
12684: CALL_OW 44
12688: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12689: LD_VAR 0 14
12693: PPUSH
12694: LD_VAR 0 1
12698: PPUSH
12699: CALL_OW 250
12703: PPUSH
12704: LD_VAR 0 1
12708: PPUSH
12709: CALL_OW 251
12713: PPUSH
12714: LD_INT 10
12716: PPUSH
12717: LD_INT 0
12719: PPUSH
12720: CALL_OW 50
// result := result ^ un ;
12724: LD_ADDR_VAR 0 7
12728: PUSH
12729: LD_VAR 0 7
12733: PUSH
12734: LD_VAR 0 14
12738: ADD
12739: ST_TO_ADDR
// end ;
12740: GO 12618
12742: POP
12743: POP
// end ; end ;
12744: LD_VAR 0 7
12748: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12749: LD_INT 0
12751: PPUSH
12752: PPUSH
12753: PPUSH
12754: PPUSH
12755: PPUSH
12756: PPUSH
12757: PPUSH
12758: PPUSH
12759: PPUSH
12760: PPUSH
12761: PPUSH
12762: PPUSH
12763: PPUSH
12764: PPUSH
12765: PPUSH
12766: PPUSH
// result := false ;
12767: LD_ADDR_VAR 0 3
12771: PUSH
12772: LD_INT 0
12774: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12775: LD_VAR 0 1
12779: NOT
12780: PUSH
12781: LD_VAR 0 1
12785: PPUSH
12786: CALL_OW 266
12790: PUSH
12791: LD_INT 32
12793: PUSH
12794: LD_INT 33
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: IN
12801: NOT
12802: OR
12803: IFFALSE 12807
// exit ;
12805: GO 13916
// nat := GetNation ( tower ) ;
12807: LD_ADDR_VAR 0 12
12811: PUSH
12812: LD_VAR 0 1
12816: PPUSH
12817: CALL_OW 248
12821: ST_TO_ADDR
// side := GetSide ( tower ) ;
12822: LD_ADDR_VAR 0 16
12826: PUSH
12827: LD_VAR 0 1
12831: PPUSH
12832: CALL_OW 255
12836: ST_TO_ADDR
// x := GetX ( tower ) ;
12837: LD_ADDR_VAR 0 10
12841: PUSH
12842: LD_VAR 0 1
12846: PPUSH
12847: CALL_OW 250
12851: ST_TO_ADDR
// y := GetY ( tower ) ;
12852: LD_ADDR_VAR 0 11
12856: PUSH
12857: LD_VAR 0 1
12861: PPUSH
12862: CALL_OW 251
12866: ST_TO_ADDR
// if not x or not y then
12867: LD_VAR 0 10
12871: NOT
12872: PUSH
12873: LD_VAR 0 11
12877: NOT
12878: OR
12879: IFFALSE 12883
// exit ;
12881: GO 13916
// weapon := 0 ;
12883: LD_ADDR_VAR 0 18
12887: PUSH
12888: LD_INT 0
12890: ST_TO_ADDR
// fac_list := [ ] ;
12891: LD_ADDR_VAR 0 17
12895: PUSH
12896: EMPTY
12897: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12898: LD_ADDR_VAR 0 6
12902: PUSH
12903: LD_VAR 0 1
12907: PPUSH
12908: CALL_OW 274
12912: PPUSH
12913: LD_VAR 0 2
12917: PPUSH
12918: LD_INT 0
12920: PPUSH
12921: CALL 10487 0 3
12925: PPUSH
12926: LD_INT 30
12928: PUSH
12929: LD_INT 3
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PPUSH
12936: CALL_OW 72
12940: ST_TO_ADDR
// if not factories then
12941: LD_VAR 0 6
12945: NOT
12946: IFFALSE 12950
// exit ;
12948: GO 13916
// for i in factories do
12950: LD_ADDR_VAR 0 8
12954: PUSH
12955: LD_VAR 0 6
12959: PUSH
12960: FOR_IN
12961: IFFALSE 12986
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12963: LD_ADDR_VAR 0 17
12967: PUSH
12968: LD_VAR 0 17
12972: PUSH
12973: LD_VAR 0 8
12977: PPUSH
12978: CALL_OW 478
12982: UNION
12983: ST_TO_ADDR
12984: GO 12960
12986: POP
12987: POP
// if not fac_list then
12988: LD_VAR 0 17
12992: NOT
12993: IFFALSE 12997
// exit ;
12995: GO 13916
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12997: LD_ADDR_VAR 0 5
13001: PUSH
13002: LD_INT 4
13004: PUSH
13005: LD_INT 5
13007: PUSH
13008: LD_INT 9
13010: PUSH
13011: LD_INT 10
13013: PUSH
13014: LD_INT 6
13016: PUSH
13017: LD_INT 7
13019: PUSH
13020: LD_INT 11
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 27
13034: PUSH
13035: LD_INT 28
13037: PUSH
13038: LD_INT 26
13040: PUSH
13041: LD_INT 30
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 43
13052: PUSH
13053: LD_INT 44
13055: PUSH
13056: LD_INT 46
13058: PUSH
13059: LD_INT 45
13061: PUSH
13062: LD_INT 47
13064: PUSH
13065: LD_INT 49
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: PUSH
13081: LD_VAR 0 12
13085: ARRAY
13086: ST_TO_ADDR
// list := list isect fac_list ;
13087: LD_ADDR_VAR 0 5
13091: PUSH
13092: LD_VAR 0 5
13096: PUSH
13097: LD_VAR 0 17
13101: ISECT
13102: ST_TO_ADDR
// if not list then
13103: LD_VAR 0 5
13107: NOT
13108: IFFALSE 13112
// exit ;
13110: GO 13916
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13112: LD_VAR 0 12
13116: PUSH
13117: LD_INT 3
13119: EQUAL
13120: PUSH
13121: LD_INT 49
13123: PUSH
13124: LD_VAR 0 5
13128: IN
13129: AND
13130: PUSH
13131: LD_INT 31
13133: PPUSH
13134: LD_VAR 0 16
13138: PPUSH
13139: CALL_OW 321
13143: PUSH
13144: LD_INT 2
13146: EQUAL
13147: AND
13148: IFFALSE 13208
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13150: LD_INT 22
13152: PUSH
13153: LD_VAR 0 16
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: LD_INT 35
13164: PUSH
13165: LD_INT 49
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 91
13174: PUSH
13175: LD_VAR 0 1
13179: PUSH
13180: LD_INT 10
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: PPUSH
13193: CALL_OW 69
13197: NOT
13198: IFFALSE 13208
// weapon := ru_time_lapser ;
13200: LD_ADDR_VAR 0 18
13204: PUSH
13205: LD_INT 49
13207: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13208: LD_VAR 0 12
13212: PUSH
13213: LD_INT 1
13215: PUSH
13216: LD_INT 2
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: IN
13223: PUSH
13224: LD_INT 11
13226: PUSH
13227: LD_VAR 0 5
13231: IN
13232: PUSH
13233: LD_INT 30
13235: PUSH
13236: LD_VAR 0 5
13240: IN
13241: OR
13242: AND
13243: PUSH
13244: LD_INT 6
13246: PPUSH
13247: LD_VAR 0 16
13251: PPUSH
13252: CALL_OW 321
13256: PUSH
13257: LD_INT 2
13259: EQUAL
13260: AND
13261: IFFALSE 13426
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13263: LD_INT 22
13265: PUSH
13266: LD_VAR 0 16
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 2
13277: PUSH
13278: LD_INT 35
13280: PUSH
13281: LD_INT 11
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 35
13290: PUSH
13291: LD_INT 30
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 91
13305: PUSH
13306: LD_VAR 0 1
13310: PUSH
13311: LD_INT 18
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: LIST
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: LIST
13323: PPUSH
13324: CALL_OW 69
13328: NOT
13329: PUSH
13330: LD_INT 22
13332: PUSH
13333: LD_VAR 0 16
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 2
13344: PUSH
13345: LD_INT 30
13347: PUSH
13348: LD_INT 32
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 30
13357: PUSH
13358: LD_INT 33
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 91
13372: PUSH
13373: LD_VAR 0 1
13377: PUSH
13378: LD_INT 12
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PUSH
13391: EMPTY
13392: LIST
13393: PPUSH
13394: CALL_OW 69
13398: PUSH
13399: LD_INT 2
13401: GREATER
13402: AND
13403: IFFALSE 13426
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13405: LD_ADDR_VAR 0 18
13409: PUSH
13410: LD_INT 11
13412: PUSH
13413: LD_INT 30
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_VAR 0 12
13424: ARRAY
13425: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13426: LD_VAR 0 18
13430: NOT
13431: PUSH
13432: LD_INT 40
13434: PPUSH
13435: LD_VAR 0 16
13439: PPUSH
13440: CALL_OW 321
13444: PUSH
13445: LD_INT 2
13447: EQUAL
13448: AND
13449: PUSH
13450: LD_INT 7
13452: PUSH
13453: LD_VAR 0 5
13457: IN
13458: PUSH
13459: LD_INT 28
13461: PUSH
13462: LD_VAR 0 5
13466: IN
13467: OR
13468: PUSH
13469: LD_INT 45
13471: PUSH
13472: LD_VAR 0 5
13476: IN
13477: OR
13478: AND
13479: IFFALSE 13733
// begin hex := GetHexInfo ( x , y ) ;
13481: LD_ADDR_VAR 0 4
13485: PUSH
13486: LD_VAR 0 10
13490: PPUSH
13491: LD_VAR 0 11
13495: PPUSH
13496: CALL_OW 546
13500: ST_TO_ADDR
// if hex [ 1 ] then
13501: LD_VAR 0 4
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: IFFALSE 13513
// exit ;
13511: GO 13916
// height := hex [ 2 ] ;
13513: LD_ADDR_VAR 0 15
13517: PUSH
13518: LD_VAR 0 4
13522: PUSH
13523: LD_INT 2
13525: ARRAY
13526: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13527: LD_ADDR_VAR 0 14
13531: PUSH
13532: LD_INT 0
13534: PUSH
13535: LD_INT 2
13537: PUSH
13538: LD_INT 3
13540: PUSH
13541: LD_INT 5
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: ST_TO_ADDR
// for i in tmp do
13550: LD_ADDR_VAR 0 8
13554: PUSH
13555: LD_VAR 0 14
13559: PUSH
13560: FOR_IN
13561: IFFALSE 13731
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13563: LD_ADDR_VAR 0 9
13567: PUSH
13568: LD_VAR 0 10
13572: PPUSH
13573: LD_VAR 0 8
13577: PPUSH
13578: LD_INT 5
13580: PPUSH
13581: CALL_OW 272
13585: PUSH
13586: LD_VAR 0 11
13590: PPUSH
13591: LD_VAR 0 8
13595: PPUSH
13596: LD_INT 5
13598: PPUSH
13599: CALL_OW 273
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13608: LD_VAR 0 9
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: LD_VAR 0 9
13621: PUSH
13622: LD_INT 2
13624: ARRAY
13625: PPUSH
13626: CALL_OW 488
13630: IFFALSE 13729
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13632: LD_ADDR_VAR 0 4
13636: PUSH
13637: LD_VAR 0 9
13641: PUSH
13642: LD_INT 1
13644: ARRAY
13645: PPUSH
13646: LD_VAR 0 9
13650: PUSH
13651: LD_INT 2
13653: ARRAY
13654: PPUSH
13655: CALL_OW 546
13659: ST_TO_ADDR
// if hex [ 1 ] then
13660: LD_VAR 0 4
13664: PUSH
13665: LD_INT 1
13667: ARRAY
13668: IFFALSE 13672
// continue ;
13670: GO 13560
// h := hex [ 2 ] ;
13672: LD_ADDR_VAR 0 13
13676: PUSH
13677: LD_VAR 0 4
13681: PUSH
13682: LD_INT 2
13684: ARRAY
13685: ST_TO_ADDR
// if h + 7 < height then
13686: LD_VAR 0 13
13690: PUSH
13691: LD_INT 7
13693: PLUS
13694: PUSH
13695: LD_VAR 0 15
13699: LESS
13700: IFFALSE 13729
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13702: LD_ADDR_VAR 0 18
13706: PUSH
13707: LD_INT 7
13709: PUSH
13710: LD_INT 28
13712: PUSH
13713: LD_INT 45
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_VAR 0 12
13725: ARRAY
13726: ST_TO_ADDR
// break ;
13727: GO 13731
// end ; end ; end ;
13729: GO 13560
13731: POP
13732: POP
// end ; if not weapon then
13733: LD_VAR 0 18
13737: NOT
13738: IFFALSE 13798
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13740: LD_ADDR_VAR 0 5
13744: PUSH
13745: LD_VAR 0 5
13749: PUSH
13750: LD_INT 11
13752: PUSH
13753: LD_INT 30
13755: PUSH
13756: LD_INT 49
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: DIFF
13764: ST_TO_ADDR
// if not list then
13765: LD_VAR 0 5
13769: NOT
13770: IFFALSE 13774
// exit ;
13772: GO 13916
// weapon := list [ rand ( 1 , list ) ] ;
13774: LD_ADDR_VAR 0 18
13778: PUSH
13779: LD_VAR 0 5
13783: PUSH
13784: LD_INT 1
13786: PPUSH
13787: LD_VAR 0 5
13791: PPUSH
13792: CALL_OW 12
13796: ARRAY
13797: ST_TO_ADDR
// end ; if weapon then
13798: LD_VAR 0 18
13802: IFFALSE 13916
// begin tmp := CostOfWeapon ( weapon ) ;
13804: LD_ADDR_VAR 0 14
13808: PUSH
13809: LD_VAR 0 18
13813: PPUSH
13814: CALL_OW 451
13818: ST_TO_ADDR
// j := GetBase ( tower ) ;
13819: LD_ADDR_VAR 0 9
13823: PUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 274
13833: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13834: LD_VAR 0 9
13838: PPUSH
13839: LD_INT 1
13841: PPUSH
13842: CALL_OW 275
13846: PUSH
13847: LD_VAR 0 14
13851: PUSH
13852: LD_INT 1
13854: ARRAY
13855: GREATEREQUAL
13856: PUSH
13857: LD_VAR 0 9
13861: PPUSH
13862: LD_INT 2
13864: PPUSH
13865: CALL_OW 275
13869: PUSH
13870: LD_VAR 0 14
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: GREATEREQUAL
13879: AND
13880: PUSH
13881: LD_VAR 0 9
13885: PPUSH
13886: LD_INT 3
13888: PPUSH
13889: CALL_OW 275
13893: PUSH
13894: LD_VAR 0 14
13898: PUSH
13899: LD_INT 3
13901: ARRAY
13902: GREATEREQUAL
13903: AND
13904: IFFALSE 13916
// result := weapon ;
13906: LD_ADDR_VAR 0 3
13910: PUSH
13911: LD_VAR 0 18
13915: ST_TO_ADDR
// end ; end ;
13916: LD_VAR 0 3
13920: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13921: LD_INT 0
13923: PPUSH
13924: PPUSH
// result := true ;
13925: LD_ADDR_VAR 0 3
13929: PUSH
13930: LD_INT 1
13932: ST_TO_ADDR
// if array1 = array2 then
13933: LD_VAR 0 1
13937: PUSH
13938: LD_VAR 0 2
13942: EQUAL
13943: IFFALSE 14003
// begin for i = 1 to array1 do
13945: LD_ADDR_VAR 0 4
13949: PUSH
13950: DOUBLE
13951: LD_INT 1
13953: DEC
13954: ST_TO_ADDR
13955: LD_VAR 0 1
13959: PUSH
13960: FOR_TO
13961: IFFALSE 13999
// if array1 [ i ] <> array2 [ i ] then
13963: LD_VAR 0 1
13967: PUSH
13968: LD_VAR 0 4
13972: ARRAY
13973: PUSH
13974: LD_VAR 0 2
13978: PUSH
13979: LD_VAR 0 4
13983: ARRAY
13984: NONEQUAL
13985: IFFALSE 13997
// begin result := false ;
13987: LD_ADDR_VAR 0 3
13991: PUSH
13992: LD_INT 0
13994: ST_TO_ADDR
// break ;
13995: GO 13999
// end ;
13997: GO 13960
13999: POP
14000: POP
// end else
14001: GO 14011
// result := false ;
14003: LD_ADDR_VAR 0 3
14007: PUSH
14008: LD_INT 0
14010: ST_TO_ADDR
// end ;
14011: LD_VAR 0 3
14015: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14016: LD_INT 0
14018: PPUSH
14019: PPUSH
// if not array1 or not array2 then
14020: LD_VAR 0 1
14024: NOT
14025: PUSH
14026: LD_VAR 0 2
14030: NOT
14031: OR
14032: IFFALSE 14036
// exit ;
14034: GO 14100
// result := true ;
14036: LD_ADDR_VAR 0 3
14040: PUSH
14041: LD_INT 1
14043: ST_TO_ADDR
// for i = 1 to array1 do
14044: LD_ADDR_VAR 0 4
14048: PUSH
14049: DOUBLE
14050: LD_INT 1
14052: DEC
14053: ST_TO_ADDR
14054: LD_VAR 0 1
14058: PUSH
14059: FOR_TO
14060: IFFALSE 14098
// if array1 [ i ] <> array2 [ i ] then
14062: LD_VAR 0 1
14066: PUSH
14067: LD_VAR 0 4
14071: ARRAY
14072: PUSH
14073: LD_VAR 0 2
14077: PUSH
14078: LD_VAR 0 4
14082: ARRAY
14083: NONEQUAL
14084: IFFALSE 14096
// begin result := false ;
14086: LD_ADDR_VAR 0 3
14090: PUSH
14091: LD_INT 0
14093: ST_TO_ADDR
// break ;
14094: GO 14098
// end ;
14096: GO 14059
14098: POP
14099: POP
// end ;
14100: LD_VAR 0 3
14104: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14105: LD_INT 0
14107: PPUSH
14108: PPUSH
14109: PPUSH
// pom := GetBase ( fac ) ;
14110: LD_ADDR_VAR 0 5
14114: PUSH
14115: LD_VAR 0 1
14119: PPUSH
14120: CALL_OW 274
14124: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14125: LD_ADDR_VAR 0 4
14129: PUSH
14130: LD_VAR 0 2
14134: PUSH
14135: LD_INT 1
14137: ARRAY
14138: PPUSH
14139: LD_VAR 0 2
14143: PUSH
14144: LD_INT 2
14146: ARRAY
14147: PPUSH
14148: LD_VAR 0 2
14152: PUSH
14153: LD_INT 3
14155: ARRAY
14156: PPUSH
14157: LD_VAR 0 2
14161: PUSH
14162: LD_INT 4
14164: ARRAY
14165: PPUSH
14166: CALL_OW 449
14170: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14171: LD_ADDR_VAR 0 3
14175: PUSH
14176: LD_VAR 0 5
14180: PPUSH
14181: LD_INT 1
14183: PPUSH
14184: CALL_OW 275
14188: PUSH
14189: LD_VAR 0 4
14193: PUSH
14194: LD_INT 1
14196: ARRAY
14197: GREATEREQUAL
14198: PUSH
14199: LD_VAR 0 5
14203: PPUSH
14204: LD_INT 2
14206: PPUSH
14207: CALL_OW 275
14211: PUSH
14212: LD_VAR 0 4
14216: PUSH
14217: LD_INT 2
14219: ARRAY
14220: GREATEREQUAL
14221: AND
14222: PUSH
14223: LD_VAR 0 5
14227: PPUSH
14228: LD_INT 3
14230: PPUSH
14231: CALL_OW 275
14235: PUSH
14236: LD_VAR 0 4
14240: PUSH
14241: LD_INT 3
14243: ARRAY
14244: GREATEREQUAL
14245: AND
14246: ST_TO_ADDR
// end ;
14247: LD_VAR 0 3
14251: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14252: LD_INT 0
14254: PPUSH
14255: PPUSH
14256: PPUSH
14257: PPUSH
// pom := GetBase ( building ) ;
14258: LD_ADDR_VAR 0 3
14262: PUSH
14263: LD_VAR 0 1
14267: PPUSH
14268: CALL_OW 274
14272: ST_TO_ADDR
// if not pom then
14273: LD_VAR 0 3
14277: NOT
14278: IFFALSE 14282
// exit ;
14280: GO 14452
// btype := GetBType ( building ) ;
14282: LD_ADDR_VAR 0 5
14286: PUSH
14287: LD_VAR 0 1
14291: PPUSH
14292: CALL_OW 266
14296: ST_TO_ADDR
// if btype = b_armoury then
14297: LD_VAR 0 5
14301: PUSH
14302: LD_INT 4
14304: EQUAL
14305: IFFALSE 14315
// btype := b_barracks ;
14307: LD_ADDR_VAR 0 5
14311: PUSH
14312: LD_INT 5
14314: ST_TO_ADDR
// if btype = b_depot then
14315: LD_VAR 0 5
14319: PUSH
14320: LD_INT 0
14322: EQUAL
14323: IFFALSE 14333
// btype := b_warehouse ;
14325: LD_ADDR_VAR 0 5
14329: PUSH
14330: LD_INT 1
14332: ST_TO_ADDR
// if btype = b_workshop then
14333: LD_VAR 0 5
14337: PUSH
14338: LD_INT 2
14340: EQUAL
14341: IFFALSE 14351
// btype := b_factory ;
14343: LD_ADDR_VAR 0 5
14347: PUSH
14348: LD_INT 3
14350: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14351: LD_ADDR_VAR 0 4
14355: PUSH
14356: LD_VAR 0 5
14360: PPUSH
14361: LD_VAR 0 1
14365: PPUSH
14366: CALL_OW 248
14370: PPUSH
14371: CALL_OW 450
14375: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14376: LD_ADDR_VAR 0 2
14380: PUSH
14381: LD_VAR 0 3
14385: PPUSH
14386: LD_INT 1
14388: PPUSH
14389: CALL_OW 275
14393: PUSH
14394: LD_VAR 0 4
14398: PUSH
14399: LD_INT 1
14401: ARRAY
14402: GREATEREQUAL
14403: PUSH
14404: LD_VAR 0 3
14408: PPUSH
14409: LD_INT 2
14411: PPUSH
14412: CALL_OW 275
14416: PUSH
14417: LD_VAR 0 4
14421: PUSH
14422: LD_INT 2
14424: ARRAY
14425: GREATEREQUAL
14426: AND
14427: PUSH
14428: LD_VAR 0 3
14432: PPUSH
14433: LD_INT 3
14435: PPUSH
14436: CALL_OW 275
14440: PUSH
14441: LD_VAR 0 4
14445: PUSH
14446: LD_INT 3
14448: ARRAY
14449: GREATEREQUAL
14450: AND
14451: ST_TO_ADDR
// end ;
14452: LD_VAR 0 2
14456: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14457: LD_INT 0
14459: PPUSH
14460: PPUSH
14461: PPUSH
// pom := GetBase ( building ) ;
14462: LD_ADDR_VAR 0 4
14466: PUSH
14467: LD_VAR 0 1
14471: PPUSH
14472: CALL_OW 274
14476: ST_TO_ADDR
// if not pom then
14477: LD_VAR 0 4
14481: NOT
14482: IFFALSE 14486
// exit ;
14484: GO 14587
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14486: LD_ADDR_VAR 0 5
14490: PUSH
14491: LD_VAR 0 2
14495: PPUSH
14496: LD_VAR 0 1
14500: PPUSH
14501: CALL_OW 248
14505: PPUSH
14506: CALL_OW 450
14510: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14511: LD_ADDR_VAR 0 3
14515: PUSH
14516: LD_VAR 0 4
14520: PPUSH
14521: LD_INT 1
14523: PPUSH
14524: CALL_OW 275
14528: PUSH
14529: LD_VAR 0 5
14533: PUSH
14534: LD_INT 1
14536: ARRAY
14537: GREATEREQUAL
14538: PUSH
14539: LD_VAR 0 4
14543: PPUSH
14544: LD_INT 2
14546: PPUSH
14547: CALL_OW 275
14551: PUSH
14552: LD_VAR 0 5
14556: PUSH
14557: LD_INT 2
14559: ARRAY
14560: GREATEREQUAL
14561: AND
14562: PUSH
14563: LD_VAR 0 4
14567: PPUSH
14568: LD_INT 3
14570: PPUSH
14571: CALL_OW 275
14575: PUSH
14576: LD_VAR 0 5
14580: PUSH
14581: LD_INT 3
14583: ARRAY
14584: GREATEREQUAL
14585: AND
14586: ST_TO_ADDR
// end ;
14587: LD_VAR 0 3
14591: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14592: LD_INT 0
14594: PPUSH
14595: PPUSH
14596: PPUSH
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
14603: PPUSH
14604: PPUSH
// result := false ;
14605: LD_ADDR_VAR 0 8
14609: PUSH
14610: LD_INT 0
14612: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14613: LD_VAR 0 5
14617: NOT
14618: PUSH
14619: LD_VAR 0 1
14623: NOT
14624: OR
14625: PUSH
14626: LD_VAR 0 2
14630: NOT
14631: OR
14632: PUSH
14633: LD_VAR 0 3
14637: NOT
14638: OR
14639: IFFALSE 14643
// exit ;
14641: GO 15457
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14643: LD_ADDR_VAR 0 14
14647: PUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: LD_VAR 0 2
14657: PPUSH
14658: LD_VAR 0 3
14662: PPUSH
14663: LD_VAR 0 4
14667: PPUSH
14668: LD_VAR 0 5
14672: PUSH
14673: LD_INT 1
14675: ARRAY
14676: PPUSH
14677: CALL_OW 248
14681: PPUSH
14682: LD_INT 0
14684: PPUSH
14685: CALL 16710 0 6
14689: ST_TO_ADDR
// if not hexes then
14690: LD_VAR 0 14
14694: NOT
14695: IFFALSE 14699
// exit ;
14697: GO 15457
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14699: LD_ADDR_VAR 0 17
14703: PUSH
14704: LD_VAR 0 5
14708: PPUSH
14709: LD_INT 22
14711: PUSH
14712: LD_VAR 0 13
14716: PPUSH
14717: CALL_OW 255
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: LD_INT 2
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 30
14741: PUSH
14742: LD_INT 1
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PPUSH
14758: CALL_OW 72
14762: ST_TO_ADDR
// for i = 1 to hexes do
14763: LD_ADDR_VAR 0 9
14767: PUSH
14768: DOUBLE
14769: LD_INT 1
14771: DEC
14772: ST_TO_ADDR
14773: LD_VAR 0 14
14777: PUSH
14778: FOR_TO
14779: IFFALSE 15455
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14781: LD_ADDR_VAR 0 13
14785: PUSH
14786: LD_VAR 0 14
14790: PUSH
14791: LD_VAR 0 9
14795: ARRAY
14796: PUSH
14797: LD_INT 1
14799: ARRAY
14800: PPUSH
14801: LD_VAR 0 14
14805: PUSH
14806: LD_VAR 0 9
14810: ARRAY
14811: PUSH
14812: LD_INT 2
14814: ARRAY
14815: PPUSH
14816: CALL_OW 428
14820: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14821: LD_VAR 0 14
14825: PUSH
14826: LD_VAR 0 9
14830: ARRAY
14831: PUSH
14832: LD_INT 1
14834: ARRAY
14835: PPUSH
14836: LD_VAR 0 14
14840: PUSH
14841: LD_VAR 0 9
14845: ARRAY
14846: PUSH
14847: LD_INT 2
14849: ARRAY
14850: PPUSH
14851: CALL_OW 351
14855: PUSH
14856: LD_VAR 0 14
14860: PUSH
14861: LD_VAR 0 9
14865: ARRAY
14866: PUSH
14867: LD_INT 1
14869: ARRAY
14870: PPUSH
14871: LD_VAR 0 14
14875: PUSH
14876: LD_VAR 0 9
14880: ARRAY
14881: PUSH
14882: LD_INT 2
14884: ARRAY
14885: PPUSH
14886: CALL_OW 488
14890: NOT
14891: OR
14892: PUSH
14893: LD_VAR 0 13
14897: PPUSH
14898: CALL_OW 247
14902: PUSH
14903: LD_INT 3
14905: EQUAL
14906: OR
14907: IFFALSE 14913
// exit ;
14909: POP
14910: POP
14911: GO 15457
// if not tmp then
14913: LD_VAR 0 13
14917: NOT
14918: IFFALSE 14922
// continue ;
14920: GO 14778
// result := true ;
14922: LD_ADDR_VAR 0 8
14926: PUSH
14927: LD_INT 1
14929: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14930: LD_VAR 0 6
14934: PUSH
14935: LD_VAR 0 13
14939: PPUSH
14940: CALL_OW 247
14944: PUSH
14945: LD_INT 2
14947: EQUAL
14948: AND
14949: PUSH
14950: LD_VAR 0 13
14954: PPUSH
14955: CALL_OW 263
14959: PUSH
14960: LD_INT 1
14962: EQUAL
14963: AND
14964: IFFALSE 15128
// begin if IsDrivenBy ( tmp ) then
14966: LD_VAR 0 13
14970: PPUSH
14971: CALL_OW 311
14975: IFFALSE 14979
// continue ;
14977: GO 14778
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14979: LD_VAR 0 6
14983: PPUSH
14984: LD_INT 3
14986: PUSH
14987: LD_INT 60
14989: PUSH
14990: EMPTY
14991: LIST
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 3
14999: PUSH
15000: LD_INT 55
15002: PUSH
15003: EMPTY
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 72
15018: IFFALSE 15126
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15020: LD_ADDR_VAR 0 18
15024: PUSH
15025: LD_VAR 0 6
15029: PPUSH
15030: LD_INT 3
15032: PUSH
15033: LD_INT 60
15035: PUSH
15036: EMPTY
15037: LIST
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 3
15045: PUSH
15046: LD_INT 55
15048: PUSH
15049: EMPTY
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 72
15064: PUSH
15065: LD_INT 1
15067: ARRAY
15068: ST_TO_ADDR
// if IsInUnit ( driver ) then
15069: LD_VAR 0 18
15073: PPUSH
15074: CALL_OW 310
15078: IFFALSE 15089
// ComExit ( driver ) ;
15080: LD_VAR 0 18
15084: PPUSH
15085: CALL 40489 0 1
// AddComEnterUnit ( driver , tmp ) ;
15089: LD_VAR 0 18
15093: PPUSH
15094: LD_VAR 0 13
15098: PPUSH
15099: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15103: LD_VAR 0 18
15107: PPUSH
15108: LD_VAR 0 7
15112: PPUSH
15113: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15117: LD_VAR 0 18
15121: PPUSH
15122: CALL_OW 181
// end ; continue ;
15126: GO 14778
// end ; if not cleaners or not tmp in cleaners then
15128: LD_VAR 0 6
15132: NOT
15133: PUSH
15134: LD_VAR 0 13
15138: PUSH
15139: LD_VAR 0 6
15143: IN
15144: NOT
15145: OR
15146: IFFALSE 15453
// begin if dep then
15148: LD_VAR 0 17
15152: IFFALSE 15288
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15154: LD_ADDR_VAR 0 16
15158: PUSH
15159: LD_VAR 0 17
15163: PUSH
15164: LD_INT 1
15166: ARRAY
15167: PPUSH
15168: CALL_OW 250
15172: PPUSH
15173: LD_VAR 0 17
15177: PUSH
15178: LD_INT 1
15180: ARRAY
15181: PPUSH
15182: CALL_OW 254
15186: PPUSH
15187: LD_INT 5
15189: PPUSH
15190: CALL_OW 272
15194: PUSH
15195: LD_VAR 0 17
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: PPUSH
15204: CALL_OW 251
15208: PPUSH
15209: LD_VAR 0 17
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: CALL_OW 254
15222: PPUSH
15223: LD_INT 5
15225: PPUSH
15226: CALL_OW 273
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15235: LD_VAR 0 16
15239: PUSH
15240: LD_INT 1
15242: ARRAY
15243: PPUSH
15244: LD_VAR 0 16
15248: PUSH
15249: LD_INT 2
15251: ARRAY
15252: PPUSH
15253: CALL_OW 488
15257: IFFALSE 15288
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15259: LD_VAR 0 13
15263: PPUSH
15264: LD_VAR 0 16
15268: PUSH
15269: LD_INT 1
15271: ARRAY
15272: PPUSH
15273: LD_VAR 0 16
15277: PUSH
15278: LD_INT 2
15280: ARRAY
15281: PPUSH
15282: CALL_OW 111
// continue ;
15286: GO 14778
// end ; end ; r := GetDir ( tmp ) ;
15288: LD_ADDR_VAR 0 15
15292: PUSH
15293: LD_VAR 0 13
15297: PPUSH
15298: CALL_OW 254
15302: ST_TO_ADDR
// if r = 5 then
15303: LD_VAR 0 15
15307: PUSH
15308: LD_INT 5
15310: EQUAL
15311: IFFALSE 15321
// r := 0 ;
15313: LD_ADDR_VAR 0 15
15317: PUSH
15318: LD_INT 0
15320: ST_TO_ADDR
// for j = r to 5 do
15321: LD_ADDR_VAR 0 10
15325: PUSH
15326: DOUBLE
15327: LD_VAR 0 15
15331: DEC
15332: ST_TO_ADDR
15333: LD_INT 5
15335: PUSH
15336: FOR_TO
15337: IFFALSE 15451
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15339: LD_ADDR_VAR 0 11
15343: PUSH
15344: LD_VAR 0 13
15348: PPUSH
15349: CALL_OW 250
15353: PPUSH
15354: LD_VAR 0 10
15358: PPUSH
15359: LD_INT 2
15361: PPUSH
15362: CALL_OW 272
15366: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15367: LD_ADDR_VAR 0 12
15371: PUSH
15372: LD_VAR 0 13
15376: PPUSH
15377: CALL_OW 251
15381: PPUSH
15382: LD_VAR 0 10
15386: PPUSH
15387: LD_INT 2
15389: PPUSH
15390: CALL_OW 273
15394: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15395: LD_VAR 0 11
15399: PPUSH
15400: LD_VAR 0 12
15404: PPUSH
15405: CALL_OW 488
15409: PUSH
15410: LD_VAR 0 11
15414: PPUSH
15415: LD_VAR 0 12
15419: PPUSH
15420: CALL_OW 428
15424: NOT
15425: AND
15426: IFFALSE 15449
// begin ComMoveXY ( tmp , _x , _y ) ;
15428: LD_VAR 0 13
15432: PPUSH
15433: LD_VAR 0 11
15437: PPUSH
15438: LD_VAR 0 12
15442: PPUSH
15443: CALL_OW 111
// break ;
15447: GO 15451
// end ; end ;
15449: GO 15336
15451: POP
15452: POP
// end ; end ;
15453: GO 14778
15455: POP
15456: POP
// end ;
15457: LD_VAR 0 8
15461: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15462: LD_INT 0
15464: PPUSH
// result := true ;
15465: LD_ADDR_VAR 0 3
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15473: LD_VAR 0 2
15477: PUSH
15478: LD_INT 24
15480: DOUBLE
15481: EQUAL
15482: IFTRUE 15492
15484: LD_INT 33
15486: DOUBLE
15487: EQUAL
15488: IFTRUE 15492
15490: GO 15517
15492: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15493: LD_ADDR_VAR 0 3
15497: PUSH
15498: LD_INT 32
15500: PPUSH
15501: LD_VAR 0 1
15505: PPUSH
15506: CALL_OW 321
15510: PUSH
15511: LD_INT 2
15513: EQUAL
15514: ST_TO_ADDR
15515: GO 15833
15517: LD_INT 20
15519: DOUBLE
15520: EQUAL
15521: IFTRUE 15525
15523: GO 15550
15525: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15526: LD_ADDR_VAR 0 3
15530: PUSH
15531: LD_INT 6
15533: PPUSH
15534: LD_VAR 0 1
15538: PPUSH
15539: CALL_OW 321
15543: PUSH
15544: LD_INT 2
15546: EQUAL
15547: ST_TO_ADDR
15548: GO 15833
15550: LD_INT 22
15552: DOUBLE
15553: EQUAL
15554: IFTRUE 15564
15556: LD_INT 36
15558: DOUBLE
15559: EQUAL
15560: IFTRUE 15564
15562: GO 15589
15564: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15565: LD_ADDR_VAR 0 3
15569: PUSH
15570: LD_INT 15
15572: PPUSH
15573: LD_VAR 0 1
15577: PPUSH
15578: CALL_OW 321
15582: PUSH
15583: LD_INT 2
15585: EQUAL
15586: ST_TO_ADDR
15587: GO 15833
15589: LD_INT 30
15591: DOUBLE
15592: EQUAL
15593: IFTRUE 15597
15595: GO 15622
15597: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15598: LD_ADDR_VAR 0 3
15602: PUSH
15603: LD_INT 20
15605: PPUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 321
15615: PUSH
15616: LD_INT 2
15618: EQUAL
15619: ST_TO_ADDR
15620: GO 15833
15622: LD_INT 28
15624: DOUBLE
15625: EQUAL
15626: IFTRUE 15636
15628: LD_INT 21
15630: DOUBLE
15631: EQUAL
15632: IFTRUE 15636
15634: GO 15661
15636: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15637: LD_ADDR_VAR 0 3
15641: PUSH
15642: LD_INT 21
15644: PPUSH
15645: LD_VAR 0 1
15649: PPUSH
15650: CALL_OW 321
15654: PUSH
15655: LD_INT 2
15657: EQUAL
15658: ST_TO_ADDR
15659: GO 15833
15661: LD_INT 16
15663: DOUBLE
15664: EQUAL
15665: IFTRUE 15669
15667: GO 15694
15669: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15670: LD_ADDR_VAR 0 3
15674: PUSH
15675: LD_INT 84
15677: PPUSH
15678: LD_VAR 0 1
15682: PPUSH
15683: CALL_OW 321
15687: PUSH
15688: LD_INT 2
15690: EQUAL
15691: ST_TO_ADDR
15692: GO 15833
15694: LD_INT 19
15696: DOUBLE
15697: EQUAL
15698: IFTRUE 15708
15700: LD_INT 23
15702: DOUBLE
15703: EQUAL
15704: IFTRUE 15708
15706: GO 15733
15708: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15709: LD_ADDR_VAR 0 3
15713: PUSH
15714: LD_INT 83
15716: PPUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 321
15726: PUSH
15727: LD_INT 2
15729: EQUAL
15730: ST_TO_ADDR
15731: GO 15833
15733: LD_INT 17
15735: DOUBLE
15736: EQUAL
15737: IFTRUE 15741
15739: GO 15766
15741: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15742: LD_ADDR_VAR 0 3
15746: PUSH
15747: LD_INT 39
15749: PPUSH
15750: LD_VAR 0 1
15754: PPUSH
15755: CALL_OW 321
15759: PUSH
15760: LD_INT 2
15762: EQUAL
15763: ST_TO_ADDR
15764: GO 15833
15766: LD_INT 18
15768: DOUBLE
15769: EQUAL
15770: IFTRUE 15774
15772: GO 15799
15774: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15775: LD_ADDR_VAR 0 3
15779: PUSH
15780: LD_INT 40
15782: PPUSH
15783: LD_VAR 0 1
15787: PPUSH
15788: CALL_OW 321
15792: PUSH
15793: LD_INT 2
15795: EQUAL
15796: ST_TO_ADDR
15797: GO 15833
15799: LD_INT 27
15801: DOUBLE
15802: EQUAL
15803: IFTRUE 15807
15805: GO 15832
15807: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15808: LD_ADDR_VAR 0 3
15812: PUSH
15813: LD_INT 35
15815: PPUSH
15816: LD_VAR 0 1
15820: PPUSH
15821: CALL_OW 321
15825: PUSH
15826: LD_INT 2
15828: EQUAL
15829: ST_TO_ADDR
15830: GO 15833
15832: POP
// end ;
15833: LD_VAR 0 3
15837: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15838: LD_INT 0
15840: PPUSH
15841: PPUSH
15842: PPUSH
15843: PPUSH
15844: PPUSH
15845: PPUSH
15846: PPUSH
15847: PPUSH
15848: PPUSH
15849: PPUSH
15850: PPUSH
// result := false ;
15851: LD_ADDR_VAR 0 6
15855: PUSH
15856: LD_INT 0
15858: ST_TO_ADDR
// if btype = b_depot then
15859: LD_VAR 0 2
15863: PUSH
15864: LD_INT 0
15866: EQUAL
15867: IFFALSE 15879
// begin result := true ;
15869: LD_ADDR_VAR 0 6
15873: PUSH
15874: LD_INT 1
15876: ST_TO_ADDR
// exit ;
15877: GO 16705
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15879: LD_VAR 0 1
15883: NOT
15884: PUSH
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 266
15894: PUSH
15895: LD_INT 0
15897: PUSH
15898: LD_INT 1
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: IN
15905: NOT
15906: OR
15907: PUSH
15908: LD_VAR 0 2
15912: NOT
15913: OR
15914: PUSH
15915: LD_VAR 0 5
15919: PUSH
15920: LD_INT 0
15922: PUSH
15923: LD_INT 1
15925: PUSH
15926: LD_INT 2
15928: PUSH
15929: LD_INT 3
15931: PUSH
15932: LD_INT 4
15934: PUSH
15935: LD_INT 5
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: IN
15946: NOT
15947: OR
15948: PUSH
15949: LD_VAR 0 3
15953: PPUSH
15954: LD_VAR 0 4
15958: PPUSH
15959: CALL_OW 488
15963: NOT
15964: OR
15965: IFFALSE 15969
// exit ;
15967: GO 16705
// side := GetSide ( depot ) ;
15969: LD_ADDR_VAR 0 9
15973: PUSH
15974: LD_VAR 0 1
15978: PPUSH
15979: CALL_OW 255
15983: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15984: LD_VAR 0 9
15988: PPUSH
15989: LD_VAR 0 2
15993: PPUSH
15994: CALL 15462 0 2
15998: NOT
15999: IFFALSE 16003
// exit ;
16001: GO 16705
// pom := GetBase ( depot ) ;
16003: LD_ADDR_VAR 0 10
16007: PUSH
16008: LD_VAR 0 1
16012: PPUSH
16013: CALL_OW 274
16017: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16018: LD_ADDR_VAR 0 11
16022: PUSH
16023: LD_VAR 0 2
16027: PPUSH
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 248
16037: PPUSH
16038: CALL_OW 450
16042: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16043: LD_VAR 0 10
16047: PPUSH
16048: LD_INT 1
16050: PPUSH
16051: CALL_OW 275
16055: PUSH
16056: LD_VAR 0 11
16060: PUSH
16061: LD_INT 1
16063: ARRAY
16064: GREATEREQUAL
16065: PUSH
16066: LD_VAR 0 10
16070: PPUSH
16071: LD_INT 2
16073: PPUSH
16074: CALL_OW 275
16078: PUSH
16079: LD_VAR 0 11
16083: PUSH
16084: LD_INT 2
16086: ARRAY
16087: GREATEREQUAL
16088: AND
16089: PUSH
16090: LD_VAR 0 10
16094: PPUSH
16095: LD_INT 3
16097: PPUSH
16098: CALL_OW 275
16102: PUSH
16103: LD_VAR 0 11
16107: PUSH
16108: LD_INT 3
16110: ARRAY
16111: GREATEREQUAL
16112: AND
16113: NOT
16114: IFFALSE 16118
// exit ;
16116: GO 16705
// if GetBType ( depot ) = b_depot then
16118: LD_VAR 0 1
16122: PPUSH
16123: CALL_OW 266
16127: PUSH
16128: LD_INT 0
16130: EQUAL
16131: IFFALSE 16143
// dist := 28 else
16133: LD_ADDR_VAR 0 14
16137: PUSH
16138: LD_INT 28
16140: ST_TO_ADDR
16141: GO 16151
// dist := 36 ;
16143: LD_ADDR_VAR 0 14
16147: PUSH
16148: LD_INT 36
16150: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16151: LD_VAR 0 1
16155: PPUSH
16156: LD_VAR 0 3
16160: PPUSH
16161: LD_VAR 0 4
16165: PPUSH
16166: CALL_OW 297
16170: PUSH
16171: LD_VAR 0 14
16175: GREATER
16176: IFFALSE 16180
// exit ;
16178: GO 16705
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16180: LD_ADDR_VAR 0 12
16184: PUSH
16185: LD_VAR 0 2
16189: PPUSH
16190: LD_VAR 0 3
16194: PPUSH
16195: LD_VAR 0 4
16199: PPUSH
16200: LD_VAR 0 5
16204: PPUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 248
16214: PPUSH
16215: LD_INT 0
16217: PPUSH
16218: CALL 16710 0 6
16222: ST_TO_ADDR
// if not hexes then
16223: LD_VAR 0 12
16227: NOT
16228: IFFALSE 16232
// exit ;
16230: GO 16705
// hex := GetHexInfo ( x , y ) ;
16232: LD_ADDR_VAR 0 15
16236: PUSH
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_VAR 0 4
16246: PPUSH
16247: CALL_OW 546
16251: ST_TO_ADDR
// if hex [ 1 ] then
16252: LD_VAR 0 15
16256: PUSH
16257: LD_INT 1
16259: ARRAY
16260: IFFALSE 16264
// exit ;
16262: GO 16705
// height := hex [ 2 ] ;
16264: LD_ADDR_VAR 0 13
16268: PUSH
16269: LD_VAR 0 15
16273: PUSH
16274: LD_INT 2
16276: ARRAY
16277: ST_TO_ADDR
// for i = 1 to hexes do
16278: LD_ADDR_VAR 0 7
16282: PUSH
16283: DOUBLE
16284: LD_INT 1
16286: DEC
16287: ST_TO_ADDR
16288: LD_VAR 0 12
16292: PUSH
16293: FOR_TO
16294: IFFALSE 16624
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16296: LD_VAR 0 12
16300: PUSH
16301: LD_VAR 0 7
16305: ARRAY
16306: PUSH
16307: LD_INT 1
16309: ARRAY
16310: PPUSH
16311: LD_VAR 0 12
16315: PUSH
16316: LD_VAR 0 7
16320: ARRAY
16321: PUSH
16322: LD_INT 2
16324: ARRAY
16325: PPUSH
16326: CALL_OW 488
16330: NOT
16331: PUSH
16332: LD_VAR 0 12
16336: PUSH
16337: LD_VAR 0 7
16341: ARRAY
16342: PUSH
16343: LD_INT 1
16345: ARRAY
16346: PPUSH
16347: LD_VAR 0 12
16351: PUSH
16352: LD_VAR 0 7
16356: ARRAY
16357: PUSH
16358: LD_INT 2
16360: ARRAY
16361: PPUSH
16362: CALL_OW 428
16366: PUSH
16367: LD_INT 0
16369: GREATER
16370: OR
16371: PUSH
16372: LD_VAR 0 12
16376: PUSH
16377: LD_VAR 0 7
16381: ARRAY
16382: PUSH
16383: LD_INT 1
16385: ARRAY
16386: PPUSH
16387: LD_VAR 0 12
16391: PUSH
16392: LD_VAR 0 7
16396: ARRAY
16397: PUSH
16398: LD_INT 2
16400: ARRAY
16401: PPUSH
16402: CALL_OW 351
16406: OR
16407: IFFALSE 16413
// exit ;
16409: POP
16410: POP
16411: GO 16705
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16413: LD_ADDR_VAR 0 8
16417: PUSH
16418: LD_VAR 0 12
16422: PUSH
16423: LD_VAR 0 7
16427: ARRAY
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_VAR 0 12
16437: PUSH
16438: LD_VAR 0 7
16442: ARRAY
16443: PUSH
16444: LD_INT 2
16446: ARRAY
16447: PPUSH
16448: CALL_OW 546
16452: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16453: LD_VAR 0 8
16457: PUSH
16458: LD_INT 1
16460: ARRAY
16461: PUSH
16462: LD_VAR 0 8
16466: PUSH
16467: LD_INT 2
16469: ARRAY
16470: PUSH
16471: LD_VAR 0 13
16475: PUSH
16476: LD_INT 2
16478: PLUS
16479: GREATER
16480: OR
16481: PUSH
16482: LD_VAR 0 8
16486: PUSH
16487: LD_INT 2
16489: ARRAY
16490: PUSH
16491: LD_VAR 0 13
16495: PUSH
16496: LD_INT 2
16498: MINUS
16499: LESS
16500: OR
16501: PUSH
16502: LD_VAR 0 8
16506: PUSH
16507: LD_INT 3
16509: ARRAY
16510: PUSH
16511: LD_INT 0
16513: PUSH
16514: LD_INT 8
16516: PUSH
16517: LD_INT 9
16519: PUSH
16520: LD_INT 10
16522: PUSH
16523: LD_INT 11
16525: PUSH
16526: LD_INT 12
16528: PUSH
16529: LD_INT 13
16531: PUSH
16532: LD_INT 16
16534: PUSH
16535: LD_INT 17
16537: PUSH
16538: LD_INT 18
16540: PUSH
16541: LD_INT 19
16543: PUSH
16544: LD_INT 20
16546: PUSH
16547: LD_INT 21
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: IN
16565: NOT
16566: OR
16567: PUSH
16568: LD_VAR 0 8
16572: PUSH
16573: LD_INT 5
16575: ARRAY
16576: NOT
16577: OR
16578: PUSH
16579: LD_VAR 0 8
16583: PUSH
16584: LD_INT 6
16586: ARRAY
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: LD_INT 7
16596: PUSH
16597: LD_INT 9
16599: PUSH
16600: LD_INT 10
16602: PUSH
16603: LD_INT 11
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: IN
16614: NOT
16615: OR
16616: IFFALSE 16622
// exit ;
16618: POP
16619: POP
16620: GO 16705
// end ;
16622: GO 16293
16624: POP
16625: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16626: LD_VAR 0 9
16630: PPUSH
16631: LD_VAR 0 3
16635: PPUSH
16636: LD_VAR 0 4
16640: PPUSH
16641: LD_INT 20
16643: PPUSH
16644: CALL 8628 0 4
16648: PUSH
16649: LD_INT 4
16651: ARRAY
16652: IFFALSE 16656
// exit ;
16654: GO 16705
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16656: LD_VAR 0 2
16660: PUSH
16661: LD_INT 29
16663: PUSH
16664: LD_INT 30
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: IN
16671: PUSH
16672: LD_VAR 0 3
16676: PPUSH
16677: LD_VAR 0 4
16681: PPUSH
16682: LD_VAR 0 9
16686: PPUSH
16687: CALL_OW 440
16691: NOT
16692: AND
16693: IFFALSE 16697
// exit ;
16695: GO 16705
// result := true ;
16697: LD_ADDR_VAR 0 6
16701: PUSH
16702: LD_INT 1
16704: ST_TO_ADDR
// end ;
16705: LD_VAR 0 6
16709: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16710: LD_INT 0
16712: PPUSH
16713: PPUSH
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
16720: PPUSH
16721: PPUSH
16722: PPUSH
16723: PPUSH
16724: PPUSH
16725: PPUSH
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
16730: PPUSH
16731: PPUSH
16732: PPUSH
16733: PPUSH
16734: PPUSH
16735: PPUSH
16736: PPUSH
16737: PPUSH
16738: PPUSH
16739: PPUSH
16740: PPUSH
16741: PPUSH
16742: PPUSH
16743: PPUSH
16744: PPUSH
16745: PPUSH
16746: PPUSH
16747: PPUSH
16748: PPUSH
16749: PPUSH
16750: PPUSH
16751: PPUSH
16752: PPUSH
16753: PPUSH
16754: PPUSH
16755: PPUSH
16756: PPUSH
16757: PPUSH
16758: PPUSH
16759: PPUSH
16760: PPUSH
16761: PPUSH
16762: PPUSH
16763: PPUSH
16764: PPUSH
16765: PPUSH
16766: PPUSH
16767: PPUSH
16768: PPUSH
16769: PPUSH
// result = [ ] ;
16770: LD_ADDR_VAR 0 7
16774: PUSH
16775: EMPTY
16776: ST_TO_ADDR
// temp_list = [ ] ;
16777: LD_ADDR_VAR 0 9
16781: PUSH
16782: EMPTY
16783: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16784: LD_VAR 0 4
16788: PUSH
16789: LD_INT 0
16791: PUSH
16792: LD_INT 1
16794: PUSH
16795: LD_INT 2
16797: PUSH
16798: LD_INT 3
16800: PUSH
16801: LD_INT 4
16803: PUSH
16804: LD_INT 5
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: IN
16815: NOT
16816: PUSH
16817: LD_VAR 0 1
16821: PUSH
16822: LD_INT 0
16824: PUSH
16825: LD_INT 1
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: IN
16832: PUSH
16833: LD_VAR 0 5
16837: PUSH
16838: LD_INT 1
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: IN
16852: NOT
16853: AND
16854: OR
16855: IFFALSE 16859
// exit ;
16857: GO 35250
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16859: LD_VAR 0 1
16863: PUSH
16864: LD_INT 6
16866: PUSH
16867: LD_INT 7
16869: PUSH
16870: LD_INT 8
16872: PUSH
16873: LD_INT 13
16875: PUSH
16876: LD_INT 12
16878: PUSH
16879: LD_INT 15
16881: PUSH
16882: LD_INT 11
16884: PUSH
16885: LD_INT 14
16887: PUSH
16888: LD_INT 10
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: IN
16902: IFFALSE 16912
// btype = b_lab ;
16904: LD_ADDR_VAR 0 1
16908: PUSH
16909: LD_INT 6
16911: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16912: LD_VAR 0 6
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: LIST
16930: IN
16931: NOT
16932: PUSH
16933: LD_VAR 0 1
16937: PUSH
16938: LD_INT 0
16940: PUSH
16941: LD_INT 1
16943: PUSH
16944: LD_INT 2
16946: PUSH
16947: LD_INT 3
16949: PUSH
16950: LD_INT 6
16952: PUSH
16953: LD_INT 36
16955: PUSH
16956: LD_INT 4
16958: PUSH
16959: LD_INT 5
16961: PUSH
16962: LD_INT 31
16964: PUSH
16965: LD_INT 32
16967: PUSH
16968: LD_INT 33
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: IN
16984: NOT
16985: PUSH
16986: LD_VAR 0 6
16990: PUSH
16991: LD_INT 1
16993: EQUAL
16994: AND
16995: OR
16996: PUSH
16997: LD_VAR 0 1
17001: PUSH
17002: LD_INT 2
17004: PUSH
17005: LD_INT 3
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: IN
17012: NOT
17013: PUSH
17014: LD_VAR 0 6
17018: PUSH
17019: LD_INT 2
17021: EQUAL
17022: AND
17023: OR
17024: IFFALSE 17034
// mode = 0 ;
17026: LD_ADDR_VAR 0 6
17030: PUSH
17031: LD_INT 0
17033: ST_TO_ADDR
// case mode of 0 :
17034: LD_VAR 0 6
17038: PUSH
17039: LD_INT 0
17041: DOUBLE
17042: EQUAL
17043: IFTRUE 17047
17045: GO 28500
17047: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17048: LD_ADDR_VAR 0 11
17052: PUSH
17053: LD_INT 0
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: LD_INT 1
17068: NEG
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 1
17076: PUSH
17077: LD_INT 0
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 0
17096: PUSH
17097: LD_INT 1
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 1
17106: NEG
17107: PUSH
17108: LD_INT 0
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 1
17117: NEG
17118: PUSH
17119: LD_INT 1
17121: NEG
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: LD_INT 2
17133: NEG
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 0
17141: PUSH
17142: LD_INT 2
17144: NEG
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 1
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: LD_INT 2
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 0
17173: PUSH
17174: LD_INT 2
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 1
17183: NEG
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: LD_INT 3
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: LD_INT 2
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17241: LD_ADDR_VAR 0 12
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 0
17258: PUSH
17259: LD_INT 1
17261: NEG
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: LD_INT 0
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 0
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 1
17299: NEG
17300: PUSH
17301: LD_INT 0
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 1
17310: NEG
17311: PUSH
17312: LD_INT 1
17314: NEG
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 1
17322: PUSH
17323: LD_INT 1
17325: NEG
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 2
17333: PUSH
17334: LD_INT 0
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 2
17343: PUSH
17344: LD_INT 1
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 1
17353: NEG
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 2
17364: NEG
17365: PUSH
17366: LD_INT 0
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 2
17375: NEG
17376: PUSH
17377: LD_INT 1
17379: NEG
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: NEG
17388: PUSH
17389: LD_INT 1
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 3
17398: NEG
17399: PUSH
17400: LD_INT 0
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 3
17409: NEG
17410: PUSH
17411: LD_INT 1
17413: NEG
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17437: LD_ADDR_VAR 0 13
17441: PUSH
17442: LD_INT 0
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: LD_INT 1
17457: NEG
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 0
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 1
17495: NEG
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 1
17506: NEG
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: NEG
17519: PUSH
17520: LD_INT 2
17522: NEG
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 2
17540: PUSH
17541: LD_INT 2
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 1
17550: PUSH
17551: LD_INT 2
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 2
17560: NEG
17561: PUSH
17562: LD_INT 1
17564: NEG
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: NEG
17573: PUSH
17574: LD_INT 2
17576: NEG
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 2
17584: NEG
17585: PUSH
17586: LD_INT 3
17588: NEG
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 3
17596: NEG
17597: PUSH
17598: LD_INT 2
17600: NEG
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 3
17608: NEG
17609: PUSH
17610: LD_INT 3
17612: NEG
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17636: LD_ADDR_VAR 0 14
17640: PUSH
17641: LD_INT 0
17643: PUSH
17644: LD_INT 0
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: LD_INT 0
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 0
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 1
17694: NEG
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 1
17705: NEG
17706: PUSH
17707: LD_INT 1
17709: NEG
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 1
17717: NEG
17718: PUSH
17719: LD_INT 2
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: LD_INT 2
17732: NEG
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 1
17740: PUSH
17741: LD_INT 1
17743: NEG
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 1
17751: PUSH
17752: LD_INT 2
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 0
17761: PUSH
17762: LD_INT 2
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 1
17771: NEG
17772: PUSH
17773: LD_INT 1
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 1
17782: NEG
17783: PUSH
17784: LD_INT 3
17786: NEG
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 0
17794: PUSH
17795: LD_INT 3
17797: NEG
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: LD_INT 2
17808: NEG
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17832: LD_ADDR_VAR 0 15
17836: PUSH
17837: LD_INT 0
17839: PUSH
17840: LD_INT 0
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 0
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: LD_INT 0
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 0
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 1
17890: NEG
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: LD_INT 1
17905: NEG
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 1
17913: PUSH
17914: LD_INT 1
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: LD_INT 0
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 2
17934: PUSH
17935: LD_INT 1
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 1
17944: NEG
17945: PUSH
17946: LD_INT 1
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 2
17955: NEG
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 2
17966: NEG
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 2
17978: PUSH
17979: LD_INT 1
17981: NEG
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 3
17989: PUSH
17990: LD_INT 0
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 3
17999: PUSH
18000: LD_INT 1
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18025: LD_ADDR_VAR 0 16
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 0
18042: PUSH
18043: LD_INT 1
18045: NEG
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: NEG
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: LD_INT 2
18110: NEG
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 2
18118: PUSH
18119: LD_INT 1
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 2
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 2
18148: NEG
18149: PUSH
18150: LD_INT 1
18152: NEG
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 2
18160: NEG
18161: PUSH
18162: LD_INT 2
18164: NEG
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 3
18172: PUSH
18173: LD_INT 2
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 3
18182: PUSH
18183: LD_INT 3
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: LD_INT 3
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18218: LD_ADDR_VAR 0 17
18222: PUSH
18223: LD_INT 0
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 0
18235: PUSH
18236: LD_INT 1
18238: NEG
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: PUSH
18247: LD_INT 0
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 1
18256: PUSH
18257: LD_INT 1
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: NEG
18277: PUSH
18278: LD_INT 0
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 1
18287: NEG
18288: PUSH
18289: LD_INT 1
18291: NEG
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 1
18299: NEG
18300: PUSH
18301: LD_INT 2
18303: NEG
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: LD_INT 2
18314: NEG
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: LD_INT 1
18325: NEG
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 2
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 2
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 2
18353: PUSH
18354: LD_INT 2
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: LD_INT 2
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 1
18383: NEG
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 2
18394: NEG
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 2
18405: NEG
18406: PUSH
18407: LD_INT 1
18409: NEG
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 2
18417: NEG
18418: PUSH
18419: LD_INT 2
18421: NEG
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18448: LD_ADDR_VAR 0 18
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: LD_INT 0
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: LD_INT 1
18468: NEG
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 1
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: LD_INT 1
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: LD_INT 0
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 1
18517: NEG
18518: PUSH
18519: LD_INT 1
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 1
18529: NEG
18530: PUSH
18531: LD_INT 2
18533: NEG
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: LD_INT 2
18544: NEG
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 1
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 2
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 2
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 2
18583: PUSH
18584: LD_INT 2
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 1
18593: PUSH
18594: LD_INT 2
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: LD_INT 2
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 1
18613: NEG
18614: PUSH
18615: LD_INT 1
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 2
18624: NEG
18625: PUSH
18626: LD_INT 0
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 2
18635: NEG
18636: PUSH
18637: LD_INT 1
18639: NEG
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 2
18647: NEG
18648: PUSH
18649: LD_INT 2
18651: NEG
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18678: LD_ADDR_VAR 0 19
18682: PUSH
18683: LD_INT 0
18685: PUSH
18686: LD_INT 0
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: LD_INT 1
18698: NEG
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: LD_INT 1
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: NEG
18737: PUSH
18738: LD_INT 0
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 1
18747: NEG
18748: PUSH
18749: LD_INT 1
18751: NEG
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 2
18763: NEG
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: LD_INT 2
18774: NEG
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 1
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 2
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 2
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 2
18813: PUSH
18814: LD_INT 2
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 1
18823: PUSH
18824: LD_INT 2
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 1
18843: NEG
18844: PUSH
18845: LD_INT 1
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 2
18854: NEG
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 2
18865: NEG
18866: PUSH
18867: LD_INT 1
18869: NEG
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 2
18877: NEG
18878: PUSH
18879: LD_INT 2
18881: NEG
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18908: LD_ADDR_VAR 0 20
18912: PUSH
18913: LD_INT 0
18915: PUSH
18916: LD_INT 0
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 0
18925: PUSH
18926: LD_INT 1
18928: NEG
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: LD_INT 0
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: NEG
18967: PUSH
18968: LD_INT 0
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 1
18977: NEG
18978: PUSH
18979: LD_INT 1
18981: NEG
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 1
18989: NEG
18990: PUSH
18991: LD_INT 2
18993: NEG
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: LD_INT 2
19004: NEG
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: LD_INT 1
19015: NEG
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: LD_INT 2
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 1
19073: NEG
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 2
19084: NEG
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 2
19095: NEG
19096: PUSH
19097: LD_INT 1
19099: NEG
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: NEG
19108: PUSH
19109: LD_INT 2
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19138: LD_ADDR_VAR 0 21
19142: PUSH
19143: LD_INT 0
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 0
19155: PUSH
19156: LD_INT 1
19158: NEG
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 1
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 1
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: NEG
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: NEG
19208: PUSH
19209: LD_INT 1
19211: NEG
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: LD_INT 2
19223: NEG
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: LD_INT 2
19234: NEG
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: LD_INT 1
19245: NEG
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 2
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 1
19303: NEG
19304: PUSH
19305: LD_INT 1
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 2
19314: NEG
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 2
19325: NEG
19326: PUSH
19327: LD_INT 1
19329: NEG
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 2
19337: NEG
19338: PUSH
19339: LD_INT 2
19341: NEG
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19368: LD_ADDR_VAR 0 22
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: LD_INT 0
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: LD_INT 1
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: LD_INT 0
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: NEG
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 2
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: LD_INT 2
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 2
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: NEG
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: NEG
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 2
19555: NEG
19556: PUSH
19557: LD_INT 1
19559: NEG
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: NEG
19568: PUSH
19569: LD_INT 2
19571: NEG
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19598: LD_ADDR_VAR 0 23
19602: PUSH
19603: LD_INT 0
19605: PUSH
19606: LD_INT 0
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 0
19615: PUSH
19616: LD_INT 1
19618: NEG
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 1
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: NEG
19657: PUSH
19658: LD_INT 0
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: NEG
19668: PUSH
19669: LD_INT 1
19671: NEG
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: LD_INT 2
19683: NEG
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 0
19691: PUSH
19692: LD_INT 2
19694: NEG
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 1
19702: PUSH
19703: LD_INT 1
19705: NEG
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 2
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: LD_INT 2
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: NEG
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: NEG
19775: PUSH
19776: LD_INT 0
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: NEG
19786: PUSH
19787: LD_INT 1
19789: NEG
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: NEG
19798: PUSH
19799: LD_INT 2
19801: NEG
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 2
19809: NEG
19810: PUSH
19811: LD_INT 3
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: LD_INT 3
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19878: LD_ADDR_VAR 0 24
19882: PUSH
19883: LD_INT 0
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 0
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: LD_INT 0
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 0
19926: PUSH
19927: LD_INT 1
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: LD_INT 1
19951: NEG
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 1
19959: NEG
19960: PUSH
19961: LD_INT 2
19963: NEG
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 0
19971: PUSH
19972: LD_INT 2
19974: NEG
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: LD_INT 1
19985: NEG
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 2
19993: PUSH
19994: LD_INT 0
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 0
20033: PUSH
20034: LD_INT 2
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: LD_INT 1
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 2
20054: NEG
20055: PUSH
20056: LD_INT 0
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 2
20065: NEG
20066: PUSH
20067: LD_INT 1
20069: NEG
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 2
20077: NEG
20078: PUSH
20079: LD_INT 2
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 2
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 3
20111: PUSH
20112: LD_INT 1
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 3
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20154: LD_ADDR_VAR 0 25
20158: PUSH
20159: LD_INT 0
20161: PUSH
20162: LD_INT 0
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 0
20171: PUSH
20172: LD_INT 1
20174: NEG
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: LD_INT 0
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: LD_INT 1
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: LD_INT 1
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: LD_INT 0
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 1
20223: NEG
20224: PUSH
20225: LD_INT 1
20227: NEG
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: NEG
20236: PUSH
20237: LD_INT 2
20239: NEG
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 0
20247: PUSH
20248: LD_INT 2
20250: NEG
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: LD_INT 1
20261: NEG
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 2
20269: PUSH
20270: LD_INT 0
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 2
20279: PUSH
20280: LD_INT 1
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 2
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: LD_INT 2
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 0
20309: PUSH
20310: LD_INT 2
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 1
20319: NEG
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 2
20330: NEG
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 2
20341: NEG
20342: PUSH
20343: LD_INT 1
20345: NEG
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: LD_INT 2
20357: NEG
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 3
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 3
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 2
20385: PUSH
20386: LD_INT 3
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 1
20395: PUSH
20396: LD_INT 3
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20428: LD_ADDR_VAR 0 26
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 0
20445: PUSH
20446: LD_INT 1
20448: NEG
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: LD_INT 0
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 0
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 1
20486: NEG
20487: PUSH
20488: LD_INT 0
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: LD_INT 1
20501: NEG
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: LD_INT 2
20513: NEG
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: LD_INT 2
20524: NEG
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 1
20532: PUSH
20533: LD_INT 1
20535: NEG
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 2
20543: PUSH
20544: LD_INT 0
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 2
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: LD_INT 2
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: LD_INT 2
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 0
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 2
20604: NEG
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 2
20615: NEG
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 2
20627: NEG
20628: PUSH
20629: LD_INT 2
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 3
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: LD_INT 3
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 1
20659: NEG
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 2
20670: NEG
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20704: LD_ADDR_VAR 0 27
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 0
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: PUSH
20733: LD_INT 0
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 0
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 1
20762: NEG
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 1
20773: NEG
20774: PUSH
20775: LD_INT 1
20777: NEG
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: LD_INT 2
20789: NEG
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: LD_INT 2
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: LD_INT 2
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: LD_INT 2
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: LD_INT 1
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 2
20880: NEG
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 2
20891: NEG
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 2
20903: NEG
20904: PUSH
20905: LD_INT 2
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: LD_INT 2
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 2
20926: NEG
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 3
20937: NEG
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 3
20949: NEG
20950: PUSH
20951: LD_INT 2
20953: NEG
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20984: LD_ADDR_VAR 0 28
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: NEG
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: NEG
21054: PUSH
21055: LD_INT 1
21057: NEG
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: LD_INT 2
21069: NEG
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: LD_INT 2
21080: NEG
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 1
21088: PUSH
21089: LD_INT 1
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 2
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: LD_INT 2
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 0
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 2
21160: NEG
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 2
21171: NEG
21172: PUSH
21173: LD_INT 1
21175: NEG
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 2
21183: NEG
21184: PUSH
21185: LD_INT 2
21187: NEG
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: NEG
21196: PUSH
21197: LD_INT 3
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: LD_INT 3
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 3
21219: NEG
21220: PUSH
21221: LD_INT 1
21223: NEG
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 3
21231: NEG
21232: PUSH
21233: LD_INT 2
21235: NEG
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21266: LD_ADDR_VAR 0 29
21270: PUSH
21271: LD_INT 0
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: NEG
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 1
21335: NEG
21336: PUSH
21337: LD_INT 1
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: LD_INT 2
21362: NEG
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 2
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 0
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 2
21432: NEG
21433: PUSH
21434: LD_INT 1
21436: NEG
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 2
21444: NEG
21445: PUSH
21446: LD_INT 2
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: NEG
21457: PUSH
21458: LD_INT 3
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 3
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: LD_INT 3
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: LD_INT 2
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 3
21510: NEG
21511: PUSH
21512: LD_INT 2
21514: NEG
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21545: LD_ADDR_VAR 0 30
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: NEG
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: NEG
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: LD_INT 1
21726: NEG
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: LD_INT 3
21738: NEG
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: LD_INT 2
21749: NEG
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 3
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 2
21767: PUSH
21768: LD_INT 3
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 2
21777: NEG
21778: PUSH
21779: LD_INT 1
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 3
21788: NEG
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21823: LD_ADDR_VAR 0 31
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: LD_INT 1
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: NEG
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: LD_INT 2
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: LD_INT 1
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 2
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 2
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: LD_INT 2
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 2
21988: NEG
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 2
22000: NEG
22001: PUSH
22002: LD_INT 2
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: LD_INT 3
22016: NEG
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 2
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 3
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: LD_INT 3
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 1
22055: NEG
22056: PUSH
22057: LD_INT 2
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 3
22066: NEG
22067: PUSH
22068: LD_INT 2
22070: NEG
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22101: LD_ADDR_VAR 0 32
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: LD_INT 0
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: LD_INT 1
22121: NEG
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: LD_INT 0
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 0
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: NEG
22160: PUSH
22161: LD_INT 0
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 1
22170: NEG
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: LD_INT 2
22186: NEG
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: LD_INT 2
22197: NEG
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: LD_INT 1
22208: NEG
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 2
22226: PUSH
22227: LD_INT 2
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: LD_INT 2
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 2
22267: NEG
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 2
22278: NEG
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: LD_INT 3
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: LD_INT 2
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 3
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: LD_INT 3
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 2
22333: NEG
22334: PUSH
22335: LD_INT 1
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 3
22344: NEG
22345: PUSH
22346: LD_INT 1
22348: NEG
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22379: LD_ADDR_VAR 0 33
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: LD_INT 0
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 1
22437: NEG
22438: PUSH
22439: LD_INT 0
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: NEG
22449: PUSH
22450: LD_INT 1
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 1
22460: NEG
22461: PUSH
22462: LD_INT 2
22464: NEG
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 1
22472: PUSH
22473: LD_INT 1
22475: NEG
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 2
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: PUSH
22504: LD_INT 2
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: LD_INT 2
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 2
22534: NEG
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 2
22545: NEG
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: LD_INT 2
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: NEG
22570: PUSH
22571: LD_INT 3
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 2
22581: PUSH
22582: LD_INT 1
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 3
22592: PUSH
22593: LD_INT 1
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: LD_INT 3
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: NEG
22613: PUSH
22614: LD_INT 2
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 3
22623: NEG
22624: PUSH
22625: LD_INT 2
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22658: LD_ADDR_VAR 0 34
22662: PUSH
22663: LD_INT 0
22665: PUSH
22666: LD_INT 0
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 0
22675: PUSH
22676: LD_INT 1
22678: NEG
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 1
22686: PUSH
22687: LD_INT 0
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 1
22727: NEG
22728: PUSH
22729: LD_INT 1
22731: NEG
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: LD_INT 2
22743: NEG
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 2
22754: NEG
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 1
22762: PUSH
22763: LD_INT 1
22765: NEG
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 2
22783: PUSH
22784: LD_INT 2
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: LD_INT 2
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: NEG
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 2
22814: NEG
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 2
22825: NEG
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 2
22837: NEG
22838: PUSH
22839: LD_INT 2
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: NEG
22850: PUSH
22851: LD_INT 3
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: LD_INT 2
22864: NEG
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 3
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: LD_INT 3
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 2
22892: NEG
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 3
22903: NEG
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22938: LD_ADDR_VAR 0 35
22942: PUSH
22943: LD_INT 0
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: LD_INT 0
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 0
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 1
23007: NEG
23008: PUSH
23009: LD_INT 1
23011: NEG
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 2
23029: NEG
23030: PUSH
23031: LD_INT 1
23033: NEG
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23050: LD_ADDR_VAR 0 36
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: LD_INT 0
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 0
23067: PUSH
23068: LD_INT 1
23070: NEG
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 0
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 1
23108: NEG
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 1
23119: NEG
23120: PUSH
23121: LD_INT 1
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 2
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23162: LD_ADDR_VAR 0 37
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: LD_INT 0
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: LD_INT 1
23182: NEG
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: LD_INT 0
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: LD_INT 0
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 1
23231: NEG
23232: PUSH
23233: LD_INT 1
23235: NEG
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: LD_INT 1
23246: NEG
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23274: LD_ADDR_VAR 0 38
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 1
23343: NEG
23344: PUSH
23345: LD_INT 1
23347: NEG
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 2
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: NEG
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23386: LD_ADDR_VAR 0 39
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: LD_INT 1
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: LD_INT 0
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 0
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: LD_INT 0
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: LD_INT 1
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: NEG
23468: PUSH
23469: LD_INT 2
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: LD_INT 2
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23498: LD_ADDR_VAR 0 40
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 0
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 1
23526: PUSH
23527: LD_INT 0
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: LD_INT 1
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 0
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: NEG
23557: PUSH
23558: LD_INT 0
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 1
23567: NEG
23568: PUSH
23569: LD_INT 1
23571: NEG
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: NEG
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23610: LD_ADDR_VAR 0 41
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: LD_INT 2
23695: NEG
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: LD_INT 1
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 2
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: NEG
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: NEG
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 2
23776: NEG
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 2
23788: NEG
23789: PUSH
23790: LD_INT 2
23792: NEG
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 2
23800: NEG
23801: PUSH
23802: LD_INT 3
23804: NEG
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 3
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 3
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 3
23843: PUSH
23844: LD_INT 2
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 3
23853: PUSH
23854: LD_INT 3
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: LD_INT 3
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 2
23873: NEG
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 3
23884: NEG
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 3
23895: NEG
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 3
23907: NEG
23908: PUSH
23909: LD_INT 2
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 3
23919: NEG
23920: PUSH
23921: LD_INT 3
23923: NEG
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23960: LD_ADDR_VAR 0 42
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 0
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: LD_INT 1
23980: NEG
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: LD_INT 0
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: LD_INT 1
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 1
24018: NEG
24019: PUSH
24020: LD_INT 0
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: NEG
24042: PUSH
24043: LD_INT 2
24045: NEG
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: LD_INT 1
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 2
24085: PUSH
24086: LD_INT 2
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: LD_INT 2
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 2
24126: NEG
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 2
24138: NEG
24139: PUSH
24140: LD_INT 2
24142: NEG
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 2
24150: NEG
24151: PUSH
24152: LD_INT 3
24154: NEG
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 1
24162: NEG
24163: PUSH
24164: LD_INT 3
24166: NEG
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: LD_INT 3
24177: NEG
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: LD_INT 2
24188: NEG
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 3
24196: PUSH
24197: LD_INT 2
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 3
24206: PUSH
24207: LD_INT 3
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 2
24216: PUSH
24217: LD_INT 3
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 1
24226: PUSH
24227: LD_INT 3
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: LD_INT 3
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 3
24257: NEG
24258: PUSH
24259: LD_INT 2
24261: NEG
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 3
24269: NEG
24270: PUSH
24271: LD_INT 3
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24310: LD_ADDR_VAR 0 43
24314: PUSH
24315: LD_INT 0
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: LD_INT 1
24330: NEG
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 0
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: NEG
24369: PUSH
24370: LD_INT 0
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: LD_INT 1
24383: NEG
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 1
24391: NEG
24392: PUSH
24393: LD_INT 2
24395: NEG
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: LD_INT 2
24406: NEG
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: LD_INT 1
24417: NEG
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 2
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 2
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 2
24476: NEG
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 2
24487: NEG
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 3
24503: NEG
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 3
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 2
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 1
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 3
24544: PUSH
24545: LD_INT 0
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 3
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 1
24564: PUSH
24565: LD_INT 3
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: LD_INT 3
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 2
24595: NEG
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 3
24606: NEG
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 3
24617: NEG
24618: PUSH
24619: LD_INT 1
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24658: LD_ADDR_VAR 0 44
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: LD_INT 1
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 0
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: NEG
24728: PUSH
24729: LD_INT 1
24731: NEG
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: NEG
24740: PUSH
24741: LD_INT 2
24743: NEG
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 2
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 2
24782: PUSH
24783: LD_INT 2
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: LD_INT 2
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 2
24813: NEG
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 2
24824: NEG
24825: PUSH
24826: LD_INT 1
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 2
24836: NEG
24837: PUSH
24838: LD_INT 2
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 2
24848: NEG
24849: PUSH
24850: LD_INT 3
24852: NEG
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 0
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 3
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 3
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 3
24901: PUSH
24902: LD_INT 3
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: LD_INT 3
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 2
24921: NEG
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 3
24932: NEG
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 3
24943: NEG
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 3
24955: NEG
24956: PUSH
24957: LD_INT 2
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 3
24967: NEG
24968: PUSH
24969: LD_INT 3
24971: NEG
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25008: LD_ADDR_VAR 0 45
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: LD_INT 1
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: LD_INT 0
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: LD_INT 2
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: LD_INT 2
25104: NEG
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: PUSH
25134: LD_INT 2
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: LD_INT 2
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 2
25174: NEG
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 2
25186: NEG
25187: PUSH
25188: LD_INT 2
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 2
25198: NEG
25199: PUSH
25200: LD_INT 3
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: LD_INT 3
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 3
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 2
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 3
25244: PUSH
25245: LD_INT 2
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 3
25254: PUSH
25255: LD_INT 3
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: LD_INT 3
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: LD_INT 3
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 3
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: LD_INT 2
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 3
25305: NEG
25306: PUSH
25307: LD_INT 2
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 3
25317: NEG
25318: PUSH
25319: LD_INT 3
25321: NEG
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25358: LD_ADDR_VAR 0 46
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 0
25406: PUSH
25407: LD_INT 1
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: LD_INT 1
25431: NEG
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: LD_INT 2
25443: NEG
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: LD_INT 2
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 1
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 2
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: LD_INT 2
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 1
25513: NEG
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: NEG
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 2
25535: NEG
25536: PUSH
25537: LD_INT 1
25539: NEG
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: LD_INT 3
25551: NEG
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: LD_INT 3
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: LD_INT 2
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 3
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 3
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: LD_INT 3
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: LD_INT 3
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: NEG
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 2
25643: NEG
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 3
25654: NEG
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 3
25665: NEG
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25706: LD_ADDR_VAR 0 47
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: PUSH
25789: LD_INT 2
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: NEG
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: LD_INT 2
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25857: LD_ADDR_VAR 0 48
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: NEG
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: LD_INT 2
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: LD_INT 1
25964: NEG
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26004: LD_ADDR_VAR 0 49
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 1
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: LD_INT 1
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 2
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 2
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: LD_INT 2
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: LD_INT 2
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26148: LD_ADDR_VAR 0 50
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: LD_INT 1
26168: NEG
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 2
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 0
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26292: LD_ADDR_VAR 0 51
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 1
26361: NEG
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 2
26415: NEG
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26439: LD_ADDR_VAR 0 52
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: LD_INT 1
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: NEG
26509: PUSH
26510: LD_INT 1
26512: NEG
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: LD_INT 2
26524: NEG
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: NEG
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: NEG
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 2
26554: NEG
26555: PUSH
26556: LD_INT 1
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 2
26566: NEG
26567: PUSH
26568: LD_INT 2
26570: NEG
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26590: LD_ADDR_VAR 0 53
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: LD_INT 2
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: LD_INT 2
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: LD_INT 2
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: LD_INT 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: LD_INT 2
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: NEG
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 2
26777: NEG
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 2
26789: NEG
26790: PUSH
26791: LD_INT 2
26793: NEG
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26820: LD_ADDR_VAR 0 54
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 2
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: LD_INT 2
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: NEG
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: NEG
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 2
27019: NEG
27020: PUSH
27021: LD_INT 2
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27050: LD_ADDR_VAR 0 55
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: LD_INT 2
27135: NEG
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: LD_INT 2
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 2
27226: NEG
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: NEG
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 2
27249: NEG
27250: PUSH
27251: LD_INT 2
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27280: LD_ADDR_VAR 0 56
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: LD_INT 2
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: LD_INT 2
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: NEG
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27510: LD_ADDR_VAR 0 57
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: LD_INT 1
27530: NEG
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: LD_INT 2
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: LD_INT 2
27606: NEG
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: LD_INT 0
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: NEG
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: NEG
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27740: LD_ADDR_VAR 0 58
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 0
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: LD_INT 2
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: NEG
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: NEG
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27970: LD_ADDR_VAR 0 59
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 0
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28058: LD_ADDR_VAR 0 60
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: NEG
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28146: LD_ADDR_VAR 0 61
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 1
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28234: LD_ADDR_VAR 0 62
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28322: LD_ADDR_VAR 0 63
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28410: LD_ADDR_VAR 0 64
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: LD_INT 0
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: ST_TO_ADDR
// end ; 1 :
28498: GO 34395
28500: LD_INT 1
28502: DOUBLE
28503: EQUAL
28504: IFTRUE 28508
28506: GO 31131
28508: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28509: LD_ADDR_VAR 0 11
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: LD_INT 3
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: LD_INT 3
28531: NEG
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: LD_INT 2
28542: NEG
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: LIST
28552: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28553: LD_ADDR_VAR 0 12
28557: PUSH
28558: LD_INT 2
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 3
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 3
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28594: LD_ADDR_VAR 0 13
28598: PUSH
28599: LD_INT 3
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 3
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 2
28621: PUSH
28622: LD_INT 3
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: LIST
28633: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28634: LD_ADDR_VAR 0 14
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: LD_INT 3
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: LD_INT 3
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: LIST
28674: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28675: LD_ADDR_VAR 0 15
28679: PUSH
28680: LD_INT 2
28682: NEG
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 3
28693: NEG
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 3
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28719: LD_ADDR_VAR 0 16
28723: PUSH
28724: LD_INT 2
28726: NEG
28727: PUSH
28728: LD_INT 3
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 3
28738: NEG
28739: PUSH
28740: LD_INT 2
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 3
28750: NEG
28751: PUSH
28752: LD_INT 3
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28765: LD_ADDR_VAR 0 17
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: LD_INT 3
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: LD_INT 3
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: LD_INT 2
28798: NEG
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: LIST
28808: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28809: LD_ADDR_VAR 0 18
28813: PUSH
28814: LD_INT 2
28816: PUSH
28817: LD_INT 1
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 3
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28850: LD_ADDR_VAR 0 19
28854: PUSH
28855: LD_INT 3
28857: PUSH
28858: LD_INT 2
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 3
28867: PUSH
28868: LD_INT 3
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: LD_INT 3
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28890: LD_ADDR_VAR 0 20
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: LD_INT 3
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: LD_INT 3
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: LD_INT 2
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: LIST
28930: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28931: LD_ADDR_VAR 0 21
28935: PUSH
28936: LD_INT 2
28938: NEG
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 3
28949: NEG
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 3
28960: NEG
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: LIST
28974: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28975: LD_ADDR_VAR 0 22
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: LD_INT 3
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 3
28994: NEG
28995: PUSH
28996: LD_INT 2
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 3
29006: NEG
29007: PUSH
29008: LD_INT 3
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29021: LD_ADDR_VAR 0 23
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: LD_INT 3
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: LD_INT 4
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: LD_INT 3
29054: NEG
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: LIST
29064: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29065: LD_ADDR_VAR 0 24
29069: PUSH
29070: LD_INT 3
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 4
29093: PUSH
29094: LD_INT 1
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29106: LD_ADDR_VAR 0 25
29110: PUSH
29111: LD_INT 3
29113: PUSH
29114: LD_INT 3
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 4
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 3
29133: PUSH
29134: LD_INT 4
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29146: LD_ADDR_VAR 0 26
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 3
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 4
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: LD_INT 3
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: LIST
29186: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29187: LD_ADDR_VAR 0 27
29191: PUSH
29192: LD_INT 3
29194: NEG
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: NEG
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 4
29216: NEG
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: LIST
29230: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29231: LD_ADDR_VAR 0 28
29235: PUSH
29236: LD_INT 3
29238: NEG
29239: PUSH
29240: LD_INT 3
29242: NEG
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 3
29250: NEG
29251: PUSH
29252: LD_INT 4
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 4
29262: NEG
29263: PUSH
29264: LD_INT 3
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: LIST
29276: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29277: LD_ADDR_VAR 0 29
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 3
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: LD_INT 3
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: LD_INT 2
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: LD_INT 4
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: LD_INT 4
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: LD_INT 3
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: LD_INT 5
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: LD_INT 5
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: LD_INT 4
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: LD_INT 6
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 6
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 5
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29432: LD_ADDR_VAR 0 30
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: LD_INT 1
29442: NEG
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 3
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 3
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 4
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 4
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 4
29501: PUSH
29502: LD_INT 1
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 5
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 5
29522: PUSH
29523: LD_INT 1
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 5
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 6
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 6
29553: PUSH
29554: LD_INT 1
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29575: LD_ADDR_VAR 0 31
29579: PUSH
29580: LD_INT 3
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 3
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 2
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 4
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 4
29622: PUSH
29623: LD_INT 4
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 3
29632: PUSH
29633: LD_INT 4
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 5
29642: PUSH
29643: LD_INT 4
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 5
29652: PUSH
29653: LD_INT 5
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 4
29662: PUSH
29663: LD_INT 5
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 6
29672: PUSH
29673: LD_INT 5
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 6
29682: PUSH
29683: LD_INT 6
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 5
29692: PUSH
29693: LD_INT 6
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29714: LD_ADDR_VAR 0 32
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: LD_INT 3
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: LD_INT 3
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: LD_INT 4
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: LD_INT 4
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: LD_INT 3
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: LD_INT 5
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: LD_INT 5
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: LD_INT 4
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 6
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: LD_INT 6
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: LD_INT 5
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29857: LD_ADDR_VAR 0 33
29861: PUSH
29862: LD_INT 2
29864: NEG
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 3
29875: NEG
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 3
29886: NEG
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 3
29898: NEG
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 4
29909: NEG
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 4
29920: NEG
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 4
29932: NEG
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 5
29943: NEG
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 5
29954: NEG
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 5
29966: NEG
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 6
29977: NEG
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 6
29988: NEG
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30012: LD_ADDR_VAR 0 34
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: LD_INT 3
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 3
30031: NEG
30032: PUSH
30033: LD_INT 2
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 3
30043: NEG
30044: PUSH
30045: LD_INT 3
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 3
30055: NEG
30056: PUSH
30057: LD_INT 4
30059: NEG
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 4
30067: NEG
30068: PUSH
30069: LD_INT 3
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 4
30079: NEG
30080: PUSH
30081: LD_INT 4
30083: NEG
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 4
30091: NEG
30092: PUSH
30093: LD_INT 5
30095: NEG
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 5
30103: NEG
30104: PUSH
30105: LD_INT 4
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 5
30115: NEG
30116: PUSH
30117: LD_INT 5
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 5
30127: NEG
30128: PUSH
30129: LD_INT 6
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 6
30139: NEG
30140: PUSH
30141: LD_INT 5
30143: NEG
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 6
30151: NEG
30152: PUSH
30153: LD_INT 6
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30175: LD_ADDR_VAR 0 41
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: LD_INT 2
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: LD_INT 3
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: PUSH
30206: LD_INT 2
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30219: LD_ADDR_VAR 0 42
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 2
30236: PUSH
30237: LD_INT 1
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30260: LD_ADDR_VAR 0 43
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 3
30277: PUSH
30278: LD_INT 2
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: PUSH
30288: LD_INT 3
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: LIST
30299: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30300: LD_ADDR_VAR 0 44
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: LD_INT 3
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30341: LD_ADDR_VAR 0 45
30345: PUSH
30346: LD_INT 2
30348: NEG
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: NEG
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 3
30370: NEG
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30385: LD_ADDR_VAR 0 46
30389: PUSH
30390: LD_INT 2
30392: NEG
30393: PUSH
30394: LD_INT 2
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 2
30404: NEG
30405: PUSH
30406: LD_INT 3
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 3
30416: NEG
30417: PUSH
30418: LD_INT 2
30420: NEG
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30431: LD_ADDR_VAR 0 47
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: LD_INT 3
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: LD_INT 3
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30464: LD_ADDR_VAR 0 48
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: LD_INT 2
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30495: LD_ADDR_VAR 0 49
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: LD_INT 2
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30524: LD_ADDR_VAR 0 50
30528: PUSH
30529: LD_INT 2
30531: PUSH
30532: LD_INT 3
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 1
30541: PUSH
30542: LD_INT 3
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30553: LD_ADDR_VAR 0 51
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 2
30571: NEG
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30584: LD_ADDR_VAR 0 52
30588: PUSH
30589: LD_INT 3
30591: NEG
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 3
30603: NEG
30604: PUSH
30605: LD_INT 2
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30617: LD_ADDR_VAR 0 53
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: LD_INT 3
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: LD_INT 3
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 2
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30661: LD_ADDR_VAR 0 54
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 3
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 3
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30702: LD_ADDR_VAR 0 55
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: LD_INT 2
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: LD_INT 3
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: LD_INT 3
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30742: LD_ADDR_VAR 0 56
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 3
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: LIST
30782: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30783: LD_ADDR_VAR 0 57
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: NEG
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 3
30812: NEG
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30827: LD_ADDR_VAR 0 58
30831: PUSH
30832: LD_INT 2
30834: NEG
30835: PUSH
30836: LD_INT 3
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 3
30846: NEG
30847: PUSH
30848: LD_INT 2
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 3
30858: NEG
30859: PUSH
30860: LD_INT 3
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30873: LD_ADDR_VAR 0 59
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: LD_INT 2
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: LIST
30916: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30917: LD_ADDR_VAR 0 60
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 2
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 2
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: LIST
30957: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30958: LD_ADDR_VAR 0 61
30962: PUSH
30963: LD_INT 2
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 1
30985: PUSH
30986: LD_INT 2
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30998: LD_ADDR_VAR 0 62
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: LD_INT 2
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31039: LD_ADDR_VAR 0 63
31043: PUSH
31044: LD_INT 1
31046: NEG
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 2
31068: NEG
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31083: LD_ADDR_VAR 0 64
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: LD_INT 2
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 2
31102: NEG
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: NEG
31115: PUSH
31116: LD_INT 2
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: LIST
31128: ST_TO_ADDR
// end ; 2 :
31129: GO 34395
31131: LD_INT 2
31133: DOUBLE
31134: EQUAL
31135: IFTRUE 31139
31137: GO 34394
31139: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31140: LD_ADDR_VAR 0 29
31144: PUSH
31145: LD_INT 4
31147: PUSH
31148: LD_INT 0
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 4
31157: PUSH
31158: LD_INT 1
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 5
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 5
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 4
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 5
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 3
31240: PUSH
31241: LD_INT 3
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 3
31250: PUSH
31251: LD_INT 2
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 4
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 4
31270: PUSH
31271: LD_INT 4
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: LD_INT 4
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: LD_INT 3
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 4
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 4
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 4
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 3
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: LD_INT 4
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 1
31360: PUSH
31361: LD_INT 5
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: LD_INT 5
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: LD_INT 4
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: LD_INT 3
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: LD_INT 5
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 2
31412: NEG
31413: PUSH
31414: LD_INT 3
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 3
31434: NEG
31435: PUSH
31436: LD_INT 1
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 3
31468: NEG
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 4
31479: NEG
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 4
31490: NEG
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 4
31502: NEG
31503: PUSH
31504: LD_INT 2
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: NEG
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 4
31525: NEG
31526: PUSH
31527: LD_INT 4
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 4
31537: NEG
31538: PUSH
31539: LD_INT 5
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 3
31549: NEG
31550: PUSH
31551: LD_INT 4
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 3
31561: NEG
31562: PUSH
31563: LD_INT 3
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 4
31573: NEG
31574: PUSH
31575: LD_INT 3
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 5
31585: NEG
31586: PUSH
31587: LD_INT 4
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 5
31597: NEG
31598: PUSH
31599: LD_INT 5
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: NEG
31610: PUSH
31611: LD_INT 5
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 5
31621: NEG
31622: PUSH
31623: LD_INT 3
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31678: LD_ADDR_VAR 0 30
31682: PUSH
31683: LD_INT 4
31685: PUSH
31686: LD_INT 4
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 4
31695: PUSH
31696: LD_INT 3
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 5
31705: PUSH
31706: LD_INT 4
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 5
31715: PUSH
31716: LD_INT 5
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 4
31725: PUSH
31726: LD_INT 5
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: LD_INT 4
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 5
31755: PUSH
31756: LD_INT 3
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 3
31765: PUSH
31766: LD_INT 5
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: LD_INT 3
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: LD_INT 2
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: LD_INT 3
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: LD_INT 4
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: LD_INT 4
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 4
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 4
31868: NEG
31869: PUSH
31870: LD_INT 0
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 4
31879: NEG
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 3
31902: NEG
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 4
31913: NEG
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 5
31924: NEG
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 5
31935: NEG
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 5
31947: NEG
31948: PUSH
31949: LD_INT 2
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 3
31959: NEG
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 3
31970: NEG
31971: PUSH
31972: LD_INT 3
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 3
31982: NEG
31983: PUSH
31984: LD_INT 4
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 3
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: LD_INT 2
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 3
32018: NEG
32019: PUSH
32020: LD_INT 2
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 4
32030: NEG
32031: PUSH
32032: LD_INT 3
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 4
32042: NEG
32043: PUSH
32044: LD_INT 4
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: LD_INT 4
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 4
32066: NEG
32067: PUSH
32068: LD_INT 2
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: LD_INT 4
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 5
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 4
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: LD_INT 3
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 0
32122: PUSH
32123: LD_INT 3
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 4
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 5
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: LD_INT 3
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: LD_INT 5
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32225: LD_ADDR_VAR 0 31
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 4
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 5
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: LD_INT 5
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: LD_INT 4
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: LD_INT 3
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: LD_INT 5
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 3
32325: NEG
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 3
32336: NEG
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: NEG
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: NEG
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 3
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 4
32381: NEG
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 4
32392: NEG
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 4
32404: NEG
32405: PUSH
32406: LD_INT 2
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 2
32416: NEG
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 4
32427: NEG
32428: PUSH
32429: LD_INT 4
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 4
32439: NEG
32440: PUSH
32441: LD_INT 5
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 3
32451: NEG
32452: PUSH
32453: LD_INT 4
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 3
32463: NEG
32464: PUSH
32465: LD_INT 3
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 4
32475: NEG
32476: PUSH
32477: LD_INT 3
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 5
32487: NEG
32488: PUSH
32489: LD_INT 4
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 5
32499: NEG
32500: PUSH
32501: LD_INT 5
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 3
32511: NEG
32512: PUSH
32513: LD_INT 5
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 5
32523: NEG
32524: PUSH
32525: LD_INT 3
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: LD_INT 3
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: LD_INT 4
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: LD_INT 3
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 1
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: LD_INT 2
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 3
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 4
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 2
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: LD_INT 4
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 4
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 4
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 5
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 5
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 4
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 3
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 3
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 3
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 5
32720: PUSH
32721: LD_INT 2
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32775: LD_ADDR_VAR 0 32
32779: PUSH
32780: LD_INT 4
32782: NEG
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 4
32793: NEG
32794: PUSH
32795: LD_INT 1
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 3
32805: NEG
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 3
32816: NEG
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 4
32827: NEG
32828: PUSH
32829: LD_INT 1
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 5
32838: NEG
32839: PUSH
32840: LD_INT 0
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 5
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 5
32861: NEG
32862: PUSH
32863: LD_INT 2
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 3
32873: NEG
32874: PUSH
32875: LD_INT 2
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 3
32884: NEG
32885: PUSH
32886: LD_INT 3
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 3
32896: NEG
32897: PUSH
32898: LD_INT 4
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: LD_INT 3
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: NEG
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 3
32932: NEG
32933: PUSH
32934: LD_INT 2
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 4
32944: NEG
32945: PUSH
32946: LD_INT 3
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: NEG
32957: PUSH
32958: LD_INT 4
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: LD_INT 4
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 4
32980: NEG
32981: PUSH
32982: LD_INT 2
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 4
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 5
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: LD_INT 4
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: LD_INT 3
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 3
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 4
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: LD_INT 5
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 2
33071: PUSH
33072: LD_INT 3
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: NEG
33083: PUSH
33084: LD_INT 5
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 3
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 4
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 4
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 2
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 2
33155: PUSH
33156: LD_INT 1
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 4
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 4
33187: PUSH
33188: LD_INT 4
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 4
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 5
33207: PUSH
33208: LD_INT 4
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 5
33217: PUSH
33218: LD_INT 5
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 4
33227: PUSH
33228: LD_INT 5
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 3
33237: PUSH
33238: LD_INT 4
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 3
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 5
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: LD_INT 5
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33322: LD_ADDR_VAR 0 33
33326: PUSH
33327: LD_INT 4
33329: NEG
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 4
33341: NEG
33342: PUSH
33343: LD_INT 5
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 3
33353: NEG
33354: PUSH
33355: LD_INT 4
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 3
33365: NEG
33366: PUSH
33367: LD_INT 3
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 4
33377: NEG
33378: PUSH
33379: LD_INT 3
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 5
33389: NEG
33390: PUSH
33391: LD_INT 4
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 5
33401: NEG
33402: PUSH
33403: LD_INT 5
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: LD_INT 5
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 5
33425: NEG
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: LD_INT 4
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: LD_INT 3
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: LD_INT 2
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: LD_INT 2
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: LD_INT 3
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: LD_INT 4
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 2
33516: PUSH
33517: LD_INT 2
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: LD_INT 4
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 4
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 4
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 5
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 5
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 4
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 3
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 3
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 3
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 5
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 3
33632: PUSH
33633: LD_INT 3
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 3
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 4
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 4
33662: PUSH
33663: LD_INT 4
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 3
33672: PUSH
33673: LD_INT 4
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 2
33682: PUSH
33683: LD_INT 3
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 4
33702: PUSH
33703: LD_INT 2
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: LD_INT 4
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: LD_INT 4
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: LD_INT 3
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: PUSH
33743: LD_INT 4
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: LD_INT 5
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: LD_INT 5
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: PUSH
33774: LD_INT 4
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: LD_INT 3
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 5
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: LD_INT 3
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33860: LD_ADDR_VAR 0 34
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 4
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 5
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: LD_INT 4
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: LD_INT 3
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 3
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: LD_INT 4
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: LD_INT 5
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: LD_INT 3
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: LD_INT 5
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 3
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 3
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 4
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 4
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: LD_INT 2
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 4
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 4
34062: PUSH
34063: LD_INT 4
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 4
34072: PUSH
34073: LD_INT 3
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 5
34082: PUSH
34083: LD_INT 4
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 5
34092: PUSH
34093: LD_INT 5
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 4
34102: PUSH
34103: LD_INT 5
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 3
34112: PUSH
34113: LD_INT 4
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 3
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 5
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: LD_INT 5
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: LD_INT 2
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 4
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: LD_INT 4
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: LD_INT 3
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: LD_INT 2
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 4
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 2
34234: NEG
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 4
34245: NEG
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 4
34256: NEG
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 3
34268: NEG
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 3
34279: NEG
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 4
34290: NEG
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 5
34301: NEG
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 5
34312: NEG
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 5
34324: NEG
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 3
34336: NEG
34337: PUSH
34338: LD_INT 2
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: ST_TO_ADDR
// end ; end ;
34392: GO 34395
34394: POP
// case btype of b_depot , b_warehouse :
34395: LD_VAR 0 1
34399: PUSH
34400: LD_INT 0
34402: DOUBLE
34403: EQUAL
34404: IFTRUE 34414
34406: LD_INT 1
34408: DOUBLE
34409: EQUAL
34410: IFTRUE 34414
34412: GO 34615
34414: POP
// case nation of nation_american :
34415: LD_VAR 0 5
34419: PUSH
34420: LD_INT 1
34422: DOUBLE
34423: EQUAL
34424: IFTRUE 34428
34426: GO 34484
34428: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34429: LD_ADDR_VAR 0 9
34433: PUSH
34434: LD_VAR 0 11
34438: PUSH
34439: LD_VAR 0 12
34443: PUSH
34444: LD_VAR 0 13
34448: PUSH
34449: LD_VAR 0 14
34453: PUSH
34454: LD_VAR 0 15
34458: PUSH
34459: LD_VAR 0 16
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: PUSH
34472: LD_VAR 0 4
34476: PUSH
34477: LD_INT 1
34479: PLUS
34480: ARRAY
34481: ST_TO_ADDR
34482: GO 34613
34484: LD_INT 2
34486: DOUBLE
34487: EQUAL
34488: IFTRUE 34492
34490: GO 34548
34492: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34493: LD_ADDR_VAR 0 9
34497: PUSH
34498: LD_VAR 0 17
34502: PUSH
34503: LD_VAR 0 18
34507: PUSH
34508: LD_VAR 0 19
34512: PUSH
34513: LD_VAR 0 20
34517: PUSH
34518: LD_VAR 0 21
34522: PUSH
34523: LD_VAR 0 22
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: PUSH
34536: LD_VAR 0 4
34540: PUSH
34541: LD_INT 1
34543: PLUS
34544: ARRAY
34545: ST_TO_ADDR
34546: GO 34613
34548: LD_INT 3
34550: DOUBLE
34551: EQUAL
34552: IFTRUE 34556
34554: GO 34612
34556: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34557: LD_ADDR_VAR 0 9
34561: PUSH
34562: LD_VAR 0 23
34566: PUSH
34567: LD_VAR 0 24
34571: PUSH
34572: LD_VAR 0 25
34576: PUSH
34577: LD_VAR 0 26
34581: PUSH
34582: LD_VAR 0 27
34586: PUSH
34587: LD_VAR 0 28
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: PUSH
34600: LD_VAR 0 4
34604: PUSH
34605: LD_INT 1
34607: PLUS
34608: ARRAY
34609: ST_TO_ADDR
34610: GO 34613
34612: POP
34613: GO 35168
34615: LD_INT 2
34617: DOUBLE
34618: EQUAL
34619: IFTRUE 34629
34621: LD_INT 3
34623: DOUBLE
34624: EQUAL
34625: IFTRUE 34629
34627: GO 34685
34629: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34630: LD_ADDR_VAR 0 9
34634: PUSH
34635: LD_VAR 0 29
34639: PUSH
34640: LD_VAR 0 30
34644: PUSH
34645: LD_VAR 0 31
34649: PUSH
34650: LD_VAR 0 32
34654: PUSH
34655: LD_VAR 0 33
34659: PUSH
34660: LD_VAR 0 34
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: PUSH
34673: LD_VAR 0 4
34677: PUSH
34678: LD_INT 1
34680: PLUS
34681: ARRAY
34682: ST_TO_ADDR
34683: GO 35168
34685: LD_INT 16
34687: DOUBLE
34688: EQUAL
34689: IFTRUE 34747
34691: LD_INT 17
34693: DOUBLE
34694: EQUAL
34695: IFTRUE 34747
34697: LD_INT 18
34699: DOUBLE
34700: EQUAL
34701: IFTRUE 34747
34703: LD_INT 19
34705: DOUBLE
34706: EQUAL
34707: IFTRUE 34747
34709: LD_INT 22
34711: DOUBLE
34712: EQUAL
34713: IFTRUE 34747
34715: LD_INT 20
34717: DOUBLE
34718: EQUAL
34719: IFTRUE 34747
34721: LD_INT 21
34723: DOUBLE
34724: EQUAL
34725: IFTRUE 34747
34727: LD_INT 23
34729: DOUBLE
34730: EQUAL
34731: IFTRUE 34747
34733: LD_INT 24
34735: DOUBLE
34736: EQUAL
34737: IFTRUE 34747
34739: LD_INT 25
34741: DOUBLE
34742: EQUAL
34743: IFTRUE 34747
34745: GO 34803
34747: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34748: LD_ADDR_VAR 0 9
34752: PUSH
34753: LD_VAR 0 35
34757: PUSH
34758: LD_VAR 0 36
34762: PUSH
34763: LD_VAR 0 37
34767: PUSH
34768: LD_VAR 0 38
34772: PUSH
34773: LD_VAR 0 39
34777: PUSH
34778: LD_VAR 0 40
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: PUSH
34791: LD_VAR 0 4
34795: PUSH
34796: LD_INT 1
34798: PLUS
34799: ARRAY
34800: ST_TO_ADDR
34801: GO 35168
34803: LD_INT 6
34805: DOUBLE
34806: EQUAL
34807: IFTRUE 34859
34809: LD_INT 7
34811: DOUBLE
34812: EQUAL
34813: IFTRUE 34859
34815: LD_INT 8
34817: DOUBLE
34818: EQUAL
34819: IFTRUE 34859
34821: LD_INT 13
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34859
34827: LD_INT 12
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34859
34833: LD_INT 15
34835: DOUBLE
34836: EQUAL
34837: IFTRUE 34859
34839: LD_INT 11
34841: DOUBLE
34842: EQUAL
34843: IFTRUE 34859
34845: LD_INT 14
34847: DOUBLE
34848: EQUAL
34849: IFTRUE 34859
34851: LD_INT 10
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 34915
34859: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34860: LD_ADDR_VAR 0 9
34864: PUSH
34865: LD_VAR 0 41
34869: PUSH
34870: LD_VAR 0 42
34874: PUSH
34875: LD_VAR 0 43
34879: PUSH
34880: LD_VAR 0 44
34884: PUSH
34885: LD_VAR 0 45
34889: PUSH
34890: LD_VAR 0 46
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: PUSH
34903: LD_VAR 0 4
34907: PUSH
34908: LD_INT 1
34910: PLUS
34911: ARRAY
34912: ST_TO_ADDR
34913: GO 35168
34915: LD_INT 36
34917: DOUBLE
34918: EQUAL
34919: IFTRUE 34923
34921: GO 34979
34923: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34924: LD_ADDR_VAR 0 9
34928: PUSH
34929: LD_VAR 0 47
34933: PUSH
34934: LD_VAR 0 48
34938: PUSH
34939: LD_VAR 0 49
34943: PUSH
34944: LD_VAR 0 50
34948: PUSH
34949: LD_VAR 0 51
34953: PUSH
34954: LD_VAR 0 52
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: PUSH
34967: LD_VAR 0 4
34971: PUSH
34972: LD_INT 1
34974: PLUS
34975: ARRAY
34976: ST_TO_ADDR
34977: GO 35168
34979: LD_INT 4
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 35005
34985: LD_INT 5
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 35005
34991: LD_INT 34
34993: DOUBLE
34994: EQUAL
34995: IFTRUE 35005
34997: LD_INT 37
34999: DOUBLE
35000: EQUAL
35001: IFTRUE 35005
35003: GO 35061
35005: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35006: LD_ADDR_VAR 0 9
35010: PUSH
35011: LD_VAR 0 53
35015: PUSH
35016: LD_VAR 0 54
35020: PUSH
35021: LD_VAR 0 55
35025: PUSH
35026: LD_VAR 0 56
35030: PUSH
35031: LD_VAR 0 57
35035: PUSH
35036: LD_VAR 0 58
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: PUSH
35049: LD_VAR 0 4
35053: PUSH
35054: LD_INT 1
35056: PLUS
35057: ARRAY
35058: ST_TO_ADDR
35059: GO 35168
35061: LD_INT 31
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35111
35067: LD_INT 32
35069: DOUBLE
35070: EQUAL
35071: IFTRUE 35111
35073: LD_INT 33
35075: DOUBLE
35076: EQUAL
35077: IFTRUE 35111
35079: LD_INT 27
35081: DOUBLE
35082: EQUAL
35083: IFTRUE 35111
35085: LD_INT 26
35087: DOUBLE
35088: EQUAL
35089: IFTRUE 35111
35091: LD_INT 28
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35111
35097: LD_INT 29
35099: DOUBLE
35100: EQUAL
35101: IFTRUE 35111
35103: LD_INT 30
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35111
35109: GO 35167
35111: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35112: LD_ADDR_VAR 0 9
35116: PUSH
35117: LD_VAR 0 59
35121: PUSH
35122: LD_VAR 0 60
35126: PUSH
35127: LD_VAR 0 61
35131: PUSH
35132: LD_VAR 0 62
35136: PUSH
35137: LD_VAR 0 63
35141: PUSH
35142: LD_VAR 0 64
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: PUSH
35155: LD_VAR 0 4
35159: PUSH
35160: LD_INT 1
35162: PLUS
35163: ARRAY
35164: ST_TO_ADDR
35165: GO 35168
35167: POP
// temp_list2 = [ ] ;
35168: LD_ADDR_VAR 0 10
35172: PUSH
35173: EMPTY
35174: ST_TO_ADDR
// for i in temp_list do
35175: LD_ADDR_VAR 0 8
35179: PUSH
35180: LD_VAR 0 9
35184: PUSH
35185: FOR_IN
35186: IFFALSE 35238
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35188: LD_ADDR_VAR 0 10
35192: PUSH
35193: LD_VAR 0 10
35197: PUSH
35198: LD_VAR 0 8
35202: PUSH
35203: LD_INT 1
35205: ARRAY
35206: PUSH
35207: LD_VAR 0 2
35211: PLUS
35212: PUSH
35213: LD_VAR 0 8
35217: PUSH
35218: LD_INT 2
35220: ARRAY
35221: PUSH
35222: LD_VAR 0 3
35226: PLUS
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: EMPTY
35233: LIST
35234: ADD
35235: ST_TO_ADDR
35236: GO 35185
35238: POP
35239: POP
// result = temp_list2 ;
35240: LD_ADDR_VAR 0 7
35244: PUSH
35245: LD_VAR 0 10
35249: ST_TO_ADDR
// end ;
35250: LD_VAR 0 7
35254: RET
// export function EnemyInRange ( unit , dist ) ; begin
35255: LD_INT 0
35257: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35258: LD_ADDR_VAR 0 3
35262: PUSH
35263: LD_VAR 0 1
35267: PPUSH
35268: CALL_OW 255
35272: PPUSH
35273: LD_VAR 0 1
35277: PPUSH
35278: CALL_OW 250
35282: PPUSH
35283: LD_VAR 0 1
35287: PPUSH
35288: CALL_OW 251
35292: PPUSH
35293: LD_VAR 0 2
35297: PPUSH
35298: CALL 8628 0 4
35302: PUSH
35303: LD_INT 4
35305: ARRAY
35306: ST_TO_ADDR
// end ;
35307: LD_VAR 0 3
35311: RET
// export function PlayerSeeMe ( unit ) ; begin
35312: LD_INT 0
35314: PPUSH
// result := See ( your_side , unit ) ;
35315: LD_ADDR_VAR 0 2
35319: PUSH
35320: LD_OWVAR 2
35324: PPUSH
35325: LD_VAR 0 1
35329: PPUSH
35330: CALL_OW 292
35334: ST_TO_ADDR
// end ;
35335: LD_VAR 0 2
35339: RET
// export function ReverseDir ( unit ) ; begin
35340: LD_INT 0
35342: PPUSH
// if not unit then
35343: LD_VAR 0 1
35347: NOT
35348: IFFALSE 35352
// exit ;
35350: GO 35375
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35352: LD_ADDR_VAR 0 2
35356: PUSH
35357: LD_VAR 0 1
35361: PPUSH
35362: CALL_OW 254
35366: PUSH
35367: LD_INT 3
35369: PLUS
35370: PUSH
35371: LD_INT 6
35373: MOD
35374: ST_TO_ADDR
// end ;
35375: LD_VAR 0 2
35379: RET
// export function ReverseArray ( array ) ; var i ; begin
35380: LD_INT 0
35382: PPUSH
35383: PPUSH
// if not array then
35384: LD_VAR 0 1
35388: NOT
35389: IFFALSE 35393
// exit ;
35391: GO 35448
// result := [ ] ;
35393: LD_ADDR_VAR 0 2
35397: PUSH
35398: EMPTY
35399: ST_TO_ADDR
// for i := array downto 1 do
35400: LD_ADDR_VAR 0 3
35404: PUSH
35405: DOUBLE
35406: LD_VAR 0 1
35410: INC
35411: ST_TO_ADDR
35412: LD_INT 1
35414: PUSH
35415: FOR_DOWNTO
35416: IFFALSE 35446
// result := Join ( result , array [ i ] ) ;
35418: LD_ADDR_VAR 0 2
35422: PUSH
35423: LD_VAR 0 2
35427: PPUSH
35428: LD_VAR 0 1
35432: PUSH
35433: LD_VAR 0 3
35437: ARRAY
35438: PPUSH
35439: CALL 40091 0 2
35443: ST_TO_ADDR
35444: GO 35415
35446: POP
35447: POP
// end ;
35448: LD_VAR 0 2
35452: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35453: LD_INT 0
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
35460: PPUSH
// if not unit or not hexes then
35461: LD_VAR 0 1
35465: NOT
35466: PUSH
35467: LD_VAR 0 2
35471: NOT
35472: OR
35473: IFFALSE 35477
// exit ;
35475: GO 35600
// dist := 9999 ;
35477: LD_ADDR_VAR 0 5
35481: PUSH
35482: LD_INT 9999
35484: ST_TO_ADDR
// for i = 1 to hexes do
35485: LD_ADDR_VAR 0 4
35489: PUSH
35490: DOUBLE
35491: LD_INT 1
35493: DEC
35494: ST_TO_ADDR
35495: LD_VAR 0 2
35499: PUSH
35500: FOR_TO
35501: IFFALSE 35588
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35503: LD_ADDR_VAR 0 6
35507: PUSH
35508: LD_VAR 0 1
35512: PPUSH
35513: LD_VAR 0 2
35517: PUSH
35518: LD_VAR 0 4
35522: ARRAY
35523: PUSH
35524: LD_INT 1
35526: ARRAY
35527: PPUSH
35528: LD_VAR 0 2
35532: PUSH
35533: LD_VAR 0 4
35537: ARRAY
35538: PUSH
35539: LD_INT 2
35541: ARRAY
35542: PPUSH
35543: CALL_OW 297
35547: ST_TO_ADDR
// if tdist < dist then
35548: LD_VAR 0 6
35552: PUSH
35553: LD_VAR 0 5
35557: LESS
35558: IFFALSE 35586
// begin hex := hexes [ i ] ;
35560: LD_ADDR_VAR 0 8
35564: PUSH
35565: LD_VAR 0 2
35569: PUSH
35570: LD_VAR 0 4
35574: ARRAY
35575: ST_TO_ADDR
// dist := tdist ;
35576: LD_ADDR_VAR 0 5
35580: PUSH
35581: LD_VAR 0 6
35585: ST_TO_ADDR
// end ; end ;
35586: GO 35500
35588: POP
35589: POP
// result := hex ;
35590: LD_ADDR_VAR 0 3
35594: PUSH
35595: LD_VAR 0 8
35599: ST_TO_ADDR
// end ;
35600: LD_VAR 0 3
35604: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35605: LD_INT 0
35607: PPUSH
35608: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35609: LD_VAR 0 1
35613: NOT
35614: PUSH
35615: LD_VAR 0 1
35619: PUSH
35620: LD_INT 21
35622: PUSH
35623: LD_INT 2
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 23
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PPUSH
35644: CALL_OW 69
35648: IN
35649: NOT
35650: OR
35651: IFFALSE 35655
// exit ;
35653: GO 35702
// for i = 1 to 3 do
35655: LD_ADDR_VAR 0 3
35659: PUSH
35660: DOUBLE
35661: LD_INT 1
35663: DEC
35664: ST_TO_ADDR
35665: LD_INT 3
35667: PUSH
35668: FOR_TO
35669: IFFALSE 35700
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35671: LD_VAR 0 1
35675: PPUSH
35676: CALL_OW 250
35680: PPUSH
35681: LD_VAR 0 1
35685: PPUSH
35686: CALL_OW 251
35690: PPUSH
35691: LD_INT 1
35693: PPUSH
35694: CALL_OW 453
35698: GO 35668
35700: POP
35701: POP
// end ;
35702: LD_VAR 0 2
35706: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35707: LD_INT 0
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35715: LD_VAR 0 1
35719: NOT
35720: PUSH
35721: LD_VAR 0 2
35725: NOT
35726: OR
35727: PUSH
35728: LD_VAR 0 1
35732: PPUSH
35733: CALL_OW 314
35737: OR
35738: IFFALSE 35742
// exit ;
35740: GO 36209
// if GetLives ( i ) < 250 then
35742: LD_VAR 0 4
35746: PPUSH
35747: CALL_OW 256
35751: PUSH
35752: LD_INT 250
35754: LESS
35755: IFFALSE 35768
// begin ComAutodestruct ( i ) ;
35757: LD_VAR 0 4
35761: PPUSH
35762: CALL 35605 0 1
// exit ;
35766: GO 36209
// end ; x := GetX ( enemy_unit ) ;
35768: LD_ADDR_VAR 0 7
35772: PUSH
35773: LD_VAR 0 2
35777: PPUSH
35778: CALL_OW 250
35782: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35783: LD_ADDR_VAR 0 8
35787: PUSH
35788: LD_VAR 0 2
35792: PPUSH
35793: CALL_OW 251
35797: ST_TO_ADDR
// if not x or not y then
35798: LD_VAR 0 7
35802: NOT
35803: PUSH
35804: LD_VAR 0 8
35808: NOT
35809: OR
35810: IFFALSE 35814
// exit ;
35812: GO 36209
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35814: LD_ADDR_VAR 0 6
35818: PUSH
35819: LD_VAR 0 7
35823: PPUSH
35824: LD_INT 0
35826: PPUSH
35827: LD_INT 4
35829: PPUSH
35830: CALL_OW 272
35834: PUSH
35835: LD_VAR 0 8
35839: PPUSH
35840: LD_INT 0
35842: PPUSH
35843: LD_INT 4
35845: PPUSH
35846: CALL_OW 273
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_VAR 0 7
35859: PPUSH
35860: LD_INT 1
35862: PPUSH
35863: LD_INT 4
35865: PPUSH
35866: CALL_OW 272
35870: PUSH
35871: LD_VAR 0 8
35875: PPUSH
35876: LD_INT 1
35878: PPUSH
35879: LD_INT 4
35881: PPUSH
35882: CALL_OW 273
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_VAR 0 7
35895: PPUSH
35896: LD_INT 2
35898: PPUSH
35899: LD_INT 4
35901: PPUSH
35902: CALL_OW 272
35906: PUSH
35907: LD_VAR 0 8
35911: PPUSH
35912: LD_INT 2
35914: PPUSH
35915: LD_INT 4
35917: PPUSH
35918: CALL_OW 273
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_VAR 0 7
35931: PPUSH
35932: LD_INT 3
35934: PPUSH
35935: LD_INT 4
35937: PPUSH
35938: CALL_OW 272
35942: PUSH
35943: LD_VAR 0 8
35947: PPUSH
35948: LD_INT 3
35950: PPUSH
35951: LD_INT 4
35953: PPUSH
35954: CALL_OW 273
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_VAR 0 7
35967: PPUSH
35968: LD_INT 4
35970: PPUSH
35971: LD_INT 4
35973: PPUSH
35974: CALL_OW 272
35978: PUSH
35979: LD_VAR 0 8
35983: PPUSH
35984: LD_INT 4
35986: PPUSH
35987: LD_INT 4
35989: PPUSH
35990: CALL_OW 273
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_VAR 0 7
36003: PPUSH
36004: LD_INT 5
36006: PPUSH
36007: LD_INT 4
36009: PPUSH
36010: CALL_OW 272
36014: PUSH
36015: LD_VAR 0 8
36019: PPUSH
36020: LD_INT 5
36022: PPUSH
36023: LD_INT 4
36025: PPUSH
36026: CALL_OW 273
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: ST_TO_ADDR
// for i = tmp downto 1 do
36043: LD_ADDR_VAR 0 4
36047: PUSH
36048: DOUBLE
36049: LD_VAR 0 6
36053: INC
36054: ST_TO_ADDR
36055: LD_INT 1
36057: PUSH
36058: FOR_DOWNTO
36059: IFFALSE 36160
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36061: LD_VAR 0 6
36065: PUSH
36066: LD_VAR 0 4
36070: ARRAY
36071: PUSH
36072: LD_INT 1
36074: ARRAY
36075: PPUSH
36076: LD_VAR 0 6
36080: PUSH
36081: LD_VAR 0 4
36085: ARRAY
36086: PUSH
36087: LD_INT 2
36089: ARRAY
36090: PPUSH
36091: CALL_OW 488
36095: NOT
36096: PUSH
36097: LD_VAR 0 6
36101: PUSH
36102: LD_VAR 0 4
36106: ARRAY
36107: PUSH
36108: LD_INT 1
36110: ARRAY
36111: PPUSH
36112: LD_VAR 0 6
36116: PUSH
36117: LD_VAR 0 4
36121: ARRAY
36122: PUSH
36123: LD_INT 2
36125: ARRAY
36126: PPUSH
36127: CALL_OW 428
36131: PUSH
36132: LD_INT 0
36134: NONEQUAL
36135: OR
36136: IFFALSE 36158
// tmp := Delete ( tmp , i ) ;
36138: LD_ADDR_VAR 0 6
36142: PUSH
36143: LD_VAR 0 6
36147: PPUSH
36148: LD_VAR 0 4
36152: PPUSH
36153: CALL_OW 3
36157: ST_TO_ADDR
36158: GO 36058
36160: POP
36161: POP
// j := GetClosestHex ( unit , tmp ) ;
36162: LD_ADDR_VAR 0 5
36166: PUSH
36167: LD_VAR 0 1
36171: PPUSH
36172: LD_VAR 0 6
36176: PPUSH
36177: CALL 35453 0 2
36181: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36182: LD_VAR 0 1
36186: PPUSH
36187: LD_VAR 0 5
36191: PUSH
36192: LD_INT 1
36194: ARRAY
36195: PPUSH
36196: LD_VAR 0 5
36200: PUSH
36201: LD_INT 2
36203: ARRAY
36204: PPUSH
36205: CALL_OW 111
// end ;
36209: LD_VAR 0 3
36213: RET
// export function PrepareApemanSoldier ( ) ; begin
36214: LD_INT 0
36216: PPUSH
// uc_nation := 0 ;
36217: LD_ADDR_OWVAR 21
36221: PUSH
36222: LD_INT 0
36224: ST_TO_ADDR
// hc_sex := sex_male ;
36225: LD_ADDR_OWVAR 27
36229: PUSH
36230: LD_INT 1
36232: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36233: LD_ADDR_OWVAR 28
36237: PUSH
36238: LD_INT 15
36240: ST_TO_ADDR
// hc_gallery :=  ;
36241: LD_ADDR_OWVAR 33
36245: PUSH
36246: LD_STRING 
36248: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36249: LD_ADDR_OWVAR 31
36253: PUSH
36254: LD_INT 0
36256: PPUSH
36257: LD_INT 3
36259: PPUSH
36260: CALL_OW 12
36264: PUSH
36265: LD_INT 0
36267: PPUSH
36268: LD_INT 3
36270: PPUSH
36271: CALL_OW 12
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: ST_TO_ADDR
// end ;
36288: LD_VAR 0 1
36292: RET
// export function PrepareApemanEngineer ( ) ; begin
36293: LD_INT 0
36295: PPUSH
// uc_nation := 0 ;
36296: LD_ADDR_OWVAR 21
36300: PUSH
36301: LD_INT 0
36303: ST_TO_ADDR
// hc_sex := sex_male ;
36304: LD_ADDR_OWVAR 27
36308: PUSH
36309: LD_INT 1
36311: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36312: LD_ADDR_OWVAR 28
36316: PUSH
36317: LD_INT 16
36319: ST_TO_ADDR
// hc_gallery :=  ;
36320: LD_ADDR_OWVAR 33
36324: PUSH
36325: LD_STRING 
36327: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36328: LD_ADDR_OWVAR 31
36332: PUSH
36333: LD_INT 0
36335: PPUSH
36336: LD_INT 3
36338: PPUSH
36339: CALL_OW 12
36343: PUSH
36344: LD_INT 0
36346: PPUSH
36347: LD_INT 3
36349: PPUSH
36350: CALL_OW 12
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// end ;
36367: LD_VAR 0 1
36371: RET
// export function PrepareApeman ( agressivity ) ; begin
36372: LD_INT 0
36374: PPUSH
// uc_side := 0 ;
36375: LD_ADDR_OWVAR 20
36379: PUSH
36380: LD_INT 0
36382: ST_TO_ADDR
// uc_nation := 0 ;
36383: LD_ADDR_OWVAR 21
36387: PUSH
36388: LD_INT 0
36390: ST_TO_ADDR
// hc_sex := sex_male ;
36391: LD_ADDR_OWVAR 27
36395: PUSH
36396: LD_INT 1
36398: ST_TO_ADDR
// hc_class := class_apeman ;
36399: LD_ADDR_OWVAR 28
36403: PUSH
36404: LD_INT 12
36406: ST_TO_ADDR
// hc_gallery :=  ;
36407: LD_ADDR_OWVAR 33
36411: PUSH
36412: LD_STRING 
36414: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36415: LD_ADDR_OWVAR 35
36419: PUSH
36420: LD_VAR 0 1
36424: NEG
36425: PPUSH
36426: LD_VAR 0 1
36430: PPUSH
36431: CALL_OW 12
36435: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36436: LD_ADDR_OWVAR 31
36440: PUSH
36441: LD_INT 0
36443: PPUSH
36444: LD_INT 3
36446: PPUSH
36447: CALL_OW 12
36451: PUSH
36452: LD_INT 0
36454: PPUSH
36455: LD_INT 3
36457: PPUSH
36458: CALL_OW 12
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: ST_TO_ADDR
// end ;
36475: LD_VAR 0 2
36479: RET
// export function PrepareTiger ( agressivity ) ; begin
36480: LD_INT 0
36482: PPUSH
// uc_side := 0 ;
36483: LD_ADDR_OWVAR 20
36487: PUSH
36488: LD_INT 0
36490: ST_TO_ADDR
// uc_nation := 0 ;
36491: LD_ADDR_OWVAR 21
36495: PUSH
36496: LD_INT 0
36498: ST_TO_ADDR
// hc_class := class_tiger ;
36499: LD_ADDR_OWVAR 28
36503: PUSH
36504: LD_INT 14
36506: ST_TO_ADDR
// hc_gallery :=  ;
36507: LD_ADDR_OWVAR 33
36511: PUSH
36512: LD_STRING 
36514: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36515: LD_ADDR_OWVAR 35
36519: PUSH
36520: LD_VAR 0 1
36524: NEG
36525: PPUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: CALL_OW 12
36535: ST_TO_ADDR
// end ;
36536: LD_VAR 0 2
36540: RET
// export function PrepareEnchidna ( ) ; begin
36541: LD_INT 0
36543: PPUSH
// uc_side := 0 ;
36544: LD_ADDR_OWVAR 20
36548: PUSH
36549: LD_INT 0
36551: ST_TO_ADDR
// uc_nation := 0 ;
36552: LD_ADDR_OWVAR 21
36556: PUSH
36557: LD_INT 0
36559: ST_TO_ADDR
// hc_class := class_baggie ;
36560: LD_ADDR_OWVAR 28
36564: PUSH
36565: LD_INT 13
36567: ST_TO_ADDR
// hc_gallery :=  ;
36568: LD_ADDR_OWVAR 33
36572: PUSH
36573: LD_STRING 
36575: ST_TO_ADDR
// end ;
36576: LD_VAR 0 1
36580: RET
// export function PrepareFrog ( ) ; begin
36581: LD_INT 0
36583: PPUSH
// uc_side := 0 ;
36584: LD_ADDR_OWVAR 20
36588: PUSH
36589: LD_INT 0
36591: ST_TO_ADDR
// uc_nation := 0 ;
36592: LD_ADDR_OWVAR 21
36596: PUSH
36597: LD_INT 0
36599: ST_TO_ADDR
// hc_class := class_frog ;
36600: LD_ADDR_OWVAR 28
36604: PUSH
36605: LD_INT 19
36607: ST_TO_ADDR
// hc_gallery :=  ;
36608: LD_ADDR_OWVAR 33
36612: PUSH
36613: LD_STRING 
36615: ST_TO_ADDR
// end ;
36616: LD_VAR 0 1
36620: RET
// export function PrepareFish ( ) ; begin
36621: LD_INT 0
36623: PPUSH
// uc_side := 0 ;
36624: LD_ADDR_OWVAR 20
36628: PUSH
36629: LD_INT 0
36631: ST_TO_ADDR
// uc_nation := 0 ;
36632: LD_ADDR_OWVAR 21
36636: PUSH
36637: LD_INT 0
36639: ST_TO_ADDR
// hc_class := class_fish ;
36640: LD_ADDR_OWVAR 28
36644: PUSH
36645: LD_INT 20
36647: ST_TO_ADDR
// hc_gallery :=  ;
36648: LD_ADDR_OWVAR 33
36652: PUSH
36653: LD_STRING 
36655: ST_TO_ADDR
// end ;
36656: LD_VAR 0 1
36660: RET
// export function PrepareBird ( ) ; begin
36661: LD_INT 0
36663: PPUSH
// uc_side := 0 ;
36664: LD_ADDR_OWVAR 20
36668: PUSH
36669: LD_INT 0
36671: ST_TO_ADDR
// uc_nation := 0 ;
36672: LD_ADDR_OWVAR 21
36676: PUSH
36677: LD_INT 0
36679: ST_TO_ADDR
// hc_class := class_phororhacos ;
36680: LD_ADDR_OWVAR 28
36684: PUSH
36685: LD_INT 18
36687: ST_TO_ADDR
// hc_gallery :=  ;
36688: LD_ADDR_OWVAR 33
36692: PUSH
36693: LD_STRING 
36695: ST_TO_ADDR
// end ;
36696: LD_VAR 0 1
36700: RET
// export function PrepareHorse ( ) ; begin
36701: LD_INT 0
36703: PPUSH
// uc_side := 0 ;
36704: LD_ADDR_OWVAR 20
36708: PUSH
36709: LD_INT 0
36711: ST_TO_ADDR
// uc_nation := 0 ;
36712: LD_ADDR_OWVAR 21
36716: PUSH
36717: LD_INT 0
36719: ST_TO_ADDR
// hc_class := class_horse ;
36720: LD_ADDR_OWVAR 28
36724: PUSH
36725: LD_INT 21
36727: ST_TO_ADDR
// hc_gallery :=  ;
36728: LD_ADDR_OWVAR 33
36732: PUSH
36733: LD_STRING 
36735: ST_TO_ADDR
// end ;
36736: LD_VAR 0 1
36740: RET
// export function PrepareMastodont ( ) ; begin
36741: LD_INT 0
36743: PPUSH
// uc_side := 0 ;
36744: LD_ADDR_OWVAR 20
36748: PUSH
36749: LD_INT 0
36751: ST_TO_ADDR
// uc_nation := 0 ;
36752: LD_ADDR_OWVAR 21
36756: PUSH
36757: LD_INT 0
36759: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36760: LD_ADDR_OWVAR 37
36764: PUSH
36765: LD_INT 31
36767: ST_TO_ADDR
// vc_control := control_rider ;
36768: LD_ADDR_OWVAR 38
36772: PUSH
36773: LD_INT 4
36775: ST_TO_ADDR
// end ;
36776: LD_VAR 0 1
36780: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36781: LD_INT 0
36783: PPUSH
36784: PPUSH
36785: PPUSH
// uc_side = 0 ;
36786: LD_ADDR_OWVAR 20
36790: PUSH
36791: LD_INT 0
36793: ST_TO_ADDR
// uc_nation = 0 ;
36794: LD_ADDR_OWVAR 21
36798: PUSH
36799: LD_INT 0
36801: ST_TO_ADDR
// InitHc_All ( ) ;
36802: CALL_OW 584
// InitVc ;
36806: CALL_OW 20
// if mastodonts then
36810: LD_VAR 0 6
36814: IFFALSE 36881
// for i = 1 to mastodonts do
36816: LD_ADDR_VAR 0 11
36820: PUSH
36821: DOUBLE
36822: LD_INT 1
36824: DEC
36825: ST_TO_ADDR
36826: LD_VAR 0 6
36830: PUSH
36831: FOR_TO
36832: IFFALSE 36879
// begin vc_chassis := 31 ;
36834: LD_ADDR_OWVAR 37
36838: PUSH
36839: LD_INT 31
36841: ST_TO_ADDR
// vc_control := control_rider ;
36842: LD_ADDR_OWVAR 38
36846: PUSH
36847: LD_INT 4
36849: ST_TO_ADDR
// animal := CreateVehicle ;
36850: LD_ADDR_VAR 0 12
36854: PUSH
36855: CALL_OW 45
36859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36860: LD_VAR 0 12
36864: PPUSH
36865: LD_VAR 0 8
36869: PPUSH
36870: LD_INT 0
36872: PPUSH
36873: CALL 39009 0 3
// end ;
36877: GO 36831
36879: POP
36880: POP
// if horses then
36881: LD_VAR 0 5
36885: IFFALSE 36952
// for i = 1 to horses do
36887: LD_ADDR_VAR 0 11
36891: PUSH
36892: DOUBLE
36893: LD_INT 1
36895: DEC
36896: ST_TO_ADDR
36897: LD_VAR 0 5
36901: PUSH
36902: FOR_TO
36903: IFFALSE 36950
// begin hc_class := 21 ;
36905: LD_ADDR_OWVAR 28
36909: PUSH
36910: LD_INT 21
36912: ST_TO_ADDR
// hc_gallery :=  ;
36913: LD_ADDR_OWVAR 33
36917: PUSH
36918: LD_STRING 
36920: ST_TO_ADDR
// animal := CreateHuman ;
36921: LD_ADDR_VAR 0 12
36925: PUSH
36926: CALL_OW 44
36930: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36931: LD_VAR 0 12
36935: PPUSH
36936: LD_VAR 0 8
36940: PPUSH
36941: LD_INT 0
36943: PPUSH
36944: CALL 39009 0 3
// end ;
36948: GO 36902
36950: POP
36951: POP
// if birds then
36952: LD_VAR 0 1
36956: IFFALSE 37023
// for i = 1 to birds do
36958: LD_ADDR_VAR 0 11
36962: PUSH
36963: DOUBLE
36964: LD_INT 1
36966: DEC
36967: ST_TO_ADDR
36968: LD_VAR 0 1
36972: PUSH
36973: FOR_TO
36974: IFFALSE 37021
// begin hc_class := 18 ;
36976: LD_ADDR_OWVAR 28
36980: PUSH
36981: LD_INT 18
36983: ST_TO_ADDR
// hc_gallery =  ;
36984: LD_ADDR_OWVAR 33
36988: PUSH
36989: LD_STRING 
36991: ST_TO_ADDR
// animal := CreateHuman ;
36992: LD_ADDR_VAR 0 12
36996: PUSH
36997: CALL_OW 44
37001: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37002: LD_VAR 0 12
37006: PPUSH
37007: LD_VAR 0 8
37011: PPUSH
37012: LD_INT 0
37014: PPUSH
37015: CALL 39009 0 3
// end ;
37019: GO 36973
37021: POP
37022: POP
// if tigers then
37023: LD_VAR 0 2
37027: IFFALSE 37111
// for i = 1 to tigers do
37029: LD_ADDR_VAR 0 11
37033: PUSH
37034: DOUBLE
37035: LD_INT 1
37037: DEC
37038: ST_TO_ADDR
37039: LD_VAR 0 2
37043: PUSH
37044: FOR_TO
37045: IFFALSE 37109
// begin hc_class = class_tiger ;
37047: LD_ADDR_OWVAR 28
37051: PUSH
37052: LD_INT 14
37054: ST_TO_ADDR
// hc_gallery =  ;
37055: LD_ADDR_OWVAR 33
37059: PUSH
37060: LD_STRING 
37062: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37063: LD_ADDR_OWVAR 35
37067: PUSH
37068: LD_INT 7
37070: NEG
37071: PPUSH
37072: LD_INT 7
37074: PPUSH
37075: CALL_OW 12
37079: ST_TO_ADDR
// animal := CreateHuman ;
37080: LD_ADDR_VAR 0 12
37084: PUSH
37085: CALL_OW 44
37089: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37090: LD_VAR 0 12
37094: PPUSH
37095: LD_VAR 0 8
37099: PPUSH
37100: LD_INT 0
37102: PPUSH
37103: CALL 39009 0 3
// end ;
37107: GO 37044
37109: POP
37110: POP
// if apemans then
37111: LD_VAR 0 3
37115: IFFALSE 37238
// for i = 1 to apemans do
37117: LD_ADDR_VAR 0 11
37121: PUSH
37122: DOUBLE
37123: LD_INT 1
37125: DEC
37126: ST_TO_ADDR
37127: LD_VAR 0 3
37131: PUSH
37132: FOR_TO
37133: IFFALSE 37236
// begin hc_class = class_apeman ;
37135: LD_ADDR_OWVAR 28
37139: PUSH
37140: LD_INT 12
37142: ST_TO_ADDR
// hc_gallery =  ;
37143: LD_ADDR_OWVAR 33
37147: PUSH
37148: LD_STRING 
37150: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37151: LD_ADDR_OWVAR 35
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PPUSH
37160: LD_INT 2
37162: PPUSH
37163: CALL_OW 12
37167: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37168: LD_ADDR_OWVAR 31
37172: PUSH
37173: LD_INT 1
37175: PPUSH
37176: LD_INT 3
37178: PPUSH
37179: CALL_OW 12
37183: PUSH
37184: LD_INT 1
37186: PPUSH
37187: LD_INT 3
37189: PPUSH
37190: CALL_OW 12
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: ST_TO_ADDR
// animal := CreateHuman ;
37207: LD_ADDR_VAR 0 12
37211: PUSH
37212: CALL_OW 44
37216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37217: LD_VAR 0 12
37221: PPUSH
37222: LD_VAR 0 8
37226: PPUSH
37227: LD_INT 0
37229: PPUSH
37230: CALL 39009 0 3
// end ;
37234: GO 37132
37236: POP
37237: POP
// if enchidnas then
37238: LD_VAR 0 4
37242: IFFALSE 37309
// for i = 1 to enchidnas do
37244: LD_ADDR_VAR 0 11
37248: PUSH
37249: DOUBLE
37250: LD_INT 1
37252: DEC
37253: ST_TO_ADDR
37254: LD_VAR 0 4
37258: PUSH
37259: FOR_TO
37260: IFFALSE 37307
// begin hc_class = 13 ;
37262: LD_ADDR_OWVAR 28
37266: PUSH
37267: LD_INT 13
37269: ST_TO_ADDR
// hc_gallery =  ;
37270: LD_ADDR_OWVAR 33
37274: PUSH
37275: LD_STRING 
37277: ST_TO_ADDR
// animal := CreateHuman ;
37278: LD_ADDR_VAR 0 12
37282: PUSH
37283: CALL_OW 44
37287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37288: LD_VAR 0 12
37292: PPUSH
37293: LD_VAR 0 8
37297: PPUSH
37298: LD_INT 0
37300: PPUSH
37301: CALL 39009 0 3
// end ;
37305: GO 37259
37307: POP
37308: POP
// if fishes then
37309: LD_VAR 0 7
37313: IFFALSE 37380
// for i = 1 to fishes do
37315: LD_ADDR_VAR 0 11
37319: PUSH
37320: DOUBLE
37321: LD_INT 1
37323: DEC
37324: ST_TO_ADDR
37325: LD_VAR 0 7
37329: PUSH
37330: FOR_TO
37331: IFFALSE 37378
// begin hc_class = 20 ;
37333: LD_ADDR_OWVAR 28
37337: PUSH
37338: LD_INT 20
37340: ST_TO_ADDR
// hc_gallery =  ;
37341: LD_ADDR_OWVAR 33
37345: PUSH
37346: LD_STRING 
37348: ST_TO_ADDR
// animal := CreateHuman ;
37349: LD_ADDR_VAR 0 12
37353: PUSH
37354: CALL_OW 44
37358: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37359: LD_VAR 0 12
37363: PPUSH
37364: LD_VAR 0 9
37368: PPUSH
37369: LD_INT 0
37371: PPUSH
37372: CALL 39009 0 3
// end ;
37376: GO 37330
37378: POP
37379: POP
// end ;
37380: LD_VAR 0 10
37384: RET
// export function WantHeal ( sci , unit ) ; begin
37385: LD_INT 0
37387: PPUSH
// if GetTaskList ( sci ) > 0 then
37388: LD_VAR 0 1
37392: PPUSH
37393: CALL_OW 437
37397: PUSH
37398: LD_INT 0
37400: GREATER
37401: IFFALSE 37471
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37403: LD_VAR 0 1
37407: PPUSH
37408: CALL_OW 437
37412: PUSH
37413: LD_INT 1
37415: ARRAY
37416: PUSH
37417: LD_INT 1
37419: ARRAY
37420: PUSH
37421: LD_STRING l
37423: EQUAL
37424: PUSH
37425: LD_VAR 0 1
37429: PPUSH
37430: CALL_OW 437
37434: PUSH
37435: LD_INT 1
37437: ARRAY
37438: PUSH
37439: LD_INT 4
37441: ARRAY
37442: PUSH
37443: LD_VAR 0 2
37447: EQUAL
37448: AND
37449: IFFALSE 37461
// result := true else
37451: LD_ADDR_VAR 0 3
37455: PUSH
37456: LD_INT 1
37458: ST_TO_ADDR
37459: GO 37469
// result := false ;
37461: LD_ADDR_VAR 0 3
37465: PUSH
37466: LD_INT 0
37468: ST_TO_ADDR
// end else
37469: GO 37479
// result := false ;
37471: LD_ADDR_VAR 0 3
37475: PUSH
37476: LD_INT 0
37478: ST_TO_ADDR
// end ;
37479: LD_VAR 0 3
37483: RET
// export function HealTarget ( sci ) ; begin
37484: LD_INT 0
37486: PPUSH
// if not sci then
37487: LD_VAR 0 1
37491: NOT
37492: IFFALSE 37496
// exit ;
37494: GO 37561
// result := 0 ;
37496: LD_ADDR_VAR 0 2
37500: PUSH
37501: LD_INT 0
37503: ST_TO_ADDR
// if GetTaskList ( sci ) then
37504: LD_VAR 0 1
37508: PPUSH
37509: CALL_OW 437
37513: IFFALSE 37561
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37515: LD_VAR 0 1
37519: PPUSH
37520: CALL_OW 437
37524: PUSH
37525: LD_INT 1
37527: ARRAY
37528: PUSH
37529: LD_INT 1
37531: ARRAY
37532: PUSH
37533: LD_STRING l
37535: EQUAL
37536: IFFALSE 37561
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37538: LD_ADDR_VAR 0 2
37542: PUSH
37543: LD_VAR 0 1
37547: PPUSH
37548: CALL_OW 437
37552: PUSH
37553: LD_INT 1
37555: ARRAY
37556: PUSH
37557: LD_INT 4
37559: ARRAY
37560: ST_TO_ADDR
// end ;
37561: LD_VAR 0 2
37565: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37566: LD_INT 0
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
// if not base_units then
37572: LD_VAR 0 1
37576: NOT
37577: IFFALSE 37581
// exit ;
37579: GO 37668
// result := false ;
37581: LD_ADDR_VAR 0 2
37585: PUSH
37586: LD_INT 0
37588: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37589: LD_ADDR_VAR 0 5
37593: PUSH
37594: LD_VAR 0 1
37598: PPUSH
37599: LD_INT 21
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PPUSH
37609: CALL_OW 72
37613: ST_TO_ADDR
// if not tmp then
37614: LD_VAR 0 5
37618: NOT
37619: IFFALSE 37623
// exit ;
37621: GO 37668
// for i in tmp do
37623: LD_ADDR_VAR 0 3
37627: PUSH
37628: LD_VAR 0 5
37632: PUSH
37633: FOR_IN
37634: IFFALSE 37666
// begin result := EnemyInRange ( i , 22 ) ;
37636: LD_ADDR_VAR 0 2
37640: PUSH
37641: LD_VAR 0 3
37645: PPUSH
37646: LD_INT 22
37648: PPUSH
37649: CALL 35255 0 2
37653: ST_TO_ADDR
// if result then
37654: LD_VAR 0 2
37658: IFFALSE 37664
// exit ;
37660: POP
37661: POP
37662: GO 37668
// end ;
37664: GO 37633
37666: POP
37667: POP
// end ;
37668: LD_VAR 0 2
37672: RET
// export function FilterByTag ( units , tag ) ; begin
37673: LD_INT 0
37675: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37676: LD_ADDR_VAR 0 3
37680: PUSH
37681: LD_VAR 0 1
37685: PPUSH
37686: LD_INT 120
37688: PUSH
37689: LD_VAR 0 2
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PPUSH
37698: CALL_OW 72
37702: ST_TO_ADDR
// end ;
37703: LD_VAR 0 3
37707: RET
// export function IsDriver ( un ) ; begin
37708: LD_INT 0
37710: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37711: LD_ADDR_VAR 0 2
37715: PUSH
37716: LD_VAR 0 1
37720: PUSH
37721: LD_INT 55
37723: PUSH
37724: EMPTY
37725: LIST
37726: PPUSH
37727: CALL_OW 69
37731: IN
37732: ST_TO_ADDR
// end ;
37733: LD_VAR 0 2
37737: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37738: LD_INT 0
37740: PPUSH
37741: PPUSH
// list := [ ] ;
37742: LD_ADDR_VAR 0 5
37746: PUSH
37747: EMPTY
37748: ST_TO_ADDR
// case d of 0 :
37749: LD_VAR 0 3
37753: PUSH
37754: LD_INT 0
37756: DOUBLE
37757: EQUAL
37758: IFTRUE 37762
37760: GO 37895
37762: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37763: LD_ADDR_VAR 0 5
37767: PUSH
37768: LD_VAR 0 1
37772: PUSH
37773: LD_INT 4
37775: MINUS
37776: PUSH
37777: LD_VAR 0 2
37781: PUSH
37782: LD_INT 4
37784: MINUS
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: PUSH
37794: LD_VAR 0 1
37798: PUSH
37799: LD_INT 3
37801: MINUS
37802: PUSH
37803: LD_VAR 0 2
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: PUSH
37816: LD_VAR 0 1
37820: PUSH
37821: LD_INT 4
37823: PLUS
37824: PUSH
37825: LD_VAR 0 2
37829: PUSH
37830: LD_INT 4
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: LIST
37837: PUSH
37838: LD_VAR 0 1
37842: PUSH
37843: LD_INT 3
37845: PLUS
37846: PUSH
37847: LD_VAR 0 2
37851: PUSH
37852: LD_INT 3
37854: PLUS
37855: PUSH
37856: LD_INT 5
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: PUSH
37864: LD_VAR 0 1
37868: PUSH
37869: LD_VAR 0 2
37873: PUSH
37874: LD_INT 4
37876: PLUS
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: ST_TO_ADDR
// end ; 1 :
37893: GO 38593
37895: LD_INT 1
37897: DOUBLE
37898: EQUAL
37899: IFTRUE 37903
37901: GO 38036
37903: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37904: LD_ADDR_VAR 0 5
37908: PUSH
37909: LD_VAR 0 1
37913: PUSH
37914: LD_VAR 0 2
37918: PUSH
37919: LD_INT 4
37921: MINUS
37922: PUSH
37923: LD_INT 3
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: LD_VAR 0 1
37935: PUSH
37936: LD_INT 3
37938: MINUS
37939: PUSH
37940: LD_VAR 0 2
37944: PUSH
37945: LD_INT 3
37947: MINUS
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: PUSH
37957: LD_VAR 0 1
37961: PUSH
37962: LD_INT 4
37964: MINUS
37965: PUSH
37966: LD_VAR 0 2
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: LIST
37978: PUSH
37979: LD_VAR 0 1
37983: PUSH
37984: LD_VAR 0 2
37988: PUSH
37989: LD_INT 3
37991: PLUS
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: PUSH
38001: LD_VAR 0 1
38005: PUSH
38006: LD_INT 4
38008: PLUS
38009: PUSH
38010: LD_VAR 0 2
38014: PUSH
38015: LD_INT 4
38017: PLUS
38018: PUSH
38019: LD_INT 5
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: ST_TO_ADDR
// end ; 2 :
38034: GO 38593
38036: LD_INT 2
38038: DOUBLE
38039: EQUAL
38040: IFTRUE 38044
38042: GO 38173
38044: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38045: LD_ADDR_VAR 0 5
38049: PUSH
38050: LD_VAR 0 1
38054: PUSH
38055: LD_VAR 0 2
38059: PUSH
38060: LD_INT 3
38062: MINUS
38063: PUSH
38064: LD_INT 3
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: LIST
38071: PUSH
38072: LD_VAR 0 1
38076: PUSH
38077: LD_INT 4
38079: PLUS
38080: PUSH
38081: LD_VAR 0 2
38085: PUSH
38086: LD_INT 4
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: PUSH
38094: LD_VAR 0 1
38098: PUSH
38099: LD_VAR 0 2
38103: PUSH
38104: LD_INT 4
38106: PLUS
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: LIST
38115: PUSH
38116: LD_VAR 0 1
38120: PUSH
38121: LD_INT 3
38123: MINUS
38124: PUSH
38125: LD_VAR 0 2
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: LIST
38137: PUSH
38138: LD_VAR 0 1
38142: PUSH
38143: LD_INT 4
38145: MINUS
38146: PUSH
38147: LD_VAR 0 2
38151: PUSH
38152: LD_INT 4
38154: MINUS
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: LIST
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: ST_TO_ADDR
// end ; 3 :
38171: GO 38593
38173: LD_INT 3
38175: DOUBLE
38176: EQUAL
38177: IFTRUE 38181
38179: GO 38314
38181: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38182: LD_ADDR_VAR 0 5
38186: PUSH
38187: LD_VAR 0 1
38191: PUSH
38192: LD_INT 3
38194: PLUS
38195: PUSH
38196: LD_VAR 0 2
38200: PUSH
38201: LD_INT 4
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: LIST
38208: PUSH
38209: LD_VAR 0 1
38213: PUSH
38214: LD_INT 4
38216: PLUS
38217: PUSH
38218: LD_VAR 0 2
38222: PUSH
38223: LD_INT 4
38225: PLUS
38226: PUSH
38227: LD_INT 5
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: PUSH
38235: LD_VAR 0 1
38239: PUSH
38240: LD_INT 4
38242: MINUS
38243: PUSH
38244: LD_VAR 0 2
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: LIST
38256: PUSH
38257: LD_VAR 0 1
38261: PUSH
38262: LD_VAR 0 2
38266: PUSH
38267: LD_INT 4
38269: MINUS
38270: PUSH
38271: LD_INT 3
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: PUSH
38279: LD_VAR 0 1
38283: PUSH
38284: LD_INT 3
38286: MINUS
38287: PUSH
38288: LD_VAR 0 2
38292: PUSH
38293: LD_INT 3
38295: MINUS
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: ST_TO_ADDR
// end ; 4 :
38312: GO 38593
38314: LD_INT 4
38316: DOUBLE
38317: EQUAL
38318: IFTRUE 38322
38320: GO 38455
38322: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38323: LD_ADDR_VAR 0 5
38327: PUSH
38328: LD_VAR 0 1
38332: PUSH
38333: LD_VAR 0 2
38337: PUSH
38338: LD_INT 4
38340: PLUS
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: PUSH
38350: LD_VAR 0 1
38354: PUSH
38355: LD_INT 3
38357: PLUS
38358: PUSH
38359: LD_VAR 0 2
38363: PUSH
38364: LD_INT 3
38366: PLUS
38367: PUSH
38368: LD_INT 5
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: PUSH
38376: LD_VAR 0 1
38380: PUSH
38381: LD_INT 4
38383: PLUS
38384: PUSH
38385: LD_VAR 0 2
38389: PUSH
38390: LD_INT 4
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: PUSH
38398: LD_VAR 0 1
38402: PUSH
38403: LD_VAR 0 2
38407: PUSH
38408: LD_INT 3
38410: MINUS
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: PUSH
38420: LD_VAR 0 1
38424: PUSH
38425: LD_INT 4
38427: MINUS
38428: PUSH
38429: LD_VAR 0 2
38433: PUSH
38434: LD_INT 4
38436: MINUS
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: ST_TO_ADDR
// end ; 5 :
38453: GO 38593
38455: LD_INT 5
38457: DOUBLE
38458: EQUAL
38459: IFTRUE 38463
38461: GO 38592
38463: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38464: LD_ADDR_VAR 0 5
38468: PUSH
38469: LD_VAR 0 1
38473: PUSH
38474: LD_INT 4
38476: MINUS
38477: PUSH
38478: LD_VAR 0 2
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: PUSH
38491: LD_VAR 0 1
38495: PUSH
38496: LD_VAR 0 2
38500: PUSH
38501: LD_INT 4
38503: MINUS
38504: PUSH
38505: LD_INT 3
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: PUSH
38513: LD_VAR 0 1
38517: PUSH
38518: LD_INT 4
38520: PLUS
38521: PUSH
38522: LD_VAR 0 2
38526: PUSH
38527: LD_INT 4
38529: PLUS
38530: PUSH
38531: LD_INT 5
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: LIST
38538: PUSH
38539: LD_VAR 0 1
38543: PUSH
38544: LD_INT 3
38546: PLUS
38547: PUSH
38548: LD_VAR 0 2
38552: PUSH
38553: LD_INT 4
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: PUSH
38561: LD_VAR 0 1
38565: PUSH
38566: LD_VAR 0 2
38570: PUSH
38571: LD_INT 3
38573: PLUS
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: ST_TO_ADDR
// end ; end ;
38590: GO 38593
38592: POP
// result := list ;
38593: LD_ADDR_VAR 0 4
38597: PUSH
38598: LD_VAR 0 5
38602: ST_TO_ADDR
// end ;
38603: LD_VAR 0 4
38607: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38608: LD_INT 0
38610: PPUSH
38611: PPUSH
38612: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38613: LD_VAR 0 1
38617: NOT
38618: PUSH
38619: LD_VAR 0 2
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: LD_INT 4
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: IN
38642: NOT
38643: OR
38644: IFFALSE 38648
// exit ;
38646: GO 38731
// tmp := [ ] ;
38648: LD_ADDR_VAR 0 5
38652: PUSH
38653: EMPTY
38654: ST_TO_ADDR
// for i in units do
38655: LD_ADDR_VAR 0 4
38659: PUSH
38660: LD_VAR 0 1
38664: PUSH
38665: FOR_IN
38666: IFFALSE 38700
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38668: LD_ADDR_VAR 0 5
38672: PUSH
38673: LD_VAR 0 5
38677: PPUSH
38678: LD_VAR 0 4
38682: PPUSH
38683: LD_VAR 0 2
38687: PPUSH
38688: CALL_OW 259
38692: PPUSH
38693: CALL 40091 0 2
38697: ST_TO_ADDR
38698: GO 38665
38700: POP
38701: POP
// if not tmp then
38702: LD_VAR 0 5
38706: NOT
38707: IFFALSE 38711
// exit ;
38709: GO 38731
// result := SortListByListDesc ( units , tmp ) ;
38711: LD_ADDR_VAR 0 3
38715: PUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: LD_VAR 0 5
38725: PPUSH
38726: CALL_OW 77
38730: ST_TO_ADDR
// end ;
38731: LD_VAR 0 3
38735: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38736: LD_INT 0
38738: PPUSH
38739: PPUSH
38740: PPUSH
// result := false ;
38741: LD_ADDR_VAR 0 3
38745: PUSH
38746: LD_INT 0
38748: ST_TO_ADDR
// if not building then
38749: LD_VAR 0 2
38753: NOT
38754: IFFALSE 38758
// exit ;
38756: GO 38896
// x := GetX ( building ) ;
38758: LD_ADDR_VAR 0 4
38762: PUSH
38763: LD_VAR 0 2
38767: PPUSH
38768: CALL_OW 250
38772: ST_TO_ADDR
// y := GetY ( building ) ;
38773: LD_ADDR_VAR 0 5
38777: PUSH
38778: LD_VAR 0 2
38782: PPUSH
38783: CALL_OW 251
38787: ST_TO_ADDR
// if not x or not y then
38788: LD_VAR 0 4
38792: NOT
38793: PUSH
38794: LD_VAR 0 5
38798: NOT
38799: OR
38800: IFFALSE 38804
// exit ;
38802: GO 38896
// if GetTaskList ( unit ) then
38804: LD_VAR 0 1
38808: PPUSH
38809: CALL_OW 437
38813: IFFALSE 38896
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38815: LD_STRING e
38817: PUSH
38818: LD_VAR 0 1
38822: PPUSH
38823: CALL_OW 437
38827: PUSH
38828: LD_INT 1
38830: ARRAY
38831: PUSH
38832: LD_INT 1
38834: ARRAY
38835: EQUAL
38836: PUSH
38837: LD_VAR 0 4
38841: PUSH
38842: LD_VAR 0 1
38846: PPUSH
38847: CALL_OW 437
38851: PUSH
38852: LD_INT 1
38854: ARRAY
38855: PUSH
38856: LD_INT 2
38858: ARRAY
38859: EQUAL
38860: AND
38861: PUSH
38862: LD_VAR 0 5
38866: PUSH
38867: LD_VAR 0 1
38871: PPUSH
38872: CALL_OW 437
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: PUSH
38881: LD_INT 3
38883: ARRAY
38884: EQUAL
38885: AND
38886: IFFALSE 38896
// result := true end ;
38888: LD_ADDR_VAR 0 3
38892: PUSH
38893: LD_INT 1
38895: ST_TO_ADDR
// end ;
38896: LD_VAR 0 3
38900: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38901: LD_INT 0
38903: PPUSH
// result := false ;
38904: LD_ADDR_VAR 0 4
38908: PUSH
38909: LD_INT 0
38911: ST_TO_ADDR
// if GetTaskList ( unit ) then
38912: LD_VAR 0 1
38916: PPUSH
38917: CALL_OW 437
38921: IFFALSE 39004
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38923: LD_STRING M
38925: PUSH
38926: LD_VAR 0 1
38930: PPUSH
38931: CALL_OW 437
38935: PUSH
38936: LD_INT 1
38938: ARRAY
38939: PUSH
38940: LD_INT 1
38942: ARRAY
38943: EQUAL
38944: PUSH
38945: LD_VAR 0 2
38949: PUSH
38950: LD_VAR 0 1
38954: PPUSH
38955: CALL_OW 437
38959: PUSH
38960: LD_INT 1
38962: ARRAY
38963: PUSH
38964: LD_INT 2
38966: ARRAY
38967: EQUAL
38968: AND
38969: PUSH
38970: LD_VAR 0 3
38974: PUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 437
38984: PUSH
38985: LD_INT 1
38987: ARRAY
38988: PUSH
38989: LD_INT 3
38991: ARRAY
38992: EQUAL
38993: AND
38994: IFFALSE 39004
// result := true ;
38996: LD_ADDR_VAR 0 4
39000: PUSH
39001: LD_INT 1
39003: ST_TO_ADDR
// end ; end ;
39004: LD_VAR 0 4
39008: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39009: LD_INT 0
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
// if not unit or not area then
39015: LD_VAR 0 1
39019: NOT
39020: PUSH
39021: LD_VAR 0 2
39025: NOT
39026: OR
39027: IFFALSE 39031
// exit ;
39029: GO 39194
// tmp := AreaToList ( area , i ) ;
39031: LD_ADDR_VAR 0 6
39035: PUSH
39036: LD_VAR 0 2
39040: PPUSH
39041: LD_VAR 0 5
39045: PPUSH
39046: CALL_OW 517
39050: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39051: LD_ADDR_VAR 0 5
39055: PUSH
39056: DOUBLE
39057: LD_INT 1
39059: DEC
39060: ST_TO_ADDR
39061: LD_VAR 0 6
39065: PUSH
39066: LD_INT 1
39068: ARRAY
39069: PUSH
39070: FOR_TO
39071: IFFALSE 39192
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39073: LD_ADDR_VAR 0 7
39077: PUSH
39078: LD_VAR 0 6
39082: PUSH
39083: LD_INT 1
39085: ARRAY
39086: PUSH
39087: LD_VAR 0 5
39091: ARRAY
39092: PUSH
39093: LD_VAR 0 6
39097: PUSH
39098: LD_INT 2
39100: ARRAY
39101: PUSH
39102: LD_VAR 0 5
39106: ARRAY
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
39112: LD_INT 92
39114: PUSH
39115: LD_VAR 0 7
39119: PUSH
39120: LD_INT 1
39122: ARRAY
39123: PUSH
39124: LD_VAR 0 7
39128: PUSH
39129: LD_INT 2
39131: ARRAY
39132: PUSH
39133: LD_INT 3
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: PPUSH
39142: CALL_OW 69
39146: PUSH
39147: LD_INT 0
39149: EQUAL
39150: IFFALSE 39190
// begin PlaceUnitArea ( unit , area , mode ) ;
39152: LD_VAR 0 1
39156: PPUSH
39157: LD_VAR 0 2
39161: PPUSH
39162: LD_VAR 0 3
39166: PPUSH
39167: CALL_OW 49
// result := IsPlaced ( unit ) ;
39171: LD_ADDR_VAR 0 4
39175: PUSH
39176: LD_VAR 0 1
39180: PPUSH
39181: CALL_OW 305
39185: ST_TO_ADDR
// exit ;
39186: POP
39187: POP
39188: GO 39194
// end ; end ;
39190: GO 39070
39192: POP
39193: POP
// end ;
39194: LD_VAR 0 4
39198: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39199: LD_INT 0
39201: PPUSH
39202: PPUSH
39203: PPUSH
// if not side or side > 8 then
39204: LD_VAR 0 1
39208: NOT
39209: PUSH
39210: LD_VAR 0 1
39214: PUSH
39215: LD_INT 8
39217: GREATER
39218: OR
39219: IFFALSE 39223
// exit ;
39221: GO 39410
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39223: LD_ADDR_VAR 0 4
39227: PUSH
39228: LD_INT 22
39230: PUSH
39231: LD_VAR 0 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 21
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PPUSH
39254: CALL_OW 69
39258: ST_TO_ADDR
// if not tmp then
39259: LD_VAR 0 4
39263: NOT
39264: IFFALSE 39268
// exit ;
39266: GO 39410
// enable_addtolog := true ;
39268: LD_ADDR_OWVAR 81
39272: PUSH
39273: LD_INT 1
39275: ST_TO_ADDR
// AddToLog ( [ ) ;
39276: LD_STRING [
39278: PPUSH
39279: CALL_OW 561
// for i in tmp do
39283: LD_ADDR_VAR 0 3
39287: PUSH
39288: LD_VAR 0 4
39292: PUSH
39293: FOR_IN
39294: IFFALSE 39401
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39296: LD_STRING [
39298: PUSH
39299: LD_VAR 0 3
39303: PPUSH
39304: CALL_OW 266
39308: STR
39309: PUSH
39310: LD_STRING , 
39312: STR
39313: PUSH
39314: LD_VAR 0 3
39318: PPUSH
39319: CALL_OW 250
39323: STR
39324: PUSH
39325: LD_STRING , 
39327: STR
39328: PUSH
39329: LD_VAR 0 3
39333: PPUSH
39334: CALL_OW 251
39338: STR
39339: PUSH
39340: LD_STRING , 
39342: STR
39343: PUSH
39344: LD_VAR 0 3
39348: PPUSH
39349: CALL_OW 254
39353: STR
39354: PUSH
39355: LD_STRING , 
39357: STR
39358: PUSH
39359: LD_VAR 0 3
39363: PPUSH
39364: LD_INT 1
39366: PPUSH
39367: CALL_OW 268
39371: STR
39372: PUSH
39373: LD_STRING , 
39375: STR
39376: PUSH
39377: LD_VAR 0 3
39381: PPUSH
39382: LD_INT 2
39384: PPUSH
39385: CALL_OW 268
39389: STR
39390: PUSH
39391: LD_STRING ],
39393: STR
39394: PPUSH
39395: CALL_OW 561
// end ;
39399: GO 39293
39401: POP
39402: POP
// AddToLog ( ]; ) ;
39403: LD_STRING ];
39405: PPUSH
39406: CALL_OW 561
// end ;
39410: LD_VAR 0 2
39414: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39415: LD_INT 0
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
39421: PPUSH
// if not area or not rate or not max then
39422: LD_VAR 0 1
39426: NOT
39427: PUSH
39428: LD_VAR 0 2
39432: NOT
39433: OR
39434: PUSH
39435: LD_VAR 0 4
39439: NOT
39440: OR
39441: IFFALSE 39445
// exit ;
39443: GO 39634
// while 1 do
39445: LD_INT 1
39447: IFFALSE 39634
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39449: LD_ADDR_VAR 0 9
39453: PUSH
39454: LD_VAR 0 1
39458: PPUSH
39459: LD_INT 1
39461: PPUSH
39462: CALL_OW 287
39466: PUSH
39467: LD_INT 10
39469: MUL
39470: ST_TO_ADDR
// r := rate / 10 ;
39471: LD_ADDR_VAR 0 7
39475: PUSH
39476: LD_VAR 0 2
39480: PUSH
39481: LD_INT 10
39483: DIVREAL
39484: ST_TO_ADDR
// time := 1 1$00 ;
39485: LD_ADDR_VAR 0 8
39489: PUSH
39490: LD_INT 2100
39492: ST_TO_ADDR
// if amount < min then
39493: LD_VAR 0 9
39497: PUSH
39498: LD_VAR 0 3
39502: LESS
39503: IFFALSE 39521
// r := r * 2 else
39505: LD_ADDR_VAR 0 7
39509: PUSH
39510: LD_VAR 0 7
39514: PUSH
39515: LD_INT 2
39517: MUL
39518: ST_TO_ADDR
39519: GO 39547
// if amount > max then
39521: LD_VAR 0 9
39525: PUSH
39526: LD_VAR 0 4
39530: GREATER
39531: IFFALSE 39547
// r := r / 2 ;
39533: LD_ADDR_VAR 0 7
39537: PUSH
39538: LD_VAR 0 7
39542: PUSH
39543: LD_INT 2
39545: DIVREAL
39546: ST_TO_ADDR
// time := time / r ;
39547: LD_ADDR_VAR 0 8
39551: PUSH
39552: LD_VAR 0 8
39556: PUSH
39557: LD_VAR 0 7
39561: DIVREAL
39562: ST_TO_ADDR
// if time < 0 then
39563: LD_VAR 0 8
39567: PUSH
39568: LD_INT 0
39570: LESS
39571: IFFALSE 39588
// time := time * - 1 ;
39573: LD_ADDR_VAR 0 8
39577: PUSH
39578: LD_VAR 0 8
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: MUL
39587: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39588: LD_VAR 0 8
39592: PUSH
39593: LD_INT 35
39595: PPUSH
39596: LD_INT 875
39598: PPUSH
39599: CALL_OW 12
39603: PLUS
39604: PPUSH
39605: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39609: LD_INT 1
39611: PPUSH
39612: LD_INT 5
39614: PPUSH
39615: CALL_OW 12
39619: PPUSH
39620: LD_VAR 0 1
39624: PPUSH
39625: LD_INT 1
39627: PPUSH
39628: CALL_OW 55
// end ;
39632: GO 39445
// end ;
39634: LD_VAR 0 5
39638: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39639: LD_INT 0
39641: PPUSH
39642: PPUSH
39643: PPUSH
39644: PPUSH
39645: PPUSH
39646: PPUSH
39647: PPUSH
39648: PPUSH
// if not turrets or not factories then
39649: LD_VAR 0 1
39653: NOT
39654: PUSH
39655: LD_VAR 0 2
39659: NOT
39660: OR
39661: IFFALSE 39665
// exit ;
39663: GO 39972
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39665: LD_ADDR_VAR 0 10
39669: PUSH
39670: LD_INT 5
39672: PUSH
39673: LD_INT 6
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 4
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 3
39692: PUSH
39693: LD_INT 5
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 24
39707: PUSH
39708: LD_INT 25
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 23
39717: PUSH
39718: LD_INT 27
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 42
39731: PUSH
39732: LD_INT 43
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 44
39741: PUSH
39742: LD_INT 46
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 45
39751: PUSH
39752: LD_INT 47
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: LIST
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: ST_TO_ADDR
// result := [ ] ;
39769: LD_ADDR_VAR 0 3
39773: PUSH
39774: EMPTY
39775: ST_TO_ADDR
// for i in turrets do
39776: LD_ADDR_VAR 0 4
39780: PUSH
39781: LD_VAR 0 1
39785: PUSH
39786: FOR_IN
39787: IFFALSE 39970
// begin nat := GetNation ( i ) ;
39789: LD_ADDR_VAR 0 7
39793: PUSH
39794: LD_VAR 0 4
39798: PPUSH
39799: CALL_OW 248
39803: ST_TO_ADDR
// weapon := 0 ;
39804: LD_ADDR_VAR 0 8
39808: PUSH
39809: LD_INT 0
39811: ST_TO_ADDR
// if not nat then
39812: LD_VAR 0 7
39816: NOT
39817: IFFALSE 39821
// continue ;
39819: GO 39786
// for j in list [ nat ] do
39821: LD_ADDR_VAR 0 5
39825: PUSH
39826: LD_VAR 0 10
39830: PUSH
39831: LD_VAR 0 7
39835: ARRAY
39836: PUSH
39837: FOR_IN
39838: IFFALSE 39879
// if GetBWeapon ( i ) = j [ 1 ] then
39840: LD_VAR 0 4
39844: PPUSH
39845: CALL_OW 269
39849: PUSH
39850: LD_VAR 0 5
39854: PUSH
39855: LD_INT 1
39857: ARRAY
39858: EQUAL
39859: IFFALSE 39877
// begin weapon := j [ 2 ] ;
39861: LD_ADDR_VAR 0 8
39865: PUSH
39866: LD_VAR 0 5
39870: PUSH
39871: LD_INT 2
39873: ARRAY
39874: ST_TO_ADDR
// break ;
39875: GO 39879
// end ;
39877: GO 39837
39879: POP
39880: POP
// if not weapon then
39881: LD_VAR 0 8
39885: NOT
39886: IFFALSE 39890
// continue ;
39888: GO 39786
// for k in factories do
39890: LD_ADDR_VAR 0 6
39894: PUSH
39895: LD_VAR 0 2
39899: PUSH
39900: FOR_IN
39901: IFFALSE 39966
// begin weapons := AvailableWeaponList ( k ) ;
39903: LD_ADDR_VAR 0 9
39907: PUSH
39908: LD_VAR 0 6
39912: PPUSH
39913: CALL_OW 478
39917: ST_TO_ADDR
// if not weapons then
39918: LD_VAR 0 9
39922: NOT
39923: IFFALSE 39927
// continue ;
39925: GO 39900
// if weapon in weapons then
39927: LD_VAR 0 8
39931: PUSH
39932: LD_VAR 0 9
39936: IN
39937: IFFALSE 39964
// begin result := [ i , weapon ] ;
39939: LD_ADDR_VAR 0 3
39943: PUSH
39944: LD_VAR 0 4
39948: PUSH
39949: LD_VAR 0 8
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: ST_TO_ADDR
// exit ;
39958: POP
39959: POP
39960: POP
39961: POP
39962: GO 39972
// end ; end ;
39964: GO 39900
39966: POP
39967: POP
// end ;
39968: GO 39786
39970: POP
39971: POP
// end ;
39972: LD_VAR 0 3
39976: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39977: LD_INT 0
39979: PPUSH
// if not side or side > 8 then
39980: LD_VAR 0 3
39984: NOT
39985: PUSH
39986: LD_VAR 0 3
39990: PUSH
39991: LD_INT 8
39993: GREATER
39994: OR
39995: IFFALSE 39999
// exit ;
39997: GO 40058
// if not range then
39999: LD_VAR 0 4
40003: NOT
40004: IFFALSE 40015
// range := - 12 ;
40006: LD_ADDR_VAR 0 4
40010: PUSH
40011: LD_INT 12
40013: NEG
40014: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40015: LD_VAR 0 1
40019: PPUSH
40020: LD_VAR 0 2
40024: PPUSH
40025: LD_VAR 0 3
40029: PPUSH
40030: LD_VAR 0 4
40034: PPUSH
40035: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40039: LD_VAR 0 1
40043: PPUSH
40044: LD_VAR 0 2
40048: PPUSH
40049: LD_VAR 0 3
40053: PPUSH
40054: CALL_OW 331
// end ;
40058: LD_VAR 0 5
40062: RET
// export function Video ( mode ) ; begin
40063: LD_INT 0
40065: PPUSH
// ingame_video = mode ;
40066: LD_ADDR_OWVAR 52
40070: PUSH
40071: LD_VAR 0 1
40075: ST_TO_ADDR
// interface_hidden = mode ;
40076: LD_ADDR_OWVAR 54
40080: PUSH
40081: LD_VAR 0 1
40085: ST_TO_ADDR
// end ;
40086: LD_VAR 0 2
40090: RET
// export function Join ( array , element ) ; begin
40091: LD_INT 0
40093: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40094: LD_ADDR_VAR 0 3
40098: PUSH
40099: LD_VAR 0 1
40103: PPUSH
40104: LD_VAR 0 1
40108: PUSH
40109: LD_INT 1
40111: PLUS
40112: PPUSH
40113: LD_VAR 0 2
40117: PPUSH
40118: CALL_OW 1
40122: ST_TO_ADDR
// end ;
40123: LD_VAR 0 3
40127: RET
// export function JoinUnion ( array , element ) ; begin
40128: LD_INT 0
40130: PPUSH
// result := array union element ;
40131: LD_ADDR_VAR 0 3
40135: PUSH
40136: LD_VAR 0 1
40140: PUSH
40141: LD_VAR 0 2
40145: UNION
40146: ST_TO_ADDR
// end ;
40147: LD_VAR 0 3
40151: RET
// export function GetBehemoths ( side ) ; begin
40152: LD_INT 0
40154: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40155: LD_ADDR_VAR 0 2
40159: PUSH
40160: LD_INT 22
40162: PUSH
40163: LD_VAR 0 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 31
40174: PUSH
40175: LD_INT 25
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PPUSH
40186: CALL_OW 69
40190: ST_TO_ADDR
// end ;
40191: LD_VAR 0 2
40195: RET
// export function Shuffle ( array ) ; var i , index ; begin
40196: LD_INT 0
40198: PPUSH
40199: PPUSH
40200: PPUSH
// result := [ ] ;
40201: LD_ADDR_VAR 0 2
40205: PUSH
40206: EMPTY
40207: ST_TO_ADDR
// if not array then
40208: LD_VAR 0 1
40212: NOT
40213: IFFALSE 40217
// exit ;
40215: GO 40316
// Randomize ;
40217: CALL_OW 10
// for i = array downto 1 do
40221: LD_ADDR_VAR 0 3
40225: PUSH
40226: DOUBLE
40227: LD_VAR 0 1
40231: INC
40232: ST_TO_ADDR
40233: LD_INT 1
40235: PUSH
40236: FOR_DOWNTO
40237: IFFALSE 40314
// begin index := rand ( 1 , array ) ;
40239: LD_ADDR_VAR 0 4
40243: PUSH
40244: LD_INT 1
40246: PPUSH
40247: LD_VAR 0 1
40251: PPUSH
40252: CALL_OW 12
40256: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40257: LD_ADDR_VAR 0 2
40261: PUSH
40262: LD_VAR 0 2
40266: PPUSH
40267: LD_VAR 0 2
40271: PUSH
40272: LD_INT 1
40274: PLUS
40275: PPUSH
40276: LD_VAR 0 1
40280: PUSH
40281: LD_VAR 0 4
40285: ARRAY
40286: PPUSH
40287: CALL_OW 2
40291: ST_TO_ADDR
// array := Delete ( array , index ) ;
40292: LD_ADDR_VAR 0 1
40296: PUSH
40297: LD_VAR 0 1
40301: PPUSH
40302: LD_VAR 0 4
40306: PPUSH
40307: CALL_OW 3
40311: ST_TO_ADDR
// end ;
40312: GO 40236
40314: POP
40315: POP
// end ;
40316: LD_VAR 0 2
40320: RET
// export function GetBaseMaterials ( base ) ; begin
40321: LD_INT 0
40323: PPUSH
// result := [ 0 , 0 , 0 ] ;
40324: LD_ADDR_VAR 0 2
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: ST_TO_ADDR
// if not base then
40343: LD_VAR 0 1
40347: NOT
40348: IFFALSE 40352
// exit ;
40350: GO 40401
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40352: LD_ADDR_VAR 0 2
40356: PUSH
40357: LD_VAR 0 1
40361: PPUSH
40362: LD_INT 1
40364: PPUSH
40365: CALL_OW 275
40369: PUSH
40370: LD_VAR 0 1
40374: PPUSH
40375: LD_INT 2
40377: PPUSH
40378: CALL_OW 275
40382: PUSH
40383: LD_VAR 0 1
40387: PPUSH
40388: LD_INT 3
40390: PPUSH
40391: CALL_OW 275
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: ST_TO_ADDR
// end ;
40401: LD_VAR 0 2
40405: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40406: LD_INT 0
40408: PPUSH
40409: PPUSH
// result := array ;
40410: LD_ADDR_VAR 0 3
40414: PUSH
40415: LD_VAR 0 1
40419: ST_TO_ADDR
// if size >= result then
40420: LD_VAR 0 2
40424: PUSH
40425: LD_VAR 0 3
40429: GREATEREQUAL
40430: IFFALSE 40434
// exit ;
40432: GO 40484
// if size then
40434: LD_VAR 0 2
40438: IFFALSE 40484
// for i := array downto size do
40440: LD_ADDR_VAR 0 4
40444: PUSH
40445: DOUBLE
40446: LD_VAR 0 1
40450: INC
40451: ST_TO_ADDR
40452: LD_VAR 0 2
40456: PUSH
40457: FOR_DOWNTO
40458: IFFALSE 40482
// result := Delete ( result , result ) ;
40460: LD_ADDR_VAR 0 3
40464: PUSH
40465: LD_VAR 0 3
40469: PPUSH
40470: LD_VAR 0 3
40474: PPUSH
40475: CALL_OW 3
40479: ST_TO_ADDR
40480: GO 40457
40482: POP
40483: POP
// end ;
40484: LD_VAR 0 3
40488: RET
// export function ComExit ( unit ) ; var tmp ; begin
40489: LD_INT 0
40491: PPUSH
40492: PPUSH
// if not IsInUnit ( unit ) then
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 310
40502: NOT
40503: IFFALSE 40507
// exit ;
40505: GO 40567
// tmp := IsInUnit ( unit ) ;
40507: LD_ADDR_VAR 0 3
40511: PUSH
40512: LD_VAR 0 1
40516: PPUSH
40517: CALL_OW 310
40521: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40522: LD_VAR 0 3
40526: PPUSH
40527: CALL_OW 247
40531: PUSH
40532: LD_INT 2
40534: EQUAL
40535: IFFALSE 40548
// ComExitVehicle ( unit ) else
40537: LD_VAR 0 1
40541: PPUSH
40542: CALL_OW 121
40546: GO 40557
// ComExitBuilding ( unit ) ;
40548: LD_VAR 0 1
40552: PPUSH
40553: CALL_OW 122
// result := tmp ;
40557: LD_ADDR_VAR 0 2
40561: PUSH
40562: LD_VAR 0 3
40566: ST_TO_ADDR
// end ;
40567: LD_VAR 0 2
40571: RET
// export function ComExitAll ( units ) ; var i ; begin
40572: LD_INT 0
40574: PPUSH
40575: PPUSH
// if not units then
40576: LD_VAR 0 1
40580: NOT
40581: IFFALSE 40585
// exit ;
40583: GO 40611
// for i in units do
40585: LD_ADDR_VAR 0 3
40589: PUSH
40590: LD_VAR 0 1
40594: PUSH
40595: FOR_IN
40596: IFFALSE 40609
// ComExit ( i ) ;
40598: LD_VAR 0 3
40602: PPUSH
40603: CALL 40489 0 1
40607: GO 40595
40609: POP
40610: POP
// end ;
40611: LD_VAR 0 2
40615: RET
// export function ResetHc ; begin
40616: LD_INT 0
40618: PPUSH
// InitHc ;
40619: CALL_OW 19
// hc_importance := 0 ;
40623: LD_ADDR_OWVAR 32
40627: PUSH
40628: LD_INT 0
40630: ST_TO_ADDR
// end ;
40631: LD_VAR 0 1
40635: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40636: LD_INT 0
40638: PPUSH
40639: PPUSH
40640: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40641: LD_ADDR_VAR 0 6
40645: PUSH
40646: LD_VAR 0 1
40650: PUSH
40651: LD_VAR 0 3
40655: PLUS
40656: PUSH
40657: LD_INT 2
40659: DIV
40660: ST_TO_ADDR
// if _x < 0 then
40661: LD_VAR 0 6
40665: PUSH
40666: LD_INT 0
40668: LESS
40669: IFFALSE 40686
// _x := _x * - 1 ;
40671: LD_ADDR_VAR 0 6
40675: PUSH
40676: LD_VAR 0 6
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: MUL
40685: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40686: LD_ADDR_VAR 0 7
40690: PUSH
40691: LD_VAR 0 2
40695: PUSH
40696: LD_VAR 0 4
40700: PLUS
40701: PUSH
40702: LD_INT 2
40704: DIV
40705: ST_TO_ADDR
// if _y < 0 then
40706: LD_VAR 0 7
40710: PUSH
40711: LD_INT 0
40713: LESS
40714: IFFALSE 40731
// _y := _y * - 1 ;
40716: LD_ADDR_VAR 0 7
40720: PUSH
40721: LD_VAR 0 7
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: MUL
40730: ST_TO_ADDR
// result := [ _x , _y ] ;
40731: LD_ADDR_VAR 0 5
40735: PUSH
40736: LD_VAR 0 6
40740: PUSH
40741: LD_VAR 0 7
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: ST_TO_ADDR
// end ;
40750: LD_VAR 0 5
40754: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40755: LD_INT 0
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
// task := GetTaskList ( unit ) ;
40761: LD_ADDR_VAR 0 7
40765: PUSH
40766: LD_VAR 0 1
40770: PPUSH
40771: CALL_OW 437
40775: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40776: LD_VAR 0 7
40780: NOT
40781: PUSH
40782: LD_VAR 0 1
40786: PPUSH
40787: LD_VAR 0 2
40791: PPUSH
40792: CALL_OW 308
40796: NOT
40797: AND
40798: IFFALSE 40802
// exit ;
40800: GO 40920
// if IsInArea ( unit , area ) then
40802: LD_VAR 0 1
40806: PPUSH
40807: LD_VAR 0 2
40811: PPUSH
40812: CALL_OW 308
40816: IFFALSE 40834
// begin ComMoveToArea ( unit , goAway ) ;
40818: LD_VAR 0 1
40822: PPUSH
40823: LD_VAR 0 3
40827: PPUSH
40828: CALL_OW 113
// exit ;
40832: GO 40920
// end ; if task [ 1 ] [ 1 ] <> M then
40834: LD_VAR 0 7
40838: PUSH
40839: LD_INT 1
40841: ARRAY
40842: PUSH
40843: LD_INT 1
40845: ARRAY
40846: PUSH
40847: LD_STRING M
40849: NONEQUAL
40850: IFFALSE 40854
// exit ;
40852: GO 40920
// x := task [ 1 ] [ 2 ] ;
40854: LD_ADDR_VAR 0 5
40858: PUSH
40859: LD_VAR 0 7
40863: PUSH
40864: LD_INT 1
40866: ARRAY
40867: PUSH
40868: LD_INT 2
40870: ARRAY
40871: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40872: LD_ADDR_VAR 0 6
40876: PUSH
40877: LD_VAR 0 7
40881: PUSH
40882: LD_INT 1
40884: ARRAY
40885: PUSH
40886: LD_INT 3
40888: ARRAY
40889: ST_TO_ADDR
// if InArea ( x , y , area ) then
40890: LD_VAR 0 5
40894: PPUSH
40895: LD_VAR 0 6
40899: PPUSH
40900: LD_VAR 0 2
40904: PPUSH
40905: CALL_OW 309
40909: IFFALSE 40920
// ComStop ( unit ) ;
40911: LD_VAR 0 1
40915: PPUSH
40916: CALL_OW 141
// end ;
40920: LD_VAR 0 4
40924: RET
// export function Abs ( value ) ; begin
40925: LD_INT 0
40927: PPUSH
// result := value ;
40928: LD_ADDR_VAR 0 2
40932: PUSH
40933: LD_VAR 0 1
40937: ST_TO_ADDR
// if value < 0 then
40938: LD_VAR 0 1
40942: PUSH
40943: LD_INT 0
40945: LESS
40946: IFFALSE 40963
// result := value * - 1 ;
40948: LD_ADDR_VAR 0 2
40952: PUSH
40953: LD_VAR 0 1
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: MUL
40962: ST_TO_ADDR
// end ;
40963: LD_VAR 0 2
40967: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40968: LD_INT 0
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
40974: PPUSH
40975: PPUSH
40976: PPUSH
40977: PPUSH
// if not unit or not building then
40978: LD_VAR 0 1
40982: NOT
40983: PUSH
40984: LD_VAR 0 2
40988: NOT
40989: OR
40990: IFFALSE 40994
// exit ;
40992: GO 41220
// x := GetX ( building ) ;
40994: LD_ADDR_VAR 0 4
40998: PUSH
40999: LD_VAR 0 2
41003: PPUSH
41004: CALL_OW 250
41008: ST_TO_ADDR
// y := GetY ( building ) ;
41009: LD_ADDR_VAR 0 6
41013: PUSH
41014: LD_VAR 0 2
41018: PPUSH
41019: CALL_OW 251
41023: ST_TO_ADDR
// d := GetDir ( building ) ;
41024: LD_ADDR_VAR 0 8
41028: PUSH
41029: LD_VAR 0 2
41033: PPUSH
41034: CALL_OW 254
41038: ST_TO_ADDR
// r := 4 ;
41039: LD_ADDR_VAR 0 9
41043: PUSH
41044: LD_INT 4
41046: ST_TO_ADDR
// for i := 1 to 5 do
41047: LD_ADDR_VAR 0 10
41051: PUSH
41052: DOUBLE
41053: LD_INT 1
41055: DEC
41056: ST_TO_ADDR
41057: LD_INT 5
41059: PUSH
41060: FOR_TO
41061: IFFALSE 41218
// begin _x := ShiftX ( x , d , r + i ) ;
41063: LD_ADDR_VAR 0 5
41067: PUSH
41068: LD_VAR 0 4
41072: PPUSH
41073: LD_VAR 0 8
41077: PPUSH
41078: LD_VAR 0 9
41082: PUSH
41083: LD_VAR 0 10
41087: PLUS
41088: PPUSH
41089: CALL_OW 272
41093: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41094: LD_ADDR_VAR 0 7
41098: PUSH
41099: LD_VAR 0 6
41103: PPUSH
41104: LD_VAR 0 8
41108: PPUSH
41109: LD_VAR 0 9
41113: PUSH
41114: LD_VAR 0 10
41118: PLUS
41119: PPUSH
41120: CALL_OW 273
41124: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41125: LD_VAR 0 5
41129: PPUSH
41130: LD_VAR 0 7
41134: PPUSH
41135: CALL_OW 488
41139: PUSH
41140: LD_VAR 0 5
41144: PPUSH
41145: LD_VAR 0 7
41149: PPUSH
41150: CALL_OW 428
41154: PPUSH
41155: CALL_OW 247
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: IN
41170: NOT
41171: AND
41172: IFFALSE 41216
// begin ComMoveXY ( unit , _x , _y ) ;
41174: LD_VAR 0 1
41178: PPUSH
41179: LD_VAR 0 5
41183: PPUSH
41184: LD_VAR 0 7
41188: PPUSH
41189: CALL_OW 111
// result := [ _x , _y ] ;
41193: LD_ADDR_VAR 0 3
41197: PUSH
41198: LD_VAR 0 5
41202: PUSH
41203: LD_VAR 0 7
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: ST_TO_ADDR
// exit ;
41212: POP
41213: POP
41214: GO 41220
// end ; end ;
41216: GO 41060
41218: POP
41219: POP
// end ;
41220: LD_VAR 0 3
41224: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41225: LD_INT 0
41227: PPUSH
41228: PPUSH
41229: PPUSH
// result := 0 ;
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_INT 0
41237: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41238: LD_VAR 0 1
41242: PUSH
41243: LD_INT 0
41245: LESS
41246: PUSH
41247: LD_VAR 0 1
41251: PUSH
41252: LD_INT 8
41254: GREATER
41255: OR
41256: PUSH
41257: LD_VAR 0 2
41261: PUSH
41262: LD_INT 0
41264: LESS
41265: OR
41266: PUSH
41267: LD_VAR 0 2
41271: PUSH
41272: LD_INT 8
41274: GREATER
41275: OR
41276: IFFALSE 41280
// exit ;
41278: GO 41355
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41280: LD_ADDR_VAR 0 4
41284: PUSH
41285: LD_INT 22
41287: PUSH
41288: LD_VAR 0 2
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PPUSH
41297: CALL_OW 69
41301: PUSH
41302: FOR_IN
41303: IFFALSE 41353
// begin un := UnitShoot ( i ) ;
41305: LD_ADDR_VAR 0 5
41309: PUSH
41310: LD_VAR 0 4
41314: PPUSH
41315: CALL_OW 504
41319: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41320: LD_VAR 0 5
41324: PPUSH
41325: CALL_OW 255
41329: PUSH
41330: LD_VAR 0 1
41334: EQUAL
41335: IFFALSE 41351
// begin result := un ;
41337: LD_ADDR_VAR 0 3
41341: PUSH
41342: LD_VAR 0 5
41346: ST_TO_ADDR
// exit ;
41347: POP
41348: POP
41349: GO 41355
// end ; end ;
41351: GO 41302
41353: POP
41354: POP
// end ;
41355: LD_VAR 0 3
41359: RET
// export function GetCargoBay ( units ) ; begin
41360: LD_INT 0
41362: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41363: LD_ADDR_VAR 0 2
41367: PUSH
41368: LD_VAR 0 1
41372: PPUSH
41373: LD_INT 2
41375: PUSH
41376: LD_INT 34
41378: PUSH
41379: LD_INT 12
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 34
41388: PUSH
41389: LD_INT 51
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 34
41398: PUSH
41399: LD_INT 32
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 34
41408: PUSH
41409: LD_INT 89
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: PPUSH
41423: CALL_OW 72
41427: ST_TO_ADDR
// end ;
41428: LD_VAR 0 2
41432: RET
// export function Negate ( value ) ; begin
41433: LD_INT 0
41435: PPUSH
// result := not value ;
41436: LD_ADDR_VAR 0 2
41440: PUSH
41441: LD_VAR 0 1
41445: NOT
41446: ST_TO_ADDR
// end ;
41447: LD_VAR 0 2
41451: RET
// export function Inc ( value ) ; begin
41452: LD_INT 0
41454: PPUSH
// result := value + 1 ;
41455: LD_ADDR_VAR 0 2
41459: PUSH
41460: LD_VAR 0 1
41464: PUSH
41465: LD_INT 1
41467: PLUS
41468: ST_TO_ADDR
// end ;
41469: LD_VAR 0 2
41473: RET
// export function Dec ( value ) ; begin
41474: LD_INT 0
41476: PPUSH
// result := value - 1 ;
41477: LD_ADDR_VAR 0 2
41481: PUSH
41482: LD_VAR 0 1
41486: PUSH
41487: LD_INT 1
41489: MINUS
41490: ST_TO_ADDR
// end ;
41491: LD_VAR 0 2
41495: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41496: LD_INT 0
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41506: LD_VAR 0 1
41510: PPUSH
41511: LD_VAR 0 2
41515: PPUSH
41516: CALL_OW 488
41520: NOT
41521: PUSH
41522: LD_VAR 0 3
41526: PPUSH
41527: LD_VAR 0 4
41531: PPUSH
41532: CALL_OW 488
41536: NOT
41537: OR
41538: IFFALSE 41551
// begin result := - 1 ;
41540: LD_ADDR_VAR 0 5
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: ST_TO_ADDR
// exit ;
41549: GO 41786
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41551: LD_ADDR_VAR 0 12
41555: PUSH
41556: LD_VAR 0 1
41560: PPUSH
41561: LD_VAR 0 2
41565: PPUSH
41566: LD_VAR 0 3
41570: PPUSH
41571: LD_VAR 0 4
41575: PPUSH
41576: CALL 40636 0 4
41580: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41581: LD_ADDR_VAR 0 11
41585: PUSH
41586: LD_VAR 0 1
41590: PPUSH
41591: LD_VAR 0 2
41595: PPUSH
41596: LD_VAR 0 12
41600: PUSH
41601: LD_INT 1
41603: ARRAY
41604: PPUSH
41605: LD_VAR 0 12
41609: PUSH
41610: LD_INT 2
41612: ARRAY
41613: PPUSH
41614: CALL_OW 298
41618: ST_TO_ADDR
// distance := 9999 ;
41619: LD_ADDR_VAR 0 10
41623: PUSH
41624: LD_INT 9999
41626: ST_TO_ADDR
// for i := 0 to 5 do
41627: LD_ADDR_VAR 0 6
41631: PUSH
41632: DOUBLE
41633: LD_INT 0
41635: DEC
41636: ST_TO_ADDR
41637: LD_INT 5
41639: PUSH
41640: FOR_TO
41641: IFFALSE 41784
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41643: LD_ADDR_VAR 0 7
41647: PUSH
41648: LD_VAR 0 1
41652: PPUSH
41653: LD_VAR 0 6
41657: PPUSH
41658: LD_VAR 0 11
41662: PPUSH
41663: CALL_OW 272
41667: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41668: LD_ADDR_VAR 0 8
41672: PUSH
41673: LD_VAR 0 2
41677: PPUSH
41678: LD_VAR 0 6
41682: PPUSH
41683: LD_VAR 0 11
41687: PPUSH
41688: CALL_OW 273
41692: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41693: LD_VAR 0 7
41697: PPUSH
41698: LD_VAR 0 8
41702: PPUSH
41703: CALL_OW 488
41707: NOT
41708: IFFALSE 41712
// continue ;
41710: GO 41640
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41712: LD_ADDR_VAR 0 9
41716: PUSH
41717: LD_VAR 0 12
41721: PUSH
41722: LD_INT 1
41724: ARRAY
41725: PPUSH
41726: LD_VAR 0 12
41730: PUSH
41731: LD_INT 2
41733: ARRAY
41734: PPUSH
41735: LD_VAR 0 7
41739: PPUSH
41740: LD_VAR 0 8
41744: PPUSH
41745: CALL_OW 298
41749: ST_TO_ADDR
// if tmp < distance then
41750: LD_VAR 0 9
41754: PUSH
41755: LD_VAR 0 10
41759: LESS
41760: IFFALSE 41782
// begin result := i ;
41762: LD_ADDR_VAR 0 5
41766: PUSH
41767: LD_VAR 0 6
41771: ST_TO_ADDR
// distance := tmp ;
41772: LD_ADDR_VAR 0 10
41776: PUSH
41777: LD_VAR 0 9
41781: ST_TO_ADDR
// end ; end ;
41782: GO 41640
41784: POP
41785: POP
// end ;
41786: LD_VAR 0 5
41790: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41791: LD_INT 0
41793: PPUSH
41794: PPUSH
// if not driver or not IsInUnit ( driver ) then
41795: LD_VAR 0 1
41799: NOT
41800: PUSH
41801: LD_VAR 0 1
41805: PPUSH
41806: CALL_OW 310
41810: NOT
41811: OR
41812: IFFALSE 41816
// exit ;
41814: GO 41906
// vehicle := IsInUnit ( driver ) ;
41816: LD_ADDR_VAR 0 3
41820: PUSH
41821: LD_VAR 0 1
41825: PPUSH
41826: CALL_OW 310
41830: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41831: LD_VAR 0 1
41835: PPUSH
41836: LD_STRING \
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: PUSH
41866: LD_STRING E
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: LD_VAR 0 3
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PPUSH
41902: CALL_OW 446
// end ;
41906: LD_VAR 0 2
41910: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41911: LD_INT 0
41913: PPUSH
41914: PPUSH
// if not driver or not IsInUnit ( driver ) then
41915: LD_VAR 0 1
41919: NOT
41920: PUSH
41921: LD_VAR 0 1
41925: PPUSH
41926: CALL_OW 310
41930: NOT
41931: OR
41932: IFFALSE 41936
// exit ;
41934: GO 42026
// vehicle := IsInUnit ( driver ) ;
41936: LD_ADDR_VAR 0 3
41940: PUSH
41941: LD_VAR 0 1
41945: PPUSH
41946: CALL_OW 310
41950: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41951: LD_VAR 0 1
41955: PPUSH
41956: LD_STRING \
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: PUSH
41986: LD_STRING E
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_VAR 0 3
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PPUSH
42022: CALL_OW 447
// end ;
42026: LD_VAR 0 2
42030: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42031: LD_INT 0
42033: PPUSH
42034: PPUSH
42035: PPUSH
// tmp := [ ] ;
42036: LD_ADDR_VAR 0 5
42040: PUSH
42041: EMPTY
42042: ST_TO_ADDR
// for i in units do
42043: LD_ADDR_VAR 0 4
42047: PUSH
42048: LD_VAR 0 1
42052: PUSH
42053: FOR_IN
42054: IFFALSE 42092
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42056: LD_ADDR_VAR 0 5
42060: PUSH
42061: LD_VAR 0 5
42065: PPUSH
42066: LD_VAR 0 5
42070: PUSH
42071: LD_INT 1
42073: PLUS
42074: PPUSH
42075: LD_VAR 0 4
42079: PPUSH
42080: CALL_OW 256
42084: PPUSH
42085: CALL_OW 2
42089: ST_TO_ADDR
42090: GO 42053
42092: POP
42093: POP
// if not tmp then
42094: LD_VAR 0 5
42098: NOT
42099: IFFALSE 42103
// exit ;
42101: GO 42151
// if asc then
42103: LD_VAR 0 2
42107: IFFALSE 42131
// result := SortListByListAsc ( units , tmp ) else
42109: LD_ADDR_VAR 0 3
42113: PUSH
42114: LD_VAR 0 1
42118: PPUSH
42119: LD_VAR 0 5
42123: PPUSH
42124: CALL_OW 76
42128: ST_TO_ADDR
42129: GO 42151
// result := SortListByListDesc ( units , tmp ) ;
42131: LD_ADDR_VAR 0 3
42135: PUSH
42136: LD_VAR 0 1
42140: PPUSH
42141: LD_VAR 0 5
42145: PPUSH
42146: CALL_OW 77
42150: ST_TO_ADDR
// end ;
42151: LD_VAR 0 3
42155: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42156: LD_INT 0
42158: PPUSH
42159: PPUSH
// task := GetTaskList ( mech ) ;
42160: LD_ADDR_VAR 0 4
42164: PUSH
42165: LD_VAR 0 1
42169: PPUSH
42170: CALL_OW 437
42174: ST_TO_ADDR
// if not task then
42175: LD_VAR 0 4
42179: NOT
42180: IFFALSE 42184
// exit ;
42182: GO 42226
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42184: LD_ADDR_VAR 0 3
42188: PUSH
42189: LD_VAR 0 4
42193: PUSH
42194: LD_INT 1
42196: ARRAY
42197: PUSH
42198: LD_INT 1
42200: ARRAY
42201: PUSH
42202: LD_STRING r
42204: EQUAL
42205: PUSH
42206: LD_VAR 0 4
42210: PUSH
42211: LD_INT 1
42213: ARRAY
42214: PUSH
42215: LD_INT 4
42217: ARRAY
42218: PUSH
42219: LD_VAR 0 2
42223: EQUAL
42224: AND
42225: ST_TO_ADDR
// end ;
42226: LD_VAR 0 3
42230: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42231: LD_INT 0
42233: PPUSH
// SetDir ( unit , d ) ;
42234: LD_VAR 0 1
42238: PPUSH
42239: LD_VAR 0 4
42243: PPUSH
42244: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42248: LD_VAR 0 1
42252: PPUSH
42253: LD_VAR 0 2
42257: PPUSH
42258: LD_VAR 0 3
42262: PPUSH
42263: LD_VAR 0 5
42267: PPUSH
42268: CALL_OW 48
// end ;
42272: LD_VAR 0 6
42276: RET
// export function ToNaturalNumber ( number ) ; begin
42277: LD_INT 0
42279: PPUSH
// result := number div 1 ;
42280: LD_ADDR_VAR 0 2
42284: PUSH
42285: LD_VAR 0 1
42289: PUSH
42290: LD_INT 1
42292: DIV
42293: ST_TO_ADDR
// if number < 0 then
42294: LD_VAR 0 1
42298: PUSH
42299: LD_INT 0
42301: LESS
42302: IFFALSE 42312
// result := 0 ;
42304: LD_ADDR_VAR 0 2
42308: PUSH
42309: LD_INT 0
42311: ST_TO_ADDR
// end ;
42312: LD_VAR 0 2
42316: RET
// export function SortByClass ( units , class ) ; var un ; begin
42317: LD_INT 0
42319: PPUSH
42320: PPUSH
// if not units or not class then
42321: LD_VAR 0 1
42325: NOT
42326: PUSH
42327: LD_VAR 0 2
42331: NOT
42332: OR
42333: IFFALSE 42337
// exit ;
42335: GO 42432
// result := [ ] ;
42337: LD_ADDR_VAR 0 3
42341: PUSH
42342: EMPTY
42343: ST_TO_ADDR
// for un in units do
42344: LD_ADDR_VAR 0 4
42348: PUSH
42349: LD_VAR 0 1
42353: PUSH
42354: FOR_IN
42355: IFFALSE 42430
// if GetClass ( un ) = class then
42357: LD_VAR 0 4
42361: PPUSH
42362: CALL_OW 257
42366: PUSH
42367: LD_VAR 0 2
42371: EQUAL
42372: IFFALSE 42399
// result := Insert ( result , 1 , un ) else
42374: LD_ADDR_VAR 0 3
42378: PUSH
42379: LD_VAR 0 3
42383: PPUSH
42384: LD_INT 1
42386: PPUSH
42387: LD_VAR 0 4
42391: PPUSH
42392: CALL_OW 2
42396: ST_TO_ADDR
42397: GO 42428
// result := Replace ( result , result + 1 , un ) ;
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: LD_VAR 0 3
42408: PPUSH
42409: LD_VAR 0 3
42413: PUSH
42414: LD_INT 1
42416: PLUS
42417: PPUSH
42418: LD_VAR 0 4
42422: PPUSH
42423: CALL_OW 1
42427: ST_TO_ADDR
42428: GO 42354
42430: POP
42431: POP
// end ;
42432: LD_VAR 0 3
42436: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42437: LD_INT 0
42439: PPUSH
42440: PPUSH
42441: PPUSH
42442: PPUSH
42443: PPUSH
42444: PPUSH
42445: PPUSH
// result := [ ] ;
42446: LD_ADDR_VAR 0 4
42450: PUSH
42451: EMPTY
42452: ST_TO_ADDR
// if x - r < 0 then
42453: LD_VAR 0 1
42457: PUSH
42458: LD_VAR 0 3
42462: MINUS
42463: PUSH
42464: LD_INT 0
42466: LESS
42467: IFFALSE 42479
// min_x := 0 else
42469: LD_ADDR_VAR 0 8
42473: PUSH
42474: LD_INT 0
42476: ST_TO_ADDR
42477: GO 42495
// min_x := x - r ;
42479: LD_ADDR_VAR 0 8
42483: PUSH
42484: LD_VAR 0 1
42488: PUSH
42489: LD_VAR 0 3
42493: MINUS
42494: ST_TO_ADDR
// if y - r < 0 then
42495: LD_VAR 0 2
42499: PUSH
42500: LD_VAR 0 3
42504: MINUS
42505: PUSH
42506: LD_INT 0
42508: LESS
42509: IFFALSE 42521
// min_y := 0 else
42511: LD_ADDR_VAR 0 7
42515: PUSH
42516: LD_INT 0
42518: ST_TO_ADDR
42519: GO 42537
// min_y := y - r ;
42521: LD_ADDR_VAR 0 7
42525: PUSH
42526: LD_VAR 0 2
42530: PUSH
42531: LD_VAR 0 3
42535: MINUS
42536: ST_TO_ADDR
// max_x := x + r ;
42537: LD_ADDR_VAR 0 9
42541: PUSH
42542: LD_VAR 0 1
42546: PUSH
42547: LD_VAR 0 3
42551: PLUS
42552: ST_TO_ADDR
// max_y := y + r ;
42553: LD_ADDR_VAR 0 10
42557: PUSH
42558: LD_VAR 0 2
42562: PUSH
42563: LD_VAR 0 3
42567: PLUS
42568: ST_TO_ADDR
// for _x = min_x to max_x do
42569: LD_ADDR_VAR 0 5
42573: PUSH
42574: DOUBLE
42575: LD_VAR 0 8
42579: DEC
42580: ST_TO_ADDR
42581: LD_VAR 0 9
42585: PUSH
42586: FOR_TO
42587: IFFALSE 42688
// for _y = min_y to max_y do
42589: LD_ADDR_VAR 0 6
42593: PUSH
42594: DOUBLE
42595: LD_VAR 0 7
42599: DEC
42600: ST_TO_ADDR
42601: LD_VAR 0 10
42605: PUSH
42606: FOR_TO
42607: IFFALSE 42684
// begin if not ValidHex ( _x , _y ) then
42609: LD_VAR 0 5
42613: PPUSH
42614: LD_VAR 0 6
42618: PPUSH
42619: CALL_OW 488
42623: NOT
42624: IFFALSE 42628
// continue ;
42626: GO 42606
// if GetResourceTypeXY ( _x , _y ) then
42628: LD_VAR 0 5
42632: PPUSH
42633: LD_VAR 0 6
42637: PPUSH
42638: CALL_OW 283
42642: IFFALSE 42682
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42644: LD_ADDR_VAR 0 4
42648: PUSH
42649: LD_VAR 0 4
42653: PPUSH
42654: LD_VAR 0 4
42658: PUSH
42659: LD_INT 1
42661: PLUS
42662: PPUSH
42663: LD_VAR 0 5
42667: PUSH
42668: LD_VAR 0 6
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PPUSH
42677: CALL_OW 1
42681: ST_TO_ADDR
// end ;
42682: GO 42606
42684: POP
42685: POP
42686: GO 42586
42688: POP
42689: POP
// end ;
42690: LD_VAR 0 4
42694: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42695: LD_INT 0
42697: PPUSH
42698: PPUSH
42699: PPUSH
42700: PPUSH
42701: PPUSH
42702: PPUSH
42703: PPUSH
42704: PPUSH
// if not units then
42705: LD_VAR 0 1
42709: NOT
42710: IFFALSE 42714
// exit ;
42712: GO 43238
// result := UnitFilter ( units , [ f_ok ] ) ;
42714: LD_ADDR_VAR 0 3
42718: PUSH
42719: LD_VAR 0 1
42723: PPUSH
42724: LD_INT 50
42726: PUSH
42727: EMPTY
42728: LIST
42729: PPUSH
42730: CALL_OW 72
42734: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42735: LD_ADDR_VAR 0 8
42739: PUSH
42740: LD_VAR 0 1
42744: PUSH
42745: LD_INT 1
42747: ARRAY
42748: PPUSH
42749: CALL_OW 255
42753: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42754: LD_ADDR_VAR 0 10
42758: PUSH
42759: LD_INT 29
42761: PUSH
42762: LD_INT 91
42764: PUSH
42765: LD_INT 49
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: ST_TO_ADDR
// if not result then
42773: LD_VAR 0 3
42777: NOT
42778: IFFALSE 42782
// exit ;
42780: GO 43238
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42782: LD_ADDR_VAR 0 5
42786: PUSH
42787: LD_INT 81
42789: PUSH
42790: LD_VAR 0 8
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PPUSH
42799: CALL_OW 69
42803: ST_TO_ADDR
// for i in result do
42804: LD_ADDR_VAR 0 4
42808: PUSH
42809: LD_VAR 0 3
42813: PUSH
42814: FOR_IN
42815: IFFALSE 43236
// begin tag := GetTag ( i ) + 1 ;
42817: LD_ADDR_VAR 0 9
42821: PUSH
42822: LD_VAR 0 4
42826: PPUSH
42827: CALL_OW 110
42831: PUSH
42832: LD_INT 1
42834: PLUS
42835: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42836: LD_ADDR_VAR 0 7
42840: PUSH
42841: LD_VAR 0 4
42845: PPUSH
42846: CALL_OW 250
42850: PPUSH
42851: LD_VAR 0 4
42855: PPUSH
42856: CALL_OW 251
42860: PPUSH
42861: LD_INT 6
42863: PPUSH
42864: CALL 42437 0 3
42868: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42869: LD_VAR 0 4
42873: PPUSH
42874: CALL_OW 247
42878: PUSH
42879: LD_INT 2
42881: EQUAL
42882: PUSH
42883: LD_VAR 0 7
42887: AND
42888: PUSH
42889: LD_VAR 0 4
42893: PPUSH
42894: CALL_OW 264
42898: PUSH
42899: LD_VAR 0 10
42903: IN
42904: NOT
42905: AND
42906: IFFALSE 42945
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42908: LD_VAR 0 4
42912: PPUSH
42913: LD_VAR 0 7
42917: PUSH
42918: LD_INT 1
42920: ARRAY
42921: PUSH
42922: LD_INT 1
42924: ARRAY
42925: PPUSH
42926: LD_VAR 0 7
42930: PUSH
42931: LD_INT 1
42933: ARRAY
42934: PUSH
42935: LD_INT 2
42937: ARRAY
42938: PPUSH
42939: CALL_OW 116
42943: GO 43234
// if path > tag then
42945: LD_VAR 0 2
42949: PUSH
42950: LD_VAR 0 9
42954: GREATER
42955: IFFALSE 43163
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42957: LD_ADDR_VAR 0 6
42961: PUSH
42962: LD_VAR 0 5
42966: PPUSH
42967: LD_INT 91
42969: PUSH
42970: LD_VAR 0 4
42974: PUSH
42975: LD_INT 8
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: PPUSH
42983: CALL_OW 72
42987: ST_TO_ADDR
// if nearEnemy then
42988: LD_VAR 0 6
42992: IFFALSE 43061
// begin if GetWeapon ( i ) = ru_time_lapser then
42994: LD_VAR 0 4
42998: PPUSH
42999: CALL_OW 264
43003: PUSH
43004: LD_INT 49
43006: EQUAL
43007: IFFALSE 43035
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43009: LD_VAR 0 4
43013: PPUSH
43014: LD_VAR 0 6
43018: PPUSH
43019: LD_VAR 0 4
43023: PPUSH
43024: CALL_OW 74
43028: PPUSH
43029: CALL_OW 112
43033: GO 43059
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43035: LD_VAR 0 4
43039: PPUSH
43040: LD_VAR 0 6
43044: PPUSH
43045: LD_VAR 0 4
43049: PPUSH
43050: CALL_OW 74
43054: PPUSH
43055: CALL 44163 0 2
// end else
43059: GO 43161
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43061: LD_VAR 0 4
43065: PPUSH
43066: LD_VAR 0 2
43070: PUSH
43071: LD_VAR 0 9
43075: ARRAY
43076: PUSH
43077: LD_INT 1
43079: ARRAY
43080: PPUSH
43081: LD_VAR 0 2
43085: PUSH
43086: LD_VAR 0 9
43090: ARRAY
43091: PUSH
43092: LD_INT 2
43094: ARRAY
43095: PPUSH
43096: CALL_OW 297
43100: PUSH
43101: LD_INT 6
43103: GREATER
43104: IFFALSE 43147
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43106: LD_VAR 0 4
43110: PPUSH
43111: LD_VAR 0 2
43115: PUSH
43116: LD_VAR 0 9
43120: ARRAY
43121: PUSH
43122: LD_INT 1
43124: ARRAY
43125: PPUSH
43126: LD_VAR 0 2
43130: PUSH
43131: LD_VAR 0 9
43135: ARRAY
43136: PUSH
43137: LD_INT 2
43139: ARRAY
43140: PPUSH
43141: CALL_OW 114
43145: GO 43161
// SetTag ( i , tag ) ;
43147: LD_VAR 0 4
43151: PPUSH
43152: LD_VAR 0 9
43156: PPUSH
43157: CALL_OW 109
// end else
43161: GO 43234
// if enemy then
43163: LD_VAR 0 5
43167: IFFALSE 43234
// begin if GetWeapon ( i ) = ru_time_lapser then
43169: LD_VAR 0 4
43173: PPUSH
43174: CALL_OW 264
43178: PUSH
43179: LD_INT 49
43181: EQUAL
43182: IFFALSE 43210
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43184: LD_VAR 0 4
43188: PPUSH
43189: LD_VAR 0 5
43193: PPUSH
43194: LD_VAR 0 4
43198: PPUSH
43199: CALL_OW 74
43203: PPUSH
43204: CALL_OW 112
43208: GO 43234
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43210: LD_VAR 0 4
43214: PPUSH
43215: LD_VAR 0 5
43219: PPUSH
43220: LD_VAR 0 4
43224: PPUSH
43225: CALL_OW 74
43229: PPUSH
43230: CALL 44163 0 2
// end ; end ;
43234: GO 42814
43236: POP
43237: POP
// end ;
43238: LD_VAR 0 3
43242: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43243: LD_INT 0
43245: PPUSH
43246: PPUSH
43247: PPUSH
// if not unit or IsInUnit ( unit ) then
43248: LD_VAR 0 1
43252: NOT
43253: PUSH
43254: LD_VAR 0 1
43258: PPUSH
43259: CALL_OW 310
43263: OR
43264: IFFALSE 43268
// exit ;
43266: GO 43359
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43268: LD_ADDR_VAR 0 4
43272: PUSH
43273: LD_VAR 0 1
43277: PPUSH
43278: CALL_OW 250
43282: PPUSH
43283: LD_VAR 0 2
43287: PPUSH
43288: LD_INT 1
43290: PPUSH
43291: CALL_OW 272
43295: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43296: LD_ADDR_VAR 0 5
43300: PUSH
43301: LD_VAR 0 1
43305: PPUSH
43306: CALL_OW 251
43310: PPUSH
43311: LD_VAR 0 2
43315: PPUSH
43316: LD_INT 1
43318: PPUSH
43319: CALL_OW 273
43323: ST_TO_ADDR
// if ValidHex ( x , y ) then
43324: LD_VAR 0 4
43328: PPUSH
43329: LD_VAR 0 5
43333: PPUSH
43334: CALL_OW 488
43338: IFFALSE 43359
// ComTurnXY ( unit , x , y ) ;
43340: LD_VAR 0 1
43344: PPUSH
43345: LD_VAR 0 4
43349: PPUSH
43350: LD_VAR 0 5
43354: PPUSH
43355: CALL_OW 118
// end ;
43359: LD_VAR 0 3
43363: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43364: LD_INT 0
43366: PPUSH
43367: PPUSH
// result := false ;
43368: LD_ADDR_VAR 0 3
43372: PUSH
43373: LD_INT 0
43375: ST_TO_ADDR
// if not units then
43376: LD_VAR 0 2
43380: NOT
43381: IFFALSE 43385
// exit ;
43383: GO 43430
// for i in units do
43385: LD_ADDR_VAR 0 4
43389: PUSH
43390: LD_VAR 0 2
43394: PUSH
43395: FOR_IN
43396: IFFALSE 43428
// if See ( side , i ) then
43398: LD_VAR 0 1
43402: PPUSH
43403: LD_VAR 0 4
43407: PPUSH
43408: CALL_OW 292
43412: IFFALSE 43426
// begin result := true ;
43414: LD_ADDR_VAR 0 3
43418: PUSH
43419: LD_INT 1
43421: ST_TO_ADDR
// exit ;
43422: POP
43423: POP
43424: GO 43430
// end ;
43426: GO 43395
43428: POP
43429: POP
// end ;
43430: LD_VAR 0 3
43434: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43435: LD_INT 0
43437: PPUSH
43438: PPUSH
43439: PPUSH
43440: PPUSH
// if not unit or not points then
43441: LD_VAR 0 1
43445: NOT
43446: PUSH
43447: LD_VAR 0 2
43451: NOT
43452: OR
43453: IFFALSE 43457
// exit ;
43455: GO 43547
// dist := 99999 ;
43457: LD_ADDR_VAR 0 5
43461: PUSH
43462: LD_INT 99999
43464: ST_TO_ADDR
// for i in points do
43465: LD_ADDR_VAR 0 4
43469: PUSH
43470: LD_VAR 0 2
43474: PUSH
43475: FOR_IN
43476: IFFALSE 43545
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43478: LD_ADDR_VAR 0 6
43482: PUSH
43483: LD_VAR 0 1
43487: PPUSH
43488: LD_VAR 0 4
43492: PUSH
43493: LD_INT 1
43495: ARRAY
43496: PPUSH
43497: LD_VAR 0 4
43501: PUSH
43502: LD_INT 2
43504: ARRAY
43505: PPUSH
43506: CALL_OW 297
43510: ST_TO_ADDR
// if tmpDist < dist then
43511: LD_VAR 0 6
43515: PUSH
43516: LD_VAR 0 5
43520: LESS
43521: IFFALSE 43543
// begin result := i ;
43523: LD_ADDR_VAR 0 3
43527: PUSH
43528: LD_VAR 0 4
43532: ST_TO_ADDR
// dist := tmpDist ;
43533: LD_ADDR_VAR 0 5
43537: PUSH
43538: LD_VAR 0 6
43542: ST_TO_ADDR
// end ; end ;
43543: GO 43475
43545: POP
43546: POP
// end ;
43547: LD_VAR 0 3
43551: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43552: LD_INT 0
43554: PPUSH
// uc_side := side ;
43555: LD_ADDR_OWVAR 20
43559: PUSH
43560: LD_VAR 0 1
43564: ST_TO_ADDR
// uc_nation := 3 ;
43565: LD_ADDR_OWVAR 21
43569: PUSH
43570: LD_INT 3
43572: ST_TO_ADDR
// vc_chassis := 25 ;
43573: LD_ADDR_OWVAR 37
43577: PUSH
43578: LD_INT 25
43580: ST_TO_ADDR
// vc_engine := engine_siberite ;
43581: LD_ADDR_OWVAR 39
43585: PUSH
43586: LD_INT 3
43588: ST_TO_ADDR
// vc_control := control_computer ;
43589: LD_ADDR_OWVAR 38
43593: PUSH
43594: LD_INT 3
43596: ST_TO_ADDR
// vc_weapon := 59 ;
43597: LD_ADDR_OWVAR 40
43601: PUSH
43602: LD_INT 59
43604: ST_TO_ADDR
// result := CreateVehicle ;
43605: LD_ADDR_VAR 0 5
43609: PUSH
43610: CALL_OW 45
43614: ST_TO_ADDR
// SetDir ( result , d ) ;
43615: LD_VAR 0 5
43619: PPUSH
43620: LD_VAR 0 4
43624: PPUSH
43625: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43629: LD_VAR 0 5
43633: PPUSH
43634: LD_VAR 0 2
43638: PPUSH
43639: LD_VAR 0 3
43643: PPUSH
43644: LD_INT 0
43646: PPUSH
43647: CALL_OW 48
// end ;
43651: LD_VAR 0 5
43655: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43656: LD_INT 0
43658: PPUSH
43659: PPUSH
43660: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43661: LD_ADDR_VAR 0 2
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43684: LD_VAR 0 1
43688: NOT
43689: PUSH
43690: LD_VAR 0 1
43694: PPUSH
43695: CALL_OW 264
43699: PUSH
43700: LD_INT 12
43702: PUSH
43703: LD_INT 51
43705: PUSH
43706: LD_INT 32
43708: PUSH
43709: LD_INT 89
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: IN
43718: NOT
43719: OR
43720: IFFALSE 43724
// exit ;
43722: GO 43822
// for i := 1 to 3 do
43724: LD_ADDR_VAR 0 3
43728: PUSH
43729: DOUBLE
43730: LD_INT 1
43732: DEC
43733: ST_TO_ADDR
43734: LD_INT 3
43736: PUSH
43737: FOR_TO
43738: IFFALSE 43820
// begin tmp := GetCargo ( cargo , i ) ;
43740: LD_ADDR_VAR 0 4
43744: PUSH
43745: LD_VAR 0 1
43749: PPUSH
43750: LD_VAR 0 3
43754: PPUSH
43755: CALL_OW 289
43759: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43760: LD_ADDR_VAR 0 2
43764: PUSH
43765: LD_VAR 0 2
43769: PPUSH
43770: LD_VAR 0 3
43774: PPUSH
43775: LD_VAR 0 4
43779: PPUSH
43780: CALL_OW 1
43784: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43785: LD_ADDR_VAR 0 2
43789: PUSH
43790: LD_VAR 0 2
43794: PPUSH
43795: LD_INT 4
43797: PPUSH
43798: LD_VAR 0 2
43802: PUSH
43803: LD_INT 4
43805: ARRAY
43806: PUSH
43807: LD_VAR 0 4
43811: PLUS
43812: PPUSH
43813: CALL_OW 1
43817: ST_TO_ADDR
// end ;
43818: GO 43737
43820: POP
43821: POP
// end ;
43822: LD_VAR 0 2
43826: RET
// export function Length ( array ) ; begin
43827: LD_INT 0
43829: PPUSH
// result := array + 0 ;
43830: LD_ADDR_VAR 0 2
43834: PUSH
43835: LD_VAR 0 1
43839: PUSH
43840: LD_INT 0
43842: PLUS
43843: ST_TO_ADDR
// end ;
43844: LD_VAR 0 2
43848: RET
// export function PrepareArray ( array ) ; begin
43849: LD_INT 0
43851: PPUSH
// result := array diff 0 ;
43852: LD_ADDR_VAR 0 2
43856: PUSH
43857: LD_VAR 0 1
43861: PUSH
43862: LD_INT 0
43864: DIFF
43865: ST_TO_ADDR
// if not result [ 1 ] then
43866: LD_VAR 0 2
43870: PUSH
43871: LD_INT 1
43873: ARRAY
43874: NOT
43875: IFFALSE 43895
// result := Delete ( result , 1 ) ;
43877: LD_ADDR_VAR 0 2
43881: PUSH
43882: LD_VAR 0 2
43886: PPUSH
43887: LD_INT 1
43889: PPUSH
43890: CALL_OW 3
43894: ST_TO_ADDR
// end ;
43895: LD_VAR 0 2
43899: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43900: LD_INT 0
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
// sibRocketRange := 25 ;
43906: LD_ADDR_VAR 0 6
43910: PUSH
43911: LD_INT 25
43913: ST_TO_ADDR
// result := false ;
43914: LD_ADDR_VAR 0 4
43918: PUSH
43919: LD_INT 0
43921: ST_TO_ADDR
// for i := 0 to 5 do
43922: LD_ADDR_VAR 0 5
43926: PUSH
43927: DOUBLE
43928: LD_INT 0
43930: DEC
43931: ST_TO_ADDR
43932: LD_INT 5
43934: PUSH
43935: FOR_TO
43936: IFFALSE 44003
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43938: LD_VAR 0 1
43942: PPUSH
43943: LD_VAR 0 5
43947: PPUSH
43948: LD_VAR 0 6
43952: PPUSH
43953: CALL_OW 272
43957: PPUSH
43958: LD_VAR 0 2
43962: PPUSH
43963: LD_VAR 0 5
43967: PPUSH
43968: LD_VAR 0 6
43972: PPUSH
43973: CALL_OW 273
43977: PPUSH
43978: LD_VAR 0 3
43982: PPUSH
43983: CALL_OW 309
43987: IFFALSE 44001
// begin result := true ;
43989: LD_ADDR_VAR 0 4
43993: PUSH
43994: LD_INT 1
43996: ST_TO_ADDR
// exit ;
43997: POP
43998: POP
43999: GO 44005
// end ;
44001: GO 43935
44003: POP
44004: POP
// end ;
44005: LD_VAR 0 4
44009: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44010: LD_INT 0
44012: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44013: LD_VAR 0 1
44017: PPUSH
44018: LD_VAR 0 2
44022: PPUSH
44023: LD_INT 0
44025: PPUSH
44026: LD_INT 0
44028: PPUSH
44029: LD_INT 1
44031: PPUSH
44032: LD_INT 0
44034: PPUSH
44035: CALL_OW 587
// end ;
44039: LD_VAR 0 3
44043: RET
// export function CenterOnNow ( unit ) ; begin
44044: LD_INT 0
44046: PPUSH
// result := IsInUnit ( unit ) ;
44047: LD_ADDR_VAR 0 2
44051: PUSH
44052: LD_VAR 0 1
44056: PPUSH
44057: CALL_OW 310
44061: ST_TO_ADDR
// if not result then
44062: LD_VAR 0 2
44066: NOT
44067: IFFALSE 44079
// result := unit ;
44069: LD_ADDR_VAR 0 2
44073: PUSH
44074: LD_VAR 0 1
44078: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44079: LD_VAR 0 1
44083: PPUSH
44084: CALL_OW 87
// end ;
44088: LD_VAR 0 2
44092: RET
// export function ComMoveHex ( unit , hex ) ; begin
44093: LD_INT 0
44095: PPUSH
// if not hex then
44096: LD_VAR 0 2
44100: NOT
44101: IFFALSE 44105
// exit ;
44103: GO 44158
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44105: LD_VAR 0 2
44109: PUSH
44110: LD_INT 1
44112: ARRAY
44113: PPUSH
44114: LD_VAR 0 2
44118: PUSH
44119: LD_INT 2
44121: ARRAY
44122: PPUSH
44123: CALL_OW 428
44127: IFFALSE 44131
// exit ;
44129: GO 44158
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44131: LD_VAR 0 1
44135: PPUSH
44136: LD_VAR 0 2
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: PPUSH
44145: LD_VAR 0 2
44149: PUSH
44150: LD_INT 2
44152: ARRAY
44153: PPUSH
44154: CALL_OW 111
// end ;
44158: LD_VAR 0 3
44162: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44163: LD_INT 0
44165: PPUSH
44166: PPUSH
44167: PPUSH
// if not unit or not enemy then
44168: LD_VAR 0 1
44172: NOT
44173: PUSH
44174: LD_VAR 0 2
44178: NOT
44179: OR
44180: IFFALSE 44184
// exit ;
44182: GO 44308
// x := GetX ( enemy ) ;
44184: LD_ADDR_VAR 0 4
44188: PUSH
44189: LD_VAR 0 2
44193: PPUSH
44194: CALL_OW 250
44198: ST_TO_ADDR
// y := GetY ( enemy ) ;
44199: LD_ADDR_VAR 0 5
44203: PUSH
44204: LD_VAR 0 2
44208: PPUSH
44209: CALL_OW 251
44213: ST_TO_ADDR
// if ValidHex ( x , y ) then
44214: LD_VAR 0 4
44218: PPUSH
44219: LD_VAR 0 5
44223: PPUSH
44224: CALL_OW 488
44228: IFFALSE 44308
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
44230: LD_VAR 0 2
44234: PPUSH
44235: CALL_OW 247
44239: PUSH
44240: LD_INT 3
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: IN
44250: PUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 255
44260: PPUSH
44261: LD_VAR 0 2
44265: PPUSH
44266: CALL_OW 292
44270: AND
44271: IFFALSE 44289
// ComAttackUnit ( unit , enemy ) else
44273: LD_VAR 0 1
44277: PPUSH
44278: LD_VAR 0 2
44282: PPUSH
44283: CALL_OW 115
44287: GO 44308
// ComAgressiveMove ( unit , x , y ) ;
44289: LD_VAR 0 1
44293: PPUSH
44294: LD_VAR 0 4
44298: PPUSH
44299: LD_VAR 0 5
44303: PPUSH
44304: CALL_OW 114
// end ; end_of_file
44308: LD_VAR 0 3
44312: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
44313: LD_INT 0
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
44319: LD_VAR 0 1
44323: PPUSH
44324: CALL_OW 264
44328: PUSH
44329: LD_INT 91
44331: EQUAL
44332: IFFALSE 44404
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
44334: LD_INT 68
44336: PPUSH
44337: LD_VAR 0 1
44341: PPUSH
44342: CALL_OW 255
44346: PPUSH
44347: CALL_OW 321
44351: PUSH
44352: LD_INT 2
44354: EQUAL
44355: IFFALSE 44367
// eff := 70 else
44357: LD_ADDR_VAR 0 4
44361: PUSH
44362: LD_INT 70
44364: ST_TO_ADDR
44365: GO 44375
// eff := 30 ;
44367: LD_ADDR_VAR 0 4
44371: PUSH
44372: LD_INT 30
44374: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
44375: LD_VAR 0 1
44379: PPUSH
44380: CALL_OW 250
44384: PPUSH
44385: LD_VAR 0 1
44389: PPUSH
44390: CALL_OW 251
44394: PPUSH
44395: LD_VAR 0 4
44399: PPUSH
44400: CALL_OW 495
// end ; end ;
44404: LD_VAR 0 2
44408: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44409: LD_INT 0
44411: PPUSH
// end ;
44412: LD_VAR 0 4
44416: RET
// export function SOS_Command ( cmd ) ; begin
44417: LD_INT 0
44419: PPUSH
// end ;
44420: LD_VAR 0 2
44424: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44425: LD_INT 0
44427: PPUSH
// end ;
44428: LD_VAR 0 6
44432: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
44433: LD_INT 0
44435: PPUSH
44436: PPUSH
// if not vehicle or not factory then
44437: LD_VAR 0 1
44441: NOT
44442: PUSH
44443: LD_VAR 0 2
44447: NOT
44448: OR
44449: IFFALSE 44453
// exit ;
44451: GO 44684
// if factoryWaypoints >= factory then
44453: LD_EXP 78
44457: PUSH
44458: LD_VAR 0 2
44462: GREATEREQUAL
44463: IFFALSE 44684
// if factoryWaypoints [ factory ] then
44465: LD_EXP 78
44469: PUSH
44470: LD_VAR 0 2
44474: ARRAY
44475: IFFALSE 44684
// begin if GetControl ( vehicle ) = control_manual then
44477: LD_VAR 0 1
44481: PPUSH
44482: CALL_OW 263
44486: PUSH
44487: LD_INT 1
44489: EQUAL
44490: IFFALSE 44571
// begin driver := IsDrivenBy ( vehicle ) ;
44492: LD_ADDR_VAR 0 4
44496: PUSH
44497: LD_VAR 0 1
44501: PPUSH
44502: CALL_OW 311
44506: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44507: LD_VAR 0 4
44511: PPUSH
44512: LD_EXP 78
44516: PUSH
44517: LD_VAR 0 2
44521: ARRAY
44522: PUSH
44523: LD_INT 3
44525: ARRAY
44526: PPUSH
44527: LD_EXP 78
44531: PUSH
44532: LD_VAR 0 2
44536: ARRAY
44537: PUSH
44538: LD_INT 4
44540: ARRAY
44541: PPUSH
44542: CALL_OW 171
// AddComExitVehicle ( driver ) ;
44546: LD_VAR 0 4
44550: PPUSH
44551: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
44555: LD_VAR 0 4
44559: PPUSH
44560: LD_VAR 0 2
44564: PPUSH
44565: CALL_OW 180
// end else
44569: GO 44684
// if GetControl ( vehicle ) = control_remote then
44571: LD_VAR 0 1
44575: PPUSH
44576: CALL_OW 263
44580: PUSH
44581: LD_INT 2
44583: EQUAL
44584: IFFALSE 44645
// begin wait ( 0 0$2 ) ;
44586: LD_INT 70
44588: PPUSH
44589: CALL_OW 67
// if Connect ( vehicle ) then
44593: LD_VAR 0 1
44597: PPUSH
44598: CALL 10710 0 1
44602: IFFALSE 44643
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44604: LD_VAR 0 1
44608: PPUSH
44609: LD_EXP 78
44613: PUSH
44614: LD_VAR 0 2
44618: ARRAY
44619: PUSH
44620: LD_INT 3
44622: ARRAY
44623: PPUSH
44624: LD_EXP 78
44628: PUSH
44629: LD_VAR 0 2
44633: ARRAY
44634: PUSH
44635: LD_INT 4
44637: ARRAY
44638: PPUSH
44639: CALL_OW 171
// end else
44643: GO 44684
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44645: LD_VAR 0 1
44649: PPUSH
44650: LD_EXP 78
44654: PUSH
44655: LD_VAR 0 2
44659: ARRAY
44660: PUSH
44661: LD_INT 3
44663: ARRAY
44664: PPUSH
44665: LD_EXP 78
44669: PUSH
44670: LD_VAR 0 2
44674: ARRAY
44675: PUSH
44676: LD_INT 4
44678: ARRAY
44679: PPUSH
44680: CALL_OW 171
// end ; end ;
44684: LD_VAR 0 3
44688: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
44689: LD_INT 0
44691: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
44692: LD_VAR 0 1
44696: PUSH
44697: LD_INT 250
44699: EQUAL
44700: PUSH
44701: LD_VAR 0 2
44705: PPUSH
44706: CALL_OW 264
44710: PUSH
44711: LD_INT 81
44713: EQUAL
44714: AND
44715: IFFALSE 44736
// MinerPlaceMine ( unit , x , y ) ;
44717: LD_VAR 0 2
44721: PPUSH
44722: LD_VAR 0 4
44726: PPUSH
44727: LD_VAR 0 5
44731: PPUSH
44732: CALL 47121 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
44736: LD_VAR 0 1
44740: PUSH
44741: LD_INT 251
44743: EQUAL
44744: PUSH
44745: LD_VAR 0 2
44749: PPUSH
44750: CALL_OW 264
44754: PUSH
44755: LD_INT 81
44757: EQUAL
44758: AND
44759: IFFALSE 44780
// MinerDetonateMine ( unit , x , y ) ;
44761: LD_VAR 0 2
44765: PPUSH
44766: LD_VAR 0 4
44770: PPUSH
44771: LD_VAR 0 5
44775: PPUSH
44776: CALL 47396 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
44780: LD_VAR 0 1
44784: PUSH
44785: LD_INT 252
44787: EQUAL
44788: PUSH
44789: LD_VAR 0 2
44793: PPUSH
44794: CALL_OW 264
44798: PUSH
44799: LD_INT 81
44801: EQUAL
44802: AND
44803: IFFALSE 44824
// MinerCreateMinefield ( unit , x , y ) ;
44805: LD_VAR 0 2
44809: PPUSH
44810: LD_VAR 0 4
44814: PPUSH
44815: LD_VAR 0 5
44819: PPUSH
44820: CALL 47813 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
44824: LD_VAR 0 1
44828: PUSH
44829: LD_INT 253
44831: EQUAL
44832: PUSH
44833: LD_VAR 0 2
44837: PPUSH
44838: CALL_OW 257
44842: PUSH
44843: LD_INT 5
44845: EQUAL
44846: AND
44847: IFFALSE 44868
// ComBinocular ( unit , x , y ) ;
44849: LD_VAR 0 2
44853: PPUSH
44854: LD_VAR 0 4
44858: PPUSH
44859: LD_VAR 0 5
44863: PPUSH
44864: CALL 48182 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
44868: LD_VAR 0 1
44872: PUSH
44873: LD_INT 254
44875: EQUAL
44876: PUSH
44877: LD_VAR 0 2
44881: PPUSH
44882: CALL_OW 264
44886: PUSH
44887: LD_INT 99
44889: EQUAL
44890: AND
44891: PUSH
44892: LD_VAR 0 3
44896: PPUSH
44897: CALL_OW 263
44901: PUSH
44902: LD_INT 3
44904: EQUAL
44905: AND
44906: IFFALSE 44922
// HackDestroyVehicle ( unit , selectedUnit ) ;
44908: LD_VAR 0 2
44912: PPUSH
44913: LD_VAR 0 3
44917: PPUSH
44918: CALL 46485 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
44922: LD_VAR 0 1
44926: PUSH
44927: LD_INT 255
44929: EQUAL
44930: PUSH
44931: LD_VAR 0 2
44935: PPUSH
44936: CALL_OW 264
44940: PUSH
44941: LD_INT 14
44943: PUSH
44944: LD_INT 53
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: IN
44951: AND
44952: PUSH
44953: LD_VAR 0 4
44957: PPUSH
44958: LD_VAR 0 5
44962: PPUSH
44963: CALL_OW 488
44967: AND
44968: IFFALSE 44992
// CutTreeXYR ( unit , x , y , 12 ) ;
44970: LD_VAR 0 2
44974: PPUSH
44975: LD_VAR 0 4
44979: PPUSH
44980: LD_VAR 0 5
44984: PPUSH
44985: LD_INT 12
44987: PPUSH
44988: CALL 45055 0 4
// if cmd = 256 then
44992: LD_VAR 0 1
44996: PUSH
44997: LD_INT 256
44999: EQUAL
45000: IFFALSE 45021
// SetFactoryWaypoint ( unit , x , y ) ;
45002: LD_VAR 0 2
45006: PPUSH
45007: LD_VAR 0 4
45011: PPUSH
45012: LD_VAR 0 5
45016: PPUSH
45017: CALL 63093 0 3
// if cmd = 257 then
45021: LD_VAR 0 1
45025: PUSH
45026: LD_INT 257
45028: EQUAL
45029: IFFALSE 45050
// SetWarehouseGatheringPoint ( unit , x , y ) ;
45031: LD_VAR 0 2
45035: PPUSH
45036: LD_VAR 0 4
45040: PPUSH
45041: LD_VAR 0 5
45045: PPUSH
45046: CALL 63455 0 3
// end ;
45050: LD_VAR 0 6
45054: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
45055: LD_INT 0
45057: PPUSH
45058: PPUSH
45059: PPUSH
45060: PPUSH
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
45066: LD_VAR 0 1
45070: NOT
45071: PUSH
45072: LD_VAR 0 2
45076: PPUSH
45077: LD_VAR 0 3
45081: PPUSH
45082: CALL_OW 488
45086: NOT
45087: OR
45088: PUSH
45089: LD_VAR 0 4
45093: NOT
45094: OR
45095: IFFALSE 45099
// exit ;
45097: GO 45439
// list := [ ] ;
45099: LD_ADDR_VAR 0 13
45103: PUSH
45104: EMPTY
45105: ST_TO_ADDR
// if x - r < 0 then
45106: LD_VAR 0 2
45110: PUSH
45111: LD_VAR 0 4
45115: MINUS
45116: PUSH
45117: LD_INT 0
45119: LESS
45120: IFFALSE 45132
// min_x := 0 else
45122: LD_ADDR_VAR 0 7
45126: PUSH
45127: LD_INT 0
45129: ST_TO_ADDR
45130: GO 45148
// min_x := x - r ;
45132: LD_ADDR_VAR 0 7
45136: PUSH
45137: LD_VAR 0 2
45141: PUSH
45142: LD_VAR 0 4
45146: MINUS
45147: ST_TO_ADDR
// if y - r < 0 then
45148: LD_VAR 0 3
45152: PUSH
45153: LD_VAR 0 4
45157: MINUS
45158: PUSH
45159: LD_INT 0
45161: LESS
45162: IFFALSE 45174
// min_y := 0 else
45164: LD_ADDR_VAR 0 8
45168: PUSH
45169: LD_INT 0
45171: ST_TO_ADDR
45172: GO 45190
// min_y := y - r ;
45174: LD_ADDR_VAR 0 8
45178: PUSH
45179: LD_VAR 0 3
45183: PUSH
45184: LD_VAR 0 4
45188: MINUS
45189: ST_TO_ADDR
// max_x := x + r ;
45190: LD_ADDR_VAR 0 9
45194: PUSH
45195: LD_VAR 0 2
45199: PUSH
45200: LD_VAR 0 4
45204: PLUS
45205: ST_TO_ADDR
// max_y := y + r ;
45206: LD_ADDR_VAR 0 10
45210: PUSH
45211: LD_VAR 0 3
45215: PUSH
45216: LD_VAR 0 4
45220: PLUS
45221: ST_TO_ADDR
// for _x = min_x to max_x do
45222: LD_ADDR_VAR 0 11
45226: PUSH
45227: DOUBLE
45228: LD_VAR 0 7
45232: DEC
45233: ST_TO_ADDR
45234: LD_VAR 0 9
45238: PUSH
45239: FOR_TO
45240: IFFALSE 45357
// for _y = min_y to max_y do
45242: LD_ADDR_VAR 0 12
45246: PUSH
45247: DOUBLE
45248: LD_VAR 0 8
45252: DEC
45253: ST_TO_ADDR
45254: LD_VAR 0 10
45258: PUSH
45259: FOR_TO
45260: IFFALSE 45353
// begin if not ValidHex ( _x , _y ) then
45262: LD_VAR 0 11
45266: PPUSH
45267: LD_VAR 0 12
45271: PPUSH
45272: CALL_OW 488
45276: NOT
45277: IFFALSE 45281
// continue ;
45279: GO 45259
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45281: LD_VAR 0 11
45285: PPUSH
45286: LD_VAR 0 12
45290: PPUSH
45291: CALL_OW 351
45295: PUSH
45296: LD_VAR 0 11
45300: PPUSH
45301: LD_VAR 0 12
45305: PPUSH
45306: CALL_OW 554
45310: AND
45311: IFFALSE 45351
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45313: LD_ADDR_VAR 0 13
45317: PUSH
45318: LD_VAR 0 13
45322: PPUSH
45323: LD_VAR 0 13
45327: PUSH
45328: LD_INT 1
45330: PLUS
45331: PPUSH
45332: LD_VAR 0 11
45336: PUSH
45337: LD_VAR 0 12
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PPUSH
45346: CALL_OW 2
45350: ST_TO_ADDR
// end ;
45351: GO 45259
45353: POP
45354: POP
45355: GO 45239
45357: POP
45358: POP
// if not list then
45359: LD_VAR 0 13
45363: NOT
45364: IFFALSE 45368
// exit ;
45366: GO 45439
// for i in list do
45368: LD_ADDR_VAR 0 6
45372: PUSH
45373: LD_VAR 0 13
45377: PUSH
45378: FOR_IN
45379: IFFALSE 45437
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45381: LD_VAR 0 1
45385: PPUSH
45386: LD_STRING M
45388: PUSH
45389: LD_VAR 0 6
45393: PUSH
45394: LD_INT 1
45396: ARRAY
45397: PUSH
45398: LD_VAR 0 6
45402: PUSH
45403: LD_INT 2
45405: ARRAY
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: PUSH
45428: EMPTY
45429: LIST
45430: PPUSH
45431: CALL_OW 447
45435: GO 45378
45437: POP
45438: POP
// end ;
45439: LD_VAR 0 5
45443: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
45444: LD_EXP 9
45448: NOT
45449: IFFALSE 45499
45451: GO 45453
45453: DISABLE
// begin initHack := true ;
45454: LD_ADDR_EXP 9
45458: PUSH
45459: LD_INT 1
45461: ST_TO_ADDR
// hackTanks := [ ] ;
45462: LD_ADDR_EXP 10
45466: PUSH
45467: EMPTY
45468: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
45469: LD_ADDR_EXP 11
45473: PUSH
45474: EMPTY
45475: ST_TO_ADDR
// hackLimit := 3 ;
45476: LD_ADDR_EXP 12
45480: PUSH
45481: LD_INT 3
45483: ST_TO_ADDR
// hackDist := 12 ;
45484: LD_ADDR_EXP 13
45488: PUSH
45489: LD_INT 12
45491: ST_TO_ADDR
// hackCounter := [ ] ;
45492: LD_ADDR_EXP 14
45496: PUSH
45497: EMPTY
45498: ST_TO_ADDR
// end ;
45499: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
45500: LD_EXP 9
45504: PUSH
45505: LD_INT 34
45507: PUSH
45508: LD_INT 99
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PPUSH
45515: CALL_OW 69
45519: AND
45520: IFFALSE 45773
45522: GO 45524
45524: DISABLE
45525: LD_INT 0
45527: PPUSH
45528: PPUSH
// begin enable ;
45529: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
45530: LD_ADDR_VAR 0 1
45534: PUSH
45535: LD_INT 34
45537: PUSH
45538: LD_INT 99
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PPUSH
45545: CALL_OW 69
45549: PUSH
45550: FOR_IN
45551: IFFALSE 45771
// begin if not i in hackTanks then
45553: LD_VAR 0 1
45557: PUSH
45558: LD_EXP 10
45562: IN
45563: NOT
45564: IFFALSE 45647
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
45566: LD_ADDR_EXP 10
45570: PUSH
45571: LD_EXP 10
45575: PPUSH
45576: LD_EXP 10
45580: PUSH
45581: LD_INT 1
45583: PLUS
45584: PPUSH
45585: LD_VAR 0 1
45589: PPUSH
45590: CALL_OW 1
45594: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
45595: LD_ADDR_EXP 11
45599: PUSH
45600: LD_EXP 11
45604: PPUSH
45605: LD_EXP 11
45609: PUSH
45610: LD_INT 1
45612: PLUS
45613: PPUSH
45614: EMPTY
45615: PPUSH
45616: CALL_OW 1
45620: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
45621: LD_ADDR_EXP 14
45625: PUSH
45626: LD_EXP 14
45630: PPUSH
45631: LD_EXP 14
45635: PUSH
45636: LD_INT 1
45638: PLUS
45639: PPUSH
45640: EMPTY
45641: PPUSH
45642: CALL_OW 1
45646: ST_TO_ADDR
// end ; if not IsOk ( i ) then
45647: LD_VAR 0 1
45651: PPUSH
45652: CALL_OW 302
45656: NOT
45657: IFFALSE 45670
// begin HackUnlinkAll ( i ) ;
45659: LD_VAR 0 1
45663: PPUSH
45664: CALL 45776 0 1
// continue ;
45668: GO 45550
// end ; HackCheckCapturedStatus ( i ) ;
45670: LD_VAR 0 1
45674: PPUSH
45675: CALL 46219 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
45679: LD_ADDR_VAR 0 2
45683: PUSH
45684: LD_INT 81
45686: PUSH
45687: LD_VAR 0 1
45691: PPUSH
45692: CALL_OW 255
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 33
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 91
45713: PUSH
45714: LD_VAR 0 1
45718: PUSH
45719: LD_EXP 13
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 50
45731: PUSH
45732: EMPTY
45733: LIST
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: PPUSH
45741: CALL_OW 69
45745: ST_TO_ADDR
// if not tmp then
45746: LD_VAR 0 2
45750: NOT
45751: IFFALSE 45755
// continue ;
45753: GO 45550
// HackLink ( i , tmp ) ;
45755: LD_VAR 0 1
45759: PPUSH
45760: LD_VAR 0 2
45764: PPUSH
45765: CALL 45912 0 2
// end ;
45769: GO 45550
45771: POP
45772: POP
// end ;
45773: PPOPN 2
45775: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
45776: LD_INT 0
45778: PPUSH
45779: PPUSH
45780: PPUSH
// if not hack in hackTanks then
45781: LD_VAR 0 1
45785: PUSH
45786: LD_EXP 10
45790: IN
45791: NOT
45792: IFFALSE 45796
// exit ;
45794: GO 45907
// index := GetElementIndex ( hackTanks , hack ) ;
45796: LD_ADDR_VAR 0 4
45800: PUSH
45801: LD_EXP 10
45805: PPUSH
45806: LD_VAR 0 1
45810: PPUSH
45811: CALL 7517 0 2
45815: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
45816: LD_EXP 11
45820: PUSH
45821: LD_VAR 0 4
45825: ARRAY
45826: IFFALSE 45907
// begin for i in hackTanksCaptured [ index ] do
45828: LD_ADDR_VAR 0 3
45832: PUSH
45833: LD_EXP 11
45837: PUSH
45838: LD_VAR 0 4
45842: ARRAY
45843: PUSH
45844: FOR_IN
45845: IFFALSE 45871
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
45847: LD_VAR 0 3
45851: PUSH
45852: LD_INT 1
45854: ARRAY
45855: PPUSH
45856: LD_VAR 0 3
45860: PUSH
45861: LD_INT 2
45863: ARRAY
45864: PPUSH
45865: CALL_OW 235
45869: GO 45844
45871: POP
45872: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
45873: LD_ADDR_EXP 11
45877: PUSH
45878: LD_EXP 11
45882: PPUSH
45883: LD_VAR 0 4
45887: PPUSH
45888: EMPTY
45889: PPUSH
45890: CALL_OW 1
45894: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
45895: LD_VAR 0 1
45899: PPUSH
45900: LD_INT 0
45902: PPUSH
45903: CALL_OW 505
// end ; end ;
45907: LD_VAR 0 2
45911: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
45912: LD_INT 0
45914: PPUSH
45915: PPUSH
45916: PPUSH
// if not hack in hackTanks or not vehicles then
45917: LD_VAR 0 1
45921: PUSH
45922: LD_EXP 10
45926: IN
45927: NOT
45928: PUSH
45929: LD_VAR 0 2
45933: NOT
45934: OR
45935: IFFALSE 45939
// exit ;
45937: GO 46214
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
45939: LD_ADDR_VAR 0 2
45943: PUSH
45944: LD_VAR 0 1
45948: PPUSH
45949: LD_VAR 0 2
45953: PPUSH
45954: LD_INT 1
45956: PPUSH
45957: LD_INT 1
45959: PPUSH
45960: CALL 8167 0 4
45964: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
45965: LD_ADDR_VAR 0 5
45969: PUSH
45970: LD_EXP 10
45974: PPUSH
45975: LD_VAR 0 1
45979: PPUSH
45980: CALL 7517 0 2
45984: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
45985: LD_EXP 11
45989: PUSH
45990: LD_VAR 0 5
45994: ARRAY
45995: PUSH
45996: LD_EXP 12
46000: LESS
46001: IFFALSE 46190
// begin for i := 1 to vehicles do
46003: LD_ADDR_VAR 0 4
46007: PUSH
46008: DOUBLE
46009: LD_INT 1
46011: DEC
46012: ST_TO_ADDR
46013: LD_VAR 0 2
46017: PUSH
46018: FOR_TO
46019: IFFALSE 46188
// begin if hackTanksCaptured [ index ] = hackLimit then
46021: LD_EXP 11
46025: PUSH
46026: LD_VAR 0 5
46030: ARRAY
46031: PUSH
46032: LD_EXP 12
46036: EQUAL
46037: IFFALSE 46041
// break ;
46039: GO 46188
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
46041: LD_ADDR_EXP 14
46045: PUSH
46046: LD_EXP 14
46050: PPUSH
46051: LD_VAR 0 5
46055: PPUSH
46056: LD_EXP 14
46060: PUSH
46061: LD_VAR 0 5
46065: ARRAY
46066: PUSH
46067: LD_INT 1
46069: PLUS
46070: PPUSH
46071: CALL_OW 1
46075: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
46076: LD_ADDR_EXP 11
46080: PUSH
46081: LD_EXP 11
46085: PPUSH
46086: LD_VAR 0 5
46090: PUSH
46091: LD_EXP 11
46095: PUSH
46096: LD_VAR 0 5
46100: ARRAY
46101: PUSH
46102: LD_INT 1
46104: PLUS
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PPUSH
46110: LD_VAR 0 2
46114: PUSH
46115: LD_VAR 0 4
46119: ARRAY
46120: PUSH
46121: LD_VAR 0 2
46125: PUSH
46126: LD_VAR 0 4
46130: ARRAY
46131: PPUSH
46132: CALL_OW 255
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PPUSH
46141: CALL 7732 0 3
46145: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
46146: LD_VAR 0 2
46150: PUSH
46151: LD_VAR 0 4
46155: ARRAY
46156: PPUSH
46157: LD_VAR 0 1
46161: PPUSH
46162: CALL_OW 255
46166: PPUSH
46167: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
46171: LD_VAR 0 2
46175: PUSH
46176: LD_VAR 0 4
46180: ARRAY
46181: PPUSH
46182: CALL_OW 141
// end ;
46186: GO 46018
46188: POP
46189: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46190: LD_VAR 0 1
46194: PPUSH
46195: LD_EXP 11
46199: PUSH
46200: LD_VAR 0 5
46204: ARRAY
46205: PUSH
46206: LD_INT 0
46208: PLUS
46209: PPUSH
46210: CALL_OW 505
// end ;
46214: LD_VAR 0 3
46218: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
46219: LD_INT 0
46221: PPUSH
46222: PPUSH
46223: PPUSH
46224: PPUSH
// if not hack in hackTanks then
46225: LD_VAR 0 1
46229: PUSH
46230: LD_EXP 10
46234: IN
46235: NOT
46236: IFFALSE 46240
// exit ;
46238: GO 46480
// index := GetElementIndex ( hackTanks , hack ) ;
46240: LD_ADDR_VAR 0 4
46244: PUSH
46245: LD_EXP 10
46249: PPUSH
46250: LD_VAR 0 1
46254: PPUSH
46255: CALL 7517 0 2
46259: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
46260: LD_ADDR_VAR 0 3
46264: PUSH
46265: DOUBLE
46266: LD_EXP 11
46270: PUSH
46271: LD_VAR 0 4
46275: ARRAY
46276: INC
46277: ST_TO_ADDR
46278: LD_INT 1
46280: PUSH
46281: FOR_DOWNTO
46282: IFFALSE 46454
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
46284: LD_ADDR_VAR 0 5
46288: PUSH
46289: LD_EXP 11
46293: PUSH
46294: LD_VAR 0 4
46298: ARRAY
46299: PUSH
46300: LD_VAR 0 3
46304: ARRAY
46305: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
46306: LD_VAR 0 5
46310: PUSH
46311: LD_INT 1
46313: ARRAY
46314: PPUSH
46315: CALL_OW 302
46319: NOT
46320: PUSH
46321: LD_VAR 0 5
46325: PUSH
46326: LD_INT 1
46328: ARRAY
46329: PPUSH
46330: CALL_OW 255
46334: PUSH
46335: LD_VAR 0 1
46339: PPUSH
46340: CALL_OW 255
46344: NONEQUAL
46345: OR
46346: IFFALSE 46452
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
46348: LD_VAR 0 5
46352: PUSH
46353: LD_INT 1
46355: ARRAY
46356: PPUSH
46357: CALL_OW 305
46361: PUSH
46362: LD_VAR 0 5
46366: PUSH
46367: LD_INT 1
46369: ARRAY
46370: PPUSH
46371: CALL_OW 255
46375: PUSH
46376: LD_VAR 0 1
46380: PPUSH
46381: CALL_OW 255
46385: EQUAL
46386: AND
46387: IFFALSE 46411
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
46389: LD_VAR 0 5
46393: PUSH
46394: LD_INT 1
46396: ARRAY
46397: PPUSH
46398: LD_VAR 0 5
46402: PUSH
46403: LD_INT 2
46405: ARRAY
46406: PPUSH
46407: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
46411: LD_ADDR_EXP 11
46415: PUSH
46416: LD_EXP 11
46420: PPUSH
46421: LD_VAR 0 4
46425: PPUSH
46426: LD_EXP 11
46430: PUSH
46431: LD_VAR 0 4
46435: ARRAY
46436: PPUSH
46437: LD_VAR 0 3
46441: PPUSH
46442: CALL_OW 3
46446: PPUSH
46447: CALL_OW 1
46451: ST_TO_ADDR
// end ; end ;
46452: GO 46281
46454: POP
46455: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46456: LD_VAR 0 1
46460: PPUSH
46461: LD_EXP 11
46465: PUSH
46466: LD_VAR 0 4
46470: ARRAY
46471: PUSH
46472: LD_INT 0
46474: PLUS
46475: PPUSH
46476: CALL_OW 505
// end ;
46480: LD_VAR 0 2
46484: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
46485: LD_INT 0
46487: PPUSH
46488: PPUSH
46489: PPUSH
46490: PPUSH
// if not hack in hackTanks then
46491: LD_VAR 0 1
46495: PUSH
46496: LD_EXP 10
46500: IN
46501: NOT
46502: IFFALSE 46506
// exit ;
46504: GO 46591
// index := GetElementIndex ( hackTanks , hack ) ;
46506: LD_ADDR_VAR 0 5
46510: PUSH
46511: LD_EXP 10
46515: PPUSH
46516: LD_VAR 0 1
46520: PPUSH
46521: CALL 7517 0 2
46525: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
46526: LD_ADDR_VAR 0 4
46530: PUSH
46531: DOUBLE
46532: LD_INT 1
46534: DEC
46535: ST_TO_ADDR
46536: LD_EXP 11
46540: PUSH
46541: LD_VAR 0 5
46545: ARRAY
46546: PUSH
46547: FOR_TO
46548: IFFALSE 46589
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
46550: LD_EXP 11
46554: PUSH
46555: LD_VAR 0 5
46559: ARRAY
46560: PUSH
46561: LD_VAR 0 4
46565: ARRAY
46566: PUSH
46567: LD_INT 1
46569: ARRAY
46570: PUSH
46571: LD_VAR 0 2
46575: EQUAL
46576: IFFALSE 46587
// KillUnit ( vehicle ) ;
46578: LD_VAR 0 2
46582: PPUSH
46583: CALL_OW 66
46587: GO 46547
46589: POP
46590: POP
// end ;
46591: LD_VAR 0 3
46595: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
46596: LD_EXP 15
46600: NOT
46601: IFFALSE 46636
46603: GO 46605
46605: DISABLE
// begin initMiner := true ;
46606: LD_ADDR_EXP 15
46610: PUSH
46611: LD_INT 1
46613: ST_TO_ADDR
// minersList := [ ] ;
46614: LD_ADDR_EXP 16
46618: PUSH
46619: EMPTY
46620: ST_TO_ADDR
// minerMinesList := [ ] ;
46621: LD_ADDR_EXP 17
46625: PUSH
46626: EMPTY
46627: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
46628: LD_ADDR_EXP 18
46632: PUSH
46633: LD_INT 5
46635: ST_TO_ADDR
// end ;
46636: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
46637: LD_EXP 15
46641: PUSH
46642: LD_INT 34
46644: PUSH
46645: LD_INT 81
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PPUSH
46652: CALL_OW 69
46656: AND
46657: IFFALSE 47118
46659: GO 46661
46661: DISABLE
46662: LD_INT 0
46664: PPUSH
46665: PPUSH
46666: PPUSH
46667: PPUSH
// begin enable ;
46668: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
46669: LD_ADDR_VAR 0 1
46673: PUSH
46674: LD_INT 34
46676: PUSH
46677: LD_INT 81
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PPUSH
46684: CALL_OW 69
46688: PUSH
46689: FOR_IN
46690: IFFALSE 46762
// begin if not i in minersList then
46692: LD_VAR 0 1
46696: PUSH
46697: LD_EXP 16
46701: IN
46702: NOT
46703: IFFALSE 46760
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
46705: LD_ADDR_EXP 16
46709: PUSH
46710: LD_EXP 16
46714: PPUSH
46715: LD_EXP 16
46719: PUSH
46720: LD_INT 1
46722: PLUS
46723: PPUSH
46724: LD_VAR 0 1
46728: PPUSH
46729: CALL_OW 1
46733: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
46734: LD_ADDR_EXP 17
46738: PUSH
46739: LD_EXP 17
46743: PPUSH
46744: LD_EXP 17
46748: PUSH
46749: LD_INT 1
46751: PLUS
46752: PPUSH
46753: EMPTY
46754: PPUSH
46755: CALL_OW 1
46759: ST_TO_ADDR
// end end ;
46760: GO 46689
46762: POP
46763: POP
// for i := minerMinesList downto 1 do
46764: LD_ADDR_VAR 0 1
46768: PUSH
46769: DOUBLE
46770: LD_EXP 17
46774: INC
46775: ST_TO_ADDR
46776: LD_INT 1
46778: PUSH
46779: FOR_DOWNTO
46780: IFFALSE 47116
// begin if IsLive ( minersList [ i ] ) then
46782: LD_EXP 16
46786: PUSH
46787: LD_VAR 0 1
46791: ARRAY
46792: PPUSH
46793: CALL_OW 300
46797: IFFALSE 46825
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
46799: LD_EXP 16
46803: PUSH
46804: LD_VAR 0 1
46808: ARRAY
46809: PPUSH
46810: LD_EXP 17
46814: PUSH
46815: LD_VAR 0 1
46819: ARRAY
46820: PPUSH
46821: CALL_OW 505
// if not minerMinesList [ i ] then
46825: LD_EXP 17
46829: PUSH
46830: LD_VAR 0 1
46834: ARRAY
46835: NOT
46836: IFFALSE 46840
// continue ;
46838: GO 46779
// for j := minerMinesList [ i ] downto 1 do
46840: LD_ADDR_VAR 0 2
46844: PUSH
46845: DOUBLE
46846: LD_EXP 17
46850: PUSH
46851: LD_VAR 0 1
46855: ARRAY
46856: INC
46857: ST_TO_ADDR
46858: LD_INT 1
46860: PUSH
46861: FOR_DOWNTO
46862: IFFALSE 47112
// begin side := GetSide ( minersList [ i ] ) ;
46864: LD_ADDR_VAR 0 3
46868: PUSH
46869: LD_EXP 16
46873: PUSH
46874: LD_VAR 0 1
46878: ARRAY
46879: PPUSH
46880: CALL_OW 255
46884: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
46885: LD_ADDR_VAR 0 4
46889: PUSH
46890: LD_EXP 17
46894: PUSH
46895: LD_VAR 0 1
46899: ARRAY
46900: PUSH
46901: LD_VAR 0 2
46905: ARRAY
46906: PUSH
46907: LD_INT 1
46909: ARRAY
46910: PPUSH
46911: LD_EXP 17
46915: PUSH
46916: LD_VAR 0 1
46920: ARRAY
46921: PUSH
46922: LD_VAR 0 2
46926: ARRAY
46927: PUSH
46928: LD_INT 2
46930: ARRAY
46931: PPUSH
46932: CALL_OW 428
46936: ST_TO_ADDR
// if not tmp then
46937: LD_VAR 0 4
46941: NOT
46942: IFFALSE 46946
// continue ;
46944: GO 46861
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
46946: LD_VAR 0 4
46950: PUSH
46951: LD_INT 81
46953: PUSH
46954: LD_VAR 0 3
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PPUSH
46963: CALL_OW 69
46967: IN
46968: PUSH
46969: LD_EXP 17
46973: PUSH
46974: LD_VAR 0 1
46978: ARRAY
46979: PUSH
46980: LD_VAR 0 2
46984: ARRAY
46985: PUSH
46986: LD_INT 1
46988: ARRAY
46989: PPUSH
46990: LD_EXP 17
46994: PUSH
46995: LD_VAR 0 1
46999: ARRAY
47000: PUSH
47001: LD_VAR 0 2
47005: ARRAY
47006: PUSH
47007: LD_INT 2
47009: ARRAY
47010: PPUSH
47011: CALL_OW 458
47015: AND
47016: IFFALSE 47110
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
47018: LD_EXP 17
47022: PUSH
47023: LD_VAR 0 1
47027: ARRAY
47028: PUSH
47029: LD_VAR 0 2
47033: ARRAY
47034: PUSH
47035: LD_INT 1
47037: ARRAY
47038: PPUSH
47039: LD_EXP 17
47043: PUSH
47044: LD_VAR 0 1
47048: ARRAY
47049: PUSH
47050: LD_VAR 0 2
47054: ARRAY
47055: PUSH
47056: LD_INT 2
47058: ARRAY
47059: PPUSH
47060: LD_VAR 0 3
47064: PPUSH
47065: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
47069: LD_ADDR_EXP 17
47073: PUSH
47074: LD_EXP 17
47078: PPUSH
47079: LD_VAR 0 1
47083: PPUSH
47084: LD_EXP 17
47088: PUSH
47089: LD_VAR 0 1
47093: ARRAY
47094: PPUSH
47095: LD_VAR 0 2
47099: PPUSH
47100: CALL_OW 3
47104: PPUSH
47105: CALL_OW 1
47109: ST_TO_ADDR
// end ; end ;
47110: GO 46861
47112: POP
47113: POP
// end ;
47114: GO 46779
47116: POP
47117: POP
// end ;
47118: PPOPN 4
47120: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
47121: LD_INT 0
47123: PPUSH
47124: PPUSH
// result := false ;
47125: LD_ADDR_VAR 0 4
47129: PUSH
47130: LD_INT 0
47132: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
47133: LD_VAR 0 1
47137: PPUSH
47138: CALL_OW 264
47142: PUSH
47143: LD_INT 81
47145: EQUAL
47146: NOT
47147: IFFALSE 47151
// exit ;
47149: GO 47391
// index := GetElementIndex ( minersList , unit ) ;
47151: LD_ADDR_VAR 0 5
47155: PUSH
47156: LD_EXP 16
47160: PPUSH
47161: LD_VAR 0 1
47165: PPUSH
47166: CALL 7517 0 2
47170: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
47171: LD_EXP 17
47175: PUSH
47176: LD_VAR 0 5
47180: ARRAY
47181: PUSH
47182: LD_EXP 18
47186: GREATEREQUAL
47187: IFFALSE 47191
// exit ;
47189: GO 47391
// ComMoveXY ( unit , x , y ) ;
47191: LD_VAR 0 1
47195: PPUSH
47196: LD_VAR 0 2
47200: PPUSH
47201: LD_VAR 0 3
47205: PPUSH
47206: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47210: LD_INT 35
47212: PPUSH
47213: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
47217: LD_VAR 0 1
47221: PPUSH
47222: LD_VAR 0 2
47226: PPUSH
47227: LD_VAR 0 3
47231: PPUSH
47232: CALL 38901 0 3
47236: NOT
47237: PUSH
47238: LD_VAR 0 1
47242: PPUSH
47243: CALL_OW 314
47247: AND
47248: IFFALSE 47252
// exit ;
47250: GO 47391
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
47252: LD_VAR 0 2
47256: PPUSH
47257: LD_VAR 0 3
47261: PPUSH
47262: CALL_OW 428
47266: PUSH
47267: LD_VAR 0 1
47271: EQUAL
47272: PUSH
47273: LD_VAR 0 1
47277: PPUSH
47278: CALL_OW 314
47282: NOT
47283: AND
47284: IFFALSE 47210
// PlaySoundXY ( x , y , PlantMine ) ;
47286: LD_VAR 0 2
47290: PPUSH
47291: LD_VAR 0 3
47295: PPUSH
47296: LD_STRING PlantMine
47298: PPUSH
47299: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
47303: LD_VAR 0 2
47307: PPUSH
47308: LD_VAR 0 3
47312: PPUSH
47313: LD_VAR 0 1
47317: PPUSH
47318: CALL_OW 255
47322: PPUSH
47323: LD_INT 0
47325: PPUSH
47326: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
47330: LD_ADDR_EXP 17
47334: PUSH
47335: LD_EXP 17
47339: PPUSH
47340: LD_VAR 0 5
47344: PUSH
47345: LD_EXP 17
47349: PUSH
47350: LD_VAR 0 5
47354: ARRAY
47355: PUSH
47356: LD_INT 1
47358: PLUS
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PPUSH
47364: LD_VAR 0 2
47368: PUSH
47369: LD_VAR 0 3
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PPUSH
47378: CALL 7732 0 3
47382: ST_TO_ADDR
// result := true ;
47383: LD_ADDR_VAR 0 4
47387: PUSH
47388: LD_INT 1
47390: ST_TO_ADDR
// end ;
47391: LD_VAR 0 4
47395: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
47396: LD_INT 0
47398: PPUSH
47399: PPUSH
47400: PPUSH
// if not unit in minersList then
47401: LD_VAR 0 1
47405: PUSH
47406: LD_EXP 16
47410: IN
47411: NOT
47412: IFFALSE 47416
// exit ;
47414: GO 47808
// index := GetElementIndex ( minersList , unit ) ;
47416: LD_ADDR_VAR 0 6
47420: PUSH
47421: LD_EXP 16
47425: PPUSH
47426: LD_VAR 0 1
47430: PPUSH
47431: CALL 7517 0 2
47435: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
47436: LD_ADDR_VAR 0 5
47440: PUSH
47441: DOUBLE
47442: LD_EXP 17
47446: PUSH
47447: LD_VAR 0 6
47451: ARRAY
47452: INC
47453: ST_TO_ADDR
47454: LD_INT 1
47456: PUSH
47457: FOR_DOWNTO
47458: IFFALSE 47619
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
47460: LD_EXP 17
47464: PUSH
47465: LD_VAR 0 6
47469: ARRAY
47470: PUSH
47471: LD_VAR 0 5
47475: ARRAY
47476: PUSH
47477: LD_INT 1
47479: ARRAY
47480: PUSH
47481: LD_VAR 0 2
47485: EQUAL
47486: PUSH
47487: LD_EXP 17
47491: PUSH
47492: LD_VAR 0 6
47496: ARRAY
47497: PUSH
47498: LD_VAR 0 5
47502: ARRAY
47503: PUSH
47504: LD_INT 2
47506: ARRAY
47507: PUSH
47508: LD_VAR 0 3
47512: EQUAL
47513: AND
47514: IFFALSE 47617
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47516: LD_EXP 17
47520: PUSH
47521: LD_VAR 0 6
47525: ARRAY
47526: PUSH
47527: LD_VAR 0 5
47531: ARRAY
47532: PUSH
47533: LD_INT 1
47535: ARRAY
47536: PPUSH
47537: LD_EXP 17
47541: PUSH
47542: LD_VAR 0 6
47546: ARRAY
47547: PUSH
47548: LD_VAR 0 5
47552: ARRAY
47553: PUSH
47554: LD_INT 2
47556: ARRAY
47557: PPUSH
47558: LD_VAR 0 1
47562: PPUSH
47563: CALL_OW 255
47567: PPUSH
47568: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47572: LD_ADDR_EXP 17
47576: PUSH
47577: LD_EXP 17
47581: PPUSH
47582: LD_VAR 0 6
47586: PPUSH
47587: LD_EXP 17
47591: PUSH
47592: LD_VAR 0 6
47596: ARRAY
47597: PPUSH
47598: LD_VAR 0 5
47602: PPUSH
47603: CALL_OW 3
47607: PPUSH
47608: CALL_OW 1
47612: ST_TO_ADDR
// exit ;
47613: POP
47614: POP
47615: GO 47808
// end ; end ;
47617: GO 47457
47619: POP
47620: POP
// for i := minerMinesList [ index ] downto 1 do
47621: LD_ADDR_VAR 0 5
47625: PUSH
47626: DOUBLE
47627: LD_EXP 17
47631: PUSH
47632: LD_VAR 0 6
47636: ARRAY
47637: INC
47638: ST_TO_ADDR
47639: LD_INT 1
47641: PUSH
47642: FOR_DOWNTO
47643: IFFALSE 47806
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
47645: LD_EXP 17
47649: PUSH
47650: LD_VAR 0 6
47654: ARRAY
47655: PUSH
47656: LD_VAR 0 5
47660: ARRAY
47661: PUSH
47662: LD_INT 1
47664: ARRAY
47665: PPUSH
47666: LD_EXP 17
47670: PUSH
47671: LD_VAR 0 6
47675: ARRAY
47676: PUSH
47677: LD_VAR 0 5
47681: ARRAY
47682: PUSH
47683: LD_INT 2
47685: ARRAY
47686: PPUSH
47687: LD_VAR 0 2
47691: PPUSH
47692: LD_VAR 0 3
47696: PPUSH
47697: CALL_OW 298
47701: PUSH
47702: LD_INT 6
47704: LESS
47705: IFFALSE 47804
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47707: LD_EXP 17
47711: PUSH
47712: LD_VAR 0 6
47716: ARRAY
47717: PUSH
47718: LD_VAR 0 5
47722: ARRAY
47723: PUSH
47724: LD_INT 1
47726: ARRAY
47727: PPUSH
47728: LD_EXP 17
47732: PUSH
47733: LD_VAR 0 6
47737: ARRAY
47738: PUSH
47739: LD_VAR 0 5
47743: ARRAY
47744: PUSH
47745: LD_INT 2
47747: ARRAY
47748: PPUSH
47749: LD_VAR 0 1
47753: PPUSH
47754: CALL_OW 255
47758: PPUSH
47759: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47763: LD_ADDR_EXP 17
47767: PUSH
47768: LD_EXP 17
47772: PPUSH
47773: LD_VAR 0 6
47777: PPUSH
47778: LD_EXP 17
47782: PUSH
47783: LD_VAR 0 6
47787: ARRAY
47788: PPUSH
47789: LD_VAR 0 5
47793: PPUSH
47794: CALL_OW 3
47798: PPUSH
47799: CALL_OW 1
47803: ST_TO_ADDR
// end ; end ;
47804: GO 47642
47806: POP
47807: POP
// end ;
47808: LD_VAR 0 4
47812: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
47813: LD_INT 0
47815: PPUSH
47816: PPUSH
47817: PPUSH
47818: PPUSH
47819: PPUSH
47820: PPUSH
47821: PPUSH
47822: PPUSH
47823: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
47824: LD_VAR 0 1
47828: PPUSH
47829: CALL_OW 264
47833: PUSH
47834: LD_INT 81
47836: EQUAL
47837: NOT
47838: PUSH
47839: LD_VAR 0 1
47843: PUSH
47844: LD_EXP 16
47848: IN
47849: NOT
47850: OR
47851: IFFALSE 47855
// exit ;
47853: GO 48177
// index := GetElementIndex ( minersList , unit ) ;
47855: LD_ADDR_VAR 0 6
47859: PUSH
47860: LD_EXP 16
47864: PPUSH
47865: LD_VAR 0 1
47869: PPUSH
47870: CALL 7517 0 2
47874: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
47875: LD_ADDR_VAR 0 8
47879: PUSH
47880: LD_EXP 18
47884: PUSH
47885: LD_EXP 17
47889: PUSH
47890: LD_VAR 0 6
47894: ARRAY
47895: MINUS
47896: ST_TO_ADDR
// if not minesFreeAmount then
47897: LD_VAR 0 8
47901: NOT
47902: IFFALSE 47906
// exit ;
47904: GO 48177
// tmp := [ ] ;
47906: LD_ADDR_VAR 0 7
47910: PUSH
47911: EMPTY
47912: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
47913: LD_ADDR_VAR 0 5
47917: PUSH
47918: DOUBLE
47919: LD_INT 1
47921: DEC
47922: ST_TO_ADDR
47923: LD_VAR 0 8
47927: PUSH
47928: FOR_TO
47929: IFFALSE 48124
// begin _d := rand ( 0 , 5 ) ;
47931: LD_ADDR_VAR 0 11
47935: PUSH
47936: LD_INT 0
47938: PPUSH
47939: LD_INT 5
47941: PPUSH
47942: CALL_OW 12
47946: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
47947: LD_ADDR_VAR 0 12
47951: PUSH
47952: LD_INT 2
47954: PPUSH
47955: LD_INT 6
47957: PPUSH
47958: CALL_OW 12
47962: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
47963: LD_ADDR_VAR 0 9
47967: PUSH
47968: LD_VAR 0 2
47972: PPUSH
47973: LD_VAR 0 11
47977: PPUSH
47978: LD_VAR 0 12
47982: PPUSH
47983: CALL_OW 272
47987: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
47988: LD_ADDR_VAR 0 10
47992: PUSH
47993: LD_VAR 0 3
47997: PPUSH
47998: LD_VAR 0 11
48002: PPUSH
48003: LD_VAR 0 12
48007: PPUSH
48008: CALL_OW 273
48012: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
48013: LD_VAR 0 9
48017: PPUSH
48018: LD_VAR 0 10
48022: PPUSH
48023: CALL_OW 488
48027: PUSH
48028: LD_VAR 0 9
48032: PUSH
48033: LD_VAR 0 10
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_VAR 0 7
48046: IN
48047: NOT
48048: AND
48049: PUSH
48050: LD_VAR 0 9
48054: PPUSH
48055: LD_VAR 0 10
48059: PPUSH
48060: CALL_OW 458
48064: NOT
48065: AND
48066: IFFALSE 48108
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
48068: LD_ADDR_VAR 0 7
48072: PUSH
48073: LD_VAR 0 7
48077: PPUSH
48078: LD_VAR 0 7
48082: PUSH
48083: LD_INT 1
48085: PLUS
48086: PPUSH
48087: LD_VAR 0 9
48091: PUSH
48092: LD_VAR 0 10
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PPUSH
48101: CALL_OW 1
48105: ST_TO_ADDR
48106: GO 48122
// i := i - 1 ;
48108: LD_ADDR_VAR 0 5
48112: PUSH
48113: LD_VAR 0 5
48117: PUSH
48118: LD_INT 1
48120: MINUS
48121: ST_TO_ADDR
// end ;
48122: GO 47928
48124: POP
48125: POP
// for i in tmp do
48126: LD_ADDR_VAR 0 5
48130: PUSH
48131: LD_VAR 0 7
48135: PUSH
48136: FOR_IN
48137: IFFALSE 48175
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
48139: LD_VAR 0 1
48143: PPUSH
48144: LD_VAR 0 5
48148: PUSH
48149: LD_INT 1
48151: ARRAY
48152: PPUSH
48153: LD_VAR 0 5
48157: PUSH
48158: LD_INT 2
48160: ARRAY
48161: PPUSH
48162: CALL 47121 0 3
48166: NOT
48167: IFFALSE 48173
// exit ;
48169: POP
48170: POP
48171: GO 48177
48173: GO 48136
48175: POP
48176: POP
// end ;
48177: LD_VAR 0 4
48181: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
48182: LD_INT 0
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
// if not GetClass ( unit ) = class_sniper then
48191: LD_VAR 0 1
48195: PPUSH
48196: CALL_OW 257
48200: PUSH
48201: LD_INT 5
48203: EQUAL
48204: NOT
48205: IFFALSE 48209
// exit ;
48207: GO 48597
// dist := 8 ;
48209: LD_ADDR_VAR 0 5
48213: PUSH
48214: LD_INT 8
48216: ST_TO_ADDR
// viewRange := 12 ;
48217: LD_ADDR_VAR 0 7
48221: PUSH
48222: LD_INT 12
48224: ST_TO_ADDR
// side := GetSide ( unit ) ;
48225: LD_ADDR_VAR 0 6
48229: PUSH
48230: LD_VAR 0 1
48234: PPUSH
48235: CALL_OW 255
48239: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
48240: LD_INT 61
48242: PPUSH
48243: LD_VAR 0 6
48247: PPUSH
48248: CALL_OW 321
48252: PUSH
48253: LD_INT 2
48255: EQUAL
48256: IFFALSE 48266
// viewRange := 16 ;
48258: LD_ADDR_VAR 0 7
48262: PUSH
48263: LD_INT 16
48265: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
48266: LD_VAR 0 1
48270: PPUSH
48271: LD_VAR 0 2
48275: PPUSH
48276: LD_VAR 0 3
48280: PPUSH
48281: CALL_OW 297
48285: PUSH
48286: LD_VAR 0 5
48290: GREATER
48291: IFFALSE 48370
// begin ComMoveXY ( unit , x , y ) ;
48293: LD_VAR 0 1
48297: PPUSH
48298: LD_VAR 0 2
48302: PPUSH
48303: LD_VAR 0 3
48307: PPUSH
48308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48312: LD_INT 35
48314: PPUSH
48315: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
48319: LD_VAR 0 1
48323: PPUSH
48324: LD_VAR 0 2
48328: PPUSH
48329: LD_VAR 0 3
48333: PPUSH
48334: CALL 38901 0 3
48338: NOT
48339: IFFALSE 48343
// exit ;
48341: GO 48597
// until GetDistUnitXY ( unit , x , y ) < dist ;
48343: LD_VAR 0 1
48347: PPUSH
48348: LD_VAR 0 2
48352: PPUSH
48353: LD_VAR 0 3
48357: PPUSH
48358: CALL_OW 297
48362: PUSH
48363: LD_VAR 0 5
48367: LESS
48368: IFFALSE 48312
// end ; ComTurnXY ( unit , x , y ) ;
48370: LD_VAR 0 1
48374: PPUSH
48375: LD_VAR 0 2
48379: PPUSH
48380: LD_VAR 0 3
48384: PPUSH
48385: CALL_OW 118
// wait ( 5 ) ;
48389: LD_INT 5
48391: PPUSH
48392: CALL_OW 67
// _d := GetDir ( unit ) ;
48396: LD_ADDR_VAR 0 10
48400: PUSH
48401: LD_VAR 0 1
48405: PPUSH
48406: CALL_OW 254
48410: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
48411: LD_ADDR_VAR 0 8
48415: PUSH
48416: LD_VAR 0 1
48420: PPUSH
48421: CALL_OW 250
48425: PPUSH
48426: LD_VAR 0 10
48430: PPUSH
48431: LD_VAR 0 5
48435: PPUSH
48436: CALL_OW 272
48440: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
48441: LD_ADDR_VAR 0 9
48445: PUSH
48446: LD_VAR 0 1
48450: PPUSH
48451: CALL_OW 251
48455: PPUSH
48456: LD_VAR 0 10
48460: PPUSH
48461: LD_VAR 0 5
48465: PPUSH
48466: CALL_OW 273
48470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48471: LD_VAR 0 8
48475: PPUSH
48476: LD_VAR 0 9
48480: PPUSH
48481: CALL_OW 488
48485: NOT
48486: IFFALSE 48490
// exit ;
48488: GO 48597
// ComAnimCustom ( unit , 1 ) ;
48490: LD_VAR 0 1
48494: PPUSH
48495: LD_INT 1
48497: PPUSH
48498: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
48502: LD_VAR 0 8
48506: PPUSH
48507: LD_VAR 0 9
48511: PPUSH
48512: LD_VAR 0 6
48516: PPUSH
48517: LD_VAR 0 7
48521: PPUSH
48522: CALL_OW 330
// repeat wait ( 1 ) ;
48526: LD_INT 1
48528: PPUSH
48529: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
48533: LD_VAR 0 1
48537: PPUSH
48538: CALL_OW 316
48542: PUSH
48543: LD_VAR 0 1
48547: PPUSH
48548: CALL_OW 314
48552: OR
48553: PUSH
48554: LD_VAR 0 1
48558: PPUSH
48559: CALL_OW 302
48563: NOT
48564: OR
48565: PUSH
48566: LD_VAR 0 1
48570: PPUSH
48571: CALL_OW 301
48575: OR
48576: IFFALSE 48526
// RemoveSeeing ( _x , _y , side ) ;
48578: LD_VAR 0 8
48582: PPUSH
48583: LD_VAR 0 9
48587: PPUSH
48588: LD_VAR 0 6
48592: PPUSH
48593: CALL_OW 331
// end ; end_of_file
48597: LD_VAR 0 4
48601: RET
// export globalGameSaveCounter ; every 0 0$1 do
48602: GO 48604
48604: DISABLE
// begin enable ;
48605: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48606: LD_STRING updateTimer(
48608: PUSH
48609: LD_OWVAR 1
48613: STR
48614: PUSH
48615: LD_STRING );
48617: STR
48618: PPUSH
48619: CALL_OW 559
// end ;
48623: END
// every 0 0$1 do
48624: GO 48626
48626: DISABLE
// begin globalGameSaveCounter := 0 ;
48627: LD_ADDR_EXP 19
48631: PUSH
48632: LD_INT 0
48634: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
48635: LD_STRING setGameSaveCounter(0)
48637: PPUSH
48638: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
48642: LD_STRING initStreamRollete();
48644: PPUSH
48645: CALL_OW 559
// InitStreamMode ;
48649: CALL 49975 0 0
// DefineStreamItems ( false ) ;
48653: LD_INT 0
48655: PPUSH
48656: CALL 50439 0 1
// end ;
48660: END
// export function SOS_MapStart ( ) ; begin
48661: LD_INT 0
48663: PPUSH
// if streamModeActive then
48664: LD_EXP 20
48668: IFFALSE 48677
// DefineStreamItems ( true ) ;
48670: LD_INT 1
48672: PPUSH
48673: CALL 50439 0 1
// UpdateLuaVariables ( ) ;
48677: CALL 48694 0 0
// UpdateFactoryWaypoints ( ) ;
48681: CALL 63308 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48685: CALL 63565 0 0
// end ;
48689: LD_VAR 0 1
48693: RET
// function UpdateLuaVariables ( ) ; begin
48694: LD_INT 0
48696: PPUSH
// if globalGameSaveCounter then
48697: LD_EXP 19
48701: IFFALSE 48735
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
48703: LD_ADDR_EXP 19
48707: PUSH
48708: LD_EXP 19
48712: PPUSH
48713: CALL 41452 0 1
48717: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48718: LD_STRING setGameSaveCounter(
48720: PUSH
48721: LD_EXP 19
48725: STR
48726: PUSH
48727: LD_STRING )
48729: STR
48730: PPUSH
48731: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
48735: LD_STRING setGameDifficulty(
48737: PUSH
48738: LD_OWVAR 67
48742: STR
48743: PUSH
48744: LD_STRING )
48746: STR
48747: PPUSH
48748: CALL_OW 559
// end ;
48752: LD_VAR 0 1
48756: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48757: LD_INT 0
48759: PPUSH
// if p2 = stream_mode then
48760: LD_VAR 0 2
48764: PUSH
48765: LD_INT 100
48767: EQUAL
48768: IFFALSE 49771
// begin if not StreamModeActive then
48770: LD_EXP 20
48774: NOT
48775: IFFALSE 48785
// StreamModeActive := true ;
48777: LD_ADDR_EXP 20
48781: PUSH
48782: LD_INT 1
48784: ST_TO_ADDR
// if p3 = 0 then
48785: LD_VAR 0 3
48789: PUSH
48790: LD_INT 0
48792: EQUAL
48793: IFFALSE 48799
// InitStreamMode ;
48795: CALL 49975 0 0
// if p3 = 1 then
48799: LD_VAR 0 3
48803: PUSH
48804: LD_INT 1
48806: EQUAL
48807: IFFALSE 48817
// sRocket := true ;
48809: LD_ADDR_EXP 25
48813: PUSH
48814: LD_INT 1
48816: ST_TO_ADDR
// if p3 = 2 then
48817: LD_VAR 0 3
48821: PUSH
48822: LD_INT 2
48824: EQUAL
48825: IFFALSE 48835
// sSpeed := true ;
48827: LD_ADDR_EXP 24
48831: PUSH
48832: LD_INT 1
48834: ST_TO_ADDR
// if p3 = 3 then
48835: LD_VAR 0 3
48839: PUSH
48840: LD_INT 3
48842: EQUAL
48843: IFFALSE 48853
// sEngine := true ;
48845: LD_ADDR_EXP 26
48849: PUSH
48850: LD_INT 1
48852: ST_TO_ADDR
// if p3 = 4 then
48853: LD_VAR 0 3
48857: PUSH
48858: LD_INT 4
48860: EQUAL
48861: IFFALSE 48871
// sSpec := true ;
48863: LD_ADDR_EXP 23
48867: PUSH
48868: LD_INT 1
48870: ST_TO_ADDR
// if p3 = 5 then
48871: LD_VAR 0 3
48875: PUSH
48876: LD_INT 5
48878: EQUAL
48879: IFFALSE 48889
// sLevel := true ;
48881: LD_ADDR_EXP 27
48885: PUSH
48886: LD_INT 1
48888: ST_TO_ADDR
// if p3 = 6 then
48889: LD_VAR 0 3
48893: PUSH
48894: LD_INT 6
48896: EQUAL
48897: IFFALSE 48907
// sArmoury := true ;
48899: LD_ADDR_EXP 28
48903: PUSH
48904: LD_INT 1
48906: ST_TO_ADDR
// if p3 = 7 then
48907: LD_VAR 0 3
48911: PUSH
48912: LD_INT 7
48914: EQUAL
48915: IFFALSE 48925
// sRadar := true ;
48917: LD_ADDR_EXP 29
48921: PUSH
48922: LD_INT 1
48924: ST_TO_ADDR
// if p3 = 8 then
48925: LD_VAR 0 3
48929: PUSH
48930: LD_INT 8
48932: EQUAL
48933: IFFALSE 48943
// sBunker := true ;
48935: LD_ADDR_EXP 30
48939: PUSH
48940: LD_INT 1
48942: ST_TO_ADDR
// if p3 = 9 then
48943: LD_VAR 0 3
48947: PUSH
48948: LD_INT 9
48950: EQUAL
48951: IFFALSE 48961
// sHack := true ;
48953: LD_ADDR_EXP 31
48957: PUSH
48958: LD_INT 1
48960: ST_TO_ADDR
// if p3 = 10 then
48961: LD_VAR 0 3
48965: PUSH
48966: LD_INT 10
48968: EQUAL
48969: IFFALSE 48979
// sFire := true ;
48971: LD_ADDR_EXP 32
48975: PUSH
48976: LD_INT 1
48978: ST_TO_ADDR
// if p3 = 11 then
48979: LD_VAR 0 3
48983: PUSH
48984: LD_INT 11
48986: EQUAL
48987: IFFALSE 48997
// sRefresh := true ;
48989: LD_ADDR_EXP 33
48993: PUSH
48994: LD_INT 1
48996: ST_TO_ADDR
// if p3 = 12 then
48997: LD_VAR 0 3
49001: PUSH
49002: LD_INT 12
49004: EQUAL
49005: IFFALSE 49015
// sExp := true ;
49007: LD_ADDR_EXP 34
49011: PUSH
49012: LD_INT 1
49014: ST_TO_ADDR
// if p3 = 13 then
49015: LD_VAR 0 3
49019: PUSH
49020: LD_INT 13
49022: EQUAL
49023: IFFALSE 49033
// sDepot := true ;
49025: LD_ADDR_EXP 35
49029: PUSH
49030: LD_INT 1
49032: ST_TO_ADDR
// if p3 = 14 then
49033: LD_VAR 0 3
49037: PUSH
49038: LD_INT 14
49040: EQUAL
49041: IFFALSE 49051
// sFlag := true ;
49043: LD_ADDR_EXP 36
49047: PUSH
49048: LD_INT 1
49050: ST_TO_ADDR
// if p3 = 15 then
49051: LD_VAR 0 3
49055: PUSH
49056: LD_INT 15
49058: EQUAL
49059: IFFALSE 49069
// sKamikadze := true ;
49061: LD_ADDR_EXP 44
49065: PUSH
49066: LD_INT 1
49068: ST_TO_ADDR
// if p3 = 16 then
49069: LD_VAR 0 3
49073: PUSH
49074: LD_INT 16
49076: EQUAL
49077: IFFALSE 49087
// sTroll := true ;
49079: LD_ADDR_EXP 45
49083: PUSH
49084: LD_INT 1
49086: ST_TO_ADDR
// if p3 = 17 then
49087: LD_VAR 0 3
49091: PUSH
49092: LD_INT 17
49094: EQUAL
49095: IFFALSE 49105
// sSlow := true ;
49097: LD_ADDR_EXP 46
49101: PUSH
49102: LD_INT 1
49104: ST_TO_ADDR
// if p3 = 18 then
49105: LD_VAR 0 3
49109: PUSH
49110: LD_INT 18
49112: EQUAL
49113: IFFALSE 49123
// sLack := true ;
49115: LD_ADDR_EXP 47
49119: PUSH
49120: LD_INT 1
49122: ST_TO_ADDR
// if p3 = 19 then
49123: LD_VAR 0 3
49127: PUSH
49128: LD_INT 19
49130: EQUAL
49131: IFFALSE 49141
// sTank := true ;
49133: LD_ADDR_EXP 49
49137: PUSH
49138: LD_INT 1
49140: ST_TO_ADDR
// if p3 = 20 then
49141: LD_VAR 0 3
49145: PUSH
49146: LD_INT 20
49148: EQUAL
49149: IFFALSE 49159
// sRemote := true ;
49151: LD_ADDR_EXP 50
49155: PUSH
49156: LD_INT 1
49158: ST_TO_ADDR
// if p3 = 21 then
49159: LD_VAR 0 3
49163: PUSH
49164: LD_INT 21
49166: EQUAL
49167: IFFALSE 49177
// sPowell := true ;
49169: LD_ADDR_EXP 51
49173: PUSH
49174: LD_INT 1
49176: ST_TO_ADDR
// if p3 = 22 then
49177: LD_VAR 0 3
49181: PUSH
49182: LD_INT 22
49184: EQUAL
49185: IFFALSE 49195
// sTeleport := true ;
49187: LD_ADDR_EXP 54
49191: PUSH
49192: LD_INT 1
49194: ST_TO_ADDR
// if p3 = 23 then
49195: LD_VAR 0 3
49199: PUSH
49200: LD_INT 23
49202: EQUAL
49203: IFFALSE 49213
// sOilTower := true ;
49205: LD_ADDR_EXP 56
49209: PUSH
49210: LD_INT 1
49212: ST_TO_ADDR
// if p3 = 24 then
49213: LD_VAR 0 3
49217: PUSH
49218: LD_INT 24
49220: EQUAL
49221: IFFALSE 49231
// sShovel := true ;
49223: LD_ADDR_EXP 57
49227: PUSH
49228: LD_INT 1
49230: ST_TO_ADDR
// if p3 = 25 then
49231: LD_VAR 0 3
49235: PUSH
49236: LD_INT 25
49238: EQUAL
49239: IFFALSE 49249
// sSheik := true ;
49241: LD_ADDR_EXP 58
49245: PUSH
49246: LD_INT 1
49248: ST_TO_ADDR
// if p3 = 26 then
49249: LD_VAR 0 3
49253: PUSH
49254: LD_INT 26
49256: EQUAL
49257: IFFALSE 49267
// sEarthquake := true ;
49259: LD_ADDR_EXP 60
49263: PUSH
49264: LD_INT 1
49266: ST_TO_ADDR
// if p3 = 27 then
49267: LD_VAR 0 3
49271: PUSH
49272: LD_INT 27
49274: EQUAL
49275: IFFALSE 49285
// sAI := true ;
49277: LD_ADDR_EXP 61
49281: PUSH
49282: LD_INT 1
49284: ST_TO_ADDR
// if p3 = 28 then
49285: LD_VAR 0 3
49289: PUSH
49290: LD_INT 28
49292: EQUAL
49293: IFFALSE 49303
// sCargo := true ;
49295: LD_ADDR_EXP 64
49299: PUSH
49300: LD_INT 1
49302: ST_TO_ADDR
// if p3 = 29 then
49303: LD_VAR 0 3
49307: PUSH
49308: LD_INT 29
49310: EQUAL
49311: IFFALSE 49321
// sDLaser := true ;
49313: LD_ADDR_EXP 65
49317: PUSH
49318: LD_INT 1
49320: ST_TO_ADDR
// if p3 = 30 then
49321: LD_VAR 0 3
49325: PUSH
49326: LD_INT 30
49328: EQUAL
49329: IFFALSE 49339
// sExchange := true ;
49331: LD_ADDR_EXP 66
49335: PUSH
49336: LD_INT 1
49338: ST_TO_ADDR
// if p3 = 31 then
49339: LD_VAR 0 3
49343: PUSH
49344: LD_INT 31
49346: EQUAL
49347: IFFALSE 49357
// sFac := true ;
49349: LD_ADDR_EXP 67
49353: PUSH
49354: LD_INT 1
49356: ST_TO_ADDR
// if p3 = 32 then
49357: LD_VAR 0 3
49361: PUSH
49362: LD_INT 32
49364: EQUAL
49365: IFFALSE 49375
// sPower := true ;
49367: LD_ADDR_EXP 68
49371: PUSH
49372: LD_INT 1
49374: ST_TO_ADDR
// if p3 = 33 then
49375: LD_VAR 0 3
49379: PUSH
49380: LD_INT 33
49382: EQUAL
49383: IFFALSE 49393
// sRandom := true ;
49385: LD_ADDR_EXP 69
49389: PUSH
49390: LD_INT 1
49392: ST_TO_ADDR
// if p3 = 34 then
49393: LD_VAR 0 3
49397: PUSH
49398: LD_INT 34
49400: EQUAL
49401: IFFALSE 49411
// sShield := true ;
49403: LD_ADDR_EXP 70
49407: PUSH
49408: LD_INT 1
49410: ST_TO_ADDR
// if p3 = 35 then
49411: LD_VAR 0 3
49415: PUSH
49416: LD_INT 35
49418: EQUAL
49419: IFFALSE 49429
// sTime := true ;
49421: LD_ADDR_EXP 71
49425: PUSH
49426: LD_INT 1
49428: ST_TO_ADDR
// if p3 = 36 then
49429: LD_VAR 0 3
49433: PUSH
49434: LD_INT 36
49436: EQUAL
49437: IFFALSE 49447
// sTools := true ;
49439: LD_ADDR_EXP 72
49443: PUSH
49444: LD_INT 1
49446: ST_TO_ADDR
// if p3 = 101 then
49447: LD_VAR 0 3
49451: PUSH
49452: LD_INT 101
49454: EQUAL
49455: IFFALSE 49465
// sSold := true ;
49457: LD_ADDR_EXP 37
49461: PUSH
49462: LD_INT 1
49464: ST_TO_ADDR
// if p3 = 102 then
49465: LD_VAR 0 3
49469: PUSH
49470: LD_INT 102
49472: EQUAL
49473: IFFALSE 49483
// sDiff := true ;
49475: LD_ADDR_EXP 38
49479: PUSH
49480: LD_INT 1
49482: ST_TO_ADDR
// if p3 = 103 then
49483: LD_VAR 0 3
49487: PUSH
49488: LD_INT 103
49490: EQUAL
49491: IFFALSE 49501
// sFog := true ;
49493: LD_ADDR_EXP 41
49497: PUSH
49498: LD_INT 1
49500: ST_TO_ADDR
// if p3 = 104 then
49501: LD_VAR 0 3
49505: PUSH
49506: LD_INT 104
49508: EQUAL
49509: IFFALSE 49519
// sReset := true ;
49511: LD_ADDR_EXP 42
49515: PUSH
49516: LD_INT 1
49518: ST_TO_ADDR
// if p3 = 105 then
49519: LD_VAR 0 3
49523: PUSH
49524: LD_INT 105
49526: EQUAL
49527: IFFALSE 49537
// sSun := true ;
49529: LD_ADDR_EXP 43
49533: PUSH
49534: LD_INT 1
49536: ST_TO_ADDR
// if p3 = 106 then
49537: LD_VAR 0 3
49541: PUSH
49542: LD_INT 106
49544: EQUAL
49545: IFFALSE 49555
// sTiger := true ;
49547: LD_ADDR_EXP 39
49551: PUSH
49552: LD_INT 1
49554: ST_TO_ADDR
// if p3 = 107 then
49555: LD_VAR 0 3
49559: PUSH
49560: LD_INT 107
49562: EQUAL
49563: IFFALSE 49573
// sBomb := true ;
49565: LD_ADDR_EXP 40
49569: PUSH
49570: LD_INT 1
49572: ST_TO_ADDR
// if p3 = 108 then
49573: LD_VAR 0 3
49577: PUSH
49578: LD_INT 108
49580: EQUAL
49581: IFFALSE 49591
// sWound := true ;
49583: LD_ADDR_EXP 48
49587: PUSH
49588: LD_INT 1
49590: ST_TO_ADDR
// if p3 = 109 then
49591: LD_VAR 0 3
49595: PUSH
49596: LD_INT 109
49598: EQUAL
49599: IFFALSE 49609
// sBetray := true ;
49601: LD_ADDR_EXP 52
49605: PUSH
49606: LD_INT 1
49608: ST_TO_ADDR
// if p3 = 110 then
49609: LD_VAR 0 3
49613: PUSH
49614: LD_INT 110
49616: EQUAL
49617: IFFALSE 49627
// sContamin := true ;
49619: LD_ADDR_EXP 53
49623: PUSH
49624: LD_INT 1
49626: ST_TO_ADDR
// if p3 = 111 then
49627: LD_VAR 0 3
49631: PUSH
49632: LD_INT 111
49634: EQUAL
49635: IFFALSE 49645
// sOil := true ;
49637: LD_ADDR_EXP 55
49641: PUSH
49642: LD_INT 1
49644: ST_TO_ADDR
// if p3 = 112 then
49645: LD_VAR 0 3
49649: PUSH
49650: LD_INT 112
49652: EQUAL
49653: IFFALSE 49663
// sStu := true ;
49655: LD_ADDR_EXP 59
49659: PUSH
49660: LD_INT 1
49662: ST_TO_ADDR
// if p3 = 113 then
49663: LD_VAR 0 3
49667: PUSH
49668: LD_INT 113
49670: EQUAL
49671: IFFALSE 49681
// sBazooka := true ;
49673: LD_ADDR_EXP 62
49677: PUSH
49678: LD_INT 1
49680: ST_TO_ADDR
// if p3 = 114 then
49681: LD_VAR 0 3
49685: PUSH
49686: LD_INT 114
49688: EQUAL
49689: IFFALSE 49699
// sMortar := true ;
49691: LD_ADDR_EXP 63
49695: PUSH
49696: LD_INT 1
49698: ST_TO_ADDR
// if p3 = 115 then
49699: LD_VAR 0 3
49703: PUSH
49704: LD_INT 115
49706: EQUAL
49707: IFFALSE 49717
// sRanger := true ;
49709: LD_ADDR_EXP 73
49713: PUSH
49714: LD_INT 1
49716: ST_TO_ADDR
// if p3 = 116 then
49717: LD_VAR 0 3
49721: PUSH
49722: LD_INT 116
49724: EQUAL
49725: IFFALSE 49735
// sComputer := true ;
49727: LD_ADDR_EXP 74
49731: PUSH
49732: LD_INT 1
49734: ST_TO_ADDR
// if p3 = 117 then
49735: LD_VAR 0 3
49739: PUSH
49740: LD_INT 117
49742: EQUAL
49743: IFFALSE 49753
// s30 := true ;
49745: LD_ADDR_EXP 75
49749: PUSH
49750: LD_INT 1
49752: ST_TO_ADDR
// if p3 = 118 then
49753: LD_VAR 0 3
49757: PUSH
49758: LD_INT 118
49760: EQUAL
49761: IFFALSE 49771
// s60 := true ;
49763: LD_ADDR_EXP 76
49767: PUSH
49768: LD_INT 1
49770: ST_TO_ADDR
// end ; if p2 = hack_mode then
49771: LD_VAR 0 2
49775: PUSH
49776: LD_INT 101
49778: EQUAL
49779: IFFALSE 49907
// begin case p3 of 1 :
49781: LD_VAR 0 3
49785: PUSH
49786: LD_INT 1
49788: DOUBLE
49789: EQUAL
49790: IFTRUE 49794
49792: GO 49801
49794: POP
// hHackUnlimitedResources ; 2 :
49795: CALL 62054 0 0
49799: GO 49907
49801: LD_INT 2
49803: DOUBLE
49804: EQUAL
49805: IFTRUE 49809
49807: GO 49816
49809: POP
// hHackSetLevel10 ; 3 :
49810: CALL 62187 0 0
49814: GO 49907
49816: LD_INT 3
49818: DOUBLE
49819: EQUAL
49820: IFTRUE 49824
49822: GO 49831
49824: POP
// hHackSetLevel10YourUnits ; 4 :
49825: CALL 62272 0 0
49829: GO 49907
49831: LD_INT 4
49833: DOUBLE
49834: EQUAL
49835: IFTRUE 49839
49837: GO 49846
49839: POP
// hHackInvincible ; 5 :
49840: CALL 62720 0 0
49844: GO 49907
49846: LD_INT 5
49848: DOUBLE
49849: EQUAL
49850: IFTRUE 49854
49852: GO 49861
49854: POP
// hHackInvisible ; 6 :
49855: CALL 62831 0 0
49859: GO 49907
49861: LD_INT 6
49863: DOUBLE
49864: EQUAL
49865: IFTRUE 49869
49867: GO 49876
49869: POP
// hHackChangeYourSide ; 7 :
49870: CALL 62888 0 0
49874: GO 49907
49876: LD_INT 7
49878: DOUBLE
49879: EQUAL
49880: IFTRUE 49884
49882: GO 49891
49884: POP
// hHackChangeUnitSide ; 8 :
49885: CALL 62930 0 0
49889: GO 49907
49891: LD_INT 8
49893: DOUBLE
49894: EQUAL
49895: IFTRUE 49899
49897: GO 49906
49899: POP
// hHackFog ; end ;
49900: CALL 63031 0 0
49904: GO 49907
49906: POP
// end ; if p2 = game_save_mode then
49907: LD_VAR 0 2
49911: PUSH
49912: LD_INT 102
49914: EQUAL
49915: IFFALSE 49970
// begin if p3 = 1 then
49917: LD_VAR 0 3
49921: PUSH
49922: LD_INT 1
49924: EQUAL
49925: IFFALSE 49937
// globalGameSaveCounter := p4 ;
49927: LD_ADDR_EXP 19
49931: PUSH
49932: LD_VAR 0 4
49936: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49937: LD_VAR 0 3
49941: PUSH
49942: LD_INT 2
49944: EQUAL
49945: PUSH
49946: LD_EXP 19
49950: AND
49951: IFFALSE 49970
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49953: LD_STRING setGameSaveCounter(
49955: PUSH
49956: LD_EXP 19
49960: STR
49961: PUSH
49962: LD_STRING )
49964: STR
49965: PPUSH
49966: CALL_OW 559
// end ; end ;
49970: LD_VAR 0 7
49974: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
49975: LD_INT 0
49977: PPUSH
// streamModeActive := false ;
49978: LD_ADDR_EXP 20
49982: PUSH
49983: LD_INT 0
49985: ST_TO_ADDR
// normalCounter := 36 ;
49986: LD_ADDR_EXP 21
49990: PUSH
49991: LD_INT 36
49993: ST_TO_ADDR
// hardcoreCounter := 18 ;
49994: LD_ADDR_EXP 22
49998: PUSH
49999: LD_INT 18
50001: ST_TO_ADDR
// sRocket := false ;
50002: LD_ADDR_EXP 25
50006: PUSH
50007: LD_INT 0
50009: ST_TO_ADDR
// sSpeed := false ;
50010: LD_ADDR_EXP 24
50014: PUSH
50015: LD_INT 0
50017: ST_TO_ADDR
// sEngine := false ;
50018: LD_ADDR_EXP 26
50022: PUSH
50023: LD_INT 0
50025: ST_TO_ADDR
// sSpec := false ;
50026: LD_ADDR_EXP 23
50030: PUSH
50031: LD_INT 0
50033: ST_TO_ADDR
// sLevel := false ;
50034: LD_ADDR_EXP 27
50038: PUSH
50039: LD_INT 0
50041: ST_TO_ADDR
// sArmoury := false ;
50042: LD_ADDR_EXP 28
50046: PUSH
50047: LD_INT 0
50049: ST_TO_ADDR
// sRadar := false ;
50050: LD_ADDR_EXP 29
50054: PUSH
50055: LD_INT 0
50057: ST_TO_ADDR
// sBunker := false ;
50058: LD_ADDR_EXP 30
50062: PUSH
50063: LD_INT 0
50065: ST_TO_ADDR
// sHack := false ;
50066: LD_ADDR_EXP 31
50070: PUSH
50071: LD_INT 0
50073: ST_TO_ADDR
// sFire := false ;
50074: LD_ADDR_EXP 32
50078: PUSH
50079: LD_INT 0
50081: ST_TO_ADDR
// sRefresh := false ;
50082: LD_ADDR_EXP 33
50086: PUSH
50087: LD_INT 0
50089: ST_TO_ADDR
// sExp := false ;
50090: LD_ADDR_EXP 34
50094: PUSH
50095: LD_INT 0
50097: ST_TO_ADDR
// sDepot := false ;
50098: LD_ADDR_EXP 35
50102: PUSH
50103: LD_INT 0
50105: ST_TO_ADDR
// sFlag := false ;
50106: LD_ADDR_EXP 36
50110: PUSH
50111: LD_INT 0
50113: ST_TO_ADDR
// sKamikadze := false ;
50114: LD_ADDR_EXP 44
50118: PUSH
50119: LD_INT 0
50121: ST_TO_ADDR
// sTroll := false ;
50122: LD_ADDR_EXP 45
50126: PUSH
50127: LD_INT 0
50129: ST_TO_ADDR
// sSlow := false ;
50130: LD_ADDR_EXP 46
50134: PUSH
50135: LD_INT 0
50137: ST_TO_ADDR
// sLack := false ;
50138: LD_ADDR_EXP 47
50142: PUSH
50143: LD_INT 0
50145: ST_TO_ADDR
// sTank := false ;
50146: LD_ADDR_EXP 49
50150: PUSH
50151: LD_INT 0
50153: ST_TO_ADDR
// sRemote := false ;
50154: LD_ADDR_EXP 50
50158: PUSH
50159: LD_INT 0
50161: ST_TO_ADDR
// sPowell := false ;
50162: LD_ADDR_EXP 51
50166: PUSH
50167: LD_INT 0
50169: ST_TO_ADDR
// sTeleport := false ;
50170: LD_ADDR_EXP 54
50174: PUSH
50175: LD_INT 0
50177: ST_TO_ADDR
// sOilTower := false ;
50178: LD_ADDR_EXP 56
50182: PUSH
50183: LD_INT 0
50185: ST_TO_ADDR
// sShovel := false ;
50186: LD_ADDR_EXP 57
50190: PUSH
50191: LD_INT 0
50193: ST_TO_ADDR
// sSheik := false ;
50194: LD_ADDR_EXP 58
50198: PUSH
50199: LD_INT 0
50201: ST_TO_ADDR
// sEarthquake := false ;
50202: LD_ADDR_EXP 60
50206: PUSH
50207: LD_INT 0
50209: ST_TO_ADDR
// sAI := false ;
50210: LD_ADDR_EXP 61
50214: PUSH
50215: LD_INT 0
50217: ST_TO_ADDR
// sCargo := false ;
50218: LD_ADDR_EXP 64
50222: PUSH
50223: LD_INT 0
50225: ST_TO_ADDR
// sDLaser := false ;
50226: LD_ADDR_EXP 65
50230: PUSH
50231: LD_INT 0
50233: ST_TO_ADDR
// sExchange := false ;
50234: LD_ADDR_EXP 66
50238: PUSH
50239: LD_INT 0
50241: ST_TO_ADDR
// sFac := false ;
50242: LD_ADDR_EXP 67
50246: PUSH
50247: LD_INT 0
50249: ST_TO_ADDR
// sPower := false ;
50250: LD_ADDR_EXP 68
50254: PUSH
50255: LD_INT 0
50257: ST_TO_ADDR
// sRandom := false ;
50258: LD_ADDR_EXP 69
50262: PUSH
50263: LD_INT 0
50265: ST_TO_ADDR
// sShield := false ;
50266: LD_ADDR_EXP 70
50270: PUSH
50271: LD_INT 0
50273: ST_TO_ADDR
// sTime := false ;
50274: LD_ADDR_EXP 71
50278: PUSH
50279: LD_INT 0
50281: ST_TO_ADDR
// sTools := false ;
50282: LD_ADDR_EXP 72
50286: PUSH
50287: LD_INT 0
50289: ST_TO_ADDR
// sSold := false ;
50290: LD_ADDR_EXP 37
50294: PUSH
50295: LD_INT 0
50297: ST_TO_ADDR
// sDiff := false ;
50298: LD_ADDR_EXP 38
50302: PUSH
50303: LD_INT 0
50305: ST_TO_ADDR
// sFog := false ;
50306: LD_ADDR_EXP 41
50310: PUSH
50311: LD_INT 0
50313: ST_TO_ADDR
// sReset := false ;
50314: LD_ADDR_EXP 42
50318: PUSH
50319: LD_INT 0
50321: ST_TO_ADDR
// sSun := false ;
50322: LD_ADDR_EXP 43
50326: PUSH
50327: LD_INT 0
50329: ST_TO_ADDR
// sTiger := false ;
50330: LD_ADDR_EXP 39
50334: PUSH
50335: LD_INT 0
50337: ST_TO_ADDR
// sBomb := false ;
50338: LD_ADDR_EXP 40
50342: PUSH
50343: LD_INT 0
50345: ST_TO_ADDR
// sWound := false ;
50346: LD_ADDR_EXP 48
50350: PUSH
50351: LD_INT 0
50353: ST_TO_ADDR
// sBetray := false ;
50354: LD_ADDR_EXP 52
50358: PUSH
50359: LD_INT 0
50361: ST_TO_ADDR
// sContamin := false ;
50362: LD_ADDR_EXP 53
50366: PUSH
50367: LD_INT 0
50369: ST_TO_ADDR
// sOil := false ;
50370: LD_ADDR_EXP 55
50374: PUSH
50375: LD_INT 0
50377: ST_TO_ADDR
// sStu := false ;
50378: LD_ADDR_EXP 59
50382: PUSH
50383: LD_INT 0
50385: ST_TO_ADDR
// sBazooka := false ;
50386: LD_ADDR_EXP 62
50390: PUSH
50391: LD_INT 0
50393: ST_TO_ADDR
// sMortar := false ;
50394: LD_ADDR_EXP 63
50398: PUSH
50399: LD_INT 0
50401: ST_TO_ADDR
// sRanger := false ;
50402: LD_ADDR_EXP 73
50406: PUSH
50407: LD_INT 0
50409: ST_TO_ADDR
// sComputer := false ;
50410: LD_ADDR_EXP 74
50414: PUSH
50415: LD_INT 0
50417: ST_TO_ADDR
// s30 := false ;
50418: LD_ADDR_EXP 75
50422: PUSH
50423: LD_INT 0
50425: ST_TO_ADDR
// s60 := false ;
50426: LD_ADDR_EXP 76
50430: PUSH
50431: LD_INT 0
50433: ST_TO_ADDR
// end ;
50434: LD_VAR 0 1
50438: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50439: LD_INT 0
50441: PPUSH
50442: PPUSH
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
50447: PPUSH
// result := [ ] ;
50448: LD_ADDR_VAR 0 2
50452: PUSH
50453: EMPTY
50454: ST_TO_ADDR
// if campaign_id = 1 then
50455: LD_OWVAR 69
50459: PUSH
50460: LD_INT 1
50462: EQUAL
50463: IFFALSE 53629
// begin case mission_number of 1 :
50465: LD_OWVAR 70
50469: PUSH
50470: LD_INT 1
50472: DOUBLE
50473: EQUAL
50474: IFTRUE 50478
50476: GO 50554
50478: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
50479: LD_ADDR_VAR 0 2
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 4
50489: PUSH
50490: LD_INT 11
50492: PUSH
50493: LD_INT 12
50495: PUSH
50496: LD_INT 15
50498: PUSH
50499: LD_INT 16
50501: PUSH
50502: LD_INT 22
50504: PUSH
50505: LD_INT 23
50507: PUSH
50508: LD_INT 26
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 101
50524: PUSH
50525: LD_INT 102
50527: PUSH
50528: LD_INT 106
50530: PUSH
50531: LD_INT 116
50533: PUSH
50534: LD_INT 117
50536: PUSH
50537: LD_INT 118
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: ST_TO_ADDR
50552: GO 53627
50554: LD_INT 2
50556: DOUBLE
50557: EQUAL
50558: IFTRUE 50562
50560: GO 50646
50562: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
50563: LD_ADDR_VAR 0 2
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 4
50573: PUSH
50574: LD_INT 11
50576: PUSH
50577: LD_INT 12
50579: PUSH
50580: LD_INT 15
50582: PUSH
50583: LD_INT 16
50585: PUSH
50586: LD_INT 22
50588: PUSH
50589: LD_INT 23
50591: PUSH
50592: LD_INT 26
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 101
50608: PUSH
50609: LD_INT 102
50611: PUSH
50612: LD_INT 105
50614: PUSH
50615: LD_INT 106
50617: PUSH
50618: LD_INT 108
50620: PUSH
50621: LD_INT 116
50623: PUSH
50624: LD_INT 117
50626: PUSH
50627: LD_INT 118
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: ST_TO_ADDR
50644: GO 53627
50646: LD_INT 3
50648: DOUBLE
50649: EQUAL
50650: IFTRUE 50654
50652: GO 50742
50654: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50655: LD_ADDR_VAR 0 2
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 4
50665: PUSH
50666: LD_INT 5
50668: PUSH
50669: LD_INT 11
50671: PUSH
50672: LD_INT 12
50674: PUSH
50675: LD_INT 15
50677: PUSH
50678: LD_INT 16
50680: PUSH
50681: LD_INT 22
50683: PUSH
50684: LD_INT 26
50686: PUSH
50687: LD_INT 36
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 101
50704: PUSH
50705: LD_INT 102
50707: PUSH
50708: LD_INT 105
50710: PUSH
50711: LD_INT 106
50713: PUSH
50714: LD_INT 108
50716: PUSH
50717: LD_INT 116
50719: PUSH
50720: LD_INT 117
50722: PUSH
50723: LD_INT 118
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: ST_TO_ADDR
50740: GO 53627
50742: LD_INT 4
50744: DOUBLE
50745: EQUAL
50746: IFTRUE 50750
50748: GO 50846
50750: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50751: LD_ADDR_VAR 0 2
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: LD_INT 4
50761: PUSH
50762: LD_INT 5
50764: PUSH
50765: LD_INT 8
50767: PUSH
50768: LD_INT 11
50770: PUSH
50771: LD_INT 12
50773: PUSH
50774: LD_INT 15
50776: PUSH
50777: LD_INT 16
50779: PUSH
50780: LD_INT 22
50782: PUSH
50783: LD_INT 23
50785: PUSH
50786: LD_INT 26
50788: PUSH
50789: LD_INT 36
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 101
50808: PUSH
50809: LD_INT 102
50811: PUSH
50812: LD_INT 105
50814: PUSH
50815: LD_INT 106
50817: PUSH
50818: LD_INT 108
50820: PUSH
50821: LD_INT 116
50823: PUSH
50824: LD_INT 117
50826: PUSH
50827: LD_INT 118
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: ST_TO_ADDR
50844: GO 53627
50846: LD_INT 5
50848: DOUBLE
50849: EQUAL
50850: IFTRUE 50854
50852: GO 50966
50854: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50855: LD_ADDR_VAR 0 2
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: LD_INT 4
50865: PUSH
50866: LD_INT 5
50868: PUSH
50869: LD_INT 6
50871: PUSH
50872: LD_INT 8
50874: PUSH
50875: LD_INT 11
50877: PUSH
50878: LD_INT 12
50880: PUSH
50881: LD_INT 15
50883: PUSH
50884: LD_INT 16
50886: PUSH
50887: LD_INT 22
50889: PUSH
50890: LD_INT 23
50892: PUSH
50893: LD_INT 25
50895: PUSH
50896: LD_INT 26
50898: PUSH
50899: LD_INT 36
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 101
50920: PUSH
50921: LD_INT 102
50923: PUSH
50924: LD_INT 105
50926: PUSH
50927: LD_INT 106
50929: PUSH
50930: LD_INT 108
50932: PUSH
50933: LD_INT 109
50935: PUSH
50936: LD_INT 112
50938: PUSH
50939: LD_INT 116
50941: PUSH
50942: LD_INT 117
50944: PUSH
50945: LD_INT 118
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: ST_TO_ADDR
50964: GO 53627
50966: LD_INT 6
50968: DOUBLE
50969: EQUAL
50970: IFTRUE 50974
50972: GO 51106
50974: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50975: LD_ADDR_VAR 0 2
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 4
50985: PUSH
50986: LD_INT 5
50988: PUSH
50989: LD_INT 6
50991: PUSH
50992: LD_INT 8
50994: PUSH
50995: LD_INT 11
50997: PUSH
50998: LD_INT 12
51000: PUSH
51001: LD_INT 15
51003: PUSH
51004: LD_INT 16
51006: PUSH
51007: LD_INT 20
51009: PUSH
51010: LD_INT 21
51012: PUSH
51013: LD_INT 22
51015: PUSH
51016: LD_INT 23
51018: PUSH
51019: LD_INT 25
51021: PUSH
51022: LD_INT 26
51024: PUSH
51025: LD_INT 30
51027: PUSH
51028: LD_INT 31
51030: PUSH
51031: LD_INT 32
51033: PUSH
51034: LD_INT 36
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 101
51060: PUSH
51061: LD_INT 102
51063: PUSH
51064: LD_INT 105
51066: PUSH
51067: LD_INT 106
51069: PUSH
51070: LD_INT 108
51072: PUSH
51073: LD_INT 109
51075: PUSH
51076: LD_INT 112
51078: PUSH
51079: LD_INT 116
51081: PUSH
51082: LD_INT 117
51084: PUSH
51085: LD_INT 118
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: ST_TO_ADDR
51104: GO 53627
51106: LD_INT 7
51108: DOUBLE
51109: EQUAL
51110: IFTRUE 51114
51112: GO 51226
51114: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
51115: LD_ADDR_VAR 0 2
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 4
51125: PUSH
51126: LD_INT 5
51128: PUSH
51129: LD_INT 7
51131: PUSH
51132: LD_INT 11
51134: PUSH
51135: LD_INT 12
51137: PUSH
51138: LD_INT 15
51140: PUSH
51141: LD_INT 16
51143: PUSH
51144: LD_INT 20
51146: PUSH
51147: LD_INT 21
51149: PUSH
51150: LD_INT 22
51152: PUSH
51153: LD_INT 23
51155: PUSH
51156: LD_INT 25
51158: PUSH
51159: LD_INT 26
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 101
51180: PUSH
51181: LD_INT 102
51183: PUSH
51184: LD_INT 103
51186: PUSH
51187: LD_INT 105
51189: PUSH
51190: LD_INT 106
51192: PUSH
51193: LD_INT 108
51195: PUSH
51196: LD_INT 112
51198: PUSH
51199: LD_INT 116
51201: PUSH
51202: LD_INT 117
51204: PUSH
51205: LD_INT 118
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: ST_TO_ADDR
51224: GO 53627
51226: LD_INT 8
51228: DOUBLE
51229: EQUAL
51230: IFTRUE 51234
51232: GO 51374
51234: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51235: LD_ADDR_VAR 0 2
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 4
51245: PUSH
51246: LD_INT 5
51248: PUSH
51249: LD_INT 6
51251: PUSH
51252: LD_INT 7
51254: PUSH
51255: LD_INT 8
51257: PUSH
51258: LD_INT 11
51260: PUSH
51261: LD_INT 12
51263: PUSH
51264: LD_INT 15
51266: PUSH
51267: LD_INT 16
51269: PUSH
51270: LD_INT 20
51272: PUSH
51273: LD_INT 21
51275: PUSH
51276: LD_INT 22
51278: PUSH
51279: LD_INT 23
51281: PUSH
51282: LD_INT 25
51284: PUSH
51285: LD_INT 26
51287: PUSH
51288: LD_INT 30
51290: PUSH
51291: LD_INT 31
51293: PUSH
51294: LD_INT 32
51296: PUSH
51297: LD_INT 36
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 101
51324: PUSH
51325: LD_INT 102
51327: PUSH
51328: LD_INT 103
51330: PUSH
51331: LD_INT 105
51333: PUSH
51334: LD_INT 106
51336: PUSH
51337: LD_INT 108
51339: PUSH
51340: LD_INT 109
51342: PUSH
51343: LD_INT 112
51345: PUSH
51346: LD_INT 116
51348: PUSH
51349: LD_INT 117
51351: PUSH
51352: LD_INT 118
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: ST_TO_ADDR
51372: GO 53627
51374: LD_INT 9
51376: DOUBLE
51377: EQUAL
51378: IFTRUE 51382
51380: GO 51530
51382: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51383: LD_ADDR_VAR 0 2
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 4
51393: PUSH
51394: LD_INT 5
51396: PUSH
51397: LD_INT 6
51399: PUSH
51400: LD_INT 7
51402: PUSH
51403: LD_INT 8
51405: PUSH
51406: LD_INT 11
51408: PUSH
51409: LD_INT 12
51411: PUSH
51412: LD_INT 15
51414: PUSH
51415: LD_INT 16
51417: PUSH
51418: LD_INT 20
51420: PUSH
51421: LD_INT 21
51423: PUSH
51424: LD_INT 22
51426: PUSH
51427: LD_INT 23
51429: PUSH
51430: LD_INT 25
51432: PUSH
51433: LD_INT 26
51435: PUSH
51436: LD_INT 28
51438: PUSH
51439: LD_INT 30
51441: PUSH
51442: LD_INT 31
51444: PUSH
51445: LD_INT 32
51447: PUSH
51448: LD_INT 36
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 101
51476: PUSH
51477: LD_INT 102
51479: PUSH
51480: LD_INT 103
51482: PUSH
51483: LD_INT 105
51485: PUSH
51486: LD_INT 106
51488: PUSH
51489: LD_INT 108
51491: PUSH
51492: LD_INT 109
51494: PUSH
51495: LD_INT 112
51497: PUSH
51498: LD_INT 114
51500: PUSH
51501: LD_INT 116
51503: PUSH
51504: LD_INT 117
51506: PUSH
51507: LD_INT 118
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: ST_TO_ADDR
51528: GO 53627
51530: LD_INT 10
51532: DOUBLE
51533: EQUAL
51534: IFTRUE 51538
51536: GO 51734
51538: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
51539: LD_ADDR_VAR 0 2
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: LD_INT 4
51549: PUSH
51550: LD_INT 5
51552: PUSH
51553: LD_INT 6
51555: PUSH
51556: LD_INT 7
51558: PUSH
51559: LD_INT 8
51561: PUSH
51562: LD_INT 9
51564: PUSH
51565: LD_INT 10
51567: PUSH
51568: LD_INT 11
51570: PUSH
51571: LD_INT 12
51573: PUSH
51574: LD_INT 13
51576: PUSH
51577: LD_INT 14
51579: PUSH
51580: LD_INT 15
51582: PUSH
51583: LD_INT 16
51585: PUSH
51586: LD_INT 17
51588: PUSH
51589: LD_INT 18
51591: PUSH
51592: LD_INT 19
51594: PUSH
51595: LD_INT 20
51597: PUSH
51598: LD_INT 21
51600: PUSH
51601: LD_INT 22
51603: PUSH
51604: LD_INT 23
51606: PUSH
51607: LD_INT 24
51609: PUSH
51610: LD_INT 25
51612: PUSH
51613: LD_INT 26
51615: PUSH
51616: LD_INT 28
51618: PUSH
51619: LD_INT 30
51621: PUSH
51622: LD_INT 31
51624: PUSH
51625: LD_INT 32
51627: PUSH
51628: LD_INT 36
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 101
51664: PUSH
51665: LD_INT 102
51667: PUSH
51668: LD_INT 103
51670: PUSH
51671: LD_INT 104
51673: PUSH
51674: LD_INT 105
51676: PUSH
51677: LD_INT 106
51679: PUSH
51680: LD_INT 107
51682: PUSH
51683: LD_INT 108
51685: PUSH
51686: LD_INT 109
51688: PUSH
51689: LD_INT 110
51691: PUSH
51692: LD_INT 111
51694: PUSH
51695: LD_INT 112
51697: PUSH
51698: LD_INT 114
51700: PUSH
51701: LD_INT 116
51703: PUSH
51704: LD_INT 117
51706: PUSH
51707: LD_INT 118
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: ST_TO_ADDR
51732: GO 53627
51734: LD_INT 11
51736: DOUBLE
51737: EQUAL
51738: IFTRUE 51742
51740: GO 51946
51742: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51743: LD_ADDR_VAR 0 2
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: LD_INT 3
51753: PUSH
51754: LD_INT 4
51756: PUSH
51757: LD_INT 5
51759: PUSH
51760: LD_INT 6
51762: PUSH
51763: LD_INT 7
51765: PUSH
51766: LD_INT 8
51768: PUSH
51769: LD_INT 9
51771: PUSH
51772: LD_INT 10
51774: PUSH
51775: LD_INT 11
51777: PUSH
51778: LD_INT 12
51780: PUSH
51781: LD_INT 13
51783: PUSH
51784: LD_INT 14
51786: PUSH
51787: LD_INT 15
51789: PUSH
51790: LD_INT 16
51792: PUSH
51793: LD_INT 17
51795: PUSH
51796: LD_INT 18
51798: PUSH
51799: LD_INT 19
51801: PUSH
51802: LD_INT 20
51804: PUSH
51805: LD_INT 21
51807: PUSH
51808: LD_INT 22
51810: PUSH
51811: LD_INT 23
51813: PUSH
51814: LD_INT 24
51816: PUSH
51817: LD_INT 25
51819: PUSH
51820: LD_INT 26
51822: PUSH
51823: LD_INT 28
51825: PUSH
51826: LD_INT 30
51828: PUSH
51829: LD_INT 31
51831: PUSH
51832: LD_INT 32
51834: PUSH
51835: LD_INT 34
51837: PUSH
51838: LD_INT 36
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 101
51876: PUSH
51877: LD_INT 102
51879: PUSH
51880: LD_INT 103
51882: PUSH
51883: LD_INT 104
51885: PUSH
51886: LD_INT 105
51888: PUSH
51889: LD_INT 106
51891: PUSH
51892: LD_INT 107
51894: PUSH
51895: LD_INT 108
51897: PUSH
51898: LD_INT 109
51900: PUSH
51901: LD_INT 110
51903: PUSH
51904: LD_INT 111
51906: PUSH
51907: LD_INT 112
51909: PUSH
51910: LD_INT 114
51912: PUSH
51913: LD_INT 116
51915: PUSH
51916: LD_INT 117
51918: PUSH
51919: LD_INT 118
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: ST_TO_ADDR
51944: GO 53627
51946: LD_INT 12
51948: DOUBLE
51949: EQUAL
51950: IFTRUE 51954
51952: GO 52174
51954: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51955: LD_ADDR_VAR 0 2
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: LD_INT 4
51971: PUSH
51972: LD_INT 5
51974: PUSH
51975: LD_INT 6
51977: PUSH
51978: LD_INT 7
51980: PUSH
51981: LD_INT 8
51983: PUSH
51984: LD_INT 9
51986: PUSH
51987: LD_INT 10
51989: PUSH
51990: LD_INT 11
51992: PUSH
51993: LD_INT 12
51995: PUSH
51996: LD_INT 13
51998: PUSH
51999: LD_INT 14
52001: PUSH
52002: LD_INT 15
52004: PUSH
52005: LD_INT 16
52007: PUSH
52008: LD_INT 17
52010: PUSH
52011: LD_INT 18
52013: PUSH
52014: LD_INT 19
52016: PUSH
52017: LD_INT 20
52019: PUSH
52020: LD_INT 21
52022: PUSH
52023: LD_INT 22
52025: PUSH
52026: LD_INT 23
52028: PUSH
52029: LD_INT 24
52031: PUSH
52032: LD_INT 25
52034: PUSH
52035: LD_INT 26
52037: PUSH
52038: LD_INT 27
52040: PUSH
52041: LD_INT 28
52043: PUSH
52044: LD_INT 30
52046: PUSH
52047: LD_INT 31
52049: PUSH
52050: LD_INT 32
52052: PUSH
52053: LD_INT 33
52055: PUSH
52056: LD_INT 34
52058: PUSH
52059: LD_INT 36
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 101
52100: PUSH
52101: LD_INT 102
52103: PUSH
52104: LD_INT 103
52106: PUSH
52107: LD_INT 104
52109: PUSH
52110: LD_INT 105
52112: PUSH
52113: LD_INT 106
52115: PUSH
52116: LD_INT 107
52118: PUSH
52119: LD_INT 108
52121: PUSH
52122: LD_INT 109
52124: PUSH
52125: LD_INT 110
52127: PUSH
52128: LD_INT 111
52130: PUSH
52131: LD_INT 112
52133: PUSH
52134: LD_INT 113
52136: PUSH
52137: LD_INT 114
52139: PUSH
52140: LD_INT 116
52142: PUSH
52143: LD_INT 117
52145: PUSH
52146: LD_INT 118
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: ST_TO_ADDR
52172: GO 53627
52174: LD_INT 13
52176: DOUBLE
52177: EQUAL
52178: IFTRUE 52182
52180: GO 52390
52182: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
52183: LD_ADDR_VAR 0 2
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: LD_INT 4
52199: PUSH
52200: LD_INT 5
52202: PUSH
52203: LD_INT 8
52205: PUSH
52206: LD_INT 9
52208: PUSH
52209: LD_INT 10
52211: PUSH
52212: LD_INT 11
52214: PUSH
52215: LD_INT 12
52217: PUSH
52218: LD_INT 14
52220: PUSH
52221: LD_INT 15
52223: PUSH
52224: LD_INT 16
52226: PUSH
52227: LD_INT 17
52229: PUSH
52230: LD_INT 18
52232: PUSH
52233: LD_INT 19
52235: PUSH
52236: LD_INT 20
52238: PUSH
52239: LD_INT 21
52241: PUSH
52242: LD_INT 22
52244: PUSH
52245: LD_INT 23
52247: PUSH
52248: LD_INT 24
52250: PUSH
52251: LD_INT 25
52253: PUSH
52254: LD_INT 26
52256: PUSH
52257: LD_INT 27
52259: PUSH
52260: LD_INT 28
52262: PUSH
52263: LD_INT 30
52265: PUSH
52266: LD_INT 31
52268: PUSH
52269: LD_INT 32
52271: PUSH
52272: LD_INT 33
52274: PUSH
52275: LD_INT 34
52277: PUSH
52278: LD_INT 36
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 101
52316: PUSH
52317: LD_INT 102
52319: PUSH
52320: LD_INT 103
52322: PUSH
52323: LD_INT 104
52325: PUSH
52326: LD_INT 105
52328: PUSH
52329: LD_INT 106
52331: PUSH
52332: LD_INT 107
52334: PUSH
52335: LD_INT 108
52337: PUSH
52338: LD_INT 109
52340: PUSH
52341: LD_INT 110
52343: PUSH
52344: LD_INT 111
52346: PUSH
52347: LD_INT 112
52349: PUSH
52350: LD_INT 113
52352: PUSH
52353: LD_INT 114
52355: PUSH
52356: LD_INT 116
52358: PUSH
52359: LD_INT 117
52361: PUSH
52362: LD_INT 118
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: ST_TO_ADDR
52388: GO 53627
52390: LD_INT 14
52392: DOUBLE
52393: EQUAL
52394: IFTRUE 52398
52396: GO 52622
52398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52399: LD_ADDR_VAR 0 2
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: LD_INT 3
52412: PUSH
52413: LD_INT 4
52415: PUSH
52416: LD_INT 5
52418: PUSH
52419: LD_INT 6
52421: PUSH
52422: LD_INT 7
52424: PUSH
52425: LD_INT 8
52427: PUSH
52428: LD_INT 9
52430: PUSH
52431: LD_INT 10
52433: PUSH
52434: LD_INT 11
52436: PUSH
52437: LD_INT 12
52439: PUSH
52440: LD_INT 13
52442: PUSH
52443: LD_INT 14
52445: PUSH
52446: LD_INT 15
52448: PUSH
52449: LD_INT 16
52451: PUSH
52452: LD_INT 17
52454: PUSH
52455: LD_INT 18
52457: PUSH
52458: LD_INT 19
52460: PUSH
52461: LD_INT 20
52463: PUSH
52464: LD_INT 21
52466: PUSH
52467: LD_INT 22
52469: PUSH
52470: LD_INT 23
52472: PUSH
52473: LD_INT 24
52475: PUSH
52476: LD_INT 25
52478: PUSH
52479: LD_INT 26
52481: PUSH
52482: LD_INT 27
52484: PUSH
52485: LD_INT 28
52487: PUSH
52488: LD_INT 29
52490: PUSH
52491: LD_INT 30
52493: PUSH
52494: LD_INT 31
52496: PUSH
52497: LD_INT 32
52499: PUSH
52500: LD_INT 33
52502: PUSH
52503: LD_INT 34
52505: PUSH
52506: LD_INT 36
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 101
52548: PUSH
52549: LD_INT 102
52551: PUSH
52552: LD_INT 103
52554: PUSH
52555: LD_INT 104
52557: PUSH
52558: LD_INT 105
52560: PUSH
52561: LD_INT 106
52563: PUSH
52564: LD_INT 107
52566: PUSH
52567: LD_INT 108
52569: PUSH
52570: LD_INT 109
52572: PUSH
52573: LD_INT 110
52575: PUSH
52576: LD_INT 111
52578: PUSH
52579: LD_INT 112
52581: PUSH
52582: LD_INT 113
52584: PUSH
52585: LD_INT 114
52587: PUSH
52588: LD_INT 116
52590: PUSH
52591: LD_INT 117
52593: PUSH
52594: LD_INT 118
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: ST_TO_ADDR
52620: GO 53627
52622: LD_INT 15
52624: DOUBLE
52625: EQUAL
52626: IFTRUE 52630
52628: GO 52854
52630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52631: LD_ADDR_VAR 0 2
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: LD_INT 4
52647: PUSH
52648: LD_INT 5
52650: PUSH
52651: LD_INT 6
52653: PUSH
52654: LD_INT 7
52656: PUSH
52657: LD_INT 8
52659: PUSH
52660: LD_INT 9
52662: PUSH
52663: LD_INT 10
52665: PUSH
52666: LD_INT 11
52668: PUSH
52669: LD_INT 12
52671: PUSH
52672: LD_INT 13
52674: PUSH
52675: LD_INT 14
52677: PUSH
52678: LD_INT 15
52680: PUSH
52681: LD_INT 16
52683: PUSH
52684: LD_INT 17
52686: PUSH
52687: LD_INT 18
52689: PUSH
52690: LD_INT 19
52692: PUSH
52693: LD_INT 20
52695: PUSH
52696: LD_INT 21
52698: PUSH
52699: LD_INT 22
52701: PUSH
52702: LD_INT 23
52704: PUSH
52705: LD_INT 24
52707: PUSH
52708: LD_INT 25
52710: PUSH
52711: LD_INT 26
52713: PUSH
52714: LD_INT 27
52716: PUSH
52717: LD_INT 28
52719: PUSH
52720: LD_INT 29
52722: PUSH
52723: LD_INT 30
52725: PUSH
52726: LD_INT 31
52728: PUSH
52729: LD_INT 32
52731: PUSH
52732: LD_INT 33
52734: PUSH
52735: LD_INT 34
52737: PUSH
52738: LD_INT 36
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 101
52780: PUSH
52781: LD_INT 102
52783: PUSH
52784: LD_INT 103
52786: PUSH
52787: LD_INT 104
52789: PUSH
52790: LD_INT 105
52792: PUSH
52793: LD_INT 106
52795: PUSH
52796: LD_INT 107
52798: PUSH
52799: LD_INT 108
52801: PUSH
52802: LD_INT 109
52804: PUSH
52805: LD_INT 110
52807: PUSH
52808: LD_INT 111
52810: PUSH
52811: LD_INT 112
52813: PUSH
52814: LD_INT 113
52816: PUSH
52817: LD_INT 114
52819: PUSH
52820: LD_INT 116
52822: PUSH
52823: LD_INT 117
52825: PUSH
52826: LD_INT 118
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: ST_TO_ADDR
52852: GO 53627
52854: LD_INT 16
52856: DOUBLE
52857: EQUAL
52858: IFTRUE 52862
52860: GO 52998
52862: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52863: LD_ADDR_VAR 0 2
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 4
52873: PUSH
52874: LD_INT 5
52876: PUSH
52877: LD_INT 7
52879: PUSH
52880: LD_INT 11
52882: PUSH
52883: LD_INT 12
52885: PUSH
52886: LD_INT 15
52888: PUSH
52889: LD_INT 16
52891: PUSH
52892: LD_INT 20
52894: PUSH
52895: LD_INT 21
52897: PUSH
52898: LD_INT 22
52900: PUSH
52901: LD_INT 23
52903: PUSH
52904: LD_INT 25
52906: PUSH
52907: LD_INT 26
52909: PUSH
52910: LD_INT 30
52912: PUSH
52913: LD_INT 31
52915: PUSH
52916: LD_INT 32
52918: PUSH
52919: LD_INT 33
52921: PUSH
52922: LD_INT 34
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 101
52948: PUSH
52949: LD_INT 102
52951: PUSH
52952: LD_INT 103
52954: PUSH
52955: LD_INT 106
52957: PUSH
52958: LD_INT 108
52960: PUSH
52961: LD_INT 112
52963: PUSH
52964: LD_INT 113
52966: PUSH
52967: LD_INT 114
52969: PUSH
52970: LD_INT 116
52972: PUSH
52973: LD_INT 117
52975: PUSH
52976: LD_INT 118
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: ST_TO_ADDR
52996: GO 53627
52998: LD_INT 17
53000: DOUBLE
53001: EQUAL
53002: IFTRUE 53006
53004: GO 53230
53006: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
53007: LD_ADDR_VAR 0 2
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 3
53020: PUSH
53021: LD_INT 4
53023: PUSH
53024: LD_INT 5
53026: PUSH
53027: LD_INT 6
53029: PUSH
53030: LD_INT 7
53032: PUSH
53033: LD_INT 8
53035: PUSH
53036: LD_INT 9
53038: PUSH
53039: LD_INT 10
53041: PUSH
53042: LD_INT 11
53044: PUSH
53045: LD_INT 12
53047: PUSH
53048: LD_INT 13
53050: PUSH
53051: LD_INT 14
53053: PUSH
53054: LD_INT 15
53056: PUSH
53057: LD_INT 16
53059: PUSH
53060: LD_INT 17
53062: PUSH
53063: LD_INT 18
53065: PUSH
53066: LD_INT 19
53068: PUSH
53069: LD_INT 20
53071: PUSH
53072: LD_INT 21
53074: PUSH
53075: LD_INT 22
53077: PUSH
53078: LD_INT 23
53080: PUSH
53081: LD_INT 24
53083: PUSH
53084: LD_INT 25
53086: PUSH
53087: LD_INT 26
53089: PUSH
53090: LD_INT 27
53092: PUSH
53093: LD_INT 28
53095: PUSH
53096: LD_INT 29
53098: PUSH
53099: LD_INT 30
53101: PUSH
53102: LD_INT 31
53104: PUSH
53105: LD_INT 32
53107: PUSH
53108: LD_INT 33
53110: PUSH
53111: LD_INT 34
53113: PUSH
53114: LD_INT 36
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 101
53156: PUSH
53157: LD_INT 102
53159: PUSH
53160: LD_INT 103
53162: PUSH
53163: LD_INT 104
53165: PUSH
53166: LD_INT 105
53168: PUSH
53169: LD_INT 106
53171: PUSH
53172: LD_INT 107
53174: PUSH
53175: LD_INT 108
53177: PUSH
53178: LD_INT 109
53180: PUSH
53181: LD_INT 110
53183: PUSH
53184: LD_INT 111
53186: PUSH
53187: LD_INT 112
53189: PUSH
53190: LD_INT 113
53192: PUSH
53193: LD_INT 114
53195: PUSH
53196: LD_INT 116
53198: PUSH
53199: LD_INT 117
53201: PUSH
53202: LD_INT 118
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: ST_TO_ADDR
53228: GO 53627
53230: LD_INT 18
53232: DOUBLE
53233: EQUAL
53234: IFTRUE 53238
53236: GO 53386
53238: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53239: LD_ADDR_VAR 0 2
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 4
53249: PUSH
53250: LD_INT 5
53252: PUSH
53253: LD_INT 7
53255: PUSH
53256: LD_INT 11
53258: PUSH
53259: LD_INT 12
53261: PUSH
53262: LD_INT 15
53264: PUSH
53265: LD_INT 16
53267: PUSH
53268: LD_INT 20
53270: PUSH
53271: LD_INT 21
53273: PUSH
53274: LD_INT 22
53276: PUSH
53277: LD_INT 23
53279: PUSH
53280: LD_INT 25
53282: PUSH
53283: LD_INT 26
53285: PUSH
53286: LD_INT 30
53288: PUSH
53289: LD_INT 31
53291: PUSH
53292: LD_INT 32
53294: PUSH
53295: LD_INT 33
53297: PUSH
53298: LD_INT 34
53300: PUSH
53301: LD_INT 35
53303: PUSH
53304: LD_INT 36
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 101
53332: PUSH
53333: LD_INT 102
53335: PUSH
53336: LD_INT 103
53338: PUSH
53339: LD_INT 106
53341: PUSH
53342: LD_INT 108
53344: PUSH
53345: LD_INT 112
53347: PUSH
53348: LD_INT 113
53350: PUSH
53351: LD_INT 114
53353: PUSH
53354: LD_INT 115
53356: PUSH
53357: LD_INT 116
53359: PUSH
53360: LD_INT 117
53362: PUSH
53363: LD_INT 118
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: ST_TO_ADDR
53384: GO 53627
53386: LD_INT 19
53388: DOUBLE
53389: EQUAL
53390: IFTRUE 53394
53392: GO 53626
53394: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53395: LD_ADDR_VAR 0 2
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: LD_INT 4
53411: PUSH
53412: LD_INT 5
53414: PUSH
53415: LD_INT 6
53417: PUSH
53418: LD_INT 7
53420: PUSH
53421: LD_INT 8
53423: PUSH
53424: LD_INT 9
53426: PUSH
53427: LD_INT 10
53429: PUSH
53430: LD_INT 11
53432: PUSH
53433: LD_INT 12
53435: PUSH
53436: LD_INT 13
53438: PUSH
53439: LD_INT 14
53441: PUSH
53442: LD_INT 15
53444: PUSH
53445: LD_INT 16
53447: PUSH
53448: LD_INT 17
53450: PUSH
53451: LD_INT 18
53453: PUSH
53454: LD_INT 19
53456: PUSH
53457: LD_INT 20
53459: PUSH
53460: LD_INT 21
53462: PUSH
53463: LD_INT 22
53465: PUSH
53466: LD_INT 23
53468: PUSH
53469: LD_INT 24
53471: PUSH
53472: LD_INT 25
53474: PUSH
53475: LD_INT 26
53477: PUSH
53478: LD_INT 27
53480: PUSH
53481: LD_INT 28
53483: PUSH
53484: LD_INT 29
53486: PUSH
53487: LD_INT 30
53489: PUSH
53490: LD_INT 31
53492: PUSH
53493: LD_INT 32
53495: PUSH
53496: LD_INT 33
53498: PUSH
53499: LD_INT 34
53501: PUSH
53502: LD_INT 35
53504: PUSH
53505: LD_INT 36
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 101
53548: PUSH
53549: LD_INT 102
53551: PUSH
53552: LD_INT 103
53554: PUSH
53555: LD_INT 104
53557: PUSH
53558: LD_INT 105
53560: PUSH
53561: LD_INT 106
53563: PUSH
53564: LD_INT 107
53566: PUSH
53567: LD_INT 108
53569: PUSH
53570: LD_INT 109
53572: PUSH
53573: LD_INT 110
53575: PUSH
53576: LD_INT 111
53578: PUSH
53579: LD_INT 112
53581: PUSH
53582: LD_INT 113
53584: PUSH
53585: LD_INT 114
53587: PUSH
53588: LD_INT 115
53590: PUSH
53591: LD_INT 116
53593: PUSH
53594: LD_INT 117
53596: PUSH
53597: LD_INT 118
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: ST_TO_ADDR
53624: GO 53627
53626: POP
// end else
53627: GO 53858
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53629: LD_ADDR_VAR 0 2
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: LD_INT 4
53645: PUSH
53646: LD_INT 5
53648: PUSH
53649: LD_INT 6
53651: PUSH
53652: LD_INT 7
53654: PUSH
53655: LD_INT 8
53657: PUSH
53658: LD_INT 9
53660: PUSH
53661: LD_INT 10
53663: PUSH
53664: LD_INT 11
53666: PUSH
53667: LD_INT 12
53669: PUSH
53670: LD_INT 13
53672: PUSH
53673: LD_INT 14
53675: PUSH
53676: LD_INT 15
53678: PUSH
53679: LD_INT 16
53681: PUSH
53682: LD_INT 17
53684: PUSH
53685: LD_INT 18
53687: PUSH
53688: LD_INT 19
53690: PUSH
53691: LD_INT 20
53693: PUSH
53694: LD_INT 21
53696: PUSH
53697: LD_INT 22
53699: PUSH
53700: LD_INT 23
53702: PUSH
53703: LD_INT 24
53705: PUSH
53706: LD_INT 25
53708: PUSH
53709: LD_INT 26
53711: PUSH
53712: LD_INT 27
53714: PUSH
53715: LD_INT 28
53717: PUSH
53718: LD_INT 29
53720: PUSH
53721: LD_INT 30
53723: PUSH
53724: LD_INT 31
53726: PUSH
53727: LD_INT 32
53729: PUSH
53730: LD_INT 33
53732: PUSH
53733: LD_INT 34
53735: PUSH
53736: LD_INT 35
53738: PUSH
53739: LD_INT 36
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 101
53782: PUSH
53783: LD_INT 102
53785: PUSH
53786: LD_INT 103
53788: PUSH
53789: LD_INT 104
53791: PUSH
53792: LD_INT 105
53794: PUSH
53795: LD_INT 106
53797: PUSH
53798: LD_INT 107
53800: PUSH
53801: LD_INT 108
53803: PUSH
53804: LD_INT 109
53806: PUSH
53807: LD_INT 110
53809: PUSH
53810: LD_INT 111
53812: PUSH
53813: LD_INT 112
53815: PUSH
53816: LD_INT 113
53818: PUSH
53819: LD_INT 114
53821: PUSH
53822: LD_INT 115
53824: PUSH
53825: LD_INT 116
53827: PUSH
53828: LD_INT 117
53830: PUSH
53831: LD_INT 118
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: ST_TO_ADDR
// if result then
53858: LD_VAR 0 2
53862: IFFALSE 54648
// begin normal :=  ;
53864: LD_ADDR_VAR 0 5
53868: PUSH
53869: LD_STRING 
53871: ST_TO_ADDR
// hardcore :=  ;
53872: LD_ADDR_VAR 0 6
53876: PUSH
53877: LD_STRING 
53879: ST_TO_ADDR
// active :=  ;
53880: LD_ADDR_VAR 0 7
53884: PUSH
53885: LD_STRING 
53887: ST_TO_ADDR
// for i = 1 to normalCounter do
53888: LD_ADDR_VAR 0 8
53892: PUSH
53893: DOUBLE
53894: LD_INT 1
53896: DEC
53897: ST_TO_ADDR
53898: LD_EXP 21
53902: PUSH
53903: FOR_TO
53904: IFFALSE 54005
// begin tmp := 0 ;
53906: LD_ADDR_VAR 0 3
53910: PUSH
53911: LD_STRING 0
53913: ST_TO_ADDR
// if result [ 1 ] then
53914: LD_VAR 0 2
53918: PUSH
53919: LD_INT 1
53921: ARRAY
53922: IFFALSE 53987
// if result [ 1 ] [ 1 ] = i then
53924: LD_VAR 0 2
53928: PUSH
53929: LD_INT 1
53931: ARRAY
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PUSH
53937: LD_VAR 0 8
53941: EQUAL
53942: IFFALSE 53987
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53944: LD_ADDR_VAR 0 2
53948: PUSH
53949: LD_VAR 0 2
53953: PPUSH
53954: LD_INT 1
53956: PPUSH
53957: LD_VAR 0 2
53961: PUSH
53962: LD_INT 1
53964: ARRAY
53965: PPUSH
53966: LD_INT 1
53968: PPUSH
53969: CALL_OW 3
53973: PPUSH
53974: CALL_OW 1
53978: ST_TO_ADDR
// tmp := 1 ;
53979: LD_ADDR_VAR 0 3
53983: PUSH
53984: LD_STRING 1
53986: ST_TO_ADDR
// end ; normal := normal & tmp ;
53987: LD_ADDR_VAR 0 5
53991: PUSH
53992: LD_VAR 0 5
53996: PUSH
53997: LD_VAR 0 3
54001: STR
54002: ST_TO_ADDR
// end ;
54003: GO 53903
54005: POP
54006: POP
// for i = 1 to hardcoreCounter do
54007: LD_ADDR_VAR 0 8
54011: PUSH
54012: DOUBLE
54013: LD_INT 1
54015: DEC
54016: ST_TO_ADDR
54017: LD_EXP 22
54021: PUSH
54022: FOR_TO
54023: IFFALSE 54128
// begin tmp := 0 ;
54025: LD_ADDR_VAR 0 3
54029: PUSH
54030: LD_STRING 0
54032: ST_TO_ADDR
// if result [ 2 ] then
54033: LD_VAR 0 2
54037: PUSH
54038: LD_INT 2
54040: ARRAY
54041: IFFALSE 54110
// if result [ 2 ] [ 1 ] = 100 + i then
54043: LD_VAR 0 2
54047: PUSH
54048: LD_INT 2
54050: ARRAY
54051: PUSH
54052: LD_INT 1
54054: ARRAY
54055: PUSH
54056: LD_INT 100
54058: PUSH
54059: LD_VAR 0 8
54063: PLUS
54064: EQUAL
54065: IFFALSE 54110
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
54067: LD_ADDR_VAR 0 2
54071: PUSH
54072: LD_VAR 0 2
54076: PPUSH
54077: LD_INT 2
54079: PPUSH
54080: LD_VAR 0 2
54084: PUSH
54085: LD_INT 2
54087: ARRAY
54088: PPUSH
54089: LD_INT 1
54091: PPUSH
54092: CALL_OW 3
54096: PPUSH
54097: CALL_OW 1
54101: ST_TO_ADDR
// tmp := 1 ;
54102: LD_ADDR_VAR 0 3
54106: PUSH
54107: LD_STRING 1
54109: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
54110: LD_ADDR_VAR 0 6
54114: PUSH
54115: LD_VAR 0 6
54119: PUSH
54120: LD_VAR 0 3
54124: STR
54125: ST_TO_ADDR
// end ;
54126: GO 54022
54128: POP
54129: POP
// if isGameLoad then
54130: LD_VAR 0 1
54134: IFFALSE 54609
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
54136: LD_ADDR_VAR 0 4
54140: PUSH
54141: LD_EXP 25
54145: PUSH
54146: LD_EXP 24
54150: PUSH
54151: LD_EXP 26
54155: PUSH
54156: LD_EXP 23
54160: PUSH
54161: LD_EXP 27
54165: PUSH
54166: LD_EXP 28
54170: PUSH
54171: LD_EXP 29
54175: PUSH
54176: LD_EXP 30
54180: PUSH
54181: LD_EXP 31
54185: PUSH
54186: LD_EXP 32
54190: PUSH
54191: LD_EXP 33
54195: PUSH
54196: LD_EXP 34
54200: PUSH
54201: LD_EXP 35
54205: PUSH
54206: LD_EXP 36
54210: PUSH
54211: LD_EXP 44
54215: PUSH
54216: LD_EXP 45
54220: PUSH
54221: LD_EXP 46
54225: PUSH
54226: LD_EXP 47
54230: PUSH
54231: LD_EXP 49
54235: PUSH
54236: LD_EXP 50
54240: PUSH
54241: LD_EXP 51
54245: PUSH
54246: LD_EXP 54
54250: PUSH
54251: LD_EXP 56
54255: PUSH
54256: LD_EXP 57
54260: PUSH
54261: LD_EXP 58
54265: PUSH
54266: LD_EXP 60
54270: PUSH
54271: LD_EXP 61
54275: PUSH
54276: LD_EXP 64
54280: PUSH
54281: LD_EXP 65
54285: PUSH
54286: LD_EXP 66
54290: PUSH
54291: LD_EXP 67
54295: PUSH
54296: LD_EXP 68
54300: PUSH
54301: LD_EXP 69
54305: PUSH
54306: LD_EXP 70
54310: PUSH
54311: LD_EXP 71
54315: PUSH
54316: LD_EXP 72
54320: PUSH
54321: LD_EXP 37
54325: PUSH
54326: LD_EXP 38
54330: PUSH
54331: LD_EXP 41
54335: PUSH
54336: LD_EXP 42
54340: PUSH
54341: LD_EXP 43
54345: PUSH
54346: LD_EXP 39
54350: PUSH
54351: LD_EXP 40
54355: PUSH
54356: LD_EXP 48
54360: PUSH
54361: LD_EXP 52
54365: PUSH
54366: LD_EXP 53
54370: PUSH
54371: LD_EXP 55
54375: PUSH
54376: LD_EXP 59
54380: PUSH
54381: LD_EXP 62
54385: PUSH
54386: LD_EXP 63
54390: PUSH
54391: LD_EXP 73
54395: PUSH
54396: LD_EXP 74
54400: PUSH
54401: LD_EXP 75
54405: PUSH
54406: LD_EXP 76
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: ST_TO_ADDR
// tmp :=  ;
54467: LD_ADDR_VAR 0 3
54471: PUSH
54472: LD_STRING 
54474: ST_TO_ADDR
// for i = 1 to normalCounter do
54475: LD_ADDR_VAR 0 8
54479: PUSH
54480: DOUBLE
54481: LD_INT 1
54483: DEC
54484: ST_TO_ADDR
54485: LD_EXP 21
54489: PUSH
54490: FOR_TO
54491: IFFALSE 54527
// begin if flags [ i ] then
54493: LD_VAR 0 4
54497: PUSH
54498: LD_VAR 0 8
54502: ARRAY
54503: IFFALSE 54525
// tmp := tmp & i & ; ;
54505: LD_ADDR_VAR 0 3
54509: PUSH
54510: LD_VAR 0 3
54514: PUSH
54515: LD_VAR 0 8
54519: STR
54520: PUSH
54521: LD_STRING ;
54523: STR
54524: ST_TO_ADDR
// end ;
54525: GO 54490
54527: POP
54528: POP
// for i = 1 to hardcoreCounter do
54529: LD_ADDR_VAR 0 8
54533: PUSH
54534: DOUBLE
54535: LD_INT 1
54537: DEC
54538: ST_TO_ADDR
54539: LD_EXP 22
54543: PUSH
54544: FOR_TO
54545: IFFALSE 54591
// begin if flags [ normalCounter + i ] then
54547: LD_VAR 0 4
54551: PUSH
54552: LD_EXP 21
54556: PUSH
54557: LD_VAR 0 8
54561: PLUS
54562: ARRAY
54563: IFFALSE 54589
// tmp := tmp & ( 100 + i ) & ; ;
54565: LD_ADDR_VAR 0 3
54569: PUSH
54570: LD_VAR 0 3
54574: PUSH
54575: LD_INT 100
54577: PUSH
54578: LD_VAR 0 8
54582: PLUS
54583: STR
54584: PUSH
54585: LD_STRING ;
54587: STR
54588: ST_TO_ADDR
// end ;
54589: GO 54544
54591: POP
54592: POP
// if tmp then
54593: LD_VAR 0 3
54597: IFFALSE 54609
// active := tmp ;
54599: LD_ADDR_VAR 0 7
54603: PUSH
54604: LD_VAR 0 3
54608: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54609: LD_STRING getStreamItemsFromMission("
54611: PUSH
54612: LD_VAR 0 5
54616: STR
54617: PUSH
54618: LD_STRING ","
54620: STR
54621: PUSH
54622: LD_VAR 0 6
54626: STR
54627: PUSH
54628: LD_STRING ","
54630: STR
54631: PUSH
54632: LD_VAR 0 7
54636: STR
54637: PUSH
54638: LD_STRING ")
54640: STR
54641: PPUSH
54642: CALL_OW 559
// end else
54646: GO 54655
// ToLua ( getStreamItemsFromMission("","","") ) ;
54648: LD_STRING getStreamItemsFromMission("","","")
54650: PPUSH
54651: CALL_OW 559
// end ;
54655: LD_VAR 0 2
54659: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54660: LD_EXP 20
54664: PUSH
54665: LD_EXP 25
54669: AND
54670: IFFALSE 54794
54672: GO 54674
54674: DISABLE
54675: LD_INT 0
54677: PPUSH
54678: PPUSH
// begin enable ;
54679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54680: LD_ADDR_VAR 0 2
54684: PUSH
54685: LD_INT 22
54687: PUSH
54688: LD_OWVAR 2
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: LD_INT 34
54702: PUSH
54703: LD_INT 7
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 34
54712: PUSH
54713: LD_INT 45
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 34
54722: PUSH
54723: LD_INT 28
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 34
54732: PUSH
54733: LD_INT 47
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PPUSH
54751: CALL_OW 69
54755: ST_TO_ADDR
// if not tmp then
54756: LD_VAR 0 2
54760: NOT
54761: IFFALSE 54765
// exit ;
54763: GO 54794
// for i in tmp do
54765: LD_ADDR_VAR 0 1
54769: PUSH
54770: LD_VAR 0 2
54774: PUSH
54775: FOR_IN
54776: IFFALSE 54792
// begin SetLives ( i , 0 ) ;
54778: LD_VAR 0 1
54782: PPUSH
54783: LD_INT 0
54785: PPUSH
54786: CALL_OW 234
// end ;
54790: GO 54775
54792: POP
54793: POP
// end ;
54794: PPOPN 2
54796: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54797: LD_EXP 20
54801: PUSH
54802: LD_EXP 26
54806: AND
54807: IFFALSE 54891
54809: GO 54811
54811: DISABLE
54812: LD_INT 0
54814: PPUSH
54815: PPUSH
// begin enable ;
54816: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54817: LD_ADDR_VAR 0 2
54821: PUSH
54822: LD_INT 22
54824: PUSH
54825: LD_OWVAR 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 32
54836: PUSH
54837: LD_INT 3
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PPUSH
54848: CALL_OW 69
54852: ST_TO_ADDR
// if not tmp then
54853: LD_VAR 0 2
54857: NOT
54858: IFFALSE 54862
// exit ;
54860: GO 54891
// for i in tmp do
54862: LD_ADDR_VAR 0 1
54866: PUSH
54867: LD_VAR 0 2
54871: PUSH
54872: FOR_IN
54873: IFFALSE 54889
// begin SetLives ( i , 0 ) ;
54875: LD_VAR 0 1
54879: PPUSH
54880: LD_INT 0
54882: PPUSH
54883: CALL_OW 234
// end ;
54887: GO 54872
54889: POP
54890: POP
// end ;
54891: PPOPN 2
54893: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54894: LD_EXP 20
54898: PUSH
54899: LD_EXP 23
54903: AND
54904: IFFALSE 54997
54906: GO 54908
54908: DISABLE
54909: LD_INT 0
54911: PPUSH
// begin enable ;
54912: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54913: LD_ADDR_VAR 0 1
54917: PUSH
54918: LD_INT 22
54920: PUSH
54921: LD_OWVAR 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: LD_INT 25
54935: PUSH
54936: LD_INT 5
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 25
54945: PUSH
54946: LD_INT 9
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 25
54955: PUSH
54956: LD_INT 8
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PPUSH
54973: CALL_OW 69
54977: PUSH
54978: FOR_IN
54979: IFFALSE 54995
// begin SetClass ( i , 1 ) ;
54981: LD_VAR 0 1
54985: PPUSH
54986: LD_INT 1
54988: PPUSH
54989: CALL_OW 336
// end ;
54993: GO 54978
54995: POP
54996: POP
// end ;
54997: PPOPN 1
54999: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
55000: LD_EXP 20
55004: PUSH
55005: LD_EXP 24
55009: AND
55010: PUSH
55011: LD_OWVAR 65
55015: PUSH
55016: LD_INT 7
55018: LESS
55019: AND
55020: IFFALSE 55034
55022: GO 55024
55024: DISABLE
// begin enable ;
55025: ENABLE
// game_speed := 7 ;
55026: LD_ADDR_OWVAR 65
55030: PUSH
55031: LD_INT 7
55033: ST_TO_ADDR
// end ;
55034: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
55035: LD_EXP 20
55039: PUSH
55040: LD_EXP 27
55044: AND
55045: IFFALSE 55247
55047: GO 55049
55049: DISABLE
55050: LD_INT 0
55052: PPUSH
55053: PPUSH
55054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
55055: LD_ADDR_VAR 0 3
55059: PUSH
55060: LD_INT 81
55062: PUSH
55063: LD_OWVAR 2
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 21
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PPUSH
55086: CALL_OW 69
55090: ST_TO_ADDR
// if not tmp then
55091: LD_VAR 0 3
55095: NOT
55096: IFFALSE 55100
// exit ;
55098: GO 55247
// if tmp > 5 then
55100: LD_VAR 0 3
55104: PUSH
55105: LD_INT 5
55107: GREATER
55108: IFFALSE 55120
// k := 5 else
55110: LD_ADDR_VAR 0 2
55114: PUSH
55115: LD_INT 5
55117: ST_TO_ADDR
55118: GO 55130
// k := tmp ;
55120: LD_ADDR_VAR 0 2
55124: PUSH
55125: LD_VAR 0 3
55129: ST_TO_ADDR
// for i := 1 to k do
55130: LD_ADDR_VAR 0 1
55134: PUSH
55135: DOUBLE
55136: LD_INT 1
55138: DEC
55139: ST_TO_ADDR
55140: LD_VAR 0 2
55144: PUSH
55145: FOR_TO
55146: IFFALSE 55245
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
55148: LD_VAR 0 3
55152: PUSH
55153: LD_VAR 0 1
55157: ARRAY
55158: PPUSH
55159: LD_VAR 0 1
55163: PUSH
55164: LD_INT 4
55166: MOD
55167: PUSH
55168: LD_INT 1
55170: PLUS
55171: PPUSH
55172: CALL_OW 259
55176: PUSH
55177: LD_INT 10
55179: LESS
55180: IFFALSE 55243
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55182: LD_VAR 0 3
55186: PUSH
55187: LD_VAR 0 1
55191: ARRAY
55192: PPUSH
55193: LD_VAR 0 1
55197: PUSH
55198: LD_INT 4
55200: MOD
55201: PUSH
55202: LD_INT 1
55204: PLUS
55205: PPUSH
55206: LD_VAR 0 3
55210: PUSH
55211: LD_VAR 0 1
55215: ARRAY
55216: PPUSH
55217: LD_VAR 0 1
55221: PUSH
55222: LD_INT 4
55224: MOD
55225: PUSH
55226: LD_INT 1
55228: PLUS
55229: PPUSH
55230: CALL_OW 259
55234: PUSH
55235: LD_INT 1
55237: PLUS
55238: PPUSH
55239: CALL_OW 237
55243: GO 55145
55245: POP
55246: POP
// end ;
55247: PPOPN 3
55249: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55250: LD_EXP 20
55254: PUSH
55255: LD_EXP 28
55259: AND
55260: IFFALSE 55280
55262: GO 55264
55264: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55265: LD_INT 4
55267: PPUSH
55268: LD_OWVAR 2
55272: PPUSH
55273: LD_INT 0
55275: PPUSH
55276: CALL_OW 324
55280: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55281: LD_EXP 20
55285: PUSH
55286: LD_EXP 57
55290: AND
55291: IFFALSE 55311
55293: GO 55295
55295: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55296: LD_INT 19
55298: PPUSH
55299: LD_OWVAR 2
55303: PPUSH
55304: LD_INT 0
55306: PPUSH
55307: CALL_OW 324
55311: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55312: LD_EXP 20
55316: PUSH
55317: LD_EXP 29
55321: AND
55322: IFFALSE 55424
55324: GO 55326
55326: DISABLE
55327: LD_INT 0
55329: PPUSH
55330: PPUSH
// begin enable ;
55331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55332: LD_ADDR_VAR 0 2
55336: PUSH
55337: LD_INT 22
55339: PUSH
55340: LD_OWVAR 2
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 34
55354: PUSH
55355: LD_INT 11
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 34
55364: PUSH
55365: LD_INT 30
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PPUSH
55381: CALL_OW 69
55385: ST_TO_ADDR
// if not tmp then
55386: LD_VAR 0 2
55390: NOT
55391: IFFALSE 55395
// exit ;
55393: GO 55424
// for i in tmp do
55395: LD_ADDR_VAR 0 1
55399: PUSH
55400: LD_VAR 0 2
55404: PUSH
55405: FOR_IN
55406: IFFALSE 55422
// begin SetLives ( i , 0 ) ;
55408: LD_VAR 0 1
55412: PPUSH
55413: LD_INT 0
55415: PPUSH
55416: CALL_OW 234
// end ;
55420: GO 55405
55422: POP
55423: POP
// end ;
55424: PPOPN 2
55426: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55427: LD_EXP 20
55431: PUSH
55432: LD_EXP 30
55436: AND
55437: IFFALSE 55457
55439: GO 55441
55441: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
55442: LD_INT 32
55444: PPUSH
55445: LD_OWVAR 2
55449: PPUSH
55450: LD_INT 0
55452: PPUSH
55453: CALL_OW 324
55457: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
55458: LD_EXP 20
55462: PUSH
55463: LD_EXP 31
55467: AND
55468: IFFALSE 55649
55470: GO 55472
55472: DISABLE
55473: LD_INT 0
55475: PPUSH
55476: PPUSH
55477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
55478: LD_ADDR_VAR 0 2
55482: PUSH
55483: LD_INT 22
55485: PUSH
55486: LD_OWVAR 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 33
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PPUSH
55509: CALL_OW 69
55513: ST_TO_ADDR
// if not tmp then
55514: LD_VAR 0 2
55518: NOT
55519: IFFALSE 55523
// exit ;
55521: GO 55649
// side := 0 ;
55523: LD_ADDR_VAR 0 3
55527: PUSH
55528: LD_INT 0
55530: ST_TO_ADDR
// for i := 1 to 8 do
55531: LD_ADDR_VAR 0 1
55535: PUSH
55536: DOUBLE
55537: LD_INT 1
55539: DEC
55540: ST_TO_ADDR
55541: LD_INT 8
55543: PUSH
55544: FOR_TO
55545: IFFALSE 55593
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
55547: LD_OWVAR 2
55551: PUSH
55552: LD_VAR 0 1
55556: NONEQUAL
55557: PUSH
55558: LD_OWVAR 2
55562: PPUSH
55563: LD_VAR 0 1
55567: PPUSH
55568: CALL_OW 81
55572: PUSH
55573: LD_INT 2
55575: EQUAL
55576: AND
55577: IFFALSE 55591
// begin side := i ;
55579: LD_ADDR_VAR 0 3
55583: PUSH
55584: LD_VAR 0 1
55588: ST_TO_ADDR
// break ;
55589: GO 55593
// end ;
55591: GO 55544
55593: POP
55594: POP
// if not side then
55595: LD_VAR 0 3
55599: NOT
55600: IFFALSE 55604
// exit ;
55602: GO 55649
// for i := 1 to tmp do
55604: LD_ADDR_VAR 0 1
55608: PUSH
55609: DOUBLE
55610: LD_INT 1
55612: DEC
55613: ST_TO_ADDR
55614: LD_VAR 0 2
55618: PUSH
55619: FOR_TO
55620: IFFALSE 55647
// if Prob ( 60 ) then
55622: LD_INT 60
55624: PPUSH
55625: CALL_OW 13
55629: IFFALSE 55645
// SetSide ( i , side ) ;
55631: LD_VAR 0 1
55635: PPUSH
55636: LD_VAR 0 3
55640: PPUSH
55641: CALL_OW 235
55645: GO 55619
55647: POP
55648: POP
// end ;
55649: PPOPN 3
55651: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55652: LD_EXP 20
55656: PUSH
55657: LD_EXP 33
55661: AND
55662: IFFALSE 55781
55664: GO 55666
55666: DISABLE
55667: LD_INT 0
55669: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55670: LD_ADDR_VAR 0 1
55674: PUSH
55675: LD_INT 22
55677: PUSH
55678: LD_OWVAR 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 21
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: LD_INT 23
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: PPUSH
55719: CALL_OW 69
55723: PUSH
55724: FOR_IN
55725: IFFALSE 55779
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55727: LD_VAR 0 1
55731: PPUSH
55732: CALL_OW 257
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: LD_INT 3
55745: PUSH
55746: LD_INT 4
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: IN
55755: IFFALSE 55777
// SetClass ( un , rand ( 1 , 4 ) ) ;
55757: LD_VAR 0 1
55761: PPUSH
55762: LD_INT 1
55764: PPUSH
55765: LD_INT 4
55767: PPUSH
55768: CALL_OW 12
55772: PPUSH
55773: CALL_OW 336
55777: GO 55724
55779: POP
55780: POP
// end ;
55781: PPOPN 1
55783: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55784: LD_EXP 20
55788: PUSH
55789: LD_EXP 32
55793: AND
55794: IFFALSE 55873
55796: GO 55798
55798: DISABLE
55799: LD_INT 0
55801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55802: LD_ADDR_VAR 0 1
55806: PUSH
55807: LD_INT 22
55809: PUSH
55810: LD_OWVAR 2
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 21
55821: PUSH
55822: LD_INT 3
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PPUSH
55833: CALL_OW 69
55837: ST_TO_ADDR
// if not tmp then
55838: LD_VAR 0 1
55842: NOT
55843: IFFALSE 55847
// exit ;
55845: GO 55873
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55847: LD_VAR 0 1
55851: PUSH
55852: LD_INT 1
55854: PPUSH
55855: LD_VAR 0 1
55859: PPUSH
55860: CALL_OW 12
55864: ARRAY
55865: PPUSH
55866: LD_INT 100
55868: PPUSH
55869: CALL_OW 234
// end ;
55873: PPOPN 1
55875: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55876: LD_EXP 20
55880: PUSH
55881: LD_EXP 34
55885: AND
55886: IFFALSE 55984
55888: GO 55890
55890: DISABLE
55891: LD_INT 0
55893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55894: LD_ADDR_VAR 0 1
55898: PUSH
55899: LD_INT 22
55901: PUSH
55902: LD_OWVAR 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 21
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PPUSH
55925: CALL_OW 69
55929: ST_TO_ADDR
// if not tmp then
55930: LD_VAR 0 1
55934: NOT
55935: IFFALSE 55939
// exit ;
55937: GO 55984
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55939: LD_VAR 0 1
55943: PUSH
55944: LD_INT 1
55946: PPUSH
55947: LD_VAR 0 1
55951: PPUSH
55952: CALL_OW 12
55956: ARRAY
55957: PPUSH
55958: LD_INT 1
55960: PPUSH
55961: LD_INT 4
55963: PPUSH
55964: CALL_OW 12
55968: PPUSH
55969: LD_INT 3000
55971: PPUSH
55972: LD_INT 9000
55974: PPUSH
55975: CALL_OW 12
55979: PPUSH
55980: CALL_OW 492
// end ;
55984: PPOPN 1
55986: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55987: LD_EXP 20
55991: PUSH
55992: LD_EXP 35
55996: AND
55997: IFFALSE 56017
55999: GO 56001
56001: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
56002: LD_INT 1
56004: PPUSH
56005: LD_OWVAR 2
56009: PPUSH
56010: LD_INT 0
56012: PPUSH
56013: CALL_OW 324
56017: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
56018: LD_EXP 20
56022: PUSH
56023: LD_EXP 36
56027: AND
56028: IFFALSE 56111
56030: GO 56032
56032: DISABLE
56033: LD_INT 0
56035: PPUSH
56036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56037: LD_ADDR_VAR 0 2
56041: PUSH
56042: LD_INT 22
56044: PUSH
56045: LD_OWVAR 2
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 21
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PPUSH
56068: CALL_OW 69
56072: ST_TO_ADDR
// if not tmp then
56073: LD_VAR 0 2
56077: NOT
56078: IFFALSE 56082
// exit ;
56080: GO 56111
// for i in tmp do
56082: LD_ADDR_VAR 0 1
56086: PUSH
56087: LD_VAR 0 2
56091: PUSH
56092: FOR_IN
56093: IFFALSE 56109
// SetBLevel ( i , 10 ) ;
56095: LD_VAR 0 1
56099: PPUSH
56100: LD_INT 10
56102: PPUSH
56103: CALL_OW 241
56107: GO 56092
56109: POP
56110: POP
// end ;
56111: PPOPN 2
56113: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
56114: LD_EXP 20
56118: PUSH
56119: LD_EXP 37
56123: AND
56124: IFFALSE 56235
56126: GO 56128
56128: DISABLE
56129: LD_INT 0
56131: PPUSH
56132: PPUSH
56133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56134: LD_ADDR_VAR 0 3
56138: PUSH
56139: LD_INT 22
56141: PUSH
56142: LD_OWVAR 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 25
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PPUSH
56165: CALL_OW 69
56169: ST_TO_ADDR
// if not tmp then
56170: LD_VAR 0 3
56174: NOT
56175: IFFALSE 56179
// exit ;
56177: GO 56235
// un := tmp [ rand ( 1 , tmp ) ] ;
56179: LD_ADDR_VAR 0 2
56183: PUSH
56184: LD_VAR 0 3
56188: PUSH
56189: LD_INT 1
56191: PPUSH
56192: LD_VAR 0 3
56196: PPUSH
56197: CALL_OW 12
56201: ARRAY
56202: ST_TO_ADDR
// if Crawls ( un ) then
56203: LD_VAR 0 2
56207: PPUSH
56208: CALL_OW 318
56212: IFFALSE 56223
// ComWalk ( un ) ;
56214: LD_VAR 0 2
56218: PPUSH
56219: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56223: LD_VAR 0 2
56227: PPUSH
56228: LD_INT 5
56230: PPUSH
56231: CALL_OW 336
// end ;
56235: PPOPN 3
56237: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56238: LD_EXP 20
56242: PUSH
56243: LD_EXP 38
56247: AND
56248: PUSH
56249: LD_OWVAR 67
56253: PUSH
56254: LD_INT 4
56256: LESS
56257: AND
56258: IFFALSE 56277
56260: GO 56262
56262: DISABLE
// begin Difficulty := Difficulty + 1 ;
56263: LD_ADDR_OWVAR 67
56267: PUSH
56268: LD_OWVAR 67
56272: PUSH
56273: LD_INT 1
56275: PLUS
56276: ST_TO_ADDR
// end ;
56277: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56278: LD_EXP 20
56282: PUSH
56283: LD_EXP 39
56287: AND
56288: IFFALSE 56391
56290: GO 56292
56292: DISABLE
56293: LD_INT 0
56295: PPUSH
// begin for i := 1 to 5 do
56296: LD_ADDR_VAR 0 1
56300: PUSH
56301: DOUBLE
56302: LD_INT 1
56304: DEC
56305: ST_TO_ADDR
56306: LD_INT 5
56308: PUSH
56309: FOR_TO
56310: IFFALSE 56389
// begin uc_nation := nation_nature ;
56312: LD_ADDR_OWVAR 21
56316: PUSH
56317: LD_INT 0
56319: ST_TO_ADDR
// uc_side := 0 ;
56320: LD_ADDR_OWVAR 20
56324: PUSH
56325: LD_INT 0
56327: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56328: LD_ADDR_OWVAR 29
56332: PUSH
56333: LD_INT 12
56335: PUSH
56336: LD_INT 12
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: ST_TO_ADDR
// hc_agressivity := 20 ;
56343: LD_ADDR_OWVAR 35
56347: PUSH
56348: LD_INT 20
56350: ST_TO_ADDR
// hc_class := class_tiger ;
56351: LD_ADDR_OWVAR 28
56355: PUSH
56356: LD_INT 14
56358: ST_TO_ADDR
// hc_gallery :=  ;
56359: LD_ADDR_OWVAR 33
56363: PUSH
56364: LD_STRING 
56366: ST_TO_ADDR
// hc_name :=  ;
56367: LD_ADDR_OWVAR 26
56371: PUSH
56372: LD_STRING 
56374: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56375: CALL_OW 44
56379: PPUSH
56380: LD_INT 0
56382: PPUSH
56383: CALL_OW 51
// end ;
56387: GO 56309
56389: POP
56390: POP
// end ;
56391: PPOPN 1
56393: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56394: LD_EXP 20
56398: PUSH
56399: LD_EXP 40
56403: AND
56404: IFFALSE 56413
56406: GO 56408
56408: DISABLE
// StreamSibBomb ;
56409: CALL 56414 0 0
56413: END
// export function StreamSibBomb ; var i , x , y ; begin
56414: LD_INT 0
56416: PPUSH
56417: PPUSH
56418: PPUSH
56419: PPUSH
// result := false ;
56420: LD_ADDR_VAR 0 1
56424: PUSH
56425: LD_INT 0
56427: ST_TO_ADDR
// for i := 1 to 16 do
56428: LD_ADDR_VAR 0 2
56432: PUSH
56433: DOUBLE
56434: LD_INT 1
56436: DEC
56437: ST_TO_ADDR
56438: LD_INT 16
56440: PUSH
56441: FOR_TO
56442: IFFALSE 56641
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56444: LD_ADDR_VAR 0 3
56448: PUSH
56449: LD_INT 10
56451: PUSH
56452: LD_INT 20
56454: PUSH
56455: LD_INT 30
56457: PUSH
56458: LD_INT 40
56460: PUSH
56461: LD_INT 50
56463: PUSH
56464: LD_INT 60
56466: PUSH
56467: LD_INT 70
56469: PUSH
56470: LD_INT 80
56472: PUSH
56473: LD_INT 90
56475: PUSH
56476: LD_INT 100
56478: PUSH
56479: LD_INT 110
56481: PUSH
56482: LD_INT 120
56484: PUSH
56485: LD_INT 130
56487: PUSH
56488: LD_INT 140
56490: PUSH
56491: LD_INT 150
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PPUSH
56514: LD_INT 15
56516: PPUSH
56517: CALL_OW 12
56521: ARRAY
56522: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56523: LD_ADDR_VAR 0 4
56527: PUSH
56528: LD_INT 10
56530: PUSH
56531: LD_INT 20
56533: PUSH
56534: LD_INT 30
56536: PUSH
56537: LD_INT 40
56539: PUSH
56540: LD_INT 50
56542: PUSH
56543: LD_INT 60
56545: PUSH
56546: LD_INT 70
56548: PUSH
56549: LD_INT 80
56551: PUSH
56552: LD_INT 90
56554: PUSH
56555: LD_INT 100
56557: PUSH
56558: LD_INT 110
56560: PUSH
56561: LD_INT 120
56563: PUSH
56564: LD_INT 130
56566: PUSH
56567: LD_INT 140
56569: PUSH
56570: LD_INT 150
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: PPUSH
56593: LD_INT 15
56595: PPUSH
56596: CALL_OW 12
56600: ARRAY
56601: ST_TO_ADDR
// if ValidHex ( x , y ) then
56602: LD_VAR 0 3
56606: PPUSH
56607: LD_VAR 0 4
56611: PPUSH
56612: CALL_OW 488
56616: IFFALSE 56639
// begin result := [ x , y ] ;
56618: LD_ADDR_VAR 0 1
56622: PUSH
56623: LD_VAR 0 3
56627: PUSH
56628: LD_VAR 0 4
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// break ;
56637: GO 56641
// end ; end ;
56639: GO 56441
56641: POP
56642: POP
// if result then
56643: LD_VAR 0 1
56647: IFFALSE 56707
// begin ToLua ( playSibBomb() ) ;
56649: LD_STRING playSibBomb()
56651: PPUSH
56652: CALL_OW 559
// wait ( 0 0$14 ) ;
56656: LD_INT 490
56658: PPUSH
56659: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56663: LD_VAR 0 1
56667: PUSH
56668: LD_INT 1
56670: ARRAY
56671: PPUSH
56672: LD_VAR 0 1
56676: PUSH
56677: LD_INT 2
56679: ARRAY
56680: PPUSH
56681: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56685: LD_VAR 0 1
56689: PUSH
56690: LD_INT 1
56692: ARRAY
56693: PPUSH
56694: LD_VAR 0 1
56698: PUSH
56699: LD_INT 2
56701: ARRAY
56702: PPUSH
56703: CALL_OW 429
// end ; end ;
56707: LD_VAR 0 1
56711: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56712: LD_EXP 20
56716: PUSH
56717: LD_EXP 42
56721: AND
56722: IFFALSE 56734
56724: GO 56726
56726: DISABLE
// YouLost (  ) ;
56727: LD_STRING 
56729: PPUSH
56730: CALL_OW 104
56734: END
// every 0 0$1 trigger StreamModeActive and sFog do
56735: LD_EXP 20
56739: PUSH
56740: LD_EXP 41
56744: AND
56745: IFFALSE 56759
56747: GO 56749
56749: DISABLE
// FogOff ( your_side ) ;
56750: LD_OWVAR 2
56754: PPUSH
56755: CALL_OW 344
56759: END
// every 0 0$1 trigger StreamModeActive and sSun do
56760: LD_EXP 20
56764: PUSH
56765: LD_EXP 43
56769: AND
56770: IFFALSE 56798
56772: GO 56774
56774: DISABLE
// begin solar_recharge_percent := 0 ;
56775: LD_ADDR_OWVAR 79
56779: PUSH
56780: LD_INT 0
56782: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56783: LD_INT 10500
56785: PPUSH
56786: CALL_OW 67
// solar_recharge_percent := 100 ;
56790: LD_ADDR_OWVAR 79
56794: PUSH
56795: LD_INT 100
56797: ST_TO_ADDR
// end ;
56798: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56799: LD_EXP 20
56803: PUSH
56804: LD_EXP 44
56808: AND
56809: IFFALSE 57048
56811: GO 56813
56813: DISABLE
56814: LD_INT 0
56816: PPUSH
56817: PPUSH
56818: PPUSH
// begin tmp := [ ] ;
56819: LD_ADDR_VAR 0 3
56823: PUSH
56824: EMPTY
56825: ST_TO_ADDR
// for i := 1 to 6 do
56826: LD_ADDR_VAR 0 1
56830: PUSH
56831: DOUBLE
56832: LD_INT 1
56834: DEC
56835: ST_TO_ADDR
56836: LD_INT 6
56838: PUSH
56839: FOR_TO
56840: IFFALSE 56945
// begin uc_nation := nation_nature ;
56842: LD_ADDR_OWVAR 21
56846: PUSH
56847: LD_INT 0
56849: ST_TO_ADDR
// uc_side := 0 ;
56850: LD_ADDR_OWVAR 20
56854: PUSH
56855: LD_INT 0
56857: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56858: LD_ADDR_OWVAR 29
56862: PUSH
56863: LD_INT 12
56865: PUSH
56866: LD_INT 12
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: ST_TO_ADDR
// hc_agressivity := 20 ;
56873: LD_ADDR_OWVAR 35
56877: PUSH
56878: LD_INT 20
56880: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56881: LD_ADDR_OWVAR 28
56885: PUSH
56886: LD_INT 17
56888: ST_TO_ADDR
// hc_gallery :=  ;
56889: LD_ADDR_OWVAR 33
56893: PUSH
56894: LD_STRING 
56896: ST_TO_ADDR
// hc_name :=  ;
56897: LD_ADDR_OWVAR 26
56901: PUSH
56902: LD_STRING 
56904: ST_TO_ADDR
// un := CreateHuman ;
56905: LD_ADDR_VAR 0 2
56909: PUSH
56910: CALL_OW 44
56914: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56915: LD_VAR 0 2
56919: PPUSH
56920: LD_INT 1
56922: PPUSH
56923: CALL_OW 51
// tmp := tmp ^ un ;
56927: LD_ADDR_VAR 0 3
56931: PUSH
56932: LD_VAR 0 3
56936: PUSH
56937: LD_VAR 0 2
56941: ADD
56942: ST_TO_ADDR
// end ;
56943: GO 56839
56945: POP
56946: POP
// repeat wait ( 0 0$1 ) ;
56947: LD_INT 35
56949: PPUSH
56950: CALL_OW 67
// for un in tmp do
56954: LD_ADDR_VAR 0 2
56958: PUSH
56959: LD_VAR 0 3
56963: PUSH
56964: FOR_IN
56965: IFFALSE 57039
// begin if IsDead ( un ) then
56967: LD_VAR 0 2
56971: PPUSH
56972: CALL_OW 301
56976: IFFALSE 56996
// begin tmp := tmp diff un ;
56978: LD_ADDR_VAR 0 3
56982: PUSH
56983: LD_VAR 0 3
56987: PUSH
56988: LD_VAR 0 2
56992: DIFF
56993: ST_TO_ADDR
// continue ;
56994: GO 56964
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56996: LD_VAR 0 2
57000: PPUSH
57001: LD_INT 3
57003: PUSH
57004: LD_INT 22
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PPUSH
57018: CALL_OW 69
57022: PPUSH
57023: LD_VAR 0 2
57027: PPUSH
57028: CALL_OW 74
57032: PPUSH
57033: CALL_OW 115
// end ;
57037: GO 56964
57039: POP
57040: POP
// until not tmp ;
57041: LD_VAR 0 3
57045: NOT
57046: IFFALSE 56947
// end ;
57048: PPOPN 3
57050: END
// every 0 0$1 trigger StreamModeActive and sTroll do
57051: LD_EXP 20
57055: PUSH
57056: LD_EXP 45
57060: AND
57061: IFFALSE 57115
57063: GO 57065
57065: DISABLE
// begin ToLua ( displayTroll(); ) ;
57066: LD_STRING displayTroll();
57068: PPUSH
57069: CALL_OW 559
// wait ( 3 3$00 ) ;
57073: LD_INT 6300
57075: PPUSH
57076: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57080: LD_STRING hideTroll();
57082: PPUSH
57083: CALL_OW 559
// wait ( 1 1$00 ) ;
57087: LD_INT 2100
57089: PPUSH
57090: CALL_OW 67
// ToLua ( displayTroll(); ) ;
57094: LD_STRING displayTroll();
57096: PPUSH
57097: CALL_OW 559
// wait ( 1 1$00 ) ;
57101: LD_INT 2100
57103: PPUSH
57104: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57108: LD_STRING hideTroll();
57110: PPUSH
57111: CALL_OW 559
// end ;
57115: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
57116: LD_EXP 20
57120: PUSH
57121: LD_EXP 46
57125: AND
57126: IFFALSE 57189
57128: GO 57130
57130: DISABLE
57131: LD_INT 0
57133: PPUSH
// begin p := 0 ;
57134: LD_ADDR_VAR 0 1
57138: PUSH
57139: LD_INT 0
57141: ST_TO_ADDR
// repeat game_speed := 1 ;
57142: LD_ADDR_OWVAR 65
57146: PUSH
57147: LD_INT 1
57149: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57150: LD_INT 35
57152: PPUSH
57153: CALL_OW 67
// p := p + 1 ;
57157: LD_ADDR_VAR 0 1
57161: PUSH
57162: LD_VAR 0 1
57166: PUSH
57167: LD_INT 1
57169: PLUS
57170: ST_TO_ADDR
// until p >= 60 ;
57171: LD_VAR 0 1
57175: PUSH
57176: LD_INT 60
57178: GREATEREQUAL
57179: IFFALSE 57142
// game_speed := 4 ;
57181: LD_ADDR_OWVAR 65
57185: PUSH
57186: LD_INT 4
57188: ST_TO_ADDR
// end ;
57189: PPOPN 1
57191: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57192: LD_EXP 20
57196: PUSH
57197: LD_EXP 47
57201: AND
57202: IFFALSE 57348
57204: GO 57206
57206: DISABLE
57207: LD_INT 0
57209: PPUSH
57210: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57211: LD_ADDR_VAR 0 1
57215: PUSH
57216: LD_INT 22
57218: PUSH
57219: LD_OWVAR 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 30
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 30
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PPUSH
57260: CALL_OW 69
57264: ST_TO_ADDR
// if not depot then
57265: LD_VAR 0 1
57269: NOT
57270: IFFALSE 57274
// exit ;
57272: GO 57348
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57274: LD_ADDR_VAR 0 2
57278: PUSH
57279: LD_VAR 0 1
57283: PUSH
57284: LD_INT 1
57286: PPUSH
57287: LD_VAR 0 1
57291: PPUSH
57292: CALL_OW 12
57296: ARRAY
57297: PPUSH
57298: CALL_OW 274
57302: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57303: LD_VAR 0 2
57307: PPUSH
57308: LD_INT 1
57310: PPUSH
57311: LD_INT 0
57313: PPUSH
57314: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57318: LD_VAR 0 2
57322: PPUSH
57323: LD_INT 2
57325: PPUSH
57326: LD_INT 0
57328: PPUSH
57329: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57333: LD_VAR 0 2
57337: PPUSH
57338: LD_INT 3
57340: PPUSH
57341: LD_INT 0
57343: PPUSH
57344: CALL_OW 277
// end ;
57348: PPOPN 2
57350: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57351: LD_EXP 20
57355: PUSH
57356: LD_EXP 48
57360: AND
57361: IFFALSE 57458
57363: GO 57365
57365: DISABLE
57366: LD_INT 0
57368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57369: LD_ADDR_VAR 0 1
57373: PUSH
57374: LD_INT 22
57376: PUSH
57377: LD_OWVAR 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 21
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: PUSH
57399: LD_INT 23
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: LIST
57417: PPUSH
57418: CALL_OW 69
57422: ST_TO_ADDR
// if not tmp then
57423: LD_VAR 0 1
57427: NOT
57428: IFFALSE 57432
// exit ;
57430: GO 57458
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57432: LD_VAR 0 1
57436: PUSH
57437: LD_INT 1
57439: PPUSH
57440: LD_VAR 0 1
57444: PPUSH
57445: CALL_OW 12
57449: ARRAY
57450: PPUSH
57451: LD_INT 200
57453: PPUSH
57454: CALL_OW 234
// end ;
57458: PPOPN 1
57460: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
57461: LD_EXP 20
57465: PUSH
57466: LD_EXP 49
57470: AND
57471: IFFALSE 57550
57473: GO 57475
57475: DISABLE
57476: LD_INT 0
57478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
57479: LD_ADDR_VAR 0 1
57483: PUSH
57484: LD_INT 22
57486: PUSH
57487: LD_OWVAR 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 21
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PPUSH
57510: CALL_OW 69
57514: ST_TO_ADDR
// if not tmp then
57515: LD_VAR 0 1
57519: NOT
57520: IFFALSE 57524
// exit ;
57522: GO 57550
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
57524: LD_VAR 0 1
57528: PUSH
57529: LD_INT 1
57531: PPUSH
57532: LD_VAR 0 1
57536: PPUSH
57537: CALL_OW 12
57541: ARRAY
57542: PPUSH
57543: LD_INT 60
57545: PPUSH
57546: CALL_OW 234
// end ;
57550: PPOPN 1
57552: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
57553: LD_EXP 20
57557: PUSH
57558: LD_EXP 50
57562: AND
57563: IFFALSE 57662
57565: GO 57567
57567: DISABLE
57568: LD_INT 0
57570: PPUSH
57571: PPUSH
// begin enable ;
57572: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
57573: LD_ADDR_VAR 0 1
57577: PUSH
57578: LD_INT 22
57580: PUSH
57581: LD_OWVAR 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 61
57592: PUSH
57593: EMPTY
57594: LIST
57595: PUSH
57596: LD_INT 33
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: LIST
57610: PPUSH
57611: CALL_OW 69
57615: ST_TO_ADDR
// if not tmp then
57616: LD_VAR 0 1
57620: NOT
57621: IFFALSE 57625
// exit ;
57623: GO 57662
// for i in tmp do
57625: LD_ADDR_VAR 0 2
57629: PUSH
57630: LD_VAR 0 1
57634: PUSH
57635: FOR_IN
57636: IFFALSE 57660
// if IsControledBy ( i ) then
57638: LD_VAR 0 2
57642: PPUSH
57643: CALL_OW 312
57647: IFFALSE 57658
// ComUnlink ( i ) ;
57649: LD_VAR 0 2
57653: PPUSH
57654: CALL_OW 136
57658: GO 57635
57660: POP
57661: POP
// end ;
57662: PPOPN 2
57664: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57665: LD_EXP 20
57669: PUSH
57670: LD_EXP 51
57674: AND
57675: IFFALSE 57815
57677: GO 57679
57679: DISABLE
57680: LD_INT 0
57682: PPUSH
57683: PPUSH
// begin ToLua ( displayPowell(); ) ;
57684: LD_STRING displayPowell();
57686: PPUSH
57687: CALL_OW 559
// uc_side := 0 ;
57691: LD_ADDR_OWVAR 20
57695: PUSH
57696: LD_INT 0
57698: ST_TO_ADDR
// uc_nation := 2 ;
57699: LD_ADDR_OWVAR 21
57703: PUSH
57704: LD_INT 2
57706: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57707: LD_ADDR_OWVAR 37
57711: PUSH
57712: LD_INT 14
57714: ST_TO_ADDR
// vc_engine := engine_siberite ;
57715: LD_ADDR_OWVAR 39
57719: PUSH
57720: LD_INT 3
57722: ST_TO_ADDR
// vc_control := control_apeman ;
57723: LD_ADDR_OWVAR 38
57727: PUSH
57728: LD_INT 5
57730: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57731: LD_ADDR_OWVAR 40
57735: PUSH
57736: LD_INT 29
57738: ST_TO_ADDR
// un := CreateVehicle ;
57739: LD_ADDR_VAR 0 2
57743: PUSH
57744: CALL_OW 45
57748: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57749: LD_VAR 0 2
57753: PPUSH
57754: LD_INT 1
57756: PPUSH
57757: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57761: LD_INT 35
57763: PPUSH
57764: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57768: LD_VAR 0 2
57772: PPUSH
57773: LD_INT 22
57775: PUSH
57776: LD_OWVAR 2
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PPUSH
57785: CALL_OW 69
57789: PPUSH
57790: LD_VAR 0 2
57794: PPUSH
57795: CALL_OW 74
57799: PPUSH
57800: CALL_OW 115
// until IsDead ( un ) ;
57804: LD_VAR 0 2
57808: PPUSH
57809: CALL_OW 301
57813: IFFALSE 57761
// end ;
57815: PPOPN 2
57817: END
// every 0 0$1 trigger StreamModeActive and sStu do
57818: LD_EXP 20
57822: PUSH
57823: LD_EXP 59
57827: AND
57828: IFFALSE 57844
57830: GO 57832
57832: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57833: LD_STRING displayStucuk();
57835: PPUSH
57836: CALL_OW 559
// ResetFog ;
57840: CALL_OW 335
// end ;
57844: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57845: LD_EXP 20
57849: PUSH
57850: LD_EXP 52
57854: AND
57855: IFFALSE 57996
57857: GO 57859
57859: DISABLE
57860: LD_INT 0
57862: PPUSH
57863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57864: LD_ADDR_VAR 0 2
57868: PUSH
57869: LD_INT 22
57871: PUSH
57872: LD_OWVAR 2
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 21
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PPUSH
57895: CALL_OW 69
57899: ST_TO_ADDR
// if not tmp then
57900: LD_VAR 0 2
57904: NOT
57905: IFFALSE 57909
// exit ;
57907: GO 57996
// un := tmp [ rand ( 1 , tmp ) ] ;
57909: LD_ADDR_VAR 0 1
57913: PUSH
57914: LD_VAR 0 2
57918: PUSH
57919: LD_INT 1
57921: PPUSH
57922: LD_VAR 0 2
57926: PPUSH
57927: CALL_OW 12
57931: ARRAY
57932: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57933: LD_VAR 0 1
57937: PPUSH
57938: LD_INT 0
57940: PPUSH
57941: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57945: LD_VAR 0 1
57949: PPUSH
57950: LD_OWVAR 3
57954: PUSH
57955: LD_VAR 0 1
57959: DIFF
57960: PPUSH
57961: LD_VAR 0 1
57965: PPUSH
57966: CALL_OW 74
57970: PPUSH
57971: CALL_OW 115
// wait ( 0 0$20 ) ;
57975: LD_INT 700
57977: PPUSH
57978: CALL_OW 67
// SetSide ( un , your_side ) ;
57982: LD_VAR 0 1
57986: PPUSH
57987: LD_OWVAR 2
57991: PPUSH
57992: CALL_OW 235
// end ;
57996: PPOPN 2
57998: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57999: LD_EXP 20
58003: PUSH
58004: LD_EXP 53
58008: AND
58009: IFFALSE 58115
58011: GO 58013
58013: DISABLE
58014: LD_INT 0
58016: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58017: LD_ADDR_VAR 0 1
58021: PUSH
58022: LD_INT 22
58024: PUSH
58025: LD_OWVAR 2
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: LD_INT 30
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 30
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: LIST
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PPUSH
58066: CALL_OW 69
58070: ST_TO_ADDR
// if not depot then
58071: LD_VAR 0 1
58075: NOT
58076: IFFALSE 58080
// exit ;
58078: GO 58115
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
58080: LD_VAR 0 1
58084: PUSH
58085: LD_INT 1
58087: ARRAY
58088: PPUSH
58089: CALL_OW 250
58093: PPUSH
58094: LD_VAR 0 1
58098: PUSH
58099: LD_INT 1
58101: ARRAY
58102: PPUSH
58103: CALL_OW 251
58107: PPUSH
58108: LD_INT 70
58110: PPUSH
58111: CALL_OW 495
// end ;
58115: PPOPN 1
58117: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58118: LD_EXP 20
58122: PUSH
58123: LD_EXP 54
58127: AND
58128: IFFALSE 58339
58130: GO 58132
58132: DISABLE
58133: LD_INT 0
58135: PPUSH
58136: PPUSH
58137: PPUSH
58138: PPUSH
58139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58140: LD_ADDR_VAR 0 5
58144: PUSH
58145: LD_INT 22
58147: PUSH
58148: LD_OWVAR 2
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 21
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PPUSH
58171: CALL_OW 69
58175: ST_TO_ADDR
// if not tmp then
58176: LD_VAR 0 5
58180: NOT
58181: IFFALSE 58185
// exit ;
58183: GO 58339
// for i in tmp do
58185: LD_ADDR_VAR 0 1
58189: PUSH
58190: LD_VAR 0 5
58194: PUSH
58195: FOR_IN
58196: IFFALSE 58337
// begin d := rand ( 0 , 5 ) ;
58198: LD_ADDR_VAR 0 4
58202: PUSH
58203: LD_INT 0
58205: PPUSH
58206: LD_INT 5
58208: PPUSH
58209: CALL_OW 12
58213: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58214: LD_ADDR_VAR 0 2
58218: PUSH
58219: LD_VAR 0 1
58223: PPUSH
58224: CALL_OW 250
58228: PPUSH
58229: LD_VAR 0 4
58233: PPUSH
58234: LD_INT 3
58236: PPUSH
58237: LD_INT 12
58239: PPUSH
58240: CALL_OW 12
58244: PPUSH
58245: CALL_OW 272
58249: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58250: LD_ADDR_VAR 0 3
58254: PUSH
58255: LD_VAR 0 1
58259: PPUSH
58260: CALL_OW 251
58264: PPUSH
58265: LD_VAR 0 4
58269: PPUSH
58270: LD_INT 3
58272: PPUSH
58273: LD_INT 12
58275: PPUSH
58276: CALL_OW 12
58280: PPUSH
58281: CALL_OW 273
58285: ST_TO_ADDR
// if ValidHex ( x , y ) then
58286: LD_VAR 0 2
58290: PPUSH
58291: LD_VAR 0 3
58295: PPUSH
58296: CALL_OW 488
58300: IFFALSE 58335
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58302: LD_VAR 0 1
58306: PPUSH
58307: LD_VAR 0 2
58311: PPUSH
58312: LD_VAR 0 3
58316: PPUSH
58317: LD_INT 3
58319: PPUSH
58320: LD_INT 6
58322: PPUSH
58323: CALL_OW 12
58327: PPUSH
58328: LD_INT 1
58330: PPUSH
58331: CALL_OW 483
// end ;
58335: GO 58195
58337: POP
58338: POP
// end ;
58339: PPOPN 5
58341: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58342: LD_EXP 20
58346: PUSH
58347: LD_EXP 55
58351: AND
58352: IFFALSE 58446
58354: GO 58356
58356: DISABLE
58357: LD_INT 0
58359: PPUSH
58360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58361: LD_ADDR_VAR 0 2
58365: PUSH
58366: LD_INT 22
58368: PUSH
58369: LD_OWVAR 2
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 32
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 21
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: PPUSH
58403: CALL_OW 69
58407: ST_TO_ADDR
// if not tmp then
58408: LD_VAR 0 2
58412: NOT
58413: IFFALSE 58417
// exit ;
58415: GO 58446
// for i in tmp do
58417: LD_ADDR_VAR 0 1
58421: PUSH
58422: LD_VAR 0 2
58426: PUSH
58427: FOR_IN
58428: IFFALSE 58444
// SetFuel ( i , 0 ) ;
58430: LD_VAR 0 1
58434: PPUSH
58435: LD_INT 0
58437: PPUSH
58438: CALL_OW 240
58442: GO 58427
58444: POP
58445: POP
// end ;
58446: PPOPN 2
58448: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
58449: LD_EXP 20
58453: PUSH
58454: LD_EXP 56
58458: AND
58459: IFFALSE 58525
58461: GO 58463
58463: DISABLE
58464: LD_INT 0
58466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58467: LD_ADDR_VAR 0 1
58471: PUSH
58472: LD_INT 22
58474: PUSH
58475: LD_OWVAR 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 30
58486: PUSH
58487: LD_INT 29
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PPUSH
58498: CALL_OW 69
58502: ST_TO_ADDR
// if not tmp then
58503: LD_VAR 0 1
58507: NOT
58508: IFFALSE 58512
// exit ;
58510: GO 58525
// DestroyUnit ( tmp [ 1 ] ) ;
58512: LD_VAR 0 1
58516: PUSH
58517: LD_INT 1
58519: ARRAY
58520: PPUSH
58521: CALL_OW 65
// end ;
58525: PPOPN 1
58527: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
58528: LD_EXP 20
58532: PUSH
58533: LD_EXP 58
58537: AND
58538: IFFALSE 58667
58540: GO 58542
58542: DISABLE
58543: LD_INT 0
58545: PPUSH
// begin uc_side := 0 ;
58546: LD_ADDR_OWVAR 20
58550: PUSH
58551: LD_INT 0
58553: ST_TO_ADDR
// uc_nation := nation_arabian ;
58554: LD_ADDR_OWVAR 21
58558: PUSH
58559: LD_INT 2
58561: ST_TO_ADDR
// hc_gallery :=  ;
58562: LD_ADDR_OWVAR 33
58566: PUSH
58567: LD_STRING 
58569: ST_TO_ADDR
// hc_name :=  ;
58570: LD_ADDR_OWVAR 26
58574: PUSH
58575: LD_STRING 
58577: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58578: LD_INT 1
58580: PPUSH
58581: LD_INT 11
58583: PPUSH
58584: LD_INT 10
58586: PPUSH
58587: CALL_OW 380
// un := CreateHuman ;
58591: LD_ADDR_VAR 0 1
58595: PUSH
58596: CALL_OW 44
58600: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58601: LD_VAR 0 1
58605: PPUSH
58606: LD_INT 1
58608: PPUSH
58609: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58613: LD_INT 35
58615: PPUSH
58616: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58620: LD_VAR 0 1
58624: PPUSH
58625: LD_INT 22
58627: PUSH
58628: LD_OWVAR 2
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PPUSH
58637: CALL_OW 69
58641: PPUSH
58642: LD_VAR 0 1
58646: PPUSH
58647: CALL_OW 74
58651: PPUSH
58652: CALL_OW 115
// until IsDead ( un ) ;
58656: LD_VAR 0 1
58660: PPUSH
58661: CALL_OW 301
58665: IFFALSE 58613
// end ;
58667: PPOPN 1
58669: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58670: LD_EXP 20
58674: PUSH
58675: LD_EXP 60
58679: AND
58680: IFFALSE 58692
58682: GO 58684
58684: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58685: LD_STRING earthquake(getX(game), 0, 32)
58687: PPUSH
58688: CALL_OW 559
58692: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58693: LD_EXP 20
58697: PUSH
58698: LD_EXP 61
58702: AND
58703: IFFALSE 58794
58705: GO 58707
58707: DISABLE
58708: LD_INT 0
58710: PPUSH
// begin enable ;
58711: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58712: LD_ADDR_VAR 0 1
58716: PUSH
58717: LD_INT 22
58719: PUSH
58720: LD_OWVAR 2
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 21
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 33
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: PPUSH
58754: CALL_OW 69
58758: ST_TO_ADDR
// if not tmp then
58759: LD_VAR 0 1
58763: NOT
58764: IFFALSE 58768
// exit ;
58766: GO 58794
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58768: LD_VAR 0 1
58772: PUSH
58773: LD_INT 1
58775: PPUSH
58776: LD_VAR 0 1
58780: PPUSH
58781: CALL_OW 12
58785: ARRAY
58786: PPUSH
58787: LD_INT 1
58789: PPUSH
58790: CALL_OW 234
// end ;
58794: PPOPN 1
58796: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58797: LD_EXP 20
58801: PUSH
58802: LD_EXP 62
58806: AND
58807: IFFALSE 58948
58809: GO 58811
58811: DISABLE
58812: LD_INT 0
58814: PPUSH
58815: PPUSH
58816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58817: LD_ADDR_VAR 0 3
58821: PUSH
58822: LD_INT 22
58824: PUSH
58825: LD_OWVAR 2
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 25
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PPUSH
58848: CALL_OW 69
58852: ST_TO_ADDR
// if not tmp then
58853: LD_VAR 0 3
58857: NOT
58858: IFFALSE 58862
// exit ;
58860: GO 58948
// un := tmp [ rand ( 1 , tmp ) ] ;
58862: LD_ADDR_VAR 0 2
58866: PUSH
58867: LD_VAR 0 3
58871: PUSH
58872: LD_INT 1
58874: PPUSH
58875: LD_VAR 0 3
58879: PPUSH
58880: CALL_OW 12
58884: ARRAY
58885: ST_TO_ADDR
// if Crawls ( un ) then
58886: LD_VAR 0 2
58890: PPUSH
58891: CALL_OW 318
58895: IFFALSE 58906
// ComWalk ( un ) ;
58897: LD_VAR 0 2
58901: PPUSH
58902: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58906: LD_VAR 0 2
58910: PPUSH
58911: LD_INT 9
58913: PPUSH
58914: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58918: LD_INT 28
58920: PPUSH
58921: LD_OWVAR 2
58925: PPUSH
58926: LD_INT 2
58928: PPUSH
58929: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58933: LD_INT 29
58935: PPUSH
58936: LD_OWVAR 2
58940: PPUSH
58941: LD_INT 2
58943: PPUSH
58944: CALL_OW 322
// end ;
58948: PPOPN 3
58950: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58951: LD_EXP 20
58955: PUSH
58956: LD_EXP 63
58960: AND
58961: IFFALSE 59072
58963: GO 58965
58965: DISABLE
58966: LD_INT 0
58968: PPUSH
58969: PPUSH
58970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58971: LD_ADDR_VAR 0 3
58975: PUSH
58976: LD_INT 22
58978: PUSH
58979: LD_OWVAR 2
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 25
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PPUSH
59002: CALL_OW 69
59006: ST_TO_ADDR
// if not tmp then
59007: LD_VAR 0 3
59011: NOT
59012: IFFALSE 59016
// exit ;
59014: GO 59072
// un := tmp [ rand ( 1 , tmp ) ] ;
59016: LD_ADDR_VAR 0 2
59020: PUSH
59021: LD_VAR 0 3
59025: PUSH
59026: LD_INT 1
59028: PPUSH
59029: LD_VAR 0 3
59033: PPUSH
59034: CALL_OW 12
59038: ARRAY
59039: ST_TO_ADDR
// if Crawls ( un ) then
59040: LD_VAR 0 2
59044: PPUSH
59045: CALL_OW 318
59049: IFFALSE 59060
// ComWalk ( un ) ;
59051: LD_VAR 0 2
59055: PPUSH
59056: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59060: LD_VAR 0 2
59064: PPUSH
59065: LD_INT 8
59067: PPUSH
59068: CALL_OW 336
// end ;
59072: PPOPN 3
59074: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
59075: LD_EXP 20
59079: PUSH
59080: LD_EXP 64
59084: AND
59085: IFFALSE 59229
59087: GO 59089
59089: DISABLE
59090: LD_INT 0
59092: PPUSH
59093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
59094: LD_ADDR_VAR 0 2
59098: PUSH
59099: LD_INT 22
59101: PUSH
59102: LD_OWVAR 2
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 21
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: LD_INT 34
59126: PUSH
59127: LD_INT 12
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 34
59136: PUSH
59137: LD_INT 51
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 34
59146: PUSH
59147: LD_INT 32
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: LIST
59164: PPUSH
59165: CALL_OW 69
59169: ST_TO_ADDR
// if not tmp then
59170: LD_VAR 0 2
59174: NOT
59175: IFFALSE 59179
// exit ;
59177: GO 59229
// for i in tmp do
59179: LD_ADDR_VAR 0 1
59183: PUSH
59184: LD_VAR 0 2
59188: PUSH
59189: FOR_IN
59190: IFFALSE 59227
// if GetCargo ( i , mat_artifact ) = 0 then
59192: LD_VAR 0 1
59196: PPUSH
59197: LD_INT 4
59199: PPUSH
59200: CALL_OW 289
59204: PUSH
59205: LD_INT 0
59207: EQUAL
59208: IFFALSE 59225
// SetCargo ( i , mat_siberit , 100 ) ;
59210: LD_VAR 0 1
59214: PPUSH
59215: LD_INT 3
59217: PPUSH
59218: LD_INT 100
59220: PPUSH
59221: CALL_OW 290
59225: GO 59189
59227: POP
59228: POP
// end ;
59229: PPOPN 2
59231: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59232: LD_EXP 20
59236: PUSH
59237: LD_EXP 65
59241: AND
59242: IFFALSE 59425
59244: GO 59246
59246: DISABLE
59247: LD_INT 0
59249: PPUSH
59250: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59251: LD_ADDR_VAR 0 2
59255: PUSH
59256: LD_INT 22
59258: PUSH
59259: LD_OWVAR 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PPUSH
59268: CALL_OW 69
59272: ST_TO_ADDR
// if not tmp then
59273: LD_VAR 0 2
59277: NOT
59278: IFFALSE 59282
// exit ;
59280: GO 59425
// for i := 1 to 2 do
59282: LD_ADDR_VAR 0 1
59286: PUSH
59287: DOUBLE
59288: LD_INT 1
59290: DEC
59291: ST_TO_ADDR
59292: LD_INT 2
59294: PUSH
59295: FOR_TO
59296: IFFALSE 59423
// begin uc_side := your_side ;
59298: LD_ADDR_OWVAR 20
59302: PUSH
59303: LD_OWVAR 2
59307: ST_TO_ADDR
// uc_nation := nation_american ;
59308: LD_ADDR_OWVAR 21
59312: PUSH
59313: LD_INT 1
59315: ST_TO_ADDR
// vc_chassis := us_morphling ;
59316: LD_ADDR_OWVAR 37
59320: PUSH
59321: LD_INT 5
59323: ST_TO_ADDR
// vc_engine := engine_siberite ;
59324: LD_ADDR_OWVAR 39
59328: PUSH
59329: LD_INT 3
59331: ST_TO_ADDR
// vc_control := control_computer ;
59332: LD_ADDR_OWVAR 38
59336: PUSH
59337: LD_INT 3
59339: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59340: LD_ADDR_OWVAR 40
59344: PUSH
59345: LD_INT 10
59347: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59348: LD_VAR 0 2
59352: PUSH
59353: LD_INT 1
59355: ARRAY
59356: PPUSH
59357: CALL_OW 310
59361: NOT
59362: IFFALSE 59409
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59364: CALL_OW 45
59368: PPUSH
59369: LD_VAR 0 2
59373: PUSH
59374: LD_INT 1
59376: ARRAY
59377: PPUSH
59378: CALL_OW 250
59382: PPUSH
59383: LD_VAR 0 2
59387: PUSH
59388: LD_INT 1
59390: ARRAY
59391: PPUSH
59392: CALL_OW 251
59396: PPUSH
59397: LD_INT 12
59399: PPUSH
59400: LD_INT 1
59402: PPUSH
59403: CALL_OW 50
59407: GO 59421
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59409: CALL_OW 45
59413: PPUSH
59414: LD_INT 1
59416: PPUSH
59417: CALL_OW 51
// end ;
59421: GO 59295
59423: POP
59424: POP
// end ;
59425: PPOPN 2
59427: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59428: LD_EXP 20
59432: PUSH
59433: LD_EXP 66
59437: AND
59438: IFFALSE 59660
59440: GO 59442
59442: DISABLE
59443: LD_INT 0
59445: PPUSH
59446: PPUSH
59447: PPUSH
59448: PPUSH
59449: PPUSH
59450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59451: LD_ADDR_VAR 0 6
59455: PUSH
59456: LD_INT 22
59458: PUSH
59459: LD_OWVAR 2
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 21
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 3
59480: PUSH
59481: LD_INT 23
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: LIST
59499: PPUSH
59500: CALL_OW 69
59504: ST_TO_ADDR
// if not tmp then
59505: LD_VAR 0 6
59509: NOT
59510: IFFALSE 59514
// exit ;
59512: GO 59660
// s1 := rand ( 1 , 4 ) ;
59514: LD_ADDR_VAR 0 2
59518: PUSH
59519: LD_INT 1
59521: PPUSH
59522: LD_INT 4
59524: PPUSH
59525: CALL_OW 12
59529: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
59530: LD_ADDR_VAR 0 4
59534: PUSH
59535: LD_VAR 0 6
59539: PUSH
59540: LD_INT 1
59542: ARRAY
59543: PPUSH
59544: LD_VAR 0 2
59548: PPUSH
59549: CALL_OW 259
59553: ST_TO_ADDR
// if s1 = 1 then
59554: LD_VAR 0 2
59558: PUSH
59559: LD_INT 1
59561: EQUAL
59562: IFFALSE 59582
// s2 := rand ( 2 , 4 ) else
59564: LD_ADDR_VAR 0 3
59568: PUSH
59569: LD_INT 2
59571: PPUSH
59572: LD_INT 4
59574: PPUSH
59575: CALL_OW 12
59579: ST_TO_ADDR
59580: GO 59590
// s2 := 1 ;
59582: LD_ADDR_VAR 0 3
59586: PUSH
59587: LD_INT 1
59589: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59590: LD_ADDR_VAR 0 5
59594: PUSH
59595: LD_VAR 0 6
59599: PUSH
59600: LD_INT 1
59602: ARRAY
59603: PPUSH
59604: LD_VAR 0 3
59608: PPUSH
59609: CALL_OW 259
59613: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59614: LD_VAR 0 6
59618: PUSH
59619: LD_INT 1
59621: ARRAY
59622: PPUSH
59623: LD_VAR 0 2
59627: PPUSH
59628: LD_VAR 0 5
59632: PPUSH
59633: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59637: LD_VAR 0 6
59641: PUSH
59642: LD_INT 1
59644: ARRAY
59645: PPUSH
59646: LD_VAR 0 3
59650: PPUSH
59651: LD_VAR 0 4
59655: PPUSH
59656: CALL_OW 237
// end ;
59660: PPOPN 6
59662: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59663: LD_EXP 20
59667: PUSH
59668: LD_EXP 67
59672: AND
59673: IFFALSE 59752
59675: GO 59677
59677: DISABLE
59678: LD_INT 0
59680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59681: LD_ADDR_VAR 0 1
59685: PUSH
59686: LD_INT 22
59688: PUSH
59689: LD_OWVAR 2
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 30
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PPUSH
59712: CALL_OW 69
59716: ST_TO_ADDR
// if not tmp then
59717: LD_VAR 0 1
59721: NOT
59722: IFFALSE 59726
// exit ;
59724: GO 59752
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59726: LD_VAR 0 1
59730: PUSH
59731: LD_INT 1
59733: PPUSH
59734: LD_VAR 0 1
59738: PPUSH
59739: CALL_OW 12
59743: ARRAY
59744: PPUSH
59745: LD_INT 1
59747: PPUSH
59748: CALL_OW 234
// end ;
59752: PPOPN 1
59754: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59755: LD_EXP 20
59759: PUSH
59760: LD_EXP 68
59764: AND
59765: IFFALSE 59877
59767: GO 59769
59769: DISABLE
59770: LD_INT 0
59772: PPUSH
59773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59774: LD_ADDR_VAR 0 2
59778: PUSH
59779: LD_INT 22
59781: PUSH
59782: LD_OWVAR 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 30
59796: PUSH
59797: LD_INT 27
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 30
59806: PUSH
59807: LD_INT 26
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 30
59816: PUSH
59817: LD_INT 28
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PPUSH
59834: CALL_OW 69
59838: ST_TO_ADDR
// if not tmp then
59839: LD_VAR 0 2
59843: NOT
59844: IFFALSE 59848
// exit ;
59846: GO 59877
// for i in tmp do
59848: LD_ADDR_VAR 0 1
59852: PUSH
59853: LD_VAR 0 2
59857: PUSH
59858: FOR_IN
59859: IFFALSE 59875
// SetLives ( i , 1 ) ;
59861: LD_VAR 0 1
59865: PPUSH
59866: LD_INT 1
59868: PPUSH
59869: CALL_OW 234
59873: GO 59858
59875: POP
59876: POP
// end ;
59877: PPOPN 2
59879: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59880: LD_EXP 20
59884: PUSH
59885: LD_EXP 69
59889: AND
59890: IFFALSE 60177
59892: GO 59894
59894: DISABLE
59895: LD_INT 0
59897: PPUSH
59898: PPUSH
59899: PPUSH
// begin i := rand ( 1 , 7 ) ;
59900: LD_ADDR_VAR 0 1
59904: PUSH
59905: LD_INT 1
59907: PPUSH
59908: LD_INT 7
59910: PPUSH
59911: CALL_OW 12
59915: ST_TO_ADDR
// case i of 1 :
59916: LD_VAR 0 1
59920: PUSH
59921: LD_INT 1
59923: DOUBLE
59924: EQUAL
59925: IFTRUE 59929
59927: GO 59939
59929: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59930: LD_STRING earthquake(getX(game), 0, 32)
59932: PPUSH
59933: CALL_OW 559
59937: GO 60177
59939: LD_INT 2
59941: DOUBLE
59942: EQUAL
59943: IFTRUE 59947
59945: GO 59961
59947: POP
// begin ToLua ( displayStucuk(); ) ;
59948: LD_STRING displayStucuk();
59950: PPUSH
59951: CALL_OW 559
// ResetFog ;
59955: CALL_OW 335
// end ; 3 :
59959: GO 60177
59961: LD_INT 3
59963: DOUBLE
59964: EQUAL
59965: IFTRUE 59969
59967: GO 60073
59969: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59970: LD_ADDR_VAR 0 2
59974: PUSH
59975: LD_INT 22
59977: PUSH
59978: LD_OWVAR 2
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 25
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PPUSH
60001: CALL_OW 69
60005: ST_TO_ADDR
// if not tmp then
60006: LD_VAR 0 2
60010: NOT
60011: IFFALSE 60015
// exit ;
60013: GO 60177
// un := tmp [ rand ( 1 , tmp ) ] ;
60015: LD_ADDR_VAR 0 3
60019: PUSH
60020: LD_VAR 0 2
60024: PUSH
60025: LD_INT 1
60027: PPUSH
60028: LD_VAR 0 2
60032: PPUSH
60033: CALL_OW 12
60037: ARRAY
60038: ST_TO_ADDR
// if Crawls ( un ) then
60039: LD_VAR 0 3
60043: PPUSH
60044: CALL_OW 318
60048: IFFALSE 60059
// ComWalk ( un ) ;
60050: LD_VAR 0 3
60054: PPUSH
60055: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60059: LD_VAR 0 3
60063: PPUSH
60064: LD_INT 8
60066: PPUSH
60067: CALL_OW 336
// end ; 4 :
60071: GO 60177
60073: LD_INT 4
60075: DOUBLE
60076: EQUAL
60077: IFTRUE 60081
60079: GO 60155
60081: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60082: LD_ADDR_VAR 0 2
60086: PUSH
60087: LD_INT 22
60089: PUSH
60090: LD_OWVAR 2
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 30
60101: PUSH
60102: LD_INT 29
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PPUSH
60113: CALL_OW 69
60117: ST_TO_ADDR
// if not tmp then
60118: LD_VAR 0 2
60122: NOT
60123: IFFALSE 60127
// exit ;
60125: GO 60177
// CenterNowOnUnits ( tmp [ 1 ] ) ;
60127: LD_VAR 0 2
60131: PUSH
60132: LD_INT 1
60134: ARRAY
60135: PPUSH
60136: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60140: LD_VAR 0 2
60144: PUSH
60145: LD_INT 1
60147: ARRAY
60148: PPUSH
60149: CALL_OW 65
// end ; 5 .. 7 :
60153: GO 60177
60155: LD_INT 5
60157: DOUBLE
60158: GREATEREQUAL
60159: IFFALSE 60167
60161: LD_INT 7
60163: DOUBLE
60164: LESSEQUAL
60165: IFTRUE 60169
60167: GO 60176
60169: POP
// StreamSibBomb ; end ;
60170: CALL 56414 0 0
60174: GO 60177
60176: POP
// end ;
60177: PPOPN 3
60179: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60180: LD_EXP 20
60184: PUSH
60185: LD_EXP 70
60189: AND
60190: IFFALSE 60346
60192: GO 60194
60194: DISABLE
60195: LD_INT 0
60197: PPUSH
60198: PPUSH
60199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60200: LD_ADDR_VAR 0 2
60204: PUSH
60205: LD_INT 81
60207: PUSH
60208: LD_OWVAR 2
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: LD_INT 21
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 21
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PPUSH
60249: CALL_OW 69
60253: ST_TO_ADDR
// if not tmp then
60254: LD_VAR 0 2
60258: NOT
60259: IFFALSE 60263
// exit ;
60261: GO 60346
// p := 0 ;
60263: LD_ADDR_VAR 0 3
60267: PUSH
60268: LD_INT 0
60270: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60271: LD_INT 35
60273: PPUSH
60274: CALL_OW 67
// p := p + 1 ;
60278: LD_ADDR_VAR 0 3
60282: PUSH
60283: LD_VAR 0 3
60287: PUSH
60288: LD_INT 1
60290: PLUS
60291: ST_TO_ADDR
// for i in tmp do
60292: LD_ADDR_VAR 0 1
60296: PUSH
60297: LD_VAR 0 2
60301: PUSH
60302: FOR_IN
60303: IFFALSE 60334
// if GetLives ( i ) < 1000 then
60305: LD_VAR 0 1
60309: PPUSH
60310: CALL_OW 256
60314: PUSH
60315: LD_INT 1000
60317: LESS
60318: IFFALSE 60332
// SetLives ( i , 1000 ) ;
60320: LD_VAR 0 1
60324: PPUSH
60325: LD_INT 1000
60327: PPUSH
60328: CALL_OW 234
60332: GO 60302
60334: POP
60335: POP
// until p > 20 ;
60336: LD_VAR 0 3
60340: PUSH
60341: LD_INT 20
60343: GREATER
60344: IFFALSE 60271
// end ;
60346: PPOPN 3
60348: END
// every 0 0$1 trigger StreamModeActive and sTime do
60349: LD_EXP 20
60353: PUSH
60354: LD_EXP 71
60358: AND
60359: IFFALSE 60394
60361: GO 60363
60363: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60364: LD_INT 28
60366: PPUSH
60367: LD_OWVAR 2
60371: PPUSH
60372: LD_INT 2
60374: PPUSH
60375: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60379: LD_INT 30
60381: PPUSH
60382: LD_OWVAR 2
60386: PPUSH
60387: LD_INT 2
60389: PPUSH
60390: CALL_OW 322
// end ;
60394: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60395: LD_EXP 20
60399: PUSH
60400: LD_EXP 72
60404: AND
60405: IFFALSE 60526
60407: GO 60409
60409: DISABLE
60410: LD_INT 0
60412: PPUSH
60413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60414: LD_ADDR_VAR 0 2
60418: PUSH
60419: LD_INT 22
60421: PUSH
60422: LD_OWVAR 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 21
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 3
60443: PUSH
60444: LD_INT 23
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: PPUSH
60463: CALL_OW 69
60467: ST_TO_ADDR
// if not tmp then
60468: LD_VAR 0 2
60472: NOT
60473: IFFALSE 60477
// exit ;
60475: GO 60526
// for i in tmp do
60477: LD_ADDR_VAR 0 1
60481: PUSH
60482: LD_VAR 0 2
60486: PUSH
60487: FOR_IN
60488: IFFALSE 60524
// begin if Crawls ( i ) then
60490: LD_VAR 0 1
60494: PPUSH
60495: CALL_OW 318
60499: IFFALSE 60510
// ComWalk ( i ) ;
60501: LD_VAR 0 1
60505: PPUSH
60506: CALL_OW 138
// SetClass ( i , 2 ) ;
60510: LD_VAR 0 1
60514: PPUSH
60515: LD_INT 2
60517: PPUSH
60518: CALL_OW 336
// end ;
60522: GO 60487
60524: POP
60525: POP
// end ;
60526: PPOPN 2
60528: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
60529: LD_EXP 20
60533: PUSH
60534: LD_EXP 73
60538: AND
60539: IFFALSE 60827
60541: GO 60543
60543: DISABLE
60544: LD_INT 0
60546: PPUSH
60547: PPUSH
60548: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
60549: LD_OWVAR 2
60553: PPUSH
60554: LD_INT 9
60556: PPUSH
60557: LD_INT 1
60559: PPUSH
60560: LD_INT 1
60562: PPUSH
60563: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
60567: LD_INT 9
60569: PPUSH
60570: LD_OWVAR 2
60574: PPUSH
60575: CALL_OW 343
// uc_side := 9 ;
60579: LD_ADDR_OWVAR 20
60583: PUSH
60584: LD_INT 9
60586: ST_TO_ADDR
// uc_nation := 2 ;
60587: LD_ADDR_OWVAR 21
60591: PUSH
60592: LD_INT 2
60594: ST_TO_ADDR
// hc_name := Dark Warrior ;
60595: LD_ADDR_OWVAR 26
60599: PUSH
60600: LD_STRING Dark Warrior
60602: ST_TO_ADDR
// hc_gallery :=  ;
60603: LD_ADDR_OWVAR 33
60607: PUSH
60608: LD_STRING 
60610: ST_TO_ADDR
// hc_noskilllimit := true ;
60611: LD_ADDR_OWVAR 76
60615: PUSH
60616: LD_INT 1
60618: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60619: LD_ADDR_OWVAR 31
60623: PUSH
60624: LD_INT 30
60626: PUSH
60627: LD_INT 30
60629: PUSH
60630: LD_INT 30
60632: PUSH
60633: LD_INT 30
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: ST_TO_ADDR
// un := CreateHuman ;
60642: LD_ADDR_VAR 0 3
60646: PUSH
60647: CALL_OW 44
60651: ST_TO_ADDR
// hc_noskilllimit := false ;
60652: LD_ADDR_OWVAR 76
60656: PUSH
60657: LD_INT 0
60659: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60660: LD_VAR 0 3
60664: PPUSH
60665: LD_INT 1
60667: PPUSH
60668: CALL_OW 51
// ToLua ( playRanger() ) ;
60672: LD_STRING playRanger()
60674: PPUSH
60675: CALL_OW 559
// p := 0 ;
60679: LD_ADDR_VAR 0 2
60683: PUSH
60684: LD_INT 0
60686: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60687: LD_INT 35
60689: PPUSH
60690: CALL_OW 67
// p := p + 1 ;
60694: LD_ADDR_VAR 0 2
60698: PUSH
60699: LD_VAR 0 2
60703: PUSH
60704: LD_INT 1
60706: PLUS
60707: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60708: LD_VAR 0 3
60712: PPUSH
60713: CALL_OW 256
60717: PUSH
60718: LD_INT 1000
60720: LESS
60721: IFFALSE 60735
// SetLives ( un , 1000 ) ;
60723: LD_VAR 0 3
60727: PPUSH
60728: LD_INT 1000
60730: PPUSH
60731: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60735: LD_VAR 0 3
60739: PPUSH
60740: LD_INT 81
60742: PUSH
60743: LD_OWVAR 2
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 91
60754: PUSH
60755: LD_VAR 0 3
60759: PUSH
60760: LD_INT 30
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: LIST
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PPUSH
60772: CALL_OW 69
60776: PPUSH
60777: LD_VAR 0 3
60781: PPUSH
60782: CALL_OW 74
60786: PPUSH
60787: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60791: LD_VAR 0 2
60795: PUSH
60796: LD_INT 80
60798: GREATER
60799: PUSH
60800: LD_VAR 0 3
60804: PPUSH
60805: CALL_OW 301
60809: OR
60810: IFFALSE 60687
// if un then
60812: LD_VAR 0 3
60816: IFFALSE 60827
// RemoveUnit ( un ) ;
60818: LD_VAR 0 3
60822: PPUSH
60823: CALL_OW 64
// end ;
60827: PPOPN 3
60829: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60830: LD_EXP 74
60834: IFFALSE 60950
60836: GO 60838
60838: DISABLE
60839: LD_INT 0
60841: PPUSH
60842: PPUSH
60843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60844: LD_ADDR_VAR 0 2
60848: PUSH
60849: LD_INT 81
60851: PUSH
60852: LD_OWVAR 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 21
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PPUSH
60875: CALL_OW 69
60879: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60880: LD_STRING playComputer()
60882: PPUSH
60883: CALL_OW 559
// if not tmp then
60887: LD_VAR 0 2
60891: NOT
60892: IFFALSE 60896
// exit ;
60894: GO 60950
// for i in tmp do
60896: LD_ADDR_VAR 0 1
60900: PUSH
60901: LD_VAR 0 2
60905: PUSH
60906: FOR_IN
60907: IFFALSE 60948
// for j := 1 to 4 do
60909: LD_ADDR_VAR 0 3
60913: PUSH
60914: DOUBLE
60915: LD_INT 1
60917: DEC
60918: ST_TO_ADDR
60919: LD_INT 4
60921: PUSH
60922: FOR_TO
60923: IFFALSE 60944
// SetSkill ( i , j , 10 ) ;
60925: LD_VAR 0 1
60929: PPUSH
60930: LD_VAR 0 3
60934: PPUSH
60935: LD_INT 10
60937: PPUSH
60938: CALL_OW 237
60942: GO 60922
60944: POP
60945: POP
60946: GO 60906
60948: POP
60949: POP
// end ;
60950: PPOPN 3
60952: END
// every 0 0$1 trigger s30 do var i , tmp ;
60953: LD_EXP 75
60957: IFFALSE 61026
60959: GO 60961
60961: DISABLE
60962: LD_INT 0
60964: PPUSH
60965: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60966: LD_ADDR_VAR 0 2
60970: PUSH
60971: LD_INT 22
60973: PUSH
60974: LD_OWVAR 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PPUSH
60983: CALL_OW 69
60987: ST_TO_ADDR
// if not tmp then
60988: LD_VAR 0 2
60992: NOT
60993: IFFALSE 60997
// exit ;
60995: GO 61026
// for i in tmp do
60997: LD_ADDR_VAR 0 1
61001: PUSH
61002: LD_VAR 0 2
61006: PUSH
61007: FOR_IN
61008: IFFALSE 61024
// SetLives ( i , 300 ) ;
61010: LD_VAR 0 1
61014: PPUSH
61015: LD_INT 300
61017: PPUSH
61018: CALL_OW 234
61022: GO 61007
61024: POP
61025: POP
// end ;
61026: PPOPN 2
61028: END
// every 0 0$1 trigger s60 do var i , tmp ;
61029: LD_EXP 76
61033: IFFALSE 61102
61035: GO 61037
61037: DISABLE
61038: LD_INT 0
61040: PPUSH
61041: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61042: LD_ADDR_VAR 0 2
61046: PUSH
61047: LD_INT 22
61049: PUSH
61050: LD_OWVAR 2
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PPUSH
61059: CALL_OW 69
61063: ST_TO_ADDR
// if not tmp then
61064: LD_VAR 0 2
61068: NOT
61069: IFFALSE 61073
// exit ;
61071: GO 61102
// for i in tmp do
61073: LD_ADDR_VAR 0 1
61077: PUSH
61078: LD_VAR 0 2
61082: PUSH
61083: FOR_IN
61084: IFFALSE 61100
// SetLives ( i , 600 ) ;
61086: LD_VAR 0 1
61090: PPUSH
61091: LD_INT 600
61093: PPUSH
61094: CALL_OW 234
61098: GO 61083
61100: POP
61101: POP
// end ;
61102: PPOPN 2
61104: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61105: LD_INT 0
61107: PPUSH
// case cmd of 301 :
61108: LD_VAR 0 1
61112: PUSH
61113: LD_INT 301
61115: DOUBLE
61116: EQUAL
61117: IFTRUE 61121
61119: GO 61153
61121: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61122: LD_VAR 0 6
61126: PPUSH
61127: LD_VAR 0 7
61131: PPUSH
61132: LD_VAR 0 8
61136: PPUSH
61137: LD_VAR 0 4
61141: PPUSH
61142: LD_VAR 0 5
61146: PPUSH
61147: CALL 62362 0 5
61151: GO 61274
61153: LD_INT 302
61155: DOUBLE
61156: EQUAL
61157: IFTRUE 61161
61159: GO 61198
61161: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61162: LD_VAR 0 6
61166: PPUSH
61167: LD_VAR 0 7
61171: PPUSH
61172: LD_VAR 0 8
61176: PPUSH
61177: LD_VAR 0 9
61181: PPUSH
61182: LD_VAR 0 4
61186: PPUSH
61187: LD_VAR 0 5
61191: PPUSH
61192: CALL 62453 0 6
61196: GO 61274
61198: LD_INT 303
61200: DOUBLE
61201: EQUAL
61202: IFTRUE 61206
61204: GO 61243
61206: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61207: LD_VAR 0 6
61211: PPUSH
61212: LD_VAR 0 7
61216: PPUSH
61217: LD_VAR 0 8
61221: PPUSH
61222: LD_VAR 0 9
61226: PPUSH
61227: LD_VAR 0 4
61231: PPUSH
61232: LD_VAR 0 5
61236: PPUSH
61237: CALL 61279 0 6
61241: GO 61274
61243: LD_INT 304
61245: DOUBLE
61246: EQUAL
61247: IFTRUE 61251
61249: GO 61273
61251: POP
// hHackTeleport ( unit , x , y ) ; end ;
61252: LD_VAR 0 2
61256: PPUSH
61257: LD_VAR 0 4
61261: PPUSH
61262: LD_VAR 0 5
61266: PPUSH
61267: CALL 63046 0 3
61271: GO 61274
61273: POP
// end ;
61274: LD_VAR 0 12
61278: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61279: LD_INT 0
61281: PPUSH
61282: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61283: LD_VAR 0 1
61287: PUSH
61288: LD_INT 1
61290: LESS
61291: PUSH
61292: LD_VAR 0 1
61296: PUSH
61297: LD_INT 3
61299: GREATER
61300: OR
61301: PUSH
61302: LD_VAR 0 5
61306: PPUSH
61307: LD_VAR 0 6
61311: PPUSH
61312: CALL_OW 428
61316: OR
61317: IFFALSE 61321
// exit ;
61319: GO 62049
// uc_side := your_side ;
61321: LD_ADDR_OWVAR 20
61325: PUSH
61326: LD_OWVAR 2
61330: ST_TO_ADDR
// uc_nation := nation ;
61331: LD_ADDR_OWVAR 21
61335: PUSH
61336: LD_VAR 0 1
61340: ST_TO_ADDR
// bc_level = 1 ;
61341: LD_ADDR_OWVAR 43
61345: PUSH
61346: LD_INT 1
61348: ST_TO_ADDR
// case btype of 1 :
61349: LD_VAR 0 2
61353: PUSH
61354: LD_INT 1
61356: DOUBLE
61357: EQUAL
61358: IFTRUE 61362
61360: GO 61373
61362: POP
// bc_type := b_depot ; 2 :
61363: LD_ADDR_OWVAR 42
61367: PUSH
61368: LD_INT 0
61370: ST_TO_ADDR
61371: GO 61993
61373: LD_INT 2
61375: DOUBLE
61376: EQUAL
61377: IFTRUE 61381
61379: GO 61392
61381: POP
// bc_type := b_warehouse ; 3 :
61382: LD_ADDR_OWVAR 42
61386: PUSH
61387: LD_INT 1
61389: ST_TO_ADDR
61390: GO 61993
61392: LD_INT 3
61394: DOUBLE
61395: EQUAL
61396: IFTRUE 61400
61398: GO 61411
61400: POP
// bc_type := b_lab ; 4 .. 9 :
61401: LD_ADDR_OWVAR 42
61405: PUSH
61406: LD_INT 6
61408: ST_TO_ADDR
61409: GO 61993
61411: LD_INT 4
61413: DOUBLE
61414: GREATEREQUAL
61415: IFFALSE 61423
61417: LD_INT 9
61419: DOUBLE
61420: LESSEQUAL
61421: IFTRUE 61425
61423: GO 61485
61425: POP
// begin bc_type := b_lab_half ;
61426: LD_ADDR_OWVAR 42
61430: PUSH
61431: LD_INT 7
61433: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61434: LD_ADDR_OWVAR 44
61438: PUSH
61439: LD_INT 10
61441: PUSH
61442: LD_INT 11
61444: PUSH
61445: LD_INT 12
61447: PUSH
61448: LD_INT 15
61450: PUSH
61451: LD_INT 14
61453: PUSH
61454: LD_INT 13
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: PUSH
61465: LD_VAR 0 2
61469: PUSH
61470: LD_INT 3
61472: MINUS
61473: ARRAY
61474: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
61475: LD_ADDR_OWVAR 45
61479: PUSH
61480: LD_INT 9
61482: ST_TO_ADDR
// end ; 10 .. 13 :
61483: GO 61993
61485: LD_INT 10
61487: DOUBLE
61488: GREATEREQUAL
61489: IFFALSE 61497
61491: LD_INT 13
61493: DOUBLE
61494: LESSEQUAL
61495: IFTRUE 61499
61497: GO 61576
61499: POP
// begin bc_type := b_lab_full ;
61500: LD_ADDR_OWVAR 42
61504: PUSH
61505: LD_INT 8
61507: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
61508: LD_ADDR_OWVAR 44
61512: PUSH
61513: LD_INT 10
61515: PUSH
61516: LD_INT 12
61518: PUSH
61519: LD_INT 14
61521: PUSH
61522: LD_INT 13
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: PUSH
61531: LD_VAR 0 2
61535: PUSH
61536: LD_INT 9
61538: MINUS
61539: ARRAY
61540: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61541: LD_ADDR_OWVAR 45
61545: PUSH
61546: LD_INT 11
61548: PUSH
61549: LD_INT 15
61551: PUSH
61552: LD_INT 12
61554: PUSH
61555: LD_INT 15
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: PUSH
61564: LD_VAR 0 2
61568: PUSH
61569: LD_INT 9
61571: MINUS
61572: ARRAY
61573: ST_TO_ADDR
// end ; 14 :
61574: GO 61993
61576: LD_INT 14
61578: DOUBLE
61579: EQUAL
61580: IFTRUE 61584
61582: GO 61595
61584: POP
// bc_type := b_workshop ; 15 :
61585: LD_ADDR_OWVAR 42
61589: PUSH
61590: LD_INT 2
61592: ST_TO_ADDR
61593: GO 61993
61595: LD_INT 15
61597: DOUBLE
61598: EQUAL
61599: IFTRUE 61603
61601: GO 61614
61603: POP
// bc_type := b_factory ; 16 :
61604: LD_ADDR_OWVAR 42
61608: PUSH
61609: LD_INT 3
61611: ST_TO_ADDR
61612: GO 61993
61614: LD_INT 16
61616: DOUBLE
61617: EQUAL
61618: IFTRUE 61622
61620: GO 61633
61622: POP
// bc_type := b_ext_gun ; 17 :
61623: LD_ADDR_OWVAR 42
61627: PUSH
61628: LD_INT 17
61630: ST_TO_ADDR
61631: GO 61993
61633: LD_INT 17
61635: DOUBLE
61636: EQUAL
61637: IFTRUE 61641
61639: GO 61669
61641: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61642: LD_ADDR_OWVAR 42
61646: PUSH
61647: LD_INT 19
61649: PUSH
61650: LD_INT 23
61652: PUSH
61653: LD_INT 19
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: PUSH
61661: LD_VAR 0 1
61665: ARRAY
61666: ST_TO_ADDR
61667: GO 61993
61669: LD_INT 18
61671: DOUBLE
61672: EQUAL
61673: IFTRUE 61677
61675: GO 61688
61677: POP
// bc_type := b_ext_radar ; 19 :
61678: LD_ADDR_OWVAR 42
61682: PUSH
61683: LD_INT 20
61685: ST_TO_ADDR
61686: GO 61993
61688: LD_INT 19
61690: DOUBLE
61691: EQUAL
61692: IFTRUE 61696
61694: GO 61707
61696: POP
// bc_type := b_ext_radio ; 20 :
61697: LD_ADDR_OWVAR 42
61701: PUSH
61702: LD_INT 22
61704: ST_TO_ADDR
61705: GO 61993
61707: LD_INT 20
61709: DOUBLE
61710: EQUAL
61711: IFTRUE 61715
61713: GO 61726
61715: POP
// bc_type := b_ext_siberium ; 21 :
61716: LD_ADDR_OWVAR 42
61720: PUSH
61721: LD_INT 21
61723: ST_TO_ADDR
61724: GO 61993
61726: LD_INT 21
61728: DOUBLE
61729: EQUAL
61730: IFTRUE 61734
61732: GO 61745
61734: POP
// bc_type := b_ext_computer ; 22 :
61735: LD_ADDR_OWVAR 42
61739: PUSH
61740: LD_INT 24
61742: ST_TO_ADDR
61743: GO 61993
61745: LD_INT 22
61747: DOUBLE
61748: EQUAL
61749: IFTRUE 61753
61751: GO 61764
61753: POP
// bc_type := b_ext_track ; 23 :
61754: LD_ADDR_OWVAR 42
61758: PUSH
61759: LD_INT 16
61761: ST_TO_ADDR
61762: GO 61993
61764: LD_INT 23
61766: DOUBLE
61767: EQUAL
61768: IFTRUE 61772
61770: GO 61783
61772: POP
// bc_type := b_ext_laser ; 24 :
61773: LD_ADDR_OWVAR 42
61777: PUSH
61778: LD_INT 25
61780: ST_TO_ADDR
61781: GO 61993
61783: LD_INT 24
61785: DOUBLE
61786: EQUAL
61787: IFTRUE 61791
61789: GO 61802
61791: POP
// bc_type := b_control_tower ; 25 :
61792: LD_ADDR_OWVAR 42
61796: PUSH
61797: LD_INT 36
61799: ST_TO_ADDR
61800: GO 61993
61802: LD_INT 25
61804: DOUBLE
61805: EQUAL
61806: IFTRUE 61810
61808: GO 61821
61810: POP
// bc_type := b_breastwork ; 26 :
61811: LD_ADDR_OWVAR 42
61815: PUSH
61816: LD_INT 31
61818: ST_TO_ADDR
61819: GO 61993
61821: LD_INT 26
61823: DOUBLE
61824: EQUAL
61825: IFTRUE 61829
61827: GO 61840
61829: POP
// bc_type := b_bunker ; 27 :
61830: LD_ADDR_OWVAR 42
61834: PUSH
61835: LD_INT 32
61837: ST_TO_ADDR
61838: GO 61993
61840: LD_INT 27
61842: DOUBLE
61843: EQUAL
61844: IFTRUE 61848
61846: GO 61859
61848: POP
// bc_type := b_turret ; 28 :
61849: LD_ADDR_OWVAR 42
61853: PUSH
61854: LD_INT 33
61856: ST_TO_ADDR
61857: GO 61993
61859: LD_INT 28
61861: DOUBLE
61862: EQUAL
61863: IFTRUE 61867
61865: GO 61878
61867: POP
// bc_type := b_armoury ; 29 :
61868: LD_ADDR_OWVAR 42
61872: PUSH
61873: LD_INT 4
61875: ST_TO_ADDR
61876: GO 61993
61878: LD_INT 29
61880: DOUBLE
61881: EQUAL
61882: IFTRUE 61886
61884: GO 61897
61886: POP
// bc_type := b_barracks ; 30 :
61887: LD_ADDR_OWVAR 42
61891: PUSH
61892: LD_INT 5
61894: ST_TO_ADDR
61895: GO 61993
61897: LD_INT 30
61899: DOUBLE
61900: EQUAL
61901: IFTRUE 61905
61903: GO 61916
61905: POP
// bc_type := b_solar_power ; 31 :
61906: LD_ADDR_OWVAR 42
61910: PUSH
61911: LD_INT 27
61913: ST_TO_ADDR
61914: GO 61993
61916: LD_INT 31
61918: DOUBLE
61919: EQUAL
61920: IFTRUE 61924
61922: GO 61935
61924: POP
// bc_type := b_oil_power ; 32 :
61925: LD_ADDR_OWVAR 42
61929: PUSH
61930: LD_INT 26
61932: ST_TO_ADDR
61933: GO 61993
61935: LD_INT 32
61937: DOUBLE
61938: EQUAL
61939: IFTRUE 61943
61941: GO 61954
61943: POP
// bc_type := b_siberite_power ; 33 :
61944: LD_ADDR_OWVAR 42
61948: PUSH
61949: LD_INT 28
61951: ST_TO_ADDR
61952: GO 61993
61954: LD_INT 33
61956: DOUBLE
61957: EQUAL
61958: IFTRUE 61962
61960: GO 61973
61962: POP
// bc_type := b_oil_mine ; 34 :
61963: LD_ADDR_OWVAR 42
61967: PUSH
61968: LD_INT 29
61970: ST_TO_ADDR
61971: GO 61993
61973: LD_INT 34
61975: DOUBLE
61976: EQUAL
61977: IFTRUE 61981
61979: GO 61992
61981: POP
// bc_type := b_siberite_mine ; end ;
61982: LD_ADDR_OWVAR 42
61986: PUSH
61987: LD_INT 30
61989: ST_TO_ADDR
61990: GO 61993
61992: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61993: LD_ADDR_VAR 0 8
61997: PUSH
61998: LD_VAR 0 5
62002: PPUSH
62003: LD_VAR 0 6
62007: PPUSH
62008: LD_VAR 0 3
62012: PPUSH
62013: CALL_OW 47
62017: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
62018: LD_OWVAR 42
62022: PUSH
62023: LD_INT 32
62025: PUSH
62026: LD_INT 33
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: IN
62033: IFFALSE 62049
// PlaceWeaponTurret ( b , weapon ) ;
62035: LD_VAR 0 8
62039: PPUSH
62040: LD_VAR 0 4
62044: PPUSH
62045: CALL_OW 431
// end ;
62049: LD_VAR 0 7
62053: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
62054: LD_INT 0
62056: PPUSH
62057: PPUSH
62058: PPUSH
62059: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62060: LD_ADDR_VAR 0 4
62064: PUSH
62065: LD_INT 22
62067: PUSH
62068: LD_OWVAR 2
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 2
62079: PUSH
62080: LD_INT 30
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 30
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: LIST
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PPUSH
62109: CALL_OW 69
62113: ST_TO_ADDR
// if not tmp then
62114: LD_VAR 0 4
62118: NOT
62119: IFFALSE 62123
// exit ;
62121: GO 62182
// for i in tmp do
62123: LD_ADDR_VAR 0 2
62127: PUSH
62128: LD_VAR 0 4
62132: PUSH
62133: FOR_IN
62134: IFFALSE 62180
// for j = 1 to 3 do
62136: LD_ADDR_VAR 0 3
62140: PUSH
62141: DOUBLE
62142: LD_INT 1
62144: DEC
62145: ST_TO_ADDR
62146: LD_INT 3
62148: PUSH
62149: FOR_TO
62150: IFFALSE 62176
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62152: LD_VAR 0 2
62156: PPUSH
62157: CALL_OW 274
62161: PPUSH
62162: LD_VAR 0 3
62166: PPUSH
62167: LD_INT 99999
62169: PPUSH
62170: CALL_OW 277
62174: GO 62149
62176: POP
62177: POP
62178: GO 62133
62180: POP
62181: POP
// end ;
62182: LD_VAR 0 1
62186: RET
// export function hHackSetLevel10 ; var i , j ; begin
62187: LD_INT 0
62189: PPUSH
62190: PPUSH
62191: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62192: LD_ADDR_VAR 0 2
62196: PUSH
62197: LD_INT 21
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PPUSH
62207: CALL_OW 69
62211: PUSH
62212: FOR_IN
62213: IFFALSE 62265
// if IsSelected ( i ) then
62215: LD_VAR 0 2
62219: PPUSH
62220: CALL_OW 306
62224: IFFALSE 62263
// begin for j := 1 to 4 do
62226: LD_ADDR_VAR 0 3
62230: PUSH
62231: DOUBLE
62232: LD_INT 1
62234: DEC
62235: ST_TO_ADDR
62236: LD_INT 4
62238: PUSH
62239: FOR_TO
62240: IFFALSE 62261
// SetSkill ( i , j , 10 ) ;
62242: LD_VAR 0 2
62246: PPUSH
62247: LD_VAR 0 3
62251: PPUSH
62252: LD_INT 10
62254: PPUSH
62255: CALL_OW 237
62259: GO 62239
62261: POP
62262: POP
// end ;
62263: GO 62212
62265: POP
62266: POP
// end ;
62267: LD_VAR 0 1
62271: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62272: LD_INT 0
62274: PPUSH
62275: PPUSH
62276: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62277: LD_ADDR_VAR 0 2
62281: PUSH
62282: LD_INT 22
62284: PUSH
62285: LD_OWVAR 2
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 21
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PPUSH
62308: CALL_OW 69
62312: PUSH
62313: FOR_IN
62314: IFFALSE 62355
// begin for j := 1 to 4 do
62316: LD_ADDR_VAR 0 3
62320: PUSH
62321: DOUBLE
62322: LD_INT 1
62324: DEC
62325: ST_TO_ADDR
62326: LD_INT 4
62328: PUSH
62329: FOR_TO
62330: IFFALSE 62351
// SetSkill ( i , j , 10 ) ;
62332: LD_VAR 0 2
62336: PPUSH
62337: LD_VAR 0 3
62341: PPUSH
62342: LD_INT 10
62344: PPUSH
62345: CALL_OW 237
62349: GO 62329
62351: POP
62352: POP
// end ;
62353: GO 62313
62355: POP
62356: POP
// end ;
62357: LD_VAR 0 1
62361: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62362: LD_INT 0
62364: PPUSH
// uc_side := your_side ;
62365: LD_ADDR_OWVAR 20
62369: PUSH
62370: LD_OWVAR 2
62374: ST_TO_ADDR
// uc_nation := nation ;
62375: LD_ADDR_OWVAR 21
62379: PUSH
62380: LD_VAR 0 1
62384: ST_TO_ADDR
// InitHc ;
62385: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62389: LD_INT 0
62391: PPUSH
62392: LD_VAR 0 2
62396: PPUSH
62397: LD_VAR 0 3
62401: PPUSH
62402: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62406: LD_VAR 0 4
62410: PPUSH
62411: LD_VAR 0 5
62415: PPUSH
62416: CALL_OW 428
62420: PUSH
62421: LD_INT 0
62423: EQUAL
62424: IFFALSE 62448
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62426: CALL_OW 44
62430: PPUSH
62431: LD_VAR 0 4
62435: PPUSH
62436: LD_VAR 0 5
62440: PPUSH
62441: LD_INT 1
62443: PPUSH
62444: CALL_OW 48
// end ;
62448: LD_VAR 0 6
62452: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62453: LD_INT 0
62455: PPUSH
62456: PPUSH
// uc_side := your_side ;
62457: LD_ADDR_OWVAR 20
62461: PUSH
62462: LD_OWVAR 2
62466: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62467: LD_VAR 0 1
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: LD_INT 2
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: LD_INT 4
62483: PUSH
62484: LD_INT 5
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: IN
62494: IFFALSE 62506
// uc_nation := nation_american else
62496: LD_ADDR_OWVAR 21
62500: PUSH
62501: LD_INT 1
62503: ST_TO_ADDR
62504: GO 62549
// if chassis in [ 11 , 12 , 13 , 14 ] then
62506: LD_VAR 0 1
62510: PUSH
62511: LD_INT 11
62513: PUSH
62514: LD_INT 12
62516: PUSH
62517: LD_INT 13
62519: PUSH
62520: LD_INT 14
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: IN
62529: IFFALSE 62541
// uc_nation := nation_arabian else
62531: LD_ADDR_OWVAR 21
62535: PUSH
62536: LD_INT 2
62538: ST_TO_ADDR
62539: GO 62549
// uc_nation := nation_russian ;
62541: LD_ADDR_OWVAR 21
62545: PUSH
62546: LD_INT 3
62548: ST_TO_ADDR
// vc_chassis := chassis ;
62549: LD_ADDR_OWVAR 37
62553: PUSH
62554: LD_VAR 0 1
62558: ST_TO_ADDR
// vc_engine := engine ;
62559: LD_ADDR_OWVAR 39
62563: PUSH
62564: LD_VAR 0 2
62568: ST_TO_ADDR
// vc_control := control ;
62569: LD_ADDR_OWVAR 38
62573: PUSH
62574: LD_VAR 0 3
62578: ST_TO_ADDR
// vc_weapon := weapon ;
62579: LD_ADDR_OWVAR 40
62583: PUSH
62584: LD_VAR 0 4
62588: ST_TO_ADDR
// un := CreateVehicle ;
62589: LD_ADDR_VAR 0 8
62593: PUSH
62594: CALL_OW 45
62598: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62599: LD_VAR 0 8
62603: PPUSH
62604: LD_INT 0
62606: PPUSH
62607: LD_INT 5
62609: PPUSH
62610: CALL_OW 12
62614: PPUSH
62615: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62619: LD_VAR 0 8
62623: PPUSH
62624: LD_VAR 0 5
62628: PPUSH
62629: LD_VAR 0 6
62633: PPUSH
62634: LD_INT 1
62636: PPUSH
62637: CALL_OW 48
// end ;
62641: LD_VAR 0 7
62645: RET
// export hInvincible ; every 1 do
62646: GO 62648
62648: DISABLE
// hInvincible := [ ] ;
62649: LD_ADDR_EXP 77
62653: PUSH
62654: EMPTY
62655: ST_TO_ADDR
62656: END
// every 10 do var i ;
62657: GO 62659
62659: DISABLE
62660: LD_INT 0
62662: PPUSH
// begin enable ;
62663: ENABLE
// if not hInvincible then
62664: LD_EXP 77
62668: NOT
62669: IFFALSE 62673
// exit ;
62671: GO 62717
// for i in hInvincible do
62673: LD_ADDR_VAR 0 1
62677: PUSH
62678: LD_EXP 77
62682: PUSH
62683: FOR_IN
62684: IFFALSE 62715
// if GetLives ( i ) < 1000 then
62686: LD_VAR 0 1
62690: PPUSH
62691: CALL_OW 256
62695: PUSH
62696: LD_INT 1000
62698: LESS
62699: IFFALSE 62713
// SetLives ( i , 1000 ) ;
62701: LD_VAR 0 1
62705: PPUSH
62706: LD_INT 1000
62708: PPUSH
62709: CALL_OW 234
62713: GO 62683
62715: POP
62716: POP
// end ;
62717: PPOPN 1
62719: END
// export function hHackInvincible ; var i ; begin
62720: LD_INT 0
62722: PPUSH
62723: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62724: LD_ADDR_VAR 0 2
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 21
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 21
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: LIST
62756: PPUSH
62757: CALL_OW 69
62761: PUSH
62762: FOR_IN
62763: IFFALSE 62824
// if IsSelected ( i ) then
62765: LD_VAR 0 2
62769: PPUSH
62770: CALL_OW 306
62774: IFFALSE 62822
// begin if i in hInvincible then
62776: LD_VAR 0 2
62780: PUSH
62781: LD_EXP 77
62785: IN
62786: IFFALSE 62806
// hInvincible := hInvincible diff i else
62788: LD_ADDR_EXP 77
62792: PUSH
62793: LD_EXP 77
62797: PUSH
62798: LD_VAR 0 2
62802: DIFF
62803: ST_TO_ADDR
62804: GO 62822
// hInvincible := hInvincible union i ;
62806: LD_ADDR_EXP 77
62810: PUSH
62811: LD_EXP 77
62815: PUSH
62816: LD_VAR 0 2
62820: UNION
62821: ST_TO_ADDR
// end ;
62822: GO 62762
62824: POP
62825: POP
// end ;
62826: LD_VAR 0 1
62830: RET
// export function hHackInvisible ; var i , j ; begin
62831: LD_INT 0
62833: PPUSH
62834: PPUSH
62835: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62836: LD_ADDR_VAR 0 2
62840: PUSH
62841: LD_INT 21
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PPUSH
62851: CALL_OW 69
62855: PUSH
62856: FOR_IN
62857: IFFALSE 62881
// if IsSelected ( i ) then
62859: LD_VAR 0 2
62863: PPUSH
62864: CALL_OW 306
62868: IFFALSE 62879
// ComForceInvisible ( i ) ;
62870: LD_VAR 0 2
62874: PPUSH
62875: CALL_OW 496
62879: GO 62856
62881: POP
62882: POP
// end ;
62883: LD_VAR 0 1
62887: RET
// export function hHackChangeYourSide ; begin
62888: LD_INT 0
62890: PPUSH
// if your_side = 8 then
62891: LD_OWVAR 2
62895: PUSH
62896: LD_INT 8
62898: EQUAL
62899: IFFALSE 62911
// your_side := 0 else
62901: LD_ADDR_OWVAR 2
62905: PUSH
62906: LD_INT 0
62908: ST_TO_ADDR
62909: GO 62925
// your_side := your_side + 1 ;
62911: LD_ADDR_OWVAR 2
62915: PUSH
62916: LD_OWVAR 2
62920: PUSH
62921: LD_INT 1
62923: PLUS
62924: ST_TO_ADDR
// end ;
62925: LD_VAR 0 1
62929: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62930: LD_INT 0
62932: PPUSH
62933: PPUSH
62934: PPUSH
// for i in all_units do
62935: LD_ADDR_VAR 0 2
62939: PUSH
62940: LD_OWVAR 3
62944: PUSH
62945: FOR_IN
62946: IFFALSE 63024
// if IsSelected ( i ) then
62948: LD_VAR 0 2
62952: PPUSH
62953: CALL_OW 306
62957: IFFALSE 63022
// begin j := GetSide ( i ) ;
62959: LD_ADDR_VAR 0 3
62963: PUSH
62964: LD_VAR 0 2
62968: PPUSH
62969: CALL_OW 255
62973: ST_TO_ADDR
// if j = 8 then
62974: LD_VAR 0 3
62978: PUSH
62979: LD_INT 8
62981: EQUAL
62982: IFFALSE 62994
// j := 0 else
62984: LD_ADDR_VAR 0 3
62988: PUSH
62989: LD_INT 0
62991: ST_TO_ADDR
62992: GO 63008
// j := j + 1 ;
62994: LD_ADDR_VAR 0 3
62998: PUSH
62999: LD_VAR 0 3
63003: PUSH
63004: LD_INT 1
63006: PLUS
63007: ST_TO_ADDR
// SetSide ( i , j ) ;
63008: LD_VAR 0 2
63012: PPUSH
63013: LD_VAR 0 3
63017: PPUSH
63018: CALL_OW 235
// end ;
63022: GO 62945
63024: POP
63025: POP
// end ;
63026: LD_VAR 0 1
63030: RET
// export function hHackFog ; begin
63031: LD_INT 0
63033: PPUSH
// FogOff ( true ) ;
63034: LD_INT 1
63036: PPUSH
63037: CALL_OW 344
// end ;
63041: LD_VAR 0 1
63045: RET
// export function hHackTeleport ( unit , x , y ) ; begin
63046: LD_INT 0
63048: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
63049: LD_VAR 0 1
63053: PPUSH
63054: LD_VAR 0 2
63058: PPUSH
63059: LD_VAR 0 3
63063: PPUSH
63064: LD_INT 1
63066: PPUSH
63067: LD_INT 1
63069: PPUSH
63070: CALL_OW 483
// CenterOnXY ( x , y ) ;
63074: LD_VAR 0 2
63078: PPUSH
63079: LD_VAR 0 3
63083: PPUSH
63084: CALL_OW 84
// end ;
63088: LD_VAR 0 4
63092: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63093: LD_INT 0
63095: PPUSH
63096: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63097: LD_VAR 0 1
63101: NOT
63102: PUSH
63103: LD_VAR 0 2
63107: PPUSH
63108: LD_VAR 0 3
63112: PPUSH
63113: CALL_OW 488
63117: NOT
63118: OR
63119: PUSH
63120: LD_VAR 0 1
63124: PPUSH
63125: CALL_OW 266
63129: PUSH
63130: LD_INT 3
63132: NONEQUAL
63133: PUSH
63134: LD_VAR 0 1
63138: PPUSH
63139: CALL_OW 247
63143: PUSH
63144: LD_INT 1
63146: EQUAL
63147: NOT
63148: AND
63149: OR
63150: IFFALSE 63154
// exit ;
63152: GO 63303
// if GetType ( factory ) = unit_human then
63154: LD_VAR 0 1
63158: PPUSH
63159: CALL_OW 247
63163: PUSH
63164: LD_INT 1
63166: EQUAL
63167: IFFALSE 63184
// factory := IsInUnit ( factory ) ;
63169: LD_ADDR_VAR 0 1
63173: PUSH
63174: LD_VAR 0 1
63178: PPUSH
63179: CALL_OW 310
63183: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63184: LD_VAR 0 1
63188: PPUSH
63189: CALL_OW 266
63193: PUSH
63194: LD_INT 3
63196: NONEQUAL
63197: IFFALSE 63201
// exit ;
63199: GO 63303
// if HexInfo ( x , y ) = factory then
63201: LD_VAR 0 2
63205: PPUSH
63206: LD_VAR 0 3
63210: PPUSH
63211: CALL_OW 428
63215: PUSH
63216: LD_VAR 0 1
63220: EQUAL
63221: IFFALSE 63248
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
63223: LD_ADDR_EXP 78
63227: PUSH
63228: LD_EXP 78
63232: PPUSH
63233: LD_VAR 0 1
63237: PPUSH
63238: LD_INT 0
63240: PPUSH
63241: CALL_OW 1
63245: ST_TO_ADDR
63246: GO 63299
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
63248: LD_ADDR_EXP 78
63252: PUSH
63253: LD_EXP 78
63257: PPUSH
63258: LD_VAR 0 1
63262: PPUSH
63263: LD_VAR 0 1
63267: PPUSH
63268: CALL_OW 255
63272: PUSH
63273: LD_VAR 0 1
63277: PUSH
63278: LD_VAR 0 2
63282: PUSH
63283: LD_VAR 0 3
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: PPUSH
63294: CALL_OW 1
63298: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63299: CALL 63308 0 0
// end ;
63303: LD_VAR 0 4
63307: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63308: LD_INT 0
63310: PPUSH
63311: PPUSH
63312: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63313: LD_STRING resetFactoryWaypoint();
63315: PPUSH
63316: CALL_OW 559
// if factoryWaypoints then
63320: LD_EXP 78
63324: IFFALSE 63450
// begin list := PrepareArray ( factoryWaypoints ) ;
63326: LD_ADDR_VAR 0 3
63330: PUSH
63331: LD_EXP 78
63335: PPUSH
63336: CALL 43849 0 1
63340: ST_TO_ADDR
// for i := 1 to list do
63341: LD_ADDR_VAR 0 2
63345: PUSH
63346: DOUBLE
63347: LD_INT 1
63349: DEC
63350: ST_TO_ADDR
63351: LD_VAR 0 3
63355: PUSH
63356: FOR_TO
63357: IFFALSE 63448
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63359: LD_STRING setFactoryWaypointXY(
63361: PUSH
63362: LD_VAR 0 3
63366: PUSH
63367: LD_VAR 0 2
63371: ARRAY
63372: PUSH
63373: LD_INT 1
63375: ARRAY
63376: STR
63377: PUSH
63378: LD_STRING ,
63380: STR
63381: PUSH
63382: LD_VAR 0 3
63386: PUSH
63387: LD_VAR 0 2
63391: ARRAY
63392: PUSH
63393: LD_INT 2
63395: ARRAY
63396: STR
63397: PUSH
63398: LD_STRING ,
63400: STR
63401: PUSH
63402: LD_VAR 0 3
63406: PUSH
63407: LD_VAR 0 2
63411: ARRAY
63412: PUSH
63413: LD_INT 3
63415: ARRAY
63416: STR
63417: PUSH
63418: LD_STRING ,
63420: STR
63421: PUSH
63422: LD_VAR 0 3
63426: PUSH
63427: LD_VAR 0 2
63431: ARRAY
63432: PUSH
63433: LD_INT 4
63435: ARRAY
63436: STR
63437: PUSH
63438: LD_STRING )
63440: STR
63441: PPUSH
63442: CALL_OW 559
63446: GO 63356
63448: POP
63449: POP
// end ; end ;
63450: LD_VAR 0 1
63454: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63455: LD_INT 0
63457: PPUSH
// if HexInfo ( x , y ) = warehouse then
63458: LD_VAR 0 2
63462: PPUSH
63463: LD_VAR 0 3
63467: PPUSH
63468: CALL_OW 428
63472: PUSH
63473: LD_VAR 0 1
63477: EQUAL
63478: IFFALSE 63505
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63480: LD_ADDR_EXP 79
63484: PUSH
63485: LD_EXP 79
63489: PPUSH
63490: LD_VAR 0 1
63494: PPUSH
63495: LD_INT 0
63497: PPUSH
63498: CALL_OW 1
63502: ST_TO_ADDR
63503: GO 63556
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63505: LD_ADDR_EXP 79
63509: PUSH
63510: LD_EXP 79
63514: PPUSH
63515: LD_VAR 0 1
63519: PPUSH
63520: LD_VAR 0 1
63524: PPUSH
63525: CALL_OW 255
63529: PUSH
63530: LD_VAR 0 1
63534: PUSH
63535: LD_VAR 0 2
63539: PUSH
63540: LD_VAR 0 3
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: PPUSH
63551: CALL_OW 1
63555: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63556: CALL 63565 0 0
// end ;
63560: LD_VAR 0 4
63564: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63565: LD_INT 0
63567: PPUSH
63568: PPUSH
63569: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63570: LD_STRING resetWarehouseGatheringPoints();
63572: PPUSH
63573: CALL_OW 559
// if warehouseGatheringPoints then
63577: LD_EXP 79
63581: IFFALSE 63707
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63583: LD_ADDR_VAR 0 3
63587: PUSH
63588: LD_EXP 79
63592: PPUSH
63593: CALL 43849 0 1
63597: ST_TO_ADDR
// for i := 1 to list do
63598: LD_ADDR_VAR 0 2
63602: PUSH
63603: DOUBLE
63604: LD_INT 1
63606: DEC
63607: ST_TO_ADDR
63608: LD_VAR 0 3
63612: PUSH
63613: FOR_TO
63614: IFFALSE 63705
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63616: LD_STRING setWarehouseGatheringPointXY(
63618: PUSH
63619: LD_VAR 0 3
63623: PUSH
63624: LD_VAR 0 2
63628: ARRAY
63629: PUSH
63630: LD_INT 1
63632: ARRAY
63633: STR
63634: PUSH
63635: LD_STRING ,
63637: STR
63638: PUSH
63639: LD_VAR 0 3
63643: PUSH
63644: LD_VAR 0 2
63648: ARRAY
63649: PUSH
63650: LD_INT 2
63652: ARRAY
63653: STR
63654: PUSH
63655: LD_STRING ,
63657: STR
63658: PUSH
63659: LD_VAR 0 3
63663: PUSH
63664: LD_VAR 0 2
63668: ARRAY
63669: PUSH
63670: LD_INT 3
63672: ARRAY
63673: STR
63674: PUSH
63675: LD_STRING ,
63677: STR
63678: PUSH
63679: LD_VAR 0 3
63683: PUSH
63684: LD_VAR 0 2
63688: ARRAY
63689: PUSH
63690: LD_INT 4
63692: ARRAY
63693: STR
63694: PUSH
63695: LD_STRING )
63697: STR
63698: PPUSH
63699: CALL_OW 559
63703: GO 63613
63705: POP
63706: POP
// end ; end ;
63707: LD_VAR 0 1
63711: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63712: LD_EXP 79
63716: IFFALSE 64401
63718: GO 63720
63720: DISABLE
63721: LD_INT 0
63723: PPUSH
63724: PPUSH
63725: PPUSH
63726: PPUSH
63727: PPUSH
63728: PPUSH
63729: PPUSH
63730: PPUSH
63731: PPUSH
// begin enable ;
63732: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63733: LD_ADDR_VAR 0 3
63737: PUSH
63738: LD_EXP 79
63742: PPUSH
63743: CALL 43849 0 1
63747: ST_TO_ADDR
// if not list then
63748: LD_VAR 0 3
63752: NOT
63753: IFFALSE 63757
// exit ;
63755: GO 64401
// for i := 1 to list do
63757: LD_ADDR_VAR 0 1
63761: PUSH
63762: DOUBLE
63763: LD_INT 1
63765: DEC
63766: ST_TO_ADDR
63767: LD_VAR 0 3
63771: PUSH
63772: FOR_TO
63773: IFFALSE 64399
// begin depot := list [ i ] [ 2 ] ;
63775: LD_ADDR_VAR 0 8
63779: PUSH
63780: LD_VAR 0 3
63784: PUSH
63785: LD_VAR 0 1
63789: ARRAY
63790: PUSH
63791: LD_INT 2
63793: ARRAY
63794: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63795: LD_ADDR_VAR 0 5
63799: PUSH
63800: LD_VAR 0 3
63804: PUSH
63805: LD_VAR 0 1
63809: ARRAY
63810: PUSH
63811: LD_INT 1
63813: ARRAY
63814: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63815: LD_VAR 0 8
63819: PPUSH
63820: CALL_OW 301
63824: PUSH
63825: LD_VAR 0 5
63829: PUSH
63830: LD_VAR 0 8
63834: PPUSH
63835: CALL_OW 255
63839: NONEQUAL
63840: OR
63841: IFFALSE 63870
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63843: LD_ADDR_EXP 79
63847: PUSH
63848: LD_EXP 79
63852: PPUSH
63853: LD_VAR 0 8
63857: PPUSH
63858: LD_INT 0
63860: PPUSH
63861: CALL_OW 1
63865: ST_TO_ADDR
// exit ;
63866: POP
63867: POP
63868: GO 64401
// end ; x := list [ i ] [ 3 ] ;
63870: LD_ADDR_VAR 0 6
63874: PUSH
63875: LD_VAR 0 3
63879: PUSH
63880: LD_VAR 0 1
63884: ARRAY
63885: PUSH
63886: LD_INT 3
63888: ARRAY
63889: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63890: LD_ADDR_VAR 0 7
63894: PUSH
63895: LD_VAR 0 3
63899: PUSH
63900: LD_VAR 0 1
63904: ARRAY
63905: PUSH
63906: LD_INT 4
63908: ARRAY
63909: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63910: LD_ADDR_VAR 0 9
63914: PUSH
63915: LD_VAR 0 6
63919: PPUSH
63920: LD_VAR 0 7
63924: PPUSH
63925: LD_INT 16
63927: PPUSH
63928: CALL 42437 0 3
63932: ST_TO_ADDR
// if not cratesNearbyPoint then
63933: LD_VAR 0 9
63937: NOT
63938: IFFALSE 63944
// exit ;
63940: POP
63941: POP
63942: GO 64401
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63944: LD_ADDR_VAR 0 4
63948: PUSH
63949: LD_INT 22
63951: PUSH
63952: LD_VAR 0 5
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 3
63963: PUSH
63964: LD_INT 60
63966: PUSH
63967: EMPTY
63968: LIST
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 91
63976: PUSH
63977: LD_VAR 0 8
63981: PUSH
63982: LD_INT 6
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 2
63992: PUSH
63993: LD_INT 25
63995: PUSH
63996: LD_INT 2
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 25
64005: PUSH
64006: LD_INT 16
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: LIST
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: PPUSH
64024: CALL_OW 69
64028: PUSH
64029: LD_VAR 0 8
64033: PPUSH
64034: CALL_OW 313
64038: PPUSH
64039: LD_INT 3
64041: PUSH
64042: LD_INT 60
64044: PUSH
64045: EMPTY
64046: LIST
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 2
64054: PUSH
64055: LD_INT 25
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 25
64067: PUSH
64068: LD_INT 16
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: LIST
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PPUSH
64084: CALL_OW 72
64088: UNION
64089: ST_TO_ADDR
// if tmp then
64090: LD_VAR 0 4
64094: IFFALSE 64174
// begin tmp := ShrinkArray ( tmp , 3 ) ;
64096: LD_ADDR_VAR 0 4
64100: PUSH
64101: LD_VAR 0 4
64105: PPUSH
64106: LD_INT 3
64108: PPUSH
64109: CALL 40406 0 2
64113: ST_TO_ADDR
// for j in tmp do
64114: LD_ADDR_VAR 0 2
64118: PUSH
64119: LD_VAR 0 4
64123: PUSH
64124: FOR_IN
64125: IFFALSE 64168
// begin if IsInUnit ( j ) then
64127: LD_VAR 0 2
64131: PPUSH
64132: CALL_OW 310
64136: IFFALSE 64147
// ComExit ( j ) ;
64138: LD_VAR 0 2
64142: PPUSH
64143: CALL 40489 0 1
// AddComCollect ( j , x , y ) ;
64147: LD_VAR 0 2
64151: PPUSH
64152: LD_VAR 0 6
64156: PPUSH
64157: LD_VAR 0 7
64161: PPUSH
64162: CALL_OW 177
// end ;
64166: GO 64124
64168: POP
64169: POP
// exit ;
64170: POP
64171: POP
64172: GO 64401
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
64174: LD_ADDR_VAR 0 4
64178: PUSH
64179: LD_INT 22
64181: PUSH
64182: LD_VAR 0 5
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 91
64193: PUSH
64194: LD_VAR 0 8
64198: PUSH
64199: LD_INT 8
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: LD_INT 34
64212: PUSH
64213: LD_INT 12
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 34
64222: PUSH
64223: LD_INT 51
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 34
64232: PUSH
64233: LD_INT 32
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 34
64242: PUSH
64243: LD_INT 89
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: LIST
64261: PPUSH
64262: CALL_OW 69
64266: ST_TO_ADDR
// if tmp then
64267: LD_VAR 0 4
64271: IFFALSE 64397
// begin for j in tmp do
64273: LD_ADDR_VAR 0 2
64277: PUSH
64278: LD_VAR 0 4
64282: PUSH
64283: FOR_IN
64284: IFFALSE 64395
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
64286: LD_VAR 0 2
64290: PPUSH
64291: CALL_OW 262
64295: PUSH
64296: LD_INT 3
64298: EQUAL
64299: PUSH
64300: LD_VAR 0 2
64304: PPUSH
64305: CALL_OW 261
64309: PUSH
64310: LD_INT 20
64312: GREATER
64313: OR
64314: PUSH
64315: LD_VAR 0 2
64319: PPUSH
64320: CALL_OW 314
64324: NOT
64325: AND
64326: PUSH
64327: LD_VAR 0 2
64331: PPUSH
64332: CALL_OW 263
64336: PUSH
64337: LD_INT 1
64339: NONEQUAL
64340: PUSH
64341: LD_VAR 0 2
64345: PPUSH
64346: CALL_OW 311
64350: OR
64351: AND
64352: IFFALSE 64393
// begin ComCollect ( j , x , y ) ;
64354: LD_VAR 0 2
64358: PPUSH
64359: LD_VAR 0 6
64363: PPUSH
64364: LD_VAR 0 7
64368: PPUSH
64369: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
64373: LD_VAR 0 2
64377: PPUSH
64378: LD_VAR 0 8
64382: PPUSH
64383: CALL_OW 172
// exit ;
64387: POP
64388: POP
64389: POP
64390: POP
64391: GO 64401
// end ;
64393: GO 64283
64395: POP
64396: POP
// end ; end ;
64397: GO 63772
64399: POP
64400: POP
// end ; end_of_file end_of_file
64401: PPOPN 9
64403: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64404: LD_VAR 0 1
64408: PUSH
64409: LD_INT 200
64411: DOUBLE
64412: GREATEREQUAL
64413: IFFALSE 64421
64415: LD_INT 299
64417: DOUBLE
64418: LESSEQUAL
64419: IFTRUE 64423
64421: GO 64455
64423: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64424: LD_VAR 0 1
64428: PPUSH
64429: LD_VAR 0 2
64433: PPUSH
64434: LD_VAR 0 3
64438: PPUSH
64439: LD_VAR 0 4
64443: PPUSH
64444: LD_VAR 0 5
64448: PPUSH
64449: CALL 44689 0 5
64453: GO 64532
64455: LD_INT 300
64457: DOUBLE
64458: GREATEREQUAL
64459: IFFALSE 64467
64461: LD_INT 399
64463: DOUBLE
64464: LESSEQUAL
64465: IFTRUE 64469
64467: GO 64531
64469: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64470: LD_VAR 0 1
64474: PPUSH
64475: LD_VAR 0 2
64479: PPUSH
64480: LD_VAR 0 3
64484: PPUSH
64485: LD_VAR 0 4
64489: PPUSH
64490: LD_VAR 0 5
64494: PPUSH
64495: LD_VAR 0 6
64499: PPUSH
64500: LD_VAR 0 7
64504: PPUSH
64505: LD_VAR 0 8
64509: PPUSH
64510: LD_VAR 0 9
64514: PPUSH
64515: LD_VAR 0 10
64519: PPUSH
64520: LD_VAR 0 11
64524: PPUSH
64525: CALL 61105 0 11
64529: GO 64532
64531: POP
// end ;
64532: PPOPN 11
64534: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64535: LD_VAR 0 1
64539: PPUSH
64540: LD_VAR 0 2
64544: PPUSH
64545: LD_VAR 0 3
64549: PPUSH
64550: LD_VAR 0 4
64554: PPUSH
64555: LD_VAR 0 5
64559: PPUSH
64560: CALL 44425 0 5
// end ; end_of_file
64564: PPOPN 5
64566: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64567: LD_VAR 0 1
64571: PPUSH
64572: LD_VAR 0 2
64576: PPUSH
64577: LD_VAR 0 3
64581: PPUSH
64582: LD_VAR 0 4
64586: PPUSH
64587: LD_VAR 0 5
64591: PPUSH
64592: LD_VAR 0 6
64596: PPUSH
64597: CALL 48757 0 6
// end ;
64601: PPOPN 6
64603: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64604: LD_INT 0
64606: PPUSH
// begin if not units then
64607: LD_VAR 0 1
64611: NOT
64612: IFFALSE 64616
// exit ;
64614: GO 64616
// end ;
64616: PPOPN 7
64618: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64619: CALL 48661 0 0
// end ;
64623: PPOPN 1
64625: END
