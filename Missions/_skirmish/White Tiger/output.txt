// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 2753 0 0
// Init ;
   8: CALL 67 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 28
// Difficulty := 2 else
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 2
  25: ST_TO_ADDR
  26: GO 41
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// PrepareAlliance ;
  41: CALL 83 0 0
// PrepareRussian ;
  45: CALL 452 0 0
// Action ;
  49: CALL 2372 0 0
// if debug then
  53: LD_EXP 1
  57: IFFALSE 66
// FogOff ( 7 ) ;
  59: LD_INT 7
  61: PPUSH
  62: CALL_OW 344
// end ;
  66: END
// export debug ; export function Init ; begin
  67: LD_INT 0
  69: PPUSH
// debug := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// end ; end_of_file
  78: LD_VAR 0 1
  82: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  83: LD_INT 0
  85: PPUSH
  86: PPUSH
  87: PPUSH
// tmp := [ ] ;
  88: LD_ADDR_VAR 0 3
  92: PUSH
  93: EMPTY
  94: ST_TO_ADDR
// uc_side := 7 ;
  95: LD_ADDR_OWVAR 20
  99: PUSH
 100: LD_INT 7
 102: ST_TO_ADDR
// uc_nation := 1 ;
 103: LD_ADDR_OWVAR 21
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 111: LD_INT 5
 113: PPUSH
 114: LD_INT 3
 116: PPUSH
 117: LD_INT 3
 119: PPUSH
 120: LD_EXP 11
 124: PPUSH
 125: LD_INT 100
 127: PPUSH
 128: CALL 7721 0 5
// allianceHack := CreateVehicle ;
 132: LD_ADDR_EXP 2
 136: PUSH
 137: CALL_OW 45
 141: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 142: LD_EXP 2
 146: PPUSH
 147: LD_INT 7
 149: PPUSH
 150: LD_INT 0
 152: PPUSH
 153: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 157: LD_INT 5
 159: PPUSH
 160: LD_INT 3
 162: PPUSH
 163: LD_INT 3
 165: PPUSH
 166: LD_INT 10
 168: PPUSH
 169: LD_INT 100
 171: PPUSH
 172: CALL 7721 0 5
// for i := 1 to 2 do
 176: LD_ADDR_VAR 0 2
 180: PUSH
 181: DOUBLE
 182: LD_INT 1
 184: DEC
 185: ST_TO_ADDR
 186: LD_INT 2
 188: PUSH
 189: FOR_TO
 190: IFFALSE 209
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 192: CALL_OW 45
 196: PPUSH
 197: LD_INT 7
 199: PPUSH
 200: LD_INT 0
 202: PPUSH
 203: CALL_OW 49
 207: GO 189
 209: POP
 210: POP
// uc_side := 4 ;
 211: LD_ADDR_OWVAR 20
 215: PUSH
 216: LD_INT 4
 218: ST_TO_ADDR
// uc_nation := 1 ;
 219: LD_ADDR_OWVAR 21
 223: PUSH
 224: LD_INT 1
 226: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 227: LD_INT 1
 229: PPUSH
 230: LD_INT 9
 232: PPUSH
 233: CALL_OW 383
// allianceMechanic := CreateHuman ;
 237: LD_ADDR_EXP 3
 241: PUSH
 242: CALL_OW 44
 246: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 247: LD_EXP 3
 251: PPUSH
 252: LD_INT 96
 254: PPUSH
 255: CALL_OW 52
// end ;
 259: LD_VAR 0 1
 263: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 264: LD_INT 0
 266: PPUSH
 267: PPUSH
 268: PPUSH
// uc_side := 7 ;
 269: LD_ADDR_OWVAR 20
 273: PUSH
 274: LD_INT 7
 276: ST_TO_ADDR
// uc_nation := 1 ;
 277: LD_ADDR_OWVAR 21
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 285: LD_ADDR_VAR 0 2
 289: PUSH
 290: DOUBLE
 291: LD_INT 1
 293: DEC
 294: ST_TO_ADDR
 295: LD_INT 3
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_OWVAR 67
 313: ARRAY
 314: PUSH
 315: FOR_TO
 316: IFFALSE 386
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 318: LD_INT 5
 320: PPUSH
 321: LD_INT 3
 323: PPUSH
 324: LD_INT 3
 326: PPUSH
 327: LD_INT 7
 329: PPUSH
 330: LD_INT 100
 332: PPUSH
 333: CALL 7721 0 5
// un := CreateVehicle ;
 337: LD_ADDR_VAR 0 3
 341: PUSH
 342: CALL_OW 45
 346: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 347: LD_VAR 0 3
 351: PPUSH
 352: LD_INT 7
 354: PPUSH
 355: LD_INT 0
 357: PPUSH
 358: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 67
 369: PPUSH
 370: LD_INT 95
 372: PPUSH
 373: CALL_OW 111
// wait ( 0 0$2 ) ;
 377: LD_INT 70
 379: PPUSH
 380: CALL_OW 67
// end ;
 384: GO 315
 386: POP
 387: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 388: LD_INT 5
 390: PPUSH
 391: LD_INT 3
 393: PPUSH
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 11
 399: PPUSH
 400: LD_INT 100
 402: PPUSH
 403: CALL 7721 0 5
// un := CreateVehicle ;
 407: LD_ADDR_VAR 0 3
 411: PUSH
 412: CALL_OW 45
 416: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 417: LD_VAR 0 3
 421: PPUSH
 422: LD_INT 7
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 432: LD_VAR 0 3
 436: PPUSH
 437: LD_INT 67
 439: PPUSH
 440: LD_INT 95
 442: PPUSH
 443: CALL_OW 111
// end ; end_of_file
 447: LD_VAR 0 1
 451: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
// uc_side := 3 ;
 457: LD_ADDR_OWVAR 20
 461: PUSH
 462: LD_INT 3
 464: ST_TO_ADDR
// uc_nation := 3 ;
 465: LD_ADDR_OWVAR 21
 469: PUSH
 470: LD_INT 3
 472: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 473: LD_INT 14
 475: PPUSH
 476: CALL_OW 274
 480: PPUSH
 481: LD_INT 1
 483: PPUSH
 484: LD_INT 50000
 486: PPUSH
 487: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 491: LD_INT 14
 493: PPUSH
 494: CALL_OW 274
 498: PPUSH
 499: LD_INT 3
 501: PPUSH
 502: LD_INT 5000
 504: PPUSH
 505: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 509: LD_INT 45
 511: PPUSH
 512: LD_INT 132
 514: PPUSH
 515: LD_INT 89
 517: PPUSH
 518: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 522: LD_ADDR_VAR 0 2
 526: PUSH
 527: LD_INT 21
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PPUSH
 537: CALL_OW 69
 541: PUSH
 542: FOR_IN
 543: IFFALSE 576
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 545: LD_VAR 0 2
 549: PPUSH
 550: LD_INT 6
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 10
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_OWVAR 67
 568: ARRAY
 569: PPUSH
 570: CALL_OW 241
 574: GO 542
 576: POP
 577: POP
// for i := 1 to 4 do
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_INT 4
 590: PUSH
 591: FOR_TO
 592: IFFALSE 618
// begin PrepareMechanic ( false , 9 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 9
 599: PPUSH
 600: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 604: CALL_OW 44
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: CALL_OW 52
// end ;
 616: GO 591
 618: POP
 619: POP
// ruGuard1 := [ ] ;
 620: LD_ADDR_EXP 4
 624: PUSH
 625: EMPTY
 626: ST_TO_ADDR
// ruGuard2 := [ ] ;
 627: LD_ADDR_EXP 5
 631: PUSH
 632: EMPTY
 633: ST_TO_ADDR
// ruGuard3 := [ ] ;
 634: LD_ADDR_EXP 6
 638: PUSH
 639: EMPTY
 640: ST_TO_ADDR
// ruForces := [ ] ;
 641: LD_ADDR_EXP 7
 645: PUSH
 646: EMPTY
 647: ST_TO_ADDR
// ruEng := [ ] ;
 648: LD_ADDR_EXP 8
 652: PUSH
 653: EMPTY
 654: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: DOUBLE
 661: LD_INT 1
 663: DEC
 664: ST_TO_ADDR
 665: LD_INT 4
 667: PUSH
 668: LD_INT 5
 670: PUSH
 671: LD_INT 6
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: PUSH
 679: LD_OWVAR 67
 683: ARRAY
 684: PUSH
 685: FOR_TO
 686: IFFALSE 742
// begin PrepareEngineer ( false , 8 ) ;
 688: LD_INT 0
 690: PPUSH
 691: LD_INT 8
 693: PPUSH
 694: CALL_OW 382
// un := CreateHuman ;
 698: LD_ADDR_VAR 0 3
 702: PUSH
 703: CALL_OW 44
 707: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 708: LD_VAR 0 3
 712: PPUSH
 713: LD_INT 14
 715: PPUSH
 716: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 720: LD_ADDR_EXP 8
 724: PUSH
 725: LD_EXP 8
 729: PPUSH
 730: LD_VAR 0 3
 734: PPUSH
 735: CALL 38886 0 2
 739: ST_TO_ADDR
// end ;
 740: GO 685
 742: POP
 743: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 744: LD_ADDR_VAR 0 2
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_INT 5
 756: PUSH
 757: LD_INT 6
 759: PUSH
 760: LD_INT 7
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: PUSH
 768: LD_OWVAR 67
 772: ARRAY
 773: PUSH
 774: FOR_TO
 775: IFFALSE 885
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 777: LD_INT 24
 779: PPUSH
 780: LD_INT 3
 782: PPUSH
 783: LD_INT 3
 785: PPUSH
 786: LD_INT 46
 788: PUSH
 789: LD_INT 45
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: LD_VAR 0 2
 800: PUSH
 801: LD_INT 2
 803: MOD
 804: PUSH
 805: LD_INT 1
 807: PLUS
 808: ARRAY
 809: PPUSH
 810: LD_INT 100
 812: PPUSH
 813: CALL 7721 0 5
// un := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 4
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 854: LD_ADDR_EXP 4
 858: PUSH
 859: LD_EXP 4
 863: PPUSH
 864: LD_EXP 4
 868: PUSH
 869: LD_INT 1
 871: PLUS
 872: PPUSH
 873: LD_VAR 0 3
 877: PPUSH
 878: CALL_OW 1
 882: ST_TO_ADDR
// end ;
 883: GO 774
 885: POP
 886: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 887: LD_ADDR_VAR 0 2
 891: PUSH
 892: DOUBLE
 893: LD_INT 1
 895: DEC
 896: ST_TO_ADDR
 897: LD_INT 4
 899: PUSH
 900: LD_INT 4
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_OWVAR 67
 915: ARRAY
 916: PUSH
 917: FOR_TO
 918: IFFALSE 1028
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 920: LD_INT 24
 922: PPUSH
 923: LD_INT 3
 925: PPUSH
 926: LD_INT 3
 928: PPUSH
 929: LD_INT 46
 931: PUSH
 932: LD_INT 45
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: MOD
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: PPUSH
 953: LD_INT 100
 955: PPUSH
 956: CALL 7721 0 5
// un := CreateVehicle ;
 960: LD_ADDR_VAR 0 3
 964: PUSH
 965: CALL_OW 45
 969: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 970: LD_VAR 0 3
 974: PPUSH
 975: LD_INT 4
 977: PPUSH
 978: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 982: LD_VAR 0 3
 986: PPUSH
 987: LD_INT 5
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 997: LD_ADDR_EXP 5
1001: PUSH
1002: LD_EXP 5
1006: PPUSH
1007: LD_EXP 5
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: PPUSH
1016: LD_VAR 0 3
1020: PPUSH
1021: CALL_OW 1
1025: ST_TO_ADDR
// end ;
1026: GO 917
1028: POP
1029: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1030: LD_ADDR_VAR 0 2
1034: PUSH
1035: DOUBLE
1036: LD_INT 1
1038: DEC
1039: ST_TO_ADDR
1040: LD_INT 4
1042: PUSH
1043: LD_INT 4
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_OWVAR 67
1058: ARRAY
1059: PUSH
1060: FOR_TO
1061: IFFALSE 1171
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1063: LD_INT 24
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: LD_INT 3
1071: PPUSH
1072: LD_INT 46
1074: PUSH
1075: LD_INT 45
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 2
1089: MOD
1090: PUSH
1091: LD_INT 1
1093: PLUS
1094: ARRAY
1095: PPUSH
1096: LD_INT 100
1098: PPUSH
1099: CALL 7721 0 5
// un := CreateVehicle ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: CALL_OW 45
1112: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_INT 6
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1140: LD_ADDR_EXP 6
1144: PUSH
1145: LD_EXP 6
1149: PPUSH
1150: LD_EXP 6
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 1
1168: ST_TO_ADDR
// end ;
1169: GO 1060
1171: POP
1172: POP
// for i := 1 to 2 do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_INT 2
1185: PUSH
1186: FOR_TO
1187: IFFALSE 1235
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1189: LD_INT 22
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: LD_INT 3
1197: PPUSH
1198: LD_INT 52
1200: PPUSH
1201: LD_INT 100
1203: PPUSH
1204: CALL 7721 0 5
// un := CreateVehicle ;
1208: LD_ADDR_VAR 0 3
1212: PUSH
1213: CALL_OW 45
1217: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1218: LD_VAR 0 3
1222: PPUSH
1223: LD_INT 9
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// end ;
1233: GO 1186
1235: POP
1236: POP
// for i := 1 to 3 do
1237: LD_ADDR_VAR 0 2
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_INT 3
1249: PUSH
1250: FOR_TO
1251: IFFALSE 1288
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1253: LD_INT 0
1255: PPUSH
1256: LD_INT 9
1258: PPUSH
1259: LD_INT 8
1261: PPUSH
1262: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1266: CALL_OW 44
1270: PPUSH
1271: LD_INT 91
1273: PPUSH
1274: LD_INT 83
1276: PPUSH
1277: CALL_OW 428
1281: PPUSH
1282: CALL_OW 52
// end ;
1286: GO 1250
1288: POP
1289: POP
// end ;
1290: LD_VAR 0 1
1294: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1295: LD_EXP 8
1299: IFFALSE 1493
1301: GO 1303
1303: DISABLE
1304: LD_INT 0
1306: PPUSH
1307: PPUSH
// begin enable ;
1308: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1309: LD_ADDR_VAR 0 2
1313: PUSH
1314: LD_INT 10
1316: PPUSH
1317: LD_INT 21
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 24
1332: PUSH
1333: LD_INT 1000
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 70
1352: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1353: LD_VAR 0 2
1357: NOT
1358: PUSH
1359: LD_EXP 8
1363: PPUSH
1364: LD_INT 3
1366: PUSH
1367: LD_INT 54
1369: PUSH
1370: EMPTY
1371: LIST
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 72
1381: AND
1382: IFFALSE 1414
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1384: LD_EXP 8
1388: PPUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 54
1394: PUSH
1395: EMPTY
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 72
1406: PPUSH
1407: LD_INT 14
1409: PPUSH
1410: CALL_OW 120
// if tmp then
1414: LD_VAR 0 2
1418: IFFALSE 1493
// begin for i in ruEng do
1420: LD_ADDR_VAR 0 1
1424: PUSH
1425: LD_EXP 8
1429: PUSH
1430: FOR_IN
1431: IFFALSE 1491
// if IsInUnit ( i ) then
1433: LD_VAR 0 1
1437: PPUSH
1438: CALL_OW 310
1442: IFFALSE 1455
// ComExitBuilding ( i ) else
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 122
1453: GO 1489
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1455: LD_VAR 0 1
1459: PPUSH
1460: LD_VAR 0 1
1464: PPUSH
1465: LD_VAR 0 2
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 8278 0 4
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: CALL_OW 130
1489: GO 1430
1491: POP
1492: POP
// end ; end ;
1493: PPOPN 2
1495: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1496: LD_EXP 7
1500: NOT
1501: IFFALSE 1567
1503: GO 1505
1505: DISABLE
1506: LD_INT 0
1508: PPUSH
1509: PPUSH
// begin enable ;
1510: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1511: LD_ADDR_VAR 0 1
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_INT 4
1523: PUSH
1524: LD_INT 5
1526: PUSH
1527: LD_INT 6
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_OWVAR 67
1539: ARRAY
1540: PUSH
1541: FOR_TO
1542: IFFALSE 1565
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1544: LD_INT 50
1546: PPUSH
1547: LD_INT 24
1549: PPUSH
1550: LD_INT 3
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_INT 46
1558: PPUSH
1559: CALL_OW 185
1563: GO 1541
1565: POP
1566: POP
// end ;
1567: PPOPN 2
1569: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1570: LD_EXP 7
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: LD_INT 5
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_OWVAR 67
1593: ARRAY
1594: GREATEREQUAL
1595: IFFALSE 1748
1597: GO 1599
1599: DISABLE
1600: LD_INT 0
1602: PPUSH
1603: PPUSH
// begin enable ;
1604: ENABLE
// tmp := ruForces ;
1605: LD_ADDR_VAR 0 2
1609: PUSH
1610: LD_EXP 7
1614: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1615: LD_INT 0
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: CALL_OW 12
1625: IFFALSE 1646
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_INT 45
1634: PPUSH
1635: CALL_OW 120
// wait ( 0 0$20 ) ;
1639: LD_INT 700
1641: PPUSH
1642: CALL_OW 67
// end ; ruForces := [ ] ;
1646: LD_ADDR_EXP 7
1650: PUSH
1651: EMPTY
1652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1653: LD_INT 35
1655: PPUSH
1656: CALL_OW 67
// for i in tmp do
1660: LD_ADDR_VAR 0 1
1664: PUSH
1665: LD_VAR 0 2
1669: PUSH
1670: FOR_IN
1671: IFFALSE 1739
// if not IsOk ( i ) then
1673: LD_VAR 0 1
1677: PPUSH
1678: CALL_OW 302
1682: NOT
1683: IFFALSE 1703
// tmp := tmp diff i else
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_VAR 0 1
1699: DIFF
1700: ST_TO_ADDR
1701: GO 1737
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1703: LD_VAR 0 1
1707: PPUSH
1708: LD_INT 81
1710: PUSH
1711: LD_INT 3
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PPUSH
1718: CALL_OW 69
1722: PPUSH
1723: LD_VAR 0 1
1727: PPUSH
1728: CALL_OW 74
1732: PPUSH
1733: CALL_OW 115
1737: GO 1670
1739: POP
1740: POP
// until not tmp ;
1741: LD_VAR 0 2
1745: NOT
1746: IFFALSE 1653
// end ;
1748: PPOPN 2
1750: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1751: LD_INT 22
1753: PUSH
1754: LD_INT 7
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 92
1763: PUSH
1764: LD_INT 62
1766: PUSH
1767: LD_INT 83
1769: PUSH
1770: LD_INT 8
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PPUSH
1783: CALL_OW 69
1787: IFFALSE 1807
1789: GO 1791
1791: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1792: LD_EXP 4
1796: PPUSH
1797: LD_INT 69
1799: PPUSH
1800: LD_INT 100
1802: PPUSH
1803: CALL_OW 114
1807: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1808: LD_INT 22
1810: PUSH
1811: LD_INT 7
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 92
1820: PUSH
1821: LD_INT 85
1823: PUSH
1824: LD_INT 89
1826: PUSH
1827: LD_INT 8
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PPUSH
1840: CALL_OW 69
1844: IFFALSE 1864
1846: GO 1848
1848: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1849: LD_EXP 5
1853: PPUSH
1854: LD_INT 72
1856: PPUSH
1857: LD_INT 88
1859: PPUSH
1860: CALL_OW 114
1864: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 92
1877: PUSH
1878: LD_INT 89
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 8
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 69
1901: IFFALSE 1921
1903: GO 1905
1905: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1906: LD_EXP 6
1910: PPUSH
1911: LD_INT 107
1913: PPUSH
1914: LD_INT 26
1916: PPUSH
1917: CALL_OW 114
1921: END
// every 6 6$00 do var i , un , tmp ;
1922: GO 1924
1924: DISABLE
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
// begin enable ;
1930: ENABLE
// tmp := [ ] ;
1931: LD_ADDR_VAR 0 3
1935: PUSH
1936: EMPTY
1937: ST_TO_ADDR
// for i := 1 to 8 do
1938: LD_ADDR_VAR 0 1
1942: PUSH
1943: DOUBLE
1944: LD_INT 1
1946: DEC
1947: ST_TO_ADDR
1948: LD_INT 8
1950: PUSH
1951: FOR_TO
1952: IFFALSE 2095
// begin uc_side := 1 ;
1954: LD_ADDR_OWVAR 20
1958: PUSH
1959: LD_INT 1
1961: ST_TO_ADDR
// uc_nation := 1 ;
1962: LD_ADDR_OWVAR 21
1966: PUSH
1967: LD_INT 1
1969: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1970: LD_INT 5
1972: PPUSH
1973: LD_INT 3
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_INT 6
1981: PUSH
1982: LD_INT 9
1984: PUSH
1985: LD_INT 7
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 1
1997: PUSH
1998: LD_INT 3
2000: MOD
2001: PUSH
2002: LD_INT 1
2004: PLUS
2005: ARRAY
2006: PPUSH
2007: LD_INT 100
2009: PPUSH
2010: CALL 7721 0 5
// un := CreateVehicle ;
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: LD_VAR 0 3
2033: PPUSH
2034: LD_VAR 0 2
2038: PPUSH
2039: CALL 38886 0 2
2043: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 11
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2071: LD_VAR 0 2
2075: PPUSH
2076: LD_INT 16
2078: PPUSH
2079: LD_INT 13
2081: PPUSH
2082: CALL_OW 111
// wait ( 0 0$1 ) ;
2086: LD_INT 35
2088: PPUSH
2089: CALL_OW 67
// end ;
2093: GO 1951
2095: POP
2096: POP
// repeat wait ( 0 0$1 ) ;
2097: LD_INT 35
2099: PPUSH
2100: CALL_OW 67
// for i in tmp do
2104: LD_ADDR_VAR 0 1
2108: PUSH
2109: LD_VAR 0 3
2113: PUSH
2114: FOR_IN
2115: IFFALSE 2183
// if not IsOk ( i ) then
2117: LD_VAR 0 1
2121: PPUSH
2122: CALL_OW 302
2126: NOT
2127: IFFALSE 2147
// tmp := tmp diff i else
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: LD_VAR 0 3
2138: PUSH
2139: LD_VAR 0 1
2143: DIFF
2144: ST_TO_ADDR
2145: GO 2181
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2147: LD_VAR 0 1
2151: PPUSH
2152: LD_INT 81
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PPUSH
2162: CALL_OW 69
2166: PPUSH
2167: LD_VAR 0 1
2171: PPUSH
2172: CALL_OW 74
2176: PPUSH
2177: CALL_OW 115
2181: GO 2114
2183: POP
2184: POP
// until not tmp ;
2185: LD_VAR 0 3
2189: NOT
2190: IFFALSE 2097
// end ;
2192: PPOPN 3
2194: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2195: LD_INT 149
2197: PPUSH
2198: LD_INT 106
2200: PPUSH
2201: CALL_OW 428
2205: NOT
2206: IFFALSE 2369
2208: GO 2210
2210: DISABLE
2211: LD_INT 0
2213: PPUSH
// begin enable ;
2214: ENABLE
// uc_side := 1 ;
2215: LD_ADDR_OWVAR 20
2219: PUSH
2220: LD_INT 1
2222: ST_TO_ADDR
// uc_nation := 1 ;
2223: LD_ADDR_OWVAR 21
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2231: LD_INT 5
2233: PPUSH
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 12
2242: PPUSH
2243: LD_INT 100
2245: PPUSH
2246: CALL 7721 0 5
// un := CreateVehicle ;
2250: LD_ADDR_VAR 0 1
2254: PUSH
2255: CALL_OW 45
2259: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2260: LD_VAR 0 1
2264: PPUSH
2265: LD_INT 149
2267: PPUSH
2268: LD_INT 106
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2278: LD_VAR 0 1
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: LD_INT 100
2288: PPUSH
2289: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2293: LD_VAR 0 1
2297: PPUSH
2298: LD_INT 105
2300: PPUSH
2301: LD_INT 2
2303: PPUSH
2304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2308: LD_INT 35
2310: PPUSH
2311: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2315: LD_VAR 0 1
2319: PPUSH
2320: CALL_OW 301
2324: PUSH
2325: LD_VAR 0 1
2329: PPUSH
2330: CALL_OW 255
2334: PUSH
2335: LD_INT 1
2337: NONEQUAL
2338: OR
2339: IFFALSE 2343
// exit ;
2341: GO 2369
// until IsAt ( un , 105 , 2 ) ;
2343: LD_VAR 0 1
2347: PPUSH
2348: LD_INT 105
2350: PPUSH
2351: LD_INT 2
2353: PPUSH
2354: CALL_OW 307
2358: IFFALSE 2308
// RemoveUnit ( un ) ;
2360: LD_VAR 0 1
2364: PPUSH
2365: CALL_OW 64
// end ; end_of_file
2369: PPOPN 1
2371: END
// export function Action ; begin
2372: LD_INT 0
2374: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2375: LD_EXP 2
2379: PPUSH
2380: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2384: LD_STRING WT-Objectives-1
2386: PPUSH
2387: CALL_OW 337
// end ;
2391: LD_VAR 0 1
2395: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2396: LD_INT 7
2398: PPUSH
2399: LD_EXP 3
2403: PPUSH
2404: CALL_OW 292
2408: IFFALSE 2425
2410: GO 2412
2412: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2413: LD_EXP 3
2417: PPUSH
2418: LD_INT 7
2420: PPUSH
2421: CALL_OW 235
2425: END
// every 2 2$00 do
2426: GO 2428
2428: DISABLE
// PrepareReinforcements ( ) ;
2429: CALL 264 0 0
2433: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 469
2441: NOT
2442: IFFALSE 2457
2444: GO 2446
2446: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2447: LD_INT 8
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL_OW 424
2457: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2458: LD_INT 8
2460: PPUSH
2461: LD_INT 2
2463: PUSH
2464: LD_INT 34
2466: PUSH
2467: LD_INT 12
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 34
2476: PUSH
2477: LD_INT 51
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 70
2493: PUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 469
2501: NOT
2502: AND
2503: IFFALSE 2633
2505: GO 2507
2507: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2508: LD_STRING WT-med-1
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2518: LD_STRING WT-med-2
2520: PPUSH
2521: LD_INT 1
2523: NEG
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_EXP 3
2536: PPUSH
2537: CALL_OW 302
2541: PUSH
2542: LD_EXP 3
2546: PPUSH
2547: CALL_OW 255
2551: MUL
2552: PUSH
2553: LD_INT 7
2555: EQUAL
2556: PUSH
2557: LD_INT 1
2559: PLUS
2560: ARRAY
2561: PPUSH
2562: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2566: LD_STRING WT-med-3
2568: PPUSH
2569: LD_INT 1
2571: NEG
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 7
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 34
2592: PUSH
2593: LD_INT 10
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 69
2608: PUSH
2609: LD_INT 2
2611: GREATEREQUAL
2612: PUSH
2613: LD_INT 1
2615: PLUS
2616: ARRAY
2617: PPUSH
2618: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2622: LD_STRING WT-Main
2624: PPUSH
2625: CALL_OW 102
// YouWin ;
2629: CALL_OW 103
// end ; end_of_file
2633: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2634: LD_VAR 0 1
2638: PUSH
2639: LD_EXP 7
2643: IN
2644: IFFALSE 2662
// ruForces := ruForces diff un ;
2646: LD_ADDR_EXP 7
2650: PUSH
2651: LD_EXP 7
2655: PUSH
2656: LD_VAR 0 1
2660: DIFF
2661: ST_TO_ADDR
// end ;
2662: PPOPN 1
2664: END
// on UnitDestroyed ( un ) do begin if un = allianceHack then
2665: LD_VAR 0 1
2669: PUSH
2670: LD_EXP 2
2674: EQUAL
2675: IFFALSE 2684
// YouLost ( WT-HackLost ) ;
2677: LD_STRING WT-HackLost
2679: PPUSH
2680: CALL_OW 104
// if un in ruForces then
2684: LD_VAR 0 1
2688: PUSH
2689: LD_EXP 7
2693: IN
2694: IFFALSE 2712
// ruForces := ruForces diff un ;
2696: LD_ADDR_EXP 7
2700: PUSH
2701: LD_EXP 7
2705: PUSH
2706: LD_VAR 0 1
2710: DIFF
2711: ST_TO_ADDR
// end ;
2712: PPOPN 1
2714: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 3 then
2715: LD_VAR 0 1
2719: PPUSH
2720: CALL_OW 255
2724: PUSH
2725: LD_INT 3
2727: EQUAL
2728: IFFALSE 2750
// ruForces := Join ( ruForces , vehicle ) ;
2730: LD_ADDR_EXP 7
2734: PUSH
2735: LD_EXP 7
2739: PPUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL 38886 0 2
2749: ST_TO_ADDR
// end ; end_of_file
2750: PPOPN 2
2752: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
2753: LD_INT 0
2755: PPUSH
// ar_miner := 81 ;
2756: LD_ADDR_EXP 16
2760: PUSH
2761: LD_INT 81
2763: ST_TO_ADDR
// ar_crane := 88 ;
2764: LD_ADDR_EXP 15
2768: PUSH
2769: LD_INT 88
2771: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
2772: LD_ADDR_EXP 10
2776: PUSH
2777: LD_INT 89
2779: ST_TO_ADDR
// us_hack := 99 ;
2780: LD_ADDR_EXP 11
2784: PUSH
2785: LD_INT 99
2787: ST_TO_ADDR
// us_artillery := 97 ;
2788: LD_ADDR_EXP 12
2792: PUSH
2793: LD_INT 97
2795: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2796: LD_ADDR_EXP 13
2800: PUSH
2801: LD_INT 91
2803: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
2804: LD_ADDR_EXP 14
2808: PUSH
2809: LD_INT 92
2811: ST_TO_ADDR
// ru_radar := 98 ;
2812: LD_ADDR_EXP 9
2816: PUSH
2817: LD_INT 98
2819: ST_TO_ADDR
// tech_Artillery := 80 ;
2820: LD_ADDR_EXP 17
2824: PUSH
2825: LD_INT 80
2827: ST_TO_ADDR
// tech_RadMat := 81 ;
2828: LD_ADDR_EXP 18
2832: PUSH
2833: LD_INT 81
2835: ST_TO_ADDR
// tech_BasicTools := 82 ;
2836: LD_ADDR_EXP 19
2840: PUSH
2841: LD_INT 82
2843: ST_TO_ADDR
// tech_Cargo := 83 ;
2844: LD_ADDR_EXP 20
2848: PUSH
2849: LD_INT 83
2851: ST_TO_ADDR
// tech_Track := 84 ;
2852: LD_ADDR_EXP 21
2856: PUSH
2857: LD_INT 84
2859: ST_TO_ADDR
// tech_Crane := 85 ;
2860: LD_ADDR_EXP 22
2864: PUSH
2865: LD_INT 85
2867: ST_TO_ADDR
// tech_Bulldozer := 86 ;
2868: LD_ADDR_EXP 23
2872: PUSH
2873: LD_INT 86
2875: ST_TO_ADDR
// tech_Hovercraft := 87 ;
2876: LD_ADDR_EXP 24
2880: PUSH
2881: LD_INT 87
2883: ST_TO_ADDR
// end ;
2884: LD_VAR 0 1
2888: RET
// every 1 do
2889: GO 2891
2891: DISABLE
// InitGlobalVariables ; end_of_file
2892: CALL 2753 0 0
2896: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// if exist_mode then
2901: LD_VAR 0 2
2905: IFFALSE 2930
// unit := CreateCharacter ( prefix & ident ) else
2907: LD_ADDR_VAR 0 5
2911: PUSH
2912: LD_VAR 0 3
2916: PUSH
2917: LD_VAR 0 1
2921: STR
2922: PPUSH
2923: CALL_OW 34
2927: ST_TO_ADDR
2928: GO 2945
// unit := NewCharacter ( ident ) ;
2930: LD_ADDR_VAR 0 5
2934: PUSH
2935: LD_VAR 0 1
2939: PPUSH
2940: CALL_OW 25
2944: ST_TO_ADDR
// result := unit ;
2945: LD_ADDR_VAR 0 4
2949: PUSH
2950: LD_VAR 0 5
2954: ST_TO_ADDR
// end ;
2955: LD_VAR 0 4
2959: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2960: LD_INT 0
2962: PPUSH
2963: PPUSH
// if not side or not nation then
2964: LD_VAR 0 1
2968: NOT
2969: PUSH
2970: LD_VAR 0 2
2974: NOT
2975: OR
2976: IFFALSE 2980
// exit ;
2978: GO 3744
// case nation of nation_american :
2980: LD_VAR 0 2
2984: PUSH
2985: LD_INT 1
2987: DOUBLE
2988: EQUAL
2989: IFTRUE 2993
2991: GO 3207
2993: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2994: LD_ADDR_VAR 0 4
2998: PUSH
2999: LD_INT 35
3001: PUSH
3002: LD_INT 45
3004: PUSH
3005: LD_INT 46
3007: PUSH
3008: LD_INT 47
3010: PUSH
3011: LD_INT 82
3013: PUSH
3014: LD_INT 83
3016: PUSH
3017: LD_INT 84
3019: PUSH
3020: LD_INT 85
3022: PUSH
3023: LD_INT 86
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: LD_INT 2
3031: PUSH
3032: LD_INT 6
3034: PUSH
3035: LD_INT 15
3037: PUSH
3038: LD_INT 16
3040: PUSH
3041: LD_INT 7
3043: PUSH
3044: LD_INT 12
3046: PUSH
3047: LD_INT 13
3049: PUSH
3050: LD_INT 10
3052: PUSH
3053: LD_INT 14
3055: PUSH
3056: LD_INT 20
3058: PUSH
3059: LD_INT 21
3061: PUSH
3062: LD_INT 22
3064: PUSH
3065: LD_INT 25
3067: PUSH
3068: LD_INT 32
3070: PUSH
3071: LD_INT 27
3073: PUSH
3074: LD_INT 36
3076: PUSH
3077: LD_INT 69
3079: PUSH
3080: LD_INT 39
3082: PUSH
3083: LD_INT 34
3085: PUSH
3086: LD_INT 40
3088: PUSH
3089: LD_INT 48
3091: PUSH
3092: LD_INT 49
3094: PUSH
3095: LD_INT 50
3097: PUSH
3098: LD_INT 51
3100: PUSH
3101: LD_INT 52
3103: PUSH
3104: LD_INT 53
3106: PUSH
3107: LD_INT 54
3109: PUSH
3110: LD_INT 55
3112: PUSH
3113: LD_INT 56
3115: PUSH
3116: LD_INT 57
3118: PUSH
3119: LD_INT 58
3121: PUSH
3122: LD_INT 59
3124: PUSH
3125: LD_INT 60
3127: PUSH
3128: LD_INT 61
3130: PUSH
3131: LD_INT 62
3133: PUSH
3134: LD_INT 80
3136: PUSH
3137: LD_INT 82
3139: PUSH
3140: LD_INT 83
3142: PUSH
3143: LD_INT 84
3145: PUSH
3146: LD_INT 85
3148: PUSH
3149: LD_INT 86
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: ST_TO_ADDR
3205: GO 3668
3207: LD_INT 2
3209: DOUBLE
3210: EQUAL
3211: IFTRUE 3215
3213: GO 3437
3215: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
3216: LD_ADDR_VAR 0 4
3220: PUSH
3221: LD_INT 35
3223: PUSH
3224: LD_INT 45
3226: PUSH
3227: LD_INT 46
3229: PUSH
3230: LD_INT 47
3232: PUSH
3233: LD_INT 82
3235: PUSH
3236: LD_INT 83
3238: PUSH
3239: LD_INT 84
3241: PUSH
3242: LD_INT 85
3244: PUSH
3245: LD_INT 87
3247: PUSH
3248: LD_INT 70
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: LD_INT 11
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: LD_INT 4
3262: PUSH
3263: LD_INT 5
3265: PUSH
3266: LD_INT 6
3268: PUSH
3269: LD_INT 15
3271: PUSH
3272: LD_INT 18
3274: PUSH
3275: LD_INT 7
3277: PUSH
3278: LD_INT 17
3280: PUSH
3281: LD_INT 8
3283: PUSH
3284: LD_INT 20
3286: PUSH
3287: LD_INT 21
3289: PUSH
3290: LD_INT 22
3292: PUSH
3293: LD_INT 72
3295: PUSH
3296: LD_INT 26
3298: PUSH
3299: LD_INT 69
3301: PUSH
3302: LD_INT 39
3304: PUSH
3305: LD_INT 40
3307: PUSH
3308: LD_INT 41
3310: PUSH
3311: LD_INT 42
3313: PUSH
3314: LD_INT 43
3316: PUSH
3317: LD_INT 48
3319: PUSH
3320: LD_INT 49
3322: PUSH
3323: LD_INT 50
3325: PUSH
3326: LD_INT 51
3328: PUSH
3329: LD_INT 52
3331: PUSH
3332: LD_INT 53
3334: PUSH
3335: LD_INT 54
3337: PUSH
3338: LD_INT 55
3340: PUSH
3341: LD_INT 56
3343: PUSH
3344: LD_INT 60
3346: PUSH
3347: LD_INT 61
3349: PUSH
3350: LD_INT 62
3352: PUSH
3353: LD_INT 66
3355: PUSH
3356: LD_INT 67
3358: PUSH
3359: LD_INT 68
3361: PUSH
3362: LD_INT 81
3364: PUSH
3365: LD_INT 82
3367: PUSH
3368: LD_INT 83
3370: PUSH
3371: LD_INT 84
3373: PUSH
3374: LD_INT 85
3376: PUSH
3377: LD_INT 87
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: ST_TO_ADDR
3435: GO 3668
3437: LD_INT 3
3439: DOUBLE
3440: EQUAL
3441: IFTRUE 3445
3443: GO 3667
3445: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3446: LD_ADDR_VAR 0 4
3450: PUSH
3451: LD_INT 46
3453: PUSH
3454: LD_INT 47
3456: PUSH
3457: LD_INT 1
3459: PUSH
3460: LD_INT 2
3462: PUSH
3463: LD_INT 82
3465: PUSH
3466: LD_INT 83
3468: PUSH
3469: LD_INT 84
3471: PUSH
3472: LD_INT 85
3474: PUSH
3475: LD_INT 86
3477: PUSH
3478: LD_INT 11
3480: PUSH
3481: LD_INT 9
3483: PUSH
3484: LD_INT 20
3486: PUSH
3487: LD_INT 19
3489: PUSH
3490: LD_INT 21
3492: PUSH
3493: LD_INT 24
3495: PUSH
3496: LD_INT 22
3498: PUSH
3499: LD_INT 25
3501: PUSH
3502: LD_INT 28
3504: PUSH
3505: LD_INT 29
3507: PUSH
3508: LD_INT 30
3510: PUSH
3511: LD_INT 31
3513: PUSH
3514: LD_INT 37
3516: PUSH
3517: LD_INT 38
3519: PUSH
3520: LD_INT 32
3522: PUSH
3523: LD_INT 27
3525: PUSH
3526: LD_INT 33
3528: PUSH
3529: LD_INT 69
3531: PUSH
3532: LD_INT 39
3534: PUSH
3535: LD_INT 34
3537: PUSH
3538: LD_INT 40
3540: PUSH
3541: LD_INT 71
3543: PUSH
3544: LD_INT 23
3546: PUSH
3547: LD_INT 44
3549: PUSH
3550: LD_INT 48
3552: PUSH
3553: LD_INT 49
3555: PUSH
3556: LD_INT 50
3558: PUSH
3559: LD_INT 51
3561: PUSH
3562: LD_INT 52
3564: PUSH
3565: LD_INT 53
3567: PUSH
3568: LD_INT 54
3570: PUSH
3571: LD_INT 55
3573: PUSH
3574: LD_INT 56
3576: PUSH
3577: LD_INT 57
3579: PUSH
3580: LD_INT 58
3582: PUSH
3583: LD_INT 59
3585: PUSH
3586: LD_INT 63
3588: PUSH
3589: LD_INT 64
3591: PUSH
3592: LD_INT 65
3594: PUSH
3595: LD_INT 82
3597: PUSH
3598: LD_INT 83
3600: PUSH
3601: LD_INT 84
3603: PUSH
3604: LD_INT 85
3606: PUSH
3607: LD_INT 86
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: ST_TO_ADDR
3665: GO 3668
3667: POP
// if state > - 1 and state < 3 then
3668: LD_VAR 0 3
3672: PUSH
3673: LD_INT 1
3675: NEG
3676: GREATER
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_INT 3
3685: LESS
3686: AND
3687: IFFALSE 3744
// for i in result do
3689: LD_ADDR_VAR 0 5
3693: PUSH
3694: LD_VAR 0 4
3698: PUSH
3699: FOR_IN
3700: IFFALSE 3742
// if GetTech ( i , side ) <> state then
3702: LD_VAR 0 5
3706: PPUSH
3707: LD_VAR 0 1
3711: PPUSH
3712: CALL_OW 321
3716: PUSH
3717: LD_VAR 0 3
3721: NONEQUAL
3722: IFFALSE 3740
// result := result diff i ;
3724: LD_ADDR_VAR 0 4
3728: PUSH
3729: LD_VAR 0 4
3733: PUSH
3734: LD_VAR 0 5
3738: DIFF
3739: ST_TO_ADDR
3740: GO 3699
3742: POP
3743: POP
// end ;
3744: LD_VAR 0 4
3748: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3749: LD_INT 0
3751: PPUSH
3752: PPUSH
3753: PPUSH
// result := true ;
3754: LD_ADDR_VAR 0 3
3758: PUSH
3759: LD_INT 1
3761: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3762: LD_ADDR_VAR 0 5
3766: PUSH
3767: LD_VAR 0 2
3771: PPUSH
3772: CALL_OW 480
3776: ST_TO_ADDR
// if not tmp then
3777: LD_VAR 0 5
3781: NOT
3782: IFFALSE 3786
// exit ;
3784: GO 3835
// for i in tmp do
3786: LD_ADDR_VAR 0 4
3790: PUSH
3791: LD_VAR 0 5
3795: PUSH
3796: FOR_IN
3797: IFFALSE 3833
// if GetTech ( i , side ) <> state_researched then
3799: LD_VAR 0 4
3803: PPUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 321
3813: PUSH
3814: LD_INT 2
3816: NONEQUAL
3817: IFFALSE 3831
// begin result := false ;
3819: LD_ADDR_VAR 0 3
3823: PUSH
3824: LD_INT 0
3826: ST_TO_ADDR
// exit ;
3827: POP
3828: POP
3829: GO 3835
// end ;
3831: GO 3796
3833: POP
3834: POP
// end ;
3835: LD_VAR 0 3
3839: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3840: LD_INT 0
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3855: LD_VAR 0 1
3859: NOT
3860: PUSH
3861: LD_VAR 0 1
3865: PPUSH
3866: CALL_OW 257
3870: PUSH
3871: LD_INT 9
3873: NONEQUAL
3874: OR
3875: IFFALSE 3879
// exit ;
3877: GO 4452
// side := GetSide ( unit ) ;
3879: LD_ADDR_VAR 0 9
3883: PUSH
3884: LD_VAR 0 1
3888: PPUSH
3889: CALL_OW 255
3893: ST_TO_ADDR
// tech_space := tech_spacanom ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_INT 29
3901: ST_TO_ADDR
// tech_time := tech_taurad ;
3902: LD_ADDR_VAR 0 13
3906: PUSH
3907: LD_INT 28
3909: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3910: LD_ADDR_VAR 0 11
3914: PUSH
3915: LD_VAR 0 1
3919: PPUSH
3920: CALL_OW 310
3924: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3925: LD_VAR 0 11
3929: PPUSH
3930: CALL_OW 247
3934: PUSH
3935: LD_INT 2
3937: EQUAL
3938: IFFALSE 3942
// exit ;
3940: GO 4452
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3942: LD_ADDR_VAR 0 8
3946: PUSH
3947: LD_INT 81
3949: PUSH
3950: LD_VAR 0 9
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: LD_INT 21
3964: PUSH
3965: LD_INT 3
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PPUSH
3980: CALL_OW 69
3984: ST_TO_ADDR
// if not tmp then
3985: LD_VAR 0 8
3989: NOT
3990: IFFALSE 3994
// exit ;
3992: GO 4452
// if in_unit then
3994: LD_VAR 0 11
3998: IFFALSE 4022
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4000: LD_ADDR_VAR 0 10
4004: PUSH
4005: LD_VAR 0 8
4009: PPUSH
4010: LD_VAR 0 11
4014: PPUSH
4015: CALL_OW 74
4019: ST_TO_ADDR
4020: GO 4042
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4022: LD_ADDR_VAR 0 10
4026: PUSH
4027: LD_VAR 0 8
4031: PPUSH
4032: LD_VAR 0 1
4036: PPUSH
4037: CALL_OW 74
4041: ST_TO_ADDR
// if not enemy then
4042: LD_VAR 0 10
4046: NOT
4047: IFFALSE 4051
// exit ;
4049: GO 4452
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4051: LD_VAR 0 11
4055: PUSH
4056: LD_VAR 0 11
4060: PPUSH
4061: LD_VAR 0 10
4065: PPUSH
4066: CALL_OW 296
4070: PUSH
4071: LD_INT 13
4073: GREATER
4074: AND
4075: PUSH
4076: LD_VAR 0 1
4080: PPUSH
4081: LD_VAR 0 10
4085: PPUSH
4086: CALL_OW 296
4090: PUSH
4091: LD_INT 12
4093: GREATER
4094: OR
4095: IFFALSE 4099
// exit ;
4097: GO 4452
// missile := [ 1 ] ;
4099: LD_ADDR_VAR 0 14
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: EMPTY
4108: LIST
4109: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4110: LD_VAR 0 9
4114: PPUSH
4115: LD_VAR 0 12
4119: PPUSH
4120: CALL_OW 325
4124: IFFALSE 4153
// missile := Insert ( missile , missile + 1 , 2 ) ;
4126: LD_ADDR_VAR 0 14
4130: PUSH
4131: LD_VAR 0 14
4135: PPUSH
4136: LD_VAR 0 14
4140: PUSH
4141: LD_INT 1
4143: PLUS
4144: PPUSH
4145: LD_INT 2
4147: PPUSH
4148: CALL_OW 2
4152: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4153: LD_VAR 0 9
4157: PPUSH
4158: LD_VAR 0 13
4162: PPUSH
4163: CALL_OW 325
4167: PUSH
4168: LD_VAR 0 10
4172: PPUSH
4173: CALL_OW 255
4177: PPUSH
4178: LD_VAR 0 13
4182: PPUSH
4183: CALL_OW 325
4187: NOT
4188: AND
4189: IFFALSE 4218
// missile := Insert ( missile , missile + 1 , 3 ) ;
4191: LD_ADDR_VAR 0 14
4195: PUSH
4196: LD_VAR 0 14
4200: PPUSH
4201: LD_VAR 0 14
4205: PUSH
4206: LD_INT 1
4208: PLUS
4209: PPUSH
4210: LD_INT 3
4212: PPUSH
4213: CALL_OW 2
4217: ST_TO_ADDR
// if missile < 2 then
4218: LD_VAR 0 14
4222: PUSH
4223: LD_INT 2
4225: LESS
4226: IFFALSE 4230
// exit ;
4228: GO 4452
// x := GetX ( enemy ) ;
4230: LD_ADDR_VAR 0 4
4234: PUSH
4235: LD_VAR 0 10
4239: PPUSH
4240: CALL_OW 250
4244: ST_TO_ADDR
// y := GetY ( enemy ) ;
4245: LD_ADDR_VAR 0 5
4249: PUSH
4250: LD_VAR 0 10
4254: PPUSH
4255: CALL_OW 251
4259: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4260: LD_ADDR_VAR 0 6
4264: PUSH
4265: LD_VAR 0 4
4269: PUSH
4270: LD_INT 1
4272: NEG
4273: PPUSH
4274: LD_INT 1
4276: PPUSH
4277: CALL_OW 12
4281: PLUS
4282: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4283: LD_ADDR_VAR 0 7
4287: PUSH
4288: LD_VAR 0 5
4292: PUSH
4293: LD_INT 1
4295: NEG
4296: PPUSH
4297: LD_INT 1
4299: PPUSH
4300: CALL_OW 12
4304: PLUS
4305: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4306: LD_VAR 0 6
4310: PPUSH
4311: LD_VAR 0 7
4315: PPUSH
4316: CALL_OW 488
4320: NOT
4321: IFFALSE 4343
// begin _x := x ;
4323: LD_ADDR_VAR 0 6
4327: PUSH
4328: LD_VAR 0 4
4332: ST_TO_ADDR
// _y := y ;
4333: LD_ADDR_VAR 0 7
4337: PUSH
4338: LD_VAR 0 5
4342: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4343: LD_ADDR_VAR 0 3
4347: PUSH
4348: LD_INT 1
4350: PPUSH
4351: LD_VAR 0 14
4355: PPUSH
4356: CALL_OW 12
4360: ST_TO_ADDR
// case i of 1 :
4361: LD_VAR 0 3
4365: PUSH
4366: LD_INT 1
4368: DOUBLE
4369: EQUAL
4370: IFTRUE 4374
4372: GO 4391
4374: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4375: LD_VAR 0 1
4379: PPUSH
4380: LD_VAR 0 10
4384: PPUSH
4385: CALL_OW 115
4389: GO 4452
4391: LD_INT 2
4393: DOUBLE
4394: EQUAL
4395: IFTRUE 4399
4397: GO 4421
4399: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4400: LD_VAR 0 1
4404: PPUSH
4405: LD_VAR 0 6
4409: PPUSH
4410: LD_VAR 0 7
4414: PPUSH
4415: CALL_OW 153
4419: GO 4452
4421: LD_INT 3
4423: DOUBLE
4424: EQUAL
4425: IFTRUE 4429
4427: GO 4451
4429: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4430: LD_VAR 0 1
4434: PPUSH
4435: LD_VAR 0 6
4439: PPUSH
4440: LD_VAR 0 7
4444: PPUSH
4445: CALL_OW 154
4449: GO 4452
4451: POP
// end ;
4452: LD_VAR 0 2
4456: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4457: LD_INT 0
4459: PPUSH
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
// if not unit or not building then
4465: LD_VAR 0 1
4469: NOT
4470: PUSH
4471: LD_VAR 0 2
4475: NOT
4476: OR
4477: IFFALSE 4481
// exit ;
4479: GO 4639
// x := GetX ( building ) ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 250
4495: ST_TO_ADDR
// y := GetY ( building ) ;
4496: LD_ADDR_VAR 0 6
4500: PUSH
4501: LD_VAR 0 2
4505: PPUSH
4506: CALL_OW 251
4510: ST_TO_ADDR
// for i = 0 to 5 do
4511: LD_ADDR_VAR 0 4
4515: PUSH
4516: DOUBLE
4517: LD_INT 0
4519: DEC
4520: ST_TO_ADDR
4521: LD_INT 5
4523: PUSH
4524: FOR_TO
4525: IFFALSE 4637
// begin _x := ShiftX ( x , i , 3 ) ;
4527: LD_ADDR_VAR 0 7
4531: PUSH
4532: LD_VAR 0 5
4536: PPUSH
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_INT 3
4544: PPUSH
4545: CALL_OW 272
4549: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4550: LD_ADDR_VAR 0 8
4554: PUSH
4555: LD_VAR 0 6
4559: PPUSH
4560: LD_VAR 0 4
4564: PPUSH
4565: LD_INT 3
4567: PPUSH
4568: CALL_OW 273
4572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4573: LD_VAR 0 7
4577: PPUSH
4578: LD_VAR 0 8
4582: PPUSH
4583: CALL_OW 488
4587: NOT
4588: IFFALSE 4592
// continue ;
4590: GO 4524
// if HexInfo ( _x , _y ) = 0 then
4592: LD_VAR 0 7
4596: PPUSH
4597: LD_VAR 0 8
4601: PPUSH
4602: CALL_OW 428
4606: PUSH
4607: LD_INT 0
4609: EQUAL
4610: IFFALSE 4635
// begin ComMoveXY ( unit , _x , _y ) ;
4612: LD_VAR 0 1
4616: PPUSH
4617: LD_VAR 0 7
4621: PPUSH
4622: LD_VAR 0 8
4626: PPUSH
4627: CALL_OW 111
// exit ;
4631: POP
4632: POP
4633: GO 4639
// end ; end ;
4635: GO 4524
4637: POP
4638: POP
// end ;
4639: LD_VAR 0 3
4643: RET
// export function ScanBase ( side , base_area ) ; begin
4644: LD_INT 0
4646: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4647: LD_ADDR_VAR 0 3
4651: PUSH
4652: LD_VAR 0 2
4656: PPUSH
4657: LD_INT 81
4659: PUSH
4660: LD_VAR 0 1
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PPUSH
4669: CALL_OW 70
4673: ST_TO_ADDR
// end ;
4674: LD_VAR 0 3
4678: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4679: LD_INT 0
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
// result := false ;
4685: LD_ADDR_VAR 0 2
4689: PUSH
4690: LD_INT 0
4692: ST_TO_ADDR
// side := GetSide ( unit ) ;
4693: LD_ADDR_VAR 0 3
4697: PUSH
4698: LD_VAR 0 1
4702: PPUSH
4703: CALL_OW 255
4707: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 1
4717: PPUSH
4718: CALL_OW 248
4722: ST_TO_ADDR
// case nat of 1 :
4723: LD_VAR 0 4
4727: PUSH
4728: LD_INT 1
4730: DOUBLE
4731: EQUAL
4732: IFTRUE 4736
4734: GO 4747
4736: POP
// tech := tech_lassight ; 2 :
4737: LD_ADDR_VAR 0 5
4741: PUSH
4742: LD_INT 12
4744: ST_TO_ADDR
4745: GO 4786
4747: LD_INT 2
4749: DOUBLE
4750: EQUAL
4751: IFTRUE 4755
4753: GO 4766
4755: POP
// tech := tech_mortar ; 3 :
4756: LD_ADDR_VAR 0 5
4760: PUSH
4761: LD_INT 41
4763: ST_TO_ADDR
4764: GO 4786
4766: LD_INT 3
4768: DOUBLE
4769: EQUAL
4770: IFTRUE 4774
4772: GO 4785
4774: POP
// tech := tech_bazooka ; end ;
4775: LD_ADDR_VAR 0 5
4779: PUSH
4780: LD_INT 44
4782: ST_TO_ADDR
4783: GO 4786
4785: POP
// if Researched ( side , tech ) then
4786: LD_VAR 0 3
4790: PPUSH
4791: LD_VAR 0 5
4795: PPUSH
4796: CALL_OW 325
4800: IFFALSE 4827
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4802: LD_ADDR_VAR 0 2
4806: PUSH
4807: LD_INT 5
4809: PUSH
4810: LD_INT 8
4812: PUSH
4813: LD_INT 9
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: LIST
4820: PUSH
4821: LD_VAR 0 4
4825: ARRAY
4826: ST_TO_ADDR
// end ;
4827: LD_VAR 0 2
4831: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4832: LD_INT 0
4834: PPUSH
4835: PPUSH
4836: PPUSH
// if not mines then
4837: LD_VAR 0 2
4841: NOT
4842: IFFALSE 4846
// exit ;
4844: GO 4990
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4846: LD_ADDR_VAR 0 5
4850: PUSH
4851: LD_INT 81
4853: PUSH
4854: LD_VAR 0 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 3
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 3
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PPUSH
4884: CALL_OW 69
4888: ST_TO_ADDR
// for i in mines do
4889: LD_ADDR_VAR 0 4
4893: PUSH
4894: LD_VAR 0 2
4898: PUSH
4899: FOR_IN
4900: IFFALSE 4988
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4902: LD_VAR 0 4
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: LD_VAR 0 4
4915: PUSH
4916: LD_INT 2
4918: ARRAY
4919: PPUSH
4920: CALL_OW 458
4924: NOT
4925: IFFALSE 4929
// continue ;
4927: GO 4899
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4929: LD_VAR 0 4
4933: PUSH
4934: LD_INT 1
4936: ARRAY
4937: PPUSH
4938: LD_VAR 0 4
4942: PUSH
4943: LD_INT 2
4945: ARRAY
4946: PPUSH
4947: CALL_OW 428
4951: PUSH
4952: LD_VAR 0 5
4956: IN
4957: IFFALSE 4986
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4959: LD_VAR 0 4
4963: PUSH
4964: LD_INT 1
4966: ARRAY
4967: PPUSH
4968: LD_VAR 0 4
4972: PUSH
4973: LD_INT 2
4975: ARRAY
4976: PPUSH
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL_OW 456
// end ;
4986: GO 4899
4988: POP
4989: POP
// end ;
4990: LD_VAR 0 3
4994: RET
// export function Count ( array ) ; var i ; begin
4995: LD_INT 0
4997: PPUSH
4998: PPUSH
// result := 0 ;
4999: LD_ADDR_VAR 0 2
5003: PUSH
5004: LD_INT 0
5006: ST_TO_ADDR
// for i in array do
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: LD_VAR 0 1
5016: PUSH
5017: FOR_IN
5018: IFFALSE 5042
// if i then
5020: LD_VAR 0 3
5024: IFFALSE 5040
// result := result + 1 ;
5026: LD_ADDR_VAR 0 2
5030: PUSH
5031: LD_VAR 0 2
5035: PUSH
5036: LD_INT 1
5038: PLUS
5039: ST_TO_ADDR
5040: GO 5017
5042: POP
5043: POP
// end ;
5044: LD_VAR 0 2
5048: RET
// export function IsEmpty ( building ) ; begin
5049: LD_INT 0
5051: PPUSH
// if not building then
5052: LD_VAR 0 1
5056: NOT
5057: IFFALSE 5061
// exit ;
5059: GO 5104
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: LD_VAR 0 1
5070: PUSH
5071: LD_INT 22
5073: PUSH
5074: LD_VAR 0 1
5078: PPUSH
5079: CALL_OW 255
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 58
5090: PUSH
5091: EMPTY
5092: LIST
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PPUSH
5098: CALL_OW 69
5102: IN
5103: ST_TO_ADDR
// end ;
5104: LD_VAR 0 2
5108: RET
// export function IsNotFull ( building ) ; begin
5109: LD_INT 0
5111: PPUSH
// if not building then
5112: LD_VAR 0 1
5116: NOT
5117: IFFALSE 5121
// exit ;
5119: GO 5140
// result := UnitsInside ( building ) < 6 ;
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: LD_VAR 0 1
5130: PPUSH
5131: CALL_OW 313
5135: PUSH
5136: LD_INT 6
5138: LESS
5139: ST_TO_ADDR
// end ;
5140: LD_VAR 0 2
5144: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5145: LD_INT 0
5147: PPUSH
5148: PPUSH
5149: PPUSH
5150: PPUSH
// tmp := [ ] ;
5151: LD_ADDR_VAR 0 3
5155: PUSH
5156: EMPTY
5157: ST_TO_ADDR
// list := [ ] ;
5158: LD_ADDR_VAR 0 5
5162: PUSH
5163: EMPTY
5164: ST_TO_ADDR
// for i = 16 to 25 do
5165: LD_ADDR_VAR 0 4
5169: PUSH
5170: DOUBLE
5171: LD_INT 16
5173: DEC
5174: ST_TO_ADDR
5175: LD_INT 25
5177: PUSH
5178: FOR_TO
5179: IFFALSE 5252
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5181: LD_ADDR_VAR 0 3
5185: PUSH
5186: LD_VAR 0 3
5190: PUSH
5191: LD_INT 22
5193: PUSH
5194: LD_VAR 0 1
5198: PPUSH
5199: CALL_OW 255
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 91
5210: PUSH
5211: LD_VAR 0 1
5215: PUSH
5216: LD_INT 6
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 30
5226: PUSH
5227: LD_VAR 0 4
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: PPUSH
5244: CALL_OW 69
5248: ADD
5249: ST_TO_ADDR
5250: GO 5178
5252: POP
5253: POP
// for i = 1 to tmp do
5254: LD_ADDR_VAR 0 4
5258: PUSH
5259: DOUBLE
5260: LD_INT 1
5262: DEC
5263: ST_TO_ADDR
5264: LD_VAR 0 3
5268: PUSH
5269: FOR_TO
5270: IFFALSE 5358
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5272: LD_ADDR_VAR 0 5
5276: PUSH
5277: LD_VAR 0 5
5281: PUSH
5282: LD_VAR 0 3
5286: PUSH
5287: LD_VAR 0 4
5291: ARRAY
5292: PPUSH
5293: CALL_OW 266
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 4
5307: ARRAY
5308: PPUSH
5309: CALL_OW 250
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: LD_VAR 0 4
5323: ARRAY
5324: PPUSH
5325: CALL_OW 251
5329: PUSH
5330: LD_VAR 0 3
5334: PUSH
5335: LD_VAR 0 4
5339: ARRAY
5340: PPUSH
5341: CALL_OW 254
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: PUSH
5352: EMPTY
5353: LIST
5354: ADD
5355: ST_TO_ADDR
5356: GO 5269
5358: POP
5359: POP
// result := list ;
5360: LD_ADDR_VAR 0 2
5364: PUSH
5365: LD_VAR 0 5
5369: ST_TO_ADDR
// end ;
5370: LD_VAR 0 2
5374: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5375: LD_INT 0
5377: PPUSH
5378: PPUSH
5379: PPUSH
5380: PPUSH
5381: PPUSH
5382: PPUSH
5383: PPUSH
// if not factory then
5384: LD_VAR 0 1
5388: NOT
5389: IFFALSE 5393
// exit ;
5391: GO 5986
// if control = control_apeman then
5393: LD_VAR 0 4
5397: PUSH
5398: LD_INT 5
5400: EQUAL
5401: IFFALSE 5510
// begin tmp := UnitsInside ( factory ) ;
5403: LD_ADDR_VAR 0 8
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 313
5417: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5418: LD_VAR 0 8
5422: PPUSH
5423: LD_INT 25
5425: PUSH
5426: LD_INT 12
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 72
5437: NOT
5438: IFFALSE 5448
// control := control_manual ;
5440: LD_ADDR_VAR 0 4
5444: PUSH
5445: LD_INT 1
5447: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5448: LD_ADDR_VAR 0 8
5452: PUSH
5453: LD_VAR 0 1
5457: PPUSH
5458: CALL 5145 0 1
5462: ST_TO_ADDR
// if tmp then
5463: LD_VAR 0 8
5467: IFFALSE 5510
// begin for i in tmp do
5469: LD_ADDR_VAR 0 7
5473: PUSH
5474: LD_VAR 0 8
5478: PUSH
5479: FOR_IN
5480: IFFALSE 5508
// if i [ 1 ] = b_ext_radio then
5482: LD_VAR 0 7
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: PUSH
5491: LD_INT 22
5493: EQUAL
5494: IFFALSE 5506
// begin control := control_remote ;
5496: LD_ADDR_VAR 0 4
5500: PUSH
5501: LD_INT 2
5503: ST_TO_ADDR
// break ;
5504: GO 5508
// end ;
5506: GO 5479
5508: POP
5509: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5510: LD_VAR 0 1
5514: PPUSH
5515: LD_VAR 0 2
5519: PPUSH
5520: LD_VAR 0 3
5524: PPUSH
5525: LD_VAR 0 4
5529: PPUSH
5530: LD_VAR 0 5
5534: PPUSH
5535: CALL_OW 448
5539: IFFALSE 5574
// begin result := [ chassis , engine , control , weapon ] ;
5541: LD_ADDR_VAR 0 6
5545: PUSH
5546: LD_VAR 0 2
5550: PUSH
5551: LD_VAR 0 3
5555: PUSH
5556: LD_VAR 0 4
5560: PUSH
5561: LD_VAR 0 5
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: ST_TO_ADDR
// exit ;
5572: GO 5986
// end ; _chassis := AvailableChassisList ( factory ) ;
5574: LD_ADDR_VAR 0 9
5578: PUSH
5579: LD_VAR 0 1
5583: PPUSH
5584: CALL_OW 475
5588: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5589: LD_ADDR_VAR 0 11
5593: PUSH
5594: LD_VAR 0 1
5598: PPUSH
5599: CALL_OW 476
5603: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5604: LD_ADDR_VAR 0 12
5608: PUSH
5609: LD_VAR 0 1
5613: PPUSH
5614: CALL_OW 477
5618: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5619: LD_ADDR_VAR 0 10
5623: PUSH
5624: LD_VAR 0 1
5628: PPUSH
5629: CALL_OW 478
5633: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5634: LD_VAR 0 9
5638: NOT
5639: PUSH
5640: LD_VAR 0 11
5644: NOT
5645: OR
5646: PUSH
5647: LD_VAR 0 12
5651: NOT
5652: OR
5653: PUSH
5654: LD_VAR 0 10
5658: NOT
5659: OR
5660: IFFALSE 5695
// begin result := [ chassis , engine , control , weapon ] ;
5662: LD_ADDR_VAR 0 6
5666: PUSH
5667: LD_VAR 0 2
5671: PUSH
5672: LD_VAR 0 3
5676: PUSH
5677: LD_VAR 0 4
5681: PUSH
5682: LD_VAR 0 5
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: ST_TO_ADDR
// exit ;
5693: GO 5986
// end ; if not chassis in _chassis then
5695: LD_VAR 0 2
5699: PUSH
5700: LD_VAR 0 9
5704: IN
5705: NOT
5706: IFFALSE 5732
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5708: LD_ADDR_VAR 0 2
5712: PUSH
5713: LD_VAR 0 9
5717: PUSH
5718: LD_INT 1
5720: PPUSH
5721: LD_VAR 0 9
5725: PPUSH
5726: CALL_OW 12
5730: ARRAY
5731: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5732: LD_VAR 0 2
5736: PPUSH
5737: LD_VAR 0 3
5741: PPUSH
5742: CALL 5991 0 2
5746: NOT
5747: IFFALSE 5806
// repeat engine := _engine [ 1 ] ;
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: LD_VAR 0 11
5758: PUSH
5759: LD_INT 1
5761: ARRAY
5762: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5763: LD_ADDR_VAR 0 11
5767: PUSH
5768: LD_VAR 0 11
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: CALL_OW 3
5780: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5781: LD_VAR 0 2
5785: PPUSH
5786: LD_VAR 0 3
5790: PPUSH
5791: CALL 5991 0 2
5795: PUSH
5796: LD_VAR 0 11
5800: PUSH
5801: EMPTY
5802: EQUAL
5803: OR
5804: IFFALSE 5749
// if not control in _control then
5806: LD_VAR 0 4
5810: PUSH
5811: LD_VAR 0 12
5815: IN
5816: NOT
5817: IFFALSE 5843
// control := _control [ rand ( 1 , _control ) ] ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 12
5828: PUSH
5829: LD_INT 1
5831: PPUSH
5832: LD_VAR 0 12
5836: PPUSH
5837: CALL_OW 12
5841: ARRAY
5842: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5843: LD_VAR 0 2
5847: PPUSH
5848: LD_VAR 0 5
5852: PPUSH
5853: CALL 6211 0 2
5857: NOT
5858: IFFALSE 5917
// repeat weapon := _weapon [ 1 ] ;
5860: LD_ADDR_VAR 0 5
5864: PUSH
5865: LD_VAR 0 10
5869: PUSH
5870: LD_INT 1
5872: ARRAY
5873: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5874: LD_ADDR_VAR 0 10
5878: PUSH
5879: LD_VAR 0 10
5883: PPUSH
5884: LD_INT 1
5886: PPUSH
5887: CALL_OW 3
5891: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5892: LD_VAR 0 2
5896: PPUSH
5897: LD_VAR 0 5
5901: PPUSH
5902: CALL 6211 0 2
5906: PUSH
5907: LD_VAR 0 10
5911: PUSH
5912: EMPTY
5913: EQUAL
5914: OR
5915: IFFALSE 5860
// result := [ ] ;
5917: LD_ADDR_VAR 0 6
5921: PUSH
5922: EMPTY
5923: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5924: LD_VAR 0 1
5928: PPUSH
5929: LD_VAR 0 2
5933: PPUSH
5934: LD_VAR 0 3
5938: PPUSH
5939: LD_VAR 0 4
5943: PPUSH
5944: LD_VAR 0 5
5948: PPUSH
5949: CALL_OW 448
5953: IFFALSE 5986
// result := [ chassis , engine , control , weapon ] ;
5955: LD_ADDR_VAR 0 6
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: LD_VAR 0 3
5969: PUSH
5970: LD_VAR 0 4
5974: PUSH
5975: LD_VAR 0 5
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: ST_TO_ADDR
// end ;
5986: LD_VAR 0 6
5990: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5991: LD_INT 0
5993: PPUSH
// if not chassis or not engine then
5994: LD_VAR 0 1
5998: NOT
5999: PUSH
6000: LD_VAR 0 2
6004: NOT
6005: OR
6006: IFFALSE 6010
// exit ;
6008: GO 6206
// case engine of engine_solar :
6010: LD_VAR 0 2
6014: PUSH
6015: LD_INT 2
6017: DOUBLE
6018: EQUAL
6019: IFTRUE 6023
6021: GO 6061
6023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6024: LD_ADDR_VAR 0 3
6028: PUSH
6029: LD_INT 11
6031: PUSH
6032: LD_INT 12
6034: PUSH
6035: LD_INT 13
6037: PUSH
6038: LD_INT 14
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: LD_INT 2
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: ST_TO_ADDR
6059: GO 6190
6061: LD_INT 1
6063: DOUBLE
6064: EQUAL
6065: IFTRUE 6069
6067: GO 6131
6069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6070: LD_ADDR_VAR 0 3
6074: PUSH
6075: LD_INT 11
6077: PUSH
6078: LD_INT 12
6080: PUSH
6081: LD_INT 13
6083: PUSH
6084: LD_INT 14
6086: PUSH
6087: LD_INT 1
6089: PUSH
6090: LD_INT 2
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: LD_INT 4
6098: PUSH
6099: LD_INT 5
6101: PUSH
6102: LD_INT 21
6104: PUSH
6105: LD_INT 23
6107: PUSH
6108: LD_INT 22
6110: PUSH
6111: LD_INT 24
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: ST_TO_ADDR
6129: GO 6190
6131: LD_INT 3
6133: DOUBLE
6134: EQUAL
6135: IFTRUE 6139
6137: GO 6189
6139: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6140: LD_ADDR_VAR 0 3
6144: PUSH
6145: LD_INT 13
6147: PUSH
6148: LD_INT 14
6150: PUSH
6151: LD_INT 2
6153: PUSH
6154: LD_INT 3
6156: PUSH
6157: LD_INT 4
6159: PUSH
6160: LD_INT 5
6162: PUSH
6163: LD_INT 21
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 23
6171: PUSH
6172: LD_INT 24
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: ST_TO_ADDR
6187: GO 6190
6189: POP
// result := ( chassis in result ) ;
6190: LD_ADDR_VAR 0 3
6194: PUSH
6195: LD_VAR 0 1
6199: PUSH
6200: LD_VAR 0 3
6204: IN
6205: ST_TO_ADDR
// end ;
6206: LD_VAR 0 3
6210: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6211: LD_INT 0
6213: PPUSH
// if not chassis or not weapon then
6214: LD_VAR 0 1
6218: NOT
6219: PUSH
6220: LD_VAR 0 2
6224: NOT
6225: OR
6226: IFFALSE 6230
// exit ;
6228: GO 7256
// case weapon of us_machine_gun :
6230: LD_VAR 0 2
6234: PUSH
6235: LD_INT 2
6237: DOUBLE
6238: EQUAL
6239: IFTRUE 6243
6241: GO 6273
6243: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: LD_INT 2
6254: PUSH
6255: LD_INT 3
6257: PUSH
6258: LD_INT 4
6260: PUSH
6261: LD_INT 5
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: ST_TO_ADDR
6271: GO 7240
6273: LD_INT 3
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6311
6281: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6282: LD_ADDR_VAR 0 3
6286: PUSH
6287: LD_INT 1
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: LD_INT 3
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: ST_TO_ADDR
6309: GO 7240
6311: LD_INT 11
6313: DOUBLE
6314: EQUAL
6315: IFTRUE 6319
6317: GO 6349
6319: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6320: LD_ADDR_VAR 0 3
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: LD_INT 2
6330: PUSH
6331: LD_INT 3
6333: PUSH
6334: LD_INT 4
6336: PUSH
6337: LD_INT 5
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: ST_TO_ADDR
6347: GO 7240
6349: LD_INT 4
6351: DOUBLE
6352: EQUAL
6353: IFTRUE 6357
6355: GO 6383
6357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6358: LD_ADDR_VAR 0 3
6362: PUSH
6363: LD_INT 2
6365: PUSH
6366: LD_INT 3
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: LD_INT 5
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: ST_TO_ADDR
6381: GO 7240
6383: LD_INT 5
6385: DOUBLE
6386: EQUAL
6387: IFTRUE 6391
6389: GO 6417
6391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6392: LD_ADDR_VAR 0 3
6396: PUSH
6397: LD_INT 2
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 4
6405: PUSH
6406: LD_INT 5
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
6415: GO 7240
6417: LD_INT 9
6419: DOUBLE
6420: EQUAL
6421: IFTRUE 6425
6423: GO 6451
6425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6426: LD_ADDR_VAR 0 3
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: ST_TO_ADDR
6449: GO 7240
6451: LD_INT 7
6453: DOUBLE
6454: EQUAL
6455: IFTRUE 6459
6457: GO 6485
6459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6460: LD_ADDR_VAR 0 3
6464: PUSH
6465: LD_INT 2
6467: PUSH
6468: LD_INT 3
6470: PUSH
6471: LD_INT 4
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: ST_TO_ADDR
6483: GO 7240
6485: LD_INT 12
6487: DOUBLE
6488: EQUAL
6489: IFTRUE 6493
6491: GO 6519
6493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: LD_INT 2
6501: PUSH
6502: LD_INT 3
6504: PUSH
6505: LD_INT 4
6507: PUSH
6508: LD_INT 5
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: ST_TO_ADDR
6517: GO 7240
6519: LD_INT 13
6521: DOUBLE
6522: EQUAL
6523: IFTRUE 6527
6525: GO 6553
6527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6528: LD_ADDR_VAR 0 3
6532: PUSH
6533: LD_INT 2
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 4
6541: PUSH
6542: LD_INT 5
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: ST_TO_ADDR
6551: GO 7240
6553: LD_INT 14
6555: DOUBLE
6556: EQUAL
6557: IFTRUE 6561
6559: GO 6579
6561: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 4
6569: PUSH
6570: LD_INT 5
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: ST_TO_ADDR
6577: GO 7240
6579: LD_INT 6
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6605
6587: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: LD_INT 4
6595: PUSH
6596: LD_INT 5
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: ST_TO_ADDR
6603: GO 7240
6605: LD_INT 10
6607: DOUBLE
6608: EQUAL
6609: IFTRUE 6613
6611: GO 6631
6613: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6614: LD_ADDR_VAR 0 3
6618: PUSH
6619: LD_INT 4
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: ST_TO_ADDR
6629: GO 7240
6631: LD_INT 22
6633: DOUBLE
6634: EQUAL
6635: IFTRUE 6639
6637: GO 6665
6639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6640: LD_ADDR_VAR 0 3
6644: PUSH
6645: LD_INT 11
6647: PUSH
6648: LD_INT 12
6650: PUSH
6651: LD_INT 13
6653: PUSH
6654: LD_INT 14
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: ST_TO_ADDR
6663: GO 7240
6665: LD_INT 23
6667: DOUBLE
6668: EQUAL
6669: IFTRUE 6673
6671: GO 6699
6673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6674: LD_ADDR_VAR 0 3
6678: PUSH
6679: LD_INT 11
6681: PUSH
6682: LD_INT 12
6684: PUSH
6685: LD_INT 13
6687: PUSH
6688: LD_INT 14
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: ST_TO_ADDR
6697: GO 7240
6699: LD_INT 24
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6707
6705: GO 6733
6707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6708: LD_ADDR_VAR 0 3
6712: PUSH
6713: LD_INT 11
6715: PUSH
6716: LD_INT 12
6718: PUSH
6719: LD_INT 13
6721: PUSH
6722: LD_INT 14
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: ST_TO_ADDR
6731: GO 7240
6733: LD_INT 30
6735: DOUBLE
6736: EQUAL
6737: IFTRUE 6741
6739: GO 6767
6741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6742: LD_ADDR_VAR 0 3
6746: PUSH
6747: LD_INT 11
6749: PUSH
6750: LD_INT 12
6752: PUSH
6753: LD_INT 13
6755: PUSH
6756: LD_INT 14
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: ST_TO_ADDR
6765: GO 7240
6767: LD_INT 25
6769: DOUBLE
6770: EQUAL
6771: IFTRUE 6775
6773: GO 6793
6775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: LD_INT 13
6783: PUSH
6784: LD_INT 14
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: ST_TO_ADDR
6791: GO 7240
6793: LD_INT 27
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6819
6801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6802: LD_ADDR_VAR 0 3
6806: PUSH
6807: LD_INT 13
6809: PUSH
6810: LD_INT 14
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: ST_TO_ADDR
6817: GO 7240
6819: LD_INT 28
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 6845
6827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6828: LD_ADDR_VAR 0 3
6832: PUSH
6833: LD_INT 13
6835: PUSH
6836: LD_INT 14
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: ST_TO_ADDR
6843: GO 7240
6845: LD_INT 29
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 6871
6853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6854: LD_ADDR_VAR 0 3
6858: PUSH
6859: LD_INT 13
6861: PUSH
6862: LD_INT 14
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: ST_TO_ADDR
6869: GO 7240
6871: LD_INT 31
6873: DOUBLE
6874: EQUAL
6875: IFTRUE 6879
6877: GO 6897
6879: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6880: LD_ADDR_VAR 0 3
6884: PUSH
6885: LD_INT 13
6887: PUSH
6888: LD_INT 14
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 7240
6897: LD_INT 26
6899: DOUBLE
6900: EQUAL
6901: IFTRUE 6905
6903: GO 6923
6905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_INT 13
6913: PUSH
6914: LD_INT 14
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: ST_TO_ADDR
6921: GO 7240
6923: LD_INT 42
6925: DOUBLE
6926: EQUAL
6927: IFTRUE 6931
6929: GO 6957
6931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6932: LD_ADDR_VAR 0 3
6936: PUSH
6937: LD_INT 21
6939: PUSH
6940: LD_INT 22
6942: PUSH
6943: LD_INT 23
6945: PUSH
6946: LD_INT 24
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: ST_TO_ADDR
6955: GO 7240
6957: LD_INT 43
6959: DOUBLE
6960: EQUAL
6961: IFTRUE 6965
6963: GO 6991
6965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6966: LD_ADDR_VAR 0 3
6970: PUSH
6971: LD_INT 21
6973: PUSH
6974: LD_INT 22
6976: PUSH
6977: LD_INT 23
6979: PUSH
6980: LD_INT 24
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: ST_TO_ADDR
6989: GO 7240
6991: LD_INT 44
6993: DOUBLE
6994: EQUAL
6995: IFTRUE 6999
6997: GO 7025
6999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7000: LD_ADDR_VAR 0 3
7004: PUSH
7005: LD_INT 21
7007: PUSH
7008: LD_INT 22
7010: PUSH
7011: LD_INT 23
7013: PUSH
7014: LD_INT 24
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: ST_TO_ADDR
7023: GO 7240
7025: LD_INT 45
7027: DOUBLE
7028: EQUAL
7029: IFTRUE 7033
7031: GO 7059
7033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: LD_INT 21
7041: PUSH
7042: LD_INT 22
7044: PUSH
7045: LD_INT 23
7047: PUSH
7048: LD_INT 24
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: ST_TO_ADDR
7057: GO 7240
7059: LD_INT 49
7061: DOUBLE
7062: EQUAL
7063: IFTRUE 7067
7065: GO 7093
7067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7068: LD_ADDR_VAR 0 3
7072: PUSH
7073: LD_INT 21
7075: PUSH
7076: LD_INT 22
7078: PUSH
7079: LD_INT 23
7081: PUSH
7082: LD_INT 24
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: ST_TO_ADDR
7091: GO 7240
7093: LD_INT 51
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7127
7101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7102: LD_ADDR_VAR 0 3
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 22
7112: PUSH
7113: LD_INT 23
7115: PUSH
7116: LD_INT 24
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: ST_TO_ADDR
7125: GO 7240
7127: LD_INT 52
7129: DOUBLE
7130: EQUAL
7131: IFTRUE 7135
7133: GO 7161
7135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7136: LD_ADDR_VAR 0 3
7140: PUSH
7141: LD_INT 21
7143: PUSH
7144: LD_INT 22
7146: PUSH
7147: LD_INT 23
7149: PUSH
7150: LD_INT 24
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: ST_TO_ADDR
7159: GO 7240
7161: LD_INT 53
7163: DOUBLE
7164: EQUAL
7165: IFTRUE 7169
7167: GO 7187
7169: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7170: LD_ADDR_VAR 0 3
7174: PUSH
7175: LD_INT 23
7177: PUSH
7178: LD_INT 24
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: ST_TO_ADDR
7185: GO 7240
7187: LD_INT 46
7189: DOUBLE
7190: EQUAL
7191: IFTRUE 7195
7193: GO 7213
7195: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7196: LD_ADDR_VAR 0 3
7200: PUSH
7201: LD_INT 23
7203: PUSH
7204: LD_INT 24
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: ST_TO_ADDR
7211: GO 7240
7213: LD_INT 47
7215: DOUBLE
7216: EQUAL
7217: IFTRUE 7221
7219: GO 7239
7221: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: LD_INT 23
7229: PUSH
7230: LD_INT 24
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: ST_TO_ADDR
7237: GO 7240
7239: POP
// result := ( chassis in result ) ;
7240: LD_ADDR_VAR 0 3
7244: PUSH
7245: LD_VAR 0 1
7249: PUSH
7250: LD_VAR 0 3
7254: IN
7255: ST_TO_ADDR
// end ;
7256: LD_VAR 0 3
7260: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7261: LD_INT 0
7263: PPUSH
7264: PPUSH
7265: PPUSH
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
// result := array ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_VAR 0 1
7279: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7280: LD_VAR 0 1
7284: NOT
7285: PUSH
7286: LD_VAR 0 2
7290: NOT
7291: OR
7292: PUSH
7293: LD_VAR 0 3
7297: NOT
7298: OR
7299: PUSH
7300: LD_VAR 0 2
7304: PUSH
7305: LD_VAR 0 1
7309: GREATER
7310: OR
7311: PUSH
7312: LD_VAR 0 3
7316: PUSH
7317: LD_VAR 0 1
7321: GREATER
7322: OR
7323: IFFALSE 7327
// exit ;
7325: GO 7623
// if direction then
7327: LD_VAR 0 4
7331: IFFALSE 7395
// begin d := 1 ;
7333: LD_ADDR_VAR 0 9
7337: PUSH
7338: LD_INT 1
7340: ST_TO_ADDR
// if i_from > i_to then
7341: LD_VAR 0 2
7345: PUSH
7346: LD_VAR 0 3
7350: GREATER
7351: IFFALSE 7377
// length := ( array - i_from ) + i_to else
7353: LD_ADDR_VAR 0 11
7357: PUSH
7358: LD_VAR 0 1
7362: PUSH
7363: LD_VAR 0 2
7367: MINUS
7368: PUSH
7369: LD_VAR 0 3
7373: PLUS
7374: ST_TO_ADDR
7375: GO 7393
// length := i_to - i_from ;
7377: LD_ADDR_VAR 0 11
7381: PUSH
7382: LD_VAR 0 3
7386: PUSH
7387: LD_VAR 0 2
7391: MINUS
7392: ST_TO_ADDR
// end else
7393: GO 7456
// begin d := - 1 ;
7395: LD_ADDR_VAR 0 9
7399: PUSH
7400: LD_INT 1
7402: NEG
7403: ST_TO_ADDR
// if i_from > i_to then
7404: LD_VAR 0 2
7408: PUSH
7409: LD_VAR 0 3
7413: GREATER
7414: IFFALSE 7434
// length := i_from - i_to else
7416: LD_ADDR_VAR 0 11
7420: PUSH
7421: LD_VAR 0 2
7425: PUSH
7426: LD_VAR 0 3
7430: MINUS
7431: ST_TO_ADDR
7432: GO 7456
// length := ( array - i_to ) + i_from ;
7434: LD_ADDR_VAR 0 11
7438: PUSH
7439: LD_VAR 0 1
7443: PUSH
7444: LD_VAR 0 3
7448: MINUS
7449: PUSH
7450: LD_VAR 0 2
7454: PLUS
7455: ST_TO_ADDR
// end ; if not length then
7456: LD_VAR 0 11
7460: NOT
7461: IFFALSE 7465
// exit ;
7463: GO 7623
// tmp := array ;
7465: LD_ADDR_VAR 0 10
7469: PUSH
7470: LD_VAR 0 1
7474: ST_TO_ADDR
// for i = 1 to length do
7475: LD_ADDR_VAR 0 6
7479: PUSH
7480: DOUBLE
7481: LD_INT 1
7483: DEC
7484: ST_TO_ADDR
7485: LD_VAR 0 11
7489: PUSH
7490: FOR_TO
7491: IFFALSE 7611
// begin for j = 1 to array do
7493: LD_ADDR_VAR 0 7
7497: PUSH
7498: DOUBLE
7499: LD_INT 1
7501: DEC
7502: ST_TO_ADDR
7503: LD_VAR 0 1
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7597
// begin k := j + d ;
7511: LD_ADDR_VAR 0 8
7515: PUSH
7516: LD_VAR 0 7
7520: PUSH
7521: LD_VAR 0 9
7525: PLUS
7526: ST_TO_ADDR
// if k > array then
7527: LD_VAR 0 8
7531: PUSH
7532: LD_VAR 0 1
7536: GREATER
7537: IFFALSE 7547
// k := 1 ;
7539: LD_ADDR_VAR 0 8
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if not k then
7547: LD_VAR 0 8
7551: NOT
7552: IFFALSE 7564
// k := array ;
7554: LD_ADDR_VAR 0 8
7558: PUSH
7559: LD_VAR 0 1
7563: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7564: LD_ADDR_VAR 0 10
7568: PUSH
7569: LD_VAR 0 10
7573: PPUSH
7574: LD_VAR 0 8
7578: PPUSH
7579: LD_VAR 0 1
7583: PUSH
7584: LD_VAR 0 7
7588: ARRAY
7589: PPUSH
7590: CALL_OW 1
7594: ST_TO_ADDR
// end ;
7595: GO 7508
7597: POP
7598: POP
// array := tmp ;
7599: LD_ADDR_VAR 0 1
7603: PUSH
7604: LD_VAR 0 10
7608: ST_TO_ADDR
// end ;
7609: GO 7490
7611: POP
7612: POP
// result := array ;
7613: LD_ADDR_VAR 0 5
7617: PUSH
7618: LD_VAR 0 1
7622: ST_TO_ADDR
// end ;
7623: LD_VAR 0 5
7627: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7628: LD_INT 0
7630: PPUSH
7631: PPUSH
// result := 0 ;
7632: LD_ADDR_VAR 0 3
7636: PUSH
7637: LD_INT 0
7639: ST_TO_ADDR
// if not array or not value in array then
7640: LD_VAR 0 1
7644: NOT
7645: PUSH
7646: LD_VAR 0 2
7650: PUSH
7651: LD_VAR 0 1
7655: IN
7656: NOT
7657: OR
7658: IFFALSE 7662
// exit ;
7660: GO 7716
// for i = 1 to array do
7662: LD_ADDR_VAR 0 4
7666: PUSH
7667: DOUBLE
7668: LD_INT 1
7670: DEC
7671: ST_TO_ADDR
7672: LD_VAR 0 1
7676: PUSH
7677: FOR_TO
7678: IFFALSE 7714
// if value = array [ i ] then
7680: LD_VAR 0 2
7684: PUSH
7685: LD_VAR 0 1
7689: PUSH
7690: LD_VAR 0 4
7694: ARRAY
7695: EQUAL
7696: IFFALSE 7712
// begin result := i ;
7698: LD_ADDR_VAR 0 3
7702: PUSH
7703: LD_VAR 0 4
7707: ST_TO_ADDR
// exit ;
7708: POP
7709: POP
7710: GO 7716
// end ;
7712: GO 7677
7714: POP
7715: POP
// end ;
7716: LD_VAR 0 3
7720: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7721: LD_INT 0
7723: PPUSH
// vc_chassis := chassis ;
7724: LD_ADDR_OWVAR 37
7728: PUSH
7729: LD_VAR 0 1
7733: ST_TO_ADDR
// vc_engine := engine ;
7734: LD_ADDR_OWVAR 39
7738: PUSH
7739: LD_VAR 0 2
7743: ST_TO_ADDR
// vc_control := control ;
7744: LD_ADDR_OWVAR 38
7748: PUSH
7749: LD_VAR 0 3
7753: ST_TO_ADDR
// vc_weapon := weapon ;
7754: LD_ADDR_OWVAR 40
7758: PUSH
7759: LD_VAR 0 4
7763: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7764: LD_ADDR_OWVAR 41
7768: PUSH
7769: LD_VAR 0 5
7773: ST_TO_ADDR
// end ;
7774: LD_VAR 0 6
7778: RET
// export function WantPlant ( unit ) ; var task ; begin
7779: LD_INT 0
7781: PPUSH
7782: PPUSH
// result := false ;
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: LD_INT 0
7790: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7791: LD_ADDR_VAR 0 3
7795: PUSH
7796: LD_VAR 0 1
7800: PPUSH
7801: CALL_OW 437
7805: ST_TO_ADDR
// if task then
7806: LD_VAR 0 3
7810: IFFALSE 7838
// if task [ 1 ] [ 1 ] = p then
7812: LD_VAR 0 3
7816: PUSH
7817: LD_INT 1
7819: ARRAY
7820: PUSH
7821: LD_INT 1
7823: ARRAY
7824: PUSH
7825: LD_STRING p
7827: EQUAL
7828: IFFALSE 7838
// result := true ;
7830: LD_ADDR_VAR 0 2
7834: PUSH
7835: LD_INT 1
7837: ST_TO_ADDR
// end ;
7838: LD_VAR 0 2
7842: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7843: LD_INT 0
7845: PPUSH
7846: PPUSH
7847: PPUSH
7848: PPUSH
// if pos < 1 then
7849: LD_VAR 0 2
7853: PUSH
7854: LD_INT 1
7856: LESS
7857: IFFALSE 7861
// exit ;
7859: GO 8164
// if pos = 1 then
7861: LD_VAR 0 2
7865: PUSH
7866: LD_INT 1
7868: EQUAL
7869: IFFALSE 7902
// result := Replace ( arr , pos [ 1 ] , value ) else
7871: LD_ADDR_VAR 0 4
7875: PUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: LD_VAR 0 2
7885: PUSH
7886: LD_INT 1
7888: ARRAY
7889: PPUSH
7890: LD_VAR 0 3
7894: PPUSH
7895: CALL_OW 1
7899: ST_TO_ADDR
7900: GO 8164
// begin tmp := arr ;
7902: LD_ADDR_VAR 0 6
7906: PUSH
7907: LD_VAR 0 1
7911: ST_TO_ADDR
// s_arr := [ tmp ] ;
7912: LD_ADDR_VAR 0 7
7916: PUSH
7917: LD_VAR 0 6
7921: PUSH
7922: EMPTY
7923: LIST
7924: ST_TO_ADDR
// for i = 1 to pos - 1 do
7925: LD_ADDR_VAR 0 5
7929: PUSH
7930: DOUBLE
7931: LD_INT 1
7933: DEC
7934: ST_TO_ADDR
7935: LD_VAR 0 2
7939: PUSH
7940: LD_INT 1
7942: MINUS
7943: PUSH
7944: FOR_TO
7945: IFFALSE 7990
// begin tmp := tmp [ pos [ i ] ] ;
7947: LD_ADDR_VAR 0 6
7951: PUSH
7952: LD_VAR 0 6
7956: PUSH
7957: LD_VAR 0 2
7961: PUSH
7962: LD_VAR 0 5
7966: ARRAY
7967: ARRAY
7968: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7969: LD_ADDR_VAR 0 7
7973: PUSH
7974: LD_VAR 0 7
7978: PUSH
7979: LD_VAR 0 6
7983: PUSH
7984: EMPTY
7985: LIST
7986: ADD
7987: ST_TO_ADDR
// end ;
7988: GO 7944
7990: POP
7991: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7992: LD_ADDR_VAR 0 6
7996: PUSH
7997: LD_VAR 0 6
8001: PPUSH
8002: LD_VAR 0 2
8006: PUSH
8007: LD_VAR 0 2
8011: ARRAY
8012: PPUSH
8013: LD_VAR 0 3
8017: PPUSH
8018: CALL_OW 1
8022: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8023: LD_ADDR_VAR 0 7
8027: PUSH
8028: LD_VAR 0 7
8032: PPUSH
8033: LD_VAR 0 7
8037: PPUSH
8038: LD_VAR 0 6
8042: PPUSH
8043: CALL_OW 1
8047: ST_TO_ADDR
// for i = s_arr downto 2 do
8048: LD_ADDR_VAR 0 5
8052: PUSH
8053: DOUBLE
8054: LD_VAR 0 7
8058: INC
8059: ST_TO_ADDR
8060: LD_INT 2
8062: PUSH
8063: FOR_DOWNTO
8064: IFFALSE 8148
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8066: LD_ADDR_VAR 0 6
8070: PUSH
8071: LD_VAR 0 7
8075: PUSH
8076: LD_VAR 0 5
8080: PUSH
8081: LD_INT 1
8083: MINUS
8084: ARRAY
8085: PPUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_VAR 0 5
8095: PUSH
8096: LD_INT 1
8098: MINUS
8099: ARRAY
8100: PPUSH
8101: LD_VAR 0 7
8105: PUSH
8106: LD_VAR 0 5
8110: ARRAY
8111: PPUSH
8112: CALL_OW 1
8116: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8117: LD_ADDR_VAR 0 7
8121: PUSH
8122: LD_VAR 0 7
8126: PPUSH
8127: LD_VAR 0 5
8131: PUSH
8132: LD_INT 1
8134: MINUS
8135: PPUSH
8136: LD_VAR 0 6
8140: PPUSH
8141: CALL_OW 1
8145: ST_TO_ADDR
// end ;
8146: GO 8063
8148: POP
8149: POP
// result := s_arr [ 1 ] ;
8150: LD_ADDR_VAR 0 4
8154: PUSH
8155: LD_VAR 0 7
8159: PUSH
8160: LD_INT 1
8162: ARRAY
8163: ST_TO_ADDR
// end ; end ;
8164: LD_VAR 0 4
8168: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8169: LD_INT 0
8171: PPUSH
8172: PPUSH
// if not list then
8173: LD_VAR 0 1
8177: NOT
8178: IFFALSE 8182
// exit ;
8180: GO 8273
// i := list [ pos1 ] ;
8182: LD_ADDR_VAR 0 5
8186: PUSH
8187: LD_VAR 0 1
8191: PUSH
8192: LD_VAR 0 2
8196: ARRAY
8197: ST_TO_ADDR
// if not i then
8198: LD_VAR 0 5
8202: NOT
8203: IFFALSE 8207
// exit ;
8205: GO 8273
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8207: LD_ADDR_VAR 0 1
8211: PUSH
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_VAR 0 2
8221: PPUSH
8222: LD_VAR 0 1
8226: PUSH
8227: LD_VAR 0 3
8231: ARRAY
8232: PPUSH
8233: CALL_OW 1
8237: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8238: LD_ADDR_VAR 0 1
8242: PUSH
8243: LD_VAR 0 1
8247: PPUSH
8248: LD_VAR 0 3
8252: PPUSH
8253: LD_VAR 0 5
8257: PPUSH
8258: CALL_OW 1
8262: ST_TO_ADDR
// result := list ;
8263: LD_ADDR_VAR 0 4
8267: PUSH
8268: LD_VAR 0 1
8272: ST_TO_ADDR
// end ;
8273: LD_VAR 0 4
8277: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8278: LD_INT 0
8280: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8281: LD_ADDR_VAR 0 5
8285: PUSH
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL_OW 250
8295: PPUSH
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 251
8305: PPUSH
8306: LD_VAR 0 2
8310: PPUSH
8311: LD_VAR 0 3
8315: PPUSH
8316: LD_VAR 0 4
8320: PPUSH
8321: CALL 8331 0 5
8325: ST_TO_ADDR
// end ;
8326: LD_VAR 0 5
8330: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8331: LD_INT 0
8333: PPUSH
8334: PPUSH
8335: PPUSH
8336: PPUSH
// if not list then
8337: LD_VAR 0 3
8341: NOT
8342: IFFALSE 8346
// exit ;
8344: GO 8734
// result := [ ] ;
8346: LD_ADDR_VAR 0 6
8350: PUSH
8351: EMPTY
8352: ST_TO_ADDR
// for i in list do
8353: LD_ADDR_VAR 0 7
8357: PUSH
8358: LD_VAR 0 3
8362: PUSH
8363: FOR_IN
8364: IFFALSE 8566
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8366: LD_ADDR_VAR 0 9
8370: PUSH
8371: LD_VAR 0 7
8375: PPUSH
8376: LD_VAR 0 1
8380: PPUSH
8381: LD_VAR 0 2
8385: PPUSH
8386: CALL_OW 297
8390: ST_TO_ADDR
// if not result then
8391: LD_VAR 0 6
8395: NOT
8396: IFFALSE 8422
// result := [ [ i , tmp ] ] else
8398: LD_ADDR_VAR 0 6
8402: PUSH
8403: LD_VAR 0 7
8407: PUSH
8408: LD_VAR 0 9
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: ST_TO_ADDR
8420: GO 8564
// begin if result [ result ] [ 2 ] < tmp then
8422: LD_VAR 0 6
8426: PUSH
8427: LD_VAR 0 6
8431: ARRAY
8432: PUSH
8433: LD_INT 2
8435: ARRAY
8436: PUSH
8437: LD_VAR 0 9
8441: LESS
8442: IFFALSE 8484
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8444: LD_ADDR_VAR 0 6
8448: PUSH
8449: LD_VAR 0 6
8453: PPUSH
8454: LD_VAR 0 6
8458: PUSH
8459: LD_INT 1
8461: PLUS
8462: PPUSH
8463: LD_VAR 0 7
8467: PUSH
8468: LD_VAR 0 9
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PPUSH
8477: CALL_OW 2
8481: ST_TO_ADDR
8482: GO 8564
// for j = 1 to result do
8484: LD_ADDR_VAR 0 8
8488: PUSH
8489: DOUBLE
8490: LD_INT 1
8492: DEC
8493: ST_TO_ADDR
8494: LD_VAR 0 6
8498: PUSH
8499: FOR_TO
8500: IFFALSE 8562
// begin if tmp < result [ j ] [ 2 ] then
8502: LD_VAR 0 9
8506: PUSH
8507: LD_VAR 0 6
8511: PUSH
8512: LD_VAR 0 8
8516: ARRAY
8517: PUSH
8518: LD_INT 2
8520: ARRAY
8521: LESS
8522: IFFALSE 8560
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8524: LD_ADDR_VAR 0 6
8528: PUSH
8529: LD_VAR 0 6
8533: PPUSH
8534: LD_VAR 0 8
8538: PPUSH
8539: LD_VAR 0 7
8543: PUSH
8544: LD_VAR 0 9
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 2
8557: ST_TO_ADDR
// break ;
8558: GO 8562
// end ; end ;
8560: GO 8499
8562: POP
8563: POP
// end ; end ;
8564: GO 8363
8566: POP
8567: POP
// if result and not asc then
8568: LD_VAR 0 6
8572: PUSH
8573: LD_VAR 0 4
8577: NOT
8578: AND
8579: IFFALSE 8654
// begin tmp := result ;
8581: LD_ADDR_VAR 0 9
8585: PUSH
8586: LD_VAR 0 6
8590: ST_TO_ADDR
// for i = tmp downto 1 do
8591: LD_ADDR_VAR 0 7
8595: PUSH
8596: DOUBLE
8597: LD_VAR 0 9
8601: INC
8602: ST_TO_ADDR
8603: LD_INT 1
8605: PUSH
8606: FOR_DOWNTO
8607: IFFALSE 8652
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: LD_VAR 0 6
8618: PPUSH
8619: LD_VAR 0 9
8623: PUSH
8624: LD_VAR 0 7
8628: MINUS
8629: PUSH
8630: LD_INT 1
8632: PLUS
8633: PPUSH
8634: LD_VAR 0 9
8638: PUSH
8639: LD_VAR 0 7
8643: ARRAY
8644: PPUSH
8645: CALL_OW 1
8649: ST_TO_ADDR
8650: GO 8606
8652: POP
8653: POP
// end ; tmp := [ ] ;
8654: LD_ADDR_VAR 0 9
8658: PUSH
8659: EMPTY
8660: ST_TO_ADDR
// if mode then
8661: LD_VAR 0 5
8665: IFFALSE 8734
// begin for i = 1 to result do
8667: LD_ADDR_VAR 0 7
8671: PUSH
8672: DOUBLE
8673: LD_INT 1
8675: DEC
8676: ST_TO_ADDR
8677: LD_VAR 0 6
8681: PUSH
8682: FOR_TO
8683: IFFALSE 8722
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8685: LD_ADDR_VAR 0 9
8689: PUSH
8690: LD_VAR 0 9
8694: PPUSH
8695: LD_VAR 0 7
8699: PPUSH
8700: LD_VAR 0 6
8704: PUSH
8705: LD_VAR 0 7
8709: ARRAY
8710: PUSH
8711: LD_INT 1
8713: ARRAY
8714: PPUSH
8715: CALL_OW 1
8719: ST_TO_ADDR
8720: GO 8682
8722: POP
8723: POP
// result := tmp ;
8724: LD_ADDR_VAR 0 6
8728: PUSH
8729: LD_VAR 0 9
8733: ST_TO_ADDR
// end ; end ;
8734: LD_VAR 0 6
8738: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8739: LD_INT 0
8741: PPUSH
8742: PPUSH
8743: PPUSH
8744: PPUSH
8745: PPUSH
8746: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8747: LD_ADDR_VAR 0 5
8751: PUSH
8752: LD_INT 0
8754: PUSH
8755: LD_INT 0
8757: PUSH
8758: LD_INT 0
8760: PUSH
8761: EMPTY
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: ST_TO_ADDR
// if not x or not y then
8769: LD_VAR 0 2
8773: NOT
8774: PUSH
8775: LD_VAR 0 3
8779: NOT
8780: OR
8781: IFFALSE 8785
// exit ;
8783: GO 10431
// if not range then
8785: LD_VAR 0 4
8789: NOT
8790: IFFALSE 8800
// range := 10 ;
8792: LD_ADDR_VAR 0 4
8796: PUSH
8797: LD_INT 10
8799: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8800: LD_ADDR_VAR 0 8
8804: PUSH
8805: LD_INT 81
8807: PUSH
8808: LD_VAR 0 1
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 92
8819: PUSH
8820: LD_VAR 0 2
8824: PUSH
8825: LD_VAR 0 3
8829: PUSH
8830: LD_VAR 0 4
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 3
8843: PUSH
8844: LD_INT 21
8846: PUSH
8847: LD_INT 3
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: PPUSH
8863: CALL_OW 69
8867: ST_TO_ADDR
// if not tmp then
8868: LD_VAR 0 8
8872: NOT
8873: IFFALSE 8877
// exit ;
8875: GO 10431
// for i in tmp do
8877: LD_ADDR_VAR 0 6
8881: PUSH
8882: LD_VAR 0 8
8886: PUSH
8887: FOR_IN
8888: IFFALSE 10406
// begin points := [ 0 , 0 , 0 ] ;
8890: LD_ADDR_VAR 0 9
8894: PUSH
8895: LD_INT 0
8897: PUSH
8898: LD_INT 0
8900: PUSH
8901: LD_INT 0
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: ST_TO_ADDR
// bpoints := 1 ;
8909: LD_ADDR_VAR 0 10
8913: PUSH
8914: LD_INT 1
8916: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8917: LD_VAR 0 6
8921: PPUSH
8922: CALL_OW 247
8926: PUSH
8927: LD_INT 1
8929: DOUBLE
8930: EQUAL
8931: IFTRUE 8935
8933: GO 9513
8935: POP
// begin if GetClass ( i ) = 1 then
8936: LD_VAR 0 6
8940: PPUSH
8941: CALL_OW 257
8945: PUSH
8946: LD_INT 1
8948: EQUAL
8949: IFFALSE 8970
// points := [ 10 , 5 , 3 ] ;
8951: LD_ADDR_VAR 0 9
8955: PUSH
8956: LD_INT 10
8958: PUSH
8959: LD_INT 5
8961: PUSH
8962: LD_INT 3
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: LIST
8969: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8970: LD_VAR 0 6
8974: PPUSH
8975: CALL_OW 257
8979: PUSH
8980: LD_INT 2
8982: PUSH
8983: LD_INT 3
8985: PUSH
8986: LD_INT 4
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: IN
8994: IFFALSE 9015
// points := [ 3 , 2 , 1 ] ;
8996: LD_ADDR_VAR 0 9
9000: PUSH
9001: LD_INT 3
9003: PUSH
9004: LD_INT 2
9006: PUSH
9007: LD_INT 1
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: LIST
9014: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9015: LD_VAR 0 6
9019: PPUSH
9020: CALL_OW 257
9024: PUSH
9025: LD_INT 5
9027: EQUAL
9028: IFFALSE 9049
// points := [ 130 , 5 , 2 ] ;
9030: LD_ADDR_VAR 0 9
9034: PUSH
9035: LD_INT 130
9037: PUSH
9038: LD_INT 5
9040: PUSH
9041: LD_INT 2
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9049: LD_VAR 0 6
9053: PPUSH
9054: CALL_OW 257
9058: PUSH
9059: LD_INT 8
9061: EQUAL
9062: IFFALSE 9083
// points := [ 35 , 35 , 30 ] ;
9064: LD_ADDR_VAR 0 9
9068: PUSH
9069: LD_INT 35
9071: PUSH
9072: LD_INT 35
9074: PUSH
9075: LD_INT 30
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9083: LD_VAR 0 6
9087: PPUSH
9088: CALL_OW 257
9092: PUSH
9093: LD_INT 9
9095: EQUAL
9096: IFFALSE 9117
// points := [ 20 , 55 , 40 ] ;
9098: LD_ADDR_VAR 0 9
9102: PUSH
9103: LD_INT 20
9105: PUSH
9106: LD_INT 55
9108: PUSH
9109: LD_INT 40
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9117: LD_VAR 0 6
9121: PPUSH
9122: CALL_OW 257
9126: PUSH
9127: LD_INT 12
9129: PUSH
9130: LD_INT 16
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: IN
9137: IFFALSE 9158
// points := [ 5 , 3 , 2 ] ;
9139: LD_ADDR_VAR 0 9
9143: PUSH
9144: LD_INT 5
9146: PUSH
9147: LD_INT 3
9149: PUSH
9150: LD_INT 2
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9158: LD_VAR 0 6
9162: PPUSH
9163: CALL_OW 257
9167: PUSH
9168: LD_INT 17
9170: EQUAL
9171: IFFALSE 9192
// points := [ 100 , 50 , 75 ] ;
9173: LD_ADDR_VAR 0 9
9177: PUSH
9178: LD_INT 100
9180: PUSH
9181: LD_INT 50
9183: PUSH
9184: LD_INT 75
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: LIST
9191: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9192: LD_VAR 0 6
9196: PPUSH
9197: CALL_OW 257
9201: PUSH
9202: LD_INT 15
9204: EQUAL
9205: IFFALSE 9226
// points := [ 10 , 5 , 3 ] ;
9207: LD_ADDR_VAR 0 9
9211: PUSH
9212: LD_INT 10
9214: PUSH
9215: LD_INT 5
9217: PUSH
9218: LD_INT 3
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9226: LD_VAR 0 6
9230: PPUSH
9231: CALL_OW 257
9235: PUSH
9236: LD_INT 14
9238: EQUAL
9239: IFFALSE 9260
// points := [ 10 , 0 , 0 ] ;
9241: LD_ADDR_VAR 0 9
9245: PUSH
9246: LD_INT 10
9248: PUSH
9249: LD_INT 0
9251: PUSH
9252: LD_INT 0
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9260: LD_VAR 0 6
9264: PPUSH
9265: CALL_OW 257
9269: PUSH
9270: LD_INT 11
9272: EQUAL
9273: IFFALSE 9294
// points := [ 30 , 10 , 5 ] ;
9275: LD_ADDR_VAR 0 9
9279: PUSH
9280: LD_INT 30
9282: PUSH
9283: LD_INT 10
9285: PUSH
9286: LD_INT 5
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: LIST
9293: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9294: LD_VAR 0 1
9298: PPUSH
9299: LD_INT 5
9301: PPUSH
9302: CALL_OW 321
9306: PUSH
9307: LD_INT 2
9309: EQUAL
9310: IFFALSE 9327
// bpoints := bpoints * 1.8 ;
9312: LD_ADDR_VAR 0 10
9316: PUSH
9317: LD_VAR 0 10
9321: PUSH
9322: LD_REAL  1.80000000000000E+0000
9325: MUL
9326: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9327: LD_VAR 0 6
9331: PPUSH
9332: CALL_OW 257
9336: PUSH
9337: LD_INT 1
9339: PUSH
9340: LD_INT 2
9342: PUSH
9343: LD_INT 3
9345: PUSH
9346: LD_INT 4
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: IN
9355: PUSH
9356: LD_VAR 0 1
9360: PPUSH
9361: LD_INT 51
9363: PPUSH
9364: CALL_OW 321
9368: PUSH
9369: LD_INT 2
9371: EQUAL
9372: AND
9373: IFFALSE 9390
// bpoints := bpoints * 1.2 ;
9375: LD_ADDR_VAR 0 10
9379: PUSH
9380: LD_VAR 0 10
9384: PUSH
9385: LD_REAL  1.20000000000000E+0000
9388: MUL
9389: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9390: LD_VAR 0 6
9394: PPUSH
9395: CALL_OW 257
9399: PUSH
9400: LD_INT 5
9402: PUSH
9403: LD_INT 7
9405: PUSH
9406: LD_INT 9
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: IN
9414: PUSH
9415: LD_VAR 0 1
9419: PPUSH
9420: LD_INT 52
9422: PPUSH
9423: CALL_OW 321
9427: PUSH
9428: LD_INT 2
9430: EQUAL
9431: AND
9432: IFFALSE 9449
// bpoints := bpoints * 1.5 ;
9434: LD_ADDR_VAR 0 10
9438: PUSH
9439: LD_VAR 0 10
9443: PUSH
9444: LD_REAL  1.50000000000000E+0000
9447: MUL
9448: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9449: LD_VAR 0 1
9453: PPUSH
9454: LD_INT 66
9456: PPUSH
9457: CALL_OW 321
9461: PUSH
9462: LD_INT 2
9464: EQUAL
9465: IFFALSE 9482
// bpoints := bpoints * 1.1 ;
9467: LD_ADDR_VAR 0 10
9471: PUSH
9472: LD_VAR 0 10
9476: PUSH
9477: LD_REAL  1.10000000000000E+0000
9480: MUL
9481: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9482: LD_ADDR_VAR 0 10
9486: PUSH
9487: LD_VAR 0 10
9491: PUSH
9492: LD_VAR 0 6
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 259
9504: PUSH
9505: LD_REAL  1.15000000000000E+0000
9508: MUL
9509: MUL
9510: ST_TO_ADDR
// end ; unit_vehicle :
9511: GO 10335
9513: LD_INT 2
9515: DOUBLE
9516: EQUAL
9517: IFTRUE 9521
9519: GO 10323
9521: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9522: LD_VAR 0 6
9526: PPUSH
9527: CALL_OW 264
9531: PUSH
9532: LD_INT 2
9534: PUSH
9535: LD_INT 42
9537: PUSH
9538: LD_INT 24
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: IN
9546: IFFALSE 9567
// points := [ 25 , 5 , 3 ] ;
9548: LD_ADDR_VAR 0 9
9552: PUSH
9553: LD_INT 25
9555: PUSH
9556: LD_INT 5
9558: PUSH
9559: LD_INT 3
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9567: LD_VAR 0 6
9571: PPUSH
9572: CALL_OW 264
9576: PUSH
9577: LD_INT 4
9579: PUSH
9580: LD_INT 43
9582: PUSH
9583: LD_INT 25
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: IN
9591: IFFALSE 9612
// points := [ 40 , 15 , 5 ] ;
9593: LD_ADDR_VAR 0 9
9597: PUSH
9598: LD_INT 40
9600: PUSH
9601: LD_INT 15
9603: PUSH
9604: LD_INT 5
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: LIST
9611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9612: LD_VAR 0 6
9616: PPUSH
9617: CALL_OW 264
9621: PUSH
9622: LD_INT 3
9624: PUSH
9625: LD_INT 23
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: IN
9632: IFFALSE 9653
// points := [ 7 , 25 , 8 ] ;
9634: LD_ADDR_VAR 0 9
9638: PUSH
9639: LD_INT 7
9641: PUSH
9642: LD_INT 25
9644: PUSH
9645: LD_INT 8
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9653: LD_VAR 0 6
9657: PPUSH
9658: CALL_OW 264
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 27
9668: PUSH
9669: LD_INT 44
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: IN
9677: IFFALSE 9698
// points := [ 14 , 50 , 16 ] ;
9679: LD_ADDR_VAR 0 9
9683: PUSH
9684: LD_INT 14
9686: PUSH
9687: LD_INT 50
9689: PUSH
9690: LD_INT 16
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9698: LD_VAR 0 6
9702: PPUSH
9703: CALL_OW 264
9707: PUSH
9708: LD_INT 6
9710: PUSH
9711: LD_INT 46
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: IN
9718: IFFALSE 9739
// points := [ 32 , 120 , 70 ] ;
9720: LD_ADDR_VAR 0 9
9724: PUSH
9725: LD_INT 32
9727: PUSH
9728: LD_INT 120
9730: PUSH
9731: LD_INT 70
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
9739: LD_VAR 0 6
9743: PPUSH
9744: CALL_OW 264
9748: PUSH
9749: LD_INT 7
9751: PUSH
9752: LD_INT 28
9754: PUSH
9755: LD_INT 45
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: IN
9763: IFFALSE 9784
// points := [ 35 , 20 , 45 ] ;
9765: LD_ADDR_VAR 0 9
9769: PUSH
9770: LD_INT 35
9772: PUSH
9773: LD_INT 20
9775: PUSH
9776: LD_INT 45
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9784: LD_VAR 0 6
9788: PPUSH
9789: CALL_OW 264
9793: PUSH
9794: LD_INT 47
9796: PUSH
9797: EMPTY
9798: LIST
9799: IN
9800: IFFALSE 9821
// points := [ 67 , 45 , 75 ] ;
9802: LD_ADDR_VAR 0 9
9806: PUSH
9807: LD_INT 67
9809: PUSH
9810: LD_INT 45
9812: PUSH
9813: LD_INT 75
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9821: LD_VAR 0 6
9825: PPUSH
9826: CALL_OW 264
9830: PUSH
9831: LD_INT 26
9833: PUSH
9834: EMPTY
9835: LIST
9836: IN
9837: IFFALSE 9858
// points := [ 120 , 30 , 80 ] ;
9839: LD_ADDR_VAR 0 9
9843: PUSH
9844: LD_INT 120
9846: PUSH
9847: LD_INT 30
9849: PUSH
9850: LD_INT 80
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9858: LD_VAR 0 6
9862: PPUSH
9863: CALL_OW 264
9867: PUSH
9868: LD_INT 22
9870: PUSH
9871: EMPTY
9872: LIST
9873: IN
9874: IFFALSE 9895
// points := [ 40 , 1 , 1 ] ;
9876: LD_ADDR_VAR 0 9
9880: PUSH
9881: LD_INT 40
9883: PUSH
9884: LD_INT 1
9886: PUSH
9887: LD_INT 1
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9895: LD_VAR 0 6
9899: PPUSH
9900: CALL_OW 264
9904: PUSH
9905: LD_INT 29
9907: PUSH
9908: EMPTY
9909: LIST
9910: IN
9911: IFFALSE 9932
// points := [ 70 , 200 , 400 ] ;
9913: LD_ADDR_VAR 0 9
9917: PUSH
9918: LD_INT 70
9920: PUSH
9921: LD_INT 200
9923: PUSH
9924: LD_INT 400
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 264
9941: PUSH
9942: LD_INT 14
9944: PUSH
9945: LD_INT 53
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: IN
9952: IFFALSE 9973
// points := [ 40 , 10 , 20 ] ;
9954: LD_ADDR_VAR 0 9
9958: PUSH
9959: LD_INT 40
9961: PUSH
9962: LD_INT 10
9964: PUSH
9965: LD_INT 20
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9973: LD_VAR 0 6
9977: PPUSH
9978: CALL_OW 264
9982: PUSH
9983: LD_INT 9
9985: PUSH
9986: EMPTY
9987: LIST
9988: IN
9989: IFFALSE 10010
// points := [ 5 , 70 , 20 ] ;
9991: LD_ADDR_VAR 0 9
9995: PUSH
9996: LD_INT 5
9998: PUSH
9999: LD_INT 70
10001: PUSH
10002: LD_INT 20
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: LIST
10009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10010: LD_VAR 0 6
10014: PPUSH
10015: CALL_OW 264
10019: PUSH
10020: LD_INT 10
10022: PUSH
10023: EMPTY
10024: LIST
10025: IN
10026: IFFALSE 10047
// points := [ 35 , 110 , 70 ] ;
10028: LD_ADDR_VAR 0 9
10032: PUSH
10033: LD_INT 35
10035: PUSH
10036: LD_INT 110
10038: PUSH
10039: LD_INT 70
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10047: LD_VAR 0 6
10051: PPUSH
10052: CALL_OW 265
10056: PUSH
10057: LD_INT 25
10059: EQUAL
10060: IFFALSE 10081
// points := [ 80 , 65 , 100 ] ;
10062: LD_ADDR_VAR 0 9
10066: PUSH
10067: LD_INT 80
10069: PUSH
10070: LD_INT 65
10072: PUSH
10073: LD_INT 100
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: LIST
10080: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10081: LD_VAR 0 6
10085: PPUSH
10086: CALL_OW 263
10090: PUSH
10091: LD_INT 1
10093: EQUAL
10094: IFFALSE 10129
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10096: LD_ADDR_VAR 0 10
10100: PUSH
10101: LD_VAR 0 10
10105: PUSH
10106: LD_VAR 0 6
10110: PPUSH
10111: CALL_OW 311
10115: PPUSH
10116: LD_INT 3
10118: PPUSH
10119: CALL_OW 259
10123: PUSH
10124: LD_INT 4
10126: MUL
10127: MUL
10128: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10129: LD_VAR 0 6
10133: PPUSH
10134: CALL_OW 263
10138: PUSH
10139: LD_INT 2
10141: EQUAL
10142: IFFALSE 10193
// begin j := IsControledBy ( i ) ;
10144: LD_ADDR_VAR 0 7
10148: PUSH
10149: LD_VAR 0 6
10153: PPUSH
10154: CALL_OW 312
10158: ST_TO_ADDR
// if j then
10159: LD_VAR 0 7
10163: IFFALSE 10193
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10165: LD_ADDR_VAR 0 10
10169: PUSH
10170: LD_VAR 0 10
10174: PUSH
10175: LD_VAR 0 7
10179: PPUSH
10180: LD_INT 3
10182: PPUSH
10183: CALL_OW 259
10187: PUSH
10188: LD_INT 3
10190: MUL
10191: MUL
10192: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10193: LD_VAR 0 6
10197: PPUSH
10198: CALL_OW 264
10202: PUSH
10203: LD_INT 5
10205: PUSH
10206: LD_INT 6
10208: PUSH
10209: LD_INT 46
10211: PUSH
10212: LD_INT 44
10214: PUSH
10215: LD_INT 47
10217: PUSH
10218: LD_INT 45
10220: PUSH
10221: LD_INT 28
10223: PUSH
10224: LD_INT 7
10226: PUSH
10227: LD_INT 27
10229: PUSH
10230: LD_INT 29
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: IN
10245: PUSH
10246: LD_VAR 0 1
10250: PPUSH
10251: LD_INT 52
10253: PPUSH
10254: CALL_OW 321
10258: PUSH
10259: LD_INT 2
10261: EQUAL
10262: AND
10263: IFFALSE 10280
// bpoints := bpoints * 1.2 ;
10265: LD_ADDR_VAR 0 10
10269: PUSH
10270: LD_VAR 0 10
10274: PUSH
10275: LD_REAL  1.20000000000000E+0000
10278: MUL
10279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10280: LD_VAR 0 6
10284: PPUSH
10285: CALL_OW 264
10289: PUSH
10290: LD_INT 6
10292: PUSH
10293: LD_INT 46
10295: PUSH
10296: LD_INT 47
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: IN
10304: IFFALSE 10321
// bpoints := bpoints * 1.2 ;
10306: LD_ADDR_VAR 0 10
10310: PUSH
10311: LD_VAR 0 10
10315: PUSH
10316: LD_REAL  1.20000000000000E+0000
10319: MUL
10320: ST_TO_ADDR
// end ; unit_building :
10321: GO 10335
10323: LD_INT 3
10325: DOUBLE
10326: EQUAL
10327: IFTRUE 10331
10329: GO 10334
10331: POP
// ; end ;
10332: GO 10335
10334: POP
// for j = 1 to 3 do
10335: LD_ADDR_VAR 0 7
10339: PUSH
10340: DOUBLE
10341: LD_INT 1
10343: DEC
10344: ST_TO_ADDR
10345: LD_INT 3
10347: PUSH
10348: FOR_TO
10349: IFFALSE 10402
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10351: LD_ADDR_VAR 0 5
10355: PUSH
10356: LD_VAR 0 5
10360: PPUSH
10361: LD_VAR 0 7
10365: PPUSH
10366: LD_VAR 0 5
10370: PUSH
10371: LD_VAR 0 7
10375: ARRAY
10376: PUSH
10377: LD_VAR 0 9
10381: PUSH
10382: LD_VAR 0 7
10386: ARRAY
10387: PUSH
10388: LD_VAR 0 10
10392: MUL
10393: PLUS
10394: PPUSH
10395: CALL_OW 1
10399: ST_TO_ADDR
10400: GO 10348
10402: POP
10403: POP
// end ;
10404: GO 8887
10406: POP
10407: POP
// result := Replace ( result , 4 , tmp ) ;
10408: LD_ADDR_VAR 0 5
10412: PUSH
10413: LD_VAR 0 5
10417: PPUSH
10418: LD_INT 4
10420: PPUSH
10421: LD_VAR 0 8
10425: PPUSH
10426: CALL_OW 1
10430: ST_TO_ADDR
// end ;
10431: LD_VAR 0 5
10435: RET
// export function DangerAtRange ( unit , range ) ; begin
10436: LD_INT 0
10438: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10439: LD_ADDR_VAR 0 3
10443: PUSH
10444: LD_VAR 0 1
10448: PPUSH
10449: CALL_OW 255
10453: PPUSH
10454: LD_VAR 0 1
10458: PPUSH
10459: CALL_OW 250
10463: PPUSH
10464: LD_VAR 0 1
10468: PPUSH
10469: CALL_OW 251
10473: PPUSH
10474: LD_VAR 0 2
10478: PPUSH
10479: CALL 8739 0 4
10483: ST_TO_ADDR
// end ;
10484: LD_VAR 0 3
10488: RET
// export function DangerInArea ( side , area ) ; begin
10489: LD_INT 0
10491: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10492: LD_ADDR_VAR 0 3
10496: PUSH
10497: LD_VAR 0 2
10501: PPUSH
10502: LD_INT 81
10504: PUSH
10505: LD_VAR 0 1
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PPUSH
10514: CALL_OW 70
10518: ST_TO_ADDR
// end ;
10519: LD_VAR 0 3
10523: RET
// export function IsExtension ( b ) ; begin
10524: LD_INT 0
10526: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10527: LD_ADDR_VAR 0 2
10531: PUSH
10532: LD_VAR 0 1
10536: PUSH
10537: LD_INT 23
10539: PUSH
10540: LD_INT 20
10542: PUSH
10543: LD_INT 22
10545: PUSH
10546: LD_INT 17
10548: PUSH
10549: LD_INT 24
10551: PUSH
10552: LD_INT 21
10554: PUSH
10555: LD_INT 19
10557: PUSH
10558: LD_INT 16
10560: PUSH
10561: LD_INT 25
10563: PUSH
10564: LD_INT 18
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: IN
10579: ST_TO_ADDR
// end ;
10580: LD_VAR 0 2
10584: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
10585: LD_INT 0
10587: PPUSH
10588: PPUSH
10589: PPUSH
// result := [ ] ;
10590: LD_ADDR_VAR 0 3
10594: PUSH
10595: EMPTY
10596: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10597: LD_ADDR_VAR 0 4
10601: PUSH
10602: LD_VAR 0 2
10606: PPUSH
10607: LD_INT 21
10609: PUSH
10610: LD_INT 3
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: CALL_OW 70
10621: ST_TO_ADDR
// if not tmp then
10622: LD_VAR 0 4
10626: NOT
10627: IFFALSE 10631
// exit ;
10629: GO 10689
// for i in tmp do
10631: LD_ADDR_VAR 0 5
10635: PUSH
10636: LD_VAR 0 4
10640: PUSH
10641: FOR_IN
10642: IFFALSE 10677
// if GetBase ( i ) <> base then
10644: LD_VAR 0 5
10648: PPUSH
10649: CALL_OW 274
10653: PUSH
10654: LD_VAR 0 1
10658: NONEQUAL
10659: IFFALSE 10675
// ComLinkToBase ( base , i ) ;
10661: LD_VAR 0 1
10665: PPUSH
10666: LD_VAR 0 5
10670: PPUSH
10671: CALL_OW 169
10675: GO 10641
10677: POP
10678: POP
// result := tmp ;
10679: LD_ADDR_VAR 0 3
10683: PUSH
10684: LD_VAR 0 4
10688: ST_TO_ADDR
// end ;
10689: LD_VAR 0 3
10693: RET
// export function ComComplete ( unit , b ) ; var i ; begin
10694: LD_INT 0
10696: PPUSH
10697: PPUSH
// if BuildingStatus ( b ) = bs_build then
10698: LD_VAR 0 2
10702: PPUSH
10703: CALL_OW 461
10707: PUSH
10708: LD_INT 1
10710: EQUAL
10711: IFFALSE 10771
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10713: LD_VAR 0 1
10717: PPUSH
10718: LD_STRING h
10720: PUSH
10721: LD_VAR 0 2
10725: PPUSH
10726: CALL_OW 250
10730: PUSH
10731: LD_VAR 0 2
10735: PPUSH
10736: CALL_OW 251
10740: PUSH
10741: LD_VAR 0 2
10745: PUSH
10746: LD_INT 0
10748: PUSH
10749: LD_INT 0
10751: PUSH
10752: LD_INT 0
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: PPUSH
10767: CALL_OW 446
// end ;
10771: LD_VAR 0 3
10775: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10776: LD_INT 0
10778: PPUSH
10779: PPUSH
10780: PPUSH
10781: PPUSH
10782: PPUSH
10783: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
10784: LD_VAR 0 1
10788: NOT
10789: PUSH
10790: LD_VAR 0 1
10794: PPUSH
10795: CALL_OW 263
10799: PUSH
10800: LD_INT 2
10802: EQUAL
10803: NOT
10804: OR
10805: IFFALSE 10809
// exit ;
10807: GO 11125
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10809: LD_ADDR_VAR 0 6
10813: PUSH
10814: LD_INT 22
10816: PUSH
10817: LD_VAR 0 1
10821: PPUSH
10822: CALL_OW 255
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: LD_INT 2
10833: PUSH
10834: LD_INT 30
10836: PUSH
10837: LD_INT 36
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 34
10846: PUSH
10847: LD_INT 31
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PPUSH
10863: CALL_OW 69
10867: ST_TO_ADDR
// if not tmp then
10868: LD_VAR 0 6
10872: NOT
10873: IFFALSE 10877
// exit ;
10875: GO 11125
// result := [ ] ;
10877: LD_ADDR_VAR 0 2
10881: PUSH
10882: EMPTY
10883: ST_TO_ADDR
// for i in tmp do
10884: LD_ADDR_VAR 0 3
10888: PUSH
10889: LD_VAR 0 6
10893: PUSH
10894: FOR_IN
10895: IFFALSE 10966
// begin t := UnitsInside ( i ) ;
10897: LD_ADDR_VAR 0 4
10901: PUSH
10902: LD_VAR 0 3
10906: PPUSH
10907: CALL_OW 313
10911: ST_TO_ADDR
// if t then
10912: LD_VAR 0 4
10916: IFFALSE 10964
// for j in t do
10918: LD_ADDR_VAR 0 7
10922: PUSH
10923: LD_VAR 0 4
10927: PUSH
10928: FOR_IN
10929: IFFALSE 10962
// result := Insert ( result , result + 1 , j ) ;
10931: LD_ADDR_VAR 0 2
10935: PUSH
10936: LD_VAR 0 2
10940: PPUSH
10941: LD_VAR 0 2
10945: PUSH
10946: LD_INT 1
10948: PLUS
10949: PPUSH
10950: LD_VAR 0 7
10954: PPUSH
10955: CALL_OW 2
10959: ST_TO_ADDR
10960: GO 10928
10962: POP
10963: POP
// end ;
10964: GO 10894
10966: POP
10967: POP
// if not result then
10968: LD_VAR 0 2
10972: NOT
10973: IFFALSE 10977
// exit ;
10975: GO 11125
// mech := result [ 1 ] ;
10977: LD_ADDR_VAR 0 5
10981: PUSH
10982: LD_VAR 0 2
10986: PUSH
10987: LD_INT 1
10989: ARRAY
10990: ST_TO_ADDR
// if result > 1 then
10991: LD_VAR 0 2
10995: PUSH
10996: LD_INT 1
10998: GREATER
10999: IFFALSE 11111
// for i = 2 to result do
11001: LD_ADDR_VAR 0 3
11005: PUSH
11006: DOUBLE
11007: LD_INT 2
11009: DEC
11010: ST_TO_ADDR
11011: LD_VAR 0 2
11015: PUSH
11016: FOR_TO
11017: IFFALSE 11109
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11019: LD_ADDR_VAR 0 4
11023: PUSH
11024: LD_VAR 0 2
11028: PUSH
11029: LD_VAR 0 3
11033: ARRAY
11034: PPUSH
11035: LD_INT 3
11037: PPUSH
11038: CALL_OW 259
11042: PUSH
11043: LD_VAR 0 2
11047: PUSH
11048: LD_VAR 0 3
11052: ARRAY
11053: PPUSH
11054: CALL_OW 432
11058: MINUS
11059: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11060: LD_VAR 0 4
11064: PUSH
11065: LD_VAR 0 5
11069: PPUSH
11070: LD_INT 3
11072: PPUSH
11073: CALL_OW 259
11077: PUSH
11078: LD_VAR 0 5
11082: PPUSH
11083: CALL_OW 432
11087: MINUS
11088: GREATEREQUAL
11089: IFFALSE 11107
// mech := result [ i ] ;
11091: LD_ADDR_VAR 0 5
11095: PUSH
11096: LD_VAR 0 2
11100: PUSH
11101: LD_VAR 0 3
11105: ARRAY
11106: ST_TO_ADDR
// end ;
11107: GO 11016
11109: POP
11110: POP
// ComLinkTo ( vehicle , mech ) ;
11111: LD_VAR 0 1
11115: PPUSH
11116: LD_VAR 0 5
11120: PPUSH
11121: CALL_OW 135
// end ;
11125: LD_VAR 0 2
11129: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11130: LD_INT 0
11132: PPUSH
11133: PPUSH
11134: PPUSH
11135: PPUSH
11136: PPUSH
11137: PPUSH
11138: PPUSH
11139: PPUSH
11140: PPUSH
11141: PPUSH
11142: PPUSH
11143: PPUSH
11144: PPUSH
// result := [ ] ;
11145: LD_ADDR_VAR 0 7
11149: PUSH
11150: EMPTY
11151: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11152: LD_VAR 0 1
11156: PPUSH
11157: CALL_OW 266
11161: PUSH
11162: LD_INT 0
11164: PUSH
11165: LD_INT 1
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: IN
11172: NOT
11173: IFFALSE 11177
// exit ;
11175: GO 12808
// if name then
11177: LD_VAR 0 3
11181: IFFALSE 11197
// SetBName ( base_dep , name ) ;
11183: LD_VAR 0 1
11187: PPUSH
11188: LD_VAR 0 3
11192: PPUSH
11193: CALL_OW 500
// base := GetBase ( base_dep ) ;
11197: LD_ADDR_VAR 0 15
11201: PUSH
11202: LD_VAR 0 1
11206: PPUSH
11207: CALL_OW 274
11211: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11212: LD_ADDR_VAR 0 16
11216: PUSH
11217: LD_VAR 0 1
11221: PPUSH
11222: CALL_OW 255
11226: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11227: LD_ADDR_VAR 0 17
11231: PUSH
11232: LD_VAR 0 1
11236: PPUSH
11237: CALL_OW 248
11241: ST_TO_ADDR
// if sources then
11242: LD_VAR 0 5
11246: IFFALSE 11293
// for i = 1 to 3 do
11248: LD_ADDR_VAR 0 8
11252: PUSH
11253: DOUBLE
11254: LD_INT 1
11256: DEC
11257: ST_TO_ADDR
11258: LD_INT 3
11260: PUSH
11261: FOR_TO
11262: IFFALSE 11291
// AddResourceType ( base , i , sources [ i ] ) ;
11264: LD_VAR 0 15
11268: PPUSH
11269: LD_VAR 0 8
11273: PPUSH
11274: LD_VAR 0 5
11278: PUSH
11279: LD_VAR 0 8
11283: ARRAY
11284: PPUSH
11285: CALL_OW 276
11289: GO 11261
11291: POP
11292: POP
// buildings := GetBaseBuildings ( base , area ) ;
11293: LD_ADDR_VAR 0 18
11297: PUSH
11298: LD_VAR 0 15
11302: PPUSH
11303: LD_VAR 0 2
11307: PPUSH
11308: CALL 10585 0 2
11312: ST_TO_ADDR
// InitHc ;
11313: CALL_OW 19
// InitUc ;
11317: CALL_OW 18
// uc_side := side ;
11321: LD_ADDR_OWVAR 20
11325: PUSH
11326: LD_VAR 0 16
11330: ST_TO_ADDR
// uc_nation := nation ;
11331: LD_ADDR_OWVAR 21
11335: PUSH
11336: LD_VAR 0 17
11340: ST_TO_ADDR
// if buildings then
11341: LD_VAR 0 18
11345: IFFALSE 12667
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11347: LD_ADDR_VAR 0 19
11351: PUSH
11352: LD_VAR 0 18
11356: PPUSH
11357: LD_INT 2
11359: PUSH
11360: LD_INT 30
11362: PUSH
11363: LD_INT 29
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 30
11372: PUSH
11373: LD_INT 30
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: LIST
11384: PPUSH
11385: CALL_OW 72
11389: ST_TO_ADDR
// if tmp then
11390: LD_VAR 0 19
11394: IFFALSE 11442
// for i in tmp do
11396: LD_ADDR_VAR 0 8
11400: PUSH
11401: LD_VAR 0 19
11405: PUSH
11406: FOR_IN
11407: IFFALSE 11440
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11409: LD_VAR 0 8
11413: PPUSH
11414: CALL_OW 250
11418: PPUSH
11419: LD_VAR 0 8
11423: PPUSH
11424: CALL_OW 251
11428: PPUSH
11429: LD_VAR 0 16
11433: PPUSH
11434: CALL_OW 441
11438: GO 11406
11440: POP
11441: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11442: LD_VAR 0 18
11446: PPUSH
11447: LD_INT 2
11449: PUSH
11450: LD_INT 30
11452: PUSH
11453: LD_INT 32
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 30
11462: PUSH
11463: LD_INT 33
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: PPUSH
11475: CALL_OW 72
11479: IFFALSE 11567
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11481: LD_ADDR_VAR 0 8
11485: PUSH
11486: LD_VAR 0 18
11490: PPUSH
11491: LD_INT 2
11493: PUSH
11494: LD_INT 30
11496: PUSH
11497: LD_INT 32
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 30
11506: PUSH
11507: LD_INT 33
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: PPUSH
11519: CALL_OW 72
11523: PUSH
11524: FOR_IN
11525: IFFALSE 11565
// begin if not GetBWeapon ( i ) then
11527: LD_VAR 0 8
11531: PPUSH
11532: CALL_OW 269
11536: NOT
11537: IFFALSE 11563
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11539: LD_VAR 0 8
11543: PPUSH
11544: LD_VAR 0 8
11548: PPUSH
11549: LD_VAR 0 2
11553: PPUSH
11554: CALL 12813 0 2
11558: PPUSH
11559: CALL_OW 431
// end ;
11563: GO 11524
11565: POP
11566: POP
// end ; for i = 1 to personel do
11567: LD_ADDR_VAR 0 8
11571: PUSH
11572: DOUBLE
11573: LD_INT 1
11575: DEC
11576: ST_TO_ADDR
11577: LD_VAR 0 6
11581: PUSH
11582: FOR_TO
11583: IFFALSE 12647
// begin if i > 4 then
11585: LD_VAR 0 8
11589: PUSH
11590: LD_INT 4
11592: GREATER
11593: IFFALSE 11597
// break ;
11595: GO 12647
// case i of 1 :
11597: LD_VAR 0 8
11601: PUSH
11602: LD_INT 1
11604: DOUBLE
11605: EQUAL
11606: IFTRUE 11610
11608: GO 11690
11610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11611: LD_ADDR_VAR 0 12
11615: PUSH
11616: LD_VAR 0 18
11620: PPUSH
11621: LD_INT 22
11623: PUSH
11624: LD_VAR 0 16
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 58
11635: PUSH
11636: EMPTY
11637: LIST
11638: PUSH
11639: LD_INT 2
11641: PUSH
11642: LD_INT 30
11644: PUSH
11645: LD_INT 32
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 30
11654: PUSH
11655: LD_INT 4
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 30
11664: PUSH
11665: LD_INT 5
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: PPUSH
11683: CALL_OW 72
11687: ST_TO_ADDR
11688: GO 11912
11690: LD_INT 2
11692: DOUBLE
11693: EQUAL
11694: IFTRUE 11698
11696: GO 11760
11698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11699: LD_ADDR_VAR 0 12
11703: PUSH
11704: LD_VAR 0 18
11708: PPUSH
11709: LD_INT 22
11711: PUSH
11712: LD_VAR 0 16
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 2
11723: PUSH
11724: LD_INT 30
11726: PUSH
11727: LD_INT 0
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 30
11736: PUSH
11737: LD_INT 1
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PPUSH
11753: CALL_OW 72
11757: ST_TO_ADDR
11758: GO 11912
11760: LD_INT 3
11762: DOUBLE
11763: EQUAL
11764: IFTRUE 11768
11766: GO 11830
11768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11769: LD_ADDR_VAR 0 12
11773: PUSH
11774: LD_VAR 0 18
11778: PPUSH
11779: LD_INT 22
11781: PUSH
11782: LD_VAR 0 16
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 2
11793: PUSH
11794: LD_INT 30
11796: PUSH
11797: LD_INT 2
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 30
11806: PUSH
11807: LD_INT 3
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PPUSH
11823: CALL_OW 72
11827: ST_TO_ADDR
11828: GO 11912
11830: LD_INT 4
11832: DOUBLE
11833: EQUAL
11834: IFTRUE 11838
11836: GO 11911
11838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11839: LD_ADDR_VAR 0 12
11843: PUSH
11844: LD_VAR 0 18
11848: PPUSH
11849: LD_INT 22
11851: PUSH
11852: LD_VAR 0 16
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 2
11863: PUSH
11864: LD_INT 30
11866: PUSH
11867: LD_INT 6
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 30
11876: PUSH
11877: LD_INT 7
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: LD_INT 30
11886: PUSH
11887: LD_INT 8
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PPUSH
11904: CALL_OW 72
11908: ST_TO_ADDR
11909: GO 11912
11911: POP
// if i = 1 then
11912: LD_VAR 0 8
11916: PUSH
11917: LD_INT 1
11919: EQUAL
11920: IFFALSE 12031
// begin tmp := [ ] ;
11922: LD_ADDR_VAR 0 19
11926: PUSH
11927: EMPTY
11928: ST_TO_ADDR
// for j in f do
11929: LD_ADDR_VAR 0 9
11933: PUSH
11934: LD_VAR 0 12
11938: PUSH
11939: FOR_IN
11940: IFFALSE 12013
// if GetBType ( j ) = b_bunker then
11942: LD_VAR 0 9
11946: PPUSH
11947: CALL_OW 266
11951: PUSH
11952: LD_INT 32
11954: EQUAL
11955: IFFALSE 11982
// tmp := Insert ( tmp , 1 , j ) else
11957: LD_ADDR_VAR 0 19
11961: PUSH
11962: LD_VAR 0 19
11966: PPUSH
11967: LD_INT 1
11969: PPUSH
11970: LD_VAR 0 9
11974: PPUSH
11975: CALL_OW 2
11979: ST_TO_ADDR
11980: GO 12011
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11982: LD_ADDR_VAR 0 19
11986: PUSH
11987: LD_VAR 0 19
11991: PPUSH
11992: LD_VAR 0 19
11996: PUSH
11997: LD_INT 1
11999: PLUS
12000: PPUSH
12001: LD_VAR 0 9
12005: PPUSH
12006: CALL_OW 2
12010: ST_TO_ADDR
12011: GO 11939
12013: POP
12014: POP
// if tmp then
12015: LD_VAR 0 19
12019: IFFALSE 12031
// f := tmp ;
12021: LD_ADDR_VAR 0 12
12025: PUSH
12026: LD_VAR 0 19
12030: ST_TO_ADDR
// end ; x := personel [ i ] ;
12031: LD_ADDR_VAR 0 13
12035: PUSH
12036: LD_VAR 0 6
12040: PUSH
12041: LD_VAR 0 8
12045: ARRAY
12046: ST_TO_ADDR
// if x = - 1 then
12047: LD_VAR 0 13
12051: PUSH
12052: LD_INT 1
12054: NEG
12055: EQUAL
12056: IFFALSE 12265
// begin for j in f do
12058: LD_ADDR_VAR 0 9
12062: PUSH
12063: LD_VAR 0 12
12067: PUSH
12068: FOR_IN
12069: IFFALSE 12261
// repeat InitHc ;
12071: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12075: LD_VAR 0 9
12079: PPUSH
12080: CALL_OW 266
12084: PUSH
12085: LD_INT 5
12087: EQUAL
12088: IFFALSE 12158
// begin if UnitsInside ( j ) < 3 then
12090: LD_VAR 0 9
12094: PPUSH
12095: CALL_OW 313
12099: PUSH
12100: LD_INT 3
12102: LESS
12103: IFFALSE 12139
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12105: LD_INT 0
12107: PPUSH
12108: LD_INT 5
12110: PUSH
12111: LD_INT 8
12113: PUSH
12114: LD_INT 9
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_VAR 0 17
12126: ARRAY
12127: PPUSH
12128: LD_VAR 0 4
12132: PPUSH
12133: CALL_OW 380
12137: GO 12156
// PrepareHuman ( false , i , skill ) ;
12139: LD_INT 0
12141: PPUSH
12142: LD_VAR 0 8
12146: PPUSH
12147: LD_VAR 0 4
12151: PPUSH
12152: CALL_OW 380
// end else
12156: GO 12175
// PrepareHuman ( false , i , skill ) ;
12158: LD_INT 0
12160: PPUSH
12161: LD_VAR 0 8
12165: PPUSH
12166: LD_VAR 0 4
12170: PPUSH
12171: CALL_OW 380
// un := CreateHuman ;
12175: LD_ADDR_VAR 0 14
12179: PUSH
12180: CALL_OW 44
12184: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12185: LD_ADDR_VAR 0 7
12189: PUSH
12190: LD_VAR 0 7
12194: PPUSH
12195: LD_INT 1
12197: PPUSH
12198: LD_VAR 0 14
12202: PPUSH
12203: CALL_OW 2
12207: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12208: LD_VAR 0 14
12212: PPUSH
12213: LD_VAR 0 9
12217: PPUSH
12218: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12222: LD_VAR 0 9
12226: PPUSH
12227: CALL_OW 313
12231: PUSH
12232: LD_INT 6
12234: EQUAL
12235: PUSH
12236: LD_VAR 0 9
12240: PPUSH
12241: CALL_OW 266
12245: PUSH
12246: LD_INT 32
12248: PUSH
12249: LD_INT 31
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: IN
12256: OR
12257: IFFALSE 12071
12259: GO 12068
12261: POP
12262: POP
// end else
12263: GO 12645
// for j = 1 to x do
12265: LD_ADDR_VAR 0 9
12269: PUSH
12270: DOUBLE
12271: LD_INT 1
12273: DEC
12274: ST_TO_ADDR
12275: LD_VAR 0 13
12279: PUSH
12280: FOR_TO
12281: IFFALSE 12643
// begin InitHc ;
12283: CALL_OW 19
// if not f then
12287: LD_VAR 0 12
12291: NOT
12292: IFFALSE 12381
// begin PrepareHuman ( false , i , skill ) ;
12294: LD_INT 0
12296: PPUSH
12297: LD_VAR 0 8
12301: PPUSH
12302: LD_VAR 0 4
12306: PPUSH
12307: CALL_OW 380
// un := CreateHuman ;
12311: LD_ADDR_VAR 0 14
12315: PUSH
12316: CALL_OW 44
12320: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12321: LD_ADDR_VAR 0 7
12325: PUSH
12326: LD_VAR 0 7
12330: PPUSH
12331: LD_INT 1
12333: PPUSH
12334: LD_VAR 0 14
12338: PPUSH
12339: CALL_OW 2
12343: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12344: LD_VAR 0 14
12348: PPUSH
12349: LD_VAR 0 1
12353: PPUSH
12354: CALL_OW 250
12358: PPUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 251
12368: PPUSH
12369: LD_INT 10
12371: PPUSH
12372: LD_INT 0
12374: PPUSH
12375: CALL_OW 50
// continue ;
12379: GO 12280
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12381: LD_VAR 0 12
12385: PUSH
12386: LD_INT 1
12388: ARRAY
12389: PPUSH
12390: CALL_OW 313
12394: PUSH
12395: LD_VAR 0 12
12399: PUSH
12400: LD_INT 1
12402: ARRAY
12403: PPUSH
12404: CALL_OW 266
12408: PUSH
12409: LD_INT 32
12411: PUSH
12412: LD_INT 31
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: IN
12419: AND
12420: PUSH
12421: LD_VAR 0 12
12425: PUSH
12426: LD_INT 1
12428: ARRAY
12429: PPUSH
12430: CALL_OW 313
12434: PUSH
12435: LD_INT 6
12437: EQUAL
12438: OR
12439: IFFALSE 12459
// f := Delete ( f , 1 ) ;
12441: LD_ADDR_VAR 0 12
12445: PUSH
12446: LD_VAR 0 12
12450: PPUSH
12451: LD_INT 1
12453: PPUSH
12454: CALL_OW 3
12458: ST_TO_ADDR
// if not f then
12459: LD_VAR 0 12
12463: NOT
12464: IFFALSE 12482
// begin x := x + 2 ;
12466: LD_ADDR_VAR 0 13
12470: PUSH
12471: LD_VAR 0 13
12475: PUSH
12476: LD_INT 2
12478: PLUS
12479: ST_TO_ADDR
// continue ;
12480: GO 12280
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12482: LD_VAR 0 12
12486: PUSH
12487: LD_INT 1
12489: ARRAY
12490: PPUSH
12491: CALL_OW 266
12495: PUSH
12496: LD_INT 5
12498: EQUAL
12499: IFFALSE 12573
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12501: LD_VAR 0 12
12505: PUSH
12506: LD_INT 1
12508: ARRAY
12509: PPUSH
12510: CALL_OW 313
12514: PUSH
12515: LD_INT 3
12517: LESS
12518: IFFALSE 12554
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12520: LD_INT 0
12522: PPUSH
12523: LD_INT 5
12525: PUSH
12526: LD_INT 8
12528: PUSH
12529: LD_INT 9
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: LIST
12536: PUSH
12537: LD_VAR 0 17
12541: ARRAY
12542: PPUSH
12543: LD_VAR 0 4
12547: PPUSH
12548: CALL_OW 380
12552: GO 12571
// PrepareHuman ( false , i , skill ) ;
12554: LD_INT 0
12556: PPUSH
12557: LD_VAR 0 8
12561: PPUSH
12562: LD_VAR 0 4
12566: PPUSH
12567: CALL_OW 380
// end else
12571: GO 12590
// PrepareHuman ( false , i , skill ) ;
12573: LD_INT 0
12575: PPUSH
12576: LD_VAR 0 8
12580: PPUSH
12581: LD_VAR 0 4
12585: PPUSH
12586: CALL_OW 380
// un := CreateHuman ;
12590: LD_ADDR_VAR 0 14
12594: PUSH
12595: CALL_OW 44
12599: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12600: LD_ADDR_VAR 0 7
12604: PUSH
12605: LD_VAR 0 7
12609: PPUSH
12610: LD_INT 1
12612: PPUSH
12613: LD_VAR 0 14
12617: PPUSH
12618: CALL_OW 2
12622: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12623: LD_VAR 0 14
12627: PPUSH
12628: LD_VAR 0 12
12632: PUSH
12633: LD_INT 1
12635: ARRAY
12636: PPUSH
12637: CALL_OW 52
// end ;
12641: GO 12280
12643: POP
12644: POP
// end ;
12645: GO 11582
12647: POP
12648: POP
// result := result ^ buildings ;
12649: LD_ADDR_VAR 0 7
12653: PUSH
12654: LD_VAR 0 7
12658: PUSH
12659: LD_VAR 0 18
12663: ADD
12664: ST_TO_ADDR
// end else
12665: GO 12808
// begin for i = 1 to personel do
12667: LD_ADDR_VAR 0 8
12671: PUSH
12672: DOUBLE
12673: LD_INT 1
12675: DEC
12676: ST_TO_ADDR
12677: LD_VAR 0 6
12681: PUSH
12682: FOR_TO
12683: IFFALSE 12806
// begin if i > 4 then
12685: LD_VAR 0 8
12689: PUSH
12690: LD_INT 4
12692: GREATER
12693: IFFALSE 12697
// break ;
12695: GO 12806
// x := personel [ i ] ;
12697: LD_ADDR_VAR 0 13
12701: PUSH
12702: LD_VAR 0 6
12706: PUSH
12707: LD_VAR 0 8
12711: ARRAY
12712: ST_TO_ADDR
// if x = - 1 then
12713: LD_VAR 0 13
12717: PUSH
12718: LD_INT 1
12720: NEG
12721: EQUAL
12722: IFFALSE 12726
// continue ;
12724: GO 12682
// PrepareHuman ( false , i , skill ) ;
12726: LD_INT 0
12728: PPUSH
12729: LD_VAR 0 8
12733: PPUSH
12734: LD_VAR 0 4
12738: PPUSH
12739: CALL_OW 380
// un := CreateHuman ;
12743: LD_ADDR_VAR 0 14
12747: PUSH
12748: CALL_OW 44
12752: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12753: LD_VAR 0 14
12757: PPUSH
12758: LD_VAR 0 1
12762: PPUSH
12763: CALL_OW 250
12767: PPUSH
12768: LD_VAR 0 1
12772: PPUSH
12773: CALL_OW 251
12777: PPUSH
12778: LD_INT 10
12780: PPUSH
12781: LD_INT 0
12783: PPUSH
12784: CALL_OW 50
// result := result ^ un ;
12788: LD_ADDR_VAR 0 7
12792: PUSH
12793: LD_VAR 0 7
12797: PUSH
12798: LD_VAR 0 14
12802: ADD
12803: ST_TO_ADDR
// end ;
12804: GO 12682
12806: POP
12807: POP
// end ; end ;
12808: LD_VAR 0 7
12812: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12813: LD_INT 0
12815: PPUSH
12816: PPUSH
12817: PPUSH
12818: PPUSH
12819: PPUSH
12820: PPUSH
12821: PPUSH
12822: PPUSH
12823: PPUSH
12824: PPUSH
12825: PPUSH
12826: PPUSH
12827: PPUSH
12828: PPUSH
12829: PPUSH
12830: PPUSH
// result := false ;
12831: LD_ADDR_VAR 0 3
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12839: LD_VAR 0 1
12843: NOT
12844: PUSH
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 266
12854: PUSH
12855: LD_INT 32
12857: PUSH
12858: LD_INT 33
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: IN
12865: NOT
12866: OR
12867: IFFALSE 12871
// exit ;
12869: GO 14007
// nat := GetNation ( tower ) ;
12871: LD_ADDR_VAR 0 12
12875: PUSH
12876: LD_VAR 0 1
12880: PPUSH
12881: CALL_OW 248
12885: ST_TO_ADDR
// side := GetSide ( tower ) ;
12886: LD_ADDR_VAR 0 16
12890: PUSH
12891: LD_VAR 0 1
12895: PPUSH
12896: CALL_OW 255
12900: ST_TO_ADDR
// x := GetX ( tower ) ;
12901: LD_ADDR_VAR 0 10
12905: PUSH
12906: LD_VAR 0 1
12910: PPUSH
12911: CALL_OW 250
12915: ST_TO_ADDR
// y := GetY ( tower ) ;
12916: LD_ADDR_VAR 0 11
12920: PUSH
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 251
12930: ST_TO_ADDR
// if not x or not y then
12931: LD_VAR 0 10
12935: NOT
12936: PUSH
12937: LD_VAR 0 11
12941: NOT
12942: OR
12943: IFFALSE 12947
// exit ;
12945: GO 14007
// weapon := 0 ;
12947: LD_ADDR_VAR 0 18
12951: PUSH
12952: LD_INT 0
12954: ST_TO_ADDR
// fac_list := [ ] ;
12955: LD_ADDR_VAR 0 17
12959: PUSH
12960: EMPTY
12961: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
12962: LD_ADDR_VAR 0 6
12966: PUSH
12967: LD_VAR 0 1
12971: PPUSH
12972: CALL_OW 274
12976: PPUSH
12977: LD_VAR 0 2
12981: PPUSH
12982: CALL 10585 0 2
12986: PPUSH
12987: LD_INT 30
12989: PUSH
12990: LD_INT 3
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PPUSH
12997: CALL_OW 72
13001: ST_TO_ADDR
// if not factories then
13002: LD_VAR 0 6
13006: NOT
13007: IFFALSE 13011
// exit ;
13009: GO 14007
// for i in factories do
13011: LD_ADDR_VAR 0 8
13015: PUSH
13016: LD_VAR 0 6
13020: PUSH
13021: FOR_IN
13022: IFFALSE 13047
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13024: LD_ADDR_VAR 0 17
13028: PUSH
13029: LD_VAR 0 17
13033: PUSH
13034: LD_VAR 0 8
13038: PPUSH
13039: CALL_OW 478
13043: UNION
13044: ST_TO_ADDR
13045: GO 13021
13047: POP
13048: POP
// if not fac_list then
13049: LD_VAR 0 17
13053: NOT
13054: IFFALSE 13058
// exit ;
13056: GO 14007
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13058: LD_ADDR_VAR 0 5
13062: PUSH
13063: LD_INT 4
13065: PUSH
13066: LD_INT 5
13068: PUSH
13069: LD_INT 9
13071: PUSH
13072: LD_INT 10
13074: PUSH
13075: LD_INT 6
13077: PUSH
13078: LD_INT 7
13080: PUSH
13081: LD_INT 11
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: PUSH
13093: LD_INT 27
13095: PUSH
13096: LD_INT 28
13098: PUSH
13099: LD_INT 26
13101: PUSH
13102: LD_INT 30
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 43
13113: PUSH
13114: LD_INT 44
13116: PUSH
13117: LD_INT 46
13119: PUSH
13120: LD_INT 45
13122: PUSH
13123: LD_INT 47
13125: PUSH
13126: LD_INT 49
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_VAR 0 12
13146: ARRAY
13147: ST_TO_ADDR
// for i in list do
13148: LD_ADDR_VAR 0 8
13152: PUSH
13153: LD_VAR 0 5
13157: PUSH
13158: FOR_IN
13159: IFFALSE 13192
// if not i in fac_list then
13161: LD_VAR 0 8
13165: PUSH
13166: LD_VAR 0 17
13170: IN
13171: NOT
13172: IFFALSE 13190
// list := list diff i ;
13174: LD_ADDR_VAR 0 5
13178: PUSH
13179: LD_VAR 0 5
13183: PUSH
13184: LD_VAR 0 8
13188: DIFF
13189: ST_TO_ADDR
13190: GO 13158
13192: POP
13193: POP
// if not list then
13194: LD_VAR 0 5
13198: NOT
13199: IFFALSE 13203
// exit ;
13201: GO 14007
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13203: LD_VAR 0 12
13207: PUSH
13208: LD_INT 3
13210: EQUAL
13211: PUSH
13212: LD_INT 49
13214: PUSH
13215: LD_VAR 0 5
13219: IN
13220: AND
13221: PUSH
13222: LD_INT 31
13224: PPUSH
13225: LD_VAR 0 16
13229: PPUSH
13230: CALL_OW 321
13234: PUSH
13235: LD_INT 2
13237: EQUAL
13238: AND
13239: IFFALSE 13299
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13241: LD_INT 22
13243: PUSH
13244: LD_VAR 0 16
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 35
13255: PUSH
13256: LD_INT 49
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 91
13265: PUSH
13266: LD_VAR 0 1
13270: PUSH
13271: LD_INT 10
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: LIST
13283: PPUSH
13284: CALL_OW 69
13288: NOT
13289: IFFALSE 13299
// weapon := ru_time_lapser ;
13291: LD_ADDR_VAR 0 18
13295: PUSH
13296: LD_INT 49
13298: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13299: LD_VAR 0 12
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: IN
13314: PUSH
13315: LD_INT 11
13317: PUSH
13318: LD_VAR 0 5
13322: IN
13323: PUSH
13324: LD_INT 30
13326: PUSH
13327: LD_VAR 0 5
13331: IN
13332: OR
13333: AND
13334: PUSH
13335: LD_INT 6
13337: PPUSH
13338: LD_VAR 0 16
13342: PPUSH
13343: CALL_OW 321
13347: PUSH
13348: LD_INT 2
13350: EQUAL
13351: AND
13352: IFFALSE 13517
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13354: LD_INT 22
13356: PUSH
13357: LD_VAR 0 16
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 35
13371: PUSH
13372: LD_INT 11
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 35
13381: PUSH
13382: LD_INT 30
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 91
13396: PUSH
13397: LD_VAR 0 1
13401: PUSH
13402: LD_INT 18
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: LIST
13414: PPUSH
13415: CALL_OW 69
13419: NOT
13420: PUSH
13421: LD_INT 22
13423: PUSH
13424: LD_VAR 0 16
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 2
13435: PUSH
13436: LD_INT 30
13438: PUSH
13439: LD_INT 32
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 30
13448: PUSH
13449: LD_INT 33
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 91
13463: PUSH
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 12
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: PPUSH
13485: CALL_OW 69
13489: PUSH
13490: LD_INT 2
13492: GREATER
13493: AND
13494: IFFALSE 13517
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13496: LD_ADDR_VAR 0 18
13500: PUSH
13501: LD_INT 11
13503: PUSH
13504: LD_INT 30
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_VAR 0 12
13515: ARRAY
13516: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13517: LD_VAR 0 18
13521: NOT
13522: PUSH
13523: LD_INT 40
13525: PPUSH
13526: LD_VAR 0 16
13530: PPUSH
13531: CALL_OW 321
13535: PUSH
13536: LD_INT 2
13538: EQUAL
13539: AND
13540: PUSH
13541: LD_INT 7
13543: PUSH
13544: LD_VAR 0 5
13548: IN
13549: PUSH
13550: LD_INT 28
13552: PUSH
13553: LD_VAR 0 5
13557: IN
13558: OR
13559: PUSH
13560: LD_INT 45
13562: PUSH
13563: LD_VAR 0 5
13567: IN
13568: OR
13569: AND
13570: IFFALSE 13824
// begin hex := GetHexInfo ( x , y ) ;
13572: LD_ADDR_VAR 0 4
13576: PUSH
13577: LD_VAR 0 10
13581: PPUSH
13582: LD_VAR 0 11
13586: PPUSH
13587: CALL_OW 546
13591: ST_TO_ADDR
// if hex [ 1 ] then
13592: LD_VAR 0 4
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: IFFALSE 13604
// exit ;
13602: GO 14007
// height := hex [ 2 ] ;
13604: LD_ADDR_VAR 0 15
13608: PUSH
13609: LD_VAR 0 4
13613: PUSH
13614: LD_INT 2
13616: ARRAY
13617: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13618: LD_ADDR_VAR 0 14
13622: PUSH
13623: LD_INT 0
13625: PUSH
13626: LD_INT 2
13628: PUSH
13629: LD_INT 3
13631: PUSH
13632: LD_INT 5
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: ST_TO_ADDR
// for i in tmp do
13641: LD_ADDR_VAR 0 8
13645: PUSH
13646: LD_VAR 0 14
13650: PUSH
13651: FOR_IN
13652: IFFALSE 13822
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13654: LD_ADDR_VAR 0 9
13658: PUSH
13659: LD_VAR 0 10
13663: PPUSH
13664: LD_VAR 0 8
13668: PPUSH
13669: LD_INT 5
13671: PPUSH
13672: CALL_OW 272
13676: PUSH
13677: LD_VAR 0 11
13681: PPUSH
13682: LD_VAR 0 8
13686: PPUSH
13687: LD_INT 5
13689: PPUSH
13690: CALL_OW 273
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13699: LD_VAR 0 9
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: LD_VAR 0 9
13712: PUSH
13713: LD_INT 2
13715: ARRAY
13716: PPUSH
13717: CALL_OW 488
13721: IFFALSE 13820
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13723: LD_ADDR_VAR 0 4
13727: PUSH
13728: LD_VAR 0 9
13732: PUSH
13733: LD_INT 1
13735: ARRAY
13736: PPUSH
13737: LD_VAR 0 9
13741: PUSH
13742: LD_INT 2
13744: ARRAY
13745: PPUSH
13746: CALL_OW 546
13750: ST_TO_ADDR
// if hex [ 1 ] then
13751: LD_VAR 0 4
13755: PUSH
13756: LD_INT 1
13758: ARRAY
13759: IFFALSE 13763
// continue ;
13761: GO 13651
// h := hex [ 2 ] ;
13763: LD_ADDR_VAR 0 13
13767: PUSH
13768: LD_VAR 0 4
13772: PUSH
13773: LD_INT 2
13775: ARRAY
13776: ST_TO_ADDR
// if h + 7 < height then
13777: LD_VAR 0 13
13781: PUSH
13782: LD_INT 7
13784: PLUS
13785: PUSH
13786: LD_VAR 0 15
13790: LESS
13791: IFFALSE 13820
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13793: LD_ADDR_VAR 0 18
13797: PUSH
13798: LD_INT 7
13800: PUSH
13801: LD_INT 28
13803: PUSH
13804: LD_INT 45
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: LD_VAR 0 12
13816: ARRAY
13817: ST_TO_ADDR
// break ;
13818: GO 13822
// end ; end ; end ;
13820: GO 13651
13822: POP
13823: POP
// end ; if not weapon then
13824: LD_VAR 0 18
13828: NOT
13829: IFFALSE 13889
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13831: LD_ADDR_VAR 0 5
13835: PUSH
13836: LD_VAR 0 5
13840: PUSH
13841: LD_INT 11
13843: PUSH
13844: LD_INT 30
13846: PUSH
13847: LD_INT 49
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: DIFF
13855: ST_TO_ADDR
// if not list then
13856: LD_VAR 0 5
13860: NOT
13861: IFFALSE 13865
// exit ;
13863: GO 14007
// weapon := list [ rand ( 1 , list ) ] ;
13865: LD_ADDR_VAR 0 18
13869: PUSH
13870: LD_VAR 0 5
13874: PUSH
13875: LD_INT 1
13877: PPUSH
13878: LD_VAR 0 5
13882: PPUSH
13883: CALL_OW 12
13887: ARRAY
13888: ST_TO_ADDR
// end ; if weapon then
13889: LD_VAR 0 18
13893: IFFALSE 14007
// begin tmp := CostOfWeapon ( weapon ) ;
13895: LD_ADDR_VAR 0 14
13899: PUSH
13900: LD_VAR 0 18
13904: PPUSH
13905: CALL_OW 451
13909: ST_TO_ADDR
// j := GetBase ( tower ) ;
13910: LD_ADDR_VAR 0 9
13914: PUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 274
13924: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13925: LD_VAR 0 9
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 275
13937: PUSH
13938: LD_VAR 0 14
13942: PUSH
13943: LD_INT 1
13945: ARRAY
13946: GREATEREQUAL
13947: PUSH
13948: LD_VAR 0 9
13952: PPUSH
13953: LD_INT 2
13955: PPUSH
13956: CALL_OW 275
13960: PUSH
13961: LD_VAR 0 14
13965: PUSH
13966: LD_INT 2
13968: ARRAY
13969: GREATEREQUAL
13970: AND
13971: PUSH
13972: LD_VAR 0 9
13976: PPUSH
13977: LD_INT 3
13979: PPUSH
13980: CALL_OW 275
13984: PUSH
13985: LD_VAR 0 14
13989: PUSH
13990: LD_INT 3
13992: ARRAY
13993: GREATEREQUAL
13994: AND
13995: IFFALSE 14007
// result := weapon ;
13997: LD_ADDR_VAR 0 3
14001: PUSH
14002: LD_VAR 0 18
14006: ST_TO_ADDR
// end ; end ;
14007: LD_VAR 0 3
14011: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14012: LD_INT 0
14014: PPUSH
14015: PPUSH
// result := true ;
14016: LD_ADDR_VAR 0 3
14020: PUSH
14021: LD_INT 1
14023: ST_TO_ADDR
// if array1 = array2 then
14024: LD_VAR 0 1
14028: PUSH
14029: LD_VAR 0 2
14033: EQUAL
14034: IFFALSE 14094
// begin for i = 1 to array1 do
14036: LD_ADDR_VAR 0 4
14040: PUSH
14041: DOUBLE
14042: LD_INT 1
14044: DEC
14045: ST_TO_ADDR
14046: LD_VAR 0 1
14050: PUSH
14051: FOR_TO
14052: IFFALSE 14090
// if array1 [ i ] <> array2 [ i ] then
14054: LD_VAR 0 1
14058: PUSH
14059: LD_VAR 0 4
14063: ARRAY
14064: PUSH
14065: LD_VAR 0 2
14069: PUSH
14070: LD_VAR 0 4
14074: ARRAY
14075: NONEQUAL
14076: IFFALSE 14088
// begin result := false ;
14078: LD_ADDR_VAR 0 3
14082: PUSH
14083: LD_INT 0
14085: ST_TO_ADDR
// break ;
14086: GO 14090
// end ;
14088: GO 14051
14090: POP
14091: POP
// end else
14092: GO 14102
// result := false ;
14094: LD_ADDR_VAR 0 3
14098: PUSH
14099: LD_INT 0
14101: ST_TO_ADDR
// end ;
14102: LD_VAR 0 3
14106: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14107: LD_INT 0
14109: PPUSH
14110: PPUSH
14111: PPUSH
// pom := GetBase ( fac ) ;
14112: LD_ADDR_VAR 0 5
14116: PUSH
14117: LD_VAR 0 1
14121: PPUSH
14122: CALL_OW 274
14126: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14127: LD_ADDR_VAR 0 4
14131: PUSH
14132: LD_VAR 0 2
14136: PUSH
14137: LD_INT 1
14139: ARRAY
14140: PPUSH
14141: LD_VAR 0 2
14145: PUSH
14146: LD_INT 2
14148: ARRAY
14149: PPUSH
14150: LD_VAR 0 2
14154: PUSH
14155: LD_INT 3
14157: ARRAY
14158: PPUSH
14159: LD_VAR 0 2
14163: PUSH
14164: LD_INT 4
14166: ARRAY
14167: PPUSH
14168: CALL_OW 449
14172: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14173: LD_ADDR_VAR 0 3
14177: PUSH
14178: LD_VAR 0 5
14182: PPUSH
14183: LD_INT 1
14185: PPUSH
14186: CALL_OW 275
14190: PUSH
14191: LD_VAR 0 4
14195: PUSH
14196: LD_INT 1
14198: ARRAY
14199: GREATEREQUAL
14200: PUSH
14201: LD_VAR 0 5
14205: PPUSH
14206: LD_INT 2
14208: PPUSH
14209: CALL_OW 275
14213: PUSH
14214: LD_VAR 0 4
14218: PUSH
14219: LD_INT 2
14221: ARRAY
14222: GREATEREQUAL
14223: AND
14224: PUSH
14225: LD_VAR 0 5
14229: PPUSH
14230: LD_INT 3
14232: PPUSH
14233: CALL_OW 275
14237: PUSH
14238: LD_VAR 0 4
14242: PUSH
14243: LD_INT 3
14245: ARRAY
14246: GREATEREQUAL
14247: AND
14248: ST_TO_ADDR
// end ;
14249: LD_VAR 0 3
14253: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14254: LD_INT 0
14256: PPUSH
14257: PPUSH
14258: PPUSH
14259: PPUSH
// pom := GetBase ( building ) ;
14260: LD_ADDR_VAR 0 3
14264: PUSH
14265: LD_VAR 0 1
14269: PPUSH
14270: CALL_OW 274
14274: ST_TO_ADDR
// if not pom then
14275: LD_VAR 0 3
14279: NOT
14280: IFFALSE 14284
// exit ;
14282: GO 14454
// btype := GetBType ( building ) ;
14284: LD_ADDR_VAR 0 5
14288: PUSH
14289: LD_VAR 0 1
14293: PPUSH
14294: CALL_OW 266
14298: ST_TO_ADDR
// if btype = b_armoury then
14299: LD_VAR 0 5
14303: PUSH
14304: LD_INT 4
14306: EQUAL
14307: IFFALSE 14317
// btype := b_barracks ;
14309: LD_ADDR_VAR 0 5
14313: PUSH
14314: LD_INT 5
14316: ST_TO_ADDR
// if btype = b_depot then
14317: LD_VAR 0 5
14321: PUSH
14322: LD_INT 0
14324: EQUAL
14325: IFFALSE 14335
// btype := b_warehouse ;
14327: LD_ADDR_VAR 0 5
14331: PUSH
14332: LD_INT 1
14334: ST_TO_ADDR
// if btype = b_workshop then
14335: LD_VAR 0 5
14339: PUSH
14340: LD_INT 2
14342: EQUAL
14343: IFFALSE 14353
// btype := b_factory ;
14345: LD_ADDR_VAR 0 5
14349: PUSH
14350: LD_INT 3
14352: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14353: LD_ADDR_VAR 0 4
14357: PUSH
14358: LD_VAR 0 5
14362: PPUSH
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 248
14372: PPUSH
14373: CALL_OW 450
14377: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14378: LD_ADDR_VAR 0 2
14382: PUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: LD_INT 1
14390: PPUSH
14391: CALL_OW 275
14395: PUSH
14396: LD_VAR 0 4
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: GREATEREQUAL
14405: PUSH
14406: LD_VAR 0 3
14410: PPUSH
14411: LD_INT 2
14413: PPUSH
14414: CALL_OW 275
14418: PUSH
14419: LD_VAR 0 4
14423: PUSH
14424: LD_INT 2
14426: ARRAY
14427: GREATEREQUAL
14428: AND
14429: PUSH
14430: LD_VAR 0 3
14434: PPUSH
14435: LD_INT 3
14437: PPUSH
14438: CALL_OW 275
14442: PUSH
14443: LD_VAR 0 4
14447: PUSH
14448: LD_INT 3
14450: ARRAY
14451: GREATEREQUAL
14452: AND
14453: ST_TO_ADDR
// end ;
14454: LD_VAR 0 2
14458: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14459: LD_INT 0
14461: PPUSH
14462: PPUSH
14463: PPUSH
// pom := GetBase ( building ) ;
14464: LD_ADDR_VAR 0 4
14468: PUSH
14469: LD_VAR 0 1
14473: PPUSH
14474: CALL_OW 274
14478: ST_TO_ADDR
// if not pom then
14479: LD_VAR 0 4
14483: NOT
14484: IFFALSE 14488
// exit ;
14486: GO 14589
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14488: LD_ADDR_VAR 0 5
14492: PUSH
14493: LD_VAR 0 2
14497: PPUSH
14498: LD_VAR 0 1
14502: PPUSH
14503: CALL_OW 248
14507: PPUSH
14508: CALL_OW 450
14512: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14513: LD_ADDR_VAR 0 3
14517: PUSH
14518: LD_VAR 0 4
14522: PPUSH
14523: LD_INT 1
14525: PPUSH
14526: CALL_OW 275
14530: PUSH
14531: LD_VAR 0 5
14535: PUSH
14536: LD_INT 1
14538: ARRAY
14539: GREATEREQUAL
14540: PUSH
14541: LD_VAR 0 4
14545: PPUSH
14546: LD_INT 2
14548: PPUSH
14549: CALL_OW 275
14553: PUSH
14554: LD_VAR 0 5
14558: PUSH
14559: LD_INT 2
14561: ARRAY
14562: GREATEREQUAL
14563: AND
14564: PUSH
14565: LD_VAR 0 4
14569: PPUSH
14570: LD_INT 3
14572: PPUSH
14573: CALL_OW 275
14577: PUSH
14578: LD_VAR 0 5
14582: PUSH
14583: LD_INT 3
14585: ARRAY
14586: GREATEREQUAL
14587: AND
14588: ST_TO_ADDR
// end ;
14589: LD_VAR 0 3
14593: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
14594: LD_INT 0
14596: PPUSH
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
14603: PPUSH
14604: PPUSH
14605: PPUSH
// result := false ;
14606: LD_ADDR_VAR 0 6
14610: PUSH
14611: LD_INT 0
14613: ST_TO_ADDR
// if not base or not btype or not x or not y then
14614: LD_VAR 0 1
14618: NOT
14619: PUSH
14620: LD_VAR 0 2
14624: NOT
14625: OR
14626: PUSH
14627: LD_VAR 0 3
14631: NOT
14632: OR
14633: PUSH
14634: LD_VAR 0 4
14638: NOT
14639: OR
14640: IFFALSE 14644
// exit ;
14642: GO 15253
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
14644: LD_ADDR_VAR 0 12
14648: PUSH
14649: LD_VAR 0 2
14653: PPUSH
14654: LD_VAR 0 3
14658: PPUSH
14659: LD_VAR 0 4
14663: PPUSH
14664: LD_VAR 0 5
14668: PPUSH
14669: LD_VAR 0 1
14673: PUSH
14674: LD_INT 1
14676: ARRAY
14677: PPUSH
14678: CALL_OW 248
14682: PPUSH
14683: LD_INT 0
14685: PPUSH
14686: CALL 16090 0 6
14690: ST_TO_ADDR
// if not hexes then
14691: LD_VAR 0 12
14695: NOT
14696: IFFALSE 14700
// exit ;
14698: GO 15253
// for i = 1 to hexes do
14700: LD_ADDR_VAR 0 7
14704: PUSH
14705: DOUBLE
14706: LD_INT 1
14708: DEC
14709: ST_TO_ADDR
14710: LD_VAR 0 12
14714: PUSH
14715: FOR_TO
14716: IFFALSE 15251
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14718: LD_ADDR_VAR 0 11
14722: PUSH
14723: LD_VAR 0 12
14727: PUSH
14728: LD_VAR 0 7
14732: ARRAY
14733: PUSH
14734: LD_INT 1
14736: ARRAY
14737: PPUSH
14738: LD_VAR 0 12
14742: PUSH
14743: LD_VAR 0 7
14747: ARRAY
14748: PUSH
14749: LD_INT 2
14751: ARRAY
14752: PPUSH
14753: CALL_OW 428
14757: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14758: LD_VAR 0 12
14762: PUSH
14763: LD_VAR 0 7
14767: ARRAY
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PPUSH
14773: LD_VAR 0 12
14777: PUSH
14778: LD_VAR 0 7
14782: ARRAY
14783: PUSH
14784: LD_INT 2
14786: ARRAY
14787: PPUSH
14788: CALL_OW 351
14792: PUSH
14793: LD_VAR 0 12
14797: PUSH
14798: LD_VAR 0 7
14802: ARRAY
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: LD_VAR 0 12
14812: PUSH
14813: LD_VAR 0 7
14817: ARRAY
14818: PUSH
14819: LD_INT 2
14821: ARRAY
14822: PPUSH
14823: CALL_OW 488
14827: NOT
14828: OR
14829: PUSH
14830: LD_VAR 0 11
14834: PPUSH
14835: CALL_OW 247
14839: PUSH
14840: LD_INT 3
14842: EQUAL
14843: OR
14844: IFFALSE 14850
// exit ;
14846: POP
14847: POP
14848: GO 15253
// if not tmp or not tmp in base then
14850: LD_VAR 0 11
14854: NOT
14855: PUSH
14856: LD_VAR 0 11
14860: PUSH
14861: LD_VAR 0 1
14865: IN
14866: NOT
14867: OR
14868: IFFALSE 14872
// continue ;
14870: GO 14715
// result := true ;
14872: LD_ADDR_VAR 0 6
14876: PUSH
14877: LD_INT 1
14879: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14880: LD_ADDR_VAR 0 15
14884: PUSH
14885: LD_VAR 0 1
14889: PPUSH
14890: LD_INT 22
14892: PUSH
14893: LD_VAR 0 11
14897: PPUSH
14898: CALL_OW 255
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 2
14909: PUSH
14910: LD_INT 30
14912: PUSH
14913: LD_INT 0
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: LD_INT 30
14922: PUSH
14923: LD_INT 1
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PPUSH
14939: CALL_OW 72
14943: ST_TO_ADDR
// if dep then
14944: LD_VAR 0 15
14948: IFFALSE 15084
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14950: LD_ADDR_VAR 0 14
14954: PUSH
14955: LD_VAR 0 15
14959: PUSH
14960: LD_INT 1
14962: ARRAY
14963: PPUSH
14964: CALL_OW 250
14968: PPUSH
14969: LD_VAR 0 15
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PPUSH
14978: CALL_OW 254
14982: PPUSH
14983: LD_INT 5
14985: PPUSH
14986: CALL_OW 272
14990: PUSH
14991: LD_VAR 0 15
14995: PUSH
14996: LD_INT 1
14998: ARRAY
14999: PPUSH
15000: CALL_OW 251
15004: PPUSH
15005: LD_VAR 0 15
15009: PUSH
15010: LD_INT 1
15012: ARRAY
15013: PPUSH
15014: CALL_OW 254
15018: PPUSH
15019: LD_INT 5
15021: PPUSH
15022: CALL_OW 273
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15031: LD_VAR 0 14
15035: PUSH
15036: LD_INT 1
15038: ARRAY
15039: PPUSH
15040: LD_VAR 0 14
15044: PUSH
15045: LD_INT 2
15047: ARRAY
15048: PPUSH
15049: CALL_OW 488
15053: IFFALSE 15084
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15055: LD_VAR 0 11
15059: PPUSH
15060: LD_VAR 0 14
15064: PUSH
15065: LD_INT 1
15067: ARRAY
15068: PPUSH
15069: LD_VAR 0 14
15073: PUSH
15074: LD_INT 2
15076: ARRAY
15077: PPUSH
15078: CALL_OW 111
// continue ;
15082: GO 14715
// end ; end ; r := GetDir ( tmp ) ;
15084: LD_ADDR_VAR 0 13
15088: PUSH
15089: LD_VAR 0 11
15093: PPUSH
15094: CALL_OW 254
15098: ST_TO_ADDR
// if r = 5 then
15099: LD_VAR 0 13
15103: PUSH
15104: LD_INT 5
15106: EQUAL
15107: IFFALSE 15117
// r := 0 ;
15109: LD_ADDR_VAR 0 13
15113: PUSH
15114: LD_INT 0
15116: ST_TO_ADDR
// for j = r to 5 do
15117: LD_ADDR_VAR 0 8
15121: PUSH
15122: DOUBLE
15123: LD_VAR 0 13
15127: DEC
15128: ST_TO_ADDR
15129: LD_INT 5
15131: PUSH
15132: FOR_TO
15133: IFFALSE 15247
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15135: LD_ADDR_VAR 0 9
15139: PUSH
15140: LD_VAR 0 11
15144: PPUSH
15145: CALL_OW 250
15149: PPUSH
15150: LD_VAR 0 8
15154: PPUSH
15155: LD_INT 2
15157: PPUSH
15158: CALL_OW 272
15162: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15163: LD_ADDR_VAR 0 10
15167: PUSH
15168: LD_VAR 0 11
15172: PPUSH
15173: CALL_OW 251
15177: PPUSH
15178: LD_VAR 0 8
15182: PPUSH
15183: LD_INT 2
15185: PPUSH
15186: CALL_OW 273
15190: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15191: LD_VAR 0 9
15195: PPUSH
15196: LD_VAR 0 10
15200: PPUSH
15201: CALL_OW 488
15205: PUSH
15206: LD_VAR 0 9
15210: PPUSH
15211: LD_VAR 0 10
15215: PPUSH
15216: CALL_OW 428
15220: NOT
15221: AND
15222: IFFALSE 15245
// begin ComMoveXY ( tmp , _x , _y ) ;
15224: LD_VAR 0 11
15228: PPUSH
15229: LD_VAR 0 9
15233: PPUSH
15234: LD_VAR 0 10
15238: PPUSH
15239: CALL_OW 111
// break ;
15243: GO 15247
// end ; end ;
15245: GO 15132
15247: POP
15248: POP
// end ;
15249: GO 14715
15251: POP
15252: POP
// end ;
15253: LD_VAR 0 6
15257: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
15258: LD_INT 0
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
// result := false ;
15270: LD_ADDR_VAR 0 6
15274: PUSH
15275: LD_INT 0
15277: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15278: LD_VAR 0 1
15282: NOT
15283: PUSH
15284: LD_VAR 0 1
15288: PPUSH
15289: CALL_OW 266
15293: PUSH
15294: LD_INT 0
15296: PUSH
15297: LD_INT 1
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: IN
15304: NOT
15305: OR
15306: PUSH
15307: LD_VAR 0 2
15311: NOT
15312: OR
15313: PUSH
15314: LD_VAR 0 5
15318: PUSH
15319: LD_INT 0
15321: PUSH
15322: LD_INT 1
15324: PUSH
15325: LD_INT 2
15327: PUSH
15328: LD_INT 3
15330: PUSH
15331: LD_INT 4
15333: PUSH
15334: LD_INT 5
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: IN
15345: NOT
15346: OR
15347: PUSH
15348: LD_VAR 0 3
15352: PPUSH
15353: LD_VAR 0 4
15357: PPUSH
15358: CALL_OW 488
15362: NOT
15363: OR
15364: IFFALSE 15368
// exit ;
15366: GO 16085
// pom := GetBase ( depot ) ;
15368: LD_ADDR_VAR 0 10
15372: PUSH
15373: LD_VAR 0 1
15377: PPUSH
15378: CALL_OW 274
15382: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15383: LD_ADDR_VAR 0 11
15387: PUSH
15388: LD_VAR 0 2
15392: PPUSH
15393: LD_VAR 0 1
15397: PPUSH
15398: CALL_OW 248
15402: PPUSH
15403: CALL_OW 450
15407: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15408: LD_VAR 0 10
15412: PPUSH
15413: LD_INT 1
15415: PPUSH
15416: CALL_OW 275
15420: PUSH
15421: LD_VAR 0 11
15425: PUSH
15426: LD_INT 1
15428: ARRAY
15429: GREATEREQUAL
15430: PUSH
15431: LD_VAR 0 10
15435: PPUSH
15436: LD_INT 2
15438: PPUSH
15439: CALL_OW 275
15443: PUSH
15444: LD_VAR 0 11
15448: PUSH
15449: LD_INT 2
15451: ARRAY
15452: GREATEREQUAL
15453: AND
15454: PUSH
15455: LD_VAR 0 10
15459: PPUSH
15460: LD_INT 3
15462: PPUSH
15463: CALL_OW 275
15467: PUSH
15468: LD_VAR 0 11
15472: PUSH
15473: LD_INT 3
15475: ARRAY
15476: GREATEREQUAL
15477: AND
15478: NOT
15479: IFFALSE 15483
// exit ;
15481: GO 16085
// if GetBType ( depot ) = b_depot then
15483: LD_VAR 0 1
15487: PPUSH
15488: CALL_OW 266
15492: PUSH
15493: LD_INT 0
15495: EQUAL
15496: IFFALSE 15508
// dist := 28 else
15498: LD_ADDR_VAR 0 14
15502: PUSH
15503: LD_INT 28
15505: ST_TO_ADDR
15506: GO 15516
// dist := 36 ;
15508: LD_ADDR_VAR 0 14
15512: PUSH
15513: LD_INT 36
15515: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15516: LD_VAR 0 1
15520: PPUSH
15521: LD_VAR 0 3
15525: PPUSH
15526: LD_VAR 0 4
15530: PPUSH
15531: CALL_OW 297
15535: PUSH
15536: LD_VAR 0 14
15540: GREATER
15541: IFFALSE 15545
// exit ;
15543: GO 16085
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15545: LD_ADDR_VAR 0 12
15549: PUSH
15550: LD_VAR 0 2
15554: PPUSH
15555: LD_VAR 0 3
15559: PPUSH
15560: LD_VAR 0 4
15564: PPUSH
15565: LD_VAR 0 5
15569: PPUSH
15570: LD_VAR 0 1
15574: PPUSH
15575: CALL_OW 248
15579: PPUSH
15580: LD_INT 0
15582: PPUSH
15583: CALL 16090 0 6
15587: ST_TO_ADDR
// if not hexes then
15588: LD_VAR 0 12
15592: NOT
15593: IFFALSE 15597
// exit ;
15595: GO 16085
// hex := GetHexInfo ( x , y ) ;
15597: LD_ADDR_VAR 0 15
15601: PUSH
15602: LD_VAR 0 3
15606: PPUSH
15607: LD_VAR 0 4
15611: PPUSH
15612: CALL_OW 546
15616: ST_TO_ADDR
// if hex [ 1 ] then
15617: LD_VAR 0 15
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: IFFALSE 15629
// exit ;
15627: GO 16085
// height := hex [ 2 ] ;
15629: LD_ADDR_VAR 0 13
15633: PUSH
15634: LD_VAR 0 15
15638: PUSH
15639: LD_INT 2
15641: ARRAY
15642: ST_TO_ADDR
// for i = 1 to hexes do
15643: LD_ADDR_VAR 0 7
15647: PUSH
15648: DOUBLE
15649: LD_INT 1
15651: DEC
15652: ST_TO_ADDR
15653: LD_VAR 0 12
15657: PUSH
15658: FOR_TO
15659: IFFALSE 15989
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15661: LD_VAR 0 12
15665: PUSH
15666: LD_VAR 0 7
15670: ARRAY
15671: PUSH
15672: LD_INT 1
15674: ARRAY
15675: PPUSH
15676: LD_VAR 0 12
15680: PUSH
15681: LD_VAR 0 7
15685: ARRAY
15686: PUSH
15687: LD_INT 2
15689: ARRAY
15690: PPUSH
15691: CALL_OW 488
15695: NOT
15696: PUSH
15697: LD_VAR 0 12
15701: PUSH
15702: LD_VAR 0 7
15706: ARRAY
15707: PUSH
15708: LD_INT 1
15710: ARRAY
15711: PPUSH
15712: LD_VAR 0 12
15716: PUSH
15717: LD_VAR 0 7
15721: ARRAY
15722: PUSH
15723: LD_INT 2
15725: ARRAY
15726: PPUSH
15727: CALL_OW 428
15731: PUSH
15732: LD_INT 0
15734: GREATER
15735: OR
15736: PUSH
15737: LD_VAR 0 12
15741: PUSH
15742: LD_VAR 0 7
15746: ARRAY
15747: PUSH
15748: LD_INT 1
15750: ARRAY
15751: PPUSH
15752: LD_VAR 0 12
15756: PUSH
15757: LD_VAR 0 7
15761: ARRAY
15762: PUSH
15763: LD_INT 2
15765: ARRAY
15766: PPUSH
15767: CALL_OW 351
15771: OR
15772: IFFALSE 15778
// exit ;
15774: POP
15775: POP
15776: GO 16085
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15778: LD_ADDR_VAR 0 8
15782: PUSH
15783: LD_VAR 0 12
15787: PUSH
15788: LD_VAR 0 7
15792: ARRAY
15793: PUSH
15794: LD_INT 1
15796: ARRAY
15797: PPUSH
15798: LD_VAR 0 12
15802: PUSH
15803: LD_VAR 0 7
15807: ARRAY
15808: PUSH
15809: LD_INT 2
15811: ARRAY
15812: PPUSH
15813: CALL_OW 546
15817: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15818: LD_VAR 0 8
15822: PUSH
15823: LD_INT 1
15825: ARRAY
15826: PUSH
15827: LD_VAR 0 8
15831: PUSH
15832: LD_INT 2
15834: ARRAY
15835: PUSH
15836: LD_VAR 0 13
15840: PUSH
15841: LD_INT 2
15843: PLUS
15844: GREATER
15845: OR
15846: PUSH
15847: LD_VAR 0 8
15851: PUSH
15852: LD_INT 2
15854: ARRAY
15855: PUSH
15856: LD_VAR 0 13
15860: PUSH
15861: LD_INT 2
15863: MINUS
15864: LESS
15865: OR
15866: PUSH
15867: LD_VAR 0 8
15871: PUSH
15872: LD_INT 3
15874: ARRAY
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: LD_INT 8
15881: PUSH
15882: LD_INT 9
15884: PUSH
15885: LD_INT 10
15887: PUSH
15888: LD_INT 11
15890: PUSH
15891: LD_INT 12
15893: PUSH
15894: LD_INT 13
15896: PUSH
15897: LD_INT 16
15899: PUSH
15900: LD_INT 17
15902: PUSH
15903: LD_INT 18
15905: PUSH
15906: LD_INT 19
15908: PUSH
15909: LD_INT 20
15911: PUSH
15912: LD_INT 21
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: IN
15930: NOT
15931: OR
15932: PUSH
15933: LD_VAR 0 8
15937: PUSH
15938: LD_INT 5
15940: ARRAY
15941: NOT
15942: OR
15943: PUSH
15944: LD_VAR 0 8
15948: PUSH
15949: LD_INT 6
15951: ARRAY
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: LD_INT 7
15961: PUSH
15962: LD_INT 9
15964: PUSH
15965: LD_INT 10
15967: PUSH
15968: LD_INT 11
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: IN
15979: NOT
15980: OR
15981: IFFALSE 15987
// exit ;
15983: POP
15984: POP
15985: GO 16085
// end ;
15987: GO 15658
15989: POP
15990: POP
// side := GetSide ( depot ) ;
15991: LD_ADDR_VAR 0 9
15995: PUSH
15996: LD_VAR 0 1
16000: PPUSH
16001: CALL_OW 255
16005: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16006: LD_VAR 0 9
16010: PPUSH
16011: LD_VAR 0 3
16015: PPUSH
16016: LD_VAR 0 4
16020: PPUSH
16021: LD_INT 20
16023: PPUSH
16024: CALL 8739 0 4
16028: PUSH
16029: LD_INT 4
16031: ARRAY
16032: IFFALSE 16036
// exit ;
16034: GO 16085
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16036: LD_VAR 0 2
16040: PUSH
16041: LD_INT 29
16043: PUSH
16044: LD_INT 30
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: IN
16051: PUSH
16052: LD_VAR 0 3
16056: PPUSH
16057: LD_VAR 0 4
16061: PPUSH
16062: LD_VAR 0 9
16066: PPUSH
16067: CALL_OW 440
16071: NOT
16072: AND
16073: IFFALSE 16077
// exit ;
16075: GO 16085
// result := true ;
16077: LD_ADDR_VAR 0 6
16081: PUSH
16082: LD_INT 1
16084: ST_TO_ADDR
// end ;
16085: LD_VAR 0 6
16089: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16090: LD_INT 0
16092: PPUSH
16093: PPUSH
16094: PPUSH
16095: PPUSH
16096: PPUSH
16097: PPUSH
16098: PPUSH
16099: PPUSH
16100: PPUSH
16101: PPUSH
16102: PPUSH
16103: PPUSH
16104: PPUSH
16105: PPUSH
16106: PPUSH
16107: PPUSH
16108: PPUSH
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
16120: PPUSH
16121: PPUSH
16122: PPUSH
16123: PPUSH
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
16128: PPUSH
16129: PPUSH
16130: PPUSH
16131: PPUSH
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
16142: PPUSH
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
16149: PPUSH
// result = [ ] ;
16150: LD_ADDR_VAR 0 7
16154: PUSH
16155: EMPTY
16156: ST_TO_ADDR
// temp_list = [ ] ;
16157: LD_ADDR_VAR 0 9
16161: PUSH
16162: EMPTY
16163: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16164: LD_VAR 0 4
16168: PUSH
16169: LD_INT 0
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: LD_INT 2
16177: PUSH
16178: LD_INT 3
16180: PUSH
16181: LD_INT 4
16183: PUSH
16184: LD_INT 5
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: IN
16195: NOT
16196: PUSH
16197: LD_VAR 0 1
16201: PUSH
16202: LD_INT 0
16204: PUSH
16205: LD_INT 1
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: IN
16212: PUSH
16213: LD_VAR 0 5
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: LD_INT 3
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: IN
16232: NOT
16233: AND
16234: OR
16235: IFFALSE 16239
// exit ;
16237: GO 34630
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16239: LD_VAR 0 1
16243: PUSH
16244: LD_INT 6
16246: PUSH
16247: LD_INT 7
16249: PUSH
16250: LD_INT 8
16252: PUSH
16253: LD_INT 13
16255: PUSH
16256: LD_INT 12
16258: PUSH
16259: LD_INT 15
16261: PUSH
16262: LD_INT 11
16264: PUSH
16265: LD_INT 14
16267: PUSH
16268: LD_INT 10
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: IN
16282: IFFALSE 16292
// btype = b_lab ;
16284: LD_ADDR_VAR 0 1
16288: PUSH
16289: LD_INT 6
16291: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16292: LD_VAR 0 6
16296: PUSH
16297: LD_INT 0
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: LD_INT 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: IN
16311: NOT
16312: PUSH
16313: LD_VAR 0 1
16317: PUSH
16318: LD_INT 0
16320: PUSH
16321: LD_INT 1
16323: PUSH
16324: LD_INT 2
16326: PUSH
16327: LD_INT 3
16329: PUSH
16330: LD_INT 6
16332: PUSH
16333: LD_INT 36
16335: PUSH
16336: LD_INT 4
16338: PUSH
16339: LD_INT 5
16341: PUSH
16342: LD_INT 31
16344: PUSH
16345: LD_INT 32
16347: PUSH
16348: LD_INT 33
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: IN
16364: NOT
16365: PUSH
16366: LD_VAR 0 6
16370: PUSH
16371: LD_INT 1
16373: EQUAL
16374: AND
16375: OR
16376: PUSH
16377: LD_VAR 0 1
16381: PUSH
16382: LD_INT 2
16384: PUSH
16385: LD_INT 3
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: IN
16392: NOT
16393: PUSH
16394: LD_VAR 0 6
16398: PUSH
16399: LD_INT 2
16401: EQUAL
16402: AND
16403: OR
16404: IFFALSE 16414
// mode = 0 ;
16406: LD_ADDR_VAR 0 6
16410: PUSH
16411: LD_INT 0
16413: ST_TO_ADDR
// case mode of 0 :
16414: LD_VAR 0 6
16418: PUSH
16419: LD_INT 0
16421: DOUBLE
16422: EQUAL
16423: IFTRUE 16427
16425: GO 27880
16427: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16428: LD_ADDR_VAR 0 11
16432: PUSH
16433: LD_INT 0
16435: PUSH
16436: LD_INT 0
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: LD_INT 1
16448: NEG
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 1
16456: PUSH
16457: LD_INT 0
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 1
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 0
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: LD_INT 0
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 1
16509: NEG
16510: PUSH
16511: LD_INT 2
16513: NEG
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 0
16521: PUSH
16522: LD_INT 2
16524: NEG
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: LD_INT 1
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 0
16553: PUSH
16554: LD_INT 2
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: NEG
16564: PUSH
16565: LD_INT 1
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 1
16574: PUSH
16575: LD_INT 3
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 0
16584: PUSH
16585: LD_INT 3
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 1
16594: NEG
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16621: LD_ADDR_VAR 0 12
16625: PUSH
16626: LD_INT 0
16628: PUSH
16629: LD_INT 0
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: LD_INT 1
16641: NEG
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: LD_INT 0
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 1
16659: PUSH
16660: LD_INT 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 0
16669: PUSH
16670: LD_INT 1
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 1
16679: NEG
16680: PUSH
16681: LD_INT 0
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 1
16690: NEG
16691: PUSH
16692: LD_INT 1
16694: NEG
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 1
16702: PUSH
16703: LD_INT 1
16705: NEG
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 0
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 2
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 1
16733: NEG
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 2
16744: NEG
16745: PUSH
16746: LD_INT 0
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 2
16755: NEG
16756: PUSH
16757: LD_INT 1
16759: NEG
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 2
16767: NEG
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 3
16778: NEG
16779: PUSH
16780: LD_INT 0
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 3
16789: NEG
16790: PUSH
16791: LD_INT 1
16793: NEG
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16817: LD_ADDR_VAR 0 13
16821: PUSH
16822: LD_INT 0
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 0
16834: PUSH
16835: LD_INT 1
16837: NEG
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 1
16845: PUSH
16846: LD_INT 0
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 1
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 0
16865: PUSH
16866: LD_INT 1
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 1
16875: NEG
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 1
16886: NEG
16887: PUSH
16888: LD_INT 1
16890: NEG
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 1
16898: NEG
16899: PUSH
16900: LD_INT 2
16902: NEG
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 2
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 2
16920: PUSH
16921: LD_INT 2
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 1
16930: PUSH
16931: LD_INT 2
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 2
16940: NEG
16941: PUSH
16942: LD_INT 1
16944: NEG
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 2
16952: NEG
16953: PUSH
16954: LD_INT 2
16956: NEG
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 2
16964: NEG
16965: PUSH
16966: LD_INT 3
16968: NEG
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 3
16976: NEG
16977: PUSH
16978: LD_INT 2
16980: NEG
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 3
16988: NEG
16989: PUSH
16990: LD_INT 3
16992: NEG
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17016: LD_ADDR_VAR 0 14
17020: PUSH
17021: LD_INT 0
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: LD_INT 1
17036: NEG
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 1
17044: PUSH
17045: LD_INT 0
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 0
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 1
17074: NEG
17075: PUSH
17076: LD_INT 0
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 1
17085: NEG
17086: PUSH
17087: LD_INT 1
17089: NEG
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 1
17097: NEG
17098: PUSH
17099: LD_INT 2
17101: NEG
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 0
17109: PUSH
17110: LD_INT 2
17112: NEG
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: LD_INT 1
17123: NEG
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 1
17131: PUSH
17132: LD_INT 2
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 0
17141: PUSH
17142: LD_INT 2
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 1
17151: NEG
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 1
17162: NEG
17163: PUSH
17164: LD_INT 3
17166: NEG
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 0
17174: PUSH
17175: LD_INT 3
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 1
17185: PUSH
17186: LD_INT 2
17188: NEG
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17212: LD_ADDR_VAR 0 15
17216: PUSH
17217: LD_INT 0
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 0
17229: PUSH
17230: LD_INT 1
17232: NEG
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 1
17240: PUSH
17241: LD_INT 0
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 1
17250: PUSH
17251: LD_INT 1
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 0
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 1
17270: NEG
17271: PUSH
17272: LD_INT 0
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 1
17281: NEG
17282: PUSH
17283: LD_INT 1
17285: NEG
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: LD_INT 1
17296: NEG
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 2
17304: PUSH
17305: LD_INT 0
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 1
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 1
17324: NEG
17325: PUSH
17326: LD_INT 1
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 2
17335: NEG
17336: PUSH
17337: LD_INT 0
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 2
17346: NEG
17347: PUSH
17348: LD_INT 1
17350: NEG
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 2
17358: PUSH
17359: LD_INT 1
17361: NEG
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 3
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17405: LD_ADDR_VAR 0 16
17409: PUSH
17410: LD_INT 0
17412: PUSH
17413: LD_INT 0
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: LD_INT 1
17425: NEG
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 1
17433: PUSH
17434: LD_INT 0
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 1
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 0
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 1
17463: NEG
17464: PUSH
17465: LD_INT 0
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: NEG
17475: PUSH
17476: LD_INT 1
17478: NEG
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 1
17486: NEG
17487: PUSH
17488: LD_INT 2
17490: NEG
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 2
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 2
17508: PUSH
17509: LD_INT 2
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: LD_INT 2
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 2
17528: NEG
17529: PUSH
17530: LD_INT 1
17532: NEG
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 2
17540: NEG
17541: PUSH
17542: LD_INT 2
17544: NEG
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 3
17552: PUSH
17553: LD_INT 2
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 3
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17598: LD_ADDR_VAR 0 17
17602: PUSH
17603: LD_INT 0
17605: PUSH
17606: LD_INT 0
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 0
17615: PUSH
17616: LD_INT 1
17618: NEG
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: LD_INT 0
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 1
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 0
17646: PUSH
17647: LD_INT 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: LD_INT 1
17671: NEG
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 1
17679: NEG
17680: PUSH
17681: LD_INT 2
17683: NEG
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 0
17691: PUSH
17692: LD_INT 2
17694: NEG
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 1
17702: PUSH
17703: LD_INT 1
17705: NEG
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 2
17733: PUSH
17734: LD_INT 2
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 0
17753: PUSH
17754: LD_INT 2
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 1
17763: NEG
17764: PUSH
17765: LD_INT 1
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 2
17774: NEG
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 2
17785: NEG
17786: PUSH
17787: LD_INT 1
17789: NEG
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 2
17797: NEG
17798: PUSH
17799: LD_INT 2
17801: NEG
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17828: LD_ADDR_VAR 0 18
17832: PUSH
17833: LD_INT 0
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: LD_INT 1
17848: NEG
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 0
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 1
17866: PUSH
17867: LD_INT 1
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: LD_INT 1
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: LD_INT 0
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: NEG
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: NEG
17910: PUSH
17911: LD_INT 2
17913: NEG
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: LD_INT 2
17924: NEG
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: LD_INT 1
17935: NEG
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 2
17963: PUSH
17964: LD_INT 2
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 1
17973: PUSH
17974: LD_INT 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 0
17983: PUSH
17984: LD_INT 2
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: NEG
17994: PUSH
17995: LD_INT 1
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: NEG
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 2
18015: NEG
18016: PUSH
18017: LD_INT 1
18019: NEG
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 2
18027: NEG
18028: PUSH
18029: LD_INT 2
18031: NEG
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18058: LD_ADDR_VAR 0 19
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: LD_INT 1
18078: NEG
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: NEG
18128: PUSH
18129: LD_INT 1
18131: NEG
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: NEG
18140: PUSH
18141: LD_INT 2
18143: NEG
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: LD_INT 2
18154: NEG
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: LD_INT 1
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: LD_INT 2
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 0
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: NEG
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 2
18245: NEG
18246: PUSH
18247: LD_INT 1
18249: NEG
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 2
18257: NEG
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18288: LD_ADDR_VAR 0 20
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: LD_INT 1
18308: NEG
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 1
18346: NEG
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: NEG
18358: PUSH
18359: LD_INT 1
18361: NEG
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 1
18369: NEG
18370: PUSH
18371: LD_INT 2
18373: NEG
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: LD_INT 2
18384: NEG
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: LD_INT 1
18395: NEG
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 2
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: LD_INT 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: NEG
18454: PUSH
18455: LD_INT 1
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: NEG
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 2
18475: NEG
18476: PUSH
18477: LD_INT 1
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 2
18487: NEG
18488: PUSH
18489: LD_INT 2
18491: NEG
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18518: LD_ADDR_VAR 0 21
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: LD_INT 0
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: LD_INT 1
18538: NEG
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 1
18576: NEG
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: LD_INT 1
18591: NEG
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: LD_INT 2
18603: NEG
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 2
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: LD_INT 1
18625: NEG
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: LD_INT 2
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: LD_INT 2
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 0
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: NEG
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 2
18694: NEG
18695: PUSH
18696: LD_INT 0
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: NEG
18706: PUSH
18707: LD_INT 1
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 2
18717: NEG
18718: PUSH
18719: LD_INT 2
18721: NEG
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18748: LD_ADDR_VAR 0 22
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: LD_INT 1
18768: NEG
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: LD_INT 0
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: NEG
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: NEG
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: LD_INT 2
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: LD_INT 2
18844: NEG
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: LD_INT 0
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: LD_INT 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: NEG
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 2
18924: NEG
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: NEG
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 2
18947: NEG
18948: PUSH
18949: LD_INT 2
18951: NEG
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18978: LD_ADDR_VAR 0 23
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: LD_INT 1
18998: NEG
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 1
19036: NEG
19037: PUSH
19038: LD_INT 0
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: NEG
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: LD_INT 2
19063: NEG
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: LD_INT 2
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: LD_INT 0
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 2
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: LD_INT 2
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 0
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: NEG
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 2
19154: NEG
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 2
19165: NEG
19166: PUSH
19167: LD_INT 1
19169: NEG
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 2
19177: NEG
19178: PUSH
19179: LD_INT 2
19181: NEG
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 2
19189: NEG
19190: PUSH
19191: LD_INT 3
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: LD_INT 3
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: LD_INT 2
19216: NEG
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19258: LD_ADDR_VAR 0 24
19262: PUSH
19263: LD_INT 0
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 0
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: LD_INT 0
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: LD_INT 0
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 1
19327: NEG
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 1
19339: NEG
19340: PUSH
19341: LD_INT 2
19343: NEG
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: LD_INT 2
19354: NEG
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 1
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 2
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: LD_INT 2
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 2
19434: NEG
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 2
19445: NEG
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 2
19457: NEG
19458: PUSH
19459: LD_INT 2
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: LD_INT 2
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: LD_INT 1
19483: NEG
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 3
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 3
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19534: LD_ADDR_VAR 0 25
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: LD_INT 0
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 1
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 1
19592: NEG
19593: PUSH
19594: LD_INT 0
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 1
19603: NEG
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 1
19615: NEG
19616: PUSH
19617: LD_INT 2
19619: NEG
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: LD_INT 2
19630: NEG
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: LD_INT 1
19641: NEG
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 2
19710: NEG
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 2
19721: NEG
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 2
19733: NEG
19734: PUSH
19735: LD_INT 2
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 3
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 3
19755: PUSH
19756: LD_INT 2
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 3
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 3
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19808: LD_ADDR_VAR 0 26
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: LD_INT 1
19828: NEG
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: NEG
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 0
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 0
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: LD_INT 1
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: NEG
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: NEG
20008: PUSH
20009: LD_INT 2
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: LD_INT 3
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 2
20050: NEG
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20084: LD_ADDR_VAR 0 27
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: LD_INT 0
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 0
20101: PUSH
20102: LD_INT 1
20104: NEG
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: LD_INT 0
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 1
20153: NEG
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: LD_INT 2
20169: NEG
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 1
20191: NEG
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 1
20229: PUSH
20230: LD_INT 2
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: LD_INT 1
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 2
20260: NEG
20261: PUSH
20262: LD_INT 0
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 2
20271: NEG
20272: PUSH
20273: LD_INT 1
20275: NEG
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: NEG
20284: PUSH
20285: LD_INT 2
20287: NEG
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: LD_INT 2
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 2
20306: NEG
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 3
20317: NEG
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 3
20329: NEG
20330: PUSH
20331: LD_INT 2
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20364: LD_ADDR_VAR 0 28
20368: PUSH
20369: LD_INT 0
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: LD_INT 0
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 1
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: PUSH
20424: LD_INT 0
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: NEG
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 1
20445: NEG
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 1
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: LD_INT 0
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 2
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: LD_INT 2
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: PUSH
20510: LD_INT 2
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 0
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 1
20529: NEG
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 2
20540: NEG
20541: PUSH
20542: LD_INT 0
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 2
20551: NEG
20552: PUSH
20553: LD_INT 1
20555: NEG
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 2
20563: NEG
20564: PUSH
20565: LD_INT 2
20567: NEG
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 2
20575: NEG
20576: PUSH
20577: LD_INT 3
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: LD_INT 3
20591: NEG
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 3
20599: NEG
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 3
20611: NEG
20612: PUSH
20613: LD_INT 2
20615: NEG
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20646: LD_ADDR_VAR 0 29
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: LD_INT 0
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: LD_INT 1
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 0
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: NEG
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: LD_INT 2
20731: NEG
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 0
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 1
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 2
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 1
20781: PUSH
20782: LD_INT 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 0
20791: PUSH
20792: LD_INT 2
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 2
20812: NEG
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: NEG
20825: PUSH
20826: LD_INT 2
20828: NEG
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 2
20836: NEG
20837: PUSH
20838: LD_INT 3
20840: NEG
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 3
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: LD_INT 3
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 3
20890: NEG
20891: PUSH
20892: LD_INT 2
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20925: LD_ADDR_VAR 0 30
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: LD_INT 0
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: NEG
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: PUSH
21008: LD_INT 2
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: LD_INT 2
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 2
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: NEG
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 2
21091: NEG
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 2
21102: NEG
21103: PUSH
21104: LD_INT 1
21106: NEG
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: NEG
21115: PUSH
21116: LD_INT 3
21118: NEG
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 1
21126: PUSH
21127: LD_INT 2
21129: NEG
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 3
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: LD_INT 3
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 3
21168: NEG
21169: PUSH
21170: LD_INT 1
21172: NEG
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21203: LD_ADDR_VAR 0 31
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 0
21220: PUSH
21221: LD_INT 1
21223: NEG
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: LD_INT 0
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 1
21284: NEG
21285: PUSH
21286: LD_INT 2
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: LD_INT 1
21299: NEG
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 2
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: LD_INT 2
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 2
21368: NEG
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 2
21380: NEG
21381: PUSH
21382: LD_INT 2
21384: NEG
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 2
21392: NEG
21393: PUSH
21394: LD_INT 3
21396: NEG
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 1
21407: NEG
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 3
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: LD_INT 3
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 3
21446: NEG
21447: PUSH
21448: LD_INT 2
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21481: LD_ADDR_VAR 0 32
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: NEG
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: NEG
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: LD_INT 2
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 1
21585: PUSH
21586: LD_INT 1
21588: NEG
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: LD_INT 2
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: LD_INT 2
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: NEG
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 2
21647: NEG
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 2
21658: NEG
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: LD_INT 3
21674: NEG
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: PUSH
21683: LD_INT 2
21685: NEG
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 3
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 3
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 2
21713: NEG
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 3
21724: NEG
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21759: LD_ADDR_VAR 0 33
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: LD_INT 2
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: LD_INT 1
21855: NEG
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 2
21863: PUSH
21864: LD_INT 0
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 2
21873: PUSH
21874: LD_INT 1
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: LD_INT 2
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 2
21925: NEG
21926: PUSH
21927: LD_INT 1
21929: NEG
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: NEG
21938: PUSH
21939: LD_INT 2
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 2
21949: NEG
21950: PUSH
21951: LD_INT 3
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 2
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 3
21972: PUSH
21973: LD_INT 1
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: LD_INT 3
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: LD_INT 2
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 3
22003: NEG
22004: PUSH
22005: LD_INT 2
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22038: LD_ADDR_VAR 0 34
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: NEG
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: LD_INT 1
22111: NEG
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: LD_INT 2
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: LD_INT 2
22134: NEG
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: LD_INT 1
22145: NEG
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 1
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: LD_INT 2
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: LD_INT 2
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 1
22183: NEG
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 2
22194: NEG
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 2
22205: NEG
22206: PUSH
22207: LD_INT 1
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 2
22217: NEG
22218: PUSH
22219: LD_INT 2
22221: NEG
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: LD_INT 3
22233: NEG
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: LD_INT 2
22244: NEG
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 3
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 2
22262: PUSH
22263: LD_INT 3
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 2
22272: NEG
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 3
22283: NEG
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22318: LD_ADDR_VAR 0 35
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: LD_INT 0
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 2
22409: NEG
22410: PUSH
22411: LD_INT 1
22413: NEG
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22430: LD_ADDR_VAR 0 36
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 0
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: NEG
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: NEG
22512: PUSH
22513: LD_INT 2
22515: NEG
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: LD_INT 2
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22542: LD_ADDR_VAR 0 37
22546: PUSH
22547: LD_INT 0
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: LD_INT 0
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: NEG
22612: PUSH
22613: LD_INT 1
22615: NEG
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 1
22634: NEG
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22654: LD_ADDR_VAR 0 38
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 0
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: LD_INT 0
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 0
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 1
22712: NEG
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: LD_INT 1
22727: NEG
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: LD_INT 1
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 2
22745: NEG
22746: PUSH
22747: LD_INT 1
22749: NEG
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22766: LD_ADDR_VAR 0 39
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: NEG
22848: PUSH
22849: LD_INT 2
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22878: LD_ADDR_VAR 0 40
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 1
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 1
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 1
22970: NEG
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22990: LD_ADDR_VAR 0 41
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 0
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: LD_INT 0
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: NEG
23049: PUSH
23050: LD_INT 0
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 1
23071: NEG
23072: PUSH
23073: LD_INT 2
23075: NEG
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 1
23083: PUSH
23084: LD_INT 1
23086: NEG
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 2
23094: PUSH
23095: LD_INT 0
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 1
23124: PUSH
23125: LD_INT 2
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 2
23145: NEG
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 2
23156: NEG
23157: PUSH
23158: LD_INT 1
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: NEG
23169: PUSH
23170: LD_INT 2
23172: NEG
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 2
23180: NEG
23181: PUSH
23182: LD_INT 3
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: LD_INT 2
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 3
23233: PUSH
23234: LD_INT 3
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: NEG
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 3
23264: NEG
23265: PUSH
23266: LD_INT 0
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 3
23275: NEG
23276: PUSH
23277: LD_INT 1
23279: NEG
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 3
23287: NEG
23288: PUSH
23289: LD_INT 2
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 3
23299: NEG
23300: PUSH
23301: LD_INT 3
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23340: LD_ADDR_VAR 0 42
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: NEG
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: NEG
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 2
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: LD_INT 2
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 2
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 2
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 2
23518: NEG
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PUSH
23532: LD_INT 3
23534: NEG
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 1
23542: NEG
23543: PUSH
23544: LD_INT 3
23546: NEG
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: LD_INT 3
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 3
23576: PUSH
23577: LD_INT 2
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 3
23586: PUSH
23587: LD_INT 3
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 2
23596: PUSH
23597: LD_INT 3
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: LD_INT 3
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: LD_INT 3
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: LD_INT 2
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 3
23637: NEG
23638: PUSH
23639: LD_INT 2
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 3
23649: NEG
23650: PUSH
23651: LD_INT 3
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23690: LD_ADDR_VAR 0 43
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: LD_INT 1
23710: NEG
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: LD_INT 2
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: LD_INT 2
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 1
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 1
23845: NEG
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 2
23856: NEG
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: NEG
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 1
23879: NEG
23880: PUSH
23881: LD_INT 3
23883: NEG
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 3
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 2
23905: NEG
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 3
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 3
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: LD_INT 3
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: LD_INT 3
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: LD_INT 2
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 2
23975: NEG
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 3
23986: NEG
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 3
23997: NEG
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24038: LD_ADDR_VAR 0 44
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: NEG
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: LD_INT 2
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 2
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 2
24162: PUSH
24163: LD_INT 2
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: LD_INT 2
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 1
24182: NEG
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 2
24204: NEG
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 2
24216: NEG
24217: PUSH
24218: LD_INT 2
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 2
24228: NEG
24229: PUSH
24230: LD_INT 3
24232: NEG
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 3
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 3
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 3
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 3
24281: PUSH
24282: LD_INT 3
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 3
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 2
24301: NEG
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 3
24312: NEG
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 3
24323: NEG
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 3
24335: NEG
24336: PUSH
24337: LD_INT 2
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 3
24347: NEG
24348: PUSH
24349: LD_INT 3
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24388: LD_ADDR_VAR 0 45
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: LD_INT 2
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: LD_INT 2
24484: NEG
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 2
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: LD_INT 2
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 1
24543: NEG
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 2
24554: NEG
24555: PUSH
24556: LD_INT 1
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: NEG
24567: PUSH
24568: LD_INT 2
24570: NEG
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 2
24578: NEG
24579: PUSH
24580: LD_INT 3
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: LD_INT 3
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 3
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: LD_INT 2
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 3
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 3
24634: PUSH
24635: LD_INT 3
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 2
24644: PUSH
24645: LD_INT 3
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: LD_INT 3
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: LD_INT 3
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: NEG
24675: PUSH
24676: LD_INT 2
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 3
24685: NEG
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 3
24697: NEG
24698: PUSH
24699: LD_INT 3
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24738: LD_ADDR_VAR 0 46
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: LD_INT 2
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 2
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 1
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: NEG
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 3
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 3
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 2
24953: NEG
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 2
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 3
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 3
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: LD_INT 3
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: NEG
25013: PUSH
25014: LD_INT 2
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 2
25023: NEG
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 3
25034: NEG
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 3
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25086: LD_ADDR_VAR 0 47
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 1
25144: NEG
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: LD_INT 2
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: LD_INT 2
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 1
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 2
25201: NEG
25202: PUSH
25203: LD_INT 1
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 2
25213: NEG
25214: PUSH
25215: LD_INT 2
25217: NEG
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25237: LD_ADDR_VAR 0 48
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: NEG
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: LD_INT 2
25322: NEG
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: LD_INT 2
25333: NEG
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: LD_INT 1
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25384: LD_ADDR_VAR 0 49
25388: PUSH
25389: LD_INT 0
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: LD_INT 1
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 2
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 1
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: LD_INT 2
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25528: LD_ADDR_VAR 0 50
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: NEG
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25672: LD_ADDR_VAR 0 51
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: LD_INT 1
25692: NEG
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: NEG
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: NEG
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 2
25784: NEG
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: NEG
25796: PUSH
25797: LD_INT 1
25799: NEG
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25819: LD_ADDR_VAR 0 52
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: LD_INT 1
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 2
25923: NEG
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: LD_INT 2
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25970: LD_ADDR_VAR 0 53
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 1
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: LD_INT 2
26055: NEG
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: NEG
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: NEG
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 2
26157: NEG
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 2
26169: NEG
26170: PUSH
26171: LD_INT 2
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26200: LD_ADDR_VAR 0 54
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: LD_INT 1
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: LD_INT 1
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: LD_INT 2
26285: NEG
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: LD_INT 2
26296: NEG
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: LD_INT 2
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 2
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: NEG
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 2
26387: NEG
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 2
26399: NEG
26400: PUSH
26401: LD_INT 2
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26430: LD_ADDR_VAR 0 55
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 2
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: LD_INT 2
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: LD_INT 1
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: NEG
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: NEG
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 2
26629: NEG
26630: PUSH
26631: LD_INT 2
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26660: LD_ADDR_VAR 0 56
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: LD_INT 2
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: LD_INT 2
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: LD_INT 1
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 2
26836: NEG
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: NEG
26848: PUSH
26849: LD_INT 1
26851: NEG
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 2
26859: NEG
26860: PUSH
26861: LD_INT 2
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26890: LD_ADDR_VAR 0 57
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: PUSH
26973: LD_INT 2
26975: NEG
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: LD_INT 2
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: LD_INT 1
26997: NEG
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 2
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: LD_INT 2
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 2
27066: NEG
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: NEG
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 2
27089: NEG
27090: PUSH
27091: LD_INT 2
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27120: LD_ADDR_VAR 0 58
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: NEG
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 1
27201: NEG
27202: PUSH
27203: LD_INT 2
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 2
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 2
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 2
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 2
27296: NEG
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 2
27307: NEG
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 2
27319: NEG
27320: PUSH
27321: LD_INT 2
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27350: LD_ADDR_VAR 0 59
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: NEG
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27438: LD_ADDR_VAR 0 60
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27526: LD_ADDR_VAR 0 61
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27614: LD_ADDR_VAR 0 62
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 1
27672: NEG
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27702: LD_ADDR_VAR 0 63
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: LD_INT 1
27722: NEG
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 1
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27790: LD_ADDR_VAR 0 64
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 0
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: NEG
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 1
27863: NEG
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: ST_TO_ADDR
// end ; 1 :
27878: GO 33775
27880: LD_INT 1
27882: DOUBLE
27883: EQUAL
27884: IFTRUE 27888
27886: GO 30511
27888: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27889: LD_ADDR_VAR 0 11
27893: PUSH
27894: LD_INT 1
27896: NEG
27897: PUSH
27898: LD_INT 3
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: LD_INT 3
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: LD_INT 2
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27933: LD_ADDR_VAR 0 12
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 3
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27974: LD_ADDR_VAR 0 13
27978: PUSH
27979: LD_INT 3
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 3
27991: PUSH
27992: LD_INT 3
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: PUSH
28002: LD_INT 3
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28014: LD_ADDR_VAR 0 14
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: LD_INT 3
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 3
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28055: LD_ADDR_VAR 0 15
28059: PUSH
28060: LD_INT 2
28062: NEG
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 3
28073: NEG
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 3
28084: NEG
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28099: LD_ADDR_VAR 0 16
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: LD_INT 3
28110: NEG
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 3
28118: NEG
28119: PUSH
28120: LD_INT 2
28122: NEG
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 3
28130: NEG
28131: PUSH
28132: LD_INT 3
28134: NEG
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28145: LD_ADDR_VAR 0 17
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: LD_INT 3
28156: NEG
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: LD_INT 3
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28189: LD_ADDR_VAR 0 18
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 3
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28230: LD_ADDR_VAR 0 19
28234: PUSH
28235: LD_INT 3
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 3
28247: PUSH
28248: LD_INT 3
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28270: LD_ADDR_VAR 0 20
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: LD_INT 3
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: LD_INT 3
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28311: LD_ADDR_VAR 0 21
28315: PUSH
28316: LD_INT 2
28318: NEG
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 3
28329: NEG
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 3
28340: NEG
28341: PUSH
28342: LD_INT 1
28344: NEG
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28355: LD_ADDR_VAR 0 22
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: LD_INT 3
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 3
28374: NEG
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 3
28386: NEG
28387: PUSH
28388: LD_INT 3
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: LIST
28400: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28401: LD_ADDR_VAR 0 23
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: LD_INT 3
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: LD_INT 4
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: LD_INT 3
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28445: LD_ADDR_VAR 0 24
28449: PUSH
28450: LD_INT 3
28452: PUSH
28453: LD_INT 0
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 4
28473: PUSH
28474: LD_INT 1
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28486: LD_ADDR_VAR 0 25
28490: PUSH
28491: LD_INT 3
28493: PUSH
28494: LD_INT 3
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 4
28503: PUSH
28504: LD_INT 3
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 3
28513: PUSH
28514: LD_INT 4
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28526: LD_ADDR_VAR 0 26
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 3
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 4
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 3
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28567: LD_ADDR_VAR 0 27
28571: PUSH
28572: LD_INT 3
28574: NEG
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 3
28585: NEG
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 4
28596: NEG
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28611: LD_ADDR_VAR 0 28
28615: PUSH
28616: LD_INT 3
28618: NEG
28619: PUSH
28620: LD_INT 3
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 3
28630: NEG
28631: PUSH
28632: LD_INT 4
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 4
28642: NEG
28643: PUSH
28644: LD_INT 3
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: LIST
28656: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28657: LD_ADDR_VAR 0 29
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 3
28668: NEG
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: LD_INT 3
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 2
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: LD_INT 4
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: LD_INT 4
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 3
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 1
28732: NEG
28733: PUSH
28734: LD_INT 5
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 5
28747: NEG
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: LD_INT 4
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: LD_INT 6
28770: NEG
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: LD_INT 6
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: LD_INT 5
28792: NEG
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28812: LD_ADDR_VAR 0 30
28816: PUSH
28817: LD_INT 2
28819: PUSH
28820: LD_INT 1
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 3
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 3
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 4
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 4
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 4
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 5
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 5
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 5
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 6
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 6
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28955: LD_ADDR_VAR 0 31
28959: PUSH
28960: LD_INT 3
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 3
28972: PUSH
28973: LD_INT 3
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 3
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 4
28992: PUSH
28993: LD_INT 3
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 4
29002: PUSH
29003: LD_INT 4
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: LD_INT 4
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 5
29022: PUSH
29023: LD_INT 4
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 5
29032: PUSH
29033: LD_INT 5
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 4
29042: PUSH
29043: LD_INT 5
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 6
29052: PUSH
29053: LD_INT 5
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 6
29062: PUSH
29063: LD_INT 6
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 5
29072: PUSH
29073: LD_INT 6
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29094: LD_ADDR_VAR 0 32
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 3
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 4
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 4
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 3
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 5
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: LD_INT 5
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: LD_INT 4
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: LD_INT 6
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: LD_INT 6
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: LD_INT 5
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29237: LD_ADDR_VAR 0 33
29241: PUSH
29242: LD_INT 2
29244: NEG
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 3
29255: NEG
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 3
29266: NEG
29267: PUSH
29268: LD_INT 1
29270: NEG
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 3
29278: NEG
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 4
29289: NEG
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 4
29300: NEG
29301: PUSH
29302: LD_INT 1
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 4
29312: NEG
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 5
29323: NEG
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 5
29334: NEG
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 5
29346: NEG
29347: PUSH
29348: LD_INT 1
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 6
29357: NEG
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 6
29368: NEG
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29392: LD_ADDR_VAR 0 34
29396: PUSH
29397: LD_INT 2
29399: NEG
29400: PUSH
29401: LD_INT 3
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 3
29411: NEG
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 3
29423: NEG
29424: PUSH
29425: LD_INT 3
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 3
29435: NEG
29436: PUSH
29437: LD_INT 4
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 4
29447: NEG
29448: PUSH
29449: LD_INT 3
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 4
29459: NEG
29460: PUSH
29461: LD_INT 4
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 4
29471: NEG
29472: PUSH
29473: LD_INT 5
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 5
29483: NEG
29484: PUSH
29485: LD_INT 4
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 5
29495: NEG
29496: PUSH
29497: LD_INT 5
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 5
29507: NEG
29508: PUSH
29509: LD_INT 6
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 6
29519: NEG
29520: PUSH
29521: LD_INT 5
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 6
29531: NEG
29532: PUSH
29533: LD_INT 6
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29555: LD_ADDR_VAR 0 41
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 2
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: LD_INT 3
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29599: LD_ADDR_VAR 0 42
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 3
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29640: LD_ADDR_VAR 0 43
29644: PUSH
29645: LD_INT 2
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 3
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29680: LD_ADDR_VAR 0 44
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29721: LD_ADDR_VAR 0 45
29725: PUSH
29726: LD_INT 2
29728: NEG
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 2
29739: NEG
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 3
29750: NEG
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29765: LD_ADDR_VAR 0 46
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: LD_INT 2
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: NEG
29785: PUSH
29786: LD_INT 3
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 3
29796: NEG
29797: PUSH
29798: LD_INT 2
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29811: LD_ADDR_VAR 0 47
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: LD_INT 3
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: NEG
29831: PUSH
29832: LD_INT 3
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29844: LD_ADDR_VAR 0 48
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: LD_INT 2
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29875: LD_ADDR_VAR 0 49
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 2
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29904: LD_ADDR_VAR 0 50
29908: PUSH
29909: LD_INT 2
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: LD_INT 3
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29933: LD_ADDR_VAR 0 51
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: LD_INT 2
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29964: LD_ADDR_VAR 0 52
29968: PUSH
29969: LD_INT 3
29971: NEG
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 3
29983: NEG
29984: PUSH
29985: LD_INT 2
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29997: LD_ADDR_VAR 0 53
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: LD_INT 3
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: LD_INT 3
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: LIST
30040: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30041: LD_ADDR_VAR 0 54
30045: PUSH
30046: LD_INT 2
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30082: LD_ADDR_VAR 0 55
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: LD_INT 3
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: LD_INT 3
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30122: LD_ADDR_VAR 0 56
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: LD_INT 3
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: LD_INT 3
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30163: LD_ADDR_VAR 0 57
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 3
30181: NEG
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 3
30192: NEG
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30207: LD_ADDR_VAR 0 58
30211: PUSH
30212: LD_INT 2
30214: NEG
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 3
30226: NEG
30227: PUSH
30228: LD_INT 2
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 3
30238: NEG
30239: PUSH
30240: LD_INT 3
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: LIST
30252: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30253: LD_ADDR_VAR 0 59
30257: PUSH
30258: LD_INT 1
30260: NEG
30261: PUSH
30262: LD_INT 2
30264: NEG
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30297: LD_ADDR_VAR 0 60
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30338: LD_ADDR_VAR 0 61
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: LD_INT 2
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: LIST
30377: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30378: LD_ADDR_VAR 0 62
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: LIST
30418: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30419: LD_ADDR_VAR 0 63
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 2
30437: NEG
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 2
30448: NEG
30449: PUSH
30450: LD_INT 1
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: LIST
30462: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30463: LD_ADDR_VAR 0 64
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: LD_INT 2
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: LIST
30508: ST_TO_ADDR
// end ; 2 :
30509: GO 33775
30511: LD_INT 2
30513: DOUBLE
30514: EQUAL
30515: IFTRUE 30519
30517: GO 33774
30519: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30520: LD_ADDR_VAR 0 29
30524: PUSH
30525: LD_INT 4
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 4
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 5
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 5
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 4
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 3
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 2
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 5
30610: PUSH
30611: LD_INT 2
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 4
30640: PUSH
30641: LD_INT 3
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 4
30650: PUSH
30651: LD_INT 4
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: LD_INT 3
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 4
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: LD_INT 4
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: LD_INT 4
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: LD_INT 3
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 4
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: LD_INT 5
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: LD_INT 5
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: LD_INT 4
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: LD_INT 5
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: NEG
30793: PUSH
30794: LD_INT 3
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 3
30803: NEG
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 3
30814: NEG
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: LD_INT 0
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 3
30848: NEG
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 4
30859: NEG
30860: PUSH
30861: LD_INT 0
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 4
30870: NEG
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 4
30882: NEG
30883: PUSH
30884: LD_INT 2
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: LD_INT 2
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 4
30905: NEG
30906: PUSH
30907: LD_INT 4
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 4
30917: NEG
30918: PUSH
30919: LD_INT 5
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 3
30929: NEG
30930: PUSH
30931: LD_INT 4
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 3
30941: NEG
30942: PUSH
30943: LD_INT 3
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 4
30953: NEG
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 5
30965: NEG
30966: PUSH
30967: LD_INT 4
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 5
30977: NEG
30978: PUSH
30979: LD_INT 5
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 3
30989: NEG
30990: PUSH
30991: LD_INT 5
30993: NEG
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 5
31001: NEG
31002: PUSH
31003: LD_INT 3
31005: NEG
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31058: LD_ADDR_VAR 0 30
31062: PUSH
31063: LD_INT 4
31065: PUSH
31066: LD_INT 4
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 4
31075: PUSH
31076: LD_INT 3
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 5
31085: PUSH
31086: LD_INT 4
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 5
31095: PUSH
31096: LD_INT 5
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 4
31105: PUSH
31106: LD_INT 5
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: LD_INT 4
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 5
31135: PUSH
31136: LD_INT 3
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: LD_INT 5
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: LD_INT 4
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 4
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: LD_INT 4
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: LD_INT 2
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 4
31248: NEG
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 4
31259: NEG
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 3
31271: NEG
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 3
31282: NEG
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 4
31293: NEG
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 5
31304: NEG
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 5
31315: NEG
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 5
31327: NEG
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 3
31339: NEG
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 3
31350: NEG
31351: PUSH
31352: LD_INT 3
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: LD_INT 4
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: LD_INT 3
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 2
31386: NEG
31387: PUSH
31388: LD_INT 2
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 3
31398: NEG
31399: PUSH
31400: LD_INT 2
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 4
31410: NEG
31411: PUSH
31412: LD_INT 3
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 4
31422: NEG
31423: PUSH
31424: LD_INT 4
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: LD_INT 4
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 4
31446: NEG
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: LD_INT 4
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 5
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 4
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: LD_INT 3
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 0
31502: PUSH
31503: LD_INT 3
31505: NEG
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: LD_INT 4
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 5
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: NEG
31549: PUSH
31550: LD_INT 5
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31605: LD_ADDR_VAR 0 31
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: LD_INT 4
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: LD_INT 3
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: LD_INT 4
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: LD_INT 5
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: LD_INT 5
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: NEG
31663: PUSH
31664: LD_INT 4
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: NEG
31674: PUSH
31675: LD_INT 3
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 5
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: LD_INT 3
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 3
31705: NEG
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 3
31716: NEG
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: NEG
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 2
31739: NEG
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 4
31761: NEG
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 4
31772: NEG
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 4
31784: NEG
31785: PUSH
31786: LD_INT 2
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 4
31807: NEG
31808: PUSH
31809: LD_INT 4
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 4
31819: NEG
31820: PUSH
31821: LD_INT 5
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: LD_INT 4
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 3
31843: NEG
31844: PUSH
31845: LD_INT 3
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 4
31855: NEG
31856: PUSH
31857: LD_INT 3
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 5
31867: NEG
31868: PUSH
31869: LD_INT 4
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 5
31879: NEG
31880: PUSH
31881: LD_INT 5
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: LD_INT 5
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 5
31903: NEG
31904: PUSH
31905: LD_INT 3
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: LD_INT 3
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: LD_INT 4
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: LD_INT 3
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: LD_INT 2
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: LD_INT 2
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: LD_INT 3
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: LD_INT 4
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: PUSH
31995: LD_INT 2
31997: NEG
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 2
32005: NEG
32006: PUSH
32007: LD_INT 4
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 4
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 4
32027: PUSH
32028: LD_INT 1
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 5
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 4
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 3
32068: PUSH
32069: LD_INT 0
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 3
32078: PUSH
32079: LD_INT 1
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 3
32089: PUSH
32090: LD_INT 2
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 5
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32155: LD_ADDR_VAR 0 32
32159: PUSH
32160: LD_INT 4
32162: NEG
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 4
32173: NEG
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 3
32185: NEG
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 3
32196: NEG
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 4
32207: NEG
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 5
32218: NEG
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 5
32229: NEG
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 5
32241: NEG
32242: PUSH
32243: LD_INT 2
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 3
32253: NEG
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 3
32264: NEG
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 3
32276: NEG
32277: PUSH
32278: LD_INT 4
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: LD_INT 3
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 2
32300: NEG
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 3
32312: NEG
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 4
32324: NEG
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 4
32336: NEG
32337: PUSH
32338: LD_INT 4
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: NEG
32349: PUSH
32350: LD_INT 4
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 4
32360: NEG
32361: PUSH
32362: LD_INT 2
32364: NEG
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: LD_INT 4
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 5
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: LD_INT 4
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 3
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: LD_INT 4
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: LD_INT 5
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: LD_INT 3
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 2
32462: NEG
32463: PUSH
32464: LD_INT 5
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 3
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 4
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 4
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: LD_INT 1
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: LD_INT 1
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: LD_INT 2
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 4
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 4
32567: PUSH
32568: LD_INT 4
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 4
32577: PUSH
32578: LD_INT 3
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 5
32587: PUSH
32588: LD_INT 4
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 5
32597: PUSH
32598: LD_INT 5
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 4
32607: PUSH
32608: LD_INT 5
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: LD_INT 4
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 3
32627: PUSH
32628: LD_INT 3
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 5
32637: PUSH
32638: LD_INT 3
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: LD_INT 5
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32702: LD_ADDR_VAR 0 33
32706: PUSH
32707: LD_INT 4
32709: NEG
32710: PUSH
32711: LD_INT 4
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 4
32721: NEG
32722: PUSH
32723: LD_INT 5
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 3
32733: NEG
32734: PUSH
32735: LD_INT 4
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 3
32745: NEG
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 4
32757: NEG
32758: PUSH
32759: LD_INT 3
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 5
32769: NEG
32770: PUSH
32771: LD_INT 4
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 5
32781: NEG
32782: PUSH
32783: LD_INT 5
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 3
32793: NEG
32794: PUSH
32795: LD_INT 5
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 5
32805: NEG
32806: PUSH
32807: LD_INT 3
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: LD_INT 3
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: LD_INT 4
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: LD_INT 3
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: LD_INT 3
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: LD_INT 4
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: LD_INT 2
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 2
32907: NEG
32908: PUSH
32909: LD_INT 4
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 4
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 4
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 5
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 5
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 4
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 3
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 3
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 3
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 5
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 3
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 4
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 4
33042: PUSH
33043: LD_INT 4
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 3
33052: PUSH
33053: LD_INT 4
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 2
33062: PUSH
33063: LD_INT 3
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 4
33082: PUSH
33083: LD_INT 2
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: LD_INT 4
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: LD_INT 4
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: LD_INT 4
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: LD_INT 5
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: LD_INT 5
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: LD_INT 4
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: LD_INT 3
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 5
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33240: LD_ADDR_VAR 0 34
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: LD_INT 4
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: LD_INT 5
33261: NEG
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: LD_INT 4
33272: NEG
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: LD_INT 3
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 3
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 5
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: LD_INT 3
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: NEG
33338: PUSH
33339: LD_INT 5
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 3
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 4
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 4
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 3
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 1
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 4
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 4
33442: PUSH
33443: LD_INT 4
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 4
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 5
33462: PUSH
33463: LD_INT 4
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 5
33472: PUSH
33473: LD_INT 5
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 4
33482: PUSH
33483: LD_INT 5
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: PUSH
33493: LD_INT 4
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 3
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 5
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 3
33522: PUSH
33523: LD_INT 5
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: LD_INT 2
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 3
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: LD_INT 4
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: LD_INT 3
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: LD_INT 4
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: LD_INT 2
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 4
33625: NEG
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 4
33636: NEG
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 3
33648: NEG
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 3
33659: NEG
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 4
33670: NEG
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 5
33681: NEG
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 5
33692: NEG
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 5
33704: NEG
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 3
33716: NEG
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: ST_TO_ADDR
// end ; end ;
33772: GO 33775
33774: POP
// case btype of b_depot , b_warehouse :
33775: LD_VAR 0 1
33779: PUSH
33780: LD_INT 0
33782: DOUBLE
33783: EQUAL
33784: IFTRUE 33794
33786: LD_INT 1
33788: DOUBLE
33789: EQUAL
33790: IFTRUE 33794
33792: GO 33995
33794: POP
// case nation of nation_american :
33795: LD_VAR 0 5
33799: PUSH
33800: LD_INT 1
33802: DOUBLE
33803: EQUAL
33804: IFTRUE 33808
33806: GO 33864
33808: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33809: LD_ADDR_VAR 0 9
33813: PUSH
33814: LD_VAR 0 11
33818: PUSH
33819: LD_VAR 0 12
33823: PUSH
33824: LD_VAR 0 13
33828: PUSH
33829: LD_VAR 0 14
33833: PUSH
33834: LD_VAR 0 15
33838: PUSH
33839: LD_VAR 0 16
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: PUSH
33852: LD_VAR 0 4
33856: PUSH
33857: LD_INT 1
33859: PLUS
33860: ARRAY
33861: ST_TO_ADDR
33862: GO 33993
33864: LD_INT 2
33866: DOUBLE
33867: EQUAL
33868: IFTRUE 33872
33870: GO 33928
33872: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33873: LD_ADDR_VAR 0 9
33877: PUSH
33878: LD_VAR 0 17
33882: PUSH
33883: LD_VAR 0 18
33887: PUSH
33888: LD_VAR 0 19
33892: PUSH
33893: LD_VAR 0 20
33897: PUSH
33898: LD_VAR 0 21
33902: PUSH
33903: LD_VAR 0 22
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: PUSH
33916: LD_VAR 0 4
33920: PUSH
33921: LD_INT 1
33923: PLUS
33924: ARRAY
33925: ST_TO_ADDR
33926: GO 33993
33928: LD_INT 3
33930: DOUBLE
33931: EQUAL
33932: IFTRUE 33936
33934: GO 33992
33936: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33937: LD_ADDR_VAR 0 9
33941: PUSH
33942: LD_VAR 0 23
33946: PUSH
33947: LD_VAR 0 24
33951: PUSH
33952: LD_VAR 0 25
33956: PUSH
33957: LD_VAR 0 26
33961: PUSH
33962: LD_VAR 0 27
33966: PUSH
33967: LD_VAR 0 28
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: PUSH
33980: LD_VAR 0 4
33984: PUSH
33985: LD_INT 1
33987: PLUS
33988: ARRAY
33989: ST_TO_ADDR
33990: GO 33993
33992: POP
33993: GO 34548
33995: LD_INT 2
33997: DOUBLE
33998: EQUAL
33999: IFTRUE 34009
34001: LD_INT 3
34003: DOUBLE
34004: EQUAL
34005: IFTRUE 34009
34007: GO 34065
34009: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34010: LD_ADDR_VAR 0 9
34014: PUSH
34015: LD_VAR 0 29
34019: PUSH
34020: LD_VAR 0 30
34024: PUSH
34025: LD_VAR 0 31
34029: PUSH
34030: LD_VAR 0 32
34034: PUSH
34035: LD_VAR 0 33
34039: PUSH
34040: LD_VAR 0 34
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: PUSH
34053: LD_VAR 0 4
34057: PUSH
34058: LD_INT 1
34060: PLUS
34061: ARRAY
34062: ST_TO_ADDR
34063: GO 34548
34065: LD_INT 16
34067: DOUBLE
34068: EQUAL
34069: IFTRUE 34127
34071: LD_INT 17
34073: DOUBLE
34074: EQUAL
34075: IFTRUE 34127
34077: LD_INT 18
34079: DOUBLE
34080: EQUAL
34081: IFTRUE 34127
34083: LD_INT 19
34085: DOUBLE
34086: EQUAL
34087: IFTRUE 34127
34089: LD_INT 22
34091: DOUBLE
34092: EQUAL
34093: IFTRUE 34127
34095: LD_INT 20
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34127
34101: LD_INT 21
34103: DOUBLE
34104: EQUAL
34105: IFTRUE 34127
34107: LD_INT 23
34109: DOUBLE
34110: EQUAL
34111: IFTRUE 34127
34113: LD_INT 24
34115: DOUBLE
34116: EQUAL
34117: IFTRUE 34127
34119: LD_INT 25
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34127
34125: GO 34183
34127: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34128: LD_ADDR_VAR 0 9
34132: PUSH
34133: LD_VAR 0 35
34137: PUSH
34138: LD_VAR 0 36
34142: PUSH
34143: LD_VAR 0 37
34147: PUSH
34148: LD_VAR 0 38
34152: PUSH
34153: LD_VAR 0 39
34157: PUSH
34158: LD_VAR 0 40
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: PUSH
34171: LD_VAR 0 4
34175: PUSH
34176: LD_INT 1
34178: PLUS
34179: ARRAY
34180: ST_TO_ADDR
34181: GO 34548
34183: LD_INT 6
34185: DOUBLE
34186: EQUAL
34187: IFTRUE 34239
34189: LD_INT 7
34191: DOUBLE
34192: EQUAL
34193: IFTRUE 34239
34195: LD_INT 8
34197: DOUBLE
34198: EQUAL
34199: IFTRUE 34239
34201: LD_INT 13
34203: DOUBLE
34204: EQUAL
34205: IFTRUE 34239
34207: LD_INT 12
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34239
34213: LD_INT 15
34215: DOUBLE
34216: EQUAL
34217: IFTRUE 34239
34219: LD_INT 11
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34239
34225: LD_INT 14
34227: DOUBLE
34228: EQUAL
34229: IFTRUE 34239
34231: LD_INT 10
34233: DOUBLE
34234: EQUAL
34235: IFTRUE 34239
34237: GO 34295
34239: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34240: LD_ADDR_VAR 0 9
34244: PUSH
34245: LD_VAR 0 41
34249: PUSH
34250: LD_VAR 0 42
34254: PUSH
34255: LD_VAR 0 43
34259: PUSH
34260: LD_VAR 0 44
34264: PUSH
34265: LD_VAR 0 45
34269: PUSH
34270: LD_VAR 0 46
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: PUSH
34283: LD_VAR 0 4
34287: PUSH
34288: LD_INT 1
34290: PLUS
34291: ARRAY
34292: ST_TO_ADDR
34293: GO 34548
34295: LD_INT 36
34297: DOUBLE
34298: EQUAL
34299: IFTRUE 34303
34301: GO 34359
34303: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34304: LD_ADDR_VAR 0 9
34308: PUSH
34309: LD_VAR 0 47
34313: PUSH
34314: LD_VAR 0 48
34318: PUSH
34319: LD_VAR 0 49
34323: PUSH
34324: LD_VAR 0 50
34328: PUSH
34329: LD_VAR 0 51
34333: PUSH
34334: LD_VAR 0 52
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: PUSH
34347: LD_VAR 0 4
34351: PUSH
34352: LD_INT 1
34354: PLUS
34355: ARRAY
34356: ST_TO_ADDR
34357: GO 34548
34359: LD_INT 4
34361: DOUBLE
34362: EQUAL
34363: IFTRUE 34385
34365: LD_INT 5
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34385
34371: LD_INT 34
34373: DOUBLE
34374: EQUAL
34375: IFTRUE 34385
34377: LD_INT 37
34379: DOUBLE
34380: EQUAL
34381: IFTRUE 34385
34383: GO 34441
34385: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34386: LD_ADDR_VAR 0 9
34390: PUSH
34391: LD_VAR 0 53
34395: PUSH
34396: LD_VAR 0 54
34400: PUSH
34401: LD_VAR 0 55
34405: PUSH
34406: LD_VAR 0 56
34410: PUSH
34411: LD_VAR 0 57
34415: PUSH
34416: LD_VAR 0 58
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: PUSH
34429: LD_VAR 0 4
34433: PUSH
34434: LD_INT 1
34436: PLUS
34437: ARRAY
34438: ST_TO_ADDR
34439: GO 34548
34441: LD_INT 31
34443: DOUBLE
34444: EQUAL
34445: IFTRUE 34491
34447: LD_INT 32
34449: DOUBLE
34450: EQUAL
34451: IFTRUE 34491
34453: LD_INT 33
34455: DOUBLE
34456: EQUAL
34457: IFTRUE 34491
34459: LD_INT 27
34461: DOUBLE
34462: EQUAL
34463: IFTRUE 34491
34465: LD_INT 26
34467: DOUBLE
34468: EQUAL
34469: IFTRUE 34491
34471: LD_INT 28
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34491
34477: LD_INT 29
34479: DOUBLE
34480: EQUAL
34481: IFTRUE 34491
34483: LD_INT 30
34485: DOUBLE
34486: EQUAL
34487: IFTRUE 34491
34489: GO 34547
34491: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34492: LD_ADDR_VAR 0 9
34496: PUSH
34497: LD_VAR 0 59
34501: PUSH
34502: LD_VAR 0 60
34506: PUSH
34507: LD_VAR 0 61
34511: PUSH
34512: LD_VAR 0 62
34516: PUSH
34517: LD_VAR 0 63
34521: PUSH
34522: LD_VAR 0 64
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: PUSH
34535: LD_VAR 0 4
34539: PUSH
34540: LD_INT 1
34542: PLUS
34543: ARRAY
34544: ST_TO_ADDR
34545: GO 34548
34547: POP
// temp_list2 = [ ] ;
34548: LD_ADDR_VAR 0 10
34552: PUSH
34553: EMPTY
34554: ST_TO_ADDR
// for i in temp_list do
34555: LD_ADDR_VAR 0 8
34559: PUSH
34560: LD_VAR 0 9
34564: PUSH
34565: FOR_IN
34566: IFFALSE 34618
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34568: LD_ADDR_VAR 0 10
34572: PUSH
34573: LD_VAR 0 10
34577: PUSH
34578: LD_VAR 0 8
34582: PUSH
34583: LD_INT 1
34585: ARRAY
34586: PUSH
34587: LD_VAR 0 2
34591: PLUS
34592: PUSH
34593: LD_VAR 0 8
34597: PUSH
34598: LD_INT 2
34600: ARRAY
34601: PUSH
34602: LD_VAR 0 3
34606: PLUS
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: EMPTY
34613: LIST
34614: ADD
34615: ST_TO_ADDR
34616: GO 34565
34618: POP
34619: POP
// result = temp_list2 ;
34620: LD_ADDR_VAR 0 7
34624: PUSH
34625: LD_VAR 0 10
34629: ST_TO_ADDR
// end ;
34630: LD_VAR 0 7
34634: RET
// export function EnemyInRange ( unit , dist ) ; begin
34635: LD_INT 0
34637: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34638: LD_ADDR_VAR 0 3
34642: PUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 255
34652: PPUSH
34653: LD_VAR 0 1
34657: PPUSH
34658: CALL_OW 250
34662: PPUSH
34663: LD_VAR 0 1
34667: PPUSH
34668: CALL_OW 251
34672: PPUSH
34673: LD_VAR 0 2
34677: PPUSH
34678: CALL 8739 0 4
34682: PUSH
34683: LD_INT 4
34685: ARRAY
34686: ST_TO_ADDR
// end ;
34687: LD_VAR 0 3
34691: RET
// export function PlayerSeeMe ( unit ) ; begin
34692: LD_INT 0
34694: PPUSH
// result := See ( your_side , unit ) ;
34695: LD_ADDR_VAR 0 2
34699: PUSH
34700: LD_OWVAR 2
34704: PPUSH
34705: LD_VAR 0 1
34709: PPUSH
34710: CALL_OW 292
34714: ST_TO_ADDR
// end ;
34715: LD_VAR 0 2
34719: RET
// export function ReverseDir ( unit ) ; begin
34720: LD_INT 0
34722: PPUSH
// if not unit then
34723: LD_VAR 0 1
34727: NOT
34728: IFFALSE 34732
// exit ;
34730: GO 34755
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34732: LD_ADDR_VAR 0 2
34736: PUSH
34737: LD_VAR 0 1
34741: PPUSH
34742: CALL_OW 254
34746: PUSH
34747: LD_INT 3
34749: PLUS
34750: PUSH
34751: LD_INT 6
34753: MOD
34754: ST_TO_ADDR
// end ;
34755: LD_VAR 0 2
34759: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
34760: LD_INT 0
34762: PPUSH
34763: PPUSH
34764: PPUSH
34765: PPUSH
34766: PPUSH
// if not hexes then
34767: LD_VAR 0 2
34771: NOT
34772: IFFALSE 34776
// exit ;
34774: GO 34924
// dist := 9999 ;
34776: LD_ADDR_VAR 0 5
34780: PUSH
34781: LD_INT 9999
34783: ST_TO_ADDR
// for i = 1 to hexes do
34784: LD_ADDR_VAR 0 4
34788: PUSH
34789: DOUBLE
34790: LD_INT 1
34792: DEC
34793: ST_TO_ADDR
34794: LD_VAR 0 2
34798: PUSH
34799: FOR_TO
34800: IFFALSE 34912
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
34802: LD_VAR 0 1
34806: PPUSH
34807: LD_VAR 0 2
34811: PUSH
34812: LD_VAR 0 4
34816: ARRAY
34817: PUSH
34818: LD_INT 1
34820: ARRAY
34821: PPUSH
34822: LD_VAR 0 2
34826: PUSH
34827: LD_VAR 0 4
34831: ARRAY
34832: PUSH
34833: LD_INT 2
34835: ARRAY
34836: PPUSH
34837: CALL_OW 297
34841: PUSH
34842: LD_VAR 0 5
34846: LESS
34847: IFFALSE 34910
// begin hex := hexes [ i ] ;
34849: LD_ADDR_VAR 0 7
34853: PUSH
34854: LD_VAR 0 2
34858: PUSH
34859: LD_VAR 0 4
34863: ARRAY
34864: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34865: LD_ADDR_VAR 0 5
34869: PUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: LD_VAR 0 2
34879: PUSH
34880: LD_VAR 0 4
34884: ARRAY
34885: PUSH
34886: LD_INT 1
34888: ARRAY
34889: PPUSH
34890: LD_VAR 0 2
34894: PUSH
34895: LD_VAR 0 4
34899: ARRAY
34900: PUSH
34901: LD_INT 2
34903: ARRAY
34904: PPUSH
34905: CALL_OW 297
34909: ST_TO_ADDR
// end ; end ;
34910: GO 34799
34912: POP
34913: POP
// result := hex ;
34914: LD_ADDR_VAR 0 3
34918: PUSH
34919: LD_VAR 0 7
34923: ST_TO_ADDR
// end ;
34924: LD_VAR 0 3
34928: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34929: LD_INT 0
34931: PPUSH
34932: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34933: LD_VAR 0 1
34937: NOT
34938: PUSH
34939: LD_VAR 0 1
34943: PUSH
34944: LD_INT 21
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 23
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PPUSH
34968: CALL_OW 69
34972: IN
34973: NOT
34974: OR
34975: IFFALSE 34979
// exit ;
34977: GO 35026
// for i = 1 to 3 do
34979: LD_ADDR_VAR 0 3
34983: PUSH
34984: DOUBLE
34985: LD_INT 1
34987: DEC
34988: ST_TO_ADDR
34989: LD_INT 3
34991: PUSH
34992: FOR_TO
34993: IFFALSE 35024
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34995: LD_VAR 0 1
34999: PPUSH
35000: CALL_OW 250
35004: PPUSH
35005: LD_VAR 0 1
35009: PPUSH
35010: CALL_OW 251
35014: PPUSH
35015: LD_INT 1
35017: PPUSH
35018: CALL_OW 453
35022: GO 34992
35024: POP
35025: POP
// end ;
35026: LD_VAR 0 2
35030: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35031: LD_INT 0
35033: PPUSH
35034: PPUSH
35035: PPUSH
35036: PPUSH
35037: PPUSH
35038: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35039: LD_VAR 0 1
35043: NOT
35044: PUSH
35045: LD_VAR 0 2
35049: NOT
35050: OR
35051: PUSH
35052: LD_VAR 0 1
35056: PPUSH
35057: CALL_OW 314
35061: OR
35062: IFFALSE 35066
// exit ;
35064: GO 35507
// x := GetX ( enemy_unit ) ;
35066: LD_ADDR_VAR 0 7
35070: PUSH
35071: LD_VAR 0 2
35075: PPUSH
35076: CALL_OW 250
35080: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35081: LD_ADDR_VAR 0 8
35085: PUSH
35086: LD_VAR 0 2
35090: PPUSH
35091: CALL_OW 251
35095: ST_TO_ADDR
// if not x or not y then
35096: LD_VAR 0 7
35100: NOT
35101: PUSH
35102: LD_VAR 0 8
35106: NOT
35107: OR
35108: IFFALSE 35112
// exit ;
35110: GO 35507
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35112: LD_ADDR_VAR 0 6
35116: PUSH
35117: LD_VAR 0 7
35121: PPUSH
35122: LD_INT 0
35124: PPUSH
35125: LD_INT 4
35127: PPUSH
35128: CALL_OW 272
35132: PUSH
35133: LD_VAR 0 8
35137: PPUSH
35138: LD_INT 0
35140: PPUSH
35141: LD_INT 4
35143: PPUSH
35144: CALL_OW 273
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_VAR 0 7
35157: PPUSH
35158: LD_INT 1
35160: PPUSH
35161: LD_INT 4
35163: PPUSH
35164: CALL_OW 272
35168: PUSH
35169: LD_VAR 0 8
35173: PPUSH
35174: LD_INT 1
35176: PPUSH
35177: LD_INT 4
35179: PPUSH
35180: CALL_OW 273
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_VAR 0 7
35193: PPUSH
35194: LD_INT 2
35196: PPUSH
35197: LD_INT 4
35199: PPUSH
35200: CALL_OW 272
35204: PUSH
35205: LD_VAR 0 8
35209: PPUSH
35210: LD_INT 2
35212: PPUSH
35213: LD_INT 4
35215: PPUSH
35216: CALL_OW 273
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_VAR 0 7
35229: PPUSH
35230: LD_INT 3
35232: PPUSH
35233: LD_INT 4
35235: PPUSH
35236: CALL_OW 272
35240: PUSH
35241: LD_VAR 0 8
35245: PPUSH
35246: LD_INT 3
35248: PPUSH
35249: LD_INT 4
35251: PPUSH
35252: CALL_OW 273
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_VAR 0 7
35265: PPUSH
35266: LD_INT 4
35268: PPUSH
35269: LD_INT 4
35271: PPUSH
35272: CALL_OW 272
35276: PUSH
35277: LD_VAR 0 8
35281: PPUSH
35282: LD_INT 4
35284: PPUSH
35285: LD_INT 4
35287: PPUSH
35288: CALL_OW 273
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_VAR 0 7
35301: PPUSH
35302: LD_INT 5
35304: PPUSH
35305: LD_INT 4
35307: PPUSH
35308: CALL_OW 272
35312: PUSH
35313: LD_VAR 0 8
35317: PPUSH
35318: LD_INT 5
35320: PPUSH
35321: LD_INT 4
35323: PPUSH
35324: CALL_OW 273
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: ST_TO_ADDR
// for i = tmp downto 1 do
35341: LD_ADDR_VAR 0 4
35345: PUSH
35346: DOUBLE
35347: LD_VAR 0 6
35351: INC
35352: ST_TO_ADDR
35353: LD_INT 1
35355: PUSH
35356: FOR_DOWNTO
35357: IFFALSE 35458
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35359: LD_VAR 0 6
35363: PUSH
35364: LD_VAR 0 4
35368: ARRAY
35369: PUSH
35370: LD_INT 1
35372: ARRAY
35373: PPUSH
35374: LD_VAR 0 6
35378: PUSH
35379: LD_VAR 0 4
35383: ARRAY
35384: PUSH
35385: LD_INT 2
35387: ARRAY
35388: PPUSH
35389: CALL_OW 488
35393: NOT
35394: PUSH
35395: LD_VAR 0 6
35399: PUSH
35400: LD_VAR 0 4
35404: ARRAY
35405: PUSH
35406: LD_INT 1
35408: ARRAY
35409: PPUSH
35410: LD_VAR 0 6
35414: PUSH
35415: LD_VAR 0 4
35419: ARRAY
35420: PUSH
35421: LD_INT 2
35423: ARRAY
35424: PPUSH
35425: CALL_OW 428
35429: PUSH
35430: LD_INT 0
35432: NONEQUAL
35433: OR
35434: IFFALSE 35456
// tmp := Delete ( tmp , i ) ;
35436: LD_ADDR_VAR 0 6
35440: PUSH
35441: LD_VAR 0 6
35445: PPUSH
35446: LD_VAR 0 4
35450: PPUSH
35451: CALL_OW 3
35455: ST_TO_ADDR
35456: GO 35356
35458: POP
35459: POP
// j := GetClosestHex ( unit , tmp ) ;
35460: LD_ADDR_VAR 0 5
35464: PUSH
35465: LD_VAR 0 1
35469: PPUSH
35470: LD_VAR 0 6
35474: PPUSH
35475: CALL 34760 0 2
35479: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35480: LD_VAR 0 1
35484: PPUSH
35485: LD_VAR 0 5
35489: PUSH
35490: LD_INT 1
35492: ARRAY
35493: PPUSH
35494: LD_VAR 0 5
35498: PUSH
35499: LD_INT 2
35501: ARRAY
35502: PPUSH
35503: CALL_OW 111
// end ;
35507: LD_VAR 0 3
35511: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35512: LD_INT 0
35514: PPUSH
35515: PPUSH
35516: PPUSH
// uc_side = 0 ;
35517: LD_ADDR_OWVAR 20
35521: PUSH
35522: LD_INT 0
35524: ST_TO_ADDR
// uc_nation = 0 ;
35525: LD_ADDR_OWVAR 21
35529: PUSH
35530: LD_INT 0
35532: ST_TO_ADDR
// InitHc_All ( ) ;
35533: CALL_OW 584
// InitVc ;
35537: CALL_OW 20
// if mastodonts then
35541: LD_VAR 0 6
35545: IFFALSE 35612
// for i = 1 to mastodonts do
35547: LD_ADDR_VAR 0 11
35551: PUSH
35552: DOUBLE
35553: LD_INT 1
35555: DEC
35556: ST_TO_ADDR
35557: LD_VAR 0 6
35561: PUSH
35562: FOR_TO
35563: IFFALSE 35610
// begin vc_chassis := 31 ;
35565: LD_ADDR_OWVAR 37
35569: PUSH
35570: LD_INT 31
35572: ST_TO_ADDR
// vc_control := control_rider ;
35573: LD_ADDR_OWVAR 38
35577: PUSH
35578: LD_INT 4
35580: ST_TO_ADDR
// animal := CreateVehicle ;
35581: LD_ADDR_VAR 0 12
35585: PUSH
35586: CALL_OW 45
35590: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35591: LD_VAR 0 12
35595: PPUSH
35596: LD_VAR 0 8
35600: PPUSH
35601: LD_INT 0
35603: PPUSH
35604: CALL 37800 0 3
// end ;
35608: GO 35562
35610: POP
35611: POP
// if horses then
35612: LD_VAR 0 5
35616: IFFALSE 35683
// for i = 1 to horses do
35618: LD_ADDR_VAR 0 11
35622: PUSH
35623: DOUBLE
35624: LD_INT 1
35626: DEC
35627: ST_TO_ADDR
35628: LD_VAR 0 5
35632: PUSH
35633: FOR_TO
35634: IFFALSE 35681
// begin hc_class := 21 ;
35636: LD_ADDR_OWVAR 28
35640: PUSH
35641: LD_INT 21
35643: ST_TO_ADDR
// hc_gallery :=  ;
35644: LD_ADDR_OWVAR 33
35648: PUSH
35649: LD_STRING 
35651: ST_TO_ADDR
// animal := CreateHuman ;
35652: LD_ADDR_VAR 0 12
35656: PUSH
35657: CALL_OW 44
35661: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35662: LD_VAR 0 12
35666: PPUSH
35667: LD_VAR 0 8
35671: PPUSH
35672: LD_INT 0
35674: PPUSH
35675: CALL 37800 0 3
// end ;
35679: GO 35633
35681: POP
35682: POP
// if birds then
35683: LD_VAR 0 1
35687: IFFALSE 35754
// for i = 1 to birds do
35689: LD_ADDR_VAR 0 11
35693: PUSH
35694: DOUBLE
35695: LD_INT 1
35697: DEC
35698: ST_TO_ADDR
35699: LD_VAR 0 1
35703: PUSH
35704: FOR_TO
35705: IFFALSE 35752
// begin hc_class = 18 ;
35707: LD_ADDR_OWVAR 28
35711: PUSH
35712: LD_INT 18
35714: ST_TO_ADDR
// hc_gallery =  ;
35715: LD_ADDR_OWVAR 33
35719: PUSH
35720: LD_STRING 
35722: ST_TO_ADDR
// animal := CreateHuman ;
35723: LD_ADDR_VAR 0 12
35727: PUSH
35728: CALL_OW 44
35732: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35733: LD_VAR 0 12
35737: PPUSH
35738: LD_VAR 0 8
35742: PPUSH
35743: LD_INT 0
35745: PPUSH
35746: CALL 37800 0 3
// end ;
35750: GO 35704
35752: POP
35753: POP
// if tigers then
35754: LD_VAR 0 2
35758: IFFALSE 35842
// for i = 1 to tigers do
35760: LD_ADDR_VAR 0 11
35764: PUSH
35765: DOUBLE
35766: LD_INT 1
35768: DEC
35769: ST_TO_ADDR
35770: LD_VAR 0 2
35774: PUSH
35775: FOR_TO
35776: IFFALSE 35840
// begin hc_class = class_tiger ;
35778: LD_ADDR_OWVAR 28
35782: PUSH
35783: LD_INT 14
35785: ST_TO_ADDR
// hc_gallery =  ;
35786: LD_ADDR_OWVAR 33
35790: PUSH
35791: LD_STRING 
35793: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35794: LD_ADDR_OWVAR 35
35798: PUSH
35799: LD_INT 7
35801: NEG
35802: PPUSH
35803: LD_INT 7
35805: PPUSH
35806: CALL_OW 12
35810: ST_TO_ADDR
// animal := CreateHuman ;
35811: LD_ADDR_VAR 0 12
35815: PUSH
35816: CALL_OW 44
35820: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35821: LD_VAR 0 12
35825: PPUSH
35826: LD_VAR 0 8
35830: PPUSH
35831: LD_INT 0
35833: PPUSH
35834: CALL 37800 0 3
// end ;
35838: GO 35775
35840: POP
35841: POP
// if apemans then
35842: LD_VAR 0 3
35846: IFFALSE 35969
// for i = 1 to apemans do
35848: LD_ADDR_VAR 0 11
35852: PUSH
35853: DOUBLE
35854: LD_INT 1
35856: DEC
35857: ST_TO_ADDR
35858: LD_VAR 0 3
35862: PUSH
35863: FOR_TO
35864: IFFALSE 35967
// begin hc_class = class_apeman ;
35866: LD_ADDR_OWVAR 28
35870: PUSH
35871: LD_INT 12
35873: ST_TO_ADDR
// hc_gallery =  ;
35874: LD_ADDR_OWVAR 33
35878: PUSH
35879: LD_STRING 
35881: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
35882: LD_ADDR_OWVAR 35
35886: PUSH
35887: LD_INT 5
35889: NEG
35890: PPUSH
35891: LD_INT 5
35893: PPUSH
35894: CALL_OW 12
35898: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35899: LD_ADDR_OWVAR 31
35903: PUSH
35904: LD_INT 1
35906: PPUSH
35907: LD_INT 3
35909: PPUSH
35910: CALL_OW 12
35914: PUSH
35915: LD_INT 1
35917: PPUSH
35918: LD_INT 3
35920: PPUSH
35921: CALL_OW 12
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: ST_TO_ADDR
// animal := CreateHuman ;
35938: LD_ADDR_VAR 0 12
35942: PUSH
35943: CALL_OW 44
35947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35948: LD_VAR 0 12
35952: PPUSH
35953: LD_VAR 0 8
35957: PPUSH
35958: LD_INT 0
35960: PPUSH
35961: CALL 37800 0 3
// end ;
35965: GO 35863
35967: POP
35968: POP
// if enchidnas then
35969: LD_VAR 0 4
35973: IFFALSE 36040
// for i = 1 to enchidnas do
35975: LD_ADDR_VAR 0 11
35979: PUSH
35980: DOUBLE
35981: LD_INT 1
35983: DEC
35984: ST_TO_ADDR
35985: LD_VAR 0 4
35989: PUSH
35990: FOR_TO
35991: IFFALSE 36038
// begin hc_class = 13 ;
35993: LD_ADDR_OWVAR 28
35997: PUSH
35998: LD_INT 13
36000: ST_TO_ADDR
// hc_gallery =  ;
36001: LD_ADDR_OWVAR 33
36005: PUSH
36006: LD_STRING 
36008: ST_TO_ADDR
// animal := CreateHuman ;
36009: LD_ADDR_VAR 0 12
36013: PUSH
36014: CALL_OW 44
36018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36019: LD_VAR 0 12
36023: PPUSH
36024: LD_VAR 0 8
36028: PPUSH
36029: LD_INT 0
36031: PPUSH
36032: CALL 37800 0 3
// end ;
36036: GO 35990
36038: POP
36039: POP
// if fishes then
36040: LD_VAR 0 7
36044: IFFALSE 36111
// for i = 1 to fishes do
36046: LD_ADDR_VAR 0 11
36050: PUSH
36051: DOUBLE
36052: LD_INT 1
36054: DEC
36055: ST_TO_ADDR
36056: LD_VAR 0 7
36060: PUSH
36061: FOR_TO
36062: IFFALSE 36109
// begin hc_class = 20 ;
36064: LD_ADDR_OWVAR 28
36068: PUSH
36069: LD_INT 20
36071: ST_TO_ADDR
// hc_gallery =  ;
36072: LD_ADDR_OWVAR 33
36076: PUSH
36077: LD_STRING 
36079: ST_TO_ADDR
// animal := CreateHuman ;
36080: LD_ADDR_VAR 0 12
36084: PUSH
36085: CALL_OW 44
36089: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36090: LD_VAR 0 12
36094: PPUSH
36095: LD_VAR 0 9
36099: PPUSH
36100: LD_INT 0
36102: PPUSH
36103: CALL 37800 0 3
// end ;
36107: GO 36061
36109: POP
36110: POP
// end ;
36111: LD_VAR 0 10
36115: RET
// export function WantHeal ( sci , unit ) ; begin
36116: LD_INT 0
36118: PPUSH
// if GetTaskList ( sci ) > 0 then
36119: LD_VAR 0 1
36123: PPUSH
36124: CALL_OW 437
36128: PUSH
36129: LD_INT 0
36131: GREATER
36132: IFFALSE 36202
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36134: LD_VAR 0 1
36138: PPUSH
36139: CALL_OW 437
36143: PUSH
36144: LD_INT 1
36146: ARRAY
36147: PUSH
36148: LD_INT 1
36150: ARRAY
36151: PUSH
36152: LD_STRING l
36154: EQUAL
36155: PUSH
36156: LD_VAR 0 1
36160: PPUSH
36161: CALL_OW 437
36165: PUSH
36166: LD_INT 1
36168: ARRAY
36169: PUSH
36170: LD_INT 4
36172: ARRAY
36173: PUSH
36174: LD_VAR 0 2
36178: EQUAL
36179: AND
36180: IFFALSE 36192
// result := true else
36182: LD_ADDR_VAR 0 3
36186: PUSH
36187: LD_INT 1
36189: ST_TO_ADDR
36190: GO 36200
// result := false ;
36192: LD_ADDR_VAR 0 3
36196: PUSH
36197: LD_INT 0
36199: ST_TO_ADDR
// end else
36200: GO 36210
// result := false ;
36202: LD_ADDR_VAR 0 3
36206: PUSH
36207: LD_INT 0
36209: ST_TO_ADDR
// end ;
36210: LD_VAR 0 3
36214: RET
// export function HealTarget ( sci ) ; begin
36215: LD_INT 0
36217: PPUSH
// if not sci then
36218: LD_VAR 0 1
36222: NOT
36223: IFFALSE 36227
// exit ;
36225: GO 36292
// result := 0 ;
36227: LD_ADDR_VAR 0 2
36231: PUSH
36232: LD_INT 0
36234: ST_TO_ADDR
// if GetTaskList ( sci ) then
36235: LD_VAR 0 1
36239: PPUSH
36240: CALL_OW 437
36244: IFFALSE 36292
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36246: LD_VAR 0 1
36250: PPUSH
36251: CALL_OW 437
36255: PUSH
36256: LD_INT 1
36258: ARRAY
36259: PUSH
36260: LD_INT 1
36262: ARRAY
36263: PUSH
36264: LD_STRING l
36266: EQUAL
36267: IFFALSE 36292
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36269: LD_ADDR_VAR 0 2
36273: PUSH
36274: LD_VAR 0 1
36278: PPUSH
36279: CALL_OW 437
36283: PUSH
36284: LD_INT 1
36286: ARRAY
36287: PUSH
36288: LD_INT 4
36290: ARRAY
36291: ST_TO_ADDR
// end ;
36292: LD_VAR 0 2
36296: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36297: LD_INT 0
36299: PPUSH
36300: PPUSH
36301: PPUSH
36302: PPUSH
// if not base_units then
36303: LD_VAR 0 1
36307: NOT
36308: IFFALSE 36312
// exit ;
36310: GO 36399
// result := false ;
36312: LD_ADDR_VAR 0 2
36316: PUSH
36317: LD_INT 0
36319: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36320: LD_ADDR_VAR 0 5
36324: PUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: LD_INT 21
36332: PUSH
36333: LD_INT 3
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PPUSH
36340: CALL_OW 72
36344: ST_TO_ADDR
// if not tmp then
36345: LD_VAR 0 5
36349: NOT
36350: IFFALSE 36354
// exit ;
36352: GO 36399
// for i in tmp do
36354: LD_ADDR_VAR 0 3
36358: PUSH
36359: LD_VAR 0 5
36363: PUSH
36364: FOR_IN
36365: IFFALSE 36397
// begin result := EnemyInRange ( i , 22 ) ;
36367: LD_ADDR_VAR 0 2
36371: PUSH
36372: LD_VAR 0 3
36376: PPUSH
36377: LD_INT 22
36379: PPUSH
36380: CALL 34635 0 2
36384: ST_TO_ADDR
// if result then
36385: LD_VAR 0 2
36389: IFFALSE 36395
// exit ;
36391: POP
36392: POP
36393: GO 36399
// end ;
36395: GO 36364
36397: POP
36398: POP
// end ;
36399: LD_VAR 0 2
36403: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
36404: LD_INT 0
36406: PPUSH
36407: PPUSH
// if not units then
36408: LD_VAR 0 1
36412: NOT
36413: IFFALSE 36417
// exit ;
36415: GO 36487
// result := [ ] ;
36417: LD_ADDR_VAR 0 3
36421: PUSH
36422: EMPTY
36423: ST_TO_ADDR
// for i in units do
36424: LD_ADDR_VAR 0 4
36428: PUSH
36429: LD_VAR 0 1
36433: PUSH
36434: FOR_IN
36435: IFFALSE 36485
// if GetTag ( i ) = tag then
36437: LD_VAR 0 4
36441: PPUSH
36442: CALL_OW 110
36446: PUSH
36447: LD_VAR 0 2
36451: EQUAL
36452: IFFALSE 36483
// result := Insert ( result , result + 1 , i ) ;
36454: LD_ADDR_VAR 0 3
36458: PUSH
36459: LD_VAR 0 3
36463: PPUSH
36464: LD_VAR 0 3
36468: PUSH
36469: LD_INT 1
36471: PLUS
36472: PPUSH
36473: LD_VAR 0 4
36477: PPUSH
36478: CALL_OW 2
36482: ST_TO_ADDR
36483: GO 36434
36485: POP
36486: POP
// end ;
36487: LD_VAR 0 3
36491: RET
// export function IsDriver ( un ) ; begin
36492: LD_INT 0
36494: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36495: LD_ADDR_VAR 0 2
36499: PUSH
36500: LD_VAR 0 1
36504: PUSH
36505: LD_INT 55
36507: PUSH
36508: EMPTY
36509: LIST
36510: PPUSH
36511: CALL_OW 69
36515: IN
36516: ST_TO_ADDR
// end ;
36517: LD_VAR 0 2
36521: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36522: LD_INT 0
36524: PPUSH
36525: PPUSH
// list := [ ] ;
36526: LD_ADDR_VAR 0 5
36530: PUSH
36531: EMPTY
36532: ST_TO_ADDR
// case d of 0 :
36533: LD_VAR 0 3
36537: PUSH
36538: LD_INT 0
36540: DOUBLE
36541: EQUAL
36542: IFTRUE 36546
36544: GO 36679
36546: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36547: LD_ADDR_VAR 0 5
36551: PUSH
36552: LD_VAR 0 1
36556: PUSH
36557: LD_INT 4
36559: MINUS
36560: PUSH
36561: LD_VAR 0 2
36565: PUSH
36566: LD_INT 4
36568: MINUS
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: PUSH
36578: LD_VAR 0 1
36582: PUSH
36583: LD_INT 3
36585: MINUS
36586: PUSH
36587: LD_VAR 0 2
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: PUSH
36600: LD_VAR 0 1
36604: PUSH
36605: LD_INT 4
36607: PLUS
36608: PUSH
36609: LD_VAR 0 2
36613: PUSH
36614: LD_INT 4
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: PUSH
36622: LD_VAR 0 1
36626: PUSH
36627: LD_INT 3
36629: PLUS
36630: PUSH
36631: LD_VAR 0 2
36635: PUSH
36636: LD_INT 3
36638: PLUS
36639: PUSH
36640: LD_INT 5
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: PUSH
36648: LD_VAR 0 1
36652: PUSH
36653: LD_VAR 0 2
36657: PUSH
36658: LD_INT 4
36660: PLUS
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: ST_TO_ADDR
// end ; 1 :
36677: GO 37377
36679: LD_INT 1
36681: DOUBLE
36682: EQUAL
36683: IFTRUE 36687
36685: GO 36820
36687: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36688: LD_ADDR_VAR 0 5
36692: PUSH
36693: LD_VAR 0 1
36697: PUSH
36698: LD_VAR 0 2
36702: PUSH
36703: LD_INT 4
36705: MINUS
36706: PUSH
36707: LD_INT 3
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: PUSH
36715: LD_VAR 0 1
36719: PUSH
36720: LD_INT 3
36722: MINUS
36723: PUSH
36724: LD_VAR 0 2
36728: PUSH
36729: LD_INT 3
36731: MINUS
36732: PUSH
36733: LD_INT 2
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: PUSH
36741: LD_VAR 0 1
36745: PUSH
36746: LD_INT 4
36748: MINUS
36749: PUSH
36750: LD_VAR 0 2
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: LIST
36762: PUSH
36763: LD_VAR 0 1
36767: PUSH
36768: LD_VAR 0 2
36772: PUSH
36773: LD_INT 3
36775: PLUS
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: PUSH
36785: LD_VAR 0 1
36789: PUSH
36790: LD_INT 4
36792: PLUS
36793: PUSH
36794: LD_VAR 0 2
36798: PUSH
36799: LD_INT 4
36801: PLUS
36802: PUSH
36803: LD_INT 5
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
// end ; 2 :
36818: GO 37377
36820: LD_INT 2
36822: DOUBLE
36823: EQUAL
36824: IFTRUE 36828
36826: GO 36957
36828: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36829: LD_ADDR_VAR 0 5
36833: PUSH
36834: LD_VAR 0 1
36838: PUSH
36839: LD_VAR 0 2
36843: PUSH
36844: LD_INT 3
36846: MINUS
36847: PUSH
36848: LD_INT 3
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: PUSH
36856: LD_VAR 0 1
36860: PUSH
36861: LD_INT 4
36863: PLUS
36864: PUSH
36865: LD_VAR 0 2
36869: PUSH
36870: LD_INT 4
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: PUSH
36878: LD_VAR 0 1
36882: PUSH
36883: LD_VAR 0 2
36887: PUSH
36888: LD_INT 4
36890: PLUS
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: PUSH
36900: LD_VAR 0 1
36904: PUSH
36905: LD_INT 3
36907: MINUS
36908: PUSH
36909: LD_VAR 0 2
36913: PUSH
36914: LD_INT 1
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: PUSH
36922: LD_VAR 0 1
36926: PUSH
36927: LD_INT 4
36929: MINUS
36930: PUSH
36931: LD_VAR 0 2
36935: PUSH
36936: LD_INT 4
36938: MINUS
36939: PUSH
36940: LD_INT 2
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: ST_TO_ADDR
// end ; 3 :
36955: GO 37377
36957: LD_INT 3
36959: DOUBLE
36960: EQUAL
36961: IFTRUE 36965
36963: GO 37098
36965: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36966: LD_ADDR_VAR 0 5
36970: PUSH
36971: LD_VAR 0 1
36975: PUSH
36976: LD_INT 3
36978: PLUS
36979: PUSH
36980: LD_VAR 0 2
36984: PUSH
36985: LD_INT 4
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: PUSH
36993: LD_VAR 0 1
36997: PUSH
36998: LD_INT 4
37000: PLUS
37001: PUSH
37002: LD_VAR 0 2
37006: PUSH
37007: LD_INT 4
37009: PLUS
37010: PUSH
37011: LD_INT 5
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: PUSH
37019: LD_VAR 0 1
37023: PUSH
37024: LD_INT 4
37026: MINUS
37027: PUSH
37028: LD_VAR 0 2
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: PUSH
37041: LD_VAR 0 1
37045: PUSH
37046: LD_VAR 0 2
37050: PUSH
37051: LD_INT 4
37053: MINUS
37054: PUSH
37055: LD_INT 3
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: LIST
37062: PUSH
37063: LD_VAR 0 1
37067: PUSH
37068: LD_INT 3
37070: MINUS
37071: PUSH
37072: LD_VAR 0 2
37076: PUSH
37077: LD_INT 3
37079: MINUS
37080: PUSH
37081: LD_INT 2
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: LIST
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: ST_TO_ADDR
// end ; 4 :
37096: GO 37377
37098: LD_INT 4
37100: DOUBLE
37101: EQUAL
37102: IFTRUE 37106
37104: GO 37239
37106: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37107: LD_ADDR_VAR 0 5
37111: PUSH
37112: LD_VAR 0 1
37116: PUSH
37117: LD_VAR 0 2
37121: PUSH
37122: LD_INT 4
37124: PLUS
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: PUSH
37134: LD_VAR 0 1
37138: PUSH
37139: LD_INT 3
37141: PLUS
37142: PUSH
37143: LD_VAR 0 2
37147: PUSH
37148: LD_INT 3
37150: PLUS
37151: PUSH
37152: LD_INT 5
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: PUSH
37160: LD_VAR 0 1
37164: PUSH
37165: LD_INT 4
37167: PLUS
37168: PUSH
37169: LD_VAR 0 2
37173: PUSH
37174: LD_INT 4
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: PUSH
37182: LD_VAR 0 1
37186: PUSH
37187: LD_VAR 0 2
37191: PUSH
37192: LD_INT 3
37194: MINUS
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: LIST
37203: PUSH
37204: LD_VAR 0 1
37208: PUSH
37209: LD_INT 4
37211: MINUS
37212: PUSH
37213: LD_VAR 0 2
37217: PUSH
37218: LD_INT 4
37220: MINUS
37221: PUSH
37222: LD_INT 2
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: ST_TO_ADDR
// end ; 5 :
37237: GO 37377
37239: LD_INT 5
37241: DOUBLE
37242: EQUAL
37243: IFTRUE 37247
37245: GO 37376
37247: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37248: LD_ADDR_VAR 0 5
37252: PUSH
37253: LD_VAR 0 1
37257: PUSH
37258: LD_INT 4
37260: MINUS
37261: PUSH
37262: LD_VAR 0 2
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: PUSH
37275: LD_VAR 0 1
37279: PUSH
37280: LD_VAR 0 2
37284: PUSH
37285: LD_INT 4
37287: MINUS
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: PUSH
37297: LD_VAR 0 1
37301: PUSH
37302: LD_INT 4
37304: PLUS
37305: PUSH
37306: LD_VAR 0 2
37310: PUSH
37311: LD_INT 4
37313: PLUS
37314: PUSH
37315: LD_INT 5
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: PUSH
37323: LD_VAR 0 1
37327: PUSH
37328: LD_INT 3
37330: PLUS
37331: PUSH
37332: LD_VAR 0 2
37336: PUSH
37337: LD_INT 4
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: PUSH
37345: LD_VAR 0 1
37349: PUSH
37350: LD_VAR 0 2
37354: PUSH
37355: LD_INT 3
37357: PLUS
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
// end ; end ;
37374: GO 37377
37376: POP
// result := list ;
37377: LD_ADDR_VAR 0 4
37381: PUSH
37382: LD_VAR 0 5
37386: ST_TO_ADDR
// end ;
37387: LD_VAR 0 4
37391: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37392: LD_INT 0
37394: PPUSH
37395: PPUSH
37396: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37397: LD_VAR 0 1
37401: NOT
37402: PUSH
37403: LD_VAR 0 2
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: LD_INT 3
37416: PUSH
37417: LD_INT 4
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: IN
37426: NOT
37427: OR
37428: IFFALSE 37432
// exit ;
37430: GO 37524
// tmp := [ ] ;
37432: LD_ADDR_VAR 0 5
37436: PUSH
37437: EMPTY
37438: ST_TO_ADDR
// for i in units do
37439: LD_ADDR_VAR 0 4
37443: PUSH
37444: LD_VAR 0 1
37448: PUSH
37449: FOR_IN
37450: IFFALSE 37493
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
37452: LD_ADDR_VAR 0 5
37456: PUSH
37457: LD_VAR 0 5
37461: PPUSH
37462: LD_VAR 0 5
37466: PUSH
37467: LD_INT 1
37469: PLUS
37470: PPUSH
37471: LD_VAR 0 4
37475: PPUSH
37476: LD_VAR 0 2
37480: PPUSH
37481: CALL_OW 259
37485: PPUSH
37486: CALL_OW 2
37490: ST_TO_ADDR
37491: GO 37449
37493: POP
37494: POP
// if not tmp then
37495: LD_VAR 0 5
37499: NOT
37500: IFFALSE 37504
// exit ;
37502: GO 37524
// result := SortListByListDesc ( units , tmp ) ;
37504: LD_ADDR_VAR 0 3
37508: PUSH
37509: LD_VAR 0 1
37513: PPUSH
37514: LD_VAR 0 5
37518: PPUSH
37519: CALL_OW 77
37523: ST_TO_ADDR
// end ;
37524: LD_VAR 0 3
37528: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37529: LD_INT 0
37531: PPUSH
37532: PPUSH
37533: PPUSH
// result := false ;
37534: LD_ADDR_VAR 0 3
37538: PUSH
37539: LD_INT 0
37541: ST_TO_ADDR
// x := GetX ( building ) ;
37542: LD_ADDR_VAR 0 4
37546: PUSH
37547: LD_VAR 0 2
37551: PPUSH
37552: CALL_OW 250
37556: ST_TO_ADDR
// y := GetY ( building ) ;
37557: LD_ADDR_VAR 0 5
37561: PUSH
37562: LD_VAR 0 2
37566: PPUSH
37567: CALL_OW 251
37571: ST_TO_ADDR
// if not building or not x or not y then
37572: LD_VAR 0 2
37576: NOT
37577: PUSH
37578: LD_VAR 0 4
37582: NOT
37583: OR
37584: PUSH
37585: LD_VAR 0 5
37589: NOT
37590: OR
37591: IFFALSE 37595
// exit ;
37593: GO 37687
// if GetTaskList ( unit ) then
37595: LD_VAR 0 1
37599: PPUSH
37600: CALL_OW 437
37604: IFFALSE 37687
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37606: LD_STRING e
37608: PUSH
37609: LD_VAR 0 1
37613: PPUSH
37614: CALL_OW 437
37618: PUSH
37619: LD_INT 1
37621: ARRAY
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: EQUAL
37627: PUSH
37628: LD_VAR 0 4
37632: PUSH
37633: LD_VAR 0 1
37637: PPUSH
37638: CALL_OW 437
37642: PUSH
37643: LD_INT 1
37645: ARRAY
37646: PUSH
37647: LD_INT 2
37649: ARRAY
37650: EQUAL
37651: AND
37652: PUSH
37653: LD_VAR 0 5
37657: PUSH
37658: LD_VAR 0 1
37662: PPUSH
37663: CALL_OW 437
37667: PUSH
37668: LD_INT 1
37670: ARRAY
37671: PUSH
37672: LD_INT 3
37674: ARRAY
37675: EQUAL
37676: AND
37677: IFFALSE 37687
// result := true end ;
37679: LD_ADDR_VAR 0 3
37683: PUSH
37684: LD_INT 1
37686: ST_TO_ADDR
// end ;
37687: LD_VAR 0 3
37691: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37692: LD_INT 0
37694: PPUSH
// result := false ;
37695: LD_ADDR_VAR 0 4
37699: PUSH
37700: LD_INT 0
37702: ST_TO_ADDR
// if GetTaskList ( unit ) then
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL_OW 437
37712: IFFALSE 37795
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37714: LD_STRING M
37716: PUSH
37717: LD_VAR 0 1
37721: PPUSH
37722: CALL_OW 437
37726: PUSH
37727: LD_INT 1
37729: ARRAY
37730: PUSH
37731: LD_INT 1
37733: ARRAY
37734: EQUAL
37735: PUSH
37736: LD_VAR 0 2
37740: PUSH
37741: LD_VAR 0 1
37745: PPUSH
37746: CALL_OW 437
37750: PUSH
37751: LD_INT 1
37753: ARRAY
37754: PUSH
37755: LD_INT 2
37757: ARRAY
37758: EQUAL
37759: AND
37760: PUSH
37761: LD_VAR 0 3
37765: PUSH
37766: LD_VAR 0 1
37770: PPUSH
37771: CALL_OW 437
37775: PUSH
37776: LD_INT 1
37778: ARRAY
37779: PUSH
37780: LD_INT 3
37782: ARRAY
37783: EQUAL
37784: AND
37785: IFFALSE 37795
// result := true ;
37787: LD_ADDR_VAR 0 4
37791: PUSH
37792: LD_INT 1
37794: ST_TO_ADDR
// end ; end ;
37795: LD_VAR 0 4
37799: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37800: LD_INT 0
37802: PPUSH
37803: PPUSH
37804: PPUSH
37805: PPUSH
// if not unit or not area then
37806: LD_VAR 0 1
37810: NOT
37811: PUSH
37812: LD_VAR 0 2
37816: NOT
37817: OR
37818: IFFALSE 37822
// exit ;
37820: GO 37986
// tmp := AreaToList ( area , i ) ;
37822: LD_ADDR_VAR 0 6
37826: PUSH
37827: LD_VAR 0 2
37831: PPUSH
37832: LD_VAR 0 5
37836: PPUSH
37837: CALL_OW 517
37841: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37842: LD_ADDR_VAR 0 5
37846: PUSH
37847: DOUBLE
37848: LD_INT 1
37850: DEC
37851: ST_TO_ADDR
37852: LD_VAR 0 6
37856: PUSH
37857: LD_INT 1
37859: ARRAY
37860: PUSH
37861: FOR_TO
37862: IFFALSE 37984
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37864: LD_ADDR_VAR 0 7
37868: PUSH
37869: LD_VAR 0 6
37873: PUSH
37874: LD_INT 1
37876: ARRAY
37877: PUSH
37878: LD_VAR 0 5
37882: ARRAY
37883: PUSH
37884: LD_VAR 0 6
37888: PUSH
37889: LD_INT 2
37891: ARRAY
37892: PUSH
37893: LD_VAR 0 5
37897: ARRAY
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37903: LD_VAR 0 7
37907: PUSH
37908: LD_INT 1
37910: ARRAY
37911: PPUSH
37912: LD_VAR 0 7
37916: PUSH
37917: LD_INT 2
37919: ARRAY
37920: PPUSH
37921: CALL_OW 428
37925: PUSH
37926: LD_INT 0
37928: EQUAL
37929: IFFALSE 37982
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37931: LD_VAR 0 1
37935: PPUSH
37936: LD_VAR 0 7
37940: PUSH
37941: LD_INT 1
37943: ARRAY
37944: PPUSH
37945: LD_VAR 0 7
37949: PUSH
37950: LD_INT 2
37952: ARRAY
37953: PPUSH
37954: LD_VAR 0 3
37958: PPUSH
37959: CALL_OW 48
// result := IsPlaced ( unit ) ;
37963: LD_ADDR_VAR 0 4
37967: PUSH
37968: LD_VAR 0 1
37972: PPUSH
37973: CALL_OW 305
37977: ST_TO_ADDR
// exit ;
37978: POP
37979: POP
37980: GO 37986
// end ; end ;
37982: GO 37861
37984: POP
37985: POP
// end ;
37986: LD_VAR 0 4
37990: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37991: LD_INT 0
37993: PPUSH
37994: PPUSH
37995: PPUSH
// if not side or side > 8 then
37996: LD_VAR 0 1
38000: NOT
38001: PUSH
38002: LD_VAR 0 1
38006: PUSH
38007: LD_INT 8
38009: GREATER
38010: OR
38011: IFFALSE 38015
// exit ;
38013: GO 38202
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38015: LD_ADDR_VAR 0 4
38019: PUSH
38020: LD_INT 22
38022: PUSH
38023: LD_VAR 0 1
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 21
38034: PUSH
38035: LD_INT 3
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PPUSH
38046: CALL_OW 69
38050: ST_TO_ADDR
// if not tmp then
38051: LD_VAR 0 4
38055: NOT
38056: IFFALSE 38060
// exit ;
38058: GO 38202
// enable_addtolog := true ;
38060: LD_ADDR_OWVAR 81
38064: PUSH
38065: LD_INT 1
38067: ST_TO_ADDR
// AddToLog ( [ ) ;
38068: LD_STRING [
38070: PPUSH
38071: CALL_OW 561
// for i in tmp do
38075: LD_ADDR_VAR 0 3
38079: PUSH
38080: LD_VAR 0 4
38084: PUSH
38085: FOR_IN
38086: IFFALSE 38193
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38088: LD_STRING [
38090: PUSH
38091: LD_VAR 0 3
38095: PPUSH
38096: CALL_OW 266
38100: STR
38101: PUSH
38102: LD_STRING , 
38104: STR
38105: PUSH
38106: LD_VAR 0 3
38110: PPUSH
38111: CALL_OW 250
38115: STR
38116: PUSH
38117: LD_STRING , 
38119: STR
38120: PUSH
38121: LD_VAR 0 3
38125: PPUSH
38126: CALL_OW 251
38130: STR
38131: PUSH
38132: LD_STRING , 
38134: STR
38135: PUSH
38136: LD_VAR 0 3
38140: PPUSH
38141: CALL_OW 254
38145: STR
38146: PUSH
38147: LD_STRING , 
38149: STR
38150: PUSH
38151: LD_VAR 0 3
38155: PPUSH
38156: LD_INT 1
38158: PPUSH
38159: CALL_OW 268
38163: STR
38164: PUSH
38165: LD_STRING , 
38167: STR
38168: PUSH
38169: LD_VAR 0 3
38173: PPUSH
38174: LD_INT 2
38176: PPUSH
38177: CALL_OW 268
38181: STR
38182: PUSH
38183: LD_STRING ],
38185: STR
38186: PPUSH
38187: CALL_OW 561
// end ;
38191: GO 38085
38193: POP
38194: POP
// AddToLog ( ]; ) ;
38195: LD_STRING ];
38197: PPUSH
38198: CALL_OW 561
// end ;
38202: LD_VAR 0 2
38206: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38207: LD_INT 0
38209: PPUSH
38210: PPUSH
38211: PPUSH
38212: PPUSH
38213: PPUSH
// if not area or not rate or not max then
38214: LD_VAR 0 1
38218: NOT
38219: PUSH
38220: LD_VAR 0 2
38224: NOT
38225: OR
38226: PUSH
38227: LD_VAR 0 4
38231: NOT
38232: OR
38233: IFFALSE 38237
// exit ;
38235: GO 38429
// while 1 do
38237: LD_INT 1
38239: IFFALSE 38429
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38241: LD_ADDR_VAR 0 9
38245: PUSH
38246: LD_VAR 0 1
38250: PPUSH
38251: LD_INT 1
38253: PPUSH
38254: CALL_OW 287
38258: PUSH
38259: LD_INT 10
38261: MUL
38262: ST_TO_ADDR
// r := rate / 10 ;
38263: LD_ADDR_VAR 0 7
38267: PUSH
38268: LD_VAR 0 2
38272: PUSH
38273: LD_INT 10
38275: DIVREAL
38276: ST_TO_ADDR
// time := 1 1$00 ;
38277: LD_ADDR_VAR 0 8
38281: PUSH
38282: LD_INT 2100
38284: ST_TO_ADDR
// if amount < min then
38285: LD_VAR 0 9
38289: PUSH
38290: LD_VAR 0 3
38294: LESS
38295: IFFALSE 38313
// r := r * 2 else
38297: LD_ADDR_VAR 0 7
38301: PUSH
38302: LD_VAR 0 7
38306: PUSH
38307: LD_INT 2
38309: MUL
38310: ST_TO_ADDR
38311: GO 38339
// if amount > max then
38313: LD_VAR 0 9
38317: PUSH
38318: LD_VAR 0 4
38322: GREATER
38323: IFFALSE 38339
// r := r / 2 ;
38325: LD_ADDR_VAR 0 7
38329: PUSH
38330: LD_VAR 0 7
38334: PUSH
38335: LD_INT 2
38337: DIVREAL
38338: ST_TO_ADDR
// time := time / r ;
38339: LD_ADDR_VAR 0 8
38343: PUSH
38344: LD_VAR 0 8
38348: PUSH
38349: LD_VAR 0 7
38353: DIVREAL
38354: ST_TO_ADDR
// if time < 0 then
38355: LD_VAR 0 8
38359: PUSH
38360: LD_INT 0
38362: LESS
38363: IFFALSE 38380
// time := time * - 1 ;
38365: LD_ADDR_VAR 0 8
38369: PUSH
38370: LD_VAR 0 8
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: MUL
38379: ST_TO_ADDR
// wait ( time ) ;
38380: LD_VAR 0 8
38384: PPUSH
38385: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
38389: LD_INT 35
38391: PPUSH
38392: LD_INT 875
38394: PPUSH
38395: CALL_OW 12
38399: PPUSH
38400: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38404: LD_INT 1
38406: PPUSH
38407: LD_INT 5
38409: PPUSH
38410: CALL_OW 12
38414: PPUSH
38415: LD_VAR 0 1
38419: PPUSH
38420: LD_INT 1
38422: PPUSH
38423: CALL_OW 55
// end ;
38427: GO 38237
// end ;
38429: LD_VAR 0 5
38433: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38434: LD_INT 0
38436: PPUSH
38437: PPUSH
38438: PPUSH
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
// if not turrets or not factories then
38444: LD_VAR 0 1
38448: NOT
38449: PUSH
38450: LD_VAR 0 2
38454: NOT
38455: OR
38456: IFFALSE 38460
// exit ;
38458: GO 38767
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38460: LD_ADDR_VAR 0 10
38464: PUSH
38465: LD_INT 5
38467: PUSH
38468: LD_INT 6
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: LD_INT 4
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 3
38487: PUSH
38488: LD_INT 5
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 24
38502: PUSH
38503: LD_INT 25
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 23
38512: PUSH
38513: LD_INT 27
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 42
38526: PUSH
38527: LD_INT 43
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 44
38536: PUSH
38537: LD_INT 46
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 45
38546: PUSH
38547: LD_INT 47
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// result := [ ] ;
38564: LD_ADDR_VAR 0 3
38568: PUSH
38569: EMPTY
38570: ST_TO_ADDR
// for i in turrets do
38571: LD_ADDR_VAR 0 4
38575: PUSH
38576: LD_VAR 0 1
38580: PUSH
38581: FOR_IN
38582: IFFALSE 38765
// begin nat := GetNation ( i ) ;
38584: LD_ADDR_VAR 0 7
38588: PUSH
38589: LD_VAR 0 4
38593: PPUSH
38594: CALL_OW 248
38598: ST_TO_ADDR
// weapon := 0 ;
38599: LD_ADDR_VAR 0 8
38603: PUSH
38604: LD_INT 0
38606: ST_TO_ADDR
// if not nat then
38607: LD_VAR 0 7
38611: NOT
38612: IFFALSE 38616
// continue ;
38614: GO 38581
// for j in list [ nat ] do
38616: LD_ADDR_VAR 0 5
38620: PUSH
38621: LD_VAR 0 10
38625: PUSH
38626: LD_VAR 0 7
38630: ARRAY
38631: PUSH
38632: FOR_IN
38633: IFFALSE 38674
// if GetBWeapon ( i ) = j [ 1 ] then
38635: LD_VAR 0 4
38639: PPUSH
38640: CALL_OW 269
38644: PUSH
38645: LD_VAR 0 5
38649: PUSH
38650: LD_INT 1
38652: ARRAY
38653: EQUAL
38654: IFFALSE 38672
// begin weapon := j [ 2 ] ;
38656: LD_ADDR_VAR 0 8
38660: PUSH
38661: LD_VAR 0 5
38665: PUSH
38666: LD_INT 2
38668: ARRAY
38669: ST_TO_ADDR
// break ;
38670: GO 38674
// end ;
38672: GO 38632
38674: POP
38675: POP
// if not weapon then
38676: LD_VAR 0 8
38680: NOT
38681: IFFALSE 38685
// continue ;
38683: GO 38581
// for k in factories do
38685: LD_ADDR_VAR 0 6
38689: PUSH
38690: LD_VAR 0 2
38694: PUSH
38695: FOR_IN
38696: IFFALSE 38761
// begin weapons := AvailableWeaponList ( k ) ;
38698: LD_ADDR_VAR 0 9
38702: PUSH
38703: LD_VAR 0 6
38707: PPUSH
38708: CALL_OW 478
38712: ST_TO_ADDR
// if not weapons then
38713: LD_VAR 0 9
38717: NOT
38718: IFFALSE 38722
// continue ;
38720: GO 38695
// if weapon in weapons then
38722: LD_VAR 0 8
38726: PUSH
38727: LD_VAR 0 9
38731: IN
38732: IFFALSE 38759
// begin result := [ i , weapon ] ;
38734: LD_ADDR_VAR 0 3
38738: PUSH
38739: LD_VAR 0 4
38743: PUSH
38744: LD_VAR 0 8
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: ST_TO_ADDR
// exit ;
38753: POP
38754: POP
38755: POP
38756: POP
38757: GO 38767
// end ; end ;
38759: GO 38695
38761: POP
38762: POP
// end ;
38763: GO 38581
38765: POP
38766: POP
// end ;
38767: LD_VAR 0 3
38771: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38772: LD_INT 0
38774: PPUSH
// if not side or side > 8 then
38775: LD_VAR 0 3
38779: NOT
38780: PUSH
38781: LD_VAR 0 3
38785: PUSH
38786: LD_INT 8
38788: GREATER
38789: OR
38790: IFFALSE 38794
// exit ;
38792: GO 38853
// if not range then
38794: LD_VAR 0 4
38798: NOT
38799: IFFALSE 38810
// range := - 12 ;
38801: LD_ADDR_VAR 0 4
38805: PUSH
38806: LD_INT 12
38808: NEG
38809: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38810: LD_VAR 0 1
38814: PPUSH
38815: LD_VAR 0 2
38819: PPUSH
38820: LD_VAR 0 3
38824: PPUSH
38825: LD_VAR 0 4
38829: PPUSH
38830: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38834: LD_VAR 0 1
38838: PPUSH
38839: LD_VAR 0 2
38843: PPUSH
38844: LD_VAR 0 3
38848: PPUSH
38849: CALL_OW 331
// end ;
38853: LD_VAR 0 5
38857: RET
// export function Video ( mode ) ; begin
38858: LD_INT 0
38860: PPUSH
// ingame_video = mode ;
38861: LD_ADDR_OWVAR 52
38865: PUSH
38866: LD_VAR 0 1
38870: ST_TO_ADDR
// interface_hidden = mode ;
38871: LD_ADDR_OWVAR 54
38875: PUSH
38876: LD_VAR 0 1
38880: ST_TO_ADDR
// end ;
38881: LD_VAR 0 2
38885: RET
// export function Join ( array , element ) ; begin
38886: LD_INT 0
38888: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38889: LD_ADDR_VAR 0 3
38893: PUSH
38894: LD_VAR 0 1
38898: PPUSH
38899: LD_VAR 0 1
38903: PUSH
38904: LD_INT 1
38906: PLUS
38907: PPUSH
38908: LD_VAR 0 2
38912: PPUSH
38913: CALL_OW 1
38917: ST_TO_ADDR
// end ;
38918: LD_VAR 0 3
38922: RET
// export function JoinUnion ( array , element ) ; begin
38923: LD_INT 0
38925: PPUSH
// result := array union element ;
38926: LD_ADDR_VAR 0 3
38930: PUSH
38931: LD_VAR 0 1
38935: PUSH
38936: LD_VAR 0 2
38940: UNION
38941: ST_TO_ADDR
// end ;
38942: LD_VAR 0 3
38946: RET
// export function GetBehemoths ( side ) ; begin
38947: LD_INT 0
38949: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
38950: LD_ADDR_VAR 0 2
38954: PUSH
38955: LD_INT 22
38957: PUSH
38958: LD_VAR 0 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 31
38969: PUSH
38970: LD_INT 25
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PPUSH
38981: CALL_OW 69
38985: ST_TO_ADDR
// end ;
38986: LD_VAR 0 2
38990: RET
// export function Shuffle ( array ) ; var i , index ; begin
38991: LD_INT 0
38993: PPUSH
38994: PPUSH
38995: PPUSH
// result := [ ] ;
38996: LD_ADDR_VAR 0 2
39000: PUSH
39001: EMPTY
39002: ST_TO_ADDR
// if not array then
39003: LD_VAR 0 1
39007: NOT
39008: IFFALSE 39012
// exit ;
39010: GO 39111
// Randomize ;
39012: CALL_OW 10
// for i = array downto 1 do
39016: LD_ADDR_VAR 0 3
39020: PUSH
39021: DOUBLE
39022: LD_VAR 0 1
39026: INC
39027: ST_TO_ADDR
39028: LD_INT 1
39030: PUSH
39031: FOR_DOWNTO
39032: IFFALSE 39109
// begin index := rand ( 1 , array ) ;
39034: LD_ADDR_VAR 0 4
39038: PUSH
39039: LD_INT 1
39041: PPUSH
39042: LD_VAR 0 1
39046: PPUSH
39047: CALL_OW 12
39051: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39052: LD_ADDR_VAR 0 2
39056: PUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: LD_VAR 0 2
39066: PUSH
39067: LD_INT 1
39069: PLUS
39070: PPUSH
39071: LD_VAR 0 1
39075: PUSH
39076: LD_VAR 0 4
39080: ARRAY
39081: PPUSH
39082: CALL_OW 2
39086: ST_TO_ADDR
// array := Delete ( array , index ) ;
39087: LD_ADDR_VAR 0 1
39091: PUSH
39092: LD_VAR 0 1
39096: PPUSH
39097: LD_VAR 0 4
39101: PPUSH
39102: CALL_OW 3
39106: ST_TO_ADDR
// end ;
39107: GO 39031
39109: POP
39110: POP
// end ;
39111: LD_VAR 0 2
39115: RET
// export function GetBaseMaterials ( base ) ; begin
39116: LD_INT 0
39118: PPUSH
// result := [ 0 , 0 , 0 ] ;
39119: LD_ADDR_VAR 0 2
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: ST_TO_ADDR
// if not base then
39138: LD_VAR 0 1
39142: NOT
39143: IFFALSE 39147
// exit ;
39145: GO 39196
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39147: LD_ADDR_VAR 0 2
39151: PUSH
39152: LD_VAR 0 1
39156: PPUSH
39157: LD_INT 1
39159: PPUSH
39160: CALL_OW 275
39164: PUSH
39165: LD_VAR 0 1
39169: PPUSH
39170: LD_INT 2
39172: PPUSH
39173: CALL_OW 275
39177: PUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: LD_INT 3
39185: PPUSH
39186: CALL_OW 275
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: ST_TO_ADDR
// end ;
39196: LD_VAR 0 2
39200: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39201: LD_INT 0
39203: PPUSH
39204: PPUSH
// result := array ;
39205: LD_ADDR_VAR 0 3
39209: PUSH
39210: LD_VAR 0 1
39214: ST_TO_ADDR
// if size > 0 then
39215: LD_VAR 0 2
39219: PUSH
39220: LD_INT 0
39222: GREATER
39223: IFFALSE 39269
// for i := array downto size do
39225: LD_ADDR_VAR 0 4
39229: PUSH
39230: DOUBLE
39231: LD_VAR 0 1
39235: INC
39236: ST_TO_ADDR
39237: LD_VAR 0 2
39241: PUSH
39242: FOR_DOWNTO
39243: IFFALSE 39267
// result := Delete ( result , result ) ;
39245: LD_ADDR_VAR 0 3
39249: PUSH
39250: LD_VAR 0 3
39254: PPUSH
39255: LD_VAR 0 3
39259: PPUSH
39260: CALL_OW 3
39264: ST_TO_ADDR
39265: GO 39242
39267: POP
39268: POP
// end ;
39269: LD_VAR 0 3
39273: RET
// export function ComExit ( unit ) ; var tmp ; begin
39274: LD_INT 0
39276: PPUSH
39277: PPUSH
// if not IsInUnit ( unit ) then
39278: LD_VAR 0 1
39282: PPUSH
39283: CALL_OW 310
39287: NOT
39288: IFFALSE 39292
// exit ;
39290: GO 39352
// tmp := IsInUnit ( unit ) ;
39292: LD_ADDR_VAR 0 3
39296: PUSH
39297: LD_VAR 0 1
39301: PPUSH
39302: CALL_OW 310
39306: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39307: LD_VAR 0 3
39311: PPUSH
39312: CALL_OW 247
39316: PUSH
39317: LD_INT 2
39319: EQUAL
39320: IFFALSE 39333
// ComExitVehicle ( unit ) else
39322: LD_VAR 0 1
39326: PPUSH
39327: CALL_OW 121
39331: GO 39342
// ComExitBuilding ( unit ) ;
39333: LD_VAR 0 1
39337: PPUSH
39338: CALL_OW 122
// result := tmp ;
39342: LD_ADDR_VAR 0 2
39346: PUSH
39347: LD_VAR 0 3
39351: ST_TO_ADDR
// end ;
39352: LD_VAR 0 2
39356: RET
// export function ResetHc ; begin
39357: LD_INT 0
39359: PPUSH
// InitHc ;
39360: CALL_OW 19
// hc_importance := 0 ;
39364: LD_ADDR_OWVAR 32
39368: PUSH
39369: LD_INT 0
39371: ST_TO_ADDR
// end ;
39372: LD_VAR 0 1
39376: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39377: LD_INT 0
39379: PPUSH
39380: PPUSH
39381: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39382: LD_ADDR_VAR 0 6
39386: PUSH
39387: LD_VAR 0 1
39391: PUSH
39392: LD_VAR 0 3
39396: PLUS
39397: PUSH
39398: LD_INT 2
39400: DIV
39401: ST_TO_ADDR
// if _x < 0 then
39402: LD_VAR 0 6
39406: PUSH
39407: LD_INT 0
39409: LESS
39410: IFFALSE 39427
// _x := _x * - 1 ;
39412: LD_ADDR_VAR 0 6
39416: PUSH
39417: LD_VAR 0 6
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: MUL
39426: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39427: LD_ADDR_VAR 0 7
39431: PUSH
39432: LD_VAR 0 2
39436: PUSH
39437: LD_VAR 0 4
39441: PLUS
39442: PUSH
39443: LD_INT 2
39445: DIV
39446: ST_TO_ADDR
// if _y < 0 then
39447: LD_VAR 0 7
39451: PUSH
39452: LD_INT 0
39454: LESS
39455: IFFALSE 39472
// _y := _y * - 1 ;
39457: LD_ADDR_VAR 0 7
39461: PUSH
39462: LD_VAR 0 7
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: MUL
39471: ST_TO_ADDR
// result := [ _x , _y ] ;
39472: LD_ADDR_VAR 0 5
39476: PUSH
39477: LD_VAR 0 6
39481: PUSH
39482: LD_VAR 0 7
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: ST_TO_ADDR
// end ;
39491: LD_VAR 0 5
39495: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39496: LD_INT 0
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
// task := GetTaskList ( unit ) ;
39502: LD_ADDR_VAR 0 7
39506: PUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: CALL_OW 437
39516: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39517: LD_VAR 0 7
39521: NOT
39522: PUSH
39523: LD_VAR 0 1
39527: PPUSH
39528: LD_VAR 0 2
39532: PPUSH
39533: CALL_OW 308
39537: NOT
39538: AND
39539: IFFALSE 39543
// exit ;
39541: GO 39661
// if IsInArea ( unit , area ) then
39543: LD_VAR 0 1
39547: PPUSH
39548: LD_VAR 0 2
39552: PPUSH
39553: CALL_OW 308
39557: IFFALSE 39575
// begin ComMoveToArea ( unit , goAway ) ;
39559: LD_VAR 0 1
39563: PPUSH
39564: LD_VAR 0 3
39568: PPUSH
39569: CALL_OW 113
// exit ;
39573: GO 39661
// end ; if task [ 1 ] [ 1 ] <> M then
39575: LD_VAR 0 7
39579: PUSH
39580: LD_INT 1
39582: ARRAY
39583: PUSH
39584: LD_INT 1
39586: ARRAY
39587: PUSH
39588: LD_STRING M
39590: NONEQUAL
39591: IFFALSE 39595
// exit ;
39593: GO 39661
// x := task [ 1 ] [ 2 ] ;
39595: LD_ADDR_VAR 0 5
39599: PUSH
39600: LD_VAR 0 7
39604: PUSH
39605: LD_INT 1
39607: ARRAY
39608: PUSH
39609: LD_INT 2
39611: ARRAY
39612: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39613: LD_ADDR_VAR 0 6
39617: PUSH
39618: LD_VAR 0 7
39622: PUSH
39623: LD_INT 1
39625: ARRAY
39626: PUSH
39627: LD_INT 3
39629: ARRAY
39630: ST_TO_ADDR
// if InArea ( x , y , area ) then
39631: LD_VAR 0 5
39635: PPUSH
39636: LD_VAR 0 6
39640: PPUSH
39641: LD_VAR 0 2
39645: PPUSH
39646: CALL_OW 309
39650: IFFALSE 39661
// ComStop ( unit ) ;
39652: LD_VAR 0 1
39656: PPUSH
39657: CALL_OW 141
// end ;
39661: LD_VAR 0 4
39665: RET
// export function Abs ( value ) ; begin
39666: LD_INT 0
39668: PPUSH
// result := value ;
39669: LD_ADDR_VAR 0 2
39673: PUSH
39674: LD_VAR 0 1
39678: ST_TO_ADDR
// if value < 0 then
39679: LD_VAR 0 1
39683: PUSH
39684: LD_INT 0
39686: LESS
39687: IFFALSE 39704
// result := value * - 1 ;
39689: LD_ADDR_VAR 0 2
39693: PUSH
39694: LD_VAR 0 1
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: MUL
39703: ST_TO_ADDR
// end ;
39704: LD_VAR 0 2
39708: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39709: LD_INT 0
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
39718: PPUSH
// if not unit or not building then
39719: LD_VAR 0 1
39723: NOT
39724: PUSH
39725: LD_VAR 0 2
39729: NOT
39730: OR
39731: IFFALSE 39735
// exit ;
39733: GO 39961
// x := GetX ( building ) ;
39735: LD_ADDR_VAR 0 4
39739: PUSH
39740: LD_VAR 0 2
39744: PPUSH
39745: CALL_OW 250
39749: ST_TO_ADDR
// y := GetY ( building ) ;
39750: LD_ADDR_VAR 0 6
39754: PUSH
39755: LD_VAR 0 2
39759: PPUSH
39760: CALL_OW 251
39764: ST_TO_ADDR
// d := GetDir ( building ) ;
39765: LD_ADDR_VAR 0 8
39769: PUSH
39770: LD_VAR 0 2
39774: PPUSH
39775: CALL_OW 254
39779: ST_TO_ADDR
// r := 4 ;
39780: LD_ADDR_VAR 0 9
39784: PUSH
39785: LD_INT 4
39787: ST_TO_ADDR
// for i := 1 to 5 do
39788: LD_ADDR_VAR 0 10
39792: PUSH
39793: DOUBLE
39794: LD_INT 1
39796: DEC
39797: ST_TO_ADDR
39798: LD_INT 5
39800: PUSH
39801: FOR_TO
39802: IFFALSE 39959
// begin _x := ShiftX ( x , d , r + i ) ;
39804: LD_ADDR_VAR 0 5
39808: PUSH
39809: LD_VAR 0 4
39813: PPUSH
39814: LD_VAR 0 8
39818: PPUSH
39819: LD_VAR 0 9
39823: PUSH
39824: LD_VAR 0 10
39828: PLUS
39829: PPUSH
39830: CALL_OW 272
39834: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39835: LD_ADDR_VAR 0 7
39839: PUSH
39840: LD_VAR 0 6
39844: PPUSH
39845: LD_VAR 0 8
39849: PPUSH
39850: LD_VAR 0 9
39854: PUSH
39855: LD_VAR 0 10
39859: PLUS
39860: PPUSH
39861: CALL_OW 273
39865: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39866: LD_VAR 0 5
39870: PPUSH
39871: LD_VAR 0 7
39875: PPUSH
39876: CALL_OW 488
39880: PUSH
39881: LD_VAR 0 5
39885: PPUSH
39886: LD_VAR 0 7
39890: PPUSH
39891: CALL_OW 428
39895: PPUSH
39896: CALL_OW 247
39900: PUSH
39901: LD_INT 3
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: IN
39911: NOT
39912: AND
39913: IFFALSE 39957
// begin ComMoveXY ( unit , _x , _y ) ;
39915: LD_VAR 0 1
39919: PPUSH
39920: LD_VAR 0 5
39924: PPUSH
39925: LD_VAR 0 7
39929: PPUSH
39930: CALL_OW 111
// result := [ _x , _y ] ;
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: LD_VAR 0 5
39943: PUSH
39944: LD_VAR 0 7
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: ST_TO_ADDR
// exit ;
39953: POP
39954: POP
39955: GO 39961
// end ; end ;
39957: GO 39801
39959: POP
39960: POP
// end ; end_of_file
39961: LD_VAR 0 3
39965: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
39966: LD_INT 0
39968: PPUSH
39969: PPUSH
39970: PPUSH
39971: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
39972: LD_VAR 0 1
39976: PPUSH
39977: CALL_OW 264
39981: PUSH
39982: LD_EXP 13
39986: EQUAL
39987: IFFALSE 40059
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39989: LD_INT 68
39991: PPUSH
39992: LD_VAR 0 1
39996: PPUSH
39997: CALL_OW 255
40001: PPUSH
40002: CALL_OW 321
40006: PUSH
40007: LD_INT 2
40009: EQUAL
40010: IFFALSE 40022
// eff := 70 else
40012: LD_ADDR_VAR 0 4
40016: PUSH
40017: LD_INT 70
40019: ST_TO_ADDR
40020: GO 40030
// eff := 30 ;
40022: LD_ADDR_VAR 0 4
40026: PUSH
40027: LD_INT 30
40029: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40030: LD_VAR 0 1
40034: PPUSH
40035: CALL_OW 250
40039: PPUSH
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 251
40049: PPUSH
40050: LD_VAR 0 4
40054: PPUSH
40055: CALL_OW 495
// end ; end ;
40059: LD_VAR 0 2
40063: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40064: LD_INT 0
40066: PPUSH
// end ;
40067: LD_VAR 0 4
40071: RET
// export function SOS_Command ( cmd ) ; begin
40072: LD_INT 0
40074: PPUSH
// end ;
40075: LD_VAR 0 2
40079: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40080: LD_INT 0
40082: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40083: LD_VAR 0 1
40087: PUSH
40088: LD_INT 250
40090: EQUAL
40091: PUSH
40092: LD_VAR 0 2
40096: PPUSH
40097: CALL_OW 264
40101: PUSH
40102: LD_EXP 16
40106: EQUAL
40107: AND
40108: IFFALSE 40129
// MinerPlaceMine ( unit , x , y ) ;
40110: LD_VAR 0 2
40114: PPUSH
40115: LD_VAR 0 4
40119: PPUSH
40120: LD_VAR 0 5
40124: PPUSH
40125: CALL 42470 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40129: LD_VAR 0 1
40133: PUSH
40134: LD_INT 251
40136: EQUAL
40137: PUSH
40138: LD_VAR 0 2
40142: PPUSH
40143: CALL_OW 264
40147: PUSH
40148: LD_EXP 16
40152: EQUAL
40153: AND
40154: IFFALSE 40175
// MinerDetonateMine ( unit , x , y ) ;
40156: LD_VAR 0 2
40160: PPUSH
40161: LD_VAR 0 4
40165: PPUSH
40166: LD_VAR 0 5
40170: PPUSH
40171: CALL 42747 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40175: LD_VAR 0 1
40179: PUSH
40180: LD_INT 252
40182: EQUAL
40183: PUSH
40184: LD_VAR 0 2
40188: PPUSH
40189: CALL_OW 264
40193: PUSH
40194: LD_EXP 16
40198: EQUAL
40199: AND
40200: IFFALSE 40221
// MinerCreateMinefield ( unit , x , y ) ;
40202: LD_VAR 0 2
40206: PPUSH
40207: LD_VAR 0 4
40211: PPUSH
40212: LD_VAR 0 5
40216: PPUSH
40217: CALL 43164 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40221: LD_VAR 0 1
40225: PUSH
40226: LD_INT 253
40228: EQUAL
40229: PUSH
40230: LD_VAR 0 2
40234: PPUSH
40235: CALL_OW 257
40239: PUSH
40240: LD_INT 5
40242: EQUAL
40243: AND
40244: IFFALSE 40265
// ComBinocular ( unit , x , y ) ;
40246: LD_VAR 0 2
40250: PPUSH
40251: LD_VAR 0 4
40255: PPUSH
40256: LD_VAR 0 5
40260: PPUSH
40261: CALL 43535 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40265: LD_VAR 0 1
40269: PUSH
40270: LD_INT 254
40272: EQUAL
40273: PUSH
40274: LD_VAR 0 2
40278: PPUSH
40279: CALL_OW 264
40283: PUSH
40284: LD_EXP 11
40288: EQUAL
40289: AND
40290: PUSH
40291: LD_VAR 0 3
40295: PPUSH
40296: CALL_OW 263
40300: PUSH
40301: LD_INT 3
40303: EQUAL
40304: AND
40305: IFFALSE 40321
// HackDestroyVehicle ( unit , selectedUnit ) ;
40307: LD_VAR 0 2
40311: PPUSH
40312: LD_VAR 0 3
40316: PPUSH
40317: CALL 41830 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40321: LD_VAR 0 1
40325: PUSH
40326: LD_INT 255
40328: EQUAL
40329: PUSH
40330: LD_VAR 0 2
40334: PPUSH
40335: CALL_OW 264
40339: PUSH
40340: LD_INT 14
40342: PUSH
40343: LD_INT 53
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: IN
40350: AND
40351: PUSH
40352: LD_VAR 0 4
40356: PPUSH
40357: LD_VAR 0 5
40361: PPUSH
40362: CALL_OW 488
40366: AND
40367: IFFALSE 40391
// CutTreeXYR ( unit , x , y , 12 ) ;
40369: LD_VAR 0 2
40373: PPUSH
40374: LD_VAR 0 4
40378: PPUSH
40379: LD_VAR 0 5
40383: PPUSH
40384: LD_INT 12
40386: PPUSH
40387: CALL 40396 0 4
// end ;
40391: LD_VAR 0 6
40395: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40396: LD_INT 0
40398: PPUSH
40399: PPUSH
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
40404: PPUSH
40405: PPUSH
40406: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40407: LD_VAR 0 1
40411: NOT
40412: PUSH
40413: LD_VAR 0 2
40417: PPUSH
40418: LD_VAR 0 3
40422: PPUSH
40423: CALL_OW 488
40427: NOT
40428: OR
40429: PUSH
40430: LD_VAR 0 4
40434: NOT
40435: OR
40436: IFFALSE 40440
// exit ;
40438: GO 40780
// list := [ ] ;
40440: LD_ADDR_VAR 0 13
40444: PUSH
40445: EMPTY
40446: ST_TO_ADDR
// if x - r < 0 then
40447: LD_VAR 0 2
40451: PUSH
40452: LD_VAR 0 4
40456: MINUS
40457: PUSH
40458: LD_INT 0
40460: LESS
40461: IFFALSE 40473
// min_x := 0 else
40463: LD_ADDR_VAR 0 7
40467: PUSH
40468: LD_INT 0
40470: ST_TO_ADDR
40471: GO 40489
// min_x := x - r ;
40473: LD_ADDR_VAR 0 7
40477: PUSH
40478: LD_VAR 0 2
40482: PUSH
40483: LD_VAR 0 4
40487: MINUS
40488: ST_TO_ADDR
// if y - r < 0 then
40489: LD_VAR 0 3
40493: PUSH
40494: LD_VAR 0 4
40498: MINUS
40499: PUSH
40500: LD_INT 0
40502: LESS
40503: IFFALSE 40515
// min_y := 0 else
40505: LD_ADDR_VAR 0 8
40509: PUSH
40510: LD_INT 0
40512: ST_TO_ADDR
40513: GO 40531
// min_y := y - r ;
40515: LD_ADDR_VAR 0 8
40519: PUSH
40520: LD_VAR 0 3
40524: PUSH
40525: LD_VAR 0 4
40529: MINUS
40530: ST_TO_ADDR
// max_x := x + r ;
40531: LD_ADDR_VAR 0 9
40535: PUSH
40536: LD_VAR 0 2
40540: PUSH
40541: LD_VAR 0 4
40545: PLUS
40546: ST_TO_ADDR
// max_y := y + r ;
40547: LD_ADDR_VAR 0 10
40551: PUSH
40552: LD_VAR 0 3
40556: PUSH
40557: LD_VAR 0 4
40561: PLUS
40562: ST_TO_ADDR
// for _x = min_x to max_x do
40563: LD_ADDR_VAR 0 11
40567: PUSH
40568: DOUBLE
40569: LD_VAR 0 7
40573: DEC
40574: ST_TO_ADDR
40575: LD_VAR 0 9
40579: PUSH
40580: FOR_TO
40581: IFFALSE 40698
// for _y = min_y to max_y do
40583: LD_ADDR_VAR 0 12
40587: PUSH
40588: DOUBLE
40589: LD_VAR 0 8
40593: DEC
40594: ST_TO_ADDR
40595: LD_VAR 0 10
40599: PUSH
40600: FOR_TO
40601: IFFALSE 40694
// begin if not ValidHex ( _x , _y ) then
40603: LD_VAR 0 11
40607: PPUSH
40608: LD_VAR 0 12
40612: PPUSH
40613: CALL_OW 488
40617: NOT
40618: IFFALSE 40622
// continue ;
40620: GO 40600
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40622: LD_VAR 0 11
40626: PPUSH
40627: LD_VAR 0 12
40631: PPUSH
40632: CALL_OW 351
40636: PUSH
40637: LD_VAR 0 11
40641: PPUSH
40642: LD_VAR 0 12
40646: PPUSH
40647: CALL_OW 554
40651: AND
40652: IFFALSE 40692
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
40654: LD_ADDR_VAR 0 13
40658: PUSH
40659: LD_VAR 0 13
40663: PPUSH
40664: LD_VAR 0 13
40668: PUSH
40669: LD_INT 1
40671: PLUS
40672: PPUSH
40673: LD_VAR 0 11
40677: PUSH
40678: LD_VAR 0 12
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PPUSH
40687: CALL_OW 2
40691: ST_TO_ADDR
// end ;
40692: GO 40600
40694: POP
40695: POP
40696: GO 40580
40698: POP
40699: POP
// if not list then
40700: LD_VAR 0 13
40704: NOT
40705: IFFALSE 40709
// exit ;
40707: GO 40780
// for i in list do
40709: LD_ADDR_VAR 0 6
40713: PUSH
40714: LD_VAR 0 13
40718: PUSH
40719: FOR_IN
40720: IFFALSE 40778
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
40722: LD_VAR 0 1
40726: PPUSH
40727: LD_STRING M
40729: PUSH
40730: LD_VAR 0 6
40734: PUSH
40735: LD_INT 1
40737: ARRAY
40738: PUSH
40739: LD_VAR 0 6
40743: PUSH
40744: LD_INT 2
40746: ARRAY
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: PUSH
40769: EMPTY
40770: LIST
40771: PPUSH
40772: CALL_OW 447
40776: GO 40719
40778: POP
40779: POP
// end ;
40780: LD_VAR 0 5
40784: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40785: LD_EXP 25
40789: NOT
40790: IFFALSE 40840
40792: GO 40794
40794: DISABLE
// begin initHack := true ;
40795: LD_ADDR_EXP 25
40799: PUSH
40800: LD_INT 1
40802: ST_TO_ADDR
// hackTanks := [ ] ;
40803: LD_ADDR_EXP 26
40807: PUSH
40808: EMPTY
40809: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40810: LD_ADDR_EXP 27
40814: PUSH
40815: EMPTY
40816: ST_TO_ADDR
// hackLimit := 3 ;
40817: LD_ADDR_EXP 28
40821: PUSH
40822: LD_INT 3
40824: ST_TO_ADDR
// hackDist := 12 ;
40825: LD_ADDR_EXP 29
40829: PUSH
40830: LD_INT 12
40832: ST_TO_ADDR
// hackCounter := [ ] ;
40833: LD_ADDR_EXP 30
40837: PUSH
40838: EMPTY
40839: ST_TO_ADDR
// end ;
40840: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
40841: LD_EXP 25
40845: PUSH
40846: LD_INT 34
40848: PUSH
40849: LD_EXP 11
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PPUSH
40858: CALL_OW 69
40862: AND
40863: IFFALSE 41118
40865: GO 40867
40867: DISABLE
40868: LD_INT 0
40870: PPUSH
40871: PPUSH
// begin enable ;
40872: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
40873: LD_ADDR_VAR 0 1
40877: PUSH
40878: LD_INT 34
40880: PUSH
40881: LD_EXP 11
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PPUSH
40890: CALL_OW 69
40894: PUSH
40895: FOR_IN
40896: IFFALSE 41116
// begin if not i in hackTanks then
40898: LD_VAR 0 1
40902: PUSH
40903: LD_EXP 26
40907: IN
40908: NOT
40909: IFFALSE 40992
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
40911: LD_ADDR_EXP 26
40915: PUSH
40916: LD_EXP 26
40920: PPUSH
40921: LD_EXP 26
40925: PUSH
40926: LD_INT 1
40928: PLUS
40929: PPUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: CALL_OW 1
40939: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
40940: LD_ADDR_EXP 27
40944: PUSH
40945: LD_EXP 27
40949: PPUSH
40950: LD_EXP 27
40954: PUSH
40955: LD_INT 1
40957: PLUS
40958: PPUSH
40959: EMPTY
40960: PPUSH
40961: CALL_OW 1
40965: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
40966: LD_ADDR_EXP 30
40970: PUSH
40971: LD_EXP 30
40975: PPUSH
40976: LD_EXP 30
40980: PUSH
40981: LD_INT 1
40983: PLUS
40984: PPUSH
40985: EMPTY
40986: PPUSH
40987: CALL_OW 1
40991: ST_TO_ADDR
// end ; if not IsOk ( i ) then
40992: LD_VAR 0 1
40996: PPUSH
40997: CALL_OW 302
41001: NOT
41002: IFFALSE 41015
// begin HackUnlinkAll ( i ) ;
41004: LD_VAR 0 1
41008: PPUSH
41009: CALL 41121 0 1
// continue ;
41013: GO 40895
// end ; HackCheckCapturedStatus ( i ) ;
41015: LD_VAR 0 1
41019: PPUSH
41020: CALL 41564 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41024: LD_ADDR_VAR 0 2
41028: PUSH
41029: LD_INT 81
41031: PUSH
41032: LD_VAR 0 1
41036: PPUSH
41037: CALL_OW 255
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 33
41048: PUSH
41049: LD_INT 3
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 91
41058: PUSH
41059: LD_VAR 0 1
41063: PUSH
41064: LD_EXP 29
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 50
41076: PUSH
41077: EMPTY
41078: LIST
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: PPUSH
41086: CALL_OW 69
41090: ST_TO_ADDR
// if not tmp then
41091: LD_VAR 0 2
41095: NOT
41096: IFFALSE 41100
// continue ;
41098: GO 40895
// HackLink ( i , tmp ) ;
41100: LD_VAR 0 1
41104: PPUSH
41105: LD_VAR 0 2
41109: PPUSH
41110: CALL 41257 0 2
// end ;
41114: GO 40895
41116: POP
41117: POP
// end ;
41118: PPOPN 2
41120: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41121: LD_INT 0
41123: PPUSH
41124: PPUSH
41125: PPUSH
// if not hack in hackTanks then
41126: LD_VAR 0 1
41130: PUSH
41131: LD_EXP 26
41135: IN
41136: NOT
41137: IFFALSE 41141
// exit ;
41139: GO 41252
// index := GetElementIndex ( hackTanks , hack ) ;
41141: LD_ADDR_VAR 0 4
41145: PUSH
41146: LD_EXP 26
41150: PPUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: CALL 7628 0 2
41160: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41161: LD_EXP 27
41165: PUSH
41166: LD_VAR 0 4
41170: ARRAY
41171: IFFALSE 41252
// begin for i in hackTanksCaptured [ index ] do
41173: LD_ADDR_VAR 0 3
41177: PUSH
41178: LD_EXP 27
41182: PUSH
41183: LD_VAR 0 4
41187: ARRAY
41188: PUSH
41189: FOR_IN
41190: IFFALSE 41216
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41192: LD_VAR 0 3
41196: PUSH
41197: LD_INT 1
41199: ARRAY
41200: PPUSH
41201: LD_VAR 0 3
41205: PUSH
41206: LD_INT 2
41208: ARRAY
41209: PPUSH
41210: CALL_OW 235
41214: GO 41189
41216: POP
41217: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41218: LD_ADDR_EXP 27
41222: PUSH
41223: LD_EXP 27
41227: PPUSH
41228: LD_VAR 0 4
41232: PPUSH
41233: EMPTY
41234: PPUSH
41235: CALL_OW 1
41239: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41240: LD_VAR 0 1
41244: PPUSH
41245: LD_INT 0
41247: PPUSH
41248: CALL_OW 505
// end ; end ;
41252: LD_VAR 0 2
41256: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41257: LD_INT 0
41259: PPUSH
41260: PPUSH
41261: PPUSH
// if not hack in hackTanks or not vehicles then
41262: LD_VAR 0 1
41266: PUSH
41267: LD_EXP 26
41271: IN
41272: NOT
41273: PUSH
41274: LD_VAR 0 2
41278: NOT
41279: OR
41280: IFFALSE 41284
// exit ;
41282: GO 41559
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41284: LD_ADDR_VAR 0 2
41288: PUSH
41289: LD_VAR 0 1
41293: PPUSH
41294: LD_VAR 0 2
41298: PPUSH
41299: LD_INT 1
41301: PPUSH
41302: LD_INT 1
41304: PPUSH
41305: CALL 8278 0 4
41309: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41310: LD_ADDR_VAR 0 5
41314: PUSH
41315: LD_EXP 26
41319: PPUSH
41320: LD_VAR 0 1
41324: PPUSH
41325: CALL 7628 0 2
41329: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41330: LD_EXP 27
41334: PUSH
41335: LD_VAR 0 5
41339: ARRAY
41340: PUSH
41341: LD_EXP 28
41345: LESS
41346: IFFALSE 41535
// begin for i := 1 to vehicles do
41348: LD_ADDR_VAR 0 4
41352: PUSH
41353: DOUBLE
41354: LD_INT 1
41356: DEC
41357: ST_TO_ADDR
41358: LD_VAR 0 2
41362: PUSH
41363: FOR_TO
41364: IFFALSE 41533
// begin if hackTanksCaptured [ index ] = hackLimit then
41366: LD_EXP 27
41370: PUSH
41371: LD_VAR 0 5
41375: ARRAY
41376: PUSH
41377: LD_EXP 28
41381: EQUAL
41382: IFFALSE 41386
// break ;
41384: GO 41533
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41386: LD_ADDR_EXP 30
41390: PUSH
41391: LD_EXP 30
41395: PPUSH
41396: LD_VAR 0 5
41400: PPUSH
41401: LD_EXP 30
41405: PUSH
41406: LD_VAR 0 5
41410: ARRAY
41411: PUSH
41412: LD_INT 1
41414: PLUS
41415: PPUSH
41416: CALL_OW 1
41420: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41421: LD_ADDR_EXP 27
41425: PUSH
41426: LD_EXP 27
41430: PPUSH
41431: LD_VAR 0 5
41435: PUSH
41436: LD_EXP 27
41440: PUSH
41441: LD_VAR 0 5
41445: ARRAY
41446: PUSH
41447: LD_INT 1
41449: PLUS
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PPUSH
41455: LD_VAR 0 2
41459: PUSH
41460: LD_VAR 0 4
41464: ARRAY
41465: PUSH
41466: LD_VAR 0 2
41470: PUSH
41471: LD_VAR 0 4
41475: ARRAY
41476: PPUSH
41477: CALL_OW 255
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PPUSH
41486: CALL 7843 0 3
41490: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41491: LD_VAR 0 2
41495: PUSH
41496: LD_VAR 0 4
41500: ARRAY
41501: PPUSH
41502: LD_VAR 0 1
41506: PPUSH
41507: CALL_OW 255
41511: PPUSH
41512: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41516: LD_VAR 0 2
41520: PUSH
41521: LD_VAR 0 4
41525: ARRAY
41526: PPUSH
41527: CALL_OW 141
// end ;
41531: GO 41363
41533: POP
41534: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41535: LD_VAR 0 1
41539: PPUSH
41540: LD_EXP 27
41544: PUSH
41545: LD_VAR 0 5
41549: ARRAY
41550: PUSH
41551: LD_INT 0
41553: PLUS
41554: PPUSH
41555: CALL_OW 505
// end ;
41559: LD_VAR 0 3
41563: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41564: LD_INT 0
41566: PPUSH
41567: PPUSH
41568: PPUSH
41569: PPUSH
// if not hack in hackTanks then
41570: LD_VAR 0 1
41574: PUSH
41575: LD_EXP 26
41579: IN
41580: NOT
41581: IFFALSE 41585
// exit ;
41583: GO 41825
// index := GetElementIndex ( hackTanks , hack ) ;
41585: LD_ADDR_VAR 0 4
41589: PUSH
41590: LD_EXP 26
41594: PPUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: CALL 7628 0 2
41604: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41605: LD_ADDR_VAR 0 3
41609: PUSH
41610: DOUBLE
41611: LD_EXP 27
41615: PUSH
41616: LD_VAR 0 4
41620: ARRAY
41621: INC
41622: ST_TO_ADDR
41623: LD_INT 1
41625: PUSH
41626: FOR_DOWNTO
41627: IFFALSE 41799
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41629: LD_ADDR_VAR 0 5
41633: PUSH
41634: LD_EXP 27
41638: PUSH
41639: LD_VAR 0 4
41643: ARRAY
41644: PUSH
41645: LD_VAR 0 3
41649: ARRAY
41650: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
41651: LD_VAR 0 5
41655: PUSH
41656: LD_INT 1
41658: ARRAY
41659: PPUSH
41660: CALL_OW 302
41664: NOT
41665: PUSH
41666: LD_VAR 0 5
41670: PUSH
41671: LD_INT 1
41673: ARRAY
41674: PPUSH
41675: CALL_OW 255
41679: PUSH
41680: LD_VAR 0 1
41684: PPUSH
41685: CALL_OW 255
41689: NONEQUAL
41690: OR
41691: IFFALSE 41797
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
41693: LD_VAR 0 5
41697: PUSH
41698: LD_INT 1
41700: ARRAY
41701: PPUSH
41702: CALL_OW 305
41706: PUSH
41707: LD_VAR 0 5
41711: PUSH
41712: LD_INT 1
41714: ARRAY
41715: PPUSH
41716: CALL_OW 255
41720: PUSH
41721: LD_VAR 0 1
41725: PPUSH
41726: CALL_OW 255
41730: EQUAL
41731: AND
41732: IFFALSE 41756
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
41734: LD_VAR 0 5
41738: PUSH
41739: LD_INT 1
41741: ARRAY
41742: PPUSH
41743: LD_VAR 0 5
41747: PUSH
41748: LD_INT 2
41750: ARRAY
41751: PPUSH
41752: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41756: LD_ADDR_EXP 27
41760: PUSH
41761: LD_EXP 27
41765: PPUSH
41766: LD_VAR 0 4
41770: PPUSH
41771: LD_EXP 27
41775: PUSH
41776: LD_VAR 0 4
41780: ARRAY
41781: PPUSH
41782: LD_VAR 0 3
41786: PPUSH
41787: CALL_OW 3
41791: PPUSH
41792: CALL_OW 1
41796: ST_TO_ADDR
// end ; end ;
41797: GO 41626
41799: POP
41800: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41801: LD_VAR 0 1
41805: PPUSH
41806: LD_EXP 27
41810: PUSH
41811: LD_VAR 0 4
41815: ARRAY
41816: PUSH
41817: LD_INT 0
41819: PLUS
41820: PPUSH
41821: CALL_OW 505
// end ;
41825: LD_VAR 0 2
41829: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
41830: LD_INT 0
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
// if not hack in hackTanks then
41836: LD_VAR 0 1
41840: PUSH
41841: LD_EXP 26
41845: IN
41846: NOT
41847: IFFALSE 41851
// exit ;
41849: GO 41936
// index := GetElementIndex ( hackTanks , hack ) ;
41851: LD_ADDR_VAR 0 5
41855: PUSH
41856: LD_EXP 26
41860: PPUSH
41861: LD_VAR 0 1
41865: PPUSH
41866: CALL 7628 0 2
41870: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
41871: LD_ADDR_VAR 0 4
41875: PUSH
41876: DOUBLE
41877: LD_INT 1
41879: DEC
41880: ST_TO_ADDR
41881: LD_EXP 27
41885: PUSH
41886: LD_VAR 0 5
41890: ARRAY
41891: PUSH
41892: FOR_TO
41893: IFFALSE 41934
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
41895: LD_EXP 27
41899: PUSH
41900: LD_VAR 0 5
41904: ARRAY
41905: PUSH
41906: LD_VAR 0 4
41910: ARRAY
41911: PUSH
41912: LD_INT 1
41914: ARRAY
41915: PUSH
41916: LD_VAR 0 2
41920: EQUAL
41921: IFFALSE 41932
// KillUnit ( vehicle ) ;
41923: LD_VAR 0 2
41927: PPUSH
41928: CALL_OW 66
41932: GO 41892
41934: POP
41935: POP
// end ;
41936: LD_VAR 0 3
41940: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
41941: LD_EXP 31
41945: NOT
41946: IFFALSE 41981
41948: GO 41950
41950: DISABLE
// begin initMiner := true ;
41951: LD_ADDR_EXP 31
41955: PUSH
41956: LD_INT 1
41958: ST_TO_ADDR
// minersList := [ ] ;
41959: LD_ADDR_EXP 32
41963: PUSH
41964: EMPTY
41965: ST_TO_ADDR
// minerMinesList := [ ] ;
41966: LD_ADDR_EXP 33
41970: PUSH
41971: EMPTY
41972: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
41973: LD_ADDR_EXP 34
41977: PUSH
41978: LD_INT 5
41980: ST_TO_ADDR
// end ;
41981: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
41982: LD_EXP 31
41986: PUSH
41987: LD_INT 34
41989: PUSH
41990: LD_EXP 16
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PPUSH
41999: CALL_OW 69
42003: AND
42004: IFFALSE 42467
42006: GO 42008
42008: DISABLE
42009: LD_INT 0
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
// begin enable ;
42015: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42016: LD_ADDR_VAR 0 1
42020: PUSH
42021: LD_INT 34
42023: PUSH
42024: LD_EXP 16
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PPUSH
42033: CALL_OW 69
42037: PUSH
42038: FOR_IN
42039: IFFALSE 42111
// begin if not i in minersList then
42041: LD_VAR 0 1
42045: PUSH
42046: LD_EXP 32
42050: IN
42051: NOT
42052: IFFALSE 42109
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42054: LD_ADDR_EXP 32
42058: PUSH
42059: LD_EXP 32
42063: PPUSH
42064: LD_EXP 32
42068: PUSH
42069: LD_INT 1
42071: PLUS
42072: PPUSH
42073: LD_VAR 0 1
42077: PPUSH
42078: CALL_OW 1
42082: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42083: LD_ADDR_EXP 33
42087: PUSH
42088: LD_EXP 33
42092: PPUSH
42093: LD_EXP 33
42097: PUSH
42098: LD_INT 1
42100: PLUS
42101: PPUSH
42102: EMPTY
42103: PPUSH
42104: CALL_OW 1
42108: ST_TO_ADDR
// end end ;
42109: GO 42038
42111: POP
42112: POP
// for i := minerMinesList downto 1 do
42113: LD_ADDR_VAR 0 1
42117: PUSH
42118: DOUBLE
42119: LD_EXP 33
42123: INC
42124: ST_TO_ADDR
42125: LD_INT 1
42127: PUSH
42128: FOR_DOWNTO
42129: IFFALSE 42465
// begin if IsLive ( minersList [ i ] ) then
42131: LD_EXP 32
42135: PUSH
42136: LD_VAR 0 1
42140: ARRAY
42141: PPUSH
42142: CALL_OW 300
42146: IFFALSE 42174
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42148: LD_EXP 32
42152: PUSH
42153: LD_VAR 0 1
42157: ARRAY
42158: PPUSH
42159: LD_EXP 33
42163: PUSH
42164: LD_VAR 0 1
42168: ARRAY
42169: PPUSH
42170: CALL_OW 505
// if not minerMinesList [ i ] then
42174: LD_EXP 33
42178: PUSH
42179: LD_VAR 0 1
42183: ARRAY
42184: NOT
42185: IFFALSE 42189
// continue ;
42187: GO 42128
// for j := minerMinesList [ i ] downto 1 do
42189: LD_ADDR_VAR 0 2
42193: PUSH
42194: DOUBLE
42195: LD_EXP 33
42199: PUSH
42200: LD_VAR 0 1
42204: ARRAY
42205: INC
42206: ST_TO_ADDR
42207: LD_INT 1
42209: PUSH
42210: FOR_DOWNTO
42211: IFFALSE 42461
// begin side := GetSide ( minersList [ i ] ) ;
42213: LD_ADDR_VAR 0 3
42217: PUSH
42218: LD_EXP 32
42222: PUSH
42223: LD_VAR 0 1
42227: ARRAY
42228: PPUSH
42229: CALL_OW 255
42233: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42234: LD_ADDR_VAR 0 4
42238: PUSH
42239: LD_EXP 33
42243: PUSH
42244: LD_VAR 0 1
42248: ARRAY
42249: PUSH
42250: LD_VAR 0 2
42254: ARRAY
42255: PUSH
42256: LD_INT 1
42258: ARRAY
42259: PPUSH
42260: LD_EXP 33
42264: PUSH
42265: LD_VAR 0 1
42269: ARRAY
42270: PUSH
42271: LD_VAR 0 2
42275: ARRAY
42276: PUSH
42277: LD_INT 2
42279: ARRAY
42280: PPUSH
42281: CALL_OW 428
42285: ST_TO_ADDR
// if not tmp then
42286: LD_VAR 0 4
42290: NOT
42291: IFFALSE 42295
// continue ;
42293: GO 42210
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42295: LD_VAR 0 4
42299: PUSH
42300: LD_INT 81
42302: PUSH
42303: LD_VAR 0 3
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PPUSH
42312: CALL_OW 69
42316: IN
42317: PUSH
42318: LD_EXP 33
42322: PUSH
42323: LD_VAR 0 1
42327: ARRAY
42328: PUSH
42329: LD_VAR 0 2
42333: ARRAY
42334: PUSH
42335: LD_INT 1
42337: ARRAY
42338: PPUSH
42339: LD_EXP 33
42343: PUSH
42344: LD_VAR 0 1
42348: ARRAY
42349: PUSH
42350: LD_VAR 0 2
42354: ARRAY
42355: PUSH
42356: LD_INT 2
42358: ARRAY
42359: PPUSH
42360: CALL_OW 458
42364: AND
42365: IFFALSE 42459
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42367: LD_EXP 33
42371: PUSH
42372: LD_VAR 0 1
42376: ARRAY
42377: PUSH
42378: LD_VAR 0 2
42382: ARRAY
42383: PUSH
42384: LD_INT 1
42386: ARRAY
42387: PPUSH
42388: LD_EXP 33
42392: PUSH
42393: LD_VAR 0 1
42397: ARRAY
42398: PUSH
42399: LD_VAR 0 2
42403: ARRAY
42404: PUSH
42405: LD_INT 2
42407: ARRAY
42408: PPUSH
42409: LD_VAR 0 3
42413: PPUSH
42414: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42418: LD_ADDR_EXP 33
42422: PUSH
42423: LD_EXP 33
42427: PPUSH
42428: LD_VAR 0 1
42432: PPUSH
42433: LD_EXP 33
42437: PUSH
42438: LD_VAR 0 1
42442: ARRAY
42443: PPUSH
42444: LD_VAR 0 2
42448: PPUSH
42449: CALL_OW 3
42453: PPUSH
42454: CALL_OW 1
42458: ST_TO_ADDR
// end ; end ;
42459: GO 42210
42461: POP
42462: POP
// end ;
42463: GO 42128
42465: POP
42466: POP
// end ;
42467: PPOPN 4
42469: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
42470: LD_INT 0
42472: PPUSH
42473: PPUSH
// result := false ;
42474: LD_ADDR_VAR 0 4
42478: PUSH
42479: LD_INT 0
42481: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42482: LD_VAR 0 1
42486: PPUSH
42487: CALL_OW 264
42491: PUSH
42492: LD_EXP 16
42496: EQUAL
42497: NOT
42498: IFFALSE 42502
// exit ;
42500: GO 42742
// index := GetElementIndex ( minersList , unit ) ;
42502: LD_ADDR_VAR 0 5
42506: PUSH
42507: LD_EXP 32
42511: PPUSH
42512: LD_VAR 0 1
42516: PPUSH
42517: CALL 7628 0 2
42521: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42522: LD_EXP 33
42526: PUSH
42527: LD_VAR 0 5
42531: ARRAY
42532: PUSH
42533: LD_EXP 34
42537: GREATEREQUAL
42538: IFFALSE 42542
// exit ;
42540: GO 42742
// ComMoveXY ( unit , x , y ) ;
42542: LD_VAR 0 1
42546: PPUSH
42547: LD_VAR 0 2
42551: PPUSH
42552: LD_VAR 0 3
42556: PPUSH
42557: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42561: LD_INT 35
42563: PPUSH
42564: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42568: LD_VAR 0 1
42572: PPUSH
42573: LD_VAR 0 2
42577: PPUSH
42578: LD_VAR 0 3
42582: PPUSH
42583: CALL 37692 0 3
42587: NOT
42588: PUSH
42589: LD_VAR 0 1
42593: PPUSH
42594: CALL_OW 314
42598: AND
42599: IFFALSE 42603
// exit ;
42601: GO 42742
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42603: LD_VAR 0 2
42607: PPUSH
42608: LD_VAR 0 3
42612: PPUSH
42613: CALL_OW 428
42617: PUSH
42618: LD_VAR 0 1
42622: EQUAL
42623: PUSH
42624: LD_VAR 0 1
42628: PPUSH
42629: CALL_OW 314
42633: NOT
42634: AND
42635: IFFALSE 42561
// PlaySoundXY ( x , y , PlantMine ) ;
42637: LD_VAR 0 2
42641: PPUSH
42642: LD_VAR 0 3
42646: PPUSH
42647: LD_STRING PlantMine
42649: PPUSH
42650: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
42654: LD_VAR 0 2
42658: PPUSH
42659: LD_VAR 0 3
42663: PPUSH
42664: LD_VAR 0 1
42668: PPUSH
42669: CALL_OW 255
42673: PPUSH
42674: LD_INT 0
42676: PPUSH
42677: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
42681: LD_ADDR_EXP 33
42685: PUSH
42686: LD_EXP 33
42690: PPUSH
42691: LD_VAR 0 5
42695: PUSH
42696: LD_EXP 33
42700: PUSH
42701: LD_VAR 0 5
42705: ARRAY
42706: PUSH
42707: LD_INT 1
42709: PLUS
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PPUSH
42715: LD_VAR 0 2
42719: PUSH
42720: LD_VAR 0 3
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PPUSH
42729: CALL 7843 0 3
42733: ST_TO_ADDR
// result := true ;
42734: LD_ADDR_VAR 0 4
42738: PUSH
42739: LD_INT 1
42741: ST_TO_ADDR
// end ;
42742: LD_VAR 0 4
42746: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
42747: LD_INT 0
42749: PPUSH
42750: PPUSH
42751: PPUSH
// if not unit in minersList then
42752: LD_VAR 0 1
42756: PUSH
42757: LD_EXP 32
42761: IN
42762: NOT
42763: IFFALSE 42767
// exit ;
42765: GO 43159
// index := GetElementIndex ( minersList , unit ) ;
42767: LD_ADDR_VAR 0 6
42771: PUSH
42772: LD_EXP 32
42776: PPUSH
42777: LD_VAR 0 1
42781: PPUSH
42782: CALL 7628 0 2
42786: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
42787: LD_ADDR_VAR 0 5
42791: PUSH
42792: DOUBLE
42793: LD_EXP 33
42797: PUSH
42798: LD_VAR 0 6
42802: ARRAY
42803: INC
42804: ST_TO_ADDR
42805: LD_INT 1
42807: PUSH
42808: FOR_DOWNTO
42809: IFFALSE 42970
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
42811: LD_EXP 33
42815: PUSH
42816: LD_VAR 0 6
42820: ARRAY
42821: PUSH
42822: LD_VAR 0 5
42826: ARRAY
42827: PUSH
42828: LD_INT 1
42830: ARRAY
42831: PUSH
42832: LD_VAR 0 2
42836: EQUAL
42837: PUSH
42838: LD_EXP 33
42842: PUSH
42843: LD_VAR 0 6
42847: ARRAY
42848: PUSH
42849: LD_VAR 0 5
42853: ARRAY
42854: PUSH
42855: LD_INT 2
42857: ARRAY
42858: PUSH
42859: LD_VAR 0 3
42863: EQUAL
42864: AND
42865: IFFALSE 42968
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42867: LD_EXP 33
42871: PUSH
42872: LD_VAR 0 6
42876: ARRAY
42877: PUSH
42878: LD_VAR 0 5
42882: ARRAY
42883: PUSH
42884: LD_INT 1
42886: ARRAY
42887: PPUSH
42888: LD_EXP 33
42892: PUSH
42893: LD_VAR 0 6
42897: ARRAY
42898: PUSH
42899: LD_VAR 0 5
42903: ARRAY
42904: PUSH
42905: LD_INT 2
42907: ARRAY
42908: PPUSH
42909: LD_VAR 0 1
42913: PPUSH
42914: CALL_OW 255
42918: PPUSH
42919: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
42923: LD_ADDR_EXP 33
42927: PUSH
42928: LD_EXP 33
42932: PPUSH
42933: LD_VAR 0 6
42937: PPUSH
42938: LD_EXP 33
42942: PUSH
42943: LD_VAR 0 6
42947: ARRAY
42948: PPUSH
42949: LD_VAR 0 5
42953: PPUSH
42954: CALL_OW 3
42958: PPUSH
42959: CALL_OW 1
42963: ST_TO_ADDR
// exit ;
42964: POP
42965: POP
42966: GO 43159
// end ; end ;
42968: GO 42808
42970: POP
42971: POP
// for i := minerMinesList [ index ] downto 1 do
42972: LD_ADDR_VAR 0 5
42976: PUSH
42977: DOUBLE
42978: LD_EXP 33
42982: PUSH
42983: LD_VAR 0 6
42987: ARRAY
42988: INC
42989: ST_TO_ADDR
42990: LD_INT 1
42992: PUSH
42993: FOR_DOWNTO
42994: IFFALSE 43157
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
42996: LD_EXP 33
43000: PUSH
43001: LD_VAR 0 6
43005: ARRAY
43006: PUSH
43007: LD_VAR 0 5
43011: ARRAY
43012: PUSH
43013: LD_INT 1
43015: ARRAY
43016: PPUSH
43017: LD_EXP 33
43021: PUSH
43022: LD_VAR 0 6
43026: ARRAY
43027: PUSH
43028: LD_VAR 0 5
43032: ARRAY
43033: PUSH
43034: LD_INT 2
43036: ARRAY
43037: PPUSH
43038: LD_VAR 0 2
43042: PPUSH
43043: LD_VAR 0 3
43047: PPUSH
43048: CALL_OW 298
43052: PUSH
43053: LD_INT 6
43055: LESS
43056: IFFALSE 43155
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43058: LD_EXP 33
43062: PUSH
43063: LD_VAR 0 6
43067: ARRAY
43068: PUSH
43069: LD_VAR 0 5
43073: ARRAY
43074: PUSH
43075: LD_INT 1
43077: ARRAY
43078: PPUSH
43079: LD_EXP 33
43083: PUSH
43084: LD_VAR 0 6
43088: ARRAY
43089: PUSH
43090: LD_VAR 0 5
43094: ARRAY
43095: PUSH
43096: LD_INT 2
43098: ARRAY
43099: PPUSH
43100: LD_VAR 0 1
43104: PPUSH
43105: CALL_OW 255
43109: PPUSH
43110: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43114: LD_ADDR_EXP 33
43118: PUSH
43119: LD_EXP 33
43123: PPUSH
43124: LD_VAR 0 6
43128: PPUSH
43129: LD_EXP 33
43133: PUSH
43134: LD_VAR 0 6
43138: ARRAY
43139: PPUSH
43140: LD_VAR 0 5
43144: PPUSH
43145: CALL_OW 3
43149: PPUSH
43150: CALL_OW 1
43154: ST_TO_ADDR
// end ; end ;
43155: GO 42993
43157: POP
43158: POP
// end ;
43159: LD_VAR 0 4
43163: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43164: LD_INT 0
43166: PPUSH
43167: PPUSH
43168: PPUSH
43169: PPUSH
43170: PPUSH
43171: PPUSH
43172: PPUSH
43173: PPUSH
43174: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43175: LD_VAR 0 1
43179: PPUSH
43180: CALL_OW 264
43184: PUSH
43185: LD_EXP 16
43189: EQUAL
43190: NOT
43191: PUSH
43192: LD_VAR 0 1
43196: PUSH
43197: LD_EXP 32
43201: IN
43202: NOT
43203: OR
43204: IFFALSE 43208
// exit ;
43206: GO 43530
// index := GetElementIndex ( minersList , unit ) ;
43208: LD_ADDR_VAR 0 6
43212: PUSH
43213: LD_EXP 32
43217: PPUSH
43218: LD_VAR 0 1
43222: PPUSH
43223: CALL 7628 0 2
43227: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43228: LD_ADDR_VAR 0 8
43232: PUSH
43233: LD_EXP 34
43237: PUSH
43238: LD_EXP 33
43242: PUSH
43243: LD_VAR 0 6
43247: ARRAY
43248: MINUS
43249: ST_TO_ADDR
// if not minesFreeAmount then
43250: LD_VAR 0 8
43254: NOT
43255: IFFALSE 43259
// exit ;
43257: GO 43530
// tmp := [ ] ;
43259: LD_ADDR_VAR 0 7
43263: PUSH
43264: EMPTY
43265: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43266: LD_ADDR_VAR 0 5
43270: PUSH
43271: DOUBLE
43272: LD_INT 1
43274: DEC
43275: ST_TO_ADDR
43276: LD_VAR 0 8
43280: PUSH
43281: FOR_TO
43282: IFFALSE 43477
// begin _d := rand ( 0 , 5 ) ;
43284: LD_ADDR_VAR 0 11
43288: PUSH
43289: LD_INT 0
43291: PPUSH
43292: LD_INT 5
43294: PPUSH
43295: CALL_OW 12
43299: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43300: LD_ADDR_VAR 0 12
43304: PUSH
43305: LD_INT 2
43307: PPUSH
43308: LD_INT 6
43310: PPUSH
43311: CALL_OW 12
43315: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43316: LD_ADDR_VAR 0 9
43320: PUSH
43321: LD_VAR 0 2
43325: PPUSH
43326: LD_VAR 0 11
43330: PPUSH
43331: LD_VAR 0 12
43335: PPUSH
43336: CALL_OW 272
43340: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43341: LD_ADDR_VAR 0 10
43345: PUSH
43346: LD_VAR 0 3
43350: PPUSH
43351: LD_VAR 0 11
43355: PPUSH
43356: LD_VAR 0 12
43360: PPUSH
43361: CALL_OW 273
43365: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43366: LD_VAR 0 9
43370: PPUSH
43371: LD_VAR 0 10
43375: PPUSH
43376: CALL_OW 488
43380: PUSH
43381: LD_VAR 0 9
43385: PUSH
43386: LD_VAR 0 10
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_VAR 0 7
43399: IN
43400: NOT
43401: AND
43402: PUSH
43403: LD_VAR 0 9
43407: PPUSH
43408: LD_VAR 0 10
43412: PPUSH
43413: CALL_OW 458
43417: NOT
43418: AND
43419: IFFALSE 43461
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43421: LD_ADDR_VAR 0 7
43425: PUSH
43426: LD_VAR 0 7
43430: PPUSH
43431: LD_VAR 0 7
43435: PUSH
43436: LD_INT 1
43438: PLUS
43439: PPUSH
43440: LD_VAR 0 9
43444: PUSH
43445: LD_VAR 0 10
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PPUSH
43454: CALL_OW 1
43458: ST_TO_ADDR
43459: GO 43475
// i := i - 1 ;
43461: LD_ADDR_VAR 0 5
43465: PUSH
43466: LD_VAR 0 5
43470: PUSH
43471: LD_INT 1
43473: MINUS
43474: ST_TO_ADDR
// end ;
43475: GO 43281
43477: POP
43478: POP
// for i in tmp do
43479: LD_ADDR_VAR 0 5
43483: PUSH
43484: LD_VAR 0 7
43488: PUSH
43489: FOR_IN
43490: IFFALSE 43528
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43492: LD_VAR 0 1
43496: PPUSH
43497: LD_VAR 0 5
43501: PUSH
43502: LD_INT 1
43504: ARRAY
43505: PPUSH
43506: LD_VAR 0 5
43510: PUSH
43511: LD_INT 2
43513: ARRAY
43514: PPUSH
43515: CALL 42470 0 3
43519: NOT
43520: IFFALSE 43526
// exit ;
43522: POP
43523: POP
43524: GO 43530
43526: GO 43489
43528: POP
43529: POP
// end ;
43530: LD_VAR 0 4
43534: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
43535: LD_INT 0
43537: PPUSH
43538: PPUSH
43539: PPUSH
43540: PPUSH
43541: PPUSH
43542: PPUSH
43543: PPUSH
// if not GetClass ( unit ) = class_sniper then
43544: LD_VAR 0 1
43548: PPUSH
43549: CALL_OW 257
43553: PUSH
43554: LD_INT 5
43556: EQUAL
43557: NOT
43558: IFFALSE 43562
// exit ;
43560: GO 43950
// dist := 8 ;
43562: LD_ADDR_VAR 0 5
43566: PUSH
43567: LD_INT 8
43569: ST_TO_ADDR
// viewRange := 12 ;
43570: LD_ADDR_VAR 0 7
43574: PUSH
43575: LD_INT 12
43577: ST_TO_ADDR
// side := GetSide ( unit ) ;
43578: LD_ADDR_VAR 0 6
43582: PUSH
43583: LD_VAR 0 1
43587: PPUSH
43588: CALL_OW 255
43592: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43593: LD_INT 61
43595: PPUSH
43596: LD_VAR 0 6
43600: PPUSH
43601: CALL_OW 321
43605: PUSH
43606: LD_INT 2
43608: EQUAL
43609: IFFALSE 43619
// viewRange := 16 ;
43611: LD_ADDR_VAR 0 7
43615: PUSH
43616: LD_INT 16
43618: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43619: LD_VAR 0 1
43623: PPUSH
43624: LD_VAR 0 2
43628: PPUSH
43629: LD_VAR 0 3
43633: PPUSH
43634: CALL_OW 297
43638: PUSH
43639: LD_VAR 0 5
43643: GREATER
43644: IFFALSE 43723
// begin ComMoveXY ( unit , x , y ) ;
43646: LD_VAR 0 1
43650: PPUSH
43651: LD_VAR 0 2
43655: PPUSH
43656: LD_VAR 0 3
43660: PPUSH
43661: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43665: LD_INT 35
43667: PPUSH
43668: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
43672: LD_VAR 0 1
43676: PPUSH
43677: LD_VAR 0 2
43681: PPUSH
43682: LD_VAR 0 3
43686: PPUSH
43687: CALL 37692 0 3
43691: NOT
43692: IFFALSE 43696
// exit ;
43694: GO 43950
// until GetDistUnitXY ( unit , x , y ) < dist ;
43696: LD_VAR 0 1
43700: PPUSH
43701: LD_VAR 0 2
43705: PPUSH
43706: LD_VAR 0 3
43710: PPUSH
43711: CALL_OW 297
43715: PUSH
43716: LD_VAR 0 5
43720: LESS
43721: IFFALSE 43665
// end ; ComTurnXY ( unit , x , y ) ;
43723: LD_VAR 0 1
43727: PPUSH
43728: LD_VAR 0 2
43732: PPUSH
43733: LD_VAR 0 3
43737: PPUSH
43738: CALL_OW 118
// wait ( 5 ) ;
43742: LD_INT 5
43744: PPUSH
43745: CALL_OW 67
// _d := GetDir ( unit ) ;
43749: LD_ADDR_VAR 0 10
43753: PUSH
43754: LD_VAR 0 1
43758: PPUSH
43759: CALL_OW 254
43763: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
43764: LD_ADDR_VAR 0 8
43768: PUSH
43769: LD_VAR 0 1
43773: PPUSH
43774: CALL_OW 250
43778: PPUSH
43779: LD_VAR 0 10
43783: PPUSH
43784: LD_VAR 0 5
43788: PPUSH
43789: CALL_OW 272
43793: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
43794: LD_ADDR_VAR 0 9
43798: PUSH
43799: LD_VAR 0 1
43803: PPUSH
43804: CALL_OW 251
43808: PPUSH
43809: LD_VAR 0 10
43813: PPUSH
43814: LD_VAR 0 5
43818: PPUSH
43819: CALL_OW 273
43823: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43824: LD_VAR 0 8
43828: PPUSH
43829: LD_VAR 0 9
43833: PPUSH
43834: CALL_OW 488
43838: NOT
43839: IFFALSE 43843
// exit ;
43841: GO 43950
// ComAnimCustom ( unit , 1 ) ;
43843: LD_VAR 0 1
43847: PPUSH
43848: LD_INT 1
43850: PPUSH
43851: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
43855: LD_VAR 0 8
43859: PPUSH
43860: LD_VAR 0 9
43864: PPUSH
43865: LD_VAR 0 6
43869: PPUSH
43870: LD_VAR 0 7
43874: PPUSH
43875: CALL_OW 330
// repeat wait ( 1 ) ;
43879: LD_INT 1
43881: PPUSH
43882: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
43886: LD_VAR 0 1
43890: PPUSH
43891: CALL_OW 316
43895: PUSH
43896: LD_VAR 0 1
43900: PPUSH
43901: CALL_OW 314
43905: OR
43906: PUSH
43907: LD_VAR 0 1
43911: PPUSH
43912: CALL_OW 302
43916: NOT
43917: OR
43918: PUSH
43919: LD_VAR 0 1
43923: PPUSH
43924: CALL_OW 301
43928: OR
43929: IFFALSE 43879
// RemoveSeeing ( _x , _y , side ) ;
43931: LD_VAR 0 8
43935: PPUSH
43936: LD_VAR 0 9
43940: PPUSH
43941: LD_VAR 0 6
43945: PPUSH
43946: CALL_OW 331
// end ; end_of_file
43950: LD_VAR 0 4
43954: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
43955: LD_VAR 0 2
43959: PUSH
43960: LD_INT 100
43962: EQUAL
43963: IFFALSE 44912
// begin if not StreamModeActive then
43965: LD_EXP 35
43969: NOT
43970: IFFALSE 43980
// StreamModeActive := true ;
43972: LD_ADDR_EXP 35
43976: PUSH
43977: LD_INT 1
43979: ST_TO_ADDR
// if p3 = 0 then
43980: LD_VAR 0 3
43984: PUSH
43985: LD_INT 0
43987: EQUAL
43988: IFFALSE 43994
// InitStreamMode ;
43990: CALL 45070 0 0
// if p3 = 1 then
43994: LD_VAR 0 3
43998: PUSH
43999: LD_INT 1
44001: EQUAL
44002: IFFALSE 44012
// sRocket := true ;
44004: LD_ADDR_EXP 40
44008: PUSH
44009: LD_INT 1
44011: ST_TO_ADDR
// if p3 = 2 then
44012: LD_VAR 0 3
44016: PUSH
44017: LD_INT 2
44019: EQUAL
44020: IFFALSE 44030
// sSpeed := true ;
44022: LD_ADDR_EXP 39
44026: PUSH
44027: LD_INT 1
44029: ST_TO_ADDR
// if p3 = 3 then
44030: LD_VAR 0 3
44034: PUSH
44035: LD_INT 3
44037: EQUAL
44038: IFFALSE 44048
// sEngine := true ;
44040: LD_ADDR_EXP 41
44044: PUSH
44045: LD_INT 1
44047: ST_TO_ADDR
// if p3 = 4 then
44048: LD_VAR 0 3
44052: PUSH
44053: LD_INT 4
44055: EQUAL
44056: IFFALSE 44066
// sSpec := true ;
44058: LD_ADDR_EXP 38
44062: PUSH
44063: LD_INT 1
44065: ST_TO_ADDR
// if p3 = 5 then
44066: LD_VAR 0 3
44070: PUSH
44071: LD_INT 5
44073: EQUAL
44074: IFFALSE 44084
// sLevel := true ;
44076: LD_ADDR_EXP 42
44080: PUSH
44081: LD_INT 1
44083: ST_TO_ADDR
// if p3 = 6 then
44084: LD_VAR 0 3
44088: PUSH
44089: LD_INT 6
44091: EQUAL
44092: IFFALSE 44102
// sArmoury := true ;
44094: LD_ADDR_EXP 43
44098: PUSH
44099: LD_INT 1
44101: ST_TO_ADDR
// if p3 = 7 then
44102: LD_VAR 0 3
44106: PUSH
44107: LD_INT 7
44109: EQUAL
44110: IFFALSE 44120
// sRadar := true ;
44112: LD_ADDR_EXP 44
44116: PUSH
44117: LD_INT 1
44119: ST_TO_ADDR
// if p3 = 8 then
44120: LD_VAR 0 3
44124: PUSH
44125: LD_INT 8
44127: EQUAL
44128: IFFALSE 44138
// sBunker := true ;
44130: LD_ADDR_EXP 45
44134: PUSH
44135: LD_INT 1
44137: ST_TO_ADDR
// if p3 = 9 then
44138: LD_VAR 0 3
44142: PUSH
44143: LD_INT 9
44145: EQUAL
44146: IFFALSE 44156
// sHack := true ;
44148: LD_ADDR_EXP 46
44152: PUSH
44153: LD_INT 1
44155: ST_TO_ADDR
// if p3 = 10 then
44156: LD_VAR 0 3
44160: PUSH
44161: LD_INT 10
44163: EQUAL
44164: IFFALSE 44174
// sFire := true ;
44166: LD_ADDR_EXP 47
44170: PUSH
44171: LD_INT 1
44173: ST_TO_ADDR
// if p3 = 11 then
44174: LD_VAR 0 3
44178: PUSH
44179: LD_INT 11
44181: EQUAL
44182: IFFALSE 44192
// sRefresh := true ;
44184: LD_ADDR_EXP 48
44188: PUSH
44189: LD_INT 1
44191: ST_TO_ADDR
// if p3 = 12 then
44192: LD_VAR 0 3
44196: PUSH
44197: LD_INT 12
44199: EQUAL
44200: IFFALSE 44210
// sExp := true ;
44202: LD_ADDR_EXP 49
44206: PUSH
44207: LD_INT 1
44209: ST_TO_ADDR
// if p3 = 13 then
44210: LD_VAR 0 3
44214: PUSH
44215: LD_INT 13
44217: EQUAL
44218: IFFALSE 44228
// sDepot := true ;
44220: LD_ADDR_EXP 50
44224: PUSH
44225: LD_INT 1
44227: ST_TO_ADDR
// if p3 = 14 then
44228: LD_VAR 0 3
44232: PUSH
44233: LD_INT 14
44235: EQUAL
44236: IFFALSE 44246
// sFlag := true ;
44238: LD_ADDR_EXP 51
44242: PUSH
44243: LD_INT 1
44245: ST_TO_ADDR
// if p3 = 15 then
44246: LD_VAR 0 3
44250: PUSH
44251: LD_INT 15
44253: EQUAL
44254: IFFALSE 44264
// sKamikadze := true ;
44256: LD_ADDR_EXP 59
44260: PUSH
44261: LD_INT 1
44263: ST_TO_ADDR
// if p3 = 16 then
44264: LD_VAR 0 3
44268: PUSH
44269: LD_INT 16
44271: EQUAL
44272: IFFALSE 44282
// sTroll := true ;
44274: LD_ADDR_EXP 60
44278: PUSH
44279: LD_INT 1
44281: ST_TO_ADDR
// if p3 = 17 then
44282: LD_VAR 0 3
44286: PUSH
44287: LD_INT 17
44289: EQUAL
44290: IFFALSE 44300
// sSlow := true ;
44292: LD_ADDR_EXP 61
44296: PUSH
44297: LD_INT 1
44299: ST_TO_ADDR
// if p3 = 18 then
44300: LD_VAR 0 3
44304: PUSH
44305: LD_INT 18
44307: EQUAL
44308: IFFALSE 44318
// sLack := true ;
44310: LD_ADDR_EXP 62
44314: PUSH
44315: LD_INT 1
44317: ST_TO_ADDR
// if p3 = 19 then
44318: LD_VAR 0 3
44322: PUSH
44323: LD_INT 19
44325: EQUAL
44326: IFFALSE 44336
// sTank := true ;
44328: LD_ADDR_EXP 64
44332: PUSH
44333: LD_INT 1
44335: ST_TO_ADDR
// if p3 = 20 then
44336: LD_VAR 0 3
44340: PUSH
44341: LD_INT 20
44343: EQUAL
44344: IFFALSE 44354
// sRemote := true ;
44346: LD_ADDR_EXP 65
44350: PUSH
44351: LD_INT 1
44353: ST_TO_ADDR
// if p3 = 21 then
44354: LD_VAR 0 3
44358: PUSH
44359: LD_INT 21
44361: EQUAL
44362: IFFALSE 44372
// sPowell := true ;
44364: LD_ADDR_EXP 66
44368: PUSH
44369: LD_INT 1
44371: ST_TO_ADDR
// if p3 = 22 then
44372: LD_VAR 0 3
44376: PUSH
44377: LD_INT 22
44379: EQUAL
44380: IFFALSE 44390
// sTeleport := true ;
44382: LD_ADDR_EXP 69
44386: PUSH
44387: LD_INT 1
44389: ST_TO_ADDR
// if p3 = 23 then
44390: LD_VAR 0 3
44394: PUSH
44395: LD_INT 23
44397: EQUAL
44398: IFFALSE 44408
// sOilTower := true ;
44400: LD_ADDR_EXP 71
44404: PUSH
44405: LD_INT 1
44407: ST_TO_ADDR
// if p3 = 24 then
44408: LD_VAR 0 3
44412: PUSH
44413: LD_INT 24
44415: EQUAL
44416: IFFALSE 44426
// sShovel := true ;
44418: LD_ADDR_EXP 72
44422: PUSH
44423: LD_INT 1
44425: ST_TO_ADDR
// if p3 = 25 then
44426: LD_VAR 0 3
44430: PUSH
44431: LD_INT 25
44433: EQUAL
44434: IFFALSE 44444
// sSheik := true ;
44436: LD_ADDR_EXP 73
44440: PUSH
44441: LD_INT 1
44443: ST_TO_ADDR
// if p3 = 26 then
44444: LD_VAR 0 3
44448: PUSH
44449: LD_INT 26
44451: EQUAL
44452: IFFALSE 44462
// sEarthquake := true ;
44454: LD_ADDR_EXP 75
44458: PUSH
44459: LD_INT 1
44461: ST_TO_ADDR
// if p3 = 27 then
44462: LD_VAR 0 3
44466: PUSH
44467: LD_INT 27
44469: EQUAL
44470: IFFALSE 44480
// sAI := true ;
44472: LD_ADDR_EXP 76
44476: PUSH
44477: LD_INT 1
44479: ST_TO_ADDR
// if p3 = 28 then
44480: LD_VAR 0 3
44484: PUSH
44485: LD_INT 28
44487: EQUAL
44488: IFFALSE 44498
// sCargo := true ;
44490: LD_ADDR_EXP 79
44494: PUSH
44495: LD_INT 1
44497: ST_TO_ADDR
// if p3 = 29 then
44498: LD_VAR 0 3
44502: PUSH
44503: LD_INT 29
44505: EQUAL
44506: IFFALSE 44516
// sDLaser := true ;
44508: LD_ADDR_EXP 80
44512: PUSH
44513: LD_INT 1
44515: ST_TO_ADDR
// if p3 = 30 then
44516: LD_VAR 0 3
44520: PUSH
44521: LD_INT 30
44523: EQUAL
44524: IFFALSE 44534
// sExchange := true ;
44526: LD_ADDR_EXP 81
44530: PUSH
44531: LD_INT 1
44533: ST_TO_ADDR
// if p3 = 31 then
44534: LD_VAR 0 3
44538: PUSH
44539: LD_INT 31
44541: EQUAL
44542: IFFALSE 44552
// sFac := true ;
44544: LD_ADDR_EXP 82
44548: PUSH
44549: LD_INT 1
44551: ST_TO_ADDR
// if p3 = 32 then
44552: LD_VAR 0 3
44556: PUSH
44557: LD_INT 32
44559: EQUAL
44560: IFFALSE 44570
// sPower := true ;
44562: LD_ADDR_EXP 83
44566: PUSH
44567: LD_INT 1
44569: ST_TO_ADDR
// if p3 = 33 then
44570: LD_VAR 0 3
44574: PUSH
44575: LD_INT 33
44577: EQUAL
44578: IFFALSE 44588
// sRandom := true ;
44580: LD_ADDR_EXP 84
44584: PUSH
44585: LD_INT 1
44587: ST_TO_ADDR
// if p3 = 34 then
44588: LD_VAR 0 3
44592: PUSH
44593: LD_INT 34
44595: EQUAL
44596: IFFALSE 44606
// sShield := true ;
44598: LD_ADDR_EXP 85
44602: PUSH
44603: LD_INT 1
44605: ST_TO_ADDR
// if p3 = 35 then
44606: LD_VAR 0 3
44610: PUSH
44611: LD_INT 35
44613: EQUAL
44614: IFFALSE 44624
// sTime := true ;
44616: LD_ADDR_EXP 86
44620: PUSH
44621: LD_INT 1
44623: ST_TO_ADDR
// if p3 = 36 then
44624: LD_VAR 0 3
44628: PUSH
44629: LD_INT 36
44631: EQUAL
44632: IFFALSE 44642
// sTools := true ;
44634: LD_ADDR_EXP 87
44638: PUSH
44639: LD_INT 1
44641: ST_TO_ADDR
// if p3 = 101 then
44642: LD_VAR 0 3
44646: PUSH
44647: LD_INT 101
44649: EQUAL
44650: IFFALSE 44660
// sSold := true ;
44652: LD_ADDR_EXP 52
44656: PUSH
44657: LD_INT 1
44659: ST_TO_ADDR
// if p3 = 102 then
44660: LD_VAR 0 3
44664: PUSH
44665: LD_INT 102
44667: EQUAL
44668: IFFALSE 44678
// sDiff := true ;
44670: LD_ADDR_EXP 53
44674: PUSH
44675: LD_INT 1
44677: ST_TO_ADDR
// if p3 = 103 then
44678: LD_VAR 0 3
44682: PUSH
44683: LD_INT 103
44685: EQUAL
44686: IFFALSE 44696
// sFog := true ;
44688: LD_ADDR_EXP 56
44692: PUSH
44693: LD_INT 1
44695: ST_TO_ADDR
// if p3 = 104 then
44696: LD_VAR 0 3
44700: PUSH
44701: LD_INT 104
44703: EQUAL
44704: IFFALSE 44714
// sReset := true ;
44706: LD_ADDR_EXP 57
44710: PUSH
44711: LD_INT 1
44713: ST_TO_ADDR
// if p3 = 105 then
44714: LD_VAR 0 3
44718: PUSH
44719: LD_INT 105
44721: EQUAL
44722: IFFALSE 44732
// sSun := true ;
44724: LD_ADDR_EXP 58
44728: PUSH
44729: LD_INT 1
44731: ST_TO_ADDR
// if p3 = 106 then
44732: LD_VAR 0 3
44736: PUSH
44737: LD_INT 106
44739: EQUAL
44740: IFFALSE 44750
// sTiger := true ;
44742: LD_ADDR_EXP 54
44746: PUSH
44747: LD_INT 1
44749: ST_TO_ADDR
// if p3 = 107 then
44750: LD_VAR 0 3
44754: PUSH
44755: LD_INT 107
44757: EQUAL
44758: IFFALSE 44768
// sBomb := true ;
44760: LD_ADDR_EXP 55
44764: PUSH
44765: LD_INT 1
44767: ST_TO_ADDR
// if p3 = 108 then
44768: LD_VAR 0 3
44772: PUSH
44773: LD_INT 108
44775: EQUAL
44776: IFFALSE 44786
// sWound := true ;
44778: LD_ADDR_EXP 63
44782: PUSH
44783: LD_INT 1
44785: ST_TO_ADDR
// if p3 = 109 then
44786: LD_VAR 0 3
44790: PUSH
44791: LD_INT 109
44793: EQUAL
44794: IFFALSE 44804
// sBetray := true ;
44796: LD_ADDR_EXP 67
44800: PUSH
44801: LD_INT 1
44803: ST_TO_ADDR
// if p3 = 110 then
44804: LD_VAR 0 3
44808: PUSH
44809: LD_INT 110
44811: EQUAL
44812: IFFALSE 44822
// sContamin := true ;
44814: LD_ADDR_EXP 68
44818: PUSH
44819: LD_INT 1
44821: ST_TO_ADDR
// if p3 = 111 then
44822: LD_VAR 0 3
44826: PUSH
44827: LD_INT 111
44829: EQUAL
44830: IFFALSE 44840
// sOil := true ;
44832: LD_ADDR_EXP 70
44836: PUSH
44837: LD_INT 1
44839: ST_TO_ADDR
// if p3 = 112 then
44840: LD_VAR 0 3
44844: PUSH
44845: LD_INT 112
44847: EQUAL
44848: IFFALSE 44858
// sStu := true ;
44850: LD_ADDR_EXP 74
44854: PUSH
44855: LD_INT 1
44857: ST_TO_ADDR
// if p3 = 113 then
44858: LD_VAR 0 3
44862: PUSH
44863: LD_INT 113
44865: EQUAL
44866: IFFALSE 44876
// sBazooka := true ;
44868: LD_ADDR_EXP 77
44872: PUSH
44873: LD_INT 1
44875: ST_TO_ADDR
// if p3 = 114 then
44876: LD_VAR 0 3
44880: PUSH
44881: LD_INT 114
44883: EQUAL
44884: IFFALSE 44894
// sMortar := true ;
44886: LD_ADDR_EXP 78
44890: PUSH
44891: LD_INT 1
44893: ST_TO_ADDR
// if p3 = 115 then
44894: LD_VAR 0 3
44898: PUSH
44899: LD_INT 115
44901: EQUAL
44902: IFFALSE 44912
// sRanger := true ;
44904: LD_ADDR_EXP 88
44908: PUSH
44909: LD_INT 1
44911: ST_TO_ADDR
// end ; if p2 = 101 then
44912: LD_VAR 0 2
44916: PUSH
44917: LD_INT 101
44919: EQUAL
44920: IFFALSE 45048
// begin case p3 of 1 :
44922: LD_VAR 0 3
44926: PUSH
44927: LD_INT 1
44929: DOUBLE
44930: EQUAL
44931: IFTRUE 44935
44933: GO 44942
44935: POP
// hHackUnlimitedResources ; 2 :
44936: CALL 56083 0 0
44940: GO 45048
44942: LD_INT 2
44944: DOUBLE
44945: EQUAL
44946: IFTRUE 44950
44948: GO 44957
44950: POP
// hHackSetLevel10 ; 3 :
44951: CALL 56216 0 0
44955: GO 45048
44957: LD_INT 3
44959: DOUBLE
44960: EQUAL
44961: IFTRUE 44965
44963: GO 44972
44965: POP
// hHackSetLevel10YourUnits ; 4 :
44966: CALL 56301 0 0
44970: GO 45048
44972: LD_INT 4
44974: DOUBLE
44975: EQUAL
44976: IFTRUE 44980
44978: GO 44987
44980: POP
// hHackInvincible ; 5 :
44981: CALL 56749 0 0
44985: GO 45048
44987: LD_INT 5
44989: DOUBLE
44990: EQUAL
44991: IFTRUE 44995
44993: GO 45002
44995: POP
// hHackInvisible ; 6 :
44996: CALL 56860 0 0
45000: GO 45048
45002: LD_INT 6
45004: DOUBLE
45005: EQUAL
45006: IFTRUE 45010
45008: GO 45017
45010: POP
// hHackChangeYourSide ; 7 :
45011: CALL 56917 0 0
45015: GO 45048
45017: LD_INT 7
45019: DOUBLE
45020: EQUAL
45021: IFTRUE 45025
45023: GO 45032
45025: POP
// hHackChangeUnitSide ; 8 :
45026: CALL 56959 0 0
45030: GO 45048
45032: LD_INT 8
45034: DOUBLE
45035: EQUAL
45036: IFTRUE 45040
45038: GO 45047
45040: POP
// hHackFog ; end ;
45041: CALL 57060 0 0
45045: GO 45048
45047: POP
// end ; end ;
45048: PPOPN 6
45050: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
45051: GO 45053
45053: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
45054: LD_STRING initStreamRollete();
45056: PPUSH
45057: CALL_OW 559
// InitStreamMode ;
45061: CALL 45070 0 0
// DefineStreamItems ( ) ;
45065: CALL 45510 0 0
// end ;
45069: END
// function InitStreamMode ; begin
45070: LD_INT 0
45072: PPUSH
// streamModeActive := false ;
45073: LD_ADDR_EXP 35
45077: PUSH
45078: LD_INT 0
45080: ST_TO_ADDR
// normalCounter := 36 ;
45081: LD_ADDR_EXP 36
45085: PUSH
45086: LD_INT 36
45088: ST_TO_ADDR
// hardcoreCounter := 16 ;
45089: LD_ADDR_EXP 37
45093: PUSH
45094: LD_INT 16
45096: ST_TO_ADDR
// sRocket := false ;
45097: LD_ADDR_EXP 40
45101: PUSH
45102: LD_INT 0
45104: ST_TO_ADDR
// sSpeed := false ;
45105: LD_ADDR_EXP 39
45109: PUSH
45110: LD_INT 0
45112: ST_TO_ADDR
// sEngine := false ;
45113: LD_ADDR_EXP 41
45117: PUSH
45118: LD_INT 0
45120: ST_TO_ADDR
// sSpec := false ;
45121: LD_ADDR_EXP 38
45125: PUSH
45126: LD_INT 0
45128: ST_TO_ADDR
// sLevel := false ;
45129: LD_ADDR_EXP 42
45133: PUSH
45134: LD_INT 0
45136: ST_TO_ADDR
// sArmoury := false ;
45137: LD_ADDR_EXP 43
45141: PUSH
45142: LD_INT 0
45144: ST_TO_ADDR
// sRadar := false ;
45145: LD_ADDR_EXP 44
45149: PUSH
45150: LD_INT 0
45152: ST_TO_ADDR
// sBunker := false ;
45153: LD_ADDR_EXP 45
45157: PUSH
45158: LD_INT 0
45160: ST_TO_ADDR
// sHack := false ;
45161: LD_ADDR_EXP 46
45165: PUSH
45166: LD_INT 0
45168: ST_TO_ADDR
// sFire := false ;
45169: LD_ADDR_EXP 47
45173: PUSH
45174: LD_INT 0
45176: ST_TO_ADDR
// sRefresh := false ;
45177: LD_ADDR_EXP 48
45181: PUSH
45182: LD_INT 0
45184: ST_TO_ADDR
// sExp := false ;
45185: LD_ADDR_EXP 49
45189: PUSH
45190: LD_INT 0
45192: ST_TO_ADDR
// sDepot := false ;
45193: LD_ADDR_EXP 50
45197: PUSH
45198: LD_INT 0
45200: ST_TO_ADDR
// sFlag := false ;
45201: LD_ADDR_EXP 51
45205: PUSH
45206: LD_INT 0
45208: ST_TO_ADDR
// sKamikadze := false ;
45209: LD_ADDR_EXP 59
45213: PUSH
45214: LD_INT 0
45216: ST_TO_ADDR
// sTroll := false ;
45217: LD_ADDR_EXP 60
45221: PUSH
45222: LD_INT 0
45224: ST_TO_ADDR
// sSlow := false ;
45225: LD_ADDR_EXP 61
45229: PUSH
45230: LD_INT 0
45232: ST_TO_ADDR
// sLack := false ;
45233: LD_ADDR_EXP 62
45237: PUSH
45238: LD_INT 0
45240: ST_TO_ADDR
// sTank := false ;
45241: LD_ADDR_EXP 64
45245: PUSH
45246: LD_INT 0
45248: ST_TO_ADDR
// sRemote := false ;
45249: LD_ADDR_EXP 65
45253: PUSH
45254: LD_INT 0
45256: ST_TO_ADDR
// sPowell := false ;
45257: LD_ADDR_EXP 66
45261: PUSH
45262: LD_INT 0
45264: ST_TO_ADDR
// sTeleport := false ;
45265: LD_ADDR_EXP 69
45269: PUSH
45270: LD_INT 0
45272: ST_TO_ADDR
// sOilTower := false ;
45273: LD_ADDR_EXP 71
45277: PUSH
45278: LD_INT 0
45280: ST_TO_ADDR
// sShovel := false ;
45281: LD_ADDR_EXP 72
45285: PUSH
45286: LD_INT 0
45288: ST_TO_ADDR
// sSheik := false ;
45289: LD_ADDR_EXP 73
45293: PUSH
45294: LD_INT 0
45296: ST_TO_ADDR
// sEarthquake := false ;
45297: LD_ADDR_EXP 75
45301: PUSH
45302: LD_INT 0
45304: ST_TO_ADDR
// sAI := false ;
45305: LD_ADDR_EXP 76
45309: PUSH
45310: LD_INT 0
45312: ST_TO_ADDR
// sCargo := false ;
45313: LD_ADDR_EXP 79
45317: PUSH
45318: LD_INT 0
45320: ST_TO_ADDR
// sDLaser := false ;
45321: LD_ADDR_EXP 80
45325: PUSH
45326: LD_INT 0
45328: ST_TO_ADDR
// sExchange := false ;
45329: LD_ADDR_EXP 81
45333: PUSH
45334: LD_INT 0
45336: ST_TO_ADDR
// sFac := false ;
45337: LD_ADDR_EXP 82
45341: PUSH
45342: LD_INT 0
45344: ST_TO_ADDR
// sPower := false ;
45345: LD_ADDR_EXP 83
45349: PUSH
45350: LD_INT 0
45352: ST_TO_ADDR
// sRandom := false ;
45353: LD_ADDR_EXP 84
45357: PUSH
45358: LD_INT 0
45360: ST_TO_ADDR
// sShield := false ;
45361: LD_ADDR_EXP 85
45365: PUSH
45366: LD_INT 0
45368: ST_TO_ADDR
// sTime := false ;
45369: LD_ADDR_EXP 86
45373: PUSH
45374: LD_INT 0
45376: ST_TO_ADDR
// sTools := false ;
45377: LD_ADDR_EXP 87
45381: PUSH
45382: LD_INT 0
45384: ST_TO_ADDR
// sSold := false ;
45385: LD_ADDR_EXP 52
45389: PUSH
45390: LD_INT 0
45392: ST_TO_ADDR
// sDiff := false ;
45393: LD_ADDR_EXP 53
45397: PUSH
45398: LD_INT 0
45400: ST_TO_ADDR
// sFog := false ;
45401: LD_ADDR_EXP 56
45405: PUSH
45406: LD_INT 0
45408: ST_TO_ADDR
// sReset := false ;
45409: LD_ADDR_EXP 57
45413: PUSH
45414: LD_INT 0
45416: ST_TO_ADDR
// sSun := false ;
45417: LD_ADDR_EXP 58
45421: PUSH
45422: LD_INT 0
45424: ST_TO_ADDR
// sTiger := false ;
45425: LD_ADDR_EXP 54
45429: PUSH
45430: LD_INT 0
45432: ST_TO_ADDR
// sBomb := false ;
45433: LD_ADDR_EXP 55
45437: PUSH
45438: LD_INT 0
45440: ST_TO_ADDR
// sWound := false ;
45441: LD_ADDR_EXP 63
45445: PUSH
45446: LD_INT 0
45448: ST_TO_ADDR
// sBetray := false ;
45449: LD_ADDR_EXP 67
45453: PUSH
45454: LD_INT 0
45456: ST_TO_ADDR
// sContamin := false ;
45457: LD_ADDR_EXP 68
45461: PUSH
45462: LD_INT 0
45464: ST_TO_ADDR
// sOil := false ;
45465: LD_ADDR_EXP 70
45469: PUSH
45470: LD_INT 0
45472: ST_TO_ADDR
// sStu := false ;
45473: LD_ADDR_EXP 74
45477: PUSH
45478: LD_INT 0
45480: ST_TO_ADDR
// sBazooka := false ;
45481: LD_ADDR_EXP 77
45485: PUSH
45486: LD_INT 0
45488: ST_TO_ADDR
// sMortar := false ;
45489: LD_ADDR_EXP 78
45493: PUSH
45494: LD_INT 0
45496: ST_TO_ADDR
// sRanger := false ;
45497: LD_ADDR_EXP 88
45501: PUSH
45502: LD_INT 0
45504: ST_TO_ADDR
// end ;
45505: LD_VAR 0 1
45509: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
45510: LD_INT 0
45512: PPUSH
45513: PPUSH
45514: PPUSH
45515: PPUSH
45516: PPUSH
// result := [ ] ;
45517: LD_ADDR_VAR 0 1
45521: PUSH
45522: EMPTY
45523: ST_TO_ADDR
// if campaign_id = 1 then
45524: LD_OWVAR 69
45528: PUSH
45529: LD_INT 1
45531: EQUAL
45532: IFFALSE 48470
// begin case mission_number of 1 :
45534: LD_OWVAR 70
45538: PUSH
45539: LD_INT 1
45541: DOUBLE
45542: EQUAL
45543: IFTRUE 45547
45545: GO 45611
45547: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
45548: LD_ADDR_VAR 0 1
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 4
45558: PUSH
45559: LD_INT 11
45561: PUSH
45562: LD_INT 12
45564: PUSH
45565: LD_INT 15
45567: PUSH
45568: LD_INT 16
45570: PUSH
45571: LD_INT 22
45573: PUSH
45574: LD_INT 23
45576: PUSH
45577: LD_INT 26
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 101
45593: PUSH
45594: LD_INT 102
45596: PUSH
45597: LD_INT 106
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: ST_TO_ADDR
45609: GO 48468
45611: LD_INT 2
45613: DOUBLE
45614: EQUAL
45615: IFTRUE 45619
45617: GO 45691
45619: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
45620: LD_ADDR_VAR 0 1
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: LD_INT 4
45630: PUSH
45631: LD_INT 11
45633: PUSH
45634: LD_INT 12
45636: PUSH
45637: LD_INT 15
45639: PUSH
45640: LD_INT 16
45642: PUSH
45643: LD_INT 22
45645: PUSH
45646: LD_INT 23
45648: PUSH
45649: LD_INT 26
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 101
45665: PUSH
45666: LD_INT 102
45668: PUSH
45669: LD_INT 105
45671: PUSH
45672: LD_INT 106
45674: PUSH
45675: LD_INT 108
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: ST_TO_ADDR
45689: GO 48468
45691: LD_INT 3
45693: DOUBLE
45694: EQUAL
45695: IFTRUE 45699
45697: GO 45775
45699: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
45700: LD_ADDR_VAR 0 1
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 4
45710: PUSH
45711: LD_INT 5
45713: PUSH
45714: LD_INT 11
45716: PUSH
45717: LD_INT 12
45719: PUSH
45720: LD_INT 15
45722: PUSH
45723: LD_INT 16
45725: PUSH
45726: LD_INT 22
45728: PUSH
45729: LD_INT 26
45731: PUSH
45732: LD_INT 36
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 101
45749: PUSH
45750: LD_INT 102
45752: PUSH
45753: LD_INT 105
45755: PUSH
45756: LD_INT 106
45758: PUSH
45759: LD_INT 108
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: ST_TO_ADDR
45773: GO 48468
45775: LD_INT 4
45777: DOUBLE
45778: EQUAL
45779: IFTRUE 45783
45781: GO 45867
45783: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
45784: LD_ADDR_VAR 0 1
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 4
45794: PUSH
45795: LD_INT 5
45797: PUSH
45798: LD_INT 8
45800: PUSH
45801: LD_INT 11
45803: PUSH
45804: LD_INT 12
45806: PUSH
45807: LD_INT 15
45809: PUSH
45810: LD_INT 16
45812: PUSH
45813: LD_INT 22
45815: PUSH
45816: LD_INT 23
45818: PUSH
45819: LD_INT 26
45821: PUSH
45822: LD_INT 36
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 101
45841: PUSH
45842: LD_INT 102
45844: PUSH
45845: LD_INT 105
45847: PUSH
45848: LD_INT 106
45850: PUSH
45851: LD_INT 108
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: ST_TO_ADDR
45865: GO 48468
45867: LD_INT 5
45869: DOUBLE
45870: EQUAL
45871: IFTRUE 45875
45873: GO 45975
45875: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
45876: LD_ADDR_VAR 0 1
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 4
45886: PUSH
45887: LD_INT 5
45889: PUSH
45890: LD_INT 6
45892: PUSH
45893: LD_INT 8
45895: PUSH
45896: LD_INT 11
45898: PUSH
45899: LD_INT 12
45901: PUSH
45902: LD_INT 15
45904: PUSH
45905: LD_INT 16
45907: PUSH
45908: LD_INT 22
45910: PUSH
45911: LD_INT 23
45913: PUSH
45914: LD_INT 25
45916: PUSH
45917: LD_INT 26
45919: PUSH
45920: LD_INT 36
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 101
45941: PUSH
45942: LD_INT 102
45944: PUSH
45945: LD_INT 105
45947: PUSH
45948: LD_INT 106
45950: PUSH
45951: LD_INT 108
45953: PUSH
45954: LD_INT 109
45956: PUSH
45957: LD_INT 112
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: ST_TO_ADDR
45973: GO 48468
45975: LD_INT 6
45977: DOUBLE
45978: EQUAL
45979: IFTRUE 45983
45981: GO 46103
45983: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
45984: LD_ADDR_VAR 0 1
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 4
45994: PUSH
45995: LD_INT 5
45997: PUSH
45998: LD_INT 6
46000: PUSH
46001: LD_INT 8
46003: PUSH
46004: LD_INT 11
46006: PUSH
46007: LD_INT 12
46009: PUSH
46010: LD_INT 15
46012: PUSH
46013: LD_INT 16
46015: PUSH
46016: LD_INT 20
46018: PUSH
46019: LD_INT 21
46021: PUSH
46022: LD_INT 22
46024: PUSH
46025: LD_INT 23
46027: PUSH
46028: LD_INT 25
46030: PUSH
46031: LD_INT 26
46033: PUSH
46034: LD_INT 30
46036: PUSH
46037: LD_INT 31
46039: PUSH
46040: LD_INT 32
46042: PUSH
46043: LD_INT 36
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 101
46069: PUSH
46070: LD_INT 102
46072: PUSH
46073: LD_INT 105
46075: PUSH
46076: LD_INT 106
46078: PUSH
46079: LD_INT 108
46081: PUSH
46082: LD_INT 109
46084: PUSH
46085: LD_INT 112
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: ST_TO_ADDR
46101: GO 48468
46103: LD_INT 7
46105: DOUBLE
46106: EQUAL
46107: IFTRUE 46111
46109: GO 46211
46111: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
46112: LD_ADDR_VAR 0 1
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 4
46122: PUSH
46123: LD_INT 5
46125: PUSH
46126: LD_INT 7
46128: PUSH
46129: LD_INT 11
46131: PUSH
46132: LD_INT 12
46134: PUSH
46135: LD_INT 15
46137: PUSH
46138: LD_INT 16
46140: PUSH
46141: LD_INT 20
46143: PUSH
46144: LD_INT 21
46146: PUSH
46147: LD_INT 22
46149: PUSH
46150: LD_INT 23
46152: PUSH
46153: LD_INT 25
46155: PUSH
46156: LD_INT 26
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 101
46177: PUSH
46178: LD_INT 102
46180: PUSH
46181: LD_INT 103
46183: PUSH
46184: LD_INT 105
46186: PUSH
46187: LD_INT 106
46189: PUSH
46190: LD_INT 108
46192: PUSH
46193: LD_INT 112
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: ST_TO_ADDR
46209: GO 48468
46211: LD_INT 8
46213: DOUBLE
46214: EQUAL
46215: IFTRUE 46219
46217: GO 46347
46219: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
46220: LD_ADDR_VAR 0 1
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 4
46230: PUSH
46231: LD_INT 5
46233: PUSH
46234: LD_INT 6
46236: PUSH
46237: LD_INT 7
46239: PUSH
46240: LD_INT 8
46242: PUSH
46243: LD_INT 11
46245: PUSH
46246: LD_INT 12
46248: PUSH
46249: LD_INT 15
46251: PUSH
46252: LD_INT 16
46254: PUSH
46255: LD_INT 20
46257: PUSH
46258: LD_INT 21
46260: PUSH
46261: LD_INT 22
46263: PUSH
46264: LD_INT 23
46266: PUSH
46267: LD_INT 25
46269: PUSH
46270: LD_INT 26
46272: PUSH
46273: LD_INT 30
46275: PUSH
46276: LD_INT 31
46278: PUSH
46279: LD_INT 32
46281: PUSH
46282: LD_INT 36
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 101
46309: PUSH
46310: LD_INT 102
46312: PUSH
46313: LD_INT 103
46315: PUSH
46316: LD_INT 105
46318: PUSH
46319: LD_INT 106
46321: PUSH
46322: LD_INT 108
46324: PUSH
46325: LD_INT 109
46327: PUSH
46328: LD_INT 112
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: ST_TO_ADDR
46345: GO 48468
46347: LD_INT 9
46349: DOUBLE
46350: EQUAL
46351: IFTRUE 46355
46353: GO 46491
46355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
46356: LD_ADDR_VAR 0 1
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 4
46366: PUSH
46367: LD_INT 5
46369: PUSH
46370: LD_INT 6
46372: PUSH
46373: LD_INT 7
46375: PUSH
46376: LD_INT 8
46378: PUSH
46379: LD_INT 11
46381: PUSH
46382: LD_INT 12
46384: PUSH
46385: LD_INT 15
46387: PUSH
46388: LD_INT 16
46390: PUSH
46391: LD_INT 20
46393: PUSH
46394: LD_INT 21
46396: PUSH
46397: LD_INT 22
46399: PUSH
46400: LD_INT 23
46402: PUSH
46403: LD_INT 25
46405: PUSH
46406: LD_INT 26
46408: PUSH
46409: LD_INT 28
46411: PUSH
46412: LD_INT 30
46414: PUSH
46415: LD_INT 31
46417: PUSH
46418: LD_INT 32
46420: PUSH
46421: LD_INT 36
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 101
46449: PUSH
46450: LD_INT 102
46452: PUSH
46453: LD_INT 103
46455: PUSH
46456: LD_INT 105
46458: PUSH
46459: LD_INT 106
46461: PUSH
46462: LD_INT 108
46464: PUSH
46465: LD_INT 109
46467: PUSH
46468: LD_INT 112
46470: PUSH
46471: LD_INT 114
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: ST_TO_ADDR
46489: GO 48468
46491: LD_INT 10
46493: DOUBLE
46494: EQUAL
46495: IFTRUE 46499
46497: GO 46683
46499: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
46500: LD_ADDR_VAR 0 1
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: LD_INT 4
46510: PUSH
46511: LD_INT 5
46513: PUSH
46514: LD_INT 6
46516: PUSH
46517: LD_INT 7
46519: PUSH
46520: LD_INT 8
46522: PUSH
46523: LD_INT 9
46525: PUSH
46526: LD_INT 10
46528: PUSH
46529: LD_INT 11
46531: PUSH
46532: LD_INT 12
46534: PUSH
46535: LD_INT 13
46537: PUSH
46538: LD_INT 14
46540: PUSH
46541: LD_INT 15
46543: PUSH
46544: LD_INT 16
46546: PUSH
46547: LD_INT 17
46549: PUSH
46550: LD_INT 18
46552: PUSH
46553: LD_INT 19
46555: PUSH
46556: LD_INT 20
46558: PUSH
46559: LD_INT 21
46561: PUSH
46562: LD_INT 22
46564: PUSH
46565: LD_INT 23
46567: PUSH
46568: LD_INT 24
46570: PUSH
46571: LD_INT 25
46573: PUSH
46574: LD_INT 26
46576: PUSH
46577: LD_INT 28
46579: PUSH
46580: LD_INT 30
46582: PUSH
46583: LD_INT 31
46585: PUSH
46586: LD_INT 32
46588: PUSH
46589: LD_INT 36
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 101
46625: PUSH
46626: LD_INT 102
46628: PUSH
46629: LD_INT 103
46631: PUSH
46632: LD_INT 104
46634: PUSH
46635: LD_INT 105
46637: PUSH
46638: LD_INT 106
46640: PUSH
46641: LD_INT 107
46643: PUSH
46644: LD_INT 108
46646: PUSH
46647: LD_INT 109
46649: PUSH
46650: LD_INT 110
46652: PUSH
46653: LD_INT 111
46655: PUSH
46656: LD_INT 112
46658: PUSH
46659: LD_INT 114
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: ST_TO_ADDR
46681: GO 48468
46683: LD_INT 11
46685: DOUBLE
46686: EQUAL
46687: IFTRUE 46691
46689: GO 46883
46691: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
46692: LD_ADDR_VAR 0 1
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: LD_INT 4
46705: PUSH
46706: LD_INT 5
46708: PUSH
46709: LD_INT 6
46711: PUSH
46712: LD_INT 7
46714: PUSH
46715: LD_INT 8
46717: PUSH
46718: LD_INT 9
46720: PUSH
46721: LD_INT 10
46723: PUSH
46724: LD_INT 11
46726: PUSH
46727: LD_INT 12
46729: PUSH
46730: LD_INT 13
46732: PUSH
46733: LD_INT 14
46735: PUSH
46736: LD_INT 15
46738: PUSH
46739: LD_INT 16
46741: PUSH
46742: LD_INT 17
46744: PUSH
46745: LD_INT 18
46747: PUSH
46748: LD_INT 19
46750: PUSH
46751: LD_INT 20
46753: PUSH
46754: LD_INT 21
46756: PUSH
46757: LD_INT 22
46759: PUSH
46760: LD_INT 23
46762: PUSH
46763: LD_INT 24
46765: PUSH
46766: LD_INT 25
46768: PUSH
46769: LD_INT 26
46771: PUSH
46772: LD_INT 28
46774: PUSH
46775: LD_INT 30
46777: PUSH
46778: LD_INT 31
46780: PUSH
46781: LD_INT 32
46783: PUSH
46784: LD_INT 34
46786: PUSH
46787: LD_INT 36
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 101
46825: PUSH
46826: LD_INT 102
46828: PUSH
46829: LD_INT 103
46831: PUSH
46832: LD_INT 104
46834: PUSH
46835: LD_INT 105
46837: PUSH
46838: LD_INT 106
46840: PUSH
46841: LD_INT 107
46843: PUSH
46844: LD_INT 108
46846: PUSH
46847: LD_INT 109
46849: PUSH
46850: LD_INT 110
46852: PUSH
46853: LD_INT 111
46855: PUSH
46856: LD_INT 112
46858: PUSH
46859: LD_INT 114
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: ST_TO_ADDR
46881: GO 48468
46883: LD_INT 12
46885: DOUBLE
46886: EQUAL
46887: IFTRUE 46891
46889: GO 47099
46891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
46892: LD_ADDR_VAR 0 1
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: LD_INT 4
46908: PUSH
46909: LD_INT 5
46911: PUSH
46912: LD_INT 6
46914: PUSH
46915: LD_INT 7
46917: PUSH
46918: LD_INT 8
46920: PUSH
46921: LD_INT 9
46923: PUSH
46924: LD_INT 10
46926: PUSH
46927: LD_INT 11
46929: PUSH
46930: LD_INT 12
46932: PUSH
46933: LD_INT 13
46935: PUSH
46936: LD_INT 14
46938: PUSH
46939: LD_INT 15
46941: PUSH
46942: LD_INT 16
46944: PUSH
46945: LD_INT 17
46947: PUSH
46948: LD_INT 18
46950: PUSH
46951: LD_INT 19
46953: PUSH
46954: LD_INT 20
46956: PUSH
46957: LD_INT 21
46959: PUSH
46960: LD_INT 22
46962: PUSH
46963: LD_INT 23
46965: PUSH
46966: LD_INT 24
46968: PUSH
46969: LD_INT 25
46971: PUSH
46972: LD_INT 26
46974: PUSH
46975: LD_INT 27
46977: PUSH
46978: LD_INT 28
46980: PUSH
46981: LD_INT 30
46983: PUSH
46984: LD_INT 31
46986: PUSH
46987: LD_INT 32
46989: PUSH
46990: LD_INT 33
46992: PUSH
46993: LD_INT 34
46995: PUSH
46996: LD_INT 36
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 101
47037: PUSH
47038: LD_INT 102
47040: PUSH
47041: LD_INT 103
47043: PUSH
47044: LD_INT 104
47046: PUSH
47047: LD_INT 105
47049: PUSH
47050: LD_INT 106
47052: PUSH
47053: LD_INT 107
47055: PUSH
47056: LD_INT 108
47058: PUSH
47059: LD_INT 109
47061: PUSH
47062: LD_INT 110
47064: PUSH
47065: LD_INT 111
47067: PUSH
47068: LD_INT 112
47070: PUSH
47071: LD_INT 113
47073: PUSH
47074: LD_INT 114
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: ST_TO_ADDR
47097: GO 48468
47099: LD_INT 13
47101: DOUBLE
47102: EQUAL
47103: IFTRUE 47107
47105: GO 47303
47107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
47108: LD_ADDR_VAR 0 1
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: LD_INT 3
47121: PUSH
47122: LD_INT 4
47124: PUSH
47125: LD_INT 5
47127: PUSH
47128: LD_INT 8
47130: PUSH
47131: LD_INT 9
47133: PUSH
47134: LD_INT 10
47136: PUSH
47137: LD_INT 11
47139: PUSH
47140: LD_INT 12
47142: PUSH
47143: LD_INT 14
47145: PUSH
47146: LD_INT 15
47148: PUSH
47149: LD_INT 16
47151: PUSH
47152: LD_INT 17
47154: PUSH
47155: LD_INT 18
47157: PUSH
47158: LD_INT 19
47160: PUSH
47161: LD_INT 20
47163: PUSH
47164: LD_INT 21
47166: PUSH
47167: LD_INT 22
47169: PUSH
47170: LD_INT 23
47172: PUSH
47173: LD_INT 24
47175: PUSH
47176: LD_INT 25
47178: PUSH
47179: LD_INT 26
47181: PUSH
47182: LD_INT 27
47184: PUSH
47185: LD_INT 28
47187: PUSH
47188: LD_INT 30
47190: PUSH
47191: LD_INT 31
47193: PUSH
47194: LD_INT 32
47196: PUSH
47197: LD_INT 33
47199: PUSH
47200: LD_INT 34
47202: PUSH
47203: LD_INT 36
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 101
47241: PUSH
47242: LD_INT 102
47244: PUSH
47245: LD_INT 103
47247: PUSH
47248: LD_INT 104
47250: PUSH
47251: LD_INT 105
47253: PUSH
47254: LD_INT 106
47256: PUSH
47257: LD_INT 107
47259: PUSH
47260: LD_INT 108
47262: PUSH
47263: LD_INT 109
47265: PUSH
47266: LD_INT 110
47268: PUSH
47269: LD_INT 111
47271: PUSH
47272: LD_INT 112
47274: PUSH
47275: LD_INT 113
47277: PUSH
47278: LD_INT 114
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: ST_TO_ADDR
47301: GO 48468
47303: LD_INT 14
47305: DOUBLE
47306: EQUAL
47307: IFTRUE 47311
47309: GO 47523
47311: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
47312: LD_ADDR_VAR 0 1
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: LD_INT 3
47325: PUSH
47326: LD_INT 4
47328: PUSH
47329: LD_INT 5
47331: PUSH
47332: LD_INT 6
47334: PUSH
47335: LD_INT 7
47337: PUSH
47338: LD_INT 8
47340: PUSH
47341: LD_INT 9
47343: PUSH
47344: LD_INT 10
47346: PUSH
47347: LD_INT 11
47349: PUSH
47350: LD_INT 12
47352: PUSH
47353: LD_INT 13
47355: PUSH
47356: LD_INT 14
47358: PUSH
47359: LD_INT 15
47361: PUSH
47362: LD_INT 16
47364: PUSH
47365: LD_INT 17
47367: PUSH
47368: LD_INT 18
47370: PUSH
47371: LD_INT 19
47373: PUSH
47374: LD_INT 20
47376: PUSH
47377: LD_INT 21
47379: PUSH
47380: LD_INT 22
47382: PUSH
47383: LD_INT 23
47385: PUSH
47386: LD_INT 24
47388: PUSH
47389: LD_INT 25
47391: PUSH
47392: LD_INT 26
47394: PUSH
47395: LD_INT 27
47397: PUSH
47398: LD_INT 28
47400: PUSH
47401: LD_INT 29
47403: PUSH
47404: LD_INT 30
47406: PUSH
47407: LD_INT 31
47409: PUSH
47410: LD_INT 32
47412: PUSH
47413: LD_INT 33
47415: PUSH
47416: LD_INT 34
47418: PUSH
47419: LD_INT 36
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 101
47461: PUSH
47462: LD_INT 102
47464: PUSH
47465: LD_INT 103
47467: PUSH
47468: LD_INT 104
47470: PUSH
47471: LD_INT 105
47473: PUSH
47474: LD_INT 106
47476: PUSH
47477: LD_INT 107
47479: PUSH
47480: LD_INT 108
47482: PUSH
47483: LD_INT 109
47485: PUSH
47486: LD_INT 110
47488: PUSH
47489: LD_INT 111
47491: PUSH
47492: LD_INT 112
47494: PUSH
47495: LD_INT 113
47497: PUSH
47498: LD_INT 114
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: ST_TO_ADDR
47521: GO 48468
47523: LD_INT 15
47525: DOUBLE
47526: EQUAL
47527: IFTRUE 47531
47529: GO 47743
47531: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
47532: LD_ADDR_VAR 0 1
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: LD_INT 4
47548: PUSH
47549: LD_INT 5
47551: PUSH
47552: LD_INT 6
47554: PUSH
47555: LD_INT 7
47557: PUSH
47558: LD_INT 8
47560: PUSH
47561: LD_INT 9
47563: PUSH
47564: LD_INT 10
47566: PUSH
47567: LD_INT 11
47569: PUSH
47570: LD_INT 12
47572: PUSH
47573: LD_INT 13
47575: PUSH
47576: LD_INT 14
47578: PUSH
47579: LD_INT 15
47581: PUSH
47582: LD_INT 16
47584: PUSH
47585: LD_INT 17
47587: PUSH
47588: LD_INT 18
47590: PUSH
47591: LD_INT 19
47593: PUSH
47594: LD_INT 20
47596: PUSH
47597: LD_INT 21
47599: PUSH
47600: LD_INT 22
47602: PUSH
47603: LD_INT 23
47605: PUSH
47606: LD_INT 24
47608: PUSH
47609: LD_INT 25
47611: PUSH
47612: LD_INT 26
47614: PUSH
47615: LD_INT 27
47617: PUSH
47618: LD_INT 28
47620: PUSH
47621: LD_INT 29
47623: PUSH
47624: LD_INT 30
47626: PUSH
47627: LD_INT 31
47629: PUSH
47630: LD_INT 32
47632: PUSH
47633: LD_INT 33
47635: PUSH
47636: LD_INT 34
47638: PUSH
47639: LD_INT 36
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 101
47681: PUSH
47682: LD_INT 102
47684: PUSH
47685: LD_INT 103
47687: PUSH
47688: LD_INT 104
47690: PUSH
47691: LD_INT 105
47693: PUSH
47694: LD_INT 106
47696: PUSH
47697: LD_INT 107
47699: PUSH
47700: LD_INT 108
47702: PUSH
47703: LD_INT 109
47705: PUSH
47706: LD_INT 110
47708: PUSH
47709: LD_INT 111
47711: PUSH
47712: LD_INT 112
47714: PUSH
47715: LD_INT 113
47717: PUSH
47718: LD_INT 114
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: ST_TO_ADDR
47741: GO 48468
47743: LD_INT 16
47745: DOUBLE
47746: EQUAL
47747: IFTRUE 47751
47749: GO 47875
47751: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
47752: LD_ADDR_VAR 0 1
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: LD_INT 4
47762: PUSH
47763: LD_INT 5
47765: PUSH
47766: LD_INT 7
47768: PUSH
47769: LD_INT 11
47771: PUSH
47772: LD_INT 12
47774: PUSH
47775: LD_INT 15
47777: PUSH
47778: LD_INT 16
47780: PUSH
47781: LD_INT 20
47783: PUSH
47784: LD_INT 21
47786: PUSH
47787: LD_INT 22
47789: PUSH
47790: LD_INT 23
47792: PUSH
47793: LD_INT 25
47795: PUSH
47796: LD_INT 26
47798: PUSH
47799: LD_INT 30
47801: PUSH
47802: LD_INT 31
47804: PUSH
47805: LD_INT 32
47807: PUSH
47808: LD_INT 33
47810: PUSH
47811: LD_INT 34
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 101
47837: PUSH
47838: LD_INT 102
47840: PUSH
47841: LD_INT 103
47843: PUSH
47844: LD_INT 106
47846: PUSH
47847: LD_INT 108
47849: PUSH
47850: LD_INT 112
47852: PUSH
47853: LD_INT 113
47855: PUSH
47856: LD_INT 114
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: ST_TO_ADDR
47873: GO 48468
47875: LD_INT 17
47877: DOUBLE
47878: EQUAL
47879: IFTRUE 47883
47881: GO 48095
47883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
47884: LD_ADDR_VAR 0 1
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 3
47897: PUSH
47898: LD_INT 4
47900: PUSH
47901: LD_INT 5
47903: PUSH
47904: LD_INT 6
47906: PUSH
47907: LD_INT 7
47909: PUSH
47910: LD_INT 8
47912: PUSH
47913: LD_INT 9
47915: PUSH
47916: LD_INT 10
47918: PUSH
47919: LD_INT 11
47921: PUSH
47922: LD_INT 12
47924: PUSH
47925: LD_INT 13
47927: PUSH
47928: LD_INT 14
47930: PUSH
47931: LD_INT 15
47933: PUSH
47934: LD_INT 16
47936: PUSH
47937: LD_INT 17
47939: PUSH
47940: LD_INT 18
47942: PUSH
47943: LD_INT 19
47945: PUSH
47946: LD_INT 20
47948: PUSH
47949: LD_INT 21
47951: PUSH
47952: LD_INT 22
47954: PUSH
47955: LD_INT 23
47957: PUSH
47958: LD_INT 24
47960: PUSH
47961: LD_INT 25
47963: PUSH
47964: LD_INT 26
47966: PUSH
47967: LD_INT 27
47969: PUSH
47970: LD_INT 28
47972: PUSH
47973: LD_INT 29
47975: PUSH
47976: LD_INT 30
47978: PUSH
47979: LD_INT 31
47981: PUSH
47982: LD_INT 32
47984: PUSH
47985: LD_INT 33
47987: PUSH
47988: LD_INT 34
47990: PUSH
47991: LD_INT 36
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 101
48033: PUSH
48034: LD_INT 102
48036: PUSH
48037: LD_INT 103
48039: PUSH
48040: LD_INT 104
48042: PUSH
48043: LD_INT 105
48045: PUSH
48046: LD_INT 106
48048: PUSH
48049: LD_INT 107
48051: PUSH
48052: LD_INT 108
48054: PUSH
48055: LD_INT 109
48057: PUSH
48058: LD_INT 110
48060: PUSH
48061: LD_INT 111
48063: PUSH
48064: LD_INT 112
48066: PUSH
48067: LD_INT 113
48069: PUSH
48070: LD_INT 114
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: ST_TO_ADDR
48093: GO 48468
48095: LD_INT 18
48097: DOUBLE
48098: EQUAL
48099: IFTRUE 48103
48101: GO 48239
48103: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
48104: LD_ADDR_VAR 0 1
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 4
48114: PUSH
48115: LD_INT 5
48117: PUSH
48118: LD_INT 7
48120: PUSH
48121: LD_INT 11
48123: PUSH
48124: LD_INT 12
48126: PUSH
48127: LD_INT 15
48129: PUSH
48130: LD_INT 16
48132: PUSH
48133: LD_INT 20
48135: PUSH
48136: LD_INT 21
48138: PUSH
48139: LD_INT 22
48141: PUSH
48142: LD_INT 23
48144: PUSH
48145: LD_INT 25
48147: PUSH
48148: LD_INT 26
48150: PUSH
48151: LD_INT 30
48153: PUSH
48154: LD_INT 31
48156: PUSH
48157: LD_INT 32
48159: PUSH
48160: LD_INT 33
48162: PUSH
48163: LD_INT 34
48165: PUSH
48166: LD_INT 35
48168: PUSH
48169: LD_INT 36
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 101
48197: PUSH
48198: LD_INT 102
48200: PUSH
48201: LD_INT 103
48203: PUSH
48204: LD_INT 106
48206: PUSH
48207: LD_INT 108
48209: PUSH
48210: LD_INT 112
48212: PUSH
48213: LD_INT 113
48215: PUSH
48216: LD_INT 114
48218: PUSH
48219: LD_INT 115
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: ST_TO_ADDR
48237: GO 48468
48239: LD_INT 19
48241: DOUBLE
48242: EQUAL
48243: IFTRUE 48247
48245: GO 48467
48247: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
48248: LD_ADDR_VAR 0 1
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: LD_INT 4
48264: PUSH
48265: LD_INT 5
48267: PUSH
48268: LD_INT 6
48270: PUSH
48271: LD_INT 7
48273: PUSH
48274: LD_INT 8
48276: PUSH
48277: LD_INT 9
48279: PUSH
48280: LD_INT 10
48282: PUSH
48283: LD_INT 11
48285: PUSH
48286: LD_INT 12
48288: PUSH
48289: LD_INT 13
48291: PUSH
48292: LD_INT 14
48294: PUSH
48295: LD_INT 15
48297: PUSH
48298: LD_INT 16
48300: PUSH
48301: LD_INT 17
48303: PUSH
48304: LD_INT 18
48306: PUSH
48307: LD_INT 19
48309: PUSH
48310: LD_INT 20
48312: PUSH
48313: LD_INT 21
48315: PUSH
48316: LD_INT 22
48318: PUSH
48319: LD_INT 23
48321: PUSH
48322: LD_INT 24
48324: PUSH
48325: LD_INT 25
48327: PUSH
48328: LD_INT 26
48330: PUSH
48331: LD_INT 27
48333: PUSH
48334: LD_INT 28
48336: PUSH
48337: LD_INT 29
48339: PUSH
48340: LD_INT 30
48342: PUSH
48343: LD_INT 31
48345: PUSH
48346: LD_INT 32
48348: PUSH
48349: LD_INT 33
48351: PUSH
48352: LD_INT 34
48354: PUSH
48355: LD_INT 35
48357: PUSH
48358: LD_INT 36
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 101
48401: PUSH
48402: LD_INT 102
48404: PUSH
48405: LD_INT 103
48407: PUSH
48408: LD_INT 104
48410: PUSH
48411: LD_INT 105
48413: PUSH
48414: LD_INT 106
48416: PUSH
48417: LD_INT 107
48419: PUSH
48420: LD_INT 108
48422: PUSH
48423: LD_INT 109
48425: PUSH
48426: LD_INT 110
48428: PUSH
48429: LD_INT 111
48431: PUSH
48432: LD_INT 112
48434: PUSH
48435: LD_INT 113
48437: PUSH
48438: LD_INT 114
48440: PUSH
48441: LD_INT 115
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: ST_TO_ADDR
48465: GO 48468
48467: POP
// end else
48468: GO 48687
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
48470: LD_ADDR_VAR 0 1
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 3
48483: PUSH
48484: LD_INT 4
48486: PUSH
48487: LD_INT 5
48489: PUSH
48490: LD_INT 6
48492: PUSH
48493: LD_INT 7
48495: PUSH
48496: LD_INT 8
48498: PUSH
48499: LD_INT 9
48501: PUSH
48502: LD_INT 10
48504: PUSH
48505: LD_INT 11
48507: PUSH
48508: LD_INT 12
48510: PUSH
48511: LD_INT 13
48513: PUSH
48514: LD_INT 14
48516: PUSH
48517: LD_INT 15
48519: PUSH
48520: LD_INT 16
48522: PUSH
48523: LD_INT 17
48525: PUSH
48526: LD_INT 18
48528: PUSH
48529: LD_INT 19
48531: PUSH
48532: LD_INT 20
48534: PUSH
48535: LD_INT 21
48537: PUSH
48538: LD_INT 22
48540: PUSH
48541: LD_INT 23
48543: PUSH
48544: LD_INT 24
48546: PUSH
48547: LD_INT 25
48549: PUSH
48550: LD_INT 26
48552: PUSH
48553: LD_INT 27
48555: PUSH
48556: LD_INT 28
48558: PUSH
48559: LD_INT 29
48561: PUSH
48562: LD_INT 30
48564: PUSH
48565: LD_INT 31
48567: PUSH
48568: LD_INT 32
48570: PUSH
48571: LD_INT 33
48573: PUSH
48574: LD_INT 34
48576: PUSH
48577: LD_INT 35
48579: PUSH
48580: LD_INT 36
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 101
48623: PUSH
48624: LD_INT 102
48626: PUSH
48627: LD_INT 103
48629: PUSH
48630: LD_INT 104
48632: PUSH
48633: LD_INT 105
48635: PUSH
48636: LD_INT 106
48638: PUSH
48639: LD_INT 107
48641: PUSH
48642: LD_INT 108
48644: PUSH
48645: LD_INT 109
48647: PUSH
48648: LD_INT 110
48650: PUSH
48651: LD_INT 111
48653: PUSH
48654: LD_INT 112
48656: PUSH
48657: LD_INT 113
48659: PUSH
48660: LD_INT 114
48662: PUSH
48663: LD_INT 115
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: ST_TO_ADDR
// if result then
48687: LD_VAR 0 1
48691: IFFALSE 48980
// begin normal :=  ;
48693: LD_ADDR_VAR 0 3
48697: PUSH
48698: LD_STRING 
48700: ST_TO_ADDR
// hardcore :=  ;
48701: LD_ADDR_VAR 0 4
48705: PUSH
48706: LD_STRING 
48708: ST_TO_ADDR
// for i = 1 to normalCounter do
48709: LD_ADDR_VAR 0 5
48713: PUSH
48714: DOUBLE
48715: LD_INT 1
48717: DEC
48718: ST_TO_ADDR
48719: LD_EXP 36
48723: PUSH
48724: FOR_TO
48725: IFFALSE 48826
// begin tmp := 0 ;
48727: LD_ADDR_VAR 0 2
48731: PUSH
48732: LD_STRING 0
48734: ST_TO_ADDR
// if result [ 1 ] then
48735: LD_VAR 0 1
48739: PUSH
48740: LD_INT 1
48742: ARRAY
48743: IFFALSE 48808
// if result [ 1 ] [ 1 ] = i then
48745: LD_VAR 0 1
48749: PUSH
48750: LD_INT 1
48752: ARRAY
48753: PUSH
48754: LD_INT 1
48756: ARRAY
48757: PUSH
48758: LD_VAR 0 5
48762: EQUAL
48763: IFFALSE 48808
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
48765: LD_ADDR_VAR 0 1
48769: PUSH
48770: LD_VAR 0 1
48774: PPUSH
48775: LD_INT 1
48777: PPUSH
48778: LD_VAR 0 1
48782: PUSH
48783: LD_INT 1
48785: ARRAY
48786: PPUSH
48787: LD_INT 1
48789: PPUSH
48790: CALL_OW 3
48794: PPUSH
48795: CALL_OW 1
48799: ST_TO_ADDR
// tmp := 1 ;
48800: LD_ADDR_VAR 0 2
48804: PUSH
48805: LD_STRING 1
48807: ST_TO_ADDR
// end ; normal := normal & tmp ;
48808: LD_ADDR_VAR 0 3
48812: PUSH
48813: LD_VAR 0 3
48817: PUSH
48818: LD_VAR 0 2
48822: STR
48823: ST_TO_ADDR
// end ;
48824: GO 48724
48826: POP
48827: POP
// for i = 1 to hardcoreCounter do
48828: LD_ADDR_VAR 0 5
48832: PUSH
48833: DOUBLE
48834: LD_INT 1
48836: DEC
48837: ST_TO_ADDR
48838: LD_EXP 37
48842: PUSH
48843: FOR_TO
48844: IFFALSE 48949
// begin tmp := 0 ;
48846: LD_ADDR_VAR 0 2
48850: PUSH
48851: LD_STRING 0
48853: ST_TO_ADDR
// if result [ 2 ] then
48854: LD_VAR 0 1
48858: PUSH
48859: LD_INT 2
48861: ARRAY
48862: IFFALSE 48931
// if result [ 2 ] [ 1 ] = 100 + i then
48864: LD_VAR 0 1
48868: PUSH
48869: LD_INT 2
48871: ARRAY
48872: PUSH
48873: LD_INT 1
48875: ARRAY
48876: PUSH
48877: LD_INT 100
48879: PUSH
48880: LD_VAR 0 5
48884: PLUS
48885: EQUAL
48886: IFFALSE 48931
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
48888: LD_ADDR_VAR 0 1
48892: PUSH
48893: LD_VAR 0 1
48897: PPUSH
48898: LD_INT 2
48900: PPUSH
48901: LD_VAR 0 1
48905: PUSH
48906: LD_INT 2
48908: ARRAY
48909: PPUSH
48910: LD_INT 1
48912: PPUSH
48913: CALL_OW 3
48917: PPUSH
48918: CALL_OW 1
48922: ST_TO_ADDR
// tmp := 1 ;
48923: LD_ADDR_VAR 0 2
48927: PUSH
48928: LD_STRING 1
48930: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
48931: LD_ADDR_VAR 0 4
48935: PUSH
48936: LD_VAR 0 4
48940: PUSH
48941: LD_VAR 0 2
48945: STR
48946: ST_TO_ADDR
// end ;
48947: GO 48843
48949: POP
48950: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
48951: LD_STRING getStreamItemsFromMission("
48953: PUSH
48954: LD_VAR 0 3
48958: STR
48959: PUSH
48960: LD_STRING ","
48962: STR
48963: PUSH
48964: LD_VAR 0 4
48968: STR
48969: PUSH
48970: LD_STRING ")
48972: STR
48973: PPUSH
48974: CALL_OW 559
// end else
48978: GO 48987
// ToLua ( getStreamItemsFromMission("","") ) ;
48980: LD_STRING getStreamItemsFromMission("","")
48982: PPUSH
48983: CALL_OW 559
// end ;
48987: LD_VAR 0 1
48991: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
48992: LD_EXP 35
48996: PUSH
48997: LD_EXP 40
49001: AND
49002: IFFALSE 49126
49004: GO 49006
49006: DISABLE
49007: LD_INT 0
49009: PPUSH
49010: PPUSH
// begin enable ;
49011: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
49012: LD_ADDR_VAR 0 2
49016: PUSH
49017: LD_INT 22
49019: PUSH
49020: LD_OWVAR 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 34
49034: PUSH
49035: LD_INT 7
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 34
49044: PUSH
49045: LD_INT 45
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 34
49054: PUSH
49055: LD_INT 28
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 34
49064: PUSH
49065: LD_INT 47
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PPUSH
49083: CALL_OW 69
49087: ST_TO_ADDR
// if not tmp then
49088: LD_VAR 0 2
49092: NOT
49093: IFFALSE 49097
// exit ;
49095: GO 49126
// for i in tmp do
49097: LD_ADDR_VAR 0 1
49101: PUSH
49102: LD_VAR 0 2
49106: PUSH
49107: FOR_IN
49108: IFFALSE 49124
// begin SetLives ( i , 0 ) ;
49110: LD_VAR 0 1
49114: PPUSH
49115: LD_INT 0
49117: PPUSH
49118: CALL_OW 234
// end ;
49122: GO 49107
49124: POP
49125: POP
// end ;
49126: PPOPN 2
49128: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
49129: LD_EXP 35
49133: PUSH
49134: LD_EXP 41
49138: AND
49139: IFFALSE 49223
49141: GO 49143
49143: DISABLE
49144: LD_INT 0
49146: PPUSH
49147: PPUSH
// begin enable ;
49148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
49149: LD_ADDR_VAR 0 2
49153: PUSH
49154: LD_INT 22
49156: PUSH
49157: LD_OWVAR 2
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 32
49168: PUSH
49169: LD_INT 3
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PPUSH
49180: CALL_OW 69
49184: ST_TO_ADDR
// if not tmp then
49185: LD_VAR 0 2
49189: NOT
49190: IFFALSE 49194
// exit ;
49192: GO 49223
// for i in tmp do
49194: LD_ADDR_VAR 0 1
49198: PUSH
49199: LD_VAR 0 2
49203: PUSH
49204: FOR_IN
49205: IFFALSE 49221
// begin SetLives ( i , 0 ) ;
49207: LD_VAR 0 1
49211: PPUSH
49212: LD_INT 0
49214: PPUSH
49215: CALL_OW 234
// end ;
49219: GO 49204
49221: POP
49222: POP
// end ;
49223: PPOPN 2
49225: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
49226: LD_EXP 35
49230: PUSH
49231: LD_EXP 38
49235: AND
49236: IFFALSE 49329
49238: GO 49240
49240: DISABLE
49241: LD_INT 0
49243: PPUSH
// begin enable ;
49244: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
49245: LD_ADDR_VAR 0 1
49249: PUSH
49250: LD_INT 22
49252: PUSH
49253: LD_OWVAR 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 25
49267: PUSH
49268: LD_INT 5
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 25
49277: PUSH
49278: LD_INT 9
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 25
49287: PUSH
49288: LD_INT 8
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PPUSH
49305: CALL_OW 69
49309: PUSH
49310: FOR_IN
49311: IFFALSE 49327
// begin SetClass ( i , 1 ) ;
49313: LD_VAR 0 1
49317: PPUSH
49318: LD_INT 1
49320: PPUSH
49321: CALL_OW 336
// end ;
49325: GO 49310
49327: POP
49328: POP
// end ;
49329: PPOPN 1
49331: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
49332: LD_EXP 35
49336: PUSH
49337: LD_EXP 39
49341: AND
49342: PUSH
49343: LD_OWVAR 65
49347: PUSH
49348: LD_INT 7
49350: LESS
49351: AND
49352: IFFALSE 49366
49354: GO 49356
49356: DISABLE
// begin enable ;
49357: ENABLE
// game_speed := 7 ;
49358: LD_ADDR_OWVAR 65
49362: PUSH
49363: LD_INT 7
49365: ST_TO_ADDR
// end ;
49366: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
49367: LD_EXP 35
49371: PUSH
49372: LD_EXP 42
49376: AND
49377: IFFALSE 49579
49379: GO 49381
49381: DISABLE
49382: LD_INT 0
49384: PPUSH
49385: PPUSH
49386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
49387: LD_ADDR_VAR 0 3
49391: PUSH
49392: LD_INT 81
49394: PUSH
49395: LD_OWVAR 2
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 21
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PPUSH
49418: CALL_OW 69
49422: ST_TO_ADDR
// if not tmp then
49423: LD_VAR 0 3
49427: NOT
49428: IFFALSE 49432
// exit ;
49430: GO 49579
// if tmp > 5 then
49432: LD_VAR 0 3
49436: PUSH
49437: LD_INT 5
49439: GREATER
49440: IFFALSE 49452
// k := 5 else
49442: LD_ADDR_VAR 0 2
49446: PUSH
49447: LD_INT 5
49449: ST_TO_ADDR
49450: GO 49462
// k := tmp ;
49452: LD_ADDR_VAR 0 2
49456: PUSH
49457: LD_VAR 0 3
49461: ST_TO_ADDR
// for i := 1 to k do
49462: LD_ADDR_VAR 0 1
49466: PUSH
49467: DOUBLE
49468: LD_INT 1
49470: DEC
49471: ST_TO_ADDR
49472: LD_VAR 0 2
49476: PUSH
49477: FOR_TO
49478: IFFALSE 49577
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
49480: LD_VAR 0 3
49484: PUSH
49485: LD_VAR 0 1
49489: ARRAY
49490: PPUSH
49491: LD_VAR 0 1
49495: PUSH
49496: LD_INT 4
49498: MOD
49499: PUSH
49500: LD_INT 1
49502: PLUS
49503: PPUSH
49504: CALL_OW 259
49508: PUSH
49509: LD_INT 10
49511: LESS
49512: IFFALSE 49575
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
49514: LD_VAR 0 3
49518: PUSH
49519: LD_VAR 0 1
49523: ARRAY
49524: PPUSH
49525: LD_VAR 0 1
49529: PUSH
49530: LD_INT 4
49532: MOD
49533: PUSH
49534: LD_INT 1
49536: PLUS
49537: PPUSH
49538: LD_VAR 0 3
49542: PUSH
49543: LD_VAR 0 1
49547: ARRAY
49548: PPUSH
49549: LD_VAR 0 1
49553: PUSH
49554: LD_INT 4
49556: MOD
49557: PUSH
49558: LD_INT 1
49560: PLUS
49561: PPUSH
49562: CALL_OW 259
49566: PUSH
49567: LD_INT 1
49569: PLUS
49570: PPUSH
49571: CALL_OW 237
49575: GO 49477
49577: POP
49578: POP
// end ;
49579: PPOPN 3
49581: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
49582: LD_EXP 35
49586: PUSH
49587: LD_EXP 43
49591: AND
49592: IFFALSE 49612
49594: GO 49596
49596: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
49597: LD_INT 4
49599: PPUSH
49600: LD_OWVAR 2
49604: PPUSH
49605: LD_INT 0
49607: PPUSH
49608: CALL_OW 324
49612: END
// every 0 0$1 trigger StreamModeActive and sShovel do
49613: LD_EXP 35
49617: PUSH
49618: LD_EXP 72
49622: AND
49623: IFFALSE 49643
49625: GO 49627
49627: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
49628: LD_INT 19
49630: PPUSH
49631: LD_OWVAR 2
49635: PPUSH
49636: LD_INT 0
49638: PPUSH
49639: CALL_OW 324
49643: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
49644: LD_EXP 35
49648: PUSH
49649: LD_EXP 44
49653: AND
49654: IFFALSE 49756
49656: GO 49658
49658: DISABLE
49659: LD_INT 0
49661: PPUSH
49662: PPUSH
// begin enable ;
49663: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
49664: LD_ADDR_VAR 0 2
49668: PUSH
49669: LD_INT 22
49671: PUSH
49672: LD_OWVAR 2
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 34
49686: PUSH
49687: LD_INT 11
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 34
49696: PUSH
49697: LD_INT 30
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PPUSH
49713: CALL_OW 69
49717: ST_TO_ADDR
// if not tmp then
49718: LD_VAR 0 2
49722: NOT
49723: IFFALSE 49727
// exit ;
49725: GO 49756
// for i in tmp do
49727: LD_ADDR_VAR 0 1
49731: PUSH
49732: LD_VAR 0 2
49736: PUSH
49737: FOR_IN
49738: IFFALSE 49754
// begin SetLives ( i , 0 ) ;
49740: LD_VAR 0 1
49744: PPUSH
49745: LD_INT 0
49747: PPUSH
49748: CALL_OW 234
// end ;
49752: GO 49737
49754: POP
49755: POP
// end ;
49756: PPOPN 2
49758: END
// every 0 0$1 trigger StreamModeActive and sBunker do
49759: LD_EXP 35
49763: PUSH
49764: LD_EXP 45
49768: AND
49769: IFFALSE 49789
49771: GO 49773
49773: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
49774: LD_INT 32
49776: PPUSH
49777: LD_OWVAR 2
49781: PPUSH
49782: LD_INT 0
49784: PPUSH
49785: CALL_OW 324
49789: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
49790: LD_EXP 35
49794: PUSH
49795: LD_EXP 46
49799: AND
49800: IFFALSE 49981
49802: GO 49804
49804: DISABLE
49805: LD_INT 0
49807: PPUSH
49808: PPUSH
49809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
49810: LD_ADDR_VAR 0 2
49814: PUSH
49815: LD_INT 22
49817: PUSH
49818: LD_OWVAR 2
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 33
49829: PUSH
49830: LD_INT 3
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PPUSH
49841: CALL_OW 69
49845: ST_TO_ADDR
// if not tmp then
49846: LD_VAR 0 2
49850: NOT
49851: IFFALSE 49855
// exit ;
49853: GO 49981
// side := 0 ;
49855: LD_ADDR_VAR 0 3
49859: PUSH
49860: LD_INT 0
49862: ST_TO_ADDR
// for i := 1 to 8 do
49863: LD_ADDR_VAR 0 1
49867: PUSH
49868: DOUBLE
49869: LD_INT 1
49871: DEC
49872: ST_TO_ADDR
49873: LD_INT 8
49875: PUSH
49876: FOR_TO
49877: IFFALSE 49925
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
49879: LD_OWVAR 2
49883: PUSH
49884: LD_VAR 0 1
49888: NONEQUAL
49889: PUSH
49890: LD_OWVAR 2
49894: PPUSH
49895: LD_VAR 0 1
49899: PPUSH
49900: CALL_OW 81
49904: PUSH
49905: LD_INT 2
49907: EQUAL
49908: AND
49909: IFFALSE 49923
// begin side := i ;
49911: LD_ADDR_VAR 0 3
49915: PUSH
49916: LD_VAR 0 1
49920: ST_TO_ADDR
// break ;
49921: GO 49925
// end ;
49923: GO 49876
49925: POP
49926: POP
// if not side then
49927: LD_VAR 0 3
49931: NOT
49932: IFFALSE 49936
// exit ;
49934: GO 49981
// for i := 1 to tmp do
49936: LD_ADDR_VAR 0 1
49940: PUSH
49941: DOUBLE
49942: LD_INT 1
49944: DEC
49945: ST_TO_ADDR
49946: LD_VAR 0 2
49950: PUSH
49951: FOR_TO
49952: IFFALSE 49979
// if Prob ( 60 ) then
49954: LD_INT 60
49956: PPUSH
49957: CALL_OW 13
49961: IFFALSE 49977
// SetSide ( i , side ) ;
49963: LD_VAR 0 1
49967: PPUSH
49968: LD_VAR 0 3
49972: PPUSH
49973: CALL_OW 235
49977: GO 49951
49979: POP
49980: POP
// end ;
49981: PPOPN 3
49983: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
49984: LD_EXP 35
49988: PUSH
49989: LD_EXP 48
49993: AND
49994: IFFALSE 50113
49996: GO 49998
49998: DISABLE
49999: LD_INT 0
50001: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
50002: LD_ADDR_VAR 0 1
50006: PUSH
50007: LD_INT 22
50009: PUSH
50010: LD_OWVAR 2
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 21
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: LD_INT 23
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: PPUSH
50051: CALL_OW 69
50055: PUSH
50056: FOR_IN
50057: IFFALSE 50111
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
50059: LD_VAR 0 1
50063: PPUSH
50064: CALL_OW 257
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: LD_INT 3
50077: PUSH
50078: LD_INT 4
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: IN
50087: IFFALSE 50109
// SetClass ( un , rand ( 1 , 4 ) ) ;
50089: LD_VAR 0 1
50093: PPUSH
50094: LD_INT 1
50096: PPUSH
50097: LD_INT 4
50099: PPUSH
50100: CALL_OW 12
50104: PPUSH
50105: CALL_OW 336
50109: GO 50056
50111: POP
50112: POP
// end ;
50113: PPOPN 1
50115: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
50116: LD_EXP 35
50120: PUSH
50121: LD_EXP 47
50125: AND
50126: IFFALSE 50205
50128: GO 50130
50130: DISABLE
50131: LD_INT 0
50133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
50134: LD_ADDR_VAR 0 1
50138: PUSH
50139: LD_INT 22
50141: PUSH
50142: LD_OWVAR 2
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 21
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PPUSH
50165: CALL_OW 69
50169: ST_TO_ADDR
// if not tmp then
50170: LD_VAR 0 1
50174: NOT
50175: IFFALSE 50179
// exit ;
50177: GO 50205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
50179: LD_VAR 0 1
50183: PUSH
50184: LD_INT 1
50186: PPUSH
50187: LD_VAR 0 1
50191: PPUSH
50192: CALL_OW 12
50196: ARRAY
50197: PPUSH
50198: LD_INT 100
50200: PPUSH
50201: CALL_OW 234
// end ;
50205: PPOPN 1
50207: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
50208: LD_EXP 35
50212: PUSH
50213: LD_EXP 49
50217: AND
50218: IFFALSE 50316
50220: GO 50222
50222: DISABLE
50223: LD_INT 0
50225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50226: LD_ADDR_VAR 0 1
50230: PUSH
50231: LD_INT 22
50233: PUSH
50234: LD_OWVAR 2
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 21
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PPUSH
50257: CALL_OW 69
50261: ST_TO_ADDR
// if not tmp then
50262: LD_VAR 0 1
50266: NOT
50267: IFFALSE 50271
// exit ;
50269: GO 50316
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
50271: LD_VAR 0 1
50275: PUSH
50276: LD_INT 1
50278: PPUSH
50279: LD_VAR 0 1
50283: PPUSH
50284: CALL_OW 12
50288: ARRAY
50289: PPUSH
50290: LD_INT 1
50292: PPUSH
50293: LD_INT 4
50295: PPUSH
50296: CALL_OW 12
50300: PPUSH
50301: LD_INT 3000
50303: PPUSH
50304: LD_INT 9000
50306: PPUSH
50307: CALL_OW 12
50311: PPUSH
50312: CALL_OW 492
// end ;
50316: PPOPN 1
50318: END
// every 0 0$1 trigger StreamModeActive and sDepot do
50319: LD_EXP 35
50323: PUSH
50324: LD_EXP 50
50328: AND
50329: IFFALSE 50349
50331: GO 50333
50333: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
50334: LD_INT 1
50336: PPUSH
50337: LD_OWVAR 2
50341: PPUSH
50342: LD_INT 0
50344: PPUSH
50345: CALL_OW 324
50349: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
50350: LD_EXP 35
50354: PUSH
50355: LD_EXP 51
50359: AND
50360: IFFALSE 50443
50362: GO 50364
50364: DISABLE
50365: LD_INT 0
50367: PPUSH
50368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
50369: LD_ADDR_VAR 0 2
50373: PUSH
50374: LD_INT 22
50376: PUSH
50377: LD_OWVAR 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 21
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PPUSH
50400: CALL_OW 69
50404: ST_TO_ADDR
// if not tmp then
50405: LD_VAR 0 2
50409: NOT
50410: IFFALSE 50414
// exit ;
50412: GO 50443
// for i in tmp do
50414: LD_ADDR_VAR 0 1
50418: PUSH
50419: LD_VAR 0 2
50423: PUSH
50424: FOR_IN
50425: IFFALSE 50441
// SetBLevel ( i , 10 ) ;
50427: LD_VAR 0 1
50431: PPUSH
50432: LD_INT 10
50434: PPUSH
50435: CALL_OW 241
50439: GO 50424
50441: POP
50442: POP
// end ;
50443: PPOPN 2
50445: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
50446: LD_EXP 35
50450: PUSH
50451: LD_EXP 52
50455: AND
50456: IFFALSE 50567
50458: GO 50460
50460: DISABLE
50461: LD_INT 0
50463: PPUSH
50464: PPUSH
50465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
50466: LD_ADDR_VAR 0 3
50470: PUSH
50471: LD_INT 22
50473: PUSH
50474: LD_OWVAR 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 25
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PPUSH
50497: CALL_OW 69
50501: ST_TO_ADDR
// if not tmp then
50502: LD_VAR 0 3
50506: NOT
50507: IFFALSE 50511
// exit ;
50509: GO 50567
// un := tmp [ rand ( 1 , tmp ) ] ;
50511: LD_ADDR_VAR 0 2
50515: PUSH
50516: LD_VAR 0 3
50520: PUSH
50521: LD_INT 1
50523: PPUSH
50524: LD_VAR 0 3
50528: PPUSH
50529: CALL_OW 12
50533: ARRAY
50534: ST_TO_ADDR
// if Crawls ( un ) then
50535: LD_VAR 0 2
50539: PPUSH
50540: CALL_OW 318
50544: IFFALSE 50555
// ComWalk ( un ) ;
50546: LD_VAR 0 2
50550: PPUSH
50551: CALL_OW 138
// SetClass ( un , class_sniper ) ;
50555: LD_VAR 0 2
50559: PPUSH
50560: LD_INT 5
50562: PPUSH
50563: CALL_OW 336
// end ;
50567: PPOPN 3
50569: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
50570: LD_EXP 35
50574: PUSH
50575: LD_EXP 53
50579: AND
50580: PUSH
50581: LD_OWVAR 67
50585: PUSH
50586: LD_INT 3
50588: LESS
50589: AND
50590: IFFALSE 50609
50592: GO 50594
50594: DISABLE
// Difficulty := Difficulty + 1 ;
50595: LD_ADDR_OWVAR 67
50599: PUSH
50600: LD_OWVAR 67
50604: PUSH
50605: LD_INT 1
50607: PLUS
50608: ST_TO_ADDR
50609: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
50610: LD_EXP 35
50614: PUSH
50615: LD_EXP 54
50619: AND
50620: IFFALSE 50723
50622: GO 50624
50624: DISABLE
50625: LD_INT 0
50627: PPUSH
// begin for i := 1 to 5 do
50628: LD_ADDR_VAR 0 1
50632: PUSH
50633: DOUBLE
50634: LD_INT 1
50636: DEC
50637: ST_TO_ADDR
50638: LD_INT 5
50640: PUSH
50641: FOR_TO
50642: IFFALSE 50721
// begin uc_nation := nation_nature ;
50644: LD_ADDR_OWVAR 21
50648: PUSH
50649: LD_INT 0
50651: ST_TO_ADDR
// uc_side := 0 ;
50652: LD_ADDR_OWVAR 20
50656: PUSH
50657: LD_INT 0
50659: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50660: LD_ADDR_OWVAR 29
50664: PUSH
50665: LD_INT 12
50667: PUSH
50668: LD_INT 12
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: ST_TO_ADDR
// hc_agressivity := 20 ;
50675: LD_ADDR_OWVAR 35
50679: PUSH
50680: LD_INT 20
50682: ST_TO_ADDR
// hc_class := class_tiger ;
50683: LD_ADDR_OWVAR 28
50687: PUSH
50688: LD_INT 14
50690: ST_TO_ADDR
// hc_gallery :=  ;
50691: LD_ADDR_OWVAR 33
50695: PUSH
50696: LD_STRING 
50698: ST_TO_ADDR
// hc_name :=  ;
50699: LD_ADDR_OWVAR 26
50703: PUSH
50704: LD_STRING 
50706: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
50707: CALL_OW 44
50711: PPUSH
50712: LD_INT 0
50714: PPUSH
50715: CALL_OW 51
// end ;
50719: GO 50641
50721: POP
50722: POP
// end ;
50723: PPOPN 1
50725: END
// every 0 0$1 trigger StreamModeActive and sBomb do
50726: LD_EXP 35
50730: PUSH
50731: LD_EXP 55
50735: AND
50736: IFFALSE 50745
50738: GO 50740
50740: DISABLE
// StreamSibBomb ;
50741: CALL 50746 0 0
50745: END
// export function StreamSibBomb ; var i , x , y ; begin
50746: LD_INT 0
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
// result := false ;
50752: LD_ADDR_VAR 0 1
50756: PUSH
50757: LD_INT 0
50759: ST_TO_ADDR
// for i := 1 to 16 do
50760: LD_ADDR_VAR 0 2
50764: PUSH
50765: DOUBLE
50766: LD_INT 1
50768: DEC
50769: ST_TO_ADDR
50770: LD_INT 16
50772: PUSH
50773: FOR_TO
50774: IFFALSE 50973
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
50776: LD_ADDR_VAR 0 3
50780: PUSH
50781: LD_INT 10
50783: PUSH
50784: LD_INT 20
50786: PUSH
50787: LD_INT 30
50789: PUSH
50790: LD_INT 40
50792: PUSH
50793: LD_INT 50
50795: PUSH
50796: LD_INT 60
50798: PUSH
50799: LD_INT 70
50801: PUSH
50802: LD_INT 80
50804: PUSH
50805: LD_INT 90
50807: PUSH
50808: LD_INT 100
50810: PUSH
50811: LD_INT 110
50813: PUSH
50814: LD_INT 120
50816: PUSH
50817: LD_INT 130
50819: PUSH
50820: LD_INT 140
50822: PUSH
50823: LD_INT 150
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PPUSH
50846: LD_INT 15
50848: PPUSH
50849: CALL_OW 12
50853: ARRAY
50854: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
50855: LD_ADDR_VAR 0 4
50859: PUSH
50860: LD_INT 10
50862: PUSH
50863: LD_INT 20
50865: PUSH
50866: LD_INT 30
50868: PUSH
50869: LD_INT 40
50871: PUSH
50872: LD_INT 50
50874: PUSH
50875: LD_INT 60
50877: PUSH
50878: LD_INT 70
50880: PUSH
50881: LD_INT 80
50883: PUSH
50884: LD_INT 90
50886: PUSH
50887: LD_INT 100
50889: PUSH
50890: LD_INT 110
50892: PUSH
50893: LD_INT 120
50895: PUSH
50896: LD_INT 130
50898: PUSH
50899: LD_INT 140
50901: PUSH
50902: LD_INT 150
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PPUSH
50925: LD_INT 15
50927: PPUSH
50928: CALL_OW 12
50932: ARRAY
50933: ST_TO_ADDR
// if ValidHex ( x , y ) then
50934: LD_VAR 0 3
50938: PPUSH
50939: LD_VAR 0 4
50943: PPUSH
50944: CALL_OW 488
50948: IFFALSE 50971
// begin result := [ x , y ] ;
50950: LD_ADDR_VAR 0 1
50954: PUSH
50955: LD_VAR 0 3
50959: PUSH
50960: LD_VAR 0 4
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: ST_TO_ADDR
// break ;
50969: GO 50973
// end ; end ;
50971: GO 50773
50973: POP
50974: POP
// if result then
50975: LD_VAR 0 1
50979: IFFALSE 51039
// begin ToLua ( playSibBomb() ) ;
50981: LD_STRING playSibBomb()
50983: PPUSH
50984: CALL_OW 559
// wait ( 0 0$14 ) ;
50988: LD_INT 490
50990: PPUSH
50991: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
50995: LD_VAR 0 1
50999: PUSH
51000: LD_INT 1
51002: ARRAY
51003: PPUSH
51004: LD_VAR 0 1
51008: PUSH
51009: LD_INT 2
51011: ARRAY
51012: PPUSH
51013: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
51017: LD_VAR 0 1
51021: PUSH
51022: LD_INT 1
51024: ARRAY
51025: PPUSH
51026: LD_VAR 0 1
51030: PUSH
51031: LD_INT 2
51033: ARRAY
51034: PPUSH
51035: CALL_OW 429
// end ; end ;
51039: LD_VAR 0 1
51043: RET
// every 0 0$1 trigger StreamModeActive and sReset do
51044: LD_EXP 35
51048: PUSH
51049: LD_EXP 57
51053: AND
51054: IFFALSE 51066
51056: GO 51058
51058: DISABLE
// YouLost (  ) ;
51059: LD_STRING 
51061: PPUSH
51062: CALL_OW 104
51066: END
// every 0 0$1 trigger StreamModeActive and sFog do
51067: LD_EXP 35
51071: PUSH
51072: LD_EXP 56
51076: AND
51077: IFFALSE 51091
51079: GO 51081
51081: DISABLE
// FogOff ( your_side ) ;
51082: LD_OWVAR 2
51086: PPUSH
51087: CALL_OW 344
51091: END
// every 0 0$1 trigger StreamModeActive and sSun do
51092: LD_EXP 35
51096: PUSH
51097: LD_EXP 58
51101: AND
51102: IFFALSE 51130
51104: GO 51106
51106: DISABLE
// begin solar_recharge_percent := 0 ;
51107: LD_ADDR_OWVAR 79
51111: PUSH
51112: LD_INT 0
51114: ST_TO_ADDR
// wait ( 5 5$00 ) ;
51115: LD_INT 10500
51117: PPUSH
51118: CALL_OW 67
// solar_recharge_percent := 100 ;
51122: LD_ADDR_OWVAR 79
51126: PUSH
51127: LD_INT 100
51129: ST_TO_ADDR
// end ;
51130: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
51131: LD_EXP 35
51135: PUSH
51136: LD_EXP 59
51140: AND
51141: IFFALSE 51380
51143: GO 51145
51145: DISABLE
51146: LD_INT 0
51148: PPUSH
51149: PPUSH
51150: PPUSH
// begin tmp := [ ] ;
51151: LD_ADDR_VAR 0 3
51155: PUSH
51156: EMPTY
51157: ST_TO_ADDR
// for i := 1 to 6 do
51158: LD_ADDR_VAR 0 1
51162: PUSH
51163: DOUBLE
51164: LD_INT 1
51166: DEC
51167: ST_TO_ADDR
51168: LD_INT 6
51170: PUSH
51171: FOR_TO
51172: IFFALSE 51277
// begin uc_nation := nation_nature ;
51174: LD_ADDR_OWVAR 21
51178: PUSH
51179: LD_INT 0
51181: ST_TO_ADDR
// uc_side := 0 ;
51182: LD_ADDR_OWVAR 20
51186: PUSH
51187: LD_INT 0
51189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51190: LD_ADDR_OWVAR 29
51194: PUSH
51195: LD_INT 12
51197: PUSH
51198: LD_INT 12
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: ST_TO_ADDR
// hc_agressivity := 20 ;
51205: LD_ADDR_OWVAR 35
51209: PUSH
51210: LD_INT 20
51212: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
51213: LD_ADDR_OWVAR 28
51217: PUSH
51218: LD_INT 17
51220: ST_TO_ADDR
// hc_gallery :=  ;
51221: LD_ADDR_OWVAR 33
51225: PUSH
51226: LD_STRING 
51228: ST_TO_ADDR
// hc_name :=  ;
51229: LD_ADDR_OWVAR 26
51233: PUSH
51234: LD_STRING 
51236: ST_TO_ADDR
// un := CreateHuman ;
51237: LD_ADDR_VAR 0 2
51241: PUSH
51242: CALL_OW 44
51246: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
51247: LD_VAR 0 2
51251: PPUSH
51252: LD_INT 1
51254: PPUSH
51255: CALL_OW 51
// tmp := tmp ^ un ;
51259: LD_ADDR_VAR 0 3
51263: PUSH
51264: LD_VAR 0 3
51268: PUSH
51269: LD_VAR 0 2
51273: ADD
51274: ST_TO_ADDR
// end ;
51275: GO 51171
51277: POP
51278: POP
// repeat wait ( 0 0$1 ) ;
51279: LD_INT 35
51281: PPUSH
51282: CALL_OW 67
// for un in tmp do
51286: LD_ADDR_VAR 0 2
51290: PUSH
51291: LD_VAR 0 3
51295: PUSH
51296: FOR_IN
51297: IFFALSE 51371
// begin if IsDead ( un ) then
51299: LD_VAR 0 2
51303: PPUSH
51304: CALL_OW 301
51308: IFFALSE 51328
// begin tmp := tmp diff un ;
51310: LD_ADDR_VAR 0 3
51314: PUSH
51315: LD_VAR 0 3
51319: PUSH
51320: LD_VAR 0 2
51324: DIFF
51325: ST_TO_ADDR
// continue ;
51326: GO 51296
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
51328: LD_VAR 0 2
51332: PPUSH
51333: LD_INT 3
51335: PUSH
51336: LD_INT 22
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PPUSH
51350: CALL_OW 69
51354: PPUSH
51355: LD_VAR 0 2
51359: PPUSH
51360: CALL_OW 74
51364: PPUSH
51365: CALL_OW 115
// end ;
51369: GO 51296
51371: POP
51372: POP
// until not tmp ;
51373: LD_VAR 0 3
51377: NOT
51378: IFFALSE 51279
// end ;
51380: PPOPN 3
51382: END
// every 0 0$1 trigger StreamModeActive and sTroll do
51383: LD_EXP 35
51387: PUSH
51388: LD_EXP 60
51392: AND
51393: IFFALSE 51447
51395: GO 51397
51397: DISABLE
// begin ToLua ( displayTroll(); ) ;
51398: LD_STRING displayTroll();
51400: PPUSH
51401: CALL_OW 559
// wait ( 3 3$00 ) ;
51405: LD_INT 6300
51407: PPUSH
51408: CALL_OW 67
// ToLua ( hideTroll(); ) ;
51412: LD_STRING hideTroll();
51414: PPUSH
51415: CALL_OW 559
// wait ( 1 1$00 ) ;
51419: LD_INT 2100
51421: PPUSH
51422: CALL_OW 67
// ToLua ( displayTroll(); ) ;
51426: LD_STRING displayTroll();
51428: PPUSH
51429: CALL_OW 559
// wait ( 1 1$00 ) ;
51433: LD_INT 2100
51435: PPUSH
51436: CALL_OW 67
// ToLua ( hideTroll(); ) ;
51440: LD_STRING hideTroll();
51442: PPUSH
51443: CALL_OW 559
// end ;
51447: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
51448: LD_EXP 35
51452: PUSH
51453: LD_EXP 61
51457: AND
51458: IFFALSE 51521
51460: GO 51462
51462: DISABLE
51463: LD_INT 0
51465: PPUSH
// begin p := 0 ;
51466: LD_ADDR_VAR 0 1
51470: PUSH
51471: LD_INT 0
51473: ST_TO_ADDR
// repeat game_speed := 1 ;
51474: LD_ADDR_OWVAR 65
51478: PUSH
51479: LD_INT 1
51481: ST_TO_ADDR
// wait ( 0 0$1 ) ;
51482: LD_INT 35
51484: PPUSH
51485: CALL_OW 67
// p := p + 1 ;
51489: LD_ADDR_VAR 0 1
51493: PUSH
51494: LD_VAR 0 1
51498: PUSH
51499: LD_INT 1
51501: PLUS
51502: ST_TO_ADDR
// until p >= 60 ;
51503: LD_VAR 0 1
51507: PUSH
51508: LD_INT 60
51510: GREATEREQUAL
51511: IFFALSE 51474
// game_speed := 4 ;
51513: LD_ADDR_OWVAR 65
51517: PUSH
51518: LD_INT 4
51520: ST_TO_ADDR
// end ;
51521: PPOPN 1
51523: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
51524: LD_EXP 35
51528: PUSH
51529: LD_EXP 62
51533: AND
51534: IFFALSE 51680
51536: GO 51538
51538: DISABLE
51539: LD_INT 0
51541: PPUSH
51542: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51543: LD_ADDR_VAR 0 1
51547: PUSH
51548: LD_INT 22
51550: PUSH
51551: LD_OWVAR 2
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 30
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 30
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: LIST
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PPUSH
51592: CALL_OW 69
51596: ST_TO_ADDR
// if not depot then
51597: LD_VAR 0 1
51601: NOT
51602: IFFALSE 51606
// exit ;
51604: GO 51680
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
51606: LD_ADDR_VAR 0 2
51610: PUSH
51611: LD_VAR 0 1
51615: PUSH
51616: LD_INT 1
51618: PPUSH
51619: LD_VAR 0 1
51623: PPUSH
51624: CALL_OW 12
51628: ARRAY
51629: PPUSH
51630: CALL_OW 274
51634: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
51635: LD_VAR 0 2
51639: PPUSH
51640: LD_INT 1
51642: PPUSH
51643: LD_INT 0
51645: PPUSH
51646: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
51650: LD_VAR 0 2
51654: PPUSH
51655: LD_INT 2
51657: PPUSH
51658: LD_INT 0
51660: PPUSH
51661: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
51665: LD_VAR 0 2
51669: PPUSH
51670: LD_INT 3
51672: PPUSH
51673: LD_INT 0
51675: PPUSH
51676: CALL_OW 277
// end ;
51680: PPOPN 2
51682: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
51683: LD_EXP 35
51687: PUSH
51688: LD_EXP 63
51692: AND
51693: IFFALSE 51790
51695: GO 51697
51697: DISABLE
51698: LD_INT 0
51700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
51701: LD_ADDR_VAR 0 1
51705: PUSH
51706: LD_INT 22
51708: PUSH
51709: LD_OWVAR 2
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 21
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: LD_INT 23
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: LIST
51749: PPUSH
51750: CALL_OW 69
51754: ST_TO_ADDR
// if not tmp then
51755: LD_VAR 0 1
51759: NOT
51760: IFFALSE 51764
// exit ;
51762: GO 51790
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
51764: LD_VAR 0 1
51768: PUSH
51769: LD_INT 1
51771: PPUSH
51772: LD_VAR 0 1
51776: PPUSH
51777: CALL_OW 12
51781: ARRAY
51782: PPUSH
51783: LD_INT 200
51785: PPUSH
51786: CALL_OW 234
// end ;
51790: PPOPN 1
51792: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
51793: LD_EXP 35
51797: PUSH
51798: LD_EXP 64
51802: AND
51803: IFFALSE 51882
51805: GO 51807
51807: DISABLE
51808: LD_INT 0
51810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
51811: LD_ADDR_VAR 0 1
51815: PUSH
51816: LD_INT 22
51818: PUSH
51819: LD_OWVAR 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 21
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PPUSH
51842: CALL_OW 69
51846: ST_TO_ADDR
// if not tmp then
51847: LD_VAR 0 1
51851: NOT
51852: IFFALSE 51856
// exit ;
51854: GO 51882
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
51856: LD_VAR 0 1
51860: PUSH
51861: LD_INT 1
51863: PPUSH
51864: LD_VAR 0 1
51868: PPUSH
51869: CALL_OW 12
51873: ARRAY
51874: PPUSH
51875: LD_INT 60
51877: PPUSH
51878: CALL_OW 234
// end ;
51882: PPOPN 1
51884: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
51885: LD_EXP 35
51889: PUSH
51890: LD_EXP 65
51894: AND
51895: IFFALSE 51994
51897: GO 51899
51899: DISABLE
51900: LD_INT 0
51902: PPUSH
51903: PPUSH
// begin enable ;
51904: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
51905: LD_ADDR_VAR 0 1
51909: PUSH
51910: LD_INT 22
51912: PUSH
51913: LD_OWVAR 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 61
51924: PUSH
51925: EMPTY
51926: LIST
51927: PUSH
51928: LD_INT 33
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: LIST
51942: PPUSH
51943: CALL_OW 69
51947: ST_TO_ADDR
// if not tmp then
51948: LD_VAR 0 1
51952: NOT
51953: IFFALSE 51957
// exit ;
51955: GO 51994
// for i in tmp do
51957: LD_ADDR_VAR 0 2
51961: PUSH
51962: LD_VAR 0 1
51966: PUSH
51967: FOR_IN
51968: IFFALSE 51992
// if IsControledBy ( i ) then
51970: LD_VAR 0 2
51974: PPUSH
51975: CALL_OW 312
51979: IFFALSE 51990
// ComUnlink ( i ) ;
51981: LD_VAR 0 2
51985: PPUSH
51986: CALL_OW 136
51990: GO 51967
51992: POP
51993: POP
// end ;
51994: PPOPN 2
51996: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
51997: LD_EXP 35
52001: PUSH
52002: LD_EXP 66
52006: AND
52007: IFFALSE 52147
52009: GO 52011
52011: DISABLE
52012: LD_INT 0
52014: PPUSH
52015: PPUSH
// begin ToLua ( displayPowell(); ) ;
52016: LD_STRING displayPowell();
52018: PPUSH
52019: CALL_OW 559
// uc_side := 0 ;
52023: LD_ADDR_OWVAR 20
52027: PUSH
52028: LD_INT 0
52030: ST_TO_ADDR
// uc_nation := 2 ;
52031: LD_ADDR_OWVAR 21
52035: PUSH
52036: LD_INT 2
52038: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
52039: LD_ADDR_OWVAR 37
52043: PUSH
52044: LD_INT 14
52046: ST_TO_ADDR
// vc_engine := engine_siberite ;
52047: LD_ADDR_OWVAR 39
52051: PUSH
52052: LD_INT 3
52054: ST_TO_ADDR
// vc_control := control_apeman ;
52055: LD_ADDR_OWVAR 38
52059: PUSH
52060: LD_INT 5
52062: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
52063: LD_ADDR_OWVAR 40
52067: PUSH
52068: LD_INT 29
52070: ST_TO_ADDR
// un := CreateVehicle ;
52071: LD_ADDR_VAR 0 2
52075: PUSH
52076: CALL_OW 45
52080: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52081: LD_VAR 0 2
52085: PPUSH
52086: LD_INT 1
52088: PPUSH
52089: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
52093: LD_INT 35
52095: PPUSH
52096: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
52100: LD_VAR 0 2
52104: PPUSH
52105: LD_INT 22
52107: PUSH
52108: LD_OWVAR 2
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PPUSH
52117: CALL_OW 69
52121: PPUSH
52122: LD_VAR 0 2
52126: PPUSH
52127: CALL_OW 74
52131: PPUSH
52132: CALL_OW 115
// until IsDead ( un ) ;
52136: LD_VAR 0 2
52140: PPUSH
52141: CALL_OW 301
52145: IFFALSE 52093
// end ;
52147: PPOPN 2
52149: END
// every 0 0$1 trigger StreamModeActive and sStu do
52150: LD_EXP 35
52154: PUSH
52155: LD_EXP 74
52159: AND
52160: IFFALSE 52176
52162: GO 52164
52164: DISABLE
// begin ToLua ( displayStucuk(); ) ;
52165: LD_STRING displayStucuk();
52167: PPUSH
52168: CALL_OW 559
// ResetFog ;
52172: CALL_OW 335
// end ;
52176: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
52177: LD_EXP 35
52181: PUSH
52182: LD_EXP 67
52186: AND
52187: IFFALSE 52328
52189: GO 52191
52191: DISABLE
52192: LD_INT 0
52194: PPUSH
52195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52196: LD_ADDR_VAR 0 2
52200: PUSH
52201: LD_INT 22
52203: PUSH
52204: LD_OWVAR 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 21
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PPUSH
52227: CALL_OW 69
52231: ST_TO_ADDR
// if not tmp then
52232: LD_VAR 0 2
52236: NOT
52237: IFFALSE 52241
// exit ;
52239: GO 52328
// un := tmp [ rand ( 1 , tmp ) ] ;
52241: LD_ADDR_VAR 0 1
52245: PUSH
52246: LD_VAR 0 2
52250: PUSH
52251: LD_INT 1
52253: PPUSH
52254: LD_VAR 0 2
52258: PPUSH
52259: CALL_OW 12
52263: ARRAY
52264: ST_TO_ADDR
// SetSide ( un , 0 ) ;
52265: LD_VAR 0 1
52269: PPUSH
52270: LD_INT 0
52272: PPUSH
52273: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
52277: LD_VAR 0 1
52281: PPUSH
52282: LD_OWVAR 3
52286: PUSH
52287: LD_VAR 0 1
52291: DIFF
52292: PPUSH
52293: LD_VAR 0 1
52297: PPUSH
52298: CALL_OW 74
52302: PPUSH
52303: CALL_OW 115
// wait ( 0 0$20 ) ;
52307: LD_INT 700
52309: PPUSH
52310: CALL_OW 67
// SetSide ( un , your_side ) ;
52314: LD_VAR 0 1
52318: PPUSH
52319: LD_OWVAR 2
52323: PPUSH
52324: CALL_OW 235
// end ;
52328: PPOPN 2
52330: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
52331: LD_EXP 35
52335: PUSH
52336: LD_EXP 68
52340: AND
52341: IFFALSE 52447
52343: GO 52345
52345: DISABLE
52346: LD_INT 0
52348: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52349: LD_ADDR_VAR 0 1
52353: PUSH
52354: LD_INT 22
52356: PUSH
52357: LD_OWVAR 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 30
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 30
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PPUSH
52398: CALL_OW 69
52402: ST_TO_ADDR
// if not depot then
52403: LD_VAR 0 1
52407: NOT
52408: IFFALSE 52412
// exit ;
52410: GO 52447
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
52412: LD_VAR 0 1
52416: PUSH
52417: LD_INT 1
52419: ARRAY
52420: PPUSH
52421: CALL_OW 250
52425: PPUSH
52426: LD_VAR 0 1
52430: PUSH
52431: LD_INT 1
52433: ARRAY
52434: PPUSH
52435: CALL_OW 251
52439: PPUSH
52440: LD_INT 70
52442: PPUSH
52443: CALL_OW 495
// end ;
52447: PPOPN 1
52449: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
52450: LD_EXP 35
52454: PUSH
52455: LD_EXP 69
52459: AND
52460: IFFALSE 52671
52462: GO 52464
52464: DISABLE
52465: LD_INT 0
52467: PPUSH
52468: PPUSH
52469: PPUSH
52470: PPUSH
52471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52472: LD_ADDR_VAR 0 5
52476: PUSH
52477: LD_INT 22
52479: PUSH
52480: LD_OWVAR 2
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 21
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PPUSH
52503: CALL_OW 69
52507: ST_TO_ADDR
// if not tmp then
52508: LD_VAR 0 5
52512: NOT
52513: IFFALSE 52517
// exit ;
52515: GO 52671
// for i in tmp do
52517: LD_ADDR_VAR 0 1
52521: PUSH
52522: LD_VAR 0 5
52526: PUSH
52527: FOR_IN
52528: IFFALSE 52669
// begin d := rand ( 0 , 5 ) ;
52530: LD_ADDR_VAR 0 4
52534: PUSH
52535: LD_INT 0
52537: PPUSH
52538: LD_INT 5
52540: PPUSH
52541: CALL_OW 12
52545: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
52546: LD_ADDR_VAR 0 2
52550: PUSH
52551: LD_VAR 0 1
52555: PPUSH
52556: CALL_OW 250
52560: PPUSH
52561: LD_VAR 0 4
52565: PPUSH
52566: LD_INT 3
52568: PPUSH
52569: LD_INT 12
52571: PPUSH
52572: CALL_OW 12
52576: PPUSH
52577: CALL_OW 272
52581: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
52582: LD_ADDR_VAR 0 3
52586: PUSH
52587: LD_VAR 0 1
52591: PPUSH
52592: CALL_OW 251
52596: PPUSH
52597: LD_VAR 0 4
52601: PPUSH
52602: LD_INT 3
52604: PPUSH
52605: LD_INT 12
52607: PPUSH
52608: CALL_OW 12
52612: PPUSH
52613: CALL_OW 273
52617: ST_TO_ADDR
// if ValidHex ( x , y ) then
52618: LD_VAR 0 2
52622: PPUSH
52623: LD_VAR 0 3
52627: PPUSH
52628: CALL_OW 488
52632: IFFALSE 52667
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
52634: LD_VAR 0 1
52638: PPUSH
52639: LD_VAR 0 2
52643: PPUSH
52644: LD_VAR 0 3
52648: PPUSH
52649: LD_INT 3
52651: PPUSH
52652: LD_INT 6
52654: PPUSH
52655: CALL_OW 12
52659: PPUSH
52660: LD_INT 1
52662: PPUSH
52663: CALL_OW 483
// end ;
52667: GO 52527
52669: POP
52670: POP
// end ;
52671: PPOPN 5
52673: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
52674: LD_EXP 35
52678: PUSH
52679: LD_EXP 70
52683: AND
52684: IFFALSE 52778
52686: GO 52688
52688: DISABLE
52689: LD_INT 0
52691: PPUSH
52692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
52693: LD_ADDR_VAR 0 2
52697: PUSH
52698: LD_INT 22
52700: PUSH
52701: LD_OWVAR 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 32
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 21
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: LIST
52734: PPUSH
52735: CALL_OW 69
52739: ST_TO_ADDR
// if not tmp then
52740: LD_VAR 0 2
52744: NOT
52745: IFFALSE 52749
// exit ;
52747: GO 52778
// for i in tmp do
52749: LD_ADDR_VAR 0 1
52753: PUSH
52754: LD_VAR 0 2
52758: PUSH
52759: FOR_IN
52760: IFFALSE 52776
// SetFuel ( i , 0 ) ;
52762: LD_VAR 0 1
52766: PPUSH
52767: LD_INT 0
52769: PPUSH
52770: CALL_OW 240
52774: GO 52759
52776: POP
52777: POP
// end ;
52778: PPOPN 2
52780: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
52781: LD_EXP 35
52785: PUSH
52786: LD_EXP 71
52790: AND
52791: IFFALSE 52857
52793: GO 52795
52795: DISABLE
52796: LD_INT 0
52798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
52799: LD_ADDR_VAR 0 1
52803: PUSH
52804: LD_INT 22
52806: PUSH
52807: LD_OWVAR 2
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 30
52818: PUSH
52819: LD_INT 29
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PPUSH
52830: CALL_OW 69
52834: ST_TO_ADDR
// if not tmp then
52835: LD_VAR 0 1
52839: NOT
52840: IFFALSE 52844
// exit ;
52842: GO 52857
// DestroyUnit ( tmp [ 1 ] ) ;
52844: LD_VAR 0 1
52848: PUSH
52849: LD_INT 1
52851: ARRAY
52852: PPUSH
52853: CALL_OW 65
// end ;
52857: PPOPN 1
52859: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
52860: LD_EXP 35
52864: PUSH
52865: LD_EXP 73
52869: AND
52870: IFFALSE 52999
52872: GO 52874
52874: DISABLE
52875: LD_INT 0
52877: PPUSH
// begin uc_side := 0 ;
52878: LD_ADDR_OWVAR 20
52882: PUSH
52883: LD_INT 0
52885: ST_TO_ADDR
// uc_nation := nation_arabian ;
52886: LD_ADDR_OWVAR 21
52890: PUSH
52891: LD_INT 2
52893: ST_TO_ADDR
// hc_gallery :=  ;
52894: LD_ADDR_OWVAR 33
52898: PUSH
52899: LD_STRING 
52901: ST_TO_ADDR
// hc_name :=  ;
52902: LD_ADDR_OWVAR 26
52906: PUSH
52907: LD_STRING 
52909: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
52910: LD_INT 1
52912: PPUSH
52913: LD_INT 11
52915: PPUSH
52916: LD_INT 10
52918: PPUSH
52919: CALL_OW 380
// un := CreateHuman ;
52923: LD_ADDR_VAR 0 1
52927: PUSH
52928: CALL_OW 44
52932: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52933: LD_VAR 0 1
52937: PPUSH
52938: LD_INT 1
52940: PPUSH
52941: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
52945: LD_INT 35
52947: PPUSH
52948: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
52952: LD_VAR 0 1
52956: PPUSH
52957: LD_INT 22
52959: PUSH
52960: LD_OWVAR 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PPUSH
52969: CALL_OW 69
52973: PPUSH
52974: LD_VAR 0 1
52978: PPUSH
52979: CALL_OW 74
52983: PPUSH
52984: CALL_OW 115
// until IsDead ( un ) ;
52988: LD_VAR 0 1
52992: PPUSH
52993: CALL_OW 301
52997: IFFALSE 52945
// end ;
52999: PPOPN 1
53001: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
53002: LD_EXP 35
53006: PUSH
53007: LD_EXP 75
53011: AND
53012: IFFALSE 53024
53014: GO 53016
53016: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
53017: LD_STRING earthquake(getX(game), 0, 32)
53019: PPUSH
53020: CALL_OW 559
53024: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
53025: LD_EXP 35
53029: PUSH
53030: LD_EXP 76
53034: AND
53035: IFFALSE 53126
53037: GO 53039
53039: DISABLE
53040: LD_INT 0
53042: PPUSH
// begin enable ;
53043: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
53044: LD_ADDR_VAR 0 1
53048: PUSH
53049: LD_INT 22
53051: PUSH
53052: LD_OWVAR 2
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 21
53063: PUSH
53064: LD_INT 2
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 33
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: PPUSH
53086: CALL_OW 69
53090: ST_TO_ADDR
// if not tmp then
53091: LD_VAR 0 1
53095: NOT
53096: IFFALSE 53100
// exit ;
53098: GO 53126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
53100: LD_VAR 0 1
53104: PUSH
53105: LD_INT 1
53107: PPUSH
53108: LD_VAR 0 1
53112: PPUSH
53113: CALL_OW 12
53117: ARRAY
53118: PPUSH
53119: LD_INT 1
53121: PPUSH
53122: CALL_OW 234
// end ;
53126: PPOPN 1
53128: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
53129: LD_EXP 35
53133: PUSH
53134: LD_EXP 77
53138: AND
53139: IFFALSE 53280
53141: GO 53143
53143: DISABLE
53144: LD_INT 0
53146: PPUSH
53147: PPUSH
53148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53149: LD_ADDR_VAR 0 3
53153: PUSH
53154: LD_INT 22
53156: PUSH
53157: LD_OWVAR 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 25
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PPUSH
53180: CALL_OW 69
53184: ST_TO_ADDR
// if not tmp then
53185: LD_VAR 0 3
53189: NOT
53190: IFFALSE 53194
// exit ;
53192: GO 53280
// un := tmp [ rand ( 1 , tmp ) ] ;
53194: LD_ADDR_VAR 0 2
53198: PUSH
53199: LD_VAR 0 3
53203: PUSH
53204: LD_INT 1
53206: PPUSH
53207: LD_VAR 0 3
53211: PPUSH
53212: CALL_OW 12
53216: ARRAY
53217: ST_TO_ADDR
// if Crawls ( un ) then
53218: LD_VAR 0 2
53222: PPUSH
53223: CALL_OW 318
53227: IFFALSE 53238
// ComWalk ( un ) ;
53229: LD_VAR 0 2
53233: PPUSH
53234: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
53238: LD_VAR 0 2
53242: PPUSH
53243: LD_INT 9
53245: PPUSH
53246: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
53250: LD_INT 28
53252: PPUSH
53253: LD_OWVAR 2
53257: PPUSH
53258: LD_INT 2
53260: PPUSH
53261: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
53265: LD_INT 29
53267: PPUSH
53268: LD_OWVAR 2
53272: PPUSH
53273: LD_INT 2
53275: PPUSH
53276: CALL_OW 322
// end ;
53280: PPOPN 3
53282: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
53283: LD_EXP 35
53287: PUSH
53288: LD_EXP 78
53292: AND
53293: IFFALSE 53404
53295: GO 53297
53297: DISABLE
53298: LD_INT 0
53300: PPUSH
53301: PPUSH
53302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53303: LD_ADDR_VAR 0 3
53307: PUSH
53308: LD_INT 22
53310: PUSH
53311: LD_OWVAR 2
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 25
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PPUSH
53334: CALL_OW 69
53338: ST_TO_ADDR
// if not tmp then
53339: LD_VAR 0 3
53343: NOT
53344: IFFALSE 53348
// exit ;
53346: GO 53404
// un := tmp [ rand ( 1 , tmp ) ] ;
53348: LD_ADDR_VAR 0 2
53352: PUSH
53353: LD_VAR 0 3
53357: PUSH
53358: LD_INT 1
53360: PPUSH
53361: LD_VAR 0 3
53365: PPUSH
53366: CALL_OW 12
53370: ARRAY
53371: ST_TO_ADDR
// if Crawls ( un ) then
53372: LD_VAR 0 2
53376: PPUSH
53377: CALL_OW 318
53381: IFFALSE 53392
// ComWalk ( un ) ;
53383: LD_VAR 0 2
53387: PPUSH
53388: CALL_OW 138
// SetClass ( un , class_mortar ) ;
53392: LD_VAR 0 2
53396: PPUSH
53397: LD_INT 8
53399: PPUSH
53400: CALL_OW 336
// end ;
53404: PPOPN 3
53406: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
53407: LD_EXP 35
53411: PUSH
53412: LD_EXP 79
53416: AND
53417: IFFALSE 53561
53419: GO 53421
53421: DISABLE
53422: LD_INT 0
53424: PPUSH
53425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
53426: LD_ADDR_VAR 0 2
53430: PUSH
53431: LD_INT 22
53433: PUSH
53434: LD_OWVAR 2
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 21
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 34
53458: PUSH
53459: LD_INT 12
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 34
53468: PUSH
53469: LD_INT 51
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 34
53478: PUSH
53479: LD_INT 32
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: LIST
53496: PPUSH
53497: CALL_OW 69
53501: ST_TO_ADDR
// if not tmp then
53502: LD_VAR 0 2
53506: NOT
53507: IFFALSE 53511
// exit ;
53509: GO 53561
// for i in tmp do
53511: LD_ADDR_VAR 0 1
53515: PUSH
53516: LD_VAR 0 2
53520: PUSH
53521: FOR_IN
53522: IFFALSE 53559
// if GetCargo ( i , mat_artifact ) = 0 then
53524: LD_VAR 0 1
53528: PPUSH
53529: LD_INT 4
53531: PPUSH
53532: CALL_OW 289
53536: PUSH
53537: LD_INT 0
53539: EQUAL
53540: IFFALSE 53557
// SetCargo ( i , mat_siberit , 100 ) ;
53542: LD_VAR 0 1
53546: PPUSH
53547: LD_INT 3
53549: PPUSH
53550: LD_INT 100
53552: PPUSH
53553: CALL_OW 290
53557: GO 53521
53559: POP
53560: POP
// end ;
53561: PPOPN 2
53563: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
53564: LD_EXP 35
53568: PUSH
53569: LD_EXP 80
53573: AND
53574: IFFALSE 53757
53576: GO 53578
53578: DISABLE
53579: LD_INT 0
53581: PPUSH
53582: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
53583: LD_ADDR_VAR 0 2
53587: PUSH
53588: LD_INT 22
53590: PUSH
53591: LD_OWVAR 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PPUSH
53600: CALL_OW 69
53604: ST_TO_ADDR
// if not tmp then
53605: LD_VAR 0 2
53609: NOT
53610: IFFALSE 53614
// exit ;
53612: GO 53757
// for i := 1 to 2 do
53614: LD_ADDR_VAR 0 1
53618: PUSH
53619: DOUBLE
53620: LD_INT 1
53622: DEC
53623: ST_TO_ADDR
53624: LD_INT 2
53626: PUSH
53627: FOR_TO
53628: IFFALSE 53755
// begin uc_side := your_side ;
53630: LD_ADDR_OWVAR 20
53634: PUSH
53635: LD_OWVAR 2
53639: ST_TO_ADDR
// uc_nation := nation_american ;
53640: LD_ADDR_OWVAR 21
53644: PUSH
53645: LD_INT 1
53647: ST_TO_ADDR
// vc_chassis := us_morphling ;
53648: LD_ADDR_OWVAR 37
53652: PUSH
53653: LD_INT 5
53655: ST_TO_ADDR
// vc_engine := engine_siberite ;
53656: LD_ADDR_OWVAR 39
53660: PUSH
53661: LD_INT 3
53663: ST_TO_ADDR
// vc_control := control_computer ;
53664: LD_ADDR_OWVAR 38
53668: PUSH
53669: LD_INT 3
53671: ST_TO_ADDR
// vc_weapon := us_double_laser ;
53672: LD_ADDR_OWVAR 40
53676: PUSH
53677: LD_INT 10
53679: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
53680: LD_VAR 0 2
53684: PUSH
53685: LD_INT 1
53687: ARRAY
53688: PPUSH
53689: CALL_OW 310
53693: NOT
53694: IFFALSE 53741
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
53696: CALL_OW 45
53700: PPUSH
53701: LD_VAR 0 2
53705: PUSH
53706: LD_INT 1
53708: ARRAY
53709: PPUSH
53710: CALL_OW 250
53714: PPUSH
53715: LD_VAR 0 2
53719: PUSH
53720: LD_INT 1
53722: ARRAY
53723: PPUSH
53724: CALL_OW 251
53728: PPUSH
53729: LD_INT 12
53731: PPUSH
53732: LD_INT 1
53734: PPUSH
53735: CALL_OW 50
53739: GO 53753
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
53741: CALL_OW 45
53745: PPUSH
53746: LD_INT 1
53748: PPUSH
53749: CALL_OW 51
// end ;
53753: GO 53627
53755: POP
53756: POP
// end ;
53757: PPOPN 2
53759: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
53760: LD_EXP 35
53764: PUSH
53765: LD_EXP 81
53769: AND
53770: IFFALSE 53992
53772: GO 53774
53774: DISABLE
53775: LD_INT 0
53777: PPUSH
53778: PPUSH
53779: PPUSH
53780: PPUSH
53781: PPUSH
53782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53783: LD_ADDR_VAR 0 6
53787: PUSH
53788: LD_INT 22
53790: PUSH
53791: LD_OWVAR 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 21
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: LD_INT 23
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: PPUSH
53832: CALL_OW 69
53836: ST_TO_ADDR
// if not tmp then
53837: LD_VAR 0 6
53841: NOT
53842: IFFALSE 53846
// exit ;
53844: GO 53992
// s1 := rand ( 1 , 4 ) ;
53846: LD_ADDR_VAR 0 2
53850: PUSH
53851: LD_INT 1
53853: PPUSH
53854: LD_INT 4
53856: PPUSH
53857: CALL_OW 12
53861: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
53862: LD_ADDR_VAR 0 4
53866: PUSH
53867: LD_VAR 0 6
53871: PUSH
53872: LD_INT 1
53874: ARRAY
53875: PPUSH
53876: LD_VAR 0 2
53880: PPUSH
53881: CALL_OW 259
53885: ST_TO_ADDR
// if s1 = 1 then
53886: LD_VAR 0 2
53890: PUSH
53891: LD_INT 1
53893: EQUAL
53894: IFFALSE 53914
// s2 := rand ( 2 , 4 ) else
53896: LD_ADDR_VAR 0 3
53900: PUSH
53901: LD_INT 2
53903: PPUSH
53904: LD_INT 4
53906: PPUSH
53907: CALL_OW 12
53911: ST_TO_ADDR
53912: GO 53922
// s2 := 1 ;
53914: LD_ADDR_VAR 0 3
53918: PUSH
53919: LD_INT 1
53921: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
53922: LD_ADDR_VAR 0 5
53926: PUSH
53927: LD_VAR 0 6
53931: PUSH
53932: LD_INT 1
53934: ARRAY
53935: PPUSH
53936: LD_VAR 0 3
53940: PPUSH
53941: CALL_OW 259
53945: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
53946: LD_VAR 0 6
53950: PUSH
53951: LD_INT 1
53953: ARRAY
53954: PPUSH
53955: LD_VAR 0 2
53959: PPUSH
53960: LD_VAR 0 5
53964: PPUSH
53965: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
53969: LD_VAR 0 6
53973: PUSH
53974: LD_INT 1
53976: ARRAY
53977: PPUSH
53978: LD_VAR 0 3
53982: PPUSH
53983: LD_VAR 0 4
53987: PPUSH
53988: CALL_OW 237
// end ;
53992: PPOPN 6
53994: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
53995: LD_EXP 35
53999: PUSH
54000: LD_EXP 82
54004: AND
54005: IFFALSE 54084
54007: GO 54009
54009: DISABLE
54010: LD_INT 0
54012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
54013: LD_ADDR_VAR 0 1
54017: PUSH
54018: LD_INT 22
54020: PUSH
54021: LD_OWVAR 2
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 30
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PPUSH
54044: CALL_OW 69
54048: ST_TO_ADDR
// if not tmp then
54049: LD_VAR 0 1
54053: NOT
54054: IFFALSE 54058
// exit ;
54056: GO 54084
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54058: LD_VAR 0 1
54062: PUSH
54063: LD_INT 1
54065: PPUSH
54066: LD_VAR 0 1
54070: PPUSH
54071: CALL_OW 12
54075: ARRAY
54076: PPUSH
54077: LD_INT 1
54079: PPUSH
54080: CALL_OW 234
// end ;
54084: PPOPN 1
54086: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
54087: LD_EXP 35
54091: PUSH
54092: LD_EXP 83
54096: AND
54097: IFFALSE 54209
54099: GO 54101
54101: DISABLE
54102: LD_INT 0
54104: PPUSH
54105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
54106: LD_ADDR_VAR 0 2
54110: PUSH
54111: LD_INT 22
54113: PUSH
54114: LD_OWVAR 2
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: LD_INT 30
54128: PUSH
54129: LD_INT 27
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 30
54138: PUSH
54139: LD_INT 26
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 30
54148: PUSH
54149: LD_INT 28
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PPUSH
54166: CALL_OW 69
54170: ST_TO_ADDR
// if not tmp then
54171: LD_VAR 0 2
54175: NOT
54176: IFFALSE 54180
// exit ;
54178: GO 54209
// for i in tmp do
54180: LD_ADDR_VAR 0 1
54184: PUSH
54185: LD_VAR 0 2
54189: PUSH
54190: FOR_IN
54191: IFFALSE 54207
// SetLives ( i , 1 ) ;
54193: LD_VAR 0 1
54197: PPUSH
54198: LD_INT 1
54200: PPUSH
54201: CALL_OW 234
54205: GO 54190
54207: POP
54208: POP
// end ;
54209: PPOPN 2
54211: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
54212: LD_EXP 35
54216: PUSH
54217: LD_EXP 84
54221: AND
54222: IFFALSE 54496
54224: GO 54226
54226: DISABLE
54227: LD_INT 0
54229: PPUSH
54230: PPUSH
54231: PPUSH
// begin i := rand ( 1 , 7 ) ;
54232: LD_ADDR_VAR 0 1
54236: PUSH
54237: LD_INT 1
54239: PPUSH
54240: LD_INT 7
54242: PPUSH
54243: CALL_OW 12
54247: ST_TO_ADDR
// case i of 1 :
54248: LD_VAR 0 1
54252: PUSH
54253: LD_INT 1
54255: DOUBLE
54256: EQUAL
54257: IFTRUE 54261
54259: GO 54271
54261: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
54262: LD_STRING earthquake(getX(game), 0, 32)
54264: PPUSH
54265: CALL_OW 559
54269: GO 54496
54271: LD_INT 2
54273: DOUBLE
54274: EQUAL
54275: IFTRUE 54279
54277: GO 54293
54279: POP
// begin ToLua ( displayStucuk(); ) ;
54280: LD_STRING displayStucuk();
54282: PPUSH
54283: CALL_OW 559
// ResetFog ;
54287: CALL_OW 335
// end ; 3 :
54291: GO 54496
54293: LD_INT 3
54295: DOUBLE
54296: EQUAL
54297: IFTRUE 54301
54299: GO 54405
54301: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54302: LD_ADDR_VAR 0 2
54306: PUSH
54307: LD_INT 22
54309: PUSH
54310: LD_OWVAR 2
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 25
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PPUSH
54333: CALL_OW 69
54337: ST_TO_ADDR
// if not tmp then
54338: LD_VAR 0 2
54342: NOT
54343: IFFALSE 54347
// exit ;
54345: GO 54496
// un := tmp [ rand ( 1 , tmp ) ] ;
54347: LD_ADDR_VAR 0 3
54351: PUSH
54352: LD_VAR 0 2
54356: PUSH
54357: LD_INT 1
54359: PPUSH
54360: LD_VAR 0 2
54364: PPUSH
54365: CALL_OW 12
54369: ARRAY
54370: ST_TO_ADDR
// if Crawls ( un ) then
54371: LD_VAR 0 3
54375: PPUSH
54376: CALL_OW 318
54380: IFFALSE 54391
// ComWalk ( un ) ;
54382: LD_VAR 0 3
54386: PPUSH
54387: CALL_OW 138
// SetClass ( un , class_mortar ) ;
54391: LD_VAR 0 3
54395: PPUSH
54396: LD_INT 8
54398: PPUSH
54399: CALL_OW 336
// end ; 4 :
54403: GO 54496
54405: LD_INT 4
54407: DOUBLE
54408: EQUAL
54409: IFTRUE 54413
54411: GO 54474
54413: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54414: LD_ADDR_VAR 0 2
54418: PUSH
54419: LD_INT 22
54421: PUSH
54422: LD_OWVAR 2
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 30
54433: PUSH
54434: LD_INT 29
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PPUSH
54445: CALL_OW 69
54449: ST_TO_ADDR
// if not tmp then
54450: LD_VAR 0 2
54454: NOT
54455: IFFALSE 54459
// exit ;
54457: GO 54496
// DestroyUnit ( tmp [ 1 ] ) ;
54459: LD_VAR 0 2
54463: PUSH
54464: LD_INT 1
54466: ARRAY
54467: PPUSH
54468: CALL_OW 65
// end ; 5 .. 7 :
54472: GO 54496
54474: LD_INT 5
54476: DOUBLE
54477: GREATEREQUAL
54478: IFFALSE 54486
54480: LD_INT 7
54482: DOUBLE
54483: LESSEQUAL
54484: IFTRUE 54488
54486: GO 54495
54488: POP
// StreamSibBomb ; end ;
54489: CALL 50746 0 0
54493: GO 54496
54495: POP
// end ;
54496: PPOPN 3
54498: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
54499: LD_EXP 35
54503: PUSH
54504: LD_EXP 85
54508: AND
54509: IFFALSE 54665
54511: GO 54513
54513: DISABLE
54514: LD_INT 0
54516: PPUSH
54517: PPUSH
54518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
54519: LD_ADDR_VAR 0 2
54523: PUSH
54524: LD_INT 81
54526: PUSH
54527: LD_OWVAR 2
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 21
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 21
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PPUSH
54568: CALL_OW 69
54572: ST_TO_ADDR
// if not tmp then
54573: LD_VAR 0 2
54577: NOT
54578: IFFALSE 54582
// exit ;
54580: GO 54665
// p := 0 ;
54582: LD_ADDR_VAR 0 3
54586: PUSH
54587: LD_INT 0
54589: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
54590: LD_INT 35
54592: PPUSH
54593: CALL_OW 67
// p := p + 1 ;
54597: LD_ADDR_VAR 0 3
54601: PUSH
54602: LD_VAR 0 3
54606: PUSH
54607: LD_INT 1
54609: PLUS
54610: ST_TO_ADDR
// for i in tmp do
54611: LD_ADDR_VAR 0 1
54615: PUSH
54616: LD_VAR 0 2
54620: PUSH
54621: FOR_IN
54622: IFFALSE 54653
// if GetLives ( i ) < 1000 then
54624: LD_VAR 0 1
54628: PPUSH
54629: CALL_OW 256
54633: PUSH
54634: LD_INT 1000
54636: LESS
54637: IFFALSE 54651
// SetLives ( i , 1000 ) ;
54639: LD_VAR 0 1
54643: PPUSH
54644: LD_INT 1000
54646: PPUSH
54647: CALL_OW 234
54651: GO 54621
54653: POP
54654: POP
// until p > 20 ;
54655: LD_VAR 0 3
54659: PUSH
54660: LD_INT 20
54662: GREATER
54663: IFFALSE 54590
// end ;
54665: PPOPN 3
54667: END
// every 0 0$1 trigger StreamModeActive and sTime do
54668: LD_EXP 35
54672: PUSH
54673: LD_EXP 86
54677: AND
54678: IFFALSE 54713
54680: GO 54682
54682: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
54683: LD_INT 28
54685: PPUSH
54686: LD_OWVAR 2
54690: PPUSH
54691: LD_INT 2
54693: PPUSH
54694: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
54698: LD_INT 30
54700: PPUSH
54701: LD_OWVAR 2
54705: PPUSH
54706: LD_INT 2
54708: PPUSH
54709: CALL_OW 322
// end ;
54713: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
54714: LD_EXP 35
54718: PUSH
54719: LD_EXP 87
54723: AND
54724: IFFALSE 54845
54726: GO 54728
54728: DISABLE
54729: LD_INT 0
54731: PPUSH
54732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54733: LD_ADDR_VAR 0 2
54737: PUSH
54738: LD_INT 22
54740: PUSH
54741: LD_OWVAR 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 21
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: LD_INT 23
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: PPUSH
54782: CALL_OW 69
54786: ST_TO_ADDR
// if not tmp then
54787: LD_VAR 0 2
54791: NOT
54792: IFFALSE 54796
// exit ;
54794: GO 54845
// for i in tmp do
54796: LD_ADDR_VAR 0 1
54800: PUSH
54801: LD_VAR 0 2
54805: PUSH
54806: FOR_IN
54807: IFFALSE 54843
// begin if Crawls ( i ) then
54809: LD_VAR 0 1
54813: PPUSH
54814: CALL_OW 318
54818: IFFALSE 54829
// ComWalk ( i ) ;
54820: LD_VAR 0 1
54824: PPUSH
54825: CALL_OW 138
// SetClass ( i , 2 ) ;
54829: LD_VAR 0 1
54833: PPUSH
54834: LD_INT 2
54836: PPUSH
54837: CALL_OW 336
// end ;
54841: GO 54806
54843: POP
54844: POP
// end ;
54845: PPOPN 2
54847: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
54848: LD_EXP 35
54852: PUSH
54853: LD_EXP 88
54857: AND
54858: IFFALSE 55139
54860: GO 54862
54862: DISABLE
54863: LD_INT 0
54865: PPUSH
54866: PPUSH
54867: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
54868: LD_OWVAR 2
54872: PPUSH
54873: LD_INT 9
54875: PPUSH
54876: LD_INT 1
54878: PPUSH
54879: LD_INT 1
54881: PPUSH
54882: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
54886: LD_INT 9
54888: PPUSH
54889: LD_OWVAR 2
54893: PPUSH
54894: CALL_OW 343
// uc_side := 9 ;
54898: LD_ADDR_OWVAR 20
54902: PUSH
54903: LD_INT 9
54905: ST_TO_ADDR
// uc_nation := 2 ;
54906: LD_ADDR_OWVAR 21
54910: PUSH
54911: LD_INT 2
54913: ST_TO_ADDR
// hc_name := Dark Warrior ;
54914: LD_ADDR_OWVAR 26
54918: PUSH
54919: LD_STRING Dark Warrior
54921: ST_TO_ADDR
// hc_gallery :=  ;
54922: LD_ADDR_OWVAR 33
54926: PUSH
54927: LD_STRING 
54929: ST_TO_ADDR
// hc_noskilllimit := true ;
54930: LD_ADDR_OWVAR 76
54934: PUSH
54935: LD_INT 1
54937: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
54938: LD_ADDR_OWVAR 31
54942: PUSH
54943: LD_INT 30
54945: PUSH
54946: LD_INT 30
54948: PUSH
54949: LD_INT 30
54951: PUSH
54952: LD_INT 30
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: ST_TO_ADDR
// un := CreateHuman ;
54961: LD_ADDR_VAR 0 3
54965: PUSH
54966: CALL_OW 44
54970: ST_TO_ADDR
// hc_noskilllimit := false ;
54971: LD_ADDR_OWVAR 76
54975: PUSH
54976: LD_INT 0
54978: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54979: LD_VAR 0 3
54983: PPUSH
54984: LD_INT 1
54986: PPUSH
54987: CALL_OW 51
// p := 0 ;
54991: LD_ADDR_VAR 0 2
54995: PUSH
54996: LD_INT 0
54998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
54999: LD_INT 35
55001: PPUSH
55002: CALL_OW 67
// p := p + 1 ;
55006: LD_ADDR_VAR 0 2
55010: PUSH
55011: LD_VAR 0 2
55015: PUSH
55016: LD_INT 1
55018: PLUS
55019: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
55020: LD_VAR 0 3
55024: PPUSH
55025: CALL_OW 256
55029: PUSH
55030: LD_INT 1000
55032: LESS
55033: IFFALSE 55047
// SetLives ( un , 1000 ) ;
55035: LD_VAR 0 3
55039: PPUSH
55040: LD_INT 1000
55042: PPUSH
55043: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
55047: LD_VAR 0 3
55051: PPUSH
55052: LD_INT 81
55054: PUSH
55055: LD_OWVAR 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 91
55066: PUSH
55067: LD_VAR 0 3
55071: PUSH
55072: LD_INT 30
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: LIST
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PPUSH
55084: CALL_OW 69
55088: PPUSH
55089: LD_VAR 0 3
55093: PPUSH
55094: CALL_OW 74
55098: PPUSH
55099: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
55103: LD_VAR 0 2
55107: PUSH
55108: LD_INT 60
55110: GREATER
55111: PUSH
55112: LD_VAR 0 3
55116: PPUSH
55117: CALL_OW 301
55121: OR
55122: IFFALSE 54999
// if un then
55124: LD_VAR 0 3
55128: IFFALSE 55139
// RemoveUnit ( un ) ;
55130: LD_VAR 0 3
55134: PPUSH
55135: CALL_OW 64
// end ;
55139: PPOPN 3
55141: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
55142: LD_INT 0
55144: PPUSH
// case cmd of 301 :
55145: LD_VAR 0 1
55149: PUSH
55150: LD_INT 301
55152: DOUBLE
55153: EQUAL
55154: IFTRUE 55158
55156: GO 55190
55158: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
55159: LD_VAR 0 6
55163: PPUSH
55164: LD_VAR 0 7
55168: PPUSH
55169: LD_VAR 0 8
55173: PPUSH
55174: LD_VAR 0 4
55178: PPUSH
55179: LD_VAR 0 5
55183: PPUSH
55184: CALL 56391 0 5
55188: GO 55311
55190: LD_INT 302
55192: DOUBLE
55193: EQUAL
55194: IFTRUE 55198
55196: GO 55235
55198: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
55199: LD_VAR 0 6
55203: PPUSH
55204: LD_VAR 0 7
55208: PPUSH
55209: LD_VAR 0 8
55213: PPUSH
55214: LD_VAR 0 9
55218: PPUSH
55219: LD_VAR 0 4
55223: PPUSH
55224: LD_VAR 0 5
55228: PPUSH
55229: CALL 56482 0 6
55233: GO 55311
55235: LD_INT 303
55237: DOUBLE
55238: EQUAL
55239: IFTRUE 55243
55241: GO 55280
55243: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
55244: LD_VAR 0 6
55248: PPUSH
55249: LD_VAR 0 7
55253: PPUSH
55254: LD_VAR 0 8
55258: PPUSH
55259: LD_VAR 0 9
55263: PPUSH
55264: LD_VAR 0 4
55268: PPUSH
55269: LD_VAR 0 5
55273: PPUSH
55274: CALL 55316 0 6
55278: GO 55311
55280: LD_INT 304
55282: DOUBLE
55283: EQUAL
55284: IFTRUE 55288
55286: GO 55310
55288: POP
// hHackTeleport ( unit , x , y ) ; end ;
55289: LD_VAR 0 2
55293: PPUSH
55294: LD_VAR 0 4
55298: PPUSH
55299: LD_VAR 0 5
55303: PPUSH
55304: CALL 57075 0 3
55308: GO 55311
55310: POP
// end ;
55311: LD_VAR 0 12
55315: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
55316: LD_INT 0
55318: PPUSH
55319: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
55320: LD_VAR 0 1
55324: PUSH
55325: LD_INT 1
55327: LESS
55328: PUSH
55329: LD_VAR 0 1
55333: PUSH
55334: LD_INT 3
55336: GREATER
55337: OR
55338: PUSH
55339: LD_VAR 0 5
55343: PPUSH
55344: LD_VAR 0 6
55348: PPUSH
55349: CALL_OW 428
55353: OR
55354: IFFALSE 55358
// exit ;
55356: GO 56078
// uc_side := your_side ;
55358: LD_ADDR_OWVAR 20
55362: PUSH
55363: LD_OWVAR 2
55367: ST_TO_ADDR
// uc_nation := nation ;
55368: LD_ADDR_OWVAR 21
55372: PUSH
55373: LD_VAR 0 1
55377: ST_TO_ADDR
// bc_level = 1 ;
55378: LD_ADDR_OWVAR 43
55382: PUSH
55383: LD_INT 1
55385: ST_TO_ADDR
// case btype of 1 :
55386: LD_VAR 0 2
55390: PUSH
55391: LD_INT 1
55393: DOUBLE
55394: EQUAL
55395: IFTRUE 55399
55397: GO 55410
55399: POP
// bc_type := b_depot ; 2 :
55400: LD_ADDR_OWVAR 42
55404: PUSH
55405: LD_INT 0
55407: ST_TO_ADDR
55408: GO 56022
55410: LD_INT 2
55412: DOUBLE
55413: EQUAL
55414: IFTRUE 55418
55416: GO 55429
55418: POP
// bc_type := b_warehouse ; 3 :
55419: LD_ADDR_OWVAR 42
55423: PUSH
55424: LD_INT 1
55426: ST_TO_ADDR
55427: GO 56022
55429: LD_INT 3
55431: DOUBLE
55432: EQUAL
55433: IFTRUE 55437
55435: GO 55448
55437: POP
// bc_type := b_lab ; 4 .. 9 :
55438: LD_ADDR_OWVAR 42
55442: PUSH
55443: LD_INT 6
55445: ST_TO_ADDR
55446: GO 56022
55448: LD_INT 4
55450: DOUBLE
55451: GREATEREQUAL
55452: IFFALSE 55460
55454: LD_INT 9
55456: DOUBLE
55457: LESSEQUAL
55458: IFTRUE 55462
55460: GO 55514
55462: POP
// begin bc_type := b_lab_half ;
55463: LD_ADDR_OWVAR 42
55467: PUSH
55468: LD_INT 7
55470: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
55471: LD_ADDR_OWVAR 44
55475: PUSH
55476: LD_INT 10
55478: PUSH
55479: LD_INT 11
55481: PUSH
55482: LD_INT 12
55484: PUSH
55485: LD_INT 15
55487: PUSH
55488: LD_INT 14
55490: PUSH
55491: LD_INT 13
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: PUSH
55502: LD_VAR 0 2
55506: PUSH
55507: LD_INT 3
55509: MINUS
55510: ARRAY
55511: ST_TO_ADDR
// end ; 10 .. 13 :
55512: GO 56022
55514: LD_INT 10
55516: DOUBLE
55517: GREATEREQUAL
55518: IFFALSE 55526
55520: LD_INT 13
55522: DOUBLE
55523: LESSEQUAL
55524: IFTRUE 55528
55526: GO 55605
55528: POP
// begin bc_type := b_lab_full ;
55529: LD_ADDR_OWVAR 42
55533: PUSH
55534: LD_INT 8
55536: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
55537: LD_ADDR_OWVAR 44
55541: PUSH
55542: LD_INT 10
55544: PUSH
55545: LD_INT 12
55547: PUSH
55548: LD_INT 14
55550: PUSH
55551: LD_INT 13
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: PUSH
55560: LD_VAR 0 2
55564: PUSH
55565: LD_INT 9
55567: MINUS
55568: ARRAY
55569: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
55570: LD_ADDR_OWVAR 45
55574: PUSH
55575: LD_INT 11
55577: PUSH
55578: LD_INT 15
55580: PUSH
55581: LD_INT 12
55583: PUSH
55584: LD_INT 15
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: PUSH
55593: LD_VAR 0 2
55597: PUSH
55598: LD_INT 9
55600: MINUS
55601: ARRAY
55602: ST_TO_ADDR
// end ; 14 :
55603: GO 56022
55605: LD_INT 14
55607: DOUBLE
55608: EQUAL
55609: IFTRUE 55613
55611: GO 55624
55613: POP
// bc_type := b_workshop ; 15 :
55614: LD_ADDR_OWVAR 42
55618: PUSH
55619: LD_INT 2
55621: ST_TO_ADDR
55622: GO 56022
55624: LD_INT 15
55626: DOUBLE
55627: EQUAL
55628: IFTRUE 55632
55630: GO 55643
55632: POP
// bc_type := b_factory ; 16 :
55633: LD_ADDR_OWVAR 42
55637: PUSH
55638: LD_INT 3
55640: ST_TO_ADDR
55641: GO 56022
55643: LD_INT 16
55645: DOUBLE
55646: EQUAL
55647: IFTRUE 55651
55649: GO 55662
55651: POP
// bc_type := b_ext_gun ; 17 :
55652: LD_ADDR_OWVAR 42
55656: PUSH
55657: LD_INT 17
55659: ST_TO_ADDR
55660: GO 56022
55662: LD_INT 17
55664: DOUBLE
55665: EQUAL
55666: IFTRUE 55670
55668: GO 55698
55670: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
55671: LD_ADDR_OWVAR 42
55675: PUSH
55676: LD_INT 19
55678: PUSH
55679: LD_INT 23
55681: PUSH
55682: LD_INT 19
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: PUSH
55690: LD_VAR 0 1
55694: ARRAY
55695: ST_TO_ADDR
55696: GO 56022
55698: LD_INT 18
55700: DOUBLE
55701: EQUAL
55702: IFTRUE 55706
55704: GO 55717
55706: POP
// bc_type := b_ext_radar ; 19 :
55707: LD_ADDR_OWVAR 42
55711: PUSH
55712: LD_INT 20
55714: ST_TO_ADDR
55715: GO 56022
55717: LD_INT 19
55719: DOUBLE
55720: EQUAL
55721: IFTRUE 55725
55723: GO 55736
55725: POP
// bc_type := b_ext_radio ; 20 :
55726: LD_ADDR_OWVAR 42
55730: PUSH
55731: LD_INT 22
55733: ST_TO_ADDR
55734: GO 56022
55736: LD_INT 20
55738: DOUBLE
55739: EQUAL
55740: IFTRUE 55744
55742: GO 55755
55744: POP
// bc_type := b_ext_siberium ; 21 :
55745: LD_ADDR_OWVAR 42
55749: PUSH
55750: LD_INT 21
55752: ST_TO_ADDR
55753: GO 56022
55755: LD_INT 21
55757: DOUBLE
55758: EQUAL
55759: IFTRUE 55763
55761: GO 55774
55763: POP
// bc_type := b_ext_computer ; 22 :
55764: LD_ADDR_OWVAR 42
55768: PUSH
55769: LD_INT 24
55771: ST_TO_ADDR
55772: GO 56022
55774: LD_INT 22
55776: DOUBLE
55777: EQUAL
55778: IFTRUE 55782
55780: GO 55793
55782: POP
// bc_type := b_ext_track ; 23 :
55783: LD_ADDR_OWVAR 42
55787: PUSH
55788: LD_INT 16
55790: ST_TO_ADDR
55791: GO 56022
55793: LD_INT 23
55795: DOUBLE
55796: EQUAL
55797: IFTRUE 55801
55799: GO 55812
55801: POP
// bc_type := b_ext_laser ; 24 :
55802: LD_ADDR_OWVAR 42
55806: PUSH
55807: LD_INT 25
55809: ST_TO_ADDR
55810: GO 56022
55812: LD_INT 24
55814: DOUBLE
55815: EQUAL
55816: IFTRUE 55820
55818: GO 55831
55820: POP
// bc_type := b_control_tower ; 25 :
55821: LD_ADDR_OWVAR 42
55825: PUSH
55826: LD_INT 36
55828: ST_TO_ADDR
55829: GO 56022
55831: LD_INT 25
55833: DOUBLE
55834: EQUAL
55835: IFTRUE 55839
55837: GO 55850
55839: POP
// bc_type := b_breastwork ; 26 :
55840: LD_ADDR_OWVAR 42
55844: PUSH
55845: LD_INT 31
55847: ST_TO_ADDR
55848: GO 56022
55850: LD_INT 26
55852: DOUBLE
55853: EQUAL
55854: IFTRUE 55858
55856: GO 55869
55858: POP
// bc_type := b_bunker ; 27 :
55859: LD_ADDR_OWVAR 42
55863: PUSH
55864: LD_INT 32
55866: ST_TO_ADDR
55867: GO 56022
55869: LD_INT 27
55871: DOUBLE
55872: EQUAL
55873: IFTRUE 55877
55875: GO 55888
55877: POP
// bc_type := b_turret ; 28 :
55878: LD_ADDR_OWVAR 42
55882: PUSH
55883: LD_INT 33
55885: ST_TO_ADDR
55886: GO 56022
55888: LD_INT 28
55890: DOUBLE
55891: EQUAL
55892: IFTRUE 55896
55894: GO 55907
55896: POP
// bc_type := b_armoury ; 29 :
55897: LD_ADDR_OWVAR 42
55901: PUSH
55902: LD_INT 4
55904: ST_TO_ADDR
55905: GO 56022
55907: LD_INT 29
55909: DOUBLE
55910: EQUAL
55911: IFTRUE 55915
55913: GO 55926
55915: POP
// bc_type := b_barracks ; 30 :
55916: LD_ADDR_OWVAR 42
55920: PUSH
55921: LD_INT 5
55923: ST_TO_ADDR
55924: GO 56022
55926: LD_INT 30
55928: DOUBLE
55929: EQUAL
55930: IFTRUE 55934
55932: GO 55945
55934: POP
// bc_type := b_solar_power ; 31 :
55935: LD_ADDR_OWVAR 42
55939: PUSH
55940: LD_INT 27
55942: ST_TO_ADDR
55943: GO 56022
55945: LD_INT 31
55947: DOUBLE
55948: EQUAL
55949: IFTRUE 55953
55951: GO 55964
55953: POP
// bc_type := b_oil_power ; 32 :
55954: LD_ADDR_OWVAR 42
55958: PUSH
55959: LD_INT 26
55961: ST_TO_ADDR
55962: GO 56022
55964: LD_INT 32
55966: DOUBLE
55967: EQUAL
55968: IFTRUE 55972
55970: GO 55983
55972: POP
// bc_type := b_siberite_power ; 33 :
55973: LD_ADDR_OWVAR 42
55977: PUSH
55978: LD_INT 28
55980: ST_TO_ADDR
55981: GO 56022
55983: LD_INT 33
55985: DOUBLE
55986: EQUAL
55987: IFTRUE 55991
55989: GO 56002
55991: POP
// bc_type := b_oil_mine ; 34 :
55992: LD_ADDR_OWVAR 42
55996: PUSH
55997: LD_INT 29
55999: ST_TO_ADDR
56000: GO 56022
56002: LD_INT 34
56004: DOUBLE
56005: EQUAL
56006: IFTRUE 56010
56008: GO 56021
56010: POP
// bc_type := b_siberite_mine ; end ;
56011: LD_ADDR_OWVAR 42
56015: PUSH
56016: LD_INT 30
56018: ST_TO_ADDR
56019: GO 56022
56021: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
56022: LD_ADDR_VAR 0 8
56026: PUSH
56027: LD_VAR 0 5
56031: PPUSH
56032: LD_VAR 0 6
56036: PPUSH
56037: LD_VAR 0 3
56041: PPUSH
56042: CALL_OW 47
56046: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
56047: LD_OWVAR 42
56051: PUSH
56052: LD_INT 32
56054: PUSH
56055: LD_INT 33
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: IN
56062: IFFALSE 56078
// PlaceWeaponTurret ( b , weapon ) ;
56064: LD_VAR 0 8
56068: PPUSH
56069: LD_VAR 0 4
56073: PPUSH
56074: CALL_OW 431
// end ;
56078: LD_VAR 0 7
56082: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
56083: LD_INT 0
56085: PPUSH
56086: PPUSH
56087: PPUSH
56088: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56089: LD_ADDR_VAR 0 4
56093: PUSH
56094: LD_INT 22
56096: PUSH
56097: LD_OWVAR 2
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 30
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 30
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PPUSH
56138: CALL_OW 69
56142: ST_TO_ADDR
// if not tmp then
56143: LD_VAR 0 4
56147: NOT
56148: IFFALSE 56152
// exit ;
56150: GO 56211
// for i in tmp do
56152: LD_ADDR_VAR 0 2
56156: PUSH
56157: LD_VAR 0 4
56161: PUSH
56162: FOR_IN
56163: IFFALSE 56209
// for j = 1 to 3 do
56165: LD_ADDR_VAR 0 3
56169: PUSH
56170: DOUBLE
56171: LD_INT 1
56173: DEC
56174: ST_TO_ADDR
56175: LD_INT 3
56177: PUSH
56178: FOR_TO
56179: IFFALSE 56205
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
56181: LD_VAR 0 2
56185: PPUSH
56186: CALL_OW 274
56190: PPUSH
56191: LD_VAR 0 3
56195: PPUSH
56196: LD_INT 99999
56198: PPUSH
56199: CALL_OW 277
56203: GO 56178
56205: POP
56206: POP
56207: GO 56162
56209: POP
56210: POP
// end ;
56211: LD_VAR 0 1
56215: RET
// export function hHackSetLevel10 ; var i , j ; begin
56216: LD_INT 0
56218: PPUSH
56219: PPUSH
56220: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
56221: LD_ADDR_VAR 0 2
56225: PUSH
56226: LD_INT 21
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PPUSH
56236: CALL_OW 69
56240: PUSH
56241: FOR_IN
56242: IFFALSE 56294
// if IsSelected ( i ) then
56244: LD_VAR 0 2
56248: PPUSH
56249: CALL_OW 306
56253: IFFALSE 56292
// begin for j := 1 to 4 do
56255: LD_ADDR_VAR 0 3
56259: PUSH
56260: DOUBLE
56261: LD_INT 1
56263: DEC
56264: ST_TO_ADDR
56265: LD_INT 4
56267: PUSH
56268: FOR_TO
56269: IFFALSE 56290
// SetSkill ( i , j , 10 ) ;
56271: LD_VAR 0 2
56275: PPUSH
56276: LD_VAR 0 3
56280: PPUSH
56281: LD_INT 10
56283: PPUSH
56284: CALL_OW 237
56288: GO 56268
56290: POP
56291: POP
// end ;
56292: GO 56241
56294: POP
56295: POP
// end ;
56296: LD_VAR 0 1
56300: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
56301: LD_INT 0
56303: PPUSH
56304: PPUSH
56305: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
56306: LD_ADDR_VAR 0 2
56310: PUSH
56311: LD_INT 22
56313: PUSH
56314: LD_OWVAR 2
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 21
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PPUSH
56337: CALL_OW 69
56341: PUSH
56342: FOR_IN
56343: IFFALSE 56384
// begin for j := 1 to 4 do
56345: LD_ADDR_VAR 0 3
56349: PUSH
56350: DOUBLE
56351: LD_INT 1
56353: DEC
56354: ST_TO_ADDR
56355: LD_INT 4
56357: PUSH
56358: FOR_TO
56359: IFFALSE 56380
// SetSkill ( i , j , 10 ) ;
56361: LD_VAR 0 2
56365: PPUSH
56366: LD_VAR 0 3
56370: PPUSH
56371: LD_INT 10
56373: PPUSH
56374: CALL_OW 237
56378: GO 56358
56380: POP
56381: POP
// end ;
56382: GO 56342
56384: POP
56385: POP
// end ;
56386: LD_VAR 0 1
56390: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
56391: LD_INT 0
56393: PPUSH
// uc_side := your_side ;
56394: LD_ADDR_OWVAR 20
56398: PUSH
56399: LD_OWVAR 2
56403: ST_TO_ADDR
// uc_nation := nation ;
56404: LD_ADDR_OWVAR 21
56408: PUSH
56409: LD_VAR 0 1
56413: ST_TO_ADDR
// InitHc ;
56414: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
56418: LD_INT 0
56420: PPUSH
56421: LD_VAR 0 2
56425: PPUSH
56426: LD_VAR 0 3
56430: PPUSH
56431: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
56435: LD_VAR 0 4
56439: PPUSH
56440: LD_VAR 0 5
56444: PPUSH
56445: CALL_OW 428
56449: PUSH
56450: LD_INT 0
56452: EQUAL
56453: IFFALSE 56477
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
56455: CALL_OW 44
56459: PPUSH
56460: LD_VAR 0 4
56464: PPUSH
56465: LD_VAR 0 5
56469: PPUSH
56470: LD_INT 1
56472: PPUSH
56473: CALL_OW 48
// end ;
56477: LD_VAR 0 6
56481: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
56482: LD_INT 0
56484: PPUSH
56485: PPUSH
// uc_side := your_side ;
56486: LD_ADDR_OWVAR 20
56490: PUSH
56491: LD_OWVAR 2
56495: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
56496: LD_VAR 0 1
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: LD_INT 3
56509: PUSH
56510: LD_INT 4
56512: PUSH
56513: LD_INT 5
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: IN
56523: IFFALSE 56535
// uc_nation := nation_american else
56525: LD_ADDR_OWVAR 21
56529: PUSH
56530: LD_INT 1
56532: ST_TO_ADDR
56533: GO 56578
// if chassis in [ 11 , 12 , 13 , 14 ] then
56535: LD_VAR 0 1
56539: PUSH
56540: LD_INT 11
56542: PUSH
56543: LD_INT 12
56545: PUSH
56546: LD_INT 13
56548: PUSH
56549: LD_INT 14
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: IN
56558: IFFALSE 56570
// uc_nation := nation_arabian else
56560: LD_ADDR_OWVAR 21
56564: PUSH
56565: LD_INT 2
56567: ST_TO_ADDR
56568: GO 56578
// uc_nation := nation_russian ;
56570: LD_ADDR_OWVAR 21
56574: PUSH
56575: LD_INT 3
56577: ST_TO_ADDR
// vc_chassis := chassis ;
56578: LD_ADDR_OWVAR 37
56582: PUSH
56583: LD_VAR 0 1
56587: ST_TO_ADDR
// vc_engine := engine ;
56588: LD_ADDR_OWVAR 39
56592: PUSH
56593: LD_VAR 0 2
56597: ST_TO_ADDR
// vc_control := control ;
56598: LD_ADDR_OWVAR 38
56602: PUSH
56603: LD_VAR 0 3
56607: ST_TO_ADDR
// vc_weapon := weapon ;
56608: LD_ADDR_OWVAR 40
56612: PUSH
56613: LD_VAR 0 4
56617: ST_TO_ADDR
// un := CreateVehicle ;
56618: LD_ADDR_VAR 0 8
56622: PUSH
56623: CALL_OW 45
56627: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
56628: LD_VAR 0 8
56632: PPUSH
56633: LD_INT 0
56635: PPUSH
56636: LD_INT 5
56638: PPUSH
56639: CALL_OW 12
56643: PPUSH
56644: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
56648: LD_VAR 0 8
56652: PPUSH
56653: LD_VAR 0 5
56657: PPUSH
56658: LD_VAR 0 6
56662: PPUSH
56663: LD_INT 1
56665: PPUSH
56666: CALL_OW 48
// end ;
56670: LD_VAR 0 7
56674: RET
// export hInvincible ; every 1 do
56675: GO 56677
56677: DISABLE
// hInvincible := [ ] ;
56678: LD_ADDR_EXP 89
56682: PUSH
56683: EMPTY
56684: ST_TO_ADDR
56685: END
// every 10 do var i ;
56686: GO 56688
56688: DISABLE
56689: LD_INT 0
56691: PPUSH
// begin enable ;
56692: ENABLE
// if not hInvincible then
56693: LD_EXP 89
56697: NOT
56698: IFFALSE 56702
// exit ;
56700: GO 56746
// for i in hInvincible do
56702: LD_ADDR_VAR 0 1
56706: PUSH
56707: LD_EXP 89
56711: PUSH
56712: FOR_IN
56713: IFFALSE 56744
// if GetLives ( i ) < 1000 then
56715: LD_VAR 0 1
56719: PPUSH
56720: CALL_OW 256
56724: PUSH
56725: LD_INT 1000
56727: LESS
56728: IFFALSE 56742
// SetLives ( i , 1000 ) ;
56730: LD_VAR 0 1
56734: PPUSH
56735: LD_INT 1000
56737: PPUSH
56738: CALL_OW 234
56742: GO 56712
56744: POP
56745: POP
// end ;
56746: PPOPN 1
56748: END
// export function hHackInvincible ; var i ; begin
56749: LD_INT 0
56751: PPUSH
56752: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
56753: LD_ADDR_VAR 0 2
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 21
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 21
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: PPUSH
56786: CALL_OW 69
56790: PUSH
56791: FOR_IN
56792: IFFALSE 56853
// if IsSelected ( i ) then
56794: LD_VAR 0 2
56798: PPUSH
56799: CALL_OW 306
56803: IFFALSE 56851
// begin if i in hInvincible then
56805: LD_VAR 0 2
56809: PUSH
56810: LD_EXP 89
56814: IN
56815: IFFALSE 56835
// hInvincible := hInvincible diff i else
56817: LD_ADDR_EXP 89
56821: PUSH
56822: LD_EXP 89
56826: PUSH
56827: LD_VAR 0 2
56831: DIFF
56832: ST_TO_ADDR
56833: GO 56851
// hInvincible := hInvincible union i ;
56835: LD_ADDR_EXP 89
56839: PUSH
56840: LD_EXP 89
56844: PUSH
56845: LD_VAR 0 2
56849: UNION
56850: ST_TO_ADDR
// end ;
56851: GO 56791
56853: POP
56854: POP
// end ;
56855: LD_VAR 0 1
56859: RET
// export function hHackInvisible ; var i , j ; begin
56860: LD_INT 0
56862: PPUSH
56863: PPUSH
56864: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
56865: LD_ADDR_VAR 0 2
56869: PUSH
56870: LD_INT 21
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PPUSH
56880: CALL_OW 69
56884: PUSH
56885: FOR_IN
56886: IFFALSE 56910
// if IsSelected ( i ) then
56888: LD_VAR 0 2
56892: PPUSH
56893: CALL_OW 306
56897: IFFALSE 56908
// ComForceInvisible ( i ) ;
56899: LD_VAR 0 2
56903: PPUSH
56904: CALL_OW 496
56908: GO 56885
56910: POP
56911: POP
// end ;
56912: LD_VAR 0 1
56916: RET
// export function hHackChangeYourSide ; begin
56917: LD_INT 0
56919: PPUSH
// if your_side = 8 then
56920: LD_OWVAR 2
56924: PUSH
56925: LD_INT 8
56927: EQUAL
56928: IFFALSE 56940
// your_side := 0 else
56930: LD_ADDR_OWVAR 2
56934: PUSH
56935: LD_INT 0
56937: ST_TO_ADDR
56938: GO 56954
// your_side := your_side + 1 ;
56940: LD_ADDR_OWVAR 2
56944: PUSH
56945: LD_OWVAR 2
56949: PUSH
56950: LD_INT 1
56952: PLUS
56953: ST_TO_ADDR
// end ;
56954: LD_VAR 0 1
56958: RET
// export function hHackChangeUnitSide ; var i , j ; begin
56959: LD_INT 0
56961: PPUSH
56962: PPUSH
56963: PPUSH
// for i in all_units do
56964: LD_ADDR_VAR 0 2
56968: PUSH
56969: LD_OWVAR 3
56973: PUSH
56974: FOR_IN
56975: IFFALSE 57053
// if IsSelected ( i ) then
56977: LD_VAR 0 2
56981: PPUSH
56982: CALL_OW 306
56986: IFFALSE 57051
// begin j := GetSide ( i ) ;
56988: LD_ADDR_VAR 0 3
56992: PUSH
56993: LD_VAR 0 2
56997: PPUSH
56998: CALL_OW 255
57002: ST_TO_ADDR
// if j = 8 then
57003: LD_VAR 0 3
57007: PUSH
57008: LD_INT 8
57010: EQUAL
57011: IFFALSE 57023
// j := 0 else
57013: LD_ADDR_VAR 0 3
57017: PUSH
57018: LD_INT 0
57020: ST_TO_ADDR
57021: GO 57037
// j := j + 1 ;
57023: LD_ADDR_VAR 0 3
57027: PUSH
57028: LD_VAR 0 3
57032: PUSH
57033: LD_INT 1
57035: PLUS
57036: ST_TO_ADDR
// SetSide ( i , j ) ;
57037: LD_VAR 0 2
57041: PPUSH
57042: LD_VAR 0 3
57046: PPUSH
57047: CALL_OW 235
// end ;
57051: GO 56974
57053: POP
57054: POP
// end ;
57055: LD_VAR 0 1
57059: RET
// export function hHackFog ; begin
57060: LD_INT 0
57062: PPUSH
// FogOff ( true ) ;
57063: LD_INT 1
57065: PPUSH
57066: CALL_OW 344
// end ;
57070: LD_VAR 0 1
57074: RET
// export function hHackTeleport ( unit , x , y ) ; begin
57075: LD_INT 0
57077: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
57078: LD_VAR 0 1
57082: PPUSH
57083: LD_VAR 0 2
57087: PPUSH
57088: LD_VAR 0 3
57092: PPUSH
57093: LD_INT 1
57095: PPUSH
57096: LD_INT 1
57098: PPUSH
57099: CALL_OW 483
// CenterOnXY ( x , y ) ;
57103: LD_VAR 0 2
57107: PPUSH
57108: LD_VAR 0 3
57112: PPUSH
57113: CALL_OW 84
// end ; end_of_file
57117: LD_VAR 0 4
57121: RET
