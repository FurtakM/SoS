// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 2776 0 0
// Init ;
   8: CALL 67 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 28
// Difficulty := 2 else
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 2
  25: ST_TO_ADDR
  26: GO 41
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// PrepareAlliance ;
  41: CALL 83 0 0
// PrepareRussian ;
  45: CALL 452 0 0
// Action ;
  49: CALL 2372 0 0
// if debug then
  53: LD_EXP 1
  57: IFFALSE 66
// FogOff ( 7 ) ;
  59: LD_INT 7
  61: PPUSH
  62: CALL_OW 344
// end ;
  66: END
// export debug ; export function Init ; begin
  67: LD_INT 0
  69: PPUSH
// debug := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// end ; end_of_file
  78: LD_VAR 0 1
  82: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  83: LD_INT 0
  85: PPUSH
  86: PPUSH
  87: PPUSH
// tmp := [ ] ;
  88: LD_ADDR_VAR 0 3
  92: PUSH
  93: EMPTY
  94: ST_TO_ADDR
// uc_side := 7 ;
  95: LD_ADDR_OWVAR 20
  99: PUSH
 100: LD_INT 7
 102: ST_TO_ADDR
// uc_nation := 1 ;
 103: LD_ADDR_OWVAR 21
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 111: LD_INT 5
 113: PPUSH
 114: LD_INT 3
 116: PPUSH
 117: LD_INT 3
 119: PPUSH
 120: LD_EXP 11
 124: PPUSH
 125: LD_INT 100
 127: PPUSH
 128: CALL 7816 0 5
// allianceHack := CreateVehicle ;
 132: LD_ADDR_EXP 2
 136: PUSH
 137: CALL_OW 45
 141: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 142: LD_EXP 2
 146: PPUSH
 147: LD_INT 7
 149: PPUSH
 150: LD_INT 0
 152: PPUSH
 153: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 157: LD_INT 5
 159: PPUSH
 160: LD_INT 3
 162: PPUSH
 163: LD_INT 3
 165: PPUSH
 166: LD_INT 10
 168: PPUSH
 169: LD_INT 100
 171: PPUSH
 172: CALL 7816 0 5
// for i := 1 to 2 do
 176: LD_ADDR_VAR 0 2
 180: PUSH
 181: DOUBLE
 182: LD_INT 1
 184: DEC
 185: ST_TO_ADDR
 186: LD_INT 2
 188: PUSH
 189: FOR_TO
 190: IFFALSE 209
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 192: CALL_OW 45
 196: PPUSH
 197: LD_INT 7
 199: PPUSH
 200: LD_INT 0
 202: PPUSH
 203: CALL_OW 49
 207: GO 189
 209: POP
 210: POP
// uc_side := 4 ;
 211: LD_ADDR_OWVAR 20
 215: PUSH
 216: LD_INT 4
 218: ST_TO_ADDR
// uc_nation := 1 ;
 219: LD_ADDR_OWVAR 21
 223: PUSH
 224: LD_INT 1
 226: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 227: LD_INT 1
 229: PPUSH
 230: LD_INT 9
 232: PPUSH
 233: CALL_OW 383
// allianceMechanic := CreateHuman ;
 237: LD_ADDR_EXP 3
 241: PUSH
 242: CALL_OW 44
 246: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 247: LD_EXP 3
 251: PPUSH
 252: LD_INT 96
 254: PPUSH
 255: CALL_OW 52
// end ;
 259: LD_VAR 0 1
 263: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 264: LD_INT 0
 266: PPUSH
 267: PPUSH
 268: PPUSH
// uc_side := 7 ;
 269: LD_ADDR_OWVAR 20
 273: PUSH
 274: LD_INT 7
 276: ST_TO_ADDR
// uc_nation := 1 ;
 277: LD_ADDR_OWVAR 21
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 285: LD_ADDR_VAR 0 2
 289: PUSH
 290: DOUBLE
 291: LD_INT 1
 293: DEC
 294: ST_TO_ADDR
 295: LD_INT 3
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_OWVAR 67
 313: ARRAY
 314: PUSH
 315: FOR_TO
 316: IFFALSE 386
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 318: LD_INT 5
 320: PPUSH
 321: LD_INT 3
 323: PPUSH
 324: LD_INT 3
 326: PPUSH
 327: LD_INT 7
 329: PPUSH
 330: LD_INT 100
 332: PPUSH
 333: CALL 7816 0 5
// un := CreateVehicle ;
 337: LD_ADDR_VAR 0 3
 341: PUSH
 342: CALL_OW 45
 346: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 347: LD_VAR 0 3
 351: PPUSH
 352: LD_INT 7
 354: PPUSH
 355: LD_INT 0
 357: PPUSH
 358: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 67
 369: PPUSH
 370: LD_INT 95
 372: PPUSH
 373: CALL_OW 111
// wait ( 0 0$2 ) ;
 377: LD_INT 70
 379: PPUSH
 380: CALL_OW 67
// end ;
 384: GO 315
 386: POP
 387: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 388: LD_INT 5
 390: PPUSH
 391: LD_INT 3
 393: PPUSH
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 11
 399: PPUSH
 400: LD_INT 100
 402: PPUSH
 403: CALL 7816 0 5
// un := CreateVehicle ;
 407: LD_ADDR_VAR 0 3
 411: PUSH
 412: CALL_OW 45
 416: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 417: LD_VAR 0 3
 421: PPUSH
 422: LD_INT 7
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 432: LD_VAR 0 3
 436: PPUSH
 437: LD_INT 67
 439: PPUSH
 440: LD_INT 95
 442: PPUSH
 443: CALL_OW 111
// end ; end_of_file
 447: LD_VAR 0 1
 451: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
// uc_side := 3 ;
 457: LD_ADDR_OWVAR 20
 461: PUSH
 462: LD_INT 3
 464: ST_TO_ADDR
// uc_nation := 3 ;
 465: LD_ADDR_OWVAR 21
 469: PUSH
 470: LD_INT 3
 472: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 473: LD_INT 14
 475: PPUSH
 476: CALL_OW 274
 480: PPUSH
 481: LD_INT 1
 483: PPUSH
 484: LD_INT 50000
 486: PPUSH
 487: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 491: LD_INT 14
 493: PPUSH
 494: CALL_OW 274
 498: PPUSH
 499: LD_INT 3
 501: PPUSH
 502: LD_INT 5000
 504: PPUSH
 505: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 509: LD_INT 45
 511: PPUSH
 512: LD_INT 132
 514: PPUSH
 515: LD_INT 89
 517: PPUSH
 518: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 522: LD_ADDR_VAR 0 2
 526: PUSH
 527: LD_INT 21
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PPUSH
 537: CALL_OW 69
 541: PUSH
 542: FOR_IN
 543: IFFALSE 576
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 545: LD_VAR 0 2
 549: PPUSH
 550: LD_INT 6
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 10
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_OWVAR 67
 568: ARRAY
 569: PPUSH
 570: CALL_OW 241
 574: GO 542
 576: POP
 577: POP
// for i := 1 to 4 do
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_INT 4
 590: PUSH
 591: FOR_TO
 592: IFFALSE 618
// begin PrepareMechanic ( false , 9 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 9
 599: PPUSH
 600: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 604: CALL_OW 44
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: CALL_OW 52
// end ;
 616: GO 591
 618: POP
 619: POP
// ruGuard1 := [ ] ;
 620: LD_ADDR_EXP 4
 624: PUSH
 625: EMPTY
 626: ST_TO_ADDR
// ruGuard2 := [ ] ;
 627: LD_ADDR_EXP 5
 631: PUSH
 632: EMPTY
 633: ST_TO_ADDR
// ruGuard3 := [ ] ;
 634: LD_ADDR_EXP 6
 638: PUSH
 639: EMPTY
 640: ST_TO_ADDR
// ruForces := [ ] ;
 641: LD_ADDR_EXP 7
 645: PUSH
 646: EMPTY
 647: ST_TO_ADDR
// ruEng := [ ] ;
 648: LD_ADDR_EXP 8
 652: PUSH
 653: EMPTY
 654: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: DOUBLE
 661: LD_INT 1
 663: DEC
 664: ST_TO_ADDR
 665: LD_INT 4
 667: PUSH
 668: LD_INT 5
 670: PUSH
 671: LD_INT 6
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: PUSH
 679: LD_OWVAR 67
 683: ARRAY
 684: PUSH
 685: FOR_TO
 686: IFFALSE 742
// begin PrepareEngineer ( false , 8 ) ;
 688: LD_INT 0
 690: PPUSH
 691: LD_INT 8
 693: PPUSH
 694: CALL_OW 382
// un := CreateHuman ;
 698: LD_ADDR_VAR 0 3
 702: PUSH
 703: CALL_OW 44
 707: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 708: LD_VAR 0 3
 712: PPUSH
 713: LD_INT 14
 715: PPUSH
 716: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 720: LD_ADDR_EXP 8
 724: PUSH
 725: LD_EXP 8
 729: PPUSH
 730: LD_VAR 0 3
 734: PPUSH
 735: CALL 39633 0 2
 739: ST_TO_ADDR
// end ;
 740: GO 685
 742: POP
 743: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 744: LD_ADDR_VAR 0 2
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_INT 5
 756: PUSH
 757: LD_INT 6
 759: PUSH
 760: LD_INT 7
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: PUSH
 768: LD_OWVAR 67
 772: ARRAY
 773: PUSH
 774: FOR_TO
 775: IFFALSE 885
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 777: LD_INT 24
 779: PPUSH
 780: LD_INT 3
 782: PPUSH
 783: LD_INT 3
 785: PPUSH
 786: LD_INT 46
 788: PUSH
 789: LD_INT 45
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: LD_VAR 0 2
 800: PUSH
 801: LD_INT 2
 803: MOD
 804: PUSH
 805: LD_INT 1
 807: PLUS
 808: ARRAY
 809: PPUSH
 810: LD_INT 100
 812: PPUSH
 813: CALL 7816 0 5
// un := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 4
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 854: LD_ADDR_EXP 4
 858: PUSH
 859: LD_EXP 4
 863: PPUSH
 864: LD_EXP 4
 868: PUSH
 869: LD_INT 1
 871: PLUS
 872: PPUSH
 873: LD_VAR 0 3
 877: PPUSH
 878: CALL_OW 1
 882: ST_TO_ADDR
// end ;
 883: GO 774
 885: POP
 886: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 887: LD_ADDR_VAR 0 2
 891: PUSH
 892: DOUBLE
 893: LD_INT 1
 895: DEC
 896: ST_TO_ADDR
 897: LD_INT 4
 899: PUSH
 900: LD_INT 4
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_OWVAR 67
 915: ARRAY
 916: PUSH
 917: FOR_TO
 918: IFFALSE 1028
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 920: LD_INT 24
 922: PPUSH
 923: LD_INT 3
 925: PPUSH
 926: LD_INT 3
 928: PPUSH
 929: LD_INT 46
 931: PUSH
 932: LD_INT 45
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: MOD
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: PPUSH
 953: LD_INT 100
 955: PPUSH
 956: CALL 7816 0 5
// un := CreateVehicle ;
 960: LD_ADDR_VAR 0 3
 964: PUSH
 965: CALL_OW 45
 969: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 970: LD_VAR 0 3
 974: PPUSH
 975: LD_INT 4
 977: PPUSH
 978: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 982: LD_VAR 0 3
 986: PPUSH
 987: LD_INT 5
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 997: LD_ADDR_EXP 5
1001: PUSH
1002: LD_EXP 5
1006: PPUSH
1007: LD_EXP 5
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: PPUSH
1016: LD_VAR 0 3
1020: PPUSH
1021: CALL_OW 1
1025: ST_TO_ADDR
// end ;
1026: GO 917
1028: POP
1029: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1030: LD_ADDR_VAR 0 2
1034: PUSH
1035: DOUBLE
1036: LD_INT 1
1038: DEC
1039: ST_TO_ADDR
1040: LD_INT 4
1042: PUSH
1043: LD_INT 4
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_OWVAR 67
1058: ARRAY
1059: PUSH
1060: FOR_TO
1061: IFFALSE 1171
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1063: LD_INT 24
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: LD_INT 3
1071: PPUSH
1072: LD_INT 46
1074: PUSH
1075: LD_INT 45
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 2
1089: MOD
1090: PUSH
1091: LD_INT 1
1093: PLUS
1094: ARRAY
1095: PPUSH
1096: LD_INT 100
1098: PPUSH
1099: CALL 7816 0 5
// un := CreateVehicle ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: CALL_OW 45
1112: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_INT 6
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1140: LD_ADDR_EXP 6
1144: PUSH
1145: LD_EXP 6
1149: PPUSH
1150: LD_EXP 6
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 1
1168: ST_TO_ADDR
// end ;
1169: GO 1060
1171: POP
1172: POP
// for i := 1 to 2 do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_INT 2
1185: PUSH
1186: FOR_TO
1187: IFFALSE 1235
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1189: LD_INT 22
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: LD_INT 3
1197: PPUSH
1198: LD_INT 52
1200: PPUSH
1201: LD_INT 100
1203: PPUSH
1204: CALL 7816 0 5
// un := CreateVehicle ;
1208: LD_ADDR_VAR 0 3
1212: PUSH
1213: CALL_OW 45
1217: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1218: LD_VAR 0 3
1222: PPUSH
1223: LD_INT 9
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// end ;
1233: GO 1186
1235: POP
1236: POP
// for i := 1 to 3 do
1237: LD_ADDR_VAR 0 2
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_INT 3
1249: PUSH
1250: FOR_TO
1251: IFFALSE 1288
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1253: LD_INT 0
1255: PPUSH
1256: LD_INT 9
1258: PPUSH
1259: LD_INT 8
1261: PPUSH
1262: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1266: CALL_OW 44
1270: PPUSH
1271: LD_INT 91
1273: PPUSH
1274: LD_INT 83
1276: PPUSH
1277: CALL_OW 428
1281: PPUSH
1282: CALL_OW 52
// end ;
1286: GO 1250
1288: POP
1289: POP
// end ;
1290: LD_VAR 0 1
1294: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1295: LD_EXP 8
1299: IFFALSE 1493
1301: GO 1303
1303: DISABLE
1304: LD_INT 0
1306: PPUSH
1307: PPUSH
// begin enable ;
1308: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1309: LD_ADDR_VAR 0 2
1313: PUSH
1314: LD_INT 10
1316: PPUSH
1317: LD_INT 21
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 24
1332: PUSH
1333: LD_INT 1000
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 70
1352: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1353: LD_VAR 0 2
1357: NOT
1358: PUSH
1359: LD_EXP 8
1363: PPUSH
1364: LD_INT 3
1366: PUSH
1367: LD_INT 54
1369: PUSH
1370: EMPTY
1371: LIST
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 72
1381: AND
1382: IFFALSE 1414
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1384: LD_EXP 8
1388: PPUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 54
1394: PUSH
1395: EMPTY
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 72
1406: PPUSH
1407: LD_INT 14
1409: PPUSH
1410: CALL_OW 120
// if tmp then
1414: LD_VAR 0 2
1418: IFFALSE 1493
// begin for i in ruEng do
1420: LD_ADDR_VAR 0 1
1424: PUSH
1425: LD_EXP 8
1429: PUSH
1430: FOR_IN
1431: IFFALSE 1491
// if IsInUnit ( i ) then
1433: LD_VAR 0 1
1437: PPUSH
1438: CALL_OW 310
1442: IFFALSE 1455
// ComExitBuilding ( i ) else
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 122
1453: GO 1489
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1455: LD_VAR 0 1
1459: PPUSH
1460: LD_VAR 0 1
1464: PPUSH
1465: LD_VAR 0 2
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 8373 0 4
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: CALL_OW 130
1489: GO 1430
1491: POP
1492: POP
// end ; end ;
1493: PPOPN 2
1495: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1496: LD_EXP 7
1500: NOT
1501: IFFALSE 1567
1503: GO 1505
1505: DISABLE
1506: LD_INT 0
1508: PPUSH
1509: PPUSH
// begin enable ;
1510: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1511: LD_ADDR_VAR 0 1
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_INT 4
1523: PUSH
1524: LD_INT 5
1526: PUSH
1527: LD_INT 6
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_OWVAR 67
1539: ARRAY
1540: PUSH
1541: FOR_TO
1542: IFFALSE 1565
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1544: LD_INT 50
1546: PPUSH
1547: LD_INT 24
1549: PPUSH
1550: LD_INT 3
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_INT 46
1558: PPUSH
1559: CALL_OW 185
1563: GO 1541
1565: POP
1566: POP
// end ;
1567: PPOPN 2
1569: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1570: LD_EXP 7
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: LD_INT 5
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_OWVAR 67
1593: ARRAY
1594: GREATEREQUAL
1595: IFFALSE 1748
1597: GO 1599
1599: DISABLE
1600: LD_INT 0
1602: PPUSH
1603: PPUSH
// begin enable ;
1604: ENABLE
// tmp := ruForces ;
1605: LD_ADDR_VAR 0 2
1609: PUSH
1610: LD_EXP 7
1614: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1615: LD_INT 0
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: CALL_OW 12
1625: IFFALSE 1646
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_INT 45
1634: PPUSH
1635: CALL_OW 120
// wait ( 0 0$20 ) ;
1639: LD_INT 700
1641: PPUSH
1642: CALL_OW 67
// end ; ruForces := [ ] ;
1646: LD_ADDR_EXP 7
1650: PUSH
1651: EMPTY
1652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1653: LD_INT 35
1655: PPUSH
1656: CALL_OW 67
// for i in tmp do
1660: LD_ADDR_VAR 0 1
1664: PUSH
1665: LD_VAR 0 2
1669: PUSH
1670: FOR_IN
1671: IFFALSE 1739
// if not IsOk ( i ) then
1673: LD_VAR 0 1
1677: PPUSH
1678: CALL_OW 302
1682: NOT
1683: IFFALSE 1703
// tmp := tmp diff i else
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_VAR 0 1
1699: DIFF
1700: ST_TO_ADDR
1701: GO 1737
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1703: LD_VAR 0 1
1707: PPUSH
1708: LD_INT 81
1710: PUSH
1711: LD_INT 3
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PPUSH
1718: CALL_OW 69
1722: PPUSH
1723: LD_VAR 0 1
1727: PPUSH
1728: CALL_OW 74
1732: PPUSH
1733: CALL_OW 115
1737: GO 1670
1739: POP
1740: POP
// until not tmp ;
1741: LD_VAR 0 2
1745: NOT
1746: IFFALSE 1653
// end ;
1748: PPOPN 2
1750: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1751: LD_INT 22
1753: PUSH
1754: LD_INT 7
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 92
1763: PUSH
1764: LD_INT 62
1766: PUSH
1767: LD_INT 83
1769: PUSH
1770: LD_INT 8
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PPUSH
1783: CALL_OW 69
1787: IFFALSE 1807
1789: GO 1791
1791: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1792: LD_EXP 4
1796: PPUSH
1797: LD_INT 69
1799: PPUSH
1800: LD_INT 100
1802: PPUSH
1803: CALL_OW 114
1807: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1808: LD_INT 22
1810: PUSH
1811: LD_INT 7
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 92
1820: PUSH
1821: LD_INT 85
1823: PUSH
1824: LD_INT 89
1826: PUSH
1827: LD_INT 8
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PPUSH
1840: CALL_OW 69
1844: IFFALSE 1864
1846: GO 1848
1848: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1849: LD_EXP 5
1853: PPUSH
1854: LD_INT 72
1856: PPUSH
1857: LD_INT 88
1859: PPUSH
1860: CALL_OW 114
1864: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 92
1877: PUSH
1878: LD_INT 89
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 8
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 69
1901: IFFALSE 1921
1903: GO 1905
1905: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1906: LD_EXP 6
1910: PPUSH
1911: LD_INT 107
1913: PPUSH
1914: LD_INT 26
1916: PPUSH
1917: CALL_OW 114
1921: END
// every 6 6$00 do var i , un , tmp ;
1922: GO 1924
1924: DISABLE
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
// begin enable ;
1930: ENABLE
// tmp := [ ] ;
1931: LD_ADDR_VAR 0 3
1935: PUSH
1936: EMPTY
1937: ST_TO_ADDR
// for i := 1 to 8 do
1938: LD_ADDR_VAR 0 1
1942: PUSH
1943: DOUBLE
1944: LD_INT 1
1946: DEC
1947: ST_TO_ADDR
1948: LD_INT 8
1950: PUSH
1951: FOR_TO
1952: IFFALSE 2095
// begin uc_side := 1 ;
1954: LD_ADDR_OWVAR 20
1958: PUSH
1959: LD_INT 1
1961: ST_TO_ADDR
// uc_nation := 1 ;
1962: LD_ADDR_OWVAR 21
1966: PUSH
1967: LD_INT 1
1969: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1970: LD_INT 5
1972: PPUSH
1973: LD_INT 3
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_INT 6
1981: PUSH
1982: LD_INT 9
1984: PUSH
1985: LD_INT 7
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 1
1997: PUSH
1998: LD_INT 3
2000: MOD
2001: PUSH
2002: LD_INT 1
2004: PLUS
2005: ARRAY
2006: PPUSH
2007: LD_INT 100
2009: PPUSH
2010: CALL 7816 0 5
// un := CreateVehicle ;
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: LD_VAR 0 3
2033: PPUSH
2034: LD_VAR 0 2
2038: PPUSH
2039: CALL 39633 0 2
2043: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 11
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2071: LD_VAR 0 2
2075: PPUSH
2076: LD_INT 16
2078: PPUSH
2079: LD_INT 13
2081: PPUSH
2082: CALL_OW 111
// wait ( 0 0$1 ) ;
2086: LD_INT 35
2088: PPUSH
2089: CALL_OW 67
// end ;
2093: GO 1951
2095: POP
2096: POP
// repeat wait ( 0 0$1 ) ;
2097: LD_INT 35
2099: PPUSH
2100: CALL_OW 67
// for i in tmp do
2104: LD_ADDR_VAR 0 1
2108: PUSH
2109: LD_VAR 0 3
2113: PUSH
2114: FOR_IN
2115: IFFALSE 2183
// if not IsOk ( i ) then
2117: LD_VAR 0 1
2121: PPUSH
2122: CALL_OW 302
2126: NOT
2127: IFFALSE 2147
// tmp := tmp diff i else
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: LD_VAR 0 3
2138: PUSH
2139: LD_VAR 0 1
2143: DIFF
2144: ST_TO_ADDR
2145: GO 2181
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2147: LD_VAR 0 1
2151: PPUSH
2152: LD_INT 81
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PPUSH
2162: CALL_OW 69
2166: PPUSH
2167: LD_VAR 0 1
2171: PPUSH
2172: CALL_OW 74
2176: PPUSH
2177: CALL_OW 115
2181: GO 2114
2183: POP
2184: POP
// until not tmp ;
2185: LD_VAR 0 3
2189: NOT
2190: IFFALSE 2097
// end ;
2192: PPOPN 3
2194: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2195: LD_INT 149
2197: PPUSH
2198: LD_INT 106
2200: PPUSH
2201: CALL_OW 428
2205: NOT
2206: IFFALSE 2369
2208: GO 2210
2210: DISABLE
2211: LD_INT 0
2213: PPUSH
// begin enable ;
2214: ENABLE
// uc_side := 1 ;
2215: LD_ADDR_OWVAR 20
2219: PUSH
2220: LD_INT 1
2222: ST_TO_ADDR
// uc_nation := 1 ;
2223: LD_ADDR_OWVAR 21
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2231: LD_INT 5
2233: PPUSH
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 12
2242: PPUSH
2243: LD_INT 100
2245: PPUSH
2246: CALL 7816 0 5
// un := CreateVehicle ;
2250: LD_ADDR_VAR 0 1
2254: PUSH
2255: CALL_OW 45
2259: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2260: LD_VAR 0 1
2264: PPUSH
2265: LD_INT 149
2267: PPUSH
2268: LD_INT 106
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2278: LD_VAR 0 1
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: LD_INT 100
2288: PPUSH
2289: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2293: LD_VAR 0 1
2297: PPUSH
2298: LD_INT 105
2300: PPUSH
2301: LD_INT 2
2303: PPUSH
2304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2308: LD_INT 35
2310: PPUSH
2311: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2315: LD_VAR 0 1
2319: PPUSH
2320: CALL_OW 301
2324: PUSH
2325: LD_VAR 0 1
2329: PPUSH
2330: CALL_OW 255
2334: PUSH
2335: LD_INT 1
2337: NONEQUAL
2338: OR
2339: IFFALSE 2343
// exit ;
2341: GO 2369
// until IsAt ( un , 105 , 2 ) ;
2343: LD_VAR 0 1
2347: PPUSH
2348: LD_INT 105
2350: PPUSH
2351: LD_INT 2
2353: PPUSH
2354: CALL_OW 307
2358: IFFALSE 2308
// RemoveUnit ( un ) ;
2360: LD_VAR 0 1
2364: PPUSH
2365: CALL_OW 64
// end ; end_of_file
2369: PPOPN 1
2371: END
// export function Action ; begin
2372: LD_INT 0
2374: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2375: LD_EXP 2
2379: PPUSH
2380: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2384: LD_STRING WT-Objectives-1
2386: PPUSH
2387: CALL_OW 337
// end ;
2391: LD_VAR 0 1
2395: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2396: LD_INT 7
2398: PPUSH
2399: LD_EXP 3
2403: PPUSH
2404: CALL_OW 292
2408: IFFALSE 2425
2410: GO 2412
2412: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2413: LD_EXP 3
2417: PPUSH
2418: LD_INT 7
2420: PPUSH
2421: CALL_OW 235
2425: END
// every 2 2$00 do
2426: GO 2428
2428: DISABLE
// PrepareReinforcements ( ) ;
2429: CALL 264 0 0
2433: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 469
2441: NOT
2442: IFFALSE 2457
2444: GO 2446
2446: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2447: LD_INT 8
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL_OW 424
2457: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2458: LD_INT 8
2460: PPUSH
2461: LD_INT 2
2463: PUSH
2464: LD_INT 34
2466: PUSH
2467: LD_INT 12
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 34
2476: PUSH
2477: LD_INT 51
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 70
2493: PUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 469
2501: NOT
2502: AND
2503: IFFALSE 2633
2505: GO 2507
2507: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2508: LD_STRING WT-med-1
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2518: LD_STRING WT-med-2
2520: PPUSH
2521: LD_INT 1
2523: NEG
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_EXP 3
2536: PPUSH
2537: CALL_OW 302
2541: PUSH
2542: LD_EXP 3
2546: PPUSH
2547: CALL_OW 255
2551: MUL
2552: PUSH
2553: LD_INT 7
2555: EQUAL
2556: PUSH
2557: LD_INT 1
2559: PLUS
2560: ARRAY
2561: PPUSH
2562: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2566: LD_STRING WT-med-3
2568: PPUSH
2569: LD_INT 1
2571: NEG
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 7
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 34
2592: PUSH
2593: LD_INT 10
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 69
2608: PUSH
2609: LD_INT 2
2611: GREATEREQUAL
2612: PUSH
2613: LD_INT 1
2615: PLUS
2616: ARRAY
2617: PPUSH
2618: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2622: LD_STRING WT-Main
2624: PPUSH
2625: CALL_OW 102
// YouWin ;
2629: CALL_OW 103
// end ; end_of_file
2633: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2634: LD_VAR 0 1
2638: PUSH
2639: LD_EXP 7
2643: IN
2644: IFFALSE 2662
// ruForces := ruForces diff un ;
2646: LD_ADDR_EXP 7
2650: PUSH
2651: LD_EXP 7
2655: PUSH
2656: LD_VAR 0 1
2660: DIFF
2661: ST_TO_ADDR
// end ;
2662: PPOPN 1
2664: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 43091 0 1
// if un = allianceHack then
2674: LD_VAR 0 1
2678: PUSH
2679: LD_EXP 2
2683: EQUAL
2684: IFFALSE 2693
// YouLost ( WT-HackLost ) ;
2686: LD_STRING WT-HackLost
2688: PPUSH
2689: CALL_OW 104
// if un in ruForces then
2693: LD_VAR 0 1
2697: PUSH
2698: LD_EXP 7
2702: IN
2703: IFFALSE 2721
// ruForces := ruForces diff un ;
2705: LD_ADDR_EXP 7
2709: PUSH
2710: LD_EXP 7
2714: PUSH
2715: LD_VAR 0 1
2719: DIFF
2720: ST_TO_ADDR
// end ;
2721: PPOPN 1
2723: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: CALL 43213 0 2
// if GetSide ( vehicle ) = 3 then
2738: LD_VAR 0 1
2742: PPUSH
2743: CALL_OW 255
2747: PUSH
2748: LD_INT 3
2750: EQUAL
2751: IFFALSE 2773
// ruForces := Join ( ruForces , vehicle ) ;
2753: LD_ADDR_EXP 7
2757: PUSH
2758: LD_EXP 7
2762: PPUSH
2763: LD_VAR 0 1
2767: PPUSH
2768: CALL 39633 0 2
2772: ST_TO_ADDR
// end ; end_of_file
2773: PPOPN 2
2775: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
2776: LD_INT 0
2778: PPUSH
// ar_miner := 81 ;
2779: LD_ADDR_EXP 16
2783: PUSH
2784: LD_INT 81
2786: ST_TO_ADDR
// ar_crane := 88 ;
2787: LD_ADDR_EXP 15
2791: PUSH
2792: LD_INT 88
2794: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
2795: LD_ADDR_EXP 10
2799: PUSH
2800: LD_INT 89
2802: ST_TO_ADDR
// us_hack := 99 ;
2803: LD_ADDR_EXP 11
2807: PUSH
2808: LD_INT 99
2810: ST_TO_ADDR
// us_artillery := 97 ;
2811: LD_ADDR_EXP 12
2815: PUSH
2816: LD_INT 97
2818: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2819: LD_ADDR_EXP 13
2823: PUSH
2824: LD_INT 91
2826: ST_TO_ADDR
// ar_mortar := 92 ;
2827: LD_ADDR_EXP 14
2831: PUSH
2832: LD_INT 92
2834: ST_TO_ADDR
// ru_flamethrower := 93 ;
2835: LD_ADDR_EXP 17
2839: PUSH
2840: LD_INT 93
2842: ST_TO_ADDR
// ru_radar := 98 ;
2843: LD_ADDR_EXP 9
2847: PUSH
2848: LD_INT 98
2850: ST_TO_ADDR
// tech_Artillery := 80 ;
2851: LD_ADDR_EXP 18
2855: PUSH
2856: LD_INT 80
2858: ST_TO_ADDR
// tech_RadMat := 81 ;
2859: LD_ADDR_EXP 19
2863: PUSH
2864: LD_INT 81
2866: ST_TO_ADDR
// tech_BasicTools := 82 ;
2867: LD_ADDR_EXP 20
2871: PUSH
2872: LD_INT 82
2874: ST_TO_ADDR
// tech_Cargo := 83 ;
2875: LD_ADDR_EXP 21
2879: PUSH
2880: LD_INT 83
2882: ST_TO_ADDR
// tech_Track := 84 ;
2883: LD_ADDR_EXP 22
2887: PUSH
2888: LD_INT 84
2890: ST_TO_ADDR
// tech_Crane := 85 ;
2891: LD_ADDR_EXP 23
2895: PUSH
2896: LD_INT 85
2898: ST_TO_ADDR
// tech_Bulldozer := 86 ;
2899: LD_ADDR_EXP 24
2903: PUSH
2904: LD_INT 86
2906: ST_TO_ADDR
// tech_Hovercraft := 87 ;
2907: LD_ADDR_EXP 25
2911: PUSH
2912: LD_INT 87
2914: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
2915: LD_ADDR_EXP 26
2919: PUSH
2920: LD_INT 88
2922: ST_TO_ADDR
// class_mastodont := 31 ;
2923: LD_ADDR_EXP 27
2927: PUSH
2928: LD_INT 31
2930: ST_TO_ADDR
// class_horse := 21 ;
2931: LD_ADDR_EXP 28
2935: PUSH
2936: LD_INT 21
2938: ST_TO_ADDR
// end ;
2939: LD_VAR 0 1
2943: RET
// every 1 do
2944: GO 2946
2946: DISABLE
// InitGlobalVariables ; end_of_file
2947: CALL 2776 0 0
2951: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
// if exist_mode then
2956: LD_VAR 0 2
2960: IFFALSE 2985
// unit := CreateCharacter ( prefix & ident ) else
2962: LD_ADDR_VAR 0 5
2966: PUSH
2967: LD_VAR 0 3
2971: PUSH
2972: LD_VAR 0 1
2976: STR
2977: PPUSH
2978: CALL_OW 34
2982: ST_TO_ADDR
2983: GO 3000
// unit := NewCharacter ( ident ) ;
2985: LD_ADDR_VAR 0 5
2989: PUSH
2990: LD_VAR 0 1
2994: PPUSH
2995: CALL_OW 25
2999: ST_TO_ADDR
// result := unit ;
3000: LD_ADDR_VAR 0 4
3004: PUSH
3005: LD_VAR 0 5
3009: ST_TO_ADDR
// end ;
3010: LD_VAR 0 4
3014: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3015: LD_INT 0
3017: PPUSH
3018: PPUSH
// if not side or not nation then
3019: LD_VAR 0 1
3023: NOT
3024: PUSH
3025: LD_VAR 0 2
3029: NOT
3030: OR
3031: IFFALSE 3035
// exit ;
3033: GO 3803
// case nation of nation_american :
3035: LD_VAR 0 2
3039: PUSH
3040: LD_INT 1
3042: DOUBLE
3043: EQUAL
3044: IFTRUE 3048
3046: GO 3262
3048: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3049: LD_ADDR_VAR 0 4
3053: PUSH
3054: LD_INT 35
3056: PUSH
3057: LD_INT 45
3059: PUSH
3060: LD_INT 46
3062: PUSH
3063: LD_INT 47
3065: PUSH
3066: LD_INT 82
3068: PUSH
3069: LD_INT 83
3071: PUSH
3072: LD_INT 84
3074: PUSH
3075: LD_INT 85
3077: PUSH
3078: LD_INT 86
3080: PUSH
3081: LD_INT 1
3083: PUSH
3084: LD_INT 2
3086: PUSH
3087: LD_INT 6
3089: PUSH
3090: LD_INT 15
3092: PUSH
3093: LD_INT 16
3095: PUSH
3096: LD_INT 7
3098: PUSH
3099: LD_INT 12
3101: PUSH
3102: LD_INT 13
3104: PUSH
3105: LD_INT 10
3107: PUSH
3108: LD_INT 14
3110: PUSH
3111: LD_INT 20
3113: PUSH
3114: LD_INT 21
3116: PUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 25
3122: PUSH
3123: LD_INT 32
3125: PUSH
3126: LD_INT 27
3128: PUSH
3129: LD_INT 36
3131: PUSH
3132: LD_INT 69
3134: PUSH
3135: LD_INT 39
3137: PUSH
3138: LD_INT 34
3140: PUSH
3141: LD_INT 40
3143: PUSH
3144: LD_INT 48
3146: PUSH
3147: LD_INT 49
3149: PUSH
3150: LD_INT 50
3152: PUSH
3153: LD_INT 51
3155: PUSH
3156: LD_INT 52
3158: PUSH
3159: LD_INT 53
3161: PUSH
3162: LD_INT 54
3164: PUSH
3165: LD_INT 55
3167: PUSH
3168: LD_INT 56
3170: PUSH
3171: LD_INT 57
3173: PUSH
3174: LD_INT 58
3176: PUSH
3177: LD_INT 59
3179: PUSH
3180: LD_INT 60
3182: PUSH
3183: LD_INT 61
3185: PUSH
3186: LD_INT 62
3188: PUSH
3189: LD_INT 80
3191: PUSH
3192: LD_INT 82
3194: PUSH
3195: LD_INT 83
3197: PUSH
3198: LD_INT 84
3200: PUSH
3201: LD_INT 85
3203: PUSH
3204: LD_INT 86
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: ST_TO_ADDR
3260: GO 3727
3262: LD_INT 2
3264: DOUBLE
3265: EQUAL
3266: IFTRUE 3270
3268: GO 3496
3270: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3271: LD_ADDR_VAR 0 4
3275: PUSH
3276: LD_INT 35
3278: PUSH
3279: LD_INT 45
3281: PUSH
3282: LD_INT 46
3284: PUSH
3285: LD_INT 47
3287: PUSH
3288: LD_INT 82
3290: PUSH
3291: LD_INT 83
3293: PUSH
3294: LD_INT 84
3296: PUSH
3297: LD_INT 85
3299: PUSH
3300: LD_INT 87
3302: PUSH
3303: LD_INT 70
3305: PUSH
3306: LD_INT 1
3308: PUSH
3309: LD_INT 11
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: LD_INT 4
3317: PUSH
3318: LD_INT 5
3320: PUSH
3321: LD_INT 6
3323: PUSH
3324: LD_INT 15
3326: PUSH
3327: LD_INT 18
3329: PUSH
3330: LD_INT 7
3332: PUSH
3333: LD_INT 17
3335: PUSH
3336: LD_INT 8
3338: PUSH
3339: LD_INT 20
3341: PUSH
3342: LD_INT 21
3344: PUSH
3345: LD_INT 22
3347: PUSH
3348: LD_INT 72
3350: PUSH
3351: LD_INT 26
3353: PUSH
3354: LD_INT 69
3356: PUSH
3357: LD_INT 39
3359: PUSH
3360: LD_INT 40
3362: PUSH
3363: LD_INT 41
3365: PUSH
3366: LD_INT 42
3368: PUSH
3369: LD_INT 43
3371: PUSH
3372: LD_INT 48
3374: PUSH
3375: LD_INT 49
3377: PUSH
3378: LD_INT 50
3380: PUSH
3381: LD_INT 51
3383: PUSH
3384: LD_INT 52
3386: PUSH
3387: LD_INT 53
3389: PUSH
3390: LD_INT 54
3392: PUSH
3393: LD_INT 55
3395: PUSH
3396: LD_INT 56
3398: PUSH
3399: LD_INT 60
3401: PUSH
3402: LD_INT 61
3404: PUSH
3405: LD_INT 62
3407: PUSH
3408: LD_INT 66
3410: PUSH
3411: LD_INT 67
3413: PUSH
3414: LD_INT 68
3416: PUSH
3417: LD_INT 81
3419: PUSH
3420: LD_INT 82
3422: PUSH
3423: LD_INT 83
3425: PUSH
3426: LD_INT 84
3428: PUSH
3429: LD_INT 85
3431: PUSH
3432: LD_INT 87
3434: PUSH
3435: LD_INT 88
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: ST_TO_ADDR
3494: GO 3727
3496: LD_INT 3
3498: DOUBLE
3499: EQUAL
3500: IFTRUE 3504
3502: GO 3726
3504: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3505: LD_ADDR_VAR 0 4
3509: PUSH
3510: LD_INT 46
3512: PUSH
3513: LD_INT 47
3515: PUSH
3516: LD_INT 1
3518: PUSH
3519: LD_INT 2
3521: PUSH
3522: LD_INT 82
3524: PUSH
3525: LD_INT 83
3527: PUSH
3528: LD_INT 84
3530: PUSH
3531: LD_INT 85
3533: PUSH
3534: LD_INT 86
3536: PUSH
3537: LD_INT 11
3539: PUSH
3540: LD_INT 9
3542: PUSH
3543: LD_INT 20
3545: PUSH
3546: LD_INT 19
3548: PUSH
3549: LD_INT 21
3551: PUSH
3552: LD_INT 24
3554: PUSH
3555: LD_INT 22
3557: PUSH
3558: LD_INT 25
3560: PUSH
3561: LD_INT 28
3563: PUSH
3564: LD_INT 29
3566: PUSH
3567: LD_INT 30
3569: PUSH
3570: LD_INT 31
3572: PUSH
3573: LD_INT 37
3575: PUSH
3576: LD_INT 38
3578: PUSH
3579: LD_INT 32
3581: PUSH
3582: LD_INT 27
3584: PUSH
3585: LD_INT 33
3587: PUSH
3588: LD_INT 69
3590: PUSH
3591: LD_INT 39
3593: PUSH
3594: LD_INT 34
3596: PUSH
3597: LD_INT 40
3599: PUSH
3600: LD_INT 71
3602: PUSH
3603: LD_INT 23
3605: PUSH
3606: LD_INT 44
3608: PUSH
3609: LD_INT 48
3611: PUSH
3612: LD_INT 49
3614: PUSH
3615: LD_INT 50
3617: PUSH
3618: LD_INT 51
3620: PUSH
3621: LD_INT 52
3623: PUSH
3624: LD_INT 53
3626: PUSH
3627: LD_INT 54
3629: PUSH
3630: LD_INT 55
3632: PUSH
3633: LD_INT 56
3635: PUSH
3636: LD_INT 57
3638: PUSH
3639: LD_INT 58
3641: PUSH
3642: LD_INT 59
3644: PUSH
3645: LD_INT 63
3647: PUSH
3648: LD_INT 64
3650: PUSH
3651: LD_INT 65
3653: PUSH
3654: LD_INT 82
3656: PUSH
3657: LD_INT 83
3659: PUSH
3660: LD_INT 84
3662: PUSH
3663: LD_INT 85
3665: PUSH
3666: LD_INT 86
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: ST_TO_ADDR
3724: GO 3727
3726: POP
// if state > - 1 and state < 3 then
3727: LD_VAR 0 3
3731: PUSH
3732: LD_INT 1
3734: NEG
3735: GREATER
3736: PUSH
3737: LD_VAR 0 3
3741: PUSH
3742: LD_INT 3
3744: LESS
3745: AND
3746: IFFALSE 3803
// for i in result do
3748: LD_ADDR_VAR 0 5
3752: PUSH
3753: LD_VAR 0 4
3757: PUSH
3758: FOR_IN
3759: IFFALSE 3801
// if GetTech ( i , side ) <> state then
3761: LD_VAR 0 5
3765: PPUSH
3766: LD_VAR 0 1
3770: PPUSH
3771: CALL_OW 321
3775: PUSH
3776: LD_VAR 0 3
3780: NONEQUAL
3781: IFFALSE 3799
// result := result diff i ;
3783: LD_ADDR_VAR 0 4
3787: PUSH
3788: LD_VAR 0 4
3792: PUSH
3793: LD_VAR 0 5
3797: DIFF
3798: ST_TO_ADDR
3799: GO 3758
3801: POP
3802: POP
// end ;
3803: LD_VAR 0 4
3807: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3808: LD_INT 0
3810: PPUSH
3811: PPUSH
3812: PPUSH
// result := true ;
3813: LD_ADDR_VAR 0 3
3817: PUSH
3818: LD_INT 1
3820: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3821: LD_ADDR_VAR 0 5
3825: PUSH
3826: LD_VAR 0 2
3830: PPUSH
3831: CALL_OW 480
3835: ST_TO_ADDR
// if not tmp then
3836: LD_VAR 0 5
3840: NOT
3841: IFFALSE 3845
// exit ;
3843: GO 3894
// for i in tmp do
3845: LD_ADDR_VAR 0 4
3849: PUSH
3850: LD_VAR 0 5
3854: PUSH
3855: FOR_IN
3856: IFFALSE 3892
// if GetTech ( i , side ) <> state_researched then
3858: LD_VAR 0 4
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: CALL_OW 321
3872: PUSH
3873: LD_INT 2
3875: NONEQUAL
3876: IFFALSE 3890
// begin result := false ;
3878: LD_ADDR_VAR 0 3
3882: PUSH
3883: LD_INT 0
3885: ST_TO_ADDR
// exit ;
3886: POP
3887: POP
3888: GO 3894
// end ;
3890: GO 3855
3892: POP
3893: POP
// end ;
3894: LD_VAR 0 3
3898: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3899: LD_INT 0
3901: PPUSH
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
3906: PPUSH
3907: PPUSH
3908: PPUSH
3909: PPUSH
3910: PPUSH
3911: PPUSH
3912: PPUSH
3913: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3914: LD_VAR 0 1
3918: NOT
3919: PUSH
3920: LD_VAR 0 1
3924: PPUSH
3925: CALL_OW 257
3929: PUSH
3930: LD_INT 9
3932: NONEQUAL
3933: OR
3934: IFFALSE 3938
// exit ;
3936: GO 4511
// side := GetSide ( unit ) ;
3938: LD_ADDR_VAR 0 9
3942: PUSH
3943: LD_VAR 0 1
3947: PPUSH
3948: CALL_OW 255
3952: ST_TO_ADDR
// tech_space := tech_spacanom ;
3953: LD_ADDR_VAR 0 12
3957: PUSH
3958: LD_INT 29
3960: ST_TO_ADDR
// tech_time := tech_taurad ;
3961: LD_ADDR_VAR 0 13
3965: PUSH
3966: LD_INT 28
3968: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3969: LD_ADDR_VAR 0 11
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 310
3983: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3984: LD_VAR 0 11
3988: PPUSH
3989: CALL_OW 247
3993: PUSH
3994: LD_INT 2
3996: EQUAL
3997: IFFALSE 4001
// exit ;
3999: GO 4511
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4001: LD_ADDR_VAR 0 8
4005: PUSH
4006: LD_INT 81
4008: PUSH
4009: LD_VAR 0 9
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 21
4023: PUSH
4024: LD_INT 3
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PPUSH
4039: CALL_OW 69
4043: ST_TO_ADDR
// if not tmp then
4044: LD_VAR 0 8
4048: NOT
4049: IFFALSE 4053
// exit ;
4051: GO 4511
// if in_unit then
4053: LD_VAR 0 11
4057: IFFALSE 4081
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4059: LD_ADDR_VAR 0 10
4063: PUSH
4064: LD_VAR 0 8
4068: PPUSH
4069: LD_VAR 0 11
4073: PPUSH
4074: CALL_OW 74
4078: ST_TO_ADDR
4079: GO 4101
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4081: LD_ADDR_VAR 0 10
4085: PUSH
4086: LD_VAR 0 8
4090: PPUSH
4091: LD_VAR 0 1
4095: PPUSH
4096: CALL_OW 74
4100: ST_TO_ADDR
// if not enemy then
4101: LD_VAR 0 10
4105: NOT
4106: IFFALSE 4110
// exit ;
4108: GO 4511
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4110: LD_VAR 0 11
4114: PUSH
4115: LD_VAR 0 11
4119: PPUSH
4120: LD_VAR 0 10
4124: PPUSH
4125: CALL_OW 296
4129: PUSH
4130: LD_INT 13
4132: GREATER
4133: AND
4134: PUSH
4135: LD_VAR 0 1
4139: PPUSH
4140: LD_VAR 0 10
4144: PPUSH
4145: CALL_OW 296
4149: PUSH
4150: LD_INT 12
4152: GREATER
4153: OR
4154: IFFALSE 4158
// exit ;
4156: GO 4511
// missile := [ 1 ] ;
4158: LD_ADDR_VAR 0 14
4162: PUSH
4163: LD_INT 1
4165: PUSH
4166: EMPTY
4167: LIST
4168: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4169: LD_VAR 0 9
4173: PPUSH
4174: LD_VAR 0 12
4178: PPUSH
4179: CALL_OW 325
4183: IFFALSE 4212
// missile := Replace ( missile , missile + 1 , 2 ) ;
4185: LD_ADDR_VAR 0 14
4189: PUSH
4190: LD_VAR 0 14
4194: PPUSH
4195: LD_VAR 0 14
4199: PUSH
4200: LD_INT 1
4202: PLUS
4203: PPUSH
4204: LD_INT 2
4206: PPUSH
4207: CALL_OW 1
4211: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4212: LD_VAR 0 9
4216: PPUSH
4217: LD_VAR 0 13
4221: PPUSH
4222: CALL_OW 325
4226: PUSH
4227: LD_VAR 0 10
4231: PPUSH
4232: CALL_OW 255
4236: PPUSH
4237: LD_VAR 0 13
4241: PPUSH
4242: CALL_OW 325
4246: NOT
4247: AND
4248: IFFALSE 4277
// missile := Replace ( missile , missile + 1 , 3 ) ;
4250: LD_ADDR_VAR 0 14
4254: PUSH
4255: LD_VAR 0 14
4259: PPUSH
4260: LD_VAR 0 14
4264: PUSH
4265: LD_INT 1
4267: PLUS
4268: PPUSH
4269: LD_INT 3
4271: PPUSH
4272: CALL_OW 1
4276: ST_TO_ADDR
// if missile < 2 then
4277: LD_VAR 0 14
4281: PUSH
4282: LD_INT 2
4284: LESS
4285: IFFALSE 4289
// exit ;
4287: GO 4511
// x := GetX ( enemy ) ;
4289: LD_ADDR_VAR 0 4
4293: PUSH
4294: LD_VAR 0 10
4298: PPUSH
4299: CALL_OW 250
4303: ST_TO_ADDR
// y := GetY ( enemy ) ;
4304: LD_ADDR_VAR 0 5
4308: PUSH
4309: LD_VAR 0 10
4313: PPUSH
4314: CALL_OW 251
4318: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4319: LD_ADDR_VAR 0 6
4323: PUSH
4324: LD_VAR 0 4
4328: PUSH
4329: LD_INT 1
4331: NEG
4332: PPUSH
4333: LD_INT 1
4335: PPUSH
4336: CALL_OW 12
4340: PLUS
4341: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4342: LD_ADDR_VAR 0 7
4346: PUSH
4347: LD_VAR 0 5
4351: PUSH
4352: LD_INT 1
4354: NEG
4355: PPUSH
4356: LD_INT 1
4358: PPUSH
4359: CALL_OW 12
4363: PLUS
4364: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4365: LD_VAR 0 6
4369: PPUSH
4370: LD_VAR 0 7
4374: PPUSH
4375: CALL_OW 488
4379: NOT
4380: IFFALSE 4402
// begin _x := x ;
4382: LD_ADDR_VAR 0 6
4386: PUSH
4387: LD_VAR 0 4
4391: ST_TO_ADDR
// _y := y ;
4392: LD_ADDR_VAR 0 7
4396: PUSH
4397: LD_VAR 0 5
4401: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4402: LD_ADDR_VAR 0 3
4406: PUSH
4407: LD_INT 1
4409: PPUSH
4410: LD_VAR 0 14
4414: PPUSH
4415: CALL_OW 12
4419: ST_TO_ADDR
// case i of 1 :
4420: LD_VAR 0 3
4424: PUSH
4425: LD_INT 1
4427: DOUBLE
4428: EQUAL
4429: IFTRUE 4433
4431: GO 4450
4433: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_VAR 0 10
4443: PPUSH
4444: CALL_OW 115
4448: GO 4511
4450: LD_INT 2
4452: DOUBLE
4453: EQUAL
4454: IFTRUE 4458
4456: GO 4480
4458: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4459: LD_VAR 0 1
4463: PPUSH
4464: LD_VAR 0 6
4468: PPUSH
4469: LD_VAR 0 7
4473: PPUSH
4474: CALL_OW 153
4478: GO 4511
4480: LD_INT 3
4482: DOUBLE
4483: EQUAL
4484: IFTRUE 4488
4486: GO 4510
4488: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_VAR 0 6
4498: PPUSH
4499: LD_VAR 0 7
4503: PPUSH
4504: CALL_OW 154
4508: GO 4511
4510: POP
// end ;
4511: LD_VAR 0 2
4515: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4516: LD_INT 0
4518: PPUSH
4519: PPUSH
4520: PPUSH
4521: PPUSH
4522: PPUSH
4523: PPUSH
// if not unit or not building then
4524: LD_VAR 0 1
4528: NOT
4529: PUSH
4530: LD_VAR 0 2
4534: NOT
4535: OR
4536: IFFALSE 4540
// exit ;
4538: GO 4698
// x := GetX ( building ) ;
4540: LD_ADDR_VAR 0 5
4544: PUSH
4545: LD_VAR 0 2
4549: PPUSH
4550: CALL_OW 250
4554: ST_TO_ADDR
// y := GetY ( building ) ;
4555: LD_ADDR_VAR 0 6
4559: PUSH
4560: LD_VAR 0 2
4564: PPUSH
4565: CALL_OW 251
4569: ST_TO_ADDR
// for i = 0 to 5 do
4570: LD_ADDR_VAR 0 4
4574: PUSH
4575: DOUBLE
4576: LD_INT 0
4578: DEC
4579: ST_TO_ADDR
4580: LD_INT 5
4582: PUSH
4583: FOR_TO
4584: IFFALSE 4696
// begin _x := ShiftX ( x , i , 3 ) ;
4586: LD_ADDR_VAR 0 7
4590: PUSH
4591: LD_VAR 0 5
4595: PPUSH
4596: LD_VAR 0 4
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: CALL_OW 272
4608: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4609: LD_ADDR_VAR 0 8
4613: PUSH
4614: LD_VAR 0 6
4618: PPUSH
4619: LD_VAR 0 4
4623: PPUSH
4624: LD_INT 3
4626: PPUSH
4627: CALL_OW 273
4631: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4632: LD_VAR 0 7
4636: PPUSH
4637: LD_VAR 0 8
4641: PPUSH
4642: CALL_OW 488
4646: NOT
4647: IFFALSE 4651
// continue ;
4649: GO 4583
// if HexInfo ( _x , _y ) = 0 then
4651: LD_VAR 0 7
4655: PPUSH
4656: LD_VAR 0 8
4660: PPUSH
4661: CALL_OW 428
4665: PUSH
4666: LD_INT 0
4668: EQUAL
4669: IFFALSE 4694
// begin ComMoveXY ( unit , _x , _y ) ;
4671: LD_VAR 0 1
4675: PPUSH
4676: LD_VAR 0 7
4680: PPUSH
4681: LD_VAR 0 8
4685: PPUSH
4686: CALL_OW 111
// exit ;
4690: POP
4691: POP
4692: GO 4698
// end ; end ;
4694: GO 4583
4696: POP
4697: POP
// end ;
4698: LD_VAR 0 3
4702: RET
// export function ScanBase ( side , base_area ) ; begin
4703: LD_INT 0
4705: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: LD_VAR 0 2
4715: PPUSH
4716: LD_INT 81
4718: PUSH
4719: LD_VAR 0 1
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PPUSH
4728: CALL_OW 70
4732: ST_TO_ADDR
// end ;
4733: LD_VAR 0 3
4737: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4738: LD_INT 0
4740: PPUSH
4741: PPUSH
4742: PPUSH
4743: PPUSH
// result := false ;
4744: LD_ADDR_VAR 0 2
4748: PUSH
4749: LD_INT 0
4751: ST_TO_ADDR
// side := GetSide ( unit ) ;
4752: LD_ADDR_VAR 0 3
4756: PUSH
4757: LD_VAR 0 1
4761: PPUSH
4762: CALL_OW 255
4766: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4767: LD_ADDR_VAR 0 4
4771: PUSH
4772: LD_VAR 0 1
4776: PPUSH
4777: CALL_OW 248
4781: ST_TO_ADDR
// case nat of 1 :
4782: LD_VAR 0 4
4786: PUSH
4787: LD_INT 1
4789: DOUBLE
4790: EQUAL
4791: IFTRUE 4795
4793: GO 4806
4795: POP
// tech := tech_lassight ; 2 :
4796: LD_ADDR_VAR 0 5
4800: PUSH
4801: LD_INT 12
4803: ST_TO_ADDR
4804: GO 4845
4806: LD_INT 2
4808: DOUBLE
4809: EQUAL
4810: IFTRUE 4814
4812: GO 4825
4814: POP
// tech := tech_mortar ; 3 :
4815: LD_ADDR_VAR 0 5
4819: PUSH
4820: LD_INT 41
4822: ST_TO_ADDR
4823: GO 4845
4825: LD_INT 3
4827: DOUBLE
4828: EQUAL
4829: IFTRUE 4833
4831: GO 4844
4833: POP
// tech := tech_bazooka ; end ;
4834: LD_ADDR_VAR 0 5
4838: PUSH
4839: LD_INT 44
4841: ST_TO_ADDR
4842: GO 4845
4844: POP
// if Researched ( side , tech ) then
4845: LD_VAR 0 3
4849: PPUSH
4850: LD_VAR 0 5
4854: PPUSH
4855: CALL_OW 325
4859: IFFALSE 4886
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: LD_INT 5
4868: PUSH
4869: LD_INT 8
4871: PUSH
4872: LD_INT 9
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: PUSH
4880: LD_VAR 0 4
4884: ARRAY
4885: ST_TO_ADDR
// end ;
4886: LD_VAR 0 2
4890: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4891: LD_INT 0
4893: PPUSH
4894: PPUSH
4895: PPUSH
// if not mines then
4896: LD_VAR 0 2
4900: NOT
4901: IFFALSE 4905
// exit ;
4903: GO 5049
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4905: LD_ADDR_VAR 0 5
4909: PUSH
4910: LD_INT 81
4912: PUSH
4913: LD_VAR 0 1
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PUSH
4922: LD_INT 3
4924: PUSH
4925: LD_INT 21
4927: PUSH
4928: LD_INT 3
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: ST_TO_ADDR
// for i in mines do
4948: LD_ADDR_VAR 0 4
4952: PUSH
4953: LD_VAR 0 2
4957: PUSH
4958: FOR_IN
4959: IFFALSE 5047
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4961: LD_VAR 0 4
4965: PUSH
4966: LD_INT 1
4968: ARRAY
4969: PPUSH
4970: LD_VAR 0 4
4974: PUSH
4975: LD_INT 2
4977: ARRAY
4978: PPUSH
4979: CALL_OW 458
4983: NOT
4984: IFFALSE 4988
// continue ;
4986: GO 4958
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4988: LD_VAR 0 4
4992: PUSH
4993: LD_INT 1
4995: ARRAY
4996: PPUSH
4997: LD_VAR 0 4
5001: PUSH
5002: LD_INT 2
5004: ARRAY
5005: PPUSH
5006: CALL_OW 428
5010: PUSH
5011: LD_VAR 0 5
5015: IN
5016: IFFALSE 5045
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5018: LD_VAR 0 4
5022: PUSH
5023: LD_INT 1
5025: ARRAY
5026: PPUSH
5027: LD_VAR 0 4
5031: PUSH
5032: LD_INT 2
5034: ARRAY
5035: PPUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL_OW 456
// end ;
5045: GO 4958
5047: POP
5048: POP
// end ;
5049: LD_VAR 0 3
5053: RET
// export function Count ( array ) ; var i ; begin
5054: LD_INT 0
5056: PPUSH
5057: PPUSH
// result := 0 ;
5058: LD_ADDR_VAR 0 2
5062: PUSH
5063: LD_INT 0
5065: ST_TO_ADDR
// for i in array do
5066: LD_ADDR_VAR 0 3
5070: PUSH
5071: LD_VAR 0 1
5075: PUSH
5076: FOR_IN
5077: IFFALSE 5101
// if i then
5079: LD_VAR 0 3
5083: IFFALSE 5099
// result := result + 1 ;
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_VAR 0 2
5094: PUSH
5095: LD_INT 1
5097: PLUS
5098: ST_TO_ADDR
5099: GO 5076
5101: POP
5102: POP
// end ;
5103: LD_VAR 0 2
5107: RET
// export function IsEmpty ( building ) ; begin
5108: LD_INT 0
5110: PPUSH
// if not building then
5111: LD_VAR 0 1
5115: NOT
5116: IFFALSE 5120
// exit ;
5118: GO 5163
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5120: LD_ADDR_VAR 0 2
5124: PUSH
5125: LD_VAR 0 1
5129: PUSH
5130: LD_INT 22
5132: PUSH
5133: LD_VAR 0 1
5137: PPUSH
5138: CALL_OW 255
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: LD_INT 58
5149: PUSH
5150: EMPTY
5151: LIST
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PPUSH
5157: CALL_OW 69
5161: IN
5162: ST_TO_ADDR
// end ;
5163: LD_VAR 0 2
5167: RET
// export function IsNotFull ( building ) ; begin
5168: LD_INT 0
5170: PPUSH
// if not building then
5171: LD_VAR 0 1
5175: NOT
5176: IFFALSE 5180
// exit ;
5178: GO 5199
// result := UnitsInside ( building ) < 6 ;
5180: LD_ADDR_VAR 0 2
5184: PUSH
5185: LD_VAR 0 1
5189: PPUSH
5190: CALL_OW 313
5194: PUSH
5195: LD_INT 6
5197: LESS
5198: ST_TO_ADDR
// end ;
5199: LD_VAR 0 2
5203: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5204: LD_INT 0
5206: PPUSH
5207: PPUSH
5208: PPUSH
5209: PPUSH
// tmp := [ ] ;
5210: LD_ADDR_VAR 0 3
5214: PUSH
5215: EMPTY
5216: ST_TO_ADDR
// list := [ ] ;
5217: LD_ADDR_VAR 0 5
5221: PUSH
5222: EMPTY
5223: ST_TO_ADDR
// for i = 16 to 25 do
5224: LD_ADDR_VAR 0 4
5228: PUSH
5229: DOUBLE
5230: LD_INT 16
5232: DEC
5233: ST_TO_ADDR
5234: LD_INT 25
5236: PUSH
5237: FOR_TO
5238: IFFALSE 5311
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5240: LD_ADDR_VAR 0 3
5244: PUSH
5245: LD_VAR 0 3
5249: PUSH
5250: LD_INT 22
5252: PUSH
5253: LD_VAR 0 1
5257: PPUSH
5258: CALL_OW 255
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 91
5269: PUSH
5270: LD_VAR 0 1
5274: PUSH
5275: LD_INT 6
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 30
5285: PUSH
5286: LD_VAR 0 4
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: LIST
5299: PUSH
5300: EMPTY
5301: LIST
5302: PPUSH
5303: CALL_OW 69
5307: ADD
5308: ST_TO_ADDR
5309: GO 5237
5311: POP
5312: POP
// for i = 1 to tmp do
5313: LD_ADDR_VAR 0 4
5317: PUSH
5318: DOUBLE
5319: LD_INT 1
5321: DEC
5322: ST_TO_ADDR
5323: LD_VAR 0 3
5327: PUSH
5328: FOR_TO
5329: IFFALSE 5417
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5331: LD_ADDR_VAR 0 5
5335: PUSH
5336: LD_VAR 0 5
5340: PUSH
5341: LD_VAR 0 3
5345: PUSH
5346: LD_VAR 0 4
5350: ARRAY
5351: PPUSH
5352: CALL_OW 266
5356: PUSH
5357: LD_VAR 0 3
5361: PUSH
5362: LD_VAR 0 4
5366: ARRAY
5367: PPUSH
5368: CALL_OW 250
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: LD_VAR 0 4
5382: ARRAY
5383: PPUSH
5384: CALL_OW 251
5388: PUSH
5389: LD_VAR 0 3
5393: PUSH
5394: LD_VAR 0 4
5398: ARRAY
5399: PPUSH
5400: CALL_OW 254
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: ADD
5414: ST_TO_ADDR
5415: GO 5328
5417: POP
5418: POP
// result := list ;
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 5
5428: ST_TO_ADDR
// end ;
5429: LD_VAR 0 2
5433: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5434: LD_INT 0
5436: PPUSH
5437: PPUSH
5438: PPUSH
5439: PPUSH
5440: PPUSH
5441: PPUSH
5442: PPUSH
// if not factory then
5443: LD_VAR 0 1
5447: NOT
5448: IFFALSE 5452
// exit ;
5450: GO 6045
// if control = control_apeman then
5452: LD_VAR 0 4
5456: PUSH
5457: LD_INT 5
5459: EQUAL
5460: IFFALSE 5569
// begin tmp := UnitsInside ( factory ) ;
5462: LD_ADDR_VAR 0 8
5466: PUSH
5467: LD_VAR 0 1
5471: PPUSH
5472: CALL_OW 313
5476: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5477: LD_VAR 0 8
5481: PPUSH
5482: LD_INT 25
5484: PUSH
5485: LD_INT 12
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL_OW 72
5496: NOT
5497: IFFALSE 5507
// control := control_manual ;
5499: LD_ADDR_VAR 0 4
5503: PUSH
5504: LD_INT 1
5506: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5507: LD_ADDR_VAR 0 8
5511: PUSH
5512: LD_VAR 0 1
5516: PPUSH
5517: CALL 5204 0 1
5521: ST_TO_ADDR
// if tmp then
5522: LD_VAR 0 8
5526: IFFALSE 5569
// begin for i in tmp do
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_VAR 0 8
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5567
// if i [ 1 ] = b_ext_radio then
5541: LD_VAR 0 7
5545: PUSH
5546: LD_INT 1
5548: ARRAY
5549: PUSH
5550: LD_INT 22
5552: EQUAL
5553: IFFALSE 5565
// begin control := control_remote ;
5555: LD_ADDR_VAR 0 4
5559: PUSH
5560: LD_INT 2
5562: ST_TO_ADDR
// break ;
5563: GO 5567
// end ;
5565: GO 5538
5567: POP
5568: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5569: LD_VAR 0 1
5573: PPUSH
5574: LD_VAR 0 2
5578: PPUSH
5579: LD_VAR 0 3
5583: PPUSH
5584: LD_VAR 0 4
5588: PPUSH
5589: LD_VAR 0 5
5593: PPUSH
5594: CALL_OW 448
5598: IFFALSE 5633
// begin result := [ chassis , engine , control , weapon ] ;
5600: LD_ADDR_VAR 0 6
5604: PUSH
5605: LD_VAR 0 2
5609: PUSH
5610: LD_VAR 0 3
5614: PUSH
5615: LD_VAR 0 4
5619: PUSH
5620: LD_VAR 0 5
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
// exit ;
5631: GO 6045
// end ; _chassis := AvailableChassisList ( factory ) ;
5633: LD_ADDR_VAR 0 9
5637: PUSH
5638: LD_VAR 0 1
5642: PPUSH
5643: CALL_OW 475
5647: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5648: LD_ADDR_VAR 0 11
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: CALL_OW 476
5662: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5663: LD_ADDR_VAR 0 12
5667: PUSH
5668: LD_VAR 0 1
5672: PPUSH
5673: CALL_OW 477
5677: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5678: LD_ADDR_VAR 0 10
5682: PUSH
5683: LD_VAR 0 1
5687: PPUSH
5688: CALL_OW 478
5692: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5693: LD_VAR 0 9
5697: NOT
5698: PUSH
5699: LD_VAR 0 11
5703: NOT
5704: OR
5705: PUSH
5706: LD_VAR 0 12
5710: NOT
5711: OR
5712: PUSH
5713: LD_VAR 0 10
5717: NOT
5718: OR
5719: IFFALSE 5754
// begin result := [ chassis , engine , control , weapon ] ;
5721: LD_ADDR_VAR 0 6
5725: PUSH
5726: LD_VAR 0 2
5730: PUSH
5731: LD_VAR 0 3
5735: PUSH
5736: LD_VAR 0 4
5740: PUSH
5741: LD_VAR 0 5
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: ST_TO_ADDR
// exit ;
5752: GO 6045
// end ; if not chassis in _chassis then
5754: LD_VAR 0 2
5758: PUSH
5759: LD_VAR 0 9
5763: IN
5764: NOT
5765: IFFALSE 5791
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5767: LD_ADDR_VAR 0 2
5771: PUSH
5772: LD_VAR 0 9
5776: PUSH
5777: LD_INT 1
5779: PPUSH
5780: LD_VAR 0 9
5784: PPUSH
5785: CALL_OW 12
5789: ARRAY
5790: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5791: LD_VAR 0 2
5795: PPUSH
5796: LD_VAR 0 3
5800: PPUSH
5801: CALL 6050 0 2
5805: NOT
5806: IFFALSE 5865
// repeat engine := _engine [ 1 ] ;
5808: LD_ADDR_VAR 0 3
5812: PUSH
5813: LD_VAR 0 11
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5822: LD_ADDR_VAR 0 11
5826: PUSH
5827: LD_VAR 0 11
5831: PPUSH
5832: LD_INT 1
5834: PPUSH
5835: CALL_OW 3
5839: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5840: LD_VAR 0 2
5844: PPUSH
5845: LD_VAR 0 3
5849: PPUSH
5850: CALL 6050 0 2
5854: PUSH
5855: LD_VAR 0 11
5859: PUSH
5860: EMPTY
5861: EQUAL
5862: OR
5863: IFFALSE 5808
// if not control in _control then
5865: LD_VAR 0 4
5869: PUSH
5870: LD_VAR 0 12
5874: IN
5875: NOT
5876: IFFALSE 5902
// control := _control [ rand ( 1 , _control ) ] ;
5878: LD_ADDR_VAR 0 4
5882: PUSH
5883: LD_VAR 0 12
5887: PUSH
5888: LD_INT 1
5890: PPUSH
5891: LD_VAR 0 12
5895: PPUSH
5896: CALL_OW 12
5900: ARRAY
5901: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5902: LD_VAR 0 2
5906: PPUSH
5907: LD_VAR 0 5
5911: PPUSH
5912: CALL 6270 0 2
5916: NOT
5917: IFFALSE 5976
// repeat weapon := _weapon [ 1 ] ;
5919: LD_ADDR_VAR 0 5
5923: PUSH
5924: LD_VAR 0 10
5928: PUSH
5929: LD_INT 1
5931: ARRAY
5932: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5933: LD_ADDR_VAR 0 10
5937: PUSH
5938: LD_VAR 0 10
5942: PPUSH
5943: LD_INT 1
5945: PPUSH
5946: CALL_OW 3
5950: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5951: LD_VAR 0 2
5955: PPUSH
5956: LD_VAR 0 5
5960: PPUSH
5961: CALL 6270 0 2
5965: PUSH
5966: LD_VAR 0 10
5970: PUSH
5971: EMPTY
5972: EQUAL
5973: OR
5974: IFFALSE 5919
// result := [ ] ;
5976: LD_ADDR_VAR 0 6
5980: PUSH
5981: EMPTY
5982: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_VAR 0 2
5992: PPUSH
5993: LD_VAR 0 3
5997: PPUSH
5998: LD_VAR 0 4
6002: PPUSH
6003: LD_VAR 0 5
6007: PPUSH
6008: CALL_OW 448
6012: IFFALSE 6045
// result := [ chassis , engine , control , weapon ] ;
6014: LD_ADDR_VAR 0 6
6018: PUSH
6019: LD_VAR 0 2
6023: PUSH
6024: LD_VAR 0 3
6028: PUSH
6029: LD_VAR 0 4
6033: PUSH
6034: LD_VAR 0 5
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: ST_TO_ADDR
// end ;
6045: LD_VAR 0 6
6049: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6050: LD_INT 0
6052: PPUSH
// if not chassis or not engine then
6053: LD_VAR 0 1
6057: NOT
6058: PUSH
6059: LD_VAR 0 2
6063: NOT
6064: OR
6065: IFFALSE 6069
// exit ;
6067: GO 6265
// case engine of engine_solar :
6069: LD_VAR 0 2
6073: PUSH
6074: LD_INT 2
6076: DOUBLE
6077: EQUAL
6078: IFTRUE 6082
6080: GO 6120
6082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6083: LD_ADDR_VAR 0 3
6087: PUSH
6088: LD_INT 11
6090: PUSH
6091: LD_INT 12
6093: PUSH
6094: LD_INT 13
6096: PUSH
6097: LD_INT 14
6099: PUSH
6100: LD_INT 1
6102: PUSH
6103: LD_INT 2
6105: PUSH
6106: LD_INT 3
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: ST_TO_ADDR
6118: GO 6249
6120: LD_INT 1
6122: DOUBLE
6123: EQUAL
6124: IFTRUE 6128
6126: GO 6190
6128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6129: LD_ADDR_VAR 0 3
6133: PUSH
6134: LD_INT 11
6136: PUSH
6137: LD_INT 12
6139: PUSH
6140: LD_INT 13
6142: PUSH
6143: LD_INT 14
6145: PUSH
6146: LD_INT 1
6148: PUSH
6149: LD_INT 2
6151: PUSH
6152: LD_INT 3
6154: PUSH
6155: LD_INT 4
6157: PUSH
6158: LD_INT 5
6160: PUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 23
6166: PUSH
6167: LD_INT 22
6169: PUSH
6170: LD_INT 24
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: ST_TO_ADDR
6188: GO 6249
6190: LD_INT 3
6192: DOUBLE
6193: EQUAL
6194: IFTRUE 6198
6196: GO 6248
6198: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6199: LD_ADDR_VAR 0 3
6203: PUSH
6204: LD_INT 13
6206: PUSH
6207: LD_INT 14
6209: PUSH
6210: LD_INT 2
6212: PUSH
6213: LD_INT 3
6215: PUSH
6216: LD_INT 4
6218: PUSH
6219: LD_INT 5
6221: PUSH
6222: LD_INT 21
6224: PUSH
6225: LD_INT 22
6227: PUSH
6228: LD_INT 23
6230: PUSH
6231: LD_INT 24
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: ST_TO_ADDR
6246: GO 6249
6248: POP
// result := ( chassis in result ) ;
6249: LD_ADDR_VAR 0 3
6253: PUSH
6254: LD_VAR 0 1
6258: PUSH
6259: LD_VAR 0 3
6263: IN
6264: ST_TO_ADDR
// end ;
6265: LD_VAR 0 3
6269: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6270: LD_INT 0
6272: PPUSH
// if not chassis or not weapon then
6273: LD_VAR 0 1
6277: NOT
6278: PUSH
6279: LD_VAR 0 2
6283: NOT
6284: OR
6285: IFFALSE 6289
// exit ;
6287: GO 7351
// case weapon of us_machine_gun :
6289: LD_VAR 0 2
6293: PUSH
6294: LD_INT 2
6296: DOUBLE
6297: EQUAL
6298: IFTRUE 6302
6300: GO 6332
6302: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6303: LD_ADDR_VAR 0 3
6307: PUSH
6308: LD_INT 1
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: LD_INT 4
6319: PUSH
6320: LD_INT 5
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: ST_TO_ADDR
6330: GO 7335
6332: LD_INT 3
6334: DOUBLE
6335: EQUAL
6336: IFTRUE 6340
6338: GO 6370
6340: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6341: LD_ADDR_VAR 0 3
6345: PUSH
6346: LD_INT 1
6348: PUSH
6349: LD_INT 2
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 5
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: ST_TO_ADDR
6368: GO 7335
6370: LD_INT 11
6372: DOUBLE
6373: EQUAL
6374: IFTRUE 6378
6376: GO 6408
6378: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6379: LD_ADDR_VAR 0 3
6383: PUSH
6384: LD_INT 1
6386: PUSH
6387: LD_INT 2
6389: PUSH
6390: LD_INT 3
6392: PUSH
6393: LD_INT 4
6395: PUSH
6396: LD_INT 5
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: ST_TO_ADDR
6406: GO 7335
6408: LD_INT 4
6410: DOUBLE
6411: EQUAL
6412: IFTRUE 6416
6414: GO 6442
6416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6417: LD_ADDR_VAR 0 3
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 4
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: ST_TO_ADDR
6440: GO 7335
6442: LD_INT 5
6444: DOUBLE
6445: EQUAL
6446: IFTRUE 6450
6448: GO 6476
6450: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6451: LD_ADDR_VAR 0 3
6455: PUSH
6456: LD_INT 2
6458: PUSH
6459: LD_INT 3
6461: PUSH
6462: LD_INT 4
6464: PUSH
6465: LD_INT 5
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: ST_TO_ADDR
6474: GO 7335
6476: LD_INT 9
6478: DOUBLE
6479: EQUAL
6480: IFTRUE 6484
6482: GO 6510
6484: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: LD_INT 3
6495: PUSH
6496: LD_INT 4
6498: PUSH
6499: LD_INT 5
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: ST_TO_ADDR
6508: GO 7335
6510: LD_INT 7
6512: DOUBLE
6513: EQUAL
6514: IFTRUE 6518
6516: GO 6544
6518: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6519: LD_ADDR_VAR 0 3
6523: PUSH
6524: LD_INT 2
6526: PUSH
6527: LD_INT 3
6529: PUSH
6530: LD_INT 4
6532: PUSH
6533: LD_INT 5
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: ST_TO_ADDR
6542: GO 7335
6544: LD_INT 12
6546: DOUBLE
6547: EQUAL
6548: IFTRUE 6552
6550: GO 6578
6552: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6553: LD_ADDR_VAR 0 3
6557: PUSH
6558: LD_INT 2
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: LD_INT 4
6566: PUSH
6567: LD_INT 5
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: ST_TO_ADDR
6576: GO 7335
6578: LD_INT 13
6580: DOUBLE
6581: EQUAL
6582: IFTRUE 6586
6584: GO 6612
6586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6587: LD_ADDR_VAR 0 3
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: LD_INT 4
6600: PUSH
6601: LD_INT 5
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: ST_TO_ADDR
6610: GO 7335
6612: LD_INT 14
6614: DOUBLE
6615: EQUAL
6616: IFTRUE 6620
6618: GO 6638
6620: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6621: LD_ADDR_VAR 0 3
6625: PUSH
6626: LD_INT 4
6628: PUSH
6629: LD_INT 5
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: ST_TO_ADDR
6636: GO 7335
6638: LD_INT 6
6640: DOUBLE
6641: EQUAL
6642: IFTRUE 6646
6644: GO 6664
6646: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: LD_INT 4
6654: PUSH
6655: LD_INT 5
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: ST_TO_ADDR
6662: GO 7335
6664: LD_INT 10
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6690
6672: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6673: LD_ADDR_VAR 0 3
6677: PUSH
6678: LD_INT 4
6680: PUSH
6681: LD_INT 5
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: ST_TO_ADDR
6688: GO 7335
6690: LD_INT 22
6692: DOUBLE
6693: EQUAL
6694: IFTRUE 6698
6696: GO 6724
6698: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6699: LD_ADDR_VAR 0 3
6703: PUSH
6704: LD_INT 11
6706: PUSH
6707: LD_INT 12
6709: PUSH
6710: LD_INT 13
6712: PUSH
6713: LD_INT 14
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: ST_TO_ADDR
6722: GO 7335
6724: LD_INT 23
6726: DOUBLE
6727: EQUAL
6728: IFTRUE 6732
6730: GO 6758
6732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6733: LD_ADDR_VAR 0 3
6737: PUSH
6738: LD_INT 11
6740: PUSH
6741: LD_INT 12
6743: PUSH
6744: LD_INT 13
6746: PUSH
6747: LD_INT 14
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: ST_TO_ADDR
6756: GO 7335
6758: LD_INT 24
6760: DOUBLE
6761: EQUAL
6762: IFTRUE 6766
6764: GO 6792
6766: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6767: LD_ADDR_VAR 0 3
6771: PUSH
6772: LD_INT 11
6774: PUSH
6775: LD_INT 12
6777: PUSH
6778: LD_INT 13
6780: PUSH
6781: LD_INT 14
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: ST_TO_ADDR
6790: GO 7335
6792: LD_INT 30
6794: DOUBLE
6795: EQUAL
6796: IFTRUE 6800
6798: GO 6826
6800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6801: LD_ADDR_VAR 0 3
6805: PUSH
6806: LD_INT 11
6808: PUSH
6809: LD_INT 12
6811: PUSH
6812: LD_INT 13
6814: PUSH
6815: LD_INT 14
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: ST_TO_ADDR
6824: GO 7335
6826: LD_INT 25
6828: DOUBLE
6829: EQUAL
6830: IFTRUE 6834
6832: GO 6852
6834: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6835: LD_ADDR_VAR 0 3
6839: PUSH
6840: LD_INT 13
6842: PUSH
6843: LD_INT 14
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: ST_TO_ADDR
6850: GO 7335
6852: LD_INT 27
6854: DOUBLE
6855: EQUAL
6856: IFTRUE 6860
6858: GO 6878
6860: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6861: LD_ADDR_VAR 0 3
6865: PUSH
6866: LD_INT 13
6868: PUSH
6869: LD_INT 14
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: ST_TO_ADDR
6876: GO 7335
6878: LD_EXP 14
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6914
6888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: LD_INT 11
6896: PUSH
6897: LD_INT 12
6899: PUSH
6900: LD_INT 13
6902: PUSH
6903: LD_INT 14
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: ST_TO_ADDR
6912: GO 7335
6914: LD_INT 28
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 6940
6922: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6923: LD_ADDR_VAR 0 3
6927: PUSH
6928: LD_INT 13
6930: PUSH
6931: LD_INT 14
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: ST_TO_ADDR
6938: GO 7335
6940: LD_INT 29
6942: DOUBLE
6943: EQUAL
6944: IFTRUE 6948
6946: GO 6966
6948: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6949: LD_ADDR_VAR 0 3
6953: PUSH
6954: LD_INT 13
6956: PUSH
6957: LD_INT 14
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: ST_TO_ADDR
6964: GO 7335
6966: LD_INT 31
6968: DOUBLE
6969: EQUAL
6970: IFTRUE 6974
6972: GO 6992
6974: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6975: LD_ADDR_VAR 0 3
6979: PUSH
6980: LD_INT 13
6982: PUSH
6983: LD_INT 14
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: ST_TO_ADDR
6990: GO 7335
6992: LD_INT 26
6994: DOUBLE
6995: EQUAL
6996: IFTRUE 7000
6998: GO 7018
7000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7001: LD_ADDR_VAR 0 3
7005: PUSH
7006: LD_INT 13
7008: PUSH
7009: LD_INT 14
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: ST_TO_ADDR
7016: GO 7335
7018: LD_INT 42
7020: DOUBLE
7021: EQUAL
7022: IFTRUE 7026
7024: GO 7052
7026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7027: LD_ADDR_VAR 0 3
7031: PUSH
7032: LD_INT 21
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_INT 23
7040: PUSH
7041: LD_INT 24
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: ST_TO_ADDR
7050: GO 7335
7052: LD_INT 43
7054: DOUBLE
7055: EQUAL
7056: IFTRUE 7060
7058: GO 7086
7060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_INT 21
7068: PUSH
7069: LD_INT 22
7071: PUSH
7072: LD_INT 23
7074: PUSH
7075: LD_INT 24
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: ST_TO_ADDR
7084: GO 7335
7086: LD_INT 44
7088: DOUBLE
7089: EQUAL
7090: IFTRUE 7094
7092: GO 7120
7094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_INT 23
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: ST_TO_ADDR
7118: GO 7335
7120: LD_INT 45
7122: DOUBLE
7123: EQUAL
7124: IFTRUE 7128
7126: GO 7154
7128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7129: LD_ADDR_VAR 0 3
7133: PUSH
7134: LD_INT 21
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_INT 23
7142: PUSH
7143: LD_INT 24
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: ST_TO_ADDR
7152: GO 7335
7154: LD_INT 49
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7188
7162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7163: LD_ADDR_VAR 0 3
7167: PUSH
7168: LD_INT 21
7170: PUSH
7171: LD_INT 22
7173: PUSH
7174: LD_INT 23
7176: PUSH
7177: LD_INT 24
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: ST_TO_ADDR
7186: GO 7335
7188: LD_INT 51
7190: DOUBLE
7191: EQUAL
7192: IFTRUE 7196
7194: GO 7222
7196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_INT 21
7204: PUSH
7205: LD_INT 22
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: LD_INT 24
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: ST_TO_ADDR
7220: GO 7335
7222: LD_INT 52
7224: DOUBLE
7225: EQUAL
7226: IFTRUE 7230
7228: GO 7256
7230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: LD_INT 21
7238: PUSH
7239: LD_INT 22
7241: PUSH
7242: LD_INT 23
7244: PUSH
7245: LD_INT 24
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: ST_TO_ADDR
7254: GO 7335
7256: LD_INT 53
7258: DOUBLE
7259: EQUAL
7260: IFTRUE 7264
7262: GO 7282
7264: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7265: LD_ADDR_VAR 0 3
7269: PUSH
7270: LD_INT 23
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: ST_TO_ADDR
7280: GO 7335
7282: LD_INT 46
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7308
7290: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7291: LD_ADDR_VAR 0 3
7295: PUSH
7296: LD_INT 23
7298: PUSH
7299: LD_INT 24
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: ST_TO_ADDR
7306: GO 7335
7308: LD_INT 47
7310: DOUBLE
7311: EQUAL
7312: IFTRUE 7316
7314: GO 7334
7316: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: LD_INT 23
7324: PUSH
7325: LD_INT 24
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: ST_TO_ADDR
7332: GO 7335
7334: POP
// result := ( chassis in result ) ;
7335: LD_ADDR_VAR 0 3
7339: PUSH
7340: LD_VAR 0 1
7344: PUSH
7345: LD_VAR 0 3
7349: IN
7350: ST_TO_ADDR
// end ;
7351: LD_VAR 0 3
7355: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7356: LD_INT 0
7358: PPUSH
7359: PPUSH
7360: PPUSH
7361: PPUSH
7362: PPUSH
7363: PPUSH
7364: PPUSH
// result := array ;
7365: LD_ADDR_VAR 0 5
7369: PUSH
7370: LD_VAR 0 1
7374: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7375: LD_VAR 0 1
7379: NOT
7380: PUSH
7381: LD_VAR 0 2
7385: NOT
7386: OR
7387: PUSH
7388: LD_VAR 0 3
7392: NOT
7393: OR
7394: PUSH
7395: LD_VAR 0 2
7399: PUSH
7400: LD_VAR 0 1
7404: GREATER
7405: OR
7406: PUSH
7407: LD_VAR 0 3
7411: PUSH
7412: LD_VAR 0 1
7416: GREATER
7417: OR
7418: IFFALSE 7422
// exit ;
7420: GO 7718
// if direction then
7422: LD_VAR 0 4
7426: IFFALSE 7490
// begin d := 1 ;
7428: LD_ADDR_VAR 0 9
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if i_from > i_to then
7436: LD_VAR 0 2
7440: PUSH
7441: LD_VAR 0 3
7445: GREATER
7446: IFFALSE 7472
// length := ( array - i_from ) + i_to else
7448: LD_ADDR_VAR 0 11
7452: PUSH
7453: LD_VAR 0 1
7457: PUSH
7458: LD_VAR 0 2
7462: MINUS
7463: PUSH
7464: LD_VAR 0 3
7468: PLUS
7469: ST_TO_ADDR
7470: GO 7488
// length := i_to - i_from ;
7472: LD_ADDR_VAR 0 11
7476: PUSH
7477: LD_VAR 0 3
7481: PUSH
7482: LD_VAR 0 2
7486: MINUS
7487: ST_TO_ADDR
// end else
7488: GO 7551
// begin d := - 1 ;
7490: LD_ADDR_VAR 0 9
7494: PUSH
7495: LD_INT 1
7497: NEG
7498: ST_TO_ADDR
// if i_from > i_to then
7499: LD_VAR 0 2
7503: PUSH
7504: LD_VAR 0 3
7508: GREATER
7509: IFFALSE 7529
// length := i_from - i_to else
7511: LD_ADDR_VAR 0 11
7515: PUSH
7516: LD_VAR 0 2
7520: PUSH
7521: LD_VAR 0 3
7525: MINUS
7526: ST_TO_ADDR
7527: GO 7551
// length := ( array - i_to ) + i_from ;
7529: LD_ADDR_VAR 0 11
7533: PUSH
7534: LD_VAR 0 1
7538: PUSH
7539: LD_VAR 0 3
7543: MINUS
7544: PUSH
7545: LD_VAR 0 2
7549: PLUS
7550: ST_TO_ADDR
// end ; if not length then
7551: LD_VAR 0 11
7555: NOT
7556: IFFALSE 7560
// exit ;
7558: GO 7718
// tmp := array ;
7560: LD_ADDR_VAR 0 10
7564: PUSH
7565: LD_VAR 0 1
7569: ST_TO_ADDR
// for i = 1 to length do
7570: LD_ADDR_VAR 0 6
7574: PUSH
7575: DOUBLE
7576: LD_INT 1
7578: DEC
7579: ST_TO_ADDR
7580: LD_VAR 0 11
7584: PUSH
7585: FOR_TO
7586: IFFALSE 7706
// begin for j = 1 to array do
7588: LD_ADDR_VAR 0 7
7592: PUSH
7593: DOUBLE
7594: LD_INT 1
7596: DEC
7597: ST_TO_ADDR
7598: LD_VAR 0 1
7602: PUSH
7603: FOR_TO
7604: IFFALSE 7692
// begin k := j + d ;
7606: LD_ADDR_VAR 0 8
7610: PUSH
7611: LD_VAR 0 7
7615: PUSH
7616: LD_VAR 0 9
7620: PLUS
7621: ST_TO_ADDR
// if k > array then
7622: LD_VAR 0 8
7626: PUSH
7627: LD_VAR 0 1
7631: GREATER
7632: IFFALSE 7642
// k := 1 ;
7634: LD_ADDR_VAR 0 8
7638: PUSH
7639: LD_INT 1
7641: ST_TO_ADDR
// if not k then
7642: LD_VAR 0 8
7646: NOT
7647: IFFALSE 7659
// k := array ;
7649: LD_ADDR_VAR 0 8
7653: PUSH
7654: LD_VAR 0 1
7658: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7659: LD_ADDR_VAR 0 10
7663: PUSH
7664: LD_VAR 0 10
7668: PPUSH
7669: LD_VAR 0 8
7673: PPUSH
7674: LD_VAR 0 1
7678: PUSH
7679: LD_VAR 0 7
7683: ARRAY
7684: PPUSH
7685: CALL_OW 1
7689: ST_TO_ADDR
// end ;
7690: GO 7603
7692: POP
7693: POP
// array := tmp ;
7694: LD_ADDR_VAR 0 1
7698: PUSH
7699: LD_VAR 0 10
7703: ST_TO_ADDR
// end ;
7704: GO 7585
7706: POP
7707: POP
// result := array ;
7708: LD_ADDR_VAR 0 5
7712: PUSH
7713: LD_VAR 0 1
7717: ST_TO_ADDR
// end ;
7718: LD_VAR 0 5
7722: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7723: LD_INT 0
7725: PPUSH
7726: PPUSH
// result := 0 ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 0
7734: ST_TO_ADDR
// if not array or not value in array then
7735: LD_VAR 0 1
7739: NOT
7740: PUSH
7741: LD_VAR 0 2
7745: PUSH
7746: LD_VAR 0 1
7750: IN
7751: NOT
7752: OR
7753: IFFALSE 7757
// exit ;
7755: GO 7811
// for i = 1 to array do
7757: LD_ADDR_VAR 0 4
7761: PUSH
7762: DOUBLE
7763: LD_INT 1
7765: DEC
7766: ST_TO_ADDR
7767: LD_VAR 0 1
7771: PUSH
7772: FOR_TO
7773: IFFALSE 7809
// if value = array [ i ] then
7775: LD_VAR 0 2
7779: PUSH
7780: LD_VAR 0 1
7784: PUSH
7785: LD_VAR 0 4
7789: ARRAY
7790: EQUAL
7791: IFFALSE 7807
// begin result := i ;
7793: LD_ADDR_VAR 0 3
7797: PUSH
7798: LD_VAR 0 4
7802: ST_TO_ADDR
// exit ;
7803: POP
7804: POP
7805: GO 7811
// end ;
7807: GO 7772
7809: POP
7810: POP
// end ;
7811: LD_VAR 0 3
7815: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7816: LD_INT 0
7818: PPUSH
// vc_chassis := chassis ;
7819: LD_ADDR_OWVAR 37
7823: PUSH
7824: LD_VAR 0 1
7828: ST_TO_ADDR
// vc_engine := engine ;
7829: LD_ADDR_OWVAR 39
7833: PUSH
7834: LD_VAR 0 2
7838: ST_TO_ADDR
// vc_control := control ;
7839: LD_ADDR_OWVAR 38
7843: PUSH
7844: LD_VAR 0 3
7848: ST_TO_ADDR
// vc_weapon := weapon ;
7849: LD_ADDR_OWVAR 40
7853: PUSH
7854: LD_VAR 0 4
7858: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7859: LD_ADDR_OWVAR 41
7863: PUSH
7864: LD_VAR 0 5
7868: ST_TO_ADDR
// end ;
7869: LD_VAR 0 6
7873: RET
// export function WantPlant ( unit ) ; var task ; begin
7874: LD_INT 0
7876: PPUSH
7877: PPUSH
// result := false ;
7878: LD_ADDR_VAR 0 2
7882: PUSH
7883: LD_INT 0
7885: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7886: LD_ADDR_VAR 0 3
7890: PUSH
7891: LD_VAR 0 1
7895: PPUSH
7896: CALL_OW 437
7900: ST_TO_ADDR
// if task then
7901: LD_VAR 0 3
7905: IFFALSE 7933
// if task [ 1 ] [ 1 ] = p then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 1
7914: ARRAY
7915: PUSH
7916: LD_INT 1
7918: ARRAY
7919: PUSH
7920: LD_STRING p
7922: EQUAL
7923: IFFALSE 7933
// result := true ;
7925: LD_ADDR_VAR 0 2
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// end ;
7933: LD_VAR 0 2
7937: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7938: LD_INT 0
7940: PPUSH
7941: PPUSH
7942: PPUSH
7943: PPUSH
// if pos < 1 then
7944: LD_VAR 0 2
7948: PUSH
7949: LD_INT 1
7951: LESS
7952: IFFALSE 7956
// exit ;
7954: GO 8259
// if pos = 1 then
7956: LD_VAR 0 2
7960: PUSH
7961: LD_INT 1
7963: EQUAL
7964: IFFALSE 7997
// result := Replace ( arr , pos [ 1 ] , value ) else
7966: LD_ADDR_VAR 0 4
7970: PUSH
7971: LD_VAR 0 1
7975: PPUSH
7976: LD_VAR 0 2
7980: PUSH
7981: LD_INT 1
7983: ARRAY
7984: PPUSH
7985: LD_VAR 0 3
7989: PPUSH
7990: CALL_OW 1
7994: ST_TO_ADDR
7995: GO 8259
// begin tmp := arr ;
7997: LD_ADDR_VAR 0 6
8001: PUSH
8002: LD_VAR 0 1
8006: ST_TO_ADDR
// s_arr := [ tmp ] ;
8007: LD_ADDR_VAR 0 7
8011: PUSH
8012: LD_VAR 0 6
8016: PUSH
8017: EMPTY
8018: LIST
8019: ST_TO_ADDR
// for i = 1 to pos - 1 do
8020: LD_ADDR_VAR 0 5
8024: PUSH
8025: DOUBLE
8026: LD_INT 1
8028: DEC
8029: ST_TO_ADDR
8030: LD_VAR 0 2
8034: PUSH
8035: LD_INT 1
8037: MINUS
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8085
// begin tmp := tmp [ pos [ i ] ] ;
8042: LD_ADDR_VAR 0 6
8046: PUSH
8047: LD_VAR 0 6
8051: PUSH
8052: LD_VAR 0 2
8056: PUSH
8057: LD_VAR 0 5
8061: ARRAY
8062: ARRAY
8063: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8064: LD_ADDR_VAR 0 7
8068: PUSH
8069: LD_VAR 0 7
8073: PUSH
8074: LD_VAR 0 6
8078: PUSH
8079: EMPTY
8080: LIST
8081: ADD
8082: ST_TO_ADDR
// end ;
8083: GO 8039
8085: POP
8086: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8087: LD_ADDR_VAR 0 6
8091: PUSH
8092: LD_VAR 0 6
8096: PPUSH
8097: LD_VAR 0 2
8101: PUSH
8102: LD_VAR 0 2
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 3
8112: PPUSH
8113: CALL_OW 1
8117: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8118: LD_ADDR_VAR 0 7
8122: PUSH
8123: LD_VAR 0 7
8127: PPUSH
8128: LD_VAR 0 7
8132: PPUSH
8133: LD_VAR 0 6
8137: PPUSH
8138: CALL_OW 1
8142: ST_TO_ADDR
// for i = s_arr downto 2 do
8143: LD_ADDR_VAR 0 5
8147: PUSH
8148: DOUBLE
8149: LD_VAR 0 7
8153: INC
8154: ST_TO_ADDR
8155: LD_INT 2
8157: PUSH
8158: FOR_DOWNTO
8159: IFFALSE 8243
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8161: LD_ADDR_VAR 0 6
8165: PUSH
8166: LD_VAR 0 7
8170: PUSH
8171: LD_VAR 0 5
8175: PUSH
8176: LD_INT 1
8178: MINUS
8179: ARRAY
8180: PPUSH
8181: LD_VAR 0 2
8185: PUSH
8186: LD_VAR 0 5
8190: PUSH
8191: LD_INT 1
8193: MINUS
8194: ARRAY
8195: PPUSH
8196: LD_VAR 0 7
8200: PUSH
8201: LD_VAR 0 5
8205: ARRAY
8206: PPUSH
8207: CALL_OW 1
8211: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8212: LD_ADDR_VAR 0 7
8216: PUSH
8217: LD_VAR 0 7
8221: PPUSH
8222: LD_VAR 0 5
8226: PUSH
8227: LD_INT 1
8229: MINUS
8230: PPUSH
8231: LD_VAR 0 6
8235: PPUSH
8236: CALL_OW 1
8240: ST_TO_ADDR
// end ;
8241: GO 8158
8243: POP
8244: POP
// result := s_arr [ 1 ] ;
8245: LD_ADDR_VAR 0 4
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: ARRAY
8258: ST_TO_ADDR
// end ; end ;
8259: LD_VAR 0 4
8263: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8264: LD_INT 0
8266: PPUSH
8267: PPUSH
// if not list then
8268: LD_VAR 0 1
8272: NOT
8273: IFFALSE 8277
// exit ;
8275: GO 8368
// i := list [ pos1 ] ;
8277: LD_ADDR_VAR 0 5
8281: PUSH
8282: LD_VAR 0 1
8286: PUSH
8287: LD_VAR 0 2
8291: ARRAY
8292: ST_TO_ADDR
// if not i then
8293: LD_VAR 0 5
8297: NOT
8298: IFFALSE 8302
// exit ;
8300: GO 8368
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8302: LD_ADDR_VAR 0 1
8306: PUSH
8307: LD_VAR 0 1
8311: PPUSH
8312: LD_VAR 0 2
8316: PPUSH
8317: LD_VAR 0 1
8321: PUSH
8322: LD_VAR 0 3
8326: ARRAY
8327: PPUSH
8328: CALL_OW 1
8332: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8333: LD_ADDR_VAR 0 1
8337: PUSH
8338: LD_VAR 0 1
8342: PPUSH
8343: LD_VAR 0 3
8347: PPUSH
8348: LD_VAR 0 5
8352: PPUSH
8353: CALL_OW 1
8357: ST_TO_ADDR
// result := list ;
8358: LD_ADDR_VAR 0 4
8362: PUSH
8363: LD_VAR 0 1
8367: ST_TO_ADDR
// end ;
8368: LD_VAR 0 4
8372: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8373: LD_INT 0
8375: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8376: LD_ADDR_VAR 0 5
8380: PUSH
8381: LD_VAR 0 1
8385: PPUSH
8386: CALL_OW 250
8390: PPUSH
8391: LD_VAR 0 1
8395: PPUSH
8396: CALL_OW 251
8400: PPUSH
8401: LD_VAR 0 2
8405: PPUSH
8406: LD_VAR 0 3
8410: PPUSH
8411: LD_VAR 0 4
8415: PPUSH
8416: CALL 8426 0 5
8420: ST_TO_ADDR
// end ;
8421: LD_VAR 0 5
8425: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8426: LD_INT 0
8428: PPUSH
8429: PPUSH
8430: PPUSH
8431: PPUSH
// if not list then
8432: LD_VAR 0 3
8436: NOT
8437: IFFALSE 8441
// exit ;
8439: GO 8829
// result := [ ] ;
8441: LD_ADDR_VAR 0 6
8445: PUSH
8446: EMPTY
8447: ST_TO_ADDR
// for i in list do
8448: LD_ADDR_VAR 0 7
8452: PUSH
8453: LD_VAR 0 3
8457: PUSH
8458: FOR_IN
8459: IFFALSE 8661
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8461: LD_ADDR_VAR 0 9
8465: PUSH
8466: LD_VAR 0 7
8470: PPUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: LD_VAR 0 2
8480: PPUSH
8481: CALL_OW 297
8485: ST_TO_ADDR
// if not result then
8486: LD_VAR 0 6
8490: NOT
8491: IFFALSE 8517
// result := [ [ i , tmp ] ] else
8493: LD_ADDR_VAR 0 6
8497: PUSH
8498: LD_VAR 0 7
8502: PUSH
8503: LD_VAR 0 9
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: EMPTY
8513: LIST
8514: ST_TO_ADDR
8515: GO 8659
// begin if result [ result ] [ 2 ] < tmp then
8517: LD_VAR 0 6
8521: PUSH
8522: LD_VAR 0 6
8526: ARRAY
8527: PUSH
8528: LD_INT 2
8530: ARRAY
8531: PUSH
8532: LD_VAR 0 9
8536: LESS
8537: IFFALSE 8579
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8539: LD_ADDR_VAR 0 6
8543: PUSH
8544: LD_VAR 0 6
8548: PPUSH
8549: LD_VAR 0 6
8553: PUSH
8554: LD_INT 1
8556: PLUS
8557: PPUSH
8558: LD_VAR 0 7
8562: PUSH
8563: LD_VAR 0 9
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PPUSH
8572: CALL_OW 2
8576: ST_TO_ADDR
8577: GO 8659
// for j = 1 to result do
8579: LD_ADDR_VAR 0 8
8583: PUSH
8584: DOUBLE
8585: LD_INT 1
8587: DEC
8588: ST_TO_ADDR
8589: LD_VAR 0 6
8593: PUSH
8594: FOR_TO
8595: IFFALSE 8657
// begin if tmp < result [ j ] [ 2 ] then
8597: LD_VAR 0 9
8601: PUSH
8602: LD_VAR 0 6
8606: PUSH
8607: LD_VAR 0 8
8611: ARRAY
8612: PUSH
8613: LD_INT 2
8615: ARRAY
8616: LESS
8617: IFFALSE 8655
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8619: LD_ADDR_VAR 0 6
8623: PUSH
8624: LD_VAR 0 6
8628: PPUSH
8629: LD_VAR 0 8
8633: PPUSH
8634: LD_VAR 0 7
8638: PUSH
8639: LD_VAR 0 9
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PPUSH
8648: CALL_OW 2
8652: ST_TO_ADDR
// break ;
8653: GO 8657
// end ; end ;
8655: GO 8594
8657: POP
8658: POP
// end ; end ;
8659: GO 8458
8661: POP
8662: POP
// if result and not asc then
8663: LD_VAR 0 6
8667: PUSH
8668: LD_VAR 0 4
8672: NOT
8673: AND
8674: IFFALSE 8749
// begin tmp := result ;
8676: LD_ADDR_VAR 0 9
8680: PUSH
8681: LD_VAR 0 6
8685: ST_TO_ADDR
// for i = tmp downto 1 do
8686: LD_ADDR_VAR 0 7
8690: PUSH
8691: DOUBLE
8692: LD_VAR 0 9
8696: INC
8697: ST_TO_ADDR
8698: LD_INT 1
8700: PUSH
8701: FOR_DOWNTO
8702: IFFALSE 8747
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8704: LD_ADDR_VAR 0 6
8708: PUSH
8709: LD_VAR 0 6
8713: PPUSH
8714: LD_VAR 0 9
8718: PUSH
8719: LD_VAR 0 7
8723: MINUS
8724: PUSH
8725: LD_INT 1
8727: PLUS
8728: PPUSH
8729: LD_VAR 0 9
8733: PUSH
8734: LD_VAR 0 7
8738: ARRAY
8739: PPUSH
8740: CALL_OW 1
8744: ST_TO_ADDR
8745: GO 8701
8747: POP
8748: POP
// end ; tmp := [ ] ;
8749: LD_ADDR_VAR 0 9
8753: PUSH
8754: EMPTY
8755: ST_TO_ADDR
// if mode then
8756: LD_VAR 0 5
8760: IFFALSE 8829
// begin for i = 1 to result do
8762: LD_ADDR_VAR 0 7
8766: PUSH
8767: DOUBLE
8768: LD_INT 1
8770: DEC
8771: ST_TO_ADDR
8772: LD_VAR 0 6
8776: PUSH
8777: FOR_TO
8778: IFFALSE 8817
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8780: LD_ADDR_VAR 0 9
8784: PUSH
8785: LD_VAR 0 9
8789: PPUSH
8790: LD_VAR 0 7
8794: PPUSH
8795: LD_VAR 0 6
8799: PUSH
8800: LD_VAR 0 7
8804: ARRAY
8805: PUSH
8806: LD_INT 1
8808: ARRAY
8809: PPUSH
8810: CALL_OW 1
8814: ST_TO_ADDR
8815: GO 8777
8817: POP
8818: POP
// result := tmp ;
8819: LD_ADDR_VAR 0 6
8823: PUSH
8824: LD_VAR 0 9
8828: ST_TO_ADDR
// end ; end ;
8829: LD_VAR 0 6
8833: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8834: LD_INT 0
8836: PPUSH
8837: PPUSH
8838: PPUSH
8839: PPUSH
8840: PPUSH
8841: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8842: LD_ADDR_VAR 0 5
8846: PUSH
8847: LD_INT 0
8849: PUSH
8850: LD_INT 0
8852: PUSH
8853: LD_INT 0
8855: PUSH
8856: EMPTY
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: ST_TO_ADDR
// if not x or not y then
8864: LD_VAR 0 2
8868: NOT
8869: PUSH
8870: LD_VAR 0 3
8874: NOT
8875: OR
8876: IFFALSE 8880
// exit ;
8878: GO 10532
// if not range then
8880: LD_VAR 0 4
8884: NOT
8885: IFFALSE 8895
// range := 10 ;
8887: LD_ADDR_VAR 0 4
8891: PUSH
8892: LD_INT 10
8894: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8895: LD_ADDR_VAR 0 8
8899: PUSH
8900: LD_INT 81
8902: PUSH
8903: LD_VAR 0 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 92
8914: PUSH
8915: LD_VAR 0 2
8919: PUSH
8920: LD_VAR 0 3
8924: PUSH
8925: LD_VAR 0 4
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 3
8938: PUSH
8939: LD_INT 21
8941: PUSH
8942: LD_INT 3
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: PPUSH
8958: CALL_OW 69
8962: ST_TO_ADDR
// if not tmp then
8963: LD_VAR 0 8
8967: NOT
8968: IFFALSE 8972
// exit ;
8970: GO 10532
// for i in tmp do
8972: LD_ADDR_VAR 0 6
8976: PUSH
8977: LD_VAR 0 8
8981: PUSH
8982: FOR_IN
8983: IFFALSE 10507
// begin points := [ 0 , 0 , 0 ] ;
8985: LD_ADDR_VAR 0 9
8989: PUSH
8990: LD_INT 0
8992: PUSH
8993: LD_INT 0
8995: PUSH
8996: LD_INT 0
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: LIST
9003: ST_TO_ADDR
// bpoints := 1 ;
9004: LD_ADDR_VAR 0 10
9008: PUSH
9009: LD_INT 1
9011: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9012: LD_VAR 0 6
9016: PPUSH
9017: CALL_OW 247
9021: PUSH
9022: LD_INT 1
9024: DOUBLE
9025: EQUAL
9026: IFTRUE 9030
9028: GO 9608
9030: POP
// begin if GetClass ( i ) = 1 then
9031: LD_VAR 0 6
9035: PPUSH
9036: CALL_OW 257
9040: PUSH
9041: LD_INT 1
9043: EQUAL
9044: IFFALSE 9065
// points := [ 10 , 5 , 3 ] ;
9046: LD_ADDR_VAR 0 9
9050: PUSH
9051: LD_INT 10
9053: PUSH
9054: LD_INT 5
9056: PUSH
9057: LD_INT 3
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9065: LD_VAR 0 6
9069: PPUSH
9070: CALL_OW 257
9074: PUSH
9075: LD_INT 2
9077: PUSH
9078: LD_INT 3
9080: PUSH
9081: LD_INT 4
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: IN
9089: IFFALSE 9110
// points := [ 3 , 2 , 1 ] ;
9091: LD_ADDR_VAR 0 9
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 2
9101: PUSH
9102: LD_INT 1
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9110: LD_VAR 0 6
9114: PPUSH
9115: CALL_OW 257
9119: PUSH
9120: LD_INT 5
9122: EQUAL
9123: IFFALSE 9144
// points := [ 130 , 5 , 2 ] ;
9125: LD_ADDR_VAR 0 9
9129: PUSH
9130: LD_INT 130
9132: PUSH
9133: LD_INT 5
9135: PUSH
9136: LD_INT 2
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9144: LD_VAR 0 6
9148: PPUSH
9149: CALL_OW 257
9153: PUSH
9154: LD_INT 8
9156: EQUAL
9157: IFFALSE 9178
// points := [ 35 , 35 , 30 ] ;
9159: LD_ADDR_VAR 0 9
9163: PUSH
9164: LD_INT 35
9166: PUSH
9167: LD_INT 35
9169: PUSH
9170: LD_INT 30
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: LIST
9177: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9178: LD_VAR 0 6
9182: PPUSH
9183: CALL_OW 257
9187: PUSH
9188: LD_INT 9
9190: EQUAL
9191: IFFALSE 9212
// points := [ 20 , 55 , 40 ] ;
9193: LD_ADDR_VAR 0 9
9197: PUSH
9198: LD_INT 20
9200: PUSH
9201: LD_INT 55
9203: PUSH
9204: LD_INT 40
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9212: LD_VAR 0 6
9216: PPUSH
9217: CALL_OW 257
9221: PUSH
9222: LD_INT 12
9224: PUSH
9225: LD_INT 16
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: IN
9232: IFFALSE 9253
// points := [ 5 , 3 , 2 ] ;
9234: LD_ADDR_VAR 0 9
9238: PUSH
9239: LD_INT 5
9241: PUSH
9242: LD_INT 3
9244: PUSH
9245: LD_INT 2
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9253: LD_VAR 0 6
9257: PPUSH
9258: CALL_OW 257
9262: PUSH
9263: LD_INT 17
9265: EQUAL
9266: IFFALSE 9287
// points := [ 100 , 50 , 75 ] ;
9268: LD_ADDR_VAR 0 9
9272: PUSH
9273: LD_INT 100
9275: PUSH
9276: LD_INT 50
9278: PUSH
9279: LD_INT 75
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: LIST
9286: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9287: LD_VAR 0 6
9291: PPUSH
9292: CALL_OW 257
9296: PUSH
9297: LD_INT 15
9299: EQUAL
9300: IFFALSE 9321
// points := [ 10 , 5 , 3 ] ;
9302: LD_ADDR_VAR 0 9
9306: PUSH
9307: LD_INT 10
9309: PUSH
9310: LD_INT 5
9312: PUSH
9313: LD_INT 3
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9321: LD_VAR 0 6
9325: PPUSH
9326: CALL_OW 257
9330: PUSH
9331: LD_INT 14
9333: EQUAL
9334: IFFALSE 9355
// points := [ 10 , 0 , 0 ] ;
9336: LD_ADDR_VAR 0 9
9340: PUSH
9341: LD_INT 10
9343: PUSH
9344: LD_INT 0
9346: PUSH
9347: LD_INT 0
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: LIST
9354: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9355: LD_VAR 0 6
9359: PPUSH
9360: CALL_OW 257
9364: PUSH
9365: LD_INT 11
9367: EQUAL
9368: IFFALSE 9389
// points := [ 30 , 10 , 5 ] ;
9370: LD_ADDR_VAR 0 9
9374: PUSH
9375: LD_INT 30
9377: PUSH
9378: LD_INT 10
9380: PUSH
9381: LD_INT 5
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: LIST
9388: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9389: LD_VAR 0 1
9393: PPUSH
9394: LD_INT 5
9396: PPUSH
9397: CALL_OW 321
9401: PUSH
9402: LD_INT 2
9404: EQUAL
9405: IFFALSE 9422
// bpoints := bpoints * 1.8 ;
9407: LD_ADDR_VAR 0 10
9411: PUSH
9412: LD_VAR 0 10
9416: PUSH
9417: LD_REAL  1.80000000000000E+0000
9420: MUL
9421: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9422: LD_VAR 0 6
9426: PPUSH
9427: CALL_OW 257
9431: PUSH
9432: LD_INT 1
9434: PUSH
9435: LD_INT 2
9437: PUSH
9438: LD_INT 3
9440: PUSH
9441: LD_INT 4
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: IN
9450: PUSH
9451: LD_VAR 0 1
9455: PPUSH
9456: LD_INT 51
9458: PPUSH
9459: CALL_OW 321
9463: PUSH
9464: LD_INT 2
9466: EQUAL
9467: AND
9468: IFFALSE 9485
// bpoints := bpoints * 1.2 ;
9470: LD_ADDR_VAR 0 10
9474: PUSH
9475: LD_VAR 0 10
9479: PUSH
9480: LD_REAL  1.20000000000000E+0000
9483: MUL
9484: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9485: LD_VAR 0 6
9489: PPUSH
9490: CALL_OW 257
9494: PUSH
9495: LD_INT 5
9497: PUSH
9498: LD_INT 7
9500: PUSH
9501: LD_INT 9
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: IN
9509: PUSH
9510: LD_VAR 0 1
9514: PPUSH
9515: LD_INT 52
9517: PPUSH
9518: CALL_OW 321
9522: PUSH
9523: LD_INT 2
9525: EQUAL
9526: AND
9527: IFFALSE 9544
// bpoints := bpoints * 1.5 ;
9529: LD_ADDR_VAR 0 10
9533: PUSH
9534: LD_VAR 0 10
9538: PUSH
9539: LD_REAL  1.50000000000000E+0000
9542: MUL
9543: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9544: LD_VAR 0 1
9548: PPUSH
9549: LD_INT 66
9551: PPUSH
9552: CALL_OW 321
9556: PUSH
9557: LD_INT 2
9559: EQUAL
9560: IFFALSE 9577
// bpoints := bpoints * 1.1 ;
9562: LD_ADDR_VAR 0 10
9566: PUSH
9567: LD_VAR 0 10
9571: PUSH
9572: LD_REAL  1.10000000000000E+0000
9575: MUL
9576: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9577: LD_ADDR_VAR 0 10
9581: PUSH
9582: LD_VAR 0 10
9586: PUSH
9587: LD_VAR 0 6
9591: PPUSH
9592: LD_INT 1
9594: PPUSH
9595: CALL_OW 259
9599: PUSH
9600: LD_REAL  1.15000000000000E+0000
9603: MUL
9604: MUL
9605: ST_TO_ADDR
// end ; unit_vehicle :
9606: GO 10436
9608: LD_INT 2
9610: DOUBLE
9611: EQUAL
9612: IFTRUE 9616
9614: GO 10424
9616: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9617: LD_VAR 0 6
9621: PPUSH
9622: CALL_OW 264
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: LD_INT 42
9632: PUSH
9633: LD_INT 24
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: IN
9641: IFFALSE 9662
// points := [ 25 , 5 , 3 ] ;
9643: LD_ADDR_VAR 0 9
9647: PUSH
9648: LD_INT 25
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: LD_INT 3
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9662: LD_VAR 0 6
9666: PPUSH
9667: CALL_OW 264
9671: PUSH
9672: LD_INT 4
9674: PUSH
9675: LD_INT 43
9677: PUSH
9678: LD_INT 25
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: LIST
9685: IN
9686: IFFALSE 9707
// points := [ 40 , 15 , 5 ] ;
9688: LD_ADDR_VAR 0 9
9692: PUSH
9693: LD_INT 40
9695: PUSH
9696: LD_INT 15
9698: PUSH
9699: LD_INT 5
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9707: LD_VAR 0 6
9711: PPUSH
9712: CALL_OW 264
9716: PUSH
9717: LD_INT 3
9719: PUSH
9720: LD_INT 23
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: IN
9727: IFFALSE 9748
// points := [ 7 , 25 , 8 ] ;
9729: LD_ADDR_VAR 0 9
9733: PUSH
9734: LD_INT 7
9736: PUSH
9737: LD_INT 25
9739: PUSH
9740: LD_INT 8
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: LIST
9747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9748: LD_VAR 0 6
9752: PPUSH
9753: CALL_OW 264
9757: PUSH
9758: LD_INT 5
9760: PUSH
9761: LD_INT 27
9763: PUSH
9764: LD_INT 44
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: IN
9772: IFFALSE 9793
// points := [ 14 , 50 , 16 ] ;
9774: LD_ADDR_VAR 0 9
9778: PUSH
9779: LD_INT 14
9781: PUSH
9782: LD_INT 50
9784: PUSH
9785: LD_INT 16
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9793: LD_VAR 0 6
9797: PPUSH
9798: CALL_OW 264
9802: PUSH
9803: LD_INT 6
9805: PUSH
9806: LD_INT 46
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: IN
9813: IFFALSE 9834
// points := [ 32 , 120 , 70 ] ;
9815: LD_ADDR_VAR 0 9
9819: PUSH
9820: LD_INT 32
9822: PUSH
9823: LD_INT 120
9825: PUSH
9826: LD_INT 70
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9834: LD_VAR 0 6
9838: PPUSH
9839: CALL_OW 264
9843: PUSH
9844: LD_INT 7
9846: PUSH
9847: LD_INT 28
9849: PUSH
9850: LD_INT 45
9852: PUSH
9853: LD_EXP 14
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: IN
9864: IFFALSE 9885
// points := [ 35 , 20 , 45 ] ;
9866: LD_ADDR_VAR 0 9
9870: PUSH
9871: LD_INT 35
9873: PUSH
9874: LD_INT 20
9876: PUSH
9877: LD_INT 45
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9885: LD_VAR 0 6
9889: PPUSH
9890: CALL_OW 264
9894: PUSH
9895: LD_INT 47
9897: PUSH
9898: EMPTY
9899: LIST
9900: IN
9901: IFFALSE 9922
// points := [ 67 , 45 , 75 ] ;
9903: LD_ADDR_VAR 0 9
9907: PUSH
9908: LD_INT 67
9910: PUSH
9911: LD_INT 45
9913: PUSH
9914: LD_INT 75
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: LIST
9921: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9922: LD_VAR 0 6
9926: PPUSH
9927: CALL_OW 264
9931: PUSH
9932: LD_INT 26
9934: PUSH
9935: EMPTY
9936: LIST
9937: IN
9938: IFFALSE 9959
// points := [ 120 , 30 , 80 ] ;
9940: LD_ADDR_VAR 0 9
9944: PUSH
9945: LD_INT 120
9947: PUSH
9948: LD_INT 30
9950: PUSH
9951: LD_INT 80
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: LIST
9958: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9959: LD_VAR 0 6
9963: PPUSH
9964: CALL_OW 264
9968: PUSH
9969: LD_INT 22
9971: PUSH
9972: EMPTY
9973: LIST
9974: IN
9975: IFFALSE 9996
// points := [ 40 , 1 , 1 ] ;
9977: LD_ADDR_VAR 0 9
9981: PUSH
9982: LD_INT 40
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: LD_INT 1
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9996: LD_VAR 0 6
10000: PPUSH
10001: CALL_OW 264
10005: PUSH
10006: LD_INT 29
10008: PUSH
10009: EMPTY
10010: LIST
10011: IN
10012: IFFALSE 10033
// points := [ 70 , 200 , 400 ] ;
10014: LD_ADDR_VAR 0 9
10018: PUSH
10019: LD_INT 70
10021: PUSH
10022: LD_INT 200
10024: PUSH
10025: LD_INT 400
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10033: LD_VAR 0 6
10037: PPUSH
10038: CALL_OW 264
10042: PUSH
10043: LD_INT 14
10045: PUSH
10046: LD_INT 53
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: IN
10053: IFFALSE 10074
// points := [ 40 , 10 , 20 ] ;
10055: LD_ADDR_VAR 0 9
10059: PUSH
10060: LD_INT 40
10062: PUSH
10063: LD_INT 10
10065: PUSH
10066: LD_INT 20
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10074: LD_VAR 0 6
10078: PPUSH
10079: CALL_OW 264
10083: PUSH
10084: LD_INT 9
10086: PUSH
10087: EMPTY
10088: LIST
10089: IN
10090: IFFALSE 10111
// points := [ 5 , 70 , 20 ] ;
10092: LD_ADDR_VAR 0 9
10096: PUSH
10097: LD_INT 5
10099: PUSH
10100: LD_INT 70
10102: PUSH
10103: LD_INT 20
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10111: LD_VAR 0 6
10115: PPUSH
10116: CALL_OW 264
10120: PUSH
10121: LD_INT 10
10123: PUSH
10124: EMPTY
10125: LIST
10126: IN
10127: IFFALSE 10148
// points := [ 35 , 110 , 70 ] ;
10129: LD_ADDR_VAR 0 9
10133: PUSH
10134: LD_INT 35
10136: PUSH
10137: LD_INT 110
10139: PUSH
10140: LD_INT 70
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: LIST
10147: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10148: LD_VAR 0 6
10152: PPUSH
10153: CALL_OW 265
10157: PUSH
10158: LD_INT 25
10160: EQUAL
10161: IFFALSE 10182
// points := [ 80 , 65 , 100 ] ;
10163: LD_ADDR_VAR 0 9
10167: PUSH
10168: LD_INT 80
10170: PUSH
10171: LD_INT 65
10173: PUSH
10174: LD_INT 100
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: LIST
10181: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10182: LD_VAR 0 6
10186: PPUSH
10187: CALL_OW 263
10191: PUSH
10192: LD_INT 1
10194: EQUAL
10195: IFFALSE 10230
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10197: LD_ADDR_VAR 0 10
10201: PUSH
10202: LD_VAR 0 10
10206: PUSH
10207: LD_VAR 0 6
10211: PPUSH
10212: CALL_OW 311
10216: PPUSH
10217: LD_INT 3
10219: PPUSH
10220: CALL_OW 259
10224: PUSH
10225: LD_INT 4
10227: MUL
10228: MUL
10229: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10230: LD_VAR 0 6
10234: PPUSH
10235: CALL_OW 263
10239: PUSH
10240: LD_INT 2
10242: EQUAL
10243: IFFALSE 10294
// begin j := IsControledBy ( i ) ;
10245: LD_ADDR_VAR 0 7
10249: PUSH
10250: LD_VAR 0 6
10254: PPUSH
10255: CALL_OW 312
10259: ST_TO_ADDR
// if j then
10260: LD_VAR 0 7
10264: IFFALSE 10294
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10266: LD_ADDR_VAR 0 10
10270: PUSH
10271: LD_VAR 0 10
10275: PUSH
10276: LD_VAR 0 7
10280: PPUSH
10281: LD_INT 3
10283: PPUSH
10284: CALL_OW 259
10288: PUSH
10289: LD_INT 3
10291: MUL
10292: MUL
10293: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10294: LD_VAR 0 6
10298: PPUSH
10299: CALL_OW 264
10303: PUSH
10304: LD_INT 5
10306: PUSH
10307: LD_INT 6
10309: PUSH
10310: LD_INT 46
10312: PUSH
10313: LD_INT 44
10315: PUSH
10316: LD_INT 47
10318: PUSH
10319: LD_INT 45
10321: PUSH
10322: LD_INT 28
10324: PUSH
10325: LD_INT 7
10327: PUSH
10328: LD_INT 27
10330: PUSH
10331: LD_INT 29
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: IN
10346: PUSH
10347: LD_VAR 0 1
10351: PPUSH
10352: LD_INT 52
10354: PPUSH
10355: CALL_OW 321
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: AND
10364: IFFALSE 10381
// bpoints := bpoints * 1.2 ;
10366: LD_ADDR_VAR 0 10
10370: PUSH
10371: LD_VAR 0 10
10375: PUSH
10376: LD_REAL  1.20000000000000E+0000
10379: MUL
10380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10381: LD_VAR 0 6
10385: PPUSH
10386: CALL_OW 264
10390: PUSH
10391: LD_INT 6
10393: PUSH
10394: LD_INT 46
10396: PUSH
10397: LD_INT 47
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: LIST
10404: IN
10405: IFFALSE 10422
// bpoints := bpoints * 1.2 ;
10407: LD_ADDR_VAR 0 10
10411: PUSH
10412: LD_VAR 0 10
10416: PUSH
10417: LD_REAL  1.20000000000000E+0000
10420: MUL
10421: ST_TO_ADDR
// end ; unit_building :
10422: GO 10436
10424: LD_INT 3
10426: DOUBLE
10427: EQUAL
10428: IFTRUE 10432
10430: GO 10435
10432: POP
// ; end ;
10433: GO 10436
10435: POP
// for j = 1 to 3 do
10436: LD_ADDR_VAR 0 7
10440: PUSH
10441: DOUBLE
10442: LD_INT 1
10444: DEC
10445: ST_TO_ADDR
10446: LD_INT 3
10448: PUSH
10449: FOR_TO
10450: IFFALSE 10503
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10452: LD_ADDR_VAR 0 5
10456: PUSH
10457: LD_VAR 0 5
10461: PPUSH
10462: LD_VAR 0 7
10466: PPUSH
10467: LD_VAR 0 5
10471: PUSH
10472: LD_VAR 0 7
10476: ARRAY
10477: PUSH
10478: LD_VAR 0 9
10482: PUSH
10483: LD_VAR 0 7
10487: ARRAY
10488: PUSH
10489: LD_VAR 0 10
10493: MUL
10494: PLUS
10495: PPUSH
10496: CALL_OW 1
10500: ST_TO_ADDR
10501: GO 10449
10503: POP
10504: POP
// end ;
10505: GO 8982
10507: POP
10508: POP
// result := Replace ( result , 4 , tmp ) ;
10509: LD_ADDR_VAR 0 5
10513: PUSH
10514: LD_VAR 0 5
10518: PPUSH
10519: LD_INT 4
10521: PPUSH
10522: LD_VAR 0 8
10526: PPUSH
10527: CALL_OW 1
10531: ST_TO_ADDR
// end ;
10532: LD_VAR 0 5
10536: RET
// export function DangerAtRange ( unit , range ) ; begin
10537: LD_INT 0
10539: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10540: LD_ADDR_VAR 0 3
10544: PUSH
10545: LD_VAR 0 1
10549: PPUSH
10550: CALL_OW 255
10554: PPUSH
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL_OW 250
10564: PPUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 251
10574: PPUSH
10575: LD_VAR 0 2
10579: PPUSH
10580: CALL 8834 0 4
10584: ST_TO_ADDR
// end ;
10585: LD_VAR 0 3
10589: RET
// export function DangerInArea ( side , area ) ; begin
10590: LD_INT 0
10592: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10593: LD_ADDR_VAR 0 3
10597: PUSH
10598: LD_VAR 0 2
10602: PPUSH
10603: LD_INT 81
10605: PUSH
10606: LD_VAR 0 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PPUSH
10615: CALL_OW 70
10619: ST_TO_ADDR
// end ;
10620: LD_VAR 0 3
10624: RET
// export function IsExtension ( b ) ; begin
10625: LD_INT 0
10627: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10628: LD_ADDR_VAR 0 2
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: LD_INT 23
10640: PUSH
10641: LD_INT 20
10643: PUSH
10644: LD_INT 22
10646: PUSH
10647: LD_INT 17
10649: PUSH
10650: LD_INT 24
10652: PUSH
10653: LD_INT 21
10655: PUSH
10656: LD_INT 19
10658: PUSH
10659: LD_INT 16
10661: PUSH
10662: LD_INT 25
10664: PUSH
10665: LD_INT 18
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: IN
10680: ST_TO_ADDR
// end ;
10681: LD_VAR 0 2
10685: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10686: LD_INT 0
10688: PPUSH
10689: PPUSH
10690: PPUSH
// result := [ ] ;
10691: LD_ADDR_VAR 0 4
10695: PUSH
10696: EMPTY
10697: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10698: LD_ADDR_VAR 0 5
10702: PUSH
10703: LD_VAR 0 2
10707: PPUSH
10708: LD_INT 21
10710: PUSH
10711: LD_INT 3
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 70
10722: ST_TO_ADDR
// if not tmp then
10723: LD_VAR 0 5
10727: NOT
10728: IFFALSE 10732
// exit ;
10730: GO 10796
// if checkLink then
10732: LD_VAR 0 3
10736: IFFALSE 10786
// begin for i in tmp do
10738: LD_ADDR_VAR 0 6
10742: PUSH
10743: LD_VAR 0 5
10747: PUSH
10748: FOR_IN
10749: IFFALSE 10784
// if GetBase ( i ) <> base then
10751: LD_VAR 0 6
10755: PPUSH
10756: CALL_OW 274
10760: PUSH
10761: LD_VAR 0 1
10765: NONEQUAL
10766: IFFALSE 10782
// ComLinkToBase ( base , i ) ;
10768: LD_VAR 0 1
10772: PPUSH
10773: LD_VAR 0 6
10777: PPUSH
10778: CALL_OW 169
10782: GO 10748
10784: POP
10785: POP
// end ; result := tmp ;
10786: LD_ADDR_VAR 0 4
10790: PUSH
10791: LD_VAR 0 5
10795: ST_TO_ADDR
// end ;
10796: LD_VAR 0 4
10800: RET
// export function ComComplete ( units , b ) ; var i ; begin
10801: LD_INT 0
10803: PPUSH
10804: PPUSH
// if not units then
10805: LD_VAR 0 1
10809: NOT
10810: IFFALSE 10814
// exit ;
10812: GO 10904
// for i in units do
10814: LD_ADDR_VAR 0 4
10818: PUSH
10819: LD_VAR 0 1
10823: PUSH
10824: FOR_IN
10825: IFFALSE 10902
// if BuildingStatus ( b ) = bs_build then
10827: LD_VAR 0 2
10831: PPUSH
10832: CALL_OW 461
10836: PUSH
10837: LD_INT 1
10839: EQUAL
10840: IFFALSE 10900
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10842: LD_VAR 0 4
10846: PPUSH
10847: LD_STRING h
10849: PUSH
10850: LD_VAR 0 2
10854: PPUSH
10855: CALL_OW 250
10859: PUSH
10860: LD_VAR 0 2
10864: PPUSH
10865: CALL_OW 251
10869: PUSH
10870: LD_VAR 0 2
10874: PUSH
10875: LD_INT 0
10877: PUSH
10878: LD_INT 0
10880: PUSH
10881: LD_INT 0
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: PUSH
10893: EMPTY
10894: LIST
10895: PPUSH
10896: CALL_OW 446
10900: GO 10824
10902: POP
10903: POP
// end ;
10904: LD_VAR 0 3
10908: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10909: LD_INT 0
10911: PPUSH
10912: PPUSH
10913: PPUSH
10914: PPUSH
10915: PPUSH
10916: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10917: LD_VAR 0 1
10921: NOT
10922: PUSH
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 263
10932: PUSH
10933: LD_INT 2
10935: NONEQUAL
10936: OR
10937: IFFALSE 10941
// exit ;
10939: GO 11257
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10941: LD_ADDR_VAR 0 6
10945: PUSH
10946: LD_INT 22
10948: PUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: CALL_OW 255
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: LD_INT 30
10968: PUSH
10969: LD_INT 36
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 34
10978: PUSH
10979: LD_INT 31
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PPUSH
10995: CALL_OW 69
10999: ST_TO_ADDR
// if not tmp then
11000: LD_VAR 0 6
11004: NOT
11005: IFFALSE 11009
// exit ;
11007: GO 11257
// result := [ ] ;
11009: LD_ADDR_VAR 0 2
11013: PUSH
11014: EMPTY
11015: ST_TO_ADDR
// for i in tmp do
11016: LD_ADDR_VAR 0 3
11020: PUSH
11021: LD_VAR 0 6
11025: PUSH
11026: FOR_IN
11027: IFFALSE 11098
// begin t := UnitsInside ( i ) ;
11029: LD_ADDR_VAR 0 4
11033: PUSH
11034: LD_VAR 0 3
11038: PPUSH
11039: CALL_OW 313
11043: ST_TO_ADDR
// if t then
11044: LD_VAR 0 4
11048: IFFALSE 11096
// for j in t do
11050: LD_ADDR_VAR 0 7
11054: PUSH
11055: LD_VAR 0 4
11059: PUSH
11060: FOR_IN
11061: IFFALSE 11094
// result := Replace ( result , result + 1 , j ) ;
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_VAR 0 2
11072: PPUSH
11073: LD_VAR 0 2
11077: PUSH
11078: LD_INT 1
11080: PLUS
11081: PPUSH
11082: LD_VAR 0 7
11086: PPUSH
11087: CALL_OW 1
11091: ST_TO_ADDR
11092: GO 11060
11094: POP
11095: POP
// end ;
11096: GO 11026
11098: POP
11099: POP
// if not result then
11100: LD_VAR 0 2
11104: NOT
11105: IFFALSE 11109
// exit ;
11107: GO 11257
// mech := result [ 1 ] ;
11109: LD_ADDR_VAR 0 5
11113: PUSH
11114: LD_VAR 0 2
11118: PUSH
11119: LD_INT 1
11121: ARRAY
11122: ST_TO_ADDR
// if result > 1 then
11123: LD_VAR 0 2
11127: PUSH
11128: LD_INT 1
11130: GREATER
11131: IFFALSE 11243
// begin for i = 2 to result do
11133: LD_ADDR_VAR 0 3
11137: PUSH
11138: DOUBLE
11139: LD_INT 2
11141: DEC
11142: ST_TO_ADDR
11143: LD_VAR 0 2
11147: PUSH
11148: FOR_TO
11149: IFFALSE 11241
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11151: LD_ADDR_VAR 0 4
11155: PUSH
11156: LD_VAR 0 2
11160: PUSH
11161: LD_VAR 0 3
11165: ARRAY
11166: PPUSH
11167: LD_INT 3
11169: PPUSH
11170: CALL_OW 259
11174: PUSH
11175: LD_VAR 0 2
11179: PUSH
11180: LD_VAR 0 3
11184: ARRAY
11185: PPUSH
11186: CALL_OW 432
11190: MINUS
11191: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11192: LD_VAR 0 4
11196: PUSH
11197: LD_VAR 0 5
11201: PPUSH
11202: LD_INT 3
11204: PPUSH
11205: CALL_OW 259
11209: PUSH
11210: LD_VAR 0 5
11214: PPUSH
11215: CALL_OW 432
11219: MINUS
11220: GREATEREQUAL
11221: IFFALSE 11239
// mech := result [ i ] ;
11223: LD_ADDR_VAR 0 5
11227: PUSH
11228: LD_VAR 0 2
11232: PUSH
11233: LD_VAR 0 3
11237: ARRAY
11238: ST_TO_ADDR
// end ;
11239: GO 11148
11241: POP
11242: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11243: LD_VAR 0 1
11247: PPUSH
11248: LD_VAR 0 5
11252: PPUSH
11253: CALL_OW 135
// end ;
11257: LD_VAR 0 2
11261: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11262: LD_INT 0
11264: PPUSH
11265: PPUSH
11266: PPUSH
11267: PPUSH
11268: PPUSH
11269: PPUSH
11270: PPUSH
11271: PPUSH
11272: PPUSH
11273: PPUSH
11274: PPUSH
11275: PPUSH
11276: PPUSH
// result := [ ] ;
11277: LD_ADDR_VAR 0 7
11281: PUSH
11282: EMPTY
11283: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11284: LD_VAR 0 1
11288: PPUSH
11289: CALL_OW 266
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: IN
11304: NOT
11305: IFFALSE 11309
// exit ;
11307: GO 12943
// if name then
11309: LD_VAR 0 3
11313: IFFALSE 11329
// SetBName ( base_dep , name ) ;
11315: LD_VAR 0 1
11319: PPUSH
11320: LD_VAR 0 3
11324: PPUSH
11325: CALL_OW 500
// base := GetBase ( base_dep ) ;
11329: LD_ADDR_VAR 0 15
11333: PUSH
11334: LD_VAR 0 1
11338: PPUSH
11339: CALL_OW 274
11343: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11344: LD_ADDR_VAR 0 16
11348: PUSH
11349: LD_VAR 0 1
11353: PPUSH
11354: CALL_OW 255
11358: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11359: LD_ADDR_VAR 0 17
11363: PUSH
11364: LD_VAR 0 1
11368: PPUSH
11369: CALL_OW 248
11373: ST_TO_ADDR
// if sources then
11374: LD_VAR 0 5
11378: IFFALSE 11425
// for i = 1 to 3 do
11380: LD_ADDR_VAR 0 8
11384: PUSH
11385: DOUBLE
11386: LD_INT 1
11388: DEC
11389: ST_TO_ADDR
11390: LD_INT 3
11392: PUSH
11393: FOR_TO
11394: IFFALSE 11423
// AddResourceType ( base , i , sources [ i ] ) ;
11396: LD_VAR 0 15
11400: PPUSH
11401: LD_VAR 0 8
11405: PPUSH
11406: LD_VAR 0 5
11410: PUSH
11411: LD_VAR 0 8
11415: ARRAY
11416: PPUSH
11417: CALL_OW 276
11421: GO 11393
11423: POP
11424: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11425: LD_ADDR_VAR 0 18
11429: PUSH
11430: LD_VAR 0 15
11434: PPUSH
11435: LD_VAR 0 2
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL 10686 0 3
11447: ST_TO_ADDR
// InitHc ;
11448: CALL_OW 19
// InitUc ;
11452: CALL_OW 18
// uc_side := side ;
11456: LD_ADDR_OWVAR 20
11460: PUSH
11461: LD_VAR 0 16
11465: ST_TO_ADDR
// uc_nation := nation ;
11466: LD_ADDR_OWVAR 21
11470: PUSH
11471: LD_VAR 0 17
11475: ST_TO_ADDR
// if buildings then
11476: LD_VAR 0 18
11480: IFFALSE 12802
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11482: LD_ADDR_VAR 0 19
11486: PUSH
11487: LD_VAR 0 18
11491: PPUSH
11492: LD_INT 2
11494: PUSH
11495: LD_INT 30
11497: PUSH
11498: LD_INT 29
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 30
11507: PUSH
11508: LD_INT 30
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 72
11524: ST_TO_ADDR
// if tmp then
11525: LD_VAR 0 19
11529: IFFALSE 11577
// for i in tmp do
11531: LD_ADDR_VAR 0 8
11535: PUSH
11536: LD_VAR 0 19
11540: PUSH
11541: FOR_IN
11542: IFFALSE 11575
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11544: LD_VAR 0 8
11548: PPUSH
11549: CALL_OW 250
11553: PPUSH
11554: LD_VAR 0 8
11558: PPUSH
11559: CALL_OW 251
11563: PPUSH
11564: LD_VAR 0 16
11568: PPUSH
11569: CALL_OW 441
11573: GO 11541
11575: POP
11576: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11577: LD_VAR 0 18
11581: PPUSH
11582: LD_INT 2
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 32
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 30
11597: PUSH
11598: LD_INT 33
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: PPUSH
11610: CALL_OW 72
11614: IFFALSE 11702
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11616: LD_ADDR_VAR 0 8
11620: PUSH
11621: LD_VAR 0 18
11625: PPUSH
11626: LD_INT 2
11628: PUSH
11629: LD_INT 30
11631: PUSH
11632: LD_INT 32
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 30
11641: PUSH
11642: LD_INT 33
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: PPUSH
11654: CALL_OW 72
11658: PUSH
11659: FOR_IN
11660: IFFALSE 11700
// begin if not GetBWeapon ( i ) then
11662: LD_VAR 0 8
11666: PPUSH
11667: CALL_OW 269
11671: NOT
11672: IFFALSE 11698
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11674: LD_VAR 0 8
11678: PPUSH
11679: LD_VAR 0 8
11683: PPUSH
11684: LD_VAR 0 2
11688: PPUSH
11689: CALL 12948 0 2
11693: PPUSH
11694: CALL_OW 431
// end ;
11698: GO 11659
11700: POP
11701: POP
// end ; for i = 1 to personel do
11702: LD_ADDR_VAR 0 8
11706: PUSH
11707: DOUBLE
11708: LD_INT 1
11710: DEC
11711: ST_TO_ADDR
11712: LD_VAR 0 6
11716: PUSH
11717: FOR_TO
11718: IFFALSE 12782
// begin if i > 4 then
11720: LD_VAR 0 8
11724: PUSH
11725: LD_INT 4
11727: GREATER
11728: IFFALSE 11732
// break ;
11730: GO 12782
// case i of 1 :
11732: LD_VAR 0 8
11736: PUSH
11737: LD_INT 1
11739: DOUBLE
11740: EQUAL
11741: IFTRUE 11745
11743: GO 11825
11745: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11746: LD_ADDR_VAR 0 12
11750: PUSH
11751: LD_VAR 0 18
11755: PPUSH
11756: LD_INT 22
11758: PUSH
11759: LD_VAR 0 16
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: LD_INT 58
11770: PUSH
11771: EMPTY
11772: LIST
11773: PUSH
11774: LD_INT 2
11776: PUSH
11777: LD_INT 30
11779: PUSH
11780: LD_INT 32
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 30
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 30
11799: PUSH
11800: LD_INT 5
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: LIST
11817: PPUSH
11818: CALL_OW 72
11822: ST_TO_ADDR
11823: GO 12047
11825: LD_INT 2
11827: DOUBLE
11828: EQUAL
11829: IFTRUE 11833
11831: GO 11895
11833: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11834: LD_ADDR_VAR 0 12
11838: PUSH
11839: LD_VAR 0 18
11843: PPUSH
11844: LD_INT 22
11846: PUSH
11847: LD_VAR 0 16
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 2
11858: PUSH
11859: LD_INT 30
11861: PUSH
11862: LD_INT 0
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 30
11871: PUSH
11872: LD_INT 1
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PPUSH
11888: CALL_OW 72
11892: ST_TO_ADDR
11893: GO 12047
11895: LD_INT 3
11897: DOUBLE
11898: EQUAL
11899: IFTRUE 11903
11901: GO 11965
11903: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11904: LD_ADDR_VAR 0 12
11908: PUSH
11909: LD_VAR 0 18
11913: PPUSH
11914: LD_INT 22
11916: PUSH
11917: LD_VAR 0 16
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 2
11928: PUSH
11929: LD_INT 30
11931: PUSH
11932: LD_INT 2
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 30
11941: PUSH
11942: LD_INT 3
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 72
11962: ST_TO_ADDR
11963: GO 12047
11965: LD_INT 4
11967: DOUBLE
11968: EQUAL
11969: IFTRUE 11973
11971: GO 12046
11973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11974: LD_ADDR_VAR 0 12
11978: PUSH
11979: LD_VAR 0 18
11983: PPUSH
11984: LD_INT 22
11986: PUSH
11987: LD_VAR 0 16
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 2
11998: PUSH
11999: LD_INT 30
12001: PUSH
12002: LD_INT 6
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 30
12011: PUSH
12012: LD_INT 7
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 30
12021: PUSH
12022: LD_INT 8
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PPUSH
12039: CALL_OW 72
12043: ST_TO_ADDR
12044: GO 12047
12046: POP
// if i = 1 then
12047: LD_VAR 0 8
12051: PUSH
12052: LD_INT 1
12054: EQUAL
12055: IFFALSE 12166
// begin tmp := [ ] ;
12057: LD_ADDR_VAR 0 19
12061: PUSH
12062: EMPTY
12063: ST_TO_ADDR
// for j in f do
12064: LD_ADDR_VAR 0 9
12068: PUSH
12069: LD_VAR 0 12
12073: PUSH
12074: FOR_IN
12075: IFFALSE 12148
// if GetBType ( j ) = b_bunker then
12077: LD_VAR 0 9
12081: PPUSH
12082: CALL_OW 266
12086: PUSH
12087: LD_INT 32
12089: EQUAL
12090: IFFALSE 12117
// tmp := Insert ( tmp , 1 , j ) else
12092: LD_ADDR_VAR 0 19
12096: PUSH
12097: LD_VAR 0 19
12101: PPUSH
12102: LD_INT 1
12104: PPUSH
12105: LD_VAR 0 9
12109: PPUSH
12110: CALL_OW 2
12114: ST_TO_ADDR
12115: GO 12146
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12117: LD_ADDR_VAR 0 19
12121: PUSH
12122: LD_VAR 0 19
12126: PPUSH
12127: LD_VAR 0 19
12131: PUSH
12132: LD_INT 1
12134: PLUS
12135: PPUSH
12136: LD_VAR 0 9
12140: PPUSH
12141: CALL_OW 2
12145: ST_TO_ADDR
12146: GO 12074
12148: POP
12149: POP
// if tmp then
12150: LD_VAR 0 19
12154: IFFALSE 12166
// f := tmp ;
12156: LD_ADDR_VAR 0 12
12160: PUSH
12161: LD_VAR 0 19
12165: ST_TO_ADDR
// end ; x := personel [ i ] ;
12166: LD_ADDR_VAR 0 13
12170: PUSH
12171: LD_VAR 0 6
12175: PUSH
12176: LD_VAR 0 8
12180: ARRAY
12181: ST_TO_ADDR
// if x = - 1 then
12182: LD_VAR 0 13
12186: PUSH
12187: LD_INT 1
12189: NEG
12190: EQUAL
12191: IFFALSE 12400
// begin for j in f do
12193: LD_ADDR_VAR 0 9
12197: PUSH
12198: LD_VAR 0 12
12202: PUSH
12203: FOR_IN
12204: IFFALSE 12396
// repeat InitHc ;
12206: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12210: LD_VAR 0 9
12214: PPUSH
12215: CALL_OW 266
12219: PUSH
12220: LD_INT 5
12222: EQUAL
12223: IFFALSE 12293
// begin if UnitsInside ( j ) < 3 then
12225: LD_VAR 0 9
12229: PPUSH
12230: CALL_OW 313
12234: PUSH
12235: LD_INT 3
12237: LESS
12238: IFFALSE 12274
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12240: LD_INT 0
12242: PPUSH
12243: LD_INT 5
12245: PUSH
12246: LD_INT 8
12248: PUSH
12249: LD_INT 9
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: LD_VAR 0 17
12261: ARRAY
12262: PPUSH
12263: LD_VAR 0 4
12267: PPUSH
12268: CALL_OW 380
12272: GO 12291
// PrepareHuman ( false , i , skill ) ;
12274: LD_INT 0
12276: PPUSH
12277: LD_VAR 0 8
12281: PPUSH
12282: LD_VAR 0 4
12286: PPUSH
12287: CALL_OW 380
// end else
12291: GO 12310
// PrepareHuman ( false , i , skill ) ;
12293: LD_INT 0
12295: PPUSH
12296: LD_VAR 0 8
12300: PPUSH
12301: LD_VAR 0 4
12305: PPUSH
12306: CALL_OW 380
// un := CreateHuman ;
12310: LD_ADDR_VAR 0 14
12314: PUSH
12315: CALL_OW 44
12319: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12320: LD_ADDR_VAR 0 7
12324: PUSH
12325: LD_VAR 0 7
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: LD_VAR 0 14
12337: PPUSH
12338: CALL_OW 2
12342: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12343: LD_VAR 0 14
12347: PPUSH
12348: LD_VAR 0 9
12352: PPUSH
12353: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12357: LD_VAR 0 9
12361: PPUSH
12362: CALL_OW 313
12366: PUSH
12367: LD_INT 6
12369: EQUAL
12370: PUSH
12371: LD_VAR 0 9
12375: PPUSH
12376: CALL_OW 266
12380: PUSH
12381: LD_INT 32
12383: PUSH
12384: LD_INT 31
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: IN
12391: OR
12392: IFFALSE 12206
12394: GO 12203
12396: POP
12397: POP
// end else
12398: GO 12780
// for j = 1 to x do
12400: LD_ADDR_VAR 0 9
12404: PUSH
12405: DOUBLE
12406: LD_INT 1
12408: DEC
12409: ST_TO_ADDR
12410: LD_VAR 0 13
12414: PUSH
12415: FOR_TO
12416: IFFALSE 12778
// begin InitHc ;
12418: CALL_OW 19
// if not f then
12422: LD_VAR 0 12
12426: NOT
12427: IFFALSE 12516
// begin PrepareHuman ( false , i , skill ) ;
12429: LD_INT 0
12431: PPUSH
12432: LD_VAR 0 8
12436: PPUSH
12437: LD_VAR 0 4
12441: PPUSH
12442: CALL_OW 380
// un := CreateHuman ;
12446: LD_ADDR_VAR 0 14
12450: PUSH
12451: CALL_OW 44
12455: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12456: LD_ADDR_VAR 0 7
12460: PUSH
12461: LD_VAR 0 7
12465: PPUSH
12466: LD_INT 1
12468: PPUSH
12469: LD_VAR 0 14
12473: PPUSH
12474: CALL_OW 2
12478: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12479: LD_VAR 0 14
12483: PPUSH
12484: LD_VAR 0 1
12488: PPUSH
12489: CALL_OW 250
12493: PPUSH
12494: LD_VAR 0 1
12498: PPUSH
12499: CALL_OW 251
12503: PPUSH
12504: LD_INT 10
12506: PPUSH
12507: LD_INT 0
12509: PPUSH
12510: CALL_OW 50
// continue ;
12514: GO 12415
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12516: LD_VAR 0 12
12520: PUSH
12521: LD_INT 1
12523: ARRAY
12524: PPUSH
12525: CALL_OW 313
12529: PUSH
12530: LD_VAR 0 12
12534: PUSH
12535: LD_INT 1
12537: ARRAY
12538: PPUSH
12539: CALL_OW 266
12543: PUSH
12544: LD_INT 32
12546: PUSH
12547: LD_INT 31
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: IN
12554: AND
12555: PUSH
12556: LD_VAR 0 12
12560: PUSH
12561: LD_INT 1
12563: ARRAY
12564: PPUSH
12565: CALL_OW 313
12569: PUSH
12570: LD_INT 6
12572: EQUAL
12573: OR
12574: IFFALSE 12594
// f := Delete ( f , 1 ) ;
12576: LD_ADDR_VAR 0 12
12580: PUSH
12581: LD_VAR 0 12
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 3
12593: ST_TO_ADDR
// if not f then
12594: LD_VAR 0 12
12598: NOT
12599: IFFALSE 12617
// begin x := x + 2 ;
12601: LD_ADDR_VAR 0 13
12605: PUSH
12606: LD_VAR 0 13
12610: PUSH
12611: LD_INT 2
12613: PLUS
12614: ST_TO_ADDR
// continue ;
12615: GO 12415
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12617: LD_VAR 0 12
12621: PUSH
12622: LD_INT 1
12624: ARRAY
12625: PPUSH
12626: CALL_OW 266
12630: PUSH
12631: LD_INT 5
12633: EQUAL
12634: IFFALSE 12708
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12636: LD_VAR 0 12
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: PPUSH
12645: CALL_OW 313
12649: PUSH
12650: LD_INT 3
12652: LESS
12653: IFFALSE 12689
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12655: LD_INT 0
12657: PPUSH
12658: LD_INT 5
12660: PUSH
12661: LD_INT 8
12663: PUSH
12664: LD_INT 9
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: PUSH
12672: LD_VAR 0 17
12676: ARRAY
12677: PPUSH
12678: LD_VAR 0 4
12682: PPUSH
12683: CALL_OW 380
12687: GO 12706
// PrepareHuman ( false , i , skill ) ;
12689: LD_INT 0
12691: PPUSH
12692: LD_VAR 0 8
12696: PPUSH
12697: LD_VAR 0 4
12701: PPUSH
12702: CALL_OW 380
// end else
12706: GO 12725
// PrepareHuman ( false , i , skill ) ;
12708: LD_INT 0
12710: PPUSH
12711: LD_VAR 0 8
12715: PPUSH
12716: LD_VAR 0 4
12720: PPUSH
12721: CALL_OW 380
// un := CreateHuman ;
12725: LD_ADDR_VAR 0 14
12729: PUSH
12730: CALL_OW 44
12734: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12735: LD_ADDR_VAR 0 7
12739: PUSH
12740: LD_VAR 0 7
12744: PPUSH
12745: LD_INT 1
12747: PPUSH
12748: LD_VAR 0 14
12752: PPUSH
12753: CALL_OW 2
12757: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12758: LD_VAR 0 14
12762: PPUSH
12763: LD_VAR 0 12
12767: PUSH
12768: LD_INT 1
12770: ARRAY
12771: PPUSH
12772: CALL_OW 52
// end ;
12776: GO 12415
12778: POP
12779: POP
// end ;
12780: GO 11717
12782: POP
12783: POP
// result := result ^ buildings ;
12784: LD_ADDR_VAR 0 7
12788: PUSH
12789: LD_VAR 0 7
12793: PUSH
12794: LD_VAR 0 18
12798: ADD
12799: ST_TO_ADDR
// end else
12800: GO 12943
// begin for i = 1 to personel do
12802: LD_ADDR_VAR 0 8
12806: PUSH
12807: DOUBLE
12808: LD_INT 1
12810: DEC
12811: ST_TO_ADDR
12812: LD_VAR 0 6
12816: PUSH
12817: FOR_TO
12818: IFFALSE 12941
// begin if i > 4 then
12820: LD_VAR 0 8
12824: PUSH
12825: LD_INT 4
12827: GREATER
12828: IFFALSE 12832
// break ;
12830: GO 12941
// x := personel [ i ] ;
12832: LD_ADDR_VAR 0 13
12836: PUSH
12837: LD_VAR 0 6
12841: PUSH
12842: LD_VAR 0 8
12846: ARRAY
12847: ST_TO_ADDR
// if x = - 1 then
12848: LD_VAR 0 13
12852: PUSH
12853: LD_INT 1
12855: NEG
12856: EQUAL
12857: IFFALSE 12861
// continue ;
12859: GO 12817
// PrepareHuman ( false , i , skill ) ;
12861: LD_INT 0
12863: PPUSH
12864: LD_VAR 0 8
12868: PPUSH
12869: LD_VAR 0 4
12873: PPUSH
12874: CALL_OW 380
// un := CreateHuman ;
12878: LD_ADDR_VAR 0 14
12882: PUSH
12883: CALL_OW 44
12887: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12888: LD_VAR 0 14
12892: PPUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 250
12902: PPUSH
12903: LD_VAR 0 1
12907: PPUSH
12908: CALL_OW 251
12912: PPUSH
12913: LD_INT 10
12915: PPUSH
12916: LD_INT 0
12918: PPUSH
12919: CALL_OW 50
// result := result ^ un ;
12923: LD_ADDR_VAR 0 7
12927: PUSH
12928: LD_VAR 0 7
12932: PUSH
12933: LD_VAR 0 14
12937: ADD
12938: ST_TO_ADDR
// end ;
12939: GO 12817
12941: POP
12942: POP
// end ; end ;
12943: LD_VAR 0 7
12947: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12948: LD_INT 0
12950: PPUSH
12951: PPUSH
12952: PPUSH
12953: PPUSH
12954: PPUSH
12955: PPUSH
12956: PPUSH
12957: PPUSH
12958: PPUSH
12959: PPUSH
12960: PPUSH
12961: PPUSH
12962: PPUSH
12963: PPUSH
12964: PPUSH
12965: PPUSH
// result := false ;
12966: LD_ADDR_VAR 0 3
12970: PUSH
12971: LD_INT 0
12973: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12974: LD_VAR 0 1
12978: NOT
12979: PUSH
12980: LD_VAR 0 1
12984: PPUSH
12985: CALL_OW 266
12989: PUSH
12990: LD_INT 32
12992: PUSH
12993: LD_INT 33
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: IN
13000: NOT
13001: OR
13002: IFFALSE 13006
// exit ;
13004: GO 14115
// nat := GetNation ( tower ) ;
13006: LD_ADDR_VAR 0 12
13010: PUSH
13011: LD_VAR 0 1
13015: PPUSH
13016: CALL_OW 248
13020: ST_TO_ADDR
// side := GetSide ( tower ) ;
13021: LD_ADDR_VAR 0 16
13025: PUSH
13026: LD_VAR 0 1
13030: PPUSH
13031: CALL_OW 255
13035: ST_TO_ADDR
// x := GetX ( tower ) ;
13036: LD_ADDR_VAR 0 10
13040: PUSH
13041: LD_VAR 0 1
13045: PPUSH
13046: CALL_OW 250
13050: ST_TO_ADDR
// y := GetY ( tower ) ;
13051: LD_ADDR_VAR 0 11
13055: PUSH
13056: LD_VAR 0 1
13060: PPUSH
13061: CALL_OW 251
13065: ST_TO_ADDR
// if not x or not y then
13066: LD_VAR 0 10
13070: NOT
13071: PUSH
13072: LD_VAR 0 11
13076: NOT
13077: OR
13078: IFFALSE 13082
// exit ;
13080: GO 14115
// weapon := 0 ;
13082: LD_ADDR_VAR 0 18
13086: PUSH
13087: LD_INT 0
13089: ST_TO_ADDR
// fac_list := [ ] ;
13090: LD_ADDR_VAR 0 17
13094: PUSH
13095: EMPTY
13096: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13097: LD_ADDR_VAR 0 6
13101: PUSH
13102: LD_VAR 0 1
13106: PPUSH
13107: CALL_OW 274
13111: PPUSH
13112: LD_VAR 0 2
13116: PPUSH
13117: LD_INT 0
13119: PPUSH
13120: CALL 10686 0 3
13124: PPUSH
13125: LD_INT 30
13127: PUSH
13128: LD_INT 3
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PPUSH
13135: CALL_OW 72
13139: ST_TO_ADDR
// if not factories then
13140: LD_VAR 0 6
13144: NOT
13145: IFFALSE 13149
// exit ;
13147: GO 14115
// for i in factories do
13149: LD_ADDR_VAR 0 8
13153: PUSH
13154: LD_VAR 0 6
13158: PUSH
13159: FOR_IN
13160: IFFALSE 13185
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13162: LD_ADDR_VAR 0 17
13166: PUSH
13167: LD_VAR 0 17
13171: PUSH
13172: LD_VAR 0 8
13176: PPUSH
13177: CALL_OW 478
13181: UNION
13182: ST_TO_ADDR
13183: GO 13159
13185: POP
13186: POP
// if not fac_list then
13187: LD_VAR 0 17
13191: NOT
13192: IFFALSE 13196
// exit ;
13194: GO 14115
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13196: LD_ADDR_VAR 0 5
13200: PUSH
13201: LD_INT 4
13203: PUSH
13204: LD_INT 5
13206: PUSH
13207: LD_INT 9
13209: PUSH
13210: LD_INT 10
13212: PUSH
13213: LD_INT 6
13215: PUSH
13216: LD_INT 7
13218: PUSH
13219: LD_INT 11
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 27
13233: PUSH
13234: LD_INT 28
13236: PUSH
13237: LD_INT 26
13239: PUSH
13240: LD_INT 30
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 43
13251: PUSH
13252: LD_INT 44
13254: PUSH
13255: LD_INT 46
13257: PUSH
13258: LD_INT 45
13260: PUSH
13261: LD_INT 47
13263: PUSH
13264: LD_INT 49
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: LD_VAR 0 12
13284: ARRAY
13285: ST_TO_ADDR
// list := list isect fac_list ;
13286: LD_ADDR_VAR 0 5
13290: PUSH
13291: LD_VAR 0 5
13295: PUSH
13296: LD_VAR 0 17
13300: ISECT
13301: ST_TO_ADDR
// if not list then
13302: LD_VAR 0 5
13306: NOT
13307: IFFALSE 13311
// exit ;
13309: GO 14115
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13311: LD_VAR 0 12
13315: PUSH
13316: LD_INT 3
13318: EQUAL
13319: PUSH
13320: LD_INT 49
13322: PUSH
13323: LD_VAR 0 5
13327: IN
13328: AND
13329: PUSH
13330: LD_INT 31
13332: PPUSH
13333: LD_VAR 0 16
13337: PPUSH
13338: CALL_OW 321
13342: PUSH
13343: LD_INT 2
13345: EQUAL
13346: AND
13347: IFFALSE 13407
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13349: LD_INT 22
13351: PUSH
13352: LD_VAR 0 16
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 35
13363: PUSH
13364: LD_INT 49
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 91
13373: PUSH
13374: LD_VAR 0 1
13378: PUSH
13379: LD_INT 10
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: LIST
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: PPUSH
13392: CALL_OW 69
13396: NOT
13397: IFFALSE 13407
// weapon := ru_time_lapser ;
13399: LD_ADDR_VAR 0 18
13403: PUSH
13404: LD_INT 49
13406: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13407: LD_VAR 0 12
13411: PUSH
13412: LD_INT 1
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: IN
13422: PUSH
13423: LD_INT 11
13425: PUSH
13426: LD_VAR 0 5
13430: IN
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_VAR 0 5
13439: IN
13440: OR
13441: AND
13442: PUSH
13443: LD_INT 6
13445: PPUSH
13446: LD_VAR 0 16
13450: PPUSH
13451: CALL_OW 321
13455: PUSH
13456: LD_INT 2
13458: EQUAL
13459: AND
13460: IFFALSE 13625
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13462: LD_INT 22
13464: PUSH
13465: LD_VAR 0 16
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 2
13476: PUSH
13477: LD_INT 35
13479: PUSH
13480: LD_INT 11
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 35
13489: PUSH
13490: LD_INT 30
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 91
13504: PUSH
13505: LD_VAR 0 1
13509: PUSH
13510: LD_INT 18
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: PPUSH
13523: CALL_OW 69
13527: NOT
13528: PUSH
13529: LD_INT 22
13531: PUSH
13532: LD_VAR 0 16
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 2
13543: PUSH
13544: LD_INT 30
13546: PUSH
13547: LD_INT 32
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 30
13556: PUSH
13557: LD_INT 33
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 91
13571: PUSH
13572: LD_VAR 0 1
13576: PUSH
13577: LD_INT 12
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: PPUSH
13593: CALL_OW 69
13597: PUSH
13598: LD_INT 2
13600: GREATER
13601: AND
13602: IFFALSE 13625
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13604: LD_ADDR_VAR 0 18
13608: PUSH
13609: LD_INT 11
13611: PUSH
13612: LD_INT 30
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: LD_VAR 0 12
13623: ARRAY
13624: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13625: LD_VAR 0 18
13629: NOT
13630: PUSH
13631: LD_INT 40
13633: PPUSH
13634: LD_VAR 0 16
13638: PPUSH
13639: CALL_OW 321
13643: PUSH
13644: LD_INT 2
13646: EQUAL
13647: AND
13648: PUSH
13649: LD_INT 7
13651: PUSH
13652: LD_VAR 0 5
13656: IN
13657: PUSH
13658: LD_INT 28
13660: PUSH
13661: LD_VAR 0 5
13665: IN
13666: OR
13667: PUSH
13668: LD_INT 45
13670: PUSH
13671: LD_VAR 0 5
13675: IN
13676: OR
13677: AND
13678: IFFALSE 13932
// begin hex := GetHexInfo ( x , y ) ;
13680: LD_ADDR_VAR 0 4
13684: PUSH
13685: LD_VAR 0 10
13689: PPUSH
13690: LD_VAR 0 11
13694: PPUSH
13695: CALL_OW 546
13699: ST_TO_ADDR
// if hex [ 1 ] then
13700: LD_VAR 0 4
13704: PUSH
13705: LD_INT 1
13707: ARRAY
13708: IFFALSE 13712
// exit ;
13710: GO 14115
// height := hex [ 2 ] ;
13712: LD_ADDR_VAR 0 15
13716: PUSH
13717: LD_VAR 0 4
13721: PUSH
13722: LD_INT 2
13724: ARRAY
13725: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13726: LD_ADDR_VAR 0 14
13730: PUSH
13731: LD_INT 0
13733: PUSH
13734: LD_INT 2
13736: PUSH
13737: LD_INT 3
13739: PUSH
13740: LD_INT 5
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: ST_TO_ADDR
// for i in tmp do
13749: LD_ADDR_VAR 0 8
13753: PUSH
13754: LD_VAR 0 14
13758: PUSH
13759: FOR_IN
13760: IFFALSE 13930
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13762: LD_ADDR_VAR 0 9
13766: PUSH
13767: LD_VAR 0 10
13771: PPUSH
13772: LD_VAR 0 8
13776: PPUSH
13777: LD_INT 5
13779: PPUSH
13780: CALL_OW 272
13784: PUSH
13785: LD_VAR 0 11
13789: PPUSH
13790: LD_VAR 0 8
13794: PPUSH
13795: LD_INT 5
13797: PPUSH
13798: CALL_OW 273
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13807: LD_VAR 0 9
13811: PUSH
13812: LD_INT 1
13814: ARRAY
13815: PPUSH
13816: LD_VAR 0 9
13820: PUSH
13821: LD_INT 2
13823: ARRAY
13824: PPUSH
13825: CALL_OW 488
13829: IFFALSE 13928
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13831: LD_ADDR_VAR 0 4
13835: PUSH
13836: LD_VAR 0 9
13840: PUSH
13841: LD_INT 1
13843: ARRAY
13844: PPUSH
13845: LD_VAR 0 9
13849: PUSH
13850: LD_INT 2
13852: ARRAY
13853: PPUSH
13854: CALL_OW 546
13858: ST_TO_ADDR
// if hex [ 1 ] then
13859: LD_VAR 0 4
13863: PUSH
13864: LD_INT 1
13866: ARRAY
13867: IFFALSE 13871
// continue ;
13869: GO 13759
// h := hex [ 2 ] ;
13871: LD_ADDR_VAR 0 13
13875: PUSH
13876: LD_VAR 0 4
13880: PUSH
13881: LD_INT 2
13883: ARRAY
13884: ST_TO_ADDR
// if h + 7 < height then
13885: LD_VAR 0 13
13889: PUSH
13890: LD_INT 7
13892: PLUS
13893: PUSH
13894: LD_VAR 0 15
13898: LESS
13899: IFFALSE 13928
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13901: LD_ADDR_VAR 0 18
13905: PUSH
13906: LD_INT 7
13908: PUSH
13909: LD_INT 28
13911: PUSH
13912: LD_INT 45
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: LD_VAR 0 12
13924: ARRAY
13925: ST_TO_ADDR
// break ;
13926: GO 13930
// end ; end ; end ;
13928: GO 13759
13930: POP
13931: POP
// end ; if not weapon then
13932: LD_VAR 0 18
13936: NOT
13937: IFFALSE 13997
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13939: LD_ADDR_VAR 0 5
13943: PUSH
13944: LD_VAR 0 5
13948: PUSH
13949: LD_INT 11
13951: PUSH
13952: LD_INT 30
13954: PUSH
13955: LD_INT 49
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: DIFF
13963: ST_TO_ADDR
// if not list then
13964: LD_VAR 0 5
13968: NOT
13969: IFFALSE 13973
// exit ;
13971: GO 14115
// weapon := list [ rand ( 1 , list ) ] ;
13973: LD_ADDR_VAR 0 18
13977: PUSH
13978: LD_VAR 0 5
13982: PUSH
13983: LD_INT 1
13985: PPUSH
13986: LD_VAR 0 5
13990: PPUSH
13991: CALL_OW 12
13995: ARRAY
13996: ST_TO_ADDR
// end ; if weapon then
13997: LD_VAR 0 18
14001: IFFALSE 14115
// begin tmp := CostOfWeapon ( weapon ) ;
14003: LD_ADDR_VAR 0 14
14007: PUSH
14008: LD_VAR 0 18
14012: PPUSH
14013: CALL_OW 451
14017: ST_TO_ADDR
// j := GetBase ( tower ) ;
14018: LD_ADDR_VAR 0 9
14022: PUSH
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 274
14032: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14033: LD_VAR 0 9
14037: PPUSH
14038: LD_INT 1
14040: PPUSH
14041: CALL_OW 275
14045: PUSH
14046: LD_VAR 0 14
14050: PUSH
14051: LD_INT 1
14053: ARRAY
14054: GREATEREQUAL
14055: PUSH
14056: LD_VAR 0 9
14060: PPUSH
14061: LD_INT 2
14063: PPUSH
14064: CALL_OW 275
14068: PUSH
14069: LD_VAR 0 14
14073: PUSH
14074: LD_INT 2
14076: ARRAY
14077: GREATEREQUAL
14078: AND
14079: PUSH
14080: LD_VAR 0 9
14084: PPUSH
14085: LD_INT 3
14087: PPUSH
14088: CALL_OW 275
14092: PUSH
14093: LD_VAR 0 14
14097: PUSH
14098: LD_INT 3
14100: ARRAY
14101: GREATEREQUAL
14102: AND
14103: IFFALSE 14115
// result := weapon ;
14105: LD_ADDR_VAR 0 3
14109: PUSH
14110: LD_VAR 0 18
14114: ST_TO_ADDR
// end ; end ;
14115: LD_VAR 0 3
14119: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14120: LD_INT 0
14122: PPUSH
14123: PPUSH
// result := true ;
14124: LD_ADDR_VAR 0 3
14128: PUSH
14129: LD_INT 1
14131: ST_TO_ADDR
// if array1 = array2 then
14132: LD_VAR 0 1
14136: PUSH
14137: LD_VAR 0 2
14141: EQUAL
14142: IFFALSE 14202
// begin for i = 1 to array1 do
14144: LD_ADDR_VAR 0 4
14148: PUSH
14149: DOUBLE
14150: LD_INT 1
14152: DEC
14153: ST_TO_ADDR
14154: LD_VAR 0 1
14158: PUSH
14159: FOR_TO
14160: IFFALSE 14198
// if array1 [ i ] <> array2 [ i ] then
14162: LD_VAR 0 1
14166: PUSH
14167: LD_VAR 0 4
14171: ARRAY
14172: PUSH
14173: LD_VAR 0 2
14177: PUSH
14178: LD_VAR 0 4
14182: ARRAY
14183: NONEQUAL
14184: IFFALSE 14196
// begin result := false ;
14186: LD_ADDR_VAR 0 3
14190: PUSH
14191: LD_INT 0
14193: ST_TO_ADDR
// break ;
14194: GO 14198
// end ;
14196: GO 14159
14198: POP
14199: POP
// end else
14200: GO 14210
// result := false ;
14202: LD_ADDR_VAR 0 3
14206: PUSH
14207: LD_INT 0
14209: ST_TO_ADDR
// end ;
14210: LD_VAR 0 3
14214: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14215: LD_INT 0
14217: PPUSH
14218: PPUSH
// if not array1 or not array2 then
14219: LD_VAR 0 1
14223: NOT
14224: PUSH
14225: LD_VAR 0 2
14229: NOT
14230: OR
14231: IFFALSE 14235
// exit ;
14233: GO 14299
// result := true ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 1
14242: ST_TO_ADDR
// for i = 1 to array1 do
14243: LD_ADDR_VAR 0 4
14247: PUSH
14248: DOUBLE
14249: LD_INT 1
14251: DEC
14252: ST_TO_ADDR
14253: LD_VAR 0 1
14257: PUSH
14258: FOR_TO
14259: IFFALSE 14297
// if array1 [ i ] <> array2 [ i ] then
14261: LD_VAR 0 1
14265: PUSH
14266: LD_VAR 0 4
14270: ARRAY
14271: PUSH
14272: LD_VAR 0 2
14276: PUSH
14277: LD_VAR 0 4
14281: ARRAY
14282: NONEQUAL
14283: IFFALSE 14295
// begin result := false ;
14285: LD_ADDR_VAR 0 3
14289: PUSH
14290: LD_INT 0
14292: ST_TO_ADDR
// break ;
14293: GO 14297
// end ;
14295: GO 14258
14297: POP
14298: POP
// end ;
14299: LD_VAR 0 3
14303: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14304: LD_INT 0
14306: PPUSH
14307: PPUSH
14308: PPUSH
// pom := GetBase ( fac ) ;
14309: LD_ADDR_VAR 0 5
14313: PUSH
14314: LD_VAR 0 1
14318: PPUSH
14319: CALL_OW 274
14323: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14324: LD_ADDR_VAR 0 4
14328: PUSH
14329: LD_VAR 0 2
14333: PUSH
14334: LD_INT 1
14336: ARRAY
14337: PPUSH
14338: LD_VAR 0 2
14342: PUSH
14343: LD_INT 2
14345: ARRAY
14346: PPUSH
14347: LD_VAR 0 2
14351: PUSH
14352: LD_INT 3
14354: ARRAY
14355: PPUSH
14356: LD_VAR 0 2
14360: PUSH
14361: LD_INT 4
14363: ARRAY
14364: PPUSH
14365: CALL_OW 449
14369: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14370: LD_ADDR_VAR 0 3
14374: PUSH
14375: LD_VAR 0 5
14379: PPUSH
14380: LD_INT 1
14382: PPUSH
14383: CALL_OW 275
14387: PUSH
14388: LD_VAR 0 4
14392: PUSH
14393: LD_INT 1
14395: ARRAY
14396: GREATEREQUAL
14397: PUSH
14398: LD_VAR 0 5
14402: PPUSH
14403: LD_INT 2
14405: PPUSH
14406: CALL_OW 275
14410: PUSH
14411: LD_VAR 0 4
14415: PUSH
14416: LD_INT 2
14418: ARRAY
14419: GREATEREQUAL
14420: AND
14421: PUSH
14422: LD_VAR 0 5
14426: PPUSH
14427: LD_INT 3
14429: PPUSH
14430: CALL_OW 275
14434: PUSH
14435: LD_VAR 0 4
14439: PUSH
14440: LD_INT 3
14442: ARRAY
14443: GREATEREQUAL
14444: AND
14445: ST_TO_ADDR
// end ;
14446: LD_VAR 0 3
14450: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14451: LD_INT 0
14453: PPUSH
14454: PPUSH
14455: PPUSH
14456: PPUSH
// pom := GetBase ( building ) ;
14457: LD_ADDR_VAR 0 3
14461: PUSH
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL_OW 274
14471: ST_TO_ADDR
// if not pom then
14472: LD_VAR 0 3
14476: NOT
14477: IFFALSE 14481
// exit ;
14479: GO 14651
// btype := GetBType ( building ) ;
14481: LD_ADDR_VAR 0 5
14485: PUSH
14486: LD_VAR 0 1
14490: PPUSH
14491: CALL_OW 266
14495: ST_TO_ADDR
// if btype = b_armoury then
14496: LD_VAR 0 5
14500: PUSH
14501: LD_INT 4
14503: EQUAL
14504: IFFALSE 14514
// btype := b_barracks ;
14506: LD_ADDR_VAR 0 5
14510: PUSH
14511: LD_INT 5
14513: ST_TO_ADDR
// if btype = b_depot then
14514: LD_VAR 0 5
14518: PUSH
14519: LD_INT 0
14521: EQUAL
14522: IFFALSE 14532
// btype := b_warehouse ;
14524: LD_ADDR_VAR 0 5
14528: PUSH
14529: LD_INT 1
14531: ST_TO_ADDR
// if btype = b_workshop then
14532: LD_VAR 0 5
14536: PUSH
14537: LD_INT 2
14539: EQUAL
14540: IFFALSE 14550
// btype := b_factory ;
14542: LD_ADDR_VAR 0 5
14546: PUSH
14547: LD_INT 3
14549: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14550: LD_ADDR_VAR 0 4
14554: PUSH
14555: LD_VAR 0 5
14559: PPUSH
14560: LD_VAR 0 1
14564: PPUSH
14565: CALL_OW 248
14569: PPUSH
14570: CALL_OW 450
14574: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: LD_VAR 0 3
14584: PPUSH
14585: LD_INT 1
14587: PPUSH
14588: CALL_OW 275
14592: PUSH
14593: LD_VAR 0 4
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: GREATEREQUAL
14602: PUSH
14603: LD_VAR 0 3
14607: PPUSH
14608: LD_INT 2
14610: PPUSH
14611: CALL_OW 275
14615: PUSH
14616: LD_VAR 0 4
14620: PUSH
14621: LD_INT 2
14623: ARRAY
14624: GREATEREQUAL
14625: AND
14626: PUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_INT 3
14634: PPUSH
14635: CALL_OW 275
14639: PUSH
14640: LD_VAR 0 4
14644: PUSH
14645: LD_INT 3
14647: ARRAY
14648: GREATEREQUAL
14649: AND
14650: ST_TO_ADDR
// end ;
14651: LD_VAR 0 2
14655: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14656: LD_INT 0
14658: PPUSH
14659: PPUSH
14660: PPUSH
// pom := GetBase ( building ) ;
14661: LD_ADDR_VAR 0 4
14665: PUSH
14666: LD_VAR 0 1
14670: PPUSH
14671: CALL_OW 274
14675: ST_TO_ADDR
// if not pom then
14676: LD_VAR 0 4
14680: NOT
14681: IFFALSE 14685
// exit ;
14683: GO 14786
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14685: LD_ADDR_VAR 0 5
14689: PUSH
14690: LD_VAR 0 2
14694: PPUSH
14695: LD_VAR 0 1
14699: PPUSH
14700: CALL_OW 248
14704: PPUSH
14705: CALL_OW 450
14709: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14710: LD_ADDR_VAR 0 3
14714: PUSH
14715: LD_VAR 0 4
14719: PPUSH
14720: LD_INT 1
14722: PPUSH
14723: CALL_OW 275
14727: PUSH
14728: LD_VAR 0 5
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: GREATEREQUAL
14737: PUSH
14738: LD_VAR 0 4
14742: PPUSH
14743: LD_INT 2
14745: PPUSH
14746: CALL_OW 275
14750: PUSH
14751: LD_VAR 0 5
14755: PUSH
14756: LD_INT 2
14758: ARRAY
14759: GREATEREQUAL
14760: AND
14761: PUSH
14762: LD_VAR 0 4
14766: PPUSH
14767: LD_INT 3
14769: PPUSH
14770: CALL_OW 275
14774: PUSH
14775: LD_VAR 0 5
14779: PUSH
14780: LD_INT 3
14782: ARRAY
14783: GREATEREQUAL
14784: AND
14785: ST_TO_ADDR
// end ;
14786: LD_VAR 0 3
14790: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14791: LD_INT 0
14793: PPUSH
14794: PPUSH
14795: PPUSH
14796: PPUSH
14797: PPUSH
14798: PPUSH
14799: PPUSH
14800: PPUSH
14801: PPUSH
14802: PPUSH
14803: PPUSH
// result := false ;
14804: LD_ADDR_VAR 0 8
14808: PUSH
14809: LD_INT 0
14811: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14812: LD_VAR 0 5
14816: NOT
14817: PUSH
14818: LD_VAR 0 1
14822: NOT
14823: OR
14824: PUSH
14825: LD_VAR 0 2
14829: NOT
14830: OR
14831: PUSH
14832: LD_VAR 0 3
14836: NOT
14837: OR
14838: IFFALSE 14842
// exit ;
14840: GO 15656
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14842: LD_ADDR_VAR 0 14
14846: PUSH
14847: LD_VAR 0 1
14851: PPUSH
14852: LD_VAR 0 2
14856: PPUSH
14857: LD_VAR 0 3
14861: PPUSH
14862: LD_VAR 0 4
14866: PPUSH
14867: LD_VAR 0 5
14871: PUSH
14872: LD_INT 1
14874: ARRAY
14875: PPUSH
14876: CALL_OW 248
14880: PPUSH
14881: LD_INT 0
14883: PPUSH
14884: CALL 16893 0 6
14888: ST_TO_ADDR
// if not hexes then
14889: LD_VAR 0 14
14893: NOT
14894: IFFALSE 14898
// exit ;
14896: GO 15656
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14898: LD_ADDR_VAR 0 17
14902: PUSH
14903: LD_VAR 0 5
14907: PPUSH
14908: LD_INT 22
14910: PUSH
14911: LD_VAR 0 13
14915: PPUSH
14916: CALL_OW 255
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: LD_INT 30
14930: PUSH
14931: LD_INT 0
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 30
14940: PUSH
14941: LD_INT 1
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PPUSH
14957: CALL_OW 72
14961: ST_TO_ADDR
// for i = 1 to hexes do
14962: LD_ADDR_VAR 0 9
14966: PUSH
14967: DOUBLE
14968: LD_INT 1
14970: DEC
14971: ST_TO_ADDR
14972: LD_VAR 0 14
14976: PUSH
14977: FOR_TO
14978: IFFALSE 15654
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14980: LD_ADDR_VAR 0 13
14984: PUSH
14985: LD_VAR 0 14
14989: PUSH
14990: LD_VAR 0 9
14994: ARRAY
14995: PUSH
14996: LD_INT 1
14998: ARRAY
14999: PPUSH
15000: LD_VAR 0 14
15004: PUSH
15005: LD_VAR 0 9
15009: ARRAY
15010: PUSH
15011: LD_INT 2
15013: ARRAY
15014: PPUSH
15015: CALL_OW 428
15019: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15020: LD_VAR 0 14
15024: PUSH
15025: LD_VAR 0 9
15029: ARRAY
15030: PUSH
15031: LD_INT 1
15033: ARRAY
15034: PPUSH
15035: LD_VAR 0 14
15039: PUSH
15040: LD_VAR 0 9
15044: ARRAY
15045: PUSH
15046: LD_INT 2
15048: ARRAY
15049: PPUSH
15050: CALL_OW 351
15054: PUSH
15055: LD_VAR 0 14
15059: PUSH
15060: LD_VAR 0 9
15064: ARRAY
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: LD_VAR 0 14
15074: PUSH
15075: LD_VAR 0 9
15079: ARRAY
15080: PUSH
15081: LD_INT 2
15083: ARRAY
15084: PPUSH
15085: CALL_OW 488
15089: NOT
15090: OR
15091: PUSH
15092: LD_VAR 0 13
15096: PPUSH
15097: CALL_OW 247
15101: PUSH
15102: LD_INT 3
15104: EQUAL
15105: OR
15106: IFFALSE 15112
// exit ;
15108: POP
15109: POP
15110: GO 15656
// if not tmp then
15112: LD_VAR 0 13
15116: NOT
15117: IFFALSE 15121
// continue ;
15119: GO 14977
// result := true ;
15121: LD_ADDR_VAR 0 8
15125: PUSH
15126: LD_INT 1
15128: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15129: LD_VAR 0 6
15133: PUSH
15134: LD_VAR 0 13
15138: PPUSH
15139: CALL_OW 247
15143: PUSH
15144: LD_INT 2
15146: EQUAL
15147: AND
15148: PUSH
15149: LD_VAR 0 13
15153: PPUSH
15154: CALL_OW 263
15158: PUSH
15159: LD_INT 1
15161: EQUAL
15162: AND
15163: IFFALSE 15327
// begin if IsDrivenBy ( tmp ) then
15165: LD_VAR 0 13
15169: PPUSH
15170: CALL_OW 311
15174: IFFALSE 15178
// continue ;
15176: GO 14977
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15178: LD_VAR 0 6
15182: PPUSH
15183: LD_INT 3
15185: PUSH
15186: LD_INT 60
15188: PUSH
15189: EMPTY
15190: LIST
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 3
15198: PUSH
15199: LD_INT 55
15201: PUSH
15202: EMPTY
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PPUSH
15213: CALL_OW 72
15217: IFFALSE 15325
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15219: LD_ADDR_VAR 0 18
15223: PUSH
15224: LD_VAR 0 6
15228: PPUSH
15229: LD_INT 3
15231: PUSH
15232: LD_INT 60
15234: PUSH
15235: EMPTY
15236: LIST
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 3
15244: PUSH
15245: LD_INT 55
15247: PUSH
15248: EMPTY
15249: LIST
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PPUSH
15259: CALL_OW 72
15263: PUSH
15264: LD_INT 1
15266: ARRAY
15267: ST_TO_ADDR
// if IsInUnit ( driver ) then
15268: LD_VAR 0 18
15272: PPUSH
15273: CALL_OW 310
15277: IFFALSE 15288
// ComExit ( driver ) ;
15279: LD_VAR 0 18
15283: PPUSH
15284: CALL 40021 0 1
// AddComEnterUnit ( driver , tmp ) ;
15288: LD_VAR 0 18
15292: PPUSH
15293: LD_VAR 0 13
15297: PPUSH
15298: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15302: LD_VAR 0 18
15306: PPUSH
15307: LD_VAR 0 7
15311: PPUSH
15312: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15316: LD_VAR 0 18
15320: PPUSH
15321: CALL_OW 181
// end ; continue ;
15325: GO 14977
// end ; if not cleaners or not tmp in cleaners then
15327: LD_VAR 0 6
15331: NOT
15332: PUSH
15333: LD_VAR 0 13
15337: PUSH
15338: LD_VAR 0 6
15342: IN
15343: NOT
15344: OR
15345: IFFALSE 15652
// begin if dep then
15347: LD_VAR 0 17
15351: IFFALSE 15487
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15353: LD_ADDR_VAR 0 16
15357: PUSH
15358: LD_VAR 0 17
15362: PUSH
15363: LD_INT 1
15365: ARRAY
15366: PPUSH
15367: CALL_OW 250
15371: PPUSH
15372: LD_VAR 0 17
15376: PUSH
15377: LD_INT 1
15379: ARRAY
15380: PPUSH
15381: CALL_OW 254
15385: PPUSH
15386: LD_INT 5
15388: PPUSH
15389: CALL_OW 272
15393: PUSH
15394: LD_VAR 0 17
15398: PUSH
15399: LD_INT 1
15401: ARRAY
15402: PPUSH
15403: CALL_OW 251
15407: PPUSH
15408: LD_VAR 0 17
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: PPUSH
15417: CALL_OW 254
15421: PPUSH
15422: LD_INT 5
15424: PPUSH
15425: CALL_OW 273
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15434: LD_VAR 0 16
15438: PUSH
15439: LD_INT 1
15441: ARRAY
15442: PPUSH
15443: LD_VAR 0 16
15447: PUSH
15448: LD_INT 2
15450: ARRAY
15451: PPUSH
15452: CALL_OW 488
15456: IFFALSE 15487
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15458: LD_VAR 0 13
15462: PPUSH
15463: LD_VAR 0 16
15467: PUSH
15468: LD_INT 1
15470: ARRAY
15471: PPUSH
15472: LD_VAR 0 16
15476: PUSH
15477: LD_INT 2
15479: ARRAY
15480: PPUSH
15481: CALL_OW 111
// continue ;
15485: GO 14977
// end ; end ; r := GetDir ( tmp ) ;
15487: LD_ADDR_VAR 0 15
15491: PUSH
15492: LD_VAR 0 13
15496: PPUSH
15497: CALL_OW 254
15501: ST_TO_ADDR
// if r = 5 then
15502: LD_VAR 0 15
15506: PUSH
15507: LD_INT 5
15509: EQUAL
15510: IFFALSE 15520
// r := 0 ;
15512: LD_ADDR_VAR 0 15
15516: PUSH
15517: LD_INT 0
15519: ST_TO_ADDR
// for j = r to 5 do
15520: LD_ADDR_VAR 0 10
15524: PUSH
15525: DOUBLE
15526: LD_VAR 0 15
15530: DEC
15531: ST_TO_ADDR
15532: LD_INT 5
15534: PUSH
15535: FOR_TO
15536: IFFALSE 15650
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15538: LD_ADDR_VAR 0 11
15542: PUSH
15543: LD_VAR 0 13
15547: PPUSH
15548: CALL_OW 250
15552: PPUSH
15553: LD_VAR 0 10
15557: PPUSH
15558: LD_INT 2
15560: PPUSH
15561: CALL_OW 272
15565: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15566: LD_ADDR_VAR 0 12
15570: PUSH
15571: LD_VAR 0 13
15575: PPUSH
15576: CALL_OW 251
15580: PPUSH
15581: LD_VAR 0 10
15585: PPUSH
15586: LD_INT 2
15588: PPUSH
15589: CALL_OW 273
15593: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15594: LD_VAR 0 11
15598: PPUSH
15599: LD_VAR 0 12
15603: PPUSH
15604: CALL_OW 488
15608: PUSH
15609: LD_VAR 0 11
15613: PPUSH
15614: LD_VAR 0 12
15618: PPUSH
15619: CALL_OW 428
15623: NOT
15624: AND
15625: IFFALSE 15648
// begin ComMoveXY ( tmp , _x , _y ) ;
15627: LD_VAR 0 13
15631: PPUSH
15632: LD_VAR 0 11
15636: PPUSH
15637: LD_VAR 0 12
15641: PPUSH
15642: CALL_OW 111
// break ;
15646: GO 15650
// end ; end ;
15648: GO 15535
15650: POP
15651: POP
// end ; end ;
15652: GO 14977
15654: POP
15655: POP
// end ;
15656: LD_VAR 0 8
15660: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15661: LD_INT 0
15663: PPUSH
// result := true ;
15664: LD_ADDR_VAR 0 3
15668: PUSH
15669: LD_INT 1
15671: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15672: LD_VAR 0 2
15676: PUSH
15677: LD_INT 24
15679: DOUBLE
15680: EQUAL
15681: IFTRUE 15691
15683: LD_INT 33
15685: DOUBLE
15686: EQUAL
15687: IFTRUE 15691
15689: GO 15716
15691: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15692: LD_ADDR_VAR 0 3
15696: PUSH
15697: LD_INT 32
15699: PPUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 321
15709: PUSH
15710: LD_INT 2
15712: EQUAL
15713: ST_TO_ADDR
15714: GO 16036
15716: LD_INT 20
15718: DOUBLE
15719: EQUAL
15720: IFTRUE 15724
15722: GO 15749
15724: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15725: LD_ADDR_VAR 0 3
15729: PUSH
15730: LD_INT 6
15732: PPUSH
15733: LD_VAR 0 1
15737: PPUSH
15738: CALL_OW 321
15742: PUSH
15743: LD_INT 2
15745: EQUAL
15746: ST_TO_ADDR
15747: GO 16036
15749: LD_INT 22
15751: DOUBLE
15752: EQUAL
15753: IFTRUE 15763
15755: LD_INT 36
15757: DOUBLE
15758: EQUAL
15759: IFTRUE 15763
15761: GO 15788
15763: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15764: LD_ADDR_VAR 0 3
15768: PUSH
15769: LD_INT 15
15771: PPUSH
15772: LD_VAR 0 1
15776: PPUSH
15777: CALL_OW 321
15781: PUSH
15782: LD_INT 2
15784: EQUAL
15785: ST_TO_ADDR
15786: GO 16036
15788: LD_INT 30
15790: DOUBLE
15791: EQUAL
15792: IFTRUE 15796
15794: GO 15821
15796: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15797: LD_ADDR_VAR 0 3
15801: PUSH
15802: LD_INT 20
15804: PPUSH
15805: LD_VAR 0 1
15809: PPUSH
15810: CALL_OW 321
15814: PUSH
15815: LD_INT 2
15817: EQUAL
15818: ST_TO_ADDR
15819: GO 16036
15821: LD_INT 28
15823: DOUBLE
15824: EQUAL
15825: IFTRUE 15835
15827: LD_INT 21
15829: DOUBLE
15830: EQUAL
15831: IFTRUE 15835
15833: GO 15860
15835: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15836: LD_ADDR_VAR 0 3
15840: PUSH
15841: LD_INT 21
15843: PPUSH
15844: LD_VAR 0 1
15848: PPUSH
15849: CALL_OW 321
15853: PUSH
15854: LD_INT 2
15856: EQUAL
15857: ST_TO_ADDR
15858: GO 16036
15860: LD_INT 16
15862: DOUBLE
15863: EQUAL
15864: IFTRUE 15868
15866: GO 15895
15868: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: LD_EXP 22
15878: PPUSH
15879: LD_VAR 0 1
15883: PPUSH
15884: CALL_OW 321
15888: PUSH
15889: LD_INT 2
15891: EQUAL
15892: ST_TO_ADDR
15893: GO 16036
15895: LD_INT 19
15897: DOUBLE
15898: EQUAL
15899: IFTRUE 15909
15901: LD_INT 23
15903: DOUBLE
15904: EQUAL
15905: IFTRUE 15909
15907: GO 15936
15909: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15910: LD_ADDR_VAR 0 3
15914: PUSH
15915: LD_EXP 21
15919: PPUSH
15920: LD_VAR 0 1
15924: PPUSH
15925: CALL_OW 321
15929: PUSH
15930: LD_INT 2
15932: EQUAL
15933: ST_TO_ADDR
15934: GO 16036
15936: LD_INT 17
15938: DOUBLE
15939: EQUAL
15940: IFTRUE 15944
15942: GO 15969
15944: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: LD_INT 39
15952: PPUSH
15953: LD_VAR 0 1
15957: PPUSH
15958: CALL_OW 321
15962: PUSH
15963: LD_INT 2
15965: EQUAL
15966: ST_TO_ADDR
15967: GO 16036
15969: LD_INT 18
15971: DOUBLE
15972: EQUAL
15973: IFTRUE 15977
15975: GO 16002
15977: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15978: LD_ADDR_VAR 0 3
15982: PUSH
15983: LD_INT 40
15985: PPUSH
15986: LD_VAR 0 1
15990: PPUSH
15991: CALL_OW 321
15995: PUSH
15996: LD_INT 2
15998: EQUAL
15999: ST_TO_ADDR
16000: GO 16036
16002: LD_INT 27
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16010
16008: GO 16035
16010: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16011: LD_ADDR_VAR 0 3
16015: PUSH
16016: LD_INT 35
16018: PPUSH
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 321
16028: PUSH
16029: LD_INT 2
16031: EQUAL
16032: ST_TO_ADDR
16033: GO 16036
16035: POP
// end ;
16036: LD_VAR 0 3
16040: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16041: LD_INT 0
16043: PPUSH
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
// result := false ;
16054: LD_ADDR_VAR 0 6
16058: PUSH
16059: LD_INT 0
16061: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16062: LD_VAR 0 1
16066: NOT
16067: PUSH
16068: LD_VAR 0 1
16072: PPUSH
16073: CALL_OW 266
16077: PUSH
16078: LD_INT 0
16080: PUSH
16081: LD_INT 1
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: IN
16088: NOT
16089: OR
16090: PUSH
16091: LD_VAR 0 2
16095: NOT
16096: OR
16097: PUSH
16098: LD_VAR 0 5
16102: PUSH
16103: LD_INT 0
16105: PUSH
16106: LD_INT 1
16108: PUSH
16109: LD_INT 2
16111: PUSH
16112: LD_INT 3
16114: PUSH
16115: LD_INT 4
16117: PUSH
16118: LD_INT 5
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: IN
16129: NOT
16130: OR
16131: PUSH
16132: LD_VAR 0 3
16136: PPUSH
16137: LD_VAR 0 4
16141: PPUSH
16142: CALL_OW 488
16146: NOT
16147: OR
16148: IFFALSE 16152
// exit ;
16150: GO 16888
// side := GetSide ( depot ) ;
16152: LD_ADDR_VAR 0 9
16156: PUSH
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 255
16166: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16167: LD_VAR 0 9
16171: PPUSH
16172: LD_VAR 0 2
16176: PPUSH
16177: CALL 15661 0 2
16181: NOT
16182: IFFALSE 16186
// exit ;
16184: GO 16888
// pom := GetBase ( depot ) ;
16186: LD_ADDR_VAR 0 10
16190: PUSH
16191: LD_VAR 0 1
16195: PPUSH
16196: CALL_OW 274
16200: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16201: LD_ADDR_VAR 0 11
16205: PUSH
16206: LD_VAR 0 2
16210: PPUSH
16211: LD_VAR 0 1
16215: PPUSH
16216: CALL_OW 248
16220: PPUSH
16221: CALL_OW 450
16225: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16226: LD_VAR 0 10
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: CALL_OW 275
16238: PUSH
16239: LD_VAR 0 11
16243: PUSH
16244: LD_INT 1
16246: ARRAY
16247: GREATEREQUAL
16248: PUSH
16249: LD_VAR 0 10
16253: PPUSH
16254: LD_INT 2
16256: PPUSH
16257: CALL_OW 275
16261: PUSH
16262: LD_VAR 0 11
16266: PUSH
16267: LD_INT 2
16269: ARRAY
16270: GREATEREQUAL
16271: AND
16272: PUSH
16273: LD_VAR 0 10
16277: PPUSH
16278: LD_INT 3
16280: PPUSH
16281: CALL_OW 275
16285: PUSH
16286: LD_VAR 0 11
16290: PUSH
16291: LD_INT 3
16293: ARRAY
16294: GREATEREQUAL
16295: AND
16296: NOT
16297: IFFALSE 16301
// exit ;
16299: GO 16888
// if GetBType ( depot ) = b_depot then
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 266
16310: PUSH
16311: LD_INT 0
16313: EQUAL
16314: IFFALSE 16326
// dist := 28 else
16316: LD_ADDR_VAR 0 14
16320: PUSH
16321: LD_INT 28
16323: ST_TO_ADDR
16324: GO 16334
// dist := 36 ;
16326: LD_ADDR_VAR 0 14
16330: PUSH
16331: LD_INT 36
16333: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16334: LD_VAR 0 1
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: LD_VAR 0 4
16348: PPUSH
16349: CALL_OW 297
16353: PUSH
16354: LD_VAR 0 14
16358: GREATER
16359: IFFALSE 16363
// exit ;
16361: GO 16888
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16363: LD_ADDR_VAR 0 12
16367: PUSH
16368: LD_VAR 0 2
16372: PPUSH
16373: LD_VAR 0 3
16377: PPUSH
16378: LD_VAR 0 4
16382: PPUSH
16383: LD_VAR 0 5
16387: PPUSH
16388: LD_VAR 0 1
16392: PPUSH
16393: CALL_OW 248
16397: PPUSH
16398: LD_INT 0
16400: PPUSH
16401: CALL 16893 0 6
16405: ST_TO_ADDR
// if not hexes then
16406: LD_VAR 0 12
16410: NOT
16411: IFFALSE 16415
// exit ;
16413: GO 16888
// hex := GetHexInfo ( x , y ) ;
16415: LD_ADDR_VAR 0 15
16419: PUSH
16420: LD_VAR 0 3
16424: PPUSH
16425: LD_VAR 0 4
16429: PPUSH
16430: CALL_OW 546
16434: ST_TO_ADDR
// if hex [ 1 ] then
16435: LD_VAR 0 15
16439: PUSH
16440: LD_INT 1
16442: ARRAY
16443: IFFALSE 16447
// exit ;
16445: GO 16888
// height := hex [ 2 ] ;
16447: LD_ADDR_VAR 0 13
16451: PUSH
16452: LD_VAR 0 15
16456: PUSH
16457: LD_INT 2
16459: ARRAY
16460: ST_TO_ADDR
// for i = 1 to hexes do
16461: LD_ADDR_VAR 0 7
16465: PUSH
16466: DOUBLE
16467: LD_INT 1
16469: DEC
16470: ST_TO_ADDR
16471: LD_VAR 0 12
16475: PUSH
16476: FOR_TO
16477: IFFALSE 16807
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16479: LD_VAR 0 12
16483: PUSH
16484: LD_VAR 0 7
16488: ARRAY
16489: PUSH
16490: LD_INT 1
16492: ARRAY
16493: PPUSH
16494: LD_VAR 0 12
16498: PUSH
16499: LD_VAR 0 7
16503: ARRAY
16504: PUSH
16505: LD_INT 2
16507: ARRAY
16508: PPUSH
16509: CALL_OW 488
16513: NOT
16514: PUSH
16515: LD_VAR 0 12
16519: PUSH
16520: LD_VAR 0 7
16524: ARRAY
16525: PUSH
16526: LD_INT 1
16528: ARRAY
16529: PPUSH
16530: LD_VAR 0 12
16534: PUSH
16535: LD_VAR 0 7
16539: ARRAY
16540: PUSH
16541: LD_INT 2
16543: ARRAY
16544: PPUSH
16545: CALL_OW 428
16549: PUSH
16550: LD_INT 0
16552: GREATER
16553: OR
16554: PUSH
16555: LD_VAR 0 12
16559: PUSH
16560: LD_VAR 0 7
16564: ARRAY
16565: PUSH
16566: LD_INT 1
16568: ARRAY
16569: PPUSH
16570: LD_VAR 0 12
16574: PUSH
16575: LD_VAR 0 7
16579: ARRAY
16580: PUSH
16581: LD_INT 2
16583: ARRAY
16584: PPUSH
16585: CALL_OW 351
16589: OR
16590: IFFALSE 16596
// exit ;
16592: POP
16593: POP
16594: GO 16888
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16596: LD_ADDR_VAR 0 8
16600: PUSH
16601: LD_VAR 0 12
16605: PUSH
16606: LD_VAR 0 7
16610: ARRAY
16611: PUSH
16612: LD_INT 1
16614: ARRAY
16615: PPUSH
16616: LD_VAR 0 12
16620: PUSH
16621: LD_VAR 0 7
16625: ARRAY
16626: PUSH
16627: LD_INT 2
16629: ARRAY
16630: PPUSH
16631: CALL_OW 546
16635: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16636: LD_VAR 0 8
16640: PUSH
16641: LD_INT 1
16643: ARRAY
16644: PUSH
16645: LD_VAR 0 8
16649: PUSH
16650: LD_INT 2
16652: ARRAY
16653: PUSH
16654: LD_VAR 0 13
16658: PUSH
16659: LD_INT 2
16661: PLUS
16662: GREATER
16663: OR
16664: PUSH
16665: LD_VAR 0 8
16669: PUSH
16670: LD_INT 2
16672: ARRAY
16673: PUSH
16674: LD_VAR 0 13
16678: PUSH
16679: LD_INT 2
16681: MINUS
16682: LESS
16683: OR
16684: PUSH
16685: LD_VAR 0 8
16689: PUSH
16690: LD_INT 3
16692: ARRAY
16693: PUSH
16694: LD_INT 0
16696: PUSH
16697: LD_INT 8
16699: PUSH
16700: LD_INT 9
16702: PUSH
16703: LD_INT 10
16705: PUSH
16706: LD_INT 11
16708: PUSH
16709: LD_INT 12
16711: PUSH
16712: LD_INT 13
16714: PUSH
16715: LD_INT 16
16717: PUSH
16718: LD_INT 17
16720: PUSH
16721: LD_INT 18
16723: PUSH
16724: LD_INT 19
16726: PUSH
16727: LD_INT 20
16729: PUSH
16730: LD_INT 21
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: IN
16748: NOT
16749: OR
16750: PUSH
16751: LD_VAR 0 8
16755: PUSH
16756: LD_INT 5
16758: ARRAY
16759: NOT
16760: OR
16761: PUSH
16762: LD_VAR 0 8
16766: PUSH
16767: LD_INT 6
16769: ARRAY
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: LD_INT 2
16776: PUSH
16777: LD_INT 7
16779: PUSH
16780: LD_INT 9
16782: PUSH
16783: LD_INT 10
16785: PUSH
16786: LD_INT 11
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: IN
16797: NOT
16798: OR
16799: IFFALSE 16805
// exit ;
16801: POP
16802: POP
16803: GO 16888
// end ;
16805: GO 16476
16807: POP
16808: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16809: LD_VAR 0 9
16813: PPUSH
16814: LD_VAR 0 3
16818: PPUSH
16819: LD_VAR 0 4
16823: PPUSH
16824: LD_INT 20
16826: PPUSH
16827: CALL 8834 0 4
16831: PUSH
16832: LD_INT 4
16834: ARRAY
16835: IFFALSE 16839
// exit ;
16837: GO 16888
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16839: LD_VAR 0 2
16843: PUSH
16844: LD_INT 29
16846: PUSH
16847: LD_INT 30
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: IN
16854: PUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_VAR 0 4
16864: PPUSH
16865: LD_VAR 0 9
16869: PPUSH
16870: CALL_OW 440
16874: NOT
16875: AND
16876: IFFALSE 16880
// exit ;
16878: GO 16888
// result := true ;
16880: LD_ADDR_VAR 0 6
16884: PUSH
16885: LD_INT 1
16887: ST_TO_ADDR
// end ;
16888: LD_VAR 0 6
16892: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16893: LD_INT 0
16895: PPUSH
16896: PPUSH
16897: PPUSH
16898: PPUSH
16899: PPUSH
16900: PPUSH
16901: PPUSH
16902: PPUSH
16903: PPUSH
16904: PPUSH
16905: PPUSH
16906: PPUSH
16907: PPUSH
16908: PPUSH
16909: PPUSH
16910: PPUSH
16911: PPUSH
16912: PPUSH
16913: PPUSH
16914: PPUSH
16915: PPUSH
16916: PPUSH
16917: PPUSH
16918: PPUSH
16919: PPUSH
16920: PPUSH
16921: PPUSH
16922: PPUSH
16923: PPUSH
16924: PPUSH
16925: PPUSH
16926: PPUSH
16927: PPUSH
16928: PPUSH
16929: PPUSH
16930: PPUSH
16931: PPUSH
16932: PPUSH
16933: PPUSH
16934: PPUSH
16935: PPUSH
16936: PPUSH
16937: PPUSH
16938: PPUSH
16939: PPUSH
16940: PPUSH
16941: PPUSH
16942: PPUSH
16943: PPUSH
16944: PPUSH
16945: PPUSH
16946: PPUSH
16947: PPUSH
16948: PPUSH
16949: PPUSH
16950: PPUSH
16951: PPUSH
16952: PPUSH
// result = [ ] ;
16953: LD_ADDR_VAR 0 7
16957: PUSH
16958: EMPTY
16959: ST_TO_ADDR
// temp_list = [ ] ;
16960: LD_ADDR_VAR 0 9
16964: PUSH
16965: EMPTY
16966: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16967: LD_VAR 0 4
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: LD_INT 2
16980: PUSH
16981: LD_INT 3
16983: PUSH
16984: LD_INT 4
16986: PUSH
16987: LD_INT 5
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: IN
16998: NOT
16999: PUSH
17000: LD_VAR 0 1
17004: PUSH
17005: LD_INT 0
17007: PUSH
17008: LD_INT 1
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: IN
17015: PUSH
17016: LD_VAR 0 5
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: LD_INT 3
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: IN
17035: NOT
17036: AND
17037: OR
17038: IFFALSE 17042
// exit ;
17040: GO 35433
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17042: LD_VAR 0 1
17046: PUSH
17047: LD_INT 6
17049: PUSH
17050: LD_INT 7
17052: PUSH
17053: LD_INT 8
17055: PUSH
17056: LD_INT 13
17058: PUSH
17059: LD_INT 12
17061: PUSH
17062: LD_INT 15
17064: PUSH
17065: LD_INT 11
17067: PUSH
17068: LD_INT 14
17070: PUSH
17071: LD_INT 10
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: IN
17085: IFFALSE 17095
// btype = b_lab ;
17087: LD_ADDR_VAR 0 1
17091: PUSH
17092: LD_INT 6
17094: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17095: LD_VAR 0 6
17099: PUSH
17100: LD_INT 0
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: LD_INT 2
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: LIST
17113: IN
17114: NOT
17115: PUSH
17116: LD_VAR 0 1
17120: PUSH
17121: LD_INT 0
17123: PUSH
17124: LD_INT 1
17126: PUSH
17127: LD_INT 2
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: LD_INT 6
17135: PUSH
17136: LD_INT 36
17138: PUSH
17139: LD_INT 4
17141: PUSH
17142: LD_INT 5
17144: PUSH
17145: LD_INT 31
17147: PUSH
17148: LD_INT 32
17150: PUSH
17151: LD_INT 33
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: IN
17167: NOT
17168: PUSH
17169: LD_VAR 0 6
17173: PUSH
17174: LD_INT 1
17176: EQUAL
17177: AND
17178: OR
17179: PUSH
17180: LD_VAR 0 1
17184: PUSH
17185: LD_INT 2
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: IN
17195: NOT
17196: PUSH
17197: LD_VAR 0 6
17201: PUSH
17202: LD_INT 2
17204: EQUAL
17205: AND
17206: OR
17207: IFFALSE 17217
// mode = 0 ;
17209: LD_ADDR_VAR 0 6
17213: PUSH
17214: LD_INT 0
17216: ST_TO_ADDR
// case mode of 0 :
17217: LD_VAR 0 6
17221: PUSH
17222: LD_INT 0
17224: DOUBLE
17225: EQUAL
17226: IFTRUE 17230
17228: GO 28683
17230: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17231: LD_ADDR_VAR 0 11
17235: PUSH
17236: LD_INT 0
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: LD_INT 1
17251: NEG
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 1
17289: NEG
17290: PUSH
17291: LD_INT 0
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: PUSH
17302: LD_INT 1
17304: NEG
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 1
17312: NEG
17313: PUSH
17314: LD_INT 2
17316: NEG
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 0
17324: PUSH
17325: LD_INT 2
17327: NEG
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 1
17335: PUSH
17336: LD_INT 1
17338: NEG
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 1
17346: PUSH
17347: LD_INT 2
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 0
17356: PUSH
17357: LD_INT 2
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 1
17366: NEG
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: LD_INT 3
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 0
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 1
17397: NEG
17398: PUSH
17399: LD_INT 2
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17424: LD_ADDR_VAR 0 12
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: LD_INT 1
17444: NEG
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: LD_INT 0
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 0
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 1
17482: NEG
17483: PUSH
17484: LD_INT 0
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 1
17493: NEG
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: LD_INT 1
17508: NEG
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 2
17516: PUSH
17517: LD_INT 0
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 2
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 1
17536: NEG
17537: PUSH
17538: LD_INT 1
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 2
17547: NEG
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 2
17558: NEG
17559: PUSH
17560: LD_INT 1
17562: NEG
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 2
17570: NEG
17571: PUSH
17572: LD_INT 1
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 3
17581: NEG
17582: PUSH
17583: LD_INT 0
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 3
17592: NEG
17593: PUSH
17594: LD_INT 1
17596: NEG
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17620: LD_ADDR_VAR 0 13
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: LD_INT 0
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: LD_INT 1
17640: NEG
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: LD_INT 0
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: LD_INT 1
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 0
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 1
17678: NEG
17679: PUSH
17680: LD_INT 0
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 1
17689: NEG
17690: PUSH
17691: LD_INT 1
17693: NEG
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 1
17701: NEG
17702: PUSH
17703: LD_INT 2
17705: NEG
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: LD_INT 2
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: LD_INT 2
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 2
17743: NEG
17744: PUSH
17745: LD_INT 1
17747: NEG
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 2
17755: NEG
17756: PUSH
17757: LD_INT 2
17759: NEG
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 2
17767: NEG
17768: PUSH
17769: LD_INT 3
17771: NEG
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 3
17779: NEG
17780: PUSH
17781: LD_INT 2
17783: NEG
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 3
17791: NEG
17792: PUSH
17793: LD_INT 3
17795: NEG
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17819: LD_ADDR_VAR 0 14
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: LD_INT 1
17839: NEG
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: LD_INT 0
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 1
17888: NEG
17889: PUSH
17890: LD_INT 1
17892: NEG
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 1
17900: NEG
17901: PUSH
17902: LD_INT 2
17904: NEG
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: LD_INT 2
17915: NEG
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: LD_INT 1
17926: NEG
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: LD_INT 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 0
17944: PUSH
17945: LD_INT 2
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 1
17954: NEG
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 1
17965: NEG
17966: PUSH
17967: LD_INT 3
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 0
17977: PUSH
17978: LD_INT 3
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: LD_INT 2
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18015: LD_ADDR_VAR 0 15
18019: PUSH
18020: LD_INT 0
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: LD_INT 0
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: LD_INT 1
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 0
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: NEG
18074: PUSH
18075: LD_INT 0
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 1
18084: NEG
18085: PUSH
18086: LD_INT 1
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: LD_INT 1
18099: NEG
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: NEG
18128: PUSH
18129: LD_INT 1
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 2
18138: NEG
18139: PUSH
18140: LD_INT 0
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 2
18149: NEG
18150: PUSH
18151: LD_INT 1
18153: NEG
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: LD_INT 1
18164: NEG
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 3
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 3
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18208: LD_ADDR_VAR 0 16
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 0
18225: PUSH
18226: LD_INT 1
18228: NEG
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 1
18236: PUSH
18237: LD_INT 0
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: LD_INT 1
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 1
18266: NEG
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 1
18277: NEG
18278: PUSH
18279: LD_INT 1
18281: NEG
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 1
18289: NEG
18290: PUSH
18291: LD_INT 2
18293: NEG
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 2
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: LD_INT 2
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 1
18321: PUSH
18322: LD_INT 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 2
18331: NEG
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 2
18343: NEG
18344: PUSH
18345: LD_INT 2
18347: NEG
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 3
18355: PUSH
18356: LD_INT 2
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 3
18365: PUSH
18366: LD_INT 3
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 2
18375: PUSH
18376: LD_INT 3
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18401: LD_ADDR_VAR 0 17
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: LD_INT 1
18421: NEG
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: NEG
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 1
18470: NEG
18471: PUSH
18472: LD_INT 1
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: NEG
18483: PUSH
18484: LD_INT 2
18486: NEG
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 0
18494: PUSH
18495: LD_INT 2
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: LD_INT 1
18508: NEG
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: LD_INT 1
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 2
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: LD_INT 2
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 0
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: NEG
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: NEG
18578: PUSH
18579: LD_INT 0
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 2
18588: NEG
18589: PUSH
18590: LD_INT 1
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 2
18600: NEG
18601: PUSH
18602: LD_INT 2
18604: NEG
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18631: LD_ADDR_VAR 0 18
18635: PUSH
18636: LD_INT 0
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 0
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 1
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: LD_INT 1
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: LD_INT 0
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: LD_INT 1
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: PUSH
18714: LD_INT 2
18716: NEG
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 0
18724: PUSH
18725: LD_INT 2
18727: NEG
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 1
18735: PUSH
18736: LD_INT 1
18738: NEG
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: LD_INT 2
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: LD_INT 2
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: LD_INT 2
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 1
18796: NEG
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 2
18807: NEG
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 2
18818: NEG
18819: PUSH
18820: LD_INT 1
18822: NEG
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 2
18830: NEG
18831: PUSH
18832: LD_INT 2
18834: NEG
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18861: LD_ADDR_VAR 0 19
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: LD_INT 0
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: LD_INT 0
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: LD_INT 1
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 1
18919: NEG
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: NEG
18931: PUSH
18932: LD_INT 1
18934: NEG
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 1
18942: NEG
18943: PUSH
18944: LD_INT 2
18946: NEG
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: LD_INT 2
18957: NEG
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 1
18965: PUSH
18966: LD_INT 1
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 1
19026: NEG
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: NEG
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 2
19048: NEG
19049: PUSH
19050: LD_INT 1
19052: NEG
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 2
19060: NEG
19061: PUSH
19062: LD_INT 2
19064: NEG
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19091: LD_ADDR_VAR 0 20
19095: PUSH
19096: LD_INT 0
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 1
19149: NEG
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: LD_INT 1
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 1
19172: NEG
19173: PUSH
19174: LD_INT 2
19176: NEG
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: LD_INT 2
19187: NEG
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 1
19195: PUSH
19196: LD_INT 1
19198: NEG
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 2
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 2
19216: PUSH
19217: LD_INT 1
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 2
19226: PUSH
19227: LD_INT 2
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: LD_INT 2
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: LD_INT 2
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: NEG
19257: PUSH
19258: LD_INT 1
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 2
19267: NEG
19268: PUSH
19269: LD_INT 0
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 2
19278: NEG
19279: PUSH
19280: LD_INT 1
19282: NEG
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 2
19290: NEG
19291: PUSH
19292: LD_INT 2
19294: NEG
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19321: LD_ADDR_VAR 0 21
19325: PUSH
19326: LD_INT 0
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: LD_INT 1
19341: NEG
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 1
19349: PUSH
19350: LD_INT 0
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: LD_INT 1
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: LD_INT 1
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 1
19379: NEG
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: LD_INT 1
19394: NEG
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 1
19402: NEG
19403: PUSH
19404: LD_INT 2
19406: NEG
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 0
19414: PUSH
19415: LD_INT 2
19417: NEG
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 1
19425: PUSH
19426: LD_INT 1
19428: NEG
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 2
19456: PUSH
19457: LD_INT 2
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: LD_INT 2
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 1
19486: NEG
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 2
19497: NEG
19498: PUSH
19499: LD_INT 0
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 2
19508: NEG
19509: PUSH
19510: LD_INT 1
19512: NEG
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 2
19520: NEG
19521: PUSH
19522: LD_INT 2
19524: NEG
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19551: LD_ADDR_VAR 0 22
19555: PUSH
19556: LD_INT 0
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: LD_INT 1
19571: NEG
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: LD_INT 1
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: LD_INT 1
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 1
19632: NEG
19633: PUSH
19634: LD_INT 2
19636: NEG
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 0
19644: PUSH
19645: LD_INT 2
19647: NEG
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: LD_INT 1
19658: NEG
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 2
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: LD_INT 2
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: LD_INT 2
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 1
19716: NEG
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 2
19727: NEG
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: NEG
19739: PUSH
19740: LD_INT 1
19742: NEG
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 2
19750: NEG
19751: PUSH
19752: LD_INT 2
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19781: LD_ADDR_VAR 0 23
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: LD_INT 1
19801: NEG
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: LD_INT 1
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 1
19839: NEG
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: NEG
19863: PUSH
19864: LD_INT 2
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 0
19874: PUSH
19875: LD_INT 2
19877: NEG
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: PUSH
19917: LD_INT 2
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: LD_INT 2
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: LD_INT 2
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: NEG
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 2
19968: NEG
19969: PUSH
19970: LD_INT 1
19972: NEG
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 2
19980: NEG
19981: PUSH
19982: LD_INT 2
19984: NEG
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 2
19992: NEG
19993: PUSH
19994: LD_INT 3
19996: NEG
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: PUSH
20006: LD_INT 3
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: PUSH
20017: LD_INT 2
20019: NEG
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: LD_INT 1
20030: NEG
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20061: LD_ADDR_VAR 0 24
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: LD_INT 1
20134: NEG
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 0
20154: PUSH
20155: LD_INT 2
20157: NEG
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 0
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: NEG
20238: PUSH
20239: LD_INT 0
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 2
20248: NEG
20249: PUSH
20250: LD_INT 1
20252: NEG
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 2
20260: NEG
20261: PUSH
20262: LD_INT 2
20264: NEG
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: LD_INT 2
20275: NEG
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: LD_INT 1
20286: NEG
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 3
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 3
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20337: LD_ADDR_VAR 0 25
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 0
20354: PUSH
20355: LD_INT 1
20357: NEG
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 0
20385: PUSH
20386: LD_INT 1
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 1
20395: NEG
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 1
20406: NEG
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: NEG
20419: PUSH
20420: LD_INT 2
20422: NEG
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 2
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 2
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 2
20472: PUSH
20473: LD_INT 2
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: LD_INT 2
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: LD_INT 2
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 1
20502: NEG
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 2
20513: NEG
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 2
20524: NEG
20525: PUSH
20526: LD_INT 1
20528: NEG
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 2
20536: NEG
20537: PUSH
20538: LD_INT 2
20540: NEG
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 3
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 3
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 2
20568: PUSH
20569: LD_INT 3
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: LD_INT 3
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20611: LD_ADDR_VAR 0 26
20615: PUSH
20616: LD_INT 0
20618: PUSH
20619: LD_INT 0
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 0
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 1
20669: NEG
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 1
20680: NEG
20681: PUSH
20682: LD_INT 1
20684: NEG
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: NEG
20693: PUSH
20694: LD_INT 2
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: LD_INT 2
20707: NEG
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: PUSH
20727: LD_INT 0
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: LD_INT 2
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 1
20776: NEG
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 2
20787: NEG
20788: PUSH
20789: LD_INT 0
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 2
20798: NEG
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 2
20810: NEG
20811: PUSH
20812: LD_INT 2
20814: NEG
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: LD_INT 3
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: LD_INT 3
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: NEG
20843: PUSH
20844: LD_INT 2
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: NEG
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20887: LD_ADDR_VAR 0 27
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 0
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: LD_INT 1
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: LD_INT 0
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: NEG
20957: PUSH
20958: LD_INT 1
20960: NEG
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 1
20968: NEG
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 0
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 2
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: LD_INT 2
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 1
21052: NEG
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 2
21063: NEG
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 2
21074: NEG
21075: PUSH
21076: LD_INT 1
21078: NEG
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 2
21086: NEG
21087: PUSH
21088: LD_INT 2
21090: NEG
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 1
21098: NEG
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 2
21109: NEG
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 3
21120: NEG
21121: PUSH
21122: LD_INT 1
21124: NEG
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 3
21132: NEG
21133: PUSH
21134: LD_INT 2
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21167: LD_ADDR_VAR 0 28
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: LD_INT 0
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: LD_INT 1
21187: NEG
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 1
21225: NEG
21226: PUSH
21227: LD_INT 0
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: NEG
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 1
21248: NEG
21249: PUSH
21250: LD_INT 2
21252: NEG
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: LD_INT 2
21263: NEG
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 1
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 2
21292: PUSH
21293: LD_INT 1
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: LD_INT 2
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: LD_INT 2
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 0
21322: PUSH
21323: LD_INT 2
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: NEG
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 2
21343: NEG
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 2
21354: NEG
21355: PUSH
21356: LD_INT 1
21358: NEG
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 2
21366: NEG
21367: PUSH
21368: LD_INT 2
21370: NEG
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 2
21378: NEG
21379: PUSH
21380: LD_INT 3
21382: NEG
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: NEG
21391: PUSH
21392: LD_INT 3
21394: NEG
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 3
21402: NEG
21403: PUSH
21404: LD_INT 1
21406: NEG
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 3
21414: NEG
21415: PUSH
21416: LD_INT 2
21418: NEG
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21449: LD_ADDR_VAR 0 29
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: LD_INT 1
21469: NEG
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: LD_INT 0
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: LD_INT 0
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 1
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 1
21530: NEG
21531: PUSH
21532: LD_INT 2
21534: NEG
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 0
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 2
21564: PUSH
21565: LD_INT 0
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 2
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 1
21584: PUSH
21585: LD_INT 2
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: LD_INT 2
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 2
21615: NEG
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 2
21627: NEG
21628: PUSH
21629: LD_INT 2
21631: NEG
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 2
21639: NEG
21640: PUSH
21641: LD_INT 3
21643: NEG
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 2
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 3
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 3
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 3
21693: NEG
21694: PUSH
21695: LD_INT 2
21697: NEG
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21728: LD_ADDR_VAR 0 30
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 0
21745: PUSH
21746: LD_INT 1
21748: NEG
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: PUSH
21767: LD_INT 1
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 1
21786: NEG
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: NEG
21798: PUSH
21799: LD_INT 1
21801: NEG
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: LD_INT 2
21813: NEG
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: LD_INT 2
21824: NEG
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: LD_INT 1
21835: NEG
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 2
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 2
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 1
21873: PUSH
21874: LD_INT 2
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 2
21894: NEG
21895: PUSH
21896: LD_INT 0
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 2
21905: NEG
21906: PUSH
21907: LD_INT 1
21909: NEG
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 1
21917: NEG
21918: PUSH
21919: LD_INT 3
21921: NEG
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: LD_INT 2
21932: NEG
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 3
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: LD_INT 3
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 2
21960: NEG
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 3
21971: NEG
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22006: LD_ADDR_VAR 0 31
22010: PUSH
22011: LD_INT 0
22013: PUSH
22014: LD_INT 0
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 0
22023: PUSH
22024: LD_INT 1
22026: NEG
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: LD_INT 1
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: LD_INT 1
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 1
22064: NEG
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PUSH
22077: LD_INT 1
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: LD_INT 2
22091: NEG
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: LD_INT 1
22102: NEG
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: LD_INT 0
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 2
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 1
22160: NEG
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: NEG
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: NEG
22184: PUSH
22185: LD_INT 2
22187: NEG
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 2
22195: NEG
22196: PUSH
22197: LD_INT 3
22199: NEG
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: LD_INT 1
22210: NEG
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 3
22218: PUSH
22219: LD_INT 1
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: LD_INT 3
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 3
22249: NEG
22250: PUSH
22251: LD_INT 2
22253: NEG
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22284: LD_ADDR_VAR 0 32
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: LD_INT 0
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: LD_INT 1
22304: NEG
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: LD_INT 0
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: LD_INT 0
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 1
22353: NEG
22354: PUSH
22355: LD_INT 1
22357: NEG
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 1
22365: NEG
22366: PUSH
22367: LD_INT 2
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: LD_INT 2
22380: NEG
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 2
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: LD_INT 2
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: LD_INT 2
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 1
22439: NEG
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 2
22450: NEG
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: NEG
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 1
22473: NEG
22474: PUSH
22475: LD_INT 3
22477: NEG
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: LD_INT 2
22488: NEG
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 3
22496: PUSH
22497: LD_INT 2
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 2
22506: PUSH
22507: LD_INT 3
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 2
22516: NEG
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 3
22527: NEG
22528: PUSH
22529: LD_INT 1
22531: NEG
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22562: LD_ADDR_VAR 0 33
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: LD_INT 1
22582: NEG
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: LD_INT 2
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 2
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 1
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 0
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 2
22717: NEG
22718: PUSH
22719: LD_INT 0
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 2
22728: NEG
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 2
22740: NEG
22741: PUSH
22742: LD_INT 2
22744: NEG
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 2
22752: NEG
22753: PUSH
22754: LD_INT 3
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 3
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 3
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: LD_INT 2
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 3
22806: NEG
22807: PUSH
22808: LD_INT 2
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22841: LD_ADDR_VAR 0 34
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: LD_INT 0
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: LD_INT 0
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 0
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 1
22899: NEG
22900: PUSH
22901: LD_INT 0
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: LD_INT 1
22914: NEG
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 1
22922: NEG
22923: PUSH
22924: LD_INT 2
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: LD_INT 2
22937: NEG
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: LD_INT 1
22948: NEG
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 2
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 2
22966: PUSH
22967: LD_INT 2
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: LD_INT 2
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 2
22997: NEG
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 2
23008: NEG
23009: PUSH
23010: LD_INT 1
23012: NEG
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 2
23020: NEG
23021: PUSH
23022: LD_INT 2
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: LD_INT 3
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: LD_INT 2
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 3
23055: PUSH
23056: LD_INT 2
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 2
23065: PUSH
23066: LD_INT 3
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 2
23075: NEG
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 3
23086: NEG
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23121: LD_ADDR_VAR 0 35
23125: PUSH
23126: LD_INT 0
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: LD_INT 1
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: LD_INT 0
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 1
23190: NEG
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 2
23212: NEG
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23233: LD_ADDR_VAR 0 36
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: LD_INT 0
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 0
23250: PUSH
23251: LD_INT 1
23253: NEG
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: LD_INT 0
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: NEG
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 1
23314: NEG
23315: PUSH
23316: LD_INT 2
23318: NEG
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23345: LD_ADDR_VAR 0 37
23349: PUSH
23350: LD_INT 0
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: LD_INT 1
23365: NEG
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 1
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: NEG
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23457: LD_ADDR_VAR 0 38
23461: PUSH
23462: LD_INT 0
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 1
23526: NEG
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: PUSH
23539: LD_INT 1
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 2
23548: NEG
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23569: LD_ADDR_VAR 0 39
23573: PUSH
23574: LD_INT 0
23576: PUSH
23577: LD_INT 0
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: LD_INT 1
23589: NEG
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 1
23627: NEG
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 1
23638: NEG
23639: PUSH
23640: LD_INT 1
23642: NEG
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: NEG
23651: PUSH
23652: LD_INT 2
23654: NEG
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: LD_INT 2
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23681: LD_ADDR_VAR 0 40
23685: PUSH
23686: LD_INT 0
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 1
23701: NEG
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 1
23739: NEG
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: LD_INT 1
23754: NEG
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23793: LD_ADDR_VAR 0 41
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: LD_INT 1
23813: NEG
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: LD_INT 1
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: NEG
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: LD_INT 1
23866: NEG
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: LD_INT 2
23878: NEG
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 1
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 2
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 2
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 2
23948: NEG
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 2
23959: NEG
23960: PUSH
23961: LD_INT 1
23963: NEG
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 2
23971: NEG
23972: PUSH
23973: LD_INT 2
23975: NEG
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 2
23983: NEG
23984: PUSH
23985: LD_INT 3
23987: NEG
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 2
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 3
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 3
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 3
24026: PUSH
24027: LD_INT 2
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 3
24036: PUSH
24037: LD_INT 3
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 2
24046: PUSH
24047: LD_INT 3
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 3
24067: NEG
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 3
24078: NEG
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 3
24090: NEG
24091: PUSH
24092: LD_INT 2
24094: NEG
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 3
24102: NEG
24103: PUSH
24104: LD_INT 3
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24143: LD_ADDR_VAR 0 42
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: LD_INT 2
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: LD_INT 2
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: LD_INT 1
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 2
24309: NEG
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 2
24321: NEG
24322: PUSH
24323: LD_INT 2
24325: NEG
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 2
24333: NEG
24334: PUSH
24335: LD_INT 3
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 1
24345: NEG
24346: PUSH
24347: LD_INT 3
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: LD_INT 3
24360: NEG
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: LD_INT 2
24371: NEG
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 3
24379: PUSH
24380: LD_INT 2
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 3
24389: PUSH
24390: LD_INT 3
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 2
24399: PUSH
24400: LD_INT 3
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: LD_INT 3
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: LD_INT 3
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: LD_INT 2
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 3
24440: NEG
24441: PUSH
24442: LD_INT 2
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 3
24452: NEG
24453: PUSH
24454: LD_INT 3
24456: NEG
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24493: LD_ADDR_VAR 0 43
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 0
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: LD_INT 0
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 1
24562: NEG
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 1
24574: NEG
24575: PUSH
24576: LD_INT 2
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: LD_INT 2
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: LD_INT 1
24600: NEG
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 2
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: LD_INT 2
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 0
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 1
24648: NEG
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 2
24659: NEG
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 2
24670: NEG
24671: PUSH
24672: LD_INT 1
24674: NEG
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: LD_INT 3
24686: NEG
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: LD_INT 3
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: LD_INT 2
24708: NEG
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 2
24716: PUSH
24717: LD_INT 1
24719: NEG
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 3
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: LD_INT 3
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 0
24757: PUSH
24758: LD_INT 3
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PUSH
24769: LD_INT 2
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 2
24778: NEG
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 3
24789: NEG
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 3
24800: NEG
24801: PUSH
24802: LD_INT 1
24804: NEG
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24841: LD_ADDR_VAR 0 44
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: LD_INT 1
24861: NEG
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 1
24910: NEG
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 2
24996: NEG
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 2
25007: NEG
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 2
25019: NEG
25020: PUSH
25021: LD_INT 2
25023: NEG
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 2
25031: NEG
25032: PUSH
25033: LD_INT 3
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 2
25043: PUSH
25044: LD_INT 1
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 3
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 3
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 3
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 3
25084: PUSH
25085: LD_INT 3
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: LD_INT 3
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 2
25104: NEG
25105: PUSH
25106: LD_INT 1
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 3
25115: NEG
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 3
25126: NEG
25127: PUSH
25128: LD_INT 1
25130: NEG
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 3
25138: NEG
25139: PUSH
25140: LD_INT 2
25142: NEG
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 3
25150: NEG
25151: PUSH
25152: LD_INT 3
25154: NEG
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25191: LD_ADDR_VAR 0 45
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: LD_INT 0
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 1
25211: NEG
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: PUSH
25274: LD_INT 2
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 1
25298: NEG
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 2
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: LD_INT 2
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 1
25346: NEG
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 2
25357: NEG
25358: PUSH
25359: LD_INT 1
25361: NEG
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 2
25369: NEG
25370: PUSH
25371: LD_INT 2
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: NEG
25382: PUSH
25383: LD_INT 3
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: LD_INT 3
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: LD_INT 3
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 2
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 3
25427: PUSH
25428: LD_INT 2
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 3
25437: PUSH
25438: LD_INT 3
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: LD_INT 3
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: LD_INT 3
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: LD_INT 3
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 1
25477: NEG
25478: PUSH
25479: LD_INT 2
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 3
25488: NEG
25489: PUSH
25490: LD_INT 2
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 3
25500: NEG
25501: PUSH
25502: LD_INT 3
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25541: LD_ADDR_VAR 0 46
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: LD_INT 2
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 2
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 2
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 2
25707: NEG
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: NEG
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: NEG
25731: PUSH
25732: LD_INT 3
25734: NEG
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: LD_INT 3
25745: NEG
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: LD_INT 2
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 2
25764: PUSH
25765: LD_INT 1
25767: NEG
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 3
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 3
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: LD_INT 3
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: LD_INT 3
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: LD_INT 2
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: NEG
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 3
25837: NEG
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 3
25848: NEG
25849: PUSH
25850: LD_INT 1
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25889: LD_ADDR_VAR 0 47
25893: PUSH
25894: LD_INT 0
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: LD_INT 1
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: NEG
25971: PUSH
25972: LD_INT 2
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: LD_INT 2
25985: NEG
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 2
26004: NEG
26005: PUSH
26006: LD_INT 1
26008: NEG
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 2
26016: NEG
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26040: LD_ADDR_VAR 0 48
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: LD_INT 0
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: LD_INT 1
26060: NEG
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: LD_INT 0
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 1
26098: NEG
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 1
26109: NEG
26110: PUSH
26111: LD_INT 1
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: LD_INT 2
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: LD_INT 2
26136: NEG
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 2
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 2
26165: PUSH
26166: LD_INT 1
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26187: LD_ADDR_VAR 0 49
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: LD_INT 0
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 0
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 1
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: LD_INT 0
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: NEG
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 2
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26331: LD_ADDR_VAR 0 50
26335: PUSH
26336: LD_INT 0
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: LD_INT 1
26351: NEG
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: LD_INT 0
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: LD_INT 1
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 2
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26475: LD_ADDR_VAR 0 51
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: LD_INT 2
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 2
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 2
26587: NEG
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 2
26598: NEG
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26622: LD_ADDR_VAR 0 52
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: LD_INT 2
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 2
26726: NEG
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 2
26737: NEG
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: NEG
26750: PUSH
26751: LD_INT 2
26753: NEG
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26773: LD_ADDR_VAR 0 53
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: NEG
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: LD_INT 2
26869: NEG
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 2
26908: PUSH
26909: LD_INT 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 2
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 2
26960: NEG
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: NEG
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27003: LD_ADDR_VAR 0 54
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: LD_INT 2
27088: NEG
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: LD_INT 2
27099: NEG
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 2
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 2
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: LD_INT 2
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 2
27179: NEG
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 2
27190: NEG
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 2
27202: NEG
27203: PUSH
27204: LD_INT 2
27206: NEG
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27233: LD_ADDR_VAR 0 55
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: NEG
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: LD_INT 2
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 2
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: LD_INT 1
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 2
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: NEG
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 2
27409: NEG
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 2
27432: NEG
27433: PUSH
27434: LD_INT 2
27436: NEG
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27463: LD_ADDR_VAR 0 56
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 1
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 1
27544: NEG
27545: PUSH
27546: LD_INT 2
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: LD_INT 2
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 2
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 2
27639: NEG
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 2
27650: NEG
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 2
27662: NEG
27663: PUSH
27664: LD_INT 2
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27693: LD_ADDR_VAR 0 57
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: LD_INT 1
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: LD_INT 2
27778: NEG
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: LD_INT 2
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 2
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 2
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: LD_INT 2
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: LD_INT 2
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 2
27869: NEG
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 2
27880: NEG
27881: PUSH
27882: LD_INT 1
27884: NEG
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 2
27892: NEG
27893: PUSH
27894: LD_INT 2
27896: NEG
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27923: LD_ADDR_VAR 0 58
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 1
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: LD_INT 2
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 0
28016: PUSH
28017: LD_INT 2
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 1
28030: NEG
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: LD_INT 2
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 2
28099: NEG
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 2
28110: NEG
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 2
28122: NEG
28123: PUSH
28124: LD_INT 2
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28153: LD_ADDR_VAR 0 59
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: LD_INT 1
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: LD_INT 1
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28241: LD_ADDR_VAR 0 60
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 1
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: NEG
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28329: LD_ADDR_VAR 0 61
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28417: LD_ADDR_VAR 0 62
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 0
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: LD_INT 1
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28505: LD_ADDR_VAR 0 63
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 0
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 1
28574: NEG
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28593: LD_ADDR_VAR 0 64
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 0
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: LD_INT 0
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: ST_TO_ADDR
// end ; 1 :
28681: GO 34578
28683: LD_INT 1
28685: DOUBLE
28686: EQUAL
28687: IFTRUE 28691
28689: GO 31314
28691: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28692: LD_ADDR_VAR 0 11
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: LD_INT 3
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: LD_INT 3
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: LIST
28735: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28736: LD_ADDR_VAR 0 12
28740: PUSH
28741: LD_INT 2
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 3
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 3
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28777: LD_ADDR_VAR 0 13
28781: PUSH
28782: LD_INT 3
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 3
28794: PUSH
28795: LD_INT 3
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: LD_INT 3
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: LIST
28816: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28817: LD_ADDR_VAR 0 14
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: LD_INT 3
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 1
28844: NEG
28845: PUSH
28846: LD_INT 2
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: LIST
28857: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28858: LD_ADDR_VAR 0 15
28862: PUSH
28863: LD_INT 2
28865: NEG
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 3
28876: NEG
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 3
28887: NEG
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28902: LD_ADDR_VAR 0 16
28906: PUSH
28907: LD_INT 2
28909: NEG
28910: PUSH
28911: LD_INT 3
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 3
28921: NEG
28922: PUSH
28923: LD_INT 2
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 3
28933: NEG
28934: PUSH
28935: LD_INT 3
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28948: LD_ADDR_VAR 0 17
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: LD_INT 3
28959: NEG
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: LD_INT 3
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 2
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: LIST
28991: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28992: LD_ADDR_VAR 0 18
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: LD_INT 1
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 3
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 3
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29033: LD_ADDR_VAR 0 19
29037: PUSH
29038: LD_INT 3
29040: PUSH
29041: LD_INT 2
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 3
29050: PUSH
29051: LD_INT 3
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: LD_INT 3
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29073: LD_ADDR_VAR 0 20
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 3
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: LD_INT 3
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: LD_INT 2
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29114: LD_ADDR_VAR 0 21
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 3
29132: NEG
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 3
29143: NEG
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29158: LD_ADDR_VAR 0 22
29162: PUSH
29163: LD_INT 2
29165: NEG
29166: PUSH
29167: LD_INT 3
29169: NEG
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 3
29177: NEG
29178: PUSH
29179: LD_INT 2
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 3
29189: NEG
29190: PUSH
29191: LD_INT 3
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29204: LD_ADDR_VAR 0 23
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: LD_INT 3
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PUSH
29224: LD_INT 4
29226: NEG
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 1
29234: PUSH
29235: LD_INT 3
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29248: LD_ADDR_VAR 0 24
29252: PUSH
29253: LD_INT 3
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 3
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 4
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29289: LD_ADDR_VAR 0 25
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: LD_INT 3
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 4
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 3
29316: PUSH
29317: LD_INT 4
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29329: LD_ADDR_VAR 0 26
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: LD_INT 3
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: LD_INT 4
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 1
29356: NEG
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: LIST
29369: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29370: LD_ADDR_VAR 0 27
29374: PUSH
29375: LD_INT 3
29377: NEG
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 3
29388: NEG
29389: PUSH
29390: LD_INT 1
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 4
29399: NEG
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29414: LD_ADDR_VAR 0 28
29418: PUSH
29419: LD_INT 3
29421: NEG
29422: PUSH
29423: LD_INT 3
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 3
29433: NEG
29434: PUSH
29435: LD_INT 4
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 4
29445: NEG
29446: PUSH
29447: LD_INT 3
29449: NEG
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: LIST
29459: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29460: LD_ADDR_VAR 0 29
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: LD_INT 3
29471: NEG
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: LD_INT 3
29482: NEG
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 1
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: LD_INT 4
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 4
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: LD_INT 3
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: LD_INT 5
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: LD_INT 5
29550: NEG
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 1
29558: PUSH
29559: LD_INT 4
29561: NEG
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: NEG
29570: PUSH
29571: LD_INT 6
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 0
29581: PUSH
29582: LD_INT 6
29584: NEG
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: LD_INT 5
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29615: LD_ADDR_VAR 0 30
29619: PUSH
29620: LD_INT 2
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 3
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: LD_INT 1
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 4
29664: PUSH
29665: LD_INT 0
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 4
29674: PUSH
29675: LD_INT 1
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 4
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 5
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 5
29705: PUSH
29706: LD_INT 1
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 5
29715: PUSH
29716: LD_INT 1
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 6
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 6
29736: PUSH
29737: LD_INT 1
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29758: LD_ADDR_VAR 0 31
29762: PUSH
29763: LD_INT 3
29765: PUSH
29766: LD_INT 2
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: LD_INT 3
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: LD_INT 3
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 4
29795: PUSH
29796: LD_INT 3
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 4
29805: PUSH
29806: LD_INT 4
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 3
29815: PUSH
29816: LD_INT 4
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 5
29825: PUSH
29826: LD_INT 4
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 5
29835: PUSH
29836: LD_INT 5
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 4
29845: PUSH
29846: LD_INT 5
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 6
29855: PUSH
29856: LD_INT 5
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 6
29865: PUSH
29866: LD_INT 6
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 5
29875: PUSH
29876: LD_INT 6
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29897: LD_ADDR_VAR 0 32
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: LD_INT 3
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 1
29935: PUSH
29936: LD_INT 4
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: LD_INT 4
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: LD_INT 3
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: LD_INT 5
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: LD_INT 5
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: LD_INT 4
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: LD_INT 6
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: LD_INT 6
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: NEG
30018: PUSH
30019: LD_INT 5
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30040: LD_ADDR_VAR 0 33
30044: PUSH
30045: LD_INT 2
30047: NEG
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 3
30058: NEG
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 3
30069: NEG
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 3
30081: NEG
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 4
30092: NEG
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 4
30103: NEG
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 4
30115: NEG
30116: PUSH
30117: LD_INT 1
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 5
30126: NEG
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 5
30137: NEG
30138: PUSH
30139: LD_INT 1
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 5
30149: NEG
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 6
30160: NEG
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 6
30171: NEG
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30195: LD_ADDR_VAR 0 34
30199: PUSH
30200: LD_INT 2
30202: NEG
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 3
30214: NEG
30215: PUSH
30216: LD_INT 2
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 3
30226: NEG
30227: PUSH
30228: LD_INT 3
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 3
30238: NEG
30239: PUSH
30240: LD_INT 4
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 4
30250: NEG
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 4
30262: NEG
30263: PUSH
30264: LD_INT 4
30266: NEG
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 4
30274: NEG
30275: PUSH
30276: LD_INT 5
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 5
30286: NEG
30287: PUSH
30288: LD_INT 4
30290: NEG
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 5
30298: NEG
30299: PUSH
30300: LD_INT 5
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 5
30310: NEG
30311: PUSH
30312: LD_INT 6
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 6
30322: NEG
30323: PUSH
30324: LD_INT 5
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 6
30334: NEG
30335: PUSH
30336: LD_INT 6
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30358: LD_ADDR_VAR 0 41
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: LD_INT 2
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: LD_INT 3
30380: NEG
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: LD_INT 2
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30402: LD_ADDR_VAR 0 42
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 3
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30443: LD_ADDR_VAR 0 43
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 3
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: LD_INT 3
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30483: LD_ADDR_VAR 0 44
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: LD_INT 3
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: LIST
30523: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30524: LD_ADDR_VAR 0 45
30528: PUSH
30529: LD_INT 2
30531: NEG
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 2
30542: NEG
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 3
30553: NEG
30554: PUSH
30555: LD_INT 1
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30568: LD_ADDR_VAR 0 46
30572: PUSH
30573: LD_INT 2
30575: NEG
30576: PUSH
30577: LD_INT 2
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: LD_INT 3
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: NEG
30600: PUSH
30601: LD_INT 2
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30614: LD_ADDR_VAR 0 47
30618: PUSH
30619: LD_INT 2
30621: NEG
30622: PUSH
30623: LD_INT 3
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: LD_INT 3
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30647: LD_ADDR_VAR 0 48
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: LD_INT 2
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 2
30665: PUSH
30666: LD_INT 1
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30678: LD_ADDR_VAR 0 49
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 3
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30707: LD_ADDR_VAR 0 50
30711: PUSH
30712: LD_INT 2
30714: PUSH
30715: LD_INT 3
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30736: LD_ADDR_VAR 0 51
30740: PUSH
30741: LD_INT 1
30743: NEG
30744: PUSH
30745: LD_INT 2
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30767: LD_ADDR_VAR 0 52
30771: PUSH
30772: LD_INT 3
30774: NEG
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 3
30786: NEG
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30800: LD_ADDR_VAR 0 53
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: LD_INT 3
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: LD_INT 2
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30844: LD_ADDR_VAR 0 54
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 3
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 3
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30885: LD_ADDR_VAR 0 55
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: LD_INT 3
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 3
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30925: LD_ADDR_VAR 0 56
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: LD_INT 3
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 0
30942: PUSH
30943: LD_INT 3
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: NEG
30953: PUSH
30954: LD_INT 2
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30966: LD_ADDR_VAR 0 57
30970: PUSH
30971: LD_INT 2
30973: NEG
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 3
30984: NEG
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 3
30995: NEG
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31010: LD_ADDR_VAR 0 58
31014: PUSH
31015: LD_INT 2
31017: NEG
31018: PUSH
31019: LD_INT 3
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 3
31029: NEG
31030: PUSH
31031: LD_INT 2
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 3
31041: NEG
31042: PUSH
31043: LD_INT 3
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: LIST
31055: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31056: LD_ADDR_VAR 0 59
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: LD_INT 2
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 1
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: LIST
31099: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31100: LD_ADDR_VAR 0 60
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31141: LD_ADDR_VAR 0 61
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31181: LD_ADDR_VAR 0 62
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: LD_INT 2
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31222: LD_ADDR_VAR 0 63
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 2
31251: NEG
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31266: LD_ADDR_VAR 0 64
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 2
31285: NEG
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: LIST
31311: ST_TO_ADDR
// end ; 2 :
31312: GO 34578
31314: LD_INT 2
31316: DOUBLE
31317: EQUAL
31318: IFTRUE 31322
31320: GO 34577
31322: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31323: LD_ADDR_VAR 0 29
31327: PUSH
31328: LD_INT 4
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 4
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 5
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 5
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 4
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 3
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 3
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 5
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 3
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 3
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 4
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 4
31453: PUSH
31454: LD_INT 4
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: LD_INT 4
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 2
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: LD_INT 2
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 4
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: PUSH
31504: LD_INT 4
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: LD_INT 4
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: LD_INT 3
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: LD_INT 4
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: LD_INT 5
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: LD_INT 5
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 4
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: LD_INT 3
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 2
31585: PUSH
31586: LD_INT 5
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 2
31595: NEG
31596: PUSH
31597: LD_INT 3
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 3
31606: NEG
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 3
31617: NEG
31618: PUSH
31619: LD_INT 1
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 3
31651: NEG
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 4
31662: NEG
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 4
31673: NEG
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 4
31685: NEG
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: LD_INT 2
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 4
31708: NEG
31709: PUSH
31710: LD_INT 4
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 4
31720: NEG
31721: PUSH
31722: LD_INT 5
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 3
31732: NEG
31733: PUSH
31734: LD_INT 4
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 3
31744: NEG
31745: PUSH
31746: LD_INT 3
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 4
31756: NEG
31757: PUSH
31758: LD_INT 3
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 5
31768: NEG
31769: PUSH
31770: LD_INT 4
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 5
31780: NEG
31781: PUSH
31782: LD_INT 5
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 3
31792: NEG
31793: PUSH
31794: LD_INT 5
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 5
31804: NEG
31805: PUSH
31806: LD_INT 3
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31861: LD_ADDR_VAR 0 30
31865: PUSH
31866: LD_INT 4
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 4
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 5
31888: PUSH
31889: LD_INT 4
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 5
31898: PUSH
31899: LD_INT 5
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 4
31908: PUSH
31909: LD_INT 5
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 3
31918: PUSH
31919: LD_INT 4
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 5
31938: PUSH
31939: LD_INT 3
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 5
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: LD_INT 3
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: LD_INT 2
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 1
31978: PUSH
31979: LD_INT 3
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: LD_INT 4
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 4
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 3
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: LD_INT 2
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: LD_INT 4
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 4
32051: NEG
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 4
32062: NEG
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 3
32074: NEG
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: NEG
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 4
32096: NEG
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 5
32107: NEG
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 5
32118: NEG
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 5
32130: NEG
32131: PUSH
32132: LD_INT 2
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 3
32142: NEG
32143: PUSH
32144: LD_INT 2
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 3
32153: NEG
32154: PUSH
32155: LD_INT 3
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 3
32165: NEG
32166: PUSH
32167: LD_INT 4
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: NEG
32178: PUSH
32179: LD_INT 3
32181: NEG
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 2
32189: NEG
32190: PUSH
32191: LD_INT 2
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 3
32201: NEG
32202: PUSH
32203: LD_INT 2
32205: NEG
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 4
32213: NEG
32214: PUSH
32215: LD_INT 3
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 4
32225: NEG
32226: PUSH
32227: LD_INT 4
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: NEG
32238: PUSH
32239: LD_INT 4
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 4
32249: NEG
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: LD_INT 4
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: LD_INT 5
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: LD_INT 4
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: LD_INT 3
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 3
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 4
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: NEG
32329: PUSH
32330: LD_INT 5
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: LD_INT 3
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 2
32351: NEG
32352: PUSH
32353: LD_INT 5
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32408: LD_ADDR_VAR 0 31
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: LD_INT 4
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 3
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: LD_INT 4
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: LD_INT 5
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: LD_INT 5
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: PUSH
32467: LD_INT 4
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: NEG
32477: PUSH
32478: LD_INT 3
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: LD_INT 5
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: LD_INT 3
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 3
32508: NEG
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: NEG
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: NEG
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 2
32542: NEG
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 3
32553: NEG
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 4
32564: NEG
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 4
32575: NEG
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 4
32587: NEG
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 4
32610: NEG
32611: PUSH
32612: LD_INT 4
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 4
32622: NEG
32623: PUSH
32624: LD_INT 5
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 3
32634: NEG
32635: PUSH
32636: LD_INT 4
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 3
32646: NEG
32647: PUSH
32648: LD_INT 3
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 4
32658: NEG
32659: PUSH
32660: LD_INT 3
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 5
32670: NEG
32671: PUSH
32672: LD_INT 4
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 5
32682: NEG
32683: PUSH
32684: LD_INT 5
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 3
32694: NEG
32695: PUSH
32696: LD_INT 5
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 5
32706: NEG
32707: PUSH
32708: LD_INT 3
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 3
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: LD_INT 4
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: LD_INT 3
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: LD_INT 4
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 2
32797: PUSH
32798: LD_INT 2
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 2
32808: NEG
32809: PUSH
32810: LD_INT 4
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 4
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 4
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 5
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 5
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 4
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 3
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 3
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 3
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 5
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32958: LD_ADDR_VAR 0 32
32962: PUSH
32963: LD_INT 4
32965: NEG
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 4
32976: NEG
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 3
32988: NEG
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 3
32999: NEG
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 4
33010: NEG
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 5
33021: NEG
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 5
33032: NEG
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 5
33044: NEG
33045: PUSH
33046: LD_INT 2
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 3
33056: NEG
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 3
33067: NEG
33068: PUSH
33069: LD_INT 3
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 3
33079: NEG
33080: PUSH
33081: LD_INT 4
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: LD_INT 3
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: NEG
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 3
33115: NEG
33116: PUSH
33117: LD_INT 2
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 4
33127: NEG
33128: PUSH
33129: LD_INT 3
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 4
33139: NEG
33140: PUSH
33141: LD_INT 4
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: LD_INT 4
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 4
33163: NEG
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: LD_INT 4
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 5
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: LD_INT 4
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: LD_INT 3
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 3
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: LD_INT 4
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: NEG
33243: PUSH
33244: LD_INT 5
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: LD_INT 3
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: LD_INT 5
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 3
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 3
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 4
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 4
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 3
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 2
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 2
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 4
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 4
33370: PUSH
33371: LD_INT 4
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 4
33380: PUSH
33381: LD_INT 3
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 5
33390: PUSH
33391: LD_INT 4
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 5
33400: PUSH
33401: LD_INT 5
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 4
33410: PUSH
33411: LD_INT 5
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 3
33420: PUSH
33421: LD_INT 4
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 3
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 5
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 3
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33505: LD_ADDR_VAR 0 33
33509: PUSH
33510: LD_INT 4
33512: NEG
33513: PUSH
33514: LD_INT 4
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 4
33524: NEG
33525: PUSH
33526: LD_INT 5
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 3
33536: NEG
33537: PUSH
33538: LD_INT 4
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 3
33548: NEG
33549: PUSH
33550: LD_INT 3
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 4
33560: NEG
33561: PUSH
33562: LD_INT 3
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 5
33572: NEG
33573: PUSH
33574: LD_INT 4
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 5
33584: NEG
33585: PUSH
33586: LD_INT 5
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 3
33596: NEG
33597: PUSH
33598: LD_INT 5
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 5
33608: NEG
33609: PUSH
33610: LD_INT 3
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 3
33623: NEG
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 4
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: LD_INT 3
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: LD_INT 2
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: LD_INT 3
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: LD_INT 4
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 2
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 2
33710: NEG
33711: PUSH
33712: LD_INT 4
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 4
33722: PUSH
33723: LD_INT 0
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 4
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 5
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 5
33753: PUSH
33754: LD_INT 1
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 4
33763: PUSH
33764: LD_INT 1
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 3
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 3
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: LD_INT 2
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 5
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: LD_INT 3
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 3
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 4
33835: PUSH
33836: LD_INT 3
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 4
33845: PUSH
33846: LD_INT 4
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 3
33855: PUSH
33856: LD_INT 4
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 2
33865: PUSH
33866: LD_INT 3
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 4
33885: PUSH
33886: LD_INT 2
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: LD_INT 4
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: LD_INT 4
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: LD_INT 3
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: LD_INT 4
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: LD_INT 5
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 5
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: LD_INT 4
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: NEG
33967: PUSH
33968: LD_INT 3
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: LD_INT 5
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 2
33987: NEG
33988: PUSH
33989: LD_INT 3
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34043: LD_ADDR_VAR 0 34
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: LD_INT 4
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: LD_INT 5
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: LD_INT 4
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: LD_INT 3
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 0
34094: PUSH
34095: LD_INT 3
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: LD_INT 4
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 5
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: LD_INT 3
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: LD_INT 5
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 3
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 4
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 4
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 2
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 4
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 4
34245: PUSH
34246: LD_INT 4
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 4
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 5
34265: PUSH
34266: LD_INT 4
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 5
34275: PUSH
34276: LD_INT 5
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 4
34285: PUSH
34286: LD_INT 5
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 3
34295: PUSH
34296: LD_INT 4
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 3
34305: PUSH
34306: LD_INT 3
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 5
34315: PUSH
34316: LD_INT 3
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 3
34325: PUSH
34326: LD_INT 5
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: LD_INT 3
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: LD_INT 2
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: LD_INT 4
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: LD_INT 4
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: LD_INT 3
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: NEG
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: LD_INT 4
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 4
34428: NEG
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 4
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 3
34451: NEG
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 3
34462: NEG
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 4
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 5
34484: NEG
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 5
34495: NEG
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 5
34507: NEG
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 3
34519: NEG
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: ST_TO_ADDR
// end ; end ;
34575: GO 34578
34577: POP
// case btype of b_depot , b_warehouse :
34578: LD_VAR 0 1
34582: PUSH
34583: LD_INT 0
34585: DOUBLE
34586: EQUAL
34587: IFTRUE 34597
34589: LD_INT 1
34591: DOUBLE
34592: EQUAL
34593: IFTRUE 34597
34595: GO 34798
34597: POP
// case nation of nation_american :
34598: LD_VAR 0 5
34602: PUSH
34603: LD_INT 1
34605: DOUBLE
34606: EQUAL
34607: IFTRUE 34611
34609: GO 34667
34611: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34612: LD_ADDR_VAR 0 9
34616: PUSH
34617: LD_VAR 0 11
34621: PUSH
34622: LD_VAR 0 12
34626: PUSH
34627: LD_VAR 0 13
34631: PUSH
34632: LD_VAR 0 14
34636: PUSH
34637: LD_VAR 0 15
34641: PUSH
34642: LD_VAR 0 16
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: PUSH
34655: LD_VAR 0 4
34659: PUSH
34660: LD_INT 1
34662: PLUS
34663: ARRAY
34664: ST_TO_ADDR
34665: GO 34796
34667: LD_INT 2
34669: DOUBLE
34670: EQUAL
34671: IFTRUE 34675
34673: GO 34731
34675: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34676: LD_ADDR_VAR 0 9
34680: PUSH
34681: LD_VAR 0 17
34685: PUSH
34686: LD_VAR 0 18
34690: PUSH
34691: LD_VAR 0 19
34695: PUSH
34696: LD_VAR 0 20
34700: PUSH
34701: LD_VAR 0 21
34705: PUSH
34706: LD_VAR 0 22
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: PUSH
34719: LD_VAR 0 4
34723: PUSH
34724: LD_INT 1
34726: PLUS
34727: ARRAY
34728: ST_TO_ADDR
34729: GO 34796
34731: LD_INT 3
34733: DOUBLE
34734: EQUAL
34735: IFTRUE 34739
34737: GO 34795
34739: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34740: LD_ADDR_VAR 0 9
34744: PUSH
34745: LD_VAR 0 23
34749: PUSH
34750: LD_VAR 0 24
34754: PUSH
34755: LD_VAR 0 25
34759: PUSH
34760: LD_VAR 0 26
34764: PUSH
34765: LD_VAR 0 27
34769: PUSH
34770: LD_VAR 0 28
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: PUSH
34783: LD_VAR 0 4
34787: PUSH
34788: LD_INT 1
34790: PLUS
34791: ARRAY
34792: ST_TO_ADDR
34793: GO 34796
34795: POP
34796: GO 35351
34798: LD_INT 2
34800: DOUBLE
34801: EQUAL
34802: IFTRUE 34812
34804: LD_INT 3
34806: DOUBLE
34807: EQUAL
34808: IFTRUE 34812
34810: GO 34868
34812: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34813: LD_ADDR_VAR 0 9
34817: PUSH
34818: LD_VAR 0 29
34822: PUSH
34823: LD_VAR 0 30
34827: PUSH
34828: LD_VAR 0 31
34832: PUSH
34833: LD_VAR 0 32
34837: PUSH
34838: LD_VAR 0 33
34842: PUSH
34843: LD_VAR 0 34
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: PUSH
34856: LD_VAR 0 4
34860: PUSH
34861: LD_INT 1
34863: PLUS
34864: ARRAY
34865: ST_TO_ADDR
34866: GO 35351
34868: LD_INT 16
34870: DOUBLE
34871: EQUAL
34872: IFTRUE 34930
34874: LD_INT 17
34876: DOUBLE
34877: EQUAL
34878: IFTRUE 34930
34880: LD_INT 18
34882: DOUBLE
34883: EQUAL
34884: IFTRUE 34930
34886: LD_INT 19
34888: DOUBLE
34889: EQUAL
34890: IFTRUE 34930
34892: LD_INT 22
34894: DOUBLE
34895: EQUAL
34896: IFTRUE 34930
34898: LD_INT 20
34900: DOUBLE
34901: EQUAL
34902: IFTRUE 34930
34904: LD_INT 21
34906: DOUBLE
34907: EQUAL
34908: IFTRUE 34930
34910: LD_INT 23
34912: DOUBLE
34913: EQUAL
34914: IFTRUE 34930
34916: LD_INT 24
34918: DOUBLE
34919: EQUAL
34920: IFTRUE 34930
34922: LD_INT 25
34924: DOUBLE
34925: EQUAL
34926: IFTRUE 34930
34928: GO 34986
34930: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34931: LD_ADDR_VAR 0 9
34935: PUSH
34936: LD_VAR 0 35
34940: PUSH
34941: LD_VAR 0 36
34945: PUSH
34946: LD_VAR 0 37
34950: PUSH
34951: LD_VAR 0 38
34955: PUSH
34956: LD_VAR 0 39
34960: PUSH
34961: LD_VAR 0 40
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: PUSH
34974: LD_VAR 0 4
34978: PUSH
34979: LD_INT 1
34981: PLUS
34982: ARRAY
34983: ST_TO_ADDR
34984: GO 35351
34986: LD_INT 6
34988: DOUBLE
34989: EQUAL
34990: IFTRUE 35042
34992: LD_INT 7
34994: DOUBLE
34995: EQUAL
34996: IFTRUE 35042
34998: LD_INT 8
35000: DOUBLE
35001: EQUAL
35002: IFTRUE 35042
35004: LD_INT 13
35006: DOUBLE
35007: EQUAL
35008: IFTRUE 35042
35010: LD_INT 12
35012: DOUBLE
35013: EQUAL
35014: IFTRUE 35042
35016: LD_INT 15
35018: DOUBLE
35019: EQUAL
35020: IFTRUE 35042
35022: LD_INT 11
35024: DOUBLE
35025: EQUAL
35026: IFTRUE 35042
35028: LD_INT 14
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35042
35034: LD_INT 10
35036: DOUBLE
35037: EQUAL
35038: IFTRUE 35042
35040: GO 35098
35042: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35043: LD_ADDR_VAR 0 9
35047: PUSH
35048: LD_VAR 0 41
35052: PUSH
35053: LD_VAR 0 42
35057: PUSH
35058: LD_VAR 0 43
35062: PUSH
35063: LD_VAR 0 44
35067: PUSH
35068: LD_VAR 0 45
35072: PUSH
35073: LD_VAR 0 46
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: PUSH
35086: LD_VAR 0 4
35090: PUSH
35091: LD_INT 1
35093: PLUS
35094: ARRAY
35095: ST_TO_ADDR
35096: GO 35351
35098: LD_INT 36
35100: DOUBLE
35101: EQUAL
35102: IFTRUE 35106
35104: GO 35162
35106: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35107: LD_ADDR_VAR 0 9
35111: PUSH
35112: LD_VAR 0 47
35116: PUSH
35117: LD_VAR 0 48
35121: PUSH
35122: LD_VAR 0 49
35126: PUSH
35127: LD_VAR 0 50
35131: PUSH
35132: LD_VAR 0 51
35136: PUSH
35137: LD_VAR 0 52
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: PUSH
35150: LD_VAR 0 4
35154: PUSH
35155: LD_INT 1
35157: PLUS
35158: ARRAY
35159: ST_TO_ADDR
35160: GO 35351
35162: LD_INT 4
35164: DOUBLE
35165: EQUAL
35166: IFTRUE 35188
35168: LD_INT 5
35170: DOUBLE
35171: EQUAL
35172: IFTRUE 35188
35174: LD_INT 34
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35188
35180: LD_INT 37
35182: DOUBLE
35183: EQUAL
35184: IFTRUE 35188
35186: GO 35244
35188: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35189: LD_ADDR_VAR 0 9
35193: PUSH
35194: LD_VAR 0 53
35198: PUSH
35199: LD_VAR 0 54
35203: PUSH
35204: LD_VAR 0 55
35208: PUSH
35209: LD_VAR 0 56
35213: PUSH
35214: LD_VAR 0 57
35218: PUSH
35219: LD_VAR 0 58
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: PUSH
35232: LD_VAR 0 4
35236: PUSH
35237: LD_INT 1
35239: PLUS
35240: ARRAY
35241: ST_TO_ADDR
35242: GO 35351
35244: LD_INT 31
35246: DOUBLE
35247: EQUAL
35248: IFTRUE 35294
35250: LD_INT 32
35252: DOUBLE
35253: EQUAL
35254: IFTRUE 35294
35256: LD_INT 33
35258: DOUBLE
35259: EQUAL
35260: IFTRUE 35294
35262: LD_INT 27
35264: DOUBLE
35265: EQUAL
35266: IFTRUE 35294
35268: LD_INT 26
35270: DOUBLE
35271: EQUAL
35272: IFTRUE 35294
35274: LD_INT 28
35276: DOUBLE
35277: EQUAL
35278: IFTRUE 35294
35280: LD_INT 29
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35294
35286: LD_INT 30
35288: DOUBLE
35289: EQUAL
35290: IFTRUE 35294
35292: GO 35350
35294: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35295: LD_ADDR_VAR 0 9
35299: PUSH
35300: LD_VAR 0 59
35304: PUSH
35305: LD_VAR 0 60
35309: PUSH
35310: LD_VAR 0 61
35314: PUSH
35315: LD_VAR 0 62
35319: PUSH
35320: LD_VAR 0 63
35324: PUSH
35325: LD_VAR 0 64
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: PUSH
35338: LD_VAR 0 4
35342: PUSH
35343: LD_INT 1
35345: PLUS
35346: ARRAY
35347: ST_TO_ADDR
35348: GO 35351
35350: POP
// temp_list2 = [ ] ;
35351: LD_ADDR_VAR 0 10
35355: PUSH
35356: EMPTY
35357: ST_TO_ADDR
// for i in temp_list do
35358: LD_ADDR_VAR 0 8
35362: PUSH
35363: LD_VAR 0 9
35367: PUSH
35368: FOR_IN
35369: IFFALSE 35421
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35371: LD_ADDR_VAR 0 10
35375: PUSH
35376: LD_VAR 0 10
35380: PUSH
35381: LD_VAR 0 8
35385: PUSH
35386: LD_INT 1
35388: ARRAY
35389: PUSH
35390: LD_VAR 0 2
35394: PLUS
35395: PUSH
35396: LD_VAR 0 8
35400: PUSH
35401: LD_INT 2
35403: ARRAY
35404: PUSH
35405: LD_VAR 0 3
35409: PLUS
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: EMPTY
35416: LIST
35417: ADD
35418: ST_TO_ADDR
35419: GO 35368
35421: POP
35422: POP
// result = temp_list2 ;
35423: LD_ADDR_VAR 0 7
35427: PUSH
35428: LD_VAR 0 10
35432: ST_TO_ADDR
// end ;
35433: LD_VAR 0 7
35437: RET
// export function EnemyInRange ( unit , dist ) ; begin
35438: LD_INT 0
35440: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35441: LD_ADDR_VAR 0 3
35445: PUSH
35446: LD_VAR 0 1
35450: PPUSH
35451: CALL_OW 255
35455: PPUSH
35456: LD_VAR 0 1
35460: PPUSH
35461: CALL_OW 250
35465: PPUSH
35466: LD_VAR 0 1
35470: PPUSH
35471: CALL_OW 251
35475: PPUSH
35476: LD_VAR 0 2
35480: PPUSH
35481: CALL 8834 0 4
35485: PUSH
35486: LD_INT 4
35488: ARRAY
35489: ST_TO_ADDR
// end ;
35490: LD_VAR 0 3
35494: RET
// export function PlayerSeeMe ( unit ) ; begin
35495: LD_INT 0
35497: PPUSH
// result := See ( your_side , unit ) ;
35498: LD_ADDR_VAR 0 2
35502: PUSH
35503: LD_OWVAR 2
35507: PPUSH
35508: LD_VAR 0 1
35512: PPUSH
35513: CALL_OW 292
35517: ST_TO_ADDR
// end ;
35518: LD_VAR 0 2
35522: RET
// export function ReverseDir ( unit ) ; begin
35523: LD_INT 0
35525: PPUSH
// if not unit then
35526: LD_VAR 0 1
35530: NOT
35531: IFFALSE 35535
// exit ;
35533: GO 35558
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35535: LD_ADDR_VAR 0 2
35539: PUSH
35540: LD_VAR 0 1
35544: PPUSH
35545: CALL_OW 254
35549: PUSH
35550: LD_INT 3
35552: PLUS
35553: PUSH
35554: LD_INT 6
35556: MOD
35557: ST_TO_ADDR
// end ;
35558: LD_VAR 0 2
35562: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
35563: LD_INT 0
35565: PPUSH
35566: PPUSH
35567: PPUSH
35568: PPUSH
35569: PPUSH
// if not hexes then
35570: LD_VAR 0 2
35574: NOT
35575: IFFALSE 35579
// exit ;
35577: GO 35727
// dist := 9999 ;
35579: LD_ADDR_VAR 0 5
35583: PUSH
35584: LD_INT 9999
35586: ST_TO_ADDR
// for i = 1 to hexes do
35587: LD_ADDR_VAR 0 4
35591: PUSH
35592: DOUBLE
35593: LD_INT 1
35595: DEC
35596: ST_TO_ADDR
35597: LD_VAR 0 2
35601: PUSH
35602: FOR_TO
35603: IFFALSE 35715
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
35605: LD_VAR 0 1
35609: PPUSH
35610: LD_VAR 0 2
35614: PUSH
35615: LD_VAR 0 4
35619: ARRAY
35620: PUSH
35621: LD_INT 1
35623: ARRAY
35624: PPUSH
35625: LD_VAR 0 2
35629: PUSH
35630: LD_VAR 0 4
35634: ARRAY
35635: PUSH
35636: LD_INT 2
35638: ARRAY
35639: PPUSH
35640: CALL_OW 297
35644: PUSH
35645: LD_VAR 0 5
35649: LESS
35650: IFFALSE 35713
// begin hex := hexes [ i ] ;
35652: LD_ADDR_VAR 0 7
35656: PUSH
35657: LD_VAR 0 2
35661: PUSH
35662: LD_VAR 0 4
35666: ARRAY
35667: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35668: LD_ADDR_VAR 0 5
35672: PUSH
35673: LD_VAR 0 1
35677: PPUSH
35678: LD_VAR 0 2
35682: PUSH
35683: LD_VAR 0 4
35687: ARRAY
35688: PUSH
35689: LD_INT 1
35691: ARRAY
35692: PPUSH
35693: LD_VAR 0 2
35697: PUSH
35698: LD_VAR 0 4
35702: ARRAY
35703: PUSH
35704: LD_INT 2
35706: ARRAY
35707: PPUSH
35708: CALL_OW 297
35712: ST_TO_ADDR
// end ; end ;
35713: GO 35602
35715: POP
35716: POP
// result := hex ;
35717: LD_ADDR_VAR 0 3
35721: PUSH
35722: LD_VAR 0 7
35726: ST_TO_ADDR
// end ;
35727: LD_VAR 0 3
35731: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35732: LD_INT 0
35734: PPUSH
35735: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35736: LD_VAR 0 1
35740: NOT
35741: PUSH
35742: LD_VAR 0 1
35746: PUSH
35747: LD_INT 21
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 23
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PPUSH
35771: CALL_OW 69
35775: IN
35776: NOT
35777: OR
35778: IFFALSE 35782
// exit ;
35780: GO 35829
// for i = 1 to 3 do
35782: LD_ADDR_VAR 0 3
35786: PUSH
35787: DOUBLE
35788: LD_INT 1
35790: DEC
35791: ST_TO_ADDR
35792: LD_INT 3
35794: PUSH
35795: FOR_TO
35796: IFFALSE 35827
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35798: LD_VAR 0 1
35802: PPUSH
35803: CALL_OW 250
35807: PPUSH
35808: LD_VAR 0 1
35812: PPUSH
35813: CALL_OW 251
35817: PPUSH
35818: LD_INT 1
35820: PPUSH
35821: CALL_OW 453
35825: GO 35795
35827: POP
35828: POP
// end ;
35829: LD_VAR 0 2
35833: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35834: LD_INT 0
35836: PPUSH
35837: PPUSH
35838: PPUSH
35839: PPUSH
35840: PPUSH
35841: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35842: LD_VAR 0 1
35846: NOT
35847: PUSH
35848: LD_VAR 0 2
35852: NOT
35853: OR
35854: PUSH
35855: LD_VAR 0 1
35859: PPUSH
35860: CALL_OW 314
35864: OR
35865: IFFALSE 35869
// exit ;
35867: GO 36310
// x := GetX ( enemy_unit ) ;
35869: LD_ADDR_VAR 0 7
35873: PUSH
35874: LD_VAR 0 2
35878: PPUSH
35879: CALL_OW 250
35883: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35884: LD_ADDR_VAR 0 8
35888: PUSH
35889: LD_VAR 0 2
35893: PPUSH
35894: CALL_OW 251
35898: ST_TO_ADDR
// if not x or not y then
35899: LD_VAR 0 7
35903: NOT
35904: PUSH
35905: LD_VAR 0 8
35909: NOT
35910: OR
35911: IFFALSE 35915
// exit ;
35913: GO 36310
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35915: LD_ADDR_VAR 0 6
35919: PUSH
35920: LD_VAR 0 7
35924: PPUSH
35925: LD_INT 0
35927: PPUSH
35928: LD_INT 4
35930: PPUSH
35931: CALL_OW 272
35935: PUSH
35936: LD_VAR 0 8
35940: PPUSH
35941: LD_INT 0
35943: PPUSH
35944: LD_INT 4
35946: PPUSH
35947: CALL_OW 273
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_VAR 0 7
35960: PPUSH
35961: LD_INT 1
35963: PPUSH
35964: LD_INT 4
35966: PPUSH
35967: CALL_OW 272
35971: PUSH
35972: LD_VAR 0 8
35976: PPUSH
35977: LD_INT 1
35979: PPUSH
35980: LD_INT 4
35982: PPUSH
35983: CALL_OW 273
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_VAR 0 7
35996: PPUSH
35997: LD_INT 2
35999: PPUSH
36000: LD_INT 4
36002: PPUSH
36003: CALL_OW 272
36007: PUSH
36008: LD_VAR 0 8
36012: PPUSH
36013: LD_INT 2
36015: PPUSH
36016: LD_INT 4
36018: PPUSH
36019: CALL_OW 273
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_VAR 0 7
36032: PPUSH
36033: LD_INT 3
36035: PPUSH
36036: LD_INT 4
36038: PPUSH
36039: CALL_OW 272
36043: PUSH
36044: LD_VAR 0 8
36048: PPUSH
36049: LD_INT 3
36051: PPUSH
36052: LD_INT 4
36054: PPUSH
36055: CALL_OW 273
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_VAR 0 7
36068: PPUSH
36069: LD_INT 4
36071: PPUSH
36072: LD_INT 4
36074: PPUSH
36075: CALL_OW 272
36079: PUSH
36080: LD_VAR 0 8
36084: PPUSH
36085: LD_INT 4
36087: PPUSH
36088: LD_INT 4
36090: PPUSH
36091: CALL_OW 273
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_VAR 0 7
36104: PPUSH
36105: LD_INT 5
36107: PPUSH
36108: LD_INT 4
36110: PPUSH
36111: CALL_OW 272
36115: PUSH
36116: LD_VAR 0 8
36120: PPUSH
36121: LD_INT 5
36123: PPUSH
36124: LD_INT 4
36126: PPUSH
36127: CALL_OW 273
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: ST_TO_ADDR
// for i = tmp downto 1 do
36144: LD_ADDR_VAR 0 4
36148: PUSH
36149: DOUBLE
36150: LD_VAR 0 6
36154: INC
36155: ST_TO_ADDR
36156: LD_INT 1
36158: PUSH
36159: FOR_DOWNTO
36160: IFFALSE 36261
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36162: LD_VAR 0 6
36166: PUSH
36167: LD_VAR 0 4
36171: ARRAY
36172: PUSH
36173: LD_INT 1
36175: ARRAY
36176: PPUSH
36177: LD_VAR 0 6
36181: PUSH
36182: LD_VAR 0 4
36186: ARRAY
36187: PUSH
36188: LD_INT 2
36190: ARRAY
36191: PPUSH
36192: CALL_OW 488
36196: NOT
36197: PUSH
36198: LD_VAR 0 6
36202: PUSH
36203: LD_VAR 0 4
36207: ARRAY
36208: PUSH
36209: LD_INT 1
36211: ARRAY
36212: PPUSH
36213: LD_VAR 0 6
36217: PUSH
36218: LD_VAR 0 4
36222: ARRAY
36223: PUSH
36224: LD_INT 2
36226: ARRAY
36227: PPUSH
36228: CALL_OW 428
36232: PUSH
36233: LD_INT 0
36235: NONEQUAL
36236: OR
36237: IFFALSE 36259
// tmp := Delete ( tmp , i ) ;
36239: LD_ADDR_VAR 0 6
36243: PUSH
36244: LD_VAR 0 6
36248: PPUSH
36249: LD_VAR 0 4
36253: PPUSH
36254: CALL_OW 3
36258: ST_TO_ADDR
36259: GO 36159
36261: POP
36262: POP
// j := GetClosestHex ( unit , tmp ) ;
36263: LD_ADDR_VAR 0 5
36267: PUSH
36268: LD_VAR 0 1
36272: PPUSH
36273: LD_VAR 0 6
36277: PPUSH
36278: CALL 35563 0 2
36282: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36283: LD_VAR 0 1
36287: PPUSH
36288: LD_VAR 0 5
36292: PUSH
36293: LD_INT 1
36295: ARRAY
36296: PPUSH
36297: LD_VAR 0 5
36301: PUSH
36302: LD_INT 2
36304: ARRAY
36305: PPUSH
36306: CALL_OW 111
// end ;
36310: LD_VAR 0 3
36314: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36315: LD_INT 0
36317: PPUSH
36318: PPUSH
36319: PPUSH
// uc_side = 0 ;
36320: LD_ADDR_OWVAR 20
36324: PUSH
36325: LD_INT 0
36327: ST_TO_ADDR
// uc_nation = 0 ;
36328: LD_ADDR_OWVAR 21
36332: PUSH
36333: LD_INT 0
36335: ST_TO_ADDR
// InitHc_All ( ) ;
36336: CALL_OW 584
// InitVc ;
36340: CALL_OW 20
// if mastodonts then
36344: LD_VAR 0 6
36348: IFFALSE 36415
// for i = 1 to mastodonts do
36350: LD_ADDR_VAR 0 11
36354: PUSH
36355: DOUBLE
36356: LD_INT 1
36358: DEC
36359: ST_TO_ADDR
36360: LD_VAR 0 6
36364: PUSH
36365: FOR_TO
36366: IFFALSE 36413
// begin vc_chassis := 31 ;
36368: LD_ADDR_OWVAR 37
36372: PUSH
36373: LD_INT 31
36375: ST_TO_ADDR
// vc_control := control_rider ;
36376: LD_ADDR_OWVAR 38
36380: PUSH
36381: LD_INT 4
36383: ST_TO_ADDR
// animal := CreateVehicle ;
36384: LD_ADDR_VAR 0 12
36388: PUSH
36389: CALL_OW 45
36393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36394: LD_VAR 0 12
36398: PPUSH
36399: LD_VAR 0 8
36403: PPUSH
36404: LD_INT 0
36406: PPUSH
36407: CALL 38550 0 3
// end ;
36411: GO 36365
36413: POP
36414: POP
// if horses then
36415: LD_VAR 0 5
36419: IFFALSE 36486
// for i = 1 to horses do
36421: LD_ADDR_VAR 0 11
36425: PUSH
36426: DOUBLE
36427: LD_INT 1
36429: DEC
36430: ST_TO_ADDR
36431: LD_VAR 0 5
36435: PUSH
36436: FOR_TO
36437: IFFALSE 36484
// begin hc_class := 21 ;
36439: LD_ADDR_OWVAR 28
36443: PUSH
36444: LD_INT 21
36446: ST_TO_ADDR
// hc_gallery :=  ;
36447: LD_ADDR_OWVAR 33
36451: PUSH
36452: LD_STRING 
36454: ST_TO_ADDR
// animal := CreateHuman ;
36455: LD_ADDR_VAR 0 12
36459: PUSH
36460: CALL_OW 44
36464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36465: LD_VAR 0 12
36469: PPUSH
36470: LD_VAR 0 8
36474: PPUSH
36475: LD_INT 0
36477: PPUSH
36478: CALL 38550 0 3
// end ;
36482: GO 36436
36484: POP
36485: POP
// if birds then
36486: LD_VAR 0 1
36490: IFFALSE 36557
// for i = 1 to birds do
36492: LD_ADDR_VAR 0 11
36496: PUSH
36497: DOUBLE
36498: LD_INT 1
36500: DEC
36501: ST_TO_ADDR
36502: LD_VAR 0 1
36506: PUSH
36507: FOR_TO
36508: IFFALSE 36555
// begin hc_class = 18 ;
36510: LD_ADDR_OWVAR 28
36514: PUSH
36515: LD_INT 18
36517: ST_TO_ADDR
// hc_gallery =  ;
36518: LD_ADDR_OWVAR 33
36522: PUSH
36523: LD_STRING 
36525: ST_TO_ADDR
// animal := CreateHuman ;
36526: LD_ADDR_VAR 0 12
36530: PUSH
36531: CALL_OW 44
36535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36536: LD_VAR 0 12
36540: PPUSH
36541: LD_VAR 0 8
36545: PPUSH
36546: LD_INT 0
36548: PPUSH
36549: CALL 38550 0 3
// end ;
36553: GO 36507
36555: POP
36556: POP
// if tigers then
36557: LD_VAR 0 2
36561: IFFALSE 36645
// for i = 1 to tigers do
36563: LD_ADDR_VAR 0 11
36567: PUSH
36568: DOUBLE
36569: LD_INT 1
36571: DEC
36572: ST_TO_ADDR
36573: LD_VAR 0 2
36577: PUSH
36578: FOR_TO
36579: IFFALSE 36643
// begin hc_class = class_tiger ;
36581: LD_ADDR_OWVAR 28
36585: PUSH
36586: LD_INT 14
36588: ST_TO_ADDR
// hc_gallery =  ;
36589: LD_ADDR_OWVAR 33
36593: PUSH
36594: LD_STRING 
36596: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36597: LD_ADDR_OWVAR 35
36601: PUSH
36602: LD_INT 7
36604: NEG
36605: PPUSH
36606: LD_INT 7
36608: PPUSH
36609: CALL_OW 12
36613: ST_TO_ADDR
// animal := CreateHuman ;
36614: LD_ADDR_VAR 0 12
36618: PUSH
36619: CALL_OW 44
36623: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36624: LD_VAR 0 12
36628: PPUSH
36629: LD_VAR 0 8
36633: PPUSH
36634: LD_INT 0
36636: PPUSH
36637: CALL 38550 0 3
// end ;
36641: GO 36578
36643: POP
36644: POP
// if apemans then
36645: LD_VAR 0 3
36649: IFFALSE 36772
// for i = 1 to apemans do
36651: LD_ADDR_VAR 0 11
36655: PUSH
36656: DOUBLE
36657: LD_INT 1
36659: DEC
36660: ST_TO_ADDR
36661: LD_VAR 0 3
36665: PUSH
36666: FOR_TO
36667: IFFALSE 36770
// begin hc_class = class_apeman ;
36669: LD_ADDR_OWVAR 28
36673: PUSH
36674: LD_INT 12
36676: ST_TO_ADDR
// hc_gallery =  ;
36677: LD_ADDR_OWVAR 33
36681: PUSH
36682: LD_STRING 
36684: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36685: LD_ADDR_OWVAR 35
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PPUSH
36694: LD_INT 2
36696: PPUSH
36697: CALL_OW 12
36701: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36702: LD_ADDR_OWVAR 31
36706: PUSH
36707: LD_INT 1
36709: PPUSH
36710: LD_INT 3
36712: PPUSH
36713: CALL_OW 12
36717: PUSH
36718: LD_INT 1
36720: PPUSH
36721: LD_INT 3
36723: PPUSH
36724: CALL_OW 12
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: ST_TO_ADDR
// animal := CreateHuman ;
36741: LD_ADDR_VAR 0 12
36745: PUSH
36746: CALL_OW 44
36750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36751: LD_VAR 0 12
36755: PPUSH
36756: LD_VAR 0 8
36760: PPUSH
36761: LD_INT 0
36763: PPUSH
36764: CALL 38550 0 3
// end ;
36768: GO 36666
36770: POP
36771: POP
// if enchidnas then
36772: LD_VAR 0 4
36776: IFFALSE 36843
// for i = 1 to enchidnas do
36778: LD_ADDR_VAR 0 11
36782: PUSH
36783: DOUBLE
36784: LD_INT 1
36786: DEC
36787: ST_TO_ADDR
36788: LD_VAR 0 4
36792: PUSH
36793: FOR_TO
36794: IFFALSE 36841
// begin hc_class = 13 ;
36796: LD_ADDR_OWVAR 28
36800: PUSH
36801: LD_INT 13
36803: ST_TO_ADDR
// hc_gallery =  ;
36804: LD_ADDR_OWVAR 33
36808: PUSH
36809: LD_STRING 
36811: ST_TO_ADDR
// animal := CreateHuman ;
36812: LD_ADDR_VAR 0 12
36816: PUSH
36817: CALL_OW 44
36821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36822: LD_VAR 0 12
36826: PPUSH
36827: LD_VAR 0 8
36831: PPUSH
36832: LD_INT 0
36834: PPUSH
36835: CALL 38550 0 3
// end ;
36839: GO 36793
36841: POP
36842: POP
// if fishes then
36843: LD_VAR 0 7
36847: IFFALSE 36914
// for i = 1 to fishes do
36849: LD_ADDR_VAR 0 11
36853: PUSH
36854: DOUBLE
36855: LD_INT 1
36857: DEC
36858: ST_TO_ADDR
36859: LD_VAR 0 7
36863: PUSH
36864: FOR_TO
36865: IFFALSE 36912
// begin hc_class = 20 ;
36867: LD_ADDR_OWVAR 28
36871: PUSH
36872: LD_INT 20
36874: ST_TO_ADDR
// hc_gallery =  ;
36875: LD_ADDR_OWVAR 33
36879: PUSH
36880: LD_STRING 
36882: ST_TO_ADDR
// animal := CreateHuman ;
36883: LD_ADDR_VAR 0 12
36887: PUSH
36888: CALL_OW 44
36892: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36893: LD_VAR 0 12
36897: PPUSH
36898: LD_VAR 0 9
36902: PPUSH
36903: LD_INT 0
36905: PPUSH
36906: CALL 38550 0 3
// end ;
36910: GO 36864
36912: POP
36913: POP
// end ;
36914: LD_VAR 0 10
36918: RET
// export function WantHeal ( sci , unit ) ; begin
36919: LD_INT 0
36921: PPUSH
// if GetTaskList ( sci ) > 0 then
36922: LD_VAR 0 1
36926: PPUSH
36927: CALL_OW 437
36931: PUSH
36932: LD_INT 0
36934: GREATER
36935: IFFALSE 37005
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36937: LD_VAR 0 1
36941: PPUSH
36942: CALL_OW 437
36946: PUSH
36947: LD_INT 1
36949: ARRAY
36950: PUSH
36951: LD_INT 1
36953: ARRAY
36954: PUSH
36955: LD_STRING l
36957: EQUAL
36958: PUSH
36959: LD_VAR 0 1
36963: PPUSH
36964: CALL_OW 437
36968: PUSH
36969: LD_INT 1
36971: ARRAY
36972: PUSH
36973: LD_INT 4
36975: ARRAY
36976: PUSH
36977: LD_VAR 0 2
36981: EQUAL
36982: AND
36983: IFFALSE 36995
// result := true else
36985: LD_ADDR_VAR 0 3
36989: PUSH
36990: LD_INT 1
36992: ST_TO_ADDR
36993: GO 37003
// result := false ;
36995: LD_ADDR_VAR 0 3
36999: PUSH
37000: LD_INT 0
37002: ST_TO_ADDR
// end else
37003: GO 37013
// result := false ;
37005: LD_ADDR_VAR 0 3
37009: PUSH
37010: LD_INT 0
37012: ST_TO_ADDR
// end ;
37013: LD_VAR 0 3
37017: RET
// export function HealTarget ( sci ) ; begin
37018: LD_INT 0
37020: PPUSH
// if not sci then
37021: LD_VAR 0 1
37025: NOT
37026: IFFALSE 37030
// exit ;
37028: GO 37095
// result := 0 ;
37030: LD_ADDR_VAR 0 2
37034: PUSH
37035: LD_INT 0
37037: ST_TO_ADDR
// if GetTaskList ( sci ) then
37038: LD_VAR 0 1
37042: PPUSH
37043: CALL_OW 437
37047: IFFALSE 37095
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37049: LD_VAR 0 1
37053: PPUSH
37054: CALL_OW 437
37058: PUSH
37059: LD_INT 1
37061: ARRAY
37062: PUSH
37063: LD_INT 1
37065: ARRAY
37066: PUSH
37067: LD_STRING l
37069: EQUAL
37070: IFFALSE 37095
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37072: LD_ADDR_VAR 0 2
37076: PUSH
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 437
37086: PUSH
37087: LD_INT 1
37089: ARRAY
37090: PUSH
37091: LD_INT 4
37093: ARRAY
37094: ST_TO_ADDR
// end ;
37095: LD_VAR 0 2
37099: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37100: LD_INT 0
37102: PPUSH
37103: PPUSH
37104: PPUSH
37105: PPUSH
// if not base_units then
37106: LD_VAR 0 1
37110: NOT
37111: IFFALSE 37115
// exit ;
37113: GO 37202
// result := false ;
37115: LD_ADDR_VAR 0 2
37119: PUSH
37120: LD_INT 0
37122: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37123: LD_ADDR_VAR 0 5
37127: PUSH
37128: LD_VAR 0 1
37132: PPUSH
37133: LD_INT 21
37135: PUSH
37136: LD_INT 3
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PPUSH
37143: CALL_OW 72
37147: ST_TO_ADDR
// if not tmp then
37148: LD_VAR 0 5
37152: NOT
37153: IFFALSE 37157
// exit ;
37155: GO 37202
// for i in tmp do
37157: LD_ADDR_VAR 0 3
37161: PUSH
37162: LD_VAR 0 5
37166: PUSH
37167: FOR_IN
37168: IFFALSE 37200
// begin result := EnemyInRange ( i , 22 ) ;
37170: LD_ADDR_VAR 0 2
37174: PUSH
37175: LD_VAR 0 3
37179: PPUSH
37180: LD_INT 22
37182: PPUSH
37183: CALL 35438 0 2
37187: ST_TO_ADDR
// if result then
37188: LD_VAR 0 2
37192: IFFALSE 37198
// exit ;
37194: POP
37195: POP
37196: GO 37202
// end ;
37198: GO 37167
37200: POP
37201: POP
// end ;
37202: LD_VAR 0 2
37206: RET
// export function FilterByTag ( units , tag ) ; begin
37207: LD_INT 0
37209: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: LD_INT 120
37222: PUSH
37223: LD_VAR 0 2
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PPUSH
37232: CALL_OW 72
37236: ST_TO_ADDR
// end ;
37237: LD_VAR 0 3
37241: RET
// export function IsDriver ( un ) ; begin
37242: LD_INT 0
37244: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37245: LD_ADDR_VAR 0 2
37249: PUSH
37250: LD_VAR 0 1
37254: PUSH
37255: LD_INT 55
37257: PUSH
37258: EMPTY
37259: LIST
37260: PPUSH
37261: CALL_OW 69
37265: IN
37266: ST_TO_ADDR
// end ;
37267: LD_VAR 0 2
37271: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37272: LD_INT 0
37274: PPUSH
37275: PPUSH
// list := [ ] ;
37276: LD_ADDR_VAR 0 5
37280: PUSH
37281: EMPTY
37282: ST_TO_ADDR
// case d of 0 :
37283: LD_VAR 0 3
37287: PUSH
37288: LD_INT 0
37290: DOUBLE
37291: EQUAL
37292: IFTRUE 37296
37294: GO 37429
37296: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37297: LD_ADDR_VAR 0 5
37301: PUSH
37302: LD_VAR 0 1
37306: PUSH
37307: LD_INT 4
37309: MINUS
37310: PUSH
37311: LD_VAR 0 2
37315: PUSH
37316: LD_INT 4
37318: MINUS
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: LIST
37327: PUSH
37328: LD_VAR 0 1
37332: PUSH
37333: LD_INT 3
37335: MINUS
37336: PUSH
37337: LD_VAR 0 2
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: PUSH
37350: LD_VAR 0 1
37354: PUSH
37355: LD_INT 4
37357: PLUS
37358: PUSH
37359: LD_VAR 0 2
37363: PUSH
37364: LD_INT 4
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: LIST
37371: PUSH
37372: LD_VAR 0 1
37376: PUSH
37377: LD_INT 3
37379: PLUS
37380: PUSH
37381: LD_VAR 0 2
37385: PUSH
37386: LD_INT 3
37388: PLUS
37389: PUSH
37390: LD_INT 5
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: LIST
37397: PUSH
37398: LD_VAR 0 1
37402: PUSH
37403: LD_VAR 0 2
37407: PUSH
37408: LD_INT 4
37410: PLUS
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: ST_TO_ADDR
// end ; 1 :
37427: GO 38127
37429: LD_INT 1
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37437
37435: GO 37570
37437: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37438: LD_ADDR_VAR 0 5
37442: PUSH
37443: LD_VAR 0 1
37447: PUSH
37448: LD_VAR 0 2
37452: PUSH
37453: LD_INT 4
37455: MINUS
37456: PUSH
37457: LD_INT 3
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: PUSH
37465: LD_VAR 0 1
37469: PUSH
37470: LD_INT 3
37472: MINUS
37473: PUSH
37474: LD_VAR 0 2
37478: PUSH
37479: LD_INT 3
37481: MINUS
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: PUSH
37491: LD_VAR 0 1
37495: PUSH
37496: LD_INT 4
37498: MINUS
37499: PUSH
37500: LD_VAR 0 2
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: PUSH
37513: LD_VAR 0 1
37517: PUSH
37518: LD_VAR 0 2
37522: PUSH
37523: LD_INT 3
37525: PLUS
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: PUSH
37535: LD_VAR 0 1
37539: PUSH
37540: LD_INT 4
37542: PLUS
37543: PUSH
37544: LD_VAR 0 2
37548: PUSH
37549: LD_INT 4
37551: PLUS
37552: PUSH
37553: LD_INT 5
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: ST_TO_ADDR
// end ; 2 :
37568: GO 38127
37570: LD_INT 2
37572: DOUBLE
37573: EQUAL
37574: IFTRUE 37578
37576: GO 37707
37578: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37579: LD_ADDR_VAR 0 5
37583: PUSH
37584: LD_VAR 0 1
37588: PUSH
37589: LD_VAR 0 2
37593: PUSH
37594: LD_INT 3
37596: MINUS
37597: PUSH
37598: LD_INT 3
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: PUSH
37606: LD_VAR 0 1
37610: PUSH
37611: LD_INT 4
37613: PLUS
37614: PUSH
37615: LD_VAR 0 2
37619: PUSH
37620: LD_INT 4
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: PUSH
37628: LD_VAR 0 1
37632: PUSH
37633: LD_VAR 0 2
37637: PUSH
37638: LD_INT 4
37640: PLUS
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: LIST
37649: PUSH
37650: LD_VAR 0 1
37654: PUSH
37655: LD_INT 3
37657: MINUS
37658: PUSH
37659: LD_VAR 0 2
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: PUSH
37672: LD_VAR 0 1
37676: PUSH
37677: LD_INT 4
37679: MINUS
37680: PUSH
37681: LD_VAR 0 2
37685: PUSH
37686: LD_INT 4
37688: MINUS
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: ST_TO_ADDR
// end ; 3 :
37705: GO 38127
37707: LD_INT 3
37709: DOUBLE
37710: EQUAL
37711: IFTRUE 37715
37713: GO 37848
37715: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37716: LD_ADDR_VAR 0 5
37720: PUSH
37721: LD_VAR 0 1
37725: PUSH
37726: LD_INT 3
37728: PLUS
37729: PUSH
37730: LD_VAR 0 2
37734: PUSH
37735: LD_INT 4
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: LIST
37742: PUSH
37743: LD_VAR 0 1
37747: PUSH
37748: LD_INT 4
37750: PLUS
37751: PUSH
37752: LD_VAR 0 2
37756: PUSH
37757: LD_INT 4
37759: PLUS
37760: PUSH
37761: LD_INT 5
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: PUSH
37769: LD_VAR 0 1
37773: PUSH
37774: LD_INT 4
37776: MINUS
37777: PUSH
37778: LD_VAR 0 2
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: LIST
37790: PUSH
37791: LD_VAR 0 1
37795: PUSH
37796: LD_VAR 0 2
37800: PUSH
37801: LD_INT 4
37803: MINUS
37804: PUSH
37805: LD_INT 3
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: PUSH
37813: LD_VAR 0 1
37817: PUSH
37818: LD_INT 3
37820: MINUS
37821: PUSH
37822: LD_VAR 0 2
37826: PUSH
37827: LD_INT 3
37829: MINUS
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: ST_TO_ADDR
// end ; 4 :
37846: GO 38127
37848: LD_INT 4
37850: DOUBLE
37851: EQUAL
37852: IFTRUE 37856
37854: GO 37989
37856: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37857: LD_ADDR_VAR 0 5
37861: PUSH
37862: LD_VAR 0 1
37866: PUSH
37867: LD_VAR 0 2
37871: PUSH
37872: LD_INT 4
37874: PLUS
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: PUSH
37884: LD_VAR 0 1
37888: PUSH
37889: LD_INT 3
37891: PLUS
37892: PUSH
37893: LD_VAR 0 2
37897: PUSH
37898: LD_INT 3
37900: PLUS
37901: PUSH
37902: LD_INT 5
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: PUSH
37910: LD_VAR 0 1
37914: PUSH
37915: LD_INT 4
37917: PLUS
37918: PUSH
37919: LD_VAR 0 2
37923: PUSH
37924: LD_INT 4
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: LIST
37931: PUSH
37932: LD_VAR 0 1
37936: PUSH
37937: LD_VAR 0 2
37941: PUSH
37942: LD_INT 3
37944: MINUS
37945: PUSH
37946: LD_INT 3
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: PUSH
37954: LD_VAR 0 1
37958: PUSH
37959: LD_INT 4
37961: MINUS
37962: PUSH
37963: LD_VAR 0 2
37967: PUSH
37968: LD_INT 4
37970: MINUS
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: ST_TO_ADDR
// end ; 5 :
37987: GO 38127
37989: LD_INT 5
37991: DOUBLE
37992: EQUAL
37993: IFTRUE 37997
37995: GO 38126
37997: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37998: LD_ADDR_VAR 0 5
38002: PUSH
38003: LD_VAR 0 1
38007: PUSH
38008: LD_INT 4
38010: MINUS
38011: PUSH
38012: LD_VAR 0 2
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: PUSH
38025: LD_VAR 0 1
38029: PUSH
38030: LD_VAR 0 2
38034: PUSH
38035: LD_INT 4
38037: MINUS
38038: PUSH
38039: LD_INT 3
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: PUSH
38047: LD_VAR 0 1
38051: PUSH
38052: LD_INT 4
38054: PLUS
38055: PUSH
38056: LD_VAR 0 2
38060: PUSH
38061: LD_INT 4
38063: PLUS
38064: PUSH
38065: LD_INT 5
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: LIST
38072: PUSH
38073: LD_VAR 0 1
38077: PUSH
38078: LD_INT 3
38080: PLUS
38081: PUSH
38082: LD_VAR 0 2
38086: PUSH
38087: LD_INT 4
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: LIST
38094: PUSH
38095: LD_VAR 0 1
38099: PUSH
38100: LD_VAR 0 2
38104: PUSH
38105: LD_INT 3
38107: PLUS
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: LIST
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: ST_TO_ADDR
// end ; end ;
38124: GO 38127
38126: POP
// result := list ;
38127: LD_ADDR_VAR 0 4
38131: PUSH
38132: LD_VAR 0 5
38136: ST_TO_ADDR
// end ;
38137: LD_VAR 0 4
38141: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38142: LD_INT 0
38144: PPUSH
38145: PPUSH
38146: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38147: LD_VAR 0 1
38151: NOT
38152: PUSH
38153: LD_VAR 0 2
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 3
38166: PUSH
38167: LD_INT 4
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: IN
38176: NOT
38177: OR
38178: IFFALSE 38182
// exit ;
38180: GO 38274
// tmp := [ ] ;
38182: LD_ADDR_VAR 0 5
38186: PUSH
38187: EMPTY
38188: ST_TO_ADDR
// for i in units do
38189: LD_ADDR_VAR 0 4
38193: PUSH
38194: LD_VAR 0 1
38198: PUSH
38199: FOR_IN
38200: IFFALSE 38243
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
38202: LD_ADDR_VAR 0 5
38206: PUSH
38207: LD_VAR 0 5
38211: PPUSH
38212: LD_VAR 0 5
38216: PUSH
38217: LD_INT 1
38219: PLUS
38220: PPUSH
38221: LD_VAR 0 4
38225: PPUSH
38226: LD_VAR 0 2
38230: PPUSH
38231: CALL_OW 259
38235: PPUSH
38236: CALL_OW 2
38240: ST_TO_ADDR
38241: GO 38199
38243: POP
38244: POP
// if not tmp then
38245: LD_VAR 0 5
38249: NOT
38250: IFFALSE 38254
// exit ;
38252: GO 38274
// result := SortListByListDesc ( units , tmp ) ;
38254: LD_ADDR_VAR 0 3
38258: PUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: LD_VAR 0 5
38268: PPUSH
38269: CALL_OW 77
38273: ST_TO_ADDR
// end ;
38274: LD_VAR 0 3
38278: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38279: LD_INT 0
38281: PPUSH
38282: PPUSH
38283: PPUSH
// result := false ;
38284: LD_ADDR_VAR 0 3
38288: PUSH
38289: LD_INT 0
38291: ST_TO_ADDR
// x := GetX ( building ) ;
38292: LD_ADDR_VAR 0 4
38296: PUSH
38297: LD_VAR 0 2
38301: PPUSH
38302: CALL_OW 250
38306: ST_TO_ADDR
// y := GetY ( building ) ;
38307: LD_ADDR_VAR 0 5
38311: PUSH
38312: LD_VAR 0 2
38316: PPUSH
38317: CALL_OW 251
38321: ST_TO_ADDR
// if not building or not x or not y then
38322: LD_VAR 0 2
38326: NOT
38327: PUSH
38328: LD_VAR 0 4
38332: NOT
38333: OR
38334: PUSH
38335: LD_VAR 0 5
38339: NOT
38340: OR
38341: IFFALSE 38345
// exit ;
38343: GO 38437
// if GetTaskList ( unit ) then
38345: LD_VAR 0 1
38349: PPUSH
38350: CALL_OW 437
38354: IFFALSE 38437
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38356: LD_STRING e
38358: PUSH
38359: LD_VAR 0 1
38363: PPUSH
38364: CALL_OW 437
38368: PUSH
38369: LD_INT 1
38371: ARRAY
38372: PUSH
38373: LD_INT 1
38375: ARRAY
38376: EQUAL
38377: PUSH
38378: LD_VAR 0 4
38382: PUSH
38383: LD_VAR 0 1
38387: PPUSH
38388: CALL_OW 437
38392: PUSH
38393: LD_INT 1
38395: ARRAY
38396: PUSH
38397: LD_INT 2
38399: ARRAY
38400: EQUAL
38401: AND
38402: PUSH
38403: LD_VAR 0 5
38407: PUSH
38408: LD_VAR 0 1
38412: PPUSH
38413: CALL_OW 437
38417: PUSH
38418: LD_INT 1
38420: ARRAY
38421: PUSH
38422: LD_INT 3
38424: ARRAY
38425: EQUAL
38426: AND
38427: IFFALSE 38437
// result := true end ;
38429: LD_ADDR_VAR 0 3
38433: PUSH
38434: LD_INT 1
38436: ST_TO_ADDR
// end ;
38437: LD_VAR 0 3
38441: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38442: LD_INT 0
38444: PPUSH
// result := false ;
38445: LD_ADDR_VAR 0 4
38449: PUSH
38450: LD_INT 0
38452: ST_TO_ADDR
// if GetTaskList ( unit ) then
38453: LD_VAR 0 1
38457: PPUSH
38458: CALL_OW 437
38462: IFFALSE 38545
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38464: LD_STRING M
38466: PUSH
38467: LD_VAR 0 1
38471: PPUSH
38472: CALL_OW 437
38476: PUSH
38477: LD_INT 1
38479: ARRAY
38480: PUSH
38481: LD_INT 1
38483: ARRAY
38484: EQUAL
38485: PUSH
38486: LD_VAR 0 2
38490: PUSH
38491: LD_VAR 0 1
38495: PPUSH
38496: CALL_OW 437
38500: PUSH
38501: LD_INT 1
38503: ARRAY
38504: PUSH
38505: LD_INT 2
38507: ARRAY
38508: EQUAL
38509: AND
38510: PUSH
38511: LD_VAR 0 3
38515: PUSH
38516: LD_VAR 0 1
38520: PPUSH
38521: CALL_OW 437
38525: PUSH
38526: LD_INT 1
38528: ARRAY
38529: PUSH
38530: LD_INT 3
38532: ARRAY
38533: EQUAL
38534: AND
38535: IFFALSE 38545
// result := true ;
38537: LD_ADDR_VAR 0 4
38541: PUSH
38542: LD_INT 1
38544: ST_TO_ADDR
// end ; end ;
38545: LD_VAR 0 4
38549: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38550: LD_INT 0
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
// if not unit or not area then
38556: LD_VAR 0 1
38560: NOT
38561: PUSH
38562: LD_VAR 0 2
38566: NOT
38567: OR
38568: IFFALSE 38572
// exit ;
38570: GO 38736
// tmp := AreaToList ( area , i ) ;
38572: LD_ADDR_VAR 0 6
38576: PUSH
38577: LD_VAR 0 2
38581: PPUSH
38582: LD_VAR 0 5
38586: PPUSH
38587: CALL_OW 517
38591: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38592: LD_ADDR_VAR 0 5
38596: PUSH
38597: DOUBLE
38598: LD_INT 1
38600: DEC
38601: ST_TO_ADDR
38602: LD_VAR 0 6
38606: PUSH
38607: LD_INT 1
38609: ARRAY
38610: PUSH
38611: FOR_TO
38612: IFFALSE 38734
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38614: LD_ADDR_VAR 0 7
38618: PUSH
38619: LD_VAR 0 6
38623: PUSH
38624: LD_INT 1
38626: ARRAY
38627: PUSH
38628: LD_VAR 0 5
38632: ARRAY
38633: PUSH
38634: LD_VAR 0 6
38638: PUSH
38639: LD_INT 2
38641: ARRAY
38642: PUSH
38643: LD_VAR 0 5
38647: ARRAY
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
38653: LD_VAR 0 7
38657: PUSH
38658: LD_INT 1
38660: ARRAY
38661: PPUSH
38662: LD_VAR 0 7
38666: PUSH
38667: LD_INT 2
38669: ARRAY
38670: PPUSH
38671: CALL_OW 428
38675: PUSH
38676: LD_INT 0
38678: EQUAL
38679: IFFALSE 38732
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38681: LD_VAR 0 1
38685: PPUSH
38686: LD_VAR 0 7
38690: PUSH
38691: LD_INT 1
38693: ARRAY
38694: PPUSH
38695: LD_VAR 0 7
38699: PUSH
38700: LD_INT 2
38702: ARRAY
38703: PPUSH
38704: LD_VAR 0 3
38708: PPUSH
38709: CALL_OW 48
// result := IsPlaced ( unit ) ;
38713: LD_ADDR_VAR 0 4
38717: PUSH
38718: LD_VAR 0 1
38722: PPUSH
38723: CALL_OW 305
38727: ST_TO_ADDR
// exit ;
38728: POP
38729: POP
38730: GO 38736
// end ; end ;
38732: GO 38611
38734: POP
38735: POP
// end ;
38736: LD_VAR 0 4
38740: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38741: LD_INT 0
38743: PPUSH
38744: PPUSH
38745: PPUSH
// if not side or side > 8 then
38746: LD_VAR 0 1
38750: NOT
38751: PUSH
38752: LD_VAR 0 1
38756: PUSH
38757: LD_INT 8
38759: GREATER
38760: OR
38761: IFFALSE 38765
// exit ;
38763: GO 38952
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38765: LD_ADDR_VAR 0 4
38769: PUSH
38770: LD_INT 22
38772: PUSH
38773: LD_VAR 0 1
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 21
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PPUSH
38796: CALL_OW 69
38800: ST_TO_ADDR
// if not tmp then
38801: LD_VAR 0 4
38805: NOT
38806: IFFALSE 38810
// exit ;
38808: GO 38952
// enable_addtolog := true ;
38810: LD_ADDR_OWVAR 81
38814: PUSH
38815: LD_INT 1
38817: ST_TO_ADDR
// AddToLog ( [ ) ;
38818: LD_STRING [
38820: PPUSH
38821: CALL_OW 561
// for i in tmp do
38825: LD_ADDR_VAR 0 3
38829: PUSH
38830: LD_VAR 0 4
38834: PUSH
38835: FOR_IN
38836: IFFALSE 38943
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38838: LD_STRING [
38840: PUSH
38841: LD_VAR 0 3
38845: PPUSH
38846: CALL_OW 266
38850: STR
38851: PUSH
38852: LD_STRING , 
38854: STR
38855: PUSH
38856: LD_VAR 0 3
38860: PPUSH
38861: CALL_OW 250
38865: STR
38866: PUSH
38867: LD_STRING , 
38869: STR
38870: PUSH
38871: LD_VAR 0 3
38875: PPUSH
38876: CALL_OW 251
38880: STR
38881: PUSH
38882: LD_STRING , 
38884: STR
38885: PUSH
38886: LD_VAR 0 3
38890: PPUSH
38891: CALL_OW 254
38895: STR
38896: PUSH
38897: LD_STRING , 
38899: STR
38900: PUSH
38901: LD_VAR 0 3
38905: PPUSH
38906: LD_INT 1
38908: PPUSH
38909: CALL_OW 268
38913: STR
38914: PUSH
38915: LD_STRING , 
38917: STR
38918: PUSH
38919: LD_VAR 0 3
38923: PPUSH
38924: LD_INT 2
38926: PPUSH
38927: CALL_OW 268
38931: STR
38932: PUSH
38933: LD_STRING ],
38935: STR
38936: PPUSH
38937: CALL_OW 561
// end ;
38941: GO 38835
38943: POP
38944: POP
// AddToLog ( ]; ) ;
38945: LD_STRING ];
38947: PPUSH
38948: CALL_OW 561
// end ;
38952: LD_VAR 0 2
38956: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38957: LD_INT 0
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
// if not area or not rate or not max then
38964: LD_VAR 0 1
38968: NOT
38969: PUSH
38970: LD_VAR 0 2
38974: NOT
38975: OR
38976: PUSH
38977: LD_VAR 0 4
38981: NOT
38982: OR
38983: IFFALSE 38987
// exit ;
38985: GO 39176
// while 1 do
38987: LD_INT 1
38989: IFFALSE 39176
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38991: LD_ADDR_VAR 0 9
38995: PUSH
38996: LD_VAR 0 1
39000: PPUSH
39001: LD_INT 1
39003: PPUSH
39004: CALL_OW 287
39008: PUSH
39009: LD_INT 10
39011: MUL
39012: ST_TO_ADDR
// r := rate / 10 ;
39013: LD_ADDR_VAR 0 7
39017: PUSH
39018: LD_VAR 0 2
39022: PUSH
39023: LD_INT 10
39025: DIVREAL
39026: ST_TO_ADDR
// time := 1 1$00 ;
39027: LD_ADDR_VAR 0 8
39031: PUSH
39032: LD_INT 2100
39034: ST_TO_ADDR
// if amount < min then
39035: LD_VAR 0 9
39039: PUSH
39040: LD_VAR 0 3
39044: LESS
39045: IFFALSE 39063
// r := r * 2 else
39047: LD_ADDR_VAR 0 7
39051: PUSH
39052: LD_VAR 0 7
39056: PUSH
39057: LD_INT 2
39059: MUL
39060: ST_TO_ADDR
39061: GO 39089
// if amount > max then
39063: LD_VAR 0 9
39067: PUSH
39068: LD_VAR 0 4
39072: GREATER
39073: IFFALSE 39089
// r := r / 2 ;
39075: LD_ADDR_VAR 0 7
39079: PUSH
39080: LD_VAR 0 7
39084: PUSH
39085: LD_INT 2
39087: DIVREAL
39088: ST_TO_ADDR
// time := time / r ;
39089: LD_ADDR_VAR 0 8
39093: PUSH
39094: LD_VAR 0 8
39098: PUSH
39099: LD_VAR 0 7
39103: DIVREAL
39104: ST_TO_ADDR
// if time < 0 then
39105: LD_VAR 0 8
39109: PUSH
39110: LD_INT 0
39112: LESS
39113: IFFALSE 39130
// time := time * - 1 ;
39115: LD_ADDR_VAR 0 8
39119: PUSH
39120: LD_VAR 0 8
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: MUL
39129: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39130: LD_VAR 0 8
39134: PUSH
39135: LD_INT 35
39137: PPUSH
39138: LD_INT 875
39140: PPUSH
39141: CALL_OW 12
39145: PLUS
39146: PPUSH
39147: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39151: LD_INT 1
39153: PPUSH
39154: LD_INT 5
39156: PPUSH
39157: CALL_OW 12
39161: PPUSH
39162: LD_VAR 0 1
39166: PPUSH
39167: LD_INT 1
39169: PPUSH
39170: CALL_OW 55
// end ;
39174: GO 38987
// end ;
39176: LD_VAR 0 5
39180: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39181: LD_INT 0
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
// if not turrets or not factories then
39191: LD_VAR 0 1
39195: NOT
39196: PUSH
39197: LD_VAR 0 2
39201: NOT
39202: OR
39203: IFFALSE 39207
// exit ;
39205: GO 39514
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39207: LD_ADDR_VAR 0 10
39211: PUSH
39212: LD_INT 5
39214: PUSH
39215: LD_INT 6
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: LD_INT 4
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 3
39234: PUSH
39235: LD_INT 5
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 24
39249: PUSH
39250: LD_INT 25
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 23
39259: PUSH
39260: LD_INT 27
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 42
39273: PUSH
39274: LD_INT 43
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 44
39283: PUSH
39284: LD_INT 46
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 45
39293: PUSH
39294: LD_INT 47
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: ST_TO_ADDR
// result := [ ] ;
39311: LD_ADDR_VAR 0 3
39315: PUSH
39316: EMPTY
39317: ST_TO_ADDR
// for i in turrets do
39318: LD_ADDR_VAR 0 4
39322: PUSH
39323: LD_VAR 0 1
39327: PUSH
39328: FOR_IN
39329: IFFALSE 39512
// begin nat := GetNation ( i ) ;
39331: LD_ADDR_VAR 0 7
39335: PUSH
39336: LD_VAR 0 4
39340: PPUSH
39341: CALL_OW 248
39345: ST_TO_ADDR
// weapon := 0 ;
39346: LD_ADDR_VAR 0 8
39350: PUSH
39351: LD_INT 0
39353: ST_TO_ADDR
// if not nat then
39354: LD_VAR 0 7
39358: NOT
39359: IFFALSE 39363
// continue ;
39361: GO 39328
// for j in list [ nat ] do
39363: LD_ADDR_VAR 0 5
39367: PUSH
39368: LD_VAR 0 10
39372: PUSH
39373: LD_VAR 0 7
39377: ARRAY
39378: PUSH
39379: FOR_IN
39380: IFFALSE 39421
// if GetBWeapon ( i ) = j [ 1 ] then
39382: LD_VAR 0 4
39386: PPUSH
39387: CALL_OW 269
39391: PUSH
39392: LD_VAR 0 5
39396: PUSH
39397: LD_INT 1
39399: ARRAY
39400: EQUAL
39401: IFFALSE 39419
// begin weapon := j [ 2 ] ;
39403: LD_ADDR_VAR 0 8
39407: PUSH
39408: LD_VAR 0 5
39412: PUSH
39413: LD_INT 2
39415: ARRAY
39416: ST_TO_ADDR
// break ;
39417: GO 39421
// end ;
39419: GO 39379
39421: POP
39422: POP
// if not weapon then
39423: LD_VAR 0 8
39427: NOT
39428: IFFALSE 39432
// continue ;
39430: GO 39328
// for k in factories do
39432: LD_ADDR_VAR 0 6
39436: PUSH
39437: LD_VAR 0 2
39441: PUSH
39442: FOR_IN
39443: IFFALSE 39508
// begin weapons := AvailableWeaponList ( k ) ;
39445: LD_ADDR_VAR 0 9
39449: PUSH
39450: LD_VAR 0 6
39454: PPUSH
39455: CALL_OW 478
39459: ST_TO_ADDR
// if not weapons then
39460: LD_VAR 0 9
39464: NOT
39465: IFFALSE 39469
// continue ;
39467: GO 39442
// if weapon in weapons then
39469: LD_VAR 0 8
39473: PUSH
39474: LD_VAR 0 9
39478: IN
39479: IFFALSE 39506
// begin result := [ i , weapon ] ;
39481: LD_ADDR_VAR 0 3
39485: PUSH
39486: LD_VAR 0 4
39490: PUSH
39491: LD_VAR 0 8
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: ST_TO_ADDR
// exit ;
39500: POP
39501: POP
39502: POP
39503: POP
39504: GO 39514
// end ; end ;
39506: GO 39442
39508: POP
39509: POP
// end ;
39510: GO 39328
39512: POP
39513: POP
// end ;
39514: LD_VAR 0 3
39518: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39519: LD_INT 0
39521: PPUSH
// if not side or side > 8 then
39522: LD_VAR 0 3
39526: NOT
39527: PUSH
39528: LD_VAR 0 3
39532: PUSH
39533: LD_INT 8
39535: GREATER
39536: OR
39537: IFFALSE 39541
// exit ;
39539: GO 39600
// if not range then
39541: LD_VAR 0 4
39545: NOT
39546: IFFALSE 39557
// range := - 12 ;
39548: LD_ADDR_VAR 0 4
39552: PUSH
39553: LD_INT 12
39555: NEG
39556: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39557: LD_VAR 0 1
39561: PPUSH
39562: LD_VAR 0 2
39566: PPUSH
39567: LD_VAR 0 3
39571: PPUSH
39572: LD_VAR 0 4
39576: PPUSH
39577: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39581: LD_VAR 0 1
39585: PPUSH
39586: LD_VAR 0 2
39590: PPUSH
39591: LD_VAR 0 3
39595: PPUSH
39596: CALL_OW 331
// end ;
39600: LD_VAR 0 5
39604: RET
// export function Video ( mode ) ; begin
39605: LD_INT 0
39607: PPUSH
// ingame_video = mode ;
39608: LD_ADDR_OWVAR 52
39612: PUSH
39613: LD_VAR 0 1
39617: ST_TO_ADDR
// interface_hidden = mode ;
39618: LD_ADDR_OWVAR 54
39622: PUSH
39623: LD_VAR 0 1
39627: ST_TO_ADDR
// end ;
39628: LD_VAR 0 2
39632: RET
// export function Join ( array , element ) ; begin
39633: LD_INT 0
39635: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39636: LD_ADDR_VAR 0 3
39640: PUSH
39641: LD_VAR 0 1
39645: PPUSH
39646: LD_VAR 0 1
39650: PUSH
39651: LD_INT 1
39653: PLUS
39654: PPUSH
39655: LD_VAR 0 2
39659: PPUSH
39660: CALL_OW 1
39664: ST_TO_ADDR
// end ;
39665: LD_VAR 0 3
39669: RET
// export function JoinUnion ( array , element ) ; begin
39670: LD_INT 0
39672: PPUSH
// result := array union element ;
39673: LD_ADDR_VAR 0 3
39677: PUSH
39678: LD_VAR 0 1
39682: PUSH
39683: LD_VAR 0 2
39687: UNION
39688: ST_TO_ADDR
// end ;
39689: LD_VAR 0 3
39693: RET
// export function GetBehemoths ( side ) ; begin
39694: LD_INT 0
39696: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
39697: LD_ADDR_VAR 0 2
39701: PUSH
39702: LD_INT 22
39704: PUSH
39705: LD_VAR 0 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 31
39716: PUSH
39717: LD_INT 25
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PPUSH
39728: CALL_OW 69
39732: ST_TO_ADDR
// end ;
39733: LD_VAR 0 2
39737: RET
// export function Shuffle ( array ) ; var i , index ; begin
39738: LD_INT 0
39740: PPUSH
39741: PPUSH
39742: PPUSH
// result := [ ] ;
39743: LD_ADDR_VAR 0 2
39747: PUSH
39748: EMPTY
39749: ST_TO_ADDR
// if not array then
39750: LD_VAR 0 1
39754: NOT
39755: IFFALSE 39759
// exit ;
39757: GO 39858
// Randomize ;
39759: CALL_OW 10
// for i = array downto 1 do
39763: LD_ADDR_VAR 0 3
39767: PUSH
39768: DOUBLE
39769: LD_VAR 0 1
39773: INC
39774: ST_TO_ADDR
39775: LD_INT 1
39777: PUSH
39778: FOR_DOWNTO
39779: IFFALSE 39856
// begin index := rand ( 1 , array ) ;
39781: LD_ADDR_VAR 0 4
39785: PUSH
39786: LD_INT 1
39788: PPUSH
39789: LD_VAR 0 1
39793: PPUSH
39794: CALL_OW 12
39798: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39799: LD_ADDR_VAR 0 2
39803: PUSH
39804: LD_VAR 0 2
39808: PPUSH
39809: LD_VAR 0 2
39813: PUSH
39814: LD_INT 1
39816: PLUS
39817: PPUSH
39818: LD_VAR 0 1
39822: PUSH
39823: LD_VAR 0 4
39827: ARRAY
39828: PPUSH
39829: CALL_OW 2
39833: ST_TO_ADDR
// array := Delete ( array , index ) ;
39834: LD_ADDR_VAR 0 1
39838: PUSH
39839: LD_VAR 0 1
39843: PPUSH
39844: LD_VAR 0 4
39848: PPUSH
39849: CALL_OW 3
39853: ST_TO_ADDR
// end ;
39854: GO 39778
39856: POP
39857: POP
// end ;
39858: LD_VAR 0 2
39862: RET
// export function GetBaseMaterials ( base ) ; begin
39863: LD_INT 0
39865: PPUSH
// result := [ 0 , 0 , 0 ] ;
39866: LD_ADDR_VAR 0 2
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: LIST
39884: ST_TO_ADDR
// if not base then
39885: LD_VAR 0 1
39889: NOT
39890: IFFALSE 39894
// exit ;
39892: GO 39943
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39894: LD_ADDR_VAR 0 2
39898: PUSH
39899: LD_VAR 0 1
39903: PPUSH
39904: LD_INT 1
39906: PPUSH
39907: CALL_OW 275
39911: PUSH
39912: LD_VAR 0 1
39916: PPUSH
39917: LD_INT 2
39919: PPUSH
39920: CALL_OW 275
39924: PUSH
39925: LD_VAR 0 1
39929: PPUSH
39930: LD_INT 3
39932: PPUSH
39933: CALL_OW 275
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: LIST
39942: ST_TO_ADDR
// end ;
39943: LD_VAR 0 2
39947: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39948: LD_INT 0
39950: PPUSH
39951: PPUSH
// result := array ;
39952: LD_ADDR_VAR 0 3
39956: PUSH
39957: LD_VAR 0 1
39961: ST_TO_ADDR
// if size > 0 then
39962: LD_VAR 0 2
39966: PUSH
39967: LD_INT 0
39969: GREATER
39970: IFFALSE 40016
// for i := array downto size do
39972: LD_ADDR_VAR 0 4
39976: PUSH
39977: DOUBLE
39978: LD_VAR 0 1
39982: INC
39983: ST_TO_ADDR
39984: LD_VAR 0 2
39988: PUSH
39989: FOR_DOWNTO
39990: IFFALSE 40014
// result := Delete ( result , result ) ;
39992: LD_ADDR_VAR 0 3
39996: PUSH
39997: LD_VAR 0 3
40001: PPUSH
40002: LD_VAR 0 3
40006: PPUSH
40007: CALL_OW 3
40011: ST_TO_ADDR
40012: GO 39989
40014: POP
40015: POP
// end ;
40016: LD_VAR 0 3
40020: RET
// export function ComExit ( unit ) ; var tmp ; begin
40021: LD_INT 0
40023: PPUSH
40024: PPUSH
// if not IsInUnit ( unit ) then
40025: LD_VAR 0 1
40029: PPUSH
40030: CALL_OW 310
40034: NOT
40035: IFFALSE 40039
// exit ;
40037: GO 40099
// tmp := IsInUnit ( unit ) ;
40039: LD_ADDR_VAR 0 3
40043: PUSH
40044: LD_VAR 0 1
40048: PPUSH
40049: CALL_OW 310
40053: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40054: LD_VAR 0 3
40058: PPUSH
40059: CALL_OW 247
40063: PUSH
40064: LD_INT 2
40066: EQUAL
40067: IFFALSE 40080
// ComExitVehicle ( unit ) else
40069: LD_VAR 0 1
40073: PPUSH
40074: CALL_OW 121
40078: GO 40089
// ComExitBuilding ( unit ) ;
40080: LD_VAR 0 1
40084: PPUSH
40085: CALL_OW 122
// result := tmp ;
40089: LD_ADDR_VAR 0 2
40093: PUSH
40094: LD_VAR 0 3
40098: ST_TO_ADDR
// end ;
40099: LD_VAR 0 2
40103: RET
// export function ComExitAll ( units ) ; var i ; begin
40104: LD_INT 0
40106: PPUSH
40107: PPUSH
// if not units then
40108: LD_VAR 0 1
40112: NOT
40113: IFFALSE 40117
// exit ;
40115: GO 40143
// for i in units do
40117: LD_ADDR_VAR 0 3
40121: PUSH
40122: LD_VAR 0 1
40126: PUSH
40127: FOR_IN
40128: IFFALSE 40141
// ComExit ( i ) ;
40130: LD_VAR 0 3
40134: PPUSH
40135: CALL 40021 0 1
40139: GO 40127
40141: POP
40142: POP
// end ;
40143: LD_VAR 0 2
40147: RET
// export function ResetHc ; begin
40148: LD_INT 0
40150: PPUSH
// InitHc ;
40151: CALL_OW 19
// hc_importance := 0 ;
40155: LD_ADDR_OWVAR 32
40159: PUSH
40160: LD_INT 0
40162: ST_TO_ADDR
// end ;
40163: LD_VAR 0 1
40167: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40168: LD_INT 0
40170: PPUSH
40171: PPUSH
40172: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40173: LD_ADDR_VAR 0 6
40177: PUSH
40178: LD_VAR 0 1
40182: PUSH
40183: LD_VAR 0 3
40187: PLUS
40188: PUSH
40189: LD_INT 2
40191: DIV
40192: ST_TO_ADDR
// if _x < 0 then
40193: LD_VAR 0 6
40197: PUSH
40198: LD_INT 0
40200: LESS
40201: IFFALSE 40218
// _x := _x * - 1 ;
40203: LD_ADDR_VAR 0 6
40207: PUSH
40208: LD_VAR 0 6
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: MUL
40217: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40218: LD_ADDR_VAR 0 7
40222: PUSH
40223: LD_VAR 0 2
40227: PUSH
40228: LD_VAR 0 4
40232: PLUS
40233: PUSH
40234: LD_INT 2
40236: DIV
40237: ST_TO_ADDR
// if _y < 0 then
40238: LD_VAR 0 7
40242: PUSH
40243: LD_INT 0
40245: LESS
40246: IFFALSE 40263
// _y := _y * - 1 ;
40248: LD_ADDR_VAR 0 7
40252: PUSH
40253: LD_VAR 0 7
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: MUL
40262: ST_TO_ADDR
// result := [ _x , _y ] ;
40263: LD_ADDR_VAR 0 5
40267: PUSH
40268: LD_VAR 0 6
40272: PUSH
40273: LD_VAR 0 7
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: ST_TO_ADDR
// end ;
40282: LD_VAR 0 5
40286: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40287: LD_INT 0
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
// task := GetTaskList ( unit ) ;
40293: LD_ADDR_VAR 0 7
40297: PUSH
40298: LD_VAR 0 1
40302: PPUSH
40303: CALL_OW 437
40307: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40308: LD_VAR 0 7
40312: NOT
40313: PUSH
40314: LD_VAR 0 1
40318: PPUSH
40319: LD_VAR 0 2
40323: PPUSH
40324: CALL_OW 308
40328: NOT
40329: AND
40330: IFFALSE 40334
// exit ;
40332: GO 40452
// if IsInArea ( unit , area ) then
40334: LD_VAR 0 1
40338: PPUSH
40339: LD_VAR 0 2
40343: PPUSH
40344: CALL_OW 308
40348: IFFALSE 40366
// begin ComMoveToArea ( unit , goAway ) ;
40350: LD_VAR 0 1
40354: PPUSH
40355: LD_VAR 0 3
40359: PPUSH
40360: CALL_OW 113
// exit ;
40364: GO 40452
// end ; if task [ 1 ] [ 1 ] <> M then
40366: LD_VAR 0 7
40370: PUSH
40371: LD_INT 1
40373: ARRAY
40374: PUSH
40375: LD_INT 1
40377: ARRAY
40378: PUSH
40379: LD_STRING M
40381: NONEQUAL
40382: IFFALSE 40386
// exit ;
40384: GO 40452
// x := task [ 1 ] [ 2 ] ;
40386: LD_ADDR_VAR 0 5
40390: PUSH
40391: LD_VAR 0 7
40395: PUSH
40396: LD_INT 1
40398: ARRAY
40399: PUSH
40400: LD_INT 2
40402: ARRAY
40403: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40404: LD_ADDR_VAR 0 6
40408: PUSH
40409: LD_VAR 0 7
40413: PUSH
40414: LD_INT 1
40416: ARRAY
40417: PUSH
40418: LD_INT 3
40420: ARRAY
40421: ST_TO_ADDR
// if InArea ( x , y , area ) then
40422: LD_VAR 0 5
40426: PPUSH
40427: LD_VAR 0 6
40431: PPUSH
40432: LD_VAR 0 2
40436: PPUSH
40437: CALL_OW 309
40441: IFFALSE 40452
// ComStop ( unit ) ;
40443: LD_VAR 0 1
40447: PPUSH
40448: CALL_OW 141
// end ;
40452: LD_VAR 0 4
40456: RET
// export function Abs ( value ) ; begin
40457: LD_INT 0
40459: PPUSH
// result := value ;
40460: LD_ADDR_VAR 0 2
40464: PUSH
40465: LD_VAR 0 1
40469: ST_TO_ADDR
// if value < 0 then
40470: LD_VAR 0 1
40474: PUSH
40475: LD_INT 0
40477: LESS
40478: IFFALSE 40495
// result := value * - 1 ;
40480: LD_ADDR_VAR 0 2
40484: PUSH
40485: LD_VAR 0 1
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: MUL
40494: ST_TO_ADDR
// end ;
40495: LD_VAR 0 2
40499: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40500: LD_INT 0
40502: PPUSH
40503: PPUSH
40504: PPUSH
40505: PPUSH
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
// if not unit or not building then
40510: LD_VAR 0 1
40514: NOT
40515: PUSH
40516: LD_VAR 0 2
40520: NOT
40521: OR
40522: IFFALSE 40526
// exit ;
40524: GO 40752
// x := GetX ( building ) ;
40526: LD_ADDR_VAR 0 4
40530: PUSH
40531: LD_VAR 0 2
40535: PPUSH
40536: CALL_OW 250
40540: ST_TO_ADDR
// y := GetY ( building ) ;
40541: LD_ADDR_VAR 0 6
40545: PUSH
40546: LD_VAR 0 2
40550: PPUSH
40551: CALL_OW 251
40555: ST_TO_ADDR
// d := GetDir ( building ) ;
40556: LD_ADDR_VAR 0 8
40560: PUSH
40561: LD_VAR 0 2
40565: PPUSH
40566: CALL_OW 254
40570: ST_TO_ADDR
// r := 4 ;
40571: LD_ADDR_VAR 0 9
40575: PUSH
40576: LD_INT 4
40578: ST_TO_ADDR
// for i := 1 to 5 do
40579: LD_ADDR_VAR 0 10
40583: PUSH
40584: DOUBLE
40585: LD_INT 1
40587: DEC
40588: ST_TO_ADDR
40589: LD_INT 5
40591: PUSH
40592: FOR_TO
40593: IFFALSE 40750
// begin _x := ShiftX ( x , d , r + i ) ;
40595: LD_ADDR_VAR 0 5
40599: PUSH
40600: LD_VAR 0 4
40604: PPUSH
40605: LD_VAR 0 8
40609: PPUSH
40610: LD_VAR 0 9
40614: PUSH
40615: LD_VAR 0 10
40619: PLUS
40620: PPUSH
40621: CALL_OW 272
40625: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40626: LD_ADDR_VAR 0 7
40630: PUSH
40631: LD_VAR 0 6
40635: PPUSH
40636: LD_VAR 0 8
40640: PPUSH
40641: LD_VAR 0 9
40645: PUSH
40646: LD_VAR 0 10
40650: PLUS
40651: PPUSH
40652: CALL_OW 273
40656: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40657: LD_VAR 0 5
40661: PPUSH
40662: LD_VAR 0 7
40666: PPUSH
40667: CALL_OW 488
40671: PUSH
40672: LD_VAR 0 5
40676: PPUSH
40677: LD_VAR 0 7
40681: PPUSH
40682: CALL_OW 428
40686: PPUSH
40687: CALL_OW 247
40691: PUSH
40692: LD_INT 3
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: IN
40702: NOT
40703: AND
40704: IFFALSE 40748
// begin ComMoveXY ( unit , _x , _y ) ;
40706: LD_VAR 0 1
40710: PPUSH
40711: LD_VAR 0 5
40715: PPUSH
40716: LD_VAR 0 7
40720: PPUSH
40721: CALL_OW 111
// result := [ _x , _y ] ;
40725: LD_ADDR_VAR 0 3
40729: PUSH
40730: LD_VAR 0 5
40734: PUSH
40735: LD_VAR 0 7
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: ST_TO_ADDR
// exit ;
40744: POP
40745: POP
40746: GO 40752
// end ; end ;
40748: GO 40592
40750: POP
40751: POP
// end ;
40752: LD_VAR 0 3
40756: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40757: LD_INT 0
40759: PPUSH
40760: PPUSH
40761: PPUSH
// result := 0 ;
40762: LD_ADDR_VAR 0 3
40766: PUSH
40767: LD_INT 0
40769: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40770: LD_VAR 0 1
40774: PUSH
40775: LD_INT 0
40777: LESS
40778: PUSH
40779: LD_VAR 0 1
40783: PUSH
40784: LD_INT 8
40786: GREATER
40787: OR
40788: PUSH
40789: LD_VAR 0 2
40793: PUSH
40794: LD_INT 0
40796: LESS
40797: OR
40798: PUSH
40799: LD_VAR 0 2
40803: PUSH
40804: LD_INT 8
40806: GREATER
40807: OR
40808: IFFALSE 40812
// exit ;
40810: GO 40887
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40812: LD_ADDR_VAR 0 4
40816: PUSH
40817: LD_INT 22
40819: PUSH
40820: LD_VAR 0 2
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PPUSH
40829: CALL_OW 69
40833: PUSH
40834: FOR_IN
40835: IFFALSE 40885
// begin un := UnitShoot ( i ) ;
40837: LD_ADDR_VAR 0 5
40841: PUSH
40842: LD_VAR 0 4
40846: PPUSH
40847: CALL_OW 504
40851: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40852: LD_VAR 0 5
40856: PPUSH
40857: CALL_OW 255
40861: PUSH
40862: LD_VAR 0 1
40866: EQUAL
40867: IFFALSE 40883
// begin result := un ;
40869: LD_ADDR_VAR 0 3
40873: PUSH
40874: LD_VAR 0 5
40878: ST_TO_ADDR
// exit ;
40879: POP
40880: POP
40881: GO 40887
// end ; end ;
40883: GO 40834
40885: POP
40886: POP
// end ;
40887: LD_VAR 0 3
40891: RET
// export function GetCargoBay ( units ) ; begin
40892: LD_INT 0
40894: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40895: LD_ADDR_VAR 0 2
40899: PUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: LD_INT 2
40907: PUSH
40908: LD_INT 34
40910: PUSH
40911: LD_INT 12
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 34
40920: PUSH
40921: LD_INT 51
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 34
40930: PUSH
40931: LD_INT 32
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 34
40940: PUSH
40941: LD_EXP 10
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: PPUSH
40957: CALL_OW 72
40961: ST_TO_ADDR
// end ;
40962: LD_VAR 0 2
40966: RET
// export function Negate ( value ) ; begin
40967: LD_INT 0
40969: PPUSH
// result := not value ;
40970: LD_ADDR_VAR 0 2
40974: PUSH
40975: LD_VAR 0 1
40979: NOT
40980: ST_TO_ADDR
// end ;
40981: LD_VAR 0 2
40985: RET
// export function Inc ( value ) ; begin
40986: LD_INT 0
40988: PPUSH
// result := value + 1 ;
40989: LD_ADDR_VAR 0 2
40993: PUSH
40994: LD_VAR 0 1
40998: PUSH
40999: LD_INT 1
41001: PLUS
41002: ST_TO_ADDR
// end ;
41003: LD_VAR 0 2
41007: RET
// export function Dec ( value ) ; begin
41008: LD_INT 0
41010: PPUSH
// result := value - 1 ;
41011: LD_ADDR_VAR 0 2
41015: PUSH
41016: LD_VAR 0 1
41020: PUSH
41021: LD_INT 1
41023: MINUS
41024: ST_TO_ADDR
// end ;
41025: LD_VAR 0 2
41029: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41030: LD_INT 0
41032: PPUSH
41033: PPUSH
41034: PPUSH
41035: PPUSH
41036: PPUSH
41037: PPUSH
41038: PPUSH
41039: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41040: LD_VAR 0 1
41044: PPUSH
41045: LD_VAR 0 2
41049: PPUSH
41050: CALL_OW 488
41054: NOT
41055: PUSH
41056: LD_VAR 0 3
41060: PPUSH
41061: LD_VAR 0 4
41065: PPUSH
41066: CALL_OW 488
41070: NOT
41071: OR
41072: IFFALSE 41085
// begin result := - 1 ;
41074: LD_ADDR_VAR 0 5
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: ST_TO_ADDR
// exit ;
41083: GO 41320
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41085: LD_ADDR_VAR 0 12
41089: PUSH
41090: LD_VAR 0 1
41094: PPUSH
41095: LD_VAR 0 2
41099: PPUSH
41100: LD_VAR 0 3
41104: PPUSH
41105: LD_VAR 0 4
41109: PPUSH
41110: CALL 40168 0 4
41114: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41115: LD_ADDR_VAR 0 11
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: LD_VAR 0 2
41129: PPUSH
41130: LD_VAR 0 12
41134: PUSH
41135: LD_INT 1
41137: ARRAY
41138: PPUSH
41139: LD_VAR 0 12
41143: PUSH
41144: LD_INT 2
41146: ARRAY
41147: PPUSH
41148: CALL_OW 298
41152: ST_TO_ADDR
// distance := 9999 ;
41153: LD_ADDR_VAR 0 10
41157: PUSH
41158: LD_INT 9999
41160: ST_TO_ADDR
// for i := 0 to 5 do
41161: LD_ADDR_VAR 0 6
41165: PUSH
41166: DOUBLE
41167: LD_INT 0
41169: DEC
41170: ST_TO_ADDR
41171: LD_INT 5
41173: PUSH
41174: FOR_TO
41175: IFFALSE 41318
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41177: LD_ADDR_VAR 0 7
41181: PUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: LD_VAR 0 6
41191: PPUSH
41192: LD_VAR 0 11
41196: PPUSH
41197: CALL_OW 272
41201: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41202: LD_ADDR_VAR 0 8
41206: PUSH
41207: LD_VAR 0 2
41211: PPUSH
41212: LD_VAR 0 6
41216: PPUSH
41217: LD_VAR 0 11
41221: PPUSH
41222: CALL_OW 273
41226: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41227: LD_VAR 0 7
41231: PPUSH
41232: LD_VAR 0 8
41236: PPUSH
41237: CALL_OW 488
41241: NOT
41242: IFFALSE 41246
// continue ;
41244: GO 41174
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41246: LD_ADDR_VAR 0 9
41250: PUSH
41251: LD_VAR 0 12
41255: PUSH
41256: LD_INT 1
41258: ARRAY
41259: PPUSH
41260: LD_VAR 0 12
41264: PUSH
41265: LD_INT 2
41267: ARRAY
41268: PPUSH
41269: LD_VAR 0 7
41273: PPUSH
41274: LD_VAR 0 8
41278: PPUSH
41279: CALL_OW 298
41283: ST_TO_ADDR
// if tmp < distance then
41284: LD_VAR 0 9
41288: PUSH
41289: LD_VAR 0 10
41293: LESS
41294: IFFALSE 41316
// begin result := i ;
41296: LD_ADDR_VAR 0 5
41300: PUSH
41301: LD_VAR 0 6
41305: ST_TO_ADDR
// distance := tmp ;
41306: LD_ADDR_VAR 0 10
41310: PUSH
41311: LD_VAR 0 9
41315: ST_TO_ADDR
// end ; end ;
41316: GO 41174
41318: POP
41319: POP
// end ;
41320: LD_VAR 0 5
41324: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41325: LD_INT 0
41327: PPUSH
41328: PPUSH
// if not driver or not IsInUnit ( driver ) then
41329: LD_VAR 0 1
41333: NOT
41334: PUSH
41335: LD_VAR 0 1
41339: PPUSH
41340: CALL_OW 310
41344: NOT
41345: OR
41346: IFFALSE 41350
// exit ;
41348: GO 41440
// vehicle := IsInUnit ( driver ) ;
41350: LD_ADDR_VAR 0 3
41354: PUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: CALL_OW 310
41364: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41365: LD_VAR 0 1
41369: PPUSH
41370: LD_STRING \
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: PUSH
41400: LD_STRING E
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_VAR 0 3
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PPUSH
41436: CALL_OW 446
// end ;
41440: LD_VAR 0 2
41444: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41445: LD_INT 0
41447: PPUSH
41448: PPUSH
// if not driver or not IsInUnit ( driver ) then
41449: LD_VAR 0 1
41453: NOT
41454: PUSH
41455: LD_VAR 0 1
41459: PPUSH
41460: CALL_OW 310
41464: NOT
41465: OR
41466: IFFALSE 41470
// exit ;
41468: GO 41560
// vehicle := IsInUnit ( driver ) ;
41470: LD_ADDR_VAR 0 3
41474: PUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: CALL_OW 310
41484: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41485: LD_VAR 0 1
41489: PPUSH
41490: LD_STRING \
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: PUSH
41520: LD_STRING E
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_VAR 0 3
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PPUSH
41556: CALL_OW 447
// end ;
41560: LD_VAR 0 2
41564: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41565: LD_INT 0
41567: PPUSH
41568: PPUSH
41569: PPUSH
// tmp := [ ] ;
41570: LD_ADDR_VAR 0 5
41574: PUSH
41575: EMPTY
41576: ST_TO_ADDR
// for i in units do
41577: LD_ADDR_VAR 0 4
41581: PUSH
41582: LD_VAR 0 1
41586: PUSH
41587: FOR_IN
41588: IFFALSE 41626
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41590: LD_ADDR_VAR 0 5
41594: PUSH
41595: LD_VAR 0 5
41599: PPUSH
41600: LD_VAR 0 5
41604: PUSH
41605: LD_INT 1
41607: PLUS
41608: PPUSH
41609: LD_VAR 0 4
41613: PPUSH
41614: CALL_OW 256
41618: PPUSH
41619: CALL_OW 2
41623: ST_TO_ADDR
41624: GO 41587
41626: POP
41627: POP
// if not tmp then
41628: LD_VAR 0 5
41632: NOT
41633: IFFALSE 41637
// exit ;
41635: GO 41685
// if asc then
41637: LD_VAR 0 2
41641: IFFALSE 41665
// result := SortListByListAsc ( units , tmp ) else
41643: LD_ADDR_VAR 0 3
41647: PUSH
41648: LD_VAR 0 1
41652: PPUSH
41653: LD_VAR 0 5
41657: PPUSH
41658: CALL_OW 76
41662: ST_TO_ADDR
41663: GO 41685
// result := SortListByListDesc ( units , tmp ) ;
41665: LD_ADDR_VAR 0 3
41669: PUSH
41670: LD_VAR 0 1
41674: PPUSH
41675: LD_VAR 0 5
41679: PPUSH
41680: CALL_OW 77
41684: ST_TO_ADDR
// end ;
41685: LD_VAR 0 3
41689: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41690: LD_INT 0
41692: PPUSH
41693: PPUSH
// task := GetTaskList ( mech ) ;
41694: LD_ADDR_VAR 0 4
41698: PUSH
41699: LD_VAR 0 1
41703: PPUSH
41704: CALL_OW 437
41708: ST_TO_ADDR
// if not task then
41709: LD_VAR 0 4
41713: NOT
41714: IFFALSE 41718
// exit ;
41716: GO 41760
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41718: LD_ADDR_VAR 0 3
41722: PUSH
41723: LD_VAR 0 4
41727: PUSH
41728: LD_INT 1
41730: ARRAY
41731: PUSH
41732: LD_INT 1
41734: ARRAY
41735: PUSH
41736: LD_STRING r
41738: EQUAL
41739: PUSH
41740: LD_VAR 0 4
41744: PUSH
41745: LD_INT 1
41747: ARRAY
41748: PUSH
41749: LD_INT 4
41751: ARRAY
41752: PUSH
41753: LD_VAR 0 2
41757: EQUAL
41758: AND
41759: ST_TO_ADDR
// end ;
41760: LD_VAR 0 3
41764: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41765: LD_INT 0
41767: PPUSH
// SetDir ( unit , d ) ;
41768: LD_VAR 0 1
41772: PPUSH
41773: LD_VAR 0 4
41777: PPUSH
41778: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41782: LD_VAR 0 1
41786: PPUSH
41787: LD_VAR 0 2
41791: PPUSH
41792: LD_VAR 0 3
41796: PPUSH
41797: LD_VAR 0 5
41801: PPUSH
41802: CALL_OW 48
// end ;
41806: LD_VAR 0 6
41810: RET
// export function ToNaturalNumber ( number ) ; begin
41811: LD_INT 0
41813: PPUSH
// result := number div 1 ;
41814: LD_ADDR_VAR 0 2
41818: PUSH
41819: LD_VAR 0 1
41823: PUSH
41824: LD_INT 1
41826: DIV
41827: ST_TO_ADDR
// if number < 0 then
41828: LD_VAR 0 1
41832: PUSH
41833: LD_INT 0
41835: LESS
41836: IFFALSE 41846
// result := 0 ;
41838: LD_ADDR_VAR 0 2
41842: PUSH
41843: LD_INT 0
41845: ST_TO_ADDR
// end ;
41846: LD_VAR 0 2
41850: RET
// export function SortByClass ( units , class ) ; var un ; begin
41851: LD_INT 0
41853: PPUSH
41854: PPUSH
// if not units or not class then
41855: LD_VAR 0 1
41859: NOT
41860: PUSH
41861: LD_VAR 0 2
41865: NOT
41866: OR
41867: IFFALSE 41871
// exit ;
41869: GO 41966
// result := [ ] ;
41871: LD_ADDR_VAR 0 3
41875: PUSH
41876: EMPTY
41877: ST_TO_ADDR
// for un in units do
41878: LD_ADDR_VAR 0 4
41882: PUSH
41883: LD_VAR 0 1
41887: PUSH
41888: FOR_IN
41889: IFFALSE 41964
// if GetClass ( un ) = class then
41891: LD_VAR 0 4
41895: PPUSH
41896: CALL_OW 257
41900: PUSH
41901: LD_VAR 0 2
41905: EQUAL
41906: IFFALSE 41933
// result := Insert ( result , 1 , un ) else
41908: LD_ADDR_VAR 0 3
41912: PUSH
41913: LD_VAR 0 3
41917: PPUSH
41918: LD_INT 1
41920: PPUSH
41921: LD_VAR 0 4
41925: PPUSH
41926: CALL_OW 2
41930: ST_TO_ADDR
41931: GO 41962
// result := Replace ( result , result + 1 , un ) ;
41933: LD_ADDR_VAR 0 3
41937: PUSH
41938: LD_VAR 0 3
41942: PPUSH
41943: LD_VAR 0 3
41947: PUSH
41948: LD_INT 1
41950: PLUS
41951: PPUSH
41952: LD_VAR 0 4
41956: PPUSH
41957: CALL_OW 1
41961: ST_TO_ADDR
41962: GO 41888
41964: POP
41965: POP
// end ;
41966: LD_VAR 0 3
41970: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41971: LD_INT 0
41973: PPUSH
41974: PPUSH
41975: PPUSH
41976: PPUSH
41977: PPUSH
41978: PPUSH
41979: PPUSH
// result := [ ] ;
41980: LD_ADDR_VAR 0 4
41984: PUSH
41985: EMPTY
41986: ST_TO_ADDR
// if x - r < 0 then
41987: LD_VAR 0 1
41991: PUSH
41992: LD_VAR 0 3
41996: MINUS
41997: PUSH
41998: LD_INT 0
42000: LESS
42001: IFFALSE 42013
// min_x := 0 else
42003: LD_ADDR_VAR 0 8
42007: PUSH
42008: LD_INT 0
42010: ST_TO_ADDR
42011: GO 42029
// min_x := x - r ;
42013: LD_ADDR_VAR 0 8
42017: PUSH
42018: LD_VAR 0 1
42022: PUSH
42023: LD_VAR 0 3
42027: MINUS
42028: ST_TO_ADDR
// if y - r < 0 then
42029: LD_VAR 0 2
42033: PUSH
42034: LD_VAR 0 3
42038: MINUS
42039: PUSH
42040: LD_INT 0
42042: LESS
42043: IFFALSE 42055
// min_y := 0 else
42045: LD_ADDR_VAR 0 7
42049: PUSH
42050: LD_INT 0
42052: ST_TO_ADDR
42053: GO 42071
// min_y := y - r ;
42055: LD_ADDR_VAR 0 7
42059: PUSH
42060: LD_VAR 0 2
42064: PUSH
42065: LD_VAR 0 3
42069: MINUS
42070: ST_TO_ADDR
// max_x := x + r ;
42071: LD_ADDR_VAR 0 9
42075: PUSH
42076: LD_VAR 0 1
42080: PUSH
42081: LD_VAR 0 3
42085: PLUS
42086: ST_TO_ADDR
// max_y := y + r ;
42087: LD_ADDR_VAR 0 10
42091: PUSH
42092: LD_VAR 0 2
42096: PUSH
42097: LD_VAR 0 3
42101: PLUS
42102: ST_TO_ADDR
// for _x = min_x to max_x do
42103: LD_ADDR_VAR 0 5
42107: PUSH
42108: DOUBLE
42109: LD_VAR 0 8
42113: DEC
42114: ST_TO_ADDR
42115: LD_VAR 0 9
42119: PUSH
42120: FOR_TO
42121: IFFALSE 42222
// for _y = min_y to max_y do
42123: LD_ADDR_VAR 0 6
42127: PUSH
42128: DOUBLE
42129: LD_VAR 0 7
42133: DEC
42134: ST_TO_ADDR
42135: LD_VAR 0 10
42139: PUSH
42140: FOR_TO
42141: IFFALSE 42218
// begin if not ValidHex ( _x , _y ) then
42143: LD_VAR 0 5
42147: PPUSH
42148: LD_VAR 0 6
42152: PPUSH
42153: CALL_OW 488
42157: NOT
42158: IFFALSE 42162
// continue ;
42160: GO 42140
// if GetResourceTypeXY ( _x , _y ) then
42162: LD_VAR 0 5
42166: PPUSH
42167: LD_VAR 0 6
42171: PPUSH
42172: CALL_OW 283
42176: IFFALSE 42216
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42178: LD_ADDR_VAR 0 4
42182: PUSH
42183: LD_VAR 0 4
42187: PPUSH
42188: LD_VAR 0 4
42192: PUSH
42193: LD_INT 1
42195: PLUS
42196: PPUSH
42197: LD_VAR 0 5
42201: PUSH
42202: LD_VAR 0 6
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PPUSH
42211: CALL_OW 1
42215: ST_TO_ADDR
// end ;
42216: GO 42140
42218: POP
42219: POP
42220: GO 42120
42222: POP
42223: POP
// end ;
42224: LD_VAR 0 4
42228: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42229: LD_INT 0
42231: PPUSH
42232: PPUSH
42233: PPUSH
42234: PPUSH
42235: PPUSH
42236: PPUSH
42237: PPUSH
42238: PPUSH
// if not units then
42239: LD_VAR 0 1
42243: NOT
42244: IFFALSE 42248
// exit ;
42246: GO 42673
// result := UnitFilter ( units , [ f_ok ] ) ;
42248: LD_ADDR_VAR 0 3
42252: PUSH
42253: LD_VAR 0 1
42257: PPUSH
42258: LD_INT 50
42260: PUSH
42261: EMPTY
42262: LIST
42263: PPUSH
42264: CALL_OW 72
42268: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42269: LD_ADDR_VAR 0 8
42273: PUSH
42274: LD_VAR 0 1
42278: PUSH
42279: LD_INT 1
42281: ARRAY
42282: PPUSH
42283: CALL_OW 255
42287: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
42288: LD_ADDR_VAR 0 10
42292: PUSH
42293: LD_INT 29
42295: PUSH
42296: LD_EXP 13
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: ST_TO_ADDR
// if not result then
42305: LD_VAR 0 3
42309: NOT
42310: IFFALSE 42314
// exit ;
42312: GO 42673
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42314: LD_ADDR_VAR 0 5
42318: PUSH
42319: LD_INT 81
42321: PUSH
42322: LD_VAR 0 8
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PPUSH
42331: CALL_OW 69
42335: ST_TO_ADDR
// for i in result do
42336: LD_ADDR_VAR 0 4
42340: PUSH
42341: LD_VAR 0 3
42345: PUSH
42346: FOR_IN
42347: IFFALSE 42671
// begin tag := GetTag ( i ) + 1 ;
42349: LD_ADDR_VAR 0 9
42353: PUSH
42354: LD_VAR 0 4
42358: PPUSH
42359: CALL_OW 110
42363: PUSH
42364: LD_INT 1
42366: PLUS
42367: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42368: LD_ADDR_VAR 0 7
42372: PUSH
42373: LD_VAR 0 4
42377: PPUSH
42378: CALL_OW 250
42382: PPUSH
42383: LD_VAR 0 4
42387: PPUSH
42388: CALL_OW 251
42392: PPUSH
42393: LD_INT 6
42395: PPUSH
42396: CALL 41971 0 3
42400: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42401: LD_VAR 0 7
42405: PUSH
42406: LD_VAR 0 4
42410: PPUSH
42411: CALL_OW 264
42415: PUSH
42416: LD_VAR 0 10
42420: IN
42421: NOT
42422: AND
42423: IFFALSE 42462
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42425: LD_VAR 0 4
42429: PPUSH
42430: LD_VAR 0 7
42434: PUSH
42435: LD_INT 1
42437: ARRAY
42438: PUSH
42439: LD_INT 1
42441: ARRAY
42442: PPUSH
42443: LD_VAR 0 7
42447: PUSH
42448: LD_INT 1
42450: ARRAY
42451: PUSH
42452: LD_INT 2
42454: ARRAY
42455: PPUSH
42456: CALL_OW 116
42460: GO 42669
// if path > tag then
42462: LD_VAR 0 2
42466: PUSH
42467: LD_VAR 0 9
42471: GREATER
42472: IFFALSE 42639
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
42474: LD_ADDR_VAR 0 6
42478: PUSH
42479: LD_VAR 0 5
42483: PPUSH
42484: LD_INT 91
42486: PUSH
42487: LD_VAR 0 4
42491: PUSH
42492: LD_INT 12
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: PPUSH
42500: CALL_OW 72
42504: ST_TO_ADDR
// if nearEnemy then
42505: LD_VAR 0 6
42509: IFFALSE 42537
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42511: LD_VAR 0 4
42515: PPUSH
42516: LD_VAR 0 6
42520: PPUSH
42521: LD_VAR 0 4
42525: PPUSH
42526: CALL_OW 74
42530: PPUSH
42531: CALL_OW 115
42535: GO 42637
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42537: LD_VAR 0 4
42541: PPUSH
42542: LD_VAR 0 2
42546: PUSH
42547: LD_VAR 0 9
42551: ARRAY
42552: PUSH
42553: LD_INT 1
42555: ARRAY
42556: PPUSH
42557: LD_VAR 0 2
42561: PUSH
42562: LD_VAR 0 9
42566: ARRAY
42567: PUSH
42568: LD_INT 2
42570: ARRAY
42571: PPUSH
42572: CALL_OW 297
42576: PUSH
42577: LD_INT 6
42579: GREATER
42580: IFFALSE 42623
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42582: LD_VAR 0 4
42586: PPUSH
42587: LD_VAR 0 2
42591: PUSH
42592: LD_VAR 0 9
42596: ARRAY
42597: PUSH
42598: LD_INT 1
42600: ARRAY
42601: PPUSH
42602: LD_VAR 0 2
42606: PUSH
42607: LD_VAR 0 9
42611: ARRAY
42612: PUSH
42613: LD_INT 2
42615: ARRAY
42616: PPUSH
42617: CALL_OW 114
42621: GO 42637
// SetTag ( i , tag ) ;
42623: LD_VAR 0 4
42627: PPUSH
42628: LD_VAR 0 9
42632: PPUSH
42633: CALL_OW 109
// end else
42637: GO 42669
// if enemy then
42639: LD_VAR 0 5
42643: IFFALSE 42669
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42645: LD_VAR 0 4
42649: PPUSH
42650: LD_VAR 0 5
42654: PPUSH
42655: LD_VAR 0 4
42659: PPUSH
42660: CALL_OW 74
42664: PPUSH
42665: CALL_OW 115
// end ;
42669: GO 42346
42671: POP
42672: POP
// end ;
42673: LD_VAR 0 3
42677: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42678: LD_INT 0
42680: PPUSH
42681: PPUSH
42682: PPUSH
// if not unit or IsInUnit ( unit ) then
42683: LD_VAR 0 1
42687: NOT
42688: PUSH
42689: LD_VAR 0 1
42693: PPUSH
42694: CALL_OW 310
42698: OR
42699: IFFALSE 42703
// exit ;
42701: GO 42794
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42703: LD_ADDR_VAR 0 4
42707: PUSH
42708: LD_VAR 0 1
42712: PPUSH
42713: CALL_OW 250
42717: PPUSH
42718: LD_VAR 0 2
42722: PPUSH
42723: LD_INT 1
42725: PPUSH
42726: CALL_OW 272
42730: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42731: LD_ADDR_VAR 0 5
42735: PUSH
42736: LD_VAR 0 1
42740: PPUSH
42741: CALL_OW 251
42745: PPUSH
42746: LD_VAR 0 2
42750: PPUSH
42751: LD_INT 1
42753: PPUSH
42754: CALL_OW 273
42758: ST_TO_ADDR
// if ValidHex ( x , y ) then
42759: LD_VAR 0 4
42763: PPUSH
42764: LD_VAR 0 5
42768: PPUSH
42769: CALL_OW 488
42773: IFFALSE 42794
// ComTurnXY ( unit , x , y ) ;
42775: LD_VAR 0 1
42779: PPUSH
42780: LD_VAR 0 4
42784: PPUSH
42785: LD_VAR 0 5
42789: PPUSH
42790: CALL_OW 118
// end ;
42794: LD_VAR 0 3
42798: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42799: LD_INT 0
42801: PPUSH
42802: PPUSH
// result := false ;
42803: LD_ADDR_VAR 0 3
42807: PUSH
42808: LD_INT 0
42810: ST_TO_ADDR
// if not units then
42811: LD_VAR 0 2
42815: NOT
42816: IFFALSE 42820
// exit ;
42818: GO 42865
// for i in units do
42820: LD_ADDR_VAR 0 4
42824: PUSH
42825: LD_VAR 0 2
42829: PUSH
42830: FOR_IN
42831: IFFALSE 42863
// if See ( side , i ) then
42833: LD_VAR 0 1
42837: PPUSH
42838: LD_VAR 0 4
42842: PPUSH
42843: CALL_OW 292
42847: IFFALSE 42861
// begin result := true ;
42849: LD_ADDR_VAR 0 3
42853: PUSH
42854: LD_INT 1
42856: ST_TO_ADDR
// exit ;
42857: POP
42858: POP
42859: GO 42865
// end ;
42861: GO 42830
42863: POP
42864: POP
// end ;
42865: LD_VAR 0 3
42869: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42870: LD_INT 0
42872: PPUSH
42873: PPUSH
42874: PPUSH
42875: PPUSH
// if not unit or not points then
42876: LD_VAR 0 1
42880: NOT
42881: PUSH
42882: LD_VAR 0 2
42886: NOT
42887: OR
42888: IFFALSE 42892
// exit ;
42890: GO 42982
// dist := 99999 ;
42892: LD_ADDR_VAR 0 5
42896: PUSH
42897: LD_INT 99999
42899: ST_TO_ADDR
// for i in points do
42900: LD_ADDR_VAR 0 4
42904: PUSH
42905: LD_VAR 0 2
42909: PUSH
42910: FOR_IN
42911: IFFALSE 42980
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42913: LD_ADDR_VAR 0 6
42917: PUSH
42918: LD_VAR 0 1
42922: PPUSH
42923: LD_VAR 0 4
42927: PUSH
42928: LD_INT 1
42930: ARRAY
42931: PPUSH
42932: LD_VAR 0 4
42936: PUSH
42937: LD_INT 2
42939: ARRAY
42940: PPUSH
42941: CALL_OW 297
42945: ST_TO_ADDR
// if tmpDist < dist then
42946: LD_VAR 0 6
42950: PUSH
42951: LD_VAR 0 5
42955: LESS
42956: IFFALSE 42978
// begin result := i ;
42958: LD_ADDR_VAR 0 3
42962: PUSH
42963: LD_VAR 0 4
42967: ST_TO_ADDR
// dist := tmpDist ;
42968: LD_ADDR_VAR 0 5
42972: PUSH
42973: LD_VAR 0 6
42977: ST_TO_ADDR
// end ; end ;
42978: GO 42910
42980: POP
42981: POP
// end ;
42982: LD_VAR 0 3
42986: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42987: LD_INT 0
42989: PPUSH
// uc_side := side ;
42990: LD_ADDR_OWVAR 20
42994: PUSH
42995: LD_VAR 0 1
42999: ST_TO_ADDR
// uc_nation := 3 ;
43000: LD_ADDR_OWVAR 21
43004: PUSH
43005: LD_INT 3
43007: ST_TO_ADDR
// vc_chassis := 25 ;
43008: LD_ADDR_OWVAR 37
43012: PUSH
43013: LD_INT 25
43015: ST_TO_ADDR
// vc_engine := engine_siberite ;
43016: LD_ADDR_OWVAR 39
43020: PUSH
43021: LD_INT 3
43023: ST_TO_ADDR
// vc_control := control_computer ;
43024: LD_ADDR_OWVAR 38
43028: PUSH
43029: LD_INT 3
43031: ST_TO_ADDR
// vc_weapon := 59 ;
43032: LD_ADDR_OWVAR 40
43036: PUSH
43037: LD_INT 59
43039: ST_TO_ADDR
// result := CreateVehicle ;
43040: LD_ADDR_VAR 0 5
43044: PUSH
43045: CALL_OW 45
43049: ST_TO_ADDR
// SetDir ( result , d ) ;
43050: LD_VAR 0 5
43054: PPUSH
43055: LD_VAR 0 4
43059: PPUSH
43060: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43064: LD_VAR 0 5
43068: PPUSH
43069: LD_VAR 0 2
43073: PPUSH
43074: LD_VAR 0 3
43078: PPUSH
43079: LD_INT 0
43081: PPUSH
43082: CALL_OW 48
// end ; end_of_file
43086: LD_VAR 0 5
43090: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
43091: LD_INT 0
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
43097: LD_VAR 0 1
43101: PPUSH
43102: CALL_OW 264
43106: PUSH
43107: LD_EXP 13
43111: EQUAL
43112: IFFALSE 43184
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
43114: LD_INT 68
43116: PPUSH
43117: LD_VAR 0 1
43121: PPUSH
43122: CALL_OW 255
43126: PPUSH
43127: CALL_OW 321
43131: PUSH
43132: LD_INT 2
43134: EQUAL
43135: IFFALSE 43147
// eff := 70 else
43137: LD_ADDR_VAR 0 4
43141: PUSH
43142: LD_INT 70
43144: ST_TO_ADDR
43145: GO 43155
// eff := 30 ;
43147: LD_ADDR_VAR 0 4
43151: PUSH
43152: LD_INT 30
43154: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
43155: LD_VAR 0 1
43159: PPUSH
43160: CALL_OW 250
43164: PPUSH
43165: LD_VAR 0 1
43169: PPUSH
43170: CALL_OW 251
43174: PPUSH
43175: LD_VAR 0 4
43179: PPUSH
43180: CALL_OW 495
// end ; end ;
43184: LD_VAR 0 2
43188: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
43189: LD_INT 0
43191: PPUSH
// end ;
43192: LD_VAR 0 4
43196: RET
// export function SOS_Command ( cmd ) ; begin
43197: LD_INT 0
43199: PPUSH
// end ;
43200: LD_VAR 0 2
43204: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
43205: LD_INT 0
43207: PPUSH
// end ;
43208: LD_VAR 0 6
43212: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
43213: LD_INT 0
43215: PPUSH
43216: PPUSH
// if not vehicle or not factory then
43217: LD_VAR 0 1
43221: NOT
43222: PUSH
43223: LD_VAR 0 2
43227: NOT
43228: OR
43229: IFFALSE 43233
// exit ;
43231: GO 43464
// if factoryWaypoints >= factory then
43233: LD_EXP 29
43237: PUSH
43238: LD_VAR 0 2
43242: GREATEREQUAL
43243: IFFALSE 43464
// if factoryWaypoints [ factory ] then
43245: LD_EXP 29
43249: PUSH
43250: LD_VAR 0 2
43254: ARRAY
43255: IFFALSE 43464
// begin if GetControl ( vehicle ) = control_manual then
43257: LD_VAR 0 1
43261: PPUSH
43262: CALL_OW 263
43266: PUSH
43267: LD_INT 1
43269: EQUAL
43270: IFFALSE 43351
// begin driver := IsDrivenBy ( vehicle ) ;
43272: LD_ADDR_VAR 0 4
43276: PUSH
43277: LD_VAR 0 1
43281: PPUSH
43282: CALL_OW 311
43286: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
43287: LD_VAR 0 4
43291: PPUSH
43292: LD_EXP 29
43296: PUSH
43297: LD_VAR 0 2
43301: ARRAY
43302: PUSH
43303: LD_INT 3
43305: ARRAY
43306: PPUSH
43307: LD_EXP 29
43311: PUSH
43312: LD_VAR 0 2
43316: ARRAY
43317: PUSH
43318: LD_INT 4
43320: ARRAY
43321: PPUSH
43322: CALL_OW 171
// AddComExitVehicle ( driver ) ;
43326: LD_VAR 0 4
43330: PPUSH
43331: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
43335: LD_VAR 0 4
43339: PPUSH
43340: LD_VAR 0 2
43344: PPUSH
43345: CALL_OW 180
// end else
43349: GO 43464
// if GetControl ( vehicle ) = control_remote then
43351: LD_VAR 0 1
43355: PPUSH
43356: CALL_OW 263
43360: PUSH
43361: LD_INT 2
43363: EQUAL
43364: IFFALSE 43425
// begin wait ( 0 0$2 ) ;
43366: LD_INT 70
43368: PPUSH
43369: CALL_OW 67
// if Connect ( vehicle ) then
43373: LD_VAR 0 1
43377: PPUSH
43378: CALL 10909 0 1
43382: IFFALSE 43423
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
43384: LD_VAR 0 1
43388: PPUSH
43389: LD_EXP 29
43393: PUSH
43394: LD_VAR 0 2
43398: ARRAY
43399: PUSH
43400: LD_INT 3
43402: ARRAY
43403: PPUSH
43404: LD_EXP 29
43408: PUSH
43409: LD_VAR 0 2
43413: ARRAY
43414: PUSH
43415: LD_INT 4
43417: ARRAY
43418: PPUSH
43419: CALL_OW 171
// end else
43423: GO 43464
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
43425: LD_VAR 0 1
43429: PPUSH
43430: LD_EXP 29
43434: PUSH
43435: LD_VAR 0 2
43439: ARRAY
43440: PUSH
43441: LD_INT 3
43443: ARRAY
43444: PPUSH
43445: LD_EXP 29
43449: PUSH
43450: LD_VAR 0 2
43454: ARRAY
43455: PUSH
43456: LD_INT 4
43458: ARRAY
43459: PPUSH
43460: CALL_OW 171
// end ; end ;
43464: LD_VAR 0 3
43468: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
43469: LD_INT 0
43471: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
43472: LD_VAR 0 1
43476: PUSH
43477: LD_INT 250
43479: EQUAL
43480: PUSH
43481: LD_VAR 0 2
43485: PPUSH
43486: CALL_OW 264
43490: PUSH
43491: LD_EXP 16
43495: EQUAL
43496: AND
43497: IFFALSE 43518
// MinerPlaceMine ( unit , x , y ) ;
43499: LD_VAR 0 2
43503: PPUSH
43504: LD_VAR 0 4
43508: PPUSH
43509: LD_VAR 0 5
43513: PPUSH
43514: CALL 46246 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
43518: LD_VAR 0 1
43522: PUSH
43523: LD_INT 251
43525: EQUAL
43526: PUSH
43527: LD_VAR 0 2
43531: PPUSH
43532: CALL_OW 264
43536: PUSH
43537: LD_EXP 16
43541: EQUAL
43542: AND
43543: IFFALSE 43564
// MinerDetonateMine ( unit , x , y ) ;
43545: LD_VAR 0 2
43549: PPUSH
43550: LD_VAR 0 4
43554: PPUSH
43555: LD_VAR 0 5
43559: PPUSH
43560: CALL 46523 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
43564: LD_VAR 0 1
43568: PUSH
43569: LD_INT 252
43571: EQUAL
43572: PUSH
43573: LD_VAR 0 2
43577: PPUSH
43578: CALL_OW 264
43582: PUSH
43583: LD_EXP 16
43587: EQUAL
43588: AND
43589: IFFALSE 43610
// MinerCreateMinefield ( unit , x , y ) ;
43591: LD_VAR 0 2
43595: PPUSH
43596: LD_VAR 0 4
43600: PPUSH
43601: LD_VAR 0 5
43605: PPUSH
43606: CALL 46940 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
43610: LD_VAR 0 1
43614: PUSH
43615: LD_INT 253
43617: EQUAL
43618: PUSH
43619: LD_VAR 0 2
43623: PPUSH
43624: CALL_OW 257
43628: PUSH
43629: LD_INT 5
43631: EQUAL
43632: AND
43633: IFFALSE 43654
// ComBinocular ( unit , x , y ) ;
43635: LD_VAR 0 2
43639: PPUSH
43640: LD_VAR 0 4
43644: PPUSH
43645: LD_VAR 0 5
43649: PPUSH
43650: CALL 47311 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
43654: LD_VAR 0 1
43658: PUSH
43659: LD_INT 254
43661: EQUAL
43662: PUSH
43663: LD_VAR 0 2
43667: PPUSH
43668: CALL_OW 264
43672: PUSH
43673: LD_EXP 11
43677: EQUAL
43678: AND
43679: PUSH
43680: LD_VAR 0 3
43684: PPUSH
43685: CALL_OW 263
43689: PUSH
43690: LD_INT 3
43692: EQUAL
43693: AND
43694: IFFALSE 43710
// HackDestroyVehicle ( unit , selectedUnit ) ;
43696: LD_VAR 0 2
43700: PPUSH
43701: LD_VAR 0 3
43705: PPUSH
43706: CALL 45606 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
43710: LD_VAR 0 1
43714: PUSH
43715: LD_INT 255
43717: EQUAL
43718: PUSH
43719: LD_VAR 0 2
43723: PPUSH
43724: CALL_OW 264
43728: PUSH
43729: LD_INT 14
43731: PUSH
43732: LD_INT 53
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: IN
43739: AND
43740: PUSH
43741: LD_VAR 0 4
43745: PPUSH
43746: LD_VAR 0 5
43750: PPUSH
43751: CALL_OW 488
43755: AND
43756: IFFALSE 43780
// CutTreeXYR ( unit , x , y , 12 ) ;
43758: LD_VAR 0 2
43762: PPUSH
43763: LD_VAR 0 4
43767: PPUSH
43768: LD_VAR 0 5
43772: PPUSH
43773: LD_INT 12
43775: PPUSH
43776: CALL 44172 0 4
// if cmd = 256 then
43780: LD_VAR 0 1
43784: PUSH
43785: LD_INT 256
43787: EQUAL
43788: IFFALSE 43809
// SetFactoryWaypoint ( unit , x , y ) ;
43790: LD_VAR 0 2
43794: PPUSH
43795: LD_VAR 0 4
43799: PPUSH
43800: LD_VAR 0 5
43804: PPUSH
43805: CALL 43814 0 3
// end ;
43809: LD_VAR 0 6
43813: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
43814: LD_INT 0
43816: PPUSH
43817: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
43818: LD_VAR 0 1
43822: NOT
43823: PUSH
43824: LD_VAR 0 2
43828: PPUSH
43829: LD_VAR 0 3
43833: PPUSH
43834: CALL_OW 488
43838: NOT
43839: OR
43840: PUSH
43841: LD_VAR 0 1
43845: PPUSH
43846: CALL_OW 266
43850: PUSH
43851: LD_INT 3
43853: NONEQUAL
43854: PUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: CALL_OW 247
43864: PUSH
43865: LD_INT 1
43867: EQUAL
43868: NOT
43869: AND
43870: OR
43871: IFFALSE 43875
// exit ;
43873: GO 44024
// if GetType ( factory ) = unit_human then
43875: LD_VAR 0 1
43879: PPUSH
43880: CALL_OW 247
43884: PUSH
43885: LD_INT 1
43887: EQUAL
43888: IFFALSE 43905
// factory := IsInUnit ( factory ) ;
43890: LD_ADDR_VAR 0 1
43894: PUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL_OW 310
43904: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
43905: LD_VAR 0 1
43909: PPUSH
43910: CALL_OW 266
43914: PUSH
43915: LD_INT 3
43917: NONEQUAL
43918: IFFALSE 43922
// exit ;
43920: GO 44024
// if HexInfo ( x , y ) = factory then
43922: LD_VAR 0 2
43926: PPUSH
43927: LD_VAR 0 3
43931: PPUSH
43932: CALL_OW 428
43936: PUSH
43937: LD_VAR 0 1
43941: EQUAL
43942: IFFALSE 43969
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
43944: LD_ADDR_EXP 29
43948: PUSH
43949: LD_EXP 29
43953: PPUSH
43954: LD_VAR 0 1
43958: PPUSH
43959: LD_INT 0
43961: PPUSH
43962: CALL_OW 1
43966: ST_TO_ADDR
43967: GO 44020
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
43969: LD_ADDR_EXP 29
43973: PUSH
43974: LD_EXP 29
43978: PPUSH
43979: LD_VAR 0 1
43983: PPUSH
43984: LD_VAR 0 1
43988: PPUSH
43989: CALL_OW 255
43993: PUSH
43994: LD_VAR 0 1
43998: PUSH
43999: LD_VAR 0 2
44003: PUSH
44004: LD_VAR 0 3
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: PPUSH
44015: CALL_OW 1
44019: ST_TO_ADDR
// UpdateFactoryWaypoints ;
44020: CALL 44029 0 0
// end ;
44024: LD_VAR 0 4
44028: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
44029: LD_INT 0
44031: PPUSH
44032: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
44033: LD_STRING resetFactoryWaypoint();
44035: PPUSH
44036: CALL_OW 559
// if factoryWaypoints then
44040: LD_EXP 29
44044: IFFALSE 44167
// begin for i := 1 to factoryWaypoints do
44046: LD_ADDR_VAR 0 2
44050: PUSH
44051: DOUBLE
44052: LD_INT 1
44054: DEC
44055: ST_TO_ADDR
44056: LD_EXP 29
44060: PUSH
44061: FOR_TO
44062: IFFALSE 44165
// if factoryWaypoints [ i ] then
44064: LD_EXP 29
44068: PUSH
44069: LD_VAR 0 2
44073: ARRAY
44074: IFFALSE 44163
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
44076: LD_STRING setFactoryWaypointXY(
44078: PUSH
44079: LD_EXP 29
44083: PUSH
44084: LD_VAR 0 2
44088: ARRAY
44089: PUSH
44090: LD_INT 1
44092: ARRAY
44093: STR
44094: PUSH
44095: LD_STRING ,
44097: STR
44098: PUSH
44099: LD_EXP 29
44103: PUSH
44104: LD_VAR 0 2
44108: ARRAY
44109: PUSH
44110: LD_INT 2
44112: ARRAY
44113: STR
44114: PUSH
44115: LD_STRING ,
44117: STR
44118: PUSH
44119: LD_EXP 29
44123: PUSH
44124: LD_VAR 0 2
44128: ARRAY
44129: PUSH
44130: LD_INT 3
44132: ARRAY
44133: STR
44134: PUSH
44135: LD_STRING ,
44137: STR
44138: PUSH
44139: LD_EXP 29
44143: PUSH
44144: LD_VAR 0 2
44148: ARRAY
44149: PUSH
44150: LD_INT 4
44152: ARRAY
44153: STR
44154: PUSH
44155: LD_STRING )
44157: STR
44158: PPUSH
44159: CALL_OW 559
44163: GO 44061
44165: POP
44166: POP
// end ; end ;
44167: LD_VAR 0 1
44171: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
44172: LD_INT 0
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
44179: PPUSH
44180: PPUSH
44181: PPUSH
44182: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
44183: LD_VAR 0 1
44187: NOT
44188: PUSH
44189: LD_VAR 0 2
44193: PPUSH
44194: LD_VAR 0 3
44198: PPUSH
44199: CALL_OW 488
44203: NOT
44204: OR
44205: PUSH
44206: LD_VAR 0 4
44210: NOT
44211: OR
44212: IFFALSE 44216
// exit ;
44214: GO 44556
// list := [ ] ;
44216: LD_ADDR_VAR 0 13
44220: PUSH
44221: EMPTY
44222: ST_TO_ADDR
// if x - r < 0 then
44223: LD_VAR 0 2
44227: PUSH
44228: LD_VAR 0 4
44232: MINUS
44233: PUSH
44234: LD_INT 0
44236: LESS
44237: IFFALSE 44249
// min_x := 0 else
44239: LD_ADDR_VAR 0 7
44243: PUSH
44244: LD_INT 0
44246: ST_TO_ADDR
44247: GO 44265
// min_x := x - r ;
44249: LD_ADDR_VAR 0 7
44253: PUSH
44254: LD_VAR 0 2
44258: PUSH
44259: LD_VAR 0 4
44263: MINUS
44264: ST_TO_ADDR
// if y - r < 0 then
44265: LD_VAR 0 3
44269: PUSH
44270: LD_VAR 0 4
44274: MINUS
44275: PUSH
44276: LD_INT 0
44278: LESS
44279: IFFALSE 44291
// min_y := 0 else
44281: LD_ADDR_VAR 0 8
44285: PUSH
44286: LD_INT 0
44288: ST_TO_ADDR
44289: GO 44307
// min_y := y - r ;
44291: LD_ADDR_VAR 0 8
44295: PUSH
44296: LD_VAR 0 3
44300: PUSH
44301: LD_VAR 0 4
44305: MINUS
44306: ST_TO_ADDR
// max_x := x + r ;
44307: LD_ADDR_VAR 0 9
44311: PUSH
44312: LD_VAR 0 2
44316: PUSH
44317: LD_VAR 0 4
44321: PLUS
44322: ST_TO_ADDR
// max_y := y + r ;
44323: LD_ADDR_VAR 0 10
44327: PUSH
44328: LD_VAR 0 3
44332: PUSH
44333: LD_VAR 0 4
44337: PLUS
44338: ST_TO_ADDR
// for _x = min_x to max_x do
44339: LD_ADDR_VAR 0 11
44343: PUSH
44344: DOUBLE
44345: LD_VAR 0 7
44349: DEC
44350: ST_TO_ADDR
44351: LD_VAR 0 9
44355: PUSH
44356: FOR_TO
44357: IFFALSE 44474
// for _y = min_y to max_y do
44359: LD_ADDR_VAR 0 12
44363: PUSH
44364: DOUBLE
44365: LD_VAR 0 8
44369: DEC
44370: ST_TO_ADDR
44371: LD_VAR 0 10
44375: PUSH
44376: FOR_TO
44377: IFFALSE 44470
// begin if not ValidHex ( _x , _y ) then
44379: LD_VAR 0 11
44383: PPUSH
44384: LD_VAR 0 12
44388: PPUSH
44389: CALL_OW 488
44393: NOT
44394: IFFALSE 44398
// continue ;
44396: GO 44376
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
44398: LD_VAR 0 11
44402: PPUSH
44403: LD_VAR 0 12
44407: PPUSH
44408: CALL_OW 351
44412: PUSH
44413: LD_VAR 0 11
44417: PPUSH
44418: LD_VAR 0 12
44422: PPUSH
44423: CALL_OW 554
44427: AND
44428: IFFALSE 44468
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
44430: LD_ADDR_VAR 0 13
44434: PUSH
44435: LD_VAR 0 13
44439: PPUSH
44440: LD_VAR 0 13
44444: PUSH
44445: LD_INT 1
44447: PLUS
44448: PPUSH
44449: LD_VAR 0 11
44453: PUSH
44454: LD_VAR 0 12
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PPUSH
44463: CALL_OW 2
44467: ST_TO_ADDR
// end ;
44468: GO 44376
44470: POP
44471: POP
44472: GO 44356
44474: POP
44475: POP
// if not list then
44476: LD_VAR 0 13
44480: NOT
44481: IFFALSE 44485
// exit ;
44483: GO 44556
// for i in list do
44485: LD_ADDR_VAR 0 6
44489: PUSH
44490: LD_VAR 0 13
44494: PUSH
44495: FOR_IN
44496: IFFALSE 44554
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
44498: LD_VAR 0 1
44502: PPUSH
44503: LD_STRING M
44505: PUSH
44506: LD_VAR 0 6
44510: PUSH
44511: LD_INT 1
44513: ARRAY
44514: PUSH
44515: LD_VAR 0 6
44519: PUSH
44520: LD_INT 2
44522: ARRAY
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: PPUSH
44548: CALL_OW 447
44552: GO 44495
44554: POP
44555: POP
// end ;
44556: LD_VAR 0 5
44560: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
44561: LD_EXP 30
44565: NOT
44566: IFFALSE 44616
44568: GO 44570
44570: DISABLE
// begin initHack := true ;
44571: LD_ADDR_EXP 30
44575: PUSH
44576: LD_INT 1
44578: ST_TO_ADDR
// hackTanks := [ ] ;
44579: LD_ADDR_EXP 31
44583: PUSH
44584: EMPTY
44585: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
44586: LD_ADDR_EXP 32
44590: PUSH
44591: EMPTY
44592: ST_TO_ADDR
// hackLimit := 3 ;
44593: LD_ADDR_EXP 33
44597: PUSH
44598: LD_INT 3
44600: ST_TO_ADDR
// hackDist := 12 ;
44601: LD_ADDR_EXP 34
44605: PUSH
44606: LD_INT 12
44608: ST_TO_ADDR
// hackCounter := [ ] ;
44609: LD_ADDR_EXP 35
44613: PUSH
44614: EMPTY
44615: ST_TO_ADDR
// end ;
44616: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
44617: LD_EXP 30
44621: PUSH
44622: LD_INT 34
44624: PUSH
44625: LD_EXP 11
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PPUSH
44634: CALL_OW 69
44638: AND
44639: IFFALSE 44894
44641: GO 44643
44643: DISABLE
44644: LD_INT 0
44646: PPUSH
44647: PPUSH
// begin enable ;
44648: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
44649: LD_ADDR_VAR 0 1
44653: PUSH
44654: LD_INT 34
44656: PUSH
44657: LD_EXP 11
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PPUSH
44666: CALL_OW 69
44670: PUSH
44671: FOR_IN
44672: IFFALSE 44892
// begin if not i in hackTanks then
44674: LD_VAR 0 1
44678: PUSH
44679: LD_EXP 31
44683: IN
44684: NOT
44685: IFFALSE 44768
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
44687: LD_ADDR_EXP 31
44691: PUSH
44692: LD_EXP 31
44696: PPUSH
44697: LD_EXP 31
44701: PUSH
44702: LD_INT 1
44704: PLUS
44705: PPUSH
44706: LD_VAR 0 1
44710: PPUSH
44711: CALL_OW 1
44715: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
44716: LD_ADDR_EXP 32
44720: PUSH
44721: LD_EXP 32
44725: PPUSH
44726: LD_EXP 32
44730: PUSH
44731: LD_INT 1
44733: PLUS
44734: PPUSH
44735: EMPTY
44736: PPUSH
44737: CALL_OW 1
44741: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
44742: LD_ADDR_EXP 35
44746: PUSH
44747: LD_EXP 35
44751: PPUSH
44752: LD_EXP 35
44756: PUSH
44757: LD_INT 1
44759: PLUS
44760: PPUSH
44761: EMPTY
44762: PPUSH
44763: CALL_OW 1
44767: ST_TO_ADDR
// end ; if not IsOk ( i ) then
44768: LD_VAR 0 1
44772: PPUSH
44773: CALL_OW 302
44777: NOT
44778: IFFALSE 44791
// begin HackUnlinkAll ( i ) ;
44780: LD_VAR 0 1
44784: PPUSH
44785: CALL 44897 0 1
// continue ;
44789: GO 44671
// end ; HackCheckCapturedStatus ( i ) ;
44791: LD_VAR 0 1
44795: PPUSH
44796: CALL 45340 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
44800: LD_ADDR_VAR 0 2
44804: PUSH
44805: LD_INT 81
44807: PUSH
44808: LD_VAR 0 1
44812: PPUSH
44813: CALL_OW 255
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 33
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 91
44834: PUSH
44835: LD_VAR 0 1
44839: PUSH
44840: LD_EXP 34
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 50
44852: PUSH
44853: EMPTY
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: PPUSH
44862: CALL_OW 69
44866: ST_TO_ADDR
// if not tmp then
44867: LD_VAR 0 2
44871: NOT
44872: IFFALSE 44876
// continue ;
44874: GO 44671
// HackLink ( i , tmp ) ;
44876: LD_VAR 0 1
44880: PPUSH
44881: LD_VAR 0 2
44885: PPUSH
44886: CALL 45033 0 2
// end ;
44890: GO 44671
44892: POP
44893: POP
// end ;
44894: PPOPN 2
44896: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
44897: LD_INT 0
44899: PPUSH
44900: PPUSH
44901: PPUSH
// if not hack in hackTanks then
44902: LD_VAR 0 1
44906: PUSH
44907: LD_EXP 31
44911: IN
44912: NOT
44913: IFFALSE 44917
// exit ;
44915: GO 45028
// index := GetElementIndex ( hackTanks , hack ) ;
44917: LD_ADDR_VAR 0 4
44921: PUSH
44922: LD_EXP 31
44926: PPUSH
44927: LD_VAR 0 1
44931: PPUSH
44932: CALL 7723 0 2
44936: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
44937: LD_EXP 32
44941: PUSH
44942: LD_VAR 0 4
44946: ARRAY
44947: IFFALSE 45028
// begin for i in hackTanksCaptured [ index ] do
44949: LD_ADDR_VAR 0 3
44953: PUSH
44954: LD_EXP 32
44958: PUSH
44959: LD_VAR 0 4
44963: ARRAY
44964: PUSH
44965: FOR_IN
44966: IFFALSE 44992
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
44968: LD_VAR 0 3
44972: PUSH
44973: LD_INT 1
44975: ARRAY
44976: PPUSH
44977: LD_VAR 0 3
44981: PUSH
44982: LD_INT 2
44984: ARRAY
44985: PPUSH
44986: CALL_OW 235
44990: GO 44965
44992: POP
44993: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
44994: LD_ADDR_EXP 32
44998: PUSH
44999: LD_EXP 32
45003: PPUSH
45004: LD_VAR 0 4
45008: PPUSH
45009: EMPTY
45010: PPUSH
45011: CALL_OW 1
45015: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
45016: LD_VAR 0 1
45020: PPUSH
45021: LD_INT 0
45023: PPUSH
45024: CALL_OW 505
// end ; end ;
45028: LD_VAR 0 2
45032: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
45033: LD_INT 0
45035: PPUSH
45036: PPUSH
45037: PPUSH
// if not hack in hackTanks or not vehicles then
45038: LD_VAR 0 1
45042: PUSH
45043: LD_EXP 31
45047: IN
45048: NOT
45049: PUSH
45050: LD_VAR 0 2
45054: NOT
45055: OR
45056: IFFALSE 45060
// exit ;
45058: GO 45335
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
45060: LD_ADDR_VAR 0 2
45064: PUSH
45065: LD_VAR 0 1
45069: PPUSH
45070: LD_VAR 0 2
45074: PPUSH
45075: LD_INT 1
45077: PPUSH
45078: LD_INT 1
45080: PPUSH
45081: CALL 8373 0 4
45085: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
45086: LD_ADDR_VAR 0 5
45090: PUSH
45091: LD_EXP 31
45095: PPUSH
45096: LD_VAR 0 1
45100: PPUSH
45101: CALL 7723 0 2
45105: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
45106: LD_EXP 32
45110: PUSH
45111: LD_VAR 0 5
45115: ARRAY
45116: PUSH
45117: LD_EXP 33
45121: LESS
45122: IFFALSE 45311
// begin for i := 1 to vehicles do
45124: LD_ADDR_VAR 0 4
45128: PUSH
45129: DOUBLE
45130: LD_INT 1
45132: DEC
45133: ST_TO_ADDR
45134: LD_VAR 0 2
45138: PUSH
45139: FOR_TO
45140: IFFALSE 45309
// begin if hackTanksCaptured [ index ] = hackLimit then
45142: LD_EXP 32
45146: PUSH
45147: LD_VAR 0 5
45151: ARRAY
45152: PUSH
45153: LD_EXP 33
45157: EQUAL
45158: IFFALSE 45162
// break ;
45160: GO 45309
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
45162: LD_ADDR_EXP 35
45166: PUSH
45167: LD_EXP 35
45171: PPUSH
45172: LD_VAR 0 5
45176: PPUSH
45177: LD_EXP 35
45181: PUSH
45182: LD_VAR 0 5
45186: ARRAY
45187: PUSH
45188: LD_INT 1
45190: PLUS
45191: PPUSH
45192: CALL_OW 1
45196: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
45197: LD_ADDR_EXP 32
45201: PUSH
45202: LD_EXP 32
45206: PPUSH
45207: LD_VAR 0 5
45211: PUSH
45212: LD_EXP 32
45216: PUSH
45217: LD_VAR 0 5
45221: ARRAY
45222: PUSH
45223: LD_INT 1
45225: PLUS
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PPUSH
45231: LD_VAR 0 2
45235: PUSH
45236: LD_VAR 0 4
45240: ARRAY
45241: PUSH
45242: LD_VAR 0 2
45246: PUSH
45247: LD_VAR 0 4
45251: ARRAY
45252: PPUSH
45253: CALL_OW 255
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PPUSH
45262: CALL 7938 0 3
45266: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
45267: LD_VAR 0 2
45271: PUSH
45272: LD_VAR 0 4
45276: ARRAY
45277: PPUSH
45278: LD_VAR 0 1
45282: PPUSH
45283: CALL_OW 255
45287: PPUSH
45288: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
45292: LD_VAR 0 2
45296: PUSH
45297: LD_VAR 0 4
45301: ARRAY
45302: PPUSH
45303: CALL_OW 141
// end ;
45307: GO 45139
45309: POP
45310: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
45311: LD_VAR 0 1
45315: PPUSH
45316: LD_EXP 32
45320: PUSH
45321: LD_VAR 0 5
45325: ARRAY
45326: PUSH
45327: LD_INT 0
45329: PLUS
45330: PPUSH
45331: CALL_OW 505
// end ;
45335: LD_VAR 0 3
45339: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
45340: LD_INT 0
45342: PPUSH
45343: PPUSH
45344: PPUSH
45345: PPUSH
// if not hack in hackTanks then
45346: LD_VAR 0 1
45350: PUSH
45351: LD_EXP 31
45355: IN
45356: NOT
45357: IFFALSE 45361
// exit ;
45359: GO 45601
// index := GetElementIndex ( hackTanks , hack ) ;
45361: LD_ADDR_VAR 0 4
45365: PUSH
45366: LD_EXP 31
45370: PPUSH
45371: LD_VAR 0 1
45375: PPUSH
45376: CALL 7723 0 2
45380: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
45381: LD_ADDR_VAR 0 3
45385: PUSH
45386: DOUBLE
45387: LD_EXP 32
45391: PUSH
45392: LD_VAR 0 4
45396: ARRAY
45397: INC
45398: ST_TO_ADDR
45399: LD_INT 1
45401: PUSH
45402: FOR_DOWNTO
45403: IFFALSE 45575
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
45405: LD_ADDR_VAR 0 5
45409: PUSH
45410: LD_EXP 32
45414: PUSH
45415: LD_VAR 0 4
45419: ARRAY
45420: PUSH
45421: LD_VAR 0 3
45425: ARRAY
45426: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
45427: LD_VAR 0 5
45431: PUSH
45432: LD_INT 1
45434: ARRAY
45435: PPUSH
45436: CALL_OW 302
45440: NOT
45441: PUSH
45442: LD_VAR 0 5
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PPUSH
45451: CALL_OW 255
45455: PUSH
45456: LD_VAR 0 1
45460: PPUSH
45461: CALL_OW 255
45465: NONEQUAL
45466: OR
45467: IFFALSE 45573
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
45469: LD_VAR 0 5
45473: PUSH
45474: LD_INT 1
45476: ARRAY
45477: PPUSH
45478: CALL_OW 305
45482: PUSH
45483: LD_VAR 0 5
45487: PUSH
45488: LD_INT 1
45490: ARRAY
45491: PPUSH
45492: CALL_OW 255
45496: PUSH
45497: LD_VAR 0 1
45501: PPUSH
45502: CALL_OW 255
45506: EQUAL
45507: AND
45508: IFFALSE 45532
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
45510: LD_VAR 0 5
45514: PUSH
45515: LD_INT 1
45517: ARRAY
45518: PPUSH
45519: LD_VAR 0 5
45523: PUSH
45524: LD_INT 2
45526: ARRAY
45527: PPUSH
45528: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
45532: LD_ADDR_EXP 32
45536: PUSH
45537: LD_EXP 32
45541: PPUSH
45542: LD_VAR 0 4
45546: PPUSH
45547: LD_EXP 32
45551: PUSH
45552: LD_VAR 0 4
45556: ARRAY
45557: PPUSH
45558: LD_VAR 0 3
45562: PPUSH
45563: CALL_OW 3
45567: PPUSH
45568: CALL_OW 1
45572: ST_TO_ADDR
// end ; end ;
45573: GO 45402
45575: POP
45576: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
45577: LD_VAR 0 1
45581: PPUSH
45582: LD_EXP 32
45586: PUSH
45587: LD_VAR 0 4
45591: ARRAY
45592: PUSH
45593: LD_INT 0
45595: PLUS
45596: PPUSH
45597: CALL_OW 505
// end ;
45601: LD_VAR 0 2
45605: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
45606: LD_INT 0
45608: PPUSH
45609: PPUSH
45610: PPUSH
45611: PPUSH
// if not hack in hackTanks then
45612: LD_VAR 0 1
45616: PUSH
45617: LD_EXP 31
45621: IN
45622: NOT
45623: IFFALSE 45627
// exit ;
45625: GO 45712
// index := GetElementIndex ( hackTanks , hack ) ;
45627: LD_ADDR_VAR 0 5
45631: PUSH
45632: LD_EXP 31
45636: PPUSH
45637: LD_VAR 0 1
45641: PPUSH
45642: CALL 7723 0 2
45646: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
45647: LD_ADDR_VAR 0 4
45651: PUSH
45652: DOUBLE
45653: LD_INT 1
45655: DEC
45656: ST_TO_ADDR
45657: LD_EXP 32
45661: PUSH
45662: LD_VAR 0 5
45666: ARRAY
45667: PUSH
45668: FOR_TO
45669: IFFALSE 45710
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
45671: LD_EXP 32
45675: PUSH
45676: LD_VAR 0 5
45680: ARRAY
45681: PUSH
45682: LD_VAR 0 4
45686: ARRAY
45687: PUSH
45688: LD_INT 1
45690: ARRAY
45691: PUSH
45692: LD_VAR 0 2
45696: EQUAL
45697: IFFALSE 45708
// KillUnit ( vehicle ) ;
45699: LD_VAR 0 2
45703: PPUSH
45704: CALL_OW 66
45708: GO 45668
45710: POP
45711: POP
// end ;
45712: LD_VAR 0 3
45716: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
45717: LD_EXP 36
45721: NOT
45722: IFFALSE 45757
45724: GO 45726
45726: DISABLE
// begin initMiner := true ;
45727: LD_ADDR_EXP 36
45731: PUSH
45732: LD_INT 1
45734: ST_TO_ADDR
// minersList := [ ] ;
45735: LD_ADDR_EXP 37
45739: PUSH
45740: EMPTY
45741: ST_TO_ADDR
// minerMinesList := [ ] ;
45742: LD_ADDR_EXP 38
45746: PUSH
45747: EMPTY
45748: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
45749: LD_ADDR_EXP 39
45753: PUSH
45754: LD_INT 5
45756: ST_TO_ADDR
// end ;
45757: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
45758: LD_EXP 36
45762: PUSH
45763: LD_INT 34
45765: PUSH
45766: LD_EXP 16
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PPUSH
45775: CALL_OW 69
45779: AND
45780: IFFALSE 46243
45782: GO 45784
45784: DISABLE
45785: LD_INT 0
45787: PPUSH
45788: PPUSH
45789: PPUSH
45790: PPUSH
// begin enable ;
45791: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
45792: LD_ADDR_VAR 0 1
45796: PUSH
45797: LD_INT 34
45799: PUSH
45800: LD_EXP 16
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PPUSH
45809: CALL_OW 69
45813: PUSH
45814: FOR_IN
45815: IFFALSE 45887
// begin if not i in minersList then
45817: LD_VAR 0 1
45821: PUSH
45822: LD_EXP 37
45826: IN
45827: NOT
45828: IFFALSE 45885
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
45830: LD_ADDR_EXP 37
45834: PUSH
45835: LD_EXP 37
45839: PPUSH
45840: LD_EXP 37
45844: PUSH
45845: LD_INT 1
45847: PLUS
45848: PPUSH
45849: LD_VAR 0 1
45853: PPUSH
45854: CALL_OW 1
45858: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
45859: LD_ADDR_EXP 38
45863: PUSH
45864: LD_EXP 38
45868: PPUSH
45869: LD_EXP 38
45873: PUSH
45874: LD_INT 1
45876: PLUS
45877: PPUSH
45878: EMPTY
45879: PPUSH
45880: CALL_OW 1
45884: ST_TO_ADDR
// end end ;
45885: GO 45814
45887: POP
45888: POP
// for i := minerMinesList downto 1 do
45889: LD_ADDR_VAR 0 1
45893: PUSH
45894: DOUBLE
45895: LD_EXP 38
45899: INC
45900: ST_TO_ADDR
45901: LD_INT 1
45903: PUSH
45904: FOR_DOWNTO
45905: IFFALSE 46241
// begin if IsLive ( minersList [ i ] ) then
45907: LD_EXP 37
45911: PUSH
45912: LD_VAR 0 1
45916: ARRAY
45917: PPUSH
45918: CALL_OW 300
45922: IFFALSE 45950
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
45924: LD_EXP 37
45928: PUSH
45929: LD_VAR 0 1
45933: ARRAY
45934: PPUSH
45935: LD_EXP 38
45939: PUSH
45940: LD_VAR 0 1
45944: ARRAY
45945: PPUSH
45946: CALL_OW 505
// if not minerMinesList [ i ] then
45950: LD_EXP 38
45954: PUSH
45955: LD_VAR 0 1
45959: ARRAY
45960: NOT
45961: IFFALSE 45965
// continue ;
45963: GO 45904
// for j := minerMinesList [ i ] downto 1 do
45965: LD_ADDR_VAR 0 2
45969: PUSH
45970: DOUBLE
45971: LD_EXP 38
45975: PUSH
45976: LD_VAR 0 1
45980: ARRAY
45981: INC
45982: ST_TO_ADDR
45983: LD_INT 1
45985: PUSH
45986: FOR_DOWNTO
45987: IFFALSE 46237
// begin side := GetSide ( minersList [ i ] ) ;
45989: LD_ADDR_VAR 0 3
45993: PUSH
45994: LD_EXP 37
45998: PUSH
45999: LD_VAR 0 1
46003: ARRAY
46004: PPUSH
46005: CALL_OW 255
46009: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
46010: LD_ADDR_VAR 0 4
46014: PUSH
46015: LD_EXP 38
46019: PUSH
46020: LD_VAR 0 1
46024: ARRAY
46025: PUSH
46026: LD_VAR 0 2
46030: ARRAY
46031: PUSH
46032: LD_INT 1
46034: ARRAY
46035: PPUSH
46036: LD_EXP 38
46040: PUSH
46041: LD_VAR 0 1
46045: ARRAY
46046: PUSH
46047: LD_VAR 0 2
46051: ARRAY
46052: PUSH
46053: LD_INT 2
46055: ARRAY
46056: PPUSH
46057: CALL_OW 428
46061: ST_TO_ADDR
// if not tmp then
46062: LD_VAR 0 4
46066: NOT
46067: IFFALSE 46071
// continue ;
46069: GO 45986
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
46071: LD_VAR 0 4
46075: PUSH
46076: LD_INT 81
46078: PUSH
46079: LD_VAR 0 3
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PPUSH
46088: CALL_OW 69
46092: IN
46093: PUSH
46094: LD_EXP 38
46098: PUSH
46099: LD_VAR 0 1
46103: ARRAY
46104: PUSH
46105: LD_VAR 0 2
46109: ARRAY
46110: PUSH
46111: LD_INT 1
46113: ARRAY
46114: PPUSH
46115: LD_EXP 38
46119: PUSH
46120: LD_VAR 0 1
46124: ARRAY
46125: PUSH
46126: LD_VAR 0 2
46130: ARRAY
46131: PUSH
46132: LD_INT 2
46134: ARRAY
46135: PPUSH
46136: CALL_OW 458
46140: AND
46141: IFFALSE 46235
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
46143: LD_EXP 38
46147: PUSH
46148: LD_VAR 0 1
46152: ARRAY
46153: PUSH
46154: LD_VAR 0 2
46158: ARRAY
46159: PUSH
46160: LD_INT 1
46162: ARRAY
46163: PPUSH
46164: LD_EXP 38
46168: PUSH
46169: LD_VAR 0 1
46173: ARRAY
46174: PUSH
46175: LD_VAR 0 2
46179: ARRAY
46180: PUSH
46181: LD_INT 2
46183: ARRAY
46184: PPUSH
46185: LD_VAR 0 3
46189: PPUSH
46190: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
46194: LD_ADDR_EXP 38
46198: PUSH
46199: LD_EXP 38
46203: PPUSH
46204: LD_VAR 0 1
46208: PPUSH
46209: LD_EXP 38
46213: PUSH
46214: LD_VAR 0 1
46218: ARRAY
46219: PPUSH
46220: LD_VAR 0 2
46224: PPUSH
46225: CALL_OW 3
46229: PPUSH
46230: CALL_OW 1
46234: ST_TO_ADDR
// end ; end ;
46235: GO 45986
46237: POP
46238: POP
// end ;
46239: GO 45904
46241: POP
46242: POP
// end ;
46243: PPOPN 4
46245: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
46246: LD_INT 0
46248: PPUSH
46249: PPUSH
// result := false ;
46250: LD_ADDR_VAR 0 4
46254: PUSH
46255: LD_INT 0
46257: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
46258: LD_VAR 0 1
46262: PPUSH
46263: CALL_OW 264
46267: PUSH
46268: LD_EXP 16
46272: EQUAL
46273: NOT
46274: IFFALSE 46278
// exit ;
46276: GO 46518
// index := GetElementIndex ( minersList , unit ) ;
46278: LD_ADDR_VAR 0 5
46282: PUSH
46283: LD_EXP 37
46287: PPUSH
46288: LD_VAR 0 1
46292: PPUSH
46293: CALL 7723 0 2
46297: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
46298: LD_EXP 38
46302: PUSH
46303: LD_VAR 0 5
46307: ARRAY
46308: PUSH
46309: LD_EXP 39
46313: GREATEREQUAL
46314: IFFALSE 46318
// exit ;
46316: GO 46518
// ComMoveXY ( unit , x , y ) ;
46318: LD_VAR 0 1
46322: PPUSH
46323: LD_VAR 0 2
46327: PPUSH
46328: LD_VAR 0 3
46332: PPUSH
46333: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46337: LD_INT 35
46339: PPUSH
46340: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
46344: LD_VAR 0 1
46348: PPUSH
46349: LD_VAR 0 2
46353: PPUSH
46354: LD_VAR 0 3
46358: PPUSH
46359: CALL 38442 0 3
46363: NOT
46364: PUSH
46365: LD_VAR 0 1
46369: PPUSH
46370: CALL_OW 314
46374: AND
46375: IFFALSE 46379
// exit ;
46377: GO 46518
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
46379: LD_VAR 0 2
46383: PPUSH
46384: LD_VAR 0 3
46388: PPUSH
46389: CALL_OW 428
46393: PUSH
46394: LD_VAR 0 1
46398: EQUAL
46399: PUSH
46400: LD_VAR 0 1
46404: PPUSH
46405: CALL_OW 314
46409: NOT
46410: AND
46411: IFFALSE 46337
// PlaySoundXY ( x , y , PlantMine ) ;
46413: LD_VAR 0 2
46417: PPUSH
46418: LD_VAR 0 3
46422: PPUSH
46423: LD_STRING PlantMine
46425: PPUSH
46426: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
46430: LD_VAR 0 2
46434: PPUSH
46435: LD_VAR 0 3
46439: PPUSH
46440: LD_VAR 0 1
46444: PPUSH
46445: CALL_OW 255
46449: PPUSH
46450: LD_INT 0
46452: PPUSH
46453: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
46457: LD_ADDR_EXP 38
46461: PUSH
46462: LD_EXP 38
46466: PPUSH
46467: LD_VAR 0 5
46471: PUSH
46472: LD_EXP 38
46476: PUSH
46477: LD_VAR 0 5
46481: ARRAY
46482: PUSH
46483: LD_INT 1
46485: PLUS
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PPUSH
46491: LD_VAR 0 2
46495: PUSH
46496: LD_VAR 0 3
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PPUSH
46505: CALL 7938 0 3
46509: ST_TO_ADDR
// result := true ;
46510: LD_ADDR_VAR 0 4
46514: PUSH
46515: LD_INT 1
46517: ST_TO_ADDR
// end ;
46518: LD_VAR 0 4
46522: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
46523: LD_INT 0
46525: PPUSH
46526: PPUSH
46527: PPUSH
// if not unit in minersList then
46528: LD_VAR 0 1
46532: PUSH
46533: LD_EXP 37
46537: IN
46538: NOT
46539: IFFALSE 46543
// exit ;
46541: GO 46935
// index := GetElementIndex ( minersList , unit ) ;
46543: LD_ADDR_VAR 0 6
46547: PUSH
46548: LD_EXP 37
46552: PPUSH
46553: LD_VAR 0 1
46557: PPUSH
46558: CALL 7723 0 2
46562: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
46563: LD_ADDR_VAR 0 5
46567: PUSH
46568: DOUBLE
46569: LD_EXP 38
46573: PUSH
46574: LD_VAR 0 6
46578: ARRAY
46579: INC
46580: ST_TO_ADDR
46581: LD_INT 1
46583: PUSH
46584: FOR_DOWNTO
46585: IFFALSE 46746
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
46587: LD_EXP 38
46591: PUSH
46592: LD_VAR 0 6
46596: ARRAY
46597: PUSH
46598: LD_VAR 0 5
46602: ARRAY
46603: PUSH
46604: LD_INT 1
46606: ARRAY
46607: PUSH
46608: LD_VAR 0 2
46612: EQUAL
46613: PUSH
46614: LD_EXP 38
46618: PUSH
46619: LD_VAR 0 6
46623: ARRAY
46624: PUSH
46625: LD_VAR 0 5
46629: ARRAY
46630: PUSH
46631: LD_INT 2
46633: ARRAY
46634: PUSH
46635: LD_VAR 0 3
46639: EQUAL
46640: AND
46641: IFFALSE 46744
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46643: LD_EXP 38
46647: PUSH
46648: LD_VAR 0 6
46652: ARRAY
46653: PUSH
46654: LD_VAR 0 5
46658: ARRAY
46659: PUSH
46660: LD_INT 1
46662: ARRAY
46663: PPUSH
46664: LD_EXP 38
46668: PUSH
46669: LD_VAR 0 6
46673: ARRAY
46674: PUSH
46675: LD_VAR 0 5
46679: ARRAY
46680: PUSH
46681: LD_INT 2
46683: ARRAY
46684: PPUSH
46685: LD_VAR 0 1
46689: PPUSH
46690: CALL_OW 255
46694: PPUSH
46695: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46699: LD_ADDR_EXP 38
46703: PUSH
46704: LD_EXP 38
46708: PPUSH
46709: LD_VAR 0 6
46713: PPUSH
46714: LD_EXP 38
46718: PUSH
46719: LD_VAR 0 6
46723: ARRAY
46724: PPUSH
46725: LD_VAR 0 5
46729: PPUSH
46730: CALL_OW 3
46734: PPUSH
46735: CALL_OW 1
46739: ST_TO_ADDR
// exit ;
46740: POP
46741: POP
46742: GO 46935
// end ; end ;
46744: GO 46584
46746: POP
46747: POP
// for i := minerMinesList [ index ] downto 1 do
46748: LD_ADDR_VAR 0 5
46752: PUSH
46753: DOUBLE
46754: LD_EXP 38
46758: PUSH
46759: LD_VAR 0 6
46763: ARRAY
46764: INC
46765: ST_TO_ADDR
46766: LD_INT 1
46768: PUSH
46769: FOR_DOWNTO
46770: IFFALSE 46933
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
46772: LD_EXP 38
46776: PUSH
46777: LD_VAR 0 6
46781: ARRAY
46782: PUSH
46783: LD_VAR 0 5
46787: ARRAY
46788: PUSH
46789: LD_INT 1
46791: ARRAY
46792: PPUSH
46793: LD_EXP 38
46797: PUSH
46798: LD_VAR 0 6
46802: ARRAY
46803: PUSH
46804: LD_VAR 0 5
46808: ARRAY
46809: PUSH
46810: LD_INT 2
46812: ARRAY
46813: PPUSH
46814: LD_VAR 0 2
46818: PPUSH
46819: LD_VAR 0 3
46823: PPUSH
46824: CALL_OW 298
46828: PUSH
46829: LD_INT 6
46831: LESS
46832: IFFALSE 46931
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46834: LD_EXP 38
46838: PUSH
46839: LD_VAR 0 6
46843: ARRAY
46844: PUSH
46845: LD_VAR 0 5
46849: ARRAY
46850: PUSH
46851: LD_INT 1
46853: ARRAY
46854: PPUSH
46855: LD_EXP 38
46859: PUSH
46860: LD_VAR 0 6
46864: ARRAY
46865: PUSH
46866: LD_VAR 0 5
46870: ARRAY
46871: PUSH
46872: LD_INT 2
46874: ARRAY
46875: PPUSH
46876: LD_VAR 0 1
46880: PPUSH
46881: CALL_OW 255
46885: PPUSH
46886: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46890: LD_ADDR_EXP 38
46894: PUSH
46895: LD_EXP 38
46899: PPUSH
46900: LD_VAR 0 6
46904: PPUSH
46905: LD_EXP 38
46909: PUSH
46910: LD_VAR 0 6
46914: ARRAY
46915: PPUSH
46916: LD_VAR 0 5
46920: PPUSH
46921: CALL_OW 3
46925: PPUSH
46926: CALL_OW 1
46930: ST_TO_ADDR
// end ; end ;
46931: GO 46769
46933: POP
46934: POP
// end ;
46935: LD_VAR 0 4
46939: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
46940: LD_INT 0
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
46951: LD_VAR 0 1
46955: PPUSH
46956: CALL_OW 264
46960: PUSH
46961: LD_EXP 16
46965: EQUAL
46966: NOT
46967: PUSH
46968: LD_VAR 0 1
46972: PUSH
46973: LD_EXP 37
46977: IN
46978: NOT
46979: OR
46980: IFFALSE 46984
// exit ;
46982: GO 47306
// index := GetElementIndex ( minersList , unit ) ;
46984: LD_ADDR_VAR 0 6
46988: PUSH
46989: LD_EXP 37
46993: PPUSH
46994: LD_VAR 0 1
46998: PPUSH
46999: CALL 7723 0 2
47003: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
47004: LD_ADDR_VAR 0 8
47008: PUSH
47009: LD_EXP 39
47013: PUSH
47014: LD_EXP 38
47018: PUSH
47019: LD_VAR 0 6
47023: ARRAY
47024: MINUS
47025: ST_TO_ADDR
// if not minesFreeAmount then
47026: LD_VAR 0 8
47030: NOT
47031: IFFALSE 47035
// exit ;
47033: GO 47306
// tmp := [ ] ;
47035: LD_ADDR_VAR 0 7
47039: PUSH
47040: EMPTY
47041: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
47042: LD_ADDR_VAR 0 5
47046: PUSH
47047: DOUBLE
47048: LD_INT 1
47050: DEC
47051: ST_TO_ADDR
47052: LD_VAR 0 8
47056: PUSH
47057: FOR_TO
47058: IFFALSE 47253
// begin _d := rand ( 0 , 5 ) ;
47060: LD_ADDR_VAR 0 11
47064: PUSH
47065: LD_INT 0
47067: PPUSH
47068: LD_INT 5
47070: PPUSH
47071: CALL_OW 12
47075: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
47076: LD_ADDR_VAR 0 12
47080: PUSH
47081: LD_INT 2
47083: PPUSH
47084: LD_INT 6
47086: PPUSH
47087: CALL_OW 12
47091: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
47092: LD_ADDR_VAR 0 9
47096: PUSH
47097: LD_VAR 0 2
47101: PPUSH
47102: LD_VAR 0 11
47106: PPUSH
47107: LD_VAR 0 12
47111: PPUSH
47112: CALL_OW 272
47116: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
47117: LD_ADDR_VAR 0 10
47121: PUSH
47122: LD_VAR 0 3
47126: PPUSH
47127: LD_VAR 0 11
47131: PPUSH
47132: LD_VAR 0 12
47136: PPUSH
47137: CALL_OW 273
47141: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
47142: LD_VAR 0 9
47146: PPUSH
47147: LD_VAR 0 10
47151: PPUSH
47152: CALL_OW 488
47156: PUSH
47157: LD_VAR 0 9
47161: PUSH
47162: LD_VAR 0 10
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_VAR 0 7
47175: IN
47176: NOT
47177: AND
47178: PUSH
47179: LD_VAR 0 9
47183: PPUSH
47184: LD_VAR 0 10
47188: PPUSH
47189: CALL_OW 458
47193: NOT
47194: AND
47195: IFFALSE 47237
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
47197: LD_ADDR_VAR 0 7
47201: PUSH
47202: LD_VAR 0 7
47206: PPUSH
47207: LD_VAR 0 7
47211: PUSH
47212: LD_INT 1
47214: PLUS
47215: PPUSH
47216: LD_VAR 0 9
47220: PUSH
47221: LD_VAR 0 10
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PPUSH
47230: CALL_OW 1
47234: ST_TO_ADDR
47235: GO 47251
// i := i - 1 ;
47237: LD_ADDR_VAR 0 5
47241: PUSH
47242: LD_VAR 0 5
47246: PUSH
47247: LD_INT 1
47249: MINUS
47250: ST_TO_ADDR
// end ;
47251: GO 47057
47253: POP
47254: POP
// for i in tmp do
47255: LD_ADDR_VAR 0 5
47259: PUSH
47260: LD_VAR 0 7
47264: PUSH
47265: FOR_IN
47266: IFFALSE 47304
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
47268: LD_VAR 0 1
47272: PPUSH
47273: LD_VAR 0 5
47277: PUSH
47278: LD_INT 1
47280: ARRAY
47281: PPUSH
47282: LD_VAR 0 5
47286: PUSH
47287: LD_INT 2
47289: ARRAY
47290: PPUSH
47291: CALL 46246 0 3
47295: NOT
47296: IFFALSE 47302
// exit ;
47298: POP
47299: POP
47300: GO 47306
47302: GO 47265
47304: POP
47305: POP
// end ;
47306: LD_VAR 0 4
47310: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
47311: LD_INT 0
47313: PPUSH
47314: PPUSH
47315: PPUSH
47316: PPUSH
47317: PPUSH
47318: PPUSH
47319: PPUSH
// if not GetClass ( unit ) = class_sniper then
47320: LD_VAR 0 1
47324: PPUSH
47325: CALL_OW 257
47329: PUSH
47330: LD_INT 5
47332: EQUAL
47333: NOT
47334: IFFALSE 47338
// exit ;
47336: GO 47726
// dist := 8 ;
47338: LD_ADDR_VAR 0 5
47342: PUSH
47343: LD_INT 8
47345: ST_TO_ADDR
// viewRange := 12 ;
47346: LD_ADDR_VAR 0 7
47350: PUSH
47351: LD_INT 12
47353: ST_TO_ADDR
// side := GetSide ( unit ) ;
47354: LD_ADDR_VAR 0 6
47358: PUSH
47359: LD_VAR 0 1
47363: PPUSH
47364: CALL_OW 255
47368: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
47369: LD_INT 61
47371: PPUSH
47372: LD_VAR 0 6
47376: PPUSH
47377: CALL_OW 321
47381: PUSH
47382: LD_INT 2
47384: EQUAL
47385: IFFALSE 47395
// viewRange := 16 ;
47387: LD_ADDR_VAR 0 7
47391: PUSH
47392: LD_INT 16
47394: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
47395: LD_VAR 0 1
47399: PPUSH
47400: LD_VAR 0 2
47404: PPUSH
47405: LD_VAR 0 3
47409: PPUSH
47410: CALL_OW 297
47414: PUSH
47415: LD_VAR 0 5
47419: GREATER
47420: IFFALSE 47499
// begin ComMoveXY ( unit , x , y ) ;
47422: LD_VAR 0 1
47426: PPUSH
47427: LD_VAR 0 2
47431: PPUSH
47432: LD_VAR 0 3
47436: PPUSH
47437: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47441: LD_INT 35
47443: PPUSH
47444: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
47448: LD_VAR 0 1
47452: PPUSH
47453: LD_VAR 0 2
47457: PPUSH
47458: LD_VAR 0 3
47462: PPUSH
47463: CALL 38442 0 3
47467: NOT
47468: IFFALSE 47472
// exit ;
47470: GO 47726
// until GetDistUnitXY ( unit , x , y ) < dist ;
47472: LD_VAR 0 1
47476: PPUSH
47477: LD_VAR 0 2
47481: PPUSH
47482: LD_VAR 0 3
47486: PPUSH
47487: CALL_OW 297
47491: PUSH
47492: LD_VAR 0 5
47496: LESS
47497: IFFALSE 47441
// end ; ComTurnXY ( unit , x , y ) ;
47499: LD_VAR 0 1
47503: PPUSH
47504: LD_VAR 0 2
47508: PPUSH
47509: LD_VAR 0 3
47513: PPUSH
47514: CALL_OW 118
// wait ( 5 ) ;
47518: LD_INT 5
47520: PPUSH
47521: CALL_OW 67
// _d := GetDir ( unit ) ;
47525: LD_ADDR_VAR 0 10
47529: PUSH
47530: LD_VAR 0 1
47534: PPUSH
47535: CALL_OW 254
47539: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
47540: LD_ADDR_VAR 0 8
47544: PUSH
47545: LD_VAR 0 1
47549: PPUSH
47550: CALL_OW 250
47554: PPUSH
47555: LD_VAR 0 10
47559: PPUSH
47560: LD_VAR 0 5
47564: PPUSH
47565: CALL_OW 272
47569: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
47570: LD_ADDR_VAR 0 9
47574: PUSH
47575: LD_VAR 0 1
47579: PPUSH
47580: CALL_OW 251
47584: PPUSH
47585: LD_VAR 0 10
47589: PPUSH
47590: LD_VAR 0 5
47594: PPUSH
47595: CALL_OW 273
47599: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47600: LD_VAR 0 8
47604: PPUSH
47605: LD_VAR 0 9
47609: PPUSH
47610: CALL_OW 488
47614: NOT
47615: IFFALSE 47619
// exit ;
47617: GO 47726
// ComAnimCustom ( unit , 1 ) ;
47619: LD_VAR 0 1
47623: PPUSH
47624: LD_INT 1
47626: PPUSH
47627: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
47631: LD_VAR 0 8
47635: PPUSH
47636: LD_VAR 0 9
47640: PPUSH
47641: LD_VAR 0 6
47645: PPUSH
47646: LD_VAR 0 7
47650: PPUSH
47651: CALL_OW 330
// repeat wait ( 1 ) ;
47655: LD_INT 1
47657: PPUSH
47658: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
47662: LD_VAR 0 1
47666: PPUSH
47667: CALL_OW 316
47671: PUSH
47672: LD_VAR 0 1
47676: PPUSH
47677: CALL_OW 314
47681: OR
47682: PUSH
47683: LD_VAR 0 1
47687: PPUSH
47688: CALL_OW 302
47692: NOT
47693: OR
47694: PUSH
47695: LD_VAR 0 1
47699: PPUSH
47700: CALL_OW 301
47704: OR
47705: IFFALSE 47655
// RemoveSeeing ( _x , _y , side ) ;
47707: LD_VAR 0 8
47711: PPUSH
47712: LD_VAR 0 9
47716: PPUSH
47717: LD_VAR 0 6
47721: PPUSH
47722: CALL_OW 331
// end ; end_of_file
47726: LD_VAR 0 4
47730: RET
// every 0 0$1 do
47731: GO 47733
47733: DISABLE
// begin enable ;
47734: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47735: LD_STRING updateTimer(
47737: PUSH
47738: LD_OWVAR 1
47742: STR
47743: PUSH
47744: LD_STRING );
47746: STR
47747: PPUSH
47748: CALL_OW 559
// end ;
47752: END
// export function SOS_MapStart ( ) ; begin
47753: LD_INT 0
47755: PPUSH
// if streamModeActive then
47756: LD_EXP 40
47760: IFFALSE 47769
// DefineStreamItems ( true ) ;
47762: LD_INT 1
47764: PPUSH
47765: CALL 49419 0 1
// UpdateFactoryWaypoints ( ) ;
47769: CALL 44029 0 0
// end ;
47773: LD_VAR 0 1
47777: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47778: LD_INT 0
47780: PPUSH
// if p2 = 100 then
47781: LD_VAR 0 2
47785: PUSH
47786: LD_INT 100
47788: EQUAL
47789: IFFALSE 48792
// begin if not StreamModeActive then
47791: LD_EXP 40
47795: NOT
47796: IFFALSE 47806
// StreamModeActive := true ;
47798: LD_ADDR_EXP 40
47802: PUSH
47803: LD_INT 1
47805: ST_TO_ADDR
// if p3 = 0 then
47806: LD_VAR 0 3
47810: PUSH
47811: LD_INT 0
47813: EQUAL
47814: IFFALSE 47820
// InitStreamMode ;
47816: CALL 48955 0 0
// if p3 = 1 then
47820: LD_VAR 0 3
47824: PUSH
47825: LD_INT 1
47827: EQUAL
47828: IFFALSE 47838
// sRocket := true ;
47830: LD_ADDR_EXP 45
47834: PUSH
47835: LD_INT 1
47837: ST_TO_ADDR
// if p3 = 2 then
47838: LD_VAR 0 3
47842: PUSH
47843: LD_INT 2
47845: EQUAL
47846: IFFALSE 47856
// sSpeed := true ;
47848: LD_ADDR_EXP 44
47852: PUSH
47853: LD_INT 1
47855: ST_TO_ADDR
// if p3 = 3 then
47856: LD_VAR 0 3
47860: PUSH
47861: LD_INT 3
47863: EQUAL
47864: IFFALSE 47874
// sEngine := true ;
47866: LD_ADDR_EXP 46
47870: PUSH
47871: LD_INT 1
47873: ST_TO_ADDR
// if p3 = 4 then
47874: LD_VAR 0 3
47878: PUSH
47879: LD_INT 4
47881: EQUAL
47882: IFFALSE 47892
// sSpec := true ;
47884: LD_ADDR_EXP 43
47888: PUSH
47889: LD_INT 1
47891: ST_TO_ADDR
// if p3 = 5 then
47892: LD_VAR 0 3
47896: PUSH
47897: LD_INT 5
47899: EQUAL
47900: IFFALSE 47910
// sLevel := true ;
47902: LD_ADDR_EXP 47
47906: PUSH
47907: LD_INT 1
47909: ST_TO_ADDR
// if p3 = 6 then
47910: LD_VAR 0 3
47914: PUSH
47915: LD_INT 6
47917: EQUAL
47918: IFFALSE 47928
// sArmoury := true ;
47920: LD_ADDR_EXP 48
47924: PUSH
47925: LD_INT 1
47927: ST_TO_ADDR
// if p3 = 7 then
47928: LD_VAR 0 3
47932: PUSH
47933: LD_INT 7
47935: EQUAL
47936: IFFALSE 47946
// sRadar := true ;
47938: LD_ADDR_EXP 49
47942: PUSH
47943: LD_INT 1
47945: ST_TO_ADDR
// if p3 = 8 then
47946: LD_VAR 0 3
47950: PUSH
47951: LD_INT 8
47953: EQUAL
47954: IFFALSE 47964
// sBunker := true ;
47956: LD_ADDR_EXP 50
47960: PUSH
47961: LD_INT 1
47963: ST_TO_ADDR
// if p3 = 9 then
47964: LD_VAR 0 3
47968: PUSH
47969: LD_INT 9
47971: EQUAL
47972: IFFALSE 47982
// sHack := true ;
47974: LD_ADDR_EXP 51
47978: PUSH
47979: LD_INT 1
47981: ST_TO_ADDR
// if p3 = 10 then
47982: LD_VAR 0 3
47986: PUSH
47987: LD_INT 10
47989: EQUAL
47990: IFFALSE 48000
// sFire := true ;
47992: LD_ADDR_EXP 52
47996: PUSH
47997: LD_INT 1
47999: ST_TO_ADDR
// if p3 = 11 then
48000: LD_VAR 0 3
48004: PUSH
48005: LD_INT 11
48007: EQUAL
48008: IFFALSE 48018
// sRefresh := true ;
48010: LD_ADDR_EXP 53
48014: PUSH
48015: LD_INT 1
48017: ST_TO_ADDR
// if p3 = 12 then
48018: LD_VAR 0 3
48022: PUSH
48023: LD_INT 12
48025: EQUAL
48026: IFFALSE 48036
// sExp := true ;
48028: LD_ADDR_EXP 54
48032: PUSH
48033: LD_INT 1
48035: ST_TO_ADDR
// if p3 = 13 then
48036: LD_VAR 0 3
48040: PUSH
48041: LD_INT 13
48043: EQUAL
48044: IFFALSE 48054
// sDepot := true ;
48046: LD_ADDR_EXP 55
48050: PUSH
48051: LD_INT 1
48053: ST_TO_ADDR
// if p3 = 14 then
48054: LD_VAR 0 3
48058: PUSH
48059: LD_INT 14
48061: EQUAL
48062: IFFALSE 48072
// sFlag := true ;
48064: LD_ADDR_EXP 56
48068: PUSH
48069: LD_INT 1
48071: ST_TO_ADDR
// if p3 = 15 then
48072: LD_VAR 0 3
48076: PUSH
48077: LD_INT 15
48079: EQUAL
48080: IFFALSE 48090
// sKamikadze := true ;
48082: LD_ADDR_EXP 64
48086: PUSH
48087: LD_INT 1
48089: ST_TO_ADDR
// if p3 = 16 then
48090: LD_VAR 0 3
48094: PUSH
48095: LD_INT 16
48097: EQUAL
48098: IFFALSE 48108
// sTroll := true ;
48100: LD_ADDR_EXP 65
48104: PUSH
48105: LD_INT 1
48107: ST_TO_ADDR
// if p3 = 17 then
48108: LD_VAR 0 3
48112: PUSH
48113: LD_INT 17
48115: EQUAL
48116: IFFALSE 48126
// sSlow := true ;
48118: LD_ADDR_EXP 66
48122: PUSH
48123: LD_INT 1
48125: ST_TO_ADDR
// if p3 = 18 then
48126: LD_VAR 0 3
48130: PUSH
48131: LD_INT 18
48133: EQUAL
48134: IFFALSE 48144
// sLack := true ;
48136: LD_ADDR_EXP 67
48140: PUSH
48141: LD_INT 1
48143: ST_TO_ADDR
// if p3 = 19 then
48144: LD_VAR 0 3
48148: PUSH
48149: LD_INT 19
48151: EQUAL
48152: IFFALSE 48162
// sTank := true ;
48154: LD_ADDR_EXP 69
48158: PUSH
48159: LD_INT 1
48161: ST_TO_ADDR
// if p3 = 20 then
48162: LD_VAR 0 3
48166: PUSH
48167: LD_INT 20
48169: EQUAL
48170: IFFALSE 48180
// sRemote := true ;
48172: LD_ADDR_EXP 70
48176: PUSH
48177: LD_INT 1
48179: ST_TO_ADDR
// if p3 = 21 then
48180: LD_VAR 0 3
48184: PUSH
48185: LD_INT 21
48187: EQUAL
48188: IFFALSE 48198
// sPowell := true ;
48190: LD_ADDR_EXP 71
48194: PUSH
48195: LD_INT 1
48197: ST_TO_ADDR
// if p3 = 22 then
48198: LD_VAR 0 3
48202: PUSH
48203: LD_INT 22
48205: EQUAL
48206: IFFALSE 48216
// sTeleport := true ;
48208: LD_ADDR_EXP 74
48212: PUSH
48213: LD_INT 1
48215: ST_TO_ADDR
// if p3 = 23 then
48216: LD_VAR 0 3
48220: PUSH
48221: LD_INT 23
48223: EQUAL
48224: IFFALSE 48234
// sOilTower := true ;
48226: LD_ADDR_EXP 76
48230: PUSH
48231: LD_INT 1
48233: ST_TO_ADDR
// if p3 = 24 then
48234: LD_VAR 0 3
48238: PUSH
48239: LD_INT 24
48241: EQUAL
48242: IFFALSE 48252
// sShovel := true ;
48244: LD_ADDR_EXP 77
48248: PUSH
48249: LD_INT 1
48251: ST_TO_ADDR
// if p3 = 25 then
48252: LD_VAR 0 3
48256: PUSH
48257: LD_INT 25
48259: EQUAL
48260: IFFALSE 48270
// sSheik := true ;
48262: LD_ADDR_EXP 78
48266: PUSH
48267: LD_INT 1
48269: ST_TO_ADDR
// if p3 = 26 then
48270: LD_VAR 0 3
48274: PUSH
48275: LD_INT 26
48277: EQUAL
48278: IFFALSE 48288
// sEarthquake := true ;
48280: LD_ADDR_EXP 80
48284: PUSH
48285: LD_INT 1
48287: ST_TO_ADDR
// if p3 = 27 then
48288: LD_VAR 0 3
48292: PUSH
48293: LD_INT 27
48295: EQUAL
48296: IFFALSE 48306
// sAI := true ;
48298: LD_ADDR_EXP 81
48302: PUSH
48303: LD_INT 1
48305: ST_TO_ADDR
// if p3 = 28 then
48306: LD_VAR 0 3
48310: PUSH
48311: LD_INT 28
48313: EQUAL
48314: IFFALSE 48324
// sCargo := true ;
48316: LD_ADDR_EXP 84
48320: PUSH
48321: LD_INT 1
48323: ST_TO_ADDR
// if p3 = 29 then
48324: LD_VAR 0 3
48328: PUSH
48329: LD_INT 29
48331: EQUAL
48332: IFFALSE 48342
// sDLaser := true ;
48334: LD_ADDR_EXP 85
48338: PUSH
48339: LD_INT 1
48341: ST_TO_ADDR
// if p3 = 30 then
48342: LD_VAR 0 3
48346: PUSH
48347: LD_INT 30
48349: EQUAL
48350: IFFALSE 48360
// sExchange := true ;
48352: LD_ADDR_EXP 86
48356: PUSH
48357: LD_INT 1
48359: ST_TO_ADDR
// if p3 = 31 then
48360: LD_VAR 0 3
48364: PUSH
48365: LD_INT 31
48367: EQUAL
48368: IFFALSE 48378
// sFac := true ;
48370: LD_ADDR_EXP 87
48374: PUSH
48375: LD_INT 1
48377: ST_TO_ADDR
// if p3 = 32 then
48378: LD_VAR 0 3
48382: PUSH
48383: LD_INT 32
48385: EQUAL
48386: IFFALSE 48396
// sPower := true ;
48388: LD_ADDR_EXP 88
48392: PUSH
48393: LD_INT 1
48395: ST_TO_ADDR
// if p3 = 33 then
48396: LD_VAR 0 3
48400: PUSH
48401: LD_INT 33
48403: EQUAL
48404: IFFALSE 48414
// sRandom := true ;
48406: LD_ADDR_EXP 89
48410: PUSH
48411: LD_INT 1
48413: ST_TO_ADDR
// if p3 = 34 then
48414: LD_VAR 0 3
48418: PUSH
48419: LD_INT 34
48421: EQUAL
48422: IFFALSE 48432
// sShield := true ;
48424: LD_ADDR_EXP 90
48428: PUSH
48429: LD_INT 1
48431: ST_TO_ADDR
// if p3 = 35 then
48432: LD_VAR 0 3
48436: PUSH
48437: LD_INT 35
48439: EQUAL
48440: IFFALSE 48450
// sTime := true ;
48442: LD_ADDR_EXP 91
48446: PUSH
48447: LD_INT 1
48449: ST_TO_ADDR
// if p3 = 36 then
48450: LD_VAR 0 3
48454: PUSH
48455: LD_INT 36
48457: EQUAL
48458: IFFALSE 48468
// sTools := true ;
48460: LD_ADDR_EXP 92
48464: PUSH
48465: LD_INT 1
48467: ST_TO_ADDR
// if p3 = 101 then
48468: LD_VAR 0 3
48472: PUSH
48473: LD_INT 101
48475: EQUAL
48476: IFFALSE 48486
// sSold := true ;
48478: LD_ADDR_EXP 57
48482: PUSH
48483: LD_INT 1
48485: ST_TO_ADDR
// if p3 = 102 then
48486: LD_VAR 0 3
48490: PUSH
48491: LD_INT 102
48493: EQUAL
48494: IFFALSE 48504
// sDiff := true ;
48496: LD_ADDR_EXP 58
48500: PUSH
48501: LD_INT 1
48503: ST_TO_ADDR
// if p3 = 103 then
48504: LD_VAR 0 3
48508: PUSH
48509: LD_INT 103
48511: EQUAL
48512: IFFALSE 48522
// sFog := true ;
48514: LD_ADDR_EXP 61
48518: PUSH
48519: LD_INT 1
48521: ST_TO_ADDR
// if p3 = 104 then
48522: LD_VAR 0 3
48526: PUSH
48527: LD_INT 104
48529: EQUAL
48530: IFFALSE 48540
// sReset := true ;
48532: LD_ADDR_EXP 62
48536: PUSH
48537: LD_INT 1
48539: ST_TO_ADDR
// if p3 = 105 then
48540: LD_VAR 0 3
48544: PUSH
48545: LD_INT 105
48547: EQUAL
48548: IFFALSE 48558
// sSun := true ;
48550: LD_ADDR_EXP 63
48554: PUSH
48555: LD_INT 1
48557: ST_TO_ADDR
// if p3 = 106 then
48558: LD_VAR 0 3
48562: PUSH
48563: LD_INT 106
48565: EQUAL
48566: IFFALSE 48576
// sTiger := true ;
48568: LD_ADDR_EXP 59
48572: PUSH
48573: LD_INT 1
48575: ST_TO_ADDR
// if p3 = 107 then
48576: LD_VAR 0 3
48580: PUSH
48581: LD_INT 107
48583: EQUAL
48584: IFFALSE 48594
// sBomb := true ;
48586: LD_ADDR_EXP 60
48590: PUSH
48591: LD_INT 1
48593: ST_TO_ADDR
// if p3 = 108 then
48594: LD_VAR 0 3
48598: PUSH
48599: LD_INT 108
48601: EQUAL
48602: IFFALSE 48612
// sWound := true ;
48604: LD_ADDR_EXP 68
48608: PUSH
48609: LD_INT 1
48611: ST_TO_ADDR
// if p3 = 109 then
48612: LD_VAR 0 3
48616: PUSH
48617: LD_INT 109
48619: EQUAL
48620: IFFALSE 48630
// sBetray := true ;
48622: LD_ADDR_EXP 72
48626: PUSH
48627: LD_INT 1
48629: ST_TO_ADDR
// if p3 = 110 then
48630: LD_VAR 0 3
48634: PUSH
48635: LD_INT 110
48637: EQUAL
48638: IFFALSE 48648
// sContamin := true ;
48640: LD_ADDR_EXP 73
48644: PUSH
48645: LD_INT 1
48647: ST_TO_ADDR
// if p3 = 111 then
48648: LD_VAR 0 3
48652: PUSH
48653: LD_INT 111
48655: EQUAL
48656: IFFALSE 48666
// sOil := true ;
48658: LD_ADDR_EXP 75
48662: PUSH
48663: LD_INT 1
48665: ST_TO_ADDR
// if p3 = 112 then
48666: LD_VAR 0 3
48670: PUSH
48671: LD_INT 112
48673: EQUAL
48674: IFFALSE 48684
// sStu := true ;
48676: LD_ADDR_EXP 79
48680: PUSH
48681: LD_INT 1
48683: ST_TO_ADDR
// if p3 = 113 then
48684: LD_VAR 0 3
48688: PUSH
48689: LD_INT 113
48691: EQUAL
48692: IFFALSE 48702
// sBazooka := true ;
48694: LD_ADDR_EXP 82
48698: PUSH
48699: LD_INT 1
48701: ST_TO_ADDR
// if p3 = 114 then
48702: LD_VAR 0 3
48706: PUSH
48707: LD_INT 114
48709: EQUAL
48710: IFFALSE 48720
// sMortar := true ;
48712: LD_ADDR_EXP 83
48716: PUSH
48717: LD_INT 1
48719: ST_TO_ADDR
// if p3 = 115 then
48720: LD_VAR 0 3
48724: PUSH
48725: LD_INT 115
48727: EQUAL
48728: IFFALSE 48738
// sRanger := true ;
48730: LD_ADDR_EXP 93
48734: PUSH
48735: LD_INT 1
48737: ST_TO_ADDR
// if p3 = 116 then
48738: LD_VAR 0 3
48742: PUSH
48743: LD_INT 116
48745: EQUAL
48746: IFFALSE 48756
// sComputer := true ;
48748: LD_ADDR_EXP 94
48752: PUSH
48753: LD_INT 1
48755: ST_TO_ADDR
// if p3 = 117 then
48756: LD_VAR 0 3
48760: PUSH
48761: LD_INT 117
48763: EQUAL
48764: IFFALSE 48774
// s30 := true ;
48766: LD_ADDR_EXP 95
48770: PUSH
48771: LD_INT 1
48773: ST_TO_ADDR
// if p3 = 118 then
48774: LD_VAR 0 3
48778: PUSH
48779: LD_INT 118
48781: EQUAL
48782: IFFALSE 48792
// s60 := true ;
48784: LD_ADDR_EXP 96
48788: PUSH
48789: LD_INT 1
48791: ST_TO_ADDR
// end ; if p2 = 101 then
48792: LD_VAR 0 2
48796: PUSH
48797: LD_INT 101
48799: EQUAL
48800: IFFALSE 48928
// begin case p3 of 1 :
48802: LD_VAR 0 3
48806: PUSH
48807: LD_INT 1
48809: DOUBLE
48810: EQUAL
48811: IFTRUE 48815
48813: GO 48822
48815: POP
// hHackUnlimitedResources ; 2 :
48816: CALL 61026 0 0
48820: GO 48928
48822: LD_INT 2
48824: DOUBLE
48825: EQUAL
48826: IFTRUE 48830
48828: GO 48837
48830: POP
// hHackSetLevel10 ; 3 :
48831: CALL 61159 0 0
48835: GO 48928
48837: LD_INT 3
48839: DOUBLE
48840: EQUAL
48841: IFTRUE 48845
48843: GO 48852
48845: POP
// hHackSetLevel10YourUnits ; 4 :
48846: CALL 61244 0 0
48850: GO 48928
48852: LD_INT 4
48854: DOUBLE
48855: EQUAL
48856: IFTRUE 48860
48858: GO 48867
48860: POP
// hHackInvincible ; 5 :
48861: CALL 61692 0 0
48865: GO 48928
48867: LD_INT 5
48869: DOUBLE
48870: EQUAL
48871: IFTRUE 48875
48873: GO 48882
48875: POP
// hHackInvisible ; 6 :
48876: CALL 61803 0 0
48880: GO 48928
48882: LD_INT 6
48884: DOUBLE
48885: EQUAL
48886: IFTRUE 48890
48888: GO 48897
48890: POP
// hHackChangeYourSide ; 7 :
48891: CALL 61860 0 0
48895: GO 48928
48897: LD_INT 7
48899: DOUBLE
48900: EQUAL
48901: IFTRUE 48905
48903: GO 48912
48905: POP
// hHackChangeUnitSide ; 8 :
48906: CALL 61902 0 0
48910: GO 48928
48912: LD_INT 8
48914: DOUBLE
48915: EQUAL
48916: IFTRUE 48920
48918: GO 48927
48920: POP
// hHackFog ; end ;
48921: CALL 62003 0 0
48925: GO 48928
48927: POP
// end ; end ;
48928: LD_VAR 0 7
48932: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
48933: GO 48935
48935: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
48936: LD_STRING initStreamRollete();
48938: PPUSH
48939: CALL_OW 559
// InitStreamMode ;
48943: CALL 48955 0 0
// DefineStreamItems ( false ) ;
48947: LD_INT 0
48949: PPUSH
48950: CALL 49419 0 1
// end ;
48954: END
// function InitStreamMode ; begin
48955: LD_INT 0
48957: PPUSH
// streamModeActive := false ;
48958: LD_ADDR_EXP 40
48962: PUSH
48963: LD_INT 0
48965: ST_TO_ADDR
// normalCounter := 36 ;
48966: LD_ADDR_EXP 41
48970: PUSH
48971: LD_INT 36
48973: ST_TO_ADDR
// hardcoreCounter := 18 ;
48974: LD_ADDR_EXP 42
48978: PUSH
48979: LD_INT 18
48981: ST_TO_ADDR
// sRocket := false ;
48982: LD_ADDR_EXP 45
48986: PUSH
48987: LD_INT 0
48989: ST_TO_ADDR
// sSpeed := false ;
48990: LD_ADDR_EXP 44
48994: PUSH
48995: LD_INT 0
48997: ST_TO_ADDR
// sEngine := false ;
48998: LD_ADDR_EXP 46
49002: PUSH
49003: LD_INT 0
49005: ST_TO_ADDR
// sSpec := false ;
49006: LD_ADDR_EXP 43
49010: PUSH
49011: LD_INT 0
49013: ST_TO_ADDR
// sLevel := false ;
49014: LD_ADDR_EXP 47
49018: PUSH
49019: LD_INT 0
49021: ST_TO_ADDR
// sArmoury := false ;
49022: LD_ADDR_EXP 48
49026: PUSH
49027: LD_INT 0
49029: ST_TO_ADDR
// sRadar := false ;
49030: LD_ADDR_EXP 49
49034: PUSH
49035: LD_INT 0
49037: ST_TO_ADDR
// sBunker := false ;
49038: LD_ADDR_EXP 50
49042: PUSH
49043: LD_INT 0
49045: ST_TO_ADDR
// sHack := false ;
49046: LD_ADDR_EXP 51
49050: PUSH
49051: LD_INT 0
49053: ST_TO_ADDR
// sFire := false ;
49054: LD_ADDR_EXP 52
49058: PUSH
49059: LD_INT 0
49061: ST_TO_ADDR
// sRefresh := false ;
49062: LD_ADDR_EXP 53
49066: PUSH
49067: LD_INT 0
49069: ST_TO_ADDR
// sExp := false ;
49070: LD_ADDR_EXP 54
49074: PUSH
49075: LD_INT 0
49077: ST_TO_ADDR
// sDepot := false ;
49078: LD_ADDR_EXP 55
49082: PUSH
49083: LD_INT 0
49085: ST_TO_ADDR
// sFlag := false ;
49086: LD_ADDR_EXP 56
49090: PUSH
49091: LD_INT 0
49093: ST_TO_ADDR
// sKamikadze := false ;
49094: LD_ADDR_EXP 64
49098: PUSH
49099: LD_INT 0
49101: ST_TO_ADDR
// sTroll := false ;
49102: LD_ADDR_EXP 65
49106: PUSH
49107: LD_INT 0
49109: ST_TO_ADDR
// sSlow := false ;
49110: LD_ADDR_EXP 66
49114: PUSH
49115: LD_INT 0
49117: ST_TO_ADDR
// sLack := false ;
49118: LD_ADDR_EXP 67
49122: PUSH
49123: LD_INT 0
49125: ST_TO_ADDR
// sTank := false ;
49126: LD_ADDR_EXP 69
49130: PUSH
49131: LD_INT 0
49133: ST_TO_ADDR
// sRemote := false ;
49134: LD_ADDR_EXP 70
49138: PUSH
49139: LD_INT 0
49141: ST_TO_ADDR
// sPowell := false ;
49142: LD_ADDR_EXP 71
49146: PUSH
49147: LD_INT 0
49149: ST_TO_ADDR
// sTeleport := false ;
49150: LD_ADDR_EXP 74
49154: PUSH
49155: LD_INT 0
49157: ST_TO_ADDR
// sOilTower := false ;
49158: LD_ADDR_EXP 76
49162: PUSH
49163: LD_INT 0
49165: ST_TO_ADDR
// sShovel := false ;
49166: LD_ADDR_EXP 77
49170: PUSH
49171: LD_INT 0
49173: ST_TO_ADDR
// sSheik := false ;
49174: LD_ADDR_EXP 78
49178: PUSH
49179: LD_INT 0
49181: ST_TO_ADDR
// sEarthquake := false ;
49182: LD_ADDR_EXP 80
49186: PUSH
49187: LD_INT 0
49189: ST_TO_ADDR
// sAI := false ;
49190: LD_ADDR_EXP 81
49194: PUSH
49195: LD_INT 0
49197: ST_TO_ADDR
// sCargo := false ;
49198: LD_ADDR_EXP 84
49202: PUSH
49203: LD_INT 0
49205: ST_TO_ADDR
// sDLaser := false ;
49206: LD_ADDR_EXP 85
49210: PUSH
49211: LD_INT 0
49213: ST_TO_ADDR
// sExchange := false ;
49214: LD_ADDR_EXP 86
49218: PUSH
49219: LD_INT 0
49221: ST_TO_ADDR
// sFac := false ;
49222: LD_ADDR_EXP 87
49226: PUSH
49227: LD_INT 0
49229: ST_TO_ADDR
// sPower := false ;
49230: LD_ADDR_EXP 88
49234: PUSH
49235: LD_INT 0
49237: ST_TO_ADDR
// sRandom := false ;
49238: LD_ADDR_EXP 89
49242: PUSH
49243: LD_INT 0
49245: ST_TO_ADDR
// sShield := false ;
49246: LD_ADDR_EXP 90
49250: PUSH
49251: LD_INT 0
49253: ST_TO_ADDR
// sTime := false ;
49254: LD_ADDR_EXP 91
49258: PUSH
49259: LD_INT 0
49261: ST_TO_ADDR
// sTools := false ;
49262: LD_ADDR_EXP 92
49266: PUSH
49267: LD_INT 0
49269: ST_TO_ADDR
// sSold := false ;
49270: LD_ADDR_EXP 57
49274: PUSH
49275: LD_INT 0
49277: ST_TO_ADDR
// sDiff := false ;
49278: LD_ADDR_EXP 58
49282: PUSH
49283: LD_INT 0
49285: ST_TO_ADDR
// sFog := false ;
49286: LD_ADDR_EXP 61
49290: PUSH
49291: LD_INT 0
49293: ST_TO_ADDR
// sReset := false ;
49294: LD_ADDR_EXP 62
49298: PUSH
49299: LD_INT 0
49301: ST_TO_ADDR
// sSun := false ;
49302: LD_ADDR_EXP 63
49306: PUSH
49307: LD_INT 0
49309: ST_TO_ADDR
// sTiger := false ;
49310: LD_ADDR_EXP 59
49314: PUSH
49315: LD_INT 0
49317: ST_TO_ADDR
// sBomb := false ;
49318: LD_ADDR_EXP 60
49322: PUSH
49323: LD_INT 0
49325: ST_TO_ADDR
// sWound := false ;
49326: LD_ADDR_EXP 68
49330: PUSH
49331: LD_INT 0
49333: ST_TO_ADDR
// sBetray := false ;
49334: LD_ADDR_EXP 72
49338: PUSH
49339: LD_INT 0
49341: ST_TO_ADDR
// sContamin := false ;
49342: LD_ADDR_EXP 73
49346: PUSH
49347: LD_INT 0
49349: ST_TO_ADDR
// sOil := false ;
49350: LD_ADDR_EXP 75
49354: PUSH
49355: LD_INT 0
49357: ST_TO_ADDR
// sStu := false ;
49358: LD_ADDR_EXP 79
49362: PUSH
49363: LD_INT 0
49365: ST_TO_ADDR
// sBazooka := false ;
49366: LD_ADDR_EXP 82
49370: PUSH
49371: LD_INT 0
49373: ST_TO_ADDR
// sMortar := false ;
49374: LD_ADDR_EXP 83
49378: PUSH
49379: LD_INT 0
49381: ST_TO_ADDR
// sRanger := false ;
49382: LD_ADDR_EXP 93
49386: PUSH
49387: LD_INT 0
49389: ST_TO_ADDR
// sComputer := false ;
49390: LD_ADDR_EXP 94
49394: PUSH
49395: LD_INT 0
49397: ST_TO_ADDR
// s30 := false ;
49398: LD_ADDR_EXP 95
49402: PUSH
49403: LD_INT 0
49405: ST_TO_ADDR
// s60 := false ;
49406: LD_ADDR_EXP 96
49410: PUSH
49411: LD_INT 0
49413: ST_TO_ADDR
// end ;
49414: LD_VAR 0 1
49418: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49419: LD_INT 0
49421: PPUSH
49422: PPUSH
49423: PPUSH
49424: PPUSH
49425: PPUSH
49426: PPUSH
49427: PPUSH
// result := [ ] ;
49428: LD_ADDR_VAR 0 2
49432: PUSH
49433: EMPTY
49434: ST_TO_ADDR
// if campaign_id = 1 then
49435: LD_OWVAR 69
49439: PUSH
49440: LD_INT 1
49442: EQUAL
49443: IFFALSE 52609
// begin case mission_number of 1 :
49445: LD_OWVAR 70
49449: PUSH
49450: LD_INT 1
49452: DOUBLE
49453: EQUAL
49454: IFTRUE 49458
49456: GO 49534
49458: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49459: LD_ADDR_VAR 0 2
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: LD_INT 4
49469: PUSH
49470: LD_INT 11
49472: PUSH
49473: LD_INT 12
49475: PUSH
49476: LD_INT 15
49478: PUSH
49479: LD_INT 16
49481: PUSH
49482: LD_INT 22
49484: PUSH
49485: LD_INT 23
49487: PUSH
49488: LD_INT 26
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 101
49504: PUSH
49505: LD_INT 102
49507: PUSH
49508: LD_INT 106
49510: PUSH
49511: LD_INT 116
49513: PUSH
49514: LD_INT 117
49516: PUSH
49517: LD_INT 118
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: ST_TO_ADDR
49532: GO 52607
49534: LD_INT 2
49536: DOUBLE
49537: EQUAL
49538: IFTRUE 49542
49540: GO 49626
49542: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49543: LD_ADDR_VAR 0 2
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 4
49553: PUSH
49554: LD_INT 11
49556: PUSH
49557: LD_INT 12
49559: PUSH
49560: LD_INT 15
49562: PUSH
49563: LD_INT 16
49565: PUSH
49566: LD_INT 22
49568: PUSH
49569: LD_INT 23
49571: PUSH
49572: LD_INT 26
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 101
49588: PUSH
49589: LD_INT 102
49591: PUSH
49592: LD_INT 105
49594: PUSH
49595: LD_INT 106
49597: PUSH
49598: LD_INT 108
49600: PUSH
49601: LD_INT 116
49603: PUSH
49604: LD_INT 117
49606: PUSH
49607: LD_INT 118
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: ST_TO_ADDR
49624: GO 52607
49626: LD_INT 3
49628: DOUBLE
49629: EQUAL
49630: IFTRUE 49634
49632: GO 49722
49634: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49635: LD_ADDR_VAR 0 2
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 4
49645: PUSH
49646: LD_INT 5
49648: PUSH
49649: LD_INT 11
49651: PUSH
49652: LD_INT 12
49654: PUSH
49655: LD_INT 15
49657: PUSH
49658: LD_INT 16
49660: PUSH
49661: LD_INT 22
49663: PUSH
49664: LD_INT 26
49666: PUSH
49667: LD_INT 36
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 101
49684: PUSH
49685: LD_INT 102
49687: PUSH
49688: LD_INT 105
49690: PUSH
49691: LD_INT 106
49693: PUSH
49694: LD_INT 108
49696: PUSH
49697: LD_INT 116
49699: PUSH
49700: LD_INT 117
49702: PUSH
49703: LD_INT 118
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: ST_TO_ADDR
49720: GO 52607
49722: LD_INT 4
49724: DOUBLE
49725: EQUAL
49726: IFTRUE 49730
49728: GO 49826
49730: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49731: LD_ADDR_VAR 0 2
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: LD_INT 4
49741: PUSH
49742: LD_INT 5
49744: PUSH
49745: LD_INT 8
49747: PUSH
49748: LD_INT 11
49750: PUSH
49751: LD_INT 12
49753: PUSH
49754: LD_INT 15
49756: PUSH
49757: LD_INT 16
49759: PUSH
49760: LD_INT 22
49762: PUSH
49763: LD_INT 23
49765: PUSH
49766: LD_INT 26
49768: PUSH
49769: LD_INT 36
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 101
49788: PUSH
49789: LD_INT 102
49791: PUSH
49792: LD_INT 105
49794: PUSH
49795: LD_INT 106
49797: PUSH
49798: LD_INT 108
49800: PUSH
49801: LD_INT 116
49803: PUSH
49804: LD_INT 117
49806: PUSH
49807: LD_INT 118
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: ST_TO_ADDR
49824: GO 52607
49826: LD_INT 5
49828: DOUBLE
49829: EQUAL
49830: IFTRUE 49834
49832: GO 49946
49834: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49835: LD_ADDR_VAR 0 2
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 4
49845: PUSH
49846: LD_INT 5
49848: PUSH
49849: LD_INT 6
49851: PUSH
49852: LD_INT 8
49854: PUSH
49855: LD_INT 11
49857: PUSH
49858: LD_INT 12
49860: PUSH
49861: LD_INT 15
49863: PUSH
49864: LD_INT 16
49866: PUSH
49867: LD_INT 22
49869: PUSH
49870: LD_INT 23
49872: PUSH
49873: LD_INT 25
49875: PUSH
49876: LD_INT 26
49878: PUSH
49879: LD_INT 36
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 101
49900: PUSH
49901: LD_INT 102
49903: PUSH
49904: LD_INT 105
49906: PUSH
49907: LD_INT 106
49909: PUSH
49910: LD_INT 108
49912: PUSH
49913: LD_INT 109
49915: PUSH
49916: LD_INT 112
49918: PUSH
49919: LD_INT 116
49921: PUSH
49922: LD_INT 117
49924: PUSH
49925: LD_INT 118
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: ST_TO_ADDR
49944: GO 52607
49946: LD_INT 6
49948: DOUBLE
49949: EQUAL
49950: IFTRUE 49954
49952: GO 50086
49954: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49955: LD_ADDR_VAR 0 2
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: LD_INT 4
49965: PUSH
49966: LD_INT 5
49968: PUSH
49969: LD_INT 6
49971: PUSH
49972: LD_INT 8
49974: PUSH
49975: LD_INT 11
49977: PUSH
49978: LD_INT 12
49980: PUSH
49981: LD_INT 15
49983: PUSH
49984: LD_INT 16
49986: PUSH
49987: LD_INT 20
49989: PUSH
49990: LD_INT 21
49992: PUSH
49993: LD_INT 22
49995: PUSH
49996: LD_INT 23
49998: PUSH
49999: LD_INT 25
50001: PUSH
50002: LD_INT 26
50004: PUSH
50005: LD_INT 30
50007: PUSH
50008: LD_INT 31
50010: PUSH
50011: LD_INT 32
50013: PUSH
50014: LD_INT 36
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 101
50040: PUSH
50041: LD_INT 102
50043: PUSH
50044: LD_INT 105
50046: PUSH
50047: LD_INT 106
50049: PUSH
50050: LD_INT 108
50052: PUSH
50053: LD_INT 109
50055: PUSH
50056: LD_INT 112
50058: PUSH
50059: LD_INT 116
50061: PUSH
50062: LD_INT 117
50064: PUSH
50065: LD_INT 118
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: ST_TO_ADDR
50084: GO 52607
50086: LD_INT 7
50088: DOUBLE
50089: EQUAL
50090: IFTRUE 50094
50092: GO 50206
50094: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50095: LD_ADDR_VAR 0 2
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 4
50105: PUSH
50106: LD_INT 5
50108: PUSH
50109: LD_INT 7
50111: PUSH
50112: LD_INT 11
50114: PUSH
50115: LD_INT 12
50117: PUSH
50118: LD_INT 15
50120: PUSH
50121: LD_INT 16
50123: PUSH
50124: LD_INT 20
50126: PUSH
50127: LD_INT 21
50129: PUSH
50130: LD_INT 22
50132: PUSH
50133: LD_INT 23
50135: PUSH
50136: LD_INT 25
50138: PUSH
50139: LD_INT 26
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 101
50160: PUSH
50161: LD_INT 102
50163: PUSH
50164: LD_INT 103
50166: PUSH
50167: LD_INT 105
50169: PUSH
50170: LD_INT 106
50172: PUSH
50173: LD_INT 108
50175: PUSH
50176: LD_INT 112
50178: PUSH
50179: LD_INT 116
50181: PUSH
50182: LD_INT 117
50184: PUSH
50185: LD_INT 118
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: ST_TO_ADDR
50204: GO 52607
50206: LD_INT 8
50208: DOUBLE
50209: EQUAL
50210: IFTRUE 50214
50212: GO 50354
50214: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50215: LD_ADDR_VAR 0 2
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: LD_INT 4
50225: PUSH
50226: LD_INT 5
50228: PUSH
50229: LD_INT 6
50231: PUSH
50232: LD_INT 7
50234: PUSH
50235: LD_INT 8
50237: PUSH
50238: LD_INT 11
50240: PUSH
50241: LD_INT 12
50243: PUSH
50244: LD_INT 15
50246: PUSH
50247: LD_INT 16
50249: PUSH
50250: LD_INT 20
50252: PUSH
50253: LD_INT 21
50255: PUSH
50256: LD_INT 22
50258: PUSH
50259: LD_INT 23
50261: PUSH
50262: LD_INT 25
50264: PUSH
50265: LD_INT 26
50267: PUSH
50268: LD_INT 30
50270: PUSH
50271: LD_INT 31
50273: PUSH
50274: LD_INT 32
50276: PUSH
50277: LD_INT 36
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 101
50304: PUSH
50305: LD_INT 102
50307: PUSH
50308: LD_INT 103
50310: PUSH
50311: LD_INT 105
50313: PUSH
50314: LD_INT 106
50316: PUSH
50317: LD_INT 108
50319: PUSH
50320: LD_INT 109
50322: PUSH
50323: LD_INT 112
50325: PUSH
50326: LD_INT 116
50328: PUSH
50329: LD_INT 117
50331: PUSH
50332: LD_INT 118
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: ST_TO_ADDR
50352: GO 52607
50354: LD_INT 9
50356: DOUBLE
50357: EQUAL
50358: IFTRUE 50362
50360: GO 50510
50362: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50363: LD_ADDR_VAR 0 2
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 4
50373: PUSH
50374: LD_INT 5
50376: PUSH
50377: LD_INT 6
50379: PUSH
50380: LD_INT 7
50382: PUSH
50383: LD_INT 8
50385: PUSH
50386: LD_INT 11
50388: PUSH
50389: LD_INT 12
50391: PUSH
50392: LD_INT 15
50394: PUSH
50395: LD_INT 16
50397: PUSH
50398: LD_INT 20
50400: PUSH
50401: LD_INT 21
50403: PUSH
50404: LD_INT 22
50406: PUSH
50407: LD_INT 23
50409: PUSH
50410: LD_INT 25
50412: PUSH
50413: LD_INT 26
50415: PUSH
50416: LD_INT 28
50418: PUSH
50419: LD_INT 30
50421: PUSH
50422: LD_INT 31
50424: PUSH
50425: LD_INT 32
50427: PUSH
50428: LD_INT 36
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 101
50456: PUSH
50457: LD_INT 102
50459: PUSH
50460: LD_INT 103
50462: PUSH
50463: LD_INT 105
50465: PUSH
50466: LD_INT 106
50468: PUSH
50469: LD_INT 108
50471: PUSH
50472: LD_INT 109
50474: PUSH
50475: LD_INT 112
50477: PUSH
50478: LD_INT 114
50480: PUSH
50481: LD_INT 116
50483: PUSH
50484: LD_INT 117
50486: PUSH
50487: LD_INT 118
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: ST_TO_ADDR
50508: GO 52607
50510: LD_INT 10
50512: DOUBLE
50513: EQUAL
50514: IFTRUE 50518
50516: GO 50714
50518: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50519: LD_ADDR_VAR 0 2
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: LD_INT 4
50529: PUSH
50530: LD_INT 5
50532: PUSH
50533: LD_INT 6
50535: PUSH
50536: LD_INT 7
50538: PUSH
50539: LD_INT 8
50541: PUSH
50542: LD_INT 9
50544: PUSH
50545: LD_INT 10
50547: PUSH
50548: LD_INT 11
50550: PUSH
50551: LD_INT 12
50553: PUSH
50554: LD_INT 13
50556: PUSH
50557: LD_INT 14
50559: PUSH
50560: LD_INT 15
50562: PUSH
50563: LD_INT 16
50565: PUSH
50566: LD_INT 17
50568: PUSH
50569: LD_INT 18
50571: PUSH
50572: LD_INT 19
50574: PUSH
50575: LD_INT 20
50577: PUSH
50578: LD_INT 21
50580: PUSH
50581: LD_INT 22
50583: PUSH
50584: LD_INT 23
50586: PUSH
50587: LD_INT 24
50589: PUSH
50590: LD_INT 25
50592: PUSH
50593: LD_INT 26
50595: PUSH
50596: LD_INT 28
50598: PUSH
50599: LD_INT 30
50601: PUSH
50602: LD_INT 31
50604: PUSH
50605: LD_INT 32
50607: PUSH
50608: LD_INT 36
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 101
50644: PUSH
50645: LD_INT 102
50647: PUSH
50648: LD_INT 103
50650: PUSH
50651: LD_INT 104
50653: PUSH
50654: LD_INT 105
50656: PUSH
50657: LD_INT 106
50659: PUSH
50660: LD_INT 107
50662: PUSH
50663: LD_INT 108
50665: PUSH
50666: LD_INT 109
50668: PUSH
50669: LD_INT 110
50671: PUSH
50672: LD_INT 111
50674: PUSH
50675: LD_INT 112
50677: PUSH
50678: LD_INT 114
50680: PUSH
50681: LD_INT 116
50683: PUSH
50684: LD_INT 117
50686: PUSH
50687: LD_INT 118
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: ST_TO_ADDR
50712: GO 52607
50714: LD_INT 11
50716: DOUBLE
50717: EQUAL
50718: IFTRUE 50722
50720: GO 50926
50722: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50723: LD_ADDR_VAR 0 2
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: LD_INT 3
50733: PUSH
50734: LD_INT 4
50736: PUSH
50737: LD_INT 5
50739: PUSH
50740: LD_INT 6
50742: PUSH
50743: LD_INT 7
50745: PUSH
50746: LD_INT 8
50748: PUSH
50749: LD_INT 9
50751: PUSH
50752: LD_INT 10
50754: PUSH
50755: LD_INT 11
50757: PUSH
50758: LD_INT 12
50760: PUSH
50761: LD_INT 13
50763: PUSH
50764: LD_INT 14
50766: PUSH
50767: LD_INT 15
50769: PUSH
50770: LD_INT 16
50772: PUSH
50773: LD_INT 17
50775: PUSH
50776: LD_INT 18
50778: PUSH
50779: LD_INT 19
50781: PUSH
50782: LD_INT 20
50784: PUSH
50785: LD_INT 21
50787: PUSH
50788: LD_INT 22
50790: PUSH
50791: LD_INT 23
50793: PUSH
50794: LD_INT 24
50796: PUSH
50797: LD_INT 25
50799: PUSH
50800: LD_INT 26
50802: PUSH
50803: LD_INT 28
50805: PUSH
50806: LD_INT 30
50808: PUSH
50809: LD_INT 31
50811: PUSH
50812: LD_INT 32
50814: PUSH
50815: LD_INT 34
50817: PUSH
50818: LD_INT 36
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 101
50856: PUSH
50857: LD_INT 102
50859: PUSH
50860: LD_INT 103
50862: PUSH
50863: LD_INT 104
50865: PUSH
50866: LD_INT 105
50868: PUSH
50869: LD_INT 106
50871: PUSH
50872: LD_INT 107
50874: PUSH
50875: LD_INT 108
50877: PUSH
50878: LD_INT 109
50880: PUSH
50881: LD_INT 110
50883: PUSH
50884: LD_INT 111
50886: PUSH
50887: LD_INT 112
50889: PUSH
50890: LD_INT 114
50892: PUSH
50893: LD_INT 116
50895: PUSH
50896: LD_INT 117
50898: PUSH
50899: LD_INT 118
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: ST_TO_ADDR
50924: GO 52607
50926: LD_INT 12
50928: DOUBLE
50929: EQUAL
50930: IFTRUE 50934
50932: GO 51154
50934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50935: LD_ADDR_VAR 0 2
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 3
50948: PUSH
50949: LD_INT 4
50951: PUSH
50952: LD_INT 5
50954: PUSH
50955: LD_INT 6
50957: PUSH
50958: LD_INT 7
50960: PUSH
50961: LD_INT 8
50963: PUSH
50964: LD_INT 9
50966: PUSH
50967: LD_INT 10
50969: PUSH
50970: LD_INT 11
50972: PUSH
50973: LD_INT 12
50975: PUSH
50976: LD_INT 13
50978: PUSH
50979: LD_INT 14
50981: PUSH
50982: LD_INT 15
50984: PUSH
50985: LD_INT 16
50987: PUSH
50988: LD_INT 17
50990: PUSH
50991: LD_INT 18
50993: PUSH
50994: LD_INT 19
50996: PUSH
50997: LD_INT 20
50999: PUSH
51000: LD_INT 21
51002: PUSH
51003: LD_INT 22
51005: PUSH
51006: LD_INT 23
51008: PUSH
51009: LD_INT 24
51011: PUSH
51012: LD_INT 25
51014: PUSH
51015: LD_INT 26
51017: PUSH
51018: LD_INT 27
51020: PUSH
51021: LD_INT 28
51023: PUSH
51024: LD_INT 30
51026: PUSH
51027: LD_INT 31
51029: PUSH
51030: LD_INT 32
51032: PUSH
51033: LD_INT 33
51035: PUSH
51036: LD_INT 34
51038: PUSH
51039: LD_INT 36
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 101
51080: PUSH
51081: LD_INT 102
51083: PUSH
51084: LD_INT 103
51086: PUSH
51087: LD_INT 104
51089: PUSH
51090: LD_INT 105
51092: PUSH
51093: LD_INT 106
51095: PUSH
51096: LD_INT 107
51098: PUSH
51099: LD_INT 108
51101: PUSH
51102: LD_INT 109
51104: PUSH
51105: LD_INT 110
51107: PUSH
51108: LD_INT 111
51110: PUSH
51111: LD_INT 112
51113: PUSH
51114: LD_INT 113
51116: PUSH
51117: LD_INT 114
51119: PUSH
51120: LD_INT 116
51122: PUSH
51123: LD_INT 117
51125: PUSH
51126: LD_INT 118
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: ST_TO_ADDR
51152: GO 52607
51154: LD_INT 13
51156: DOUBLE
51157: EQUAL
51158: IFTRUE 51162
51160: GO 51370
51162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51163: LD_ADDR_VAR 0 2
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: LD_INT 4
51179: PUSH
51180: LD_INT 5
51182: PUSH
51183: LD_INT 8
51185: PUSH
51186: LD_INT 9
51188: PUSH
51189: LD_INT 10
51191: PUSH
51192: LD_INT 11
51194: PUSH
51195: LD_INT 12
51197: PUSH
51198: LD_INT 14
51200: PUSH
51201: LD_INT 15
51203: PUSH
51204: LD_INT 16
51206: PUSH
51207: LD_INT 17
51209: PUSH
51210: LD_INT 18
51212: PUSH
51213: LD_INT 19
51215: PUSH
51216: LD_INT 20
51218: PUSH
51219: LD_INT 21
51221: PUSH
51222: LD_INT 22
51224: PUSH
51225: LD_INT 23
51227: PUSH
51228: LD_INT 24
51230: PUSH
51231: LD_INT 25
51233: PUSH
51234: LD_INT 26
51236: PUSH
51237: LD_INT 27
51239: PUSH
51240: LD_INT 28
51242: PUSH
51243: LD_INT 30
51245: PUSH
51246: LD_INT 31
51248: PUSH
51249: LD_INT 32
51251: PUSH
51252: LD_INT 33
51254: PUSH
51255: LD_INT 34
51257: PUSH
51258: LD_INT 36
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 101
51296: PUSH
51297: LD_INT 102
51299: PUSH
51300: LD_INT 103
51302: PUSH
51303: LD_INT 104
51305: PUSH
51306: LD_INT 105
51308: PUSH
51309: LD_INT 106
51311: PUSH
51312: LD_INT 107
51314: PUSH
51315: LD_INT 108
51317: PUSH
51318: LD_INT 109
51320: PUSH
51321: LD_INT 110
51323: PUSH
51324: LD_INT 111
51326: PUSH
51327: LD_INT 112
51329: PUSH
51330: LD_INT 113
51332: PUSH
51333: LD_INT 114
51335: PUSH
51336: LD_INT 116
51338: PUSH
51339: LD_INT 117
51341: PUSH
51342: LD_INT 118
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: ST_TO_ADDR
51368: GO 52607
51370: LD_INT 14
51372: DOUBLE
51373: EQUAL
51374: IFTRUE 51378
51376: GO 51602
51378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51379: LD_ADDR_VAR 0 2
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: LD_INT 4
51395: PUSH
51396: LD_INT 5
51398: PUSH
51399: LD_INT 6
51401: PUSH
51402: LD_INT 7
51404: PUSH
51405: LD_INT 8
51407: PUSH
51408: LD_INT 9
51410: PUSH
51411: LD_INT 10
51413: PUSH
51414: LD_INT 11
51416: PUSH
51417: LD_INT 12
51419: PUSH
51420: LD_INT 13
51422: PUSH
51423: LD_INT 14
51425: PUSH
51426: LD_INT 15
51428: PUSH
51429: LD_INT 16
51431: PUSH
51432: LD_INT 17
51434: PUSH
51435: LD_INT 18
51437: PUSH
51438: LD_INT 19
51440: PUSH
51441: LD_INT 20
51443: PUSH
51444: LD_INT 21
51446: PUSH
51447: LD_INT 22
51449: PUSH
51450: LD_INT 23
51452: PUSH
51453: LD_INT 24
51455: PUSH
51456: LD_INT 25
51458: PUSH
51459: LD_INT 26
51461: PUSH
51462: LD_INT 27
51464: PUSH
51465: LD_INT 28
51467: PUSH
51468: LD_INT 29
51470: PUSH
51471: LD_INT 30
51473: PUSH
51474: LD_INT 31
51476: PUSH
51477: LD_INT 32
51479: PUSH
51480: LD_INT 33
51482: PUSH
51483: LD_INT 34
51485: PUSH
51486: LD_INT 36
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 101
51528: PUSH
51529: LD_INT 102
51531: PUSH
51532: LD_INT 103
51534: PUSH
51535: LD_INT 104
51537: PUSH
51538: LD_INT 105
51540: PUSH
51541: LD_INT 106
51543: PUSH
51544: LD_INT 107
51546: PUSH
51547: LD_INT 108
51549: PUSH
51550: LD_INT 109
51552: PUSH
51553: LD_INT 110
51555: PUSH
51556: LD_INT 111
51558: PUSH
51559: LD_INT 112
51561: PUSH
51562: LD_INT 113
51564: PUSH
51565: LD_INT 114
51567: PUSH
51568: LD_INT 116
51570: PUSH
51571: LD_INT 117
51573: PUSH
51574: LD_INT 118
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: ST_TO_ADDR
51600: GO 52607
51602: LD_INT 15
51604: DOUBLE
51605: EQUAL
51606: IFTRUE 51610
51608: GO 51834
51610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51611: LD_ADDR_VAR 0 2
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: LD_INT 3
51624: PUSH
51625: LD_INT 4
51627: PUSH
51628: LD_INT 5
51630: PUSH
51631: LD_INT 6
51633: PUSH
51634: LD_INT 7
51636: PUSH
51637: LD_INT 8
51639: PUSH
51640: LD_INT 9
51642: PUSH
51643: LD_INT 10
51645: PUSH
51646: LD_INT 11
51648: PUSH
51649: LD_INT 12
51651: PUSH
51652: LD_INT 13
51654: PUSH
51655: LD_INT 14
51657: PUSH
51658: LD_INT 15
51660: PUSH
51661: LD_INT 16
51663: PUSH
51664: LD_INT 17
51666: PUSH
51667: LD_INT 18
51669: PUSH
51670: LD_INT 19
51672: PUSH
51673: LD_INT 20
51675: PUSH
51676: LD_INT 21
51678: PUSH
51679: LD_INT 22
51681: PUSH
51682: LD_INT 23
51684: PUSH
51685: LD_INT 24
51687: PUSH
51688: LD_INT 25
51690: PUSH
51691: LD_INT 26
51693: PUSH
51694: LD_INT 27
51696: PUSH
51697: LD_INT 28
51699: PUSH
51700: LD_INT 29
51702: PUSH
51703: LD_INT 30
51705: PUSH
51706: LD_INT 31
51708: PUSH
51709: LD_INT 32
51711: PUSH
51712: LD_INT 33
51714: PUSH
51715: LD_INT 34
51717: PUSH
51718: LD_INT 36
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 101
51760: PUSH
51761: LD_INT 102
51763: PUSH
51764: LD_INT 103
51766: PUSH
51767: LD_INT 104
51769: PUSH
51770: LD_INT 105
51772: PUSH
51773: LD_INT 106
51775: PUSH
51776: LD_INT 107
51778: PUSH
51779: LD_INT 108
51781: PUSH
51782: LD_INT 109
51784: PUSH
51785: LD_INT 110
51787: PUSH
51788: LD_INT 111
51790: PUSH
51791: LD_INT 112
51793: PUSH
51794: LD_INT 113
51796: PUSH
51797: LD_INT 114
51799: PUSH
51800: LD_INT 116
51802: PUSH
51803: LD_INT 117
51805: PUSH
51806: LD_INT 118
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: ST_TO_ADDR
51832: GO 52607
51834: LD_INT 16
51836: DOUBLE
51837: EQUAL
51838: IFTRUE 51842
51840: GO 51978
51842: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51843: LD_ADDR_VAR 0 2
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: LD_INT 4
51853: PUSH
51854: LD_INT 5
51856: PUSH
51857: LD_INT 7
51859: PUSH
51860: LD_INT 11
51862: PUSH
51863: LD_INT 12
51865: PUSH
51866: LD_INT 15
51868: PUSH
51869: LD_INT 16
51871: PUSH
51872: LD_INT 20
51874: PUSH
51875: LD_INT 21
51877: PUSH
51878: LD_INT 22
51880: PUSH
51881: LD_INT 23
51883: PUSH
51884: LD_INT 25
51886: PUSH
51887: LD_INT 26
51889: PUSH
51890: LD_INT 30
51892: PUSH
51893: LD_INT 31
51895: PUSH
51896: LD_INT 32
51898: PUSH
51899: LD_INT 33
51901: PUSH
51902: LD_INT 34
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 101
51928: PUSH
51929: LD_INT 102
51931: PUSH
51932: LD_INT 103
51934: PUSH
51935: LD_INT 106
51937: PUSH
51938: LD_INT 108
51940: PUSH
51941: LD_INT 112
51943: PUSH
51944: LD_INT 113
51946: PUSH
51947: LD_INT 114
51949: PUSH
51950: LD_INT 116
51952: PUSH
51953: LD_INT 117
51955: PUSH
51956: LD_INT 118
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: ST_TO_ADDR
51976: GO 52607
51978: LD_INT 17
51980: DOUBLE
51981: EQUAL
51982: IFTRUE 51986
51984: GO 52210
51986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51987: LD_ADDR_VAR 0 2
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: LD_INT 4
52003: PUSH
52004: LD_INT 5
52006: PUSH
52007: LD_INT 6
52009: PUSH
52010: LD_INT 7
52012: PUSH
52013: LD_INT 8
52015: PUSH
52016: LD_INT 9
52018: PUSH
52019: LD_INT 10
52021: PUSH
52022: LD_INT 11
52024: PUSH
52025: LD_INT 12
52027: PUSH
52028: LD_INT 13
52030: PUSH
52031: LD_INT 14
52033: PUSH
52034: LD_INT 15
52036: PUSH
52037: LD_INT 16
52039: PUSH
52040: LD_INT 17
52042: PUSH
52043: LD_INT 18
52045: PUSH
52046: LD_INT 19
52048: PUSH
52049: LD_INT 20
52051: PUSH
52052: LD_INT 21
52054: PUSH
52055: LD_INT 22
52057: PUSH
52058: LD_INT 23
52060: PUSH
52061: LD_INT 24
52063: PUSH
52064: LD_INT 25
52066: PUSH
52067: LD_INT 26
52069: PUSH
52070: LD_INT 27
52072: PUSH
52073: LD_INT 28
52075: PUSH
52076: LD_INT 29
52078: PUSH
52079: LD_INT 30
52081: PUSH
52082: LD_INT 31
52084: PUSH
52085: LD_INT 32
52087: PUSH
52088: LD_INT 33
52090: PUSH
52091: LD_INT 34
52093: PUSH
52094: LD_INT 36
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 101
52136: PUSH
52137: LD_INT 102
52139: PUSH
52140: LD_INT 103
52142: PUSH
52143: LD_INT 104
52145: PUSH
52146: LD_INT 105
52148: PUSH
52149: LD_INT 106
52151: PUSH
52152: LD_INT 107
52154: PUSH
52155: LD_INT 108
52157: PUSH
52158: LD_INT 109
52160: PUSH
52161: LD_INT 110
52163: PUSH
52164: LD_INT 111
52166: PUSH
52167: LD_INT 112
52169: PUSH
52170: LD_INT 113
52172: PUSH
52173: LD_INT 114
52175: PUSH
52176: LD_INT 116
52178: PUSH
52179: LD_INT 117
52181: PUSH
52182: LD_INT 118
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: ST_TO_ADDR
52208: GO 52607
52210: LD_INT 18
52212: DOUBLE
52213: EQUAL
52214: IFTRUE 52218
52216: GO 52366
52218: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52219: LD_ADDR_VAR 0 2
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: LD_INT 4
52229: PUSH
52230: LD_INT 5
52232: PUSH
52233: LD_INT 7
52235: PUSH
52236: LD_INT 11
52238: PUSH
52239: LD_INT 12
52241: PUSH
52242: LD_INT 15
52244: PUSH
52245: LD_INT 16
52247: PUSH
52248: LD_INT 20
52250: PUSH
52251: LD_INT 21
52253: PUSH
52254: LD_INT 22
52256: PUSH
52257: LD_INT 23
52259: PUSH
52260: LD_INT 25
52262: PUSH
52263: LD_INT 26
52265: PUSH
52266: LD_INT 30
52268: PUSH
52269: LD_INT 31
52271: PUSH
52272: LD_INT 32
52274: PUSH
52275: LD_INT 33
52277: PUSH
52278: LD_INT 34
52280: PUSH
52281: LD_INT 35
52283: PUSH
52284: LD_INT 36
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 101
52312: PUSH
52313: LD_INT 102
52315: PUSH
52316: LD_INT 103
52318: PUSH
52319: LD_INT 106
52321: PUSH
52322: LD_INT 108
52324: PUSH
52325: LD_INT 112
52327: PUSH
52328: LD_INT 113
52330: PUSH
52331: LD_INT 114
52333: PUSH
52334: LD_INT 115
52336: PUSH
52337: LD_INT 116
52339: PUSH
52340: LD_INT 117
52342: PUSH
52343: LD_INT 118
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: ST_TO_ADDR
52364: GO 52607
52366: LD_INT 19
52368: DOUBLE
52369: EQUAL
52370: IFTRUE 52374
52372: GO 52606
52374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52375: LD_ADDR_VAR 0 2
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: LD_INT 3
52388: PUSH
52389: LD_INT 4
52391: PUSH
52392: LD_INT 5
52394: PUSH
52395: LD_INT 6
52397: PUSH
52398: LD_INT 7
52400: PUSH
52401: LD_INT 8
52403: PUSH
52404: LD_INT 9
52406: PUSH
52407: LD_INT 10
52409: PUSH
52410: LD_INT 11
52412: PUSH
52413: LD_INT 12
52415: PUSH
52416: LD_INT 13
52418: PUSH
52419: LD_INT 14
52421: PUSH
52422: LD_INT 15
52424: PUSH
52425: LD_INT 16
52427: PUSH
52428: LD_INT 17
52430: PUSH
52431: LD_INT 18
52433: PUSH
52434: LD_INT 19
52436: PUSH
52437: LD_INT 20
52439: PUSH
52440: LD_INT 21
52442: PUSH
52443: LD_INT 22
52445: PUSH
52446: LD_INT 23
52448: PUSH
52449: LD_INT 24
52451: PUSH
52452: LD_INT 25
52454: PUSH
52455: LD_INT 26
52457: PUSH
52458: LD_INT 27
52460: PUSH
52461: LD_INT 28
52463: PUSH
52464: LD_INT 29
52466: PUSH
52467: LD_INT 30
52469: PUSH
52470: LD_INT 31
52472: PUSH
52473: LD_INT 32
52475: PUSH
52476: LD_INT 33
52478: PUSH
52479: LD_INT 34
52481: PUSH
52482: LD_INT 35
52484: PUSH
52485: LD_INT 36
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 101
52528: PUSH
52529: LD_INT 102
52531: PUSH
52532: LD_INT 103
52534: PUSH
52535: LD_INT 104
52537: PUSH
52538: LD_INT 105
52540: PUSH
52541: LD_INT 106
52543: PUSH
52544: LD_INT 107
52546: PUSH
52547: LD_INT 108
52549: PUSH
52550: LD_INT 109
52552: PUSH
52553: LD_INT 110
52555: PUSH
52556: LD_INT 111
52558: PUSH
52559: LD_INT 112
52561: PUSH
52562: LD_INT 113
52564: PUSH
52565: LD_INT 114
52567: PUSH
52568: LD_INT 115
52570: PUSH
52571: LD_INT 116
52573: PUSH
52574: LD_INT 117
52576: PUSH
52577: LD_INT 118
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: ST_TO_ADDR
52604: GO 52607
52606: POP
// end else
52607: GO 52838
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52609: LD_ADDR_VAR 0 2
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: LD_INT 3
52622: PUSH
52623: LD_INT 4
52625: PUSH
52626: LD_INT 5
52628: PUSH
52629: LD_INT 6
52631: PUSH
52632: LD_INT 7
52634: PUSH
52635: LD_INT 8
52637: PUSH
52638: LD_INT 9
52640: PUSH
52641: LD_INT 10
52643: PUSH
52644: LD_INT 11
52646: PUSH
52647: LD_INT 12
52649: PUSH
52650: LD_INT 13
52652: PUSH
52653: LD_INT 14
52655: PUSH
52656: LD_INT 15
52658: PUSH
52659: LD_INT 16
52661: PUSH
52662: LD_INT 17
52664: PUSH
52665: LD_INT 18
52667: PUSH
52668: LD_INT 19
52670: PUSH
52671: LD_INT 20
52673: PUSH
52674: LD_INT 21
52676: PUSH
52677: LD_INT 22
52679: PUSH
52680: LD_INT 23
52682: PUSH
52683: LD_INT 24
52685: PUSH
52686: LD_INT 25
52688: PUSH
52689: LD_INT 26
52691: PUSH
52692: LD_INT 27
52694: PUSH
52695: LD_INT 28
52697: PUSH
52698: LD_INT 29
52700: PUSH
52701: LD_INT 30
52703: PUSH
52704: LD_INT 31
52706: PUSH
52707: LD_INT 32
52709: PUSH
52710: LD_INT 33
52712: PUSH
52713: LD_INT 34
52715: PUSH
52716: LD_INT 35
52718: PUSH
52719: LD_INT 36
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 101
52762: PUSH
52763: LD_INT 102
52765: PUSH
52766: LD_INT 103
52768: PUSH
52769: LD_INT 104
52771: PUSH
52772: LD_INT 105
52774: PUSH
52775: LD_INT 106
52777: PUSH
52778: LD_INT 107
52780: PUSH
52781: LD_INT 108
52783: PUSH
52784: LD_INT 109
52786: PUSH
52787: LD_INT 110
52789: PUSH
52790: LD_INT 111
52792: PUSH
52793: LD_INT 112
52795: PUSH
52796: LD_INT 113
52798: PUSH
52799: LD_INT 114
52801: PUSH
52802: LD_INT 115
52804: PUSH
52805: LD_INT 116
52807: PUSH
52808: LD_INT 117
52810: PUSH
52811: LD_INT 118
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: ST_TO_ADDR
// if result then
52838: LD_VAR 0 2
52842: IFFALSE 53628
// begin normal :=  ;
52844: LD_ADDR_VAR 0 5
52848: PUSH
52849: LD_STRING 
52851: ST_TO_ADDR
// hardcore :=  ;
52852: LD_ADDR_VAR 0 6
52856: PUSH
52857: LD_STRING 
52859: ST_TO_ADDR
// active :=  ;
52860: LD_ADDR_VAR 0 7
52864: PUSH
52865: LD_STRING 
52867: ST_TO_ADDR
// for i = 1 to normalCounter do
52868: LD_ADDR_VAR 0 8
52872: PUSH
52873: DOUBLE
52874: LD_INT 1
52876: DEC
52877: ST_TO_ADDR
52878: LD_EXP 41
52882: PUSH
52883: FOR_TO
52884: IFFALSE 52985
// begin tmp := 0 ;
52886: LD_ADDR_VAR 0 3
52890: PUSH
52891: LD_STRING 0
52893: ST_TO_ADDR
// if result [ 1 ] then
52894: LD_VAR 0 2
52898: PUSH
52899: LD_INT 1
52901: ARRAY
52902: IFFALSE 52967
// if result [ 1 ] [ 1 ] = i then
52904: LD_VAR 0 2
52908: PUSH
52909: LD_INT 1
52911: ARRAY
52912: PUSH
52913: LD_INT 1
52915: ARRAY
52916: PUSH
52917: LD_VAR 0 8
52921: EQUAL
52922: IFFALSE 52967
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52924: LD_ADDR_VAR 0 2
52928: PUSH
52929: LD_VAR 0 2
52933: PPUSH
52934: LD_INT 1
52936: PPUSH
52937: LD_VAR 0 2
52941: PUSH
52942: LD_INT 1
52944: ARRAY
52945: PPUSH
52946: LD_INT 1
52948: PPUSH
52949: CALL_OW 3
52953: PPUSH
52954: CALL_OW 1
52958: ST_TO_ADDR
// tmp := 1 ;
52959: LD_ADDR_VAR 0 3
52963: PUSH
52964: LD_STRING 1
52966: ST_TO_ADDR
// end ; normal := normal & tmp ;
52967: LD_ADDR_VAR 0 5
52971: PUSH
52972: LD_VAR 0 5
52976: PUSH
52977: LD_VAR 0 3
52981: STR
52982: ST_TO_ADDR
// end ;
52983: GO 52883
52985: POP
52986: POP
// for i = 1 to hardcoreCounter do
52987: LD_ADDR_VAR 0 8
52991: PUSH
52992: DOUBLE
52993: LD_INT 1
52995: DEC
52996: ST_TO_ADDR
52997: LD_EXP 42
53001: PUSH
53002: FOR_TO
53003: IFFALSE 53108
// begin tmp := 0 ;
53005: LD_ADDR_VAR 0 3
53009: PUSH
53010: LD_STRING 0
53012: ST_TO_ADDR
// if result [ 2 ] then
53013: LD_VAR 0 2
53017: PUSH
53018: LD_INT 2
53020: ARRAY
53021: IFFALSE 53090
// if result [ 2 ] [ 1 ] = 100 + i then
53023: LD_VAR 0 2
53027: PUSH
53028: LD_INT 2
53030: ARRAY
53031: PUSH
53032: LD_INT 1
53034: ARRAY
53035: PUSH
53036: LD_INT 100
53038: PUSH
53039: LD_VAR 0 8
53043: PLUS
53044: EQUAL
53045: IFFALSE 53090
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53047: LD_ADDR_VAR 0 2
53051: PUSH
53052: LD_VAR 0 2
53056: PPUSH
53057: LD_INT 2
53059: PPUSH
53060: LD_VAR 0 2
53064: PUSH
53065: LD_INT 2
53067: ARRAY
53068: PPUSH
53069: LD_INT 1
53071: PPUSH
53072: CALL_OW 3
53076: PPUSH
53077: CALL_OW 1
53081: ST_TO_ADDR
// tmp := 1 ;
53082: LD_ADDR_VAR 0 3
53086: PUSH
53087: LD_STRING 1
53089: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53090: LD_ADDR_VAR 0 6
53094: PUSH
53095: LD_VAR 0 6
53099: PUSH
53100: LD_VAR 0 3
53104: STR
53105: ST_TO_ADDR
// end ;
53106: GO 53002
53108: POP
53109: POP
// if isGameLoad then
53110: LD_VAR 0 1
53114: IFFALSE 53589
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53116: LD_ADDR_VAR 0 4
53120: PUSH
53121: LD_EXP 45
53125: PUSH
53126: LD_EXP 44
53130: PUSH
53131: LD_EXP 46
53135: PUSH
53136: LD_EXP 43
53140: PUSH
53141: LD_EXP 47
53145: PUSH
53146: LD_EXP 48
53150: PUSH
53151: LD_EXP 49
53155: PUSH
53156: LD_EXP 50
53160: PUSH
53161: LD_EXP 51
53165: PUSH
53166: LD_EXP 52
53170: PUSH
53171: LD_EXP 53
53175: PUSH
53176: LD_EXP 54
53180: PUSH
53181: LD_EXP 55
53185: PUSH
53186: LD_EXP 56
53190: PUSH
53191: LD_EXP 64
53195: PUSH
53196: LD_EXP 65
53200: PUSH
53201: LD_EXP 66
53205: PUSH
53206: LD_EXP 67
53210: PUSH
53211: LD_EXP 69
53215: PUSH
53216: LD_EXP 70
53220: PUSH
53221: LD_EXP 71
53225: PUSH
53226: LD_EXP 74
53230: PUSH
53231: LD_EXP 76
53235: PUSH
53236: LD_EXP 77
53240: PUSH
53241: LD_EXP 78
53245: PUSH
53246: LD_EXP 80
53250: PUSH
53251: LD_EXP 81
53255: PUSH
53256: LD_EXP 84
53260: PUSH
53261: LD_EXP 85
53265: PUSH
53266: LD_EXP 86
53270: PUSH
53271: LD_EXP 87
53275: PUSH
53276: LD_EXP 88
53280: PUSH
53281: LD_EXP 89
53285: PUSH
53286: LD_EXP 90
53290: PUSH
53291: LD_EXP 91
53295: PUSH
53296: LD_EXP 92
53300: PUSH
53301: LD_EXP 57
53305: PUSH
53306: LD_EXP 58
53310: PUSH
53311: LD_EXP 61
53315: PUSH
53316: LD_EXP 62
53320: PUSH
53321: LD_EXP 63
53325: PUSH
53326: LD_EXP 59
53330: PUSH
53331: LD_EXP 60
53335: PUSH
53336: LD_EXP 68
53340: PUSH
53341: LD_EXP 72
53345: PUSH
53346: LD_EXP 73
53350: PUSH
53351: LD_EXP 75
53355: PUSH
53356: LD_EXP 79
53360: PUSH
53361: LD_EXP 82
53365: PUSH
53366: LD_EXP 83
53370: PUSH
53371: LD_EXP 93
53375: PUSH
53376: LD_EXP 94
53380: PUSH
53381: LD_EXP 95
53385: PUSH
53386: LD_EXP 96
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: ST_TO_ADDR
// tmp :=  ;
53447: LD_ADDR_VAR 0 3
53451: PUSH
53452: LD_STRING 
53454: ST_TO_ADDR
// for i = 1 to normalCounter do
53455: LD_ADDR_VAR 0 8
53459: PUSH
53460: DOUBLE
53461: LD_INT 1
53463: DEC
53464: ST_TO_ADDR
53465: LD_EXP 41
53469: PUSH
53470: FOR_TO
53471: IFFALSE 53507
// begin if flags [ i ] then
53473: LD_VAR 0 4
53477: PUSH
53478: LD_VAR 0 8
53482: ARRAY
53483: IFFALSE 53505
// tmp := tmp & i & ; ;
53485: LD_ADDR_VAR 0 3
53489: PUSH
53490: LD_VAR 0 3
53494: PUSH
53495: LD_VAR 0 8
53499: STR
53500: PUSH
53501: LD_STRING ;
53503: STR
53504: ST_TO_ADDR
// end ;
53505: GO 53470
53507: POP
53508: POP
// for i = 1 to hardcoreCounter do
53509: LD_ADDR_VAR 0 8
53513: PUSH
53514: DOUBLE
53515: LD_INT 1
53517: DEC
53518: ST_TO_ADDR
53519: LD_EXP 42
53523: PUSH
53524: FOR_TO
53525: IFFALSE 53571
// begin if flags [ normalCounter + i ] then
53527: LD_VAR 0 4
53531: PUSH
53532: LD_EXP 41
53536: PUSH
53537: LD_VAR 0 8
53541: PLUS
53542: ARRAY
53543: IFFALSE 53569
// tmp := tmp & ( 100 + i ) & ; ;
53545: LD_ADDR_VAR 0 3
53549: PUSH
53550: LD_VAR 0 3
53554: PUSH
53555: LD_INT 100
53557: PUSH
53558: LD_VAR 0 8
53562: PLUS
53563: STR
53564: PUSH
53565: LD_STRING ;
53567: STR
53568: ST_TO_ADDR
// end ;
53569: GO 53524
53571: POP
53572: POP
// if tmp then
53573: LD_VAR 0 3
53577: IFFALSE 53589
// active := tmp ;
53579: LD_ADDR_VAR 0 7
53583: PUSH
53584: LD_VAR 0 3
53588: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53589: LD_STRING getStreamItemsFromMission("
53591: PUSH
53592: LD_VAR 0 5
53596: STR
53597: PUSH
53598: LD_STRING ","
53600: STR
53601: PUSH
53602: LD_VAR 0 6
53606: STR
53607: PUSH
53608: LD_STRING ","
53610: STR
53611: PUSH
53612: LD_VAR 0 7
53616: STR
53617: PUSH
53618: LD_STRING ")
53620: STR
53621: PPUSH
53622: CALL_OW 559
// end else
53626: GO 53635
// ToLua ( getStreamItemsFromMission("","","") ) ;
53628: LD_STRING getStreamItemsFromMission("","","")
53630: PPUSH
53631: CALL_OW 559
// end ;
53635: LD_VAR 0 2
53639: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53640: LD_EXP 40
53644: PUSH
53645: LD_EXP 45
53649: AND
53650: IFFALSE 53774
53652: GO 53654
53654: DISABLE
53655: LD_INT 0
53657: PPUSH
53658: PPUSH
// begin enable ;
53659: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53660: LD_ADDR_VAR 0 2
53664: PUSH
53665: LD_INT 22
53667: PUSH
53668: LD_OWVAR 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: LD_INT 34
53682: PUSH
53683: LD_INT 7
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 34
53692: PUSH
53693: LD_INT 45
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 34
53702: PUSH
53703: LD_INT 28
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 34
53712: PUSH
53713: LD_INT 47
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PPUSH
53731: CALL_OW 69
53735: ST_TO_ADDR
// if not tmp then
53736: LD_VAR 0 2
53740: NOT
53741: IFFALSE 53745
// exit ;
53743: GO 53774
// for i in tmp do
53745: LD_ADDR_VAR 0 1
53749: PUSH
53750: LD_VAR 0 2
53754: PUSH
53755: FOR_IN
53756: IFFALSE 53772
// begin SetLives ( i , 0 ) ;
53758: LD_VAR 0 1
53762: PPUSH
53763: LD_INT 0
53765: PPUSH
53766: CALL_OW 234
// end ;
53770: GO 53755
53772: POP
53773: POP
// end ;
53774: PPOPN 2
53776: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53777: LD_EXP 40
53781: PUSH
53782: LD_EXP 46
53786: AND
53787: IFFALSE 53871
53789: GO 53791
53791: DISABLE
53792: LD_INT 0
53794: PPUSH
53795: PPUSH
// begin enable ;
53796: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53797: LD_ADDR_VAR 0 2
53801: PUSH
53802: LD_INT 22
53804: PUSH
53805: LD_OWVAR 2
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 32
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PPUSH
53828: CALL_OW 69
53832: ST_TO_ADDR
// if not tmp then
53833: LD_VAR 0 2
53837: NOT
53838: IFFALSE 53842
// exit ;
53840: GO 53871
// for i in tmp do
53842: LD_ADDR_VAR 0 1
53846: PUSH
53847: LD_VAR 0 2
53851: PUSH
53852: FOR_IN
53853: IFFALSE 53869
// begin SetLives ( i , 0 ) ;
53855: LD_VAR 0 1
53859: PPUSH
53860: LD_INT 0
53862: PPUSH
53863: CALL_OW 234
// end ;
53867: GO 53852
53869: POP
53870: POP
// end ;
53871: PPOPN 2
53873: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53874: LD_EXP 40
53878: PUSH
53879: LD_EXP 43
53883: AND
53884: IFFALSE 53977
53886: GO 53888
53888: DISABLE
53889: LD_INT 0
53891: PPUSH
// begin enable ;
53892: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53893: LD_ADDR_VAR 0 1
53897: PUSH
53898: LD_INT 22
53900: PUSH
53901: LD_OWVAR 2
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 25
53915: PUSH
53916: LD_INT 5
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 25
53925: PUSH
53926: LD_INT 9
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 25
53935: PUSH
53936: LD_INT 8
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PPUSH
53953: CALL_OW 69
53957: PUSH
53958: FOR_IN
53959: IFFALSE 53975
// begin SetClass ( i , 1 ) ;
53961: LD_VAR 0 1
53965: PPUSH
53966: LD_INT 1
53968: PPUSH
53969: CALL_OW 336
// end ;
53973: GO 53958
53975: POP
53976: POP
// end ;
53977: PPOPN 1
53979: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53980: LD_EXP 40
53984: PUSH
53985: LD_EXP 44
53989: AND
53990: PUSH
53991: LD_OWVAR 65
53995: PUSH
53996: LD_INT 7
53998: LESS
53999: AND
54000: IFFALSE 54014
54002: GO 54004
54004: DISABLE
// begin enable ;
54005: ENABLE
// game_speed := 7 ;
54006: LD_ADDR_OWVAR 65
54010: PUSH
54011: LD_INT 7
54013: ST_TO_ADDR
// end ;
54014: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54015: LD_EXP 40
54019: PUSH
54020: LD_EXP 47
54024: AND
54025: IFFALSE 54227
54027: GO 54029
54029: DISABLE
54030: LD_INT 0
54032: PPUSH
54033: PPUSH
54034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54035: LD_ADDR_VAR 0 3
54039: PUSH
54040: LD_INT 81
54042: PUSH
54043: LD_OWVAR 2
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 21
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PPUSH
54066: CALL_OW 69
54070: ST_TO_ADDR
// if not tmp then
54071: LD_VAR 0 3
54075: NOT
54076: IFFALSE 54080
// exit ;
54078: GO 54227
// if tmp > 5 then
54080: LD_VAR 0 3
54084: PUSH
54085: LD_INT 5
54087: GREATER
54088: IFFALSE 54100
// k := 5 else
54090: LD_ADDR_VAR 0 2
54094: PUSH
54095: LD_INT 5
54097: ST_TO_ADDR
54098: GO 54110
// k := tmp ;
54100: LD_ADDR_VAR 0 2
54104: PUSH
54105: LD_VAR 0 3
54109: ST_TO_ADDR
// for i := 1 to k do
54110: LD_ADDR_VAR 0 1
54114: PUSH
54115: DOUBLE
54116: LD_INT 1
54118: DEC
54119: ST_TO_ADDR
54120: LD_VAR 0 2
54124: PUSH
54125: FOR_TO
54126: IFFALSE 54225
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54128: LD_VAR 0 3
54132: PUSH
54133: LD_VAR 0 1
54137: ARRAY
54138: PPUSH
54139: LD_VAR 0 1
54143: PUSH
54144: LD_INT 4
54146: MOD
54147: PUSH
54148: LD_INT 1
54150: PLUS
54151: PPUSH
54152: CALL_OW 259
54156: PUSH
54157: LD_INT 10
54159: LESS
54160: IFFALSE 54223
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54162: LD_VAR 0 3
54166: PUSH
54167: LD_VAR 0 1
54171: ARRAY
54172: PPUSH
54173: LD_VAR 0 1
54177: PUSH
54178: LD_INT 4
54180: MOD
54181: PUSH
54182: LD_INT 1
54184: PLUS
54185: PPUSH
54186: LD_VAR 0 3
54190: PUSH
54191: LD_VAR 0 1
54195: ARRAY
54196: PPUSH
54197: LD_VAR 0 1
54201: PUSH
54202: LD_INT 4
54204: MOD
54205: PUSH
54206: LD_INT 1
54208: PLUS
54209: PPUSH
54210: CALL_OW 259
54214: PUSH
54215: LD_INT 1
54217: PLUS
54218: PPUSH
54219: CALL_OW 237
54223: GO 54125
54225: POP
54226: POP
// end ;
54227: PPOPN 3
54229: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54230: LD_EXP 40
54234: PUSH
54235: LD_EXP 48
54239: AND
54240: IFFALSE 54260
54242: GO 54244
54244: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54245: LD_INT 4
54247: PPUSH
54248: LD_OWVAR 2
54252: PPUSH
54253: LD_INT 0
54255: PPUSH
54256: CALL_OW 324
54260: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54261: LD_EXP 40
54265: PUSH
54266: LD_EXP 77
54270: AND
54271: IFFALSE 54291
54273: GO 54275
54275: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54276: LD_INT 19
54278: PPUSH
54279: LD_OWVAR 2
54283: PPUSH
54284: LD_INT 0
54286: PPUSH
54287: CALL_OW 324
54291: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54292: LD_EXP 40
54296: PUSH
54297: LD_EXP 49
54301: AND
54302: IFFALSE 54404
54304: GO 54306
54306: DISABLE
54307: LD_INT 0
54309: PPUSH
54310: PPUSH
// begin enable ;
54311: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54312: LD_ADDR_VAR 0 2
54316: PUSH
54317: LD_INT 22
54319: PUSH
54320: LD_OWVAR 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: LD_INT 34
54334: PUSH
54335: LD_INT 11
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 34
54344: PUSH
54345: LD_INT 30
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: LIST
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PPUSH
54361: CALL_OW 69
54365: ST_TO_ADDR
// if not tmp then
54366: LD_VAR 0 2
54370: NOT
54371: IFFALSE 54375
// exit ;
54373: GO 54404
// for i in tmp do
54375: LD_ADDR_VAR 0 1
54379: PUSH
54380: LD_VAR 0 2
54384: PUSH
54385: FOR_IN
54386: IFFALSE 54402
// begin SetLives ( i , 0 ) ;
54388: LD_VAR 0 1
54392: PPUSH
54393: LD_INT 0
54395: PPUSH
54396: CALL_OW 234
// end ;
54400: GO 54385
54402: POP
54403: POP
// end ;
54404: PPOPN 2
54406: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54407: LD_EXP 40
54411: PUSH
54412: LD_EXP 50
54416: AND
54417: IFFALSE 54437
54419: GO 54421
54421: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54422: LD_INT 32
54424: PPUSH
54425: LD_OWVAR 2
54429: PPUSH
54430: LD_INT 0
54432: PPUSH
54433: CALL_OW 324
54437: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54438: LD_EXP 40
54442: PUSH
54443: LD_EXP 51
54447: AND
54448: IFFALSE 54629
54450: GO 54452
54452: DISABLE
54453: LD_INT 0
54455: PPUSH
54456: PPUSH
54457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54458: LD_ADDR_VAR 0 2
54462: PUSH
54463: LD_INT 22
54465: PUSH
54466: LD_OWVAR 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 33
54477: PUSH
54478: LD_INT 3
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PPUSH
54489: CALL_OW 69
54493: ST_TO_ADDR
// if not tmp then
54494: LD_VAR 0 2
54498: NOT
54499: IFFALSE 54503
// exit ;
54501: GO 54629
// side := 0 ;
54503: LD_ADDR_VAR 0 3
54507: PUSH
54508: LD_INT 0
54510: ST_TO_ADDR
// for i := 1 to 8 do
54511: LD_ADDR_VAR 0 1
54515: PUSH
54516: DOUBLE
54517: LD_INT 1
54519: DEC
54520: ST_TO_ADDR
54521: LD_INT 8
54523: PUSH
54524: FOR_TO
54525: IFFALSE 54573
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54527: LD_OWVAR 2
54531: PUSH
54532: LD_VAR 0 1
54536: NONEQUAL
54537: PUSH
54538: LD_OWVAR 2
54542: PPUSH
54543: LD_VAR 0 1
54547: PPUSH
54548: CALL_OW 81
54552: PUSH
54553: LD_INT 2
54555: EQUAL
54556: AND
54557: IFFALSE 54571
// begin side := i ;
54559: LD_ADDR_VAR 0 3
54563: PUSH
54564: LD_VAR 0 1
54568: ST_TO_ADDR
// break ;
54569: GO 54573
// end ;
54571: GO 54524
54573: POP
54574: POP
// if not side then
54575: LD_VAR 0 3
54579: NOT
54580: IFFALSE 54584
// exit ;
54582: GO 54629
// for i := 1 to tmp do
54584: LD_ADDR_VAR 0 1
54588: PUSH
54589: DOUBLE
54590: LD_INT 1
54592: DEC
54593: ST_TO_ADDR
54594: LD_VAR 0 2
54598: PUSH
54599: FOR_TO
54600: IFFALSE 54627
// if Prob ( 60 ) then
54602: LD_INT 60
54604: PPUSH
54605: CALL_OW 13
54609: IFFALSE 54625
// SetSide ( i , side ) ;
54611: LD_VAR 0 1
54615: PPUSH
54616: LD_VAR 0 3
54620: PPUSH
54621: CALL_OW 235
54625: GO 54599
54627: POP
54628: POP
// end ;
54629: PPOPN 3
54631: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54632: LD_EXP 40
54636: PUSH
54637: LD_EXP 53
54641: AND
54642: IFFALSE 54761
54644: GO 54646
54646: DISABLE
54647: LD_INT 0
54649: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54650: LD_ADDR_VAR 0 1
54654: PUSH
54655: LD_INT 22
54657: PUSH
54658: LD_OWVAR 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 21
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: PUSH
54680: LD_INT 23
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: PPUSH
54699: CALL_OW 69
54703: PUSH
54704: FOR_IN
54705: IFFALSE 54759
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54707: LD_VAR 0 1
54711: PPUSH
54712: CALL_OW 257
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: LD_INT 4
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: IN
54735: IFFALSE 54757
// SetClass ( un , rand ( 1 , 4 ) ) ;
54737: LD_VAR 0 1
54741: PPUSH
54742: LD_INT 1
54744: PPUSH
54745: LD_INT 4
54747: PPUSH
54748: CALL_OW 12
54752: PPUSH
54753: CALL_OW 336
54757: GO 54704
54759: POP
54760: POP
// end ;
54761: PPOPN 1
54763: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54764: LD_EXP 40
54768: PUSH
54769: LD_EXP 52
54773: AND
54774: IFFALSE 54853
54776: GO 54778
54778: DISABLE
54779: LD_INT 0
54781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54782: LD_ADDR_VAR 0 1
54786: PUSH
54787: LD_INT 22
54789: PUSH
54790: LD_OWVAR 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 21
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PPUSH
54813: CALL_OW 69
54817: ST_TO_ADDR
// if not tmp then
54818: LD_VAR 0 1
54822: NOT
54823: IFFALSE 54827
// exit ;
54825: GO 54853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54827: LD_VAR 0 1
54831: PUSH
54832: LD_INT 1
54834: PPUSH
54835: LD_VAR 0 1
54839: PPUSH
54840: CALL_OW 12
54844: ARRAY
54845: PPUSH
54846: LD_INT 100
54848: PPUSH
54849: CALL_OW 234
// end ;
54853: PPOPN 1
54855: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54856: LD_EXP 40
54860: PUSH
54861: LD_EXP 54
54865: AND
54866: IFFALSE 54964
54868: GO 54870
54870: DISABLE
54871: LD_INT 0
54873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54874: LD_ADDR_VAR 0 1
54878: PUSH
54879: LD_INT 22
54881: PUSH
54882: LD_OWVAR 2
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 21
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PPUSH
54905: CALL_OW 69
54909: ST_TO_ADDR
// if not tmp then
54910: LD_VAR 0 1
54914: NOT
54915: IFFALSE 54919
// exit ;
54917: GO 54964
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54919: LD_VAR 0 1
54923: PUSH
54924: LD_INT 1
54926: PPUSH
54927: LD_VAR 0 1
54931: PPUSH
54932: CALL_OW 12
54936: ARRAY
54937: PPUSH
54938: LD_INT 1
54940: PPUSH
54941: LD_INT 4
54943: PPUSH
54944: CALL_OW 12
54948: PPUSH
54949: LD_INT 3000
54951: PPUSH
54952: LD_INT 9000
54954: PPUSH
54955: CALL_OW 12
54959: PPUSH
54960: CALL_OW 492
// end ;
54964: PPOPN 1
54966: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54967: LD_EXP 40
54971: PUSH
54972: LD_EXP 55
54976: AND
54977: IFFALSE 54997
54979: GO 54981
54981: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54982: LD_INT 1
54984: PPUSH
54985: LD_OWVAR 2
54989: PPUSH
54990: LD_INT 0
54992: PPUSH
54993: CALL_OW 324
54997: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
54998: LD_EXP 40
55002: PUSH
55003: LD_EXP 56
55007: AND
55008: IFFALSE 55091
55010: GO 55012
55012: DISABLE
55013: LD_INT 0
55015: PPUSH
55016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55017: LD_ADDR_VAR 0 2
55021: PUSH
55022: LD_INT 22
55024: PUSH
55025: LD_OWVAR 2
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 21
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PPUSH
55048: CALL_OW 69
55052: ST_TO_ADDR
// if not tmp then
55053: LD_VAR 0 2
55057: NOT
55058: IFFALSE 55062
// exit ;
55060: GO 55091
// for i in tmp do
55062: LD_ADDR_VAR 0 1
55066: PUSH
55067: LD_VAR 0 2
55071: PUSH
55072: FOR_IN
55073: IFFALSE 55089
// SetBLevel ( i , 10 ) ;
55075: LD_VAR 0 1
55079: PPUSH
55080: LD_INT 10
55082: PPUSH
55083: CALL_OW 241
55087: GO 55072
55089: POP
55090: POP
// end ;
55091: PPOPN 2
55093: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55094: LD_EXP 40
55098: PUSH
55099: LD_EXP 57
55103: AND
55104: IFFALSE 55215
55106: GO 55108
55108: DISABLE
55109: LD_INT 0
55111: PPUSH
55112: PPUSH
55113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55114: LD_ADDR_VAR 0 3
55118: PUSH
55119: LD_INT 22
55121: PUSH
55122: LD_OWVAR 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 25
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PPUSH
55145: CALL_OW 69
55149: ST_TO_ADDR
// if not tmp then
55150: LD_VAR 0 3
55154: NOT
55155: IFFALSE 55159
// exit ;
55157: GO 55215
// un := tmp [ rand ( 1 , tmp ) ] ;
55159: LD_ADDR_VAR 0 2
55163: PUSH
55164: LD_VAR 0 3
55168: PUSH
55169: LD_INT 1
55171: PPUSH
55172: LD_VAR 0 3
55176: PPUSH
55177: CALL_OW 12
55181: ARRAY
55182: ST_TO_ADDR
// if Crawls ( un ) then
55183: LD_VAR 0 2
55187: PPUSH
55188: CALL_OW 318
55192: IFFALSE 55203
// ComWalk ( un ) ;
55194: LD_VAR 0 2
55198: PPUSH
55199: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55203: LD_VAR 0 2
55207: PPUSH
55208: LD_INT 5
55210: PPUSH
55211: CALL_OW 336
// end ;
55215: PPOPN 3
55217: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55218: LD_EXP 40
55222: PUSH
55223: LD_EXP 58
55227: AND
55228: PUSH
55229: LD_OWVAR 67
55233: PUSH
55234: LD_INT 4
55236: LESS
55237: AND
55238: IFFALSE 55257
55240: GO 55242
55242: DISABLE
// begin Difficulty := Difficulty + 1 ;
55243: LD_ADDR_OWVAR 67
55247: PUSH
55248: LD_OWVAR 67
55252: PUSH
55253: LD_INT 1
55255: PLUS
55256: ST_TO_ADDR
// end ;
55257: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55258: LD_EXP 40
55262: PUSH
55263: LD_EXP 59
55267: AND
55268: IFFALSE 55371
55270: GO 55272
55272: DISABLE
55273: LD_INT 0
55275: PPUSH
// begin for i := 1 to 5 do
55276: LD_ADDR_VAR 0 1
55280: PUSH
55281: DOUBLE
55282: LD_INT 1
55284: DEC
55285: ST_TO_ADDR
55286: LD_INT 5
55288: PUSH
55289: FOR_TO
55290: IFFALSE 55369
// begin uc_nation := nation_nature ;
55292: LD_ADDR_OWVAR 21
55296: PUSH
55297: LD_INT 0
55299: ST_TO_ADDR
// uc_side := 0 ;
55300: LD_ADDR_OWVAR 20
55304: PUSH
55305: LD_INT 0
55307: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55308: LD_ADDR_OWVAR 29
55312: PUSH
55313: LD_INT 12
55315: PUSH
55316: LD_INT 12
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: ST_TO_ADDR
// hc_agressivity := 20 ;
55323: LD_ADDR_OWVAR 35
55327: PUSH
55328: LD_INT 20
55330: ST_TO_ADDR
// hc_class := class_tiger ;
55331: LD_ADDR_OWVAR 28
55335: PUSH
55336: LD_INT 14
55338: ST_TO_ADDR
// hc_gallery :=  ;
55339: LD_ADDR_OWVAR 33
55343: PUSH
55344: LD_STRING 
55346: ST_TO_ADDR
// hc_name :=  ;
55347: LD_ADDR_OWVAR 26
55351: PUSH
55352: LD_STRING 
55354: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55355: CALL_OW 44
55359: PPUSH
55360: LD_INT 0
55362: PPUSH
55363: CALL_OW 51
// end ;
55367: GO 55289
55369: POP
55370: POP
// end ;
55371: PPOPN 1
55373: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55374: LD_EXP 40
55378: PUSH
55379: LD_EXP 60
55383: AND
55384: IFFALSE 55393
55386: GO 55388
55388: DISABLE
// StreamSibBomb ;
55389: CALL 55394 0 0
55393: END
// export function StreamSibBomb ; var i , x , y ; begin
55394: LD_INT 0
55396: PPUSH
55397: PPUSH
55398: PPUSH
55399: PPUSH
// result := false ;
55400: LD_ADDR_VAR 0 1
55404: PUSH
55405: LD_INT 0
55407: ST_TO_ADDR
// for i := 1 to 16 do
55408: LD_ADDR_VAR 0 2
55412: PUSH
55413: DOUBLE
55414: LD_INT 1
55416: DEC
55417: ST_TO_ADDR
55418: LD_INT 16
55420: PUSH
55421: FOR_TO
55422: IFFALSE 55621
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55424: LD_ADDR_VAR 0 3
55428: PUSH
55429: LD_INT 10
55431: PUSH
55432: LD_INT 20
55434: PUSH
55435: LD_INT 30
55437: PUSH
55438: LD_INT 40
55440: PUSH
55441: LD_INT 50
55443: PUSH
55444: LD_INT 60
55446: PUSH
55447: LD_INT 70
55449: PUSH
55450: LD_INT 80
55452: PUSH
55453: LD_INT 90
55455: PUSH
55456: LD_INT 100
55458: PUSH
55459: LD_INT 110
55461: PUSH
55462: LD_INT 120
55464: PUSH
55465: LD_INT 130
55467: PUSH
55468: LD_INT 140
55470: PUSH
55471: LD_INT 150
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PPUSH
55494: LD_INT 15
55496: PPUSH
55497: CALL_OW 12
55501: ARRAY
55502: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55503: LD_ADDR_VAR 0 4
55507: PUSH
55508: LD_INT 10
55510: PUSH
55511: LD_INT 20
55513: PUSH
55514: LD_INT 30
55516: PUSH
55517: LD_INT 40
55519: PUSH
55520: LD_INT 50
55522: PUSH
55523: LD_INT 60
55525: PUSH
55526: LD_INT 70
55528: PUSH
55529: LD_INT 80
55531: PUSH
55532: LD_INT 90
55534: PUSH
55535: LD_INT 100
55537: PUSH
55538: LD_INT 110
55540: PUSH
55541: LD_INT 120
55543: PUSH
55544: LD_INT 130
55546: PUSH
55547: LD_INT 140
55549: PUSH
55550: LD_INT 150
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PPUSH
55573: LD_INT 15
55575: PPUSH
55576: CALL_OW 12
55580: ARRAY
55581: ST_TO_ADDR
// if ValidHex ( x , y ) then
55582: LD_VAR 0 3
55586: PPUSH
55587: LD_VAR 0 4
55591: PPUSH
55592: CALL_OW 488
55596: IFFALSE 55619
// begin result := [ x , y ] ;
55598: LD_ADDR_VAR 0 1
55602: PUSH
55603: LD_VAR 0 3
55607: PUSH
55608: LD_VAR 0 4
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: ST_TO_ADDR
// break ;
55617: GO 55621
// end ; end ;
55619: GO 55421
55621: POP
55622: POP
// if result then
55623: LD_VAR 0 1
55627: IFFALSE 55687
// begin ToLua ( playSibBomb() ) ;
55629: LD_STRING playSibBomb()
55631: PPUSH
55632: CALL_OW 559
// wait ( 0 0$14 ) ;
55636: LD_INT 490
55638: PPUSH
55639: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55643: LD_VAR 0 1
55647: PUSH
55648: LD_INT 1
55650: ARRAY
55651: PPUSH
55652: LD_VAR 0 1
55656: PUSH
55657: LD_INT 2
55659: ARRAY
55660: PPUSH
55661: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55665: LD_VAR 0 1
55669: PUSH
55670: LD_INT 1
55672: ARRAY
55673: PPUSH
55674: LD_VAR 0 1
55678: PUSH
55679: LD_INT 2
55681: ARRAY
55682: PPUSH
55683: CALL_OW 429
// end ; end ;
55687: LD_VAR 0 1
55691: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55692: LD_EXP 40
55696: PUSH
55697: LD_EXP 62
55701: AND
55702: IFFALSE 55714
55704: GO 55706
55706: DISABLE
// YouLost (  ) ;
55707: LD_STRING 
55709: PPUSH
55710: CALL_OW 104
55714: END
// every 0 0$1 trigger StreamModeActive and sFog do
55715: LD_EXP 40
55719: PUSH
55720: LD_EXP 61
55724: AND
55725: IFFALSE 55739
55727: GO 55729
55729: DISABLE
// FogOff ( your_side ) ;
55730: LD_OWVAR 2
55734: PPUSH
55735: CALL_OW 344
55739: END
// every 0 0$1 trigger StreamModeActive and sSun do
55740: LD_EXP 40
55744: PUSH
55745: LD_EXP 63
55749: AND
55750: IFFALSE 55778
55752: GO 55754
55754: DISABLE
// begin solar_recharge_percent := 0 ;
55755: LD_ADDR_OWVAR 79
55759: PUSH
55760: LD_INT 0
55762: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55763: LD_INT 10500
55765: PPUSH
55766: CALL_OW 67
// solar_recharge_percent := 100 ;
55770: LD_ADDR_OWVAR 79
55774: PUSH
55775: LD_INT 100
55777: ST_TO_ADDR
// end ;
55778: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55779: LD_EXP 40
55783: PUSH
55784: LD_EXP 64
55788: AND
55789: IFFALSE 56028
55791: GO 55793
55793: DISABLE
55794: LD_INT 0
55796: PPUSH
55797: PPUSH
55798: PPUSH
// begin tmp := [ ] ;
55799: LD_ADDR_VAR 0 3
55803: PUSH
55804: EMPTY
55805: ST_TO_ADDR
// for i := 1 to 6 do
55806: LD_ADDR_VAR 0 1
55810: PUSH
55811: DOUBLE
55812: LD_INT 1
55814: DEC
55815: ST_TO_ADDR
55816: LD_INT 6
55818: PUSH
55819: FOR_TO
55820: IFFALSE 55925
// begin uc_nation := nation_nature ;
55822: LD_ADDR_OWVAR 21
55826: PUSH
55827: LD_INT 0
55829: ST_TO_ADDR
// uc_side := 0 ;
55830: LD_ADDR_OWVAR 20
55834: PUSH
55835: LD_INT 0
55837: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55838: LD_ADDR_OWVAR 29
55842: PUSH
55843: LD_INT 12
55845: PUSH
55846: LD_INT 12
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: ST_TO_ADDR
// hc_agressivity := 20 ;
55853: LD_ADDR_OWVAR 35
55857: PUSH
55858: LD_INT 20
55860: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55861: LD_ADDR_OWVAR 28
55865: PUSH
55866: LD_INT 17
55868: ST_TO_ADDR
// hc_gallery :=  ;
55869: LD_ADDR_OWVAR 33
55873: PUSH
55874: LD_STRING 
55876: ST_TO_ADDR
// hc_name :=  ;
55877: LD_ADDR_OWVAR 26
55881: PUSH
55882: LD_STRING 
55884: ST_TO_ADDR
// un := CreateHuman ;
55885: LD_ADDR_VAR 0 2
55889: PUSH
55890: CALL_OW 44
55894: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55895: LD_VAR 0 2
55899: PPUSH
55900: LD_INT 1
55902: PPUSH
55903: CALL_OW 51
// tmp := tmp ^ un ;
55907: LD_ADDR_VAR 0 3
55911: PUSH
55912: LD_VAR 0 3
55916: PUSH
55917: LD_VAR 0 2
55921: ADD
55922: ST_TO_ADDR
// end ;
55923: GO 55819
55925: POP
55926: POP
// repeat wait ( 0 0$1 ) ;
55927: LD_INT 35
55929: PPUSH
55930: CALL_OW 67
// for un in tmp do
55934: LD_ADDR_VAR 0 2
55938: PUSH
55939: LD_VAR 0 3
55943: PUSH
55944: FOR_IN
55945: IFFALSE 56019
// begin if IsDead ( un ) then
55947: LD_VAR 0 2
55951: PPUSH
55952: CALL_OW 301
55956: IFFALSE 55976
// begin tmp := tmp diff un ;
55958: LD_ADDR_VAR 0 3
55962: PUSH
55963: LD_VAR 0 3
55967: PUSH
55968: LD_VAR 0 2
55972: DIFF
55973: ST_TO_ADDR
// continue ;
55974: GO 55944
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55976: LD_VAR 0 2
55980: PPUSH
55981: LD_INT 3
55983: PUSH
55984: LD_INT 22
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PPUSH
55998: CALL_OW 69
56002: PPUSH
56003: LD_VAR 0 2
56007: PPUSH
56008: CALL_OW 74
56012: PPUSH
56013: CALL_OW 115
// end ;
56017: GO 55944
56019: POP
56020: POP
// until not tmp ;
56021: LD_VAR 0 3
56025: NOT
56026: IFFALSE 55927
// end ;
56028: PPOPN 3
56030: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56031: LD_EXP 40
56035: PUSH
56036: LD_EXP 65
56040: AND
56041: IFFALSE 56095
56043: GO 56045
56045: DISABLE
// begin ToLua ( displayTroll(); ) ;
56046: LD_STRING displayTroll();
56048: PPUSH
56049: CALL_OW 559
// wait ( 3 3$00 ) ;
56053: LD_INT 6300
56055: PPUSH
56056: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56060: LD_STRING hideTroll();
56062: PPUSH
56063: CALL_OW 559
// wait ( 1 1$00 ) ;
56067: LD_INT 2100
56069: PPUSH
56070: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56074: LD_STRING displayTroll();
56076: PPUSH
56077: CALL_OW 559
// wait ( 1 1$00 ) ;
56081: LD_INT 2100
56083: PPUSH
56084: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56088: LD_STRING hideTroll();
56090: PPUSH
56091: CALL_OW 559
// end ;
56095: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56096: LD_EXP 40
56100: PUSH
56101: LD_EXP 66
56105: AND
56106: IFFALSE 56169
56108: GO 56110
56110: DISABLE
56111: LD_INT 0
56113: PPUSH
// begin p := 0 ;
56114: LD_ADDR_VAR 0 1
56118: PUSH
56119: LD_INT 0
56121: ST_TO_ADDR
// repeat game_speed := 1 ;
56122: LD_ADDR_OWVAR 65
56126: PUSH
56127: LD_INT 1
56129: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56130: LD_INT 35
56132: PPUSH
56133: CALL_OW 67
// p := p + 1 ;
56137: LD_ADDR_VAR 0 1
56141: PUSH
56142: LD_VAR 0 1
56146: PUSH
56147: LD_INT 1
56149: PLUS
56150: ST_TO_ADDR
// until p >= 60 ;
56151: LD_VAR 0 1
56155: PUSH
56156: LD_INT 60
56158: GREATEREQUAL
56159: IFFALSE 56122
// game_speed := 4 ;
56161: LD_ADDR_OWVAR 65
56165: PUSH
56166: LD_INT 4
56168: ST_TO_ADDR
// end ;
56169: PPOPN 1
56171: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56172: LD_EXP 40
56176: PUSH
56177: LD_EXP 67
56181: AND
56182: IFFALSE 56328
56184: GO 56186
56186: DISABLE
56187: LD_INT 0
56189: PPUSH
56190: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56191: LD_ADDR_VAR 0 1
56195: PUSH
56196: LD_INT 22
56198: PUSH
56199: LD_OWVAR 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 30
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 30
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: LIST
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PPUSH
56240: CALL_OW 69
56244: ST_TO_ADDR
// if not depot then
56245: LD_VAR 0 1
56249: NOT
56250: IFFALSE 56254
// exit ;
56252: GO 56328
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56254: LD_ADDR_VAR 0 2
56258: PUSH
56259: LD_VAR 0 1
56263: PUSH
56264: LD_INT 1
56266: PPUSH
56267: LD_VAR 0 1
56271: PPUSH
56272: CALL_OW 12
56276: ARRAY
56277: PPUSH
56278: CALL_OW 274
56282: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56283: LD_VAR 0 2
56287: PPUSH
56288: LD_INT 1
56290: PPUSH
56291: LD_INT 0
56293: PPUSH
56294: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56298: LD_VAR 0 2
56302: PPUSH
56303: LD_INT 2
56305: PPUSH
56306: LD_INT 0
56308: PPUSH
56309: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56313: LD_VAR 0 2
56317: PPUSH
56318: LD_INT 3
56320: PPUSH
56321: LD_INT 0
56323: PPUSH
56324: CALL_OW 277
// end ;
56328: PPOPN 2
56330: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56331: LD_EXP 40
56335: PUSH
56336: LD_EXP 68
56340: AND
56341: IFFALSE 56438
56343: GO 56345
56345: DISABLE
56346: LD_INT 0
56348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56349: LD_ADDR_VAR 0 1
56353: PUSH
56354: LD_INT 22
56356: PUSH
56357: LD_OWVAR 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 21
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: LD_INT 23
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: PPUSH
56398: CALL_OW 69
56402: ST_TO_ADDR
// if not tmp then
56403: LD_VAR 0 1
56407: NOT
56408: IFFALSE 56412
// exit ;
56410: GO 56438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56412: LD_VAR 0 1
56416: PUSH
56417: LD_INT 1
56419: PPUSH
56420: LD_VAR 0 1
56424: PPUSH
56425: CALL_OW 12
56429: ARRAY
56430: PPUSH
56431: LD_INT 200
56433: PPUSH
56434: CALL_OW 234
// end ;
56438: PPOPN 1
56440: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56441: LD_EXP 40
56445: PUSH
56446: LD_EXP 69
56450: AND
56451: IFFALSE 56530
56453: GO 56455
56455: DISABLE
56456: LD_INT 0
56458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56459: LD_ADDR_VAR 0 1
56463: PUSH
56464: LD_INT 22
56466: PUSH
56467: LD_OWVAR 2
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 21
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PPUSH
56490: CALL_OW 69
56494: ST_TO_ADDR
// if not tmp then
56495: LD_VAR 0 1
56499: NOT
56500: IFFALSE 56504
// exit ;
56502: GO 56530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56504: LD_VAR 0 1
56508: PUSH
56509: LD_INT 1
56511: PPUSH
56512: LD_VAR 0 1
56516: PPUSH
56517: CALL_OW 12
56521: ARRAY
56522: PPUSH
56523: LD_INT 60
56525: PPUSH
56526: CALL_OW 234
// end ;
56530: PPOPN 1
56532: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56533: LD_EXP 40
56537: PUSH
56538: LD_EXP 70
56542: AND
56543: IFFALSE 56642
56545: GO 56547
56547: DISABLE
56548: LD_INT 0
56550: PPUSH
56551: PPUSH
// begin enable ;
56552: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56553: LD_ADDR_VAR 0 1
56557: PUSH
56558: LD_INT 22
56560: PUSH
56561: LD_OWVAR 2
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 61
56572: PUSH
56573: EMPTY
56574: LIST
56575: PUSH
56576: LD_INT 33
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: LIST
56590: PPUSH
56591: CALL_OW 69
56595: ST_TO_ADDR
// if not tmp then
56596: LD_VAR 0 1
56600: NOT
56601: IFFALSE 56605
// exit ;
56603: GO 56642
// for i in tmp do
56605: LD_ADDR_VAR 0 2
56609: PUSH
56610: LD_VAR 0 1
56614: PUSH
56615: FOR_IN
56616: IFFALSE 56640
// if IsControledBy ( i ) then
56618: LD_VAR 0 2
56622: PPUSH
56623: CALL_OW 312
56627: IFFALSE 56638
// ComUnlink ( i ) ;
56629: LD_VAR 0 2
56633: PPUSH
56634: CALL_OW 136
56638: GO 56615
56640: POP
56641: POP
// end ;
56642: PPOPN 2
56644: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56645: LD_EXP 40
56649: PUSH
56650: LD_EXP 71
56654: AND
56655: IFFALSE 56795
56657: GO 56659
56659: DISABLE
56660: LD_INT 0
56662: PPUSH
56663: PPUSH
// begin ToLua ( displayPowell(); ) ;
56664: LD_STRING displayPowell();
56666: PPUSH
56667: CALL_OW 559
// uc_side := 0 ;
56671: LD_ADDR_OWVAR 20
56675: PUSH
56676: LD_INT 0
56678: ST_TO_ADDR
// uc_nation := 2 ;
56679: LD_ADDR_OWVAR 21
56683: PUSH
56684: LD_INT 2
56686: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56687: LD_ADDR_OWVAR 37
56691: PUSH
56692: LD_INT 14
56694: ST_TO_ADDR
// vc_engine := engine_siberite ;
56695: LD_ADDR_OWVAR 39
56699: PUSH
56700: LD_INT 3
56702: ST_TO_ADDR
// vc_control := control_apeman ;
56703: LD_ADDR_OWVAR 38
56707: PUSH
56708: LD_INT 5
56710: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56711: LD_ADDR_OWVAR 40
56715: PUSH
56716: LD_INT 29
56718: ST_TO_ADDR
// un := CreateVehicle ;
56719: LD_ADDR_VAR 0 2
56723: PUSH
56724: CALL_OW 45
56728: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56729: LD_VAR 0 2
56733: PPUSH
56734: LD_INT 1
56736: PPUSH
56737: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56741: LD_INT 35
56743: PPUSH
56744: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56748: LD_VAR 0 2
56752: PPUSH
56753: LD_INT 22
56755: PUSH
56756: LD_OWVAR 2
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PPUSH
56765: CALL_OW 69
56769: PPUSH
56770: LD_VAR 0 2
56774: PPUSH
56775: CALL_OW 74
56779: PPUSH
56780: CALL_OW 115
// until IsDead ( un ) ;
56784: LD_VAR 0 2
56788: PPUSH
56789: CALL_OW 301
56793: IFFALSE 56741
// end ;
56795: PPOPN 2
56797: END
// every 0 0$1 trigger StreamModeActive and sStu do
56798: LD_EXP 40
56802: PUSH
56803: LD_EXP 79
56807: AND
56808: IFFALSE 56824
56810: GO 56812
56812: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56813: LD_STRING displayStucuk();
56815: PPUSH
56816: CALL_OW 559
// ResetFog ;
56820: CALL_OW 335
// end ;
56824: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56825: LD_EXP 40
56829: PUSH
56830: LD_EXP 72
56834: AND
56835: IFFALSE 56976
56837: GO 56839
56839: DISABLE
56840: LD_INT 0
56842: PPUSH
56843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56844: LD_ADDR_VAR 0 2
56848: PUSH
56849: LD_INT 22
56851: PUSH
56852: LD_OWVAR 2
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 21
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PPUSH
56875: CALL_OW 69
56879: ST_TO_ADDR
// if not tmp then
56880: LD_VAR 0 2
56884: NOT
56885: IFFALSE 56889
// exit ;
56887: GO 56976
// un := tmp [ rand ( 1 , tmp ) ] ;
56889: LD_ADDR_VAR 0 1
56893: PUSH
56894: LD_VAR 0 2
56898: PUSH
56899: LD_INT 1
56901: PPUSH
56902: LD_VAR 0 2
56906: PPUSH
56907: CALL_OW 12
56911: ARRAY
56912: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56913: LD_VAR 0 1
56917: PPUSH
56918: LD_INT 0
56920: PPUSH
56921: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56925: LD_VAR 0 1
56929: PPUSH
56930: LD_OWVAR 3
56934: PUSH
56935: LD_VAR 0 1
56939: DIFF
56940: PPUSH
56941: LD_VAR 0 1
56945: PPUSH
56946: CALL_OW 74
56950: PPUSH
56951: CALL_OW 115
// wait ( 0 0$20 ) ;
56955: LD_INT 700
56957: PPUSH
56958: CALL_OW 67
// SetSide ( un , your_side ) ;
56962: LD_VAR 0 1
56966: PPUSH
56967: LD_OWVAR 2
56971: PPUSH
56972: CALL_OW 235
// end ;
56976: PPOPN 2
56978: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
56979: LD_EXP 40
56983: PUSH
56984: LD_EXP 73
56988: AND
56989: IFFALSE 57095
56991: GO 56993
56993: DISABLE
56994: LD_INT 0
56996: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56997: LD_ADDR_VAR 0 1
57001: PUSH
57002: LD_INT 22
57004: PUSH
57005: LD_OWVAR 2
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: LD_INT 30
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 30
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PPUSH
57046: CALL_OW 69
57050: ST_TO_ADDR
// if not depot then
57051: LD_VAR 0 1
57055: NOT
57056: IFFALSE 57060
// exit ;
57058: GO 57095
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57060: LD_VAR 0 1
57064: PUSH
57065: LD_INT 1
57067: ARRAY
57068: PPUSH
57069: CALL_OW 250
57073: PPUSH
57074: LD_VAR 0 1
57078: PUSH
57079: LD_INT 1
57081: ARRAY
57082: PPUSH
57083: CALL_OW 251
57087: PPUSH
57088: LD_INT 70
57090: PPUSH
57091: CALL_OW 495
// end ;
57095: PPOPN 1
57097: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57098: LD_EXP 40
57102: PUSH
57103: LD_EXP 74
57107: AND
57108: IFFALSE 57319
57110: GO 57112
57112: DISABLE
57113: LD_INT 0
57115: PPUSH
57116: PPUSH
57117: PPUSH
57118: PPUSH
57119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57120: LD_ADDR_VAR 0 5
57124: PUSH
57125: LD_INT 22
57127: PUSH
57128: LD_OWVAR 2
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 21
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PPUSH
57151: CALL_OW 69
57155: ST_TO_ADDR
// if not tmp then
57156: LD_VAR 0 5
57160: NOT
57161: IFFALSE 57165
// exit ;
57163: GO 57319
// for i in tmp do
57165: LD_ADDR_VAR 0 1
57169: PUSH
57170: LD_VAR 0 5
57174: PUSH
57175: FOR_IN
57176: IFFALSE 57317
// begin d := rand ( 0 , 5 ) ;
57178: LD_ADDR_VAR 0 4
57182: PUSH
57183: LD_INT 0
57185: PPUSH
57186: LD_INT 5
57188: PPUSH
57189: CALL_OW 12
57193: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57194: LD_ADDR_VAR 0 2
57198: PUSH
57199: LD_VAR 0 1
57203: PPUSH
57204: CALL_OW 250
57208: PPUSH
57209: LD_VAR 0 4
57213: PPUSH
57214: LD_INT 3
57216: PPUSH
57217: LD_INT 12
57219: PPUSH
57220: CALL_OW 12
57224: PPUSH
57225: CALL_OW 272
57229: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57230: LD_ADDR_VAR 0 3
57234: PUSH
57235: LD_VAR 0 1
57239: PPUSH
57240: CALL_OW 251
57244: PPUSH
57245: LD_VAR 0 4
57249: PPUSH
57250: LD_INT 3
57252: PPUSH
57253: LD_INT 12
57255: PPUSH
57256: CALL_OW 12
57260: PPUSH
57261: CALL_OW 273
57265: ST_TO_ADDR
// if ValidHex ( x , y ) then
57266: LD_VAR 0 2
57270: PPUSH
57271: LD_VAR 0 3
57275: PPUSH
57276: CALL_OW 488
57280: IFFALSE 57315
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57282: LD_VAR 0 1
57286: PPUSH
57287: LD_VAR 0 2
57291: PPUSH
57292: LD_VAR 0 3
57296: PPUSH
57297: LD_INT 3
57299: PPUSH
57300: LD_INT 6
57302: PPUSH
57303: CALL_OW 12
57307: PPUSH
57308: LD_INT 1
57310: PPUSH
57311: CALL_OW 483
// end ;
57315: GO 57175
57317: POP
57318: POP
// end ;
57319: PPOPN 5
57321: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57322: LD_EXP 40
57326: PUSH
57327: LD_EXP 75
57331: AND
57332: IFFALSE 57426
57334: GO 57336
57336: DISABLE
57337: LD_INT 0
57339: PPUSH
57340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57341: LD_ADDR_VAR 0 2
57345: PUSH
57346: LD_INT 22
57348: PUSH
57349: LD_OWVAR 2
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 32
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 21
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: PPUSH
57383: CALL_OW 69
57387: ST_TO_ADDR
// if not tmp then
57388: LD_VAR 0 2
57392: NOT
57393: IFFALSE 57397
// exit ;
57395: GO 57426
// for i in tmp do
57397: LD_ADDR_VAR 0 1
57401: PUSH
57402: LD_VAR 0 2
57406: PUSH
57407: FOR_IN
57408: IFFALSE 57424
// SetFuel ( i , 0 ) ;
57410: LD_VAR 0 1
57414: PPUSH
57415: LD_INT 0
57417: PPUSH
57418: CALL_OW 240
57422: GO 57407
57424: POP
57425: POP
// end ;
57426: PPOPN 2
57428: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57429: LD_EXP 40
57433: PUSH
57434: LD_EXP 76
57438: AND
57439: IFFALSE 57505
57441: GO 57443
57443: DISABLE
57444: LD_INT 0
57446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57447: LD_ADDR_VAR 0 1
57451: PUSH
57452: LD_INT 22
57454: PUSH
57455: LD_OWVAR 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 30
57466: PUSH
57467: LD_INT 29
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PPUSH
57478: CALL_OW 69
57482: ST_TO_ADDR
// if not tmp then
57483: LD_VAR 0 1
57487: NOT
57488: IFFALSE 57492
// exit ;
57490: GO 57505
// DestroyUnit ( tmp [ 1 ] ) ;
57492: LD_VAR 0 1
57496: PUSH
57497: LD_INT 1
57499: ARRAY
57500: PPUSH
57501: CALL_OW 65
// end ;
57505: PPOPN 1
57507: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57508: LD_EXP 40
57512: PUSH
57513: LD_EXP 78
57517: AND
57518: IFFALSE 57647
57520: GO 57522
57522: DISABLE
57523: LD_INT 0
57525: PPUSH
// begin uc_side := 0 ;
57526: LD_ADDR_OWVAR 20
57530: PUSH
57531: LD_INT 0
57533: ST_TO_ADDR
// uc_nation := nation_arabian ;
57534: LD_ADDR_OWVAR 21
57538: PUSH
57539: LD_INT 2
57541: ST_TO_ADDR
// hc_gallery :=  ;
57542: LD_ADDR_OWVAR 33
57546: PUSH
57547: LD_STRING 
57549: ST_TO_ADDR
// hc_name :=  ;
57550: LD_ADDR_OWVAR 26
57554: PUSH
57555: LD_STRING 
57557: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57558: LD_INT 1
57560: PPUSH
57561: LD_INT 11
57563: PPUSH
57564: LD_INT 10
57566: PPUSH
57567: CALL_OW 380
// un := CreateHuman ;
57571: LD_ADDR_VAR 0 1
57575: PUSH
57576: CALL_OW 44
57580: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57581: LD_VAR 0 1
57585: PPUSH
57586: LD_INT 1
57588: PPUSH
57589: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57593: LD_INT 35
57595: PPUSH
57596: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57600: LD_VAR 0 1
57604: PPUSH
57605: LD_INT 22
57607: PUSH
57608: LD_OWVAR 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PPUSH
57617: CALL_OW 69
57621: PPUSH
57622: LD_VAR 0 1
57626: PPUSH
57627: CALL_OW 74
57631: PPUSH
57632: CALL_OW 115
// until IsDead ( un ) ;
57636: LD_VAR 0 1
57640: PPUSH
57641: CALL_OW 301
57645: IFFALSE 57593
// end ;
57647: PPOPN 1
57649: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57650: LD_EXP 40
57654: PUSH
57655: LD_EXP 80
57659: AND
57660: IFFALSE 57672
57662: GO 57664
57664: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57665: LD_STRING earthquake(getX(game), 0, 32)
57667: PPUSH
57668: CALL_OW 559
57672: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57673: LD_EXP 40
57677: PUSH
57678: LD_EXP 81
57682: AND
57683: IFFALSE 57774
57685: GO 57687
57687: DISABLE
57688: LD_INT 0
57690: PPUSH
// begin enable ;
57691: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57692: LD_ADDR_VAR 0 1
57696: PUSH
57697: LD_INT 22
57699: PUSH
57700: LD_OWVAR 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 21
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 33
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: PPUSH
57734: CALL_OW 69
57738: ST_TO_ADDR
// if not tmp then
57739: LD_VAR 0 1
57743: NOT
57744: IFFALSE 57748
// exit ;
57746: GO 57774
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57748: LD_VAR 0 1
57752: PUSH
57753: LD_INT 1
57755: PPUSH
57756: LD_VAR 0 1
57760: PPUSH
57761: CALL_OW 12
57765: ARRAY
57766: PPUSH
57767: LD_INT 1
57769: PPUSH
57770: CALL_OW 234
// end ;
57774: PPOPN 1
57776: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57777: LD_EXP 40
57781: PUSH
57782: LD_EXP 82
57786: AND
57787: IFFALSE 57928
57789: GO 57791
57791: DISABLE
57792: LD_INT 0
57794: PPUSH
57795: PPUSH
57796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57797: LD_ADDR_VAR 0 3
57801: PUSH
57802: LD_INT 22
57804: PUSH
57805: LD_OWVAR 2
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 25
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PPUSH
57828: CALL_OW 69
57832: ST_TO_ADDR
// if not tmp then
57833: LD_VAR 0 3
57837: NOT
57838: IFFALSE 57842
// exit ;
57840: GO 57928
// un := tmp [ rand ( 1 , tmp ) ] ;
57842: LD_ADDR_VAR 0 2
57846: PUSH
57847: LD_VAR 0 3
57851: PUSH
57852: LD_INT 1
57854: PPUSH
57855: LD_VAR 0 3
57859: PPUSH
57860: CALL_OW 12
57864: ARRAY
57865: ST_TO_ADDR
// if Crawls ( un ) then
57866: LD_VAR 0 2
57870: PPUSH
57871: CALL_OW 318
57875: IFFALSE 57886
// ComWalk ( un ) ;
57877: LD_VAR 0 2
57881: PPUSH
57882: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57886: LD_VAR 0 2
57890: PPUSH
57891: LD_INT 9
57893: PPUSH
57894: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57898: LD_INT 28
57900: PPUSH
57901: LD_OWVAR 2
57905: PPUSH
57906: LD_INT 2
57908: PPUSH
57909: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57913: LD_INT 29
57915: PPUSH
57916: LD_OWVAR 2
57920: PPUSH
57921: LD_INT 2
57923: PPUSH
57924: CALL_OW 322
// end ;
57928: PPOPN 3
57930: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57931: LD_EXP 40
57935: PUSH
57936: LD_EXP 83
57940: AND
57941: IFFALSE 58052
57943: GO 57945
57945: DISABLE
57946: LD_INT 0
57948: PPUSH
57949: PPUSH
57950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57951: LD_ADDR_VAR 0 3
57955: PUSH
57956: LD_INT 22
57958: PUSH
57959: LD_OWVAR 2
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 25
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PPUSH
57982: CALL_OW 69
57986: ST_TO_ADDR
// if not tmp then
57987: LD_VAR 0 3
57991: NOT
57992: IFFALSE 57996
// exit ;
57994: GO 58052
// un := tmp [ rand ( 1 , tmp ) ] ;
57996: LD_ADDR_VAR 0 2
58000: PUSH
58001: LD_VAR 0 3
58005: PUSH
58006: LD_INT 1
58008: PPUSH
58009: LD_VAR 0 3
58013: PPUSH
58014: CALL_OW 12
58018: ARRAY
58019: ST_TO_ADDR
// if Crawls ( un ) then
58020: LD_VAR 0 2
58024: PPUSH
58025: CALL_OW 318
58029: IFFALSE 58040
// ComWalk ( un ) ;
58031: LD_VAR 0 2
58035: PPUSH
58036: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58040: LD_VAR 0 2
58044: PPUSH
58045: LD_INT 8
58047: PPUSH
58048: CALL_OW 336
// end ;
58052: PPOPN 3
58054: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58055: LD_EXP 40
58059: PUSH
58060: LD_EXP 84
58064: AND
58065: IFFALSE 58209
58067: GO 58069
58069: DISABLE
58070: LD_INT 0
58072: PPUSH
58073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58074: LD_ADDR_VAR 0 2
58078: PUSH
58079: LD_INT 22
58081: PUSH
58082: LD_OWVAR 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 21
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 34
58106: PUSH
58107: LD_INT 12
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 34
58116: PUSH
58117: LD_INT 51
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 34
58126: PUSH
58127: LD_INT 32
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: LIST
58144: PPUSH
58145: CALL_OW 69
58149: ST_TO_ADDR
// if not tmp then
58150: LD_VAR 0 2
58154: NOT
58155: IFFALSE 58159
// exit ;
58157: GO 58209
// for i in tmp do
58159: LD_ADDR_VAR 0 1
58163: PUSH
58164: LD_VAR 0 2
58168: PUSH
58169: FOR_IN
58170: IFFALSE 58207
// if GetCargo ( i , mat_artifact ) = 0 then
58172: LD_VAR 0 1
58176: PPUSH
58177: LD_INT 4
58179: PPUSH
58180: CALL_OW 289
58184: PUSH
58185: LD_INT 0
58187: EQUAL
58188: IFFALSE 58205
// SetCargo ( i , mat_siberit , 100 ) ;
58190: LD_VAR 0 1
58194: PPUSH
58195: LD_INT 3
58197: PPUSH
58198: LD_INT 100
58200: PPUSH
58201: CALL_OW 290
58205: GO 58169
58207: POP
58208: POP
// end ;
58209: PPOPN 2
58211: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58212: LD_EXP 40
58216: PUSH
58217: LD_EXP 85
58221: AND
58222: IFFALSE 58405
58224: GO 58226
58226: DISABLE
58227: LD_INT 0
58229: PPUSH
58230: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58231: LD_ADDR_VAR 0 2
58235: PUSH
58236: LD_INT 22
58238: PUSH
58239: LD_OWVAR 2
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PPUSH
58248: CALL_OW 69
58252: ST_TO_ADDR
// if not tmp then
58253: LD_VAR 0 2
58257: NOT
58258: IFFALSE 58262
// exit ;
58260: GO 58405
// for i := 1 to 2 do
58262: LD_ADDR_VAR 0 1
58266: PUSH
58267: DOUBLE
58268: LD_INT 1
58270: DEC
58271: ST_TO_ADDR
58272: LD_INT 2
58274: PUSH
58275: FOR_TO
58276: IFFALSE 58403
// begin uc_side := your_side ;
58278: LD_ADDR_OWVAR 20
58282: PUSH
58283: LD_OWVAR 2
58287: ST_TO_ADDR
// uc_nation := nation_american ;
58288: LD_ADDR_OWVAR 21
58292: PUSH
58293: LD_INT 1
58295: ST_TO_ADDR
// vc_chassis := us_morphling ;
58296: LD_ADDR_OWVAR 37
58300: PUSH
58301: LD_INT 5
58303: ST_TO_ADDR
// vc_engine := engine_siberite ;
58304: LD_ADDR_OWVAR 39
58308: PUSH
58309: LD_INT 3
58311: ST_TO_ADDR
// vc_control := control_computer ;
58312: LD_ADDR_OWVAR 38
58316: PUSH
58317: LD_INT 3
58319: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58320: LD_ADDR_OWVAR 40
58324: PUSH
58325: LD_INT 10
58327: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58328: LD_VAR 0 2
58332: PUSH
58333: LD_INT 1
58335: ARRAY
58336: PPUSH
58337: CALL_OW 310
58341: NOT
58342: IFFALSE 58389
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58344: CALL_OW 45
58348: PPUSH
58349: LD_VAR 0 2
58353: PUSH
58354: LD_INT 1
58356: ARRAY
58357: PPUSH
58358: CALL_OW 250
58362: PPUSH
58363: LD_VAR 0 2
58367: PUSH
58368: LD_INT 1
58370: ARRAY
58371: PPUSH
58372: CALL_OW 251
58376: PPUSH
58377: LD_INT 12
58379: PPUSH
58380: LD_INT 1
58382: PPUSH
58383: CALL_OW 50
58387: GO 58401
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58389: CALL_OW 45
58393: PPUSH
58394: LD_INT 1
58396: PPUSH
58397: CALL_OW 51
// end ;
58401: GO 58275
58403: POP
58404: POP
// end ;
58405: PPOPN 2
58407: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58408: LD_EXP 40
58412: PUSH
58413: LD_EXP 86
58417: AND
58418: IFFALSE 58640
58420: GO 58422
58422: DISABLE
58423: LD_INT 0
58425: PPUSH
58426: PPUSH
58427: PPUSH
58428: PPUSH
58429: PPUSH
58430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58431: LD_ADDR_VAR 0 6
58435: PUSH
58436: LD_INT 22
58438: PUSH
58439: LD_OWVAR 2
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 21
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: LD_INT 23
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: PPUSH
58480: CALL_OW 69
58484: ST_TO_ADDR
// if not tmp then
58485: LD_VAR 0 6
58489: NOT
58490: IFFALSE 58494
// exit ;
58492: GO 58640
// s1 := rand ( 1 , 4 ) ;
58494: LD_ADDR_VAR 0 2
58498: PUSH
58499: LD_INT 1
58501: PPUSH
58502: LD_INT 4
58504: PPUSH
58505: CALL_OW 12
58509: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58510: LD_ADDR_VAR 0 4
58514: PUSH
58515: LD_VAR 0 6
58519: PUSH
58520: LD_INT 1
58522: ARRAY
58523: PPUSH
58524: LD_VAR 0 2
58528: PPUSH
58529: CALL_OW 259
58533: ST_TO_ADDR
// if s1 = 1 then
58534: LD_VAR 0 2
58538: PUSH
58539: LD_INT 1
58541: EQUAL
58542: IFFALSE 58562
// s2 := rand ( 2 , 4 ) else
58544: LD_ADDR_VAR 0 3
58548: PUSH
58549: LD_INT 2
58551: PPUSH
58552: LD_INT 4
58554: PPUSH
58555: CALL_OW 12
58559: ST_TO_ADDR
58560: GO 58570
// s2 := 1 ;
58562: LD_ADDR_VAR 0 3
58566: PUSH
58567: LD_INT 1
58569: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58570: LD_ADDR_VAR 0 5
58574: PUSH
58575: LD_VAR 0 6
58579: PUSH
58580: LD_INT 1
58582: ARRAY
58583: PPUSH
58584: LD_VAR 0 3
58588: PPUSH
58589: CALL_OW 259
58593: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58594: LD_VAR 0 6
58598: PUSH
58599: LD_INT 1
58601: ARRAY
58602: PPUSH
58603: LD_VAR 0 2
58607: PPUSH
58608: LD_VAR 0 5
58612: PPUSH
58613: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58617: LD_VAR 0 6
58621: PUSH
58622: LD_INT 1
58624: ARRAY
58625: PPUSH
58626: LD_VAR 0 3
58630: PPUSH
58631: LD_VAR 0 4
58635: PPUSH
58636: CALL_OW 237
// end ;
58640: PPOPN 6
58642: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58643: LD_EXP 40
58647: PUSH
58648: LD_EXP 87
58652: AND
58653: IFFALSE 58732
58655: GO 58657
58657: DISABLE
58658: LD_INT 0
58660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58661: LD_ADDR_VAR 0 1
58665: PUSH
58666: LD_INT 22
58668: PUSH
58669: LD_OWVAR 2
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 30
58680: PUSH
58681: LD_INT 3
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PPUSH
58692: CALL_OW 69
58696: ST_TO_ADDR
// if not tmp then
58697: LD_VAR 0 1
58701: NOT
58702: IFFALSE 58706
// exit ;
58704: GO 58732
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58706: LD_VAR 0 1
58710: PUSH
58711: LD_INT 1
58713: PPUSH
58714: LD_VAR 0 1
58718: PPUSH
58719: CALL_OW 12
58723: ARRAY
58724: PPUSH
58725: LD_INT 1
58727: PPUSH
58728: CALL_OW 234
// end ;
58732: PPOPN 1
58734: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58735: LD_EXP 40
58739: PUSH
58740: LD_EXP 88
58744: AND
58745: IFFALSE 58857
58747: GO 58749
58749: DISABLE
58750: LD_INT 0
58752: PPUSH
58753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58754: LD_ADDR_VAR 0 2
58758: PUSH
58759: LD_INT 22
58761: PUSH
58762: LD_OWVAR 2
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: LD_INT 30
58776: PUSH
58777: LD_INT 27
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 30
58786: PUSH
58787: LD_INT 26
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 30
58796: PUSH
58797: LD_INT 28
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PPUSH
58814: CALL_OW 69
58818: ST_TO_ADDR
// if not tmp then
58819: LD_VAR 0 2
58823: NOT
58824: IFFALSE 58828
// exit ;
58826: GO 58857
// for i in tmp do
58828: LD_ADDR_VAR 0 1
58832: PUSH
58833: LD_VAR 0 2
58837: PUSH
58838: FOR_IN
58839: IFFALSE 58855
// SetLives ( i , 1 ) ;
58841: LD_VAR 0 1
58845: PPUSH
58846: LD_INT 1
58848: PPUSH
58849: CALL_OW 234
58853: GO 58838
58855: POP
58856: POP
// end ;
58857: PPOPN 2
58859: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58860: LD_EXP 40
58864: PUSH
58865: LD_EXP 89
58869: AND
58870: IFFALSE 59157
58872: GO 58874
58874: DISABLE
58875: LD_INT 0
58877: PPUSH
58878: PPUSH
58879: PPUSH
// begin i := rand ( 1 , 7 ) ;
58880: LD_ADDR_VAR 0 1
58884: PUSH
58885: LD_INT 1
58887: PPUSH
58888: LD_INT 7
58890: PPUSH
58891: CALL_OW 12
58895: ST_TO_ADDR
// case i of 1 :
58896: LD_VAR 0 1
58900: PUSH
58901: LD_INT 1
58903: DOUBLE
58904: EQUAL
58905: IFTRUE 58909
58907: GO 58919
58909: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58910: LD_STRING earthquake(getX(game), 0, 32)
58912: PPUSH
58913: CALL_OW 559
58917: GO 59157
58919: LD_INT 2
58921: DOUBLE
58922: EQUAL
58923: IFTRUE 58927
58925: GO 58941
58927: POP
// begin ToLua ( displayStucuk(); ) ;
58928: LD_STRING displayStucuk();
58930: PPUSH
58931: CALL_OW 559
// ResetFog ;
58935: CALL_OW 335
// end ; 3 :
58939: GO 59157
58941: LD_INT 3
58943: DOUBLE
58944: EQUAL
58945: IFTRUE 58949
58947: GO 59053
58949: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58950: LD_ADDR_VAR 0 2
58954: PUSH
58955: LD_INT 22
58957: PUSH
58958: LD_OWVAR 2
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 25
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PPUSH
58981: CALL_OW 69
58985: ST_TO_ADDR
// if not tmp then
58986: LD_VAR 0 2
58990: NOT
58991: IFFALSE 58995
// exit ;
58993: GO 59157
// un := tmp [ rand ( 1 , tmp ) ] ;
58995: LD_ADDR_VAR 0 3
58999: PUSH
59000: LD_VAR 0 2
59004: PUSH
59005: LD_INT 1
59007: PPUSH
59008: LD_VAR 0 2
59012: PPUSH
59013: CALL_OW 12
59017: ARRAY
59018: ST_TO_ADDR
// if Crawls ( un ) then
59019: LD_VAR 0 3
59023: PPUSH
59024: CALL_OW 318
59028: IFFALSE 59039
// ComWalk ( un ) ;
59030: LD_VAR 0 3
59034: PPUSH
59035: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59039: LD_VAR 0 3
59043: PPUSH
59044: LD_INT 8
59046: PPUSH
59047: CALL_OW 336
// end ; 4 :
59051: GO 59157
59053: LD_INT 4
59055: DOUBLE
59056: EQUAL
59057: IFTRUE 59061
59059: GO 59135
59061: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59062: LD_ADDR_VAR 0 2
59066: PUSH
59067: LD_INT 22
59069: PUSH
59070: LD_OWVAR 2
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 30
59081: PUSH
59082: LD_INT 29
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PPUSH
59093: CALL_OW 69
59097: ST_TO_ADDR
// if not tmp then
59098: LD_VAR 0 2
59102: NOT
59103: IFFALSE 59107
// exit ;
59105: GO 59157
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59107: LD_VAR 0 2
59111: PUSH
59112: LD_INT 1
59114: ARRAY
59115: PPUSH
59116: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59120: LD_VAR 0 2
59124: PUSH
59125: LD_INT 1
59127: ARRAY
59128: PPUSH
59129: CALL_OW 65
// end ; 5 .. 7 :
59133: GO 59157
59135: LD_INT 5
59137: DOUBLE
59138: GREATEREQUAL
59139: IFFALSE 59147
59141: LD_INT 7
59143: DOUBLE
59144: LESSEQUAL
59145: IFTRUE 59149
59147: GO 59156
59149: POP
// StreamSibBomb ; end ;
59150: CALL 55394 0 0
59154: GO 59157
59156: POP
// end ;
59157: PPOPN 3
59159: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59160: LD_EXP 40
59164: PUSH
59165: LD_EXP 90
59169: AND
59170: IFFALSE 59326
59172: GO 59174
59174: DISABLE
59175: LD_INT 0
59177: PPUSH
59178: PPUSH
59179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59180: LD_ADDR_VAR 0 2
59184: PUSH
59185: LD_INT 81
59187: PUSH
59188: LD_OWVAR 2
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: LD_INT 21
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 21
59212: PUSH
59213: LD_INT 2
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PPUSH
59229: CALL_OW 69
59233: ST_TO_ADDR
// if not tmp then
59234: LD_VAR 0 2
59238: NOT
59239: IFFALSE 59243
// exit ;
59241: GO 59326
// p := 0 ;
59243: LD_ADDR_VAR 0 3
59247: PUSH
59248: LD_INT 0
59250: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59251: LD_INT 35
59253: PPUSH
59254: CALL_OW 67
// p := p + 1 ;
59258: LD_ADDR_VAR 0 3
59262: PUSH
59263: LD_VAR 0 3
59267: PUSH
59268: LD_INT 1
59270: PLUS
59271: ST_TO_ADDR
// for i in tmp do
59272: LD_ADDR_VAR 0 1
59276: PUSH
59277: LD_VAR 0 2
59281: PUSH
59282: FOR_IN
59283: IFFALSE 59314
// if GetLives ( i ) < 1000 then
59285: LD_VAR 0 1
59289: PPUSH
59290: CALL_OW 256
59294: PUSH
59295: LD_INT 1000
59297: LESS
59298: IFFALSE 59312
// SetLives ( i , 1000 ) ;
59300: LD_VAR 0 1
59304: PPUSH
59305: LD_INT 1000
59307: PPUSH
59308: CALL_OW 234
59312: GO 59282
59314: POP
59315: POP
// until p > 20 ;
59316: LD_VAR 0 3
59320: PUSH
59321: LD_INT 20
59323: GREATER
59324: IFFALSE 59251
// end ;
59326: PPOPN 3
59328: END
// every 0 0$1 trigger StreamModeActive and sTime do
59329: LD_EXP 40
59333: PUSH
59334: LD_EXP 91
59338: AND
59339: IFFALSE 59374
59341: GO 59343
59343: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59344: LD_INT 28
59346: PPUSH
59347: LD_OWVAR 2
59351: PPUSH
59352: LD_INT 2
59354: PPUSH
59355: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59359: LD_INT 30
59361: PPUSH
59362: LD_OWVAR 2
59366: PPUSH
59367: LD_INT 2
59369: PPUSH
59370: CALL_OW 322
// end ;
59374: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59375: LD_EXP 40
59379: PUSH
59380: LD_EXP 92
59384: AND
59385: IFFALSE 59506
59387: GO 59389
59389: DISABLE
59390: LD_INT 0
59392: PPUSH
59393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59394: LD_ADDR_VAR 0 2
59398: PUSH
59399: LD_INT 22
59401: PUSH
59402: LD_OWVAR 2
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 21
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: LD_INT 23
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: LIST
59442: PPUSH
59443: CALL_OW 69
59447: ST_TO_ADDR
// if not tmp then
59448: LD_VAR 0 2
59452: NOT
59453: IFFALSE 59457
// exit ;
59455: GO 59506
// for i in tmp do
59457: LD_ADDR_VAR 0 1
59461: PUSH
59462: LD_VAR 0 2
59466: PUSH
59467: FOR_IN
59468: IFFALSE 59504
// begin if Crawls ( i ) then
59470: LD_VAR 0 1
59474: PPUSH
59475: CALL_OW 318
59479: IFFALSE 59490
// ComWalk ( i ) ;
59481: LD_VAR 0 1
59485: PPUSH
59486: CALL_OW 138
// SetClass ( i , 2 ) ;
59490: LD_VAR 0 1
59494: PPUSH
59495: LD_INT 2
59497: PPUSH
59498: CALL_OW 336
// end ;
59502: GO 59467
59504: POP
59505: POP
// end ;
59506: PPOPN 2
59508: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59509: LD_EXP 40
59513: PUSH
59514: LD_EXP 93
59518: AND
59519: IFFALSE 59807
59521: GO 59523
59523: DISABLE
59524: LD_INT 0
59526: PPUSH
59527: PPUSH
59528: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59529: LD_OWVAR 2
59533: PPUSH
59534: LD_INT 9
59536: PPUSH
59537: LD_INT 1
59539: PPUSH
59540: LD_INT 1
59542: PPUSH
59543: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59547: LD_INT 9
59549: PPUSH
59550: LD_OWVAR 2
59554: PPUSH
59555: CALL_OW 343
// uc_side := 9 ;
59559: LD_ADDR_OWVAR 20
59563: PUSH
59564: LD_INT 9
59566: ST_TO_ADDR
// uc_nation := 2 ;
59567: LD_ADDR_OWVAR 21
59571: PUSH
59572: LD_INT 2
59574: ST_TO_ADDR
// hc_name := Dark Warrior ;
59575: LD_ADDR_OWVAR 26
59579: PUSH
59580: LD_STRING Dark Warrior
59582: ST_TO_ADDR
// hc_gallery :=  ;
59583: LD_ADDR_OWVAR 33
59587: PUSH
59588: LD_STRING 
59590: ST_TO_ADDR
// hc_noskilllimit := true ;
59591: LD_ADDR_OWVAR 76
59595: PUSH
59596: LD_INT 1
59598: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59599: LD_ADDR_OWVAR 31
59603: PUSH
59604: LD_INT 30
59606: PUSH
59607: LD_INT 30
59609: PUSH
59610: LD_INT 30
59612: PUSH
59613: LD_INT 30
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: ST_TO_ADDR
// un := CreateHuman ;
59622: LD_ADDR_VAR 0 3
59626: PUSH
59627: CALL_OW 44
59631: ST_TO_ADDR
// hc_noskilllimit := false ;
59632: LD_ADDR_OWVAR 76
59636: PUSH
59637: LD_INT 0
59639: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59640: LD_VAR 0 3
59644: PPUSH
59645: LD_INT 1
59647: PPUSH
59648: CALL_OW 51
// ToLua ( playRanger() ) ;
59652: LD_STRING playRanger()
59654: PPUSH
59655: CALL_OW 559
// p := 0 ;
59659: LD_ADDR_VAR 0 2
59663: PUSH
59664: LD_INT 0
59666: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59667: LD_INT 35
59669: PPUSH
59670: CALL_OW 67
// p := p + 1 ;
59674: LD_ADDR_VAR 0 2
59678: PUSH
59679: LD_VAR 0 2
59683: PUSH
59684: LD_INT 1
59686: PLUS
59687: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59688: LD_VAR 0 3
59692: PPUSH
59693: CALL_OW 256
59697: PUSH
59698: LD_INT 1000
59700: LESS
59701: IFFALSE 59715
// SetLives ( un , 1000 ) ;
59703: LD_VAR 0 3
59707: PPUSH
59708: LD_INT 1000
59710: PPUSH
59711: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59715: LD_VAR 0 3
59719: PPUSH
59720: LD_INT 81
59722: PUSH
59723: LD_OWVAR 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 91
59734: PUSH
59735: LD_VAR 0 3
59739: PUSH
59740: LD_INT 30
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PPUSH
59752: CALL_OW 69
59756: PPUSH
59757: LD_VAR 0 3
59761: PPUSH
59762: CALL_OW 74
59766: PPUSH
59767: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59771: LD_VAR 0 2
59775: PUSH
59776: LD_INT 80
59778: GREATER
59779: PUSH
59780: LD_VAR 0 3
59784: PPUSH
59785: CALL_OW 301
59789: OR
59790: IFFALSE 59667
// if un then
59792: LD_VAR 0 3
59796: IFFALSE 59807
// RemoveUnit ( un ) ;
59798: LD_VAR 0 3
59802: PPUSH
59803: CALL_OW 64
// end ;
59807: PPOPN 3
59809: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59810: LD_EXP 94
59814: IFFALSE 59930
59816: GO 59818
59818: DISABLE
59819: LD_INT 0
59821: PPUSH
59822: PPUSH
59823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59824: LD_ADDR_VAR 0 2
59828: PUSH
59829: LD_INT 81
59831: PUSH
59832: LD_OWVAR 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 21
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PPUSH
59855: CALL_OW 69
59859: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59860: LD_STRING playComputer()
59862: PPUSH
59863: CALL_OW 559
// if not tmp then
59867: LD_VAR 0 2
59871: NOT
59872: IFFALSE 59876
// exit ;
59874: GO 59930
// for i in tmp do
59876: LD_ADDR_VAR 0 1
59880: PUSH
59881: LD_VAR 0 2
59885: PUSH
59886: FOR_IN
59887: IFFALSE 59928
// for j := 1 to 4 do
59889: LD_ADDR_VAR 0 3
59893: PUSH
59894: DOUBLE
59895: LD_INT 1
59897: DEC
59898: ST_TO_ADDR
59899: LD_INT 4
59901: PUSH
59902: FOR_TO
59903: IFFALSE 59924
// SetSkill ( i , j , 10 ) ;
59905: LD_VAR 0 1
59909: PPUSH
59910: LD_VAR 0 3
59914: PPUSH
59915: LD_INT 10
59917: PPUSH
59918: CALL_OW 237
59922: GO 59902
59924: POP
59925: POP
59926: GO 59886
59928: POP
59929: POP
// end ;
59930: PPOPN 3
59932: END
// every 0 0$1 trigger s30 do var i , tmp ;
59933: LD_EXP 95
59937: IFFALSE 60006
59939: GO 59941
59941: DISABLE
59942: LD_INT 0
59944: PPUSH
59945: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59946: LD_ADDR_VAR 0 2
59950: PUSH
59951: LD_INT 22
59953: PUSH
59954: LD_OWVAR 2
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PPUSH
59963: CALL_OW 69
59967: ST_TO_ADDR
// if not tmp then
59968: LD_VAR 0 2
59972: NOT
59973: IFFALSE 59977
// exit ;
59975: GO 60006
// for i in tmp do
59977: LD_ADDR_VAR 0 1
59981: PUSH
59982: LD_VAR 0 2
59986: PUSH
59987: FOR_IN
59988: IFFALSE 60004
// SetLives ( i , 300 ) ;
59990: LD_VAR 0 1
59994: PPUSH
59995: LD_INT 300
59997: PPUSH
59998: CALL_OW 234
60002: GO 59987
60004: POP
60005: POP
// end ;
60006: PPOPN 2
60008: END
// every 0 0$1 trigger s60 do var i , tmp ;
60009: LD_EXP 96
60013: IFFALSE 60082
60015: GO 60017
60017: DISABLE
60018: LD_INT 0
60020: PPUSH
60021: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60022: LD_ADDR_VAR 0 2
60026: PUSH
60027: LD_INT 22
60029: PUSH
60030: LD_OWVAR 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PPUSH
60039: CALL_OW 69
60043: ST_TO_ADDR
// if not tmp then
60044: LD_VAR 0 2
60048: NOT
60049: IFFALSE 60053
// exit ;
60051: GO 60082
// for i in tmp do
60053: LD_ADDR_VAR 0 1
60057: PUSH
60058: LD_VAR 0 2
60062: PUSH
60063: FOR_IN
60064: IFFALSE 60080
// SetLives ( i , 600 ) ;
60066: LD_VAR 0 1
60070: PPUSH
60071: LD_INT 600
60073: PPUSH
60074: CALL_OW 234
60078: GO 60063
60080: POP
60081: POP
// end ;
60082: PPOPN 2
60084: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60085: LD_INT 0
60087: PPUSH
// case cmd of 301 :
60088: LD_VAR 0 1
60092: PUSH
60093: LD_INT 301
60095: DOUBLE
60096: EQUAL
60097: IFTRUE 60101
60099: GO 60133
60101: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60102: LD_VAR 0 6
60106: PPUSH
60107: LD_VAR 0 7
60111: PPUSH
60112: LD_VAR 0 8
60116: PPUSH
60117: LD_VAR 0 4
60121: PPUSH
60122: LD_VAR 0 5
60126: PPUSH
60127: CALL 61334 0 5
60131: GO 60254
60133: LD_INT 302
60135: DOUBLE
60136: EQUAL
60137: IFTRUE 60141
60139: GO 60178
60141: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60142: LD_VAR 0 6
60146: PPUSH
60147: LD_VAR 0 7
60151: PPUSH
60152: LD_VAR 0 8
60156: PPUSH
60157: LD_VAR 0 9
60161: PPUSH
60162: LD_VAR 0 4
60166: PPUSH
60167: LD_VAR 0 5
60171: PPUSH
60172: CALL 61425 0 6
60176: GO 60254
60178: LD_INT 303
60180: DOUBLE
60181: EQUAL
60182: IFTRUE 60186
60184: GO 60223
60186: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60187: LD_VAR 0 6
60191: PPUSH
60192: LD_VAR 0 7
60196: PPUSH
60197: LD_VAR 0 8
60201: PPUSH
60202: LD_VAR 0 9
60206: PPUSH
60207: LD_VAR 0 4
60211: PPUSH
60212: LD_VAR 0 5
60216: PPUSH
60217: CALL 60259 0 6
60221: GO 60254
60223: LD_INT 304
60225: DOUBLE
60226: EQUAL
60227: IFTRUE 60231
60229: GO 60253
60231: POP
// hHackTeleport ( unit , x , y ) ; end ;
60232: LD_VAR 0 2
60236: PPUSH
60237: LD_VAR 0 4
60241: PPUSH
60242: LD_VAR 0 5
60246: PPUSH
60247: CALL 62018 0 3
60251: GO 60254
60253: POP
// end ;
60254: LD_VAR 0 12
60258: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60259: LD_INT 0
60261: PPUSH
60262: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60263: LD_VAR 0 1
60267: PUSH
60268: LD_INT 1
60270: LESS
60271: PUSH
60272: LD_VAR 0 1
60276: PUSH
60277: LD_INT 3
60279: GREATER
60280: OR
60281: PUSH
60282: LD_VAR 0 5
60286: PPUSH
60287: LD_VAR 0 6
60291: PPUSH
60292: CALL_OW 428
60296: OR
60297: IFFALSE 60301
// exit ;
60299: GO 61021
// uc_side := your_side ;
60301: LD_ADDR_OWVAR 20
60305: PUSH
60306: LD_OWVAR 2
60310: ST_TO_ADDR
// uc_nation := nation ;
60311: LD_ADDR_OWVAR 21
60315: PUSH
60316: LD_VAR 0 1
60320: ST_TO_ADDR
// bc_level = 1 ;
60321: LD_ADDR_OWVAR 43
60325: PUSH
60326: LD_INT 1
60328: ST_TO_ADDR
// case btype of 1 :
60329: LD_VAR 0 2
60333: PUSH
60334: LD_INT 1
60336: DOUBLE
60337: EQUAL
60338: IFTRUE 60342
60340: GO 60353
60342: POP
// bc_type := b_depot ; 2 :
60343: LD_ADDR_OWVAR 42
60347: PUSH
60348: LD_INT 0
60350: ST_TO_ADDR
60351: GO 60965
60353: LD_INT 2
60355: DOUBLE
60356: EQUAL
60357: IFTRUE 60361
60359: GO 60372
60361: POP
// bc_type := b_warehouse ; 3 :
60362: LD_ADDR_OWVAR 42
60366: PUSH
60367: LD_INT 1
60369: ST_TO_ADDR
60370: GO 60965
60372: LD_INT 3
60374: DOUBLE
60375: EQUAL
60376: IFTRUE 60380
60378: GO 60391
60380: POP
// bc_type := b_lab ; 4 .. 9 :
60381: LD_ADDR_OWVAR 42
60385: PUSH
60386: LD_INT 6
60388: ST_TO_ADDR
60389: GO 60965
60391: LD_INT 4
60393: DOUBLE
60394: GREATEREQUAL
60395: IFFALSE 60403
60397: LD_INT 9
60399: DOUBLE
60400: LESSEQUAL
60401: IFTRUE 60405
60403: GO 60457
60405: POP
// begin bc_type := b_lab_half ;
60406: LD_ADDR_OWVAR 42
60410: PUSH
60411: LD_INT 7
60413: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60414: LD_ADDR_OWVAR 44
60418: PUSH
60419: LD_INT 10
60421: PUSH
60422: LD_INT 11
60424: PUSH
60425: LD_INT 12
60427: PUSH
60428: LD_INT 15
60430: PUSH
60431: LD_INT 14
60433: PUSH
60434: LD_INT 13
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: PUSH
60445: LD_VAR 0 2
60449: PUSH
60450: LD_INT 3
60452: MINUS
60453: ARRAY
60454: ST_TO_ADDR
// end ; 10 .. 13 :
60455: GO 60965
60457: LD_INT 10
60459: DOUBLE
60460: GREATEREQUAL
60461: IFFALSE 60469
60463: LD_INT 13
60465: DOUBLE
60466: LESSEQUAL
60467: IFTRUE 60471
60469: GO 60548
60471: POP
// begin bc_type := b_lab_full ;
60472: LD_ADDR_OWVAR 42
60476: PUSH
60477: LD_INT 8
60479: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60480: LD_ADDR_OWVAR 44
60484: PUSH
60485: LD_INT 10
60487: PUSH
60488: LD_INT 12
60490: PUSH
60491: LD_INT 14
60493: PUSH
60494: LD_INT 13
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: PUSH
60503: LD_VAR 0 2
60507: PUSH
60508: LD_INT 9
60510: MINUS
60511: ARRAY
60512: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60513: LD_ADDR_OWVAR 45
60517: PUSH
60518: LD_INT 11
60520: PUSH
60521: LD_INT 15
60523: PUSH
60524: LD_INT 12
60526: PUSH
60527: LD_INT 15
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: PUSH
60536: LD_VAR 0 2
60540: PUSH
60541: LD_INT 9
60543: MINUS
60544: ARRAY
60545: ST_TO_ADDR
// end ; 14 :
60546: GO 60965
60548: LD_INT 14
60550: DOUBLE
60551: EQUAL
60552: IFTRUE 60556
60554: GO 60567
60556: POP
// bc_type := b_workshop ; 15 :
60557: LD_ADDR_OWVAR 42
60561: PUSH
60562: LD_INT 2
60564: ST_TO_ADDR
60565: GO 60965
60567: LD_INT 15
60569: DOUBLE
60570: EQUAL
60571: IFTRUE 60575
60573: GO 60586
60575: POP
// bc_type := b_factory ; 16 :
60576: LD_ADDR_OWVAR 42
60580: PUSH
60581: LD_INT 3
60583: ST_TO_ADDR
60584: GO 60965
60586: LD_INT 16
60588: DOUBLE
60589: EQUAL
60590: IFTRUE 60594
60592: GO 60605
60594: POP
// bc_type := b_ext_gun ; 17 :
60595: LD_ADDR_OWVAR 42
60599: PUSH
60600: LD_INT 17
60602: ST_TO_ADDR
60603: GO 60965
60605: LD_INT 17
60607: DOUBLE
60608: EQUAL
60609: IFTRUE 60613
60611: GO 60641
60613: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60614: LD_ADDR_OWVAR 42
60618: PUSH
60619: LD_INT 19
60621: PUSH
60622: LD_INT 23
60624: PUSH
60625: LD_INT 19
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: PUSH
60633: LD_VAR 0 1
60637: ARRAY
60638: ST_TO_ADDR
60639: GO 60965
60641: LD_INT 18
60643: DOUBLE
60644: EQUAL
60645: IFTRUE 60649
60647: GO 60660
60649: POP
// bc_type := b_ext_radar ; 19 :
60650: LD_ADDR_OWVAR 42
60654: PUSH
60655: LD_INT 20
60657: ST_TO_ADDR
60658: GO 60965
60660: LD_INT 19
60662: DOUBLE
60663: EQUAL
60664: IFTRUE 60668
60666: GO 60679
60668: POP
// bc_type := b_ext_radio ; 20 :
60669: LD_ADDR_OWVAR 42
60673: PUSH
60674: LD_INT 22
60676: ST_TO_ADDR
60677: GO 60965
60679: LD_INT 20
60681: DOUBLE
60682: EQUAL
60683: IFTRUE 60687
60685: GO 60698
60687: POP
// bc_type := b_ext_siberium ; 21 :
60688: LD_ADDR_OWVAR 42
60692: PUSH
60693: LD_INT 21
60695: ST_TO_ADDR
60696: GO 60965
60698: LD_INT 21
60700: DOUBLE
60701: EQUAL
60702: IFTRUE 60706
60704: GO 60717
60706: POP
// bc_type := b_ext_computer ; 22 :
60707: LD_ADDR_OWVAR 42
60711: PUSH
60712: LD_INT 24
60714: ST_TO_ADDR
60715: GO 60965
60717: LD_INT 22
60719: DOUBLE
60720: EQUAL
60721: IFTRUE 60725
60723: GO 60736
60725: POP
// bc_type := b_ext_track ; 23 :
60726: LD_ADDR_OWVAR 42
60730: PUSH
60731: LD_INT 16
60733: ST_TO_ADDR
60734: GO 60965
60736: LD_INT 23
60738: DOUBLE
60739: EQUAL
60740: IFTRUE 60744
60742: GO 60755
60744: POP
// bc_type := b_ext_laser ; 24 :
60745: LD_ADDR_OWVAR 42
60749: PUSH
60750: LD_INT 25
60752: ST_TO_ADDR
60753: GO 60965
60755: LD_INT 24
60757: DOUBLE
60758: EQUAL
60759: IFTRUE 60763
60761: GO 60774
60763: POP
// bc_type := b_control_tower ; 25 :
60764: LD_ADDR_OWVAR 42
60768: PUSH
60769: LD_INT 36
60771: ST_TO_ADDR
60772: GO 60965
60774: LD_INT 25
60776: DOUBLE
60777: EQUAL
60778: IFTRUE 60782
60780: GO 60793
60782: POP
// bc_type := b_breastwork ; 26 :
60783: LD_ADDR_OWVAR 42
60787: PUSH
60788: LD_INT 31
60790: ST_TO_ADDR
60791: GO 60965
60793: LD_INT 26
60795: DOUBLE
60796: EQUAL
60797: IFTRUE 60801
60799: GO 60812
60801: POP
// bc_type := b_bunker ; 27 :
60802: LD_ADDR_OWVAR 42
60806: PUSH
60807: LD_INT 32
60809: ST_TO_ADDR
60810: GO 60965
60812: LD_INT 27
60814: DOUBLE
60815: EQUAL
60816: IFTRUE 60820
60818: GO 60831
60820: POP
// bc_type := b_turret ; 28 :
60821: LD_ADDR_OWVAR 42
60825: PUSH
60826: LD_INT 33
60828: ST_TO_ADDR
60829: GO 60965
60831: LD_INT 28
60833: DOUBLE
60834: EQUAL
60835: IFTRUE 60839
60837: GO 60850
60839: POP
// bc_type := b_armoury ; 29 :
60840: LD_ADDR_OWVAR 42
60844: PUSH
60845: LD_INT 4
60847: ST_TO_ADDR
60848: GO 60965
60850: LD_INT 29
60852: DOUBLE
60853: EQUAL
60854: IFTRUE 60858
60856: GO 60869
60858: POP
// bc_type := b_barracks ; 30 :
60859: LD_ADDR_OWVAR 42
60863: PUSH
60864: LD_INT 5
60866: ST_TO_ADDR
60867: GO 60965
60869: LD_INT 30
60871: DOUBLE
60872: EQUAL
60873: IFTRUE 60877
60875: GO 60888
60877: POP
// bc_type := b_solar_power ; 31 :
60878: LD_ADDR_OWVAR 42
60882: PUSH
60883: LD_INT 27
60885: ST_TO_ADDR
60886: GO 60965
60888: LD_INT 31
60890: DOUBLE
60891: EQUAL
60892: IFTRUE 60896
60894: GO 60907
60896: POP
// bc_type := b_oil_power ; 32 :
60897: LD_ADDR_OWVAR 42
60901: PUSH
60902: LD_INT 26
60904: ST_TO_ADDR
60905: GO 60965
60907: LD_INT 32
60909: DOUBLE
60910: EQUAL
60911: IFTRUE 60915
60913: GO 60926
60915: POP
// bc_type := b_siberite_power ; 33 :
60916: LD_ADDR_OWVAR 42
60920: PUSH
60921: LD_INT 28
60923: ST_TO_ADDR
60924: GO 60965
60926: LD_INT 33
60928: DOUBLE
60929: EQUAL
60930: IFTRUE 60934
60932: GO 60945
60934: POP
// bc_type := b_oil_mine ; 34 :
60935: LD_ADDR_OWVAR 42
60939: PUSH
60940: LD_INT 29
60942: ST_TO_ADDR
60943: GO 60965
60945: LD_INT 34
60947: DOUBLE
60948: EQUAL
60949: IFTRUE 60953
60951: GO 60964
60953: POP
// bc_type := b_siberite_mine ; end ;
60954: LD_ADDR_OWVAR 42
60958: PUSH
60959: LD_INT 30
60961: ST_TO_ADDR
60962: GO 60965
60964: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
60965: LD_ADDR_VAR 0 8
60969: PUSH
60970: LD_VAR 0 5
60974: PPUSH
60975: LD_VAR 0 6
60979: PPUSH
60980: LD_VAR 0 3
60984: PPUSH
60985: CALL_OW 47
60989: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
60990: LD_OWVAR 42
60994: PUSH
60995: LD_INT 32
60997: PUSH
60998: LD_INT 33
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: IN
61005: IFFALSE 61021
// PlaceWeaponTurret ( b , weapon ) ;
61007: LD_VAR 0 8
61011: PPUSH
61012: LD_VAR 0 4
61016: PPUSH
61017: CALL_OW 431
// end ;
61021: LD_VAR 0 7
61025: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61026: LD_INT 0
61028: PPUSH
61029: PPUSH
61030: PPUSH
61031: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61032: LD_ADDR_VAR 0 4
61036: PUSH
61037: LD_INT 22
61039: PUSH
61040: LD_OWVAR 2
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: LD_INT 30
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 30
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PPUSH
61081: CALL_OW 69
61085: ST_TO_ADDR
// if not tmp then
61086: LD_VAR 0 4
61090: NOT
61091: IFFALSE 61095
// exit ;
61093: GO 61154
// for i in tmp do
61095: LD_ADDR_VAR 0 2
61099: PUSH
61100: LD_VAR 0 4
61104: PUSH
61105: FOR_IN
61106: IFFALSE 61152
// for j = 1 to 3 do
61108: LD_ADDR_VAR 0 3
61112: PUSH
61113: DOUBLE
61114: LD_INT 1
61116: DEC
61117: ST_TO_ADDR
61118: LD_INT 3
61120: PUSH
61121: FOR_TO
61122: IFFALSE 61148
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61124: LD_VAR 0 2
61128: PPUSH
61129: CALL_OW 274
61133: PPUSH
61134: LD_VAR 0 3
61138: PPUSH
61139: LD_INT 99999
61141: PPUSH
61142: CALL_OW 277
61146: GO 61121
61148: POP
61149: POP
61150: GO 61105
61152: POP
61153: POP
// end ;
61154: LD_VAR 0 1
61158: RET
// export function hHackSetLevel10 ; var i , j ; begin
61159: LD_INT 0
61161: PPUSH
61162: PPUSH
61163: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61164: LD_ADDR_VAR 0 2
61168: PUSH
61169: LD_INT 21
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PPUSH
61179: CALL_OW 69
61183: PUSH
61184: FOR_IN
61185: IFFALSE 61237
// if IsSelected ( i ) then
61187: LD_VAR 0 2
61191: PPUSH
61192: CALL_OW 306
61196: IFFALSE 61235
// begin for j := 1 to 4 do
61198: LD_ADDR_VAR 0 3
61202: PUSH
61203: DOUBLE
61204: LD_INT 1
61206: DEC
61207: ST_TO_ADDR
61208: LD_INT 4
61210: PUSH
61211: FOR_TO
61212: IFFALSE 61233
// SetSkill ( i , j , 10 ) ;
61214: LD_VAR 0 2
61218: PPUSH
61219: LD_VAR 0 3
61223: PPUSH
61224: LD_INT 10
61226: PPUSH
61227: CALL_OW 237
61231: GO 61211
61233: POP
61234: POP
// end ;
61235: GO 61184
61237: POP
61238: POP
// end ;
61239: LD_VAR 0 1
61243: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61244: LD_INT 0
61246: PPUSH
61247: PPUSH
61248: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61249: LD_ADDR_VAR 0 2
61253: PUSH
61254: LD_INT 22
61256: PUSH
61257: LD_OWVAR 2
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 21
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PPUSH
61280: CALL_OW 69
61284: PUSH
61285: FOR_IN
61286: IFFALSE 61327
// begin for j := 1 to 4 do
61288: LD_ADDR_VAR 0 3
61292: PUSH
61293: DOUBLE
61294: LD_INT 1
61296: DEC
61297: ST_TO_ADDR
61298: LD_INT 4
61300: PUSH
61301: FOR_TO
61302: IFFALSE 61323
// SetSkill ( i , j , 10 ) ;
61304: LD_VAR 0 2
61308: PPUSH
61309: LD_VAR 0 3
61313: PPUSH
61314: LD_INT 10
61316: PPUSH
61317: CALL_OW 237
61321: GO 61301
61323: POP
61324: POP
// end ;
61325: GO 61285
61327: POP
61328: POP
// end ;
61329: LD_VAR 0 1
61333: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61334: LD_INT 0
61336: PPUSH
// uc_side := your_side ;
61337: LD_ADDR_OWVAR 20
61341: PUSH
61342: LD_OWVAR 2
61346: ST_TO_ADDR
// uc_nation := nation ;
61347: LD_ADDR_OWVAR 21
61351: PUSH
61352: LD_VAR 0 1
61356: ST_TO_ADDR
// InitHc ;
61357: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61361: LD_INT 0
61363: PPUSH
61364: LD_VAR 0 2
61368: PPUSH
61369: LD_VAR 0 3
61373: PPUSH
61374: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61378: LD_VAR 0 4
61382: PPUSH
61383: LD_VAR 0 5
61387: PPUSH
61388: CALL_OW 428
61392: PUSH
61393: LD_INT 0
61395: EQUAL
61396: IFFALSE 61420
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61398: CALL_OW 44
61402: PPUSH
61403: LD_VAR 0 4
61407: PPUSH
61408: LD_VAR 0 5
61412: PPUSH
61413: LD_INT 1
61415: PPUSH
61416: CALL_OW 48
// end ;
61420: LD_VAR 0 6
61424: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61425: LD_INT 0
61427: PPUSH
61428: PPUSH
// uc_side := your_side ;
61429: LD_ADDR_OWVAR 20
61433: PUSH
61434: LD_OWVAR 2
61438: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61439: LD_VAR 0 1
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: LD_INT 2
61449: PUSH
61450: LD_INT 3
61452: PUSH
61453: LD_INT 4
61455: PUSH
61456: LD_INT 5
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: IN
61466: IFFALSE 61478
// uc_nation := nation_american else
61468: LD_ADDR_OWVAR 21
61472: PUSH
61473: LD_INT 1
61475: ST_TO_ADDR
61476: GO 61521
// if chassis in [ 11 , 12 , 13 , 14 ] then
61478: LD_VAR 0 1
61482: PUSH
61483: LD_INT 11
61485: PUSH
61486: LD_INT 12
61488: PUSH
61489: LD_INT 13
61491: PUSH
61492: LD_INT 14
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: IN
61501: IFFALSE 61513
// uc_nation := nation_arabian else
61503: LD_ADDR_OWVAR 21
61507: PUSH
61508: LD_INT 2
61510: ST_TO_ADDR
61511: GO 61521
// uc_nation := nation_russian ;
61513: LD_ADDR_OWVAR 21
61517: PUSH
61518: LD_INT 3
61520: ST_TO_ADDR
// vc_chassis := chassis ;
61521: LD_ADDR_OWVAR 37
61525: PUSH
61526: LD_VAR 0 1
61530: ST_TO_ADDR
// vc_engine := engine ;
61531: LD_ADDR_OWVAR 39
61535: PUSH
61536: LD_VAR 0 2
61540: ST_TO_ADDR
// vc_control := control ;
61541: LD_ADDR_OWVAR 38
61545: PUSH
61546: LD_VAR 0 3
61550: ST_TO_ADDR
// vc_weapon := weapon ;
61551: LD_ADDR_OWVAR 40
61555: PUSH
61556: LD_VAR 0 4
61560: ST_TO_ADDR
// un := CreateVehicle ;
61561: LD_ADDR_VAR 0 8
61565: PUSH
61566: CALL_OW 45
61570: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61571: LD_VAR 0 8
61575: PPUSH
61576: LD_INT 0
61578: PPUSH
61579: LD_INT 5
61581: PPUSH
61582: CALL_OW 12
61586: PPUSH
61587: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61591: LD_VAR 0 8
61595: PPUSH
61596: LD_VAR 0 5
61600: PPUSH
61601: LD_VAR 0 6
61605: PPUSH
61606: LD_INT 1
61608: PPUSH
61609: CALL_OW 48
// end ;
61613: LD_VAR 0 7
61617: RET
// export hInvincible ; every 1 do
61618: GO 61620
61620: DISABLE
// hInvincible := [ ] ;
61621: LD_ADDR_EXP 97
61625: PUSH
61626: EMPTY
61627: ST_TO_ADDR
61628: END
// every 10 do var i ;
61629: GO 61631
61631: DISABLE
61632: LD_INT 0
61634: PPUSH
// begin enable ;
61635: ENABLE
// if not hInvincible then
61636: LD_EXP 97
61640: NOT
61641: IFFALSE 61645
// exit ;
61643: GO 61689
// for i in hInvincible do
61645: LD_ADDR_VAR 0 1
61649: PUSH
61650: LD_EXP 97
61654: PUSH
61655: FOR_IN
61656: IFFALSE 61687
// if GetLives ( i ) < 1000 then
61658: LD_VAR 0 1
61662: PPUSH
61663: CALL_OW 256
61667: PUSH
61668: LD_INT 1000
61670: LESS
61671: IFFALSE 61685
// SetLives ( i , 1000 ) ;
61673: LD_VAR 0 1
61677: PPUSH
61678: LD_INT 1000
61680: PPUSH
61681: CALL_OW 234
61685: GO 61655
61687: POP
61688: POP
// end ;
61689: PPOPN 1
61691: END
// export function hHackInvincible ; var i ; begin
61692: LD_INT 0
61694: PPUSH
61695: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61696: LD_ADDR_VAR 0 2
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: LD_INT 21
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 21
61716: PUSH
61717: LD_INT 2
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: LIST
61728: PPUSH
61729: CALL_OW 69
61733: PUSH
61734: FOR_IN
61735: IFFALSE 61796
// if IsSelected ( i ) then
61737: LD_VAR 0 2
61741: PPUSH
61742: CALL_OW 306
61746: IFFALSE 61794
// begin if i in hInvincible then
61748: LD_VAR 0 2
61752: PUSH
61753: LD_EXP 97
61757: IN
61758: IFFALSE 61778
// hInvincible := hInvincible diff i else
61760: LD_ADDR_EXP 97
61764: PUSH
61765: LD_EXP 97
61769: PUSH
61770: LD_VAR 0 2
61774: DIFF
61775: ST_TO_ADDR
61776: GO 61794
// hInvincible := hInvincible union i ;
61778: LD_ADDR_EXP 97
61782: PUSH
61783: LD_EXP 97
61787: PUSH
61788: LD_VAR 0 2
61792: UNION
61793: ST_TO_ADDR
// end ;
61794: GO 61734
61796: POP
61797: POP
// end ;
61798: LD_VAR 0 1
61802: RET
// export function hHackInvisible ; var i , j ; begin
61803: LD_INT 0
61805: PPUSH
61806: PPUSH
61807: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61808: LD_ADDR_VAR 0 2
61812: PUSH
61813: LD_INT 21
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PPUSH
61823: CALL_OW 69
61827: PUSH
61828: FOR_IN
61829: IFFALSE 61853
// if IsSelected ( i ) then
61831: LD_VAR 0 2
61835: PPUSH
61836: CALL_OW 306
61840: IFFALSE 61851
// ComForceInvisible ( i ) ;
61842: LD_VAR 0 2
61846: PPUSH
61847: CALL_OW 496
61851: GO 61828
61853: POP
61854: POP
// end ;
61855: LD_VAR 0 1
61859: RET
// export function hHackChangeYourSide ; begin
61860: LD_INT 0
61862: PPUSH
// if your_side = 8 then
61863: LD_OWVAR 2
61867: PUSH
61868: LD_INT 8
61870: EQUAL
61871: IFFALSE 61883
// your_side := 0 else
61873: LD_ADDR_OWVAR 2
61877: PUSH
61878: LD_INT 0
61880: ST_TO_ADDR
61881: GO 61897
// your_side := your_side + 1 ;
61883: LD_ADDR_OWVAR 2
61887: PUSH
61888: LD_OWVAR 2
61892: PUSH
61893: LD_INT 1
61895: PLUS
61896: ST_TO_ADDR
// end ;
61897: LD_VAR 0 1
61901: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61902: LD_INT 0
61904: PPUSH
61905: PPUSH
61906: PPUSH
// for i in all_units do
61907: LD_ADDR_VAR 0 2
61911: PUSH
61912: LD_OWVAR 3
61916: PUSH
61917: FOR_IN
61918: IFFALSE 61996
// if IsSelected ( i ) then
61920: LD_VAR 0 2
61924: PPUSH
61925: CALL_OW 306
61929: IFFALSE 61994
// begin j := GetSide ( i ) ;
61931: LD_ADDR_VAR 0 3
61935: PUSH
61936: LD_VAR 0 2
61940: PPUSH
61941: CALL_OW 255
61945: ST_TO_ADDR
// if j = 8 then
61946: LD_VAR 0 3
61950: PUSH
61951: LD_INT 8
61953: EQUAL
61954: IFFALSE 61966
// j := 0 else
61956: LD_ADDR_VAR 0 3
61960: PUSH
61961: LD_INT 0
61963: ST_TO_ADDR
61964: GO 61980
// j := j + 1 ;
61966: LD_ADDR_VAR 0 3
61970: PUSH
61971: LD_VAR 0 3
61975: PUSH
61976: LD_INT 1
61978: PLUS
61979: ST_TO_ADDR
// SetSide ( i , j ) ;
61980: LD_VAR 0 2
61984: PPUSH
61985: LD_VAR 0 3
61989: PPUSH
61990: CALL_OW 235
// end ;
61994: GO 61917
61996: POP
61997: POP
// end ;
61998: LD_VAR 0 1
62002: RET
// export function hHackFog ; begin
62003: LD_INT 0
62005: PPUSH
// FogOff ( true ) ;
62006: LD_INT 1
62008: PPUSH
62009: CALL_OW 344
// end ;
62013: LD_VAR 0 1
62017: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62018: LD_INT 0
62020: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62021: LD_VAR 0 1
62025: PPUSH
62026: LD_VAR 0 2
62030: PPUSH
62031: LD_VAR 0 3
62035: PPUSH
62036: LD_INT 1
62038: PPUSH
62039: LD_INT 1
62041: PPUSH
62042: CALL_OW 483
// CenterOnXY ( x , y ) ;
62046: LD_VAR 0 2
62050: PPUSH
62051: LD_VAR 0 3
62055: PPUSH
62056: CALL_OW 84
// end ; end_of_file end_of_file
62060: LD_VAR 0 4
62064: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62065: LD_VAR 0 1
62069: PUSH
62070: LD_INT 200
62072: DOUBLE
62073: GREATEREQUAL
62074: IFFALSE 62082
62076: LD_INT 299
62078: DOUBLE
62079: LESSEQUAL
62080: IFTRUE 62084
62082: GO 62116
62084: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62085: LD_VAR 0 1
62089: PPUSH
62090: LD_VAR 0 2
62094: PPUSH
62095: LD_VAR 0 3
62099: PPUSH
62100: LD_VAR 0 4
62104: PPUSH
62105: LD_VAR 0 5
62109: PPUSH
62110: CALL 43469 0 5
62114: GO 62193
62116: LD_INT 300
62118: DOUBLE
62119: GREATEREQUAL
62120: IFFALSE 62128
62122: LD_INT 399
62124: DOUBLE
62125: LESSEQUAL
62126: IFTRUE 62130
62128: GO 62192
62130: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62131: LD_VAR 0 1
62135: PPUSH
62136: LD_VAR 0 2
62140: PPUSH
62141: LD_VAR 0 3
62145: PPUSH
62146: LD_VAR 0 4
62150: PPUSH
62151: LD_VAR 0 5
62155: PPUSH
62156: LD_VAR 0 6
62160: PPUSH
62161: LD_VAR 0 7
62165: PPUSH
62166: LD_VAR 0 8
62170: PPUSH
62171: LD_VAR 0 9
62175: PPUSH
62176: LD_VAR 0 10
62180: PPUSH
62181: LD_VAR 0 11
62185: PPUSH
62186: CALL 60085 0 11
62190: GO 62193
62192: POP
// end ;
62193: PPOPN 11
62195: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62196: LD_VAR 0 1
62200: PPUSH
62201: LD_VAR 0 2
62205: PPUSH
62206: LD_VAR 0 3
62210: PPUSH
62211: LD_VAR 0 4
62215: PPUSH
62216: LD_VAR 0 5
62220: PPUSH
62221: CALL 43205 0 5
// end ; end_of_file
62225: PPOPN 5
62227: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62228: LD_VAR 0 1
62232: PPUSH
62233: LD_VAR 0 2
62237: PPUSH
62238: LD_VAR 0 3
62242: PPUSH
62243: LD_VAR 0 4
62247: PPUSH
62248: LD_VAR 0 5
62252: PPUSH
62253: LD_VAR 0 6
62257: PPUSH
62258: CALL 47778 0 6
// end ;
62262: PPOPN 6
62264: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
62265: CALL 47753 0 0
// end ;
62269: PPOPN 1
62271: END
