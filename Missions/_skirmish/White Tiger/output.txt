// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 2753 0 0
// Init ;
   8: CALL 67 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 28
// Difficulty := 2 else
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 2
  25: ST_TO_ADDR
  26: GO 41
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// PrepareAlliance ;
  41: CALL 83 0 0
// PrepareRussian ;
  45: CALL 452 0 0
// Action ;
  49: CALL 2372 0 0
// if debug then
  53: LD_EXP 1
  57: IFFALSE 66
// FogOff ( 7 ) ;
  59: LD_INT 7
  61: PPUSH
  62: CALL_OW 344
// end ;
  66: END
// export debug ; export function Init ; begin
  67: LD_INT 0
  69: PPUSH
// debug := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// end ; end_of_file
  78: LD_VAR 0 1
  82: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  83: LD_INT 0
  85: PPUSH
  86: PPUSH
  87: PPUSH
// tmp := [ ] ;
  88: LD_ADDR_VAR 0 3
  92: PUSH
  93: EMPTY
  94: ST_TO_ADDR
// uc_side := 7 ;
  95: LD_ADDR_OWVAR 20
  99: PUSH
 100: LD_INT 7
 102: ST_TO_ADDR
// uc_nation := 1 ;
 103: LD_ADDR_OWVAR 21
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 111: LD_INT 5
 113: PPUSH
 114: LD_INT 3
 116: PPUSH
 117: LD_INT 3
 119: PPUSH
 120: LD_EXP 11
 124: PPUSH
 125: LD_INT 100
 127: PPUSH
 128: CALL 7713 0 5
// allianceHack := CreateVehicle ;
 132: LD_ADDR_EXP 2
 136: PUSH
 137: CALL_OW 45
 141: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 142: LD_EXP 2
 146: PPUSH
 147: LD_INT 7
 149: PPUSH
 150: LD_INT 0
 152: PPUSH
 153: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 157: LD_INT 5
 159: PPUSH
 160: LD_INT 3
 162: PPUSH
 163: LD_INT 3
 165: PPUSH
 166: LD_INT 10
 168: PPUSH
 169: LD_INT 100
 171: PPUSH
 172: CALL 7713 0 5
// for i := 1 to 2 do
 176: LD_ADDR_VAR 0 2
 180: PUSH
 181: DOUBLE
 182: LD_INT 1
 184: DEC
 185: ST_TO_ADDR
 186: LD_INT 2
 188: PUSH
 189: FOR_TO
 190: IFFALSE 209
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 192: CALL_OW 45
 196: PPUSH
 197: LD_INT 7
 199: PPUSH
 200: LD_INT 0
 202: PPUSH
 203: CALL_OW 49
 207: GO 189
 209: POP
 210: POP
// uc_side := 4 ;
 211: LD_ADDR_OWVAR 20
 215: PUSH
 216: LD_INT 4
 218: ST_TO_ADDR
// uc_nation := 1 ;
 219: LD_ADDR_OWVAR 21
 223: PUSH
 224: LD_INT 1
 226: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 227: LD_INT 1
 229: PPUSH
 230: LD_INT 9
 232: PPUSH
 233: CALL_OW 383
// allianceMechanic := CreateHuman ;
 237: LD_ADDR_EXP 3
 241: PUSH
 242: CALL_OW 44
 246: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 247: LD_EXP 3
 251: PPUSH
 252: LD_INT 96
 254: PPUSH
 255: CALL_OW 52
// end ;
 259: LD_VAR 0 1
 263: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 264: LD_INT 0
 266: PPUSH
 267: PPUSH
 268: PPUSH
// uc_side := 7 ;
 269: LD_ADDR_OWVAR 20
 273: PUSH
 274: LD_INT 7
 276: ST_TO_ADDR
// uc_nation := 1 ;
 277: LD_ADDR_OWVAR 21
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 285: LD_ADDR_VAR 0 2
 289: PUSH
 290: DOUBLE
 291: LD_INT 1
 293: DEC
 294: ST_TO_ADDR
 295: LD_INT 3
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_OWVAR 67
 313: ARRAY
 314: PUSH
 315: FOR_TO
 316: IFFALSE 386
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 318: LD_INT 5
 320: PPUSH
 321: LD_INT 3
 323: PPUSH
 324: LD_INT 3
 326: PPUSH
 327: LD_INT 7
 329: PPUSH
 330: LD_INT 100
 332: PPUSH
 333: CALL 7713 0 5
// un := CreateVehicle ;
 337: LD_ADDR_VAR 0 3
 341: PUSH
 342: CALL_OW 45
 346: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 347: LD_VAR 0 3
 351: PPUSH
 352: LD_INT 7
 354: PPUSH
 355: LD_INT 0
 357: PPUSH
 358: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 67
 369: PPUSH
 370: LD_INT 95
 372: PPUSH
 373: CALL_OW 111
// wait ( 0 0$2 ) ;
 377: LD_INT 70
 379: PPUSH
 380: CALL_OW 67
// end ;
 384: GO 315
 386: POP
 387: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 388: LD_INT 5
 390: PPUSH
 391: LD_INT 3
 393: PPUSH
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 11
 399: PPUSH
 400: LD_INT 100
 402: PPUSH
 403: CALL 7713 0 5
// un := CreateVehicle ;
 407: LD_ADDR_VAR 0 3
 411: PUSH
 412: CALL_OW 45
 416: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 417: LD_VAR 0 3
 421: PPUSH
 422: LD_INT 7
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 432: LD_VAR 0 3
 436: PPUSH
 437: LD_INT 67
 439: PPUSH
 440: LD_INT 95
 442: PPUSH
 443: CALL_OW 111
// end ; end_of_file
 447: LD_VAR 0 1
 451: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
// uc_side := 3 ;
 457: LD_ADDR_OWVAR 20
 461: PUSH
 462: LD_INT 3
 464: ST_TO_ADDR
// uc_nation := 3 ;
 465: LD_ADDR_OWVAR 21
 469: PUSH
 470: LD_INT 3
 472: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 473: LD_INT 14
 475: PPUSH
 476: CALL_OW 274
 480: PPUSH
 481: LD_INT 1
 483: PPUSH
 484: LD_INT 50000
 486: PPUSH
 487: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 491: LD_INT 14
 493: PPUSH
 494: CALL_OW 274
 498: PPUSH
 499: LD_INT 3
 501: PPUSH
 502: LD_INT 5000
 504: PPUSH
 505: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 509: LD_INT 45
 511: PPUSH
 512: LD_INT 132
 514: PPUSH
 515: LD_INT 89
 517: PPUSH
 518: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 522: LD_ADDR_VAR 0 2
 526: PUSH
 527: LD_INT 21
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PPUSH
 537: CALL_OW 69
 541: PUSH
 542: FOR_IN
 543: IFFALSE 576
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 545: LD_VAR 0 2
 549: PPUSH
 550: LD_INT 6
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 10
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_OWVAR 67
 568: ARRAY
 569: PPUSH
 570: CALL_OW 241
 574: GO 542
 576: POP
 577: POP
// for i := 1 to 4 do
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_INT 4
 590: PUSH
 591: FOR_TO
 592: IFFALSE 618
// begin PrepareMechanic ( false , 9 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 9
 599: PPUSH
 600: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 604: CALL_OW 44
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: CALL_OW 52
// end ;
 616: GO 591
 618: POP
 619: POP
// ruGuard1 := [ ] ;
 620: LD_ADDR_EXP 4
 624: PUSH
 625: EMPTY
 626: ST_TO_ADDR
// ruGuard2 := [ ] ;
 627: LD_ADDR_EXP 5
 631: PUSH
 632: EMPTY
 633: ST_TO_ADDR
// ruGuard3 := [ ] ;
 634: LD_ADDR_EXP 6
 638: PUSH
 639: EMPTY
 640: ST_TO_ADDR
// ruForces := [ ] ;
 641: LD_ADDR_EXP 7
 645: PUSH
 646: EMPTY
 647: ST_TO_ADDR
// ruEng := [ ] ;
 648: LD_ADDR_EXP 8
 652: PUSH
 653: EMPTY
 654: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: DOUBLE
 661: LD_INT 1
 663: DEC
 664: ST_TO_ADDR
 665: LD_INT 4
 667: PUSH
 668: LD_INT 5
 670: PUSH
 671: LD_INT 6
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: PUSH
 679: LD_OWVAR 67
 683: ARRAY
 684: PUSH
 685: FOR_TO
 686: IFFALSE 742
// begin PrepareEngineer ( false , 8 ) ;
 688: LD_INT 0
 690: PPUSH
 691: LD_INT 8
 693: PPUSH
 694: CALL_OW 382
// un := CreateHuman ;
 698: LD_ADDR_VAR 0 3
 702: PUSH
 703: CALL_OW 44
 707: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 708: LD_VAR 0 3
 712: PPUSH
 713: LD_INT 14
 715: PPUSH
 716: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 720: LD_ADDR_EXP 8
 724: PUSH
 725: LD_EXP 8
 729: PPUSH
 730: LD_VAR 0 3
 734: PPUSH
 735: CALL 38759 0 2
 739: ST_TO_ADDR
// end ;
 740: GO 685
 742: POP
 743: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 744: LD_ADDR_VAR 0 2
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_INT 5
 756: PUSH
 757: LD_INT 6
 759: PUSH
 760: LD_INT 7
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: PUSH
 768: LD_OWVAR 67
 772: ARRAY
 773: PUSH
 774: FOR_TO
 775: IFFALSE 885
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 777: LD_INT 24
 779: PPUSH
 780: LD_INT 3
 782: PPUSH
 783: LD_INT 3
 785: PPUSH
 786: LD_INT 46
 788: PUSH
 789: LD_INT 45
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: LD_VAR 0 2
 800: PUSH
 801: LD_INT 2
 803: MOD
 804: PUSH
 805: LD_INT 1
 807: PLUS
 808: ARRAY
 809: PPUSH
 810: LD_INT 100
 812: PPUSH
 813: CALL 7713 0 5
// un := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 4
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 854: LD_ADDR_EXP 4
 858: PUSH
 859: LD_EXP 4
 863: PPUSH
 864: LD_EXP 4
 868: PUSH
 869: LD_INT 1
 871: PLUS
 872: PPUSH
 873: LD_VAR 0 3
 877: PPUSH
 878: CALL_OW 1
 882: ST_TO_ADDR
// end ;
 883: GO 774
 885: POP
 886: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 887: LD_ADDR_VAR 0 2
 891: PUSH
 892: DOUBLE
 893: LD_INT 1
 895: DEC
 896: ST_TO_ADDR
 897: LD_INT 4
 899: PUSH
 900: LD_INT 4
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_OWVAR 67
 915: ARRAY
 916: PUSH
 917: FOR_TO
 918: IFFALSE 1028
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 920: LD_INT 24
 922: PPUSH
 923: LD_INT 3
 925: PPUSH
 926: LD_INT 3
 928: PPUSH
 929: LD_INT 46
 931: PUSH
 932: LD_INT 45
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: MOD
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: PPUSH
 953: LD_INT 100
 955: PPUSH
 956: CALL 7713 0 5
// un := CreateVehicle ;
 960: LD_ADDR_VAR 0 3
 964: PUSH
 965: CALL_OW 45
 969: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 970: LD_VAR 0 3
 974: PPUSH
 975: LD_INT 4
 977: PPUSH
 978: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 982: LD_VAR 0 3
 986: PPUSH
 987: LD_INT 5
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 997: LD_ADDR_EXP 5
1001: PUSH
1002: LD_EXP 5
1006: PPUSH
1007: LD_EXP 5
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: PPUSH
1016: LD_VAR 0 3
1020: PPUSH
1021: CALL_OW 1
1025: ST_TO_ADDR
// end ;
1026: GO 917
1028: POP
1029: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1030: LD_ADDR_VAR 0 2
1034: PUSH
1035: DOUBLE
1036: LD_INT 1
1038: DEC
1039: ST_TO_ADDR
1040: LD_INT 4
1042: PUSH
1043: LD_INT 4
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_OWVAR 67
1058: ARRAY
1059: PUSH
1060: FOR_TO
1061: IFFALSE 1171
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1063: LD_INT 24
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: LD_INT 3
1071: PPUSH
1072: LD_INT 46
1074: PUSH
1075: LD_INT 45
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 2
1089: MOD
1090: PUSH
1091: LD_INT 1
1093: PLUS
1094: ARRAY
1095: PPUSH
1096: LD_INT 100
1098: PPUSH
1099: CALL 7713 0 5
// un := CreateVehicle ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: CALL_OW 45
1112: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_INT 6
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1140: LD_ADDR_EXP 6
1144: PUSH
1145: LD_EXP 6
1149: PPUSH
1150: LD_EXP 6
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 1
1168: ST_TO_ADDR
// end ;
1169: GO 1060
1171: POP
1172: POP
// for i := 1 to 2 do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_INT 2
1185: PUSH
1186: FOR_TO
1187: IFFALSE 1235
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1189: LD_INT 22
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: LD_INT 3
1197: PPUSH
1198: LD_INT 52
1200: PPUSH
1201: LD_INT 100
1203: PPUSH
1204: CALL 7713 0 5
// un := CreateVehicle ;
1208: LD_ADDR_VAR 0 3
1212: PUSH
1213: CALL_OW 45
1217: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1218: LD_VAR 0 3
1222: PPUSH
1223: LD_INT 9
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// end ;
1233: GO 1186
1235: POP
1236: POP
// for i := 1 to 3 do
1237: LD_ADDR_VAR 0 2
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_INT 3
1249: PUSH
1250: FOR_TO
1251: IFFALSE 1288
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1253: LD_INT 0
1255: PPUSH
1256: LD_INT 9
1258: PPUSH
1259: LD_INT 8
1261: PPUSH
1262: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1266: CALL_OW 44
1270: PPUSH
1271: LD_INT 91
1273: PPUSH
1274: LD_INT 83
1276: PPUSH
1277: CALL_OW 428
1281: PPUSH
1282: CALL_OW 52
// end ;
1286: GO 1250
1288: POP
1289: POP
// end ;
1290: LD_VAR 0 1
1294: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1295: LD_EXP 8
1299: IFFALSE 1493
1301: GO 1303
1303: DISABLE
1304: LD_INT 0
1306: PPUSH
1307: PPUSH
// begin enable ;
1308: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1309: LD_ADDR_VAR 0 2
1313: PUSH
1314: LD_INT 10
1316: PPUSH
1317: LD_INT 21
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 24
1332: PUSH
1333: LD_INT 1000
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 70
1352: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1353: LD_VAR 0 2
1357: NOT
1358: PUSH
1359: LD_EXP 8
1363: PPUSH
1364: LD_INT 3
1366: PUSH
1367: LD_INT 54
1369: PUSH
1370: EMPTY
1371: LIST
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 72
1381: AND
1382: IFFALSE 1414
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1384: LD_EXP 8
1388: PPUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 54
1394: PUSH
1395: EMPTY
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 72
1406: PPUSH
1407: LD_INT 14
1409: PPUSH
1410: CALL_OW 120
// if tmp then
1414: LD_VAR 0 2
1418: IFFALSE 1493
// begin for i in ruEng do
1420: LD_ADDR_VAR 0 1
1424: PUSH
1425: LD_EXP 8
1429: PUSH
1430: FOR_IN
1431: IFFALSE 1491
// if IsInUnit ( i ) then
1433: LD_VAR 0 1
1437: PPUSH
1438: CALL_OW 310
1442: IFFALSE 1455
// ComExitBuilding ( i ) else
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 122
1453: GO 1489
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1455: LD_VAR 0 1
1459: PPUSH
1460: LD_VAR 0 1
1464: PPUSH
1465: LD_VAR 0 2
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 8270 0 4
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: CALL_OW 130
1489: GO 1430
1491: POP
1492: POP
// end ; end ;
1493: PPOPN 2
1495: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1496: LD_EXP 7
1500: NOT
1501: IFFALSE 1567
1503: GO 1505
1505: DISABLE
1506: LD_INT 0
1508: PPUSH
1509: PPUSH
// begin enable ;
1510: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1511: LD_ADDR_VAR 0 1
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_INT 4
1523: PUSH
1524: LD_INT 5
1526: PUSH
1527: LD_INT 6
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_OWVAR 67
1539: ARRAY
1540: PUSH
1541: FOR_TO
1542: IFFALSE 1565
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1544: LD_INT 50
1546: PPUSH
1547: LD_INT 24
1549: PPUSH
1550: LD_INT 3
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_INT 46
1558: PPUSH
1559: CALL_OW 185
1563: GO 1541
1565: POP
1566: POP
// end ;
1567: PPOPN 2
1569: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1570: LD_EXP 7
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: LD_INT 5
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_OWVAR 67
1593: ARRAY
1594: GREATEREQUAL
1595: IFFALSE 1748
1597: GO 1599
1599: DISABLE
1600: LD_INT 0
1602: PPUSH
1603: PPUSH
// begin enable ;
1604: ENABLE
// tmp := ruForces ;
1605: LD_ADDR_VAR 0 2
1609: PUSH
1610: LD_EXP 7
1614: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1615: LD_INT 0
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: CALL_OW 12
1625: IFFALSE 1646
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_INT 45
1634: PPUSH
1635: CALL_OW 120
// wait ( 0 0$20 ) ;
1639: LD_INT 700
1641: PPUSH
1642: CALL_OW 67
// end ; ruForces := [ ] ;
1646: LD_ADDR_EXP 7
1650: PUSH
1651: EMPTY
1652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1653: LD_INT 35
1655: PPUSH
1656: CALL_OW 67
// for i in tmp do
1660: LD_ADDR_VAR 0 1
1664: PUSH
1665: LD_VAR 0 2
1669: PUSH
1670: FOR_IN
1671: IFFALSE 1739
// if not IsOk ( i ) then
1673: LD_VAR 0 1
1677: PPUSH
1678: CALL_OW 302
1682: NOT
1683: IFFALSE 1703
// tmp := tmp diff i else
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_VAR 0 1
1699: DIFF
1700: ST_TO_ADDR
1701: GO 1737
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1703: LD_VAR 0 1
1707: PPUSH
1708: LD_INT 81
1710: PUSH
1711: LD_INT 3
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PPUSH
1718: CALL_OW 69
1722: PPUSH
1723: LD_VAR 0 1
1727: PPUSH
1728: CALL_OW 74
1732: PPUSH
1733: CALL_OW 115
1737: GO 1670
1739: POP
1740: POP
// until not tmp ;
1741: LD_VAR 0 2
1745: NOT
1746: IFFALSE 1653
// end ;
1748: PPOPN 2
1750: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1751: LD_INT 22
1753: PUSH
1754: LD_INT 7
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 92
1763: PUSH
1764: LD_INT 62
1766: PUSH
1767: LD_INT 83
1769: PUSH
1770: LD_INT 8
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PPUSH
1783: CALL_OW 69
1787: IFFALSE 1807
1789: GO 1791
1791: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1792: LD_EXP 4
1796: PPUSH
1797: LD_INT 69
1799: PPUSH
1800: LD_INT 100
1802: PPUSH
1803: CALL_OW 114
1807: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1808: LD_INT 22
1810: PUSH
1811: LD_INT 7
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 92
1820: PUSH
1821: LD_INT 85
1823: PUSH
1824: LD_INT 89
1826: PUSH
1827: LD_INT 8
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PPUSH
1840: CALL_OW 69
1844: IFFALSE 1864
1846: GO 1848
1848: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1849: LD_EXP 5
1853: PPUSH
1854: LD_INT 72
1856: PPUSH
1857: LD_INT 88
1859: PPUSH
1860: CALL_OW 114
1864: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 92
1877: PUSH
1878: LD_INT 89
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 8
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 69
1901: IFFALSE 1921
1903: GO 1905
1905: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1906: LD_EXP 6
1910: PPUSH
1911: LD_INT 107
1913: PPUSH
1914: LD_INT 26
1916: PPUSH
1917: CALL_OW 114
1921: END
// every 6 6$00 do var i , un , tmp ;
1922: GO 1924
1924: DISABLE
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
// begin enable ;
1930: ENABLE
// tmp := [ ] ;
1931: LD_ADDR_VAR 0 3
1935: PUSH
1936: EMPTY
1937: ST_TO_ADDR
// for i := 1 to 8 do
1938: LD_ADDR_VAR 0 1
1942: PUSH
1943: DOUBLE
1944: LD_INT 1
1946: DEC
1947: ST_TO_ADDR
1948: LD_INT 8
1950: PUSH
1951: FOR_TO
1952: IFFALSE 2095
// begin uc_side := 1 ;
1954: LD_ADDR_OWVAR 20
1958: PUSH
1959: LD_INT 1
1961: ST_TO_ADDR
// uc_nation := 1 ;
1962: LD_ADDR_OWVAR 21
1966: PUSH
1967: LD_INT 1
1969: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1970: LD_INT 5
1972: PPUSH
1973: LD_INT 3
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_INT 6
1981: PUSH
1982: LD_INT 9
1984: PUSH
1985: LD_INT 7
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 1
1997: PUSH
1998: LD_INT 3
2000: MOD
2001: PUSH
2002: LD_INT 1
2004: PLUS
2005: ARRAY
2006: PPUSH
2007: LD_INT 100
2009: PPUSH
2010: CALL 7713 0 5
// un := CreateVehicle ;
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: LD_VAR 0 3
2033: PPUSH
2034: LD_VAR 0 2
2038: PPUSH
2039: CALL 38759 0 2
2043: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 11
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2071: LD_VAR 0 2
2075: PPUSH
2076: LD_INT 16
2078: PPUSH
2079: LD_INT 13
2081: PPUSH
2082: CALL_OW 111
// wait ( 0 0$1 ) ;
2086: LD_INT 35
2088: PPUSH
2089: CALL_OW 67
// end ;
2093: GO 1951
2095: POP
2096: POP
// repeat wait ( 0 0$1 ) ;
2097: LD_INT 35
2099: PPUSH
2100: CALL_OW 67
// for i in tmp do
2104: LD_ADDR_VAR 0 1
2108: PUSH
2109: LD_VAR 0 3
2113: PUSH
2114: FOR_IN
2115: IFFALSE 2183
// if not IsOk ( i ) then
2117: LD_VAR 0 1
2121: PPUSH
2122: CALL_OW 302
2126: NOT
2127: IFFALSE 2147
// tmp := tmp diff i else
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: LD_VAR 0 3
2138: PUSH
2139: LD_VAR 0 1
2143: DIFF
2144: ST_TO_ADDR
2145: GO 2181
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2147: LD_VAR 0 1
2151: PPUSH
2152: LD_INT 81
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PPUSH
2162: CALL_OW 69
2166: PPUSH
2167: LD_VAR 0 1
2171: PPUSH
2172: CALL_OW 74
2176: PPUSH
2177: CALL_OW 115
2181: GO 2114
2183: POP
2184: POP
// until not tmp ;
2185: LD_VAR 0 3
2189: NOT
2190: IFFALSE 2097
// end ;
2192: PPOPN 3
2194: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2195: LD_INT 149
2197: PPUSH
2198: LD_INT 106
2200: PPUSH
2201: CALL_OW 428
2205: NOT
2206: IFFALSE 2369
2208: GO 2210
2210: DISABLE
2211: LD_INT 0
2213: PPUSH
// begin enable ;
2214: ENABLE
// uc_side := 1 ;
2215: LD_ADDR_OWVAR 20
2219: PUSH
2220: LD_INT 1
2222: ST_TO_ADDR
// uc_nation := 1 ;
2223: LD_ADDR_OWVAR 21
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2231: LD_INT 5
2233: PPUSH
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 12
2242: PPUSH
2243: LD_INT 100
2245: PPUSH
2246: CALL 7713 0 5
// un := CreateVehicle ;
2250: LD_ADDR_VAR 0 1
2254: PUSH
2255: CALL_OW 45
2259: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2260: LD_VAR 0 1
2264: PPUSH
2265: LD_INT 149
2267: PPUSH
2268: LD_INT 106
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2278: LD_VAR 0 1
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: LD_INT 100
2288: PPUSH
2289: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2293: LD_VAR 0 1
2297: PPUSH
2298: LD_INT 105
2300: PPUSH
2301: LD_INT 2
2303: PPUSH
2304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2308: LD_INT 35
2310: PPUSH
2311: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2315: LD_VAR 0 1
2319: PPUSH
2320: CALL_OW 301
2324: PUSH
2325: LD_VAR 0 1
2329: PPUSH
2330: CALL_OW 255
2334: PUSH
2335: LD_INT 1
2337: NONEQUAL
2338: OR
2339: IFFALSE 2343
// exit ;
2341: GO 2369
// until IsAt ( un , 105 , 2 ) ;
2343: LD_VAR 0 1
2347: PPUSH
2348: LD_INT 105
2350: PPUSH
2351: LD_INT 2
2353: PPUSH
2354: CALL_OW 307
2358: IFFALSE 2308
// RemoveUnit ( un ) ;
2360: LD_VAR 0 1
2364: PPUSH
2365: CALL_OW 64
// end ; end_of_file
2369: PPOPN 1
2371: END
// export function Action ; begin
2372: LD_INT 0
2374: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2375: LD_EXP 2
2379: PPUSH
2380: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2384: LD_STRING WT-Objectives-1
2386: PPUSH
2387: CALL_OW 337
// end ;
2391: LD_VAR 0 1
2395: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2396: LD_INT 7
2398: PPUSH
2399: LD_EXP 3
2403: PPUSH
2404: CALL_OW 292
2408: IFFALSE 2425
2410: GO 2412
2412: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2413: LD_EXP 3
2417: PPUSH
2418: LD_INT 7
2420: PPUSH
2421: CALL_OW 235
2425: END
// every 2 2$00 do
2426: GO 2428
2428: DISABLE
// PrepareReinforcements ( ) ;
2429: CALL 264 0 0
2433: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 469
2441: NOT
2442: IFFALSE 2457
2444: GO 2446
2446: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2447: LD_INT 8
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL_OW 424
2457: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2458: LD_INT 8
2460: PPUSH
2461: LD_INT 2
2463: PUSH
2464: LD_INT 34
2466: PUSH
2467: LD_INT 12
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 34
2476: PUSH
2477: LD_INT 51
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 70
2493: PUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 469
2501: NOT
2502: AND
2503: IFFALSE 2633
2505: GO 2507
2507: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2508: LD_STRING WT-med-1
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2518: LD_STRING WT-med-2
2520: PPUSH
2521: LD_INT 1
2523: NEG
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_EXP 3
2536: PPUSH
2537: CALL_OW 302
2541: PUSH
2542: LD_EXP 3
2546: PPUSH
2547: CALL_OW 255
2551: MUL
2552: PUSH
2553: LD_INT 7
2555: EQUAL
2556: PUSH
2557: LD_INT 1
2559: PLUS
2560: ARRAY
2561: PPUSH
2562: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2566: LD_STRING WT-med-3
2568: PPUSH
2569: LD_INT 1
2571: NEG
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 7
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 34
2592: PUSH
2593: LD_INT 10
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 69
2608: PUSH
2609: LD_INT 2
2611: GREATEREQUAL
2612: PUSH
2613: LD_INT 1
2615: PLUS
2616: ARRAY
2617: PPUSH
2618: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2622: LD_STRING WT-Main
2624: PPUSH
2625: CALL_OW 102
// YouWin ;
2629: CALL_OW 103
// end ; end_of_file
2633: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2634: LD_VAR 0 1
2638: PUSH
2639: LD_EXP 7
2643: IN
2644: IFFALSE 2662
// ruForces := ruForces diff un ;
2646: LD_ADDR_EXP 7
2650: PUSH
2651: LD_EXP 7
2655: PUSH
2656: LD_VAR 0 1
2660: DIFF
2661: ST_TO_ADDR
// end ;
2662: PPOPN 1
2664: END
// on UnitDestroyed ( un ) do begin if un = allianceHack then
2665: LD_VAR 0 1
2669: PUSH
2670: LD_EXP 2
2674: EQUAL
2675: IFFALSE 2684
// YouLost ( WT-HackLost ) ;
2677: LD_STRING WT-HackLost
2679: PPUSH
2680: CALL_OW 104
// if un in ruForces then
2684: LD_VAR 0 1
2688: PUSH
2689: LD_EXP 7
2693: IN
2694: IFFALSE 2712
// ruForces := ruForces diff un ;
2696: LD_ADDR_EXP 7
2700: PUSH
2701: LD_EXP 7
2705: PUSH
2706: LD_VAR 0 1
2710: DIFF
2711: ST_TO_ADDR
// end ;
2712: PPOPN 1
2714: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 3 then
2715: LD_VAR 0 1
2719: PPUSH
2720: CALL_OW 255
2724: PUSH
2725: LD_INT 3
2727: EQUAL
2728: IFFALSE 2750
// ruForces := Join ( ruForces , vehicle ) ;
2730: LD_ADDR_EXP 7
2734: PUSH
2735: LD_EXP 7
2739: PPUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL 38759 0 2
2749: ST_TO_ADDR
// end ; end_of_file
2750: PPOPN 2
2752: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
2753: LD_INT 0
2755: PPUSH
// ar_crane := 88 ;
2756: LD_ADDR_EXP 15
2760: PUSH
2761: LD_INT 88
2763: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
2764: LD_ADDR_EXP 10
2768: PUSH
2769: LD_INT 89
2771: ST_TO_ADDR
// us_hack := 99 ;
2772: LD_ADDR_EXP 11
2776: PUSH
2777: LD_INT 99
2779: ST_TO_ADDR
// us_artillery := 97 ;
2780: LD_ADDR_EXP 12
2784: PUSH
2785: LD_INT 97
2787: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2788: LD_ADDR_EXP 13
2792: PUSH
2793: LD_INT 91
2795: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
2796: LD_ADDR_EXP 14
2800: PUSH
2801: LD_INT 92
2803: ST_TO_ADDR
// ru_radar := 98 ;
2804: LD_ADDR_EXP 9
2808: PUSH
2809: LD_INT 98
2811: ST_TO_ADDR
// tech_Artillery := 80 ;
2812: LD_ADDR_EXP 16
2816: PUSH
2817: LD_INT 80
2819: ST_TO_ADDR
// tech_RadMat := 81 ;
2820: LD_ADDR_EXP 17
2824: PUSH
2825: LD_INT 81
2827: ST_TO_ADDR
// tech_BasicTools := 82 ;
2828: LD_ADDR_EXP 18
2832: PUSH
2833: LD_INT 82
2835: ST_TO_ADDR
// tech_Cargo := 83 ;
2836: LD_ADDR_EXP 19
2840: PUSH
2841: LD_INT 83
2843: ST_TO_ADDR
// tech_Track := 84 ;
2844: LD_ADDR_EXP 20
2848: PUSH
2849: LD_INT 84
2851: ST_TO_ADDR
// tech_Crane := 85 ;
2852: LD_ADDR_EXP 21
2856: PUSH
2857: LD_INT 85
2859: ST_TO_ADDR
// tech_Bulldozer := 86 ;
2860: LD_ADDR_EXP 22
2864: PUSH
2865: LD_INT 86
2867: ST_TO_ADDR
// tech_Hovercraft := 87 ;
2868: LD_ADDR_EXP 23
2872: PUSH
2873: LD_INT 87
2875: ST_TO_ADDR
// end ;
2876: LD_VAR 0 1
2880: RET
// every 1 do
2881: GO 2883
2883: DISABLE
// InitGlobalVariables ; end_of_file
2884: CALL 2753 0 0
2888: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
// if exist_mode then
2893: LD_VAR 0 2
2897: IFFALSE 2922
// unit := CreateCharacter ( prefix & ident ) else
2899: LD_ADDR_VAR 0 5
2903: PUSH
2904: LD_VAR 0 3
2908: PUSH
2909: LD_VAR 0 1
2913: STR
2914: PPUSH
2915: CALL_OW 34
2919: ST_TO_ADDR
2920: GO 2937
// unit := NewCharacter ( ident ) ;
2922: LD_ADDR_VAR 0 5
2926: PUSH
2927: LD_VAR 0 1
2931: PPUSH
2932: CALL_OW 25
2936: ST_TO_ADDR
// result := unit ;
2937: LD_ADDR_VAR 0 4
2941: PUSH
2942: LD_VAR 0 5
2946: ST_TO_ADDR
// end ;
2947: LD_VAR 0 4
2951: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
// if not side or not nation then
2956: LD_VAR 0 1
2960: NOT
2961: PUSH
2962: LD_VAR 0 2
2966: NOT
2967: OR
2968: IFFALSE 2972
// exit ;
2970: GO 3736
// case nation of nation_american :
2972: LD_VAR 0 2
2976: PUSH
2977: LD_INT 1
2979: DOUBLE
2980: EQUAL
2981: IFTRUE 2985
2983: GO 3199
2985: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2986: LD_ADDR_VAR 0 4
2990: PUSH
2991: LD_INT 35
2993: PUSH
2994: LD_INT 45
2996: PUSH
2997: LD_INT 46
2999: PUSH
3000: LD_INT 47
3002: PUSH
3003: LD_INT 82
3005: PUSH
3006: LD_INT 83
3008: PUSH
3009: LD_INT 84
3011: PUSH
3012: LD_INT 85
3014: PUSH
3015: LD_INT 86
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 2
3023: PUSH
3024: LD_INT 6
3026: PUSH
3027: LD_INT 15
3029: PUSH
3030: LD_INT 16
3032: PUSH
3033: LD_INT 7
3035: PUSH
3036: LD_INT 12
3038: PUSH
3039: LD_INT 13
3041: PUSH
3042: LD_INT 10
3044: PUSH
3045: LD_INT 14
3047: PUSH
3048: LD_INT 20
3050: PUSH
3051: LD_INT 21
3053: PUSH
3054: LD_INT 22
3056: PUSH
3057: LD_INT 25
3059: PUSH
3060: LD_INT 32
3062: PUSH
3063: LD_INT 27
3065: PUSH
3066: LD_INT 36
3068: PUSH
3069: LD_INT 69
3071: PUSH
3072: LD_INT 39
3074: PUSH
3075: LD_INT 34
3077: PUSH
3078: LD_INT 40
3080: PUSH
3081: LD_INT 48
3083: PUSH
3084: LD_INT 49
3086: PUSH
3087: LD_INT 50
3089: PUSH
3090: LD_INT 51
3092: PUSH
3093: LD_INT 52
3095: PUSH
3096: LD_INT 53
3098: PUSH
3099: LD_INT 54
3101: PUSH
3102: LD_INT 55
3104: PUSH
3105: LD_INT 56
3107: PUSH
3108: LD_INT 57
3110: PUSH
3111: LD_INT 58
3113: PUSH
3114: LD_INT 59
3116: PUSH
3117: LD_INT 60
3119: PUSH
3120: LD_INT 61
3122: PUSH
3123: LD_INT 62
3125: PUSH
3126: LD_INT 80
3128: PUSH
3129: LD_INT 82
3131: PUSH
3132: LD_INT 83
3134: PUSH
3135: LD_INT 84
3137: PUSH
3138: LD_INT 85
3140: PUSH
3141: LD_INT 86
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: ST_TO_ADDR
3197: GO 3660
3199: LD_INT 2
3201: DOUBLE
3202: EQUAL
3203: IFTRUE 3207
3205: GO 3429
3207: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
3208: LD_ADDR_VAR 0 4
3212: PUSH
3213: LD_INT 35
3215: PUSH
3216: LD_INT 45
3218: PUSH
3219: LD_INT 46
3221: PUSH
3222: LD_INT 47
3224: PUSH
3225: LD_INT 82
3227: PUSH
3228: LD_INT 83
3230: PUSH
3231: LD_INT 84
3233: PUSH
3234: LD_INT 85
3236: PUSH
3237: LD_INT 87
3239: PUSH
3240: LD_INT 70
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: LD_INT 11
3248: PUSH
3249: LD_INT 3
3251: PUSH
3252: LD_INT 4
3254: PUSH
3255: LD_INT 5
3257: PUSH
3258: LD_INT 6
3260: PUSH
3261: LD_INT 15
3263: PUSH
3264: LD_INT 18
3266: PUSH
3267: LD_INT 7
3269: PUSH
3270: LD_INT 17
3272: PUSH
3273: LD_INT 8
3275: PUSH
3276: LD_INT 20
3278: PUSH
3279: LD_INT 21
3281: PUSH
3282: LD_INT 22
3284: PUSH
3285: LD_INT 72
3287: PUSH
3288: LD_INT 26
3290: PUSH
3291: LD_INT 69
3293: PUSH
3294: LD_INT 39
3296: PUSH
3297: LD_INT 40
3299: PUSH
3300: LD_INT 41
3302: PUSH
3303: LD_INT 42
3305: PUSH
3306: LD_INT 43
3308: PUSH
3309: LD_INT 48
3311: PUSH
3312: LD_INT 49
3314: PUSH
3315: LD_INT 50
3317: PUSH
3318: LD_INT 51
3320: PUSH
3321: LD_INT 52
3323: PUSH
3324: LD_INT 53
3326: PUSH
3327: LD_INT 54
3329: PUSH
3330: LD_INT 55
3332: PUSH
3333: LD_INT 56
3335: PUSH
3336: LD_INT 60
3338: PUSH
3339: LD_INT 61
3341: PUSH
3342: LD_INT 62
3344: PUSH
3345: LD_INT 66
3347: PUSH
3348: LD_INT 67
3350: PUSH
3351: LD_INT 68
3353: PUSH
3354: LD_INT 81
3356: PUSH
3357: LD_INT 82
3359: PUSH
3360: LD_INT 83
3362: PUSH
3363: LD_INT 84
3365: PUSH
3366: LD_INT 85
3368: PUSH
3369: LD_INT 87
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: ST_TO_ADDR
3427: GO 3660
3429: LD_INT 3
3431: DOUBLE
3432: EQUAL
3433: IFTRUE 3437
3435: GO 3659
3437: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3438: LD_ADDR_VAR 0 4
3442: PUSH
3443: LD_INT 46
3445: PUSH
3446: LD_INT 47
3448: PUSH
3449: LD_INT 1
3451: PUSH
3452: LD_INT 2
3454: PUSH
3455: LD_INT 82
3457: PUSH
3458: LD_INT 83
3460: PUSH
3461: LD_INT 84
3463: PUSH
3464: LD_INT 85
3466: PUSH
3467: LD_INT 86
3469: PUSH
3470: LD_INT 11
3472: PUSH
3473: LD_INT 9
3475: PUSH
3476: LD_INT 20
3478: PUSH
3479: LD_INT 19
3481: PUSH
3482: LD_INT 21
3484: PUSH
3485: LD_INT 24
3487: PUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 25
3493: PUSH
3494: LD_INT 28
3496: PUSH
3497: LD_INT 29
3499: PUSH
3500: LD_INT 30
3502: PUSH
3503: LD_INT 31
3505: PUSH
3506: LD_INT 37
3508: PUSH
3509: LD_INT 38
3511: PUSH
3512: LD_INT 32
3514: PUSH
3515: LD_INT 27
3517: PUSH
3518: LD_INT 33
3520: PUSH
3521: LD_INT 69
3523: PUSH
3524: LD_INT 39
3526: PUSH
3527: LD_INT 34
3529: PUSH
3530: LD_INT 40
3532: PUSH
3533: LD_INT 71
3535: PUSH
3536: LD_INT 23
3538: PUSH
3539: LD_INT 44
3541: PUSH
3542: LD_INT 48
3544: PUSH
3545: LD_INT 49
3547: PUSH
3548: LD_INT 50
3550: PUSH
3551: LD_INT 51
3553: PUSH
3554: LD_INT 52
3556: PUSH
3557: LD_INT 53
3559: PUSH
3560: LD_INT 54
3562: PUSH
3563: LD_INT 55
3565: PUSH
3566: LD_INT 56
3568: PUSH
3569: LD_INT 57
3571: PUSH
3572: LD_INT 58
3574: PUSH
3575: LD_INT 59
3577: PUSH
3578: LD_INT 63
3580: PUSH
3581: LD_INT 64
3583: PUSH
3584: LD_INT 65
3586: PUSH
3587: LD_INT 82
3589: PUSH
3590: LD_INT 83
3592: PUSH
3593: LD_INT 84
3595: PUSH
3596: LD_INT 85
3598: PUSH
3599: LD_INT 86
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: ST_TO_ADDR
3657: GO 3660
3659: POP
// if state > - 1 and state < 3 then
3660: LD_VAR 0 3
3664: PUSH
3665: LD_INT 1
3667: NEG
3668: GREATER
3669: PUSH
3670: LD_VAR 0 3
3674: PUSH
3675: LD_INT 3
3677: LESS
3678: AND
3679: IFFALSE 3736
// for i in result do
3681: LD_ADDR_VAR 0 5
3685: PUSH
3686: LD_VAR 0 4
3690: PUSH
3691: FOR_IN
3692: IFFALSE 3734
// if GetTech ( i , side ) <> state then
3694: LD_VAR 0 5
3698: PPUSH
3699: LD_VAR 0 1
3703: PPUSH
3704: CALL_OW 321
3708: PUSH
3709: LD_VAR 0 3
3713: NONEQUAL
3714: IFFALSE 3732
// result := result diff i ;
3716: LD_ADDR_VAR 0 4
3720: PUSH
3721: LD_VAR 0 4
3725: PUSH
3726: LD_VAR 0 5
3730: DIFF
3731: ST_TO_ADDR
3732: GO 3691
3734: POP
3735: POP
// end ;
3736: LD_VAR 0 4
3740: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
3745: PPUSH
// result := true ;
3746: LD_ADDR_VAR 0 3
3750: PUSH
3751: LD_INT 1
3753: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3754: LD_ADDR_VAR 0 5
3758: PUSH
3759: LD_VAR 0 2
3763: PPUSH
3764: CALL_OW 480
3768: ST_TO_ADDR
// if not tmp then
3769: LD_VAR 0 5
3773: NOT
3774: IFFALSE 3778
// exit ;
3776: GO 3827
// for i in tmp do
3778: LD_ADDR_VAR 0 4
3782: PUSH
3783: LD_VAR 0 5
3787: PUSH
3788: FOR_IN
3789: IFFALSE 3825
// if GetTech ( i , side ) <> state_researched then
3791: LD_VAR 0 4
3795: PPUSH
3796: LD_VAR 0 1
3800: PPUSH
3801: CALL_OW 321
3805: PUSH
3806: LD_INT 2
3808: NONEQUAL
3809: IFFALSE 3823
// begin result := false ;
3811: LD_ADDR_VAR 0 3
3815: PUSH
3816: LD_INT 0
3818: ST_TO_ADDR
// exit ;
3819: POP
3820: POP
3821: GO 3827
// end ;
3823: GO 3788
3825: POP
3826: POP
// end ;
3827: LD_VAR 0 3
3831: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3832: LD_INT 0
3834: PPUSH
3835: PPUSH
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3847: LD_VAR 0 1
3851: NOT
3852: PUSH
3853: LD_VAR 0 1
3857: PPUSH
3858: CALL_OW 257
3862: PUSH
3863: LD_INT 9
3865: NONEQUAL
3866: OR
3867: IFFALSE 3871
// exit ;
3869: GO 4444
// side := GetSide ( unit ) ;
3871: LD_ADDR_VAR 0 9
3875: PUSH
3876: LD_VAR 0 1
3880: PPUSH
3881: CALL_OW 255
3885: ST_TO_ADDR
// tech_space := tech_spacanom ;
3886: LD_ADDR_VAR 0 12
3890: PUSH
3891: LD_INT 29
3893: ST_TO_ADDR
// tech_time := tech_taurad ;
3894: LD_ADDR_VAR 0 13
3898: PUSH
3899: LD_INT 28
3901: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3902: LD_ADDR_VAR 0 11
3906: PUSH
3907: LD_VAR 0 1
3911: PPUSH
3912: CALL_OW 310
3916: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3917: LD_VAR 0 11
3921: PPUSH
3922: CALL_OW 247
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: IFFALSE 3934
// exit ;
3932: GO 4444
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3934: LD_ADDR_VAR 0 8
3938: PUSH
3939: LD_INT 81
3941: PUSH
3942: LD_VAR 0 9
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 3
3953: PUSH
3954: LD_INT 21
3956: PUSH
3957: LD_INT 3
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PPUSH
3972: CALL_OW 69
3976: ST_TO_ADDR
// if not tmp then
3977: LD_VAR 0 8
3981: NOT
3982: IFFALSE 3986
// exit ;
3984: GO 4444
// if in_unit then
3986: LD_VAR 0 11
3990: IFFALSE 4014
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3992: LD_ADDR_VAR 0 10
3996: PUSH
3997: LD_VAR 0 8
4001: PPUSH
4002: LD_VAR 0 11
4006: PPUSH
4007: CALL_OW 74
4011: ST_TO_ADDR
4012: GO 4034
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4014: LD_ADDR_VAR 0 10
4018: PUSH
4019: LD_VAR 0 8
4023: PPUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 74
4033: ST_TO_ADDR
// if not enemy then
4034: LD_VAR 0 10
4038: NOT
4039: IFFALSE 4043
// exit ;
4041: GO 4444
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4043: LD_VAR 0 11
4047: PUSH
4048: LD_VAR 0 11
4052: PPUSH
4053: LD_VAR 0 10
4057: PPUSH
4058: CALL_OW 296
4062: PUSH
4063: LD_INT 13
4065: GREATER
4066: AND
4067: PUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: LD_VAR 0 10
4077: PPUSH
4078: CALL_OW 296
4082: PUSH
4083: LD_INT 12
4085: GREATER
4086: OR
4087: IFFALSE 4091
// exit ;
4089: GO 4444
// missile := [ 1 ] ;
4091: LD_ADDR_VAR 0 14
4095: PUSH
4096: LD_INT 1
4098: PUSH
4099: EMPTY
4100: LIST
4101: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4102: LD_VAR 0 9
4106: PPUSH
4107: LD_VAR 0 12
4111: PPUSH
4112: CALL_OW 325
4116: IFFALSE 4145
// missile := Insert ( missile , missile + 1 , 2 ) ;
4118: LD_ADDR_VAR 0 14
4122: PUSH
4123: LD_VAR 0 14
4127: PPUSH
4128: LD_VAR 0 14
4132: PUSH
4133: LD_INT 1
4135: PLUS
4136: PPUSH
4137: LD_INT 2
4139: PPUSH
4140: CALL_OW 2
4144: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4145: LD_VAR 0 9
4149: PPUSH
4150: LD_VAR 0 13
4154: PPUSH
4155: CALL_OW 325
4159: PUSH
4160: LD_VAR 0 10
4164: PPUSH
4165: CALL_OW 255
4169: PPUSH
4170: LD_VAR 0 13
4174: PPUSH
4175: CALL_OW 325
4179: NOT
4180: AND
4181: IFFALSE 4210
// missile := Insert ( missile , missile + 1 , 3 ) ;
4183: LD_ADDR_VAR 0 14
4187: PUSH
4188: LD_VAR 0 14
4192: PPUSH
4193: LD_VAR 0 14
4197: PUSH
4198: LD_INT 1
4200: PLUS
4201: PPUSH
4202: LD_INT 3
4204: PPUSH
4205: CALL_OW 2
4209: ST_TO_ADDR
// if missile < 2 then
4210: LD_VAR 0 14
4214: PUSH
4215: LD_INT 2
4217: LESS
4218: IFFALSE 4222
// exit ;
4220: GO 4444
// x := GetX ( enemy ) ;
4222: LD_ADDR_VAR 0 4
4226: PUSH
4227: LD_VAR 0 10
4231: PPUSH
4232: CALL_OW 250
4236: ST_TO_ADDR
// y := GetY ( enemy ) ;
4237: LD_ADDR_VAR 0 5
4241: PUSH
4242: LD_VAR 0 10
4246: PPUSH
4247: CALL_OW 251
4251: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4252: LD_ADDR_VAR 0 6
4256: PUSH
4257: LD_VAR 0 4
4261: PUSH
4262: LD_INT 1
4264: NEG
4265: PPUSH
4266: LD_INT 1
4268: PPUSH
4269: CALL_OW 12
4273: PLUS
4274: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4275: LD_ADDR_VAR 0 7
4279: PUSH
4280: LD_VAR 0 5
4284: PUSH
4285: LD_INT 1
4287: NEG
4288: PPUSH
4289: LD_INT 1
4291: PPUSH
4292: CALL_OW 12
4296: PLUS
4297: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4298: LD_VAR 0 6
4302: PPUSH
4303: LD_VAR 0 7
4307: PPUSH
4308: CALL_OW 488
4312: NOT
4313: IFFALSE 4335
// begin _x := x ;
4315: LD_ADDR_VAR 0 6
4319: PUSH
4320: LD_VAR 0 4
4324: ST_TO_ADDR
// _y := y ;
4325: LD_ADDR_VAR 0 7
4329: PUSH
4330: LD_VAR 0 5
4334: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: LD_INT 1
4342: PPUSH
4343: LD_VAR 0 14
4347: PPUSH
4348: CALL_OW 12
4352: ST_TO_ADDR
// case i of 1 :
4353: LD_VAR 0 3
4357: PUSH
4358: LD_INT 1
4360: DOUBLE
4361: EQUAL
4362: IFTRUE 4366
4364: GO 4383
4366: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4367: LD_VAR 0 1
4371: PPUSH
4372: LD_VAR 0 10
4376: PPUSH
4377: CALL_OW 115
4381: GO 4444
4383: LD_INT 2
4385: DOUBLE
4386: EQUAL
4387: IFTRUE 4391
4389: GO 4413
4391: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4392: LD_VAR 0 1
4396: PPUSH
4397: LD_VAR 0 6
4401: PPUSH
4402: LD_VAR 0 7
4406: PPUSH
4407: CALL_OW 153
4411: GO 4444
4413: LD_INT 3
4415: DOUBLE
4416: EQUAL
4417: IFTRUE 4421
4419: GO 4443
4421: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4422: LD_VAR 0 1
4426: PPUSH
4427: LD_VAR 0 6
4431: PPUSH
4432: LD_VAR 0 7
4436: PPUSH
4437: CALL_OW 154
4441: GO 4444
4443: POP
// end ;
4444: LD_VAR 0 2
4448: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4449: LD_INT 0
4451: PPUSH
4452: PPUSH
4453: PPUSH
4454: PPUSH
4455: PPUSH
4456: PPUSH
// if not unit or not building then
4457: LD_VAR 0 1
4461: NOT
4462: PUSH
4463: LD_VAR 0 2
4467: NOT
4468: OR
4469: IFFALSE 4473
// exit ;
4471: GO 4631
// x := GetX ( building ) ;
4473: LD_ADDR_VAR 0 5
4477: PUSH
4478: LD_VAR 0 2
4482: PPUSH
4483: CALL_OW 250
4487: ST_TO_ADDR
// y := GetY ( building ) ;
4488: LD_ADDR_VAR 0 6
4492: PUSH
4493: LD_VAR 0 2
4497: PPUSH
4498: CALL_OW 251
4502: ST_TO_ADDR
// for i = 0 to 5 do
4503: LD_ADDR_VAR 0 4
4507: PUSH
4508: DOUBLE
4509: LD_INT 0
4511: DEC
4512: ST_TO_ADDR
4513: LD_INT 5
4515: PUSH
4516: FOR_TO
4517: IFFALSE 4629
// begin _x := ShiftX ( x , i , 3 ) ;
4519: LD_ADDR_VAR 0 7
4523: PUSH
4524: LD_VAR 0 5
4528: PPUSH
4529: LD_VAR 0 4
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 272
4541: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4542: LD_ADDR_VAR 0 8
4546: PUSH
4547: LD_VAR 0 6
4551: PPUSH
4552: LD_VAR 0 4
4556: PPUSH
4557: LD_INT 3
4559: PPUSH
4560: CALL_OW 273
4564: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4565: LD_VAR 0 7
4569: PPUSH
4570: LD_VAR 0 8
4574: PPUSH
4575: CALL_OW 488
4579: NOT
4580: IFFALSE 4584
// continue ;
4582: GO 4516
// if HexInfo ( _x , _y ) = 0 then
4584: LD_VAR 0 7
4588: PPUSH
4589: LD_VAR 0 8
4593: PPUSH
4594: CALL_OW 428
4598: PUSH
4599: LD_INT 0
4601: EQUAL
4602: IFFALSE 4627
// begin ComMoveXY ( unit , _x , _y ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_VAR 0 7
4613: PPUSH
4614: LD_VAR 0 8
4618: PPUSH
4619: CALL_OW 111
// exit ;
4623: POP
4624: POP
4625: GO 4631
// end ; end ;
4627: GO 4516
4629: POP
4630: POP
// end ;
4631: LD_VAR 0 3
4635: RET
// export function ScanBase ( side , base_area ) ; begin
4636: LD_INT 0
4638: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4639: LD_ADDR_VAR 0 3
4643: PUSH
4644: LD_VAR 0 2
4648: PPUSH
4649: LD_INT 81
4651: PUSH
4652: LD_VAR 0 1
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PPUSH
4661: CALL_OW 70
4665: ST_TO_ADDR
// end ;
4666: LD_VAR 0 3
4670: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4671: LD_INT 0
4673: PPUSH
4674: PPUSH
4675: PPUSH
4676: PPUSH
// result := false ;
4677: LD_ADDR_VAR 0 2
4681: PUSH
4682: LD_INT 0
4684: ST_TO_ADDR
// side := GetSide ( unit ) ;
4685: LD_ADDR_VAR 0 3
4689: PUSH
4690: LD_VAR 0 1
4694: PPUSH
4695: CALL_OW 255
4699: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4700: LD_ADDR_VAR 0 4
4704: PUSH
4705: LD_VAR 0 1
4709: PPUSH
4710: CALL_OW 248
4714: ST_TO_ADDR
// case nat of 1 :
4715: LD_VAR 0 4
4719: PUSH
4720: LD_INT 1
4722: DOUBLE
4723: EQUAL
4724: IFTRUE 4728
4726: GO 4739
4728: POP
// tech := tech_lassight ; 2 :
4729: LD_ADDR_VAR 0 5
4733: PUSH
4734: LD_INT 12
4736: ST_TO_ADDR
4737: GO 4778
4739: LD_INT 2
4741: DOUBLE
4742: EQUAL
4743: IFTRUE 4747
4745: GO 4758
4747: POP
// tech := tech_mortar ; 3 :
4748: LD_ADDR_VAR 0 5
4752: PUSH
4753: LD_INT 41
4755: ST_TO_ADDR
4756: GO 4778
4758: LD_INT 3
4760: DOUBLE
4761: EQUAL
4762: IFTRUE 4766
4764: GO 4777
4766: POP
// tech := tech_bazooka ; end ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: LD_INT 44
4774: ST_TO_ADDR
4775: GO 4778
4777: POP
// if Researched ( side , tech ) then
4778: LD_VAR 0 3
4782: PPUSH
4783: LD_VAR 0 5
4787: PPUSH
4788: CALL_OW 325
4792: IFFALSE 4819
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4794: LD_ADDR_VAR 0 2
4798: PUSH
4799: LD_INT 5
4801: PUSH
4802: LD_INT 8
4804: PUSH
4805: LD_INT 9
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: PUSH
4813: LD_VAR 0 4
4817: ARRAY
4818: ST_TO_ADDR
// end ;
4819: LD_VAR 0 2
4823: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4824: LD_INT 0
4826: PPUSH
4827: PPUSH
4828: PPUSH
// if not mines then
4829: LD_VAR 0 2
4833: NOT
4834: IFFALSE 4838
// exit ;
4836: GO 4982
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4838: LD_ADDR_VAR 0 5
4842: PUSH
4843: LD_INT 81
4845: PUSH
4846: LD_VAR 0 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 3
4857: PUSH
4858: LD_INT 21
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: ST_TO_ADDR
// for i in mines do
4881: LD_ADDR_VAR 0 4
4885: PUSH
4886: LD_VAR 0 2
4890: PUSH
4891: FOR_IN
4892: IFFALSE 4980
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4894: LD_VAR 0 4
4898: PUSH
4899: LD_INT 1
4901: ARRAY
4902: PPUSH
4903: LD_VAR 0 4
4907: PUSH
4908: LD_INT 2
4910: ARRAY
4911: PPUSH
4912: CALL_OW 458
4916: NOT
4917: IFFALSE 4921
// continue ;
4919: GO 4891
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4921: LD_VAR 0 4
4925: PUSH
4926: LD_INT 1
4928: ARRAY
4929: PPUSH
4930: LD_VAR 0 4
4934: PUSH
4935: LD_INT 2
4937: ARRAY
4938: PPUSH
4939: CALL_OW 428
4943: PUSH
4944: LD_VAR 0 5
4948: IN
4949: IFFALSE 4978
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4951: LD_VAR 0 4
4955: PUSH
4956: LD_INT 1
4958: ARRAY
4959: PPUSH
4960: LD_VAR 0 4
4964: PUSH
4965: LD_INT 2
4967: ARRAY
4968: PPUSH
4969: LD_VAR 0 1
4973: PPUSH
4974: CALL_OW 456
// end ;
4978: GO 4891
4980: POP
4981: POP
// end ;
4982: LD_VAR 0 3
4986: RET
// export function Count ( array ) ; var i ; begin
4987: LD_INT 0
4989: PPUSH
4990: PPUSH
// result := 0 ;
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: LD_INT 0
4998: ST_TO_ADDR
// for i in array do
4999: LD_ADDR_VAR 0 3
5003: PUSH
5004: LD_VAR 0 1
5008: PUSH
5009: FOR_IN
5010: IFFALSE 5034
// if i then
5012: LD_VAR 0 3
5016: IFFALSE 5032
// result := result + 1 ;
5018: LD_ADDR_VAR 0 2
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: LD_INT 1
5030: PLUS
5031: ST_TO_ADDR
5032: GO 5009
5034: POP
5035: POP
// end ;
5036: LD_VAR 0 2
5040: RET
// export function IsEmpty ( building ) ; begin
5041: LD_INT 0
5043: PPUSH
// if not building then
5044: LD_VAR 0 1
5048: NOT
5049: IFFALSE 5053
// exit ;
5051: GO 5096
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5053: LD_ADDR_VAR 0 2
5057: PUSH
5058: LD_VAR 0 1
5062: PUSH
5063: LD_INT 22
5065: PUSH
5066: LD_VAR 0 1
5070: PPUSH
5071: CALL_OW 255
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 58
5082: PUSH
5083: EMPTY
5084: LIST
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PPUSH
5090: CALL_OW 69
5094: IN
5095: ST_TO_ADDR
// end ;
5096: LD_VAR 0 2
5100: RET
// export function IsNotFull ( building ) ; begin
5101: LD_INT 0
5103: PPUSH
// if not building then
5104: LD_VAR 0 1
5108: NOT
5109: IFFALSE 5113
// exit ;
5111: GO 5132
// result := UnitsInside ( building ) < 6 ;
5113: LD_ADDR_VAR 0 2
5117: PUSH
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 313
5127: PUSH
5128: LD_INT 6
5130: LESS
5131: ST_TO_ADDR
// end ;
5132: LD_VAR 0 2
5136: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5137: LD_INT 0
5139: PPUSH
5140: PPUSH
5141: PPUSH
5142: PPUSH
// tmp := [ ] ;
5143: LD_ADDR_VAR 0 3
5147: PUSH
5148: EMPTY
5149: ST_TO_ADDR
// list := [ ] ;
5150: LD_ADDR_VAR 0 5
5154: PUSH
5155: EMPTY
5156: ST_TO_ADDR
// for i = 16 to 25 do
5157: LD_ADDR_VAR 0 4
5161: PUSH
5162: DOUBLE
5163: LD_INT 16
5165: DEC
5166: ST_TO_ADDR
5167: LD_INT 25
5169: PUSH
5170: FOR_TO
5171: IFFALSE 5244
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5173: LD_ADDR_VAR 0 3
5177: PUSH
5178: LD_VAR 0 3
5182: PUSH
5183: LD_INT 22
5185: PUSH
5186: LD_VAR 0 1
5190: PPUSH
5191: CALL_OW 255
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 91
5202: PUSH
5203: LD_VAR 0 1
5207: PUSH
5208: LD_INT 6
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 30
5218: PUSH
5219: LD_VAR 0 4
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: EMPTY
5234: LIST
5235: PPUSH
5236: CALL_OW 69
5240: ADD
5241: ST_TO_ADDR
5242: GO 5170
5244: POP
5245: POP
// for i = 1 to tmp do
5246: LD_ADDR_VAR 0 4
5250: PUSH
5251: DOUBLE
5252: LD_INT 1
5254: DEC
5255: ST_TO_ADDR
5256: LD_VAR 0 3
5260: PUSH
5261: FOR_TO
5262: IFFALSE 5350
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5264: LD_ADDR_VAR 0 5
5268: PUSH
5269: LD_VAR 0 5
5273: PUSH
5274: LD_VAR 0 3
5278: PUSH
5279: LD_VAR 0 4
5283: ARRAY
5284: PPUSH
5285: CALL_OW 266
5289: PUSH
5290: LD_VAR 0 3
5294: PUSH
5295: LD_VAR 0 4
5299: ARRAY
5300: PPUSH
5301: CALL_OW 250
5305: PUSH
5306: LD_VAR 0 3
5310: PUSH
5311: LD_VAR 0 4
5315: ARRAY
5316: PPUSH
5317: CALL_OW 251
5321: PUSH
5322: LD_VAR 0 3
5326: PUSH
5327: LD_VAR 0 4
5331: ARRAY
5332: PPUSH
5333: CALL_OW 254
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: PUSH
5344: EMPTY
5345: LIST
5346: ADD
5347: ST_TO_ADDR
5348: GO 5261
5350: POP
5351: POP
// result := list ;
5352: LD_ADDR_VAR 0 2
5356: PUSH
5357: LD_VAR 0 5
5361: ST_TO_ADDR
// end ;
5362: LD_VAR 0 2
5366: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5367: LD_INT 0
5369: PPUSH
5370: PPUSH
5371: PPUSH
5372: PPUSH
5373: PPUSH
5374: PPUSH
5375: PPUSH
// if not factory then
5376: LD_VAR 0 1
5380: NOT
5381: IFFALSE 5385
// exit ;
5383: GO 5978
// if control = control_apeman then
5385: LD_VAR 0 4
5389: PUSH
5390: LD_INT 5
5392: EQUAL
5393: IFFALSE 5502
// begin tmp := UnitsInside ( factory ) ;
5395: LD_ADDR_VAR 0 8
5399: PUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 313
5409: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5410: LD_VAR 0 8
5414: PPUSH
5415: LD_INT 25
5417: PUSH
5418: LD_INT 12
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: PPUSH
5425: CALL_OW 72
5429: NOT
5430: IFFALSE 5440
// control := control_manual ;
5432: LD_ADDR_VAR 0 4
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5440: LD_ADDR_VAR 0 8
5444: PUSH
5445: LD_VAR 0 1
5449: PPUSH
5450: CALL 5137 0 1
5454: ST_TO_ADDR
// if tmp then
5455: LD_VAR 0 8
5459: IFFALSE 5502
// begin for i in tmp do
5461: LD_ADDR_VAR 0 7
5465: PUSH
5466: LD_VAR 0 8
5470: PUSH
5471: FOR_IN
5472: IFFALSE 5500
// if i [ 1 ] = b_ext_radio then
5474: LD_VAR 0 7
5478: PUSH
5479: LD_INT 1
5481: ARRAY
5482: PUSH
5483: LD_INT 22
5485: EQUAL
5486: IFFALSE 5498
// begin control := control_remote ;
5488: LD_ADDR_VAR 0 4
5492: PUSH
5493: LD_INT 2
5495: ST_TO_ADDR
// break ;
5496: GO 5500
// end ;
5498: GO 5471
5500: POP
5501: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5502: LD_VAR 0 1
5506: PPUSH
5507: LD_VAR 0 2
5511: PPUSH
5512: LD_VAR 0 3
5516: PPUSH
5517: LD_VAR 0 4
5521: PPUSH
5522: LD_VAR 0 5
5526: PPUSH
5527: CALL_OW 448
5531: IFFALSE 5566
// begin result := [ chassis , engine , control , weapon ] ;
5533: LD_ADDR_VAR 0 6
5537: PUSH
5538: LD_VAR 0 2
5542: PUSH
5543: LD_VAR 0 3
5547: PUSH
5548: LD_VAR 0 4
5552: PUSH
5553: LD_VAR 0 5
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: ST_TO_ADDR
// exit ;
5564: GO 5978
// end ; _chassis := AvailableChassisList ( factory ) ;
5566: LD_ADDR_VAR 0 9
5570: PUSH
5571: LD_VAR 0 1
5575: PPUSH
5576: CALL_OW 475
5580: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5581: LD_ADDR_VAR 0 11
5585: PUSH
5586: LD_VAR 0 1
5590: PPUSH
5591: CALL_OW 476
5595: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5596: LD_ADDR_VAR 0 12
5600: PUSH
5601: LD_VAR 0 1
5605: PPUSH
5606: CALL_OW 477
5610: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5611: LD_ADDR_VAR 0 10
5615: PUSH
5616: LD_VAR 0 1
5620: PPUSH
5621: CALL_OW 478
5625: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5626: LD_VAR 0 9
5630: NOT
5631: PUSH
5632: LD_VAR 0 11
5636: NOT
5637: OR
5638: PUSH
5639: LD_VAR 0 12
5643: NOT
5644: OR
5645: PUSH
5646: LD_VAR 0 10
5650: NOT
5651: OR
5652: IFFALSE 5687
// begin result := [ chassis , engine , control , weapon ] ;
5654: LD_ADDR_VAR 0 6
5658: PUSH
5659: LD_VAR 0 2
5663: PUSH
5664: LD_VAR 0 3
5668: PUSH
5669: LD_VAR 0 4
5673: PUSH
5674: LD_VAR 0 5
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: ST_TO_ADDR
// exit ;
5685: GO 5978
// end ; if not chassis in _chassis then
5687: LD_VAR 0 2
5691: PUSH
5692: LD_VAR 0 9
5696: IN
5697: NOT
5698: IFFALSE 5724
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5700: LD_ADDR_VAR 0 2
5704: PUSH
5705: LD_VAR 0 9
5709: PUSH
5710: LD_INT 1
5712: PPUSH
5713: LD_VAR 0 9
5717: PPUSH
5718: CALL_OW 12
5722: ARRAY
5723: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_VAR 0 3
5733: PPUSH
5734: CALL 5983 0 2
5738: NOT
5739: IFFALSE 5798
// repeat engine := _engine [ 1 ] ;
5741: LD_ADDR_VAR 0 3
5745: PUSH
5746: LD_VAR 0 11
5750: PUSH
5751: LD_INT 1
5753: ARRAY
5754: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5755: LD_ADDR_VAR 0 11
5759: PUSH
5760: LD_VAR 0 11
5764: PPUSH
5765: LD_INT 1
5767: PPUSH
5768: CALL_OW 3
5772: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5773: LD_VAR 0 2
5777: PPUSH
5778: LD_VAR 0 3
5782: PPUSH
5783: CALL 5983 0 2
5787: PUSH
5788: LD_VAR 0 11
5792: PUSH
5793: EMPTY
5794: EQUAL
5795: OR
5796: IFFALSE 5741
// if not control in _control then
5798: LD_VAR 0 4
5802: PUSH
5803: LD_VAR 0 12
5807: IN
5808: NOT
5809: IFFALSE 5835
// control := _control [ rand ( 1 , _control ) ] ;
5811: LD_ADDR_VAR 0 4
5815: PUSH
5816: LD_VAR 0 12
5820: PUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 12
5828: PPUSH
5829: CALL_OW 12
5833: ARRAY
5834: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5835: LD_VAR 0 2
5839: PPUSH
5840: LD_VAR 0 5
5844: PPUSH
5845: CALL 6203 0 2
5849: NOT
5850: IFFALSE 5909
// repeat weapon := _weapon [ 1 ] ;
5852: LD_ADDR_VAR 0 5
5856: PUSH
5857: LD_VAR 0 10
5861: PUSH
5862: LD_INT 1
5864: ARRAY
5865: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5866: LD_ADDR_VAR 0 10
5870: PUSH
5871: LD_VAR 0 10
5875: PPUSH
5876: LD_INT 1
5878: PPUSH
5879: CALL_OW 3
5883: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5884: LD_VAR 0 2
5888: PPUSH
5889: LD_VAR 0 5
5893: PPUSH
5894: CALL 6203 0 2
5898: PUSH
5899: LD_VAR 0 10
5903: PUSH
5904: EMPTY
5905: EQUAL
5906: OR
5907: IFFALSE 5852
// result := [ ] ;
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: EMPTY
5915: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5916: LD_VAR 0 1
5920: PPUSH
5921: LD_VAR 0 2
5925: PPUSH
5926: LD_VAR 0 3
5930: PPUSH
5931: LD_VAR 0 4
5935: PPUSH
5936: LD_VAR 0 5
5940: PPUSH
5941: CALL_OW 448
5945: IFFALSE 5978
// result := [ chassis , engine , control , weapon ] ;
5947: LD_ADDR_VAR 0 6
5951: PUSH
5952: LD_VAR 0 2
5956: PUSH
5957: LD_VAR 0 3
5961: PUSH
5962: LD_VAR 0 4
5966: PUSH
5967: LD_VAR 0 5
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: ST_TO_ADDR
// end ;
5978: LD_VAR 0 6
5982: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5983: LD_INT 0
5985: PPUSH
// if not chassis or not engine then
5986: LD_VAR 0 1
5990: NOT
5991: PUSH
5992: LD_VAR 0 2
5996: NOT
5997: OR
5998: IFFALSE 6002
// exit ;
6000: GO 6198
// case engine of engine_solar :
6002: LD_VAR 0 2
6006: PUSH
6007: LD_INT 2
6009: DOUBLE
6010: EQUAL
6011: IFTRUE 6015
6013: GO 6053
6015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_INT 11
6023: PUSH
6024: LD_INT 12
6026: PUSH
6027: LD_INT 13
6029: PUSH
6030: LD_INT 14
6032: PUSH
6033: LD_INT 1
6035: PUSH
6036: LD_INT 2
6038: PUSH
6039: LD_INT 3
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: ST_TO_ADDR
6051: GO 6182
6053: LD_INT 1
6055: DOUBLE
6056: EQUAL
6057: IFTRUE 6061
6059: GO 6123
6061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6062: LD_ADDR_VAR 0 3
6066: PUSH
6067: LD_INT 11
6069: PUSH
6070: LD_INT 12
6072: PUSH
6073: LD_INT 13
6075: PUSH
6076: LD_INT 14
6078: PUSH
6079: LD_INT 1
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: LD_INT 3
6087: PUSH
6088: LD_INT 4
6090: PUSH
6091: LD_INT 5
6093: PUSH
6094: LD_INT 21
6096: PUSH
6097: LD_INT 23
6099: PUSH
6100: LD_INT 22
6102: PUSH
6103: LD_INT 24
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: ST_TO_ADDR
6121: GO 6182
6123: LD_INT 3
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6181
6131: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6132: LD_ADDR_VAR 0 3
6136: PUSH
6137: LD_INT 13
6139: PUSH
6140: LD_INT 14
6142: PUSH
6143: LD_INT 2
6145: PUSH
6146: LD_INT 3
6148: PUSH
6149: LD_INT 4
6151: PUSH
6152: LD_INT 5
6154: PUSH
6155: LD_INT 21
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 23
6163: PUSH
6164: LD_INT 24
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: ST_TO_ADDR
6179: GO 6182
6181: POP
// result := ( chassis in result ) ;
6182: LD_ADDR_VAR 0 3
6186: PUSH
6187: LD_VAR 0 1
6191: PUSH
6192: LD_VAR 0 3
6196: IN
6197: ST_TO_ADDR
// end ;
6198: LD_VAR 0 3
6202: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6203: LD_INT 0
6205: PPUSH
// if not chassis or not weapon then
6206: LD_VAR 0 1
6210: NOT
6211: PUSH
6212: LD_VAR 0 2
6216: NOT
6217: OR
6218: IFFALSE 6222
// exit ;
6220: GO 7248
// case weapon of us_machine_gun :
6222: LD_VAR 0 2
6226: PUSH
6227: LD_INT 2
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6265
6235: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6236: LD_ADDR_VAR 0 3
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: LD_INT 2
6246: PUSH
6247: LD_INT 3
6249: PUSH
6250: LD_INT 4
6252: PUSH
6253: LD_INT 5
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: ST_TO_ADDR
6263: GO 7232
6265: LD_INT 3
6267: DOUBLE
6268: EQUAL
6269: IFTRUE 6273
6271: GO 6303
6273: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6274: LD_ADDR_VAR 0 3
6278: PUSH
6279: LD_INT 1
6281: PUSH
6282: LD_INT 2
6284: PUSH
6285: LD_INT 3
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 5
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: ST_TO_ADDR
6301: GO 7232
6303: LD_INT 11
6305: DOUBLE
6306: EQUAL
6307: IFTRUE 6311
6309: GO 6341
6311: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6312: LD_ADDR_VAR 0 3
6316: PUSH
6317: LD_INT 1
6319: PUSH
6320: LD_INT 2
6322: PUSH
6323: LD_INT 3
6325: PUSH
6326: LD_INT 4
6328: PUSH
6329: LD_INT 5
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: ST_TO_ADDR
6339: GO 7232
6341: LD_INT 4
6343: DOUBLE
6344: EQUAL
6345: IFTRUE 6349
6347: GO 6375
6349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6350: LD_ADDR_VAR 0 3
6354: PUSH
6355: LD_INT 2
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: LD_INT 4
6363: PUSH
6364: LD_INT 5
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: ST_TO_ADDR
6373: GO 7232
6375: LD_INT 5
6377: DOUBLE
6378: EQUAL
6379: IFTRUE 6383
6381: GO 6409
6383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6384: LD_ADDR_VAR 0 3
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: LD_INT 3
6394: PUSH
6395: LD_INT 4
6397: PUSH
6398: LD_INT 5
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: ST_TO_ADDR
6407: GO 7232
6409: LD_INT 9
6411: DOUBLE
6412: EQUAL
6413: IFTRUE 6417
6415: GO 6443
6417: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6418: LD_ADDR_VAR 0 3
6422: PUSH
6423: LD_INT 2
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: LD_INT 4
6431: PUSH
6432: LD_INT 5
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: ST_TO_ADDR
6441: GO 7232
6443: LD_INT 7
6445: DOUBLE
6446: EQUAL
6447: IFTRUE 6451
6449: GO 6477
6451: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6452: LD_ADDR_VAR 0 3
6456: PUSH
6457: LD_INT 2
6459: PUSH
6460: LD_INT 3
6462: PUSH
6463: LD_INT 4
6465: PUSH
6466: LD_INT 5
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: ST_TO_ADDR
6475: GO 7232
6477: LD_INT 12
6479: DOUBLE
6480: EQUAL
6481: IFTRUE 6485
6483: GO 6511
6485: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6486: LD_ADDR_VAR 0 3
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: LD_INT 3
6496: PUSH
6497: LD_INT 4
6499: PUSH
6500: LD_INT 5
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: ST_TO_ADDR
6509: GO 7232
6511: LD_INT 13
6513: DOUBLE
6514: EQUAL
6515: IFTRUE 6519
6517: GO 6545
6519: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6520: LD_ADDR_VAR 0 3
6524: PUSH
6525: LD_INT 2
6527: PUSH
6528: LD_INT 3
6530: PUSH
6531: LD_INT 4
6533: PUSH
6534: LD_INT 5
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: ST_TO_ADDR
6543: GO 7232
6545: LD_INT 14
6547: DOUBLE
6548: EQUAL
6549: IFTRUE 6553
6551: GO 6571
6553: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_INT 4
6561: PUSH
6562: LD_INT 5
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: ST_TO_ADDR
6569: GO 7232
6571: LD_INT 6
6573: DOUBLE
6574: EQUAL
6575: IFTRUE 6579
6577: GO 6597
6579: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6580: LD_ADDR_VAR 0 3
6584: PUSH
6585: LD_INT 4
6587: PUSH
6588: LD_INT 5
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: ST_TO_ADDR
6595: GO 7232
6597: LD_INT 10
6599: DOUBLE
6600: EQUAL
6601: IFTRUE 6605
6603: GO 6623
6605: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6606: LD_ADDR_VAR 0 3
6610: PUSH
6611: LD_INT 4
6613: PUSH
6614: LD_INT 5
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: ST_TO_ADDR
6621: GO 7232
6623: LD_INT 22
6625: DOUBLE
6626: EQUAL
6627: IFTRUE 6631
6629: GO 6657
6631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: LD_INT 11
6639: PUSH
6640: LD_INT 12
6642: PUSH
6643: LD_INT 13
6645: PUSH
6646: LD_INT 14
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: ST_TO_ADDR
6655: GO 7232
6657: LD_INT 23
6659: DOUBLE
6660: EQUAL
6661: IFTRUE 6665
6663: GO 6691
6665: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6666: LD_ADDR_VAR 0 3
6670: PUSH
6671: LD_INT 11
6673: PUSH
6674: LD_INT 12
6676: PUSH
6677: LD_INT 13
6679: PUSH
6680: LD_INT 14
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: ST_TO_ADDR
6689: GO 7232
6691: LD_INT 24
6693: DOUBLE
6694: EQUAL
6695: IFTRUE 6699
6697: GO 6725
6699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6700: LD_ADDR_VAR 0 3
6704: PUSH
6705: LD_INT 11
6707: PUSH
6708: LD_INT 12
6710: PUSH
6711: LD_INT 13
6713: PUSH
6714: LD_INT 14
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: ST_TO_ADDR
6723: GO 7232
6725: LD_INT 30
6727: DOUBLE
6728: EQUAL
6729: IFTRUE 6733
6731: GO 6759
6733: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6734: LD_ADDR_VAR 0 3
6738: PUSH
6739: LD_INT 11
6741: PUSH
6742: LD_INT 12
6744: PUSH
6745: LD_INT 13
6747: PUSH
6748: LD_INT 14
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: ST_TO_ADDR
6757: GO 7232
6759: LD_INT 25
6761: DOUBLE
6762: EQUAL
6763: IFTRUE 6767
6765: GO 6785
6767: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6768: LD_ADDR_VAR 0 3
6772: PUSH
6773: LD_INT 13
6775: PUSH
6776: LD_INT 14
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: ST_TO_ADDR
6783: GO 7232
6785: LD_INT 27
6787: DOUBLE
6788: EQUAL
6789: IFTRUE 6793
6791: GO 6811
6793: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6794: LD_ADDR_VAR 0 3
6798: PUSH
6799: LD_INT 13
6801: PUSH
6802: LD_INT 14
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: ST_TO_ADDR
6809: GO 7232
6811: LD_INT 28
6813: DOUBLE
6814: EQUAL
6815: IFTRUE 6819
6817: GO 6837
6819: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6820: LD_ADDR_VAR 0 3
6824: PUSH
6825: LD_INT 13
6827: PUSH
6828: LD_INT 14
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: ST_TO_ADDR
6835: GO 7232
6837: LD_INT 29
6839: DOUBLE
6840: EQUAL
6841: IFTRUE 6845
6843: GO 6863
6845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6846: LD_ADDR_VAR 0 3
6850: PUSH
6851: LD_INT 13
6853: PUSH
6854: LD_INT 14
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: ST_TO_ADDR
6861: GO 7232
6863: LD_INT 31
6865: DOUBLE
6866: EQUAL
6867: IFTRUE 6871
6869: GO 6889
6871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6872: LD_ADDR_VAR 0 3
6876: PUSH
6877: LD_INT 13
6879: PUSH
6880: LD_INT 14
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: ST_TO_ADDR
6887: GO 7232
6889: LD_INT 26
6891: DOUBLE
6892: EQUAL
6893: IFTRUE 6897
6895: GO 6915
6897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6898: LD_ADDR_VAR 0 3
6902: PUSH
6903: LD_INT 13
6905: PUSH
6906: LD_INT 14
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: ST_TO_ADDR
6913: GO 7232
6915: LD_INT 42
6917: DOUBLE
6918: EQUAL
6919: IFTRUE 6923
6921: GO 6949
6923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6924: LD_ADDR_VAR 0 3
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 22
6934: PUSH
6935: LD_INT 23
6937: PUSH
6938: LD_INT 24
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: ST_TO_ADDR
6947: GO 7232
6949: LD_INT 43
6951: DOUBLE
6952: EQUAL
6953: IFTRUE 6957
6955: GO 6983
6957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6958: LD_ADDR_VAR 0 3
6962: PUSH
6963: LD_INT 21
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 23
6971: PUSH
6972: LD_INT 24
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
6981: GO 7232
6983: LD_INT 44
6985: DOUBLE
6986: EQUAL
6987: IFTRUE 6991
6989: GO 7017
6991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6992: LD_ADDR_VAR 0 3
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_INT 23
7005: PUSH
7006: LD_INT 24
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: ST_TO_ADDR
7015: GO 7232
7017: LD_INT 45
7019: DOUBLE
7020: EQUAL
7021: IFTRUE 7025
7023: GO 7051
7025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7026: LD_ADDR_VAR 0 3
7030: PUSH
7031: LD_INT 21
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 23
7039: PUSH
7040: LD_INT 24
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: ST_TO_ADDR
7049: GO 7232
7051: LD_INT 49
7053: DOUBLE
7054: EQUAL
7055: IFTRUE 7059
7057: GO 7085
7059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: LD_INT 21
7067: PUSH
7068: LD_INT 22
7070: PUSH
7071: LD_INT 23
7073: PUSH
7074: LD_INT 24
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: ST_TO_ADDR
7083: GO 7232
7085: LD_INT 51
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7093
7091: GO 7119
7093: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7094: LD_ADDR_VAR 0 3
7098: PUSH
7099: LD_INT 21
7101: PUSH
7102: LD_INT 22
7104: PUSH
7105: LD_INT 23
7107: PUSH
7108: LD_INT 24
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: ST_TO_ADDR
7117: GO 7232
7119: LD_INT 52
7121: DOUBLE
7122: EQUAL
7123: IFTRUE 7127
7125: GO 7153
7127: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7128: LD_ADDR_VAR 0 3
7132: PUSH
7133: LD_INT 21
7135: PUSH
7136: LD_INT 22
7138: PUSH
7139: LD_INT 23
7141: PUSH
7142: LD_INT 24
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: ST_TO_ADDR
7151: GO 7232
7153: LD_INT 53
7155: DOUBLE
7156: EQUAL
7157: IFTRUE 7161
7159: GO 7179
7161: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7162: LD_ADDR_VAR 0 3
7166: PUSH
7167: LD_INT 23
7169: PUSH
7170: LD_INT 24
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: ST_TO_ADDR
7177: GO 7232
7179: LD_INT 46
7181: DOUBLE
7182: EQUAL
7183: IFTRUE 7187
7185: GO 7205
7187: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7188: LD_ADDR_VAR 0 3
7192: PUSH
7193: LD_INT 23
7195: PUSH
7196: LD_INT 24
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: ST_TO_ADDR
7203: GO 7232
7205: LD_INT 47
7207: DOUBLE
7208: EQUAL
7209: IFTRUE 7213
7211: GO 7231
7213: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7214: LD_ADDR_VAR 0 3
7218: PUSH
7219: LD_INT 23
7221: PUSH
7222: LD_INT 24
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: ST_TO_ADDR
7229: GO 7232
7231: POP
// result := ( chassis in result ) ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_VAR 0 1
7241: PUSH
7242: LD_VAR 0 3
7246: IN
7247: ST_TO_ADDR
// end ;
7248: LD_VAR 0 3
7252: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7253: LD_INT 0
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
7260: PPUSH
7261: PPUSH
// result := array ;
7262: LD_ADDR_VAR 0 5
7266: PUSH
7267: LD_VAR 0 1
7271: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7272: LD_VAR 0 1
7276: NOT
7277: PUSH
7278: LD_VAR 0 2
7282: NOT
7283: OR
7284: PUSH
7285: LD_VAR 0 3
7289: NOT
7290: OR
7291: PUSH
7292: LD_VAR 0 2
7296: PUSH
7297: LD_VAR 0 1
7301: GREATER
7302: OR
7303: PUSH
7304: LD_VAR 0 3
7308: PUSH
7309: LD_VAR 0 1
7313: GREATER
7314: OR
7315: IFFALSE 7319
// exit ;
7317: GO 7615
// if direction then
7319: LD_VAR 0 4
7323: IFFALSE 7387
// begin d := 1 ;
7325: LD_ADDR_VAR 0 9
7329: PUSH
7330: LD_INT 1
7332: ST_TO_ADDR
// if i_from > i_to then
7333: LD_VAR 0 2
7337: PUSH
7338: LD_VAR 0 3
7342: GREATER
7343: IFFALSE 7369
// length := ( array - i_from ) + i_to else
7345: LD_ADDR_VAR 0 11
7349: PUSH
7350: LD_VAR 0 1
7354: PUSH
7355: LD_VAR 0 2
7359: MINUS
7360: PUSH
7361: LD_VAR 0 3
7365: PLUS
7366: ST_TO_ADDR
7367: GO 7385
// length := i_to - i_from ;
7369: LD_ADDR_VAR 0 11
7373: PUSH
7374: LD_VAR 0 3
7378: PUSH
7379: LD_VAR 0 2
7383: MINUS
7384: ST_TO_ADDR
// end else
7385: GO 7448
// begin d := - 1 ;
7387: LD_ADDR_VAR 0 9
7391: PUSH
7392: LD_INT 1
7394: NEG
7395: ST_TO_ADDR
// if i_from > i_to then
7396: LD_VAR 0 2
7400: PUSH
7401: LD_VAR 0 3
7405: GREATER
7406: IFFALSE 7426
// length := i_from - i_to else
7408: LD_ADDR_VAR 0 11
7412: PUSH
7413: LD_VAR 0 2
7417: PUSH
7418: LD_VAR 0 3
7422: MINUS
7423: ST_TO_ADDR
7424: GO 7448
// length := ( array - i_to ) + i_from ;
7426: LD_ADDR_VAR 0 11
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_VAR 0 3
7440: MINUS
7441: PUSH
7442: LD_VAR 0 2
7446: PLUS
7447: ST_TO_ADDR
// end ; if not length then
7448: LD_VAR 0 11
7452: NOT
7453: IFFALSE 7457
// exit ;
7455: GO 7615
// tmp := array ;
7457: LD_ADDR_VAR 0 10
7461: PUSH
7462: LD_VAR 0 1
7466: ST_TO_ADDR
// for i = 1 to length do
7467: LD_ADDR_VAR 0 6
7471: PUSH
7472: DOUBLE
7473: LD_INT 1
7475: DEC
7476: ST_TO_ADDR
7477: LD_VAR 0 11
7481: PUSH
7482: FOR_TO
7483: IFFALSE 7603
// begin for j = 1 to array do
7485: LD_ADDR_VAR 0 7
7489: PUSH
7490: DOUBLE
7491: LD_INT 1
7493: DEC
7494: ST_TO_ADDR
7495: LD_VAR 0 1
7499: PUSH
7500: FOR_TO
7501: IFFALSE 7589
// begin k := j + d ;
7503: LD_ADDR_VAR 0 8
7507: PUSH
7508: LD_VAR 0 7
7512: PUSH
7513: LD_VAR 0 9
7517: PLUS
7518: ST_TO_ADDR
// if k > array then
7519: LD_VAR 0 8
7523: PUSH
7524: LD_VAR 0 1
7528: GREATER
7529: IFFALSE 7539
// k := 1 ;
7531: LD_ADDR_VAR 0 8
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if not k then
7539: LD_VAR 0 8
7543: NOT
7544: IFFALSE 7556
// k := array ;
7546: LD_ADDR_VAR 0 8
7550: PUSH
7551: LD_VAR 0 1
7555: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7556: LD_ADDR_VAR 0 10
7560: PUSH
7561: LD_VAR 0 10
7565: PPUSH
7566: LD_VAR 0 8
7570: PPUSH
7571: LD_VAR 0 1
7575: PUSH
7576: LD_VAR 0 7
7580: ARRAY
7581: PPUSH
7582: CALL_OW 1
7586: ST_TO_ADDR
// end ;
7587: GO 7500
7589: POP
7590: POP
// array := tmp ;
7591: LD_ADDR_VAR 0 1
7595: PUSH
7596: LD_VAR 0 10
7600: ST_TO_ADDR
// end ;
7601: GO 7482
7603: POP
7604: POP
// result := array ;
7605: LD_ADDR_VAR 0 5
7609: PUSH
7610: LD_VAR 0 1
7614: ST_TO_ADDR
// end ;
7615: LD_VAR 0 5
7619: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
// result := 0 ;
7624: LD_ADDR_VAR 0 3
7628: PUSH
7629: LD_INT 0
7631: ST_TO_ADDR
// if not array or not value in array then
7632: LD_VAR 0 1
7636: NOT
7637: PUSH
7638: LD_VAR 0 2
7642: PUSH
7643: LD_VAR 0 1
7647: IN
7648: NOT
7649: OR
7650: IFFALSE 7654
// exit ;
7652: GO 7708
// for i = 1 to array do
7654: LD_ADDR_VAR 0 4
7658: PUSH
7659: DOUBLE
7660: LD_INT 1
7662: DEC
7663: ST_TO_ADDR
7664: LD_VAR 0 1
7668: PUSH
7669: FOR_TO
7670: IFFALSE 7706
// if value = array [ i ] then
7672: LD_VAR 0 2
7676: PUSH
7677: LD_VAR 0 1
7681: PUSH
7682: LD_VAR 0 4
7686: ARRAY
7687: EQUAL
7688: IFFALSE 7704
// begin result := i ;
7690: LD_ADDR_VAR 0 3
7694: PUSH
7695: LD_VAR 0 4
7699: ST_TO_ADDR
// exit ;
7700: POP
7701: POP
7702: GO 7708
// end ;
7704: GO 7669
7706: POP
7707: POP
// end ;
7708: LD_VAR 0 3
7712: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7713: LD_INT 0
7715: PPUSH
// vc_chassis := chassis ;
7716: LD_ADDR_OWVAR 37
7720: PUSH
7721: LD_VAR 0 1
7725: ST_TO_ADDR
// vc_engine := engine ;
7726: LD_ADDR_OWVAR 39
7730: PUSH
7731: LD_VAR 0 2
7735: ST_TO_ADDR
// vc_control := control ;
7736: LD_ADDR_OWVAR 38
7740: PUSH
7741: LD_VAR 0 3
7745: ST_TO_ADDR
// vc_weapon := weapon ;
7746: LD_ADDR_OWVAR 40
7750: PUSH
7751: LD_VAR 0 4
7755: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7756: LD_ADDR_OWVAR 41
7760: PUSH
7761: LD_VAR 0 5
7765: ST_TO_ADDR
// end ;
7766: LD_VAR 0 6
7770: RET
// export function WantPlant ( unit ) ; var task ; begin
7771: LD_INT 0
7773: PPUSH
7774: PPUSH
// result := false ;
7775: LD_ADDR_VAR 0 2
7779: PUSH
7780: LD_INT 0
7782: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7783: LD_ADDR_VAR 0 3
7787: PUSH
7788: LD_VAR 0 1
7792: PPUSH
7793: CALL_OW 437
7797: ST_TO_ADDR
// if task then
7798: LD_VAR 0 3
7802: IFFALSE 7830
// if task [ 1 ] [ 1 ] = p then
7804: LD_VAR 0 3
7808: PUSH
7809: LD_INT 1
7811: ARRAY
7812: PUSH
7813: LD_INT 1
7815: ARRAY
7816: PUSH
7817: LD_STRING p
7819: EQUAL
7820: IFFALSE 7830
// result := true ;
7822: LD_ADDR_VAR 0 2
7826: PUSH
7827: LD_INT 1
7829: ST_TO_ADDR
// end ;
7830: LD_VAR 0 2
7834: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7835: LD_INT 0
7837: PPUSH
7838: PPUSH
7839: PPUSH
7840: PPUSH
// if pos < 1 then
7841: LD_VAR 0 2
7845: PUSH
7846: LD_INT 1
7848: LESS
7849: IFFALSE 7853
// exit ;
7851: GO 8156
// if pos = 1 then
7853: LD_VAR 0 2
7857: PUSH
7858: LD_INT 1
7860: EQUAL
7861: IFFALSE 7894
// result := Replace ( arr , pos [ 1 ] , value ) else
7863: LD_ADDR_VAR 0 4
7867: PUSH
7868: LD_VAR 0 1
7872: PPUSH
7873: LD_VAR 0 2
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: LD_VAR 0 3
7886: PPUSH
7887: CALL_OW 1
7891: ST_TO_ADDR
7892: GO 8156
// begin tmp := arr ;
7894: LD_ADDR_VAR 0 6
7898: PUSH
7899: LD_VAR 0 1
7903: ST_TO_ADDR
// s_arr := [ tmp ] ;
7904: LD_ADDR_VAR 0 7
7908: PUSH
7909: LD_VAR 0 6
7913: PUSH
7914: EMPTY
7915: LIST
7916: ST_TO_ADDR
// for i = 1 to pos - 1 do
7917: LD_ADDR_VAR 0 5
7921: PUSH
7922: DOUBLE
7923: LD_INT 1
7925: DEC
7926: ST_TO_ADDR
7927: LD_VAR 0 2
7931: PUSH
7932: LD_INT 1
7934: MINUS
7935: PUSH
7936: FOR_TO
7937: IFFALSE 7982
// begin tmp := tmp [ pos [ i ] ] ;
7939: LD_ADDR_VAR 0 6
7943: PUSH
7944: LD_VAR 0 6
7948: PUSH
7949: LD_VAR 0 2
7953: PUSH
7954: LD_VAR 0 5
7958: ARRAY
7959: ARRAY
7960: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7961: LD_ADDR_VAR 0 7
7965: PUSH
7966: LD_VAR 0 7
7970: PUSH
7971: LD_VAR 0 6
7975: PUSH
7976: EMPTY
7977: LIST
7978: ADD
7979: ST_TO_ADDR
// end ;
7980: GO 7936
7982: POP
7983: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7984: LD_ADDR_VAR 0 6
7988: PUSH
7989: LD_VAR 0 6
7993: PPUSH
7994: LD_VAR 0 2
7998: PUSH
7999: LD_VAR 0 2
8003: ARRAY
8004: PPUSH
8005: LD_VAR 0 3
8009: PPUSH
8010: CALL_OW 1
8014: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8015: LD_ADDR_VAR 0 7
8019: PUSH
8020: LD_VAR 0 7
8024: PPUSH
8025: LD_VAR 0 7
8029: PPUSH
8030: LD_VAR 0 6
8034: PPUSH
8035: CALL_OW 1
8039: ST_TO_ADDR
// for i = s_arr downto 2 do
8040: LD_ADDR_VAR 0 5
8044: PUSH
8045: DOUBLE
8046: LD_VAR 0 7
8050: INC
8051: ST_TO_ADDR
8052: LD_INT 2
8054: PUSH
8055: FOR_DOWNTO
8056: IFFALSE 8140
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8058: LD_ADDR_VAR 0 6
8062: PUSH
8063: LD_VAR 0 7
8067: PUSH
8068: LD_VAR 0 5
8072: PUSH
8073: LD_INT 1
8075: MINUS
8076: ARRAY
8077: PPUSH
8078: LD_VAR 0 2
8082: PUSH
8083: LD_VAR 0 5
8087: PUSH
8088: LD_INT 1
8090: MINUS
8091: ARRAY
8092: PPUSH
8093: LD_VAR 0 7
8097: PUSH
8098: LD_VAR 0 5
8102: ARRAY
8103: PPUSH
8104: CALL_OW 1
8108: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8109: LD_ADDR_VAR 0 7
8113: PUSH
8114: LD_VAR 0 7
8118: PPUSH
8119: LD_VAR 0 5
8123: PUSH
8124: LD_INT 1
8126: MINUS
8127: PPUSH
8128: LD_VAR 0 6
8132: PPUSH
8133: CALL_OW 1
8137: ST_TO_ADDR
// end ;
8138: GO 8055
8140: POP
8141: POP
// result := s_arr [ 1 ] ;
8142: LD_ADDR_VAR 0 4
8146: PUSH
8147: LD_VAR 0 7
8151: PUSH
8152: LD_INT 1
8154: ARRAY
8155: ST_TO_ADDR
// end ; end ;
8156: LD_VAR 0 4
8160: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8161: LD_INT 0
8163: PPUSH
8164: PPUSH
// if not list then
8165: LD_VAR 0 1
8169: NOT
8170: IFFALSE 8174
// exit ;
8172: GO 8265
// i := list [ pos1 ] ;
8174: LD_ADDR_VAR 0 5
8178: PUSH
8179: LD_VAR 0 1
8183: PUSH
8184: LD_VAR 0 2
8188: ARRAY
8189: ST_TO_ADDR
// if not i then
8190: LD_VAR 0 5
8194: NOT
8195: IFFALSE 8199
// exit ;
8197: GO 8265
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8199: LD_ADDR_VAR 0 1
8203: PUSH
8204: LD_VAR 0 1
8208: PPUSH
8209: LD_VAR 0 2
8213: PPUSH
8214: LD_VAR 0 1
8218: PUSH
8219: LD_VAR 0 3
8223: ARRAY
8224: PPUSH
8225: CALL_OW 1
8229: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8230: LD_ADDR_VAR 0 1
8234: PUSH
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_VAR 0 3
8244: PPUSH
8245: LD_VAR 0 5
8249: PPUSH
8250: CALL_OW 1
8254: ST_TO_ADDR
// result := list ;
8255: LD_ADDR_VAR 0 4
8259: PUSH
8260: LD_VAR 0 1
8264: ST_TO_ADDR
// end ;
8265: LD_VAR 0 4
8269: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8270: LD_INT 0
8272: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8273: LD_ADDR_VAR 0 5
8277: PUSH
8278: LD_VAR 0 1
8282: PPUSH
8283: CALL_OW 250
8287: PPUSH
8288: LD_VAR 0 1
8292: PPUSH
8293: CALL_OW 251
8297: PPUSH
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PPUSH
8308: LD_VAR 0 4
8312: PPUSH
8313: CALL 8323 0 5
8317: ST_TO_ADDR
// end ;
8318: LD_VAR 0 5
8322: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8323: LD_INT 0
8325: PPUSH
8326: PPUSH
8327: PPUSH
8328: PPUSH
// if not list then
8329: LD_VAR 0 3
8333: NOT
8334: IFFALSE 8338
// exit ;
8336: GO 8726
// result := [ ] ;
8338: LD_ADDR_VAR 0 6
8342: PUSH
8343: EMPTY
8344: ST_TO_ADDR
// for i in list do
8345: LD_ADDR_VAR 0 7
8349: PUSH
8350: LD_VAR 0 3
8354: PUSH
8355: FOR_IN
8356: IFFALSE 8558
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8358: LD_ADDR_VAR 0 9
8362: PUSH
8363: LD_VAR 0 7
8367: PPUSH
8368: LD_VAR 0 1
8372: PPUSH
8373: LD_VAR 0 2
8377: PPUSH
8378: CALL_OW 297
8382: ST_TO_ADDR
// if not result then
8383: LD_VAR 0 6
8387: NOT
8388: IFFALSE 8414
// result := [ [ i , tmp ] ] else
8390: LD_ADDR_VAR 0 6
8394: PUSH
8395: LD_VAR 0 7
8399: PUSH
8400: LD_VAR 0 9
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: EMPTY
8410: LIST
8411: ST_TO_ADDR
8412: GO 8556
// begin if result [ result ] [ 2 ] < tmp then
8414: LD_VAR 0 6
8418: PUSH
8419: LD_VAR 0 6
8423: ARRAY
8424: PUSH
8425: LD_INT 2
8427: ARRAY
8428: PUSH
8429: LD_VAR 0 9
8433: LESS
8434: IFFALSE 8476
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8436: LD_ADDR_VAR 0 6
8440: PUSH
8441: LD_VAR 0 6
8445: PPUSH
8446: LD_VAR 0 6
8450: PUSH
8451: LD_INT 1
8453: PLUS
8454: PPUSH
8455: LD_VAR 0 7
8459: PUSH
8460: LD_VAR 0 9
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PPUSH
8469: CALL_OW 2
8473: ST_TO_ADDR
8474: GO 8556
// for j = 1 to result do
8476: LD_ADDR_VAR 0 8
8480: PUSH
8481: DOUBLE
8482: LD_INT 1
8484: DEC
8485: ST_TO_ADDR
8486: LD_VAR 0 6
8490: PUSH
8491: FOR_TO
8492: IFFALSE 8554
// begin if tmp < result [ j ] [ 2 ] then
8494: LD_VAR 0 9
8498: PUSH
8499: LD_VAR 0 6
8503: PUSH
8504: LD_VAR 0 8
8508: ARRAY
8509: PUSH
8510: LD_INT 2
8512: ARRAY
8513: LESS
8514: IFFALSE 8552
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8516: LD_ADDR_VAR 0 6
8520: PUSH
8521: LD_VAR 0 6
8525: PPUSH
8526: LD_VAR 0 8
8530: PPUSH
8531: LD_VAR 0 7
8535: PUSH
8536: LD_VAR 0 9
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 2
8549: ST_TO_ADDR
// break ;
8550: GO 8554
// end ; end ;
8552: GO 8491
8554: POP
8555: POP
// end ; end ;
8556: GO 8355
8558: POP
8559: POP
// if result and not asc then
8560: LD_VAR 0 6
8564: PUSH
8565: LD_VAR 0 4
8569: NOT
8570: AND
8571: IFFALSE 8646
// begin tmp := result ;
8573: LD_ADDR_VAR 0 9
8577: PUSH
8578: LD_VAR 0 6
8582: ST_TO_ADDR
// for i = tmp downto 1 do
8583: LD_ADDR_VAR 0 7
8587: PUSH
8588: DOUBLE
8589: LD_VAR 0 9
8593: INC
8594: ST_TO_ADDR
8595: LD_INT 1
8597: PUSH
8598: FOR_DOWNTO
8599: IFFALSE 8644
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8601: LD_ADDR_VAR 0 6
8605: PUSH
8606: LD_VAR 0 6
8610: PPUSH
8611: LD_VAR 0 9
8615: PUSH
8616: LD_VAR 0 7
8620: MINUS
8621: PUSH
8622: LD_INT 1
8624: PLUS
8625: PPUSH
8626: LD_VAR 0 9
8630: PUSH
8631: LD_VAR 0 7
8635: ARRAY
8636: PPUSH
8637: CALL_OW 1
8641: ST_TO_ADDR
8642: GO 8598
8644: POP
8645: POP
// end ; tmp := [ ] ;
8646: LD_ADDR_VAR 0 9
8650: PUSH
8651: EMPTY
8652: ST_TO_ADDR
// if mode then
8653: LD_VAR 0 5
8657: IFFALSE 8726
// begin for i = 1 to result do
8659: LD_ADDR_VAR 0 7
8663: PUSH
8664: DOUBLE
8665: LD_INT 1
8667: DEC
8668: ST_TO_ADDR
8669: LD_VAR 0 6
8673: PUSH
8674: FOR_TO
8675: IFFALSE 8714
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8677: LD_ADDR_VAR 0 9
8681: PUSH
8682: LD_VAR 0 9
8686: PPUSH
8687: LD_VAR 0 7
8691: PPUSH
8692: LD_VAR 0 6
8696: PUSH
8697: LD_VAR 0 7
8701: ARRAY
8702: PUSH
8703: LD_INT 1
8705: ARRAY
8706: PPUSH
8707: CALL_OW 1
8711: ST_TO_ADDR
8712: GO 8674
8714: POP
8715: POP
// result := tmp ;
8716: LD_ADDR_VAR 0 6
8720: PUSH
8721: LD_VAR 0 9
8725: ST_TO_ADDR
// end ; end ;
8726: LD_VAR 0 6
8730: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8731: LD_INT 0
8733: PPUSH
8734: PPUSH
8735: PPUSH
8736: PPUSH
8737: PPUSH
8738: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8739: LD_ADDR_VAR 0 5
8743: PUSH
8744: LD_INT 0
8746: PUSH
8747: LD_INT 0
8749: PUSH
8750: LD_INT 0
8752: PUSH
8753: EMPTY
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: ST_TO_ADDR
// if not x or not y then
8761: LD_VAR 0 2
8765: NOT
8766: PUSH
8767: LD_VAR 0 3
8771: NOT
8772: OR
8773: IFFALSE 8777
// exit ;
8775: GO 10423
// if not range then
8777: LD_VAR 0 4
8781: NOT
8782: IFFALSE 8792
// range := 10 ;
8784: LD_ADDR_VAR 0 4
8788: PUSH
8789: LD_INT 10
8791: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8792: LD_ADDR_VAR 0 8
8796: PUSH
8797: LD_INT 81
8799: PUSH
8800: LD_VAR 0 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 92
8811: PUSH
8812: LD_VAR 0 2
8816: PUSH
8817: LD_VAR 0 3
8821: PUSH
8822: LD_VAR 0 4
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: LD_INT 21
8838: PUSH
8839: LD_INT 3
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: ST_TO_ADDR
// if not tmp then
8860: LD_VAR 0 8
8864: NOT
8865: IFFALSE 8869
// exit ;
8867: GO 10423
// for i in tmp do
8869: LD_ADDR_VAR 0 6
8873: PUSH
8874: LD_VAR 0 8
8878: PUSH
8879: FOR_IN
8880: IFFALSE 10398
// begin points := [ 0 , 0 , 0 ] ;
8882: LD_ADDR_VAR 0 9
8886: PUSH
8887: LD_INT 0
8889: PUSH
8890: LD_INT 0
8892: PUSH
8893: LD_INT 0
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: ST_TO_ADDR
// bpoints := 1 ;
8901: LD_ADDR_VAR 0 10
8905: PUSH
8906: LD_INT 1
8908: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8909: LD_VAR 0 6
8913: PPUSH
8914: CALL_OW 247
8918: PUSH
8919: LD_INT 1
8921: DOUBLE
8922: EQUAL
8923: IFTRUE 8927
8925: GO 9505
8927: POP
// begin if GetClass ( i ) = 1 then
8928: LD_VAR 0 6
8932: PPUSH
8933: CALL_OW 257
8937: PUSH
8938: LD_INT 1
8940: EQUAL
8941: IFFALSE 8962
// points := [ 10 , 5 , 3 ] ;
8943: LD_ADDR_VAR 0 9
8947: PUSH
8948: LD_INT 10
8950: PUSH
8951: LD_INT 5
8953: PUSH
8954: LD_INT 3
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: LIST
8961: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8962: LD_VAR 0 6
8966: PPUSH
8967: CALL_OW 257
8971: PUSH
8972: LD_INT 2
8974: PUSH
8975: LD_INT 3
8977: PUSH
8978: LD_INT 4
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: IN
8986: IFFALSE 9007
// points := [ 3 , 2 , 1 ] ;
8988: LD_ADDR_VAR 0 9
8992: PUSH
8993: LD_INT 3
8995: PUSH
8996: LD_INT 2
8998: PUSH
8999: LD_INT 1
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9007: LD_VAR 0 6
9011: PPUSH
9012: CALL_OW 257
9016: PUSH
9017: LD_INT 5
9019: EQUAL
9020: IFFALSE 9041
// points := [ 130 , 5 , 2 ] ;
9022: LD_ADDR_VAR 0 9
9026: PUSH
9027: LD_INT 130
9029: PUSH
9030: LD_INT 5
9032: PUSH
9033: LD_INT 2
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9041: LD_VAR 0 6
9045: PPUSH
9046: CALL_OW 257
9050: PUSH
9051: LD_INT 8
9053: EQUAL
9054: IFFALSE 9075
// points := [ 35 , 35 , 30 ] ;
9056: LD_ADDR_VAR 0 9
9060: PUSH
9061: LD_INT 35
9063: PUSH
9064: LD_INT 35
9066: PUSH
9067: LD_INT 30
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9075: LD_VAR 0 6
9079: PPUSH
9080: CALL_OW 257
9084: PUSH
9085: LD_INT 9
9087: EQUAL
9088: IFFALSE 9109
// points := [ 20 , 55 , 40 ] ;
9090: LD_ADDR_VAR 0 9
9094: PUSH
9095: LD_INT 20
9097: PUSH
9098: LD_INT 55
9100: PUSH
9101: LD_INT 40
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: LIST
9108: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9109: LD_VAR 0 6
9113: PPUSH
9114: CALL_OW 257
9118: PUSH
9119: LD_INT 12
9121: PUSH
9122: LD_INT 16
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: IN
9129: IFFALSE 9150
// points := [ 5 , 3 , 2 ] ;
9131: LD_ADDR_VAR 0 9
9135: PUSH
9136: LD_INT 5
9138: PUSH
9139: LD_INT 3
9141: PUSH
9142: LD_INT 2
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9150: LD_VAR 0 6
9154: PPUSH
9155: CALL_OW 257
9159: PUSH
9160: LD_INT 17
9162: EQUAL
9163: IFFALSE 9184
// points := [ 100 , 50 , 75 ] ;
9165: LD_ADDR_VAR 0 9
9169: PUSH
9170: LD_INT 100
9172: PUSH
9173: LD_INT 50
9175: PUSH
9176: LD_INT 75
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: LIST
9183: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9184: LD_VAR 0 6
9188: PPUSH
9189: CALL_OW 257
9193: PUSH
9194: LD_INT 15
9196: EQUAL
9197: IFFALSE 9218
// points := [ 10 , 5 , 3 ] ;
9199: LD_ADDR_VAR 0 9
9203: PUSH
9204: LD_INT 10
9206: PUSH
9207: LD_INT 5
9209: PUSH
9210: LD_INT 3
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9218: LD_VAR 0 6
9222: PPUSH
9223: CALL_OW 257
9227: PUSH
9228: LD_INT 14
9230: EQUAL
9231: IFFALSE 9252
// points := [ 10 , 0 , 0 ] ;
9233: LD_ADDR_VAR 0 9
9237: PUSH
9238: LD_INT 10
9240: PUSH
9241: LD_INT 0
9243: PUSH
9244: LD_INT 0
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: LIST
9251: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9252: LD_VAR 0 6
9256: PPUSH
9257: CALL_OW 257
9261: PUSH
9262: LD_INT 11
9264: EQUAL
9265: IFFALSE 9286
// points := [ 30 , 10 , 5 ] ;
9267: LD_ADDR_VAR 0 9
9271: PUSH
9272: LD_INT 30
9274: PUSH
9275: LD_INT 10
9277: PUSH
9278: LD_INT 5
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: LIST
9285: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9286: LD_VAR 0 1
9290: PPUSH
9291: LD_INT 5
9293: PPUSH
9294: CALL_OW 321
9298: PUSH
9299: LD_INT 2
9301: EQUAL
9302: IFFALSE 9319
// bpoints := bpoints * 1.8 ;
9304: LD_ADDR_VAR 0 10
9308: PUSH
9309: LD_VAR 0 10
9313: PUSH
9314: LD_REAL  1.80000000000000E+0000
9317: MUL
9318: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9319: LD_VAR 0 6
9323: PPUSH
9324: CALL_OW 257
9328: PUSH
9329: LD_INT 1
9331: PUSH
9332: LD_INT 2
9334: PUSH
9335: LD_INT 3
9337: PUSH
9338: LD_INT 4
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: IN
9347: PUSH
9348: LD_VAR 0 1
9352: PPUSH
9353: LD_INT 51
9355: PPUSH
9356: CALL_OW 321
9360: PUSH
9361: LD_INT 2
9363: EQUAL
9364: AND
9365: IFFALSE 9382
// bpoints := bpoints * 1.2 ;
9367: LD_ADDR_VAR 0 10
9371: PUSH
9372: LD_VAR 0 10
9376: PUSH
9377: LD_REAL  1.20000000000000E+0000
9380: MUL
9381: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9382: LD_VAR 0 6
9386: PPUSH
9387: CALL_OW 257
9391: PUSH
9392: LD_INT 5
9394: PUSH
9395: LD_INT 7
9397: PUSH
9398: LD_INT 9
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: IN
9406: PUSH
9407: LD_VAR 0 1
9411: PPUSH
9412: LD_INT 52
9414: PPUSH
9415: CALL_OW 321
9419: PUSH
9420: LD_INT 2
9422: EQUAL
9423: AND
9424: IFFALSE 9441
// bpoints := bpoints * 1.5 ;
9426: LD_ADDR_VAR 0 10
9430: PUSH
9431: LD_VAR 0 10
9435: PUSH
9436: LD_REAL  1.50000000000000E+0000
9439: MUL
9440: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9441: LD_VAR 0 1
9445: PPUSH
9446: LD_INT 66
9448: PPUSH
9449: CALL_OW 321
9453: PUSH
9454: LD_INT 2
9456: EQUAL
9457: IFFALSE 9474
// bpoints := bpoints * 1.1 ;
9459: LD_ADDR_VAR 0 10
9463: PUSH
9464: LD_VAR 0 10
9468: PUSH
9469: LD_REAL  1.10000000000000E+0000
9472: MUL
9473: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9474: LD_ADDR_VAR 0 10
9478: PUSH
9479: LD_VAR 0 10
9483: PUSH
9484: LD_VAR 0 6
9488: PPUSH
9489: LD_INT 1
9491: PPUSH
9492: CALL_OW 259
9496: PUSH
9497: LD_REAL  1.15000000000000E+0000
9500: MUL
9501: MUL
9502: ST_TO_ADDR
// end ; unit_vehicle :
9503: GO 10327
9505: LD_INT 2
9507: DOUBLE
9508: EQUAL
9509: IFTRUE 9513
9511: GO 10315
9513: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9514: LD_VAR 0 6
9518: PPUSH
9519: CALL_OW 264
9523: PUSH
9524: LD_INT 2
9526: PUSH
9527: LD_INT 42
9529: PUSH
9530: LD_INT 24
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: IN
9538: IFFALSE 9559
// points := [ 25 , 5 , 3 ] ;
9540: LD_ADDR_VAR 0 9
9544: PUSH
9545: LD_INT 25
9547: PUSH
9548: LD_INT 5
9550: PUSH
9551: LD_INT 3
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: LIST
9558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9559: LD_VAR 0 6
9563: PPUSH
9564: CALL_OW 264
9568: PUSH
9569: LD_INT 4
9571: PUSH
9572: LD_INT 43
9574: PUSH
9575: LD_INT 25
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: IN
9583: IFFALSE 9604
// points := [ 40 , 15 , 5 ] ;
9585: LD_ADDR_VAR 0 9
9589: PUSH
9590: LD_INT 40
9592: PUSH
9593: LD_INT 15
9595: PUSH
9596: LD_INT 5
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9604: LD_VAR 0 6
9608: PPUSH
9609: CALL_OW 264
9613: PUSH
9614: LD_INT 3
9616: PUSH
9617: LD_INT 23
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: IN
9624: IFFALSE 9645
// points := [ 7 , 25 , 8 ] ;
9626: LD_ADDR_VAR 0 9
9630: PUSH
9631: LD_INT 7
9633: PUSH
9634: LD_INT 25
9636: PUSH
9637: LD_INT 8
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9645: LD_VAR 0 6
9649: PPUSH
9650: CALL_OW 264
9654: PUSH
9655: LD_INT 5
9657: PUSH
9658: LD_INT 27
9660: PUSH
9661: LD_INT 44
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: IN
9669: IFFALSE 9690
// points := [ 14 , 50 , 16 ] ;
9671: LD_ADDR_VAR 0 9
9675: PUSH
9676: LD_INT 14
9678: PUSH
9679: LD_INT 50
9681: PUSH
9682: LD_INT 16
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9690: LD_VAR 0 6
9694: PPUSH
9695: CALL_OW 264
9699: PUSH
9700: LD_INT 6
9702: PUSH
9703: LD_INT 46
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: IN
9710: IFFALSE 9731
// points := [ 32 , 120 , 70 ] ;
9712: LD_ADDR_VAR 0 9
9716: PUSH
9717: LD_INT 32
9719: PUSH
9720: LD_INT 120
9722: PUSH
9723: LD_INT 70
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
9731: LD_VAR 0 6
9735: PPUSH
9736: CALL_OW 264
9740: PUSH
9741: LD_INT 7
9743: PUSH
9744: LD_INT 28
9746: PUSH
9747: LD_INT 45
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: IN
9755: IFFALSE 9776
// points := [ 35 , 20 , 45 ] ;
9757: LD_ADDR_VAR 0 9
9761: PUSH
9762: LD_INT 35
9764: PUSH
9765: LD_INT 20
9767: PUSH
9768: LD_INT 45
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9776: LD_VAR 0 6
9780: PPUSH
9781: CALL_OW 264
9785: PUSH
9786: LD_INT 47
9788: PUSH
9789: EMPTY
9790: LIST
9791: IN
9792: IFFALSE 9813
// points := [ 67 , 45 , 75 ] ;
9794: LD_ADDR_VAR 0 9
9798: PUSH
9799: LD_INT 67
9801: PUSH
9802: LD_INT 45
9804: PUSH
9805: LD_INT 75
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9813: LD_VAR 0 6
9817: PPUSH
9818: CALL_OW 264
9822: PUSH
9823: LD_INT 26
9825: PUSH
9826: EMPTY
9827: LIST
9828: IN
9829: IFFALSE 9850
// points := [ 120 , 30 , 80 ] ;
9831: LD_ADDR_VAR 0 9
9835: PUSH
9836: LD_INT 120
9838: PUSH
9839: LD_INT 30
9841: PUSH
9842: LD_INT 80
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9850: LD_VAR 0 6
9854: PPUSH
9855: CALL_OW 264
9859: PUSH
9860: LD_INT 22
9862: PUSH
9863: EMPTY
9864: LIST
9865: IN
9866: IFFALSE 9887
// points := [ 40 , 1 , 1 ] ;
9868: LD_ADDR_VAR 0 9
9872: PUSH
9873: LD_INT 40
9875: PUSH
9876: LD_INT 1
9878: PUSH
9879: LD_INT 1
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9887: LD_VAR 0 6
9891: PPUSH
9892: CALL_OW 264
9896: PUSH
9897: LD_INT 29
9899: PUSH
9900: EMPTY
9901: LIST
9902: IN
9903: IFFALSE 9924
// points := [ 70 , 200 , 400 ] ;
9905: LD_ADDR_VAR 0 9
9909: PUSH
9910: LD_INT 70
9912: PUSH
9913: LD_INT 200
9915: PUSH
9916: LD_INT 400
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9924: LD_VAR 0 6
9928: PPUSH
9929: CALL_OW 264
9933: PUSH
9934: LD_INT 14
9936: PUSH
9937: LD_INT 53
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: IN
9944: IFFALSE 9965
// points := [ 40 , 10 , 20 ] ;
9946: LD_ADDR_VAR 0 9
9950: PUSH
9951: LD_INT 40
9953: PUSH
9954: LD_INT 10
9956: PUSH
9957: LD_INT 20
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9965: LD_VAR 0 6
9969: PPUSH
9970: CALL_OW 264
9974: PUSH
9975: LD_INT 9
9977: PUSH
9978: EMPTY
9979: LIST
9980: IN
9981: IFFALSE 10002
// points := [ 5 , 70 , 20 ] ;
9983: LD_ADDR_VAR 0 9
9987: PUSH
9988: LD_INT 5
9990: PUSH
9991: LD_INT 70
9993: PUSH
9994: LD_INT 20
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10002: LD_VAR 0 6
10006: PPUSH
10007: CALL_OW 264
10011: PUSH
10012: LD_INT 10
10014: PUSH
10015: EMPTY
10016: LIST
10017: IN
10018: IFFALSE 10039
// points := [ 35 , 110 , 70 ] ;
10020: LD_ADDR_VAR 0 9
10024: PUSH
10025: LD_INT 35
10027: PUSH
10028: LD_INT 110
10030: PUSH
10031: LD_INT 70
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10039: LD_VAR 0 6
10043: PPUSH
10044: CALL_OW 265
10048: PUSH
10049: LD_INT 25
10051: EQUAL
10052: IFFALSE 10073
// points := [ 80 , 65 , 100 ] ;
10054: LD_ADDR_VAR 0 9
10058: PUSH
10059: LD_INT 80
10061: PUSH
10062: LD_INT 65
10064: PUSH
10065: LD_INT 100
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10073: LD_VAR 0 6
10077: PPUSH
10078: CALL_OW 263
10082: PUSH
10083: LD_INT 1
10085: EQUAL
10086: IFFALSE 10121
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10088: LD_ADDR_VAR 0 10
10092: PUSH
10093: LD_VAR 0 10
10097: PUSH
10098: LD_VAR 0 6
10102: PPUSH
10103: CALL_OW 311
10107: PPUSH
10108: LD_INT 3
10110: PPUSH
10111: CALL_OW 259
10115: PUSH
10116: LD_INT 4
10118: MUL
10119: MUL
10120: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10121: LD_VAR 0 6
10125: PPUSH
10126: CALL_OW 263
10130: PUSH
10131: LD_INT 2
10133: EQUAL
10134: IFFALSE 10185
// begin j := IsControledBy ( i ) ;
10136: LD_ADDR_VAR 0 7
10140: PUSH
10141: LD_VAR 0 6
10145: PPUSH
10146: CALL_OW 312
10150: ST_TO_ADDR
// if j then
10151: LD_VAR 0 7
10155: IFFALSE 10185
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10157: LD_ADDR_VAR 0 10
10161: PUSH
10162: LD_VAR 0 10
10166: PUSH
10167: LD_VAR 0 7
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: CALL_OW 259
10179: PUSH
10180: LD_INT 3
10182: MUL
10183: MUL
10184: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10185: LD_VAR 0 6
10189: PPUSH
10190: CALL_OW 264
10194: PUSH
10195: LD_INT 5
10197: PUSH
10198: LD_INT 6
10200: PUSH
10201: LD_INT 46
10203: PUSH
10204: LD_INT 44
10206: PUSH
10207: LD_INT 47
10209: PUSH
10210: LD_INT 45
10212: PUSH
10213: LD_INT 28
10215: PUSH
10216: LD_INT 7
10218: PUSH
10219: LD_INT 27
10221: PUSH
10222: LD_INT 29
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: IN
10237: PUSH
10238: LD_VAR 0 1
10242: PPUSH
10243: LD_INT 52
10245: PPUSH
10246: CALL_OW 321
10250: PUSH
10251: LD_INT 2
10253: EQUAL
10254: AND
10255: IFFALSE 10272
// bpoints := bpoints * 1.2 ;
10257: LD_ADDR_VAR 0 10
10261: PUSH
10262: LD_VAR 0 10
10266: PUSH
10267: LD_REAL  1.20000000000000E+0000
10270: MUL
10271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10272: LD_VAR 0 6
10276: PPUSH
10277: CALL_OW 264
10281: PUSH
10282: LD_INT 6
10284: PUSH
10285: LD_INT 46
10287: PUSH
10288: LD_INT 47
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: IN
10296: IFFALSE 10313
// bpoints := bpoints * 1.2 ;
10298: LD_ADDR_VAR 0 10
10302: PUSH
10303: LD_VAR 0 10
10307: PUSH
10308: LD_REAL  1.20000000000000E+0000
10311: MUL
10312: ST_TO_ADDR
// end ; unit_building :
10313: GO 10327
10315: LD_INT 3
10317: DOUBLE
10318: EQUAL
10319: IFTRUE 10323
10321: GO 10326
10323: POP
// ; end ;
10324: GO 10327
10326: POP
// for j = 1 to 3 do
10327: LD_ADDR_VAR 0 7
10331: PUSH
10332: DOUBLE
10333: LD_INT 1
10335: DEC
10336: ST_TO_ADDR
10337: LD_INT 3
10339: PUSH
10340: FOR_TO
10341: IFFALSE 10394
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10343: LD_ADDR_VAR 0 5
10347: PUSH
10348: LD_VAR 0 5
10352: PPUSH
10353: LD_VAR 0 7
10357: PPUSH
10358: LD_VAR 0 5
10362: PUSH
10363: LD_VAR 0 7
10367: ARRAY
10368: PUSH
10369: LD_VAR 0 9
10373: PUSH
10374: LD_VAR 0 7
10378: ARRAY
10379: PUSH
10380: LD_VAR 0 10
10384: MUL
10385: PLUS
10386: PPUSH
10387: CALL_OW 1
10391: ST_TO_ADDR
10392: GO 10340
10394: POP
10395: POP
// end ;
10396: GO 8879
10398: POP
10399: POP
// result := Replace ( result , 4 , tmp ) ;
10400: LD_ADDR_VAR 0 5
10404: PUSH
10405: LD_VAR 0 5
10409: PPUSH
10410: LD_INT 4
10412: PPUSH
10413: LD_VAR 0 8
10417: PPUSH
10418: CALL_OW 1
10422: ST_TO_ADDR
// end ;
10423: LD_VAR 0 5
10427: RET
// export function DangerAtRange ( unit , range ) ; begin
10428: LD_INT 0
10430: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10431: LD_ADDR_VAR 0 3
10435: PUSH
10436: LD_VAR 0 1
10440: PPUSH
10441: CALL_OW 255
10445: PPUSH
10446: LD_VAR 0 1
10450: PPUSH
10451: CALL_OW 250
10455: PPUSH
10456: LD_VAR 0 1
10460: PPUSH
10461: CALL_OW 251
10465: PPUSH
10466: LD_VAR 0 2
10470: PPUSH
10471: CALL 8731 0 4
10475: ST_TO_ADDR
// end ;
10476: LD_VAR 0 3
10480: RET
// export function DangerInArea ( side , area ) ; begin
10481: LD_INT 0
10483: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10484: LD_ADDR_VAR 0 3
10488: PUSH
10489: LD_VAR 0 2
10493: PPUSH
10494: LD_INT 81
10496: PUSH
10497: LD_VAR 0 1
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 70
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function IsExtension ( b ) ; begin
10516: LD_INT 0
10518: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10519: LD_ADDR_VAR 0 2
10523: PUSH
10524: LD_VAR 0 1
10528: PUSH
10529: LD_INT 23
10531: PUSH
10532: LD_INT 20
10534: PUSH
10535: LD_INT 22
10537: PUSH
10538: LD_INT 17
10540: PUSH
10541: LD_INT 24
10543: PUSH
10544: LD_INT 21
10546: PUSH
10547: LD_INT 19
10549: PUSH
10550: LD_INT 16
10552: PUSH
10553: LD_INT 25
10555: PUSH
10556: LD_INT 18
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: IN
10571: ST_TO_ADDR
// end ;
10572: LD_VAR 0 2
10576: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
10577: LD_INT 0
10579: PPUSH
10580: PPUSH
10581: PPUSH
// result := [ ] ;
10582: LD_ADDR_VAR 0 3
10586: PUSH
10587: EMPTY
10588: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10589: LD_ADDR_VAR 0 4
10593: PUSH
10594: LD_VAR 0 2
10598: PPUSH
10599: LD_INT 21
10601: PUSH
10602: LD_INT 3
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PPUSH
10609: CALL_OW 70
10613: ST_TO_ADDR
// if not tmp then
10614: LD_VAR 0 4
10618: NOT
10619: IFFALSE 10623
// exit ;
10621: GO 10681
// for i in tmp do
10623: LD_ADDR_VAR 0 5
10627: PUSH
10628: LD_VAR 0 4
10632: PUSH
10633: FOR_IN
10634: IFFALSE 10669
// if GetBase ( i ) <> base then
10636: LD_VAR 0 5
10640: PPUSH
10641: CALL_OW 274
10645: PUSH
10646: LD_VAR 0 1
10650: NONEQUAL
10651: IFFALSE 10667
// ComLinkToBase ( base , i ) ;
10653: LD_VAR 0 1
10657: PPUSH
10658: LD_VAR 0 5
10662: PPUSH
10663: CALL_OW 169
10667: GO 10633
10669: POP
10670: POP
// result := tmp ;
10671: LD_ADDR_VAR 0 3
10675: PUSH
10676: LD_VAR 0 4
10680: ST_TO_ADDR
// end ;
10681: LD_VAR 0 3
10685: RET
// export function ComComplete ( unit , b ) ; var i ; begin
10686: LD_INT 0
10688: PPUSH
10689: PPUSH
// if BuildingStatus ( b ) = bs_build then
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 461
10699: PUSH
10700: LD_INT 1
10702: EQUAL
10703: IFFALSE 10763
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10705: LD_VAR 0 1
10709: PPUSH
10710: LD_STRING h
10712: PUSH
10713: LD_VAR 0 2
10717: PPUSH
10718: CALL_OW 250
10722: PUSH
10723: LD_VAR 0 2
10727: PPUSH
10728: CALL_OW 251
10732: PUSH
10733: LD_VAR 0 2
10737: PUSH
10738: LD_INT 0
10740: PUSH
10741: LD_INT 0
10743: PUSH
10744: LD_INT 0
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: PUSH
10756: EMPTY
10757: LIST
10758: PPUSH
10759: CALL_OW 446
// end ;
10763: LD_VAR 0 3
10767: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10768: LD_INT 0
10770: PPUSH
10771: PPUSH
10772: PPUSH
10773: PPUSH
10774: PPUSH
10775: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
10776: LD_VAR 0 1
10780: NOT
10781: PUSH
10782: LD_VAR 0 1
10786: PPUSH
10787: CALL_OW 263
10791: PUSH
10792: LD_INT 2
10794: EQUAL
10795: NOT
10796: OR
10797: IFFALSE 10801
// exit ;
10799: GO 11117
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10801: LD_ADDR_VAR 0 6
10805: PUSH
10806: LD_INT 22
10808: PUSH
10809: LD_VAR 0 1
10813: PPUSH
10814: CALL_OW 255
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 2
10825: PUSH
10826: LD_INT 30
10828: PUSH
10829: LD_INT 36
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 34
10838: PUSH
10839: LD_INT 31
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PPUSH
10855: CALL_OW 69
10859: ST_TO_ADDR
// if not tmp then
10860: LD_VAR 0 6
10864: NOT
10865: IFFALSE 10869
// exit ;
10867: GO 11117
// result := [ ] ;
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: EMPTY
10875: ST_TO_ADDR
// for i in tmp do
10876: LD_ADDR_VAR 0 3
10880: PUSH
10881: LD_VAR 0 6
10885: PUSH
10886: FOR_IN
10887: IFFALSE 10958
// begin t := UnitsInside ( i ) ;
10889: LD_ADDR_VAR 0 4
10893: PUSH
10894: LD_VAR 0 3
10898: PPUSH
10899: CALL_OW 313
10903: ST_TO_ADDR
// if t then
10904: LD_VAR 0 4
10908: IFFALSE 10956
// for j in t do
10910: LD_ADDR_VAR 0 7
10914: PUSH
10915: LD_VAR 0 4
10919: PUSH
10920: FOR_IN
10921: IFFALSE 10954
// result := Insert ( result , result + 1 , j ) ;
10923: LD_ADDR_VAR 0 2
10927: PUSH
10928: LD_VAR 0 2
10932: PPUSH
10933: LD_VAR 0 2
10937: PUSH
10938: LD_INT 1
10940: PLUS
10941: PPUSH
10942: LD_VAR 0 7
10946: PPUSH
10947: CALL_OW 2
10951: ST_TO_ADDR
10952: GO 10920
10954: POP
10955: POP
// end ;
10956: GO 10886
10958: POP
10959: POP
// if not result then
10960: LD_VAR 0 2
10964: NOT
10965: IFFALSE 10969
// exit ;
10967: GO 11117
// mech := result [ 1 ] ;
10969: LD_ADDR_VAR 0 5
10973: PUSH
10974: LD_VAR 0 2
10978: PUSH
10979: LD_INT 1
10981: ARRAY
10982: ST_TO_ADDR
// if result > 1 then
10983: LD_VAR 0 2
10987: PUSH
10988: LD_INT 1
10990: GREATER
10991: IFFALSE 11103
// for i = 2 to result do
10993: LD_ADDR_VAR 0 3
10997: PUSH
10998: DOUBLE
10999: LD_INT 2
11001: DEC
11002: ST_TO_ADDR
11003: LD_VAR 0 2
11007: PUSH
11008: FOR_TO
11009: IFFALSE 11101
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11011: LD_ADDR_VAR 0 4
11015: PUSH
11016: LD_VAR 0 2
11020: PUSH
11021: LD_VAR 0 3
11025: ARRAY
11026: PPUSH
11027: LD_INT 3
11029: PPUSH
11030: CALL_OW 259
11034: PUSH
11035: LD_VAR 0 2
11039: PUSH
11040: LD_VAR 0 3
11044: ARRAY
11045: PPUSH
11046: CALL_OW 432
11050: MINUS
11051: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11052: LD_VAR 0 4
11056: PUSH
11057: LD_VAR 0 5
11061: PPUSH
11062: LD_INT 3
11064: PPUSH
11065: CALL_OW 259
11069: PUSH
11070: LD_VAR 0 5
11074: PPUSH
11075: CALL_OW 432
11079: MINUS
11080: GREATEREQUAL
11081: IFFALSE 11099
// mech := result [ i ] ;
11083: LD_ADDR_VAR 0 5
11087: PUSH
11088: LD_VAR 0 2
11092: PUSH
11093: LD_VAR 0 3
11097: ARRAY
11098: ST_TO_ADDR
// end ;
11099: GO 11008
11101: POP
11102: POP
// ComLinkTo ( vehicle , mech ) ;
11103: LD_VAR 0 1
11107: PPUSH
11108: LD_VAR 0 5
11112: PPUSH
11113: CALL_OW 135
// end ;
11117: LD_VAR 0 2
11121: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11122: LD_INT 0
11124: PPUSH
11125: PPUSH
11126: PPUSH
11127: PPUSH
11128: PPUSH
11129: PPUSH
11130: PPUSH
11131: PPUSH
11132: PPUSH
11133: PPUSH
11134: PPUSH
11135: PPUSH
11136: PPUSH
// result := [ ] ;
11137: LD_ADDR_VAR 0 7
11141: PUSH
11142: EMPTY
11143: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11144: LD_VAR 0 1
11148: PPUSH
11149: CALL_OW 266
11153: PUSH
11154: LD_INT 0
11156: PUSH
11157: LD_INT 1
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: IN
11164: NOT
11165: IFFALSE 11169
// exit ;
11167: GO 12800
// if name then
11169: LD_VAR 0 3
11173: IFFALSE 11189
// SetBName ( base_dep , name ) ;
11175: LD_VAR 0 1
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: CALL_OW 500
// base := GetBase ( base_dep ) ;
11189: LD_ADDR_VAR 0 15
11193: PUSH
11194: LD_VAR 0 1
11198: PPUSH
11199: CALL_OW 274
11203: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11204: LD_ADDR_VAR 0 16
11208: PUSH
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 255
11218: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11219: LD_ADDR_VAR 0 17
11223: PUSH
11224: LD_VAR 0 1
11228: PPUSH
11229: CALL_OW 248
11233: ST_TO_ADDR
// if sources then
11234: LD_VAR 0 5
11238: IFFALSE 11285
// for i = 1 to 3 do
11240: LD_ADDR_VAR 0 8
11244: PUSH
11245: DOUBLE
11246: LD_INT 1
11248: DEC
11249: ST_TO_ADDR
11250: LD_INT 3
11252: PUSH
11253: FOR_TO
11254: IFFALSE 11283
// AddResourceType ( base , i , sources [ i ] ) ;
11256: LD_VAR 0 15
11260: PPUSH
11261: LD_VAR 0 8
11265: PPUSH
11266: LD_VAR 0 5
11270: PUSH
11271: LD_VAR 0 8
11275: ARRAY
11276: PPUSH
11277: CALL_OW 276
11281: GO 11253
11283: POP
11284: POP
// buildings := GetBaseBuildings ( base , area ) ;
11285: LD_ADDR_VAR 0 18
11289: PUSH
11290: LD_VAR 0 15
11294: PPUSH
11295: LD_VAR 0 2
11299: PPUSH
11300: CALL 10577 0 2
11304: ST_TO_ADDR
// InitHc ;
11305: CALL_OW 19
// InitUc ;
11309: CALL_OW 18
// uc_side := side ;
11313: LD_ADDR_OWVAR 20
11317: PUSH
11318: LD_VAR 0 16
11322: ST_TO_ADDR
// uc_nation := nation ;
11323: LD_ADDR_OWVAR 21
11327: PUSH
11328: LD_VAR 0 17
11332: ST_TO_ADDR
// if buildings then
11333: LD_VAR 0 18
11337: IFFALSE 12659
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11339: LD_ADDR_VAR 0 19
11343: PUSH
11344: LD_VAR 0 18
11348: PPUSH
11349: LD_INT 2
11351: PUSH
11352: LD_INT 30
11354: PUSH
11355: LD_INT 29
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 30
11364: PUSH
11365: LD_INT 30
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 72
11381: ST_TO_ADDR
// if tmp then
11382: LD_VAR 0 19
11386: IFFALSE 11434
// for i in tmp do
11388: LD_ADDR_VAR 0 8
11392: PUSH
11393: LD_VAR 0 19
11397: PUSH
11398: FOR_IN
11399: IFFALSE 11432
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11401: LD_VAR 0 8
11405: PPUSH
11406: CALL_OW 250
11410: PPUSH
11411: LD_VAR 0 8
11415: PPUSH
11416: CALL_OW 251
11420: PPUSH
11421: LD_VAR 0 16
11425: PPUSH
11426: CALL_OW 441
11430: GO 11398
11432: POP
11433: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11434: LD_VAR 0 18
11438: PPUSH
11439: LD_INT 2
11441: PUSH
11442: LD_INT 30
11444: PUSH
11445: LD_INT 32
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 30
11454: PUSH
11455: LD_INT 33
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: PPUSH
11467: CALL_OW 72
11471: IFFALSE 11559
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_VAR 0 18
11482: PPUSH
11483: LD_INT 2
11485: PUSH
11486: LD_INT 30
11488: PUSH
11489: LD_INT 32
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 30
11498: PUSH
11499: LD_INT 33
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 72
11515: PUSH
11516: FOR_IN
11517: IFFALSE 11557
// begin if not GetBWeapon ( i ) then
11519: LD_VAR 0 8
11523: PPUSH
11524: CALL_OW 269
11528: NOT
11529: IFFALSE 11555
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11531: LD_VAR 0 8
11535: PPUSH
11536: LD_VAR 0 8
11540: PPUSH
11541: LD_VAR 0 2
11545: PPUSH
11546: CALL 12805 0 2
11550: PPUSH
11551: CALL_OW 431
// end ;
11555: GO 11516
11557: POP
11558: POP
// end ; for i = 1 to personel do
11559: LD_ADDR_VAR 0 8
11563: PUSH
11564: DOUBLE
11565: LD_INT 1
11567: DEC
11568: ST_TO_ADDR
11569: LD_VAR 0 6
11573: PUSH
11574: FOR_TO
11575: IFFALSE 12639
// begin if i > 4 then
11577: LD_VAR 0 8
11581: PUSH
11582: LD_INT 4
11584: GREATER
11585: IFFALSE 11589
// break ;
11587: GO 12639
// case i of 1 :
11589: LD_VAR 0 8
11593: PUSH
11594: LD_INT 1
11596: DOUBLE
11597: EQUAL
11598: IFTRUE 11602
11600: GO 11682
11602: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11603: LD_ADDR_VAR 0 12
11607: PUSH
11608: LD_VAR 0 18
11612: PPUSH
11613: LD_INT 22
11615: PUSH
11616: LD_VAR 0 16
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 58
11627: PUSH
11628: EMPTY
11629: LIST
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: LD_INT 30
11636: PUSH
11637: LD_INT 32
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 30
11646: PUSH
11647: LD_INT 4
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 30
11656: PUSH
11657: LD_INT 5
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: PPUSH
11675: CALL_OW 72
11679: ST_TO_ADDR
11680: GO 11904
11682: LD_INT 2
11684: DOUBLE
11685: EQUAL
11686: IFTRUE 11690
11688: GO 11752
11690: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11691: LD_ADDR_VAR 0 12
11695: PUSH
11696: LD_VAR 0 18
11700: PPUSH
11701: LD_INT 22
11703: PUSH
11704: LD_VAR 0 16
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 2
11715: PUSH
11716: LD_INT 30
11718: PUSH
11719: LD_INT 0
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 30
11728: PUSH
11729: LD_INT 1
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PPUSH
11745: CALL_OW 72
11749: ST_TO_ADDR
11750: GO 11904
11752: LD_INT 3
11754: DOUBLE
11755: EQUAL
11756: IFTRUE 11760
11758: GO 11822
11760: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11761: LD_ADDR_VAR 0 12
11765: PUSH
11766: LD_VAR 0 18
11770: PPUSH
11771: LD_INT 22
11773: PUSH
11774: LD_VAR 0 16
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 2
11785: PUSH
11786: LD_INT 30
11788: PUSH
11789: LD_INT 2
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 30
11798: PUSH
11799: LD_INT 3
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 72
11819: ST_TO_ADDR
11820: GO 11904
11822: LD_INT 4
11824: DOUBLE
11825: EQUAL
11826: IFTRUE 11830
11828: GO 11903
11830: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11831: LD_ADDR_VAR 0 12
11835: PUSH
11836: LD_VAR 0 18
11840: PPUSH
11841: LD_INT 22
11843: PUSH
11844: LD_VAR 0 16
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 2
11855: PUSH
11856: LD_INT 30
11858: PUSH
11859: LD_INT 6
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 30
11868: PUSH
11869: LD_INT 7
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 30
11878: PUSH
11879: LD_INT 8
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 72
11900: ST_TO_ADDR
11901: GO 11904
11903: POP
// if i = 1 then
11904: LD_VAR 0 8
11908: PUSH
11909: LD_INT 1
11911: EQUAL
11912: IFFALSE 12023
// begin tmp := [ ] ;
11914: LD_ADDR_VAR 0 19
11918: PUSH
11919: EMPTY
11920: ST_TO_ADDR
// for j in f do
11921: LD_ADDR_VAR 0 9
11925: PUSH
11926: LD_VAR 0 12
11930: PUSH
11931: FOR_IN
11932: IFFALSE 12005
// if GetBType ( j ) = b_bunker then
11934: LD_VAR 0 9
11938: PPUSH
11939: CALL_OW 266
11943: PUSH
11944: LD_INT 32
11946: EQUAL
11947: IFFALSE 11974
// tmp := Insert ( tmp , 1 , j ) else
11949: LD_ADDR_VAR 0 19
11953: PUSH
11954: LD_VAR 0 19
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: LD_VAR 0 9
11966: PPUSH
11967: CALL_OW 2
11971: ST_TO_ADDR
11972: GO 12003
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11974: LD_ADDR_VAR 0 19
11978: PUSH
11979: LD_VAR 0 19
11983: PPUSH
11984: LD_VAR 0 19
11988: PUSH
11989: LD_INT 1
11991: PLUS
11992: PPUSH
11993: LD_VAR 0 9
11997: PPUSH
11998: CALL_OW 2
12002: ST_TO_ADDR
12003: GO 11931
12005: POP
12006: POP
// if tmp then
12007: LD_VAR 0 19
12011: IFFALSE 12023
// f := tmp ;
12013: LD_ADDR_VAR 0 12
12017: PUSH
12018: LD_VAR 0 19
12022: ST_TO_ADDR
// end ; x := personel [ i ] ;
12023: LD_ADDR_VAR 0 13
12027: PUSH
12028: LD_VAR 0 6
12032: PUSH
12033: LD_VAR 0 8
12037: ARRAY
12038: ST_TO_ADDR
// if x = - 1 then
12039: LD_VAR 0 13
12043: PUSH
12044: LD_INT 1
12046: NEG
12047: EQUAL
12048: IFFALSE 12257
// begin for j in f do
12050: LD_ADDR_VAR 0 9
12054: PUSH
12055: LD_VAR 0 12
12059: PUSH
12060: FOR_IN
12061: IFFALSE 12253
// repeat InitHc ;
12063: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12067: LD_VAR 0 9
12071: PPUSH
12072: CALL_OW 266
12076: PUSH
12077: LD_INT 5
12079: EQUAL
12080: IFFALSE 12150
// begin if UnitsInside ( j ) < 3 then
12082: LD_VAR 0 9
12086: PPUSH
12087: CALL_OW 313
12091: PUSH
12092: LD_INT 3
12094: LESS
12095: IFFALSE 12131
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12097: LD_INT 0
12099: PPUSH
12100: LD_INT 5
12102: PUSH
12103: LD_INT 8
12105: PUSH
12106: LD_INT 9
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: LD_VAR 0 17
12118: ARRAY
12119: PPUSH
12120: LD_VAR 0 4
12124: PPUSH
12125: CALL_OW 380
12129: GO 12148
// PrepareHuman ( false , i , skill ) ;
12131: LD_INT 0
12133: PPUSH
12134: LD_VAR 0 8
12138: PPUSH
12139: LD_VAR 0 4
12143: PPUSH
12144: CALL_OW 380
// end else
12148: GO 12167
// PrepareHuman ( false , i , skill ) ;
12150: LD_INT 0
12152: PPUSH
12153: LD_VAR 0 8
12157: PPUSH
12158: LD_VAR 0 4
12162: PPUSH
12163: CALL_OW 380
// un := CreateHuman ;
12167: LD_ADDR_VAR 0 14
12171: PUSH
12172: CALL_OW 44
12176: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12177: LD_ADDR_VAR 0 7
12181: PUSH
12182: LD_VAR 0 7
12186: PPUSH
12187: LD_INT 1
12189: PPUSH
12190: LD_VAR 0 14
12194: PPUSH
12195: CALL_OW 2
12199: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12200: LD_VAR 0 14
12204: PPUSH
12205: LD_VAR 0 9
12209: PPUSH
12210: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12214: LD_VAR 0 9
12218: PPUSH
12219: CALL_OW 313
12223: PUSH
12224: LD_INT 6
12226: EQUAL
12227: PUSH
12228: LD_VAR 0 9
12232: PPUSH
12233: CALL_OW 266
12237: PUSH
12238: LD_INT 32
12240: PUSH
12241: LD_INT 31
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: IN
12248: OR
12249: IFFALSE 12063
12251: GO 12060
12253: POP
12254: POP
// end else
12255: GO 12637
// for j = 1 to x do
12257: LD_ADDR_VAR 0 9
12261: PUSH
12262: DOUBLE
12263: LD_INT 1
12265: DEC
12266: ST_TO_ADDR
12267: LD_VAR 0 13
12271: PUSH
12272: FOR_TO
12273: IFFALSE 12635
// begin InitHc ;
12275: CALL_OW 19
// if not f then
12279: LD_VAR 0 12
12283: NOT
12284: IFFALSE 12373
// begin PrepareHuman ( false , i , skill ) ;
12286: LD_INT 0
12288: PPUSH
12289: LD_VAR 0 8
12293: PPUSH
12294: LD_VAR 0 4
12298: PPUSH
12299: CALL_OW 380
// un := CreateHuman ;
12303: LD_ADDR_VAR 0 14
12307: PUSH
12308: CALL_OW 44
12312: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12313: LD_ADDR_VAR 0 7
12317: PUSH
12318: LD_VAR 0 7
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: LD_VAR 0 14
12330: PPUSH
12331: CALL_OW 2
12335: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12336: LD_VAR 0 14
12340: PPUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 250
12350: PPUSH
12351: LD_VAR 0 1
12355: PPUSH
12356: CALL_OW 251
12360: PPUSH
12361: LD_INT 10
12363: PPUSH
12364: LD_INT 0
12366: PPUSH
12367: CALL_OW 50
// continue ;
12371: GO 12272
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12373: LD_VAR 0 12
12377: PUSH
12378: LD_INT 1
12380: ARRAY
12381: PPUSH
12382: CALL_OW 313
12386: PUSH
12387: LD_VAR 0 12
12391: PUSH
12392: LD_INT 1
12394: ARRAY
12395: PPUSH
12396: CALL_OW 266
12400: PUSH
12401: LD_INT 32
12403: PUSH
12404: LD_INT 31
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: IN
12411: AND
12412: PUSH
12413: LD_VAR 0 12
12417: PUSH
12418: LD_INT 1
12420: ARRAY
12421: PPUSH
12422: CALL_OW 313
12426: PUSH
12427: LD_INT 6
12429: EQUAL
12430: OR
12431: IFFALSE 12451
// f := Delete ( f , 1 ) ;
12433: LD_ADDR_VAR 0 12
12437: PUSH
12438: LD_VAR 0 12
12442: PPUSH
12443: LD_INT 1
12445: PPUSH
12446: CALL_OW 3
12450: ST_TO_ADDR
// if not f then
12451: LD_VAR 0 12
12455: NOT
12456: IFFALSE 12474
// begin x := x + 2 ;
12458: LD_ADDR_VAR 0 13
12462: PUSH
12463: LD_VAR 0 13
12467: PUSH
12468: LD_INT 2
12470: PLUS
12471: ST_TO_ADDR
// continue ;
12472: GO 12272
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12474: LD_VAR 0 12
12478: PUSH
12479: LD_INT 1
12481: ARRAY
12482: PPUSH
12483: CALL_OW 266
12487: PUSH
12488: LD_INT 5
12490: EQUAL
12491: IFFALSE 12565
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12493: LD_VAR 0 12
12497: PUSH
12498: LD_INT 1
12500: ARRAY
12501: PPUSH
12502: CALL_OW 313
12506: PUSH
12507: LD_INT 3
12509: LESS
12510: IFFALSE 12546
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12512: LD_INT 0
12514: PPUSH
12515: LD_INT 5
12517: PUSH
12518: LD_INT 8
12520: PUSH
12521: LD_INT 9
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: LD_VAR 0 17
12533: ARRAY
12534: PPUSH
12535: LD_VAR 0 4
12539: PPUSH
12540: CALL_OW 380
12544: GO 12563
// PrepareHuman ( false , i , skill ) ;
12546: LD_INT 0
12548: PPUSH
12549: LD_VAR 0 8
12553: PPUSH
12554: LD_VAR 0 4
12558: PPUSH
12559: CALL_OW 380
// end else
12563: GO 12582
// PrepareHuman ( false , i , skill ) ;
12565: LD_INT 0
12567: PPUSH
12568: LD_VAR 0 8
12572: PPUSH
12573: LD_VAR 0 4
12577: PPUSH
12578: CALL_OW 380
// un := CreateHuman ;
12582: LD_ADDR_VAR 0 14
12586: PUSH
12587: CALL_OW 44
12591: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12592: LD_ADDR_VAR 0 7
12596: PUSH
12597: LD_VAR 0 7
12601: PPUSH
12602: LD_INT 1
12604: PPUSH
12605: LD_VAR 0 14
12609: PPUSH
12610: CALL_OW 2
12614: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12615: LD_VAR 0 14
12619: PPUSH
12620: LD_VAR 0 12
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PPUSH
12629: CALL_OW 52
// end ;
12633: GO 12272
12635: POP
12636: POP
// end ;
12637: GO 11574
12639: POP
12640: POP
// result := result ^ buildings ;
12641: LD_ADDR_VAR 0 7
12645: PUSH
12646: LD_VAR 0 7
12650: PUSH
12651: LD_VAR 0 18
12655: ADD
12656: ST_TO_ADDR
// end else
12657: GO 12800
// begin for i = 1 to personel do
12659: LD_ADDR_VAR 0 8
12663: PUSH
12664: DOUBLE
12665: LD_INT 1
12667: DEC
12668: ST_TO_ADDR
12669: LD_VAR 0 6
12673: PUSH
12674: FOR_TO
12675: IFFALSE 12798
// begin if i > 4 then
12677: LD_VAR 0 8
12681: PUSH
12682: LD_INT 4
12684: GREATER
12685: IFFALSE 12689
// break ;
12687: GO 12798
// x := personel [ i ] ;
12689: LD_ADDR_VAR 0 13
12693: PUSH
12694: LD_VAR 0 6
12698: PUSH
12699: LD_VAR 0 8
12703: ARRAY
12704: ST_TO_ADDR
// if x = - 1 then
12705: LD_VAR 0 13
12709: PUSH
12710: LD_INT 1
12712: NEG
12713: EQUAL
12714: IFFALSE 12718
// continue ;
12716: GO 12674
// PrepareHuman ( false , i , skill ) ;
12718: LD_INT 0
12720: PPUSH
12721: LD_VAR 0 8
12725: PPUSH
12726: LD_VAR 0 4
12730: PPUSH
12731: CALL_OW 380
// un := CreateHuman ;
12735: LD_ADDR_VAR 0 14
12739: PUSH
12740: CALL_OW 44
12744: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12745: LD_VAR 0 14
12749: PPUSH
12750: LD_VAR 0 1
12754: PPUSH
12755: CALL_OW 250
12759: PPUSH
12760: LD_VAR 0 1
12764: PPUSH
12765: CALL_OW 251
12769: PPUSH
12770: LD_INT 10
12772: PPUSH
12773: LD_INT 0
12775: PPUSH
12776: CALL_OW 50
// result := result ^ un ;
12780: LD_ADDR_VAR 0 7
12784: PUSH
12785: LD_VAR 0 7
12789: PUSH
12790: LD_VAR 0 14
12794: ADD
12795: ST_TO_ADDR
// end ;
12796: GO 12674
12798: POP
12799: POP
// end ; end ;
12800: LD_VAR 0 7
12804: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12805: LD_INT 0
12807: PPUSH
12808: PPUSH
12809: PPUSH
12810: PPUSH
12811: PPUSH
12812: PPUSH
12813: PPUSH
12814: PPUSH
12815: PPUSH
12816: PPUSH
12817: PPUSH
12818: PPUSH
12819: PPUSH
12820: PPUSH
12821: PPUSH
12822: PPUSH
// result := false ;
12823: LD_ADDR_VAR 0 3
12827: PUSH
12828: LD_INT 0
12830: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12831: LD_VAR 0 1
12835: NOT
12836: PUSH
12837: LD_VAR 0 1
12841: PPUSH
12842: CALL_OW 266
12846: PUSH
12847: LD_INT 32
12849: PUSH
12850: LD_INT 33
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: IN
12857: NOT
12858: OR
12859: IFFALSE 12863
// exit ;
12861: GO 13999
// nat := GetNation ( tower ) ;
12863: LD_ADDR_VAR 0 12
12867: PUSH
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 248
12877: ST_TO_ADDR
// side := GetSide ( tower ) ;
12878: LD_ADDR_VAR 0 16
12882: PUSH
12883: LD_VAR 0 1
12887: PPUSH
12888: CALL_OW 255
12892: ST_TO_ADDR
// x := GetX ( tower ) ;
12893: LD_ADDR_VAR 0 10
12897: PUSH
12898: LD_VAR 0 1
12902: PPUSH
12903: CALL_OW 250
12907: ST_TO_ADDR
// y := GetY ( tower ) ;
12908: LD_ADDR_VAR 0 11
12912: PUSH
12913: LD_VAR 0 1
12917: PPUSH
12918: CALL_OW 251
12922: ST_TO_ADDR
// if not x or not y then
12923: LD_VAR 0 10
12927: NOT
12928: PUSH
12929: LD_VAR 0 11
12933: NOT
12934: OR
12935: IFFALSE 12939
// exit ;
12937: GO 13999
// weapon := 0 ;
12939: LD_ADDR_VAR 0 18
12943: PUSH
12944: LD_INT 0
12946: ST_TO_ADDR
// fac_list := [ ] ;
12947: LD_ADDR_VAR 0 17
12951: PUSH
12952: EMPTY
12953: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
12954: LD_ADDR_VAR 0 6
12958: PUSH
12959: LD_VAR 0 1
12963: PPUSH
12964: CALL_OW 274
12968: PPUSH
12969: LD_VAR 0 2
12973: PPUSH
12974: CALL 10577 0 2
12978: PPUSH
12979: LD_INT 30
12981: PUSH
12982: LD_INT 3
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PPUSH
12989: CALL_OW 72
12993: ST_TO_ADDR
// if not factories then
12994: LD_VAR 0 6
12998: NOT
12999: IFFALSE 13003
// exit ;
13001: GO 13999
// for i in factories do
13003: LD_ADDR_VAR 0 8
13007: PUSH
13008: LD_VAR 0 6
13012: PUSH
13013: FOR_IN
13014: IFFALSE 13039
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13016: LD_ADDR_VAR 0 17
13020: PUSH
13021: LD_VAR 0 17
13025: PUSH
13026: LD_VAR 0 8
13030: PPUSH
13031: CALL_OW 478
13035: UNION
13036: ST_TO_ADDR
13037: GO 13013
13039: POP
13040: POP
// if not fac_list then
13041: LD_VAR 0 17
13045: NOT
13046: IFFALSE 13050
// exit ;
13048: GO 13999
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13050: LD_ADDR_VAR 0 5
13054: PUSH
13055: LD_INT 4
13057: PUSH
13058: LD_INT 5
13060: PUSH
13061: LD_INT 9
13063: PUSH
13064: LD_INT 10
13066: PUSH
13067: LD_INT 6
13069: PUSH
13070: LD_INT 7
13072: PUSH
13073: LD_INT 11
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 27
13087: PUSH
13088: LD_INT 28
13090: PUSH
13091: LD_INT 26
13093: PUSH
13094: LD_INT 30
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 43
13105: PUSH
13106: LD_INT 44
13108: PUSH
13109: LD_INT 46
13111: PUSH
13112: LD_INT 45
13114: PUSH
13115: LD_INT 47
13117: PUSH
13118: LD_INT 49
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_VAR 0 12
13138: ARRAY
13139: ST_TO_ADDR
// for i in list do
13140: LD_ADDR_VAR 0 8
13144: PUSH
13145: LD_VAR 0 5
13149: PUSH
13150: FOR_IN
13151: IFFALSE 13184
// if not i in fac_list then
13153: LD_VAR 0 8
13157: PUSH
13158: LD_VAR 0 17
13162: IN
13163: NOT
13164: IFFALSE 13182
// list := list diff i ;
13166: LD_ADDR_VAR 0 5
13170: PUSH
13171: LD_VAR 0 5
13175: PUSH
13176: LD_VAR 0 8
13180: DIFF
13181: ST_TO_ADDR
13182: GO 13150
13184: POP
13185: POP
// if not list then
13186: LD_VAR 0 5
13190: NOT
13191: IFFALSE 13195
// exit ;
13193: GO 13999
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13195: LD_VAR 0 12
13199: PUSH
13200: LD_INT 3
13202: EQUAL
13203: PUSH
13204: LD_INT 49
13206: PUSH
13207: LD_VAR 0 5
13211: IN
13212: AND
13213: PUSH
13214: LD_INT 31
13216: PPUSH
13217: LD_VAR 0 16
13221: PPUSH
13222: CALL_OW 321
13226: PUSH
13227: LD_INT 2
13229: EQUAL
13230: AND
13231: IFFALSE 13291
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13233: LD_INT 22
13235: PUSH
13236: LD_VAR 0 16
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 35
13247: PUSH
13248: LD_INT 49
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 91
13257: PUSH
13258: LD_VAR 0 1
13262: PUSH
13263: LD_INT 10
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: PPUSH
13276: CALL_OW 69
13280: NOT
13281: IFFALSE 13291
// weapon := ru_time_lapser ;
13283: LD_ADDR_VAR 0 18
13287: PUSH
13288: LD_INT 49
13290: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13291: LD_VAR 0 12
13295: PUSH
13296: LD_INT 1
13298: PUSH
13299: LD_INT 2
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: IN
13306: PUSH
13307: LD_INT 11
13309: PUSH
13310: LD_VAR 0 5
13314: IN
13315: PUSH
13316: LD_INT 30
13318: PUSH
13319: LD_VAR 0 5
13323: IN
13324: OR
13325: AND
13326: PUSH
13327: LD_INT 6
13329: PPUSH
13330: LD_VAR 0 16
13334: PPUSH
13335: CALL_OW 321
13339: PUSH
13340: LD_INT 2
13342: EQUAL
13343: AND
13344: IFFALSE 13509
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13346: LD_INT 22
13348: PUSH
13349: LD_VAR 0 16
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 2
13360: PUSH
13361: LD_INT 35
13363: PUSH
13364: LD_INT 11
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 35
13373: PUSH
13374: LD_INT 30
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 91
13388: PUSH
13389: LD_VAR 0 1
13393: PUSH
13394: LD_INT 18
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PPUSH
13407: CALL_OW 69
13411: NOT
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_VAR 0 16
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: LD_INT 30
13430: PUSH
13431: LD_INT 32
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 30
13440: PUSH
13441: LD_INT 33
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 91
13455: PUSH
13456: LD_VAR 0 1
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: PPUSH
13477: CALL_OW 69
13481: PUSH
13482: LD_INT 2
13484: GREATER
13485: AND
13486: IFFALSE 13509
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13488: LD_ADDR_VAR 0 18
13492: PUSH
13493: LD_INT 11
13495: PUSH
13496: LD_INT 30
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_VAR 0 12
13507: ARRAY
13508: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13509: LD_VAR 0 18
13513: NOT
13514: PUSH
13515: LD_INT 40
13517: PPUSH
13518: LD_VAR 0 16
13522: PPUSH
13523: CALL_OW 321
13527: PUSH
13528: LD_INT 2
13530: EQUAL
13531: AND
13532: PUSH
13533: LD_INT 7
13535: PUSH
13536: LD_VAR 0 5
13540: IN
13541: PUSH
13542: LD_INT 28
13544: PUSH
13545: LD_VAR 0 5
13549: IN
13550: OR
13551: PUSH
13552: LD_INT 45
13554: PUSH
13555: LD_VAR 0 5
13559: IN
13560: OR
13561: AND
13562: IFFALSE 13816
// begin hex := GetHexInfo ( x , y ) ;
13564: LD_ADDR_VAR 0 4
13568: PUSH
13569: LD_VAR 0 10
13573: PPUSH
13574: LD_VAR 0 11
13578: PPUSH
13579: CALL_OW 546
13583: ST_TO_ADDR
// if hex [ 1 ] then
13584: LD_VAR 0 4
13588: PUSH
13589: LD_INT 1
13591: ARRAY
13592: IFFALSE 13596
// exit ;
13594: GO 13999
// height := hex [ 2 ] ;
13596: LD_ADDR_VAR 0 15
13600: PUSH
13601: LD_VAR 0 4
13605: PUSH
13606: LD_INT 2
13608: ARRAY
13609: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13610: LD_ADDR_VAR 0 14
13614: PUSH
13615: LD_INT 0
13617: PUSH
13618: LD_INT 2
13620: PUSH
13621: LD_INT 3
13623: PUSH
13624: LD_INT 5
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: ST_TO_ADDR
// for i in tmp do
13633: LD_ADDR_VAR 0 8
13637: PUSH
13638: LD_VAR 0 14
13642: PUSH
13643: FOR_IN
13644: IFFALSE 13814
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13646: LD_ADDR_VAR 0 9
13650: PUSH
13651: LD_VAR 0 10
13655: PPUSH
13656: LD_VAR 0 8
13660: PPUSH
13661: LD_INT 5
13663: PPUSH
13664: CALL_OW 272
13668: PUSH
13669: LD_VAR 0 11
13673: PPUSH
13674: LD_VAR 0 8
13678: PPUSH
13679: LD_INT 5
13681: PPUSH
13682: CALL_OW 273
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13691: LD_VAR 0 9
13695: PUSH
13696: LD_INT 1
13698: ARRAY
13699: PPUSH
13700: LD_VAR 0 9
13704: PUSH
13705: LD_INT 2
13707: ARRAY
13708: PPUSH
13709: CALL_OW 488
13713: IFFALSE 13812
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13715: LD_ADDR_VAR 0 4
13719: PUSH
13720: LD_VAR 0 9
13724: PUSH
13725: LD_INT 1
13727: ARRAY
13728: PPUSH
13729: LD_VAR 0 9
13733: PUSH
13734: LD_INT 2
13736: ARRAY
13737: PPUSH
13738: CALL_OW 546
13742: ST_TO_ADDR
// if hex [ 1 ] then
13743: LD_VAR 0 4
13747: PUSH
13748: LD_INT 1
13750: ARRAY
13751: IFFALSE 13755
// continue ;
13753: GO 13643
// h := hex [ 2 ] ;
13755: LD_ADDR_VAR 0 13
13759: PUSH
13760: LD_VAR 0 4
13764: PUSH
13765: LD_INT 2
13767: ARRAY
13768: ST_TO_ADDR
// if h + 7 < height then
13769: LD_VAR 0 13
13773: PUSH
13774: LD_INT 7
13776: PLUS
13777: PUSH
13778: LD_VAR 0 15
13782: LESS
13783: IFFALSE 13812
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13785: LD_ADDR_VAR 0 18
13789: PUSH
13790: LD_INT 7
13792: PUSH
13793: LD_INT 28
13795: PUSH
13796: LD_INT 45
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: PUSH
13804: LD_VAR 0 12
13808: ARRAY
13809: ST_TO_ADDR
// break ;
13810: GO 13814
// end ; end ; end ;
13812: GO 13643
13814: POP
13815: POP
// end ; if not weapon then
13816: LD_VAR 0 18
13820: NOT
13821: IFFALSE 13881
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13823: LD_ADDR_VAR 0 5
13827: PUSH
13828: LD_VAR 0 5
13832: PUSH
13833: LD_INT 11
13835: PUSH
13836: LD_INT 30
13838: PUSH
13839: LD_INT 49
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: DIFF
13847: ST_TO_ADDR
// if not list then
13848: LD_VAR 0 5
13852: NOT
13853: IFFALSE 13857
// exit ;
13855: GO 13999
// weapon := list [ rand ( 1 , list ) ] ;
13857: LD_ADDR_VAR 0 18
13861: PUSH
13862: LD_VAR 0 5
13866: PUSH
13867: LD_INT 1
13869: PPUSH
13870: LD_VAR 0 5
13874: PPUSH
13875: CALL_OW 12
13879: ARRAY
13880: ST_TO_ADDR
// end ; if weapon then
13881: LD_VAR 0 18
13885: IFFALSE 13999
// begin tmp := CostOfWeapon ( weapon ) ;
13887: LD_ADDR_VAR 0 14
13891: PUSH
13892: LD_VAR 0 18
13896: PPUSH
13897: CALL_OW 451
13901: ST_TO_ADDR
// j := GetBase ( tower ) ;
13902: LD_ADDR_VAR 0 9
13906: PUSH
13907: LD_VAR 0 1
13911: PPUSH
13912: CALL_OW 274
13916: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13917: LD_VAR 0 9
13921: PPUSH
13922: LD_INT 1
13924: PPUSH
13925: CALL_OW 275
13929: PUSH
13930: LD_VAR 0 14
13934: PUSH
13935: LD_INT 1
13937: ARRAY
13938: GREATEREQUAL
13939: PUSH
13940: LD_VAR 0 9
13944: PPUSH
13945: LD_INT 2
13947: PPUSH
13948: CALL_OW 275
13952: PUSH
13953: LD_VAR 0 14
13957: PUSH
13958: LD_INT 2
13960: ARRAY
13961: GREATEREQUAL
13962: AND
13963: PUSH
13964: LD_VAR 0 9
13968: PPUSH
13969: LD_INT 3
13971: PPUSH
13972: CALL_OW 275
13976: PUSH
13977: LD_VAR 0 14
13981: PUSH
13982: LD_INT 3
13984: ARRAY
13985: GREATEREQUAL
13986: AND
13987: IFFALSE 13999
// result := weapon ;
13989: LD_ADDR_VAR 0 3
13993: PUSH
13994: LD_VAR 0 18
13998: ST_TO_ADDR
// end ; end ;
13999: LD_VAR 0 3
14003: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14004: LD_INT 0
14006: PPUSH
14007: PPUSH
// result := true ;
14008: LD_ADDR_VAR 0 3
14012: PUSH
14013: LD_INT 1
14015: ST_TO_ADDR
// if array1 = array2 then
14016: LD_VAR 0 1
14020: PUSH
14021: LD_VAR 0 2
14025: EQUAL
14026: IFFALSE 14086
// begin for i = 1 to array1 do
14028: LD_ADDR_VAR 0 4
14032: PUSH
14033: DOUBLE
14034: LD_INT 1
14036: DEC
14037: ST_TO_ADDR
14038: LD_VAR 0 1
14042: PUSH
14043: FOR_TO
14044: IFFALSE 14082
// if array1 [ i ] <> array2 [ i ] then
14046: LD_VAR 0 1
14050: PUSH
14051: LD_VAR 0 4
14055: ARRAY
14056: PUSH
14057: LD_VAR 0 2
14061: PUSH
14062: LD_VAR 0 4
14066: ARRAY
14067: NONEQUAL
14068: IFFALSE 14080
// begin result := false ;
14070: LD_ADDR_VAR 0 3
14074: PUSH
14075: LD_INT 0
14077: ST_TO_ADDR
// break ;
14078: GO 14082
// end ;
14080: GO 14043
14082: POP
14083: POP
// end else
14084: GO 14094
// result := false ;
14086: LD_ADDR_VAR 0 3
14090: PUSH
14091: LD_INT 0
14093: ST_TO_ADDR
// end ;
14094: LD_VAR 0 3
14098: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14099: LD_INT 0
14101: PPUSH
14102: PPUSH
14103: PPUSH
// pom := GetBase ( fac ) ;
14104: LD_ADDR_VAR 0 5
14108: PUSH
14109: LD_VAR 0 1
14113: PPUSH
14114: CALL_OW 274
14118: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14119: LD_ADDR_VAR 0 4
14123: PUSH
14124: LD_VAR 0 2
14128: PUSH
14129: LD_INT 1
14131: ARRAY
14132: PPUSH
14133: LD_VAR 0 2
14137: PUSH
14138: LD_INT 2
14140: ARRAY
14141: PPUSH
14142: LD_VAR 0 2
14146: PUSH
14147: LD_INT 3
14149: ARRAY
14150: PPUSH
14151: LD_VAR 0 2
14155: PUSH
14156: LD_INT 4
14158: ARRAY
14159: PPUSH
14160: CALL_OW 449
14164: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14165: LD_ADDR_VAR 0 3
14169: PUSH
14170: LD_VAR 0 5
14174: PPUSH
14175: LD_INT 1
14177: PPUSH
14178: CALL_OW 275
14182: PUSH
14183: LD_VAR 0 4
14187: PUSH
14188: LD_INT 1
14190: ARRAY
14191: GREATEREQUAL
14192: PUSH
14193: LD_VAR 0 5
14197: PPUSH
14198: LD_INT 2
14200: PPUSH
14201: CALL_OW 275
14205: PUSH
14206: LD_VAR 0 4
14210: PUSH
14211: LD_INT 2
14213: ARRAY
14214: GREATEREQUAL
14215: AND
14216: PUSH
14217: LD_VAR 0 5
14221: PPUSH
14222: LD_INT 3
14224: PPUSH
14225: CALL_OW 275
14229: PUSH
14230: LD_VAR 0 4
14234: PUSH
14235: LD_INT 3
14237: ARRAY
14238: GREATEREQUAL
14239: AND
14240: ST_TO_ADDR
// end ;
14241: LD_VAR 0 3
14245: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14246: LD_INT 0
14248: PPUSH
14249: PPUSH
14250: PPUSH
14251: PPUSH
// pom := GetBase ( building ) ;
14252: LD_ADDR_VAR 0 3
14256: PUSH
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 274
14266: ST_TO_ADDR
// if not pom then
14267: LD_VAR 0 3
14271: NOT
14272: IFFALSE 14276
// exit ;
14274: GO 14446
// btype := GetBType ( building ) ;
14276: LD_ADDR_VAR 0 5
14280: PUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 266
14290: ST_TO_ADDR
// if btype = b_armoury then
14291: LD_VAR 0 5
14295: PUSH
14296: LD_INT 4
14298: EQUAL
14299: IFFALSE 14309
// btype := b_barracks ;
14301: LD_ADDR_VAR 0 5
14305: PUSH
14306: LD_INT 5
14308: ST_TO_ADDR
// if btype = b_depot then
14309: LD_VAR 0 5
14313: PUSH
14314: LD_INT 0
14316: EQUAL
14317: IFFALSE 14327
// btype := b_warehouse ;
14319: LD_ADDR_VAR 0 5
14323: PUSH
14324: LD_INT 1
14326: ST_TO_ADDR
// if btype = b_workshop then
14327: LD_VAR 0 5
14331: PUSH
14332: LD_INT 2
14334: EQUAL
14335: IFFALSE 14345
// btype := b_factory ;
14337: LD_ADDR_VAR 0 5
14341: PUSH
14342: LD_INT 3
14344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14345: LD_ADDR_VAR 0 4
14349: PUSH
14350: LD_VAR 0 5
14354: PPUSH
14355: LD_VAR 0 1
14359: PPUSH
14360: CALL_OW 248
14364: PPUSH
14365: CALL_OW 450
14369: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14370: LD_ADDR_VAR 0 2
14374: PUSH
14375: LD_VAR 0 3
14379: PPUSH
14380: LD_INT 1
14382: PPUSH
14383: CALL_OW 275
14387: PUSH
14388: LD_VAR 0 4
14392: PUSH
14393: LD_INT 1
14395: ARRAY
14396: GREATEREQUAL
14397: PUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: LD_INT 2
14405: PPUSH
14406: CALL_OW 275
14410: PUSH
14411: LD_VAR 0 4
14415: PUSH
14416: LD_INT 2
14418: ARRAY
14419: GREATEREQUAL
14420: AND
14421: PUSH
14422: LD_VAR 0 3
14426: PPUSH
14427: LD_INT 3
14429: PPUSH
14430: CALL_OW 275
14434: PUSH
14435: LD_VAR 0 4
14439: PUSH
14440: LD_INT 3
14442: ARRAY
14443: GREATEREQUAL
14444: AND
14445: ST_TO_ADDR
// end ;
14446: LD_VAR 0 2
14450: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14451: LD_INT 0
14453: PPUSH
14454: PPUSH
14455: PPUSH
// pom := GetBase ( building ) ;
14456: LD_ADDR_VAR 0 4
14460: PUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 274
14470: ST_TO_ADDR
// if not pom then
14471: LD_VAR 0 4
14475: NOT
14476: IFFALSE 14480
// exit ;
14478: GO 14581
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14480: LD_ADDR_VAR 0 5
14484: PUSH
14485: LD_VAR 0 2
14489: PPUSH
14490: LD_VAR 0 1
14494: PPUSH
14495: CALL_OW 248
14499: PPUSH
14500: CALL_OW 450
14504: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14505: LD_ADDR_VAR 0 3
14509: PUSH
14510: LD_VAR 0 4
14514: PPUSH
14515: LD_INT 1
14517: PPUSH
14518: CALL_OW 275
14522: PUSH
14523: LD_VAR 0 5
14527: PUSH
14528: LD_INT 1
14530: ARRAY
14531: GREATEREQUAL
14532: PUSH
14533: LD_VAR 0 4
14537: PPUSH
14538: LD_INT 2
14540: PPUSH
14541: CALL_OW 275
14545: PUSH
14546: LD_VAR 0 5
14550: PUSH
14551: LD_INT 2
14553: ARRAY
14554: GREATEREQUAL
14555: AND
14556: PUSH
14557: LD_VAR 0 4
14561: PPUSH
14562: LD_INT 3
14564: PPUSH
14565: CALL_OW 275
14569: PUSH
14570: LD_VAR 0 5
14574: PUSH
14575: LD_INT 3
14577: ARRAY
14578: GREATEREQUAL
14579: AND
14580: ST_TO_ADDR
// end ;
14581: LD_VAR 0 3
14585: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
14586: LD_INT 0
14588: PPUSH
14589: PPUSH
14590: PPUSH
14591: PPUSH
14592: PPUSH
14593: PPUSH
14594: PPUSH
14595: PPUSH
14596: PPUSH
14597: PPUSH
// result := false ;
14598: LD_ADDR_VAR 0 6
14602: PUSH
14603: LD_INT 0
14605: ST_TO_ADDR
// if not base or not btype or not x or not y then
14606: LD_VAR 0 1
14610: NOT
14611: PUSH
14612: LD_VAR 0 2
14616: NOT
14617: OR
14618: PUSH
14619: LD_VAR 0 3
14623: NOT
14624: OR
14625: PUSH
14626: LD_VAR 0 4
14630: NOT
14631: OR
14632: IFFALSE 14636
// exit ;
14634: GO 15245
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
14636: LD_ADDR_VAR 0 12
14640: PUSH
14641: LD_VAR 0 2
14645: PPUSH
14646: LD_VAR 0 3
14650: PPUSH
14651: LD_VAR 0 4
14655: PPUSH
14656: LD_VAR 0 5
14660: PPUSH
14661: LD_VAR 0 1
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: PPUSH
14670: CALL_OW 248
14674: PPUSH
14675: LD_INT 0
14677: PPUSH
14678: CALL 16082 0 6
14682: ST_TO_ADDR
// if not hexes then
14683: LD_VAR 0 12
14687: NOT
14688: IFFALSE 14692
// exit ;
14690: GO 15245
// for i = 1 to hexes do
14692: LD_ADDR_VAR 0 7
14696: PUSH
14697: DOUBLE
14698: LD_INT 1
14700: DEC
14701: ST_TO_ADDR
14702: LD_VAR 0 12
14706: PUSH
14707: FOR_TO
14708: IFFALSE 15243
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14710: LD_ADDR_VAR 0 11
14714: PUSH
14715: LD_VAR 0 12
14719: PUSH
14720: LD_VAR 0 7
14724: ARRAY
14725: PUSH
14726: LD_INT 1
14728: ARRAY
14729: PPUSH
14730: LD_VAR 0 12
14734: PUSH
14735: LD_VAR 0 7
14739: ARRAY
14740: PUSH
14741: LD_INT 2
14743: ARRAY
14744: PPUSH
14745: CALL_OW 428
14749: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14750: LD_VAR 0 12
14754: PUSH
14755: LD_VAR 0 7
14759: ARRAY
14760: PUSH
14761: LD_INT 1
14763: ARRAY
14764: PPUSH
14765: LD_VAR 0 12
14769: PUSH
14770: LD_VAR 0 7
14774: ARRAY
14775: PUSH
14776: LD_INT 2
14778: ARRAY
14779: PPUSH
14780: CALL_OW 351
14784: PUSH
14785: LD_VAR 0 12
14789: PUSH
14790: LD_VAR 0 7
14794: ARRAY
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PPUSH
14800: LD_VAR 0 12
14804: PUSH
14805: LD_VAR 0 7
14809: ARRAY
14810: PUSH
14811: LD_INT 2
14813: ARRAY
14814: PPUSH
14815: CALL_OW 488
14819: NOT
14820: OR
14821: PUSH
14822: LD_VAR 0 11
14826: PPUSH
14827: CALL_OW 247
14831: PUSH
14832: LD_INT 3
14834: EQUAL
14835: OR
14836: IFFALSE 14842
// exit ;
14838: POP
14839: POP
14840: GO 15245
// if not tmp or not tmp in base then
14842: LD_VAR 0 11
14846: NOT
14847: PUSH
14848: LD_VAR 0 11
14852: PUSH
14853: LD_VAR 0 1
14857: IN
14858: NOT
14859: OR
14860: IFFALSE 14864
// continue ;
14862: GO 14707
// result := true ;
14864: LD_ADDR_VAR 0 6
14868: PUSH
14869: LD_INT 1
14871: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14872: LD_ADDR_VAR 0 15
14876: PUSH
14877: LD_VAR 0 1
14881: PPUSH
14882: LD_INT 22
14884: PUSH
14885: LD_VAR 0 11
14889: PPUSH
14890: CALL_OW 255
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 2
14901: PUSH
14902: LD_INT 30
14904: PUSH
14905: LD_INT 0
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 30
14914: PUSH
14915: LD_INT 1
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 72
14935: ST_TO_ADDR
// if dep then
14936: LD_VAR 0 15
14940: IFFALSE 15076
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14942: LD_ADDR_VAR 0 14
14946: PUSH
14947: LD_VAR 0 15
14951: PUSH
14952: LD_INT 1
14954: ARRAY
14955: PPUSH
14956: CALL_OW 250
14960: PPUSH
14961: LD_VAR 0 15
14965: PUSH
14966: LD_INT 1
14968: ARRAY
14969: PPUSH
14970: CALL_OW 254
14974: PPUSH
14975: LD_INT 5
14977: PPUSH
14978: CALL_OW 272
14982: PUSH
14983: LD_VAR 0 15
14987: PUSH
14988: LD_INT 1
14990: ARRAY
14991: PPUSH
14992: CALL_OW 251
14996: PPUSH
14997: LD_VAR 0 15
15001: PUSH
15002: LD_INT 1
15004: ARRAY
15005: PPUSH
15006: CALL_OW 254
15010: PPUSH
15011: LD_INT 5
15013: PPUSH
15014: CALL_OW 273
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15023: LD_VAR 0 14
15027: PUSH
15028: LD_INT 1
15030: ARRAY
15031: PPUSH
15032: LD_VAR 0 14
15036: PUSH
15037: LD_INT 2
15039: ARRAY
15040: PPUSH
15041: CALL_OW 488
15045: IFFALSE 15076
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15047: LD_VAR 0 11
15051: PPUSH
15052: LD_VAR 0 14
15056: PUSH
15057: LD_INT 1
15059: ARRAY
15060: PPUSH
15061: LD_VAR 0 14
15065: PUSH
15066: LD_INT 2
15068: ARRAY
15069: PPUSH
15070: CALL_OW 111
// continue ;
15074: GO 14707
// end ; end ; r := GetDir ( tmp ) ;
15076: LD_ADDR_VAR 0 13
15080: PUSH
15081: LD_VAR 0 11
15085: PPUSH
15086: CALL_OW 254
15090: ST_TO_ADDR
// if r = 5 then
15091: LD_VAR 0 13
15095: PUSH
15096: LD_INT 5
15098: EQUAL
15099: IFFALSE 15109
// r := 0 ;
15101: LD_ADDR_VAR 0 13
15105: PUSH
15106: LD_INT 0
15108: ST_TO_ADDR
// for j = r to 5 do
15109: LD_ADDR_VAR 0 8
15113: PUSH
15114: DOUBLE
15115: LD_VAR 0 13
15119: DEC
15120: ST_TO_ADDR
15121: LD_INT 5
15123: PUSH
15124: FOR_TO
15125: IFFALSE 15239
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15127: LD_ADDR_VAR 0 9
15131: PUSH
15132: LD_VAR 0 11
15136: PPUSH
15137: CALL_OW 250
15141: PPUSH
15142: LD_VAR 0 8
15146: PPUSH
15147: LD_INT 2
15149: PPUSH
15150: CALL_OW 272
15154: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15155: LD_ADDR_VAR 0 10
15159: PUSH
15160: LD_VAR 0 11
15164: PPUSH
15165: CALL_OW 251
15169: PPUSH
15170: LD_VAR 0 8
15174: PPUSH
15175: LD_INT 2
15177: PPUSH
15178: CALL_OW 273
15182: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15183: LD_VAR 0 9
15187: PPUSH
15188: LD_VAR 0 10
15192: PPUSH
15193: CALL_OW 488
15197: PUSH
15198: LD_VAR 0 9
15202: PPUSH
15203: LD_VAR 0 10
15207: PPUSH
15208: CALL_OW 428
15212: NOT
15213: AND
15214: IFFALSE 15237
// begin ComMoveXY ( tmp , _x , _y ) ;
15216: LD_VAR 0 11
15220: PPUSH
15221: LD_VAR 0 9
15225: PPUSH
15226: LD_VAR 0 10
15230: PPUSH
15231: CALL_OW 111
// break ;
15235: GO 15239
// end ; end ;
15237: GO 15124
15239: POP
15240: POP
// end ;
15241: GO 14707
15243: POP
15244: POP
// end ;
15245: LD_VAR 0 6
15249: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
15250: LD_INT 0
15252: PPUSH
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
// result := false ;
15262: LD_ADDR_VAR 0 6
15266: PUSH
15267: LD_INT 0
15269: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15270: LD_VAR 0 1
15274: NOT
15275: PUSH
15276: LD_VAR 0 1
15280: PPUSH
15281: CALL_OW 266
15285: PUSH
15286: LD_INT 0
15288: PUSH
15289: LD_INT 1
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: IN
15296: NOT
15297: OR
15298: PUSH
15299: LD_VAR 0 2
15303: NOT
15304: OR
15305: PUSH
15306: LD_VAR 0 5
15310: PUSH
15311: LD_INT 0
15313: PUSH
15314: LD_INT 1
15316: PUSH
15317: LD_INT 2
15319: PUSH
15320: LD_INT 3
15322: PUSH
15323: LD_INT 4
15325: PUSH
15326: LD_INT 5
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: IN
15337: NOT
15338: OR
15339: PUSH
15340: LD_VAR 0 3
15344: PPUSH
15345: LD_VAR 0 4
15349: PPUSH
15350: CALL_OW 488
15354: NOT
15355: OR
15356: IFFALSE 15360
// exit ;
15358: GO 16077
// pom := GetBase ( depot ) ;
15360: LD_ADDR_VAR 0 10
15364: PUSH
15365: LD_VAR 0 1
15369: PPUSH
15370: CALL_OW 274
15374: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15375: LD_ADDR_VAR 0 11
15379: PUSH
15380: LD_VAR 0 2
15384: PPUSH
15385: LD_VAR 0 1
15389: PPUSH
15390: CALL_OW 248
15394: PPUSH
15395: CALL_OW 450
15399: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15400: LD_VAR 0 10
15404: PPUSH
15405: LD_INT 1
15407: PPUSH
15408: CALL_OW 275
15412: PUSH
15413: LD_VAR 0 11
15417: PUSH
15418: LD_INT 1
15420: ARRAY
15421: GREATEREQUAL
15422: PUSH
15423: LD_VAR 0 10
15427: PPUSH
15428: LD_INT 2
15430: PPUSH
15431: CALL_OW 275
15435: PUSH
15436: LD_VAR 0 11
15440: PUSH
15441: LD_INT 2
15443: ARRAY
15444: GREATEREQUAL
15445: AND
15446: PUSH
15447: LD_VAR 0 10
15451: PPUSH
15452: LD_INT 3
15454: PPUSH
15455: CALL_OW 275
15459: PUSH
15460: LD_VAR 0 11
15464: PUSH
15465: LD_INT 3
15467: ARRAY
15468: GREATEREQUAL
15469: AND
15470: NOT
15471: IFFALSE 15475
// exit ;
15473: GO 16077
// if GetBType ( depot ) = b_depot then
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 266
15484: PUSH
15485: LD_INT 0
15487: EQUAL
15488: IFFALSE 15500
// dist := 28 else
15490: LD_ADDR_VAR 0 14
15494: PUSH
15495: LD_INT 28
15497: ST_TO_ADDR
15498: GO 15508
// dist := 36 ;
15500: LD_ADDR_VAR 0 14
15504: PUSH
15505: LD_INT 36
15507: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15508: LD_VAR 0 1
15512: PPUSH
15513: LD_VAR 0 3
15517: PPUSH
15518: LD_VAR 0 4
15522: PPUSH
15523: CALL_OW 297
15527: PUSH
15528: LD_VAR 0 14
15532: GREATER
15533: IFFALSE 15537
// exit ;
15535: GO 16077
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15537: LD_ADDR_VAR 0 12
15541: PUSH
15542: LD_VAR 0 2
15546: PPUSH
15547: LD_VAR 0 3
15551: PPUSH
15552: LD_VAR 0 4
15556: PPUSH
15557: LD_VAR 0 5
15561: PPUSH
15562: LD_VAR 0 1
15566: PPUSH
15567: CALL_OW 248
15571: PPUSH
15572: LD_INT 0
15574: PPUSH
15575: CALL 16082 0 6
15579: ST_TO_ADDR
// if not hexes then
15580: LD_VAR 0 12
15584: NOT
15585: IFFALSE 15589
// exit ;
15587: GO 16077
// hex := GetHexInfo ( x , y ) ;
15589: LD_ADDR_VAR 0 15
15593: PUSH
15594: LD_VAR 0 3
15598: PPUSH
15599: LD_VAR 0 4
15603: PPUSH
15604: CALL_OW 546
15608: ST_TO_ADDR
// if hex [ 1 ] then
15609: LD_VAR 0 15
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: IFFALSE 15621
// exit ;
15619: GO 16077
// height := hex [ 2 ] ;
15621: LD_ADDR_VAR 0 13
15625: PUSH
15626: LD_VAR 0 15
15630: PUSH
15631: LD_INT 2
15633: ARRAY
15634: ST_TO_ADDR
// for i = 1 to hexes do
15635: LD_ADDR_VAR 0 7
15639: PUSH
15640: DOUBLE
15641: LD_INT 1
15643: DEC
15644: ST_TO_ADDR
15645: LD_VAR 0 12
15649: PUSH
15650: FOR_TO
15651: IFFALSE 15981
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15653: LD_VAR 0 12
15657: PUSH
15658: LD_VAR 0 7
15662: ARRAY
15663: PUSH
15664: LD_INT 1
15666: ARRAY
15667: PPUSH
15668: LD_VAR 0 12
15672: PUSH
15673: LD_VAR 0 7
15677: ARRAY
15678: PUSH
15679: LD_INT 2
15681: ARRAY
15682: PPUSH
15683: CALL_OW 488
15687: NOT
15688: PUSH
15689: LD_VAR 0 12
15693: PUSH
15694: LD_VAR 0 7
15698: ARRAY
15699: PUSH
15700: LD_INT 1
15702: ARRAY
15703: PPUSH
15704: LD_VAR 0 12
15708: PUSH
15709: LD_VAR 0 7
15713: ARRAY
15714: PUSH
15715: LD_INT 2
15717: ARRAY
15718: PPUSH
15719: CALL_OW 428
15723: PUSH
15724: LD_INT 0
15726: GREATER
15727: OR
15728: PUSH
15729: LD_VAR 0 12
15733: PUSH
15734: LD_VAR 0 7
15738: ARRAY
15739: PUSH
15740: LD_INT 1
15742: ARRAY
15743: PPUSH
15744: LD_VAR 0 12
15748: PUSH
15749: LD_VAR 0 7
15753: ARRAY
15754: PUSH
15755: LD_INT 2
15757: ARRAY
15758: PPUSH
15759: CALL_OW 351
15763: OR
15764: IFFALSE 15770
// exit ;
15766: POP
15767: POP
15768: GO 16077
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15770: LD_ADDR_VAR 0 8
15774: PUSH
15775: LD_VAR 0 12
15779: PUSH
15780: LD_VAR 0 7
15784: ARRAY
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: LD_VAR 0 12
15794: PUSH
15795: LD_VAR 0 7
15799: ARRAY
15800: PUSH
15801: LD_INT 2
15803: ARRAY
15804: PPUSH
15805: CALL_OW 546
15809: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15810: LD_VAR 0 8
15814: PUSH
15815: LD_INT 1
15817: ARRAY
15818: PUSH
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 2
15826: ARRAY
15827: PUSH
15828: LD_VAR 0 13
15832: PUSH
15833: LD_INT 2
15835: PLUS
15836: GREATER
15837: OR
15838: PUSH
15839: LD_VAR 0 8
15843: PUSH
15844: LD_INT 2
15846: ARRAY
15847: PUSH
15848: LD_VAR 0 13
15852: PUSH
15853: LD_INT 2
15855: MINUS
15856: LESS
15857: OR
15858: PUSH
15859: LD_VAR 0 8
15863: PUSH
15864: LD_INT 3
15866: ARRAY
15867: PUSH
15868: LD_INT 0
15870: PUSH
15871: LD_INT 8
15873: PUSH
15874: LD_INT 9
15876: PUSH
15877: LD_INT 10
15879: PUSH
15880: LD_INT 11
15882: PUSH
15883: LD_INT 12
15885: PUSH
15886: LD_INT 13
15888: PUSH
15889: LD_INT 16
15891: PUSH
15892: LD_INT 17
15894: PUSH
15895: LD_INT 18
15897: PUSH
15898: LD_INT 19
15900: PUSH
15901: LD_INT 20
15903: PUSH
15904: LD_INT 21
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: IN
15922: NOT
15923: OR
15924: PUSH
15925: LD_VAR 0 8
15929: PUSH
15930: LD_INT 5
15932: ARRAY
15933: NOT
15934: OR
15935: PUSH
15936: LD_VAR 0 8
15940: PUSH
15941: LD_INT 6
15943: ARRAY
15944: PUSH
15945: LD_INT 1
15947: PUSH
15948: LD_INT 2
15950: PUSH
15951: LD_INT 7
15953: PUSH
15954: LD_INT 9
15956: PUSH
15957: LD_INT 10
15959: PUSH
15960: LD_INT 11
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: IN
15971: NOT
15972: OR
15973: IFFALSE 15979
// exit ;
15975: POP
15976: POP
15977: GO 16077
// end ;
15979: GO 15650
15981: POP
15982: POP
// side := GetSide ( depot ) ;
15983: LD_ADDR_VAR 0 9
15987: PUSH
15988: LD_VAR 0 1
15992: PPUSH
15993: CALL_OW 255
15997: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15998: LD_VAR 0 9
16002: PPUSH
16003: LD_VAR 0 3
16007: PPUSH
16008: LD_VAR 0 4
16012: PPUSH
16013: LD_INT 20
16015: PPUSH
16016: CALL 8731 0 4
16020: PUSH
16021: LD_INT 4
16023: ARRAY
16024: IFFALSE 16028
// exit ;
16026: GO 16077
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16028: LD_VAR 0 2
16032: PUSH
16033: LD_INT 29
16035: PUSH
16036: LD_INT 30
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: IN
16043: PUSH
16044: LD_VAR 0 3
16048: PPUSH
16049: LD_VAR 0 4
16053: PPUSH
16054: LD_VAR 0 9
16058: PPUSH
16059: CALL_OW 440
16063: NOT
16064: AND
16065: IFFALSE 16069
// exit ;
16067: GO 16077
// result := true ;
16069: LD_ADDR_VAR 0 6
16073: PUSH
16074: LD_INT 1
16076: ST_TO_ADDR
// end ;
16077: LD_VAR 0 6
16081: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
16082: LD_INT 0
16084: PPUSH
16085: PPUSH
16086: PPUSH
16087: PPUSH
16088: PPUSH
16089: PPUSH
16090: PPUSH
16091: PPUSH
16092: PPUSH
16093: PPUSH
16094: PPUSH
16095: PPUSH
16096: PPUSH
16097: PPUSH
16098: PPUSH
16099: PPUSH
16100: PPUSH
16101: PPUSH
16102: PPUSH
16103: PPUSH
16104: PPUSH
16105: PPUSH
16106: PPUSH
16107: PPUSH
16108: PPUSH
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
16120: PPUSH
16121: PPUSH
16122: PPUSH
16123: PPUSH
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
16128: PPUSH
16129: PPUSH
16130: PPUSH
16131: PPUSH
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
// result = [ ] ;
16142: LD_ADDR_VAR 0 7
16146: PUSH
16147: EMPTY
16148: ST_TO_ADDR
// temp_list = [ ] ;
16149: LD_ADDR_VAR 0 9
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16156: LD_VAR 0 4
16160: PUSH
16161: LD_INT 0
16163: PUSH
16164: LD_INT 1
16166: PUSH
16167: LD_INT 2
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: LD_INT 4
16175: PUSH
16176: LD_INT 5
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: IN
16187: NOT
16188: PUSH
16189: LD_VAR 0 1
16193: PUSH
16194: LD_INT 0
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: IN
16204: PUSH
16205: LD_VAR 0 5
16209: PUSH
16210: LD_INT 1
16212: PUSH
16213: LD_INT 2
16215: PUSH
16216: LD_INT 3
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: IN
16224: NOT
16225: AND
16226: OR
16227: IFFALSE 16231
// exit ;
16229: GO 34622
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16231: LD_VAR 0 1
16235: PUSH
16236: LD_INT 6
16238: PUSH
16239: LD_INT 7
16241: PUSH
16242: LD_INT 8
16244: PUSH
16245: LD_INT 13
16247: PUSH
16248: LD_INT 12
16250: PUSH
16251: LD_INT 15
16253: PUSH
16254: LD_INT 11
16256: PUSH
16257: LD_INT 14
16259: PUSH
16260: LD_INT 10
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: IN
16274: IFFALSE 16284
// btype = b_lab ;
16276: LD_ADDR_VAR 0 1
16280: PUSH
16281: LD_INT 6
16283: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16284: LD_VAR 0 6
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: LD_INT 1
16294: PUSH
16295: LD_INT 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: LIST
16302: IN
16303: NOT
16304: PUSH
16305: LD_VAR 0 1
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: LD_INT 3
16321: PUSH
16322: LD_INT 6
16324: PUSH
16325: LD_INT 36
16327: PUSH
16328: LD_INT 4
16330: PUSH
16331: LD_INT 5
16333: PUSH
16334: LD_INT 31
16336: PUSH
16337: LD_INT 32
16339: PUSH
16340: LD_INT 33
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: IN
16356: NOT
16357: PUSH
16358: LD_VAR 0 6
16362: PUSH
16363: LD_INT 1
16365: EQUAL
16366: AND
16367: OR
16368: PUSH
16369: LD_VAR 0 1
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 3
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: IN
16384: NOT
16385: PUSH
16386: LD_VAR 0 6
16390: PUSH
16391: LD_INT 2
16393: EQUAL
16394: AND
16395: OR
16396: IFFALSE 16406
// mode = 0 ;
16398: LD_ADDR_VAR 0 6
16402: PUSH
16403: LD_INT 0
16405: ST_TO_ADDR
// case mode of 0 :
16406: LD_VAR 0 6
16410: PUSH
16411: LD_INT 0
16413: DOUBLE
16414: EQUAL
16415: IFTRUE 16419
16417: GO 27872
16419: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16420: LD_ADDR_VAR 0 11
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: LD_INT 0
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 0
16437: PUSH
16438: LD_INT 1
16440: NEG
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 1
16448: PUSH
16449: LD_INT 0
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 1
16478: NEG
16479: PUSH
16480: LD_INT 0
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 1
16489: NEG
16490: PUSH
16491: LD_INT 1
16493: NEG
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PUSH
16503: LD_INT 2
16505: NEG
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 0
16513: PUSH
16514: LD_INT 2
16516: NEG
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 1
16524: PUSH
16525: LD_INT 1
16527: NEG
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 1
16535: PUSH
16536: LD_INT 2
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 0
16545: PUSH
16546: LD_INT 2
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 1
16555: NEG
16556: PUSH
16557: LD_INT 1
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 1
16566: PUSH
16567: LD_INT 3
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 0
16576: PUSH
16577: LD_INT 3
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 1
16586: NEG
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16613: LD_ADDR_VAR 0 12
16617: PUSH
16618: LD_INT 0
16620: PUSH
16621: LD_INT 0
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 0
16630: PUSH
16631: LD_INT 1
16633: NEG
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: LD_INT 0
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 0
16661: PUSH
16662: LD_INT 1
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 1
16671: NEG
16672: PUSH
16673: LD_INT 0
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 1
16682: NEG
16683: PUSH
16684: LD_INT 1
16686: NEG
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: LD_INT 1
16697: NEG
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 2
16705: PUSH
16706: LD_INT 0
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 2
16715: PUSH
16716: LD_INT 1
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 1
16725: NEG
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 2
16736: NEG
16737: PUSH
16738: LD_INT 0
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 2
16747: NEG
16748: PUSH
16749: LD_INT 1
16751: NEG
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 2
16759: NEG
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 3
16770: NEG
16771: PUSH
16772: LD_INT 0
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 3
16781: NEG
16782: PUSH
16783: LD_INT 1
16785: NEG
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16809: LD_ADDR_VAR 0 13
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: LD_INT 0
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 0
16826: PUSH
16827: LD_INT 1
16829: NEG
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 1
16837: PUSH
16838: LD_INT 0
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 1
16847: PUSH
16848: LD_INT 1
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 0
16857: PUSH
16858: LD_INT 1
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 1
16867: NEG
16868: PUSH
16869: LD_INT 0
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 1
16878: NEG
16879: PUSH
16880: LD_INT 1
16882: NEG
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 1
16890: NEG
16891: PUSH
16892: LD_INT 2
16894: NEG
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 2
16902: PUSH
16903: LD_INT 1
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 2
16912: PUSH
16913: LD_INT 2
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 2
16932: NEG
16933: PUSH
16934: LD_INT 1
16936: NEG
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 2
16944: NEG
16945: PUSH
16946: LD_INT 2
16948: NEG
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 2
16956: NEG
16957: PUSH
16958: LD_INT 3
16960: NEG
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 3
16968: NEG
16969: PUSH
16970: LD_INT 2
16972: NEG
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 3
16980: NEG
16981: PUSH
16982: LD_INT 3
16984: NEG
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17008: LD_ADDR_VAR 0 14
17012: PUSH
17013: LD_INT 0
17015: PUSH
17016: LD_INT 0
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 0
17025: PUSH
17026: LD_INT 1
17028: NEG
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: LD_INT 1
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 0
17056: PUSH
17057: LD_INT 1
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 1
17066: NEG
17067: PUSH
17068: LD_INT 0
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 1
17077: NEG
17078: PUSH
17079: LD_INT 1
17081: NEG
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 1
17089: NEG
17090: PUSH
17091: LD_INT 2
17093: NEG
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 0
17101: PUSH
17102: LD_INT 2
17104: NEG
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 1
17112: PUSH
17113: LD_INT 1
17115: NEG
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 1
17123: PUSH
17124: LD_INT 2
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 0
17133: PUSH
17134: LD_INT 2
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 1
17143: NEG
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 1
17154: NEG
17155: PUSH
17156: LD_INT 3
17158: NEG
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: LD_INT 3
17169: NEG
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: LD_INT 2
17180: NEG
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17204: LD_ADDR_VAR 0 15
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: LD_INT 0
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 0
17221: PUSH
17222: LD_INT 1
17224: NEG
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: LD_INT 0
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 0
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 1
17262: NEG
17263: PUSH
17264: LD_INT 0
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 1
17273: NEG
17274: PUSH
17275: LD_INT 1
17277: NEG
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: LD_INT 1
17288: NEG
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 2
17296: PUSH
17297: LD_INT 0
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 2
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 1
17316: NEG
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 2
17327: NEG
17328: PUSH
17329: LD_INT 0
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 2
17338: NEG
17339: PUSH
17340: LD_INT 1
17342: NEG
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 2
17350: PUSH
17351: LD_INT 1
17353: NEG
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 3
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: LD_INT 3
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17397: LD_ADDR_VAR 0 16
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 0
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 1
17435: PUSH
17436: LD_INT 1
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 0
17445: PUSH
17446: LD_INT 1
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 1
17455: NEG
17456: PUSH
17457: LD_INT 0
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 1
17466: NEG
17467: PUSH
17468: LD_INT 1
17470: NEG
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 1
17478: NEG
17479: PUSH
17480: LD_INT 2
17482: NEG
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 2
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 2
17500: PUSH
17501: LD_INT 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: LD_INT 2
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 2
17520: NEG
17521: PUSH
17522: LD_INT 1
17524: NEG
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 2
17532: NEG
17533: PUSH
17534: LD_INT 2
17536: NEG
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: LD_INT 2
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 3
17554: PUSH
17555: LD_INT 3
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 2
17564: PUSH
17565: LD_INT 3
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17590: LD_ADDR_VAR 0 17
17594: PUSH
17595: LD_INT 0
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 0
17607: PUSH
17608: LD_INT 1
17610: NEG
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 1
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: LD_INT 1
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 0
17638: PUSH
17639: LD_INT 1
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 1
17648: NEG
17649: PUSH
17650: LD_INT 0
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 1
17659: NEG
17660: PUSH
17661: LD_INT 1
17663: NEG
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 1
17671: NEG
17672: PUSH
17673: LD_INT 2
17675: NEG
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 0
17683: PUSH
17684: LD_INT 2
17686: NEG
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 1
17694: PUSH
17695: LD_INT 1
17697: NEG
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 2
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 2
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 2
17725: PUSH
17726: LD_INT 2
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: PUSH
17736: LD_INT 2
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 1
17755: NEG
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 2
17766: NEG
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 2
17777: NEG
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 2
17789: NEG
17790: PUSH
17791: LD_INT 2
17793: NEG
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17820: LD_ADDR_VAR 0 18
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: LD_INT 0
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 1
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 0
17868: PUSH
17869: LD_INT 1
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 1
17889: NEG
17890: PUSH
17891: LD_INT 1
17893: NEG
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: LD_INT 2
17905: NEG
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: LD_INT 2
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: LD_INT 1
17927: NEG
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 2
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 2
17945: PUSH
17946: LD_INT 1
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 2
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: LD_INT 2
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 0
17975: PUSH
17976: LD_INT 2
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 1
17985: NEG
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 2
17996: NEG
17997: PUSH
17998: LD_INT 0
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 2
18007: NEG
18008: PUSH
18009: LD_INT 1
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: NEG
18020: PUSH
18021: LD_INT 2
18023: NEG
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18050: LD_ADDR_VAR 0 19
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: LD_INT 0
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: LD_INT 1
18070: NEG
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 0
18098: PUSH
18099: LD_INT 1
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 1
18108: NEG
18109: PUSH
18110: LD_INT 0
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 1
18119: NEG
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 1
18131: NEG
18132: PUSH
18133: LD_INT 2
18135: NEG
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 0
18143: PUSH
18144: LD_INT 2
18146: NEG
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: LD_INT 1
18157: NEG
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 2
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 2
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 2
18185: PUSH
18186: LD_INT 2
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: PUSH
18196: LD_INT 2
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 0
18205: PUSH
18206: LD_INT 2
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 1
18215: NEG
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 2
18226: NEG
18227: PUSH
18228: LD_INT 0
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 2
18237: NEG
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: NEG
18250: PUSH
18251: LD_INT 2
18253: NEG
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18280: LD_ADDR_VAR 0 20
18284: PUSH
18285: LD_INT 0
18287: PUSH
18288: LD_INT 0
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: LD_INT 1
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 1
18318: PUSH
18319: LD_INT 1
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: LD_INT 1
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 1
18338: NEG
18339: PUSH
18340: LD_INT 0
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: LD_INT 1
18353: NEG
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 1
18361: NEG
18362: PUSH
18363: LD_INT 2
18365: NEG
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: LD_INT 2
18376: NEG
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: LD_INT 1
18387: NEG
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 2
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 2
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 2
18415: PUSH
18416: LD_INT 2
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: LD_INT 2
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: LD_INT 2
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 1
18445: NEG
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 2
18456: NEG
18457: PUSH
18458: LD_INT 0
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 2
18467: NEG
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 2
18479: NEG
18480: PUSH
18481: LD_INT 2
18483: NEG
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18510: LD_ADDR_VAR 0 21
18514: PUSH
18515: LD_INT 0
18517: PUSH
18518: LD_INT 0
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 0
18527: PUSH
18528: LD_INT 1
18530: NEG
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: NEG
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 1
18579: NEG
18580: PUSH
18581: LD_INT 1
18583: NEG
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 1
18591: NEG
18592: PUSH
18593: LD_INT 2
18595: NEG
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: LD_INT 2
18606: NEG
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: LD_INT 1
18617: NEG
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 2
18625: PUSH
18626: LD_INT 0
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 2
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 0
18665: PUSH
18666: LD_INT 2
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: NEG
18676: PUSH
18677: LD_INT 1
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 2
18686: NEG
18687: PUSH
18688: LD_INT 0
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 2
18697: NEG
18698: PUSH
18699: LD_INT 1
18701: NEG
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 2
18709: NEG
18710: PUSH
18711: LD_INT 2
18713: NEG
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18740: LD_ADDR_VAR 0 22
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: NEG
18799: PUSH
18800: LD_INT 0
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: NEG
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: LD_INT 2
18825: NEG
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: LD_INT 2
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: LD_INT 1
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 2
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 2
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 2
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: LD_INT 2
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: NEG
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 2
18916: NEG
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: LD_INT 1
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 2
18939: NEG
18940: PUSH
18941: LD_INT 2
18943: NEG
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18970: LD_ADDR_VAR 0 23
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: LD_INT 0
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: LD_INT 1
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 0
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 1
19028: NEG
19029: PUSH
19030: LD_INT 0
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 1
19039: NEG
19040: PUSH
19041: LD_INT 1
19043: NEG
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: LD_INT 2
19055: NEG
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: LD_INT 2
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: LD_INT 1
19077: NEG
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 2
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 2
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 2
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: LD_INT 2
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 0
19125: PUSH
19126: LD_INT 2
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: NEG
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 2
19146: NEG
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 2
19157: NEG
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 2
19169: NEG
19170: PUSH
19171: LD_INT 2
19173: NEG
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 2
19181: NEG
19182: PUSH
19183: LD_INT 3
19185: NEG
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: LD_INT 3
19197: NEG
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: LD_INT 2
19208: NEG
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 2
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19250: LD_ADDR_VAR 0 24
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 0
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 0
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 1
19308: NEG
19309: PUSH
19310: LD_INT 0
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 1
19319: NEG
19320: PUSH
19321: LD_INT 1
19323: NEG
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: LD_INT 2
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: LD_INT 2
19346: NEG
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 1
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 2
19365: PUSH
19366: LD_INT 0
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 2
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 2
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 2
19426: NEG
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 2
19437: NEG
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 2
19449: NEG
19450: PUSH
19451: LD_INT 2
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: LD_INT 2
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 3
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 3
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19526: LD_ADDR_VAR 0 25
19530: PUSH
19531: LD_INT 0
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 0
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 0
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 1
19584: NEG
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 1
19595: NEG
19596: PUSH
19597: LD_INT 1
19599: NEG
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: LD_INT 2
19611: NEG
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 0
19619: PUSH
19620: LD_INT 2
19622: NEG
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: LD_INT 1
19633: NEG
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: LD_INT 0
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 2
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 2
19661: PUSH
19662: LD_INT 2
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 0
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: NEG
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 2
19713: NEG
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 2
19725: NEG
19726: PUSH
19727: LD_INT 2
19729: NEG
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 3
19737: PUSH
19738: LD_INT 1
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 3
19747: PUSH
19748: LD_INT 2
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: LD_INT 3
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: LD_INT 3
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19800: LD_ADDR_VAR 0 26
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: LD_INT 2
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 0
19893: PUSH
19894: LD_INT 2
19896: NEG
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: LD_INT 1
19907: NEG
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: LD_INT 0
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 0
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 1
19965: NEG
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 2
19976: NEG
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 2
19999: NEG
20000: PUSH
20001: LD_INT 2
20003: NEG
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 2
20011: PUSH
20012: LD_INT 3
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: LD_INT 3
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 1
20031: NEG
20032: PUSH
20033: LD_INT 2
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 2
20042: NEG
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20076: LD_ADDR_VAR 0 27
20080: PUSH
20081: LD_INT 0
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: LD_INT 1
20096: NEG
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 1
20114: PUSH
20115: LD_INT 1
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 0
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 1
20134: NEG
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: NEG
20146: PUSH
20147: LD_INT 1
20149: NEG
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: LD_INT 2
20161: NEG
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: LD_INT 2
20172: NEG
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: LD_INT 2
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: LD_INT 2
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: NEG
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 2
20252: NEG
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 2
20263: NEG
20264: PUSH
20265: LD_INT 1
20267: NEG
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: NEG
20276: PUSH
20277: LD_INT 2
20279: NEG
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: LD_INT 2
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: NEG
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 3
20309: NEG
20310: PUSH
20311: LD_INT 1
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 3
20321: NEG
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20356: LD_ADDR_VAR 0 28
20360: PUSH
20361: LD_INT 0
20363: PUSH
20364: LD_INT 0
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: LD_INT 1
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 1
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: PUSH
20395: LD_INT 1
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: NEG
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 1
20425: NEG
20426: PUSH
20427: LD_INT 1
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: LD_INT 2
20441: NEG
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: LD_INT 2
20452: NEG
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: LD_INT 1
20463: NEG
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 2
20471: PUSH
20472: LD_INT 0
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 2
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 2
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 1
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 0
20511: PUSH
20512: LD_INT 2
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 1
20521: NEG
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 2
20532: NEG
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 2
20543: NEG
20544: PUSH
20545: LD_INT 1
20547: NEG
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 2
20555: NEG
20556: PUSH
20557: LD_INT 2
20559: NEG
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 2
20567: NEG
20568: PUSH
20569: LD_INT 3
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: LD_INT 3
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 3
20591: NEG
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 3
20603: NEG
20604: PUSH
20605: LD_INT 2
20607: NEG
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20638: LD_ADDR_VAR 0 29
20642: PUSH
20643: LD_INT 0
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: LD_INT 1
20658: NEG
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: LD_INT 0
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: LD_INT 1
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: LD_INT 1
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: LD_INT 0
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 1
20707: NEG
20708: PUSH
20709: LD_INT 1
20711: NEG
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: LD_INT 2
20723: NEG
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 0
20731: PUSH
20732: LD_INT 2
20734: NEG
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: LD_INT 1
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 1
20773: PUSH
20774: LD_INT 2
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 0
20783: PUSH
20784: LD_INT 2
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 1
20793: NEG
20794: PUSH
20795: LD_INT 1
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 2
20804: NEG
20805: PUSH
20806: LD_INT 1
20808: NEG
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 2
20816: NEG
20817: PUSH
20818: LD_INT 2
20820: NEG
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 2
20828: NEG
20829: PUSH
20830: LD_INT 3
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 3
20851: PUSH
20852: LD_INT 1
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: PUSH
20862: LD_INT 3
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 1
20871: NEG
20872: PUSH
20873: LD_INT 2
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 3
20882: NEG
20883: PUSH
20884: LD_INT 2
20886: NEG
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20917: LD_ADDR_VAR 0 30
20921: PUSH
20922: LD_INT 0
20924: PUSH
20925: LD_INT 0
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 1
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: LD_INT 1
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 1
20975: NEG
20976: PUSH
20977: LD_INT 0
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: LD_INT 2
21002: NEG
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 0
21010: PUSH
21011: LD_INT 2
21013: NEG
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 2
21042: PUSH
21043: LD_INT 1
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 2
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 2
21083: NEG
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 2
21094: NEG
21095: PUSH
21096: LD_INT 1
21098: NEG
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 1
21106: NEG
21107: PUSH
21108: LD_INT 3
21110: NEG
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 2
21121: NEG
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 3
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: LD_INT 3
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 2
21149: NEG
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 3
21160: NEG
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21195: LD_ADDR_VAR 0 31
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: LD_INT 0
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: LD_INT 1
21268: NEG
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: LD_INT 2
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: PUSH
21289: LD_INT 1
21291: NEG
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 2
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 0
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 2
21360: NEG
21361: PUSH
21362: LD_INT 1
21364: NEG
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 2
21372: NEG
21373: PUSH
21374: LD_INT 2
21376: NEG
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 2
21384: NEG
21385: PUSH
21386: LD_INT 3
21388: NEG
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 2
21396: PUSH
21397: LD_INT 1
21399: NEG
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 3
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: LD_INT 3
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 3
21438: NEG
21439: PUSH
21440: LD_INT 2
21442: NEG
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21473: LD_ADDR_VAR 0 32
21477: PUSH
21478: LD_INT 0
21480: PUSH
21481: LD_INT 0
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: LD_INT 1
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 0
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 1
21531: NEG
21532: PUSH
21533: LD_INT 0
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: NEG
21543: PUSH
21544: LD_INT 1
21546: NEG
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: LD_INT 2
21558: NEG
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 0
21566: PUSH
21567: LD_INT 2
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: LD_INT 1
21580: NEG
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 2
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 2
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 0
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: NEG
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 2
21639: NEG
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 2
21650: NEG
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: LD_INT 3
21666: NEG
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: LD_INT 2
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 3
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: PUSH
21696: LD_INT 3
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 2
21705: NEG
21706: PUSH
21707: LD_INT 1
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 3
21716: NEG
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21751: LD_ADDR_VAR 0 33
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: LD_INT 0
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: PUSH
21790: LD_INT 1
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: LD_INT 1
21824: NEG
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: LD_INT 2
21836: NEG
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 1
21844: PUSH
21845: LD_INT 1
21847: NEG
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 2
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 2
21865: PUSH
21866: LD_INT 1
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: LD_INT 2
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 1
21895: NEG
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 2
21906: NEG
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 2
21917: NEG
21918: PUSH
21919: LD_INT 1
21921: NEG
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 2
21929: NEG
21930: PUSH
21931: LD_INT 2
21933: NEG
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 2
21941: NEG
21942: PUSH
21943: LD_INT 3
21945: NEG
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 2
21953: PUSH
21954: LD_INT 1
21956: NEG
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 3
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: LD_INT 3
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: LD_INT 2
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 3
21995: NEG
21996: PUSH
21997: LD_INT 2
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22030: LD_ADDR_VAR 0 34
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 0
22047: PUSH
22048: LD_INT 1
22050: NEG
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: LD_INT 0
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 1
22099: NEG
22100: PUSH
22101: LD_INT 1
22103: NEG
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 1
22111: NEG
22112: PUSH
22113: LD_INT 2
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: LD_INT 2
22126: NEG
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: LD_INT 1
22137: NEG
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: LD_INT 1
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 2
22155: PUSH
22156: LD_INT 2
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: LD_INT 2
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: LD_INT 1
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 2
22186: NEG
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 2
22197: NEG
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 2
22209: NEG
22210: PUSH
22211: LD_INT 2
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 1
22221: NEG
22222: PUSH
22223: LD_INT 3
22225: NEG
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: LD_INT 2
22236: NEG
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 3
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 2
22254: PUSH
22255: LD_INT 3
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 2
22264: NEG
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 3
22275: NEG
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22310: LD_ADDR_VAR 0 35
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 0
22327: PUSH
22328: LD_INT 1
22330: NEG
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: LD_INT 0
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: LD_INT 0
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: LD_INT 1
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 2
22401: NEG
22402: PUSH
22403: LD_INT 1
22405: NEG
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22422: LD_ADDR_VAR 0 36
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: LD_INT 0
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: LD_INT 1
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: LD_INT 1
22495: NEG
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: LD_INT 2
22507: NEG
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: LD_INT 2
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22534: LD_ADDR_VAR 0 37
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 0
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 1
22592: NEG
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: NEG
22604: PUSH
22605: LD_INT 1
22607: NEG
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22646: LD_ADDR_VAR 0 38
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 0
22663: PUSH
22664: LD_INT 1
22666: NEG
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: PUSH
22685: LD_INT 1
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 0
22694: PUSH
22695: LD_INT 1
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 1
22704: NEG
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 1
22715: NEG
22716: PUSH
22717: LD_INT 1
22719: NEG
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 2
22737: NEG
22738: PUSH
22739: LD_INT 1
22741: NEG
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22758: LD_ADDR_VAR 0 39
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: LD_INT 0
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: LD_INT 1
22778: NEG
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: LD_INT 0
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: LD_INT 1
22831: NEG
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: LD_INT 2
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: PUSH
22852: LD_INT 2
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22870: LD_ADDR_VAR 0 40
22874: PUSH
22875: LD_INT 0
22877: PUSH
22878: LD_INT 0
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: LD_INT 0
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 1
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 0
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: LD_INT 0
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: LD_INT 1
22943: NEG
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 1
22962: NEG
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22982: LD_ADDR_VAR 0 41
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 0
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: LD_INT 1
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 1
23040: NEG
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: LD_INT 1
23055: NEG
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: LD_INT 2
23067: NEG
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: LD_INT 1
23078: NEG
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 2
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 1
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 1
23126: NEG
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 2
23137: NEG
23138: PUSH
23139: LD_INT 0
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 2
23148: NEG
23149: PUSH
23150: LD_INT 1
23152: NEG
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 2
23160: NEG
23161: PUSH
23162: LD_INT 2
23164: NEG
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 2
23172: NEG
23173: PUSH
23174: LD_INT 3
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 2
23184: PUSH
23185: LD_INT 1
23187: NEG
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 3
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 3
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 3
23225: PUSH
23226: LD_INT 3
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 2
23235: PUSH
23236: LD_INT 3
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 2
23245: NEG
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 3
23256: NEG
23257: PUSH
23258: LD_INT 0
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 3
23267: NEG
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 3
23279: NEG
23280: PUSH
23281: LD_INT 2
23283: NEG
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 3
23291: NEG
23292: PUSH
23293: LD_INT 3
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23332: LD_ADDR_VAR 0 42
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: LD_INT 0
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: LD_INT 0
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: LD_INT 2
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 2
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 1
23439: NEG
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 2
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 2
23457: PUSH
23458: LD_INT 2
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: LD_INT 2
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 0
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 1
23487: NEG
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 2
23498: NEG
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 2
23510: NEG
23511: PUSH
23512: LD_INT 2
23514: NEG
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: LD_INT 3
23526: NEG
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: LD_INT 3
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 0
23546: PUSH
23547: LD_INT 3
23549: NEG
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 1
23557: PUSH
23558: LD_INT 2
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 3
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 3
23578: PUSH
23579: LD_INT 3
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: LD_INT 3
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 1
23598: PUSH
23599: LD_INT 3
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: LD_INT 3
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: LD_INT 2
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 3
23629: NEG
23630: PUSH
23631: LD_INT 2
23633: NEG
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 3
23641: NEG
23642: PUSH
23643: LD_INT 3
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23682: LD_ADDR_VAR 0 43
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 1
23740: NEG
23741: PUSH
23742: LD_INT 0
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: NEG
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: LD_INT 2
23767: NEG
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: LD_INT 2
23778: NEG
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: LD_INT 1
23789: NEG
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 2
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 2
23848: NEG
23849: PUSH
23850: LD_INT 0
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 2
23859: NEG
23860: PUSH
23861: LD_INT 1
23863: NEG
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: LD_INT 3
23875: NEG
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 3
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: LD_INT 2
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: LD_INT 1
23908: NEG
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 3
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 3
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 3
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: LD_INT 3
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: LD_INT 2
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 2
23967: NEG
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 3
23978: NEG
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 3
23989: NEG
23990: PUSH
23991: LD_INT 1
23993: NEG
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24030: LD_ADDR_VAR 0 44
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: LD_INT 1
24103: NEG
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 2
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 2
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 2
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 2
24185: NEG
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 2
24208: NEG
24209: PUSH
24210: LD_INT 2
24212: NEG
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 2
24220: NEG
24221: PUSH
24222: LD_INT 3
24224: NEG
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 2
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 3
24243: PUSH
24244: LD_INT 0
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 3
24253: PUSH
24254: LD_INT 1
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 3
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 3
24273: PUSH
24274: LD_INT 3
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: LD_INT 3
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 2
24293: NEG
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 3
24304: NEG
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 3
24315: NEG
24316: PUSH
24317: LD_INT 1
24319: NEG
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 3
24327: NEG
24328: PUSH
24329: LD_INT 2
24331: NEG
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 3
24339: NEG
24340: PUSH
24341: LD_INT 3
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24380: LD_ADDR_VAR 0 45
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: LD_INT 2
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 2
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 2
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 2
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 1
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: LD_INT 2
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: LD_INT 1
24550: NEG
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 2
24558: NEG
24559: PUSH
24560: LD_INT 2
24562: NEG
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 2
24570: NEG
24571: PUSH
24572: LD_INT 3
24574: NEG
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: LD_INT 3
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: LD_INT 3
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: LD_INT 2
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 3
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 3
24626: PUSH
24627: LD_INT 3
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 3
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: LD_INT 3
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: LD_INT 3
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 1
24666: NEG
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 3
24677: NEG
24678: PUSH
24679: LD_INT 2
24681: NEG
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 3
24689: NEG
24690: PUSH
24691: LD_INT 3
24693: NEG
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24730: LD_ADDR_VAR 0 46
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: LD_INT 0
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 1
24750: NEG
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 1
24788: NEG
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: NEG
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: LD_INT 2
24815: NEG
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: LD_INT 2
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: LD_INT 1
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 2
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 2
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 2
24896: NEG
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: LD_INT 3
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: LD_INT 3
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 1
24942: PUSH
24943: LD_INT 2
24945: NEG
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 2
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 3
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 3
24974: PUSH
24975: LD_INT 1
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: LD_INT 3
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 0
24994: PUSH
24995: LD_INT 3
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 2
25015: NEG
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 3
25026: NEG
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 3
25037: NEG
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25078: LD_ADDR_VAR 0 47
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: LD_INT 1
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 1
25136: NEG
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: LD_INT 2
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 2
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 2
25193: NEG
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: NEG
25206: PUSH
25207: LD_INT 2
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25229: LD_ADDR_VAR 0 48
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 1
25298: NEG
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: LD_INT 2
25314: NEG
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: LD_INT 2
25325: NEG
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: LD_INT 1
25336: NEG
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 2
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25376: LD_ADDR_VAR 0 49
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: LD_INT 1
25449: NEG
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 2
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 2
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 2
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25520: LD_ADDR_VAR 0 50
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 0
25537: PUSH
25538: LD_INT 1
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: LD_INT 1
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 0
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: LD_INT 1
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 2
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25664: LD_ADDR_VAR 0 51
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 2
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: LD_INT 0
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: NEG
25788: PUSH
25789: LD_INT 1
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25811: LD_ADDR_VAR 0 52
25815: PUSH
25816: LD_INT 0
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: LD_INT 1
25884: NEG
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: NEG
25893: PUSH
25894: LD_INT 2
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: NEG
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 2
25926: NEG
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 2
25938: NEG
25939: PUSH
25940: LD_INT 2
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25962: LD_ADDR_VAR 0 53
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 1
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: LD_INT 2
26047: NEG
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 0
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: LD_INT 1
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 2
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 2
26097: PUSH
26098: LD_INT 2
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: LD_INT 2
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: LD_INT 2
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 1
26127: NEG
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 2
26138: NEG
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 2
26149: NEG
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 2
26161: NEG
26162: PUSH
26163: LD_INT 2
26165: NEG
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26192: LD_ADDR_VAR 0 54
26196: PUSH
26197: LD_INT 0
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: LD_INT 0
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: NEG
26274: PUSH
26275: LD_INT 2
26277: NEG
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 0
26285: PUSH
26286: LD_INT 2
26288: NEG
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 2
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 2
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: PUSH
26328: LD_INT 2
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: LD_INT 2
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 2
26368: NEG
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 2
26379: NEG
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: NEG
26392: PUSH
26393: LD_INT 2
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26422: LD_ADDR_VAR 0 55
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 1
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: LD_INT 2
26507: NEG
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: LD_INT 2
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: LD_INT 2
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: NEG
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 2
26598: NEG
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 2
26621: NEG
26622: PUSH
26623: LD_INT 2
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26652: LD_ADDR_VAR 0 56
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: LD_INT 2
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 2
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 2
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 2
26828: NEG
26829: PUSH
26830: LD_INT 0
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: NEG
26852: PUSH
26853: LD_INT 2
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26882: LD_ADDR_VAR 0 57
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: NEG
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 2
27081: NEG
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27112: LD_ADDR_VAR 0 58
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: LD_INT 2
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 2
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: LD_INT 2
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 2
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 2
27288: NEG
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: LD_INT 2
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27342: LD_ADDR_VAR 0 59
27346: PUSH
27347: LD_INT 0
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: NEG
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27430: LD_ADDR_VAR 0 60
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 0
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: LD_INT 1
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27518: LD_ADDR_VAR 0 61
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27606: LD_ADDR_VAR 0 62
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 1
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: LD_INT 0
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27694: LD_ADDR_VAR 0 63
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27782: LD_ADDR_VAR 0 64
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: ST_TO_ADDR
// end ; 1 :
27870: GO 33767
27872: LD_INT 1
27874: DOUBLE
27875: EQUAL
27876: IFTRUE 27880
27878: GO 30503
27880: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27881: LD_ADDR_VAR 0 11
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: PUSH
27890: LD_INT 3
27892: NEG
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: LD_INT 3
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27925: LD_ADDR_VAR 0 12
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 3
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: LIST
27965: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27966: LD_ADDR_VAR 0 13
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 3
27983: PUSH
27984: LD_INT 3
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 2
27993: PUSH
27994: LD_INT 3
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28006: LD_ADDR_VAR 0 14
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: LD_INT 3
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: LD_INT 3
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28047: LD_ADDR_VAR 0 15
28051: PUSH
28052: LD_INT 2
28054: NEG
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 3
28065: NEG
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 3
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: LIST
28090: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28091: LD_ADDR_VAR 0 16
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: LD_INT 3
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 3
28110: NEG
28111: PUSH
28112: LD_INT 2
28114: NEG
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 3
28122: NEG
28123: PUSH
28124: LD_INT 3
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: LIST
28136: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28137: LD_ADDR_VAR 0 17
28141: PUSH
28142: LD_INT 1
28144: NEG
28145: PUSH
28146: LD_INT 3
28148: NEG
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: LD_INT 3
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: LIST
28180: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28181: LD_ADDR_VAR 0 18
28185: PUSH
28186: LD_INT 2
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 3
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 3
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28222: LD_ADDR_VAR 0 19
28226: PUSH
28227: LD_INT 3
28229: PUSH
28230: LD_INT 2
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 3
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 3
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28262: LD_ADDR_VAR 0 20
28266: PUSH
28267: LD_INT 1
28269: PUSH
28270: LD_INT 3
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 0
28279: PUSH
28280: LD_INT 3
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28303: LD_ADDR_VAR 0 21
28307: PUSH
28308: LD_INT 2
28310: NEG
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 3
28321: NEG
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 3
28332: NEG
28333: PUSH
28334: LD_INT 1
28336: NEG
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: LIST
28346: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28347: LD_ADDR_VAR 0 22
28351: PUSH
28352: LD_INT 2
28354: NEG
28355: PUSH
28356: LD_INT 3
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 3
28366: NEG
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 3
28378: NEG
28379: PUSH
28380: LD_INT 3
28382: NEG
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28393: LD_ADDR_VAR 0 23
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 3
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: LD_INT 4
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: LD_INT 3
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: LIST
28436: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28437: LD_ADDR_VAR 0 24
28441: PUSH
28442: LD_INT 3
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 3
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 4
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28478: LD_ADDR_VAR 0 25
28482: PUSH
28483: LD_INT 3
28485: PUSH
28486: LD_INT 3
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 4
28495: PUSH
28496: LD_INT 3
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 3
28505: PUSH
28506: LD_INT 4
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: LIST
28517: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28518: LD_ADDR_VAR 0 26
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: LD_INT 3
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: LD_INT 4
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: LD_INT 3
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28559: LD_ADDR_VAR 0 27
28563: PUSH
28564: LD_INT 3
28566: NEG
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: NEG
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 4
28588: NEG
28589: PUSH
28590: LD_INT 1
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28603: LD_ADDR_VAR 0 28
28607: PUSH
28608: LD_INT 3
28610: NEG
28611: PUSH
28612: LD_INT 3
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 3
28622: NEG
28623: PUSH
28624: LD_INT 4
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 4
28634: NEG
28635: PUSH
28636: LD_INT 3
28638: NEG
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28649: LD_ADDR_VAR 0 29
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 3
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: LD_INT 3
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: LD_INT 2
28682: NEG
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 4
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: LD_INT 4
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: LD_INT 3
28716: NEG
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: NEG
28725: PUSH
28726: LD_INT 5
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: LD_INT 5
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: LD_INT 4
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: LD_INT 6
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: LD_INT 6
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: PUSH
28782: LD_INT 5
28784: NEG
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28804: LD_ADDR_VAR 0 30
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 3
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 3
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 3
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 4
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 4
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 4
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 5
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 5
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 5
28904: PUSH
28905: LD_INT 1
28907: NEG
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 6
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 6
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28947: LD_ADDR_VAR 0 31
28951: PUSH
28952: LD_INT 3
28954: PUSH
28955: LD_INT 2
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 3
28964: PUSH
28965: LD_INT 3
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: LD_INT 3
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 4
28984: PUSH
28985: LD_INT 3
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 4
28994: PUSH
28995: LD_INT 4
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 3
29004: PUSH
29005: LD_INT 4
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 5
29014: PUSH
29015: LD_INT 4
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 5
29024: PUSH
29025: LD_INT 5
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 4
29034: PUSH
29035: LD_INT 5
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 6
29044: PUSH
29045: LD_INT 5
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 6
29054: PUSH
29055: LD_INT 6
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 5
29064: PUSH
29065: LD_INT 6
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29086: LD_ADDR_VAR 0 32
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: LD_INT 3
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: LD_INT 3
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: LD_INT 2
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: LD_INT 4
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: LD_INT 4
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: LD_INT 3
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: LD_INT 5
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 5
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: LD_INT 4
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: LD_INT 6
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: LD_INT 6
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: LD_INT 5
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29229: LD_ADDR_VAR 0 33
29233: PUSH
29234: LD_INT 2
29236: NEG
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 3
29247: NEG
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 3
29258: NEG
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 3
29270: NEG
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 4
29281: NEG
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 4
29292: NEG
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 4
29304: NEG
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 5
29315: NEG
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 5
29326: NEG
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 5
29338: NEG
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 6
29349: NEG
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 6
29360: NEG
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29384: LD_ADDR_VAR 0 34
29388: PUSH
29389: LD_INT 2
29391: NEG
29392: PUSH
29393: LD_INT 3
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 3
29403: NEG
29404: PUSH
29405: LD_INT 2
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: NEG
29416: PUSH
29417: LD_INT 3
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 3
29427: NEG
29428: PUSH
29429: LD_INT 4
29431: NEG
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 4
29439: NEG
29440: PUSH
29441: LD_INT 3
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 4
29451: NEG
29452: PUSH
29453: LD_INT 4
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 4
29463: NEG
29464: PUSH
29465: LD_INT 5
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 5
29475: NEG
29476: PUSH
29477: LD_INT 4
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 5
29487: NEG
29488: PUSH
29489: LD_INT 5
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 5
29499: NEG
29500: PUSH
29501: LD_INT 6
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 6
29511: NEG
29512: PUSH
29513: LD_INT 5
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 6
29523: NEG
29524: PUSH
29525: LD_INT 6
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29547: LD_ADDR_VAR 0 41
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 2
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: LD_INT 3
29569: NEG
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29591: LD_ADDR_VAR 0 42
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 2
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: LIST
29631: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29632: LD_ADDR_VAR 0 43
29636: PUSH
29637: LD_INT 2
29639: PUSH
29640: LD_INT 2
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 3
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: LD_INT 3
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: LIST
29671: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29672: LD_ADDR_VAR 0 44
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: LD_INT 3
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: LIST
29712: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29713: LD_ADDR_VAR 0 45
29717: PUSH
29718: LD_INT 2
29720: NEG
29721: PUSH
29722: LD_INT 0
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: NEG
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 3
29742: NEG
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29757: LD_ADDR_VAR 0 46
29761: PUSH
29762: LD_INT 2
29764: NEG
29765: PUSH
29766: LD_INT 2
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 2
29776: NEG
29777: PUSH
29778: LD_INT 3
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 3
29788: NEG
29789: PUSH
29790: LD_INT 2
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: LIST
29802: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29803: LD_ADDR_VAR 0 47
29807: PUSH
29808: LD_INT 2
29810: NEG
29811: PUSH
29812: LD_INT 3
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: LD_INT 3
29826: NEG
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29836: LD_ADDR_VAR 0 48
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 2
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29867: LD_ADDR_VAR 0 49
29871: PUSH
29872: LD_INT 3
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 3
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29896: LD_ADDR_VAR 0 50
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 3
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29925: LD_ADDR_VAR 0 51
29929: PUSH
29930: LD_INT 1
29932: NEG
29933: PUSH
29934: LD_INT 2
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29956: LD_ADDR_VAR 0 52
29960: PUSH
29961: LD_INT 3
29963: NEG
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 3
29975: NEG
29976: PUSH
29977: LD_INT 2
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29989: LD_ADDR_VAR 0 53
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: LD_INT 3
30000: NEG
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 3
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30033: LD_ADDR_VAR 0 54
30037: PUSH
30038: LD_INT 2
30040: PUSH
30041: LD_INT 1
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 3
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 3
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30074: LD_ADDR_VAR 0 55
30078: PUSH
30079: LD_INT 3
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 3
30091: PUSH
30092: LD_INT 3
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 2
30101: PUSH
30102: LD_INT 3
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30114: LD_ADDR_VAR 0 56
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: LD_INT 3
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: LD_INT 3
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 1
30141: NEG
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: LIST
30154: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30155: LD_ADDR_VAR 0 57
30159: PUSH
30160: LD_INT 2
30162: NEG
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 3
30173: NEG
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: LIST
30198: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30199: LD_ADDR_VAR 0 58
30203: PUSH
30204: LD_INT 2
30206: NEG
30207: PUSH
30208: LD_INT 3
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: LD_INT 2
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 3
30230: NEG
30231: PUSH
30232: LD_INT 3
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30245: LD_ADDR_VAR 0 59
30249: PUSH
30250: LD_INT 1
30252: NEG
30253: PUSH
30254: LD_INT 2
30256: NEG
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: LD_INT 2
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30289: LD_ADDR_VAR 0 60
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: LD_INT 0
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 2
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30330: LD_ADDR_VAR 0 61
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: LD_INT 2
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30370: LD_ADDR_VAR 0 62
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: LIST
30410: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30411: LD_ADDR_VAR 0 63
30415: PUSH
30416: LD_INT 1
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: NEG
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30455: LD_ADDR_VAR 0 64
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: PUSH
30464: LD_INT 2
30466: NEG
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 2
30474: NEG
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 2
30486: NEG
30487: PUSH
30488: LD_INT 2
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: ST_TO_ADDR
// end ; 2 :
30501: GO 33767
30503: LD_INT 2
30505: DOUBLE
30506: EQUAL
30507: IFTRUE 30511
30509: GO 33766
30511: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30512: LD_ADDR_VAR 0 29
30516: PUSH
30517: LD_INT 4
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 4
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 5
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 5
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 4
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 3
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 3
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: LD_INT 2
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 5
30602: PUSH
30603: LD_INT 2
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 4
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 4
30642: PUSH
30643: LD_INT 4
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 3
30652: PUSH
30653: LD_INT 4
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 2
30662: PUSH
30663: LD_INT 3
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 4
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: LD_INT 4
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: LD_INT 4
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 3
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: LD_INT 4
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: LD_INT 5
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: LD_INT 5
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: LD_INT 4
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 2
30774: PUSH
30775: LD_INT 5
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 2
30784: NEG
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 3
30806: NEG
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 2
30818: NEG
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 2
30829: NEG
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 3
30840: NEG
30841: PUSH
30842: LD_INT 1
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 4
30851: NEG
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 4
30862: NEG
30863: PUSH
30864: LD_INT 1
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 4
30874: NEG
30875: PUSH
30876: LD_INT 2
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 2
30886: NEG
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 4
30897: NEG
30898: PUSH
30899: LD_INT 4
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 4
30909: NEG
30910: PUSH
30911: LD_INT 5
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 3
30921: NEG
30922: PUSH
30923: LD_INT 4
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 3
30933: NEG
30934: PUSH
30935: LD_INT 3
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 4
30945: NEG
30946: PUSH
30947: LD_INT 3
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 5
30957: NEG
30958: PUSH
30959: LD_INT 4
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 5
30969: NEG
30970: PUSH
30971: LD_INT 5
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 3
30981: NEG
30982: PUSH
30983: LD_INT 5
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 5
30993: NEG
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31050: LD_ADDR_VAR 0 30
31054: PUSH
31055: LD_INT 4
31057: PUSH
31058: LD_INT 4
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 4
31067: PUSH
31068: LD_INT 3
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 5
31077: PUSH
31078: LD_INT 4
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 5
31087: PUSH
31088: LD_INT 5
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 4
31097: PUSH
31098: LD_INT 5
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 3
31107: PUSH
31108: LD_INT 4
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 3
31117: PUSH
31118: LD_INT 3
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 5
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 3
31137: PUSH
31138: LD_INT 5
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: LD_INT 3
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: LD_INT 3
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: LD_INT 4
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: LD_INT 4
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: NEG
31198: PUSH
31199: LD_INT 3
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: LD_INT 2
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: LD_INT 4
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: NEG
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 4
31240: NEG
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 4
31251: NEG
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: NEG
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 3
31274: NEG
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 4
31285: NEG
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 5
31296: NEG
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 5
31307: NEG
31308: PUSH
31309: LD_INT 1
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 5
31319: NEG
31320: PUSH
31321: LD_INT 2
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 3
31331: NEG
31332: PUSH
31333: LD_INT 2
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 3
31342: NEG
31343: PUSH
31344: LD_INT 3
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 3
31354: NEG
31355: PUSH
31356: LD_INT 4
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 2
31366: NEG
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 2
31378: NEG
31379: PUSH
31380: LD_INT 2
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 3
31390: NEG
31391: PUSH
31392: LD_INT 2
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 4
31402: NEG
31403: PUSH
31404: LD_INT 3
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 4
31414: NEG
31415: PUSH
31416: LD_INT 4
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 2
31426: NEG
31427: PUSH
31428: LD_INT 4
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 4
31438: NEG
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: LD_INT 4
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: LD_INT 5
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: LD_INT 4
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: LD_INT 3
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: LD_INT 3
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: LD_INT 4
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: LD_INT 5
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: LD_INT 3
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 2
31540: NEG
31541: PUSH
31542: LD_INT 5
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31597: LD_ADDR_VAR 0 31
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: LD_INT 4
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: LD_INT 3
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: LD_INT 4
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: LD_INT 5
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: LD_INT 5
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: LD_INT 4
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: LD_INT 3
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: LD_INT 5
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: LD_INT 3
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: NEG
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 3
31708: NEG
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: NEG
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 3
31742: NEG
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 4
31753: NEG
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 4
31764: NEG
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 4
31776: NEG
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 2
31788: NEG
31789: PUSH
31790: LD_INT 2
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 4
31799: NEG
31800: PUSH
31801: LD_INT 4
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 4
31811: NEG
31812: PUSH
31813: LD_INT 5
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 3
31823: NEG
31824: PUSH
31825: LD_INT 4
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 3
31835: NEG
31836: PUSH
31837: LD_INT 3
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 4
31847: NEG
31848: PUSH
31849: LD_INT 3
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 5
31859: NEG
31860: PUSH
31861: LD_INT 4
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 5
31871: NEG
31872: PUSH
31873: LD_INT 5
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 3
31883: NEG
31884: PUSH
31885: LD_INT 5
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 5
31895: NEG
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: LD_INT 3
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 4
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: LD_INT 3
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: LD_INT 3
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: LD_INT 4
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: LD_INT 2
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 2
31997: NEG
31998: PUSH
31999: LD_INT 4
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 4
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 4
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 5
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 5
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 4
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 3
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 3
32081: PUSH
32082: LD_INT 2
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 5
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32147: LD_ADDR_VAR 0 32
32151: PUSH
32152: LD_INT 4
32154: NEG
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 4
32165: NEG
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 3
32177: NEG
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 3
32188: NEG
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 4
32199: NEG
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 5
32210: NEG
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 5
32221: NEG
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 5
32233: NEG
32234: PUSH
32235: LD_INT 2
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 3
32245: NEG
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 3
32256: NEG
32257: PUSH
32258: LD_INT 3
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: LD_INT 4
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: LD_INT 3
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: NEG
32293: PUSH
32294: LD_INT 2
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 3
32304: NEG
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 4
32316: NEG
32317: PUSH
32318: LD_INT 3
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 4
32328: NEG
32329: PUSH
32330: LD_INT 4
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 2
32340: NEG
32341: PUSH
32342: LD_INT 4
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 4
32352: NEG
32353: PUSH
32354: LD_INT 2
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 0
32364: PUSH
32365: LD_INT 4
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: LD_INT 5
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: LD_INT 4
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: LD_INT 3
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: LD_INT 3
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: LD_INT 4
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: LD_INT 5
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 3
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 2
32454: NEG
32455: PUSH
32456: LD_INT 5
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 3
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 3
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 4
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 4
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 3
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: LD_INT 1
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: LD_INT 2
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 4
32549: PUSH
32550: LD_INT 2
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 4
32559: PUSH
32560: LD_INT 4
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 4
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 5
32579: PUSH
32580: LD_INT 4
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 5
32589: PUSH
32590: LD_INT 5
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 4
32599: PUSH
32600: LD_INT 5
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 3
32609: PUSH
32610: LD_INT 4
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 3
32619: PUSH
32620: LD_INT 3
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 5
32629: PUSH
32630: LD_INT 3
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 3
32639: PUSH
32640: LD_INT 5
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32694: LD_ADDR_VAR 0 33
32698: PUSH
32699: LD_INT 4
32701: NEG
32702: PUSH
32703: LD_INT 4
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 4
32713: NEG
32714: PUSH
32715: LD_INT 5
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 3
32725: NEG
32726: PUSH
32727: LD_INT 4
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 3
32737: NEG
32738: PUSH
32739: LD_INT 3
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 4
32749: NEG
32750: PUSH
32751: LD_INT 3
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 5
32761: NEG
32762: PUSH
32763: LD_INT 4
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 5
32773: NEG
32774: PUSH
32775: LD_INT 5
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 3
32785: NEG
32786: PUSH
32787: LD_INT 5
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 5
32797: NEG
32798: PUSH
32799: LD_INT 3
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 3
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 0
32820: PUSH
32821: LD_INT 4
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 1
32831: PUSH
32832: LD_INT 3
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: LD_INT 2
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: LD_INT 2
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: LD_INT 3
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 1
32876: NEG
32877: PUSH
32878: LD_INT 4
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: LD_INT 2
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 2
32899: NEG
32900: PUSH
32901: LD_INT 4
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 4
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 4
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 5
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 5
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 4
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 3
32962: PUSH
32963: LD_INT 0
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 3
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 3
32983: PUSH
32984: LD_INT 2
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 5
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 3
33004: PUSH
33005: LD_INT 3
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: LD_INT 2
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 4
33024: PUSH
33025: LD_INT 3
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 4
33034: PUSH
33035: LD_INT 4
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 3
33044: PUSH
33045: LD_INT 4
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: LD_INT 3
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 4
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: LD_INT 4
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: LD_INT 4
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: LD_INT 3
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: LD_INT 4
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 1
33124: PUSH
33125: LD_INT 5
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: LD_INT 5
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: LD_INT 4
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: LD_INT 5
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 2
33176: NEG
33177: PUSH
33178: LD_INT 3
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33232: LD_ADDR_VAR 0 34
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: LD_INT 4
33242: NEG
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: LD_INT 5
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 4
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 3
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: LD_INT 3
33286: NEG
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: LD_INT 4
33298: NEG
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: LD_INT 5
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 3
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: LD_INT 5
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 3
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 3
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 4
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 4
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 3
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 4
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 4
33434: PUSH
33435: LD_INT 4
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 4
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 5
33454: PUSH
33455: LD_INT 4
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 5
33464: PUSH
33465: LD_INT 5
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 4
33474: PUSH
33475: LD_INT 5
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 3
33484: PUSH
33485: LD_INT 4
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: LD_INT 3
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 5
33504: PUSH
33505: LD_INT 3
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 3
33514: PUSH
33515: LD_INT 5
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 3
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: LD_INT 3
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: LD_INT 4
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: LD_INT 4
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: LD_INT 3
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: LD_INT 4
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: NEG
33607: PUSH
33608: LD_INT 2
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 4
33617: NEG
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 4
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 3
33640: NEG
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 3
33651: NEG
33652: PUSH
33653: LD_INT 1
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 4
33662: NEG
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 5
33673: NEG
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 5
33684: NEG
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 5
33696: NEG
33697: PUSH
33698: LD_INT 2
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 3
33708: NEG
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: ST_TO_ADDR
// end ; end ;
33764: GO 33767
33766: POP
// case btype of b_depot , b_warehouse :
33767: LD_VAR 0 1
33771: PUSH
33772: LD_INT 0
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33786
33778: LD_INT 1
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33786
33784: GO 33987
33786: POP
// case nation of nation_american :
33787: LD_VAR 0 5
33791: PUSH
33792: LD_INT 1
33794: DOUBLE
33795: EQUAL
33796: IFTRUE 33800
33798: GO 33856
33800: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
33801: LD_ADDR_VAR 0 9
33805: PUSH
33806: LD_VAR 0 11
33810: PUSH
33811: LD_VAR 0 12
33815: PUSH
33816: LD_VAR 0 13
33820: PUSH
33821: LD_VAR 0 14
33825: PUSH
33826: LD_VAR 0 15
33830: PUSH
33831: LD_VAR 0 16
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: PUSH
33844: LD_VAR 0 4
33848: PUSH
33849: LD_INT 1
33851: PLUS
33852: ARRAY
33853: ST_TO_ADDR
33854: GO 33985
33856: LD_INT 2
33858: DOUBLE
33859: EQUAL
33860: IFTRUE 33864
33862: GO 33920
33864: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
33865: LD_ADDR_VAR 0 9
33869: PUSH
33870: LD_VAR 0 17
33874: PUSH
33875: LD_VAR 0 18
33879: PUSH
33880: LD_VAR 0 19
33884: PUSH
33885: LD_VAR 0 20
33889: PUSH
33890: LD_VAR 0 21
33894: PUSH
33895: LD_VAR 0 22
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: PUSH
33908: LD_VAR 0 4
33912: PUSH
33913: LD_INT 1
33915: PLUS
33916: ARRAY
33917: ST_TO_ADDR
33918: GO 33985
33920: LD_INT 3
33922: DOUBLE
33923: EQUAL
33924: IFTRUE 33928
33926: GO 33984
33928: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33929: LD_ADDR_VAR 0 9
33933: PUSH
33934: LD_VAR 0 23
33938: PUSH
33939: LD_VAR 0 24
33943: PUSH
33944: LD_VAR 0 25
33948: PUSH
33949: LD_VAR 0 26
33953: PUSH
33954: LD_VAR 0 27
33958: PUSH
33959: LD_VAR 0 28
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: PUSH
33972: LD_VAR 0 4
33976: PUSH
33977: LD_INT 1
33979: PLUS
33980: ARRAY
33981: ST_TO_ADDR
33982: GO 33985
33984: POP
33985: GO 34540
33987: LD_INT 2
33989: DOUBLE
33990: EQUAL
33991: IFTRUE 34001
33993: LD_INT 3
33995: DOUBLE
33996: EQUAL
33997: IFTRUE 34001
33999: GO 34057
34001: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34002: LD_ADDR_VAR 0 9
34006: PUSH
34007: LD_VAR 0 29
34011: PUSH
34012: LD_VAR 0 30
34016: PUSH
34017: LD_VAR 0 31
34021: PUSH
34022: LD_VAR 0 32
34026: PUSH
34027: LD_VAR 0 33
34031: PUSH
34032: LD_VAR 0 34
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: PUSH
34045: LD_VAR 0 4
34049: PUSH
34050: LD_INT 1
34052: PLUS
34053: ARRAY
34054: ST_TO_ADDR
34055: GO 34540
34057: LD_INT 16
34059: DOUBLE
34060: EQUAL
34061: IFTRUE 34119
34063: LD_INT 17
34065: DOUBLE
34066: EQUAL
34067: IFTRUE 34119
34069: LD_INT 18
34071: DOUBLE
34072: EQUAL
34073: IFTRUE 34119
34075: LD_INT 19
34077: DOUBLE
34078: EQUAL
34079: IFTRUE 34119
34081: LD_INT 22
34083: DOUBLE
34084: EQUAL
34085: IFTRUE 34119
34087: LD_INT 20
34089: DOUBLE
34090: EQUAL
34091: IFTRUE 34119
34093: LD_INT 21
34095: DOUBLE
34096: EQUAL
34097: IFTRUE 34119
34099: LD_INT 23
34101: DOUBLE
34102: EQUAL
34103: IFTRUE 34119
34105: LD_INT 24
34107: DOUBLE
34108: EQUAL
34109: IFTRUE 34119
34111: LD_INT 25
34113: DOUBLE
34114: EQUAL
34115: IFTRUE 34119
34117: GO 34175
34119: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34120: LD_ADDR_VAR 0 9
34124: PUSH
34125: LD_VAR 0 35
34129: PUSH
34130: LD_VAR 0 36
34134: PUSH
34135: LD_VAR 0 37
34139: PUSH
34140: LD_VAR 0 38
34144: PUSH
34145: LD_VAR 0 39
34149: PUSH
34150: LD_VAR 0 40
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: PUSH
34163: LD_VAR 0 4
34167: PUSH
34168: LD_INT 1
34170: PLUS
34171: ARRAY
34172: ST_TO_ADDR
34173: GO 34540
34175: LD_INT 6
34177: DOUBLE
34178: EQUAL
34179: IFTRUE 34231
34181: LD_INT 7
34183: DOUBLE
34184: EQUAL
34185: IFTRUE 34231
34187: LD_INT 8
34189: DOUBLE
34190: EQUAL
34191: IFTRUE 34231
34193: LD_INT 13
34195: DOUBLE
34196: EQUAL
34197: IFTRUE 34231
34199: LD_INT 12
34201: DOUBLE
34202: EQUAL
34203: IFTRUE 34231
34205: LD_INT 15
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34231
34211: LD_INT 11
34213: DOUBLE
34214: EQUAL
34215: IFTRUE 34231
34217: LD_INT 14
34219: DOUBLE
34220: EQUAL
34221: IFTRUE 34231
34223: LD_INT 10
34225: DOUBLE
34226: EQUAL
34227: IFTRUE 34231
34229: GO 34287
34231: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
34232: LD_ADDR_VAR 0 9
34236: PUSH
34237: LD_VAR 0 41
34241: PUSH
34242: LD_VAR 0 42
34246: PUSH
34247: LD_VAR 0 43
34251: PUSH
34252: LD_VAR 0 44
34256: PUSH
34257: LD_VAR 0 45
34261: PUSH
34262: LD_VAR 0 46
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: PUSH
34275: LD_VAR 0 4
34279: PUSH
34280: LD_INT 1
34282: PLUS
34283: ARRAY
34284: ST_TO_ADDR
34285: GO 34540
34287: LD_INT 36
34289: DOUBLE
34290: EQUAL
34291: IFTRUE 34295
34293: GO 34351
34295: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34296: LD_ADDR_VAR 0 9
34300: PUSH
34301: LD_VAR 0 47
34305: PUSH
34306: LD_VAR 0 48
34310: PUSH
34311: LD_VAR 0 49
34315: PUSH
34316: LD_VAR 0 50
34320: PUSH
34321: LD_VAR 0 51
34325: PUSH
34326: LD_VAR 0 52
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: PUSH
34339: LD_VAR 0 4
34343: PUSH
34344: LD_INT 1
34346: PLUS
34347: ARRAY
34348: ST_TO_ADDR
34349: GO 34540
34351: LD_INT 4
34353: DOUBLE
34354: EQUAL
34355: IFTRUE 34377
34357: LD_INT 5
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34377
34363: LD_INT 34
34365: DOUBLE
34366: EQUAL
34367: IFTRUE 34377
34369: LD_INT 37
34371: DOUBLE
34372: EQUAL
34373: IFTRUE 34377
34375: GO 34433
34377: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34378: LD_ADDR_VAR 0 9
34382: PUSH
34383: LD_VAR 0 53
34387: PUSH
34388: LD_VAR 0 54
34392: PUSH
34393: LD_VAR 0 55
34397: PUSH
34398: LD_VAR 0 56
34402: PUSH
34403: LD_VAR 0 57
34407: PUSH
34408: LD_VAR 0 58
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: PUSH
34421: LD_VAR 0 4
34425: PUSH
34426: LD_INT 1
34428: PLUS
34429: ARRAY
34430: ST_TO_ADDR
34431: GO 34540
34433: LD_INT 31
34435: DOUBLE
34436: EQUAL
34437: IFTRUE 34483
34439: LD_INT 32
34441: DOUBLE
34442: EQUAL
34443: IFTRUE 34483
34445: LD_INT 33
34447: DOUBLE
34448: EQUAL
34449: IFTRUE 34483
34451: LD_INT 27
34453: DOUBLE
34454: EQUAL
34455: IFTRUE 34483
34457: LD_INT 26
34459: DOUBLE
34460: EQUAL
34461: IFTRUE 34483
34463: LD_INT 28
34465: DOUBLE
34466: EQUAL
34467: IFTRUE 34483
34469: LD_INT 29
34471: DOUBLE
34472: EQUAL
34473: IFTRUE 34483
34475: LD_INT 30
34477: DOUBLE
34478: EQUAL
34479: IFTRUE 34483
34481: GO 34539
34483: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
34484: LD_ADDR_VAR 0 9
34488: PUSH
34489: LD_VAR 0 59
34493: PUSH
34494: LD_VAR 0 60
34498: PUSH
34499: LD_VAR 0 61
34503: PUSH
34504: LD_VAR 0 62
34508: PUSH
34509: LD_VAR 0 63
34513: PUSH
34514: LD_VAR 0 64
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: PUSH
34527: LD_VAR 0 4
34531: PUSH
34532: LD_INT 1
34534: PLUS
34535: ARRAY
34536: ST_TO_ADDR
34537: GO 34540
34539: POP
// temp_list2 = [ ] ;
34540: LD_ADDR_VAR 0 10
34544: PUSH
34545: EMPTY
34546: ST_TO_ADDR
// for i in temp_list do
34547: LD_ADDR_VAR 0 8
34551: PUSH
34552: LD_VAR 0 9
34556: PUSH
34557: FOR_IN
34558: IFFALSE 34610
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34560: LD_ADDR_VAR 0 10
34564: PUSH
34565: LD_VAR 0 10
34569: PUSH
34570: LD_VAR 0 8
34574: PUSH
34575: LD_INT 1
34577: ARRAY
34578: PUSH
34579: LD_VAR 0 2
34583: PLUS
34584: PUSH
34585: LD_VAR 0 8
34589: PUSH
34590: LD_INT 2
34592: ARRAY
34593: PUSH
34594: LD_VAR 0 3
34598: PLUS
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: EMPTY
34605: LIST
34606: ADD
34607: ST_TO_ADDR
34608: GO 34557
34610: POP
34611: POP
// result = temp_list2 ;
34612: LD_ADDR_VAR 0 7
34616: PUSH
34617: LD_VAR 0 10
34621: ST_TO_ADDR
// end ;
34622: LD_VAR 0 7
34626: RET
// export function EnemyInRange ( unit , dist ) ; begin
34627: LD_INT 0
34629: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34630: LD_ADDR_VAR 0 3
34634: PUSH
34635: LD_VAR 0 1
34639: PPUSH
34640: CALL_OW 255
34644: PPUSH
34645: LD_VAR 0 1
34649: PPUSH
34650: CALL_OW 250
34654: PPUSH
34655: LD_VAR 0 1
34659: PPUSH
34660: CALL_OW 251
34664: PPUSH
34665: LD_VAR 0 2
34669: PPUSH
34670: CALL 8731 0 4
34674: PUSH
34675: LD_INT 4
34677: ARRAY
34678: ST_TO_ADDR
// end ;
34679: LD_VAR 0 3
34683: RET
// export function PlayerSeeMe ( unit ) ; begin
34684: LD_INT 0
34686: PPUSH
// result := See ( your_side , unit ) ;
34687: LD_ADDR_VAR 0 2
34691: PUSH
34692: LD_OWVAR 2
34696: PPUSH
34697: LD_VAR 0 1
34701: PPUSH
34702: CALL_OW 292
34706: ST_TO_ADDR
// end ;
34707: LD_VAR 0 2
34711: RET
// export function ReverseDir ( unit ) ; begin
34712: LD_INT 0
34714: PPUSH
// if not unit then
34715: LD_VAR 0 1
34719: NOT
34720: IFFALSE 34724
// exit ;
34722: GO 34747
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34724: LD_ADDR_VAR 0 2
34728: PUSH
34729: LD_VAR 0 1
34733: PPUSH
34734: CALL_OW 254
34738: PUSH
34739: LD_INT 3
34741: PLUS
34742: PUSH
34743: LD_INT 6
34745: MOD
34746: ST_TO_ADDR
// end ;
34747: LD_VAR 0 2
34751: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
34752: LD_INT 0
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
// if not hexes then
34759: LD_VAR 0 2
34763: NOT
34764: IFFALSE 34768
// exit ;
34766: GO 34916
// dist := 9999 ;
34768: LD_ADDR_VAR 0 5
34772: PUSH
34773: LD_INT 9999
34775: ST_TO_ADDR
// for i = 1 to hexes do
34776: LD_ADDR_VAR 0 4
34780: PUSH
34781: DOUBLE
34782: LD_INT 1
34784: DEC
34785: ST_TO_ADDR
34786: LD_VAR 0 2
34790: PUSH
34791: FOR_TO
34792: IFFALSE 34904
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
34794: LD_VAR 0 1
34798: PPUSH
34799: LD_VAR 0 2
34803: PUSH
34804: LD_VAR 0 4
34808: ARRAY
34809: PUSH
34810: LD_INT 1
34812: ARRAY
34813: PPUSH
34814: LD_VAR 0 2
34818: PUSH
34819: LD_VAR 0 4
34823: ARRAY
34824: PUSH
34825: LD_INT 2
34827: ARRAY
34828: PPUSH
34829: CALL_OW 297
34833: PUSH
34834: LD_VAR 0 5
34838: LESS
34839: IFFALSE 34902
// begin hex := hexes [ i ] ;
34841: LD_ADDR_VAR 0 7
34845: PUSH
34846: LD_VAR 0 2
34850: PUSH
34851: LD_VAR 0 4
34855: ARRAY
34856: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34857: LD_ADDR_VAR 0 5
34861: PUSH
34862: LD_VAR 0 1
34866: PPUSH
34867: LD_VAR 0 2
34871: PUSH
34872: LD_VAR 0 4
34876: ARRAY
34877: PUSH
34878: LD_INT 1
34880: ARRAY
34881: PPUSH
34882: LD_VAR 0 2
34886: PUSH
34887: LD_VAR 0 4
34891: ARRAY
34892: PUSH
34893: LD_INT 2
34895: ARRAY
34896: PPUSH
34897: CALL_OW 297
34901: ST_TO_ADDR
// end ; end ;
34902: GO 34791
34904: POP
34905: POP
// result := hex ;
34906: LD_ADDR_VAR 0 3
34910: PUSH
34911: LD_VAR 0 7
34915: ST_TO_ADDR
// end ;
34916: LD_VAR 0 3
34920: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34921: LD_INT 0
34923: PPUSH
34924: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34925: LD_VAR 0 1
34929: NOT
34930: PUSH
34931: LD_VAR 0 1
34935: PUSH
34936: LD_INT 21
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 23
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PPUSH
34960: CALL_OW 69
34964: IN
34965: NOT
34966: OR
34967: IFFALSE 34971
// exit ;
34969: GO 35018
// for i = 1 to 3 do
34971: LD_ADDR_VAR 0 3
34975: PUSH
34976: DOUBLE
34977: LD_INT 1
34979: DEC
34980: ST_TO_ADDR
34981: LD_INT 3
34983: PUSH
34984: FOR_TO
34985: IFFALSE 35016
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34987: LD_VAR 0 1
34991: PPUSH
34992: CALL_OW 250
34996: PPUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 251
35006: PPUSH
35007: LD_INT 1
35009: PPUSH
35010: CALL_OW 453
35014: GO 34984
35016: POP
35017: POP
// end ;
35018: LD_VAR 0 2
35022: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35023: LD_INT 0
35025: PPUSH
35026: PPUSH
35027: PPUSH
35028: PPUSH
35029: PPUSH
35030: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35031: LD_VAR 0 1
35035: NOT
35036: PUSH
35037: LD_VAR 0 2
35041: NOT
35042: OR
35043: PUSH
35044: LD_VAR 0 1
35048: PPUSH
35049: CALL_OW 314
35053: OR
35054: IFFALSE 35058
// exit ;
35056: GO 35499
// x := GetX ( enemy_unit ) ;
35058: LD_ADDR_VAR 0 7
35062: PUSH
35063: LD_VAR 0 2
35067: PPUSH
35068: CALL_OW 250
35072: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35073: LD_ADDR_VAR 0 8
35077: PUSH
35078: LD_VAR 0 2
35082: PPUSH
35083: CALL_OW 251
35087: ST_TO_ADDR
// if not x or not y then
35088: LD_VAR 0 7
35092: NOT
35093: PUSH
35094: LD_VAR 0 8
35098: NOT
35099: OR
35100: IFFALSE 35104
// exit ;
35102: GO 35499
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35104: LD_ADDR_VAR 0 6
35108: PUSH
35109: LD_VAR 0 7
35113: PPUSH
35114: LD_INT 0
35116: PPUSH
35117: LD_INT 4
35119: PPUSH
35120: CALL_OW 272
35124: PUSH
35125: LD_VAR 0 8
35129: PPUSH
35130: LD_INT 0
35132: PPUSH
35133: LD_INT 4
35135: PPUSH
35136: CALL_OW 273
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_VAR 0 7
35149: PPUSH
35150: LD_INT 1
35152: PPUSH
35153: LD_INT 4
35155: PPUSH
35156: CALL_OW 272
35160: PUSH
35161: LD_VAR 0 8
35165: PPUSH
35166: LD_INT 1
35168: PPUSH
35169: LD_INT 4
35171: PPUSH
35172: CALL_OW 273
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_VAR 0 7
35185: PPUSH
35186: LD_INT 2
35188: PPUSH
35189: LD_INT 4
35191: PPUSH
35192: CALL_OW 272
35196: PUSH
35197: LD_VAR 0 8
35201: PPUSH
35202: LD_INT 2
35204: PPUSH
35205: LD_INT 4
35207: PPUSH
35208: CALL_OW 273
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_VAR 0 7
35221: PPUSH
35222: LD_INT 3
35224: PPUSH
35225: LD_INT 4
35227: PPUSH
35228: CALL_OW 272
35232: PUSH
35233: LD_VAR 0 8
35237: PPUSH
35238: LD_INT 3
35240: PPUSH
35241: LD_INT 4
35243: PPUSH
35244: CALL_OW 273
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_VAR 0 7
35257: PPUSH
35258: LD_INT 4
35260: PPUSH
35261: LD_INT 4
35263: PPUSH
35264: CALL_OW 272
35268: PUSH
35269: LD_VAR 0 8
35273: PPUSH
35274: LD_INT 4
35276: PPUSH
35277: LD_INT 4
35279: PPUSH
35280: CALL_OW 273
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_VAR 0 7
35293: PPUSH
35294: LD_INT 5
35296: PPUSH
35297: LD_INT 4
35299: PPUSH
35300: CALL_OW 272
35304: PUSH
35305: LD_VAR 0 8
35309: PPUSH
35310: LD_INT 5
35312: PPUSH
35313: LD_INT 4
35315: PPUSH
35316: CALL_OW 273
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// for i = tmp downto 1 do
35333: LD_ADDR_VAR 0 4
35337: PUSH
35338: DOUBLE
35339: LD_VAR 0 6
35343: INC
35344: ST_TO_ADDR
35345: LD_INT 1
35347: PUSH
35348: FOR_DOWNTO
35349: IFFALSE 35450
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35351: LD_VAR 0 6
35355: PUSH
35356: LD_VAR 0 4
35360: ARRAY
35361: PUSH
35362: LD_INT 1
35364: ARRAY
35365: PPUSH
35366: LD_VAR 0 6
35370: PUSH
35371: LD_VAR 0 4
35375: ARRAY
35376: PUSH
35377: LD_INT 2
35379: ARRAY
35380: PPUSH
35381: CALL_OW 488
35385: NOT
35386: PUSH
35387: LD_VAR 0 6
35391: PUSH
35392: LD_VAR 0 4
35396: ARRAY
35397: PUSH
35398: LD_INT 1
35400: ARRAY
35401: PPUSH
35402: LD_VAR 0 6
35406: PUSH
35407: LD_VAR 0 4
35411: ARRAY
35412: PUSH
35413: LD_INT 2
35415: ARRAY
35416: PPUSH
35417: CALL_OW 428
35421: PUSH
35422: LD_INT 0
35424: NONEQUAL
35425: OR
35426: IFFALSE 35448
// tmp := Delete ( tmp , i ) ;
35428: LD_ADDR_VAR 0 6
35432: PUSH
35433: LD_VAR 0 6
35437: PPUSH
35438: LD_VAR 0 4
35442: PPUSH
35443: CALL_OW 3
35447: ST_TO_ADDR
35448: GO 35348
35450: POP
35451: POP
// j := GetClosestHex ( unit , tmp ) ;
35452: LD_ADDR_VAR 0 5
35456: PUSH
35457: LD_VAR 0 1
35461: PPUSH
35462: LD_VAR 0 6
35466: PPUSH
35467: CALL 34752 0 2
35471: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35472: LD_VAR 0 1
35476: PPUSH
35477: LD_VAR 0 5
35481: PUSH
35482: LD_INT 1
35484: ARRAY
35485: PPUSH
35486: LD_VAR 0 5
35490: PUSH
35491: LD_INT 2
35493: ARRAY
35494: PPUSH
35495: CALL_OW 111
// end ;
35499: LD_VAR 0 3
35503: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35504: LD_INT 0
35506: PPUSH
35507: PPUSH
35508: PPUSH
// uc_side = 0 ;
35509: LD_ADDR_OWVAR 20
35513: PUSH
35514: LD_INT 0
35516: ST_TO_ADDR
// uc_nation = 0 ;
35517: LD_ADDR_OWVAR 21
35521: PUSH
35522: LD_INT 0
35524: ST_TO_ADDR
// InitHc ;
35525: CALL_OW 19
// InitVc ;
35529: CALL_OW 20
// if mastodonts then
35533: LD_VAR 0 6
35537: IFFALSE 35604
// for i = 1 to mastodonts do
35539: LD_ADDR_VAR 0 11
35543: PUSH
35544: DOUBLE
35545: LD_INT 1
35547: DEC
35548: ST_TO_ADDR
35549: LD_VAR 0 6
35553: PUSH
35554: FOR_TO
35555: IFFALSE 35602
// begin vc_chassis := 31 ;
35557: LD_ADDR_OWVAR 37
35561: PUSH
35562: LD_INT 31
35564: ST_TO_ADDR
// vc_control := control_rider ;
35565: LD_ADDR_OWVAR 38
35569: PUSH
35570: LD_INT 4
35572: ST_TO_ADDR
// animal := CreateVehicle ;
35573: LD_ADDR_VAR 0 12
35577: PUSH
35578: CALL_OW 45
35582: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35583: LD_VAR 0 12
35587: PPUSH
35588: LD_VAR 0 8
35592: PPUSH
35593: LD_INT 0
35595: PPUSH
35596: CALL 37673 0 3
// end ;
35600: GO 35554
35602: POP
35603: POP
// if horses then
35604: LD_VAR 0 5
35608: IFFALSE 35675
// for i = 1 to horses do
35610: LD_ADDR_VAR 0 11
35614: PUSH
35615: DOUBLE
35616: LD_INT 1
35618: DEC
35619: ST_TO_ADDR
35620: LD_VAR 0 5
35624: PUSH
35625: FOR_TO
35626: IFFALSE 35673
// begin hc_class := 21 ;
35628: LD_ADDR_OWVAR 28
35632: PUSH
35633: LD_INT 21
35635: ST_TO_ADDR
// hc_gallery :=  ;
35636: LD_ADDR_OWVAR 33
35640: PUSH
35641: LD_STRING 
35643: ST_TO_ADDR
// animal := CreateHuman ;
35644: LD_ADDR_VAR 0 12
35648: PUSH
35649: CALL_OW 44
35653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35654: LD_VAR 0 12
35658: PPUSH
35659: LD_VAR 0 8
35663: PPUSH
35664: LD_INT 0
35666: PPUSH
35667: CALL 37673 0 3
// end ;
35671: GO 35625
35673: POP
35674: POP
// if birds then
35675: LD_VAR 0 1
35679: IFFALSE 35746
// for i = 1 to birds do
35681: LD_ADDR_VAR 0 11
35685: PUSH
35686: DOUBLE
35687: LD_INT 1
35689: DEC
35690: ST_TO_ADDR
35691: LD_VAR 0 1
35695: PUSH
35696: FOR_TO
35697: IFFALSE 35744
// begin hc_class = 18 ;
35699: LD_ADDR_OWVAR 28
35703: PUSH
35704: LD_INT 18
35706: ST_TO_ADDR
// hc_gallery =  ;
35707: LD_ADDR_OWVAR 33
35711: PUSH
35712: LD_STRING 
35714: ST_TO_ADDR
// animal := CreateHuman ;
35715: LD_ADDR_VAR 0 12
35719: PUSH
35720: CALL_OW 44
35724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35725: LD_VAR 0 12
35729: PPUSH
35730: LD_VAR 0 8
35734: PPUSH
35735: LD_INT 0
35737: PPUSH
35738: CALL 37673 0 3
// end ;
35742: GO 35696
35744: POP
35745: POP
// if tigers then
35746: LD_VAR 0 2
35750: IFFALSE 35834
// for i = 1 to tigers do
35752: LD_ADDR_VAR 0 11
35756: PUSH
35757: DOUBLE
35758: LD_INT 1
35760: DEC
35761: ST_TO_ADDR
35762: LD_VAR 0 2
35766: PUSH
35767: FOR_TO
35768: IFFALSE 35832
// begin hc_class = class_tiger ;
35770: LD_ADDR_OWVAR 28
35774: PUSH
35775: LD_INT 14
35777: ST_TO_ADDR
// hc_gallery =  ;
35778: LD_ADDR_OWVAR 33
35782: PUSH
35783: LD_STRING 
35785: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35786: LD_ADDR_OWVAR 35
35790: PUSH
35791: LD_INT 7
35793: NEG
35794: PPUSH
35795: LD_INT 7
35797: PPUSH
35798: CALL_OW 12
35802: ST_TO_ADDR
// animal := CreateHuman ;
35803: LD_ADDR_VAR 0 12
35807: PUSH
35808: CALL_OW 44
35812: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35813: LD_VAR 0 12
35817: PPUSH
35818: LD_VAR 0 8
35822: PPUSH
35823: LD_INT 0
35825: PPUSH
35826: CALL 37673 0 3
// end ;
35830: GO 35767
35832: POP
35833: POP
// if apemans then
35834: LD_VAR 0 3
35838: IFFALSE 35961
// for i = 1 to apemans do
35840: LD_ADDR_VAR 0 11
35844: PUSH
35845: DOUBLE
35846: LD_INT 1
35848: DEC
35849: ST_TO_ADDR
35850: LD_VAR 0 3
35854: PUSH
35855: FOR_TO
35856: IFFALSE 35959
// begin hc_class = class_apeman ;
35858: LD_ADDR_OWVAR 28
35862: PUSH
35863: LD_INT 12
35865: ST_TO_ADDR
// hc_gallery =  ;
35866: LD_ADDR_OWVAR 33
35870: PUSH
35871: LD_STRING 
35873: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
35874: LD_ADDR_OWVAR 35
35878: PUSH
35879: LD_INT 5
35881: NEG
35882: PPUSH
35883: LD_INT 5
35885: PPUSH
35886: CALL_OW 12
35890: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35891: LD_ADDR_OWVAR 31
35895: PUSH
35896: LD_INT 1
35898: PPUSH
35899: LD_INT 3
35901: PPUSH
35902: CALL_OW 12
35906: PUSH
35907: LD_INT 1
35909: PPUSH
35910: LD_INT 3
35912: PPUSH
35913: CALL_OW 12
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// animal := CreateHuman ;
35930: LD_ADDR_VAR 0 12
35934: PUSH
35935: CALL_OW 44
35939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35940: LD_VAR 0 12
35944: PPUSH
35945: LD_VAR 0 8
35949: PPUSH
35950: LD_INT 0
35952: PPUSH
35953: CALL 37673 0 3
// end ;
35957: GO 35855
35959: POP
35960: POP
// if enchidnas then
35961: LD_VAR 0 4
35965: IFFALSE 36032
// for i = 1 to enchidnas do
35967: LD_ADDR_VAR 0 11
35971: PUSH
35972: DOUBLE
35973: LD_INT 1
35975: DEC
35976: ST_TO_ADDR
35977: LD_VAR 0 4
35981: PUSH
35982: FOR_TO
35983: IFFALSE 36030
// begin hc_class = 13 ;
35985: LD_ADDR_OWVAR 28
35989: PUSH
35990: LD_INT 13
35992: ST_TO_ADDR
// hc_gallery =  ;
35993: LD_ADDR_OWVAR 33
35997: PUSH
35998: LD_STRING 
36000: ST_TO_ADDR
// animal := CreateHuman ;
36001: LD_ADDR_VAR 0 12
36005: PUSH
36006: CALL_OW 44
36010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36011: LD_VAR 0 12
36015: PPUSH
36016: LD_VAR 0 8
36020: PPUSH
36021: LD_INT 0
36023: PPUSH
36024: CALL 37673 0 3
// end ;
36028: GO 35982
36030: POP
36031: POP
// if fishes then
36032: LD_VAR 0 7
36036: IFFALSE 36103
// for i = 1 to fishes do
36038: LD_ADDR_VAR 0 11
36042: PUSH
36043: DOUBLE
36044: LD_INT 1
36046: DEC
36047: ST_TO_ADDR
36048: LD_VAR 0 7
36052: PUSH
36053: FOR_TO
36054: IFFALSE 36101
// begin hc_class = 20 ;
36056: LD_ADDR_OWVAR 28
36060: PUSH
36061: LD_INT 20
36063: ST_TO_ADDR
// hc_gallery =  ;
36064: LD_ADDR_OWVAR 33
36068: PUSH
36069: LD_STRING 
36071: ST_TO_ADDR
// animal := CreateHuman ;
36072: LD_ADDR_VAR 0 12
36076: PUSH
36077: CALL_OW 44
36081: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36082: LD_VAR 0 12
36086: PPUSH
36087: LD_VAR 0 9
36091: PPUSH
36092: LD_INT 0
36094: PPUSH
36095: CALL 37673 0 3
// end ;
36099: GO 36053
36101: POP
36102: POP
// end ;
36103: LD_VAR 0 10
36107: RET
// export function WantHeal ( sci , unit ) ; begin
36108: LD_INT 0
36110: PPUSH
// if GetTaskList ( sci ) > 0 then
36111: LD_VAR 0 1
36115: PPUSH
36116: CALL_OW 437
36120: PUSH
36121: LD_INT 0
36123: GREATER
36124: IFFALSE 36194
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36126: LD_VAR 0 1
36130: PPUSH
36131: CALL_OW 437
36135: PUSH
36136: LD_INT 1
36138: ARRAY
36139: PUSH
36140: LD_INT 1
36142: ARRAY
36143: PUSH
36144: LD_STRING l
36146: EQUAL
36147: PUSH
36148: LD_VAR 0 1
36152: PPUSH
36153: CALL_OW 437
36157: PUSH
36158: LD_INT 1
36160: ARRAY
36161: PUSH
36162: LD_INT 4
36164: ARRAY
36165: PUSH
36166: LD_VAR 0 2
36170: EQUAL
36171: AND
36172: IFFALSE 36184
// result := true else
36174: LD_ADDR_VAR 0 3
36178: PUSH
36179: LD_INT 1
36181: ST_TO_ADDR
36182: GO 36192
// result := false ;
36184: LD_ADDR_VAR 0 3
36188: PUSH
36189: LD_INT 0
36191: ST_TO_ADDR
// end else
36192: GO 36202
// result := false ;
36194: LD_ADDR_VAR 0 3
36198: PUSH
36199: LD_INT 0
36201: ST_TO_ADDR
// end ;
36202: LD_VAR 0 3
36206: RET
// export function HealTarget ( sci ) ; begin
36207: LD_INT 0
36209: PPUSH
// if not sci then
36210: LD_VAR 0 1
36214: NOT
36215: IFFALSE 36219
// exit ;
36217: GO 36284
// result := 0 ;
36219: LD_ADDR_VAR 0 2
36223: PUSH
36224: LD_INT 0
36226: ST_TO_ADDR
// if GetTaskList ( sci ) then
36227: LD_VAR 0 1
36231: PPUSH
36232: CALL_OW 437
36236: IFFALSE 36284
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36238: LD_VAR 0 1
36242: PPUSH
36243: CALL_OW 437
36247: PUSH
36248: LD_INT 1
36250: ARRAY
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PUSH
36256: LD_STRING l
36258: EQUAL
36259: IFFALSE 36284
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36261: LD_ADDR_VAR 0 2
36265: PUSH
36266: LD_VAR 0 1
36270: PPUSH
36271: CALL_OW 437
36275: PUSH
36276: LD_INT 1
36278: ARRAY
36279: PUSH
36280: LD_INT 4
36282: ARRAY
36283: ST_TO_ADDR
// end ;
36284: LD_VAR 0 2
36288: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36289: LD_INT 0
36291: PPUSH
36292: PPUSH
36293: PPUSH
36294: PPUSH
// if not base_units then
36295: LD_VAR 0 1
36299: NOT
36300: IFFALSE 36304
// exit ;
36302: GO 36391
// result := false ;
36304: LD_ADDR_VAR 0 2
36308: PUSH
36309: LD_INT 0
36311: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36312: LD_ADDR_VAR 0 5
36316: PUSH
36317: LD_VAR 0 1
36321: PPUSH
36322: LD_INT 21
36324: PUSH
36325: LD_INT 3
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PPUSH
36332: CALL_OW 72
36336: ST_TO_ADDR
// if not tmp then
36337: LD_VAR 0 5
36341: NOT
36342: IFFALSE 36346
// exit ;
36344: GO 36391
// for i in tmp do
36346: LD_ADDR_VAR 0 3
36350: PUSH
36351: LD_VAR 0 5
36355: PUSH
36356: FOR_IN
36357: IFFALSE 36389
// begin result := EnemyInRange ( i , 22 ) ;
36359: LD_ADDR_VAR 0 2
36363: PUSH
36364: LD_VAR 0 3
36368: PPUSH
36369: LD_INT 22
36371: PPUSH
36372: CALL 34627 0 2
36376: ST_TO_ADDR
// if result then
36377: LD_VAR 0 2
36381: IFFALSE 36387
// exit ;
36383: POP
36384: POP
36385: GO 36391
// end ;
36387: GO 36356
36389: POP
36390: POP
// end ;
36391: LD_VAR 0 2
36395: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
36396: LD_INT 0
36398: PPUSH
36399: PPUSH
// if not units then
36400: LD_VAR 0 1
36404: NOT
36405: IFFALSE 36409
// exit ;
36407: GO 36479
// result := [ ] ;
36409: LD_ADDR_VAR 0 3
36413: PUSH
36414: EMPTY
36415: ST_TO_ADDR
// for i in units do
36416: LD_ADDR_VAR 0 4
36420: PUSH
36421: LD_VAR 0 1
36425: PUSH
36426: FOR_IN
36427: IFFALSE 36477
// if GetTag ( i ) = tag then
36429: LD_VAR 0 4
36433: PPUSH
36434: CALL_OW 110
36438: PUSH
36439: LD_VAR 0 2
36443: EQUAL
36444: IFFALSE 36475
// result := Insert ( result , result + 1 , i ) ;
36446: LD_ADDR_VAR 0 3
36450: PUSH
36451: LD_VAR 0 3
36455: PPUSH
36456: LD_VAR 0 3
36460: PUSH
36461: LD_INT 1
36463: PLUS
36464: PPUSH
36465: LD_VAR 0 4
36469: PPUSH
36470: CALL_OW 2
36474: ST_TO_ADDR
36475: GO 36426
36477: POP
36478: POP
// end ;
36479: LD_VAR 0 3
36483: RET
// export function IsDriver ( un ) ; begin
36484: LD_INT 0
36486: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36487: LD_ADDR_VAR 0 2
36491: PUSH
36492: LD_VAR 0 1
36496: PUSH
36497: LD_INT 55
36499: PUSH
36500: EMPTY
36501: LIST
36502: PPUSH
36503: CALL_OW 69
36507: IN
36508: ST_TO_ADDR
// end ;
36509: LD_VAR 0 2
36513: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36514: LD_INT 0
36516: PPUSH
36517: PPUSH
// list := [ ] ;
36518: LD_ADDR_VAR 0 5
36522: PUSH
36523: EMPTY
36524: ST_TO_ADDR
// case d of 0 :
36525: LD_VAR 0 3
36529: PUSH
36530: LD_INT 0
36532: DOUBLE
36533: EQUAL
36534: IFTRUE 36538
36536: GO 36671
36538: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36539: LD_ADDR_VAR 0 5
36543: PUSH
36544: LD_VAR 0 1
36548: PUSH
36549: LD_INT 4
36551: MINUS
36552: PUSH
36553: LD_VAR 0 2
36557: PUSH
36558: LD_INT 4
36560: MINUS
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: PUSH
36570: LD_VAR 0 1
36574: PUSH
36575: LD_INT 3
36577: MINUS
36578: PUSH
36579: LD_VAR 0 2
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: PUSH
36592: LD_VAR 0 1
36596: PUSH
36597: LD_INT 4
36599: PLUS
36600: PUSH
36601: LD_VAR 0 2
36605: PUSH
36606: LD_INT 4
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: PUSH
36614: LD_VAR 0 1
36618: PUSH
36619: LD_INT 3
36621: PLUS
36622: PUSH
36623: LD_VAR 0 2
36627: PUSH
36628: LD_INT 3
36630: PLUS
36631: PUSH
36632: LD_INT 5
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: PUSH
36640: LD_VAR 0 1
36644: PUSH
36645: LD_VAR 0 2
36649: PUSH
36650: LD_INT 4
36652: PLUS
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: ST_TO_ADDR
// end ; 1 :
36669: GO 37369
36671: LD_INT 1
36673: DOUBLE
36674: EQUAL
36675: IFTRUE 36679
36677: GO 36812
36679: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36680: LD_ADDR_VAR 0 5
36684: PUSH
36685: LD_VAR 0 1
36689: PUSH
36690: LD_VAR 0 2
36694: PUSH
36695: LD_INT 4
36697: MINUS
36698: PUSH
36699: LD_INT 3
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: LIST
36706: PUSH
36707: LD_VAR 0 1
36711: PUSH
36712: LD_INT 3
36714: MINUS
36715: PUSH
36716: LD_VAR 0 2
36720: PUSH
36721: LD_INT 3
36723: MINUS
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: PUSH
36733: LD_VAR 0 1
36737: PUSH
36738: LD_INT 4
36740: MINUS
36741: PUSH
36742: LD_VAR 0 2
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: PUSH
36755: LD_VAR 0 1
36759: PUSH
36760: LD_VAR 0 2
36764: PUSH
36765: LD_INT 3
36767: PLUS
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: PUSH
36777: LD_VAR 0 1
36781: PUSH
36782: LD_INT 4
36784: PLUS
36785: PUSH
36786: LD_VAR 0 2
36790: PUSH
36791: LD_INT 4
36793: PLUS
36794: PUSH
36795: LD_INT 5
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: LIST
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: ST_TO_ADDR
// end ; 2 :
36810: GO 37369
36812: LD_INT 2
36814: DOUBLE
36815: EQUAL
36816: IFTRUE 36820
36818: GO 36949
36820: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36821: LD_ADDR_VAR 0 5
36825: PUSH
36826: LD_VAR 0 1
36830: PUSH
36831: LD_VAR 0 2
36835: PUSH
36836: LD_INT 3
36838: MINUS
36839: PUSH
36840: LD_INT 3
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: PUSH
36848: LD_VAR 0 1
36852: PUSH
36853: LD_INT 4
36855: PLUS
36856: PUSH
36857: LD_VAR 0 2
36861: PUSH
36862: LD_INT 4
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: PUSH
36870: LD_VAR 0 1
36874: PUSH
36875: LD_VAR 0 2
36879: PUSH
36880: LD_INT 4
36882: PLUS
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: PUSH
36892: LD_VAR 0 1
36896: PUSH
36897: LD_INT 3
36899: MINUS
36900: PUSH
36901: LD_VAR 0 2
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: PUSH
36914: LD_VAR 0 1
36918: PUSH
36919: LD_INT 4
36921: MINUS
36922: PUSH
36923: LD_VAR 0 2
36927: PUSH
36928: LD_INT 4
36930: MINUS
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: ST_TO_ADDR
// end ; 3 :
36947: GO 37369
36949: LD_INT 3
36951: DOUBLE
36952: EQUAL
36953: IFTRUE 36957
36955: GO 37090
36957: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36958: LD_ADDR_VAR 0 5
36962: PUSH
36963: LD_VAR 0 1
36967: PUSH
36968: LD_INT 3
36970: PLUS
36971: PUSH
36972: LD_VAR 0 2
36976: PUSH
36977: LD_INT 4
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: PUSH
36985: LD_VAR 0 1
36989: PUSH
36990: LD_INT 4
36992: PLUS
36993: PUSH
36994: LD_VAR 0 2
36998: PUSH
36999: LD_INT 4
37001: PLUS
37002: PUSH
37003: LD_INT 5
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: PUSH
37011: LD_VAR 0 1
37015: PUSH
37016: LD_INT 4
37018: MINUS
37019: PUSH
37020: LD_VAR 0 2
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: LIST
37032: PUSH
37033: LD_VAR 0 1
37037: PUSH
37038: LD_VAR 0 2
37042: PUSH
37043: LD_INT 4
37045: MINUS
37046: PUSH
37047: LD_INT 3
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: PUSH
37055: LD_VAR 0 1
37059: PUSH
37060: LD_INT 3
37062: MINUS
37063: PUSH
37064: LD_VAR 0 2
37068: PUSH
37069: LD_INT 3
37071: MINUS
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: ST_TO_ADDR
// end ; 4 :
37088: GO 37369
37090: LD_INT 4
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37098
37096: GO 37231
37098: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37099: LD_ADDR_VAR 0 5
37103: PUSH
37104: LD_VAR 0 1
37108: PUSH
37109: LD_VAR 0 2
37113: PUSH
37114: LD_INT 4
37116: PLUS
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: LIST
37125: PUSH
37126: LD_VAR 0 1
37130: PUSH
37131: LD_INT 3
37133: PLUS
37134: PUSH
37135: LD_VAR 0 2
37139: PUSH
37140: LD_INT 3
37142: PLUS
37143: PUSH
37144: LD_INT 5
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: LIST
37151: PUSH
37152: LD_VAR 0 1
37156: PUSH
37157: LD_INT 4
37159: PLUS
37160: PUSH
37161: LD_VAR 0 2
37165: PUSH
37166: LD_INT 4
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: LIST
37173: PUSH
37174: LD_VAR 0 1
37178: PUSH
37179: LD_VAR 0 2
37183: PUSH
37184: LD_INT 3
37186: MINUS
37187: PUSH
37188: LD_INT 3
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: LIST
37195: PUSH
37196: LD_VAR 0 1
37200: PUSH
37201: LD_INT 4
37203: MINUS
37204: PUSH
37205: LD_VAR 0 2
37209: PUSH
37210: LD_INT 4
37212: MINUS
37213: PUSH
37214: LD_INT 2
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// end ; 5 :
37229: GO 37369
37231: LD_INT 5
37233: DOUBLE
37234: EQUAL
37235: IFTRUE 37239
37237: GO 37368
37239: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37240: LD_ADDR_VAR 0 5
37244: PUSH
37245: LD_VAR 0 1
37249: PUSH
37250: LD_INT 4
37252: MINUS
37253: PUSH
37254: LD_VAR 0 2
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: LIST
37266: PUSH
37267: LD_VAR 0 1
37271: PUSH
37272: LD_VAR 0 2
37276: PUSH
37277: LD_INT 4
37279: MINUS
37280: PUSH
37281: LD_INT 3
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: PUSH
37289: LD_VAR 0 1
37293: PUSH
37294: LD_INT 4
37296: PLUS
37297: PUSH
37298: LD_VAR 0 2
37302: PUSH
37303: LD_INT 4
37305: PLUS
37306: PUSH
37307: LD_INT 5
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: PUSH
37315: LD_VAR 0 1
37319: PUSH
37320: LD_INT 3
37322: PLUS
37323: PUSH
37324: LD_VAR 0 2
37328: PUSH
37329: LD_INT 4
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: PUSH
37337: LD_VAR 0 1
37341: PUSH
37342: LD_VAR 0 2
37346: PUSH
37347: LD_INT 3
37349: PLUS
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: LIST
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: ST_TO_ADDR
// end ; end ;
37366: GO 37369
37368: POP
// result := list ;
37369: LD_ADDR_VAR 0 4
37373: PUSH
37374: LD_VAR 0 5
37378: ST_TO_ADDR
// end ;
37379: LD_VAR 0 4
37383: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37384: LD_INT 0
37386: PPUSH
37387: PPUSH
37388: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37389: LD_VAR 0 1
37393: NOT
37394: PUSH
37395: LD_VAR 0 2
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: LD_INT 3
37408: PUSH
37409: LD_INT 4
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: IN
37418: NOT
37419: OR
37420: IFFALSE 37424
// exit ;
37422: GO 37516
// tmp := [ ] ;
37424: LD_ADDR_VAR 0 5
37428: PUSH
37429: EMPTY
37430: ST_TO_ADDR
// for i in units do
37431: LD_ADDR_VAR 0 4
37435: PUSH
37436: LD_VAR 0 1
37440: PUSH
37441: FOR_IN
37442: IFFALSE 37485
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
37444: LD_ADDR_VAR 0 5
37448: PUSH
37449: LD_VAR 0 5
37453: PPUSH
37454: LD_VAR 0 5
37458: PUSH
37459: LD_INT 1
37461: PLUS
37462: PPUSH
37463: LD_VAR 0 4
37467: PPUSH
37468: LD_VAR 0 2
37472: PPUSH
37473: CALL_OW 259
37477: PPUSH
37478: CALL_OW 2
37482: ST_TO_ADDR
37483: GO 37441
37485: POP
37486: POP
// if not tmp then
37487: LD_VAR 0 5
37491: NOT
37492: IFFALSE 37496
// exit ;
37494: GO 37516
// result := SortListByListDesc ( units , tmp ) ;
37496: LD_ADDR_VAR 0 3
37500: PUSH
37501: LD_VAR 0 1
37505: PPUSH
37506: LD_VAR 0 5
37510: PPUSH
37511: CALL_OW 77
37515: ST_TO_ADDR
// end ;
37516: LD_VAR 0 3
37520: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37521: LD_INT 0
37523: PPUSH
37524: PPUSH
37525: PPUSH
// x := GetX ( building ) ;
37526: LD_ADDR_VAR 0 4
37530: PUSH
37531: LD_VAR 0 2
37535: PPUSH
37536: CALL_OW 250
37540: ST_TO_ADDR
// y := GetY ( building ) ;
37541: LD_ADDR_VAR 0 5
37545: PUSH
37546: LD_VAR 0 2
37550: PPUSH
37551: CALL_OW 251
37555: ST_TO_ADDR
// if GetTaskList ( unit ) then
37556: LD_VAR 0 1
37560: PPUSH
37561: CALL_OW 437
37565: IFFALSE 37660
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37567: LD_STRING e
37569: PUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 437
37579: PUSH
37580: LD_INT 1
37582: ARRAY
37583: PUSH
37584: LD_INT 1
37586: ARRAY
37587: EQUAL
37588: PUSH
37589: LD_VAR 0 4
37593: PUSH
37594: LD_VAR 0 1
37598: PPUSH
37599: CALL_OW 437
37603: PUSH
37604: LD_INT 1
37606: ARRAY
37607: PUSH
37608: LD_INT 2
37610: ARRAY
37611: EQUAL
37612: AND
37613: PUSH
37614: LD_VAR 0 5
37618: PUSH
37619: LD_VAR 0 1
37623: PPUSH
37624: CALL_OW 437
37628: PUSH
37629: LD_INT 1
37631: ARRAY
37632: PUSH
37633: LD_INT 3
37635: ARRAY
37636: EQUAL
37637: AND
37638: IFFALSE 37650
// result := true else
37640: LD_ADDR_VAR 0 3
37644: PUSH
37645: LD_INT 1
37647: ST_TO_ADDR
37648: GO 37658
// result := false ;
37650: LD_ADDR_VAR 0 3
37654: PUSH
37655: LD_INT 0
37657: ST_TO_ADDR
// end else
37658: GO 37668
// result := false ;
37660: LD_ADDR_VAR 0 3
37664: PUSH
37665: LD_INT 0
37667: ST_TO_ADDR
// end ;
37668: LD_VAR 0 3
37672: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37673: LD_INT 0
37675: PPUSH
37676: PPUSH
37677: PPUSH
37678: PPUSH
// if not unit or not area then
37679: LD_VAR 0 1
37683: NOT
37684: PUSH
37685: LD_VAR 0 2
37689: NOT
37690: OR
37691: IFFALSE 37695
// exit ;
37693: GO 37859
// tmp := AreaToList ( area , i ) ;
37695: LD_ADDR_VAR 0 6
37699: PUSH
37700: LD_VAR 0 2
37704: PPUSH
37705: LD_VAR 0 5
37709: PPUSH
37710: CALL_OW 517
37714: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37715: LD_ADDR_VAR 0 5
37719: PUSH
37720: DOUBLE
37721: LD_INT 1
37723: DEC
37724: ST_TO_ADDR
37725: LD_VAR 0 6
37729: PUSH
37730: LD_INT 1
37732: ARRAY
37733: PUSH
37734: FOR_TO
37735: IFFALSE 37857
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37737: LD_ADDR_VAR 0 7
37741: PUSH
37742: LD_VAR 0 6
37746: PUSH
37747: LD_INT 1
37749: ARRAY
37750: PUSH
37751: LD_VAR 0 5
37755: ARRAY
37756: PUSH
37757: LD_VAR 0 6
37761: PUSH
37762: LD_INT 2
37764: ARRAY
37765: PUSH
37766: LD_VAR 0 5
37770: ARRAY
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37776: LD_VAR 0 7
37780: PUSH
37781: LD_INT 1
37783: ARRAY
37784: PPUSH
37785: LD_VAR 0 7
37789: PUSH
37790: LD_INT 2
37792: ARRAY
37793: PPUSH
37794: CALL_OW 428
37798: PUSH
37799: LD_INT 0
37801: EQUAL
37802: IFFALSE 37855
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37804: LD_VAR 0 1
37808: PPUSH
37809: LD_VAR 0 7
37813: PUSH
37814: LD_INT 1
37816: ARRAY
37817: PPUSH
37818: LD_VAR 0 7
37822: PUSH
37823: LD_INT 2
37825: ARRAY
37826: PPUSH
37827: LD_VAR 0 3
37831: PPUSH
37832: CALL_OW 48
// result := IsPlaced ( unit ) ;
37836: LD_ADDR_VAR 0 4
37840: PUSH
37841: LD_VAR 0 1
37845: PPUSH
37846: CALL_OW 305
37850: ST_TO_ADDR
// exit ;
37851: POP
37852: POP
37853: GO 37859
// end ; end ;
37855: GO 37734
37857: POP
37858: POP
// end ;
37859: LD_VAR 0 4
37863: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37864: LD_INT 0
37866: PPUSH
37867: PPUSH
37868: PPUSH
// if not side or side > 8 then
37869: LD_VAR 0 1
37873: NOT
37874: PUSH
37875: LD_VAR 0 1
37879: PUSH
37880: LD_INT 8
37882: GREATER
37883: OR
37884: IFFALSE 37888
// exit ;
37886: GO 38075
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37888: LD_ADDR_VAR 0 4
37892: PUSH
37893: LD_INT 22
37895: PUSH
37896: LD_VAR 0 1
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 21
37907: PUSH
37908: LD_INT 3
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PPUSH
37919: CALL_OW 69
37923: ST_TO_ADDR
// if not tmp then
37924: LD_VAR 0 4
37928: NOT
37929: IFFALSE 37933
// exit ;
37931: GO 38075
// enable_addtolog := true ;
37933: LD_ADDR_OWVAR 81
37937: PUSH
37938: LD_INT 1
37940: ST_TO_ADDR
// AddToLog ( [ ) ;
37941: LD_STRING [
37943: PPUSH
37944: CALL_OW 561
// for i in tmp do
37948: LD_ADDR_VAR 0 3
37952: PUSH
37953: LD_VAR 0 4
37957: PUSH
37958: FOR_IN
37959: IFFALSE 38066
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37961: LD_STRING [
37963: PUSH
37964: LD_VAR 0 3
37968: PPUSH
37969: CALL_OW 266
37973: STR
37974: PUSH
37975: LD_STRING , 
37977: STR
37978: PUSH
37979: LD_VAR 0 3
37983: PPUSH
37984: CALL_OW 250
37988: STR
37989: PUSH
37990: LD_STRING , 
37992: STR
37993: PUSH
37994: LD_VAR 0 3
37998: PPUSH
37999: CALL_OW 251
38003: STR
38004: PUSH
38005: LD_STRING , 
38007: STR
38008: PUSH
38009: LD_VAR 0 3
38013: PPUSH
38014: CALL_OW 254
38018: STR
38019: PUSH
38020: LD_STRING , 
38022: STR
38023: PUSH
38024: LD_VAR 0 3
38028: PPUSH
38029: LD_INT 1
38031: PPUSH
38032: CALL_OW 268
38036: STR
38037: PUSH
38038: LD_STRING , 
38040: STR
38041: PUSH
38042: LD_VAR 0 3
38046: PPUSH
38047: LD_INT 2
38049: PPUSH
38050: CALL_OW 268
38054: STR
38055: PUSH
38056: LD_STRING ],
38058: STR
38059: PPUSH
38060: CALL_OW 561
// end ;
38064: GO 37958
38066: POP
38067: POP
// AddToLog ( ]; ) ;
38068: LD_STRING ];
38070: PPUSH
38071: CALL_OW 561
// end ;
38075: LD_VAR 0 2
38079: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38080: LD_INT 0
38082: PPUSH
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
// if not area or not rate or not max then
38087: LD_VAR 0 1
38091: NOT
38092: PUSH
38093: LD_VAR 0 2
38097: NOT
38098: OR
38099: PUSH
38100: LD_VAR 0 4
38104: NOT
38105: OR
38106: IFFALSE 38110
// exit ;
38108: GO 38302
// while 1 do
38110: LD_INT 1
38112: IFFALSE 38302
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38114: LD_ADDR_VAR 0 9
38118: PUSH
38119: LD_VAR 0 1
38123: PPUSH
38124: LD_INT 1
38126: PPUSH
38127: CALL_OW 287
38131: PUSH
38132: LD_INT 10
38134: MUL
38135: ST_TO_ADDR
// r := rate / 10 ;
38136: LD_ADDR_VAR 0 7
38140: PUSH
38141: LD_VAR 0 2
38145: PUSH
38146: LD_INT 10
38148: DIVREAL
38149: ST_TO_ADDR
// time := 1 1$00 ;
38150: LD_ADDR_VAR 0 8
38154: PUSH
38155: LD_INT 2100
38157: ST_TO_ADDR
// if amount < min then
38158: LD_VAR 0 9
38162: PUSH
38163: LD_VAR 0 3
38167: LESS
38168: IFFALSE 38186
// r := r * 2 else
38170: LD_ADDR_VAR 0 7
38174: PUSH
38175: LD_VAR 0 7
38179: PUSH
38180: LD_INT 2
38182: MUL
38183: ST_TO_ADDR
38184: GO 38212
// if amount > max then
38186: LD_VAR 0 9
38190: PUSH
38191: LD_VAR 0 4
38195: GREATER
38196: IFFALSE 38212
// r := r / 2 ;
38198: LD_ADDR_VAR 0 7
38202: PUSH
38203: LD_VAR 0 7
38207: PUSH
38208: LD_INT 2
38210: DIVREAL
38211: ST_TO_ADDR
// time := time / r ;
38212: LD_ADDR_VAR 0 8
38216: PUSH
38217: LD_VAR 0 8
38221: PUSH
38222: LD_VAR 0 7
38226: DIVREAL
38227: ST_TO_ADDR
// if time < 0 then
38228: LD_VAR 0 8
38232: PUSH
38233: LD_INT 0
38235: LESS
38236: IFFALSE 38253
// time := time * - 1 ;
38238: LD_ADDR_VAR 0 8
38242: PUSH
38243: LD_VAR 0 8
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: MUL
38252: ST_TO_ADDR
// wait ( time ) ;
38253: LD_VAR 0 8
38257: PPUSH
38258: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
38262: LD_INT 35
38264: PPUSH
38265: LD_INT 875
38267: PPUSH
38268: CALL_OW 12
38272: PPUSH
38273: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38277: LD_INT 1
38279: PPUSH
38280: LD_INT 5
38282: PPUSH
38283: CALL_OW 12
38287: PPUSH
38288: LD_VAR 0 1
38292: PPUSH
38293: LD_INT 1
38295: PPUSH
38296: CALL_OW 55
// end ;
38300: GO 38110
// end ;
38302: LD_VAR 0 5
38306: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38307: LD_INT 0
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
38316: PPUSH
// if not turrets or not factories then
38317: LD_VAR 0 1
38321: NOT
38322: PUSH
38323: LD_VAR 0 2
38327: NOT
38328: OR
38329: IFFALSE 38333
// exit ;
38331: GO 38640
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38333: LD_ADDR_VAR 0 10
38337: PUSH
38338: LD_INT 5
38340: PUSH
38341: LD_INT 6
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: LD_INT 4
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 3
38360: PUSH
38361: LD_INT 5
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 24
38375: PUSH
38376: LD_INT 25
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 23
38385: PUSH
38386: LD_INT 27
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 42
38399: PUSH
38400: LD_INT 43
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 44
38409: PUSH
38410: LD_INT 46
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 45
38419: PUSH
38420: LD_INT 47
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: ST_TO_ADDR
// result := [ ] ;
38437: LD_ADDR_VAR 0 3
38441: PUSH
38442: EMPTY
38443: ST_TO_ADDR
// for i in turrets do
38444: LD_ADDR_VAR 0 4
38448: PUSH
38449: LD_VAR 0 1
38453: PUSH
38454: FOR_IN
38455: IFFALSE 38638
// begin nat := GetNation ( i ) ;
38457: LD_ADDR_VAR 0 7
38461: PUSH
38462: LD_VAR 0 4
38466: PPUSH
38467: CALL_OW 248
38471: ST_TO_ADDR
// weapon := 0 ;
38472: LD_ADDR_VAR 0 8
38476: PUSH
38477: LD_INT 0
38479: ST_TO_ADDR
// if not nat then
38480: LD_VAR 0 7
38484: NOT
38485: IFFALSE 38489
// continue ;
38487: GO 38454
// for j in list [ nat ] do
38489: LD_ADDR_VAR 0 5
38493: PUSH
38494: LD_VAR 0 10
38498: PUSH
38499: LD_VAR 0 7
38503: ARRAY
38504: PUSH
38505: FOR_IN
38506: IFFALSE 38547
// if GetBWeapon ( i ) = j [ 1 ] then
38508: LD_VAR 0 4
38512: PPUSH
38513: CALL_OW 269
38517: PUSH
38518: LD_VAR 0 5
38522: PUSH
38523: LD_INT 1
38525: ARRAY
38526: EQUAL
38527: IFFALSE 38545
// begin weapon := j [ 2 ] ;
38529: LD_ADDR_VAR 0 8
38533: PUSH
38534: LD_VAR 0 5
38538: PUSH
38539: LD_INT 2
38541: ARRAY
38542: ST_TO_ADDR
// break ;
38543: GO 38547
// end ;
38545: GO 38505
38547: POP
38548: POP
// if not weapon then
38549: LD_VAR 0 8
38553: NOT
38554: IFFALSE 38558
// continue ;
38556: GO 38454
// for k in factories do
38558: LD_ADDR_VAR 0 6
38562: PUSH
38563: LD_VAR 0 2
38567: PUSH
38568: FOR_IN
38569: IFFALSE 38634
// begin weapons := AvailableWeaponList ( k ) ;
38571: LD_ADDR_VAR 0 9
38575: PUSH
38576: LD_VAR 0 6
38580: PPUSH
38581: CALL_OW 478
38585: ST_TO_ADDR
// if not weapons then
38586: LD_VAR 0 9
38590: NOT
38591: IFFALSE 38595
// continue ;
38593: GO 38568
// if weapon in weapons then
38595: LD_VAR 0 8
38599: PUSH
38600: LD_VAR 0 9
38604: IN
38605: IFFALSE 38632
// begin result := [ i , weapon ] ;
38607: LD_ADDR_VAR 0 3
38611: PUSH
38612: LD_VAR 0 4
38616: PUSH
38617: LD_VAR 0 8
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: ST_TO_ADDR
// exit ;
38626: POP
38627: POP
38628: POP
38629: POP
38630: GO 38640
// end ; end ;
38632: GO 38568
38634: POP
38635: POP
// end ;
38636: GO 38454
38638: POP
38639: POP
// end ;
38640: LD_VAR 0 3
38644: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38645: LD_INT 0
38647: PPUSH
// if not side or side > 8 then
38648: LD_VAR 0 3
38652: NOT
38653: PUSH
38654: LD_VAR 0 3
38658: PUSH
38659: LD_INT 8
38661: GREATER
38662: OR
38663: IFFALSE 38667
// exit ;
38665: GO 38726
// if not range then
38667: LD_VAR 0 4
38671: NOT
38672: IFFALSE 38683
// range := - 12 ;
38674: LD_ADDR_VAR 0 4
38678: PUSH
38679: LD_INT 12
38681: NEG
38682: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38683: LD_VAR 0 1
38687: PPUSH
38688: LD_VAR 0 2
38692: PPUSH
38693: LD_VAR 0 3
38697: PPUSH
38698: LD_VAR 0 4
38702: PPUSH
38703: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38707: LD_VAR 0 1
38711: PPUSH
38712: LD_VAR 0 2
38716: PPUSH
38717: LD_VAR 0 3
38721: PPUSH
38722: CALL_OW 331
// end ;
38726: LD_VAR 0 5
38730: RET
// export function Video ( mode ) ; begin
38731: LD_INT 0
38733: PPUSH
// ingame_video = mode ;
38734: LD_ADDR_OWVAR 52
38738: PUSH
38739: LD_VAR 0 1
38743: ST_TO_ADDR
// interface_hidden = mode ;
38744: LD_ADDR_OWVAR 54
38748: PUSH
38749: LD_VAR 0 1
38753: ST_TO_ADDR
// end ;
38754: LD_VAR 0 2
38758: RET
// export function Join ( array , element ) ; begin
38759: LD_INT 0
38761: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38762: LD_ADDR_VAR 0 3
38766: PUSH
38767: LD_VAR 0 1
38771: PPUSH
38772: LD_VAR 0 1
38776: PUSH
38777: LD_INT 1
38779: PLUS
38780: PPUSH
38781: LD_VAR 0 2
38785: PPUSH
38786: CALL_OW 1
38790: ST_TO_ADDR
// end ;
38791: LD_VAR 0 3
38795: RET
// export function JoinUnion ( array , element ) ; begin
38796: LD_INT 0
38798: PPUSH
// result := array union element ;
38799: LD_ADDR_VAR 0 3
38803: PUSH
38804: LD_VAR 0 1
38808: PUSH
38809: LD_VAR 0 2
38813: UNION
38814: ST_TO_ADDR
// end ;
38815: LD_VAR 0 3
38819: RET
// export function GetBehemoths ( side ) ; begin
38820: LD_INT 0
38822: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
38823: LD_ADDR_VAR 0 2
38827: PUSH
38828: LD_INT 22
38830: PUSH
38831: LD_VAR 0 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 31
38842: PUSH
38843: LD_INT 25
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PPUSH
38854: CALL_OW 69
38858: ST_TO_ADDR
// end ;
38859: LD_VAR 0 2
38863: RET
// export function Shuffle ( array ) ; var i , index ; begin
38864: LD_INT 0
38866: PPUSH
38867: PPUSH
38868: PPUSH
// result := [ ] ;
38869: LD_ADDR_VAR 0 2
38873: PUSH
38874: EMPTY
38875: ST_TO_ADDR
// if not array then
38876: LD_VAR 0 1
38880: NOT
38881: IFFALSE 38885
// exit ;
38883: GO 38984
// Randomize ;
38885: CALL_OW 10
// for i = array downto 1 do
38889: LD_ADDR_VAR 0 3
38893: PUSH
38894: DOUBLE
38895: LD_VAR 0 1
38899: INC
38900: ST_TO_ADDR
38901: LD_INT 1
38903: PUSH
38904: FOR_DOWNTO
38905: IFFALSE 38982
// begin index := rand ( 1 , array ) ;
38907: LD_ADDR_VAR 0 4
38911: PUSH
38912: LD_INT 1
38914: PPUSH
38915: LD_VAR 0 1
38919: PPUSH
38920: CALL_OW 12
38924: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38925: LD_ADDR_VAR 0 2
38929: PUSH
38930: LD_VAR 0 2
38934: PPUSH
38935: LD_VAR 0 2
38939: PUSH
38940: LD_INT 1
38942: PLUS
38943: PPUSH
38944: LD_VAR 0 1
38948: PUSH
38949: LD_VAR 0 4
38953: ARRAY
38954: PPUSH
38955: CALL_OW 2
38959: ST_TO_ADDR
// array := Delete ( array , index ) ;
38960: LD_ADDR_VAR 0 1
38964: PUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: LD_VAR 0 4
38974: PPUSH
38975: CALL_OW 3
38979: ST_TO_ADDR
// end ;
38980: GO 38904
38982: POP
38983: POP
// end ;
38984: LD_VAR 0 2
38988: RET
// export function GetBaseMaterials ( base ) ; begin
38989: LD_INT 0
38991: PPUSH
// result := [ 0 , 0 , 0 ] ;
38992: LD_ADDR_VAR 0 2
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: ST_TO_ADDR
// if not base then
39011: LD_VAR 0 1
39015: NOT
39016: IFFALSE 39020
// exit ;
39018: GO 39069
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39020: LD_ADDR_VAR 0 2
39024: PUSH
39025: LD_VAR 0 1
39029: PPUSH
39030: LD_INT 1
39032: PPUSH
39033: CALL_OW 275
39037: PUSH
39038: LD_VAR 0 1
39042: PPUSH
39043: LD_INT 2
39045: PPUSH
39046: CALL_OW 275
39050: PUSH
39051: LD_VAR 0 1
39055: PPUSH
39056: LD_INT 3
39058: PPUSH
39059: CALL_OW 275
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: ST_TO_ADDR
// end ;
39069: LD_VAR 0 2
39073: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39074: LD_INT 0
39076: PPUSH
39077: PPUSH
// result := array ;
39078: LD_ADDR_VAR 0 3
39082: PUSH
39083: LD_VAR 0 1
39087: ST_TO_ADDR
// if size > 0 then
39088: LD_VAR 0 2
39092: PUSH
39093: LD_INT 0
39095: GREATER
39096: IFFALSE 39142
// for i := array downto size do
39098: LD_ADDR_VAR 0 4
39102: PUSH
39103: DOUBLE
39104: LD_VAR 0 1
39108: INC
39109: ST_TO_ADDR
39110: LD_VAR 0 2
39114: PUSH
39115: FOR_DOWNTO
39116: IFFALSE 39140
// result := Delete ( result , result ) ;
39118: LD_ADDR_VAR 0 3
39122: PUSH
39123: LD_VAR 0 3
39127: PPUSH
39128: LD_VAR 0 3
39132: PPUSH
39133: CALL_OW 3
39137: ST_TO_ADDR
39138: GO 39115
39140: POP
39141: POP
// end ;
39142: LD_VAR 0 3
39146: RET
// export function ComExit ( unit ) ; var tmp ; begin
39147: LD_INT 0
39149: PPUSH
39150: PPUSH
// if not IsInUnit ( unit ) then
39151: LD_VAR 0 1
39155: PPUSH
39156: CALL_OW 310
39160: NOT
39161: IFFALSE 39165
// exit ;
39163: GO 39225
// tmp := IsInUnit ( unit ) ;
39165: LD_ADDR_VAR 0 3
39169: PUSH
39170: LD_VAR 0 1
39174: PPUSH
39175: CALL_OW 310
39179: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39180: LD_VAR 0 3
39184: PPUSH
39185: CALL_OW 247
39189: PUSH
39190: LD_INT 2
39192: EQUAL
39193: IFFALSE 39206
// ComExitVehicle ( unit ) else
39195: LD_VAR 0 1
39199: PPUSH
39200: CALL_OW 121
39204: GO 39215
// ComExitBuilding ( unit ) ;
39206: LD_VAR 0 1
39210: PPUSH
39211: CALL_OW 122
// result := tmp ;
39215: LD_ADDR_VAR 0 2
39219: PUSH
39220: LD_VAR 0 3
39224: ST_TO_ADDR
// end ;
39225: LD_VAR 0 2
39229: RET
// export function ResetHc ; begin
39230: LD_INT 0
39232: PPUSH
// InitHc ;
39233: CALL_OW 19
// hc_importance := 0 ;
39237: LD_ADDR_OWVAR 32
39241: PUSH
39242: LD_INT 0
39244: ST_TO_ADDR
// end ; end_of_file
39245: LD_VAR 0 1
39249: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
39250: LD_INT 0
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
39256: LD_VAR 0 1
39260: PPUSH
39261: CALL_OW 264
39265: PUSH
39266: LD_EXP 13
39270: EQUAL
39271: IFFALSE 39343
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39273: LD_INT 68
39275: PPUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL_OW 255
39285: PPUSH
39286: CALL_OW 321
39290: PUSH
39291: LD_INT 2
39293: EQUAL
39294: IFFALSE 39306
// eff := 70 else
39296: LD_ADDR_VAR 0 4
39300: PUSH
39301: LD_INT 70
39303: ST_TO_ADDR
39304: GO 39314
// eff := 30 ;
39306: LD_ADDR_VAR 0 4
39310: PUSH
39311: LD_INT 30
39313: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
39314: LD_VAR 0 1
39318: PPUSH
39319: CALL_OW 250
39323: PPUSH
39324: LD_VAR 0 1
39328: PPUSH
39329: CALL_OW 251
39333: PPUSH
39334: LD_VAR 0 4
39338: PPUSH
39339: CALL_OW 495
// end ; end ;
39343: LD_VAR 0 2
39347: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
39348: LD_INT 0
39350: PPUSH
// end ;
39351: LD_VAR 0 4
39355: RET
// export function SOS_Command ( cmd ) ; begin
39356: LD_INT 0
39358: PPUSH
// end ;
39359: LD_VAR 0 2
39363: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
39364: LD_VAR 0 1
39368: PUSH
39369: LD_INT 254
39371: EQUAL
39372: PUSH
39373: LD_VAR 0 2
39377: PPUSH
39378: CALL_OW 264
39382: PUSH
39383: LD_EXP 11
39387: EQUAL
39388: AND
39389: PUSH
39390: LD_VAR 0 3
39394: PPUSH
39395: CALL_OW 263
39399: PUSH
39400: LD_INT 3
39402: EQUAL
39403: AND
39404: IFFALSE 39420
// HackDestroyVehicle ( unit , selectedUnit ) ;
39406: LD_VAR 0 2
39410: PPUSH
39411: LD_VAR 0 3
39415: PPUSH
39416: CALL 40927 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
39420: LD_VAR 0 1
39424: PUSH
39425: LD_INT 255
39427: EQUAL
39428: PUSH
39429: LD_VAR 0 2
39433: PPUSH
39434: CALL_OW 264
39438: PUSH
39439: LD_INT 14
39441: PUSH
39442: LD_INT 53
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: IN
39449: AND
39450: PUSH
39451: LD_VAR 0 4
39455: PPUSH
39456: LD_VAR 0 5
39460: PPUSH
39461: CALL_OW 488
39465: AND
39466: IFFALSE 39490
// CutTreeXYR ( unit , x , y , 12 ) ;
39468: LD_VAR 0 2
39472: PPUSH
39473: LD_VAR 0 4
39477: PPUSH
39478: LD_VAR 0 5
39482: PPUSH
39483: LD_INT 12
39485: PPUSH
39486: CALL 39493 0 4
// end ;
39490: PPOPN 5
39492: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
39493: LD_INT 0
39495: PPUSH
39496: PPUSH
39497: PPUSH
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
39504: LD_VAR 0 1
39508: NOT
39509: PUSH
39510: LD_VAR 0 2
39514: PPUSH
39515: LD_VAR 0 3
39519: PPUSH
39520: CALL_OW 488
39524: NOT
39525: OR
39526: PUSH
39527: LD_VAR 0 4
39531: NOT
39532: OR
39533: IFFALSE 39537
// exit ;
39535: GO 39877
// list := [ ] ;
39537: LD_ADDR_VAR 0 13
39541: PUSH
39542: EMPTY
39543: ST_TO_ADDR
// if x - r < 0 then
39544: LD_VAR 0 2
39548: PUSH
39549: LD_VAR 0 4
39553: MINUS
39554: PUSH
39555: LD_INT 0
39557: LESS
39558: IFFALSE 39570
// min_x := 0 else
39560: LD_ADDR_VAR 0 7
39564: PUSH
39565: LD_INT 0
39567: ST_TO_ADDR
39568: GO 39586
// min_x := x - r ;
39570: LD_ADDR_VAR 0 7
39574: PUSH
39575: LD_VAR 0 2
39579: PUSH
39580: LD_VAR 0 4
39584: MINUS
39585: ST_TO_ADDR
// if y - r < 0 then
39586: LD_VAR 0 3
39590: PUSH
39591: LD_VAR 0 4
39595: MINUS
39596: PUSH
39597: LD_INT 0
39599: LESS
39600: IFFALSE 39612
// min_y := 0 else
39602: LD_ADDR_VAR 0 8
39606: PUSH
39607: LD_INT 0
39609: ST_TO_ADDR
39610: GO 39628
// min_y := y - r ;
39612: LD_ADDR_VAR 0 8
39616: PUSH
39617: LD_VAR 0 3
39621: PUSH
39622: LD_VAR 0 4
39626: MINUS
39627: ST_TO_ADDR
// max_x := x + r ;
39628: LD_ADDR_VAR 0 9
39632: PUSH
39633: LD_VAR 0 2
39637: PUSH
39638: LD_VAR 0 4
39642: PLUS
39643: ST_TO_ADDR
// max_y := y + r ;
39644: LD_ADDR_VAR 0 10
39648: PUSH
39649: LD_VAR 0 3
39653: PUSH
39654: LD_VAR 0 4
39658: PLUS
39659: ST_TO_ADDR
// for _x = min_x to max_x do
39660: LD_ADDR_VAR 0 11
39664: PUSH
39665: DOUBLE
39666: LD_VAR 0 7
39670: DEC
39671: ST_TO_ADDR
39672: LD_VAR 0 9
39676: PUSH
39677: FOR_TO
39678: IFFALSE 39795
// for _y = min_y to max_y do
39680: LD_ADDR_VAR 0 12
39684: PUSH
39685: DOUBLE
39686: LD_VAR 0 8
39690: DEC
39691: ST_TO_ADDR
39692: LD_VAR 0 10
39696: PUSH
39697: FOR_TO
39698: IFFALSE 39791
// begin if not ValidHex ( _x , _y ) then
39700: LD_VAR 0 11
39704: PPUSH
39705: LD_VAR 0 12
39709: PPUSH
39710: CALL_OW 488
39714: NOT
39715: IFFALSE 39719
// continue ;
39717: GO 39697
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39719: LD_VAR 0 11
39723: PPUSH
39724: LD_VAR 0 12
39728: PPUSH
39729: CALL_OW 351
39733: PUSH
39734: LD_VAR 0 11
39738: PPUSH
39739: LD_VAR 0 12
39743: PPUSH
39744: CALL_OW 554
39748: AND
39749: IFFALSE 39789
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39751: LD_ADDR_VAR 0 13
39755: PUSH
39756: LD_VAR 0 13
39760: PPUSH
39761: LD_VAR 0 13
39765: PUSH
39766: LD_INT 1
39768: PLUS
39769: PPUSH
39770: LD_VAR 0 11
39774: PUSH
39775: LD_VAR 0 12
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PPUSH
39784: CALL_OW 2
39788: ST_TO_ADDR
// end ;
39789: GO 39697
39791: POP
39792: POP
39793: GO 39677
39795: POP
39796: POP
// if not list then
39797: LD_VAR 0 13
39801: NOT
39802: IFFALSE 39806
// exit ;
39804: GO 39877
// for i in list do
39806: LD_ADDR_VAR 0 6
39810: PUSH
39811: LD_VAR 0 13
39815: PUSH
39816: FOR_IN
39817: IFFALSE 39875
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
39819: LD_VAR 0 1
39823: PPUSH
39824: LD_STRING M
39826: PUSH
39827: LD_VAR 0 6
39831: PUSH
39832: LD_INT 1
39834: ARRAY
39835: PUSH
39836: LD_VAR 0 6
39840: PUSH
39841: LD_INT 2
39843: ARRAY
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: PUSH
39866: EMPTY
39867: LIST
39868: PPUSH
39869: CALL_OW 447
39873: GO 39816
39875: POP
39876: POP
// end ;
39877: LD_VAR 0 5
39881: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
39882: LD_EXP 24
39886: NOT
39887: IFFALSE 39937
39889: GO 39891
39891: DISABLE
// begin initHack := true ;
39892: LD_ADDR_EXP 24
39896: PUSH
39897: LD_INT 1
39899: ST_TO_ADDR
// hackTanks := [ ] ;
39900: LD_ADDR_EXP 25
39904: PUSH
39905: EMPTY
39906: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39907: LD_ADDR_EXP 26
39911: PUSH
39912: EMPTY
39913: ST_TO_ADDR
// hackLimit := 3 ;
39914: LD_ADDR_EXP 27
39918: PUSH
39919: LD_INT 3
39921: ST_TO_ADDR
// hackDist := 12 ;
39922: LD_ADDR_EXP 28
39926: PUSH
39927: LD_INT 12
39929: ST_TO_ADDR
// hackCounter := [ ] ;
39930: LD_ADDR_EXP 29
39934: PUSH
39935: EMPTY
39936: ST_TO_ADDR
// end ;
39937: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39938: LD_EXP 24
39942: PUSH
39943: LD_INT 34
39945: PUSH
39946: LD_EXP 11
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PPUSH
39955: CALL_OW 69
39959: AND
39960: IFFALSE 40215
39962: GO 39964
39964: DISABLE
39965: LD_INT 0
39967: PPUSH
39968: PPUSH
// begin enable ;
39969: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39970: LD_ADDR_VAR 0 1
39974: PUSH
39975: LD_INT 34
39977: PUSH
39978: LD_EXP 11
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PPUSH
39987: CALL_OW 69
39991: PUSH
39992: FOR_IN
39993: IFFALSE 40213
// begin if not i in hackTanks then
39995: LD_VAR 0 1
39999: PUSH
40000: LD_EXP 25
40004: IN
40005: NOT
40006: IFFALSE 40089
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
40008: LD_ADDR_EXP 25
40012: PUSH
40013: LD_EXP 25
40017: PPUSH
40018: LD_EXP 25
40022: PUSH
40023: LD_INT 1
40025: PLUS
40026: PPUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 1
40036: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
40037: LD_ADDR_EXP 26
40041: PUSH
40042: LD_EXP 26
40046: PPUSH
40047: LD_EXP 26
40051: PUSH
40052: LD_INT 1
40054: PLUS
40055: PPUSH
40056: EMPTY
40057: PPUSH
40058: CALL_OW 1
40062: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
40063: LD_ADDR_EXP 29
40067: PUSH
40068: LD_EXP 29
40072: PPUSH
40073: LD_EXP 29
40077: PUSH
40078: LD_INT 1
40080: PLUS
40081: PPUSH
40082: EMPTY
40083: PPUSH
40084: CALL_OW 1
40088: ST_TO_ADDR
// end ; if not IsOk ( i ) then
40089: LD_VAR 0 1
40093: PPUSH
40094: CALL_OW 302
40098: NOT
40099: IFFALSE 40112
// begin HackUnlinkAll ( i ) ;
40101: LD_VAR 0 1
40105: PPUSH
40106: CALL 40218 0 1
// continue ;
40110: GO 39992
// end ; HackCheckCapturedStatus ( i ) ;
40112: LD_VAR 0 1
40116: PPUSH
40117: CALL 40661 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
40121: LD_ADDR_VAR 0 2
40125: PUSH
40126: LD_INT 81
40128: PUSH
40129: LD_VAR 0 1
40133: PPUSH
40134: CALL_OW 255
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 33
40145: PUSH
40146: LD_INT 3
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 91
40155: PUSH
40156: LD_VAR 0 1
40160: PUSH
40161: LD_EXP 28
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 50
40173: PUSH
40174: EMPTY
40175: LIST
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: PPUSH
40183: CALL_OW 69
40187: ST_TO_ADDR
// if not tmp then
40188: LD_VAR 0 2
40192: NOT
40193: IFFALSE 40197
// continue ;
40195: GO 39992
// HackLink ( i , tmp ) ;
40197: LD_VAR 0 1
40201: PPUSH
40202: LD_VAR 0 2
40206: PPUSH
40207: CALL 40354 0 2
// end ;
40211: GO 39992
40213: POP
40214: POP
// end ;
40215: PPOPN 2
40217: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
40218: LD_INT 0
40220: PPUSH
40221: PPUSH
40222: PPUSH
// if not hack in hackTanks then
40223: LD_VAR 0 1
40227: PUSH
40228: LD_EXP 25
40232: IN
40233: NOT
40234: IFFALSE 40238
// exit ;
40236: GO 40349
// index := GetElementIndex ( hackTanks , hack ) ;
40238: LD_ADDR_VAR 0 4
40242: PUSH
40243: LD_EXP 25
40247: PPUSH
40248: LD_VAR 0 1
40252: PPUSH
40253: CALL 7620 0 2
40257: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
40258: LD_EXP 26
40262: PUSH
40263: LD_VAR 0 4
40267: ARRAY
40268: IFFALSE 40349
// begin for i in hackTanksCaptured [ index ] do
40270: LD_ADDR_VAR 0 3
40274: PUSH
40275: LD_EXP 26
40279: PUSH
40280: LD_VAR 0 4
40284: ARRAY
40285: PUSH
40286: FOR_IN
40287: IFFALSE 40313
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
40289: LD_VAR 0 3
40293: PUSH
40294: LD_INT 1
40296: ARRAY
40297: PPUSH
40298: LD_VAR 0 3
40302: PUSH
40303: LD_INT 2
40305: ARRAY
40306: PPUSH
40307: CALL_OW 235
40311: GO 40286
40313: POP
40314: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
40315: LD_ADDR_EXP 26
40319: PUSH
40320: LD_EXP 26
40324: PPUSH
40325: LD_VAR 0 4
40329: PPUSH
40330: EMPTY
40331: PPUSH
40332: CALL_OW 1
40336: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
40337: LD_VAR 0 1
40341: PPUSH
40342: LD_INT 0
40344: PPUSH
40345: CALL_OW 505
// end ; end ;
40349: LD_VAR 0 2
40353: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
40354: LD_INT 0
40356: PPUSH
40357: PPUSH
40358: PPUSH
// if not hack in hackTanks or not vehicles then
40359: LD_VAR 0 1
40363: PUSH
40364: LD_EXP 25
40368: IN
40369: NOT
40370: PUSH
40371: LD_VAR 0 2
40375: NOT
40376: OR
40377: IFFALSE 40381
// exit ;
40379: GO 40656
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
40381: LD_ADDR_VAR 0 2
40385: PUSH
40386: LD_VAR 0 1
40390: PPUSH
40391: LD_VAR 0 2
40395: PPUSH
40396: LD_INT 1
40398: PPUSH
40399: LD_INT 1
40401: PPUSH
40402: CALL 8270 0 4
40406: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
40407: LD_ADDR_VAR 0 5
40411: PUSH
40412: LD_EXP 25
40416: PPUSH
40417: LD_VAR 0 1
40421: PPUSH
40422: CALL 7620 0 2
40426: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40427: LD_EXP 26
40431: PUSH
40432: LD_VAR 0 5
40436: ARRAY
40437: PUSH
40438: LD_EXP 27
40442: LESS
40443: IFFALSE 40632
// begin for i := 1 to vehicles do
40445: LD_ADDR_VAR 0 4
40449: PUSH
40450: DOUBLE
40451: LD_INT 1
40453: DEC
40454: ST_TO_ADDR
40455: LD_VAR 0 2
40459: PUSH
40460: FOR_TO
40461: IFFALSE 40630
// begin if hackTanksCaptured [ index ] = hackLimit then
40463: LD_EXP 26
40467: PUSH
40468: LD_VAR 0 5
40472: ARRAY
40473: PUSH
40474: LD_EXP 27
40478: EQUAL
40479: IFFALSE 40483
// break ;
40481: GO 40630
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40483: LD_ADDR_EXP 29
40487: PUSH
40488: LD_EXP 29
40492: PPUSH
40493: LD_VAR 0 5
40497: PPUSH
40498: LD_EXP 29
40502: PUSH
40503: LD_VAR 0 5
40507: ARRAY
40508: PUSH
40509: LD_INT 1
40511: PLUS
40512: PPUSH
40513: CALL_OW 1
40517: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40518: LD_ADDR_EXP 26
40522: PUSH
40523: LD_EXP 26
40527: PPUSH
40528: LD_VAR 0 5
40532: PUSH
40533: LD_EXP 26
40537: PUSH
40538: LD_VAR 0 5
40542: ARRAY
40543: PUSH
40544: LD_INT 1
40546: PLUS
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PPUSH
40552: LD_VAR 0 2
40556: PUSH
40557: LD_VAR 0 4
40561: ARRAY
40562: PUSH
40563: LD_VAR 0 2
40567: PUSH
40568: LD_VAR 0 4
40572: ARRAY
40573: PPUSH
40574: CALL_OW 255
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PPUSH
40583: CALL 7835 0 3
40587: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40588: LD_VAR 0 2
40592: PUSH
40593: LD_VAR 0 4
40597: ARRAY
40598: PPUSH
40599: LD_VAR 0 1
40603: PPUSH
40604: CALL_OW 255
40608: PPUSH
40609: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40613: LD_VAR 0 2
40617: PUSH
40618: LD_VAR 0 4
40622: ARRAY
40623: PPUSH
40624: CALL_OW 141
// end ;
40628: GO 40460
40630: POP
40631: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40632: LD_VAR 0 1
40636: PPUSH
40637: LD_EXP 26
40641: PUSH
40642: LD_VAR 0 5
40646: ARRAY
40647: PUSH
40648: LD_INT 0
40650: PLUS
40651: PPUSH
40652: CALL_OW 505
// end ;
40656: LD_VAR 0 3
40660: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40661: LD_INT 0
40663: PPUSH
40664: PPUSH
40665: PPUSH
40666: PPUSH
// if not hack in hackTanks then
40667: LD_VAR 0 1
40671: PUSH
40672: LD_EXP 25
40676: IN
40677: NOT
40678: IFFALSE 40682
// exit ;
40680: GO 40922
// index := GetElementIndex ( hackTanks , hack ) ;
40682: LD_ADDR_VAR 0 4
40686: PUSH
40687: LD_EXP 25
40691: PPUSH
40692: LD_VAR 0 1
40696: PPUSH
40697: CALL 7620 0 2
40701: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40702: LD_ADDR_VAR 0 3
40706: PUSH
40707: DOUBLE
40708: LD_EXP 26
40712: PUSH
40713: LD_VAR 0 4
40717: ARRAY
40718: INC
40719: ST_TO_ADDR
40720: LD_INT 1
40722: PUSH
40723: FOR_DOWNTO
40724: IFFALSE 40896
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40726: LD_ADDR_VAR 0 5
40730: PUSH
40731: LD_EXP 26
40735: PUSH
40736: LD_VAR 0 4
40740: ARRAY
40741: PUSH
40742: LD_VAR 0 3
40746: ARRAY
40747: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40748: LD_VAR 0 5
40752: PUSH
40753: LD_INT 1
40755: ARRAY
40756: PPUSH
40757: CALL_OW 302
40761: NOT
40762: PUSH
40763: LD_VAR 0 5
40767: PUSH
40768: LD_INT 1
40770: ARRAY
40771: PPUSH
40772: CALL_OW 255
40776: PUSH
40777: LD_VAR 0 1
40781: PPUSH
40782: CALL_OW 255
40786: NONEQUAL
40787: OR
40788: IFFALSE 40894
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40790: LD_VAR 0 5
40794: PUSH
40795: LD_INT 1
40797: ARRAY
40798: PPUSH
40799: CALL_OW 305
40803: PUSH
40804: LD_VAR 0 5
40808: PUSH
40809: LD_INT 1
40811: ARRAY
40812: PPUSH
40813: CALL_OW 255
40817: PUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: CALL_OW 255
40827: EQUAL
40828: AND
40829: IFFALSE 40853
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
40831: LD_VAR 0 5
40835: PUSH
40836: LD_INT 1
40838: ARRAY
40839: PPUSH
40840: LD_VAR 0 5
40844: PUSH
40845: LD_INT 2
40847: ARRAY
40848: PPUSH
40849: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
40853: LD_ADDR_EXP 26
40857: PUSH
40858: LD_EXP 26
40862: PPUSH
40863: LD_VAR 0 4
40867: PPUSH
40868: LD_EXP 26
40872: PUSH
40873: LD_VAR 0 4
40877: ARRAY
40878: PPUSH
40879: LD_VAR 0 3
40883: PPUSH
40884: CALL_OW 3
40888: PPUSH
40889: CALL_OW 1
40893: ST_TO_ADDR
// end ; end ;
40894: GO 40723
40896: POP
40897: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40898: LD_VAR 0 1
40902: PPUSH
40903: LD_EXP 26
40907: PUSH
40908: LD_VAR 0 4
40912: ARRAY
40913: PUSH
40914: LD_INT 0
40916: PLUS
40917: PPUSH
40918: CALL_OW 505
// end ;
40922: LD_VAR 0 2
40926: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
40927: LD_INT 0
40929: PPUSH
40930: PPUSH
40931: PPUSH
40932: PPUSH
// if not hack in hackTanks then
40933: LD_VAR 0 1
40937: PUSH
40938: LD_EXP 25
40942: IN
40943: NOT
40944: IFFALSE 40948
// exit ;
40946: GO 41033
// index := GetElementIndex ( hackTanks , hack ) ;
40948: LD_ADDR_VAR 0 5
40952: PUSH
40953: LD_EXP 25
40957: PPUSH
40958: LD_VAR 0 1
40962: PPUSH
40963: CALL 7620 0 2
40967: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
40968: LD_ADDR_VAR 0 4
40972: PUSH
40973: DOUBLE
40974: LD_INT 1
40976: DEC
40977: ST_TO_ADDR
40978: LD_EXP 26
40982: PUSH
40983: LD_VAR 0 5
40987: ARRAY
40988: PUSH
40989: FOR_TO
40990: IFFALSE 41031
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40992: LD_EXP 26
40996: PUSH
40997: LD_VAR 0 5
41001: ARRAY
41002: PUSH
41003: LD_VAR 0 4
41007: ARRAY
41008: PUSH
41009: LD_INT 1
41011: ARRAY
41012: PUSH
41013: LD_VAR 0 2
41017: EQUAL
41018: IFFALSE 41029
// KillUnit ( vehicle ) ;
41020: LD_VAR 0 2
41024: PPUSH
41025: CALL_OW 66
41029: GO 40989
41031: POP
41032: POP
// end ; end_of_file
41033: LD_VAR 0 3
41037: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
41038: LD_VAR 0 2
41042: PUSH
41043: LD_INT 100
41045: EQUAL
41046: IFFALSE 41995
// begin if not StreamModeActive then
41048: LD_EXP 30
41052: NOT
41053: IFFALSE 41063
// StreamModeActive := true ;
41055: LD_ADDR_EXP 30
41059: PUSH
41060: LD_INT 1
41062: ST_TO_ADDR
// if p3 = 0 then
41063: LD_VAR 0 3
41067: PUSH
41068: LD_INT 0
41070: EQUAL
41071: IFFALSE 41077
// InitStreamMode ;
41073: CALL 42228 0 0
// if p3 = 1 then
41077: LD_VAR 0 3
41081: PUSH
41082: LD_INT 1
41084: EQUAL
41085: IFFALSE 41095
// sRocket := true ;
41087: LD_ADDR_EXP 35
41091: PUSH
41092: LD_INT 1
41094: ST_TO_ADDR
// if p3 = 2 then
41095: LD_VAR 0 3
41099: PUSH
41100: LD_INT 2
41102: EQUAL
41103: IFFALSE 41113
// sSpeed := true ;
41105: LD_ADDR_EXP 34
41109: PUSH
41110: LD_INT 1
41112: ST_TO_ADDR
// if p3 = 3 then
41113: LD_VAR 0 3
41117: PUSH
41118: LD_INT 3
41120: EQUAL
41121: IFFALSE 41131
// sEngine := true ;
41123: LD_ADDR_EXP 36
41127: PUSH
41128: LD_INT 1
41130: ST_TO_ADDR
// if p3 = 4 then
41131: LD_VAR 0 3
41135: PUSH
41136: LD_INT 4
41138: EQUAL
41139: IFFALSE 41149
// sSpec := true ;
41141: LD_ADDR_EXP 33
41145: PUSH
41146: LD_INT 1
41148: ST_TO_ADDR
// if p3 = 5 then
41149: LD_VAR 0 3
41153: PUSH
41154: LD_INT 5
41156: EQUAL
41157: IFFALSE 41167
// sLevel := true ;
41159: LD_ADDR_EXP 37
41163: PUSH
41164: LD_INT 1
41166: ST_TO_ADDR
// if p3 = 6 then
41167: LD_VAR 0 3
41171: PUSH
41172: LD_INT 6
41174: EQUAL
41175: IFFALSE 41185
// sArmoury := true ;
41177: LD_ADDR_EXP 38
41181: PUSH
41182: LD_INT 1
41184: ST_TO_ADDR
// if p3 = 7 then
41185: LD_VAR 0 3
41189: PUSH
41190: LD_INT 7
41192: EQUAL
41193: IFFALSE 41203
// sRadar := true ;
41195: LD_ADDR_EXP 39
41199: PUSH
41200: LD_INT 1
41202: ST_TO_ADDR
// if p3 = 8 then
41203: LD_VAR 0 3
41207: PUSH
41208: LD_INT 8
41210: EQUAL
41211: IFFALSE 41221
// sBunker := true ;
41213: LD_ADDR_EXP 40
41217: PUSH
41218: LD_INT 1
41220: ST_TO_ADDR
// if p3 = 9 then
41221: LD_VAR 0 3
41225: PUSH
41226: LD_INT 9
41228: EQUAL
41229: IFFALSE 41239
// sHack := true ;
41231: LD_ADDR_EXP 41
41235: PUSH
41236: LD_INT 1
41238: ST_TO_ADDR
// if p3 = 10 then
41239: LD_VAR 0 3
41243: PUSH
41244: LD_INT 10
41246: EQUAL
41247: IFFALSE 41257
// sFire := true ;
41249: LD_ADDR_EXP 42
41253: PUSH
41254: LD_INT 1
41256: ST_TO_ADDR
// if p3 = 11 then
41257: LD_VAR 0 3
41261: PUSH
41262: LD_INT 11
41264: EQUAL
41265: IFFALSE 41275
// sRefresh := true ;
41267: LD_ADDR_EXP 43
41271: PUSH
41272: LD_INT 1
41274: ST_TO_ADDR
// if p3 = 12 then
41275: LD_VAR 0 3
41279: PUSH
41280: LD_INT 12
41282: EQUAL
41283: IFFALSE 41293
// sExp := true ;
41285: LD_ADDR_EXP 44
41289: PUSH
41290: LD_INT 1
41292: ST_TO_ADDR
// if p3 = 13 then
41293: LD_VAR 0 3
41297: PUSH
41298: LD_INT 13
41300: EQUAL
41301: IFFALSE 41311
// sDepot := true ;
41303: LD_ADDR_EXP 45
41307: PUSH
41308: LD_INT 1
41310: ST_TO_ADDR
// if p3 = 14 then
41311: LD_VAR 0 3
41315: PUSH
41316: LD_INT 14
41318: EQUAL
41319: IFFALSE 41329
// sFlag := true ;
41321: LD_ADDR_EXP 46
41325: PUSH
41326: LD_INT 1
41328: ST_TO_ADDR
// if p3 = 15 then
41329: LD_VAR 0 3
41333: PUSH
41334: LD_INT 15
41336: EQUAL
41337: IFFALSE 41347
// sKamikadze := true ;
41339: LD_ADDR_EXP 54
41343: PUSH
41344: LD_INT 1
41346: ST_TO_ADDR
// if p3 = 16 then
41347: LD_VAR 0 3
41351: PUSH
41352: LD_INT 16
41354: EQUAL
41355: IFFALSE 41365
// sTroll := true ;
41357: LD_ADDR_EXP 55
41361: PUSH
41362: LD_INT 1
41364: ST_TO_ADDR
// if p3 = 17 then
41365: LD_VAR 0 3
41369: PUSH
41370: LD_INT 17
41372: EQUAL
41373: IFFALSE 41383
// sSlow := true ;
41375: LD_ADDR_EXP 56
41379: PUSH
41380: LD_INT 1
41382: ST_TO_ADDR
// if p3 = 18 then
41383: LD_VAR 0 3
41387: PUSH
41388: LD_INT 18
41390: EQUAL
41391: IFFALSE 41401
// sLack := true ;
41393: LD_ADDR_EXP 57
41397: PUSH
41398: LD_INT 1
41400: ST_TO_ADDR
// if p3 = 19 then
41401: LD_VAR 0 3
41405: PUSH
41406: LD_INT 19
41408: EQUAL
41409: IFFALSE 41419
// sTank := true ;
41411: LD_ADDR_EXP 59
41415: PUSH
41416: LD_INT 1
41418: ST_TO_ADDR
// if p3 = 20 then
41419: LD_VAR 0 3
41423: PUSH
41424: LD_INT 20
41426: EQUAL
41427: IFFALSE 41437
// sRemote := true ;
41429: LD_ADDR_EXP 60
41433: PUSH
41434: LD_INT 1
41436: ST_TO_ADDR
// if p3 = 21 then
41437: LD_VAR 0 3
41441: PUSH
41442: LD_INT 21
41444: EQUAL
41445: IFFALSE 41455
// sPowell := true ;
41447: LD_ADDR_EXP 61
41451: PUSH
41452: LD_INT 1
41454: ST_TO_ADDR
// if p3 = 22 then
41455: LD_VAR 0 3
41459: PUSH
41460: LD_INT 22
41462: EQUAL
41463: IFFALSE 41473
// sTeleport := true ;
41465: LD_ADDR_EXP 64
41469: PUSH
41470: LD_INT 1
41472: ST_TO_ADDR
// if p3 = 23 then
41473: LD_VAR 0 3
41477: PUSH
41478: LD_INT 23
41480: EQUAL
41481: IFFALSE 41491
// sOilTower := true ;
41483: LD_ADDR_EXP 66
41487: PUSH
41488: LD_INT 1
41490: ST_TO_ADDR
// if p3 = 24 then
41491: LD_VAR 0 3
41495: PUSH
41496: LD_INT 24
41498: EQUAL
41499: IFFALSE 41509
// sShovel := true ;
41501: LD_ADDR_EXP 67
41505: PUSH
41506: LD_INT 1
41508: ST_TO_ADDR
// if p3 = 25 then
41509: LD_VAR 0 3
41513: PUSH
41514: LD_INT 25
41516: EQUAL
41517: IFFALSE 41527
// sSheik := true ;
41519: LD_ADDR_EXP 68
41523: PUSH
41524: LD_INT 1
41526: ST_TO_ADDR
// if p3 = 26 then
41527: LD_VAR 0 3
41531: PUSH
41532: LD_INT 26
41534: EQUAL
41535: IFFALSE 41545
// sEarthquake := true ;
41537: LD_ADDR_EXP 70
41541: PUSH
41542: LD_INT 1
41544: ST_TO_ADDR
// if p3 = 27 then
41545: LD_VAR 0 3
41549: PUSH
41550: LD_INT 27
41552: EQUAL
41553: IFFALSE 41563
// sAI := true ;
41555: LD_ADDR_EXP 71
41559: PUSH
41560: LD_INT 1
41562: ST_TO_ADDR
// if p3 = 28 then
41563: LD_VAR 0 3
41567: PUSH
41568: LD_INT 28
41570: EQUAL
41571: IFFALSE 41581
// sCargo := true ;
41573: LD_ADDR_EXP 74
41577: PUSH
41578: LD_INT 1
41580: ST_TO_ADDR
// if p3 = 29 then
41581: LD_VAR 0 3
41585: PUSH
41586: LD_INT 29
41588: EQUAL
41589: IFFALSE 41599
// sDLaser := true ;
41591: LD_ADDR_EXP 75
41595: PUSH
41596: LD_INT 1
41598: ST_TO_ADDR
// if p3 = 30 then
41599: LD_VAR 0 3
41603: PUSH
41604: LD_INT 30
41606: EQUAL
41607: IFFALSE 41617
// sExchange := true ;
41609: LD_ADDR_EXP 76
41613: PUSH
41614: LD_INT 1
41616: ST_TO_ADDR
// if p3 = 31 then
41617: LD_VAR 0 3
41621: PUSH
41622: LD_INT 31
41624: EQUAL
41625: IFFALSE 41635
// sFac := true ;
41627: LD_ADDR_EXP 77
41631: PUSH
41632: LD_INT 1
41634: ST_TO_ADDR
// if p3 = 32 then
41635: LD_VAR 0 3
41639: PUSH
41640: LD_INT 32
41642: EQUAL
41643: IFFALSE 41653
// sPower := true ;
41645: LD_ADDR_EXP 78
41649: PUSH
41650: LD_INT 1
41652: ST_TO_ADDR
// if p3 = 33 then
41653: LD_VAR 0 3
41657: PUSH
41658: LD_INT 33
41660: EQUAL
41661: IFFALSE 41671
// sRandom := true ;
41663: LD_ADDR_EXP 79
41667: PUSH
41668: LD_INT 1
41670: ST_TO_ADDR
// if p3 = 34 then
41671: LD_VAR 0 3
41675: PUSH
41676: LD_INT 34
41678: EQUAL
41679: IFFALSE 41689
// sShield := true ;
41681: LD_ADDR_EXP 80
41685: PUSH
41686: LD_INT 1
41688: ST_TO_ADDR
// if p3 = 35 then
41689: LD_VAR 0 3
41693: PUSH
41694: LD_INT 35
41696: EQUAL
41697: IFFALSE 41707
// sTime := true ;
41699: LD_ADDR_EXP 81
41703: PUSH
41704: LD_INT 1
41706: ST_TO_ADDR
// if p3 = 36 then
41707: LD_VAR 0 3
41711: PUSH
41712: LD_INT 36
41714: EQUAL
41715: IFFALSE 41725
// sTools := true ;
41717: LD_ADDR_EXP 82
41721: PUSH
41722: LD_INT 1
41724: ST_TO_ADDR
// if p3 = 101 then
41725: LD_VAR 0 3
41729: PUSH
41730: LD_INT 101
41732: EQUAL
41733: IFFALSE 41743
// sSold := true ;
41735: LD_ADDR_EXP 47
41739: PUSH
41740: LD_INT 1
41742: ST_TO_ADDR
// if p3 = 102 then
41743: LD_VAR 0 3
41747: PUSH
41748: LD_INT 102
41750: EQUAL
41751: IFFALSE 41761
// sDiff := true ;
41753: LD_ADDR_EXP 48
41757: PUSH
41758: LD_INT 1
41760: ST_TO_ADDR
// if p3 = 103 then
41761: LD_VAR 0 3
41765: PUSH
41766: LD_INT 103
41768: EQUAL
41769: IFFALSE 41779
// sFog := true ;
41771: LD_ADDR_EXP 51
41775: PUSH
41776: LD_INT 1
41778: ST_TO_ADDR
// if p3 = 104 then
41779: LD_VAR 0 3
41783: PUSH
41784: LD_INT 104
41786: EQUAL
41787: IFFALSE 41797
// sReset := true ;
41789: LD_ADDR_EXP 52
41793: PUSH
41794: LD_INT 1
41796: ST_TO_ADDR
// if p3 = 105 then
41797: LD_VAR 0 3
41801: PUSH
41802: LD_INT 105
41804: EQUAL
41805: IFFALSE 41815
// sSun := true ;
41807: LD_ADDR_EXP 53
41811: PUSH
41812: LD_INT 1
41814: ST_TO_ADDR
// if p3 = 106 then
41815: LD_VAR 0 3
41819: PUSH
41820: LD_INT 106
41822: EQUAL
41823: IFFALSE 41833
// sTiger := true ;
41825: LD_ADDR_EXP 49
41829: PUSH
41830: LD_INT 1
41832: ST_TO_ADDR
// if p3 = 107 then
41833: LD_VAR 0 3
41837: PUSH
41838: LD_INT 107
41840: EQUAL
41841: IFFALSE 41851
// sBomb := true ;
41843: LD_ADDR_EXP 50
41847: PUSH
41848: LD_INT 1
41850: ST_TO_ADDR
// if p3 = 108 then
41851: LD_VAR 0 3
41855: PUSH
41856: LD_INT 108
41858: EQUAL
41859: IFFALSE 41869
// sWound := true ;
41861: LD_ADDR_EXP 58
41865: PUSH
41866: LD_INT 1
41868: ST_TO_ADDR
// if p3 = 109 then
41869: LD_VAR 0 3
41873: PUSH
41874: LD_INT 109
41876: EQUAL
41877: IFFALSE 41887
// sBetray := true ;
41879: LD_ADDR_EXP 62
41883: PUSH
41884: LD_INT 1
41886: ST_TO_ADDR
// if p3 = 110 then
41887: LD_VAR 0 3
41891: PUSH
41892: LD_INT 110
41894: EQUAL
41895: IFFALSE 41905
// sContamin := true ;
41897: LD_ADDR_EXP 63
41901: PUSH
41902: LD_INT 1
41904: ST_TO_ADDR
// if p3 = 111 then
41905: LD_VAR 0 3
41909: PUSH
41910: LD_INT 111
41912: EQUAL
41913: IFFALSE 41923
// sOil := true ;
41915: LD_ADDR_EXP 65
41919: PUSH
41920: LD_INT 1
41922: ST_TO_ADDR
// if p3 = 112 then
41923: LD_VAR 0 3
41927: PUSH
41928: LD_INT 112
41930: EQUAL
41931: IFFALSE 41941
// sStu := true ;
41933: LD_ADDR_EXP 69
41937: PUSH
41938: LD_INT 1
41940: ST_TO_ADDR
// if p3 = 113 then
41941: LD_VAR 0 3
41945: PUSH
41946: LD_INT 113
41948: EQUAL
41949: IFFALSE 41959
// sBazooka := true ;
41951: LD_ADDR_EXP 72
41955: PUSH
41956: LD_INT 1
41958: ST_TO_ADDR
// if p3 = 114 then
41959: LD_VAR 0 3
41963: PUSH
41964: LD_INT 114
41966: EQUAL
41967: IFFALSE 41977
// sMortar := true ;
41969: LD_ADDR_EXP 73
41973: PUSH
41974: LD_INT 1
41976: ST_TO_ADDR
// if p3 = 115 then
41977: LD_VAR 0 3
41981: PUSH
41982: LD_INT 115
41984: EQUAL
41985: IFFALSE 41995
// sRanger := true ;
41987: LD_ADDR_EXP 83
41991: PUSH
41992: LD_INT 1
41994: ST_TO_ADDR
// end ; if p2 = 101 then
41995: LD_VAR 0 2
41999: PUSH
42000: LD_INT 101
42002: EQUAL
42003: IFFALSE 42206
// begin case p3 of 1 :
42005: LD_VAR 0 3
42009: PUSH
42010: LD_INT 1
42012: DOUBLE
42013: EQUAL
42014: IFTRUE 42018
42016: GO 42025
42018: POP
// hHackUnlimitedResources ; 2 :
42019: CALL 52300 0 0
42023: GO 42206
42025: LD_INT 2
42027: DOUBLE
42028: EQUAL
42029: IFTRUE 42033
42031: GO 42040
42033: POP
// hHackSetLevel10 ; 3 :
42034: CALL 52433 0 0
42038: GO 42206
42040: LD_INT 3
42042: DOUBLE
42043: EQUAL
42044: IFTRUE 42048
42046: GO 42055
42048: POP
// hHackSetLevel10YourUnits ; 4 :
42049: CALL 52518 0 0
42053: GO 42206
42055: LD_INT 4
42057: DOUBLE
42058: EQUAL
42059: IFTRUE 42063
42061: GO 42085
42063: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
42064: LD_VAR 0 4
42068: PPUSH
42069: LD_VAR 0 5
42073: PPUSH
42074: LD_VAR 0 6
42078: PPUSH
42079: CALL 52608 0 3
42083: GO 42206
42085: LD_INT 5
42087: DOUBLE
42088: EQUAL
42089: IFTRUE 42093
42091: GO 42100
42093: POP
// hHackSpawnVehicle ; 6 :
42094: CALL 52669 0 0
42098: GO 42206
42100: LD_INT 6
42102: DOUBLE
42103: EQUAL
42104: IFTRUE 42108
42106: GO 42115
42108: POP
// hHackInvincible ; 7 :
42109: CALL 53215 0 0
42113: GO 42206
42115: LD_INT 7
42117: DOUBLE
42118: EQUAL
42119: IFTRUE 42123
42121: GO 42130
42123: POP
// hHackInvisible ; 8 :
42124: CALL 53326 0 0
42128: GO 42206
42130: LD_INT 8
42132: DOUBLE
42133: EQUAL
42134: IFTRUE 42138
42136: GO 42145
42138: POP
// hHackChangeYourSide ; 9 :
42139: CALL 53383 0 0
42143: GO 42206
42145: LD_INT 9
42147: DOUBLE
42148: EQUAL
42149: IFTRUE 42153
42151: GO 42160
42153: POP
// hHackChangeUnitSide ; 10 :
42154: CALL 53425 0 0
42158: GO 42206
42160: LD_INT 10
42162: DOUBLE
42163: EQUAL
42164: IFTRUE 42168
42166: GO 42175
42168: POP
// hHackFog ; 11 :
42169: CALL 53526 0 0
42173: GO 42206
42175: LD_INT 11
42177: DOUBLE
42178: EQUAL
42179: IFTRUE 42183
42181: GO 42190
42183: POP
// hHackApeman ; 12 :
42184: CALL 53541 0 0
42188: GO 42206
42190: LD_INT 12
42192: DOUBLE
42193: EQUAL
42194: IFTRUE 42198
42196: GO 42205
42198: POP
// hHackBoom ; end ;
42199: CALL 53626 0 0
42203: GO 42206
42205: POP
// end ; end ;
42206: PPOPN 6
42208: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
42209: GO 42211
42211: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
42212: LD_STRING initStreamRollete();
42214: PPUSH
42215: CALL_OW 559
// InitStreamMode ;
42219: CALL 42228 0 0
// DefineStreamItems ( ) ;
42223: CALL 42668 0 0
// end ;
42227: END
// function InitStreamMode ; begin
42228: LD_INT 0
42230: PPUSH
// streamModeActive := false ;
42231: LD_ADDR_EXP 30
42235: PUSH
42236: LD_INT 0
42238: ST_TO_ADDR
// normalCounter := 36 ;
42239: LD_ADDR_EXP 31
42243: PUSH
42244: LD_INT 36
42246: ST_TO_ADDR
// hardcoreCounter := 16 ;
42247: LD_ADDR_EXP 32
42251: PUSH
42252: LD_INT 16
42254: ST_TO_ADDR
// sRocket := false ;
42255: LD_ADDR_EXP 35
42259: PUSH
42260: LD_INT 0
42262: ST_TO_ADDR
// sSpeed := false ;
42263: LD_ADDR_EXP 34
42267: PUSH
42268: LD_INT 0
42270: ST_TO_ADDR
// sEngine := false ;
42271: LD_ADDR_EXP 36
42275: PUSH
42276: LD_INT 0
42278: ST_TO_ADDR
// sSpec := false ;
42279: LD_ADDR_EXP 33
42283: PUSH
42284: LD_INT 0
42286: ST_TO_ADDR
// sLevel := false ;
42287: LD_ADDR_EXP 37
42291: PUSH
42292: LD_INT 0
42294: ST_TO_ADDR
// sArmoury := false ;
42295: LD_ADDR_EXP 38
42299: PUSH
42300: LD_INT 0
42302: ST_TO_ADDR
// sRadar := false ;
42303: LD_ADDR_EXP 39
42307: PUSH
42308: LD_INT 0
42310: ST_TO_ADDR
// sBunker := false ;
42311: LD_ADDR_EXP 40
42315: PUSH
42316: LD_INT 0
42318: ST_TO_ADDR
// sHack := false ;
42319: LD_ADDR_EXP 41
42323: PUSH
42324: LD_INT 0
42326: ST_TO_ADDR
// sFire := false ;
42327: LD_ADDR_EXP 42
42331: PUSH
42332: LD_INT 0
42334: ST_TO_ADDR
// sRefresh := false ;
42335: LD_ADDR_EXP 43
42339: PUSH
42340: LD_INT 0
42342: ST_TO_ADDR
// sExp := false ;
42343: LD_ADDR_EXP 44
42347: PUSH
42348: LD_INT 0
42350: ST_TO_ADDR
// sDepot := false ;
42351: LD_ADDR_EXP 45
42355: PUSH
42356: LD_INT 0
42358: ST_TO_ADDR
// sFlag := false ;
42359: LD_ADDR_EXP 46
42363: PUSH
42364: LD_INT 0
42366: ST_TO_ADDR
// sKamikadze := false ;
42367: LD_ADDR_EXP 54
42371: PUSH
42372: LD_INT 0
42374: ST_TO_ADDR
// sTroll := false ;
42375: LD_ADDR_EXP 55
42379: PUSH
42380: LD_INT 0
42382: ST_TO_ADDR
// sSlow := false ;
42383: LD_ADDR_EXP 56
42387: PUSH
42388: LD_INT 0
42390: ST_TO_ADDR
// sLack := false ;
42391: LD_ADDR_EXP 57
42395: PUSH
42396: LD_INT 0
42398: ST_TO_ADDR
// sTank := false ;
42399: LD_ADDR_EXP 59
42403: PUSH
42404: LD_INT 0
42406: ST_TO_ADDR
// sRemote := false ;
42407: LD_ADDR_EXP 60
42411: PUSH
42412: LD_INT 0
42414: ST_TO_ADDR
// sPowell := false ;
42415: LD_ADDR_EXP 61
42419: PUSH
42420: LD_INT 0
42422: ST_TO_ADDR
// sTeleport := false ;
42423: LD_ADDR_EXP 64
42427: PUSH
42428: LD_INT 0
42430: ST_TO_ADDR
// sOilTower := false ;
42431: LD_ADDR_EXP 66
42435: PUSH
42436: LD_INT 0
42438: ST_TO_ADDR
// sShovel := false ;
42439: LD_ADDR_EXP 67
42443: PUSH
42444: LD_INT 0
42446: ST_TO_ADDR
// sSheik := false ;
42447: LD_ADDR_EXP 68
42451: PUSH
42452: LD_INT 0
42454: ST_TO_ADDR
// sEarthquake := false ;
42455: LD_ADDR_EXP 70
42459: PUSH
42460: LD_INT 0
42462: ST_TO_ADDR
// sAI := false ;
42463: LD_ADDR_EXP 71
42467: PUSH
42468: LD_INT 0
42470: ST_TO_ADDR
// sCargo := false ;
42471: LD_ADDR_EXP 74
42475: PUSH
42476: LD_INT 0
42478: ST_TO_ADDR
// sDLaser := false ;
42479: LD_ADDR_EXP 75
42483: PUSH
42484: LD_INT 0
42486: ST_TO_ADDR
// sExchange := false ;
42487: LD_ADDR_EXP 76
42491: PUSH
42492: LD_INT 0
42494: ST_TO_ADDR
// sFac := false ;
42495: LD_ADDR_EXP 77
42499: PUSH
42500: LD_INT 0
42502: ST_TO_ADDR
// sPower := false ;
42503: LD_ADDR_EXP 78
42507: PUSH
42508: LD_INT 0
42510: ST_TO_ADDR
// sRandom := false ;
42511: LD_ADDR_EXP 79
42515: PUSH
42516: LD_INT 0
42518: ST_TO_ADDR
// sShield := false ;
42519: LD_ADDR_EXP 80
42523: PUSH
42524: LD_INT 0
42526: ST_TO_ADDR
// sTime := false ;
42527: LD_ADDR_EXP 81
42531: PUSH
42532: LD_INT 0
42534: ST_TO_ADDR
// sTools := false ;
42535: LD_ADDR_EXP 82
42539: PUSH
42540: LD_INT 0
42542: ST_TO_ADDR
// sSold := false ;
42543: LD_ADDR_EXP 47
42547: PUSH
42548: LD_INT 0
42550: ST_TO_ADDR
// sDiff := false ;
42551: LD_ADDR_EXP 48
42555: PUSH
42556: LD_INT 0
42558: ST_TO_ADDR
// sFog := false ;
42559: LD_ADDR_EXP 51
42563: PUSH
42564: LD_INT 0
42566: ST_TO_ADDR
// sReset := false ;
42567: LD_ADDR_EXP 52
42571: PUSH
42572: LD_INT 0
42574: ST_TO_ADDR
// sSun := false ;
42575: LD_ADDR_EXP 53
42579: PUSH
42580: LD_INT 0
42582: ST_TO_ADDR
// sTiger := false ;
42583: LD_ADDR_EXP 49
42587: PUSH
42588: LD_INT 0
42590: ST_TO_ADDR
// sBomb := false ;
42591: LD_ADDR_EXP 50
42595: PUSH
42596: LD_INT 0
42598: ST_TO_ADDR
// sWound := false ;
42599: LD_ADDR_EXP 58
42603: PUSH
42604: LD_INT 0
42606: ST_TO_ADDR
// sBetray := false ;
42607: LD_ADDR_EXP 62
42611: PUSH
42612: LD_INT 0
42614: ST_TO_ADDR
// sContamin := false ;
42615: LD_ADDR_EXP 63
42619: PUSH
42620: LD_INT 0
42622: ST_TO_ADDR
// sOil := false ;
42623: LD_ADDR_EXP 65
42627: PUSH
42628: LD_INT 0
42630: ST_TO_ADDR
// sStu := false ;
42631: LD_ADDR_EXP 69
42635: PUSH
42636: LD_INT 0
42638: ST_TO_ADDR
// sBazooka := false ;
42639: LD_ADDR_EXP 72
42643: PUSH
42644: LD_INT 0
42646: ST_TO_ADDR
// sMortar := false ;
42647: LD_ADDR_EXP 73
42651: PUSH
42652: LD_INT 0
42654: ST_TO_ADDR
// sRanger := false ;
42655: LD_ADDR_EXP 83
42659: PUSH
42660: LD_INT 0
42662: ST_TO_ADDR
// end ;
42663: LD_VAR 0 1
42667: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
42668: LD_INT 0
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
// result := [ ] ;
42675: LD_ADDR_VAR 0 1
42679: PUSH
42680: EMPTY
42681: ST_TO_ADDR
// if campaign_id = 1 then
42682: LD_OWVAR 69
42686: PUSH
42687: LD_INT 1
42689: EQUAL
42690: IFFALSE 45628
// begin case mission_number of 1 :
42692: LD_OWVAR 70
42696: PUSH
42697: LD_INT 1
42699: DOUBLE
42700: EQUAL
42701: IFTRUE 42705
42703: GO 42769
42705: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
42706: LD_ADDR_VAR 0 1
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: LD_INT 4
42716: PUSH
42717: LD_INT 11
42719: PUSH
42720: LD_INT 12
42722: PUSH
42723: LD_INT 15
42725: PUSH
42726: LD_INT 16
42728: PUSH
42729: LD_INT 22
42731: PUSH
42732: LD_INT 23
42734: PUSH
42735: LD_INT 26
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 101
42751: PUSH
42752: LD_INT 102
42754: PUSH
42755: LD_INT 106
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: ST_TO_ADDR
42767: GO 45626
42769: LD_INT 2
42771: DOUBLE
42772: EQUAL
42773: IFTRUE 42777
42775: GO 42849
42777: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
42778: LD_ADDR_VAR 0 1
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: LD_INT 4
42788: PUSH
42789: LD_INT 11
42791: PUSH
42792: LD_INT 12
42794: PUSH
42795: LD_INT 15
42797: PUSH
42798: LD_INT 16
42800: PUSH
42801: LD_INT 22
42803: PUSH
42804: LD_INT 23
42806: PUSH
42807: LD_INT 26
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 101
42823: PUSH
42824: LD_INT 102
42826: PUSH
42827: LD_INT 105
42829: PUSH
42830: LD_INT 106
42832: PUSH
42833: LD_INT 108
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: ST_TO_ADDR
42847: GO 45626
42849: LD_INT 3
42851: DOUBLE
42852: EQUAL
42853: IFTRUE 42857
42855: GO 42933
42857: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
42858: LD_ADDR_VAR 0 1
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: LD_INT 4
42868: PUSH
42869: LD_INT 5
42871: PUSH
42872: LD_INT 11
42874: PUSH
42875: LD_INT 12
42877: PUSH
42878: LD_INT 15
42880: PUSH
42881: LD_INT 16
42883: PUSH
42884: LD_INT 22
42886: PUSH
42887: LD_INT 26
42889: PUSH
42890: LD_INT 36
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 101
42907: PUSH
42908: LD_INT 102
42910: PUSH
42911: LD_INT 105
42913: PUSH
42914: LD_INT 106
42916: PUSH
42917: LD_INT 108
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: ST_TO_ADDR
42931: GO 45626
42933: LD_INT 4
42935: DOUBLE
42936: EQUAL
42937: IFTRUE 42941
42939: GO 43025
42941: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
42942: LD_ADDR_VAR 0 1
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: LD_INT 4
42952: PUSH
42953: LD_INT 5
42955: PUSH
42956: LD_INT 8
42958: PUSH
42959: LD_INT 11
42961: PUSH
42962: LD_INT 12
42964: PUSH
42965: LD_INT 15
42967: PUSH
42968: LD_INT 16
42970: PUSH
42971: LD_INT 22
42973: PUSH
42974: LD_INT 23
42976: PUSH
42977: LD_INT 26
42979: PUSH
42980: LD_INT 36
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 101
42999: PUSH
43000: LD_INT 102
43002: PUSH
43003: LD_INT 105
43005: PUSH
43006: LD_INT 106
43008: PUSH
43009: LD_INT 108
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: ST_TO_ADDR
43023: GO 45626
43025: LD_INT 5
43027: DOUBLE
43028: EQUAL
43029: IFTRUE 43033
43031: GO 43133
43033: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
43034: LD_ADDR_VAR 0 1
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: LD_INT 4
43044: PUSH
43045: LD_INT 5
43047: PUSH
43048: LD_INT 6
43050: PUSH
43051: LD_INT 8
43053: PUSH
43054: LD_INT 11
43056: PUSH
43057: LD_INT 12
43059: PUSH
43060: LD_INT 15
43062: PUSH
43063: LD_INT 16
43065: PUSH
43066: LD_INT 22
43068: PUSH
43069: LD_INT 23
43071: PUSH
43072: LD_INT 25
43074: PUSH
43075: LD_INT 26
43077: PUSH
43078: LD_INT 36
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 101
43099: PUSH
43100: LD_INT 102
43102: PUSH
43103: LD_INT 105
43105: PUSH
43106: LD_INT 106
43108: PUSH
43109: LD_INT 108
43111: PUSH
43112: LD_INT 109
43114: PUSH
43115: LD_INT 112
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: ST_TO_ADDR
43131: GO 45626
43133: LD_INT 6
43135: DOUBLE
43136: EQUAL
43137: IFTRUE 43141
43139: GO 43261
43141: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
43142: LD_ADDR_VAR 0 1
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: LD_INT 4
43152: PUSH
43153: LD_INT 5
43155: PUSH
43156: LD_INT 6
43158: PUSH
43159: LD_INT 8
43161: PUSH
43162: LD_INT 11
43164: PUSH
43165: LD_INT 12
43167: PUSH
43168: LD_INT 15
43170: PUSH
43171: LD_INT 16
43173: PUSH
43174: LD_INT 20
43176: PUSH
43177: LD_INT 21
43179: PUSH
43180: LD_INT 22
43182: PUSH
43183: LD_INT 23
43185: PUSH
43186: LD_INT 25
43188: PUSH
43189: LD_INT 26
43191: PUSH
43192: LD_INT 30
43194: PUSH
43195: LD_INT 31
43197: PUSH
43198: LD_INT 32
43200: PUSH
43201: LD_INT 36
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 101
43227: PUSH
43228: LD_INT 102
43230: PUSH
43231: LD_INT 105
43233: PUSH
43234: LD_INT 106
43236: PUSH
43237: LD_INT 108
43239: PUSH
43240: LD_INT 109
43242: PUSH
43243: LD_INT 112
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: ST_TO_ADDR
43259: GO 45626
43261: LD_INT 7
43263: DOUBLE
43264: EQUAL
43265: IFTRUE 43269
43267: GO 43369
43269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
43270: LD_ADDR_VAR 0 1
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: LD_INT 4
43280: PUSH
43281: LD_INT 5
43283: PUSH
43284: LD_INT 7
43286: PUSH
43287: LD_INT 11
43289: PUSH
43290: LD_INT 12
43292: PUSH
43293: LD_INT 15
43295: PUSH
43296: LD_INT 16
43298: PUSH
43299: LD_INT 20
43301: PUSH
43302: LD_INT 21
43304: PUSH
43305: LD_INT 22
43307: PUSH
43308: LD_INT 23
43310: PUSH
43311: LD_INT 25
43313: PUSH
43314: LD_INT 26
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 101
43335: PUSH
43336: LD_INT 102
43338: PUSH
43339: LD_INT 103
43341: PUSH
43342: LD_INT 105
43344: PUSH
43345: LD_INT 106
43347: PUSH
43348: LD_INT 108
43350: PUSH
43351: LD_INT 112
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: ST_TO_ADDR
43367: GO 45626
43369: LD_INT 8
43371: DOUBLE
43372: EQUAL
43373: IFTRUE 43377
43375: GO 43505
43377: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
43378: LD_ADDR_VAR 0 1
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: LD_INT 4
43388: PUSH
43389: LD_INT 5
43391: PUSH
43392: LD_INT 6
43394: PUSH
43395: LD_INT 7
43397: PUSH
43398: LD_INT 8
43400: PUSH
43401: LD_INT 11
43403: PUSH
43404: LD_INT 12
43406: PUSH
43407: LD_INT 15
43409: PUSH
43410: LD_INT 16
43412: PUSH
43413: LD_INT 20
43415: PUSH
43416: LD_INT 21
43418: PUSH
43419: LD_INT 22
43421: PUSH
43422: LD_INT 23
43424: PUSH
43425: LD_INT 25
43427: PUSH
43428: LD_INT 26
43430: PUSH
43431: LD_INT 30
43433: PUSH
43434: LD_INT 31
43436: PUSH
43437: LD_INT 32
43439: PUSH
43440: LD_INT 36
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 101
43467: PUSH
43468: LD_INT 102
43470: PUSH
43471: LD_INT 103
43473: PUSH
43474: LD_INT 105
43476: PUSH
43477: LD_INT 106
43479: PUSH
43480: LD_INT 108
43482: PUSH
43483: LD_INT 109
43485: PUSH
43486: LD_INT 112
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: ST_TO_ADDR
43503: GO 45626
43505: LD_INT 9
43507: DOUBLE
43508: EQUAL
43509: IFTRUE 43513
43511: GO 43649
43513: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
43514: LD_ADDR_VAR 0 1
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: LD_INT 4
43524: PUSH
43525: LD_INT 5
43527: PUSH
43528: LD_INT 6
43530: PUSH
43531: LD_INT 7
43533: PUSH
43534: LD_INT 8
43536: PUSH
43537: LD_INT 11
43539: PUSH
43540: LD_INT 12
43542: PUSH
43543: LD_INT 15
43545: PUSH
43546: LD_INT 16
43548: PUSH
43549: LD_INT 20
43551: PUSH
43552: LD_INT 21
43554: PUSH
43555: LD_INT 22
43557: PUSH
43558: LD_INT 23
43560: PUSH
43561: LD_INT 25
43563: PUSH
43564: LD_INT 26
43566: PUSH
43567: LD_INT 28
43569: PUSH
43570: LD_INT 30
43572: PUSH
43573: LD_INT 31
43575: PUSH
43576: LD_INT 32
43578: PUSH
43579: LD_INT 36
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 101
43607: PUSH
43608: LD_INT 102
43610: PUSH
43611: LD_INT 103
43613: PUSH
43614: LD_INT 105
43616: PUSH
43617: LD_INT 106
43619: PUSH
43620: LD_INT 108
43622: PUSH
43623: LD_INT 109
43625: PUSH
43626: LD_INT 112
43628: PUSH
43629: LD_INT 114
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: ST_TO_ADDR
43647: GO 45626
43649: LD_INT 10
43651: DOUBLE
43652: EQUAL
43653: IFTRUE 43657
43655: GO 43841
43657: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
43658: LD_ADDR_VAR 0 1
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: LD_INT 4
43668: PUSH
43669: LD_INT 5
43671: PUSH
43672: LD_INT 6
43674: PUSH
43675: LD_INT 7
43677: PUSH
43678: LD_INT 8
43680: PUSH
43681: LD_INT 9
43683: PUSH
43684: LD_INT 10
43686: PUSH
43687: LD_INT 11
43689: PUSH
43690: LD_INT 12
43692: PUSH
43693: LD_INT 13
43695: PUSH
43696: LD_INT 14
43698: PUSH
43699: LD_INT 15
43701: PUSH
43702: LD_INT 16
43704: PUSH
43705: LD_INT 17
43707: PUSH
43708: LD_INT 18
43710: PUSH
43711: LD_INT 19
43713: PUSH
43714: LD_INT 20
43716: PUSH
43717: LD_INT 21
43719: PUSH
43720: LD_INT 22
43722: PUSH
43723: LD_INT 23
43725: PUSH
43726: LD_INT 24
43728: PUSH
43729: LD_INT 25
43731: PUSH
43732: LD_INT 26
43734: PUSH
43735: LD_INT 28
43737: PUSH
43738: LD_INT 30
43740: PUSH
43741: LD_INT 31
43743: PUSH
43744: LD_INT 32
43746: PUSH
43747: LD_INT 36
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 101
43783: PUSH
43784: LD_INT 102
43786: PUSH
43787: LD_INT 103
43789: PUSH
43790: LD_INT 104
43792: PUSH
43793: LD_INT 105
43795: PUSH
43796: LD_INT 106
43798: PUSH
43799: LD_INT 107
43801: PUSH
43802: LD_INT 108
43804: PUSH
43805: LD_INT 109
43807: PUSH
43808: LD_INT 110
43810: PUSH
43811: LD_INT 111
43813: PUSH
43814: LD_INT 112
43816: PUSH
43817: LD_INT 114
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: ST_TO_ADDR
43839: GO 45626
43841: LD_INT 11
43843: DOUBLE
43844: EQUAL
43845: IFTRUE 43849
43847: GO 44041
43849: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
43850: LD_ADDR_VAR 0 1
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: LD_INT 4
43863: PUSH
43864: LD_INT 5
43866: PUSH
43867: LD_INT 6
43869: PUSH
43870: LD_INT 7
43872: PUSH
43873: LD_INT 8
43875: PUSH
43876: LD_INT 9
43878: PUSH
43879: LD_INT 10
43881: PUSH
43882: LD_INT 11
43884: PUSH
43885: LD_INT 12
43887: PUSH
43888: LD_INT 13
43890: PUSH
43891: LD_INT 14
43893: PUSH
43894: LD_INT 15
43896: PUSH
43897: LD_INT 16
43899: PUSH
43900: LD_INT 17
43902: PUSH
43903: LD_INT 18
43905: PUSH
43906: LD_INT 19
43908: PUSH
43909: LD_INT 20
43911: PUSH
43912: LD_INT 21
43914: PUSH
43915: LD_INT 22
43917: PUSH
43918: LD_INT 23
43920: PUSH
43921: LD_INT 24
43923: PUSH
43924: LD_INT 25
43926: PUSH
43927: LD_INT 26
43929: PUSH
43930: LD_INT 28
43932: PUSH
43933: LD_INT 30
43935: PUSH
43936: LD_INT 31
43938: PUSH
43939: LD_INT 32
43941: PUSH
43942: LD_INT 34
43944: PUSH
43945: LD_INT 36
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 101
43983: PUSH
43984: LD_INT 102
43986: PUSH
43987: LD_INT 103
43989: PUSH
43990: LD_INT 104
43992: PUSH
43993: LD_INT 105
43995: PUSH
43996: LD_INT 106
43998: PUSH
43999: LD_INT 107
44001: PUSH
44002: LD_INT 108
44004: PUSH
44005: LD_INT 109
44007: PUSH
44008: LD_INT 110
44010: PUSH
44011: LD_INT 111
44013: PUSH
44014: LD_INT 112
44016: PUSH
44017: LD_INT 114
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: ST_TO_ADDR
44039: GO 45626
44041: LD_INT 12
44043: DOUBLE
44044: EQUAL
44045: IFTRUE 44049
44047: GO 44257
44049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
44050: LD_ADDR_VAR 0 1
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: LD_INT 2
44060: PUSH
44061: LD_INT 3
44063: PUSH
44064: LD_INT 4
44066: PUSH
44067: LD_INT 5
44069: PUSH
44070: LD_INT 6
44072: PUSH
44073: LD_INT 7
44075: PUSH
44076: LD_INT 8
44078: PUSH
44079: LD_INT 9
44081: PUSH
44082: LD_INT 10
44084: PUSH
44085: LD_INT 11
44087: PUSH
44088: LD_INT 12
44090: PUSH
44091: LD_INT 13
44093: PUSH
44094: LD_INT 14
44096: PUSH
44097: LD_INT 15
44099: PUSH
44100: LD_INT 16
44102: PUSH
44103: LD_INT 17
44105: PUSH
44106: LD_INT 18
44108: PUSH
44109: LD_INT 19
44111: PUSH
44112: LD_INT 20
44114: PUSH
44115: LD_INT 21
44117: PUSH
44118: LD_INT 22
44120: PUSH
44121: LD_INT 23
44123: PUSH
44124: LD_INT 24
44126: PUSH
44127: LD_INT 25
44129: PUSH
44130: LD_INT 26
44132: PUSH
44133: LD_INT 27
44135: PUSH
44136: LD_INT 28
44138: PUSH
44139: LD_INT 30
44141: PUSH
44142: LD_INT 31
44144: PUSH
44145: LD_INT 32
44147: PUSH
44148: LD_INT 33
44150: PUSH
44151: LD_INT 34
44153: PUSH
44154: LD_INT 36
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 101
44195: PUSH
44196: LD_INT 102
44198: PUSH
44199: LD_INT 103
44201: PUSH
44202: LD_INT 104
44204: PUSH
44205: LD_INT 105
44207: PUSH
44208: LD_INT 106
44210: PUSH
44211: LD_INT 107
44213: PUSH
44214: LD_INT 108
44216: PUSH
44217: LD_INT 109
44219: PUSH
44220: LD_INT 110
44222: PUSH
44223: LD_INT 111
44225: PUSH
44226: LD_INT 112
44228: PUSH
44229: LD_INT 113
44231: PUSH
44232: LD_INT 114
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: ST_TO_ADDR
44255: GO 45626
44257: LD_INT 13
44259: DOUBLE
44260: EQUAL
44261: IFTRUE 44265
44263: GO 44461
44265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
44266: LD_ADDR_VAR 0 1
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: LD_INT 4
44282: PUSH
44283: LD_INT 5
44285: PUSH
44286: LD_INT 8
44288: PUSH
44289: LD_INT 9
44291: PUSH
44292: LD_INT 10
44294: PUSH
44295: LD_INT 11
44297: PUSH
44298: LD_INT 12
44300: PUSH
44301: LD_INT 14
44303: PUSH
44304: LD_INT 15
44306: PUSH
44307: LD_INT 16
44309: PUSH
44310: LD_INT 17
44312: PUSH
44313: LD_INT 18
44315: PUSH
44316: LD_INT 19
44318: PUSH
44319: LD_INT 20
44321: PUSH
44322: LD_INT 21
44324: PUSH
44325: LD_INT 22
44327: PUSH
44328: LD_INT 23
44330: PUSH
44331: LD_INT 24
44333: PUSH
44334: LD_INT 25
44336: PUSH
44337: LD_INT 26
44339: PUSH
44340: LD_INT 27
44342: PUSH
44343: LD_INT 28
44345: PUSH
44346: LD_INT 30
44348: PUSH
44349: LD_INT 31
44351: PUSH
44352: LD_INT 32
44354: PUSH
44355: LD_INT 33
44357: PUSH
44358: LD_INT 34
44360: PUSH
44361: LD_INT 36
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 101
44399: PUSH
44400: LD_INT 102
44402: PUSH
44403: LD_INT 103
44405: PUSH
44406: LD_INT 104
44408: PUSH
44409: LD_INT 105
44411: PUSH
44412: LD_INT 106
44414: PUSH
44415: LD_INT 107
44417: PUSH
44418: LD_INT 108
44420: PUSH
44421: LD_INT 109
44423: PUSH
44424: LD_INT 110
44426: PUSH
44427: LD_INT 111
44429: PUSH
44430: LD_INT 112
44432: PUSH
44433: LD_INT 113
44435: PUSH
44436: LD_INT 114
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: ST_TO_ADDR
44459: GO 45626
44461: LD_INT 14
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44469
44467: GO 44681
44469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
44470: LD_ADDR_VAR 0 1
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: LD_INT 4
44486: PUSH
44487: LD_INT 5
44489: PUSH
44490: LD_INT 6
44492: PUSH
44493: LD_INT 7
44495: PUSH
44496: LD_INT 8
44498: PUSH
44499: LD_INT 9
44501: PUSH
44502: LD_INT 10
44504: PUSH
44505: LD_INT 11
44507: PUSH
44508: LD_INT 12
44510: PUSH
44511: LD_INT 13
44513: PUSH
44514: LD_INT 14
44516: PUSH
44517: LD_INT 15
44519: PUSH
44520: LD_INT 16
44522: PUSH
44523: LD_INT 17
44525: PUSH
44526: LD_INT 18
44528: PUSH
44529: LD_INT 19
44531: PUSH
44532: LD_INT 20
44534: PUSH
44535: LD_INT 21
44537: PUSH
44538: LD_INT 22
44540: PUSH
44541: LD_INT 23
44543: PUSH
44544: LD_INT 24
44546: PUSH
44547: LD_INT 25
44549: PUSH
44550: LD_INT 26
44552: PUSH
44553: LD_INT 27
44555: PUSH
44556: LD_INT 28
44558: PUSH
44559: LD_INT 29
44561: PUSH
44562: LD_INT 30
44564: PUSH
44565: LD_INT 31
44567: PUSH
44568: LD_INT 32
44570: PUSH
44571: LD_INT 33
44573: PUSH
44574: LD_INT 34
44576: PUSH
44577: LD_INT 36
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 101
44619: PUSH
44620: LD_INT 102
44622: PUSH
44623: LD_INT 103
44625: PUSH
44626: LD_INT 104
44628: PUSH
44629: LD_INT 105
44631: PUSH
44632: LD_INT 106
44634: PUSH
44635: LD_INT 107
44637: PUSH
44638: LD_INT 108
44640: PUSH
44641: LD_INT 109
44643: PUSH
44644: LD_INT 110
44646: PUSH
44647: LD_INT 111
44649: PUSH
44650: LD_INT 112
44652: PUSH
44653: LD_INT 113
44655: PUSH
44656: LD_INT 114
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: ST_TO_ADDR
44679: GO 45626
44681: LD_INT 15
44683: DOUBLE
44684: EQUAL
44685: IFTRUE 44689
44687: GO 44901
44689: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
44690: LD_ADDR_VAR 0 1
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: LD_INT 3
44703: PUSH
44704: LD_INT 4
44706: PUSH
44707: LD_INT 5
44709: PUSH
44710: LD_INT 6
44712: PUSH
44713: LD_INT 7
44715: PUSH
44716: LD_INT 8
44718: PUSH
44719: LD_INT 9
44721: PUSH
44722: LD_INT 10
44724: PUSH
44725: LD_INT 11
44727: PUSH
44728: LD_INT 12
44730: PUSH
44731: LD_INT 13
44733: PUSH
44734: LD_INT 14
44736: PUSH
44737: LD_INT 15
44739: PUSH
44740: LD_INT 16
44742: PUSH
44743: LD_INT 17
44745: PUSH
44746: LD_INT 18
44748: PUSH
44749: LD_INT 19
44751: PUSH
44752: LD_INT 20
44754: PUSH
44755: LD_INT 21
44757: PUSH
44758: LD_INT 22
44760: PUSH
44761: LD_INT 23
44763: PUSH
44764: LD_INT 24
44766: PUSH
44767: LD_INT 25
44769: PUSH
44770: LD_INT 26
44772: PUSH
44773: LD_INT 27
44775: PUSH
44776: LD_INT 28
44778: PUSH
44779: LD_INT 29
44781: PUSH
44782: LD_INT 30
44784: PUSH
44785: LD_INT 31
44787: PUSH
44788: LD_INT 32
44790: PUSH
44791: LD_INT 33
44793: PUSH
44794: LD_INT 34
44796: PUSH
44797: LD_INT 36
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 101
44839: PUSH
44840: LD_INT 102
44842: PUSH
44843: LD_INT 103
44845: PUSH
44846: LD_INT 104
44848: PUSH
44849: LD_INT 105
44851: PUSH
44852: LD_INT 106
44854: PUSH
44855: LD_INT 107
44857: PUSH
44858: LD_INT 108
44860: PUSH
44861: LD_INT 109
44863: PUSH
44864: LD_INT 110
44866: PUSH
44867: LD_INT 111
44869: PUSH
44870: LD_INT 112
44872: PUSH
44873: LD_INT 113
44875: PUSH
44876: LD_INT 114
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: ST_TO_ADDR
44899: GO 45626
44901: LD_INT 16
44903: DOUBLE
44904: EQUAL
44905: IFTRUE 44909
44907: GO 45033
44909: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
44910: LD_ADDR_VAR 0 1
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 4
44920: PUSH
44921: LD_INT 5
44923: PUSH
44924: LD_INT 7
44926: PUSH
44927: LD_INT 11
44929: PUSH
44930: LD_INT 12
44932: PUSH
44933: LD_INT 15
44935: PUSH
44936: LD_INT 16
44938: PUSH
44939: LD_INT 20
44941: PUSH
44942: LD_INT 21
44944: PUSH
44945: LD_INT 22
44947: PUSH
44948: LD_INT 23
44950: PUSH
44951: LD_INT 25
44953: PUSH
44954: LD_INT 26
44956: PUSH
44957: LD_INT 30
44959: PUSH
44960: LD_INT 31
44962: PUSH
44963: LD_INT 32
44965: PUSH
44966: LD_INT 33
44968: PUSH
44969: LD_INT 34
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 101
44995: PUSH
44996: LD_INT 102
44998: PUSH
44999: LD_INT 103
45001: PUSH
45002: LD_INT 106
45004: PUSH
45005: LD_INT 108
45007: PUSH
45008: LD_INT 112
45010: PUSH
45011: LD_INT 113
45013: PUSH
45014: LD_INT 114
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: ST_TO_ADDR
45031: GO 45626
45033: LD_INT 17
45035: DOUBLE
45036: EQUAL
45037: IFTRUE 45041
45039: GO 45253
45041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
45042: LD_ADDR_VAR 0 1
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: LD_INT 3
45055: PUSH
45056: LD_INT 4
45058: PUSH
45059: LD_INT 5
45061: PUSH
45062: LD_INT 6
45064: PUSH
45065: LD_INT 7
45067: PUSH
45068: LD_INT 8
45070: PUSH
45071: LD_INT 9
45073: PUSH
45074: LD_INT 10
45076: PUSH
45077: LD_INT 11
45079: PUSH
45080: LD_INT 12
45082: PUSH
45083: LD_INT 13
45085: PUSH
45086: LD_INT 14
45088: PUSH
45089: LD_INT 15
45091: PUSH
45092: LD_INT 16
45094: PUSH
45095: LD_INT 17
45097: PUSH
45098: LD_INT 18
45100: PUSH
45101: LD_INT 19
45103: PUSH
45104: LD_INT 20
45106: PUSH
45107: LD_INT 21
45109: PUSH
45110: LD_INT 22
45112: PUSH
45113: LD_INT 23
45115: PUSH
45116: LD_INT 24
45118: PUSH
45119: LD_INT 25
45121: PUSH
45122: LD_INT 26
45124: PUSH
45125: LD_INT 27
45127: PUSH
45128: LD_INT 28
45130: PUSH
45131: LD_INT 29
45133: PUSH
45134: LD_INT 30
45136: PUSH
45137: LD_INT 31
45139: PUSH
45140: LD_INT 32
45142: PUSH
45143: LD_INT 33
45145: PUSH
45146: LD_INT 34
45148: PUSH
45149: LD_INT 36
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 101
45191: PUSH
45192: LD_INT 102
45194: PUSH
45195: LD_INT 103
45197: PUSH
45198: LD_INT 104
45200: PUSH
45201: LD_INT 105
45203: PUSH
45204: LD_INT 106
45206: PUSH
45207: LD_INT 107
45209: PUSH
45210: LD_INT 108
45212: PUSH
45213: LD_INT 109
45215: PUSH
45216: LD_INT 110
45218: PUSH
45219: LD_INT 111
45221: PUSH
45222: LD_INT 112
45224: PUSH
45225: LD_INT 113
45227: PUSH
45228: LD_INT 114
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: ST_TO_ADDR
45251: GO 45626
45253: LD_INT 18
45255: DOUBLE
45256: EQUAL
45257: IFTRUE 45261
45259: GO 45397
45261: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
45262: LD_ADDR_VAR 0 1
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 4
45272: PUSH
45273: LD_INT 5
45275: PUSH
45276: LD_INT 7
45278: PUSH
45279: LD_INT 11
45281: PUSH
45282: LD_INT 12
45284: PUSH
45285: LD_INT 15
45287: PUSH
45288: LD_INT 16
45290: PUSH
45291: LD_INT 20
45293: PUSH
45294: LD_INT 21
45296: PUSH
45297: LD_INT 22
45299: PUSH
45300: LD_INT 23
45302: PUSH
45303: LD_INT 25
45305: PUSH
45306: LD_INT 26
45308: PUSH
45309: LD_INT 30
45311: PUSH
45312: LD_INT 31
45314: PUSH
45315: LD_INT 32
45317: PUSH
45318: LD_INT 33
45320: PUSH
45321: LD_INT 34
45323: PUSH
45324: LD_INT 35
45326: PUSH
45327: LD_INT 36
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 101
45355: PUSH
45356: LD_INT 102
45358: PUSH
45359: LD_INT 103
45361: PUSH
45362: LD_INT 106
45364: PUSH
45365: LD_INT 108
45367: PUSH
45368: LD_INT 112
45370: PUSH
45371: LD_INT 113
45373: PUSH
45374: LD_INT 114
45376: PUSH
45377: LD_INT 115
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: ST_TO_ADDR
45395: GO 45626
45397: LD_INT 19
45399: DOUBLE
45400: EQUAL
45401: IFTRUE 45405
45403: GO 45625
45405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
45406: LD_ADDR_VAR 0 1
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: LD_INT 3
45419: PUSH
45420: LD_INT 4
45422: PUSH
45423: LD_INT 5
45425: PUSH
45426: LD_INT 6
45428: PUSH
45429: LD_INT 7
45431: PUSH
45432: LD_INT 8
45434: PUSH
45435: LD_INT 9
45437: PUSH
45438: LD_INT 10
45440: PUSH
45441: LD_INT 11
45443: PUSH
45444: LD_INT 12
45446: PUSH
45447: LD_INT 13
45449: PUSH
45450: LD_INT 14
45452: PUSH
45453: LD_INT 15
45455: PUSH
45456: LD_INT 16
45458: PUSH
45459: LD_INT 17
45461: PUSH
45462: LD_INT 18
45464: PUSH
45465: LD_INT 19
45467: PUSH
45468: LD_INT 20
45470: PUSH
45471: LD_INT 21
45473: PUSH
45474: LD_INT 22
45476: PUSH
45477: LD_INT 23
45479: PUSH
45480: LD_INT 24
45482: PUSH
45483: LD_INT 25
45485: PUSH
45486: LD_INT 26
45488: PUSH
45489: LD_INT 27
45491: PUSH
45492: LD_INT 28
45494: PUSH
45495: LD_INT 29
45497: PUSH
45498: LD_INT 30
45500: PUSH
45501: LD_INT 31
45503: PUSH
45504: LD_INT 32
45506: PUSH
45507: LD_INT 33
45509: PUSH
45510: LD_INT 34
45512: PUSH
45513: LD_INT 35
45515: PUSH
45516: LD_INT 36
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 101
45559: PUSH
45560: LD_INT 102
45562: PUSH
45563: LD_INT 103
45565: PUSH
45566: LD_INT 104
45568: PUSH
45569: LD_INT 105
45571: PUSH
45572: LD_INT 106
45574: PUSH
45575: LD_INT 107
45577: PUSH
45578: LD_INT 108
45580: PUSH
45581: LD_INT 109
45583: PUSH
45584: LD_INT 110
45586: PUSH
45587: LD_INT 111
45589: PUSH
45590: LD_INT 112
45592: PUSH
45593: LD_INT 113
45595: PUSH
45596: LD_INT 114
45598: PUSH
45599: LD_INT 115
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: ST_TO_ADDR
45623: GO 45626
45625: POP
// end else
45626: GO 45845
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
45628: LD_ADDR_VAR 0 1
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 3
45641: PUSH
45642: LD_INT 4
45644: PUSH
45645: LD_INT 5
45647: PUSH
45648: LD_INT 6
45650: PUSH
45651: LD_INT 7
45653: PUSH
45654: LD_INT 8
45656: PUSH
45657: LD_INT 9
45659: PUSH
45660: LD_INT 10
45662: PUSH
45663: LD_INT 11
45665: PUSH
45666: LD_INT 12
45668: PUSH
45669: LD_INT 13
45671: PUSH
45672: LD_INT 14
45674: PUSH
45675: LD_INT 15
45677: PUSH
45678: LD_INT 16
45680: PUSH
45681: LD_INT 17
45683: PUSH
45684: LD_INT 18
45686: PUSH
45687: LD_INT 19
45689: PUSH
45690: LD_INT 20
45692: PUSH
45693: LD_INT 21
45695: PUSH
45696: LD_INT 22
45698: PUSH
45699: LD_INT 23
45701: PUSH
45702: LD_INT 24
45704: PUSH
45705: LD_INT 25
45707: PUSH
45708: LD_INT 26
45710: PUSH
45711: LD_INT 27
45713: PUSH
45714: LD_INT 28
45716: PUSH
45717: LD_INT 29
45719: PUSH
45720: LD_INT 30
45722: PUSH
45723: LD_INT 31
45725: PUSH
45726: LD_INT 32
45728: PUSH
45729: LD_INT 33
45731: PUSH
45732: LD_INT 34
45734: PUSH
45735: LD_INT 35
45737: PUSH
45738: LD_INT 36
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 101
45781: PUSH
45782: LD_INT 102
45784: PUSH
45785: LD_INT 103
45787: PUSH
45788: LD_INT 104
45790: PUSH
45791: LD_INT 105
45793: PUSH
45794: LD_INT 106
45796: PUSH
45797: LD_INT 107
45799: PUSH
45800: LD_INT 108
45802: PUSH
45803: LD_INT 109
45805: PUSH
45806: LD_INT 110
45808: PUSH
45809: LD_INT 111
45811: PUSH
45812: LD_INT 112
45814: PUSH
45815: LD_INT 113
45817: PUSH
45818: LD_INT 114
45820: PUSH
45821: LD_INT 115
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: ST_TO_ADDR
// if result then
45845: LD_VAR 0 1
45849: IFFALSE 46138
// begin normal :=  ;
45851: LD_ADDR_VAR 0 3
45855: PUSH
45856: LD_STRING 
45858: ST_TO_ADDR
// hardcore :=  ;
45859: LD_ADDR_VAR 0 4
45863: PUSH
45864: LD_STRING 
45866: ST_TO_ADDR
// for i = 1 to normalCounter do
45867: LD_ADDR_VAR 0 5
45871: PUSH
45872: DOUBLE
45873: LD_INT 1
45875: DEC
45876: ST_TO_ADDR
45877: LD_EXP 31
45881: PUSH
45882: FOR_TO
45883: IFFALSE 45984
// begin tmp := 0 ;
45885: LD_ADDR_VAR 0 2
45889: PUSH
45890: LD_STRING 0
45892: ST_TO_ADDR
// if result [ 1 ] then
45893: LD_VAR 0 1
45897: PUSH
45898: LD_INT 1
45900: ARRAY
45901: IFFALSE 45966
// if result [ 1 ] [ 1 ] = i then
45903: LD_VAR 0 1
45907: PUSH
45908: LD_INT 1
45910: ARRAY
45911: PUSH
45912: LD_INT 1
45914: ARRAY
45915: PUSH
45916: LD_VAR 0 5
45920: EQUAL
45921: IFFALSE 45966
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
45923: LD_ADDR_VAR 0 1
45927: PUSH
45928: LD_VAR 0 1
45932: PPUSH
45933: LD_INT 1
45935: PPUSH
45936: LD_VAR 0 1
45940: PUSH
45941: LD_INT 1
45943: ARRAY
45944: PPUSH
45945: LD_INT 1
45947: PPUSH
45948: CALL_OW 3
45952: PPUSH
45953: CALL_OW 1
45957: ST_TO_ADDR
// tmp := 1 ;
45958: LD_ADDR_VAR 0 2
45962: PUSH
45963: LD_STRING 1
45965: ST_TO_ADDR
// end ; normal := normal & tmp ;
45966: LD_ADDR_VAR 0 3
45970: PUSH
45971: LD_VAR 0 3
45975: PUSH
45976: LD_VAR 0 2
45980: STR
45981: ST_TO_ADDR
// end ;
45982: GO 45882
45984: POP
45985: POP
// for i = 1 to hardcoreCounter do
45986: LD_ADDR_VAR 0 5
45990: PUSH
45991: DOUBLE
45992: LD_INT 1
45994: DEC
45995: ST_TO_ADDR
45996: LD_EXP 32
46000: PUSH
46001: FOR_TO
46002: IFFALSE 46107
// begin tmp := 0 ;
46004: LD_ADDR_VAR 0 2
46008: PUSH
46009: LD_STRING 0
46011: ST_TO_ADDR
// if result [ 2 ] then
46012: LD_VAR 0 1
46016: PUSH
46017: LD_INT 2
46019: ARRAY
46020: IFFALSE 46089
// if result [ 2 ] [ 1 ] = 100 + i then
46022: LD_VAR 0 1
46026: PUSH
46027: LD_INT 2
46029: ARRAY
46030: PUSH
46031: LD_INT 1
46033: ARRAY
46034: PUSH
46035: LD_INT 100
46037: PUSH
46038: LD_VAR 0 5
46042: PLUS
46043: EQUAL
46044: IFFALSE 46089
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
46046: LD_ADDR_VAR 0 1
46050: PUSH
46051: LD_VAR 0 1
46055: PPUSH
46056: LD_INT 2
46058: PPUSH
46059: LD_VAR 0 1
46063: PUSH
46064: LD_INT 2
46066: ARRAY
46067: PPUSH
46068: LD_INT 1
46070: PPUSH
46071: CALL_OW 3
46075: PPUSH
46076: CALL_OW 1
46080: ST_TO_ADDR
// tmp := 1 ;
46081: LD_ADDR_VAR 0 2
46085: PUSH
46086: LD_STRING 1
46088: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
46089: LD_ADDR_VAR 0 4
46093: PUSH
46094: LD_VAR 0 4
46098: PUSH
46099: LD_VAR 0 2
46103: STR
46104: ST_TO_ADDR
// end ;
46105: GO 46001
46107: POP
46108: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
46109: LD_STRING getStreamItemsFromMission("
46111: PUSH
46112: LD_VAR 0 3
46116: STR
46117: PUSH
46118: LD_STRING ","
46120: STR
46121: PUSH
46122: LD_VAR 0 4
46126: STR
46127: PUSH
46128: LD_STRING ")
46130: STR
46131: PPUSH
46132: CALL_OW 559
// end else
46136: GO 46145
// ToLua ( getStreamItemsFromMission("","") ) ;
46138: LD_STRING getStreamItemsFromMission("","")
46140: PPUSH
46141: CALL_OW 559
// end ;
46145: LD_VAR 0 1
46149: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
46150: LD_EXP 30
46154: PUSH
46155: LD_EXP 35
46159: AND
46160: IFFALSE 46284
46162: GO 46164
46164: DISABLE
46165: LD_INT 0
46167: PPUSH
46168: PPUSH
// begin enable ;
46169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
46170: LD_ADDR_VAR 0 2
46174: PUSH
46175: LD_INT 22
46177: PUSH
46178: LD_OWVAR 2
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 34
46192: PUSH
46193: LD_INT 7
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 34
46202: PUSH
46203: LD_INT 45
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 34
46212: PUSH
46213: LD_INT 28
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 34
46222: PUSH
46223: LD_INT 47
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PPUSH
46241: CALL_OW 69
46245: ST_TO_ADDR
// if not tmp then
46246: LD_VAR 0 2
46250: NOT
46251: IFFALSE 46255
// exit ;
46253: GO 46284
// for i in tmp do
46255: LD_ADDR_VAR 0 1
46259: PUSH
46260: LD_VAR 0 2
46264: PUSH
46265: FOR_IN
46266: IFFALSE 46282
// begin SetLives ( i , 0 ) ;
46268: LD_VAR 0 1
46272: PPUSH
46273: LD_INT 0
46275: PPUSH
46276: CALL_OW 234
// end ;
46280: GO 46265
46282: POP
46283: POP
// end ;
46284: PPOPN 2
46286: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
46287: LD_EXP 30
46291: PUSH
46292: LD_EXP 36
46296: AND
46297: IFFALSE 46381
46299: GO 46301
46301: DISABLE
46302: LD_INT 0
46304: PPUSH
46305: PPUSH
// begin enable ;
46306: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
46307: LD_ADDR_VAR 0 2
46311: PUSH
46312: LD_INT 22
46314: PUSH
46315: LD_OWVAR 2
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 32
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PPUSH
46338: CALL_OW 69
46342: ST_TO_ADDR
// if not tmp then
46343: LD_VAR 0 2
46347: NOT
46348: IFFALSE 46352
// exit ;
46350: GO 46381
// for i in tmp do
46352: LD_ADDR_VAR 0 1
46356: PUSH
46357: LD_VAR 0 2
46361: PUSH
46362: FOR_IN
46363: IFFALSE 46379
// begin SetLives ( i , 0 ) ;
46365: LD_VAR 0 1
46369: PPUSH
46370: LD_INT 0
46372: PPUSH
46373: CALL_OW 234
// end ;
46377: GO 46362
46379: POP
46380: POP
// end ;
46381: PPOPN 2
46383: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
46384: LD_EXP 30
46388: PUSH
46389: LD_EXP 33
46393: AND
46394: IFFALSE 46487
46396: GO 46398
46398: DISABLE
46399: LD_INT 0
46401: PPUSH
// begin enable ;
46402: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
46403: LD_ADDR_VAR 0 1
46407: PUSH
46408: LD_INT 22
46410: PUSH
46411: LD_OWVAR 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: LD_INT 25
46425: PUSH
46426: LD_INT 5
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 25
46435: PUSH
46436: LD_INT 9
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 25
46445: PUSH
46446: LD_INT 8
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PPUSH
46463: CALL_OW 69
46467: PUSH
46468: FOR_IN
46469: IFFALSE 46485
// begin SetClass ( i , 1 ) ;
46471: LD_VAR 0 1
46475: PPUSH
46476: LD_INT 1
46478: PPUSH
46479: CALL_OW 336
// end ;
46483: GO 46468
46485: POP
46486: POP
// end ;
46487: PPOPN 1
46489: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
46490: LD_EXP 30
46494: PUSH
46495: LD_EXP 34
46499: AND
46500: PUSH
46501: LD_OWVAR 65
46505: PUSH
46506: LD_INT 7
46508: LESS
46509: AND
46510: IFFALSE 46524
46512: GO 46514
46514: DISABLE
// begin enable ;
46515: ENABLE
// game_speed := 7 ;
46516: LD_ADDR_OWVAR 65
46520: PUSH
46521: LD_INT 7
46523: ST_TO_ADDR
// end ;
46524: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
46525: LD_EXP 30
46529: PUSH
46530: LD_EXP 37
46534: AND
46535: IFFALSE 46737
46537: GO 46539
46539: DISABLE
46540: LD_INT 0
46542: PPUSH
46543: PPUSH
46544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46545: LD_ADDR_VAR 0 3
46549: PUSH
46550: LD_INT 81
46552: PUSH
46553: LD_OWVAR 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 21
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PPUSH
46576: CALL_OW 69
46580: ST_TO_ADDR
// if not tmp then
46581: LD_VAR 0 3
46585: NOT
46586: IFFALSE 46590
// exit ;
46588: GO 46737
// if tmp > 5 then
46590: LD_VAR 0 3
46594: PUSH
46595: LD_INT 5
46597: GREATER
46598: IFFALSE 46610
// k := 5 else
46600: LD_ADDR_VAR 0 2
46604: PUSH
46605: LD_INT 5
46607: ST_TO_ADDR
46608: GO 46620
// k := tmp ;
46610: LD_ADDR_VAR 0 2
46614: PUSH
46615: LD_VAR 0 3
46619: ST_TO_ADDR
// for i := 1 to k do
46620: LD_ADDR_VAR 0 1
46624: PUSH
46625: DOUBLE
46626: LD_INT 1
46628: DEC
46629: ST_TO_ADDR
46630: LD_VAR 0 2
46634: PUSH
46635: FOR_TO
46636: IFFALSE 46735
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
46638: LD_VAR 0 3
46642: PUSH
46643: LD_VAR 0 1
46647: ARRAY
46648: PPUSH
46649: LD_VAR 0 1
46653: PUSH
46654: LD_INT 4
46656: MOD
46657: PUSH
46658: LD_INT 1
46660: PLUS
46661: PPUSH
46662: CALL_OW 259
46666: PUSH
46667: LD_INT 10
46669: LESS
46670: IFFALSE 46733
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
46672: LD_VAR 0 3
46676: PUSH
46677: LD_VAR 0 1
46681: ARRAY
46682: PPUSH
46683: LD_VAR 0 1
46687: PUSH
46688: LD_INT 4
46690: MOD
46691: PUSH
46692: LD_INT 1
46694: PLUS
46695: PPUSH
46696: LD_VAR 0 3
46700: PUSH
46701: LD_VAR 0 1
46705: ARRAY
46706: PPUSH
46707: LD_VAR 0 1
46711: PUSH
46712: LD_INT 4
46714: MOD
46715: PUSH
46716: LD_INT 1
46718: PLUS
46719: PPUSH
46720: CALL_OW 259
46724: PUSH
46725: LD_INT 1
46727: PLUS
46728: PPUSH
46729: CALL_OW 237
46733: GO 46635
46735: POP
46736: POP
// end ;
46737: PPOPN 3
46739: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
46740: LD_EXP 30
46744: PUSH
46745: LD_EXP 38
46749: AND
46750: IFFALSE 46770
46752: GO 46754
46754: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
46755: LD_INT 4
46757: PPUSH
46758: LD_OWVAR 2
46762: PPUSH
46763: LD_INT 0
46765: PPUSH
46766: CALL_OW 324
46770: END
// every 0 0$1 trigger StreamModeActive and sShovel do
46771: LD_EXP 30
46775: PUSH
46776: LD_EXP 67
46780: AND
46781: IFFALSE 46801
46783: GO 46785
46785: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
46786: LD_INT 19
46788: PPUSH
46789: LD_OWVAR 2
46793: PPUSH
46794: LD_INT 0
46796: PPUSH
46797: CALL_OW 324
46801: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
46802: LD_EXP 30
46806: PUSH
46807: LD_EXP 39
46811: AND
46812: IFFALSE 46914
46814: GO 46816
46816: DISABLE
46817: LD_INT 0
46819: PPUSH
46820: PPUSH
// begin enable ;
46821: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
46822: LD_ADDR_VAR 0 2
46826: PUSH
46827: LD_INT 22
46829: PUSH
46830: LD_OWVAR 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 34
46844: PUSH
46845: LD_INT 11
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 34
46854: PUSH
46855: LD_INT 30
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PPUSH
46871: CALL_OW 69
46875: ST_TO_ADDR
// if not tmp then
46876: LD_VAR 0 2
46880: NOT
46881: IFFALSE 46885
// exit ;
46883: GO 46914
// for i in tmp do
46885: LD_ADDR_VAR 0 1
46889: PUSH
46890: LD_VAR 0 2
46894: PUSH
46895: FOR_IN
46896: IFFALSE 46912
// begin SetLives ( i , 0 ) ;
46898: LD_VAR 0 1
46902: PPUSH
46903: LD_INT 0
46905: PPUSH
46906: CALL_OW 234
// end ;
46910: GO 46895
46912: POP
46913: POP
// end ;
46914: PPOPN 2
46916: END
// every 0 0$1 trigger StreamModeActive and sBunker do
46917: LD_EXP 30
46921: PUSH
46922: LD_EXP 40
46926: AND
46927: IFFALSE 46947
46929: GO 46931
46931: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
46932: LD_INT 32
46934: PPUSH
46935: LD_OWVAR 2
46939: PPUSH
46940: LD_INT 0
46942: PPUSH
46943: CALL_OW 324
46947: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
46948: LD_EXP 30
46952: PUSH
46953: LD_EXP 41
46957: AND
46958: IFFALSE 47139
46960: GO 46962
46962: DISABLE
46963: LD_INT 0
46965: PPUSH
46966: PPUSH
46967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
46968: LD_ADDR_VAR 0 2
46972: PUSH
46973: LD_INT 22
46975: PUSH
46976: LD_OWVAR 2
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 33
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PPUSH
46999: CALL_OW 69
47003: ST_TO_ADDR
// if not tmp then
47004: LD_VAR 0 2
47008: NOT
47009: IFFALSE 47013
// exit ;
47011: GO 47139
// side := 0 ;
47013: LD_ADDR_VAR 0 3
47017: PUSH
47018: LD_INT 0
47020: ST_TO_ADDR
// for i := 1 to 8 do
47021: LD_ADDR_VAR 0 1
47025: PUSH
47026: DOUBLE
47027: LD_INT 1
47029: DEC
47030: ST_TO_ADDR
47031: LD_INT 8
47033: PUSH
47034: FOR_TO
47035: IFFALSE 47083
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
47037: LD_OWVAR 2
47041: PUSH
47042: LD_VAR 0 1
47046: NONEQUAL
47047: PUSH
47048: LD_OWVAR 2
47052: PPUSH
47053: LD_VAR 0 1
47057: PPUSH
47058: CALL_OW 81
47062: PUSH
47063: LD_INT 2
47065: EQUAL
47066: AND
47067: IFFALSE 47081
// begin side := i ;
47069: LD_ADDR_VAR 0 3
47073: PUSH
47074: LD_VAR 0 1
47078: ST_TO_ADDR
// break ;
47079: GO 47083
// end ;
47081: GO 47034
47083: POP
47084: POP
// if not side then
47085: LD_VAR 0 3
47089: NOT
47090: IFFALSE 47094
// exit ;
47092: GO 47139
// for i := 1 to tmp do
47094: LD_ADDR_VAR 0 1
47098: PUSH
47099: DOUBLE
47100: LD_INT 1
47102: DEC
47103: ST_TO_ADDR
47104: LD_VAR 0 2
47108: PUSH
47109: FOR_TO
47110: IFFALSE 47137
// if Prob ( 60 ) then
47112: LD_INT 60
47114: PPUSH
47115: CALL_OW 13
47119: IFFALSE 47135
// SetSide ( i , side ) ;
47121: LD_VAR 0 1
47125: PPUSH
47126: LD_VAR 0 3
47130: PPUSH
47131: CALL_OW 235
47135: GO 47109
47137: POP
47138: POP
// end ;
47139: PPOPN 3
47141: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
47142: LD_EXP 30
47146: PUSH
47147: LD_EXP 43
47151: AND
47152: IFFALSE 47271
47154: GO 47156
47156: DISABLE
47157: LD_INT 0
47159: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
47160: LD_ADDR_VAR 0 1
47164: PUSH
47165: LD_INT 22
47167: PUSH
47168: LD_OWVAR 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 21
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 3
47189: PUSH
47190: LD_INT 23
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: LIST
47208: PPUSH
47209: CALL_OW 69
47213: PUSH
47214: FOR_IN
47215: IFFALSE 47269
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
47217: LD_VAR 0 1
47221: PPUSH
47222: CALL_OW 257
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: LD_INT 4
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: IN
47245: IFFALSE 47267
// SetClass ( un , rand ( 1 , 4 ) ) ;
47247: LD_VAR 0 1
47251: PPUSH
47252: LD_INT 1
47254: PPUSH
47255: LD_INT 4
47257: PPUSH
47258: CALL_OW 12
47262: PPUSH
47263: CALL_OW 336
47267: GO 47214
47269: POP
47270: POP
// end ;
47271: PPOPN 1
47273: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
47274: LD_EXP 30
47278: PUSH
47279: LD_EXP 42
47283: AND
47284: IFFALSE 47363
47286: GO 47288
47288: DISABLE
47289: LD_INT 0
47291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
47292: LD_ADDR_VAR 0 1
47296: PUSH
47297: LD_INT 22
47299: PUSH
47300: LD_OWVAR 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 21
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PPUSH
47323: CALL_OW 69
47327: ST_TO_ADDR
// if not tmp then
47328: LD_VAR 0 1
47332: NOT
47333: IFFALSE 47337
// exit ;
47335: GO 47363
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
47337: LD_VAR 0 1
47341: PUSH
47342: LD_INT 1
47344: PPUSH
47345: LD_VAR 0 1
47349: PPUSH
47350: CALL_OW 12
47354: ARRAY
47355: PPUSH
47356: LD_INT 100
47358: PPUSH
47359: CALL_OW 234
// end ;
47363: PPOPN 1
47365: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
47366: LD_EXP 30
47370: PUSH
47371: LD_EXP 44
47375: AND
47376: IFFALSE 47474
47378: GO 47380
47380: DISABLE
47381: LD_INT 0
47383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
47384: LD_ADDR_VAR 0 1
47388: PUSH
47389: LD_INT 22
47391: PUSH
47392: LD_OWVAR 2
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 21
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PPUSH
47415: CALL_OW 69
47419: ST_TO_ADDR
// if not tmp then
47420: LD_VAR 0 1
47424: NOT
47425: IFFALSE 47429
// exit ;
47427: GO 47474
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
47429: LD_VAR 0 1
47433: PUSH
47434: LD_INT 1
47436: PPUSH
47437: LD_VAR 0 1
47441: PPUSH
47442: CALL_OW 12
47446: ARRAY
47447: PPUSH
47448: LD_INT 1
47450: PPUSH
47451: LD_INT 4
47453: PPUSH
47454: CALL_OW 12
47458: PPUSH
47459: LD_INT 3000
47461: PPUSH
47462: LD_INT 9000
47464: PPUSH
47465: CALL_OW 12
47469: PPUSH
47470: CALL_OW 492
// end ;
47474: PPOPN 1
47476: END
// every 0 0$1 trigger StreamModeActive and sDepot do
47477: LD_EXP 30
47481: PUSH
47482: LD_EXP 45
47486: AND
47487: IFFALSE 47507
47489: GO 47491
47491: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
47492: LD_INT 1
47494: PPUSH
47495: LD_OWVAR 2
47499: PPUSH
47500: LD_INT 0
47502: PPUSH
47503: CALL_OW 324
47507: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
47508: LD_EXP 30
47512: PUSH
47513: LD_EXP 46
47517: AND
47518: IFFALSE 47601
47520: GO 47522
47522: DISABLE
47523: LD_INT 0
47525: PPUSH
47526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
47527: LD_ADDR_VAR 0 2
47531: PUSH
47532: LD_INT 22
47534: PUSH
47535: LD_OWVAR 2
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 21
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PPUSH
47558: CALL_OW 69
47562: ST_TO_ADDR
// if not tmp then
47563: LD_VAR 0 2
47567: NOT
47568: IFFALSE 47572
// exit ;
47570: GO 47601
// for i in tmp do
47572: LD_ADDR_VAR 0 1
47576: PUSH
47577: LD_VAR 0 2
47581: PUSH
47582: FOR_IN
47583: IFFALSE 47599
// SetBLevel ( i , 10 ) ;
47585: LD_VAR 0 1
47589: PPUSH
47590: LD_INT 10
47592: PPUSH
47593: CALL_OW 241
47597: GO 47582
47599: POP
47600: POP
// end ;
47601: PPOPN 2
47603: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
47604: LD_EXP 30
47608: PUSH
47609: LD_EXP 47
47613: AND
47614: IFFALSE 47725
47616: GO 47618
47618: DISABLE
47619: LD_INT 0
47621: PPUSH
47622: PPUSH
47623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
47624: LD_ADDR_VAR 0 3
47628: PUSH
47629: LD_INT 22
47631: PUSH
47632: LD_OWVAR 2
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 25
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PPUSH
47655: CALL_OW 69
47659: ST_TO_ADDR
// if not tmp then
47660: LD_VAR 0 3
47664: NOT
47665: IFFALSE 47669
// exit ;
47667: GO 47725
// un := tmp [ rand ( 1 , tmp ) ] ;
47669: LD_ADDR_VAR 0 2
47673: PUSH
47674: LD_VAR 0 3
47678: PUSH
47679: LD_INT 1
47681: PPUSH
47682: LD_VAR 0 3
47686: PPUSH
47687: CALL_OW 12
47691: ARRAY
47692: ST_TO_ADDR
// if Crawls ( un ) then
47693: LD_VAR 0 2
47697: PPUSH
47698: CALL_OW 318
47702: IFFALSE 47713
// ComWalk ( un ) ;
47704: LD_VAR 0 2
47708: PPUSH
47709: CALL_OW 138
// SetClass ( un , class_sniper ) ;
47713: LD_VAR 0 2
47717: PPUSH
47718: LD_INT 5
47720: PPUSH
47721: CALL_OW 336
// end ;
47725: PPOPN 3
47727: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
47728: LD_EXP 30
47732: PUSH
47733: LD_EXP 48
47737: AND
47738: PUSH
47739: LD_OWVAR 67
47743: PUSH
47744: LD_INT 3
47746: LESS
47747: AND
47748: IFFALSE 47767
47750: GO 47752
47752: DISABLE
// Difficulty := Difficulty + 1 ;
47753: LD_ADDR_OWVAR 67
47757: PUSH
47758: LD_OWVAR 67
47762: PUSH
47763: LD_INT 1
47765: PLUS
47766: ST_TO_ADDR
47767: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
47768: LD_EXP 30
47772: PUSH
47773: LD_EXP 49
47777: AND
47778: IFFALSE 47881
47780: GO 47782
47782: DISABLE
47783: LD_INT 0
47785: PPUSH
// begin for i := 1 to 5 do
47786: LD_ADDR_VAR 0 1
47790: PUSH
47791: DOUBLE
47792: LD_INT 1
47794: DEC
47795: ST_TO_ADDR
47796: LD_INT 5
47798: PUSH
47799: FOR_TO
47800: IFFALSE 47879
// begin uc_nation := nation_nature ;
47802: LD_ADDR_OWVAR 21
47806: PUSH
47807: LD_INT 0
47809: ST_TO_ADDR
// uc_side := 0 ;
47810: LD_ADDR_OWVAR 20
47814: PUSH
47815: LD_INT 0
47817: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
47818: LD_ADDR_OWVAR 29
47822: PUSH
47823: LD_INT 12
47825: PUSH
47826: LD_INT 12
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: ST_TO_ADDR
// hc_agressivity := 20 ;
47833: LD_ADDR_OWVAR 35
47837: PUSH
47838: LD_INT 20
47840: ST_TO_ADDR
// hc_class := class_tiger ;
47841: LD_ADDR_OWVAR 28
47845: PUSH
47846: LD_INT 14
47848: ST_TO_ADDR
// hc_gallery :=  ;
47849: LD_ADDR_OWVAR 33
47853: PUSH
47854: LD_STRING 
47856: ST_TO_ADDR
// hc_name :=  ;
47857: LD_ADDR_OWVAR 26
47861: PUSH
47862: LD_STRING 
47864: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
47865: CALL_OW 44
47869: PPUSH
47870: LD_INT 0
47872: PPUSH
47873: CALL_OW 51
// end ;
47877: GO 47799
47879: POP
47880: POP
// end ;
47881: PPOPN 1
47883: END
// every 0 0$1 trigger StreamModeActive and sBomb do
47884: LD_EXP 30
47888: PUSH
47889: LD_EXP 50
47893: AND
47894: IFFALSE 47903
47896: GO 47898
47898: DISABLE
// StreamSibBomb ;
47899: CALL 47904 0 0
47903: END
// export function StreamSibBomb ; var i , x , y ; begin
47904: LD_INT 0
47906: PPUSH
47907: PPUSH
47908: PPUSH
47909: PPUSH
// result := false ;
47910: LD_ADDR_VAR 0 1
47914: PUSH
47915: LD_INT 0
47917: ST_TO_ADDR
// for i := 1 to 16 do
47918: LD_ADDR_VAR 0 2
47922: PUSH
47923: DOUBLE
47924: LD_INT 1
47926: DEC
47927: ST_TO_ADDR
47928: LD_INT 16
47930: PUSH
47931: FOR_TO
47932: IFFALSE 48131
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
47934: LD_ADDR_VAR 0 3
47938: PUSH
47939: LD_INT 10
47941: PUSH
47942: LD_INT 20
47944: PUSH
47945: LD_INT 30
47947: PUSH
47948: LD_INT 40
47950: PUSH
47951: LD_INT 50
47953: PUSH
47954: LD_INT 60
47956: PUSH
47957: LD_INT 70
47959: PUSH
47960: LD_INT 80
47962: PUSH
47963: LD_INT 90
47965: PUSH
47966: LD_INT 100
47968: PUSH
47969: LD_INT 110
47971: PUSH
47972: LD_INT 120
47974: PUSH
47975: LD_INT 130
47977: PUSH
47978: LD_INT 140
47980: PUSH
47981: LD_INT 150
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PPUSH
48004: LD_INT 15
48006: PPUSH
48007: CALL_OW 12
48011: ARRAY
48012: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
48013: LD_ADDR_VAR 0 4
48017: PUSH
48018: LD_INT 10
48020: PUSH
48021: LD_INT 20
48023: PUSH
48024: LD_INT 30
48026: PUSH
48027: LD_INT 40
48029: PUSH
48030: LD_INT 50
48032: PUSH
48033: LD_INT 60
48035: PUSH
48036: LD_INT 70
48038: PUSH
48039: LD_INT 80
48041: PUSH
48042: LD_INT 90
48044: PUSH
48045: LD_INT 100
48047: PUSH
48048: LD_INT 110
48050: PUSH
48051: LD_INT 120
48053: PUSH
48054: LD_INT 130
48056: PUSH
48057: LD_INT 140
48059: PUSH
48060: LD_INT 150
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: PPUSH
48083: LD_INT 15
48085: PPUSH
48086: CALL_OW 12
48090: ARRAY
48091: ST_TO_ADDR
// if ValidHex ( x , y ) then
48092: LD_VAR 0 3
48096: PPUSH
48097: LD_VAR 0 4
48101: PPUSH
48102: CALL_OW 488
48106: IFFALSE 48129
// begin result := [ x , y ] ;
48108: LD_ADDR_VAR 0 1
48112: PUSH
48113: LD_VAR 0 3
48117: PUSH
48118: LD_VAR 0 4
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// break ;
48127: GO 48131
// end ; end ;
48129: GO 47931
48131: POP
48132: POP
// if result then
48133: LD_VAR 0 1
48137: IFFALSE 48197
// begin ToLua ( playSibBomb() ) ;
48139: LD_STRING playSibBomb()
48141: PPUSH
48142: CALL_OW 559
// wait ( 0 0$14 ) ;
48146: LD_INT 490
48148: PPUSH
48149: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
48153: LD_VAR 0 1
48157: PUSH
48158: LD_INT 1
48160: ARRAY
48161: PPUSH
48162: LD_VAR 0 1
48166: PUSH
48167: LD_INT 2
48169: ARRAY
48170: PPUSH
48171: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
48175: LD_VAR 0 1
48179: PUSH
48180: LD_INT 1
48182: ARRAY
48183: PPUSH
48184: LD_VAR 0 1
48188: PUSH
48189: LD_INT 2
48191: ARRAY
48192: PPUSH
48193: CALL_OW 429
// end ; end ;
48197: LD_VAR 0 1
48201: RET
// every 0 0$1 trigger StreamModeActive and sReset do
48202: LD_EXP 30
48206: PUSH
48207: LD_EXP 52
48211: AND
48212: IFFALSE 48224
48214: GO 48216
48216: DISABLE
// YouLost (  ) ;
48217: LD_STRING 
48219: PPUSH
48220: CALL_OW 104
48224: END
// every 0 0$1 trigger StreamModeActive and sFog do
48225: LD_EXP 30
48229: PUSH
48230: LD_EXP 51
48234: AND
48235: IFFALSE 48249
48237: GO 48239
48239: DISABLE
// FogOff ( your_side ) ;
48240: LD_OWVAR 2
48244: PPUSH
48245: CALL_OW 344
48249: END
// every 0 0$1 trigger StreamModeActive and sSun do
48250: LD_EXP 30
48254: PUSH
48255: LD_EXP 53
48259: AND
48260: IFFALSE 48288
48262: GO 48264
48264: DISABLE
// begin solar_recharge_percent := 0 ;
48265: LD_ADDR_OWVAR 79
48269: PUSH
48270: LD_INT 0
48272: ST_TO_ADDR
// wait ( 5 5$00 ) ;
48273: LD_INT 10500
48275: PPUSH
48276: CALL_OW 67
// solar_recharge_percent := 100 ;
48280: LD_ADDR_OWVAR 79
48284: PUSH
48285: LD_INT 100
48287: ST_TO_ADDR
// end ;
48288: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
48289: LD_EXP 30
48293: PUSH
48294: LD_EXP 54
48298: AND
48299: IFFALSE 48538
48301: GO 48303
48303: DISABLE
48304: LD_INT 0
48306: PPUSH
48307: PPUSH
48308: PPUSH
// begin tmp := [ ] ;
48309: LD_ADDR_VAR 0 3
48313: PUSH
48314: EMPTY
48315: ST_TO_ADDR
// for i := 1 to 6 do
48316: LD_ADDR_VAR 0 1
48320: PUSH
48321: DOUBLE
48322: LD_INT 1
48324: DEC
48325: ST_TO_ADDR
48326: LD_INT 6
48328: PUSH
48329: FOR_TO
48330: IFFALSE 48435
// begin uc_nation := nation_nature ;
48332: LD_ADDR_OWVAR 21
48336: PUSH
48337: LD_INT 0
48339: ST_TO_ADDR
// uc_side := 0 ;
48340: LD_ADDR_OWVAR 20
48344: PUSH
48345: LD_INT 0
48347: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
48348: LD_ADDR_OWVAR 29
48352: PUSH
48353: LD_INT 12
48355: PUSH
48356: LD_INT 12
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: ST_TO_ADDR
// hc_agressivity := 20 ;
48363: LD_ADDR_OWVAR 35
48367: PUSH
48368: LD_INT 20
48370: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
48371: LD_ADDR_OWVAR 28
48375: PUSH
48376: LD_INT 17
48378: ST_TO_ADDR
// hc_gallery :=  ;
48379: LD_ADDR_OWVAR 33
48383: PUSH
48384: LD_STRING 
48386: ST_TO_ADDR
// hc_name :=  ;
48387: LD_ADDR_OWVAR 26
48391: PUSH
48392: LD_STRING 
48394: ST_TO_ADDR
// un := CreateHuman ;
48395: LD_ADDR_VAR 0 2
48399: PUSH
48400: CALL_OW 44
48404: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
48405: LD_VAR 0 2
48409: PPUSH
48410: LD_INT 1
48412: PPUSH
48413: CALL_OW 51
// tmp := tmp ^ un ;
48417: LD_ADDR_VAR 0 3
48421: PUSH
48422: LD_VAR 0 3
48426: PUSH
48427: LD_VAR 0 2
48431: ADD
48432: ST_TO_ADDR
// end ;
48433: GO 48329
48435: POP
48436: POP
// repeat wait ( 0 0$1 ) ;
48437: LD_INT 35
48439: PPUSH
48440: CALL_OW 67
// for un in tmp do
48444: LD_ADDR_VAR 0 2
48448: PUSH
48449: LD_VAR 0 3
48453: PUSH
48454: FOR_IN
48455: IFFALSE 48529
// begin if IsDead ( un ) then
48457: LD_VAR 0 2
48461: PPUSH
48462: CALL_OW 301
48466: IFFALSE 48486
// begin tmp := tmp diff un ;
48468: LD_ADDR_VAR 0 3
48472: PUSH
48473: LD_VAR 0 3
48477: PUSH
48478: LD_VAR 0 2
48482: DIFF
48483: ST_TO_ADDR
// continue ;
48484: GO 48454
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
48486: LD_VAR 0 2
48490: PPUSH
48491: LD_INT 3
48493: PUSH
48494: LD_INT 22
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PPUSH
48508: CALL_OW 69
48512: PPUSH
48513: LD_VAR 0 2
48517: PPUSH
48518: CALL_OW 74
48522: PPUSH
48523: CALL_OW 115
// end ;
48527: GO 48454
48529: POP
48530: POP
// until not tmp ;
48531: LD_VAR 0 3
48535: NOT
48536: IFFALSE 48437
// end ;
48538: PPOPN 3
48540: END
// every 0 0$1 trigger StreamModeActive and sTroll do
48541: LD_EXP 30
48545: PUSH
48546: LD_EXP 55
48550: AND
48551: IFFALSE 48605
48553: GO 48555
48555: DISABLE
// begin ToLua ( displayTroll(); ) ;
48556: LD_STRING displayTroll();
48558: PPUSH
48559: CALL_OW 559
// wait ( 3 3$00 ) ;
48563: LD_INT 6300
48565: PPUSH
48566: CALL_OW 67
// ToLua ( hideTroll(); ) ;
48570: LD_STRING hideTroll();
48572: PPUSH
48573: CALL_OW 559
// wait ( 1 1$00 ) ;
48577: LD_INT 2100
48579: PPUSH
48580: CALL_OW 67
// ToLua ( displayTroll(); ) ;
48584: LD_STRING displayTroll();
48586: PPUSH
48587: CALL_OW 559
// wait ( 1 1$00 ) ;
48591: LD_INT 2100
48593: PPUSH
48594: CALL_OW 67
// ToLua ( hideTroll(); ) ;
48598: LD_STRING hideTroll();
48600: PPUSH
48601: CALL_OW 559
// end ;
48605: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
48606: LD_EXP 30
48610: PUSH
48611: LD_EXP 56
48615: AND
48616: IFFALSE 48679
48618: GO 48620
48620: DISABLE
48621: LD_INT 0
48623: PPUSH
// begin p := 0 ;
48624: LD_ADDR_VAR 0 1
48628: PUSH
48629: LD_INT 0
48631: ST_TO_ADDR
// repeat game_speed := 1 ;
48632: LD_ADDR_OWVAR 65
48636: PUSH
48637: LD_INT 1
48639: ST_TO_ADDR
// wait ( 0 0$1 ) ;
48640: LD_INT 35
48642: PPUSH
48643: CALL_OW 67
// p := p + 1 ;
48647: LD_ADDR_VAR 0 1
48651: PUSH
48652: LD_VAR 0 1
48656: PUSH
48657: LD_INT 1
48659: PLUS
48660: ST_TO_ADDR
// until p >= 60 ;
48661: LD_VAR 0 1
48665: PUSH
48666: LD_INT 60
48668: GREATEREQUAL
48669: IFFALSE 48632
// game_speed := 4 ;
48671: LD_ADDR_OWVAR 65
48675: PUSH
48676: LD_INT 4
48678: ST_TO_ADDR
// end ;
48679: PPOPN 1
48681: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
48682: LD_EXP 30
48686: PUSH
48687: LD_EXP 57
48691: AND
48692: IFFALSE 48838
48694: GO 48696
48696: DISABLE
48697: LD_INT 0
48699: PPUSH
48700: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48701: LD_ADDR_VAR 0 1
48705: PUSH
48706: LD_INT 22
48708: PUSH
48709: LD_OWVAR 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 30
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 30
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PPUSH
48750: CALL_OW 69
48754: ST_TO_ADDR
// if not depot then
48755: LD_VAR 0 1
48759: NOT
48760: IFFALSE 48764
// exit ;
48762: GO 48838
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
48764: LD_ADDR_VAR 0 2
48768: PUSH
48769: LD_VAR 0 1
48773: PUSH
48774: LD_INT 1
48776: PPUSH
48777: LD_VAR 0 1
48781: PPUSH
48782: CALL_OW 12
48786: ARRAY
48787: PPUSH
48788: CALL_OW 274
48792: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
48793: LD_VAR 0 2
48797: PPUSH
48798: LD_INT 1
48800: PPUSH
48801: LD_INT 0
48803: PPUSH
48804: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
48808: LD_VAR 0 2
48812: PPUSH
48813: LD_INT 2
48815: PPUSH
48816: LD_INT 0
48818: PPUSH
48819: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
48823: LD_VAR 0 2
48827: PPUSH
48828: LD_INT 3
48830: PPUSH
48831: LD_INT 0
48833: PPUSH
48834: CALL_OW 277
// end ;
48838: PPOPN 2
48840: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
48841: LD_EXP 30
48845: PUSH
48846: LD_EXP 58
48850: AND
48851: IFFALSE 48948
48853: GO 48855
48855: DISABLE
48856: LD_INT 0
48858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
48859: LD_ADDR_VAR 0 1
48863: PUSH
48864: LD_INT 22
48866: PUSH
48867: LD_OWVAR 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 21
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: LD_INT 23
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: PPUSH
48908: CALL_OW 69
48912: ST_TO_ADDR
// if not tmp then
48913: LD_VAR 0 1
48917: NOT
48918: IFFALSE 48922
// exit ;
48920: GO 48948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
48922: LD_VAR 0 1
48926: PUSH
48927: LD_INT 1
48929: PPUSH
48930: LD_VAR 0 1
48934: PPUSH
48935: CALL_OW 12
48939: ARRAY
48940: PPUSH
48941: LD_INT 200
48943: PPUSH
48944: CALL_OW 234
// end ;
48948: PPOPN 1
48950: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
48951: LD_EXP 30
48955: PUSH
48956: LD_EXP 59
48960: AND
48961: IFFALSE 49040
48963: GO 48965
48965: DISABLE
48966: LD_INT 0
48968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
48969: LD_ADDR_VAR 0 1
48973: PUSH
48974: LD_INT 22
48976: PUSH
48977: LD_OWVAR 2
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 21
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PPUSH
49000: CALL_OW 69
49004: ST_TO_ADDR
// if not tmp then
49005: LD_VAR 0 1
49009: NOT
49010: IFFALSE 49014
// exit ;
49012: GO 49040
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
49014: LD_VAR 0 1
49018: PUSH
49019: LD_INT 1
49021: PPUSH
49022: LD_VAR 0 1
49026: PPUSH
49027: CALL_OW 12
49031: ARRAY
49032: PPUSH
49033: LD_INT 60
49035: PPUSH
49036: CALL_OW 234
// end ;
49040: PPOPN 1
49042: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
49043: LD_EXP 30
49047: PUSH
49048: LD_EXP 60
49052: AND
49053: IFFALSE 49152
49055: GO 49057
49057: DISABLE
49058: LD_INT 0
49060: PPUSH
49061: PPUSH
// begin enable ;
49062: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
49063: LD_ADDR_VAR 0 1
49067: PUSH
49068: LD_INT 22
49070: PUSH
49071: LD_OWVAR 2
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 61
49082: PUSH
49083: EMPTY
49084: LIST
49085: PUSH
49086: LD_INT 33
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: PPUSH
49101: CALL_OW 69
49105: ST_TO_ADDR
// if not tmp then
49106: LD_VAR 0 1
49110: NOT
49111: IFFALSE 49115
// exit ;
49113: GO 49152
// for i in tmp do
49115: LD_ADDR_VAR 0 2
49119: PUSH
49120: LD_VAR 0 1
49124: PUSH
49125: FOR_IN
49126: IFFALSE 49150
// if IsControledBy ( i ) then
49128: LD_VAR 0 2
49132: PPUSH
49133: CALL_OW 312
49137: IFFALSE 49148
// ComUnlink ( i ) ;
49139: LD_VAR 0 2
49143: PPUSH
49144: CALL_OW 136
49148: GO 49125
49150: POP
49151: POP
// end ;
49152: PPOPN 2
49154: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
49155: LD_EXP 30
49159: PUSH
49160: LD_EXP 61
49164: AND
49165: IFFALSE 49305
49167: GO 49169
49169: DISABLE
49170: LD_INT 0
49172: PPUSH
49173: PPUSH
// begin ToLua ( displayPowell(); ) ;
49174: LD_STRING displayPowell();
49176: PPUSH
49177: CALL_OW 559
// uc_side := 0 ;
49181: LD_ADDR_OWVAR 20
49185: PUSH
49186: LD_INT 0
49188: ST_TO_ADDR
// uc_nation := 2 ;
49189: LD_ADDR_OWVAR 21
49193: PUSH
49194: LD_INT 2
49196: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
49197: LD_ADDR_OWVAR 37
49201: PUSH
49202: LD_INT 14
49204: ST_TO_ADDR
// vc_engine := engine_siberite ;
49205: LD_ADDR_OWVAR 39
49209: PUSH
49210: LD_INT 3
49212: ST_TO_ADDR
// vc_control := control_apeman ;
49213: LD_ADDR_OWVAR 38
49217: PUSH
49218: LD_INT 5
49220: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
49221: LD_ADDR_OWVAR 40
49225: PUSH
49226: LD_INT 29
49228: ST_TO_ADDR
// un := CreateVehicle ;
49229: LD_ADDR_VAR 0 2
49233: PUSH
49234: CALL_OW 45
49238: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
49239: LD_VAR 0 2
49243: PPUSH
49244: LD_INT 1
49246: PPUSH
49247: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
49251: LD_INT 35
49253: PPUSH
49254: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
49258: LD_VAR 0 2
49262: PPUSH
49263: LD_INT 22
49265: PUSH
49266: LD_OWVAR 2
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PPUSH
49275: CALL_OW 69
49279: PPUSH
49280: LD_VAR 0 2
49284: PPUSH
49285: CALL_OW 74
49289: PPUSH
49290: CALL_OW 115
// until IsDead ( un ) ;
49294: LD_VAR 0 2
49298: PPUSH
49299: CALL_OW 301
49303: IFFALSE 49251
// end ;
49305: PPOPN 2
49307: END
// every 0 0$1 trigger StreamModeActive and sStu do
49308: LD_EXP 30
49312: PUSH
49313: LD_EXP 69
49317: AND
49318: IFFALSE 49334
49320: GO 49322
49322: DISABLE
// begin ToLua ( displayStucuk(); ) ;
49323: LD_STRING displayStucuk();
49325: PPUSH
49326: CALL_OW 559
// ResetFog ;
49330: CALL_OW 335
// end ;
49334: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
49335: LD_EXP 30
49339: PUSH
49340: LD_EXP 62
49344: AND
49345: IFFALSE 49486
49347: GO 49349
49349: DISABLE
49350: LD_INT 0
49352: PPUSH
49353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
49354: LD_ADDR_VAR 0 2
49358: PUSH
49359: LD_INT 22
49361: PUSH
49362: LD_OWVAR 2
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 21
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PPUSH
49385: CALL_OW 69
49389: ST_TO_ADDR
// if not tmp then
49390: LD_VAR 0 2
49394: NOT
49395: IFFALSE 49399
// exit ;
49397: GO 49486
// un := tmp [ rand ( 1 , tmp ) ] ;
49399: LD_ADDR_VAR 0 1
49403: PUSH
49404: LD_VAR 0 2
49408: PUSH
49409: LD_INT 1
49411: PPUSH
49412: LD_VAR 0 2
49416: PPUSH
49417: CALL_OW 12
49421: ARRAY
49422: ST_TO_ADDR
// SetSide ( un , 0 ) ;
49423: LD_VAR 0 1
49427: PPUSH
49428: LD_INT 0
49430: PPUSH
49431: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
49435: LD_VAR 0 1
49439: PPUSH
49440: LD_OWVAR 3
49444: PUSH
49445: LD_VAR 0 1
49449: DIFF
49450: PPUSH
49451: LD_VAR 0 1
49455: PPUSH
49456: CALL_OW 74
49460: PPUSH
49461: CALL_OW 115
// wait ( 0 0$20 ) ;
49465: LD_INT 700
49467: PPUSH
49468: CALL_OW 67
// SetSide ( un , your_side ) ;
49472: LD_VAR 0 1
49476: PPUSH
49477: LD_OWVAR 2
49481: PPUSH
49482: CALL_OW 235
// end ;
49486: PPOPN 2
49488: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
49489: LD_EXP 30
49493: PUSH
49494: LD_EXP 63
49498: AND
49499: IFFALSE 49605
49501: GO 49503
49503: DISABLE
49504: LD_INT 0
49506: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49507: LD_ADDR_VAR 0 1
49511: PUSH
49512: LD_INT 22
49514: PUSH
49515: LD_OWVAR 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 30
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 30
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PPUSH
49556: CALL_OW 69
49560: ST_TO_ADDR
// if not depot then
49561: LD_VAR 0 1
49565: NOT
49566: IFFALSE 49570
// exit ;
49568: GO 49605
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
49570: LD_VAR 0 1
49574: PUSH
49575: LD_INT 1
49577: ARRAY
49578: PPUSH
49579: CALL_OW 250
49583: PPUSH
49584: LD_VAR 0 1
49588: PUSH
49589: LD_INT 1
49591: ARRAY
49592: PPUSH
49593: CALL_OW 251
49597: PPUSH
49598: LD_INT 70
49600: PPUSH
49601: CALL_OW 495
// end ;
49605: PPOPN 1
49607: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
49608: LD_EXP 30
49612: PUSH
49613: LD_EXP 64
49617: AND
49618: IFFALSE 49829
49620: GO 49622
49622: DISABLE
49623: LD_INT 0
49625: PPUSH
49626: PPUSH
49627: PPUSH
49628: PPUSH
49629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
49630: LD_ADDR_VAR 0 5
49634: PUSH
49635: LD_INT 22
49637: PUSH
49638: LD_OWVAR 2
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 21
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PPUSH
49661: CALL_OW 69
49665: ST_TO_ADDR
// if not tmp then
49666: LD_VAR 0 5
49670: NOT
49671: IFFALSE 49675
// exit ;
49673: GO 49829
// for i in tmp do
49675: LD_ADDR_VAR 0 1
49679: PUSH
49680: LD_VAR 0 5
49684: PUSH
49685: FOR_IN
49686: IFFALSE 49827
// begin d := rand ( 0 , 5 ) ;
49688: LD_ADDR_VAR 0 4
49692: PUSH
49693: LD_INT 0
49695: PPUSH
49696: LD_INT 5
49698: PPUSH
49699: CALL_OW 12
49703: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
49704: LD_ADDR_VAR 0 2
49708: PUSH
49709: LD_VAR 0 1
49713: PPUSH
49714: CALL_OW 250
49718: PPUSH
49719: LD_VAR 0 4
49723: PPUSH
49724: LD_INT 3
49726: PPUSH
49727: LD_INT 12
49729: PPUSH
49730: CALL_OW 12
49734: PPUSH
49735: CALL_OW 272
49739: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
49740: LD_ADDR_VAR 0 3
49744: PUSH
49745: LD_VAR 0 1
49749: PPUSH
49750: CALL_OW 251
49754: PPUSH
49755: LD_VAR 0 4
49759: PPUSH
49760: LD_INT 3
49762: PPUSH
49763: LD_INT 12
49765: PPUSH
49766: CALL_OW 12
49770: PPUSH
49771: CALL_OW 273
49775: ST_TO_ADDR
// if ValidHex ( x , y ) then
49776: LD_VAR 0 2
49780: PPUSH
49781: LD_VAR 0 3
49785: PPUSH
49786: CALL_OW 488
49790: IFFALSE 49825
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
49792: LD_VAR 0 1
49796: PPUSH
49797: LD_VAR 0 2
49801: PPUSH
49802: LD_VAR 0 3
49806: PPUSH
49807: LD_INT 3
49809: PPUSH
49810: LD_INT 6
49812: PPUSH
49813: CALL_OW 12
49817: PPUSH
49818: LD_INT 1
49820: PPUSH
49821: CALL_OW 483
// end ;
49825: GO 49685
49827: POP
49828: POP
// end ;
49829: PPOPN 5
49831: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
49832: LD_EXP 30
49836: PUSH
49837: LD_EXP 65
49841: AND
49842: IFFALSE 49936
49844: GO 49846
49846: DISABLE
49847: LD_INT 0
49849: PPUSH
49850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
49851: LD_ADDR_VAR 0 2
49855: PUSH
49856: LD_INT 22
49858: PUSH
49859: LD_OWVAR 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 32
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 21
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: LIST
49892: PPUSH
49893: CALL_OW 69
49897: ST_TO_ADDR
// if not tmp then
49898: LD_VAR 0 2
49902: NOT
49903: IFFALSE 49907
// exit ;
49905: GO 49936
// for i in tmp do
49907: LD_ADDR_VAR 0 1
49911: PUSH
49912: LD_VAR 0 2
49916: PUSH
49917: FOR_IN
49918: IFFALSE 49934
// SetFuel ( i , 0 ) ;
49920: LD_VAR 0 1
49924: PPUSH
49925: LD_INT 0
49927: PPUSH
49928: CALL_OW 240
49932: GO 49917
49934: POP
49935: POP
// end ;
49936: PPOPN 2
49938: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
49939: LD_EXP 30
49943: PUSH
49944: LD_EXP 66
49948: AND
49949: IFFALSE 50015
49951: GO 49953
49953: DISABLE
49954: LD_INT 0
49956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
49957: LD_ADDR_VAR 0 1
49961: PUSH
49962: LD_INT 22
49964: PUSH
49965: LD_OWVAR 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 30
49976: PUSH
49977: LD_INT 29
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PPUSH
49988: CALL_OW 69
49992: ST_TO_ADDR
// if not tmp then
49993: LD_VAR 0 1
49997: NOT
49998: IFFALSE 50002
// exit ;
50000: GO 50015
// DestroyUnit ( tmp [ 1 ] ) ;
50002: LD_VAR 0 1
50006: PUSH
50007: LD_INT 1
50009: ARRAY
50010: PPUSH
50011: CALL_OW 65
// end ;
50015: PPOPN 1
50017: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
50018: LD_EXP 30
50022: PUSH
50023: LD_EXP 68
50027: AND
50028: IFFALSE 50157
50030: GO 50032
50032: DISABLE
50033: LD_INT 0
50035: PPUSH
// begin uc_side := 0 ;
50036: LD_ADDR_OWVAR 20
50040: PUSH
50041: LD_INT 0
50043: ST_TO_ADDR
// uc_nation := nation_arabian ;
50044: LD_ADDR_OWVAR 21
50048: PUSH
50049: LD_INT 2
50051: ST_TO_ADDR
// hc_gallery :=  ;
50052: LD_ADDR_OWVAR 33
50056: PUSH
50057: LD_STRING 
50059: ST_TO_ADDR
// hc_name :=  ;
50060: LD_ADDR_OWVAR 26
50064: PUSH
50065: LD_STRING 
50067: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
50068: LD_INT 1
50070: PPUSH
50071: LD_INT 11
50073: PPUSH
50074: LD_INT 10
50076: PPUSH
50077: CALL_OW 380
// un := CreateHuman ;
50081: LD_ADDR_VAR 0 1
50085: PUSH
50086: CALL_OW 44
50090: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50091: LD_VAR 0 1
50095: PPUSH
50096: LD_INT 1
50098: PPUSH
50099: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
50103: LD_INT 35
50105: PPUSH
50106: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
50110: LD_VAR 0 1
50114: PPUSH
50115: LD_INT 22
50117: PUSH
50118: LD_OWVAR 2
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PPUSH
50127: CALL_OW 69
50131: PPUSH
50132: LD_VAR 0 1
50136: PPUSH
50137: CALL_OW 74
50141: PPUSH
50142: CALL_OW 115
// until IsDead ( un ) ;
50146: LD_VAR 0 1
50150: PPUSH
50151: CALL_OW 301
50155: IFFALSE 50103
// end ;
50157: PPOPN 1
50159: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
50160: LD_EXP 30
50164: PUSH
50165: LD_EXP 70
50169: AND
50170: IFFALSE 50182
50172: GO 50174
50174: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
50175: LD_STRING earthquake(getX(game), 0, 32)
50177: PPUSH
50178: CALL_OW 559
50182: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
50183: LD_EXP 30
50187: PUSH
50188: LD_EXP 71
50192: AND
50193: IFFALSE 50284
50195: GO 50197
50197: DISABLE
50198: LD_INT 0
50200: PPUSH
// begin enable ;
50201: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
50202: LD_ADDR_VAR 0 1
50206: PUSH
50207: LD_INT 22
50209: PUSH
50210: LD_OWVAR 2
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 21
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 33
50231: PUSH
50232: LD_INT 3
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: LIST
50243: PPUSH
50244: CALL_OW 69
50248: ST_TO_ADDR
// if not tmp then
50249: LD_VAR 0 1
50253: NOT
50254: IFFALSE 50258
// exit ;
50256: GO 50284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
50258: LD_VAR 0 1
50262: PUSH
50263: LD_INT 1
50265: PPUSH
50266: LD_VAR 0 1
50270: PPUSH
50271: CALL_OW 12
50275: ARRAY
50276: PPUSH
50277: LD_INT 1
50279: PPUSH
50280: CALL_OW 234
// end ;
50284: PPOPN 1
50286: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
50287: LD_EXP 30
50291: PUSH
50292: LD_EXP 72
50296: AND
50297: IFFALSE 50438
50299: GO 50301
50301: DISABLE
50302: LD_INT 0
50304: PPUSH
50305: PPUSH
50306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
50307: LD_ADDR_VAR 0 3
50311: PUSH
50312: LD_INT 22
50314: PUSH
50315: LD_OWVAR 2
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 25
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PPUSH
50338: CALL_OW 69
50342: ST_TO_ADDR
// if not tmp then
50343: LD_VAR 0 3
50347: NOT
50348: IFFALSE 50352
// exit ;
50350: GO 50438
// un := tmp [ rand ( 1 , tmp ) ] ;
50352: LD_ADDR_VAR 0 2
50356: PUSH
50357: LD_VAR 0 3
50361: PUSH
50362: LD_INT 1
50364: PPUSH
50365: LD_VAR 0 3
50369: PPUSH
50370: CALL_OW 12
50374: ARRAY
50375: ST_TO_ADDR
// if Crawls ( un ) then
50376: LD_VAR 0 2
50380: PPUSH
50381: CALL_OW 318
50385: IFFALSE 50396
// ComWalk ( un ) ;
50387: LD_VAR 0 2
50391: PPUSH
50392: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
50396: LD_VAR 0 2
50400: PPUSH
50401: LD_INT 9
50403: PPUSH
50404: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
50408: LD_INT 28
50410: PPUSH
50411: LD_OWVAR 2
50415: PPUSH
50416: LD_INT 2
50418: PPUSH
50419: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
50423: LD_INT 29
50425: PPUSH
50426: LD_OWVAR 2
50430: PPUSH
50431: LD_INT 2
50433: PPUSH
50434: CALL_OW 322
// end ;
50438: PPOPN 3
50440: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
50441: LD_EXP 30
50445: PUSH
50446: LD_EXP 73
50450: AND
50451: IFFALSE 50562
50453: GO 50455
50455: DISABLE
50456: LD_INT 0
50458: PPUSH
50459: PPUSH
50460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
50461: LD_ADDR_VAR 0 3
50465: PUSH
50466: LD_INT 22
50468: PUSH
50469: LD_OWVAR 2
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 25
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PPUSH
50492: CALL_OW 69
50496: ST_TO_ADDR
// if not tmp then
50497: LD_VAR 0 3
50501: NOT
50502: IFFALSE 50506
// exit ;
50504: GO 50562
// un := tmp [ rand ( 1 , tmp ) ] ;
50506: LD_ADDR_VAR 0 2
50510: PUSH
50511: LD_VAR 0 3
50515: PUSH
50516: LD_INT 1
50518: PPUSH
50519: LD_VAR 0 3
50523: PPUSH
50524: CALL_OW 12
50528: ARRAY
50529: ST_TO_ADDR
// if Crawls ( un ) then
50530: LD_VAR 0 2
50534: PPUSH
50535: CALL_OW 318
50539: IFFALSE 50550
// ComWalk ( un ) ;
50541: LD_VAR 0 2
50545: PPUSH
50546: CALL_OW 138
// SetClass ( un , class_mortar ) ;
50550: LD_VAR 0 2
50554: PPUSH
50555: LD_INT 8
50557: PPUSH
50558: CALL_OW 336
// end ;
50562: PPOPN 3
50564: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
50565: LD_EXP 30
50569: PUSH
50570: LD_EXP 74
50574: AND
50575: IFFALSE 50719
50577: GO 50579
50579: DISABLE
50580: LD_INT 0
50582: PPUSH
50583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
50584: LD_ADDR_VAR 0 2
50588: PUSH
50589: LD_INT 22
50591: PUSH
50592: LD_OWVAR 2
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 21
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 34
50616: PUSH
50617: LD_INT 12
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 34
50626: PUSH
50627: LD_INT 51
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 34
50636: PUSH
50637: LD_INT 32
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: PPUSH
50655: CALL_OW 69
50659: ST_TO_ADDR
// if not tmp then
50660: LD_VAR 0 2
50664: NOT
50665: IFFALSE 50669
// exit ;
50667: GO 50719
// for i in tmp do
50669: LD_ADDR_VAR 0 1
50673: PUSH
50674: LD_VAR 0 2
50678: PUSH
50679: FOR_IN
50680: IFFALSE 50717
// if GetCargo ( i , mat_artifact ) = 0 then
50682: LD_VAR 0 1
50686: PPUSH
50687: LD_INT 4
50689: PPUSH
50690: CALL_OW 289
50694: PUSH
50695: LD_INT 0
50697: EQUAL
50698: IFFALSE 50715
// SetCargo ( i , mat_siberit , 100 ) ;
50700: LD_VAR 0 1
50704: PPUSH
50705: LD_INT 3
50707: PPUSH
50708: LD_INT 100
50710: PPUSH
50711: CALL_OW 290
50715: GO 50679
50717: POP
50718: POP
// end ;
50719: PPOPN 2
50721: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
50722: LD_EXP 30
50726: PUSH
50727: LD_EXP 75
50731: AND
50732: IFFALSE 50915
50734: GO 50736
50736: DISABLE
50737: LD_INT 0
50739: PPUSH
50740: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
50741: LD_ADDR_VAR 0 2
50745: PUSH
50746: LD_INT 22
50748: PUSH
50749: LD_OWVAR 2
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PPUSH
50758: CALL_OW 69
50762: ST_TO_ADDR
// if not tmp then
50763: LD_VAR 0 2
50767: NOT
50768: IFFALSE 50772
// exit ;
50770: GO 50915
// for i := 1 to 2 do
50772: LD_ADDR_VAR 0 1
50776: PUSH
50777: DOUBLE
50778: LD_INT 1
50780: DEC
50781: ST_TO_ADDR
50782: LD_INT 2
50784: PUSH
50785: FOR_TO
50786: IFFALSE 50913
// begin uc_side := your_side ;
50788: LD_ADDR_OWVAR 20
50792: PUSH
50793: LD_OWVAR 2
50797: ST_TO_ADDR
// uc_nation := nation_american ;
50798: LD_ADDR_OWVAR 21
50802: PUSH
50803: LD_INT 1
50805: ST_TO_ADDR
// vc_chassis := us_morphling ;
50806: LD_ADDR_OWVAR 37
50810: PUSH
50811: LD_INT 5
50813: ST_TO_ADDR
// vc_engine := engine_siberite ;
50814: LD_ADDR_OWVAR 39
50818: PUSH
50819: LD_INT 3
50821: ST_TO_ADDR
// vc_control := control_computer ;
50822: LD_ADDR_OWVAR 38
50826: PUSH
50827: LD_INT 3
50829: ST_TO_ADDR
// vc_weapon := us_double_laser ;
50830: LD_ADDR_OWVAR 40
50834: PUSH
50835: LD_INT 10
50837: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
50838: LD_VAR 0 2
50842: PUSH
50843: LD_INT 1
50845: ARRAY
50846: PPUSH
50847: CALL_OW 310
50851: NOT
50852: IFFALSE 50899
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
50854: CALL_OW 45
50858: PPUSH
50859: LD_VAR 0 2
50863: PUSH
50864: LD_INT 1
50866: ARRAY
50867: PPUSH
50868: CALL_OW 250
50872: PPUSH
50873: LD_VAR 0 2
50877: PUSH
50878: LD_INT 1
50880: ARRAY
50881: PPUSH
50882: CALL_OW 251
50886: PPUSH
50887: LD_INT 12
50889: PPUSH
50890: LD_INT 1
50892: PPUSH
50893: CALL_OW 50
50897: GO 50911
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
50899: CALL_OW 45
50903: PPUSH
50904: LD_INT 1
50906: PPUSH
50907: CALL_OW 51
// end ;
50911: GO 50785
50913: POP
50914: POP
// end ;
50915: PPOPN 2
50917: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
50918: LD_EXP 30
50922: PUSH
50923: LD_EXP 76
50927: AND
50928: IFFALSE 51150
50930: GO 50932
50932: DISABLE
50933: LD_INT 0
50935: PPUSH
50936: PPUSH
50937: PPUSH
50938: PPUSH
50939: PPUSH
50940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
50941: LD_ADDR_VAR 0 6
50945: PUSH
50946: LD_INT 22
50948: PUSH
50949: LD_OWVAR 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 21
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: LD_INT 23
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: PPUSH
50990: CALL_OW 69
50994: ST_TO_ADDR
// if not tmp then
50995: LD_VAR 0 6
50999: NOT
51000: IFFALSE 51004
// exit ;
51002: GO 51150
// s1 := rand ( 1 , 4 ) ;
51004: LD_ADDR_VAR 0 2
51008: PUSH
51009: LD_INT 1
51011: PPUSH
51012: LD_INT 4
51014: PPUSH
51015: CALL_OW 12
51019: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
51020: LD_ADDR_VAR 0 4
51024: PUSH
51025: LD_VAR 0 6
51029: PUSH
51030: LD_INT 1
51032: ARRAY
51033: PPUSH
51034: LD_VAR 0 2
51038: PPUSH
51039: CALL_OW 259
51043: ST_TO_ADDR
// if s1 = 1 then
51044: LD_VAR 0 2
51048: PUSH
51049: LD_INT 1
51051: EQUAL
51052: IFFALSE 51072
// s2 := rand ( 2 , 4 ) else
51054: LD_ADDR_VAR 0 3
51058: PUSH
51059: LD_INT 2
51061: PPUSH
51062: LD_INT 4
51064: PPUSH
51065: CALL_OW 12
51069: ST_TO_ADDR
51070: GO 51080
// s2 := 1 ;
51072: LD_ADDR_VAR 0 3
51076: PUSH
51077: LD_INT 1
51079: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
51080: LD_ADDR_VAR 0 5
51084: PUSH
51085: LD_VAR 0 6
51089: PUSH
51090: LD_INT 1
51092: ARRAY
51093: PPUSH
51094: LD_VAR 0 3
51098: PPUSH
51099: CALL_OW 259
51103: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
51104: LD_VAR 0 6
51108: PUSH
51109: LD_INT 1
51111: ARRAY
51112: PPUSH
51113: LD_VAR 0 2
51117: PPUSH
51118: LD_VAR 0 5
51122: PPUSH
51123: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
51127: LD_VAR 0 6
51131: PUSH
51132: LD_INT 1
51134: ARRAY
51135: PPUSH
51136: LD_VAR 0 3
51140: PPUSH
51141: LD_VAR 0 4
51145: PPUSH
51146: CALL_OW 237
// end ;
51150: PPOPN 6
51152: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
51153: LD_EXP 30
51157: PUSH
51158: LD_EXP 77
51162: AND
51163: IFFALSE 51242
51165: GO 51167
51167: DISABLE
51168: LD_INT 0
51170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
51171: LD_ADDR_VAR 0 1
51175: PUSH
51176: LD_INT 22
51178: PUSH
51179: LD_OWVAR 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 30
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PPUSH
51202: CALL_OW 69
51206: ST_TO_ADDR
// if not tmp then
51207: LD_VAR 0 1
51211: NOT
51212: IFFALSE 51216
// exit ;
51214: GO 51242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
51216: LD_VAR 0 1
51220: PUSH
51221: LD_INT 1
51223: PPUSH
51224: LD_VAR 0 1
51228: PPUSH
51229: CALL_OW 12
51233: ARRAY
51234: PPUSH
51235: LD_INT 1
51237: PPUSH
51238: CALL_OW 234
// end ;
51242: PPOPN 1
51244: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
51245: LD_EXP 30
51249: PUSH
51250: LD_EXP 78
51254: AND
51255: IFFALSE 51367
51257: GO 51259
51259: DISABLE
51260: LD_INT 0
51262: PPUSH
51263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
51264: LD_ADDR_VAR 0 2
51268: PUSH
51269: LD_INT 22
51271: PUSH
51272: LD_OWVAR 2
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: LD_INT 30
51286: PUSH
51287: LD_INT 27
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 30
51296: PUSH
51297: LD_INT 26
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 30
51306: PUSH
51307: LD_INT 28
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PPUSH
51324: CALL_OW 69
51328: ST_TO_ADDR
// if not tmp then
51329: LD_VAR 0 2
51333: NOT
51334: IFFALSE 51338
// exit ;
51336: GO 51367
// for i in tmp do
51338: LD_ADDR_VAR 0 1
51342: PUSH
51343: LD_VAR 0 2
51347: PUSH
51348: FOR_IN
51349: IFFALSE 51365
// SetLives ( i , 1 ) ;
51351: LD_VAR 0 1
51355: PPUSH
51356: LD_INT 1
51358: PPUSH
51359: CALL_OW 234
51363: GO 51348
51365: POP
51366: POP
// end ;
51367: PPOPN 2
51369: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
51370: LD_EXP 30
51374: PUSH
51375: LD_EXP 79
51379: AND
51380: IFFALSE 51654
51382: GO 51384
51384: DISABLE
51385: LD_INT 0
51387: PPUSH
51388: PPUSH
51389: PPUSH
// begin i := rand ( 1 , 7 ) ;
51390: LD_ADDR_VAR 0 1
51394: PUSH
51395: LD_INT 1
51397: PPUSH
51398: LD_INT 7
51400: PPUSH
51401: CALL_OW 12
51405: ST_TO_ADDR
// case i of 1 :
51406: LD_VAR 0 1
51410: PUSH
51411: LD_INT 1
51413: DOUBLE
51414: EQUAL
51415: IFTRUE 51419
51417: GO 51429
51419: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
51420: LD_STRING earthquake(getX(game), 0, 32)
51422: PPUSH
51423: CALL_OW 559
51427: GO 51654
51429: LD_INT 2
51431: DOUBLE
51432: EQUAL
51433: IFTRUE 51437
51435: GO 51451
51437: POP
// begin ToLua ( displayStucuk(); ) ;
51438: LD_STRING displayStucuk();
51440: PPUSH
51441: CALL_OW 559
// ResetFog ;
51445: CALL_OW 335
// end ; 3 :
51449: GO 51654
51451: LD_INT 3
51453: DOUBLE
51454: EQUAL
51455: IFTRUE 51459
51457: GO 51563
51459: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51460: LD_ADDR_VAR 0 2
51464: PUSH
51465: LD_INT 22
51467: PUSH
51468: LD_OWVAR 2
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 25
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PPUSH
51491: CALL_OW 69
51495: ST_TO_ADDR
// if not tmp then
51496: LD_VAR 0 2
51500: NOT
51501: IFFALSE 51505
// exit ;
51503: GO 51654
// un := tmp [ rand ( 1 , tmp ) ] ;
51505: LD_ADDR_VAR 0 3
51509: PUSH
51510: LD_VAR 0 2
51514: PUSH
51515: LD_INT 1
51517: PPUSH
51518: LD_VAR 0 2
51522: PPUSH
51523: CALL_OW 12
51527: ARRAY
51528: ST_TO_ADDR
// if Crawls ( un ) then
51529: LD_VAR 0 3
51533: PPUSH
51534: CALL_OW 318
51538: IFFALSE 51549
// ComWalk ( un ) ;
51540: LD_VAR 0 3
51544: PPUSH
51545: CALL_OW 138
// SetClass ( un , class_mortar ) ;
51549: LD_VAR 0 3
51553: PPUSH
51554: LD_INT 8
51556: PPUSH
51557: CALL_OW 336
// end ; 4 :
51561: GO 51654
51563: LD_INT 4
51565: DOUBLE
51566: EQUAL
51567: IFTRUE 51571
51569: GO 51632
51571: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
51572: LD_ADDR_VAR 0 2
51576: PUSH
51577: LD_INT 22
51579: PUSH
51580: LD_OWVAR 2
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 30
51591: PUSH
51592: LD_INT 29
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PPUSH
51603: CALL_OW 69
51607: ST_TO_ADDR
// if not tmp then
51608: LD_VAR 0 2
51612: NOT
51613: IFFALSE 51617
// exit ;
51615: GO 51654
// DestroyUnit ( tmp [ 1 ] ) ;
51617: LD_VAR 0 2
51621: PUSH
51622: LD_INT 1
51624: ARRAY
51625: PPUSH
51626: CALL_OW 65
// end ; 5 .. 7 :
51630: GO 51654
51632: LD_INT 5
51634: DOUBLE
51635: GREATEREQUAL
51636: IFFALSE 51644
51638: LD_INT 7
51640: DOUBLE
51641: LESSEQUAL
51642: IFTRUE 51646
51644: GO 51653
51646: POP
// StreamSibBomb ; end ;
51647: CALL 47904 0 0
51651: GO 51654
51653: POP
// end ;
51654: PPOPN 3
51656: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
51657: LD_EXP 30
51661: PUSH
51662: LD_EXP 80
51666: AND
51667: IFFALSE 51823
51669: GO 51671
51671: DISABLE
51672: LD_INT 0
51674: PPUSH
51675: PPUSH
51676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
51677: LD_ADDR_VAR 0 2
51681: PUSH
51682: LD_INT 81
51684: PUSH
51685: LD_OWVAR 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 21
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 21
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: LIST
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PPUSH
51726: CALL_OW 69
51730: ST_TO_ADDR
// if not tmp then
51731: LD_VAR 0 2
51735: NOT
51736: IFFALSE 51740
// exit ;
51738: GO 51823
// p := 0 ;
51740: LD_ADDR_VAR 0 3
51744: PUSH
51745: LD_INT 0
51747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51748: LD_INT 35
51750: PPUSH
51751: CALL_OW 67
// p := p + 1 ;
51755: LD_ADDR_VAR 0 3
51759: PUSH
51760: LD_VAR 0 3
51764: PUSH
51765: LD_INT 1
51767: PLUS
51768: ST_TO_ADDR
// for i in tmp do
51769: LD_ADDR_VAR 0 1
51773: PUSH
51774: LD_VAR 0 2
51778: PUSH
51779: FOR_IN
51780: IFFALSE 51811
// if GetLives ( i ) < 1000 then
51782: LD_VAR 0 1
51786: PPUSH
51787: CALL_OW 256
51791: PUSH
51792: LD_INT 1000
51794: LESS
51795: IFFALSE 51809
// SetLives ( i , 1000 ) ;
51797: LD_VAR 0 1
51801: PPUSH
51802: LD_INT 1000
51804: PPUSH
51805: CALL_OW 234
51809: GO 51779
51811: POP
51812: POP
// until p > 20 ;
51813: LD_VAR 0 3
51817: PUSH
51818: LD_INT 20
51820: GREATER
51821: IFFALSE 51748
// end ;
51823: PPOPN 3
51825: END
// every 0 0$1 trigger StreamModeActive and sTime do
51826: LD_EXP 30
51830: PUSH
51831: LD_EXP 81
51835: AND
51836: IFFALSE 51871
51838: GO 51840
51840: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
51841: LD_INT 28
51843: PPUSH
51844: LD_OWVAR 2
51848: PPUSH
51849: LD_INT 2
51851: PPUSH
51852: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
51856: LD_INT 30
51858: PPUSH
51859: LD_OWVAR 2
51863: PPUSH
51864: LD_INT 2
51866: PPUSH
51867: CALL_OW 322
// end ;
51871: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
51872: LD_EXP 30
51876: PUSH
51877: LD_EXP 82
51881: AND
51882: IFFALSE 52003
51884: GO 51886
51886: DISABLE
51887: LD_INT 0
51889: PPUSH
51890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
51891: LD_ADDR_VAR 0 2
51895: PUSH
51896: LD_INT 22
51898: PUSH
51899: LD_OWVAR 2
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 21
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: LD_INT 23
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: PPUSH
51940: CALL_OW 69
51944: ST_TO_ADDR
// if not tmp then
51945: LD_VAR 0 2
51949: NOT
51950: IFFALSE 51954
// exit ;
51952: GO 52003
// for i in tmp do
51954: LD_ADDR_VAR 0 1
51958: PUSH
51959: LD_VAR 0 2
51963: PUSH
51964: FOR_IN
51965: IFFALSE 52001
// begin if Crawls ( i ) then
51967: LD_VAR 0 1
51971: PPUSH
51972: CALL_OW 318
51976: IFFALSE 51987
// ComWalk ( i ) ;
51978: LD_VAR 0 1
51982: PPUSH
51983: CALL_OW 138
// SetClass ( i , 2 ) ;
51987: LD_VAR 0 1
51991: PPUSH
51992: LD_INT 2
51994: PPUSH
51995: CALL_OW 336
// end ;
51999: GO 51964
52001: POP
52002: POP
// end ;
52003: PPOPN 2
52005: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
52006: LD_EXP 30
52010: PUSH
52011: LD_EXP 83
52015: AND
52016: IFFALSE 52297
52018: GO 52020
52020: DISABLE
52021: LD_INT 0
52023: PPUSH
52024: PPUSH
52025: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
52026: LD_OWVAR 2
52030: PPUSH
52031: LD_INT 9
52033: PPUSH
52034: LD_INT 1
52036: PPUSH
52037: LD_INT 1
52039: PPUSH
52040: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
52044: LD_INT 9
52046: PPUSH
52047: LD_OWVAR 2
52051: PPUSH
52052: CALL_OW 343
// uc_side := 9 ;
52056: LD_ADDR_OWVAR 20
52060: PUSH
52061: LD_INT 9
52063: ST_TO_ADDR
// uc_nation := 2 ;
52064: LD_ADDR_OWVAR 21
52068: PUSH
52069: LD_INT 2
52071: ST_TO_ADDR
// hc_name := Dark Warrior ;
52072: LD_ADDR_OWVAR 26
52076: PUSH
52077: LD_STRING Dark Warrior
52079: ST_TO_ADDR
// hc_gallery :=  ;
52080: LD_ADDR_OWVAR 33
52084: PUSH
52085: LD_STRING 
52087: ST_TO_ADDR
// hc_noskilllimit := true ;
52088: LD_ADDR_OWVAR 76
52092: PUSH
52093: LD_INT 1
52095: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
52096: LD_ADDR_OWVAR 31
52100: PUSH
52101: LD_INT 30
52103: PUSH
52104: LD_INT 30
52106: PUSH
52107: LD_INT 30
52109: PUSH
52110: LD_INT 30
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: ST_TO_ADDR
// un := CreateHuman ;
52119: LD_ADDR_VAR 0 3
52123: PUSH
52124: CALL_OW 44
52128: ST_TO_ADDR
// hc_noskilllimit := false ;
52129: LD_ADDR_OWVAR 76
52133: PUSH
52134: LD_INT 0
52136: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52137: LD_VAR 0 3
52141: PPUSH
52142: LD_INT 1
52144: PPUSH
52145: CALL_OW 51
// p := 0 ;
52149: LD_ADDR_VAR 0 2
52153: PUSH
52154: LD_INT 0
52156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52157: LD_INT 35
52159: PPUSH
52160: CALL_OW 67
// p := p + 1 ;
52164: LD_ADDR_VAR 0 2
52168: PUSH
52169: LD_VAR 0 2
52173: PUSH
52174: LD_INT 1
52176: PLUS
52177: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
52178: LD_VAR 0 3
52182: PPUSH
52183: CALL_OW 256
52187: PUSH
52188: LD_INT 1000
52190: LESS
52191: IFFALSE 52205
// SetLives ( un , 1000 ) ;
52193: LD_VAR 0 3
52197: PPUSH
52198: LD_INT 1000
52200: PPUSH
52201: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
52205: LD_VAR 0 3
52209: PPUSH
52210: LD_INT 81
52212: PUSH
52213: LD_OWVAR 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 91
52224: PUSH
52225: LD_VAR 0 3
52229: PUSH
52230: LD_INT 30
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PPUSH
52242: CALL_OW 69
52246: PPUSH
52247: LD_VAR 0 3
52251: PPUSH
52252: CALL_OW 74
52256: PPUSH
52257: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
52261: LD_VAR 0 2
52265: PUSH
52266: LD_INT 60
52268: GREATER
52269: PUSH
52270: LD_VAR 0 3
52274: PPUSH
52275: CALL_OW 301
52279: OR
52280: IFFALSE 52157
// if un then
52282: LD_VAR 0 3
52286: IFFALSE 52297
// RemoveUnit ( un ) ;
52288: LD_VAR 0 3
52292: PPUSH
52293: CALL_OW 64
// end ;
52297: PPOPN 3
52299: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
52300: LD_INT 0
52302: PPUSH
52303: PPUSH
52304: PPUSH
52305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52306: LD_ADDR_VAR 0 4
52310: PUSH
52311: LD_INT 22
52313: PUSH
52314: LD_OWVAR 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: LD_INT 30
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 30
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PPUSH
52355: CALL_OW 69
52359: ST_TO_ADDR
// if not tmp then
52360: LD_VAR 0 4
52364: NOT
52365: IFFALSE 52369
// exit ;
52367: GO 52428
// for i in tmp do
52369: LD_ADDR_VAR 0 2
52373: PUSH
52374: LD_VAR 0 4
52378: PUSH
52379: FOR_IN
52380: IFFALSE 52426
// for j = 1 to 3 do
52382: LD_ADDR_VAR 0 3
52386: PUSH
52387: DOUBLE
52388: LD_INT 1
52390: DEC
52391: ST_TO_ADDR
52392: LD_INT 3
52394: PUSH
52395: FOR_TO
52396: IFFALSE 52422
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
52398: LD_VAR 0 2
52402: PPUSH
52403: CALL_OW 274
52407: PPUSH
52408: LD_VAR 0 3
52412: PPUSH
52413: LD_INT 99999
52415: PPUSH
52416: CALL_OW 277
52420: GO 52395
52422: POP
52423: POP
52424: GO 52379
52426: POP
52427: POP
// end ;
52428: LD_VAR 0 1
52432: RET
// export function hHackSetLevel10 ; var i , j ; begin
52433: LD_INT 0
52435: PPUSH
52436: PPUSH
52437: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
52438: LD_ADDR_VAR 0 2
52442: PUSH
52443: LD_INT 21
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PPUSH
52453: CALL_OW 69
52457: PUSH
52458: FOR_IN
52459: IFFALSE 52511
// if IsSelected ( i ) then
52461: LD_VAR 0 2
52465: PPUSH
52466: CALL_OW 306
52470: IFFALSE 52509
// begin for j := 1 to 4 do
52472: LD_ADDR_VAR 0 3
52476: PUSH
52477: DOUBLE
52478: LD_INT 1
52480: DEC
52481: ST_TO_ADDR
52482: LD_INT 4
52484: PUSH
52485: FOR_TO
52486: IFFALSE 52507
// SetSkill ( i , j , 10 ) ;
52488: LD_VAR 0 2
52492: PPUSH
52493: LD_VAR 0 3
52497: PPUSH
52498: LD_INT 10
52500: PPUSH
52501: CALL_OW 237
52505: GO 52485
52507: POP
52508: POP
// end ;
52509: GO 52458
52511: POP
52512: POP
// end ;
52513: LD_VAR 0 1
52517: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
52518: LD_INT 0
52520: PPUSH
52521: PPUSH
52522: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
52523: LD_ADDR_VAR 0 2
52527: PUSH
52528: LD_INT 22
52530: PUSH
52531: LD_OWVAR 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 21
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PPUSH
52554: CALL_OW 69
52558: PUSH
52559: FOR_IN
52560: IFFALSE 52601
// begin for j := 1 to 4 do
52562: LD_ADDR_VAR 0 3
52566: PUSH
52567: DOUBLE
52568: LD_INT 1
52570: DEC
52571: ST_TO_ADDR
52572: LD_INT 4
52574: PUSH
52575: FOR_TO
52576: IFFALSE 52597
// SetSkill ( i , j , 10 ) ;
52578: LD_VAR 0 2
52582: PPUSH
52583: LD_VAR 0 3
52587: PPUSH
52588: LD_INT 10
52590: PPUSH
52591: CALL_OW 237
52595: GO 52575
52597: POP
52598: POP
// end ;
52599: GO 52559
52601: POP
52602: POP
// end ;
52603: LD_VAR 0 1
52607: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
52608: LD_INT 0
52610: PPUSH
// uc_side := your_side ;
52611: LD_ADDR_OWVAR 20
52615: PUSH
52616: LD_OWVAR 2
52620: ST_TO_ADDR
// uc_nation := nation ;
52621: LD_ADDR_OWVAR 21
52625: PUSH
52626: LD_VAR 0 1
52630: ST_TO_ADDR
// InitHc ;
52631: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
52635: LD_INT 0
52637: PPUSH
52638: LD_VAR 0 2
52642: PPUSH
52643: LD_VAR 0 3
52647: PPUSH
52648: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
52652: CALL_OW 44
52656: PPUSH
52657: LD_INT 1
52659: PPUSH
52660: CALL_OW 51
// end ;
52664: LD_VAR 0 4
52668: RET
// export function hHackSpawnVehicle ; begin
52669: LD_INT 0
52671: PPUSH
// uc_side := your_side ;
52672: LD_ADDR_OWVAR 20
52676: PUSH
52677: LD_OWVAR 2
52681: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
52682: LD_ADDR_OWVAR 21
52686: PUSH
52687: LD_INT 1
52689: PPUSH
52690: LD_INT 3
52692: PPUSH
52693: CALL_OW 12
52697: ST_TO_ADDR
// InitVc ;
52698: CALL_OW 20
// case uc_nation of 1 :
52702: LD_OWVAR 21
52706: PUSH
52707: LD_INT 1
52709: DOUBLE
52710: EQUAL
52711: IFTRUE 52715
52713: GO 52859
52715: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
52716: LD_ADDR_OWVAR 37
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: LD_INT 4
52732: PUSH
52733: LD_INT 5
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PPUSH
52746: LD_INT 5
52748: PPUSH
52749: CALL_OW 12
52753: ARRAY
52754: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
52755: LD_ADDR_OWVAR 39
52759: PUSH
52760: LD_INT 1
52762: PPUSH
52763: LD_INT 3
52765: PPUSH
52766: CALL_OW 12
52770: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
52771: LD_ADDR_OWVAR 38
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 3
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PPUSH
52793: LD_INT 3
52795: PPUSH
52796: CALL_OW 12
52800: ARRAY
52801: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
52802: LD_ADDR_OWVAR 40
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 4
52812: PUSH
52813: LD_INT 5
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: LD_INT 7
52821: PUSH
52822: LD_INT 8
52824: PUSH
52825: LD_INT 9
52827: PUSH
52828: LD_INT 10
52830: PUSH
52831: LD_INT 6
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: PPUSH
52848: LD_INT 9
52850: PPUSH
52851: CALL_OW 12
52855: ARRAY
52856: ST_TO_ADDR
// end ; 2 :
52857: GO 53124
52859: LD_INT 2
52861: DOUBLE
52862: EQUAL
52863: IFTRUE 52867
52865: GO 52991
52867: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
52868: LD_ADDR_OWVAR 37
52872: PUSH
52873: LD_INT 11
52875: PUSH
52876: LD_INT 12
52878: PUSH
52879: LD_INT 13
52881: PUSH
52882: LD_INT 14
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: PPUSH
52894: LD_INT 4
52896: PPUSH
52897: CALL_OW 12
52901: ARRAY
52902: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
52903: LD_ADDR_OWVAR 39
52907: PUSH
52908: LD_INT 1
52910: PPUSH
52911: LD_INT 3
52913: PPUSH
52914: CALL_OW 12
52918: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
52919: LD_ADDR_OWVAR 38
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 5
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PPUSH
52941: LD_INT 3
52943: PPUSH
52944: CALL_OW 12
52948: ARRAY
52949: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
52950: LD_ADDR_OWVAR 40
52954: PUSH
52955: LD_INT 24
52957: PUSH
52958: LD_INT 26
52960: PUSH
52961: LD_INT 27
52963: PUSH
52964: LD_INT 28
52966: PUSH
52967: LD_INT 29
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PPUSH
52980: LD_INT 5
52982: PPUSH
52983: CALL_OW 12
52987: ARRAY
52988: ST_TO_ADDR
// end ; 3 :
52989: GO 53124
52991: LD_INT 3
52993: DOUBLE
52994: EQUAL
52995: IFTRUE 52999
52997: GO 53123
52999: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
53000: LD_ADDR_OWVAR 37
53004: PUSH
53005: LD_INT 21
53007: PUSH
53008: LD_INT 23
53010: PUSH
53011: LD_INT 22
53013: PUSH
53014: LD_INT 24
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PPUSH
53026: LD_INT 4
53028: PPUSH
53029: CALL_OW 12
53033: ARRAY
53034: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
53035: LD_ADDR_OWVAR 39
53039: PUSH
53040: LD_INT 1
53042: PPUSH
53043: LD_INT 3
53045: PPUSH
53046: CALL_OW 12
53050: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
53051: LD_ADDR_OWVAR 38
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PPUSH
53069: LD_INT 2
53071: PPUSH
53072: CALL_OW 12
53076: ARRAY
53077: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
53078: LD_ADDR_OWVAR 40
53082: PUSH
53083: LD_INT 42
53085: PUSH
53086: LD_INT 43
53088: PUSH
53089: LD_INT 44
53091: PUSH
53092: LD_INT 46
53094: PUSH
53095: LD_INT 48
53097: PUSH
53098: LD_INT 47
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PPUSH
53112: LD_INT 6
53114: PPUSH
53115: CALL_OW 12
53119: ARRAY
53120: ST_TO_ADDR
// end ; end ;
53121: GO 53124
53123: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
53124: CALL_OW 45
53128: PPUSH
53129: LD_INT 1
53131: PPUSH
53132: CALL_OW 51
// end ;
53136: LD_VAR 0 1
53140: RET
// export hInvincible ; every 1 do
53141: GO 53143
53143: DISABLE
// hInvincible := [ ] ;
53144: LD_ADDR_EXP 84
53148: PUSH
53149: EMPTY
53150: ST_TO_ADDR
53151: END
// every 10 do var i ;
53152: GO 53154
53154: DISABLE
53155: LD_INT 0
53157: PPUSH
// begin enable ;
53158: ENABLE
// if not hInvincible then
53159: LD_EXP 84
53163: NOT
53164: IFFALSE 53168
// exit ;
53166: GO 53212
// for i in hInvincible do
53168: LD_ADDR_VAR 0 1
53172: PUSH
53173: LD_EXP 84
53177: PUSH
53178: FOR_IN
53179: IFFALSE 53210
// if GetLives ( i ) < 1000 then
53181: LD_VAR 0 1
53185: PPUSH
53186: CALL_OW 256
53190: PUSH
53191: LD_INT 1000
53193: LESS
53194: IFFALSE 53208
// SetLives ( i , 1000 ) ;
53196: LD_VAR 0 1
53200: PPUSH
53201: LD_INT 1000
53203: PPUSH
53204: CALL_OW 234
53208: GO 53178
53210: POP
53211: POP
// end ;
53212: PPOPN 1
53214: END
// export function hHackInvincible ; var i ; begin
53215: LD_INT 0
53217: PPUSH
53218: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
53219: LD_ADDR_VAR 0 2
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: LD_INT 21
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 21
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: LIST
53251: PPUSH
53252: CALL_OW 69
53256: PUSH
53257: FOR_IN
53258: IFFALSE 53319
// if IsSelected ( i ) then
53260: LD_VAR 0 2
53264: PPUSH
53265: CALL_OW 306
53269: IFFALSE 53317
// begin if i in hInvincible then
53271: LD_VAR 0 2
53275: PUSH
53276: LD_EXP 84
53280: IN
53281: IFFALSE 53301
// hInvincible := hInvincible diff i else
53283: LD_ADDR_EXP 84
53287: PUSH
53288: LD_EXP 84
53292: PUSH
53293: LD_VAR 0 2
53297: DIFF
53298: ST_TO_ADDR
53299: GO 53317
// hInvincible := hInvincible union i ;
53301: LD_ADDR_EXP 84
53305: PUSH
53306: LD_EXP 84
53310: PUSH
53311: LD_VAR 0 2
53315: UNION
53316: ST_TO_ADDR
// end ;
53317: GO 53257
53319: POP
53320: POP
// end ;
53321: LD_VAR 0 1
53325: RET
// export function hHackInvisible ; var i , j ; begin
53326: LD_INT 0
53328: PPUSH
53329: PPUSH
53330: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
53331: LD_ADDR_VAR 0 2
53335: PUSH
53336: LD_INT 21
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PPUSH
53346: CALL_OW 69
53350: PUSH
53351: FOR_IN
53352: IFFALSE 53376
// if IsSelected ( i ) then
53354: LD_VAR 0 2
53358: PPUSH
53359: CALL_OW 306
53363: IFFALSE 53374
// ComForceInvisible ( i ) ;
53365: LD_VAR 0 2
53369: PPUSH
53370: CALL_OW 496
53374: GO 53351
53376: POP
53377: POP
// end ;
53378: LD_VAR 0 1
53382: RET
// export function hHackChangeYourSide ; begin
53383: LD_INT 0
53385: PPUSH
// if your_side = 8 then
53386: LD_OWVAR 2
53390: PUSH
53391: LD_INT 8
53393: EQUAL
53394: IFFALSE 53406
// your_side := 0 else
53396: LD_ADDR_OWVAR 2
53400: PUSH
53401: LD_INT 0
53403: ST_TO_ADDR
53404: GO 53420
// your_side := your_side + 1 ;
53406: LD_ADDR_OWVAR 2
53410: PUSH
53411: LD_OWVAR 2
53415: PUSH
53416: LD_INT 1
53418: PLUS
53419: ST_TO_ADDR
// end ;
53420: LD_VAR 0 1
53424: RET
// export function hHackChangeUnitSide ; var i , j ; begin
53425: LD_INT 0
53427: PPUSH
53428: PPUSH
53429: PPUSH
// for i in all_units do
53430: LD_ADDR_VAR 0 2
53434: PUSH
53435: LD_OWVAR 3
53439: PUSH
53440: FOR_IN
53441: IFFALSE 53519
// if IsSelected ( i ) then
53443: LD_VAR 0 2
53447: PPUSH
53448: CALL_OW 306
53452: IFFALSE 53517
// begin j := GetSide ( i ) ;
53454: LD_ADDR_VAR 0 3
53458: PUSH
53459: LD_VAR 0 2
53463: PPUSH
53464: CALL_OW 255
53468: ST_TO_ADDR
// if j = 8 then
53469: LD_VAR 0 3
53473: PUSH
53474: LD_INT 8
53476: EQUAL
53477: IFFALSE 53489
// j := 0 else
53479: LD_ADDR_VAR 0 3
53483: PUSH
53484: LD_INT 0
53486: ST_TO_ADDR
53487: GO 53503
// j := j + 1 ;
53489: LD_ADDR_VAR 0 3
53493: PUSH
53494: LD_VAR 0 3
53498: PUSH
53499: LD_INT 1
53501: PLUS
53502: ST_TO_ADDR
// SetSide ( i , j ) ;
53503: LD_VAR 0 2
53507: PPUSH
53508: LD_VAR 0 3
53512: PPUSH
53513: CALL_OW 235
// end ;
53517: GO 53440
53519: POP
53520: POP
// end ;
53521: LD_VAR 0 1
53525: RET
// export function hHackFog ; begin
53526: LD_INT 0
53528: PPUSH
// FogOff ( true ) ;
53529: LD_INT 1
53531: PPUSH
53532: CALL_OW 344
// end ;
53536: LD_VAR 0 1
53540: RET
// export function hHackApeman ; begin
53541: LD_INT 0
53543: PPUSH
// uc_side := your_side ;
53544: LD_ADDR_OWVAR 20
53548: PUSH
53549: LD_OWVAR 2
53553: ST_TO_ADDR
// uc_nation := 0 ;
53554: LD_ADDR_OWVAR 21
53558: PUSH
53559: LD_INT 0
53561: ST_TO_ADDR
// hc_name :=  ;
53562: LD_ADDR_OWVAR 26
53566: PUSH
53567: LD_STRING 
53569: ST_TO_ADDR
// hc_gallery :=  ;
53570: LD_ADDR_OWVAR 33
53574: PUSH
53575: LD_STRING 
53577: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
53578: LD_ADDR_OWVAR 31
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: ST_TO_ADDR
// hc_class := class_apeman ;
53601: LD_ADDR_OWVAR 28
53605: PUSH
53606: LD_INT 12
53608: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
53609: CALL_OW 44
53613: PPUSH
53614: LD_INT 1
53616: PPUSH
53617: CALL_OW 51
// end ;
53621: LD_VAR 0 1
53625: RET
// export function hHackBoom ; begin
53626: LD_INT 0
53628: PPUSH
// uc_side := your_side ;
53629: LD_ADDR_OWVAR 20
53633: PUSH
53634: LD_OWVAR 2
53638: ST_TO_ADDR
// uc_nation := 1 ;
53639: LD_ADDR_OWVAR 21
53643: PUSH
53644: LD_INT 1
53646: ST_TO_ADDR
// vc_chassis := us_morphling ;
53647: LD_ADDR_OWVAR 37
53651: PUSH
53652: LD_INT 5
53654: ST_TO_ADDR
// vc_engine := engine_siberite ;
53655: LD_ADDR_OWVAR 39
53659: PUSH
53660: LD_INT 3
53662: ST_TO_ADDR
// vc_control := control_computer ;
53663: LD_ADDR_OWVAR 38
53667: PUSH
53668: LD_INT 3
53670: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
53671: LD_ADDR_OWVAR 40
53675: PUSH
53676: LD_INT 8
53678: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
53679: CALL_OW 45
53683: PPUSH
53684: LD_INT 1
53686: PPUSH
53687: CALL_OW 51
// end ; end_of_file
53691: LD_VAR 0 1
53695: RET
