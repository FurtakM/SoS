// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 71854 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL 33369 0 2
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: PUSH
17981: LD_VAR 0 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 34
17991: PUSH
17992: LD_INT 46
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 34
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 34
18011: PUSH
18012: LD_INT 45
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: IN
18033: AND
18034: IFFALSE 18052
// ru_reserve := ru_reserve ^ un ;
18036: LD_ADDR_EXP 9
18040: PUSH
18041: LD_EXP 9
18045: PUSH
18046: LD_VAR 0 1
18050: ADD
18051: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 255
18061: PUSH
18062: LD_INT 3
18064: EQUAL
18065: PUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 264
18075: PUSH
18076: LD_INT 48
18078: PUSH
18079: LD_INT 52
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: IN
18086: NOT
18087: AND
18088: IFFALSE 18105
// ComMoveXY ( un , 65 , 60 ) ;
18090: LD_VAR 0 1
18094: PPUSH
18095: LD_INT 65
18097: PPUSH
18098: LD_INT 60
18100: PPUSH
18101: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18105: LD_VAR 0 1
18109: PUSH
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 48
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: IN
18139: IFFALSE 18192
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18141: LD_INT 12
18143: PPUSH
18144: LD_INT 22
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 70
18158: IFFALSE 18177
// ComAttackPlace ( un , 98 , 10 ) else
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_INT 98
18167: PPUSH
18168: LD_INT 10
18170: PPUSH
18171: CALL_OW 116
18175: GO 18192
// ComAttackPlace ( un , 134 , 99 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 134
18184: PPUSH
18185: LD_INT 99
18187: PPUSH
18188: CALL_OW 116
// end ;
18192: PPOPN 2
18194: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL 33247 0 1
// if GetChassis ( un ) = 25 then
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 265
18213: PUSH
18214: LD_INT 25
18216: EQUAL
18217: IFFALSE 18226
// SetAchievement ( ACH_BEH ) ;
18219: LD_STRING ACH_BEH
18221: PPUSH
18222: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18226: LD_VAR 0 1
18230: PUSH
18231: LD_INT 22
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 21
18243: PUSH
18244: LD_INT 3
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: IN
18260: PUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 266
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 29
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 26
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: IN
18289: NOT
18290: AND
18291: IFFALSE 18377
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18293: LD_ADDR_EXP 13
18297: PUSH
18298: LD_EXP 13
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 266
18312: ADD
18313: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18314: LD_ADDR_EXP 13
18318: PUSH
18319: LD_EXP 13
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 250
18333: ADD
18334: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18335: LD_ADDR_EXP 13
18339: PUSH
18340: LD_EXP 13
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 251
18354: ADD
18355: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18356: LD_ADDR_EXP 13
18360: PUSH
18361: LD_EXP 13
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 254
18375: ADD
18376: ST_TO_ADDR
// end ; if un in ru_attack_list then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_EXP 10
18386: IN
18387: IFFALSE 18405
// ru_attack_list := ru_attack_list diff un ;
18389: LD_ADDR_EXP 10
18393: PUSH
18394: LD_EXP 10
18398: PUSH
18399: LD_VAR 0 1
18403: DIFF
18404: ST_TO_ADDR
// if un in ru_protector then
18405: LD_VAR 0 1
18409: PUSH
18410: LD_EXP 17
18414: IN
18415: IFFALSE 18433
// ru_protector := ru_protector diff un ;
18417: LD_ADDR_EXP 17
18421: PUSH
18422: LD_EXP 17
18426: PUSH
18427: LD_VAR 0 1
18431: DIFF
18432: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 266
18442: PUSH
18443: LD_INT 30
18445: EQUAL
18446: PUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: LD_INT 1
18459: EQUAL
18460: AND
18461: IFFALSE 18471
// mine_ck := true ;
18463: LD_ADDR_EXP 35
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// end ;
18471: PPOPN 1
18473: END
// on BuildingComplete ( un ) do var i ;
18474: LD_INT 0
18476: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 255
18486: PUSH
18487: LD_INT 1
18489: EQUAL
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 266
18500: PUSH
18501: LD_INT 0
18503: EQUAL
18504: AND
18505: IFFALSE 18515
// depotConstructed := true ;
18507: LD_ADDR_EXP 2
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 255
18524: PUSH
18525: LD_INT 1
18527: EQUAL
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 266
18538: PUSH
18539: LD_INT 30
18541: EQUAL
18542: AND
18543: IFFALSE 18553
// mine_constructed := true ;
18545: LD_ADDR_EXP 37
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: LD_INT 3
18565: EQUAL
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 266
18576: PUSH
18577: LD_INT 0
18579: EQUAL
18580: AND
18581: IFFALSE 18638
// begin for i = 1 to 2 do
18583: LD_ADDR_VAR 0 2
18587: PUSH
18588: DOUBLE
18589: LD_INT 1
18591: DEC
18592: ST_TO_ADDR
18593: LD_INT 2
18595: PUSH
18596: FOR_TO
18597: IFFALSE 18636
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18599: LD_EXP 20
18603: PUSH
18604: LD_VAR 0 2
18608: ARRAY
18609: PPUSH
18610: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18614: LD_EXP 20
18618: PUSH
18619: LD_VAR 0 2
18623: ARRAY
18624: PPUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 180
// end ;
18634: GO 18596
18636: POP
18637: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 255
18647: PUSH
18648: LD_INT 3
18650: EQUAL
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 266
18661: PUSH
18662: LD_EXP 13
18666: IN
18667: AND
18668: IFFALSE 18708
// for i = 1 to 4 do
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: DOUBLE
18676: LD_INT 1
18678: DEC
18679: ST_TO_ADDR
18680: LD_INT 4
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18706
// ru_blist := Delete ( ru_blist , 1 ) ;
18686: LD_ADDR_EXP 13
18690: PUSH
18691: LD_EXP 13
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 3
18703: ST_TO_ADDR
18704: GO 18683
18706: POP
18707: POP
// end ;
18708: PPOPN 2
18710: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18711: LD_VAR 0 1
18715: PPUSH
18716: LD_VAR 0 2
18720: PPUSH
18721: LD_VAR 0 3
18725: PPUSH
18726: CALL 33345 0 3
// end ;
18730: PPOPN 3
18732: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL 33353 0 1
// end ; end_of_file
18742: PPOPN 1
18744: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18745: LD_INT 0
18747: PPUSH
// ar_miner := 81 ;
18748: LD_ADDR_EXP 50
18752: PUSH
18753: LD_INT 81
18755: ST_TO_ADDR
// ar_crane := 88 ;
18756: LD_ADDR_EXP 49
18760: PUSH
18761: LD_INT 88
18763: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18764: LD_ADDR_EXP 44
18768: PUSH
18769: LD_INT 89
18771: ST_TO_ADDR
// us_hack := 99 ;
18772: LD_ADDR_EXP 45
18776: PUSH
18777: LD_INT 99
18779: ST_TO_ADDR
// us_artillery := 97 ;
18780: LD_ADDR_EXP 46
18784: PUSH
18785: LD_INT 97
18787: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18788: LD_ADDR_EXP 47
18792: PUSH
18793: LD_INT 91
18795: ST_TO_ADDR
// ar_mortar := 92 ;
18796: LD_ADDR_EXP 48
18800: PUSH
18801: LD_INT 92
18803: ST_TO_ADDR
// ru_radar := 98 ;
18804: LD_ADDR_EXP 43
18808: PUSH
18809: LD_INT 98
18811: ST_TO_ADDR
// tech_Artillery := 80 ;
18812: LD_ADDR_EXP 51
18816: PUSH
18817: LD_INT 80
18819: ST_TO_ADDR
// tech_RadMat := 81 ;
18820: LD_ADDR_EXP 52
18824: PUSH
18825: LD_INT 81
18827: ST_TO_ADDR
// tech_BasicTools := 82 ;
18828: LD_ADDR_EXP 53
18832: PUSH
18833: LD_INT 82
18835: ST_TO_ADDR
// tech_Cargo := 83 ;
18836: LD_ADDR_EXP 54
18840: PUSH
18841: LD_INT 83
18843: ST_TO_ADDR
// tech_Track := 84 ;
18844: LD_ADDR_EXP 55
18848: PUSH
18849: LD_INT 84
18851: ST_TO_ADDR
// tech_Crane := 85 ;
18852: LD_ADDR_EXP 56
18856: PUSH
18857: LD_INT 85
18859: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18860: LD_ADDR_EXP 57
18864: PUSH
18865: LD_INT 86
18867: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18868: LD_ADDR_EXP 58
18872: PUSH
18873: LD_INT 87
18875: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18876: LD_ADDR_EXP 59
18880: PUSH
18881: LD_INT 88
18883: ST_TO_ADDR
// class_mastodont := 31 ;
18884: LD_ADDR_EXP 60
18888: PUSH
18889: LD_INT 31
18891: ST_TO_ADDR
// class_horse := 21 ;
18892: LD_ADDR_EXP 61
18896: PUSH
18897: LD_INT 21
18899: ST_TO_ADDR
// end ;
18900: LD_VAR 0 1
18904: RET
// every 1 do
18905: GO 18907
18907: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18908: CALL 18745 0 0
18912: END
// every 0 0$1 do
18913: GO 18915
18915: DISABLE
// begin enable ;
18916: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18917: LD_STRING updateTimer(
18919: PUSH
18920: LD_OWVAR 1
18924: STR
18925: PUSH
18926: LD_STRING );
18928: STR
18929: PPUSH
18930: CALL_OW 559
// end ;
18934: END
// export function SOS_MapStart ( ) ; begin
18935: LD_INT 0
18937: PPUSH
// if streamModeActive then
18938: LD_EXP 62
18942: IFFALSE 18951
// DefineStreamItems ( true ) ;
18944: LD_INT 1
18946: PPUSH
18947: CALL 20601 0 1
// UpdateFactoryWaypoints ( ) ;
18951: CALL 34185 0 0
// end ;
18955: LD_VAR 0 1
18959: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18960: LD_INT 0
18962: PPUSH
// if p2 = 100 then
18963: LD_VAR 0 2
18967: PUSH
18968: LD_INT 100
18970: EQUAL
18971: IFFALSE 19974
// begin if not StreamModeActive then
18973: LD_EXP 62
18977: NOT
18978: IFFALSE 18988
// StreamModeActive := true ;
18980: LD_ADDR_EXP 62
18984: PUSH
18985: LD_INT 1
18987: ST_TO_ADDR
// if p3 = 0 then
18988: LD_VAR 0 3
18992: PUSH
18993: LD_INT 0
18995: EQUAL
18996: IFFALSE 19002
// InitStreamMode ;
18998: CALL 20137 0 0
// if p3 = 1 then
19002: LD_VAR 0 3
19006: PUSH
19007: LD_INT 1
19009: EQUAL
19010: IFFALSE 19020
// sRocket := true ;
19012: LD_ADDR_EXP 67
19016: PUSH
19017: LD_INT 1
19019: ST_TO_ADDR
// if p3 = 2 then
19020: LD_VAR 0 3
19024: PUSH
19025: LD_INT 2
19027: EQUAL
19028: IFFALSE 19038
// sSpeed := true ;
19030: LD_ADDR_EXP 66
19034: PUSH
19035: LD_INT 1
19037: ST_TO_ADDR
// if p3 = 3 then
19038: LD_VAR 0 3
19042: PUSH
19043: LD_INT 3
19045: EQUAL
19046: IFFALSE 19056
// sEngine := true ;
19048: LD_ADDR_EXP 68
19052: PUSH
19053: LD_INT 1
19055: ST_TO_ADDR
// if p3 = 4 then
19056: LD_VAR 0 3
19060: PUSH
19061: LD_INT 4
19063: EQUAL
19064: IFFALSE 19074
// sSpec := true ;
19066: LD_ADDR_EXP 65
19070: PUSH
19071: LD_INT 1
19073: ST_TO_ADDR
// if p3 = 5 then
19074: LD_VAR 0 3
19078: PUSH
19079: LD_INT 5
19081: EQUAL
19082: IFFALSE 19092
// sLevel := true ;
19084: LD_ADDR_EXP 69
19088: PUSH
19089: LD_INT 1
19091: ST_TO_ADDR
// if p3 = 6 then
19092: LD_VAR 0 3
19096: PUSH
19097: LD_INT 6
19099: EQUAL
19100: IFFALSE 19110
// sArmoury := true ;
19102: LD_ADDR_EXP 70
19106: PUSH
19107: LD_INT 1
19109: ST_TO_ADDR
// if p3 = 7 then
19110: LD_VAR 0 3
19114: PUSH
19115: LD_INT 7
19117: EQUAL
19118: IFFALSE 19128
// sRadar := true ;
19120: LD_ADDR_EXP 71
19124: PUSH
19125: LD_INT 1
19127: ST_TO_ADDR
// if p3 = 8 then
19128: LD_VAR 0 3
19132: PUSH
19133: LD_INT 8
19135: EQUAL
19136: IFFALSE 19146
// sBunker := true ;
19138: LD_ADDR_EXP 72
19142: PUSH
19143: LD_INT 1
19145: ST_TO_ADDR
// if p3 = 9 then
19146: LD_VAR 0 3
19150: PUSH
19151: LD_INT 9
19153: EQUAL
19154: IFFALSE 19164
// sHack := true ;
19156: LD_ADDR_EXP 73
19160: PUSH
19161: LD_INT 1
19163: ST_TO_ADDR
// if p3 = 10 then
19164: LD_VAR 0 3
19168: PUSH
19169: LD_INT 10
19171: EQUAL
19172: IFFALSE 19182
// sFire := true ;
19174: LD_ADDR_EXP 74
19178: PUSH
19179: LD_INT 1
19181: ST_TO_ADDR
// if p3 = 11 then
19182: LD_VAR 0 3
19186: PUSH
19187: LD_INT 11
19189: EQUAL
19190: IFFALSE 19200
// sRefresh := true ;
19192: LD_ADDR_EXP 75
19196: PUSH
19197: LD_INT 1
19199: ST_TO_ADDR
// if p3 = 12 then
19200: LD_VAR 0 3
19204: PUSH
19205: LD_INT 12
19207: EQUAL
19208: IFFALSE 19218
// sExp := true ;
19210: LD_ADDR_EXP 76
19214: PUSH
19215: LD_INT 1
19217: ST_TO_ADDR
// if p3 = 13 then
19218: LD_VAR 0 3
19222: PUSH
19223: LD_INT 13
19225: EQUAL
19226: IFFALSE 19236
// sDepot := true ;
19228: LD_ADDR_EXP 77
19232: PUSH
19233: LD_INT 1
19235: ST_TO_ADDR
// if p3 = 14 then
19236: LD_VAR 0 3
19240: PUSH
19241: LD_INT 14
19243: EQUAL
19244: IFFALSE 19254
// sFlag := true ;
19246: LD_ADDR_EXP 78
19250: PUSH
19251: LD_INT 1
19253: ST_TO_ADDR
// if p3 = 15 then
19254: LD_VAR 0 3
19258: PUSH
19259: LD_INT 15
19261: EQUAL
19262: IFFALSE 19272
// sKamikadze := true ;
19264: LD_ADDR_EXP 86
19268: PUSH
19269: LD_INT 1
19271: ST_TO_ADDR
// if p3 = 16 then
19272: LD_VAR 0 3
19276: PUSH
19277: LD_INT 16
19279: EQUAL
19280: IFFALSE 19290
// sTroll := true ;
19282: LD_ADDR_EXP 87
19286: PUSH
19287: LD_INT 1
19289: ST_TO_ADDR
// if p3 = 17 then
19290: LD_VAR 0 3
19294: PUSH
19295: LD_INT 17
19297: EQUAL
19298: IFFALSE 19308
// sSlow := true ;
19300: LD_ADDR_EXP 88
19304: PUSH
19305: LD_INT 1
19307: ST_TO_ADDR
// if p3 = 18 then
19308: LD_VAR 0 3
19312: PUSH
19313: LD_INT 18
19315: EQUAL
19316: IFFALSE 19326
// sLack := true ;
19318: LD_ADDR_EXP 89
19322: PUSH
19323: LD_INT 1
19325: ST_TO_ADDR
// if p3 = 19 then
19326: LD_VAR 0 3
19330: PUSH
19331: LD_INT 19
19333: EQUAL
19334: IFFALSE 19344
// sTank := true ;
19336: LD_ADDR_EXP 91
19340: PUSH
19341: LD_INT 1
19343: ST_TO_ADDR
// if p3 = 20 then
19344: LD_VAR 0 3
19348: PUSH
19349: LD_INT 20
19351: EQUAL
19352: IFFALSE 19362
// sRemote := true ;
19354: LD_ADDR_EXP 92
19358: PUSH
19359: LD_INT 1
19361: ST_TO_ADDR
// if p3 = 21 then
19362: LD_VAR 0 3
19366: PUSH
19367: LD_INT 21
19369: EQUAL
19370: IFFALSE 19380
// sPowell := true ;
19372: LD_ADDR_EXP 93
19376: PUSH
19377: LD_INT 1
19379: ST_TO_ADDR
// if p3 = 22 then
19380: LD_VAR 0 3
19384: PUSH
19385: LD_INT 22
19387: EQUAL
19388: IFFALSE 19398
// sTeleport := true ;
19390: LD_ADDR_EXP 96
19394: PUSH
19395: LD_INT 1
19397: ST_TO_ADDR
// if p3 = 23 then
19398: LD_VAR 0 3
19402: PUSH
19403: LD_INT 23
19405: EQUAL
19406: IFFALSE 19416
// sOilTower := true ;
19408: LD_ADDR_EXP 98
19412: PUSH
19413: LD_INT 1
19415: ST_TO_ADDR
// if p3 = 24 then
19416: LD_VAR 0 3
19420: PUSH
19421: LD_INT 24
19423: EQUAL
19424: IFFALSE 19434
// sShovel := true ;
19426: LD_ADDR_EXP 99
19430: PUSH
19431: LD_INT 1
19433: ST_TO_ADDR
// if p3 = 25 then
19434: LD_VAR 0 3
19438: PUSH
19439: LD_INT 25
19441: EQUAL
19442: IFFALSE 19452
// sSheik := true ;
19444: LD_ADDR_EXP 100
19448: PUSH
19449: LD_INT 1
19451: ST_TO_ADDR
// if p3 = 26 then
19452: LD_VAR 0 3
19456: PUSH
19457: LD_INT 26
19459: EQUAL
19460: IFFALSE 19470
// sEarthquake := true ;
19462: LD_ADDR_EXP 102
19466: PUSH
19467: LD_INT 1
19469: ST_TO_ADDR
// if p3 = 27 then
19470: LD_VAR 0 3
19474: PUSH
19475: LD_INT 27
19477: EQUAL
19478: IFFALSE 19488
// sAI := true ;
19480: LD_ADDR_EXP 103
19484: PUSH
19485: LD_INT 1
19487: ST_TO_ADDR
// if p3 = 28 then
19488: LD_VAR 0 3
19492: PUSH
19493: LD_INT 28
19495: EQUAL
19496: IFFALSE 19506
// sCargo := true ;
19498: LD_ADDR_EXP 106
19502: PUSH
19503: LD_INT 1
19505: ST_TO_ADDR
// if p3 = 29 then
19506: LD_VAR 0 3
19510: PUSH
19511: LD_INT 29
19513: EQUAL
19514: IFFALSE 19524
// sDLaser := true ;
19516: LD_ADDR_EXP 107
19520: PUSH
19521: LD_INT 1
19523: ST_TO_ADDR
// if p3 = 30 then
19524: LD_VAR 0 3
19528: PUSH
19529: LD_INT 30
19531: EQUAL
19532: IFFALSE 19542
// sExchange := true ;
19534: LD_ADDR_EXP 108
19538: PUSH
19539: LD_INT 1
19541: ST_TO_ADDR
// if p3 = 31 then
19542: LD_VAR 0 3
19546: PUSH
19547: LD_INT 31
19549: EQUAL
19550: IFFALSE 19560
// sFac := true ;
19552: LD_ADDR_EXP 109
19556: PUSH
19557: LD_INT 1
19559: ST_TO_ADDR
// if p3 = 32 then
19560: LD_VAR 0 3
19564: PUSH
19565: LD_INT 32
19567: EQUAL
19568: IFFALSE 19578
// sPower := true ;
19570: LD_ADDR_EXP 110
19574: PUSH
19575: LD_INT 1
19577: ST_TO_ADDR
// if p3 = 33 then
19578: LD_VAR 0 3
19582: PUSH
19583: LD_INT 33
19585: EQUAL
19586: IFFALSE 19596
// sRandom := true ;
19588: LD_ADDR_EXP 111
19592: PUSH
19593: LD_INT 1
19595: ST_TO_ADDR
// if p3 = 34 then
19596: LD_VAR 0 3
19600: PUSH
19601: LD_INT 34
19603: EQUAL
19604: IFFALSE 19614
// sShield := true ;
19606: LD_ADDR_EXP 112
19610: PUSH
19611: LD_INT 1
19613: ST_TO_ADDR
// if p3 = 35 then
19614: LD_VAR 0 3
19618: PUSH
19619: LD_INT 35
19621: EQUAL
19622: IFFALSE 19632
// sTime := true ;
19624: LD_ADDR_EXP 113
19628: PUSH
19629: LD_INT 1
19631: ST_TO_ADDR
// if p3 = 36 then
19632: LD_VAR 0 3
19636: PUSH
19637: LD_INT 36
19639: EQUAL
19640: IFFALSE 19650
// sTools := true ;
19642: LD_ADDR_EXP 114
19646: PUSH
19647: LD_INT 1
19649: ST_TO_ADDR
// if p3 = 101 then
19650: LD_VAR 0 3
19654: PUSH
19655: LD_INT 101
19657: EQUAL
19658: IFFALSE 19668
// sSold := true ;
19660: LD_ADDR_EXP 79
19664: PUSH
19665: LD_INT 1
19667: ST_TO_ADDR
// if p3 = 102 then
19668: LD_VAR 0 3
19672: PUSH
19673: LD_INT 102
19675: EQUAL
19676: IFFALSE 19686
// sDiff := true ;
19678: LD_ADDR_EXP 80
19682: PUSH
19683: LD_INT 1
19685: ST_TO_ADDR
// if p3 = 103 then
19686: LD_VAR 0 3
19690: PUSH
19691: LD_INT 103
19693: EQUAL
19694: IFFALSE 19704
// sFog := true ;
19696: LD_ADDR_EXP 83
19700: PUSH
19701: LD_INT 1
19703: ST_TO_ADDR
// if p3 = 104 then
19704: LD_VAR 0 3
19708: PUSH
19709: LD_INT 104
19711: EQUAL
19712: IFFALSE 19722
// sReset := true ;
19714: LD_ADDR_EXP 84
19718: PUSH
19719: LD_INT 1
19721: ST_TO_ADDR
// if p3 = 105 then
19722: LD_VAR 0 3
19726: PUSH
19727: LD_INT 105
19729: EQUAL
19730: IFFALSE 19740
// sSun := true ;
19732: LD_ADDR_EXP 85
19736: PUSH
19737: LD_INT 1
19739: ST_TO_ADDR
// if p3 = 106 then
19740: LD_VAR 0 3
19744: PUSH
19745: LD_INT 106
19747: EQUAL
19748: IFFALSE 19758
// sTiger := true ;
19750: LD_ADDR_EXP 81
19754: PUSH
19755: LD_INT 1
19757: ST_TO_ADDR
// if p3 = 107 then
19758: LD_VAR 0 3
19762: PUSH
19763: LD_INT 107
19765: EQUAL
19766: IFFALSE 19776
// sBomb := true ;
19768: LD_ADDR_EXP 82
19772: PUSH
19773: LD_INT 1
19775: ST_TO_ADDR
// if p3 = 108 then
19776: LD_VAR 0 3
19780: PUSH
19781: LD_INT 108
19783: EQUAL
19784: IFFALSE 19794
// sWound := true ;
19786: LD_ADDR_EXP 90
19790: PUSH
19791: LD_INT 1
19793: ST_TO_ADDR
// if p3 = 109 then
19794: LD_VAR 0 3
19798: PUSH
19799: LD_INT 109
19801: EQUAL
19802: IFFALSE 19812
// sBetray := true ;
19804: LD_ADDR_EXP 94
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
// if p3 = 110 then
19812: LD_VAR 0 3
19816: PUSH
19817: LD_INT 110
19819: EQUAL
19820: IFFALSE 19830
// sContamin := true ;
19822: LD_ADDR_EXP 95
19826: PUSH
19827: LD_INT 1
19829: ST_TO_ADDR
// if p3 = 111 then
19830: LD_VAR 0 3
19834: PUSH
19835: LD_INT 111
19837: EQUAL
19838: IFFALSE 19848
// sOil := true ;
19840: LD_ADDR_EXP 97
19844: PUSH
19845: LD_INT 1
19847: ST_TO_ADDR
// if p3 = 112 then
19848: LD_VAR 0 3
19852: PUSH
19853: LD_INT 112
19855: EQUAL
19856: IFFALSE 19866
// sStu := true ;
19858: LD_ADDR_EXP 101
19862: PUSH
19863: LD_INT 1
19865: ST_TO_ADDR
// if p3 = 113 then
19866: LD_VAR 0 3
19870: PUSH
19871: LD_INT 113
19873: EQUAL
19874: IFFALSE 19884
// sBazooka := true ;
19876: LD_ADDR_EXP 104
19880: PUSH
19881: LD_INT 1
19883: ST_TO_ADDR
// if p3 = 114 then
19884: LD_VAR 0 3
19888: PUSH
19889: LD_INT 114
19891: EQUAL
19892: IFFALSE 19902
// sMortar := true ;
19894: LD_ADDR_EXP 105
19898: PUSH
19899: LD_INT 1
19901: ST_TO_ADDR
// if p3 = 115 then
19902: LD_VAR 0 3
19906: PUSH
19907: LD_INT 115
19909: EQUAL
19910: IFFALSE 19920
// sRanger := true ;
19912: LD_ADDR_EXP 115
19916: PUSH
19917: LD_INT 1
19919: ST_TO_ADDR
// if p3 = 116 then
19920: LD_VAR 0 3
19924: PUSH
19925: LD_INT 116
19927: EQUAL
19928: IFFALSE 19938
// sComputer := true ;
19930: LD_ADDR_EXP 116
19934: PUSH
19935: LD_INT 1
19937: ST_TO_ADDR
// if p3 = 117 then
19938: LD_VAR 0 3
19942: PUSH
19943: LD_INT 117
19945: EQUAL
19946: IFFALSE 19956
// s30 := true ;
19948: LD_ADDR_EXP 117
19952: PUSH
19953: LD_INT 1
19955: ST_TO_ADDR
// if p3 = 118 then
19956: LD_VAR 0 3
19960: PUSH
19961: LD_INT 118
19963: EQUAL
19964: IFFALSE 19974
// s60 := true ;
19966: LD_ADDR_EXP 118
19970: PUSH
19971: LD_INT 1
19973: ST_TO_ADDR
// end ; if p2 = 101 then
19974: LD_VAR 0 2
19978: PUSH
19979: LD_INT 101
19981: EQUAL
19982: IFFALSE 20110
// begin case p3 of 1 :
19984: LD_VAR 0 3
19988: PUSH
19989: LD_INT 1
19991: DOUBLE
19992: EQUAL
19993: IFTRUE 19997
19995: GO 20004
19997: POP
// hHackUnlimitedResources ; 2 :
19998: CALL 32208 0 0
20002: GO 20110
20004: LD_INT 2
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20019
20012: POP
// hHackSetLevel10 ; 3 :
20013: CALL 32341 0 0
20017: GO 20110
20019: LD_INT 3
20021: DOUBLE
20022: EQUAL
20023: IFTRUE 20027
20025: GO 20034
20027: POP
// hHackSetLevel10YourUnits ; 4 :
20028: CALL 32426 0 0
20032: GO 20110
20034: LD_INT 4
20036: DOUBLE
20037: EQUAL
20038: IFTRUE 20042
20040: GO 20049
20042: POP
// hHackInvincible ; 5 :
20043: CALL 32874 0 0
20047: GO 20110
20049: LD_INT 5
20051: DOUBLE
20052: EQUAL
20053: IFTRUE 20057
20055: GO 20064
20057: POP
// hHackInvisible ; 6 :
20058: CALL 32985 0 0
20062: GO 20110
20064: LD_INT 6
20066: DOUBLE
20067: EQUAL
20068: IFTRUE 20072
20070: GO 20079
20072: POP
// hHackChangeYourSide ; 7 :
20073: CALL 33042 0 0
20077: GO 20110
20079: LD_INT 7
20081: DOUBLE
20082: EQUAL
20083: IFTRUE 20087
20085: GO 20094
20087: POP
// hHackChangeUnitSide ; 8 :
20088: CALL 33084 0 0
20092: GO 20110
20094: LD_INT 8
20096: DOUBLE
20097: EQUAL
20098: IFTRUE 20102
20100: GO 20109
20102: POP
// hHackFog ; end ;
20103: CALL 33185 0 0
20107: GO 20110
20109: POP
// end ; end ;
20110: LD_VAR 0 7
20114: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20115: GO 20117
20117: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20118: LD_STRING initStreamRollete();
20120: PPUSH
20121: CALL_OW 559
// InitStreamMode ;
20125: CALL 20137 0 0
// DefineStreamItems ( false ) ;
20129: LD_INT 0
20131: PPUSH
20132: CALL 20601 0 1
// end ;
20136: END
// function InitStreamMode ; begin
20137: LD_INT 0
20139: PPUSH
// streamModeActive := false ;
20140: LD_ADDR_EXP 62
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// normalCounter := 36 ;
20148: LD_ADDR_EXP 63
20152: PUSH
20153: LD_INT 36
20155: ST_TO_ADDR
// hardcoreCounter := 18 ;
20156: LD_ADDR_EXP 64
20160: PUSH
20161: LD_INT 18
20163: ST_TO_ADDR
// sRocket := false ;
20164: LD_ADDR_EXP 67
20168: PUSH
20169: LD_INT 0
20171: ST_TO_ADDR
// sSpeed := false ;
20172: LD_ADDR_EXP 66
20176: PUSH
20177: LD_INT 0
20179: ST_TO_ADDR
// sEngine := false ;
20180: LD_ADDR_EXP 68
20184: PUSH
20185: LD_INT 0
20187: ST_TO_ADDR
// sSpec := false ;
20188: LD_ADDR_EXP 65
20192: PUSH
20193: LD_INT 0
20195: ST_TO_ADDR
// sLevel := false ;
20196: LD_ADDR_EXP 69
20200: PUSH
20201: LD_INT 0
20203: ST_TO_ADDR
// sArmoury := false ;
20204: LD_ADDR_EXP 70
20208: PUSH
20209: LD_INT 0
20211: ST_TO_ADDR
// sRadar := false ;
20212: LD_ADDR_EXP 71
20216: PUSH
20217: LD_INT 0
20219: ST_TO_ADDR
// sBunker := false ;
20220: LD_ADDR_EXP 72
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// sHack := false ;
20228: LD_ADDR_EXP 73
20232: PUSH
20233: LD_INT 0
20235: ST_TO_ADDR
// sFire := false ;
20236: LD_ADDR_EXP 74
20240: PUSH
20241: LD_INT 0
20243: ST_TO_ADDR
// sRefresh := false ;
20244: LD_ADDR_EXP 75
20248: PUSH
20249: LD_INT 0
20251: ST_TO_ADDR
// sExp := false ;
20252: LD_ADDR_EXP 76
20256: PUSH
20257: LD_INT 0
20259: ST_TO_ADDR
// sDepot := false ;
20260: LD_ADDR_EXP 77
20264: PUSH
20265: LD_INT 0
20267: ST_TO_ADDR
// sFlag := false ;
20268: LD_ADDR_EXP 78
20272: PUSH
20273: LD_INT 0
20275: ST_TO_ADDR
// sKamikadze := false ;
20276: LD_ADDR_EXP 86
20280: PUSH
20281: LD_INT 0
20283: ST_TO_ADDR
// sTroll := false ;
20284: LD_ADDR_EXP 87
20288: PUSH
20289: LD_INT 0
20291: ST_TO_ADDR
// sSlow := false ;
20292: LD_ADDR_EXP 88
20296: PUSH
20297: LD_INT 0
20299: ST_TO_ADDR
// sLack := false ;
20300: LD_ADDR_EXP 89
20304: PUSH
20305: LD_INT 0
20307: ST_TO_ADDR
// sTank := false ;
20308: LD_ADDR_EXP 91
20312: PUSH
20313: LD_INT 0
20315: ST_TO_ADDR
// sRemote := false ;
20316: LD_ADDR_EXP 92
20320: PUSH
20321: LD_INT 0
20323: ST_TO_ADDR
// sPowell := false ;
20324: LD_ADDR_EXP 93
20328: PUSH
20329: LD_INT 0
20331: ST_TO_ADDR
// sTeleport := false ;
20332: LD_ADDR_EXP 96
20336: PUSH
20337: LD_INT 0
20339: ST_TO_ADDR
// sOilTower := false ;
20340: LD_ADDR_EXP 98
20344: PUSH
20345: LD_INT 0
20347: ST_TO_ADDR
// sShovel := false ;
20348: LD_ADDR_EXP 99
20352: PUSH
20353: LD_INT 0
20355: ST_TO_ADDR
// sSheik := false ;
20356: LD_ADDR_EXP 100
20360: PUSH
20361: LD_INT 0
20363: ST_TO_ADDR
// sEarthquake := false ;
20364: LD_ADDR_EXP 102
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// sAI := false ;
20372: LD_ADDR_EXP 103
20376: PUSH
20377: LD_INT 0
20379: ST_TO_ADDR
// sCargo := false ;
20380: LD_ADDR_EXP 106
20384: PUSH
20385: LD_INT 0
20387: ST_TO_ADDR
// sDLaser := false ;
20388: LD_ADDR_EXP 107
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
// sExchange := false ;
20396: LD_ADDR_EXP 108
20400: PUSH
20401: LD_INT 0
20403: ST_TO_ADDR
// sFac := false ;
20404: LD_ADDR_EXP 109
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// sPower := false ;
20412: LD_ADDR_EXP 110
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// sRandom := false ;
20420: LD_ADDR_EXP 111
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// sShield := false ;
20428: LD_ADDR_EXP 112
20432: PUSH
20433: LD_INT 0
20435: ST_TO_ADDR
// sTime := false ;
20436: LD_ADDR_EXP 113
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// sTools := false ;
20444: LD_ADDR_EXP 114
20448: PUSH
20449: LD_INT 0
20451: ST_TO_ADDR
// sSold := false ;
20452: LD_ADDR_EXP 79
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
// sDiff := false ;
20460: LD_ADDR_EXP 80
20464: PUSH
20465: LD_INT 0
20467: ST_TO_ADDR
// sFog := false ;
20468: LD_ADDR_EXP 83
20472: PUSH
20473: LD_INT 0
20475: ST_TO_ADDR
// sReset := false ;
20476: LD_ADDR_EXP 84
20480: PUSH
20481: LD_INT 0
20483: ST_TO_ADDR
// sSun := false ;
20484: LD_ADDR_EXP 85
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// sTiger := false ;
20492: LD_ADDR_EXP 81
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
// sBomb := false ;
20500: LD_ADDR_EXP 82
20504: PUSH
20505: LD_INT 0
20507: ST_TO_ADDR
// sWound := false ;
20508: LD_ADDR_EXP 90
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// sBetray := false ;
20516: LD_ADDR_EXP 94
20520: PUSH
20521: LD_INT 0
20523: ST_TO_ADDR
// sContamin := false ;
20524: LD_ADDR_EXP 95
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// sOil := false ;
20532: LD_ADDR_EXP 97
20536: PUSH
20537: LD_INT 0
20539: ST_TO_ADDR
// sStu := false ;
20540: LD_ADDR_EXP 101
20544: PUSH
20545: LD_INT 0
20547: ST_TO_ADDR
// sBazooka := false ;
20548: LD_ADDR_EXP 104
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// sMortar := false ;
20556: LD_ADDR_EXP 105
20560: PUSH
20561: LD_INT 0
20563: ST_TO_ADDR
// sRanger := false ;
20564: LD_ADDR_EXP 115
20568: PUSH
20569: LD_INT 0
20571: ST_TO_ADDR
// sComputer := false ;
20572: LD_ADDR_EXP 116
20576: PUSH
20577: LD_INT 0
20579: ST_TO_ADDR
// s30 := false ;
20580: LD_ADDR_EXP 117
20584: PUSH
20585: LD_INT 0
20587: ST_TO_ADDR
// s60 := false ;
20588: LD_ADDR_EXP 118
20592: PUSH
20593: LD_INT 0
20595: ST_TO_ADDR
// end ;
20596: LD_VAR 0 1
20600: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20601: LD_INT 0
20603: PPUSH
20604: PPUSH
20605: PPUSH
20606: PPUSH
20607: PPUSH
20608: PPUSH
20609: PPUSH
// result := [ ] ;
20610: LD_ADDR_VAR 0 2
20614: PUSH
20615: EMPTY
20616: ST_TO_ADDR
// if campaign_id = 1 then
20617: LD_OWVAR 69
20621: PUSH
20622: LD_INT 1
20624: EQUAL
20625: IFFALSE 23791
// begin case mission_number of 1 :
20627: LD_OWVAR 70
20631: PUSH
20632: LD_INT 1
20634: DOUBLE
20635: EQUAL
20636: IFTRUE 20640
20638: GO 20716
20640: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20641: LD_ADDR_VAR 0 2
20645: PUSH
20646: LD_INT 2
20648: PUSH
20649: LD_INT 4
20651: PUSH
20652: LD_INT 11
20654: PUSH
20655: LD_INT 12
20657: PUSH
20658: LD_INT 15
20660: PUSH
20661: LD_INT 16
20663: PUSH
20664: LD_INT 22
20666: PUSH
20667: LD_INT 23
20669: PUSH
20670: LD_INT 26
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 101
20686: PUSH
20687: LD_INT 102
20689: PUSH
20690: LD_INT 106
20692: PUSH
20693: LD_INT 116
20695: PUSH
20696: LD_INT 117
20698: PUSH
20699: LD_INT 118
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: ST_TO_ADDR
20714: GO 23789
20716: LD_INT 2
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20808
20724: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20725: LD_ADDR_VAR 0 2
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 4
20735: PUSH
20736: LD_INT 11
20738: PUSH
20739: LD_INT 12
20741: PUSH
20742: LD_INT 15
20744: PUSH
20745: LD_INT 16
20747: PUSH
20748: LD_INT 22
20750: PUSH
20751: LD_INT 23
20753: PUSH
20754: LD_INT 26
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 101
20770: PUSH
20771: LD_INT 102
20773: PUSH
20774: LD_INT 105
20776: PUSH
20777: LD_INT 106
20779: PUSH
20780: LD_INT 108
20782: PUSH
20783: LD_INT 116
20785: PUSH
20786: LD_INT 117
20788: PUSH
20789: LD_INT 118
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: ST_TO_ADDR
20806: GO 23789
20808: LD_INT 3
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20904
20816: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20817: LD_ADDR_VAR 0 2
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: LD_INT 4
20827: PUSH
20828: LD_INT 5
20830: PUSH
20831: LD_INT 11
20833: PUSH
20834: LD_INT 12
20836: PUSH
20837: LD_INT 15
20839: PUSH
20840: LD_INT 16
20842: PUSH
20843: LD_INT 22
20845: PUSH
20846: LD_INT 26
20848: PUSH
20849: LD_INT 36
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 101
20866: PUSH
20867: LD_INT 102
20869: PUSH
20870: LD_INT 105
20872: PUSH
20873: LD_INT 106
20875: PUSH
20876: LD_INT 108
20878: PUSH
20879: LD_INT 116
20881: PUSH
20882: LD_INT 117
20884: PUSH
20885: LD_INT 118
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: ST_TO_ADDR
20902: GO 23789
20904: LD_INT 4
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20912
20910: GO 21008
20912: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20913: LD_ADDR_VAR 0 2
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 4
20923: PUSH
20924: LD_INT 5
20926: PUSH
20927: LD_INT 8
20929: PUSH
20930: LD_INT 11
20932: PUSH
20933: LD_INT 12
20935: PUSH
20936: LD_INT 15
20938: PUSH
20939: LD_INT 16
20941: PUSH
20942: LD_INT 22
20944: PUSH
20945: LD_INT 23
20947: PUSH
20948: LD_INT 26
20950: PUSH
20951: LD_INT 36
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 101
20970: PUSH
20971: LD_INT 102
20973: PUSH
20974: LD_INT 105
20976: PUSH
20977: LD_INT 106
20979: PUSH
20980: LD_INT 108
20982: PUSH
20983: LD_INT 116
20985: PUSH
20986: LD_INT 117
20988: PUSH
20989: LD_INT 118
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: ST_TO_ADDR
21006: GO 23789
21008: LD_INT 5
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21128
21016: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21017: LD_ADDR_VAR 0 2
21021: PUSH
21022: LD_INT 2
21024: PUSH
21025: LD_INT 4
21027: PUSH
21028: LD_INT 5
21030: PUSH
21031: LD_INT 6
21033: PUSH
21034: LD_INT 8
21036: PUSH
21037: LD_INT 11
21039: PUSH
21040: LD_INT 12
21042: PUSH
21043: LD_INT 15
21045: PUSH
21046: LD_INT 16
21048: PUSH
21049: LD_INT 22
21051: PUSH
21052: LD_INT 23
21054: PUSH
21055: LD_INT 25
21057: PUSH
21058: LD_INT 26
21060: PUSH
21061: LD_INT 36
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 101
21082: PUSH
21083: LD_INT 102
21085: PUSH
21086: LD_INT 105
21088: PUSH
21089: LD_INT 106
21091: PUSH
21092: LD_INT 108
21094: PUSH
21095: LD_INT 109
21097: PUSH
21098: LD_INT 112
21100: PUSH
21101: LD_INT 116
21103: PUSH
21104: LD_INT 117
21106: PUSH
21107: LD_INT 118
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: ST_TO_ADDR
21126: GO 23789
21128: LD_INT 6
21130: DOUBLE
21131: EQUAL
21132: IFTRUE 21136
21134: GO 21268
21136: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21137: LD_ADDR_VAR 0 2
21141: PUSH
21142: LD_INT 2
21144: PUSH
21145: LD_INT 4
21147: PUSH
21148: LD_INT 5
21150: PUSH
21151: LD_INT 6
21153: PUSH
21154: LD_INT 8
21156: PUSH
21157: LD_INT 11
21159: PUSH
21160: LD_INT 12
21162: PUSH
21163: LD_INT 15
21165: PUSH
21166: LD_INT 16
21168: PUSH
21169: LD_INT 20
21171: PUSH
21172: LD_INT 21
21174: PUSH
21175: LD_INT 22
21177: PUSH
21178: LD_INT 23
21180: PUSH
21181: LD_INT 25
21183: PUSH
21184: LD_INT 26
21186: PUSH
21187: LD_INT 30
21189: PUSH
21190: LD_INT 31
21192: PUSH
21193: LD_INT 32
21195: PUSH
21196: LD_INT 36
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 101
21222: PUSH
21223: LD_INT 102
21225: PUSH
21226: LD_INT 105
21228: PUSH
21229: LD_INT 106
21231: PUSH
21232: LD_INT 108
21234: PUSH
21235: LD_INT 109
21237: PUSH
21238: LD_INT 112
21240: PUSH
21241: LD_INT 116
21243: PUSH
21244: LD_INT 117
21246: PUSH
21247: LD_INT 118
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: ST_TO_ADDR
21266: GO 23789
21268: LD_INT 7
21270: DOUBLE
21271: EQUAL
21272: IFTRUE 21276
21274: GO 21388
21276: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21277: LD_ADDR_VAR 0 2
21281: PUSH
21282: LD_INT 2
21284: PUSH
21285: LD_INT 4
21287: PUSH
21288: LD_INT 5
21290: PUSH
21291: LD_INT 7
21293: PUSH
21294: LD_INT 11
21296: PUSH
21297: LD_INT 12
21299: PUSH
21300: LD_INT 15
21302: PUSH
21303: LD_INT 16
21305: PUSH
21306: LD_INT 20
21308: PUSH
21309: LD_INT 21
21311: PUSH
21312: LD_INT 22
21314: PUSH
21315: LD_INT 23
21317: PUSH
21318: LD_INT 25
21320: PUSH
21321: LD_INT 26
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 101
21342: PUSH
21343: LD_INT 102
21345: PUSH
21346: LD_INT 103
21348: PUSH
21349: LD_INT 105
21351: PUSH
21352: LD_INT 106
21354: PUSH
21355: LD_INT 108
21357: PUSH
21358: LD_INT 112
21360: PUSH
21361: LD_INT 116
21363: PUSH
21364: LD_INT 117
21366: PUSH
21367: LD_INT 118
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: ST_TO_ADDR
21386: GO 23789
21388: LD_INT 8
21390: DOUBLE
21391: EQUAL
21392: IFTRUE 21396
21394: GO 21536
21396: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21397: LD_ADDR_VAR 0 2
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 4
21407: PUSH
21408: LD_INT 5
21410: PUSH
21411: LD_INT 6
21413: PUSH
21414: LD_INT 7
21416: PUSH
21417: LD_INT 8
21419: PUSH
21420: LD_INT 11
21422: PUSH
21423: LD_INT 12
21425: PUSH
21426: LD_INT 15
21428: PUSH
21429: LD_INT 16
21431: PUSH
21432: LD_INT 20
21434: PUSH
21435: LD_INT 21
21437: PUSH
21438: LD_INT 22
21440: PUSH
21441: LD_INT 23
21443: PUSH
21444: LD_INT 25
21446: PUSH
21447: LD_INT 26
21449: PUSH
21450: LD_INT 30
21452: PUSH
21453: LD_INT 31
21455: PUSH
21456: LD_INT 32
21458: PUSH
21459: LD_INT 36
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 101
21486: PUSH
21487: LD_INT 102
21489: PUSH
21490: LD_INT 103
21492: PUSH
21493: LD_INT 105
21495: PUSH
21496: LD_INT 106
21498: PUSH
21499: LD_INT 108
21501: PUSH
21502: LD_INT 109
21504: PUSH
21505: LD_INT 112
21507: PUSH
21508: LD_INT 116
21510: PUSH
21511: LD_INT 117
21513: PUSH
21514: LD_INT 118
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: ST_TO_ADDR
21534: GO 23789
21536: LD_INT 9
21538: DOUBLE
21539: EQUAL
21540: IFTRUE 21544
21542: GO 21692
21544: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21545: LD_ADDR_VAR 0 2
21549: PUSH
21550: LD_INT 2
21552: PUSH
21553: LD_INT 4
21555: PUSH
21556: LD_INT 5
21558: PUSH
21559: LD_INT 6
21561: PUSH
21562: LD_INT 7
21564: PUSH
21565: LD_INT 8
21567: PUSH
21568: LD_INT 11
21570: PUSH
21571: LD_INT 12
21573: PUSH
21574: LD_INT 15
21576: PUSH
21577: LD_INT 16
21579: PUSH
21580: LD_INT 20
21582: PUSH
21583: LD_INT 21
21585: PUSH
21586: LD_INT 22
21588: PUSH
21589: LD_INT 23
21591: PUSH
21592: LD_INT 25
21594: PUSH
21595: LD_INT 26
21597: PUSH
21598: LD_INT 28
21600: PUSH
21601: LD_INT 30
21603: PUSH
21604: LD_INT 31
21606: PUSH
21607: LD_INT 32
21609: PUSH
21610: LD_INT 36
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 101
21638: PUSH
21639: LD_INT 102
21641: PUSH
21642: LD_INT 103
21644: PUSH
21645: LD_INT 105
21647: PUSH
21648: LD_INT 106
21650: PUSH
21651: LD_INT 108
21653: PUSH
21654: LD_INT 109
21656: PUSH
21657: LD_INT 112
21659: PUSH
21660: LD_INT 114
21662: PUSH
21663: LD_INT 116
21665: PUSH
21666: LD_INT 117
21668: PUSH
21669: LD_INT 118
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: ST_TO_ADDR
21690: GO 23789
21692: LD_INT 10
21694: DOUBLE
21695: EQUAL
21696: IFTRUE 21700
21698: GO 21896
21700: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21701: LD_ADDR_VAR 0 2
21705: PUSH
21706: LD_INT 2
21708: PUSH
21709: LD_INT 4
21711: PUSH
21712: LD_INT 5
21714: PUSH
21715: LD_INT 6
21717: PUSH
21718: LD_INT 7
21720: PUSH
21721: LD_INT 8
21723: PUSH
21724: LD_INT 9
21726: PUSH
21727: LD_INT 10
21729: PUSH
21730: LD_INT 11
21732: PUSH
21733: LD_INT 12
21735: PUSH
21736: LD_INT 13
21738: PUSH
21739: LD_INT 14
21741: PUSH
21742: LD_INT 15
21744: PUSH
21745: LD_INT 16
21747: PUSH
21748: LD_INT 17
21750: PUSH
21751: LD_INT 18
21753: PUSH
21754: LD_INT 19
21756: PUSH
21757: LD_INT 20
21759: PUSH
21760: LD_INT 21
21762: PUSH
21763: LD_INT 22
21765: PUSH
21766: LD_INT 23
21768: PUSH
21769: LD_INT 24
21771: PUSH
21772: LD_INT 25
21774: PUSH
21775: LD_INT 26
21777: PUSH
21778: LD_INT 28
21780: PUSH
21781: LD_INT 30
21783: PUSH
21784: LD_INT 31
21786: PUSH
21787: LD_INT 32
21789: PUSH
21790: LD_INT 36
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 101
21826: PUSH
21827: LD_INT 102
21829: PUSH
21830: LD_INT 103
21832: PUSH
21833: LD_INT 104
21835: PUSH
21836: LD_INT 105
21838: PUSH
21839: LD_INT 106
21841: PUSH
21842: LD_INT 107
21844: PUSH
21845: LD_INT 108
21847: PUSH
21848: LD_INT 109
21850: PUSH
21851: LD_INT 110
21853: PUSH
21854: LD_INT 111
21856: PUSH
21857: LD_INT 112
21859: PUSH
21860: LD_INT 114
21862: PUSH
21863: LD_INT 116
21865: PUSH
21866: LD_INT 117
21868: PUSH
21869: LD_INT 118
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: ST_TO_ADDR
21894: GO 23789
21896: LD_INT 11
21898: DOUBLE
21899: EQUAL
21900: IFTRUE 21904
21902: GO 22108
21904: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21905: LD_ADDR_VAR 0 2
21909: PUSH
21910: LD_INT 2
21912: PUSH
21913: LD_INT 3
21915: PUSH
21916: LD_INT 4
21918: PUSH
21919: LD_INT 5
21921: PUSH
21922: LD_INT 6
21924: PUSH
21925: LD_INT 7
21927: PUSH
21928: LD_INT 8
21930: PUSH
21931: LD_INT 9
21933: PUSH
21934: LD_INT 10
21936: PUSH
21937: LD_INT 11
21939: PUSH
21940: LD_INT 12
21942: PUSH
21943: LD_INT 13
21945: PUSH
21946: LD_INT 14
21948: PUSH
21949: LD_INT 15
21951: PUSH
21952: LD_INT 16
21954: PUSH
21955: LD_INT 17
21957: PUSH
21958: LD_INT 18
21960: PUSH
21961: LD_INT 19
21963: PUSH
21964: LD_INT 20
21966: PUSH
21967: LD_INT 21
21969: PUSH
21970: LD_INT 22
21972: PUSH
21973: LD_INT 23
21975: PUSH
21976: LD_INT 24
21978: PUSH
21979: LD_INT 25
21981: PUSH
21982: LD_INT 26
21984: PUSH
21985: LD_INT 28
21987: PUSH
21988: LD_INT 30
21990: PUSH
21991: LD_INT 31
21993: PUSH
21994: LD_INT 32
21996: PUSH
21997: LD_INT 34
21999: PUSH
22000: LD_INT 36
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 101
22038: PUSH
22039: LD_INT 102
22041: PUSH
22042: LD_INT 103
22044: PUSH
22045: LD_INT 104
22047: PUSH
22048: LD_INT 105
22050: PUSH
22051: LD_INT 106
22053: PUSH
22054: LD_INT 107
22056: PUSH
22057: LD_INT 108
22059: PUSH
22060: LD_INT 109
22062: PUSH
22063: LD_INT 110
22065: PUSH
22066: LD_INT 111
22068: PUSH
22069: LD_INT 112
22071: PUSH
22072: LD_INT 114
22074: PUSH
22075: LD_INT 116
22077: PUSH
22078: LD_INT 117
22080: PUSH
22081: LD_INT 118
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: ST_TO_ADDR
22106: GO 23789
22108: LD_INT 12
22110: DOUBLE
22111: EQUAL
22112: IFTRUE 22116
22114: GO 22336
22116: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22117: LD_ADDR_VAR 0 2
22121: PUSH
22122: LD_INT 1
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: LD_INT 3
22130: PUSH
22131: LD_INT 4
22133: PUSH
22134: LD_INT 5
22136: PUSH
22137: LD_INT 6
22139: PUSH
22140: LD_INT 7
22142: PUSH
22143: LD_INT 8
22145: PUSH
22146: LD_INT 9
22148: PUSH
22149: LD_INT 10
22151: PUSH
22152: LD_INT 11
22154: PUSH
22155: LD_INT 12
22157: PUSH
22158: LD_INT 13
22160: PUSH
22161: LD_INT 14
22163: PUSH
22164: LD_INT 15
22166: PUSH
22167: LD_INT 16
22169: PUSH
22170: LD_INT 17
22172: PUSH
22173: LD_INT 18
22175: PUSH
22176: LD_INT 19
22178: PUSH
22179: LD_INT 20
22181: PUSH
22182: LD_INT 21
22184: PUSH
22185: LD_INT 22
22187: PUSH
22188: LD_INT 23
22190: PUSH
22191: LD_INT 24
22193: PUSH
22194: LD_INT 25
22196: PUSH
22197: LD_INT 26
22199: PUSH
22200: LD_INT 27
22202: PUSH
22203: LD_INT 28
22205: PUSH
22206: LD_INT 30
22208: PUSH
22209: LD_INT 31
22211: PUSH
22212: LD_INT 32
22214: PUSH
22215: LD_INT 33
22217: PUSH
22218: LD_INT 34
22220: PUSH
22221: LD_INT 36
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 101
22262: PUSH
22263: LD_INT 102
22265: PUSH
22266: LD_INT 103
22268: PUSH
22269: LD_INT 104
22271: PUSH
22272: LD_INT 105
22274: PUSH
22275: LD_INT 106
22277: PUSH
22278: LD_INT 107
22280: PUSH
22281: LD_INT 108
22283: PUSH
22284: LD_INT 109
22286: PUSH
22287: LD_INT 110
22289: PUSH
22290: LD_INT 111
22292: PUSH
22293: LD_INT 112
22295: PUSH
22296: LD_INT 113
22298: PUSH
22299: LD_INT 114
22301: PUSH
22302: LD_INT 116
22304: PUSH
22305: LD_INT 117
22307: PUSH
22308: LD_INT 118
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: ST_TO_ADDR
22334: GO 23789
22336: LD_INT 13
22338: DOUBLE
22339: EQUAL
22340: IFTRUE 22344
22342: GO 22552
22344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22345: LD_ADDR_VAR 0 2
22349: PUSH
22350: LD_INT 1
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: LD_INT 4
22361: PUSH
22362: LD_INT 5
22364: PUSH
22365: LD_INT 8
22367: PUSH
22368: LD_INT 9
22370: PUSH
22371: LD_INT 10
22373: PUSH
22374: LD_INT 11
22376: PUSH
22377: LD_INT 12
22379: PUSH
22380: LD_INT 14
22382: PUSH
22383: LD_INT 15
22385: PUSH
22386: LD_INT 16
22388: PUSH
22389: LD_INT 17
22391: PUSH
22392: LD_INT 18
22394: PUSH
22395: LD_INT 19
22397: PUSH
22398: LD_INT 20
22400: PUSH
22401: LD_INT 21
22403: PUSH
22404: LD_INT 22
22406: PUSH
22407: LD_INT 23
22409: PUSH
22410: LD_INT 24
22412: PUSH
22413: LD_INT 25
22415: PUSH
22416: LD_INT 26
22418: PUSH
22419: LD_INT 27
22421: PUSH
22422: LD_INT 28
22424: PUSH
22425: LD_INT 30
22427: PUSH
22428: LD_INT 31
22430: PUSH
22431: LD_INT 32
22433: PUSH
22434: LD_INT 33
22436: PUSH
22437: LD_INT 34
22439: PUSH
22440: LD_INT 36
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 101
22478: PUSH
22479: LD_INT 102
22481: PUSH
22482: LD_INT 103
22484: PUSH
22485: LD_INT 104
22487: PUSH
22488: LD_INT 105
22490: PUSH
22491: LD_INT 106
22493: PUSH
22494: LD_INT 107
22496: PUSH
22497: LD_INT 108
22499: PUSH
22500: LD_INT 109
22502: PUSH
22503: LD_INT 110
22505: PUSH
22506: LD_INT 111
22508: PUSH
22509: LD_INT 112
22511: PUSH
22512: LD_INT 113
22514: PUSH
22515: LD_INT 114
22517: PUSH
22518: LD_INT 116
22520: PUSH
22521: LD_INT 117
22523: PUSH
22524: LD_INT 118
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: ST_TO_ADDR
22550: GO 23789
22552: LD_INT 14
22554: DOUBLE
22555: EQUAL
22556: IFTRUE 22560
22558: GO 22784
22560: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22561: LD_ADDR_VAR 0 2
22565: PUSH
22566: LD_INT 1
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: LD_INT 3
22574: PUSH
22575: LD_INT 4
22577: PUSH
22578: LD_INT 5
22580: PUSH
22581: LD_INT 6
22583: PUSH
22584: LD_INT 7
22586: PUSH
22587: LD_INT 8
22589: PUSH
22590: LD_INT 9
22592: PUSH
22593: LD_INT 10
22595: PUSH
22596: LD_INT 11
22598: PUSH
22599: LD_INT 12
22601: PUSH
22602: LD_INT 13
22604: PUSH
22605: LD_INT 14
22607: PUSH
22608: LD_INT 15
22610: PUSH
22611: LD_INT 16
22613: PUSH
22614: LD_INT 17
22616: PUSH
22617: LD_INT 18
22619: PUSH
22620: LD_INT 19
22622: PUSH
22623: LD_INT 20
22625: PUSH
22626: LD_INT 21
22628: PUSH
22629: LD_INT 22
22631: PUSH
22632: LD_INT 23
22634: PUSH
22635: LD_INT 24
22637: PUSH
22638: LD_INT 25
22640: PUSH
22641: LD_INT 26
22643: PUSH
22644: LD_INT 27
22646: PUSH
22647: LD_INT 28
22649: PUSH
22650: LD_INT 29
22652: PUSH
22653: LD_INT 30
22655: PUSH
22656: LD_INT 31
22658: PUSH
22659: LD_INT 32
22661: PUSH
22662: LD_INT 33
22664: PUSH
22665: LD_INT 34
22667: PUSH
22668: LD_INT 36
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 101
22710: PUSH
22711: LD_INT 102
22713: PUSH
22714: LD_INT 103
22716: PUSH
22717: LD_INT 104
22719: PUSH
22720: LD_INT 105
22722: PUSH
22723: LD_INT 106
22725: PUSH
22726: LD_INT 107
22728: PUSH
22729: LD_INT 108
22731: PUSH
22732: LD_INT 109
22734: PUSH
22735: LD_INT 110
22737: PUSH
22738: LD_INT 111
22740: PUSH
22741: LD_INT 112
22743: PUSH
22744: LD_INT 113
22746: PUSH
22747: LD_INT 114
22749: PUSH
22750: LD_INT 116
22752: PUSH
22753: LD_INT 117
22755: PUSH
22756: LD_INT 118
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: ST_TO_ADDR
22782: GO 23789
22784: LD_INT 15
22786: DOUBLE
22787: EQUAL
22788: IFTRUE 22792
22790: GO 23016
22792: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22793: LD_ADDR_VAR 0 2
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: LD_INT 4
22809: PUSH
22810: LD_INT 5
22812: PUSH
22813: LD_INT 6
22815: PUSH
22816: LD_INT 7
22818: PUSH
22819: LD_INT 8
22821: PUSH
22822: LD_INT 9
22824: PUSH
22825: LD_INT 10
22827: PUSH
22828: LD_INT 11
22830: PUSH
22831: LD_INT 12
22833: PUSH
22834: LD_INT 13
22836: PUSH
22837: LD_INT 14
22839: PUSH
22840: LD_INT 15
22842: PUSH
22843: LD_INT 16
22845: PUSH
22846: LD_INT 17
22848: PUSH
22849: LD_INT 18
22851: PUSH
22852: LD_INT 19
22854: PUSH
22855: LD_INT 20
22857: PUSH
22858: LD_INT 21
22860: PUSH
22861: LD_INT 22
22863: PUSH
22864: LD_INT 23
22866: PUSH
22867: LD_INT 24
22869: PUSH
22870: LD_INT 25
22872: PUSH
22873: LD_INT 26
22875: PUSH
22876: LD_INT 27
22878: PUSH
22879: LD_INT 28
22881: PUSH
22882: LD_INT 29
22884: PUSH
22885: LD_INT 30
22887: PUSH
22888: LD_INT 31
22890: PUSH
22891: LD_INT 32
22893: PUSH
22894: LD_INT 33
22896: PUSH
22897: LD_INT 34
22899: PUSH
22900: LD_INT 36
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 101
22942: PUSH
22943: LD_INT 102
22945: PUSH
22946: LD_INT 103
22948: PUSH
22949: LD_INT 104
22951: PUSH
22952: LD_INT 105
22954: PUSH
22955: LD_INT 106
22957: PUSH
22958: LD_INT 107
22960: PUSH
22961: LD_INT 108
22963: PUSH
22964: LD_INT 109
22966: PUSH
22967: LD_INT 110
22969: PUSH
22970: LD_INT 111
22972: PUSH
22973: LD_INT 112
22975: PUSH
22976: LD_INT 113
22978: PUSH
22979: LD_INT 114
22981: PUSH
22982: LD_INT 116
22984: PUSH
22985: LD_INT 117
22987: PUSH
22988: LD_INT 118
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: ST_TO_ADDR
23014: GO 23789
23016: LD_INT 16
23018: DOUBLE
23019: EQUAL
23020: IFTRUE 23024
23022: GO 23160
23024: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23025: LD_ADDR_VAR 0 2
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: LD_INT 4
23035: PUSH
23036: LD_INT 5
23038: PUSH
23039: LD_INT 7
23041: PUSH
23042: LD_INT 11
23044: PUSH
23045: LD_INT 12
23047: PUSH
23048: LD_INT 15
23050: PUSH
23051: LD_INT 16
23053: PUSH
23054: LD_INT 20
23056: PUSH
23057: LD_INT 21
23059: PUSH
23060: LD_INT 22
23062: PUSH
23063: LD_INT 23
23065: PUSH
23066: LD_INT 25
23068: PUSH
23069: LD_INT 26
23071: PUSH
23072: LD_INT 30
23074: PUSH
23075: LD_INT 31
23077: PUSH
23078: LD_INT 32
23080: PUSH
23081: LD_INT 33
23083: PUSH
23084: LD_INT 34
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 101
23110: PUSH
23111: LD_INT 102
23113: PUSH
23114: LD_INT 103
23116: PUSH
23117: LD_INT 106
23119: PUSH
23120: LD_INT 108
23122: PUSH
23123: LD_INT 112
23125: PUSH
23126: LD_INT 113
23128: PUSH
23129: LD_INT 114
23131: PUSH
23132: LD_INT 116
23134: PUSH
23135: LD_INT 117
23137: PUSH
23138: LD_INT 118
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: ST_TO_ADDR
23158: GO 23789
23160: LD_INT 17
23162: DOUBLE
23163: EQUAL
23164: IFTRUE 23168
23166: GO 23392
23168: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23169: LD_ADDR_VAR 0 2
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: LD_INT 3
23182: PUSH
23183: LD_INT 4
23185: PUSH
23186: LD_INT 5
23188: PUSH
23189: LD_INT 6
23191: PUSH
23192: LD_INT 7
23194: PUSH
23195: LD_INT 8
23197: PUSH
23198: LD_INT 9
23200: PUSH
23201: LD_INT 10
23203: PUSH
23204: LD_INT 11
23206: PUSH
23207: LD_INT 12
23209: PUSH
23210: LD_INT 13
23212: PUSH
23213: LD_INT 14
23215: PUSH
23216: LD_INT 15
23218: PUSH
23219: LD_INT 16
23221: PUSH
23222: LD_INT 17
23224: PUSH
23225: LD_INT 18
23227: PUSH
23228: LD_INT 19
23230: PUSH
23231: LD_INT 20
23233: PUSH
23234: LD_INT 21
23236: PUSH
23237: LD_INT 22
23239: PUSH
23240: LD_INT 23
23242: PUSH
23243: LD_INT 24
23245: PUSH
23246: LD_INT 25
23248: PUSH
23249: LD_INT 26
23251: PUSH
23252: LD_INT 27
23254: PUSH
23255: LD_INT 28
23257: PUSH
23258: LD_INT 29
23260: PUSH
23261: LD_INT 30
23263: PUSH
23264: LD_INT 31
23266: PUSH
23267: LD_INT 32
23269: PUSH
23270: LD_INT 33
23272: PUSH
23273: LD_INT 34
23275: PUSH
23276: LD_INT 36
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 101
23318: PUSH
23319: LD_INT 102
23321: PUSH
23322: LD_INT 103
23324: PUSH
23325: LD_INT 104
23327: PUSH
23328: LD_INT 105
23330: PUSH
23331: LD_INT 106
23333: PUSH
23334: LD_INT 107
23336: PUSH
23337: LD_INT 108
23339: PUSH
23340: LD_INT 109
23342: PUSH
23343: LD_INT 110
23345: PUSH
23346: LD_INT 111
23348: PUSH
23349: LD_INT 112
23351: PUSH
23352: LD_INT 113
23354: PUSH
23355: LD_INT 114
23357: PUSH
23358: LD_INT 116
23360: PUSH
23361: LD_INT 117
23363: PUSH
23364: LD_INT 118
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: ST_TO_ADDR
23390: GO 23789
23392: LD_INT 18
23394: DOUBLE
23395: EQUAL
23396: IFTRUE 23400
23398: GO 23548
23400: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23401: LD_ADDR_VAR 0 2
23405: PUSH
23406: LD_INT 2
23408: PUSH
23409: LD_INT 4
23411: PUSH
23412: LD_INT 5
23414: PUSH
23415: LD_INT 7
23417: PUSH
23418: LD_INT 11
23420: PUSH
23421: LD_INT 12
23423: PUSH
23424: LD_INT 15
23426: PUSH
23427: LD_INT 16
23429: PUSH
23430: LD_INT 20
23432: PUSH
23433: LD_INT 21
23435: PUSH
23436: LD_INT 22
23438: PUSH
23439: LD_INT 23
23441: PUSH
23442: LD_INT 25
23444: PUSH
23445: LD_INT 26
23447: PUSH
23448: LD_INT 30
23450: PUSH
23451: LD_INT 31
23453: PUSH
23454: LD_INT 32
23456: PUSH
23457: LD_INT 33
23459: PUSH
23460: LD_INT 34
23462: PUSH
23463: LD_INT 35
23465: PUSH
23466: LD_INT 36
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 101
23494: PUSH
23495: LD_INT 102
23497: PUSH
23498: LD_INT 103
23500: PUSH
23501: LD_INT 106
23503: PUSH
23504: LD_INT 108
23506: PUSH
23507: LD_INT 112
23509: PUSH
23510: LD_INT 113
23512: PUSH
23513: LD_INT 114
23515: PUSH
23516: LD_INT 115
23518: PUSH
23519: LD_INT 116
23521: PUSH
23522: LD_INT 117
23524: PUSH
23525: LD_INT 118
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: ST_TO_ADDR
23546: GO 23789
23548: LD_INT 19
23550: DOUBLE
23551: EQUAL
23552: IFTRUE 23556
23554: GO 23788
23556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23557: LD_ADDR_VAR 0 2
23561: PUSH
23562: LD_INT 1
23564: PUSH
23565: LD_INT 2
23567: PUSH
23568: LD_INT 3
23570: PUSH
23571: LD_INT 4
23573: PUSH
23574: LD_INT 5
23576: PUSH
23577: LD_INT 6
23579: PUSH
23580: LD_INT 7
23582: PUSH
23583: LD_INT 8
23585: PUSH
23586: LD_INT 9
23588: PUSH
23589: LD_INT 10
23591: PUSH
23592: LD_INT 11
23594: PUSH
23595: LD_INT 12
23597: PUSH
23598: LD_INT 13
23600: PUSH
23601: LD_INT 14
23603: PUSH
23604: LD_INT 15
23606: PUSH
23607: LD_INT 16
23609: PUSH
23610: LD_INT 17
23612: PUSH
23613: LD_INT 18
23615: PUSH
23616: LD_INT 19
23618: PUSH
23619: LD_INT 20
23621: PUSH
23622: LD_INT 21
23624: PUSH
23625: LD_INT 22
23627: PUSH
23628: LD_INT 23
23630: PUSH
23631: LD_INT 24
23633: PUSH
23634: LD_INT 25
23636: PUSH
23637: LD_INT 26
23639: PUSH
23640: LD_INT 27
23642: PUSH
23643: LD_INT 28
23645: PUSH
23646: LD_INT 29
23648: PUSH
23649: LD_INT 30
23651: PUSH
23652: LD_INT 31
23654: PUSH
23655: LD_INT 32
23657: PUSH
23658: LD_INT 33
23660: PUSH
23661: LD_INT 34
23663: PUSH
23664: LD_INT 35
23666: PUSH
23667: LD_INT 36
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 101
23710: PUSH
23711: LD_INT 102
23713: PUSH
23714: LD_INT 103
23716: PUSH
23717: LD_INT 104
23719: PUSH
23720: LD_INT 105
23722: PUSH
23723: LD_INT 106
23725: PUSH
23726: LD_INT 107
23728: PUSH
23729: LD_INT 108
23731: PUSH
23732: LD_INT 109
23734: PUSH
23735: LD_INT 110
23737: PUSH
23738: LD_INT 111
23740: PUSH
23741: LD_INT 112
23743: PUSH
23744: LD_INT 113
23746: PUSH
23747: LD_INT 114
23749: PUSH
23750: LD_INT 115
23752: PUSH
23753: LD_INT 116
23755: PUSH
23756: LD_INT 117
23758: PUSH
23759: LD_INT 118
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: ST_TO_ADDR
23786: GO 23789
23788: POP
// end else
23789: GO 24020
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23791: LD_ADDR_VAR 0 2
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: LD_INT 2
23801: PUSH
23802: LD_INT 3
23804: PUSH
23805: LD_INT 4
23807: PUSH
23808: LD_INT 5
23810: PUSH
23811: LD_INT 6
23813: PUSH
23814: LD_INT 7
23816: PUSH
23817: LD_INT 8
23819: PUSH
23820: LD_INT 9
23822: PUSH
23823: LD_INT 10
23825: PUSH
23826: LD_INT 11
23828: PUSH
23829: LD_INT 12
23831: PUSH
23832: LD_INT 13
23834: PUSH
23835: LD_INT 14
23837: PUSH
23838: LD_INT 15
23840: PUSH
23841: LD_INT 16
23843: PUSH
23844: LD_INT 17
23846: PUSH
23847: LD_INT 18
23849: PUSH
23850: LD_INT 19
23852: PUSH
23853: LD_INT 20
23855: PUSH
23856: LD_INT 21
23858: PUSH
23859: LD_INT 22
23861: PUSH
23862: LD_INT 23
23864: PUSH
23865: LD_INT 24
23867: PUSH
23868: LD_INT 25
23870: PUSH
23871: LD_INT 26
23873: PUSH
23874: LD_INT 27
23876: PUSH
23877: LD_INT 28
23879: PUSH
23880: LD_INT 29
23882: PUSH
23883: LD_INT 30
23885: PUSH
23886: LD_INT 31
23888: PUSH
23889: LD_INT 32
23891: PUSH
23892: LD_INT 33
23894: PUSH
23895: LD_INT 34
23897: PUSH
23898: LD_INT 35
23900: PUSH
23901: LD_INT 36
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 101
23944: PUSH
23945: LD_INT 102
23947: PUSH
23948: LD_INT 103
23950: PUSH
23951: LD_INT 104
23953: PUSH
23954: LD_INT 105
23956: PUSH
23957: LD_INT 106
23959: PUSH
23960: LD_INT 107
23962: PUSH
23963: LD_INT 108
23965: PUSH
23966: LD_INT 109
23968: PUSH
23969: LD_INT 110
23971: PUSH
23972: LD_INT 111
23974: PUSH
23975: LD_INT 112
23977: PUSH
23978: LD_INT 113
23980: PUSH
23981: LD_INT 114
23983: PUSH
23984: LD_INT 115
23986: PUSH
23987: LD_INT 116
23989: PUSH
23990: LD_INT 117
23992: PUSH
23993: LD_INT 118
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: ST_TO_ADDR
// if result then
24020: LD_VAR 0 2
24024: IFFALSE 24810
// begin normal :=  ;
24026: LD_ADDR_VAR 0 5
24030: PUSH
24031: LD_STRING 
24033: ST_TO_ADDR
// hardcore :=  ;
24034: LD_ADDR_VAR 0 6
24038: PUSH
24039: LD_STRING 
24041: ST_TO_ADDR
// active :=  ;
24042: LD_ADDR_VAR 0 7
24046: PUSH
24047: LD_STRING 
24049: ST_TO_ADDR
// for i = 1 to normalCounter do
24050: LD_ADDR_VAR 0 8
24054: PUSH
24055: DOUBLE
24056: LD_INT 1
24058: DEC
24059: ST_TO_ADDR
24060: LD_EXP 63
24064: PUSH
24065: FOR_TO
24066: IFFALSE 24167
// begin tmp := 0 ;
24068: LD_ADDR_VAR 0 3
24072: PUSH
24073: LD_STRING 0
24075: ST_TO_ADDR
// if result [ 1 ] then
24076: LD_VAR 0 2
24080: PUSH
24081: LD_INT 1
24083: ARRAY
24084: IFFALSE 24149
// if result [ 1 ] [ 1 ] = i then
24086: LD_VAR 0 2
24090: PUSH
24091: LD_INT 1
24093: ARRAY
24094: PUSH
24095: LD_INT 1
24097: ARRAY
24098: PUSH
24099: LD_VAR 0 8
24103: EQUAL
24104: IFFALSE 24149
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24106: LD_ADDR_VAR 0 2
24110: PUSH
24111: LD_VAR 0 2
24115: PPUSH
24116: LD_INT 1
24118: PPUSH
24119: LD_VAR 0 2
24123: PUSH
24124: LD_INT 1
24126: ARRAY
24127: PPUSH
24128: LD_INT 1
24130: PPUSH
24131: CALL_OW 3
24135: PPUSH
24136: CALL_OW 1
24140: ST_TO_ADDR
// tmp := 1 ;
24141: LD_ADDR_VAR 0 3
24145: PUSH
24146: LD_STRING 1
24148: ST_TO_ADDR
// end ; normal := normal & tmp ;
24149: LD_ADDR_VAR 0 5
24153: PUSH
24154: LD_VAR 0 5
24158: PUSH
24159: LD_VAR 0 3
24163: STR
24164: ST_TO_ADDR
// end ;
24165: GO 24065
24167: POP
24168: POP
// for i = 1 to hardcoreCounter do
24169: LD_ADDR_VAR 0 8
24173: PUSH
24174: DOUBLE
24175: LD_INT 1
24177: DEC
24178: ST_TO_ADDR
24179: LD_EXP 64
24183: PUSH
24184: FOR_TO
24185: IFFALSE 24290
// begin tmp := 0 ;
24187: LD_ADDR_VAR 0 3
24191: PUSH
24192: LD_STRING 0
24194: ST_TO_ADDR
// if result [ 2 ] then
24195: LD_VAR 0 2
24199: PUSH
24200: LD_INT 2
24202: ARRAY
24203: IFFALSE 24272
// if result [ 2 ] [ 1 ] = 100 + i then
24205: LD_VAR 0 2
24209: PUSH
24210: LD_INT 2
24212: ARRAY
24213: PUSH
24214: LD_INT 1
24216: ARRAY
24217: PUSH
24218: LD_INT 100
24220: PUSH
24221: LD_VAR 0 8
24225: PLUS
24226: EQUAL
24227: IFFALSE 24272
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24229: LD_ADDR_VAR 0 2
24233: PUSH
24234: LD_VAR 0 2
24238: PPUSH
24239: LD_INT 2
24241: PPUSH
24242: LD_VAR 0 2
24246: PUSH
24247: LD_INT 2
24249: ARRAY
24250: PPUSH
24251: LD_INT 1
24253: PPUSH
24254: CALL_OW 3
24258: PPUSH
24259: CALL_OW 1
24263: ST_TO_ADDR
// tmp := 1 ;
24264: LD_ADDR_VAR 0 3
24268: PUSH
24269: LD_STRING 1
24271: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24272: LD_ADDR_VAR 0 6
24276: PUSH
24277: LD_VAR 0 6
24281: PUSH
24282: LD_VAR 0 3
24286: STR
24287: ST_TO_ADDR
// end ;
24288: GO 24184
24290: POP
24291: POP
// if isGameLoad then
24292: LD_VAR 0 1
24296: IFFALSE 24771
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24298: LD_ADDR_VAR 0 4
24302: PUSH
24303: LD_EXP 67
24307: PUSH
24308: LD_EXP 66
24312: PUSH
24313: LD_EXP 68
24317: PUSH
24318: LD_EXP 65
24322: PUSH
24323: LD_EXP 69
24327: PUSH
24328: LD_EXP 70
24332: PUSH
24333: LD_EXP 71
24337: PUSH
24338: LD_EXP 72
24342: PUSH
24343: LD_EXP 73
24347: PUSH
24348: LD_EXP 74
24352: PUSH
24353: LD_EXP 75
24357: PUSH
24358: LD_EXP 76
24362: PUSH
24363: LD_EXP 77
24367: PUSH
24368: LD_EXP 78
24372: PUSH
24373: LD_EXP 86
24377: PUSH
24378: LD_EXP 87
24382: PUSH
24383: LD_EXP 88
24387: PUSH
24388: LD_EXP 89
24392: PUSH
24393: LD_EXP 91
24397: PUSH
24398: LD_EXP 92
24402: PUSH
24403: LD_EXP 93
24407: PUSH
24408: LD_EXP 96
24412: PUSH
24413: LD_EXP 98
24417: PUSH
24418: LD_EXP 99
24422: PUSH
24423: LD_EXP 100
24427: PUSH
24428: LD_EXP 102
24432: PUSH
24433: LD_EXP 103
24437: PUSH
24438: LD_EXP 106
24442: PUSH
24443: LD_EXP 107
24447: PUSH
24448: LD_EXP 108
24452: PUSH
24453: LD_EXP 109
24457: PUSH
24458: LD_EXP 110
24462: PUSH
24463: LD_EXP 111
24467: PUSH
24468: LD_EXP 112
24472: PUSH
24473: LD_EXP 113
24477: PUSH
24478: LD_EXP 114
24482: PUSH
24483: LD_EXP 79
24487: PUSH
24488: LD_EXP 80
24492: PUSH
24493: LD_EXP 83
24497: PUSH
24498: LD_EXP 84
24502: PUSH
24503: LD_EXP 85
24507: PUSH
24508: LD_EXP 81
24512: PUSH
24513: LD_EXP 82
24517: PUSH
24518: LD_EXP 90
24522: PUSH
24523: LD_EXP 94
24527: PUSH
24528: LD_EXP 95
24532: PUSH
24533: LD_EXP 97
24537: PUSH
24538: LD_EXP 101
24542: PUSH
24543: LD_EXP 104
24547: PUSH
24548: LD_EXP 105
24552: PUSH
24553: LD_EXP 115
24557: PUSH
24558: LD_EXP 116
24562: PUSH
24563: LD_EXP 117
24567: PUSH
24568: LD_EXP 118
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: ST_TO_ADDR
// tmp :=  ;
24629: LD_ADDR_VAR 0 3
24633: PUSH
24634: LD_STRING 
24636: ST_TO_ADDR
// for i = 1 to normalCounter do
24637: LD_ADDR_VAR 0 8
24641: PUSH
24642: DOUBLE
24643: LD_INT 1
24645: DEC
24646: ST_TO_ADDR
24647: LD_EXP 63
24651: PUSH
24652: FOR_TO
24653: IFFALSE 24689
// begin if flags [ i ] then
24655: LD_VAR 0 4
24659: PUSH
24660: LD_VAR 0 8
24664: ARRAY
24665: IFFALSE 24687
// tmp := tmp & i & ; ;
24667: LD_ADDR_VAR 0 3
24671: PUSH
24672: LD_VAR 0 3
24676: PUSH
24677: LD_VAR 0 8
24681: STR
24682: PUSH
24683: LD_STRING ;
24685: STR
24686: ST_TO_ADDR
// end ;
24687: GO 24652
24689: POP
24690: POP
// for i = 1 to hardcoreCounter do
24691: LD_ADDR_VAR 0 8
24695: PUSH
24696: DOUBLE
24697: LD_INT 1
24699: DEC
24700: ST_TO_ADDR
24701: LD_EXP 64
24705: PUSH
24706: FOR_TO
24707: IFFALSE 24753
// begin if flags [ normalCounter + i ] then
24709: LD_VAR 0 4
24713: PUSH
24714: LD_EXP 63
24718: PUSH
24719: LD_VAR 0 8
24723: PLUS
24724: ARRAY
24725: IFFALSE 24751
// tmp := tmp & ( 100 + i ) & ; ;
24727: LD_ADDR_VAR 0 3
24731: PUSH
24732: LD_VAR 0 3
24736: PUSH
24737: LD_INT 100
24739: PUSH
24740: LD_VAR 0 8
24744: PLUS
24745: STR
24746: PUSH
24747: LD_STRING ;
24749: STR
24750: ST_TO_ADDR
// end ;
24751: GO 24706
24753: POP
24754: POP
// if tmp then
24755: LD_VAR 0 3
24759: IFFALSE 24771
// active := tmp ;
24761: LD_ADDR_VAR 0 7
24765: PUSH
24766: LD_VAR 0 3
24770: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24771: LD_STRING getStreamItemsFromMission("
24773: PUSH
24774: LD_VAR 0 5
24778: STR
24779: PUSH
24780: LD_STRING ","
24782: STR
24783: PUSH
24784: LD_VAR 0 6
24788: STR
24789: PUSH
24790: LD_STRING ","
24792: STR
24793: PUSH
24794: LD_VAR 0 7
24798: STR
24799: PUSH
24800: LD_STRING ")
24802: STR
24803: PPUSH
24804: CALL_OW 559
// end else
24808: GO 24817
// ToLua ( getStreamItemsFromMission("","","") ) ;
24810: LD_STRING getStreamItemsFromMission("","","")
24812: PPUSH
24813: CALL_OW 559
// end ;
24817: LD_VAR 0 2
24821: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24822: LD_EXP 62
24826: PUSH
24827: LD_EXP 67
24831: AND
24832: IFFALSE 24956
24834: GO 24836
24836: DISABLE
24837: LD_INT 0
24839: PPUSH
24840: PPUSH
// begin enable ;
24841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24842: LD_ADDR_VAR 0 2
24846: PUSH
24847: LD_INT 22
24849: PUSH
24850: LD_OWVAR 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 2
24861: PUSH
24862: LD_INT 34
24864: PUSH
24865: LD_INT 7
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 34
24874: PUSH
24875: LD_INT 45
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 34
24884: PUSH
24885: LD_INT 28
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 34
24894: PUSH
24895: LD_INT 47
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PPUSH
24913: CALL_OW 69
24917: ST_TO_ADDR
// if not tmp then
24918: LD_VAR 0 2
24922: NOT
24923: IFFALSE 24927
// exit ;
24925: GO 24956
// for i in tmp do
24927: LD_ADDR_VAR 0 1
24931: PUSH
24932: LD_VAR 0 2
24936: PUSH
24937: FOR_IN
24938: IFFALSE 24954
// begin SetLives ( i , 0 ) ;
24940: LD_VAR 0 1
24944: PPUSH
24945: LD_INT 0
24947: PPUSH
24948: CALL_OW 234
// end ;
24952: GO 24937
24954: POP
24955: POP
// end ;
24956: PPOPN 2
24958: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24959: LD_EXP 62
24963: PUSH
24964: LD_EXP 68
24968: AND
24969: IFFALSE 25053
24971: GO 24973
24973: DISABLE
24974: LD_INT 0
24976: PPUSH
24977: PPUSH
// begin enable ;
24978: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24979: LD_ADDR_VAR 0 2
24983: PUSH
24984: LD_INT 22
24986: PUSH
24987: LD_OWVAR 2
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 32
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PPUSH
25010: CALL_OW 69
25014: ST_TO_ADDR
// if not tmp then
25015: LD_VAR 0 2
25019: NOT
25020: IFFALSE 25024
// exit ;
25022: GO 25053
// for i in tmp do
25024: LD_ADDR_VAR 0 1
25028: PUSH
25029: LD_VAR 0 2
25033: PUSH
25034: FOR_IN
25035: IFFALSE 25051
// begin SetLives ( i , 0 ) ;
25037: LD_VAR 0 1
25041: PPUSH
25042: LD_INT 0
25044: PPUSH
25045: CALL_OW 234
// end ;
25049: GO 25034
25051: POP
25052: POP
// end ;
25053: PPOPN 2
25055: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25056: LD_EXP 62
25060: PUSH
25061: LD_EXP 65
25065: AND
25066: IFFALSE 25159
25068: GO 25070
25070: DISABLE
25071: LD_INT 0
25073: PPUSH
// begin enable ;
25074: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25075: LD_ADDR_VAR 0 1
25079: PUSH
25080: LD_INT 22
25082: PUSH
25083: LD_OWVAR 2
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: LD_INT 25
25097: PUSH
25098: LD_INT 5
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 25
25107: PUSH
25108: LD_INT 9
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 25
25117: PUSH
25118: LD_INT 8
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PPUSH
25135: CALL_OW 69
25139: PUSH
25140: FOR_IN
25141: IFFALSE 25157
// begin SetClass ( i , 1 ) ;
25143: LD_VAR 0 1
25147: PPUSH
25148: LD_INT 1
25150: PPUSH
25151: CALL_OW 336
// end ;
25155: GO 25140
25157: POP
25158: POP
// end ;
25159: PPOPN 1
25161: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25162: LD_EXP 62
25166: PUSH
25167: LD_EXP 66
25171: AND
25172: PUSH
25173: LD_OWVAR 65
25177: PUSH
25178: LD_INT 7
25180: LESS
25181: AND
25182: IFFALSE 25196
25184: GO 25186
25186: DISABLE
// begin enable ;
25187: ENABLE
// game_speed := 7 ;
25188: LD_ADDR_OWVAR 65
25192: PUSH
25193: LD_INT 7
25195: ST_TO_ADDR
// end ;
25196: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25197: LD_EXP 62
25201: PUSH
25202: LD_EXP 69
25206: AND
25207: IFFALSE 25409
25209: GO 25211
25211: DISABLE
25212: LD_INT 0
25214: PPUSH
25215: PPUSH
25216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25217: LD_ADDR_VAR 0 3
25221: PUSH
25222: LD_INT 81
25224: PUSH
25225: LD_OWVAR 2
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 21
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PPUSH
25248: CALL_OW 69
25252: ST_TO_ADDR
// if not tmp then
25253: LD_VAR 0 3
25257: NOT
25258: IFFALSE 25262
// exit ;
25260: GO 25409
// if tmp > 5 then
25262: LD_VAR 0 3
25266: PUSH
25267: LD_INT 5
25269: GREATER
25270: IFFALSE 25282
// k := 5 else
25272: LD_ADDR_VAR 0 2
25276: PUSH
25277: LD_INT 5
25279: ST_TO_ADDR
25280: GO 25292
// k := tmp ;
25282: LD_ADDR_VAR 0 2
25286: PUSH
25287: LD_VAR 0 3
25291: ST_TO_ADDR
// for i := 1 to k do
25292: LD_ADDR_VAR 0 1
25296: PUSH
25297: DOUBLE
25298: LD_INT 1
25300: DEC
25301: ST_TO_ADDR
25302: LD_VAR 0 2
25306: PUSH
25307: FOR_TO
25308: IFFALSE 25407
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25310: LD_VAR 0 3
25314: PUSH
25315: LD_VAR 0 1
25319: ARRAY
25320: PPUSH
25321: LD_VAR 0 1
25325: PUSH
25326: LD_INT 4
25328: MOD
25329: PUSH
25330: LD_INT 1
25332: PLUS
25333: PPUSH
25334: CALL_OW 259
25338: PUSH
25339: LD_INT 10
25341: LESS
25342: IFFALSE 25405
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25344: LD_VAR 0 3
25348: PUSH
25349: LD_VAR 0 1
25353: ARRAY
25354: PPUSH
25355: LD_VAR 0 1
25359: PUSH
25360: LD_INT 4
25362: MOD
25363: PUSH
25364: LD_INT 1
25366: PLUS
25367: PPUSH
25368: LD_VAR 0 3
25372: PUSH
25373: LD_VAR 0 1
25377: ARRAY
25378: PPUSH
25379: LD_VAR 0 1
25383: PUSH
25384: LD_INT 4
25386: MOD
25387: PUSH
25388: LD_INT 1
25390: PLUS
25391: PPUSH
25392: CALL_OW 259
25396: PUSH
25397: LD_INT 1
25399: PLUS
25400: PPUSH
25401: CALL_OW 237
25405: GO 25307
25407: POP
25408: POP
// end ;
25409: PPOPN 3
25411: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25412: LD_EXP 62
25416: PUSH
25417: LD_EXP 70
25421: AND
25422: IFFALSE 25442
25424: GO 25426
25426: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25427: LD_INT 4
25429: PPUSH
25430: LD_OWVAR 2
25434: PPUSH
25435: LD_INT 0
25437: PPUSH
25438: CALL_OW 324
25442: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25443: LD_EXP 62
25447: PUSH
25448: LD_EXP 99
25452: AND
25453: IFFALSE 25473
25455: GO 25457
25457: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25458: LD_INT 19
25460: PPUSH
25461: LD_OWVAR 2
25465: PPUSH
25466: LD_INT 0
25468: PPUSH
25469: CALL_OW 324
25473: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25474: LD_EXP 62
25478: PUSH
25479: LD_EXP 71
25483: AND
25484: IFFALSE 25586
25486: GO 25488
25488: DISABLE
25489: LD_INT 0
25491: PPUSH
25492: PPUSH
// begin enable ;
25493: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25494: LD_ADDR_VAR 0 2
25498: PUSH
25499: LD_INT 22
25501: PUSH
25502: LD_OWVAR 2
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 2
25513: PUSH
25514: LD_INT 34
25516: PUSH
25517: LD_INT 11
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 34
25526: PUSH
25527: LD_INT 30
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PPUSH
25543: CALL_OW 69
25547: ST_TO_ADDR
// if not tmp then
25548: LD_VAR 0 2
25552: NOT
25553: IFFALSE 25557
// exit ;
25555: GO 25586
// for i in tmp do
25557: LD_ADDR_VAR 0 1
25561: PUSH
25562: LD_VAR 0 2
25566: PUSH
25567: FOR_IN
25568: IFFALSE 25584
// begin SetLives ( i , 0 ) ;
25570: LD_VAR 0 1
25574: PPUSH
25575: LD_INT 0
25577: PPUSH
25578: CALL_OW 234
// end ;
25582: GO 25567
25584: POP
25585: POP
// end ;
25586: PPOPN 2
25588: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25589: LD_EXP 62
25593: PUSH
25594: LD_EXP 72
25598: AND
25599: IFFALSE 25619
25601: GO 25603
25603: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25604: LD_INT 32
25606: PPUSH
25607: LD_OWVAR 2
25611: PPUSH
25612: LD_INT 0
25614: PPUSH
25615: CALL_OW 324
25619: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25620: LD_EXP 62
25624: PUSH
25625: LD_EXP 73
25629: AND
25630: IFFALSE 25811
25632: GO 25634
25634: DISABLE
25635: LD_INT 0
25637: PPUSH
25638: PPUSH
25639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25640: LD_ADDR_VAR 0 2
25644: PUSH
25645: LD_INT 22
25647: PUSH
25648: LD_OWVAR 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 33
25659: PUSH
25660: LD_INT 3
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PPUSH
25671: CALL_OW 69
25675: ST_TO_ADDR
// if not tmp then
25676: LD_VAR 0 2
25680: NOT
25681: IFFALSE 25685
// exit ;
25683: GO 25811
// side := 0 ;
25685: LD_ADDR_VAR 0 3
25689: PUSH
25690: LD_INT 0
25692: ST_TO_ADDR
// for i := 1 to 8 do
25693: LD_ADDR_VAR 0 1
25697: PUSH
25698: DOUBLE
25699: LD_INT 1
25701: DEC
25702: ST_TO_ADDR
25703: LD_INT 8
25705: PUSH
25706: FOR_TO
25707: IFFALSE 25755
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25709: LD_OWVAR 2
25713: PUSH
25714: LD_VAR 0 1
25718: NONEQUAL
25719: PUSH
25720: LD_OWVAR 2
25724: PPUSH
25725: LD_VAR 0 1
25729: PPUSH
25730: CALL_OW 81
25734: PUSH
25735: LD_INT 2
25737: EQUAL
25738: AND
25739: IFFALSE 25753
// begin side := i ;
25741: LD_ADDR_VAR 0 3
25745: PUSH
25746: LD_VAR 0 1
25750: ST_TO_ADDR
// break ;
25751: GO 25755
// end ;
25753: GO 25706
25755: POP
25756: POP
// if not side then
25757: LD_VAR 0 3
25761: NOT
25762: IFFALSE 25766
// exit ;
25764: GO 25811
// for i := 1 to tmp do
25766: LD_ADDR_VAR 0 1
25770: PUSH
25771: DOUBLE
25772: LD_INT 1
25774: DEC
25775: ST_TO_ADDR
25776: LD_VAR 0 2
25780: PUSH
25781: FOR_TO
25782: IFFALSE 25809
// if Prob ( 60 ) then
25784: LD_INT 60
25786: PPUSH
25787: CALL_OW 13
25791: IFFALSE 25807
// SetSide ( i , side ) ;
25793: LD_VAR 0 1
25797: PPUSH
25798: LD_VAR 0 3
25802: PPUSH
25803: CALL_OW 235
25807: GO 25781
25809: POP
25810: POP
// end ;
25811: PPOPN 3
25813: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25814: LD_EXP 62
25818: PUSH
25819: LD_EXP 75
25823: AND
25824: IFFALSE 25943
25826: GO 25828
25828: DISABLE
25829: LD_INT 0
25831: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25832: LD_ADDR_VAR 0 1
25836: PUSH
25837: LD_INT 22
25839: PUSH
25840: LD_OWVAR 2
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 21
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 3
25861: PUSH
25862: LD_INT 23
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: LIST
25880: PPUSH
25881: CALL_OW 69
25885: PUSH
25886: FOR_IN
25887: IFFALSE 25941
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25889: LD_VAR 0 1
25893: PPUSH
25894: CALL_OW 257
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: LD_INT 3
25907: PUSH
25908: LD_INT 4
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: IN
25917: IFFALSE 25939
// SetClass ( un , rand ( 1 , 4 ) ) ;
25919: LD_VAR 0 1
25923: PPUSH
25924: LD_INT 1
25926: PPUSH
25927: LD_INT 4
25929: PPUSH
25930: CALL_OW 12
25934: PPUSH
25935: CALL_OW 336
25939: GO 25886
25941: POP
25942: POP
// end ;
25943: PPOPN 1
25945: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25946: LD_EXP 62
25950: PUSH
25951: LD_EXP 74
25955: AND
25956: IFFALSE 26035
25958: GO 25960
25960: DISABLE
25961: LD_INT 0
25963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25964: LD_ADDR_VAR 0 1
25968: PUSH
25969: LD_INT 22
25971: PUSH
25972: LD_OWVAR 2
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 21
25983: PUSH
25984: LD_INT 3
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PPUSH
25995: CALL_OW 69
25999: ST_TO_ADDR
// if not tmp then
26000: LD_VAR 0 1
26004: NOT
26005: IFFALSE 26009
// exit ;
26007: GO 26035
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26009: LD_VAR 0 1
26013: PUSH
26014: LD_INT 1
26016: PPUSH
26017: LD_VAR 0 1
26021: PPUSH
26022: CALL_OW 12
26026: ARRAY
26027: PPUSH
26028: LD_INT 100
26030: PPUSH
26031: CALL_OW 234
// end ;
26035: PPOPN 1
26037: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26038: LD_EXP 62
26042: PUSH
26043: LD_EXP 76
26047: AND
26048: IFFALSE 26146
26050: GO 26052
26052: DISABLE
26053: LD_INT 0
26055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26056: LD_ADDR_VAR 0 1
26060: PUSH
26061: LD_INT 22
26063: PUSH
26064: LD_OWVAR 2
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 21
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PPUSH
26087: CALL_OW 69
26091: ST_TO_ADDR
// if not tmp then
26092: LD_VAR 0 1
26096: NOT
26097: IFFALSE 26101
// exit ;
26099: GO 26146
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26101: LD_VAR 0 1
26105: PUSH
26106: LD_INT 1
26108: PPUSH
26109: LD_VAR 0 1
26113: PPUSH
26114: CALL_OW 12
26118: ARRAY
26119: PPUSH
26120: LD_INT 1
26122: PPUSH
26123: LD_INT 4
26125: PPUSH
26126: CALL_OW 12
26130: PPUSH
26131: LD_INT 3000
26133: PPUSH
26134: LD_INT 9000
26136: PPUSH
26137: CALL_OW 12
26141: PPUSH
26142: CALL_OW 492
// end ;
26146: PPOPN 1
26148: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26149: LD_EXP 62
26153: PUSH
26154: LD_EXP 77
26158: AND
26159: IFFALSE 26179
26161: GO 26163
26163: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26164: LD_INT 1
26166: PPUSH
26167: LD_OWVAR 2
26171: PPUSH
26172: LD_INT 0
26174: PPUSH
26175: CALL_OW 324
26179: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26180: LD_EXP 62
26184: PUSH
26185: LD_EXP 78
26189: AND
26190: IFFALSE 26273
26192: GO 26194
26194: DISABLE
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26199: LD_ADDR_VAR 0 2
26203: PUSH
26204: LD_INT 22
26206: PUSH
26207: LD_OWVAR 2
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 21
26218: PUSH
26219: LD_INT 3
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PPUSH
26230: CALL_OW 69
26234: ST_TO_ADDR
// if not tmp then
26235: LD_VAR 0 2
26239: NOT
26240: IFFALSE 26244
// exit ;
26242: GO 26273
// for i in tmp do
26244: LD_ADDR_VAR 0 1
26248: PUSH
26249: LD_VAR 0 2
26253: PUSH
26254: FOR_IN
26255: IFFALSE 26271
// SetBLevel ( i , 10 ) ;
26257: LD_VAR 0 1
26261: PPUSH
26262: LD_INT 10
26264: PPUSH
26265: CALL_OW 241
26269: GO 26254
26271: POP
26272: POP
// end ;
26273: PPOPN 2
26275: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26276: LD_EXP 62
26280: PUSH
26281: LD_EXP 79
26285: AND
26286: IFFALSE 26397
26288: GO 26290
26290: DISABLE
26291: LD_INT 0
26293: PPUSH
26294: PPUSH
26295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26296: LD_ADDR_VAR 0 3
26300: PUSH
26301: LD_INT 22
26303: PUSH
26304: LD_OWVAR 2
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 25
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PPUSH
26327: CALL_OW 69
26331: ST_TO_ADDR
// if not tmp then
26332: LD_VAR 0 3
26336: NOT
26337: IFFALSE 26341
// exit ;
26339: GO 26397
// un := tmp [ rand ( 1 , tmp ) ] ;
26341: LD_ADDR_VAR 0 2
26345: PUSH
26346: LD_VAR 0 3
26350: PUSH
26351: LD_INT 1
26353: PPUSH
26354: LD_VAR 0 3
26358: PPUSH
26359: CALL_OW 12
26363: ARRAY
26364: ST_TO_ADDR
// if Crawls ( un ) then
26365: LD_VAR 0 2
26369: PPUSH
26370: CALL_OW 318
26374: IFFALSE 26385
// ComWalk ( un ) ;
26376: LD_VAR 0 2
26380: PPUSH
26381: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26385: LD_VAR 0 2
26389: PPUSH
26390: LD_INT 5
26392: PPUSH
26393: CALL_OW 336
// end ;
26397: PPOPN 3
26399: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26400: LD_EXP 62
26404: PUSH
26405: LD_EXP 80
26409: AND
26410: PUSH
26411: LD_OWVAR 67
26415: PUSH
26416: LD_INT 4
26418: LESS
26419: AND
26420: IFFALSE 26439
26422: GO 26424
26424: DISABLE
// begin Difficulty := Difficulty + 1 ;
26425: LD_ADDR_OWVAR 67
26429: PUSH
26430: LD_OWVAR 67
26434: PUSH
26435: LD_INT 1
26437: PLUS
26438: ST_TO_ADDR
// end ;
26439: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26440: LD_EXP 62
26444: PUSH
26445: LD_EXP 81
26449: AND
26450: IFFALSE 26553
26452: GO 26454
26454: DISABLE
26455: LD_INT 0
26457: PPUSH
// begin for i := 1 to 5 do
26458: LD_ADDR_VAR 0 1
26462: PUSH
26463: DOUBLE
26464: LD_INT 1
26466: DEC
26467: ST_TO_ADDR
26468: LD_INT 5
26470: PUSH
26471: FOR_TO
26472: IFFALSE 26551
// begin uc_nation := nation_nature ;
26474: LD_ADDR_OWVAR 21
26478: PUSH
26479: LD_INT 0
26481: ST_TO_ADDR
// uc_side := 0 ;
26482: LD_ADDR_OWVAR 20
26486: PUSH
26487: LD_INT 0
26489: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26490: LD_ADDR_OWVAR 29
26494: PUSH
26495: LD_INT 12
26497: PUSH
26498: LD_INT 12
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: ST_TO_ADDR
// hc_agressivity := 20 ;
26505: LD_ADDR_OWVAR 35
26509: PUSH
26510: LD_INT 20
26512: ST_TO_ADDR
// hc_class := class_tiger ;
26513: LD_ADDR_OWVAR 28
26517: PUSH
26518: LD_INT 14
26520: ST_TO_ADDR
// hc_gallery :=  ;
26521: LD_ADDR_OWVAR 33
26525: PUSH
26526: LD_STRING 
26528: ST_TO_ADDR
// hc_name :=  ;
26529: LD_ADDR_OWVAR 26
26533: PUSH
26534: LD_STRING 
26536: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26537: CALL_OW 44
26541: PPUSH
26542: LD_INT 0
26544: PPUSH
26545: CALL_OW 51
// end ;
26549: GO 26471
26551: POP
26552: POP
// end ;
26553: PPOPN 1
26555: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26556: LD_EXP 62
26560: PUSH
26561: LD_EXP 82
26565: AND
26566: IFFALSE 26575
26568: GO 26570
26570: DISABLE
// StreamSibBomb ;
26571: CALL 26576 0 0
26575: END
// export function StreamSibBomb ; var i , x , y ; begin
26576: LD_INT 0
26578: PPUSH
26579: PPUSH
26580: PPUSH
26581: PPUSH
// result := false ;
26582: LD_ADDR_VAR 0 1
26586: PUSH
26587: LD_INT 0
26589: ST_TO_ADDR
// for i := 1 to 16 do
26590: LD_ADDR_VAR 0 2
26594: PUSH
26595: DOUBLE
26596: LD_INT 1
26598: DEC
26599: ST_TO_ADDR
26600: LD_INT 16
26602: PUSH
26603: FOR_TO
26604: IFFALSE 26803
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26606: LD_ADDR_VAR 0 3
26610: PUSH
26611: LD_INT 10
26613: PUSH
26614: LD_INT 20
26616: PUSH
26617: LD_INT 30
26619: PUSH
26620: LD_INT 40
26622: PUSH
26623: LD_INT 50
26625: PUSH
26626: LD_INT 60
26628: PUSH
26629: LD_INT 70
26631: PUSH
26632: LD_INT 80
26634: PUSH
26635: LD_INT 90
26637: PUSH
26638: LD_INT 100
26640: PUSH
26641: LD_INT 110
26643: PUSH
26644: LD_INT 120
26646: PUSH
26647: LD_INT 130
26649: PUSH
26650: LD_INT 140
26652: PUSH
26653: LD_INT 150
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: PPUSH
26676: LD_INT 15
26678: PPUSH
26679: CALL_OW 12
26683: ARRAY
26684: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26685: LD_ADDR_VAR 0 4
26689: PUSH
26690: LD_INT 10
26692: PUSH
26693: LD_INT 20
26695: PUSH
26696: LD_INT 30
26698: PUSH
26699: LD_INT 40
26701: PUSH
26702: LD_INT 50
26704: PUSH
26705: LD_INT 60
26707: PUSH
26708: LD_INT 70
26710: PUSH
26711: LD_INT 80
26713: PUSH
26714: LD_INT 90
26716: PUSH
26717: LD_INT 100
26719: PUSH
26720: LD_INT 110
26722: PUSH
26723: LD_INT 120
26725: PUSH
26726: LD_INT 130
26728: PUSH
26729: LD_INT 140
26731: PUSH
26732: LD_INT 150
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 1
26754: PPUSH
26755: LD_INT 15
26757: PPUSH
26758: CALL_OW 12
26762: ARRAY
26763: ST_TO_ADDR
// if ValidHex ( x , y ) then
26764: LD_VAR 0 3
26768: PPUSH
26769: LD_VAR 0 4
26773: PPUSH
26774: CALL_OW 488
26778: IFFALSE 26801
// begin result := [ x , y ] ;
26780: LD_ADDR_VAR 0 1
26784: PUSH
26785: LD_VAR 0 3
26789: PUSH
26790: LD_VAR 0 4
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: ST_TO_ADDR
// break ;
26799: GO 26803
// end ; end ;
26801: GO 26603
26803: POP
26804: POP
// if result then
26805: LD_VAR 0 1
26809: IFFALSE 26869
// begin ToLua ( playSibBomb() ) ;
26811: LD_STRING playSibBomb()
26813: PPUSH
26814: CALL_OW 559
// wait ( 0 0$14 ) ;
26818: LD_INT 490
26820: PPUSH
26821: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26825: LD_VAR 0 1
26829: PUSH
26830: LD_INT 1
26832: ARRAY
26833: PPUSH
26834: LD_VAR 0 1
26838: PUSH
26839: LD_INT 2
26841: ARRAY
26842: PPUSH
26843: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26847: LD_VAR 0 1
26851: PUSH
26852: LD_INT 1
26854: ARRAY
26855: PPUSH
26856: LD_VAR 0 1
26860: PUSH
26861: LD_INT 2
26863: ARRAY
26864: PPUSH
26865: CALL_OW 429
// end ; end ;
26869: LD_VAR 0 1
26873: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26874: LD_EXP 62
26878: PUSH
26879: LD_EXP 84
26883: AND
26884: IFFALSE 26896
26886: GO 26888
26888: DISABLE
// YouLost (  ) ;
26889: LD_STRING 
26891: PPUSH
26892: CALL_OW 104
26896: END
// every 0 0$1 trigger StreamModeActive and sFog do
26897: LD_EXP 62
26901: PUSH
26902: LD_EXP 83
26906: AND
26907: IFFALSE 26921
26909: GO 26911
26911: DISABLE
// FogOff ( your_side ) ;
26912: LD_OWVAR 2
26916: PPUSH
26917: CALL_OW 344
26921: END
// every 0 0$1 trigger StreamModeActive and sSun do
26922: LD_EXP 62
26926: PUSH
26927: LD_EXP 85
26931: AND
26932: IFFALSE 26960
26934: GO 26936
26936: DISABLE
// begin solar_recharge_percent := 0 ;
26937: LD_ADDR_OWVAR 79
26941: PUSH
26942: LD_INT 0
26944: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26945: LD_INT 10500
26947: PPUSH
26948: CALL_OW 67
// solar_recharge_percent := 100 ;
26952: LD_ADDR_OWVAR 79
26956: PUSH
26957: LD_INT 100
26959: ST_TO_ADDR
// end ;
26960: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26961: LD_EXP 62
26965: PUSH
26966: LD_EXP 86
26970: AND
26971: IFFALSE 27210
26973: GO 26975
26975: DISABLE
26976: LD_INT 0
26978: PPUSH
26979: PPUSH
26980: PPUSH
// begin tmp := [ ] ;
26981: LD_ADDR_VAR 0 3
26985: PUSH
26986: EMPTY
26987: ST_TO_ADDR
// for i := 1 to 6 do
26988: LD_ADDR_VAR 0 1
26992: PUSH
26993: DOUBLE
26994: LD_INT 1
26996: DEC
26997: ST_TO_ADDR
26998: LD_INT 6
27000: PUSH
27001: FOR_TO
27002: IFFALSE 27107
// begin uc_nation := nation_nature ;
27004: LD_ADDR_OWVAR 21
27008: PUSH
27009: LD_INT 0
27011: ST_TO_ADDR
// uc_side := 0 ;
27012: LD_ADDR_OWVAR 20
27016: PUSH
27017: LD_INT 0
27019: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27020: LD_ADDR_OWVAR 29
27024: PUSH
27025: LD_INT 12
27027: PUSH
27028: LD_INT 12
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: ST_TO_ADDR
// hc_agressivity := 20 ;
27035: LD_ADDR_OWVAR 35
27039: PUSH
27040: LD_INT 20
27042: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27043: LD_ADDR_OWVAR 28
27047: PUSH
27048: LD_INT 17
27050: ST_TO_ADDR
// hc_gallery :=  ;
27051: LD_ADDR_OWVAR 33
27055: PUSH
27056: LD_STRING 
27058: ST_TO_ADDR
// hc_name :=  ;
27059: LD_ADDR_OWVAR 26
27063: PUSH
27064: LD_STRING 
27066: ST_TO_ADDR
// un := CreateHuman ;
27067: LD_ADDR_VAR 0 2
27071: PUSH
27072: CALL_OW 44
27076: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27077: LD_VAR 0 2
27081: PPUSH
27082: LD_INT 1
27084: PPUSH
27085: CALL_OW 51
// tmp := tmp ^ un ;
27089: LD_ADDR_VAR 0 3
27093: PUSH
27094: LD_VAR 0 3
27098: PUSH
27099: LD_VAR 0 2
27103: ADD
27104: ST_TO_ADDR
// end ;
27105: GO 27001
27107: POP
27108: POP
// repeat wait ( 0 0$1 ) ;
27109: LD_INT 35
27111: PPUSH
27112: CALL_OW 67
// for un in tmp do
27116: LD_ADDR_VAR 0 2
27120: PUSH
27121: LD_VAR 0 3
27125: PUSH
27126: FOR_IN
27127: IFFALSE 27201
// begin if IsDead ( un ) then
27129: LD_VAR 0 2
27133: PPUSH
27134: CALL_OW 301
27138: IFFALSE 27158
// begin tmp := tmp diff un ;
27140: LD_ADDR_VAR 0 3
27144: PUSH
27145: LD_VAR 0 3
27149: PUSH
27150: LD_VAR 0 2
27154: DIFF
27155: ST_TO_ADDR
// continue ;
27156: GO 27126
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27158: LD_VAR 0 2
27162: PPUSH
27163: LD_INT 3
27165: PUSH
27166: LD_INT 22
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PPUSH
27180: CALL_OW 69
27184: PPUSH
27185: LD_VAR 0 2
27189: PPUSH
27190: CALL_OW 74
27194: PPUSH
27195: CALL_OW 115
// end ;
27199: GO 27126
27201: POP
27202: POP
// until not tmp ;
27203: LD_VAR 0 3
27207: NOT
27208: IFFALSE 27109
// end ;
27210: PPOPN 3
27212: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27213: LD_EXP 62
27217: PUSH
27218: LD_EXP 87
27222: AND
27223: IFFALSE 27277
27225: GO 27227
27227: DISABLE
// begin ToLua ( displayTroll(); ) ;
27228: LD_STRING displayTroll();
27230: PPUSH
27231: CALL_OW 559
// wait ( 3 3$00 ) ;
27235: LD_INT 6300
27237: PPUSH
27238: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27242: LD_STRING hideTroll();
27244: PPUSH
27245: CALL_OW 559
// wait ( 1 1$00 ) ;
27249: LD_INT 2100
27251: PPUSH
27252: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27256: LD_STRING displayTroll();
27258: PPUSH
27259: CALL_OW 559
// wait ( 1 1$00 ) ;
27263: LD_INT 2100
27265: PPUSH
27266: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27270: LD_STRING hideTroll();
27272: PPUSH
27273: CALL_OW 559
// end ;
27277: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27278: LD_EXP 62
27282: PUSH
27283: LD_EXP 88
27287: AND
27288: IFFALSE 27351
27290: GO 27292
27292: DISABLE
27293: LD_INT 0
27295: PPUSH
// begin p := 0 ;
27296: LD_ADDR_VAR 0 1
27300: PUSH
27301: LD_INT 0
27303: ST_TO_ADDR
// repeat game_speed := 1 ;
27304: LD_ADDR_OWVAR 65
27308: PUSH
27309: LD_INT 1
27311: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27312: LD_INT 35
27314: PPUSH
27315: CALL_OW 67
// p := p + 1 ;
27319: LD_ADDR_VAR 0 1
27323: PUSH
27324: LD_VAR 0 1
27328: PUSH
27329: LD_INT 1
27331: PLUS
27332: ST_TO_ADDR
// until p >= 60 ;
27333: LD_VAR 0 1
27337: PUSH
27338: LD_INT 60
27340: GREATEREQUAL
27341: IFFALSE 27304
// game_speed := 4 ;
27343: LD_ADDR_OWVAR 65
27347: PUSH
27348: LD_INT 4
27350: ST_TO_ADDR
// end ;
27351: PPOPN 1
27353: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27354: LD_EXP 62
27358: PUSH
27359: LD_EXP 89
27363: AND
27364: IFFALSE 27510
27366: GO 27368
27368: DISABLE
27369: LD_INT 0
27371: PPUSH
27372: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27373: LD_ADDR_VAR 0 1
27377: PUSH
27378: LD_INT 22
27380: PUSH
27381: LD_OWVAR 2
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 2
27392: PUSH
27393: LD_INT 30
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 30
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: LIST
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PPUSH
27422: CALL_OW 69
27426: ST_TO_ADDR
// if not depot then
27427: LD_VAR 0 1
27431: NOT
27432: IFFALSE 27436
// exit ;
27434: GO 27510
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27436: LD_ADDR_VAR 0 2
27440: PUSH
27441: LD_VAR 0 1
27445: PUSH
27446: LD_INT 1
27448: PPUSH
27449: LD_VAR 0 1
27453: PPUSH
27454: CALL_OW 12
27458: ARRAY
27459: PPUSH
27460: CALL_OW 274
27464: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27465: LD_VAR 0 2
27469: PPUSH
27470: LD_INT 1
27472: PPUSH
27473: LD_INT 0
27475: PPUSH
27476: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27480: LD_VAR 0 2
27484: PPUSH
27485: LD_INT 2
27487: PPUSH
27488: LD_INT 0
27490: PPUSH
27491: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27495: LD_VAR 0 2
27499: PPUSH
27500: LD_INT 3
27502: PPUSH
27503: LD_INT 0
27505: PPUSH
27506: CALL_OW 277
// end ;
27510: PPOPN 2
27512: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27513: LD_EXP 62
27517: PUSH
27518: LD_EXP 90
27522: AND
27523: IFFALSE 27620
27525: GO 27527
27527: DISABLE
27528: LD_INT 0
27530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27531: LD_ADDR_VAR 0 1
27535: PUSH
27536: LD_INT 22
27538: PUSH
27539: LD_OWVAR 2
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 21
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 3
27560: PUSH
27561: LD_INT 23
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: PPUSH
27580: CALL_OW 69
27584: ST_TO_ADDR
// if not tmp then
27585: LD_VAR 0 1
27589: NOT
27590: IFFALSE 27594
// exit ;
27592: GO 27620
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27594: LD_VAR 0 1
27598: PUSH
27599: LD_INT 1
27601: PPUSH
27602: LD_VAR 0 1
27606: PPUSH
27607: CALL_OW 12
27611: ARRAY
27612: PPUSH
27613: LD_INT 200
27615: PPUSH
27616: CALL_OW 234
// end ;
27620: PPOPN 1
27622: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27623: LD_EXP 62
27627: PUSH
27628: LD_EXP 91
27632: AND
27633: IFFALSE 27712
27635: GO 27637
27637: DISABLE
27638: LD_INT 0
27640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27641: LD_ADDR_VAR 0 1
27645: PUSH
27646: LD_INT 22
27648: PUSH
27649: LD_OWVAR 2
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 21
27660: PUSH
27661: LD_INT 2
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PPUSH
27672: CALL_OW 69
27676: ST_TO_ADDR
// if not tmp then
27677: LD_VAR 0 1
27681: NOT
27682: IFFALSE 27686
// exit ;
27684: GO 27712
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27686: LD_VAR 0 1
27690: PUSH
27691: LD_INT 1
27693: PPUSH
27694: LD_VAR 0 1
27698: PPUSH
27699: CALL_OW 12
27703: ARRAY
27704: PPUSH
27705: LD_INT 60
27707: PPUSH
27708: CALL_OW 234
// end ;
27712: PPOPN 1
27714: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27715: LD_EXP 62
27719: PUSH
27720: LD_EXP 92
27724: AND
27725: IFFALSE 27824
27727: GO 27729
27729: DISABLE
27730: LD_INT 0
27732: PPUSH
27733: PPUSH
// begin enable ;
27734: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27735: LD_ADDR_VAR 0 1
27739: PUSH
27740: LD_INT 22
27742: PUSH
27743: LD_OWVAR 2
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 61
27754: PUSH
27755: EMPTY
27756: LIST
27757: PUSH
27758: LD_INT 33
27760: PUSH
27761: LD_INT 2
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: LIST
27772: PPUSH
27773: CALL_OW 69
27777: ST_TO_ADDR
// if not tmp then
27778: LD_VAR 0 1
27782: NOT
27783: IFFALSE 27787
// exit ;
27785: GO 27824
// for i in tmp do
27787: LD_ADDR_VAR 0 2
27791: PUSH
27792: LD_VAR 0 1
27796: PUSH
27797: FOR_IN
27798: IFFALSE 27822
// if IsControledBy ( i ) then
27800: LD_VAR 0 2
27804: PPUSH
27805: CALL_OW 312
27809: IFFALSE 27820
// ComUnlink ( i ) ;
27811: LD_VAR 0 2
27815: PPUSH
27816: CALL_OW 136
27820: GO 27797
27822: POP
27823: POP
// end ;
27824: PPOPN 2
27826: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27827: LD_EXP 62
27831: PUSH
27832: LD_EXP 93
27836: AND
27837: IFFALSE 27977
27839: GO 27841
27841: DISABLE
27842: LD_INT 0
27844: PPUSH
27845: PPUSH
// begin ToLua ( displayPowell(); ) ;
27846: LD_STRING displayPowell();
27848: PPUSH
27849: CALL_OW 559
// uc_side := 0 ;
27853: LD_ADDR_OWVAR 20
27857: PUSH
27858: LD_INT 0
27860: ST_TO_ADDR
// uc_nation := 2 ;
27861: LD_ADDR_OWVAR 21
27865: PUSH
27866: LD_INT 2
27868: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27869: LD_ADDR_OWVAR 37
27873: PUSH
27874: LD_INT 14
27876: ST_TO_ADDR
// vc_engine := engine_siberite ;
27877: LD_ADDR_OWVAR 39
27881: PUSH
27882: LD_INT 3
27884: ST_TO_ADDR
// vc_control := control_apeman ;
27885: LD_ADDR_OWVAR 38
27889: PUSH
27890: LD_INT 5
27892: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27893: LD_ADDR_OWVAR 40
27897: PUSH
27898: LD_INT 29
27900: ST_TO_ADDR
// un := CreateVehicle ;
27901: LD_ADDR_VAR 0 2
27905: PUSH
27906: CALL_OW 45
27910: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27911: LD_VAR 0 2
27915: PPUSH
27916: LD_INT 1
27918: PPUSH
27919: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27923: LD_INT 35
27925: PPUSH
27926: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27930: LD_VAR 0 2
27934: PPUSH
27935: LD_INT 22
27937: PUSH
27938: LD_OWVAR 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PPUSH
27947: CALL_OW 69
27951: PPUSH
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 74
27961: PPUSH
27962: CALL_OW 115
// until IsDead ( un ) ;
27966: LD_VAR 0 2
27970: PPUSH
27971: CALL_OW 301
27975: IFFALSE 27923
// end ;
27977: PPOPN 2
27979: END
// every 0 0$1 trigger StreamModeActive and sStu do
27980: LD_EXP 62
27984: PUSH
27985: LD_EXP 101
27989: AND
27990: IFFALSE 28006
27992: GO 27994
27994: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27995: LD_STRING displayStucuk();
27997: PPUSH
27998: CALL_OW 559
// ResetFog ;
28002: CALL_OW 335
// end ;
28006: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28007: LD_EXP 62
28011: PUSH
28012: LD_EXP 94
28016: AND
28017: IFFALSE 28158
28019: GO 28021
28021: DISABLE
28022: LD_INT 0
28024: PPUSH
28025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28026: LD_ADDR_VAR 0 2
28030: PUSH
28031: LD_INT 22
28033: PUSH
28034: LD_OWVAR 2
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 21
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PPUSH
28057: CALL_OW 69
28061: ST_TO_ADDR
// if not tmp then
28062: LD_VAR 0 2
28066: NOT
28067: IFFALSE 28071
// exit ;
28069: GO 28158
// un := tmp [ rand ( 1 , tmp ) ] ;
28071: LD_ADDR_VAR 0 1
28075: PUSH
28076: LD_VAR 0 2
28080: PUSH
28081: LD_INT 1
28083: PPUSH
28084: LD_VAR 0 2
28088: PPUSH
28089: CALL_OW 12
28093: ARRAY
28094: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28095: LD_VAR 0 1
28099: PPUSH
28100: LD_INT 0
28102: PPUSH
28103: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28107: LD_VAR 0 1
28111: PPUSH
28112: LD_OWVAR 3
28116: PUSH
28117: LD_VAR 0 1
28121: DIFF
28122: PPUSH
28123: LD_VAR 0 1
28127: PPUSH
28128: CALL_OW 74
28132: PPUSH
28133: CALL_OW 115
// wait ( 0 0$20 ) ;
28137: LD_INT 700
28139: PPUSH
28140: CALL_OW 67
// SetSide ( un , your_side ) ;
28144: LD_VAR 0 1
28148: PPUSH
28149: LD_OWVAR 2
28153: PPUSH
28154: CALL_OW 235
// end ;
28158: PPOPN 2
28160: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28161: LD_EXP 62
28165: PUSH
28166: LD_EXP 95
28170: AND
28171: IFFALSE 28277
28173: GO 28175
28175: DISABLE
28176: LD_INT 0
28178: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28179: LD_ADDR_VAR 0 1
28183: PUSH
28184: LD_INT 22
28186: PUSH
28187: LD_OWVAR 2
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 30
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 30
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: LIST
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PPUSH
28228: CALL_OW 69
28232: ST_TO_ADDR
// if not depot then
28233: LD_VAR 0 1
28237: NOT
28238: IFFALSE 28242
// exit ;
28240: GO 28277
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28242: LD_VAR 0 1
28246: PUSH
28247: LD_INT 1
28249: ARRAY
28250: PPUSH
28251: CALL_OW 250
28255: PPUSH
28256: LD_VAR 0 1
28260: PUSH
28261: LD_INT 1
28263: ARRAY
28264: PPUSH
28265: CALL_OW 251
28269: PPUSH
28270: LD_INT 70
28272: PPUSH
28273: CALL_OW 495
// end ;
28277: PPOPN 1
28279: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28280: LD_EXP 62
28284: PUSH
28285: LD_EXP 96
28289: AND
28290: IFFALSE 28501
28292: GO 28294
28294: DISABLE
28295: LD_INT 0
28297: PPUSH
28298: PPUSH
28299: PPUSH
28300: PPUSH
28301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28302: LD_ADDR_VAR 0 5
28306: PUSH
28307: LD_INT 22
28309: PUSH
28310: LD_OWVAR 2
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 21
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PPUSH
28333: CALL_OW 69
28337: ST_TO_ADDR
// if not tmp then
28338: LD_VAR 0 5
28342: NOT
28343: IFFALSE 28347
// exit ;
28345: GO 28501
// for i in tmp do
28347: LD_ADDR_VAR 0 1
28351: PUSH
28352: LD_VAR 0 5
28356: PUSH
28357: FOR_IN
28358: IFFALSE 28499
// begin d := rand ( 0 , 5 ) ;
28360: LD_ADDR_VAR 0 4
28364: PUSH
28365: LD_INT 0
28367: PPUSH
28368: LD_INT 5
28370: PPUSH
28371: CALL_OW 12
28375: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28376: LD_ADDR_VAR 0 2
28380: PUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: CALL_OW 250
28390: PPUSH
28391: LD_VAR 0 4
28395: PPUSH
28396: LD_INT 3
28398: PPUSH
28399: LD_INT 12
28401: PPUSH
28402: CALL_OW 12
28406: PPUSH
28407: CALL_OW 272
28411: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28412: LD_ADDR_VAR 0 3
28416: PUSH
28417: LD_VAR 0 1
28421: PPUSH
28422: CALL_OW 251
28426: PPUSH
28427: LD_VAR 0 4
28431: PPUSH
28432: LD_INT 3
28434: PPUSH
28435: LD_INT 12
28437: PPUSH
28438: CALL_OW 12
28442: PPUSH
28443: CALL_OW 273
28447: ST_TO_ADDR
// if ValidHex ( x , y ) then
28448: LD_VAR 0 2
28452: PPUSH
28453: LD_VAR 0 3
28457: PPUSH
28458: CALL_OW 488
28462: IFFALSE 28497
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28464: LD_VAR 0 1
28468: PPUSH
28469: LD_VAR 0 2
28473: PPUSH
28474: LD_VAR 0 3
28478: PPUSH
28479: LD_INT 3
28481: PPUSH
28482: LD_INT 6
28484: PPUSH
28485: CALL_OW 12
28489: PPUSH
28490: LD_INT 1
28492: PPUSH
28493: CALL_OW 483
// end ;
28497: GO 28357
28499: POP
28500: POP
// end ;
28501: PPOPN 5
28503: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28504: LD_EXP 62
28508: PUSH
28509: LD_EXP 97
28513: AND
28514: IFFALSE 28608
28516: GO 28518
28518: DISABLE
28519: LD_INT 0
28521: PPUSH
28522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28523: LD_ADDR_VAR 0 2
28527: PUSH
28528: LD_INT 22
28530: PUSH
28531: LD_OWVAR 2
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 32
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 21
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: PPUSH
28565: CALL_OW 69
28569: ST_TO_ADDR
// if not tmp then
28570: LD_VAR 0 2
28574: NOT
28575: IFFALSE 28579
// exit ;
28577: GO 28608
// for i in tmp do
28579: LD_ADDR_VAR 0 1
28583: PUSH
28584: LD_VAR 0 2
28588: PUSH
28589: FOR_IN
28590: IFFALSE 28606
// SetFuel ( i , 0 ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_INT 0
28599: PPUSH
28600: CALL_OW 240
28604: GO 28589
28606: POP
28607: POP
// end ;
28608: PPOPN 2
28610: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28611: LD_EXP 62
28615: PUSH
28616: LD_EXP 98
28620: AND
28621: IFFALSE 28687
28623: GO 28625
28625: DISABLE
28626: LD_INT 0
28628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28629: LD_ADDR_VAR 0 1
28633: PUSH
28634: LD_INT 22
28636: PUSH
28637: LD_OWVAR 2
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 30
28648: PUSH
28649: LD_INT 29
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PPUSH
28660: CALL_OW 69
28664: ST_TO_ADDR
// if not tmp then
28665: LD_VAR 0 1
28669: NOT
28670: IFFALSE 28674
// exit ;
28672: GO 28687
// DestroyUnit ( tmp [ 1 ] ) ;
28674: LD_VAR 0 1
28678: PUSH
28679: LD_INT 1
28681: ARRAY
28682: PPUSH
28683: CALL_OW 65
// end ;
28687: PPOPN 1
28689: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28690: LD_EXP 62
28694: PUSH
28695: LD_EXP 100
28699: AND
28700: IFFALSE 28829
28702: GO 28704
28704: DISABLE
28705: LD_INT 0
28707: PPUSH
// begin uc_side := 0 ;
28708: LD_ADDR_OWVAR 20
28712: PUSH
28713: LD_INT 0
28715: ST_TO_ADDR
// uc_nation := nation_arabian ;
28716: LD_ADDR_OWVAR 21
28720: PUSH
28721: LD_INT 2
28723: ST_TO_ADDR
// hc_gallery :=  ;
28724: LD_ADDR_OWVAR 33
28728: PUSH
28729: LD_STRING 
28731: ST_TO_ADDR
// hc_name :=  ;
28732: LD_ADDR_OWVAR 26
28736: PUSH
28737: LD_STRING 
28739: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28740: LD_INT 1
28742: PPUSH
28743: LD_INT 11
28745: PPUSH
28746: LD_INT 10
28748: PPUSH
28749: CALL_OW 380
// un := CreateHuman ;
28753: LD_ADDR_VAR 0 1
28757: PUSH
28758: CALL_OW 44
28762: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28763: LD_VAR 0 1
28767: PPUSH
28768: LD_INT 1
28770: PPUSH
28771: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28775: LD_INT 35
28777: PPUSH
28778: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28782: LD_VAR 0 1
28786: PPUSH
28787: LD_INT 22
28789: PUSH
28790: LD_OWVAR 2
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PPUSH
28799: CALL_OW 69
28803: PPUSH
28804: LD_VAR 0 1
28808: PPUSH
28809: CALL_OW 74
28813: PPUSH
28814: CALL_OW 115
// until IsDead ( un ) ;
28818: LD_VAR 0 1
28822: PPUSH
28823: CALL_OW 301
28827: IFFALSE 28775
// end ;
28829: PPOPN 1
28831: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28832: LD_EXP 62
28836: PUSH
28837: LD_EXP 102
28841: AND
28842: IFFALSE 28854
28844: GO 28846
28846: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28847: LD_STRING earthquake(getX(game), 0, 32)
28849: PPUSH
28850: CALL_OW 559
28854: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28855: LD_EXP 62
28859: PUSH
28860: LD_EXP 103
28864: AND
28865: IFFALSE 28956
28867: GO 28869
28869: DISABLE
28870: LD_INT 0
28872: PPUSH
// begin enable ;
28873: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28874: LD_ADDR_VAR 0 1
28878: PUSH
28879: LD_INT 22
28881: PUSH
28882: LD_OWVAR 2
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 21
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 33
28903: PUSH
28904: LD_INT 3
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: PPUSH
28916: CALL_OW 69
28920: ST_TO_ADDR
// if not tmp then
28921: LD_VAR 0 1
28925: NOT
28926: IFFALSE 28930
// exit ;
28928: GO 28956
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28930: LD_VAR 0 1
28934: PUSH
28935: LD_INT 1
28937: PPUSH
28938: LD_VAR 0 1
28942: PPUSH
28943: CALL_OW 12
28947: ARRAY
28948: PPUSH
28949: LD_INT 1
28951: PPUSH
28952: CALL_OW 234
// end ;
28956: PPOPN 1
28958: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28959: LD_EXP 62
28963: PUSH
28964: LD_EXP 104
28968: AND
28969: IFFALSE 29110
28971: GO 28973
28973: DISABLE
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
28978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28979: LD_ADDR_VAR 0 3
28983: PUSH
28984: LD_INT 22
28986: PUSH
28987: LD_OWVAR 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 25
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PPUSH
29010: CALL_OW 69
29014: ST_TO_ADDR
// if not tmp then
29015: LD_VAR 0 3
29019: NOT
29020: IFFALSE 29024
// exit ;
29022: GO 29110
// un := tmp [ rand ( 1 , tmp ) ] ;
29024: LD_ADDR_VAR 0 2
29028: PUSH
29029: LD_VAR 0 3
29033: PUSH
29034: LD_INT 1
29036: PPUSH
29037: LD_VAR 0 3
29041: PPUSH
29042: CALL_OW 12
29046: ARRAY
29047: ST_TO_ADDR
// if Crawls ( un ) then
29048: LD_VAR 0 2
29052: PPUSH
29053: CALL_OW 318
29057: IFFALSE 29068
// ComWalk ( un ) ;
29059: LD_VAR 0 2
29063: PPUSH
29064: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29068: LD_VAR 0 2
29072: PPUSH
29073: LD_INT 9
29075: PPUSH
29076: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29080: LD_INT 28
29082: PPUSH
29083: LD_OWVAR 2
29087: PPUSH
29088: LD_INT 2
29090: PPUSH
29091: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29095: LD_INT 29
29097: PPUSH
29098: LD_OWVAR 2
29102: PPUSH
29103: LD_INT 2
29105: PPUSH
29106: CALL_OW 322
// end ;
29110: PPOPN 3
29112: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29113: LD_EXP 62
29117: PUSH
29118: LD_EXP 105
29122: AND
29123: IFFALSE 29234
29125: GO 29127
29127: DISABLE
29128: LD_INT 0
29130: PPUSH
29131: PPUSH
29132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29133: LD_ADDR_VAR 0 3
29137: PUSH
29138: LD_INT 22
29140: PUSH
29141: LD_OWVAR 2
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 25
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PPUSH
29164: CALL_OW 69
29168: ST_TO_ADDR
// if not tmp then
29169: LD_VAR 0 3
29173: NOT
29174: IFFALSE 29178
// exit ;
29176: GO 29234
// un := tmp [ rand ( 1 , tmp ) ] ;
29178: LD_ADDR_VAR 0 2
29182: PUSH
29183: LD_VAR 0 3
29187: PUSH
29188: LD_INT 1
29190: PPUSH
29191: LD_VAR 0 3
29195: PPUSH
29196: CALL_OW 12
29200: ARRAY
29201: ST_TO_ADDR
// if Crawls ( un ) then
29202: LD_VAR 0 2
29206: PPUSH
29207: CALL_OW 318
29211: IFFALSE 29222
// ComWalk ( un ) ;
29213: LD_VAR 0 2
29217: PPUSH
29218: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29222: LD_VAR 0 2
29226: PPUSH
29227: LD_INT 8
29229: PPUSH
29230: CALL_OW 336
// end ;
29234: PPOPN 3
29236: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29237: LD_EXP 62
29241: PUSH
29242: LD_EXP 106
29246: AND
29247: IFFALSE 29391
29249: GO 29251
29251: DISABLE
29252: LD_INT 0
29254: PPUSH
29255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29256: LD_ADDR_VAR 0 2
29260: PUSH
29261: LD_INT 22
29263: PUSH
29264: LD_OWVAR 2
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 21
29275: PUSH
29276: LD_INT 2
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: LD_INT 34
29288: PUSH
29289: LD_INT 12
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 34
29298: PUSH
29299: LD_INT 51
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 34
29308: PUSH
29309: LD_INT 32
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: LIST
29326: PPUSH
29327: CALL_OW 69
29331: ST_TO_ADDR
// if not tmp then
29332: LD_VAR 0 2
29336: NOT
29337: IFFALSE 29341
// exit ;
29339: GO 29391
// for i in tmp do
29341: LD_ADDR_VAR 0 1
29345: PUSH
29346: LD_VAR 0 2
29350: PUSH
29351: FOR_IN
29352: IFFALSE 29389
// if GetCargo ( i , mat_artifact ) = 0 then
29354: LD_VAR 0 1
29358: PPUSH
29359: LD_INT 4
29361: PPUSH
29362: CALL_OW 289
29366: PUSH
29367: LD_INT 0
29369: EQUAL
29370: IFFALSE 29387
// SetCargo ( i , mat_siberit , 100 ) ;
29372: LD_VAR 0 1
29376: PPUSH
29377: LD_INT 3
29379: PPUSH
29380: LD_INT 100
29382: PPUSH
29383: CALL_OW 290
29387: GO 29351
29389: POP
29390: POP
// end ;
29391: PPOPN 2
29393: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29394: LD_EXP 62
29398: PUSH
29399: LD_EXP 107
29403: AND
29404: IFFALSE 29587
29406: GO 29408
29408: DISABLE
29409: LD_INT 0
29411: PPUSH
29412: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29413: LD_ADDR_VAR 0 2
29417: PUSH
29418: LD_INT 22
29420: PUSH
29421: LD_OWVAR 2
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PPUSH
29430: CALL_OW 69
29434: ST_TO_ADDR
// if not tmp then
29435: LD_VAR 0 2
29439: NOT
29440: IFFALSE 29444
// exit ;
29442: GO 29587
// for i := 1 to 2 do
29444: LD_ADDR_VAR 0 1
29448: PUSH
29449: DOUBLE
29450: LD_INT 1
29452: DEC
29453: ST_TO_ADDR
29454: LD_INT 2
29456: PUSH
29457: FOR_TO
29458: IFFALSE 29585
// begin uc_side := your_side ;
29460: LD_ADDR_OWVAR 20
29464: PUSH
29465: LD_OWVAR 2
29469: ST_TO_ADDR
// uc_nation := nation_american ;
29470: LD_ADDR_OWVAR 21
29474: PUSH
29475: LD_INT 1
29477: ST_TO_ADDR
// vc_chassis := us_morphling ;
29478: LD_ADDR_OWVAR 37
29482: PUSH
29483: LD_INT 5
29485: ST_TO_ADDR
// vc_engine := engine_siberite ;
29486: LD_ADDR_OWVAR 39
29490: PUSH
29491: LD_INT 3
29493: ST_TO_ADDR
// vc_control := control_computer ;
29494: LD_ADDR_OWVAR 38
29498: PUSH
29499: LD_INT 3
29501: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29502: LD_ADDR_OWVAR 40
29506: PUSH
29507: LD_INT 10
29509: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29510: LD_VAR 0 2
29514: PUSH
29515: LD_INT 1
29517: ARRAY
29518: PPUSH
29519: CALL_OW 310
29523: NOT
29524: IFFALSE 29571
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29526: CALL_OW 45
29530: PPUSH
29531: LD_VAR 0 2
29535: PUSH
29536: LD_INT 1
29538: ARRAY
29539: PPUSH
29540: CALL_OW 250
29544: PPUSH
29545: LD_VAR 0 2
29549: PUSH
29550: LD_INT 1
29552: ARRAY
29553: PPUSH
29554: CALL_OW 251
29558: PPUSH
29559: LD_INT 12
29561: PPUSH
29562: LD_INT 1
29564: PPUSH
29565: CALL_OW 50
29569: GO 29583
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29571: CALL_OW 45
29575: PPUSH
29576: LD_INT 1
29578: PPUSH
29579: CALL_OW 51
// end ;
29583: GO 29457
29585: POP
29586: POP
// end ;
29587: PPOPN 2
29589: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29590: LD_EXP 62
29594: PUSH
29595: LD_EXP 108
29599: AND
29600: IFFALSE 29822
29602: GO 29604
29604: DISABLE
29605: LD_INT 0
29607: PPUSH
29608: PPUSH
29609: PPUSH
29610: PPUSH
29611: PPUSH
29612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29613: LD_ADDR_VAR 0 6
29617: PUSH
29618: LD_INT 22
29620: PUSH
29621: LD_OWVAR 2
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 21
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 3
29642: PUSH
29643: LD_INT 23
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: PPUSH
29662: CALL_OW 69
29666: ST_TO_ADDR
// if not tmp then
29667: LD_VAR 0 6
29671: NOT
29672: IFFALSE 29676
// exit ;
29674: GO 29822
// s1 := rand ( 1 , 4 ) ;
29676: LD_ADDR_VAR 0 2
29680: PUSH
29681: LD_INT 1
29683: PPUSH
29684: LD_INT 4
29686: PPUSH
29687: CALL_OW 12
29691: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29692: LD_ADDR_VAR 0 4
29696: PUSH
29697: LD_VAR 0 6
29701: PUSH
29702: LD_INT 1
29704: ARRAY
29705: PPUSH
29706: LD_VAR 0 2
29710: PPUSH
29711: CALL_OW 259
29715: ST_TO_ADDR
// if s1 = 1 then
29716: LD_VAR 0 2
29720: PUSH
29721: LD_INT 1
29723: EQUAL
29724: IFFALSE 29744
// s2 := rand ( 2 , 4 ) else
29726: LD_ADDR_VAR 0 3
29730: PUSH
29731: LD_INT 2
29733: PPUSH
29734: LD_INT 4
29736: PPUSH
29737: CALL_OW 12
29741: ST_TO_ADDR
29742: GO 29752
// s2 := 1 ;
29744: LD_ADDR_VAR 0 3
29748: PUSH
29749: LD_INT 1
29751: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29752: LD_ADDR_VAR 0 5
29756: PUSH
29757: LD_VAR 0 6
29761: PUSH
29762: LD_INT 1
29764: ARRAY
29765: PPUSH
29766: LD_VAR 0 3
29770: PPUSH
29771: CALL_OW 259
29775: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29776: LD_VAR 0 6
29780: PUSH
29781: LD_INT 1
29783: ARRAY
29784: PPUSH
29785: LD_VAR 0 2
29789: PPUSH
29790: LD_VAR 0 5
29794: PPUSH
29795: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29799: LD_VAR 0 6
29803: PUSH
29804: LD_INT 1
29806: ARRAY
29807: PPUSH
29808: LD_VAR 0 3
29812: PPUSH
29813: LD_VAR 0 4
29817: PPUSH
29818: CALL_OW 237
// end ;
29822: PPOPN 6
29824: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29825: LD_EXP 62
29829: PUSH
29830: LD_EXP 109
29834: AND
29835: IFFALSE 29914
29837: GO 29839
29839: DISABLE
29840: LD_INT 0
29842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29843: LD_ADDR_VAR 0 1
29847: PUSH
29848: LD_INT 22
29850: PUSH
29851: LD_OWVAR 2
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 30
29862: PUSH
29863: LD_INT 3
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PPUSH
29874: CALL_OW 69
29878: ST_TO_ADDR
// if not tmp then
29879: LD_VAR 0 1
29883: NOT
29884: IFFALSE 29888
// exit ;
29886: GO 29914
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29888: LD_VAR 0 1
29892: PUSH
29893: LD_INT 1
29895: PPUSH
29896: LD_VAR 0 1
29900: PPUSH
29901: CALL_OW 12
29905: ARRAY
29906: PPUSH
29907: LD_INT 1
29909: PPUSH
29910: CALL_OW 234
// end ;
29914: PPOPN 1
29916: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29917: LD_EXP 62
29921: PUSH
29922: LD_EXP 110
29926: AND
29927: IFFALSE 30039
29929: GO 29931
29931: DISABLE
29932: LD_INT 0
29934: PPUSH
29935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29936: LD_ADDR_VAR 0 2
29940: PUSH
29941: LD_INT 22
29943: PUSH
29944: LD_OWVAR 2
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 2
29955: PUSH
29956: LD_INT 30
29958: PUSH
29959: LD_INT 27
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 30
29968: PUSH
29969: LD_INT 26
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 30
29978: PUSH
29979: LD_INT 28
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PPUSH
29996: CALL_OW 69
30000: ST_TO_ADDR
// if not tmp then
30001: LD_VAR 0 2
30005: NOT
30006: IFFALSE 30010
// exit ;
30008: GO 30039
// for i in tmp do
30010: LD_ADDR_VAR 0 1
30014: PUSH
30015: LD_VAR 0 2
30019: PUSH
30020: FOR_IN
30021: IFFALSE 30037
// SetLives ( i , 1 ) ;
30023: LD_VAR 0 1
30027: PPUSH
30028: LD_INT 1
30030: PPUSH
30031: CALL_OW 234
30035: GO 30020
30037: POP
30038: POP
// end ;
30039: PPOPN 2
30041: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30042: LD_EXP 62
30046: PUSH
30047: LD_EXP 111
30051: AND
30052: IFFALSE 30339
30054: GO 30056
30056: DISABLE
30057: LD_INT 0
30059: PPUSH
30060: PPUSH
30061: PPUSH
// begin i := rand ( 1 , 7 ) ;
30062: LD_ADDR_VAR 0 1
30066: PUSH
30067: LD_INT 1
30069: PPUSH
30070: LD_INT 7
30072: PPUSH
30073: CALL_OW 12
30077: ST_TO_ADDR
// case i of 1 :
30078: LD_VAR 0 1
30082: PUSH
30083: LD_INT 1
30085: DOUBLE
30086: EQUAL
30087: IFTRUE 30091
30089: GO 30101
30091: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30092: LD_STRING earthquake(getX(game), 0, 32)
30094: PPUSH
30095: CALL_OW 559
30099: GO 30339
30101: LD_INT 2
30103: DOUBLE
30104: EQUAL
30105: IFTRUE 30109
30107: GO 30123
30109: POP
// begin ToLua ( displayStucuk(); ) ;
30110: LD_STRING displayStucuk();
30112: PPUSH
30113: CALL_OW 559
// ResetFog ;
30117: CALL_OW 335
// end ; 3 :
30121: GO 30339
30123: LD_INT 3
30125: DOUBLE
30126: EQUAL
30127: IFTRUE 30131
30129: GO 30235
30131: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30132: LD_ADDR_VAR 0 2
30136: PUSH
30137: LD_INT 22
30139: PUSH
30140: LD_OWVAR 2
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 25
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PPUSH
30163: CALL_OW 69
30167: ST_TO_ADDR
// if not tmp then
30168: LD_VAR 0 2
30172: NOT
30173: IFFALSE 30177
// exit ;
30175: GO 30339
// un := tmp [ rand ( 1 , tmp ) ] ;
30177: LD_ADDR_VAR 0 3
30181: PUSH
30182: LD_VAR 0 2
30186: PUSH
30187: LD_INT 1
30189: PPUSH
30190: LD_VAR 0 2
30194: PPUSH
30195: CALL_OW 12
30199: ARRAY
30200: ST_TO_ADDR
// if Crawls ( un ) then
30201: LD_VAR 0 3
30205: PPUSH
30206: CALL_OW 318
30210: IFFALSE 30221
// ComWalk ( un ) ;
30212: LD_VAR 0 3
30216: PPUSH
30217: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30221: LD_VAR 0 3
30225: PPUSH
30226: LD_INT 8
30228: PPUSH
30229: CALL_OW 336
// end ; 4 :
30233: GO 30339
30235: LD_INT 4
30237: DOUBLE
30238: EQUAL
30239: IFTRUE 30243
30241: GO 30317
30243: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30244: LD_ADDR_VAR 0 2
30248: PUSH
30249: LD_INT 22
30251: PUSH
30252: LD_OWVAR 2
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 30
30263: PUSH
30264: LD_INT 29
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PPUSH
30275: CALL_OW 69
30279: ST_TO_ADDR
// if not tmp then
30280: LD_VAR 0 2
30284: NOT
30285: IFFALSE 30289
// exit ;
30287: GO 30339
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30289: LD_VAR 0 2
30293: PUSH
30294: LD_INT 1
30296: ARRAY
30297: PPUSH
30298: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30302: LD_VAR 0 2
30306: PUSH
30307: LD_INT 1
30309: ARRAY
30310: PPUSH
30311: CALL_OW 65
// end ; 5 .. 7 :
30315: GO 30339
30317: LD_INT 5
30319: DOUBLE
30320: GREATEREQUAL
30321: IFFALSE 30329
30323: LD_INT 7
30325: DOUBLE
30326: LESSEQUAL
30327: IFTRUE 30331
30329: GO 30338
30331: POP
// StreamSibBomb ; end ;
30332: CALL 26576 0 0
30336: GO 30339
30338: POP
// end ;
30339: PPOPN 3
30341: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30342: LD_EXP 62
30346: PUSH
30347: LD_EXP 112
30351: AND
30352: IFFALSE 30508
30354: GO 30356
30356: DISABLE
30357: LD_INT 0
30359: PPUSH
30360: PPUSH
30361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30362: LD_ADDR_VAR 0 2
30366: PUSH
30367: LD_INT 81
30369: PUSH
30370: LD_OWVAR 2
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 21
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 21
30394: PUSH
30395: LD_INT 2
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PPUSH
30411: CALL_OW 69
30415: ST_TO_ADDR
// if not tmp then
30416: LD_VAR 0 2
30420: NOT
30421: IFFALSE 30425
// exit ;
30423: GO 30508
// p := 0 ;
30425: LD_ADDR_VAR 0 3
30429: PUSH
30430: LD_INT 0
30432: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30433: LD_INT 35
30435: PPUSH
30436: CALL_OW 67
// p := p + 1 ;
30440: LD_ADDR_VAR 0 3
30444: PUSH
30445: LD_VAR 0 3
30449: PUSH
30450: LD_INT 1
30452: PLUS
30453: ST_TO_ADDR
// for i in tmp do
30454: LD_ADDR_VAR 0 1
30458: PUSH
30459: LD_VAR 0 2
30463: PUSH
30464: FOR_IN
30465: IFFALSE 30496
// if GetLives ( i ) < 1000 then
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 256
30476: PUSH
30477: LD_INT 1000
30479: LESS
30480: IFFALSE 30494
// SetLives ( i , 1000 ) ;
30482: LD_VAR 0 1
30486: PPUSH
30487: LD_INT 1000
30489: PPUSH
30490: CALL_OW 234
30494: GO 30464
30496: POP
30497: POP
// until p > 20 ;
30498: LD_VAR 0 3
30502: PUSH
30503: LD_INT 20
30505: GREATER
30506: IFFALSE 30433
// end ;
30508: PPOPN 3
30510: END
// every 0 0$1 trigger StreamModeActive and sTime do
30511: LD_EXP 62
30515: PUSH
30516: LD_EXP 113
30520: AND
30521: IFFALSE 30556
30523: GO 30525
30525: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30526: LD_INT 28
30528: PPUSH
30529: LD_OWVAR 2
30533: PPUSH
30534: LD_INT 2
30536: PPUSH
30537: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30541: LD_INT 30
30543: PPUSH
30544: LD_OWVAR 2
30548: PPUSH
30549: LD_INT 2
30551: PPUSH
30552: CALL_OW 322
// end ;
30556: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30557: LD_EXP 62
30561: PUSH
30562: LD_EXP 114
30566: AND
30567: IFFALSE 30688
30569: GO 30571
30571: DISABLE
30572: LD_INT 0
30574: PPUSH
30575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30576: LD_ADDR_VAR 0 2
30580: PUSH
30581: LD_INT 22
30583: PUSH
30584: LD_OWVAR 2
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 21
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 3
30605: PUSH
30606: LD_INT 23
30608: PUSH
30609: LD_INT 0
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: PPUSH
30625: CALL_OW 69
30629: ST_TO_ADDR
// if not tmp then
30630: LD_VAR 0 2
30634: NOT
30635: IFFALSE 30639
// exit ;
30637: GO 30688
// for i in tmp do
30639: LD_ADDR_VAR 0 1
30643: PUSH
30644: LD_VAR 0 2
30648: PUSH
30649: FOR_IN
30650: IFFALSE 30686
// begin if Crawls ( i ) then
30652: LD_VAR 0 1
30656: PPUSH
30657: CALL_OW 318
30661: IFFALSE 30672
// ComWalk ( i ) ;
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 138
// SetClass ( i , 2 ) ;
30672: LD_VAR 0 1
30676: PPUSH
30677: LD_INT 2
30679: PPUSH
30680: CALL_OW 336
// end ;
30684: GO 30649
30686: POP
30687: POP
// end ;
30688: PPOPN 2
30690: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30691: LD_EXP 62
30695: PUSH
30696: LD_EXP 115
30700: AND
30701: IFFALSE 30989
30703: GO 30705
30705: DISABLE
30706: LD_INT 0
30708: PPUSH
30709: PPUSH
30710: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30711: LD_OWVAR 2
30715: PPUSH
30716: LD_INT 9
30718: PPUSH
30719: LD_INT 1
30721: PPUSH
30722: LD_INT 1
30724: PPUSH
30725: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30729: LD_INT 9
30731: PPUSH
30732: LD_OWVAR 2
30736: PPUSH
30737: CALL_OW 343
// uc_side := 9 ;
30741: LD_ADDR_OWVAR 20
30745: PUSH
30746: LD_INT 9
30748: ST_TO_ADDR
// uc_nation := 2 ;
30749: LD_ADDR_OWVAR 21
30753: PUSH
30754: LD_INT 2
30756: ST_TO_ADDR
// hc_name := Dark Warrior ;
30757: LD_ADDR_OWVAR 26
30761: PUSH
30762: LD_STRING Dark Warrior
30764: ST_TO_ADDR
// hc_gallery :=  ;
30765: LD_ADDR_OWVAR 33
30769: PUSH
30770: LD_STRING 
30772: ST_TO_ADDR
// hc_noskilllimit := true ;
30773: LD_ADDR_OWVAR 76
30777: PUSH
30778: LD_INT 1
30780: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30781: LD_ADDR_OWVAR 31
30785: PUSH
30786: LD_INT 30
30788: PUSH
30789: LD_INT 30
30791: PUSH
30792: LD_INT 30
30794: PUSH
30795: LD_INT 30
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
// un := CreateHuman ;
30804: LD_ADDR_VAR 0 3
30808: PUSH
30809: CALL_OW 44
30813: ST_TO_ADDR
// hc_noskilllimit := false ;
30814: LD_ADDR_OWVAR 76
30818: PUSH
30819: LD_INT 0
30821: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30822: LD_VAR 0 3
30826: PPUSH
30827: LD_INT 1
30829: PPUSH
30830: CALL_OW 51
// ToLua ( playRanger() ) ;
30834: LD_STRING playRanger()
30836: PPUSH
30837: CALL_OW 559
// p := 0 ;
30841: LD_ADDR_VAR 0 2
30845: PUSH
30846: LD_INT 0
30848: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30849: LD_INT 35
30851: PPUSH
30852: CALL_OW 67
// p := p + 1 ;
30856: LD_ADDR_VAR 0 2
30860: PUSH
30861: LD_VAR 0 2
30865: PUSH
30866: LD_INT 1
30868: PLUS
30869: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30870: LD_VAR 0 3
30874: PPUSH
30875: CALL_OW 256
30879: PUSH
30880: LD_INT 1000
30882: LESS
30883: IFFALSE 30897
// SetLives ( un , 1000 ) ;
30885: LD_VAR 0 3
30889: PPUSH
30890: LD_INT 1000
30892: PPUSH
30893: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30897: LD_VAR 0 3
30901: PPUSH
30902: LD_INT 81
30904: PUSH
30905: LD_OWVAR 2
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 91
30916: PUSH
30917: LD_VAR 0 3
30921: PUSH
30922: LD_INT 30
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: LIST
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PPUSH
30934: CALL_OW 69
30938: PPUSH
30939: LD_VAR 0 3
30943: PPUSH
30944: CALL_OW 74
30948: PPUSH
30949: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30953: LD_VAR 0 2
30957: PUSH
30958: LD_INT 80
30960: GREATER
30961: PUSH
30962: LD_VAR 0 3
30966: PPUSH
30967: CALL_OW 301
30971: OR
30972: IFFALSE 30849
// if un then
30974: LD_VAR 0 3
30978: IFFALSE 30989
// RemoveUnit ( un ) ;
30980: LD_VAR 0 3
30984: PPUSH
30985: CALL_OW 64
// end ;
30989: PPOPN 3
30991: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30992: LD_EXP 116
30996: IFFALSE 31112
30998: GO 31000
31000: DISABLE
31001: LD_INT 0
31003: PPUSH
31004: PPUSH
31005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31006: LD_ADDR_VAR 0 2
31010: PUSH
31011: LD_INT 81
31013: PUSH
31014: LD_OWVAR 2
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 21
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PPUSH
31037: CALL_OW 69
31041: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31042: LD_STRING playComputer()
31044: PPUSH
31045: CALL_OW 559
// if not tmp then
31049: LD_VAR 0 2
31053: NOT
31054: IFFALSE 31058
// exit ;
31056: GO 31112
// for i in tmp do
31058: LD_ADDR_VAR 0 1
31062: PUSH
31063: LD_VAR 0 2
31067: PUSH
31068: FOR_IN
31069: IFFALSE 31110
// for j := 1 to 4 do
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: DOUBLE
31077: LD_INT 1
31079: DEC
31080: ST_TO_ADDR
31081: LD_INT 4
31083: PUSH
31084: FOR_TO
31085: IFFALSE 31106
// SetSkill ( i , j , 10 ) ;
31087: LD_VAR 0 1
31091: PPUSH
31092: LD_VAR 0 3
31096: PPUSH
31097: LD_INT 10
31099: PPUSH
31100: CALL_OW 237
31104: GO 31084
31106: POP
31107: POP
31108: GO 31068
31110: POP
31111: POP
// end ;
31112: PPOPN 3
31114: END
// every 0 0$1 trigger s30 do var i , tmp ;
31115: LD_EXP 117
31119: IFFALSE 31188
31121: GO 31123
31123: DISABLE
31124: LD_INT 0
31126: PPUSH
31127: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31128: LD_ADDR_VAR 0 2
31132: PUSH
31133: LD_INT 22
31135: PUSH
31136: LD_OWVAR 2
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PPUSH
31145: CALL_OW 69
31149: ST_TO_ADDR
// if not tmp then
31150: LD_VAR 0 2
31154: NOT
31155: IFFALSE 31159
// exit ;
31157: GO 31188
// for i in tmp do
31159: LD_ADDR_VAR 0 1
31163: PUSH
31164: LD_VAR 0 2
31168: PUSH
31169: FOR_IN
31170: IFFALSE 31186
// SetLives ( i , 300 ) ;
31172: LD_VAR 0 1
31176: PPUSH
31177: LD_INT 300
31179: PPUSH
31180: CALL_OW 234
31184: GO 31169
31186: POP
31187: POP
// end ;
31188: PPOPN 2
31190: END
// every 0 0$1 trigger s60 do var i , tmp ;
31191: LD_EXP 118
31195: IFFALSE 31264
31197: GO 31199
31199: DISABLE
31200: LD_INT 0
31202: PPUSH
31203: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31204: LD_ADDR_VAR 0 2
31208: PUSH
31209: LD_INT 22
31211: PUSH
31212: LD_OWVAR 2
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PPUSH
31221: CALL_OW 69
31225: ST_TO_ADDR
// if not tmp then
31226: LD_VAR 0 2
31230: NOT
31231: IFFALSE 31235
// exit ;
31233: GO 31264
// for i in tmp do
31235: LD_ADDR_VAR 0 1
31239: PUSH
31240: LD_VAR 0 2
31244: PUSH
31245: FOR_IN
31246: IFFALSE 31262
// SetLives ( i , 600 ) ;
31248: LD_VAR 0 1
31252: PPUSH
31253: LD_INT 600
31255: PPUSH
31256: CALL_OW 234
31260: GO 31245
31262: POP
31263: POP
// end ;
31264: PPOPN 2
31266: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31267: LD_INT 0
31269: PPUSH
// case cmd of 301 :
31270: LD_VAR 0 1
31274: PUSH
31275: LD_INT 301
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 31315
31283: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31284: LD_VAR 0 6
31288: PPUSH
31289: LD_VAR 0 7
31293: PPUSH
31294: LD_VAR 0 8
31298: PPUSH
31299: LD_VAR 0 4
31303: PPUSH
31304: LD_VAR 0 5
31308: PPUSH
31309: CALL 32516 0 5
31313: GO 31436
31315: LD_INT 302
31317: DOUBLE
31318: EQUAL
31319: IFTRUE 31323
31321: GO 31360
31323: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31324: LD_VAR 0 6
31328: PPUSH
31329: LD_VAR 0 7
31333: PPUSH
31334: LD_VAR 0 8
31338: PPUSH
31339: LD_VAR 0 9
31343: PPUSH
31344: LD_VAR 0 4
31348: PPUSH
31349: LD_VAR 0 5
31353: PPUSH
31354: CALL 32607 0 6
31358: GO 31436
31360: LD_INT 303
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31405
31368: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31369: LD_VAR 0 6
31373: PPUSH
31374: LD_VAR 0 7
31378: PPUSH
31379: LD_VAR 0 8
31383: PPUSH
31384: LD_VAR 0 9
31388: PPUSH
31389: LD_VAR 0 4
31393: PPUSH
31394: LD_VAR 0 5
31398: PPUSH
31399: CALL 31441 0 6
31403: GO 31436
31405: LD_INT 304
31407: DOUBLE
31408: EQUAL
31409: IFTRUE 31413
31411: GO 31435
31413: POP
// hHackTeleport ( unit , x , y ) ; end ;
31414: LD_VAR 0 2
31418: PPUSH
31419: LD_VAR 0 4
31423: PPUSH
31424: LD_VAR 0 5
31428: PPUSH
31429: CALL 33200 0 3
31433: GO 31436
31435: POP
// end ;
31436: LD_VAR 0 12
31440: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31441: LD_INT 0
31443: PPUSH
31444: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31445: LD_VAR 0 1
31449: PUSH
31450: LD_INT 1
31452: LESS
31453: PUSH
31454: LD_VAR 0 1
31458: PUSH
31459: LD_INT 3
31461: GREATER
31462: OR
31463: PUSH
31464: LD_VAR 0 5
31468: PPUSH
31469: LD_VAR 0 6
31473: PPUSH
31474: CALL_OW 428
31478: OR
31479: IFFALSE 31483
// exit ;
31481: GO 32203
// uc_side := your_side ;
31483: LD_ADDR_OWVAR 20
31487: PUSH
31488: LD_OWVAR 2
31492: ST_TO_ADDR
// uc_nation := nation ;
31493: LD_ADDR_OWVAR 21
31497: PUSH
31498: LD_VAR 0 1
31502: ST_TO_ADDR
// bc_level = 1 ;
31503: LD_ADDR_OWVAR 43
31507: PUSH
31508: LD_INT 1
31510: ST_TO_ADDR
// case btype of 1 :
31511: LD_VAR 0 2
31515: PUSH
31516: LD_INT 1
31518: DOUBLE
31519: EQUAL
31520: IFTRUE 31524
31522: GO 31535
31524: POP
// bc_type := b_depot ; 2 :
31525: LD_ADDR_OWVAR 42
31529: PUSH
31530: LD_INT 0
31532: ST_TO_ADDR
31533: GO 32147
31535: LD_INT 2
31537: DOUBLE
31538: EQUAL
31539: IFTRUE 31543
31541: GO 31554
31543: POP
// bc_type := b_warehouse ; 3 :
31544: LD_ADDR_OWVAR 42
31548: PUSH
31549: LD_INT 1
31551: ST_TO_ADDR
31552: GO 32147
31554: LD_INT 3
31556: DOUBLE
31557: EQUAL
31558: IFTRUE 31562
31560: GO 31573
31562: POP
// bc_type := b_lab ; 4 .. 9 :
31563: LD_ADDR_OWVAR 42
31567: PUSH
31568: LD_INT 6
31570: ST_TO_ADDR
31571: GO 32147
31573: LD_INT 4
31575: DOUBLE
31576: GREATEREQUAL
31577: IFFALSE 31585
31579: LD_INT 9
31581: DOUBLE
31582: LESSEQUAL
31583: IFTRUE 31587
31585: GO 31639
31587: POP
// begin bc_type := b_lab_half ;
31588: LD_ADDR_OWVAR 42
31592: PUSH
31593: LD_INT 7
31595: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31596: LD_ADDR_OWVAR 44
31600: PUSH
31601: LD_INT 10
31603: PUSH
31604: LD_INT 11
31606: PUSH
31607: LD_INT 12
31609: PUSH
31610: LD_INT 15
31612: PUSH
31613: LD_INT 14
31615: PUSH
31616: LD_INT 13
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: PUSH
31627: LD_VAR 0 2
31631: PUSH
31632: LD_INT 3
31634: MINUS
31635: ARRAY
31636: ST_TO_ADDR
// end ; 10 .. 13 :
31637: GO 32147
31639: LD_INT 10
31641: DOUBLE
31642: GREATEREQUAL
31643: IFFALSE 31651
31645: LD_INT 13
31647: DOUBLE
31648: LESSEQUAL
31649: IFTRUE 31653
31651: GO 31730
31653: POP
// begin bc_type := b_lab_full ;
31654: LD_ADDR_OWVAR 42
31658: PUSH
31659: LD_INT 8
31661: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31662: LD_ADDR_OWVAR 44
31666: PUSH
31667: LD_INT 10
31669: PUSH
31670: LD_INT 12
31672: PUSH
31673: LD_INT 14
31675: PUSH
31676: LD_INT 13
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: PUSH
31685: LD_VAR 0 2
31689: PUSH
31690: LD_INT 9
31692: MINUS
31693: ARRAY
31694: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31695: LD_ADDR_OWVAR 45
31699: PUSH
31700: LD_INT 11
31702: PUSH
31703: LD_INT 15
31705: PUSH
31706: LD_INT 12
31708: PUSH
31709: LD_INT 15
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: PUSH
31718: LD_VAR 0 2
31722: PUSH
31723: LD_INT 9
31725: MINUS
31726: ARRAY
31727: ST_TO_ADDR
// end ; 14 :
31728: GO 32147
31730: LD_INT 14
31732: DOUBLE
31733: EQUAL
31734: IFTRUE 31738
31736: GO 31749
31738: POP
// bc_type := b_workshop ; 15 :
31739: LD_ADDR_OWVAR 42
31743: PUSH
31744: LD_INT 2
31746: ST_TO_ADDR
31747: GO 32147
31749: LD_INT 15
31751: DOUBLE
31752: EQUAL
31753: IFTRUE 31757
31755: GO 31768
31757: POP
// bc_type := b_factory ; 16 :
31758: LD_ADDR_OWVAR 42
31762: PUSH
31763: LD_INT 3
31765: ST_TO_ADDR
31766: GO 32147
31768: LD_INT 16
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31776
31774: GO 31787
31776: POP
// bc_type := b_ext_gun ; 17 :
31777: LD_ADDR_OWVAR 42
31781: PUSH
31782: LD_INT 17
31784: ST_TO_ADDR
31785: GO 32147
31787: LD_INT 17
31789: DOUBLE
31790: EQUAL
31791: IFTRUE 31795
31793: GO 31823
31795: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31796: LD_ADDR_OWVAR 42
31800: PUSH
31801: LD_INT 19
31803: PUSH
31804: LD_INT 23
31806: PUSH
31807: LD_INT 19
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: LIST
31814: PUSH
31815: LD_VAR 0 1
31819: ARRAY
31820: ST_TO_ADDR
31821: GO 32147
31823: LD_INT 18
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31831
31829: GO 31842
31831: POP
// bc_type := b_ext_radar ; 19 :
31832: LD_ADDR_OWVAR 42
31836: PUSH
31837: LD_INT 20
31839: ST_TO_ADDR
31840: GO 32147
31842: LD_INT 19
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31850
31848: GO 31861
31850: POP
// bc_type := b_ext_radio ; 20 :
31851: LD_ADDR_OWVAR 42
31855: PUSH
31856: LD_INT 22
31858: ST_TO_ADDR
31859: GO 32147
31861: LD_INT 20
31863: DOUBLE
31864: EQUAL
31865: IFTRUE 31869
31867: GO 31880
31869: POP
// bc_type := b_ext_siberium ; 21 :
31870: LD_ADDR_OWVAR 42
31874: PUSH
31875: LD_INT 21
31877: ST_TO_ADDR
31878: GO 32147
31880: LD_INT 21
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31899
31888: POP
// bc_type := b_ext_computer ; 22 :
31889: LD_ADDR_OWVAR 42
31893: PUSH
31894: LD_INT 24
31896: ST_TO_ADDR
31897: GO 32147
31899: LD_INT 22
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 31918
31907: POP
// bc_type := b_ext_track ; 23 :
31908: LD_ADDR_OWVAR 42
31912: PUSH
31913: LD_INT 16
31915: ST_TO_ADDR
31916: GO 32147
31918: LD_INT 23
31920: DOUBLE
31921: EQUAL
31922: IFTRUE 31926
31924: GO 31937
31926: POP
// bc_type := b_ext_laser ; 24 :
31927: LD_ADDR_OWVAR 42
31931: PUSH
31932: LD_INT 25
31934: ST_TO_ADDR
31935: GO 32147
31937: LD_INT 24
31939: DOUBLE
31940: EQUAL
31941: IFTRUE 31945
31943: GO 31956
31945: POP
// bc_type := b_control_tower ; 25 :
31946: LD_ADDR_OWVAR 42
31950: PUSH
31951: LD_INT 36
31953: ST_TO_ADDR
31954: GO 32147
31956: LD_INT 25
31958: DOUBLE
31959: EQUAL
31960: IFTRUE 31964
31962: GO 31975
31964: POP
// bc_type := b_breastwork ; 26 :
31965: LD_ADDR_OWVAR 42
31969: PUSH
31970: LD_INT 31
31972: ST_TO_ADDR
31973: GO 32147
31975: LD_INT 26
31977: DOUBLE
31978: EQUAL
31979: IFTRUE 31983
31981: GO 31994
31983: POP
// bc_type := b_bunker ; 27 :
31984: LD_ADDR_OWVAR 42
31988: PUSH
31989: LD_INT 32
31991: ST_TO_ADDR
31992: GO 32147
31994: LD_INT 27
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32013
32002: POP
// bc_type := b_turret ; 28 :
32003: LD_ADDR_OWVAR 42
32007: PUSH
32008: LD_INT 33
32010: ST_TO_ADDR
32011: GO 32147
32013: LD_INT 28
32015: DOUBLE
32016: EQUAL
32017: IFTRUE 32021
32019: GO 32032
32021: POP
// bc_type := b_armoury ; 29 :
32022: LD_ADDR_OWVAR 42
32026: PUSH
32027: LD_INT 4
32029: ST_TO_ADDR
32030: GO 32147
32032: LD_INT 29
32034: DOUBLE
32035: EQUAL
32036: IFTRUE 32040
32038: GO 32051
32040: POP
// bc_type := b_barracks ; 30 :
32041: LD_ADDR_OWVAR 42
32045: PUSH
32046: LD_INT 5
32048: ST_TO_ADDR
32049: GO 32147
32051: LD_INT 30
32053: DOUBLE
32054: EQUAL
32055: IFTRUE 32059
32057: GO 32070
32059: POP
// bc_type := b_solar_power ; 31 :
32060: LD_ADDR_OWVAR 42
32064: PUSH
32065: LD_INT 27
32067: ST_TO_ADDR
32068: GO 32147
32070: LD_INT 31
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32089
32078: POP
// bc_type := b_oil_power ; 32 :
32079: LD_ADDR_OWVAR 42
32083: PUSH
32084: LD_INT 26
32086: ST_TO_ADDR
32087: GO 32147
32089: LD_INT 32
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32097
32095: GO 32108
32097: POP
// bc_type := b_siberite_power ; 33 :
32098: LD_ADDR_OWVAR 42
32102: PUSH
32103: LD_INT 28
32105: ST_TO_ADDR
32106: GO 32147
32108: LD_INT 33
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32127
32116: POP
// bc_type := b_oil_mine ; 34 :
32117: LD_ADDR_OWVAR 42
32121: PUSH
32122: LD_INT 29
32124: ST_TO_ADDR
32125: GO 32147
32127: LD_INT 34
32129: DOUBLE
32130: EQUAL
32131: IFTRUE 32135
32133: GO 32146
32135: POP
// bc_type := b_siberite_mine ; end ;
32136: LD_ADDR_OWVAR 42
32140: PUSH
32141: LD_INT 30
32143: ST_TO_ADDR
32144: GO 32147
32146: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32147: LD_ADDR_VAR 0 8
32151: PUSH
32152: LD_VAR 0 5
32156: PPUSH
32157: LD_VAR 0 6
32161: PPUSH
32162: LD_VAR 0 3
32166: PPUSH
32167: CALL_OW 47
32171: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32172: LD_OWVAR 42
32176: PUSH
32177: LD_INT 32
32179: PUSH
32180: LD_INT 33
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: IN
32187: IFFALSE 32203
// PlaceWeaponTurret ( b , weapon ) ;
32189: LD_VAR 0 8
32193: PPUSH
32194: LD_VAR 0 4
32198: PPUSH
32199: CALL_OW 431
// end ;
32203: LD_VAR 0 7
32207: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32208: LD_INT 0
32210: PPUSH
32211: PPUSH
32212: PPUSH
32213: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32214: LD_ADDR_VAR 0 4
32218: PUSH
32219: LD_INT 22
32221: PUSH
32222: LD_OWVAR 2
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 2
32233: PUSH
32234: LD_INT 30
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 30
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PPUSH
32263: CALL_OW 69
32267: ST_TO_ADDR
// if not tmp then
32268: LD_VAR 0 4
32272: NOT
32273: IFFALSE 32277
// exit ;
32275: GO 32336
// for i in tmp do
32277: LD_ADDR_VAR 0 2
32281: PUSH
32282: LD_VAR 0 4
32286: PUSH
32287: FOR_IN
32288: IFFALSE 32334
// for j = 1 to 3 do
32290: LD_ADDR_VAR 0 3
32294: PUSH
32295: DOUBLE
32296: LD_INT 1
32298: DEC
32299: ST_TO_ADDR
32300: LD_INT 3
32302: PUSH
32303: FOR_TO
32304: IFFALSE 32330
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32306: LD_VAR 0 2
32310: PPUSH
32311: CALL_OW 274
32315: PPUSH
32316: LD_VAR 0 3
32320: PPUSH
32321: LD_INT 99999
32323: PPUSH
32324: CALL_OW 277
32328: GO 32303
32330: POP
32331: POP
32332: GO 32287
32334: POP
32335: POP
// end ;
32336: LD_VAR 0 1
32340: RET
// export function hHackSetLevel10 ; var i , j ; begin
32341: LD_INT 0
32343: PPUSH
32344: PPUSH
32345: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32346: LD_ADDR_VAR 0 2
32350: PUSH
32351: LD_INT 21
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PPUSH
32361: CALL_OW 69
32365: PUSH
32366: FOR_IN
32367: IFFALSE 32419
// if IsSelected ( i ) then
32369: LD_VAR 0 2
32373: PPUSH
32374: CALL_OW 306
32378: IFFALSE 32417
// begin for j := 1 to 4 do
32380: LD_ADDR_VAR 0 3
32384: PUSH
32385: DOUBLE
32386: LD_INT 1
32388: DEC
32389: ST_TO_ADDR
32390: LD_INT 4
32392: PUSH
32393: FOR_TO
32394: IFFALSE 32415
// SetSkill ( i , j , 10 ) ;
32396: LD_VAR 0 2
32400: PPUSH
32401: LD_VAR 0 3
32405: PPUSH
32406: LD_INT 10
32408: PPUSH
32409: CALL_OW 237
32413: GO 32393
32415: POP
32416: POP
// end ;
32417: GO 32366
32419: POP
32420: POP
// end ;
32421: LD_VAR 0 1
32425: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32426: LD_INT 0
32428: PPUSH
32429: PPUSH
32430: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32431: LD_ADDR_VAR 0 2
32435: PUSH
32436: LD_INT 22
32438: PUSH
32439: LD_OWVAR 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 21
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PPUSH
32462: CALL_OW 69
32466: PUSH
32467: FOR_IN
32468: IFFALSE 32509
// begin for j := 1 to 4 do
32470: LD_ADDR_VAR 0 3
32474: PUSH
32475: DOUBLE
32476: LD_INT 1
32478: DEC
32479: ST_TO_ADDR
32480: LD_INT 4
32482: PUSH
32483: FOR_TO
32484: IFFALSE 32505
// SetSkill ( i , j , 10 ) ;
32486: LD_VAR 0 2
32490: PPUSH
32491: LD_VAR 0 3
32495: PPUSH
32496: LD_INT 10
32498: PPUSH
32499: CALL_OW 237
32503: GO 32483
32505: POP
32506: POP
// end ;
32507: GO 32467
32509: POP
32510: POP
// end ;
32511: LD_VAR 0 1
32515: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32516: LD_INT 0
32518: PPUSH
// uc_side := your_side ;
32519: LD_ADDR_OWVAR 20
32523: PUSH
32524: LD_OWVAR 2
32528: ST_TO_ADDR
// uc_nation := nation ;
32529: LD_ADDR_OWVAR 21
32533: PUSH
32534: LD_VAR 0 1
32538: ST_TO_ADDR
// InitHc ;
32539: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32543: LD_INT 0
32545: PPUSH
32546: LD_VAR 0 2
32550: PPUSH
32551: LD_VAR 0 3
32555: PPUSH
32556: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32560: LD_VAR 0 4
32564: PPUSH
32565: LD_VAR 0 5
32569: PPUSH
32570: CALL_OW 428
32574: PUSH
32575: LD_INT 0
32577: EQUAL
32578: IFFALSE 32602
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32580: CALL_OW 44
32584: PPUSH
32585: LD_VAR 0 4
32589: PPUSH
32590: LD_VAR 0 5
32594: PPUSH
32595: LD_INT 1
32597: PPUSH
32598: CALL_OW 48
// end ;
32602: LD_VAR 0 6
32606: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32607: LD_INT 0
32609: PPUSH
32610: PPUSH
// uc_side := your_side ;
32611: LD_ADDR_OWVAR 20
32615: PUSH
32616: LD_OWVAR 2
32620: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32621: LD_VAR 0 1
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: LD_INT 2
32631: PUSH
32632: LD_INT 3
32634: PUSH
32635: LD_INT 4
32637: PUSH
32638: LD_INT 5
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: IN
32648: IFFALSE 32660
// uc_nation := nation_american else
32650: LD_ADDR_OWVAR 21
32654: PUSH
32655: LD_INT 1
32657: ST_TO_ADDR
32658: GO 32703
// if chassis in [ 11 , 12 , 13 , 14 ] then
32660: LD_VAR 0 1
32664: PUSH
32665: LD_INT 11
32667: PUSH
32668: LD_INT 12
32670: PUSH
32671: LD_INT 13
32673: PUSH
32674: LD_INT 14
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: IN
32683: IFFALSE 32695
// uc_nation := nation_arabian else
32685: LD_ADDR_OWVAR 21
32689: PUSH
32690: LD_INT 2
32692: ST_TO_ADDR
32693: GO 32703
// uc_nation := nation_russian ;
32695: LD_ADDR_OWVAR 21
32699: PUSH
32700: LD_INT 3
32702: ST_TO_ADDR
// vc_chassis := chassis ;
32703: LD_ADDR_OWVAR 37
32707: PUSH
32708: LD_VAR 0 1
32712: ST_TO_ADDR
// vc_engine := engine ;
32713: LD_ADDR_OWVAR 39
32717: PUSH
32718: LD_VAR 0 2
32722: ST_TO_ADDR
// vc_control := control ;
32723: LD_ADDR_OWVAR 38
32727: PUSH
32728: LD_VAR 0 3
32732: ST_TO_ADDR
// vc_weapon := weapon ;
32733: LD_ADDR_OWVAR 40
32737: PUSH
32738: LD_VAR 0 4
32742: ST_TO_ADDR
// un := CreateVehicle ;
32743: LD_ADDR_VAR 0 8
32747: PUSH
32748: CALL_OW 45
32752: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32753: LD_VAR 0 8
32757: PPUSH
32758: LD_INT 0
32760: PPUSH
32761: LD_INT 5
32763: PPUSH
32764: CALL_OW 12
32768: PPUSH
32769: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32773: LD_VAR 0 8
32777: PPUSH
32778: LD_VAR 0 5
32782: PPUSH
32783: LD_VAR 0 6
32787: PPUSH
32788: LD_INT 1
32790: PPUSH
32791: CALL_OW 48
// end ;
32795: LD_VAR 0 7
32799: RET
// export hInvincible ; every 1 do
32800: GO 32802
32802: DISABLE
// hInvincible := [ ] ;
32803: LD_ADDR_EXP 119
32807: PUSH
32808: EMPTY
32809: ST_TO_ADDR
32810: END
// every 10 do var i ;
32811: GO 32813
32813: DISABLE
32814: LD_INT 0
32816: PPUSH
// begin enable ;
32817: ENABLE
// if not hInvincible then
32818: LD_EXP 119
32822: NOT
32823: IFFALSE 32827
// exit ;
32825: GO 32871
// for i in hInvincible do
32827: LD_ADDR_VAR 0 1
32831: PUSH
32832: LD_EXP 119
32836: PUSH
32837: FOR_IN
32838: IFFALSE 32869
// if GetLives ( i ) < 1000 then
32840: LD_VAR 0 1
32844: PPUSH
32845: CALL_OW 256
32849: PUSH
32850: LD_INT 1000
32852: LESS
32853: IFFALSE 32867
// SetLives ( i , 1000 ) ;
32855: LD_VAR 0 1
32859: PPUSH
32860: LD_INT 1000
32862: PPUSH
32863: CALL_OW 234
32867: GO 32837
32869: POP
32870: POP
// end ;
32871: PPOPN 1
32873: END
// export function hHackInvincible ; var i ; begin
32874: LD_INT 0
32876: PPUSH
32877: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32878: LD_ADDR_VAR 0 2
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: LD_INT 21
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 21
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: LIST
32910: PPUSH
32911: CALL_OW 69
32915: PUSH
32916: FOR_IN
32917: IFFALSE 32978
// if IsSelected ( i ) then
32919: LD_VAR 0 2
32923: PPUSH
32924: CALL_OW 306
32928: IFFALSE 32976
// begin if i in hInvincible then
32930: LD_VAR 0 2
32934: PUSH
32935: LD_EXP 119
32939: IN
32940: IFFALSE 32960
// hInvincible := hInvincible diff i else
32942: LD_ADDR_EXP 119
32946: PUSH
32947: LD_EXP 119
32951: PUSH
32952: LD_VAR 0 2
32956: DIFF
32957: ST_TO_ADDR
32958: GO 32976
// hInvincible := hInvincible union i ;
32960: LD_ADDR_EXP 119
32964: PUSH
32965: LD_EXP 119
32969: PUSH
32970: LD_VAR 0 2
32974: UNION
32975: ST_TO_ADDR
// end ;
32976: GO 32916
32978: POP
32979: POP
// end ;
32980: LD_VAR 0 1
32984: RET
// export function hHackInvisible ; var i , j ; begin
32985: LD_INT 0
32987: PPUSH
32988: PPUSH
32989: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32990: LD_ADDR_VAR 0 2
32994: PUSH
32995: LD_INT 21
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PPUSH
33005: CALL_OW 69
33009: PUSH
33010: FOR_IN
33011: IFFALSE 33035
// if IsSelected ( i ) then
33013: LD_VAR 0 2
33017: PPUSH
33018: CALL_OW 306
33022: IFFALSE 33033
// ComForceInvisible ( i ) ;
33024: LD_VAR 0 2
33028: PPUSH
33029: CALL_OW 496
33033: GO 33010
33035: POP
33036: POP
// end ;
33037: LD_VAR 0 1
33041: RET
// export function hHackChangeYourSide ; begin
33042: LD_INT 0
33044: PPUSH
// if your_side = 8 then
33045: LD_OWVAR 2
33049: PUSH
33050: LD_INT 8
33052: EQUAL
33053: IFFALSE 33065
// your_side := 0 else
33055: LD_ADDR_OWVAR 2
33059: PUSH
33060: LD_INT 0
33062: ST_TO_ADDR
33063: GO 33079
// your_side := your_side + 1 ;
33065: LD_ADDR_OWVAR 2
33069: PUSH
33070: LD_OWVAR 2
33074: PUSH
33075: LD_INT 1
33077: PLUS
33078: ST_TO_ADDR
// end ;
33079: LD_VAR 0 1
33083: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33084: LD_INT 0
33086: PPUSH
33087: PPUSH
33088: PPUSH
// for i in all_units do
33089: LD_ADDR_VAR 0 2
33093: PUSH
33094: LD_OWVAR 3
33098: PUSH
33099: FOR_IN
33100: IFFALSE 33178
// if IsSelected ( i ) then
33102: LD_VAR 0 2
33106: PPUSH
33107: CALL_OW 306
33111: IFFALSE 33176
// begin j := GetSide ( i ) ;
33113: LD_ADDR_VAR 0 3
33117: PUSH
33118: LD_VAR 0 2
33122: PPUSH
33123: CALL_OW 255
33127: ST_TO_ADDR
// if j = 8 then
33128: LD_VAR 0 3
33132: PUSH
33133: LD_INT 8
33135: EQUAL
33136: IFFALSE 33148
// j := 0 else
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: LD_INT 0
33145: ST_TO_ADDR
33146: GO 33162
// j := j + 1 ;
33148: LD_ADDR_VAR 0 3
33152: PUSH
33153: LD_VAR 0 3
33157: PUSH
33158: LD_INT 1
33160: PLUS
33161: ST_TO_ADDR
// SetSide ( i , j ) ;
33162: LD_VAR 0 2
33166: PPUSH
33167: LD_VAR 0 3
33171: PPUSH
33172: CALL_OW 235
// end ;
33176: GO 33099
33178: POP
33179: POP
// end ;
33180: LD_VAR 0 1
33184: RET
// export function hHackFog ; begin
33185: LD_INT 0
33187: PPUSH
// FogOff ( true ) ;
33188: LD_INT 1
33190: PPUSH
33191: CALL_OW 344
// end ;
33195: LD_VAR 0 1
33199: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33200: LD_INT 0
33202: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33203: LD_VAR 0 1
33207: PPUSH
33208: LD_VAR 0 2
33212: PPUSH
33213: LD_VAR 0 3
33217: PPUSH
33218: LD_INT 1
33220: PPUSH
33221: LD_INT 1
33223: PPUSH
33224: CALL_OW 483
// CenterOnXY ( x , y ) ;
33228: LD_VAR 0 2
33232: PPUSH
33233: LD_VAR 0 3
33237: PPUSH
33238: CALL_OW 84
// end ; end_of_file
33242: LD_VAR 0 4
33246: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33247: LD_INT 0
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33253: LD_VAR 0 1
33257: PPUSH
33258: CALL_OW 264
33262: PUSH
33263: LD_EXP 47
33267: EQUAL
33268: IFFALSE 33340
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33270: LD_INT 68
33272: PPUSH
33273: LD_VAR 0 1
33277: PPUSH
33278: CALL_OW 255
33282: PPUSH
33283: CALL_OW 321
33287: PUSH
33288: LD_INT 2
33290: EQUAL
33291: IFFALSE 33303
// eff := 70 else
33293: LD_ADDR_VAR 0 4
33297: PUSH
33298: LD_INT 70
33300: ST_TO_ADDR
33301: GO 33311
// eff := 30 ;
33303: LD_ADDR_VAR 0 4
33307: PUSH
33308: LD_INT 30
33310: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33311: LD_VAR 0 1
33315: PPUSH
33316: CALL_OW 250
33320: PPUSH
33321: LD_VAR 0 1
33325: PPUSH
33326: CALL_OW 251
33330: PPUSH
33331: LD_VAR 0 4
33335: PPUSH
33336: CALL_OW 495
// end ; end ;
33340: LD_VAR 0 2
33344: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33345: LD_INT 0
33347: PPUSH
// end ;
33348: LD_VAR 0 4
33352: RET
// export function SOS_Command ( cmd ) ; begin
33353: LD_INT 0
33355: PPUSH
// end ;
33356: LD_VAR 0 2
33360: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33361: LD_INT 0
33363: PPUSH
// end ;
33364: LD_VAR 0 6
33368: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33369: LD_INT 0
33371: PPUSH
33372: PPUSH
// if not vehicle or not factory then
33373: LD_VAR 0 1
33377: NOT
33378: PUSH
33379: LD_VAR 0 2
33383: NOT
33384: OR
33385: IFFALSE 33389
// exit ;
33387: GO 33620
// if factoryWaypoints >= factory then
33389: LD_EXP 120
33393: PUSH
33394: LD_VAR 0 2
33398: GREATEREQUAL
33399: IFFALSE 33620
// if factoryWaypoints [ factory ] then
33401: LD_EXP 120
33405: PUSH
33406: LD_VAR 0 2
33410: ARRAY
33411: IFFALSE 33620
// begin if GetControl ( vehicle ) = control_manual then
33413: LD_VAR 0 1
33417: PPUSH
33418: CALL_OW 263
33422: PUSH
33423: LD_INT 1
33425: EQUAL
33426: IFFALSE 33507
// begin driver := IsDrivenBy ( vehicle ) ;
33428: LD_ADDR_VAR 0 4
33432: PUSH
33433: LD_VAR 0 1
33437: PPUSH
33438: CALL_OW 311
33442: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33443: LD_VAR 0 4
33447: PPUSH
33448: LD_EXP 120
33452: PUSH
33453: LD_VAR 0 2
33457: ARRAY
33458: PUSH
33459: LD_INT 3
33461: ARRAY
33462: PPUSH
33463: LD_EXP 120
33467: PUSH
33468: LD_VAR 0 2
33472: ARRAY
33473: PUSH
33474: LD_INT 4
33476: ARRAY
33477: PPUSH
33478: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33482: LD_VAR 0 4
33486: PPUSH
33487: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33491: LD_VAR 0 4
33495: PPUSH
33496: LD_VAR 0 2
33500: PPUSH
33501: CALL_OW 180
// end else
33505: GO 33620
// if GetControl ( vehicle ) = control_remote then
33507: LD_VAR 0 1
33511: PPUSH
33512: CALL_OW 263
33516: PUSH
33517: LD_INT 2
33519: EQUAL
33520: IFFALSE 33581
// begin wait ( 0 0$2 ) ;
33522: LD_INT 70
33524: PPUSH
33525: CALL_OW 67
// if Connect ( vehicle ) then
33529: LD_VAR 0 1
33533: PPUSH
33534: CALL 45844 0 1
33538: IFFALSE 33579
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33540: LD_VAR 0 1
33544: PPUSH
33545: LD_EXP 120
33549: PUSH
33550: LD_VAR 0 2
33554: ARRAY
33555: PUSH
33556: LD_INT 3
33558: ARRAY
33559: PPUSH
33560: LD_EXP 120
33564: PUSH
33565: LD_VAR 0 2
33569: ARRAY
33570: PUSH
33571: LD_INT 4
33573: ARRAY
33574: PPUSH
33575: CALL_OW 171
// end else
33579: GO 33620
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33581: LD_VAR 0 1
33585: PPUSH
33586: LD_EXP 120
33590: PUSH
33591: LD_VAR 0 2
33595: ARRAY
33596: PUSH
33597: LD_INT 3
33599: ARRAY
33600: PPUSH
33601: LD_EXP 120
33605: PUSH
33606: LD_VAR 0 2
33610: ARRAY
33611: PUSH
33612: LD_INT 4
33614: ARRAY
33615: PPUSH
33616: CALL_OW 171
// end ; end ;
33620: LD_VAR 0 3
33624: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33625: LD_INT 0
33627: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33628: LD_VAR 0 1
33632: PUSH
33633: LD_INT 250
33635: EQUAL
33636: PUSH
33637: LD_VAR 0 2
33641: PPUSH
33642: CALL_OW 264
33646: PUSH
33647: LD_EXP 50
33651: EQUAL
33652: AND
33653: IFFALSE 33674
// MinerPlaceMine ( unit , x , y ) ;
33655: LD_VAR 0 2
33659: PPUSH
33660: LD_VAR 0 4
33664: PPUSH
33665: LD_VAR 0 5
33669: PPUSH
33670: CALL 36402 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33674: LD_VAR 0 1
33678: PUSH
33679: LD_INT 251
33681: EQUAL
33682: PUSH
33683: LD_VAR 0 2
33687: PPUSH
33688: CALL_OW 264
33692: PUSH
33693: LD_EXP 50
33697: EQUAL
33698: AND
33699: IFFALSE 33720
// MinerDetonateMine ( unit , x , y ) ;
33701: LD_VAR 0 2
33705: PPUSH
33706: LD_VAR 0 4
33710: PPUSH
33711: LD_VAR 0 5
33715: PPUSH
33716: CALL 36679 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33720: LD_VAR 0 1
33724: PUSH
33725: LD_INT 252
33727: EQUAL
33728: PUSH
33729: LD_VAR 0 2
33733: PPUSH
33734: CALL_OW 264
33738: PUSH
33739: LD_EXP 50
33743: EQUAL
33744: AND
33745: IFFALSE 33766
// MinerCreateMinefield ( unit , x , y ) ;
33747: LD_VAR 0 2
33751: PPUSH
33752: LD_VAR 0 4
33756: PPUSH
33757: LD_VAR 0 5
33761: PPUSH
33762: CALL 37096 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33766: LD_VAR 0 1
33770: PUSH
33771: LD_INT 253
33773: EQUAL
33774: PUSH
33775: LD_VAR 0 2
33779: PPUSH
33780: CALL_OW 257
33784: PUSH
33785: LD_INT 5
33787: EQUAL
33788: AND
33789: IFFALSE 33810
// ComBinocular ( unit , x , y ) ;
33791: LD_VAR 0 2
33795: PPUSH
33796: LD_VAR 0 4
33800: PPUSH
33801: LD_VAR 0 5
33805: PPUSH
33806: CALL 37467 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33810: LD_VAR 0 1
33814: PUSH
33815: LD_INT 254
33817: EQUAL
33818: PUSH
33819: LD_VAR 0 2
33823: PPUSH
33824: CALL_OW 264
33828: PUSH
33829: LD_EXP 45
33833: EQUAL
33834: AND
33835: PUSH
33836: LD_VAR 0 3
33840: PPUSH
33841: CALL_OW 263
33845: PUSH
33846: LD_INT 3
33848: EQUAL
33849: AND
33850: IFFALSE 33866
// HackDestroyVehicle ( unit , selectedUnit ) ;
33852: LD_VAR 0 2
33856: PPUSH
33857: LD_VAR 0 3
33861: PPUSH
33862: CALL 35762 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33866: LD_VAR 0 1
33870: PUSH
33871: LD_INT 255
33873: EQUAL
33874: PUSH
33875: LD_VAR 0 2
33879: PPUSH
33880: CALL_OW 264
33884: PUSH
33885: LD_INT 14
33887: PUSH
33888: LD_INT 53
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: IN
33895: AND
33896: PUSH
33897: LD_VAR 0 4
33901: PPUSH
33902: LD_VAR 0 5
33906: PPUSH
33907: CALL_OW 488
33911: AND
33912: IFFALSE 33936
// CutTreeXYR ( unit , x , y , 12 ) ;
33914: LD_VAR 0 2
33918: PPUSH
33919: LD_VAR 0 4
33923: PPUSH
33924: LD_VAR 0 5
33928: PPUSH
33929: LD_INT 12
33931: PPUSH
33932: CALL 34328 0 4
// if cmd = 256 then
33936: LD_VAR 0 1
33940: PUSH
33941: LD_INT 256
33943: EQUAL
33944: IFFALSE 33965
// SetFactoryWaypoint ( unit , x , y ) ;
33946: LD_VAR 0 2
33950: PPUSH
33951: LD_VAR 0 4
33955: PPUSH
33956: LD_VAR 0 5
33960: PPUSH
33961: CALL 33970 0 3
// end ;
33965: LD_VAR 0 6
33969: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33970: LD_INT 0
33972: PPUSH
33973: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33974: LD_VAR 0 1
33978: NOT
33979: PUSH
33980: LD_VAR 0 2
33984: PPUSH
33985: LD_VAR 0 3
33989: PPUSH
33990: CALL_OW 488
33994: NOT
33995: OR
33996: PUSH
33997: LD_VAR 0 1
34001: PPUSH
34002: CALL_OW 266
34006: PUSH
34007: LD_INT 3
34009: NONEQUAL
34010: PUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL_OW 247
34020: PUSH
34021: LD_INT 1
34023: EQUAL
34024: NOT
34025: AND
34026: OR
34027: IFFALSE 34031
// exit ;
34029: GO 34180
// if GetType ( factory ) = unit_human then
34031: LD_VAR 0 1
34035: PPUSH
34036: CALL_OW 247
34040: PUSH
34041: LD_INT 1
34043: EQUAL
34044: IFFALSE 34061
// factory := IsInUnit ( factory ) ;
34046: LD_ADDR_VAR 0 1
34050: PUSH
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL_OW 310
34060: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34061: LD_VAR 0 1
34065: PPUSH
34066: CALL_OW 266
34070: PUSH
34071: LD_INT 3
34073: NONEQUAL
34074: IFFALSE 34078
// exit ;
34076: GO 34180
// if HexInfo ( x , y ) = factory then
34078: LD_VAR 0 2
34082: PPUSH
34083: LD_VAR 0 3
34087: PPUSH
34088: CALL_OW 428
34092: PUSH
34093: LD_VAR 0 1
34097: EQUAL
34098: IFFALSE 34125
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34100: LD_ADDR_EXP 120
34104: PUSH
34105: LD_EXP 120
34109: PPUSH
34110: LD_VAR 0 1
34114: PPUSH
34115: LD_INT 0
34117: PPUSH
34118: CALL_OW 1
34122: ST_TO_ADDR
34123: GO 34176
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34125: LD_ADDR_EXP 120
34129: PUSH
34130: LD_EXP 120
34134: PPUSH
34135: LD_VAR 0 1
34139: PPUSH
34140: LD_VAR 0 1
34144: PPUSH
34145: CALL_OW 255
34149: PUSH
34150: LD_VAR 0 1
34154: PUSH
34155: LD_VAR 0 2
34159: PUSH
34160: LD_VAR 0 3
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: PPUSH
34171: CALL_OW 1
34175: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34176: CALL 34185 0 0
// end ;
34180: LD_VAR 0 4
34184: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34185: LD_INT 0
34187: PPUSH
34188: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34189: LD_STRING resetFactoryWaypoint();
34191: PPUSH
34192: CALL_OW 559
// if factoryWaypoints then
34196: LD_EXP 120
34200: IFFALSE 34323
// begin for i := 1 to factoryWaypoints do
34202: LD_ADDR_VAR 0 2
34206: PUSH
34207: DOUBLE
34208: LD_INT 1
34210: DEC
34211: ST_TO_ADDR
34212: LD_EXP 120
34216: PUSH
34217: FOR_TO
34218: IFFALSE 34321
// if factoryWaypoints [ i ] then
34220: LD_EXP 120
34224: PUSH
34225: LD_VAR 0 2
34229: ARRAY
34230: IFFALSE 34319
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34232: LD_STRING setFactoryWaypointXY(
34234: PUSH
34235: LD_EXP 120
34239: PUSH
34240: LD_VAR 0 2
34244: ARRAY
34245: PUSH
34246: LD_INT 1
34248: ARRAY
34249: STR
34250: PUSH
34251: LD_STRING ,
34253: STR
34254: PUSH
34255: LD_EXP 120
34259: PUSH
34260: LD_VAR 0 2
34264: ARRAY
34265: PUSH
34266: LD_INT 2
34268: ARRAY
34269: STR
34270: PUSH
34271: LD_STRING ,
34273: STR
34274: PUSH
34275: LD_EXP 120
34279: PUSH
34280: LD_VAR 0 2
34284: ARRAY
34285: PUSH
34286: LD_INT 3
34288: ARRAY
34289: STR
34290: PUSH
34291: LD_STRING ,
34293: STR
34294: PUSH
34295: LD_EXP 120
34299: PUSH
34300: LD_VAR 0 2
34304: ARRAY
34305: PUSH
34306: LD_INT 4
34308: ARRAY
34309: STR
34310: PUSH
34311: LD_STRING )
34313: STR
34314: PPUSH
34315: CALL_OW 559
34319: GO 34217
34321: POP
34322: POP
// end ; end ;
34323: LD_VAR 0 1
34327: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34328: LD_INT 0
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34339: LD_VAR 0 1
34343: NOT
34344: PUSH
34345: LD_VAR 0 2
34349: PPUSH
34350: LD_VAR 0 3
34354: PPUSH
34355: CALL_OW 488
34359: NOT
34360: OR
34361: PUSH
34362: LD_VAR 0 4
34366: NOT
34367: OR
34368: IFFALSE 34372
// exit ;
34370: GO 34712
// list := [ ] ;
34372: LD_ADDR_VAR 0 13
34376: PUSH
34377: EMPTY
34378: ST_TO_ADDR
// if x - r < 0 then
34379: LD_VAR 0 2
34383: PUSH
34384: LD_VAR 0 4
34388: MINUS
34389: PUSH
34390: LD_INT 0
34392: LESS
34393: IFFALSE 34405
// min_x := 0 else
34395: LD_ADDR_VAR 0 7
34399: PUSH
34400: LD_INT 0
34402: ST_TO_ADDR
34403: GO 34421
// min_x := x - r ;
34405: LD_ADDR_VAR 0 7
34409: PUSH
34410: LD_VAR 0 2
34414: PUSH
34415: LD_VAR 0 4
34419: MINUS
34420: ST_TO_ADDR
// if y - r < 0 then
34421: LD_VAR 0 3
34425: PUSH
34426: LD_VAR 0 4
34430: MINUS
34431: PUSH
34432: LD_INT 0
34434: LESS
34435: IFFALSE 34447
// min_y := 0 else
34437: LD_ADDR_VAR 0 8
34441: PUSH
34442: LD_INT 0
34444: ST_TO_ADDR
34445: GO 34463
// min_y := y - r ;
34447: LD_ADDR_VAR 0 8
34451: PUSH
34452: LD_VAR 0 3
34456: PUSH
34457: LD_VAR 0 4
34461: MINUS
34462: ST_TO_ADDR
// max_x := x + r ;
34463: LD_ADDR_VAR 0 9
34467: PUSH
34468: LD_VAR 0 2
34472: PUSH
34473: LD_VAR 0 4
34477: PLUS
34478: ST_TO_ADDR
// max_y := y + r ;
34479: LD_ADDR_VAR 0 10
34483: PUSH
34484: LD_VAR 0 3
34488: PUSH
34489: LD_VAR 0 4
34493: PLUS
34494: ST_TO_ADDR
// for _x = min_x to max_x do
34495: LD_ADDR_VAR 0 11
34499: PUSH
34500: DOUBLE
34501: LD_VAR 0 7
34505: DEC
34506: ST_TO_ADDR
34507: LD_VAR 0 9
34511: PUSH
34512: FOR_TO
34513: IFFALSE 34630
// for _y = min_y to max_y do
34515: LD_ADDR_VAR 0 12
34519: PUSH
34520: DOUBLE
34521: LD_VAR 0 8
34525: DEC
34526: ST_TO_ADDR
34527: LD_VAR 0 10
34531: PUSH
34532: FOR_TO
34533: IFFALSE 34626
// begin if not ValidHex ( _x , _y ) then
34535: LD_VAR 0 11
34539: PPUSH
34540: LD_VAR 0 12
34544: PPUSH
34545: CALL_OW 488
34549: NOT
34550: IFFALSE 34554
// continue ;
34552: GO 34532
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34554: LD_VAR 0 11
34558: PPUSH
34559: LD_VAR 0 12
34563: PPUSH
34564: CALL_OW 351
34568: PUSH
34569: LD_VAR 0 11
34573: PPUSH
34574: LD_VAR 0 12
34578: PPUSH
34579: CALL_OW 554
34583: AND
34584: IFFALSE 34624
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34586: LD_ADDR_VAR 0 13
34590: PUSH
34591: LD_VAR 0 13
34595: PPUSH
34596: LD_VAR 0 13
34600: PUSH
34601: LD_INT 1
34603: PLUS
34604: PPUSH
34605: LD_VAR 0 11
34609: PUSH
34610: LD_VAR 0 12
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PPUSH
34619: CALL_OW 2
34623: ST_TO_ADDR
// end ;
34624: GO 34532
34626: POP
34627: POP
34628: GO 34512
34630: POP
34631: POP
// if not list then
34632: LD_VAR 0 13
34636: NOT
34637: IFFALSE 34641
// exit ;
34639: GO 34712
// for i in list do
34641: LD_ADDR_VAR 0 6
34645: PUSH
34646: LD_VAR 0 13
34650: PUSH
34651: FOR_IN
34652: IFFALSE 34710
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34654: LD_VAR 0 1
34658: PPUSH
34659: LD_STRING M
34661: PUSH
34662: LD_VAR 0 6
34666: PUSH
34667: LD_INT 1
34669: ARRAY
34670: PUSH
34671: LD_VAR 0 6
34675: PUSH
34676: LD_INT 2
34678: ARRAY
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: PUSH
34701: EMPTY
34702: LIST
34703: PPUSH
34704: CALL_OW 447
34708: GO 34651
34710: POP
34711: POP
// end ;
34712: LD_VAR 0 5
34716: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34717: LD_EXP 121
34721: NOT
34722: IFFALSE 34772
34724: GO 34726
34726: DISABLE
// begin initHack := true ;
34727: LD_ADDR_EXP 121
34731: PUSH
34732: LD_INT 1
34734: ST_TO_ADDR
// hackTanks := [ ] ;
34735: LD_ADDR_EXP 122
34739: PUSH
34740: EMPTY
34741: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34742: LD_ADDR_EXP 123
34746: PUSH
34747: EMPTY
34748: ST_TO_ADDR
// hackLimit := 3 ;
34749: LD_ADDR_EXP 124
34753: PUSH
34754: LD_INT 3
34756: ST_TO_ADDR
// hackDist := 12 ;
34757: LD_ADDR_EXP 125
34761: PUSH
34762: LD_INT 12
34764: ST_TO_ADDR
// hackCounter := [ ] ;
34765: LD_ADDR_EXP 126
34769: PUSH
34770: EMPTY
34771: ST_TO_ADDR
// end ;
34772: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34773: LD_EXP 121
34777: PUSH
34778: LD_INT 34
34780: PUSH
34781: LD_EXP 45
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PPUSH
34790: CALL_OW 69
34794: AND
34795: IFFALSE 35050
34797: GO 34799
34799: DISABLE
34800: LD_INT 0
34802: PPUSH
34803: PPUSH
// begin enable ;
34804: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34805: LD_ADDR_VAR 0 1
34809: PUSH
34810: LD_INT 34
34812: PUSH
34813: LD_EXP 45
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PPUSH
34822: CALL_OW 69
34826: PUSH
34827: FOR_IN
34828: IFFALSE 35048
// begin if not i in hackTanks then
34830: LD_VAR 0 1
34834: PUSH
34835: LD_EXP 122
34839: IN
34840: NOT
34841: IFFALSE 34924
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34843: LD_ADDR_EXP 122
34847: PUSH
34848: LD_EXP 122
34852: PPUSH
34853: LD_EXP 122
34857: PUSH
34858: LD_INT 1
34860: PLUS
34861: PPUSH
34862: LD_VAR 0 1
34866: PPUSH
34867: CALL_OW 1
34871: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34872: LD_ADDR_EXP 123
34876: PUSH
34877: LD_EXP 123
34881: PPUSH
34882: LD_EXP 123
34886: PUSH
34887: LD_INT 1
34889: PLUS
34890: PPUSH
34891: EMPTY
34892: PPUSH
34893: CALL_OW 1
34897: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34898: LD_ADDR_EXP 126
34902: PUSH
34903: LD_EXP 126
34907: PPUSH
34908: LD_EXP 126
34912: PUSH
34913: LD_INT 1
34915: PLUS
34916: PPUSH
34917: EMPTY
34918: PPUSH
34919: CALL_OW 1
34923: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34924: LD_VAR 0 1
34928: PPUSH
34929: CALL_OW 302
34933: NOT
34934: IFFALSE 34947
// begin HackUnlinkAll ( i ) ;
34936: LD_VAR 0 1
34940: PPUSH
34941: CALL 35053 0 1
// continue ;
34945: GO 34827
// end ; HackCheckCapturedStatus ( i ) ;
34947: LD_VAR 0 1
34951: PPUSH
34952: CALL 35496 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34956: LD_ADDR_VAR 0 2
34960: PUSH
34961: LD_INT 81
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 255
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 33
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 91
34990: PUSH
34991: LD_VAR 0 1
34995: PUSH
34996: LD_EXP 125
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 50
35008: PUSH
35009: EMPTY
35010: LIST
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: PPUSH
35018: CALL_OW 69
35022: ST_TO_ADDR
// if not tmp then
35023: LD_VAR 0 2
35027: NOT
35028: IFFALSE 35032
// continue ;
35030: GO 34827
// HackLink ( i , tmp ) ;
35032: LD_VAR 0 1
35036: PPUSH
35037: LD_VAR 0 2
35041: PPUSH
35042: CALL 35189 0 2
// end ;
35046: GO 34827
35048: POP
35049: POP
// end ;
35050: PPOPN 2
35052: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35053: LD_INT 0
35055: PPUSH
35056: PPUSH
35057: PPUSH
// if not hack in hackTanks then
35058: LD_VAR 0 1
35062: PUSH
35063: LD_EXP 122
35067: IN
35068: NOT
35069: IFFALSE 35073
// exit ;
35071: GO 35184
// index := GetElementIndex ( hackTanks , hack ) ;
35073: LD_ADDR_VAR 0 4
35077: PUSH
35078: LD_EXP 122
35082: PPUSH
35083: LD_VAR 0 1
35087: PPUSH
35088: CALL 42658 0 2
35092: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35093: LD_EXP 123
35097: PUSH
35098: LD_VAR 0 4
35102: ARRAY
35103: IFFALSE 35184
// begin for i in hackTanksCaptured [ index ] do
35105: LD_ADDR_VAR 0 3
35109: PUSH
35110: LD_EXP 123
35114: PUSH
35115: LD_VAR 0 4
35119: ARRAY
35120: PUSH
35121: FOR_IN
35122: IFFALSE 35148
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35124: LD_VAR 0 3
35128: PUSH
35129: LD_INT 1
35131: ARRAY
35132: PPUSH
35133: LD_VAR 0 3
35137: PUSH
35138: LD_INT 2
35140: ARRAY
35141: PPUSH
35142: CALL_OW 235
35146: GO 35121
35148: POP
35149: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35150: LD_ADDR_EXP 123
35154: PUSH
35155: LD_EXP 123
35159: PPUSH
35160: LD_VAR 0 4
35164: PPUSH
35165: EMPTY
35166: PPUSH
35167: CALL_OW 1
35171: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35172: LD_VAR 0 1
35176: PPUSH
35177: LD_INT 0
35179: PPUSH
35180: CALL_OW 505
// end ; end ;
35184: LD_VAR 0 2
35188: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35189: LD_INT 0
35191: PPUSH
35192: PPUSH
35193: PPUSH
// if not hack in hackTanks or not vehicles then
35194: LD_VAR 0 1
35198: PUSH
35199: LD_EXP 122
35203: IN
35204: NOT
35205: PUSH
35206: LD_VAR 0 2
35210: NOT
35211: OR
35212: IFFALSE 35216
// exit ;
35214: GO 35491
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35216: LD_ADDR_VAR 0 2
35220: PUSH
35221: LD_VAR 0 1
35225: PPUSH
35226: LD_VAR 0 2
35230: PPUSH
35231: LD_INT 1
35233: PPUSH
35234: LD_INT 1
35236: PPUSH
35237: CALL 43308 0 4
35241: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35242: LD_ADDR_VAR 0 5
35246: PUSH
35247: LD_EXP 122
35251: PPUSH
35252: LD_VAR 0 1
35256: PPUSH
35257: CALL 42658 0 2
35261: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35262: LD_EXP 123
35266: PUSH
35267: LD_VAR 0 5
35271: ARRAY
35272: PUSH
35273: LD_EXP 124
35277: LESS
35278: IFFALSE 35467
// begin for i := 1 to vehicles do
35280: LD_ADDR_VAR 0 4
35284: PUSH
35285: DOUBLE
35286: LD_INT 1
35288: DEC
35289: ST_TO_ADDR
35290: LD_VAR 0 2
35294: PUSH
35295: FOR_TO
35296: IFFALSE 35465
// begin if hackTanksCaptured [ index ] = hackLimit then
35298: LD_EXP 123
35302: PUSH
35303: LD_VAR 0 5
35307: ARRAY
35308: PUSH
35309: LD_EXP 124
35313: EQUAL
35314: IFFALSE 35318
// break ;
35316: GO 35465
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35318: LD_ADDR_EXP 126
35322: PUSH
35323: LD_EXP 126
35327: PPUSH
35328: LD_VAR 0 5
35332: PPUSH
35333: LD_EXP 126
35337: PUSH
35338: LD_VAR 0 5
35342: ARRAY
35343: PUSH
35344: LD_INT 1
35346: PLUS
35347: PPUSH
35348: CALL_OW 1
35352: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35353: LD_ADDR_EXP 123
35357: PUSH
35358: LD_EXP 123
35362: PPUSH
35363: LD_VAR 0 5
35367: PUSH
35368: LD_EXP 123
35372: PUSH
35373: LD_VAR 0 5
35377: ARRAY
35378: PUSH
35379: LD_INT 1
35381: PLUS
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PPUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_VAR 0 4
35396: ARRAY
35397: PUSH
35398: LD_VAR 0 2
35402: PUSH
35403: LD_VAR 0 4
35407: ARRAY
35408: PPUSH
35409: CALL_OW 255
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PPUSH
35418: CALL 42873 0 3
35422: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35423: LD_VAR 0 2
35427: PUSH
35428: LD_VAR 0 4
35432: ARRAY
35433: PPUSH
35434: LD_VAR 0 1
35438: PPUSH
35439: CALL_OW 255
35443: PPUSH
35444: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35448: LD_VAR 0 2
35452: PUSH
35453: LD_VAR 0 4
35457: ARRAY
35458: PPUSH
35459: CALL_OW 141
// end ;
35463: GO 35295
35465: POP
35466: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35467: LD_VAR 0 1
35471: PPUSH
35472: LD_EXP 123
35476: PUSH
35477: LD_VAR 0 5
35481: ARRAY
35482: PUSH
35483: LD_INT 0
35485: PLUS
35486: PPUSH
35487: CALL_OW 505
// end ;
35491: LD_VAR 0 3
35495: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35496: LD_INT 0
35498: PPUSH
35499: PPUSH
35500: PPUSH
35501: PPUSH
// if not hack in hackTanks then
35502: LD_VAR 0 1
35506: PUSH
35507: LD_EXP 122
35511: IN
35512: NOT
35513: IFFALSE 35517
// exit ;
35515: GO 35757
// index := GetElementIndex ( hackTanks , hack ) ;
35517: LD_ADDR_VAR 0 4
35521: PUSH
35522: LD_EXP 122
35526: PPUSH
35527: LD_VAR 0 1
35531: PPUSH
35532: CALL 42658 0 2
35536: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35537: LD_ADDR_VAR 0 3
35541: PUSH
35542: DOUBLE
35543: LD_EXP 123
35547: PUSH
35548: LD_VAR 0 4
35552: ARRAY
35553: INC
35554: ST_TO_ADDR
35555: LD_INT 1
35557: PUSH
35558: FOR_DOWNTO
35559: IFFALSE 35731
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35561: LD_ADDR_VAR 0 5
35565: PUSH
35566: LD_EXP 123
35570: PUSH
35571: LD_VAR 0 4
35575: ARRAY
35576: PUSH
35577: LD_VAR 0 3
35581: ARRAY
35582: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35583: LD_VAR 0 5
35587: PUSH
35588: LD_INT 1
35590: ARRAY
35591: PPUSH
35592: CALL_OW 302
35596: NOT
35597: PUSH
35598: LD_VAR 0 5
35602: PUSH
35603: LD_INT 1
35605: ARRAY
35606: PPUSH
35607: CALL_OW 255
35611: PUSH
35612: LD_VAR 0 1
35616: PPUSH
35617: CALL_OW 255
35621: NONEQUAL
35622: OR
35623: IFFALSE 35729
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35625: LD_VAR 0 5
35629: PUSH
35630: LD_INT 1
35632: ARRAY
35633: PPUSH
35634: CALL_OW 305
35638: PUSH
35639: LD_VAR 0 5
35643: PUSH
35644: LD_INT 1
35646: ARRAY
35647: PPUSH
35648: CALL_OW 255
35652: PUSH
35653: LD_VAR 0 1
35657: PPUSH
35658: CALL_OW 255
35662: EQUAL
35663: AND
35664: IFFALSE 35688
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35666: LD_VAR 0 5
35670: PUSH
35671: LD_INT 1
35673: ARRAY
35674: PPUSH
35675: LD_VAR 0 5
35679: PUSH
35680: LD_INT 2
35682: ARRAY
35683: PPUSH
35684: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35688: LD_ADDR_EXP 123
35692: PUSH
35693: LD_EXP 123
35697: PPUSH
35698: LD_VAR 0 4
35702: PPUSH
35703: LD_EXP 123
35707: PUSH
35708: LD_VAR 0 4
35712: ARRAY
35713: PPUSH
35714: LD_VAR 0 3
35718: PPUSH
35719: CALL_OW 3
35723: PPUSH
35724: CALL_OW 1
35728: ST_TO_ADDR
// end ; end ;
35729: GO 35558
35731: POP
35732: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35733: LD_VAR 0 1
35737: PPUSH
35738: LD_EXP 123
35742: PUSH
35743: LD_VAR 0 4
35747: ARRAY
35748: PUSH
35749: LD_INT 0
35751: PLUS
35752: PPUSH
35753: CALL_OW 505
// end ;
35757: LD_VAR 0 2
35761: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35762: LD_INT 0
35764: PPUSH
35765: PPUSH
35766: PPUSH
35767: PPUSH
// if not hack in hackTanks then
35768: LD_VAR 0 1
35772: PUSH
35773: LD_EXP 122
35777: IN
35778: NOT
35779: IFFALSE 35783
// exit ;
35781: GO 35868
// index := GetElementIndex ( hackTanks , hack ) ;
35783: LD_ADDR_VAR 0 5
35787: PUSH
35788: LD_EXP 122
35792: PPUSH
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL 42658 0 2
35802: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35803: LD_ADDR_VAR 0 4
35807: PUSH
35808: DOUBLE
35809: LD_INT 1
35811: DEC
35812: ST_TO_ADDR
35813: LD_EXP 123
35817: PUSH
35818: LD_VAR 0 5
35822: ARRAY
35823: PUSH
35824: FOR_TO
35825: IFFALSE 35866
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35827: LD_EXP 123
35831: PUSH
35832: LD_VAR 0 5
35836: ARRAY
35837: PUSH
35838: LD_VAR 0 4
35842: ARRAY
35843: PUSH
35844: LD_INT 1
35846: ARRAY
35847: PUSH
35848: LD_VAR 0 2
35852: EQUAL
35853: IFFALSE 35864
// KillUnit ( vehicle ) ;
35855: LD_VAR 0 2
35859: PPUSH
35860: CALL_OW 66
35864: GO 35824
35866: POP
35867: POP
// end ;
35868: LD_VAR 0 3
35872: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35873: LD_EXP 127
35877: NOT
35878: IFFALSE 35913
35880: GO 35882
35882: DISABLE
// begin initMiner := true ;
35883: LD_ADDR_EXP 127
35887: PUSH
35888: LD_INT 1
35890: ST_TO_ADDR
// minersList := [ ] ;
35891: LD_ADDR_EXP 128
35895: PUSH
35896: EMPTY
35897: ST_TO_ADDR
// minerMinesList := [ ] ;
35898: LD_ADDR_EXP 129
35902: PUSH
35903: EMPTY
35904: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35905: LD_ADDR_EXP 130
35909: PUSH
35910: LD_INT 5
35912: ST_TO_ADDR
// end ;
35913: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35914: LD_EXP 127
35918: PUSH
35919: LD_INT 34
35921: PUSH
35922: LD_EXP 50
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PPUSH
35931: CALL_OW 69
35935: AND
35936: IFFALSE 36399
35938: GO 35940
35940: DISABLE
35941: LD_INT 0
35943: PPUSH
35944: PPUSH
35945: PPUSH
35946: PPUSH
// begin enable ;
35947: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35948: LD_ADDR_VAR 0 1
35952: PUSH
35953: LD_INT 34
35955: PUSH
35956: LD_EXP 50
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PPUSH
35965: CALL_OW 69
35969: PUSH
35970: FOR_IN
35971: IFFALSE 36043
// begin if not i in minersList then
35973: LD_VAR 0 1
35977: PUSH
35978: LD_EXP 128
35982: IN
35983: NOT
35984: IFFALSE 36041
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35986: LD_ADDR_EXP 128
35990: PUSH
35991: LD_EXP 128
35995: PPUSH
35996: LD_EXP 128
36000: PUSH
36001: LD_INT 1
36003: PLUS
36004: PPUSH
36005: LD_VAR 0 1
36009: PPUSH
36010: CALL_OW 1
36014: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36015: LD_ADDR_EXP 129
36019: PUSH
36020: LD_EXP 129
36024: PPUSH
36025: LD_EXP 129
36029: PUSH
36030: LD_INT 1
36032: PLUS
36033: PPUSH
36034: EMPTY
36035: PPUSH
36036: CALL_OW 1
36040: ST_TO_ADDR
// end end ;
36041: GO 35970
36043: POP
36044: POP
// for i := minerMinesList downto 1 do
36045: LD_ADDR_VAR 0 1
36049: PUSH
36050: DOUBLE
36051: LD_EXP 129
36055: INC
36056: ST_TO_ADDR
36057: LD_INT 1
36059: PUSH
36060: FOR_DOWNTO
36061: IFFALSE 36397
// begin if IsLive ( minersList [ i ] ) then
36063: LD_EXP 128
36067: PUSH
36068: LD_VAR 0 1
36072: ARRAY
36073: PPUSH
36074: CALL_OW 300
36078: IFFALSE 36106
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36080: LD_EXP 128
36084: PUSH
36085: LD_VAR 0 1
36089: ARRAY
36090: PPUSH
36091: LD_EXP 129
36095: PUSH
36096: LD_VAR 0 1
36100: ARRAY
36101: PPUSH
36102: CALL_OW 505
// if not minerMinesList [ i ] then
36106: LD_EXP 129
36110: PUSH
36111: LD_VAR 0 1
36115: ARRAY
36116: NOT
36117: IFFALSE 36121
// continue ;
36119: GO 36060
// for j := minerMinesList [ i ] downto 1 do
36121: LD_ADDR_VAR 0 2
36125: PUSH
36126: DOUBLE
36127: LD_EXP 129
36131: PUSH
36132: LD_VAR 0 1
36136: ARRAY
36137: INC
36138: ST_TO_ADDR
36139: LD_INT 1
36141: PUSH
36142: FOR_DOWNTO
36143: IFFALSE 36393
// begin side := GetSide ( minersList [ i ] ) ;
36145: LD_ADDR_VAR 0 3
36149: PUSH
36150: LD_EXP 128
36154: PUSH
36155: LD_VAR 0 1
36159: ARRAY
36160: PPUSH
36161: CALL_OW 255
36165: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36166: LD_ADDR_VAR 0 4
36170: PUSH
36171: LD_EXP 129
36175: PUSH
36176: LD_VAR 0 1
36180: ARRAY
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_INT 1
36190: ARRAY
36191: PPUSH
36192: LD_EXP 129
36196: PUSH
36197: LD_VAR 0 1
36201: ARRAY
36202: PUSH
36203: LD_VAR 0 2
36207: ARRAY
36208: PUSH
36209: LD_INT 2
36211: ARRAY
36212: PPUSH
36213: CALL_OW 428
36217: ST_TO_ADDR
// if not tmp then
36218: LD_VAR 0 4
36222: NOT
36223: IFFALSE 36227
// continue ;
36225: GO 36142
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36227: LD_VAR 0 4
36231: PUSH
36232: LD_INT 81
36234: PUSH
36235: LD_VAR 0 3
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PPUSH
36244: CALL_OW 69
36248: IN
36249: PUSH
36250: LD_EXP 129
36254: PUSH
36255: LD_VAR 0 1
36259: ARRAY
36260: PUSH
36261: LD_VAR 0 2
36265: ARRAY
36266: PUSH
36267: LD_INT 1
36269: ARRAY
36270: PPUSH
36271: LD_EXP 129
36275: PUSH
36276: LD_VAR 0 1
36280: ARRAY
36281: PUSH
36282: LD_VAR 0 2
36286: ARRAY
36287: PUSH
36288: LD_INT 2
36290: ARRAY
36291: PPUSH
36292: CALL_OW 458
36296: AND
36297: IFFALSE 36391
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36299: LD_EXP 129
36303: PUSH
36304: LD_VAR 0 1
36308: ARRAY
36309: PUSH
36310: LD_VAR 0 2
36314: ARRAY
36315: PUSH
36316: LD_INT 1
36318: ARRAY
36319: PPUSH
36320: LD_EXP 129
36324: PUSH
36325: LD_VAR 0 1
36329: ARRAY
36330: PUSH
36331: LD_VAR 0 2
36335: ARRAY
36336: PUSH
36337: LD_INT 2
36339: ARRAY
36340: PPUSH
36341: LD_VAR 0 3
36345: PPUSH
36346: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36350: LD_ADDR_EXP 129
36354: PUSH
36355: LD_EXP 129
36359: PPUSH
36360: LD_VAR 0 1
36364: PPUSH
36365: LD_EXP 129
36369: PUSH
36370: LD_VAR 0 1
36374: ARRAY
36375: PPUSH
36376: LD_VAR 0 2
36380: PPUSH
36381: CALL_OW 3
36385: PPUSH
36386: CALL_OW 1
36390: ST_TO_ADDR
// end ; end ;
36391: GO 36142
36393: POP
36394: POP
// end ;
36395: GO 36060
36397: POP
36398: POP
// end ;
36399: PPOPN 4
36401: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36402: LD_INT 0
36404: PPUSH
36405: PPUSH
// result := false ;
36406: LD_ADDR_VAR 0 4
36410: PUSH
36411: LD_INT 0
36413: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36414: LD_VAR 0 1
36418: PPUSH
36419: CALL_OW 264
36423: PUSH
36424: LD_EXP 50
36428: EQUAL
36429: NOT
36430: IFFALSE 36434
// exit ;
36432: GO 36674
// index := GetElementIndex ( minersList , unit ) ;
36434: LD_ADDR_VAR 0 5
36438: PUSH
36439: LD_EXP 128
36443: PPUSH
36444: LD_VAR 0 1
36448: PPUSH
36449: CALL 42658 0 2
36453: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36454: LD_EXP 129
36458: PUSH
36459: LD_VAR 0 5
36463: ARRAY
36464: PUSH
36465: LD_EXP 130
36469: GREATEREQUAL
36470: IFFALSE 36474
// exit ;
36472: GO 36674
// ComMoveXY ( unit , x , y ) ;
36474: LD_VAR 0 1
36478: PPUSH
36479: LD_VAR 0 2
36483: PPUSH
36484: LD_VAR 0 3
36488: PPUSH
36489: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36493: LD_INT 35
36495: PPUSH
36496: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36500: LD_VAR 0 1
36504: PPUSH
36505: LD_VAR 0 2
36509: PPUSH
36510: LD_VAR 0 3
36514: PPUSH
36515: CALL 73377 0 3
36519: NOT
36520: PUSH
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL_OW 314
36530: AND
36531: IFFALSE 36535
// exit ;
36533: GO 36674
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36535: LD_VAR 0 2
36539: PPUSH
36540: LD_VAR 0 3
36544: PPUSH
36545: CALL_OW 428
36549: PUSH
36550: LD_VAR 0 1
36554: EQUAL
36555: PUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 314
36565: NOT
36566: AND
36567: IFFALSE 36493
// PlaySoundXY ( x , y , PlantMine ) ;
36569: LD_VAR 0 2
36573: PPUSH
36574: LD_VAR 0 3
36578: PPUSH
36579: LD_STRING PlantMine
36581: PPUSH
36582: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36586: LD_VAR 0 2
36590: PPUSH
36591: LD_VAR 0 3
36595: PPUSH
36596: LD_VAR 0 1
36600: PPUSH
36601: CALL_OW 255
36605: PPUSH
36606: LD_INT 0
36608: PPUSH
36609: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36613: LD_ADDR_EXP 129
36617: PUSH
36618: LD_EXP 129
36622: PPUSH
36623: LD_VAR 0 5
36627: PUSH
36628: LD_EXP 129
36632: PUSH
36633: LD_VAR 0 5
36637: ARRAY
36638: PUSH
36639: LD_INT 1
36641: PLUS
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PPUSH
36647: LD_VAR 0 2
36651: PUSH
36652: LD_VAR 0 3
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PPUSH
36661: CALL 42873 0 3
36665: ST_TO_ADDR
// result := true ;
36666: LD_ADDR_VAR 0 4
36670: PUSH
36671: LD_INT 1
36673: ST_TO_ADDR
// end ;
36674: LD_VAR 0 4
36678: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36679: LD_INT 0
36681: PPUSH
36682: PPUSH
36683: PPUSH
// if not unit in minersList then
36684: LD_VAR 0 1
36688: PUSH
36689: LD_EXP 128
36693: IN
36694: NOT
36695: IFFALSE 36699
// exit ;
36697: GO 37091
// index := GetElementIndex ( minersList , unit ) ;
36699: LD_ADDR_VAR 0 6
36703: PUSH
36704: LD_EXP 128
36708: PPUSH
36709: LD_VAR 0 1
36713: PPUSH
36714: CALL 42658 0 2
36718: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36719: LD_ADDR_VAR 0 5
36723: PUSH
36724: DOUBLE
36725: LD_EXP 129
36729: PUSH
36730: LD_VAR 0 6
36734: ARRAY
36735: INC
36736: ST_TO_ADDR
36737: LD_INT 1
36739: PUSH
36740: FOR_DOWNTO
36741: IFFALSE 36902
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36743: LD_EXP 129
36747: PUSH
36748: LD_VAR 0 6
36752: ARRAY
36753: PUSH
36754: LD_VAR 0 5
36758: ARRAY
36759: PUSH
36760: LD_INT 1
36762: ARRAY
36763: PUSH
36764: LD_VAR 0 2
36768: EQUAL
36769: PUSH
36770: LD_EXP 129
36774: PUSH
36775: LD_VAR 0 6
36779: ARRAY
36780: PUSH
36781: LD_VAR 0 5
36785: ARRAY
36786: PUSH
36787: LD_INT 2
36789: ARRAY
36790: PUSH
36791: LD_VAR 0 3
36795: EQUAL
36796: AND
36797: IFFALSE 36900
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36799: LD_EXP 129
36803: PUSH
36804: LD_VAR 0 6
36808: ARRAY
36809: PUSH
36810: LD_VAR 0 5
36814: ARRAY
36815: PUSH
36816: LD_INT 1
36818: ARRAY
36819: PPUSH
36820: LD_EXP 129
36824: PUSH
36825: LD_VAR 0 6
36829: ARRAY
36830: PUSH
36831: LD_VAR 0 5
36835: ARRAY
36836: PUSH
36837: LD_INT 2
36839: ARRAY
36840: PPUSH
36841: LD_VAR 0 1
36845: PPUSH
36846: CALL_OW 255
36850: PPUSH
36851: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36855: LD_ADDR_EXP 129
36859: PUSH
36860: LD_EXP 129
36864: PPUSH
36865: LD_VAR 0 6
36869: PPUSH
36870: LD_EXP 129
36874: PUSH
36875: LD_VAR 0 6
36879: ARRAY
36880: PPUSH
36881: LD_VAR 0 5
36885: PPUSH
36886: CALL_OW 3
36890: PPUSH
36891: CALL_OW 1
36895: ST_TO_ADDR
// exit ;
36896: POP
36897: POP
36898: GO 37091
// end ; end ;
36900: GO 36740
36902: POP
36903: POP
// for i := minerMinesList [ index ] downto 1 do
36904: LD_ADDR_VAR 0 5
36908: PUSH
36909: DOUBLE
36910: LD_EXP 129
36914: PUSH
36915: LD_VAR 0 6
36919: ARRAY
36920: INC
36921: ST_TO_ADDR
36922: LD_INT 1
36924: PUSH
36925: FOR_DOWNTO
36926: IFFALSE 37089
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36928: LD_EXP 129
36932: PUSH
36933: LD_VAR 0 6
36937: ARRAY
36938: PUSH
36939: LD_VAR 0 5
36943: ARRAY
36944: PUSH
36945: LD_INT 1
36947: ARRAY
36948: PPUSH
36949: LD_EXP 129
36953: PUSH
36954: LD_VAR 0 6
36958: ARRAY
36959: PUSH
36960: LD_VAR 0 5
36964: ARRAY
36965: PUSH
36966: LD_INT 2
36968: ARRAY
36969: PPUSH
36970: LD_VAR 0 2
36974: PPUSH
36975: LD_VAR 0 3
36979: PPUSH
36980: CALL_OW 298
36984: PUSH
36985: LD_INT 6
36987: LESS
36988: IFFALSE 37087
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36990: LD_EXP 129
36994: PUSH
36995: LD_VAR 0 6
36999: ARRAY
37000: PUSH
37001: LD_VAR 0 5
37005: ARRAY
37006: PUSH
37007: LD_INT 1
37009: ARRAY
37010: PPUSH
37011: LD_EXP 129
37015: PUSH
37016: LD_VAR 0 6
37020: ARRAY
37021: PUSH
37022: LD_VAR 0 5
37026: ARRAY
37027: PUSH
37028: LD_INT 2
37030: ARRAY
37031: PPUSH
37032: LD_VAR 0 1
37036: PPUSH
37037: CALL_OW 255
37041: PPUSH
37042: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37046: LD_ADDR_EXP 129
37050: PUSH
37051: LD_EXP 129
37055: PPUSH
37056: LD_VAR 0 6
37060: PPUSH
37061: LD_EXP 129
37065: PUSH
37066: LD_VAR 0 6
37070: ARRAY
37071: PPUSH
37072: LD_VAR 0 5
37076: PPUSH
37077: CALL_OW 3
37081: PPUSH
37082: CALL_OW 1
37086: ST_TO_ADDR
// end ; end ;
37087: GO 36925
37089: POP
37090: POP
// end ;
37091: LD_VAR 0 4
37095: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37096: LD_INT 0
37098: PPUSH
37099: PPUSH
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
37104: PPUSH
37105: PPUSH
37106: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37107: LD_VAR 0 1
37111: PPUSH
37112: CALL_OW 264
37116: PUSH
37117: LD_EXP 50
37121: EQUAL
37122: NOT
37123: PUSH
37124: LD_VAR 0 1
37128: PUSH
37129: LD_EXP 128
37133: IN
37134: NOT
37135: OR
37136: IFFALSE 37140
// exit ;
37138: GO 37462
// index := GetElementIndex ( minersList , unit ) ;
37140: LD_ADDR_VAR 0 6
37144: PUSH
37145: LD_EXP 128
37149: PPUSH
37150: LD_VAR 0 1
37154: PPUSH
37155: CALL 42658 0 2
37159: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37160: LD_ADDR_VAR 0 8
37164: PUSH
37165: LD_EXP 130
37169: PUSH
37170: LD_EXP 129
37174: PUSH
37175: LD_VAR 0 6
37179: ARRAY
37180: MINUS
37181: ST_TO_ADDR
// if not minesFreeAmount then
37182: LD_VAR 0 8
37186: NOT
37187: IFFALSE 37191
// exit ;
37189: GO 37462
// tmp := [ ] ;
37191: LD_ADDR_VAR 0 7
37195: PUSH
37196: EMPTY
37197: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37198: LD_ADDR_VAR 0 5
37202: PUSH
37203: DOUBLE
37204: LD_INT 1
37206: DEC
37207: ST_TO_ADDR
37208: LD_VAR 0 8
37212: PUSH
37213: FOR_TO
37214: IFFALSE 37409
// begin _d := rand ( 0 , 5 ) ;
37216: LD_ADDR_VAR 0 11
37220: PUSH
37221: LD_INT 0
37223: PPUSH
37224: LD_INT 5
37226: PPUSH
37227: CALL_OW 12
37231: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37232: LD_ADDR_VAR 0 12
37236: PUSH
37237: LD_INT 2
37239: PPUSH
37240: LD_INT 6
37242: PPUSH
37243: CALL_OW 12
37247: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37248: LD_ADDR_VAR 0 9
37252: PUSH
37253: LD_VAR 0 2
37257: PPUSH
37258: LD_VAR 0 11
37262: PPUSH
37263: LD_VAR 0 12
37267: PPUSH
37268: CALL_OW 272
37272: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37273: LD_ADDR_VAR 0 10
37277: PUSH
37278: LD_VAR 0 3
37282: PPUSH
37283: LD_VAR 0 11
37287: PPUSH
37288: LD_VAR 0 12
37292: PPUSH
37293: CALL_OW 273
37297: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37298: LD_VAR 0 9
37302: PPUSH
37303: LD_VAR 0 10
37307: PPUSH
37308: CALL_OW 488
37312: PUSH
37313: LD_VAR 0 9
37317: PUSH
37318: LD_VAR 0 10
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_VAR 0 7
37331: IN
37332: NOT
37333: AND
37334: PUSH
37335: LD_VAR 0 9
37339: PPUSH
37340: LD_VAR 0 10
37344: PPUSH
37345: CALL_OW 458
37349: NOT
37350: AND
37351: IFFALSE 37393
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37353: LD_ADDR_VAR 0 7
37357: PUSH
37358: LD_VAR 0 7
37362: PPUSH
37363: LD_VAR 0 7
37367: PUSH
37368: LD_INT 1
37370: PLUS
37371: PPUSH
37372: LD_VAR 0 9
37376: PUSH
37377: LD_VAR 0 10
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PPUSH
37386: CALL_OW 1
37390: ST_TO_ADDR
37391: GO 37407
// i := i - 1 ;
37393: LD_ADDR_VAR 0 5
37397: PUSH
37398: LD_VAR 0 5
37402: PUSH
37403: LD_INT 1
37405: MINUS
37406: ST_TO_ADDR
// end ;
37407: GO 37213
37409: POP
37410: POP
// for i in tmp do
37411: LD_ADDR_VAR 0 5
37415: PUSH
37416: LD_VAR 0 7
37420: PUSH
37421: FOR_IN
37422: IFFALSE 37460
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37424: LD_VAR 0 1
37428: PPUSH
37429: LD_VAR 0 5
37433: PUSH
37434: LD_INT 1
37436: ARRAY
37437: PPUSH
37438: LD_VAR 0 5
37442: PUSH
37443: LD_INT 2
37445: ARRAY
37446: PPUSH
37447: CALL 36402 0 3
37451: NOT
37452: IFFALSE 37458
// exit ;
37454: POP
37455: POP
37456: GO 37462
37458: GO 37421
37460: POP
37461: POP
// end ;
37462: LD_VAR 0 4
37466: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37467: LD_INT 0
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
// if not GetClass ( unit ) = class_sniper then
37476: LD_VAR 0 1
37480: PPUSH
37481: CALL_OW 257
37485: PUSH
37486: LD_INT 5
37488: EQUAL
37489: NOT
37490: IFFALSE 37494
// exit ;
37492: GO 37882
// dist := 8 ;
37494: LD_ADDR_VAR 0 5
37498: PUSH
37499: LD_INT 8
37501: ST_TO_ADDR
// viewRange := 12 ;
37502: LD_ADDR_VAR 0 7
37506: PUSH
37507: LD_INT 12
37509: ST_TO_ADDR
// side := GetSide ( unit ) ;
37510: LD_ADDR_VAR 0 6
37514: PUSH
37515: LD_VAR 0 1
37519: PPUSH
37520: CALL_OW 255
37524: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37525: LD_INT 61
37527: PPUSH
37528: LD_VAR 0 6
37532: PPUSH
37533: CALL_OW 321
37537: PUSH
37538: LD_INT 2
37540: EQUAL
37541: IFFALSE 37551
// viewRange := 16 ;
37543: LD_ADDR_VAR 0 7
37547: PUSH
37548: LD_INT 16
37550: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37551: LD_VAR 0 1
37555: PPUSH
37556: LD_VAR 0 2
37560: PPUSH
37561: LD_VAR 0 3
37565: PPUSH
37566: CALL_OW 297
37570: PUSH
37571: LD_VAR 0 5
37575: GREATER
37576: IFFALSE 37655
// begin ComMoveXY ( unit , x , y ) ;
37578: LD_VAR 0 1
37582: PPUSH
37583: LD_VAR 0 2
37587: PPUSH
37588: LD_VAR 0 3
37592: PPUSH
37593: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37597: LD_INT 35
37599: PPUSH
37600: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37604: LD_VAR 0 1
37608: PPUSH
37609: LD_VAR 0 2
37613: PPUSH
37614: LD_VAR 0 3
37618: PPUSH
37619: CALL 73377 0 3
37623: NOT
37624: IFFALSE 37628
// exit ;
37626: GO 37882
// until GetDistUnitXY ( unit , x , y ) < dist ;
37628: LD_VAR 0 1
37632: PPUSH
37633: LD_VAR 0 2
37637: PPUSH
37638: LD_VAR 0 3
37642: PPUSH
37643: CALL_OW 297
37647: PUSH
37648: LD_VAR 0 5
37652: LESS
37653: IFFALSE 37597
// end ; ComTurnXY ( unit , x , y ) ;
37655: LD_VAR 0 1
37659: PPUSH
37660: LD_VAR 0 2
37664: PPUSH
37665: LD_VAR 0 3
37669: PPUSH
37670: CALL_OW 118
// wait ( 5 ) ;
37674: LD_INT 5
37676: PPUSH
37677: CALL_OW 67
// _d := GetDir ( unit ) ;
37681: LD_ADDR_VAR 0 10
37685: PUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 254
37695: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37696: LD_ADDR_VAR 0 8
37700: PUSH
37701: LD_VAR 0 1
37705: PPUSH
37706: CALL_OW 250
37710: PPUSH
37711: LD_VAR 0 10
37715: PPUSH
37716: LD_VAR 0 5
37720: PPUSH
37721: CALL_OW 272
37725: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37726: LD_ADDR_VAR 0 9
37730: PUSH
37731: LD_VAR 0 1
37735: PPUSH
37736: CALL_OW 251
37740: PPUSH
37741: LD_VAR 0 10
37745: PPUSH
37746: LD_VAR 0 5
37750: PPUSH
37751: CALL_OW 273
37755: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37756: LD_VAR 0 8
37760: PPUSH
37761: LD_VAR 0 9
37765: PPUSH
37766: CALL_OW 488
37770: NOT
37771: IFFALSE 37775
// exit ;
37773: GO 37882
// ComAnimCustom ( unit , 1 ) ;
37775: LD_VAR 0 1
37779: PPUSH
37780: LD_INT 1
37782: PPUSH
37783: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37787: LD_VAR 0 8
37791: PPUSH
37792: LD_VAR 0 9
37796: PPUSH
37797: LD_VAR 0 6
37801: PPUSH
37802: LD_VAR 0 7
37806: PPUSH
37807: CALL_OW 330
// repeat wait ( 1 ) ;
37811: LD_INT 1
37813: PPUSH
37814: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37818: LD_VAR 0 1
37822: PPUSH
37823: CALL_OW 316
37827: PUSH
37828: LD_VAR 0 1
37832: PPUSH
37833: CALL_OW 314
37837: OR
37838: PUSH
37839: LD_VAR 0 1
37843: PPUSH
37844: CALL_OW 302
37848: NOT
37849: OR
37850: PUSH
37851: LD_VAR 0 1
37855: PPUSH
37856: CALL_OW 301
37860: OR
37861: IFFALSE 37811
// RemoveSeeing ( _x , _y , side ) ;
37863: LD_VAR 0 8
37867: PPUSH
37868: LD_VAR 0 9
37872: PPUSH
37873: LD_VAR 0 6
37877: PPUSH
37878: CALL_OW 331
// end ; end_of_file
37882: LD_VAR 0 4
37886: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37887: LD_INT 0
37889: PPUSH
37890: PPUSH
// if exist_mode then
37891: LD_VAR 0 2
37895: IFFALSE 37920
// unit := CreateCharacter ( prefix & ident ) else
37897: LD_ADDR_VAR 0 5
37901: PUSH
37902: LD_VAR 0 3
37906: PUSH
37907: LD_VAR 0 1
37911: STR
37912: PPUSH
37913: CALL_OW 34
37917: ST_TO_ADDR
37918: GO 37935
// unit := NewCharacter ( ident ) ;
37920: LD_ADDR_VAR 0 5
37924: PUSH
37925: LD_VAR 0 1
37929: PPUSH
37930: CALL_OW 25
37934: ST_TO_ADDR
// result := unit ;
37935: LD_ADDR_VAR 0 4
37939: PUSH
37940: LD_VAR 0 5
37944: ST_TO_ADDR
// end ;
37945: LD_VAR 0 4
37949: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37950: LD_INT 0
37952: PPUSH
37953: PPUSH
// if not side or not nation then
37954: LD_VAR 0 1
37958: NOT
37959: PUSH
37960: LD_VAR 0 2
37964: NOT
37965: OR
37966: IFFALSE 37970
// exit ;
37968: GO 38738
// case nation of nation_american :
37970: LD_VAR 0 2
37974: PUSH
37975: LD_INT 1
37977: DOUBLE
37978: EQUAL
37979: IFTRUE 37983
37981: GO 38197
37983: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37984: LD_ADDR_VAR 0 4
37988: PUSH
37989: LD_INT 35
37991: PUSH
37992: LD_INT 45
37994: PUSH
37995: LD_INT 46
37997: PUSH
37998: LD_INT 47
38000: PUSH
38001: LD_INT 82
38003: PUSH
38004: LD_INT 83
38006: PUSH
38007: LD_INT 84
38009: PUSH
38010: LD_INT 85
38012: PUSH
38013: LD_INT 86
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 6
38024: PUSH
38025: LD_INT 15
38027: PUSH
38028: LD_INT 16
38030: PUSH
38031: LD_INT 7
38033: PUSH
38034: LD_INT 12
38036: PUSH
38037: LD_INT 13
38039: PUSH
38040: LD_INT 10
38042: PUSH
38043: LD_INT 14
38045: PUSH
38046: LD_INT 20
38048: PUSH
38049: LD_INT 21
38051: PUSH
38052: LD_INT 22
38054: PUSH
38055: LD_INT 25
38057: PUSH
38058: LD_INT 32
38060: PUSH
38061: LD_INT 27
38063: PUSH
38064: LD_INT 36
38066: PUSH
38067: LD_INT 69
38069: PUSH
38070: LD_INT 39
38072: PUSH
38073: LD_INT 34
38075: PUSH
38076: LD_INT 40
38078: PUSH
38079: LD_INT 48
38081: PUSH
38082: LD_INT 49
38084: PUSH
38085: LD_INT 50
38087: PUSH
38088: LD_INT 51
38090: PUSH
38091: LD_INT 52
38093: PUSH
38094: LD_INT 53
38096: PUSH
38097: LD_INT 54
38099: PUSH
38100: LD_INT 55
38102: PUSH
38103: LD_INT 56
38105: PUSH
38106: LD_INT 57
38108: PUSH
38109: LD_INT 58
38111: PUSH
38112: LD_INT 59
38114: PUSH
38115: LD_INT 60
38117: PUSH
38118: LD_INT 61
38120: PUSH
38121: LD_INT 62
38123: PUSH
38124: LD_INT 80
38126: PUSH
38127: LD_INT 82
38129: PUSH
38130: LD_INT 83
38132: PUSH
38133: LD_INT 84
38135: PUSH
38136: LD_INT 85
38138: PUSH
38139: LD_INT 86
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: ST_TO_ADDR
38195: GO 38662
38197: LD_INT 2
38199: DOUBLE
38200: EQUAL
38201: IFTRUE 38205
38203: GO 38431
38205: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38206: LD_ADDR_VAR 0 4
38210: PUSH
38211: LD_INT 35
38213: PUSH
38214: LD_INT 45
38216: PUSH
38217: LD_INT 46
38219: PUSH
38220: LD_INT 47
38222: PUSH
38223: LD_INT 82
38225: PUSH
38226: LD_INT 83
38228: PUSH
38229: LD_INT 84
38231: PUSH
38232: LD_INT 85
38234: PUSH
38235: LD_INT 87
38237: PUSH
38238: LD_INT 70
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: LD_INT 11
38246: PUSH
38247: LD_INT 3
38249: PUSH
38250: LD_INT 4
38252: PUSH
38253: LD_INT 5
38255: PUSH
38256: LD_INT 6
38258: PUSH
38259: LD_INT 15
38261: PUSH
38262: LD_INT 18
38264: PUSH
38265: LD_INT 7
38267: PUSH
38268: LD_INT 17
38270: PUSH
38271: LD_INT 8
38273: PUSH
38274: LD_INT 20
38276: PUSH
38277: LD_INT 21
38279: PUSH
38280: LD_INT 22
38282: PUSH
38283: LD_INT 72
38285: PUSH
38286: LD_INT 26
38288: PUSH
38289: LD_INT 69
38291: PUSH
38292: LD_INT 39
38294: PUSH
38295: LD_INT 40
38297: PUSH
38298: LD_INT 41
38300: PUSH
38301: LD_INT 42
38303: PUSH
38304: LD_INT 43
38306: PUSH
38307: LD_INT 48
38309: PUSH
38310: LD_INT 49
38312: PUSH
38313: LD_INT 50
38315: PUSH
38316: LD_INT 51
38318: PUSH
38319: LD_INT 52
38321: PUSH
38322: LD_INT 53
38324: PUSH
38325: LD_INT 54
38327: PUSH
38328: LD_INT 55
38330: PUSH
38331: LD_INT 56
38333: PUSH
38334: LD_INT 60
38336: PUSH
38337: LD_INT 61
38339: PUSH
38340: LD_INT 62
38342: PUSH
38343: LD_INT 66
38345: PUSH
38346: LD_INT 67
38348: PUSH
38349: LD_INT 68
38351: PUSH
38352: LD_INT 81
38354: PUSH
38355: LD_INT 82
38357: PUSH
38358: LD_INT 83
38360: PUSH
38361: LD_INT 84
38363: PUSH
38364: LD_INT 85
38366: PUSH
38367: LD_INT 87
38369: PUSH
38370: LD_INT 88
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: ST_TO_ADDR
38429: GO 38662
38431: LD_INT 3
38433: DOUBLE
38434: EQUAL
38435: IFTRUE 38439
38437: GO 38661
38439: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38440: LD_ADDR_VAR 0 4
38444: PUSH
38445: LD_INT 46
38447: PUSH
38448: LD_INT 47
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: LD_INT 82
38459: PUSH
38460: LD_INT 83
38462: PUSH
38463: LD_INT 84
38465: PUSH
38466: LD_INT 85
38468: PUSH
38469: LD_INT 86
38471: PUSH
38472: LD_INT 11
38474: PUSH
38475: LD_INT 9
38477: PUSH
38478: LD_INT 20
38480: PUSH
38481: LD_INT 19
38483: PUSH
38484: LD_INT 21
38486: PUSH
38487: LD_INT 24
38489: PUSH
38490: LD_INT 22
38492: PUSH
38493: LD_INT 25
38495: PUSH
38496: LD_INT 28
38498: PUSH
38499: LD_INT 29
38501: PUSH
38502: LD_INT 30
38504: PUSH
38505: LD_INT 31
38507: PUSH
38508: LD_INT 37
38510: PUSH
38511: LD_INT 38
38513: PUSH
38514: LD_INT 32
38516: PUSH
38517: LD_INT 27
38519: PUSH
38520: LD_INT 33
38522: PUSH
38523: LD_INT 69
38525: PUSH
38526: LD_INT 39
38528: PUSH
38529: LD_INT 34
38531: PUSH
38532: LD_INT 40
38534: PUSH
38535: LD_INT 71
38537: PUSH
38538: LD_INT 23
38540: PUSH
38541: LD_INT 44
38543: PUSH
38544: LD_INT 48
38546: PUSH
38547: LD_INT 49
38549: PUSH
38550: LD_INT 50
38552: PUSH
38553: LD_INT 51
38555: PUSH
38556: LD_INT 52
38558: PUSH
38559: LD_INT 53
38561: PUSH
38562: LD_INT 54
38564: PUSH
38565: LD_INT 55
38567: PUSH
38568: LD_INT 56
38570: PUSH
38571: LD_INT 57
38573: PUSH
38574: LD_INT 58
38576: PUSH
38577: LD_INT 59
38579: PUSH
38580: LD_INT 63
38582: PUSH
38583: LD_INT 64
38585: PUSH
38586: LD_INT 65
38588: PUSH
38589: LD_INT 82
38591: PUSH
38592: LD_INT 83
38594: PUSH
38595: LD_INT 84
38597: PUSH
38598: LD_INT 85
38600: PUSH
38601: LD_INT 86
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: ST_TO_ADDR
38659: GO 38662
38661: POP
// if state > - 1 and state < 3 then
38662: LD_VAR 0 3
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: GREATER
38671: PUSH
38672: LD_VAR 0 3
38676: PUSH
38677: LD_INT 3
38679: LESS
38680: AND
38681: IFFALSE 38738
// for i in result do
38683: LD_ADDR_VAR 0 5
38687: PUSH
38688: LD_VAR 0 4
38692: PUSH
38693: FOR_IN
38694: IFFALSE 38736
// if GetTech ( i , side ) <> state then
38696: LD_VAR 0 5
38700: PPUSH
38701: LD_VAR 0 1
38705: PPUSH
38706: CALL_OW 321
38710: PUSH
38711: LD_VAR 0 3
38715: NONEQUAL
38716: IFFALSE 38734
// result := result diff i ;
38718: LD_ADDR_VAR 0 4
38722: PUSH
38723: LD_VAR 0 4
38727: PUSH
38728: LD_VAR 0 5
38732: DIFF
38733: ST_TO_ADDR
38734: GO 38693
38736: POP
38737: POP
// end ;
38738: LD_VAR 0 4
38742: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38743: LD_INT 0
38745: PPUSH
38746: PPUSH
38747: PPUSH
// result := true ;
38748: LD_ADDR_VAR 0 3
38752: PUSH
38753: LD_INT 1
38755: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38756: LD_ADDR_VAR 0 5
38760: PUSH
38761: LD_VAR 0 2
38765: PPUSH
38766: CALL_OW 480
38770: ST_TO_ADDR
// if not tmp then
38771: LD_VAR 0 5
38775: NOT
38776: IFFALSE 38780
// exit ;
38778: GO 38829
// for i in tmp do
38780: LD_ADDR_VAR 0 4
38784: PUSH
38785: LD_VAR 0 5
38789: PUSH
38790: FOR_IN
38791: IFFALSE 38827
// if GetTech ( i , side ) <> state_researched then
38793: LD_VAR 0 4
38797: PPUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 321
38807: PUSH
38808: LD_INT 2
38810: NONEQUAL
38811: IFFALSE 38825
// begin result := false ;
38813: LD_ADDR_VAR 0 3
38817: PUSH
38818: LD_INT 0
38820: ST_TO_ADDR
// exit ;
38821: POP
38822: POP
38823: GO 38829
// end ;
38825: GO 38790
38827: POP
38828: POP
// end ;
38829: LD_VAR 0 3
38833: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38834: LD_INT 0
38836: PPUSH
38837: PPUSH
38838: PPUSH
38839: PPUSH
38840: PPUSH
38841: PPUSH
38842: PPUSH
38843: PPUSH
38844: PPUSH
38845: PPUSH
38846: PPUSH
38847: PPUSH
38848: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38849: LD_VAR 0 1
38853: NOT
38854: PUSH
38855: LD_VAR 0 1
38859: PPUSH
38860: CALL_OW 257
38864: PUSH
38865: LD_INT 9
38867: NONEQUAL
38868: OR
38869: IFFALSE 38873
// exit ;
38871: GO 39446
// side := GetSide ( unit ) ;
38873: LD_ADDR_VAR 0 9
38877: PUSH
38878: LD_VAR 0 1
38882: PPUSH
38883: CALL_OW 255
38887: ST_TO_ADDR
// tech_space := tech_spacanom ;
38888: LD_ADDR_VAR 0 12
38892: PUSH
38893: LD_INT 29
38895: ST_TO_ADDR
// tech_time := tech_taurad ;
38896: LD_ADDR_VAR 0 13
38900: PUSH
38901: LD_INT 28
38903: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38904: LD_ADDR_VAR 0 11
38908: PUSH
38909: LD_VAR 0 1
38913: PPUSH
38914: CALL_OW 310
38918: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38919: LD_VAR 0 11
38923: PPUSH
38924: CALL_OW 247
38928: PUSH
38929: LD_INT 2
38931: EQUAL
38932: IFFALSE 38936
// exit ;
38934: GO 39446
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38936: LD_ADDR_VAR 0 8
38940: PUSH
38941: LD_INT 81
38943: PUSH
38944: LD_VAR 0 9
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 3
38955: PUSH
38956: LD_INT 21
38958: PUSH
38959: LD_INT 3
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PPUSH
38974: CALL_OW 69
38978: ST_TO_ADDR
// if not tmp then
38979: LD_VAR 0 8
38983: NOT
38984: IFFALSE 38988
// exit ;
38986: GO 39446
// if in_unit then
38988: LD_VAR 0 11
38992: IFFALSE 39016
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38994: LD_ADDR_VAR 0 10
38998: PUSH
38999: LD_VAR 0 8
39003: PPUSH
39004: LD_VAR 0 11
39008: PPUSH
39009: CALL_OW 74
39013: ST_TO_ADDR
39014: GO 39036
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39016: LD_ADDR_VAR 0 10
39020: PUSH
39021: LD_VAR 0 8
39025: PPUSH
39026: LD_VAR 0 1
39030: PPUSH
39031: CALL_OW 74
39035: ST_TO_ADDR
// if not enemy then
39036: LD_VAR 0 10
39040: NOT
39041: IFFALSE 39045
// exit ;
39043: GO 39446
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39045: LD_VAR 0 11
39049: PUSH
39050: LD_VAR 0 11
39054: PPUSH
39055: LD_VAR 0 10
39059: PPUSH
39060: CALL_OW 296
39064: PUSH
39065: LD_INT 13
39067: GREATER
39068: AND
39069: PUSH
39070: LD_VAR 0 1
39074: PPUSH
39075: LD_VAR 0 10
39079: PPUSH
39080: CALL_OW 296
39084: PUSH
39085: LD_INT 12
39087: GREATER
39088: OR
39089: IFFALSE 39093
// exit ;
39091: GO 39446
// missile := [ 1 ] ;
39093: LD_ADDR_VAR 0 14
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: EMPTY
39102: LIST
39103: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39104: LD_VAR 0 9
39108: PPUSH
39109: LD_VAR 0 12
39113: PPUSH
39114: CALL_OW 325
39118: IFFALSE 39147
// missile := Replace ( missile , missile + 1 , 2 ) ;
39120: LD_ADDR_VAR 0 14
39124: PUSH
39125: LD_VAR 0 14
39129: PPUSH
39130: LD_VAR 0 14
39134: PUSH
39135: LD_INT 1
39137: PLUS
39138: PPUSH
39139: LD_INT 2
39141: PPUSH
39142: CALL_OW 1
39146: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39147: LD_VAR 0 9
39151: PPUSH
39152: LD_VAR 0 13
39156: PPUSH
39157: CALL_OW 325
39161: PUSH
39162: LD_VAR 0 10
39166: PPUSH
39167: CALL_OW 255
39171: PPUSH
39172: LD_VAR 0 13
39176: PPUSH
39177: CALL_OW 325
39181: NOT
39182: AND
39183: IFFALSE 39212
// missile := Replace ( missile , missile + 1 , 3 ) ;
39185: LD_ADDR_VAR 0 14
39189: PUSH
39190: LD_VAR 0 14
39194: PPUSH
39195: LD_VAR 0 14
39199: PUSH
39200: LD_INT 1
39202: PLUS
39203: PPUSH
39204: LD_INT 3
39206: PPUSH
39207: CALL_OW 1
39211: ST_TO_ADDR
// if missile < 2 then
39212: LD_VAR 0 14
39216: PUSH
39217: LD_INT 2
39219: LESS
39220: IFFALSE 39224
// exit ;
39222: GO 39446
// x := GetX ( enemy ) ;
39224: LD_ADDR_VAR 0 4
39228: PUSH
39229: LD_VAR 0 10
39233: PPUSH
39234: CALL_OW 250
39238: ST_TO_ADDR
// y := GetY ( enemy ) ;
39239: LD_ADDR_VAR 0 5
39243: PUSH
39244: LD_VAR 0 10
39248: PPUSH
39249: CALL_OW 251
39253: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39254: LD_ADDR_VAR 0 6
39258: PUSH
39259: LD_VAR 0 4
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PPUSH
39268: LD_INT 1
39270: PPUSH
39271: CALL_OW 12
39275: PLUS
39276: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39277: LD_ADDR_VAR 0 7
39281: PUSH
39282: LD_VAR 0 5
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PPUSH
39291: LD_INT 1
39293: PPUSH
39294: CALL_OW 12
39298: PLUS
39299: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39300: LD_VAR 0 6
39304: PPUSH
39305: LD_VAR 0 7
39309: PPUSH
39310: CALL_OW 488
39314: NOT
39315: IFFALSE 39337
// begin _x := x ;
39317: LD_ADDR_VAR 0 6
39321: PUSH
39322: LD_VAR 0 4
39326: ST_TO_ADDR
// _y := y ;
39327: LD_ADDR_VAR 0 7
39331: PUSH
39332: LD_VAR 0 5
39336: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39337: LD_ADDR_VAR 0 3
39341: PUSH
39342: LD_INT 1
39344: PPUSH
39345: LD_VAR 0 14
39349: PPUSH
39350: CALL_OW 12
39354: ST_TO_ADDR
// case i of 1 :
39355: LD_VAR 0 3
39359: PUSH
39360: LD_INT 1
39362: DOUBLE
39363: EQUAL
39364: IFTRUE 39368
39366: GO 39385
39368: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39369: LD_VAR 0 1
39373: PPUSH
39374: LD_VAR 0 10
39378: PPUSH
39379: CALL_OW 115
39383: GO 39446
39385: LD_INT 2
39387: DOUBLE
39388: EQUAL
39389: IFTRUE 39393
39391: GO 39415
39393: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39394: LD_VAR 0 1
39398: PPUSH
39399: LD_VAR 0 6
39403: PPUSH
39404: LD_VAR 0 7
39408: PPUSH
39409: CALL_OW 153
39413: GO 39446
39415: LD_INT 3
39417: DOUBLE
39418: EQUAL
39419: IFTRUE 39423
39421: GO 39445
39423: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39424: LD_VAR 0 1
39428: PPUSH
39429: LD_VAR 0 6
39433: PPUSH
39434: LD_VAR 0 7
39438: PPUSH
39439: CALL_OW 154
39443: GO 39446
39445: POP
// end ;
39446: LD_VAR 0 2
39450: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39451: LD_INT 0
39453: PPUSH
39454: PPUSH
39455: PPUSH
39456: PPUSH
39457: PPUSH
39458: PPUSH
// if not unit or not building then
39459: LD_VAR 0 1
39463: NOT
39464: PUSH
39465: LD_VAR 0 2
39469: NOT
39470: OR
39471: IFFALSE 39475
// exit ;
39473: GO 39633
// x := GetX ( building ) ;
39475: LD_ADDR_VAR 0 5
39479: PUSH
39480: LD_VAR 0 2
39484: PPUSH
39485: CALL_OW 250
39489: ST_TO_ADDR
// y := GetY ( building ) ;
39490: LD_ADDR_VAR 0 6
39494: PUSH
39495: LD_VAR 0 2
39499: PPUSH
39500: CALL_OW 251
39504: ST_TO_ADDR
// for i = 0 to 5 do
39505: LD_ADDR_VAR 0 4
39509: PUSH
39510: DOUBLE
39511: LD_INT 0
39513: DEC
39514: ST_TO_ADDR
39515: LD_INT 5
39517: PUSH
39518: FOR_TO
39519: IFFALSE 39631
// begin _x := ShiftX ( x , i , 3 ) ;
39521: LD_ADDR_VAR 0 7
39525: PUSH
39526: LD_VAR 0 5
39530: PPUSH
39531: LD_VAR 0 4
39535: PPUSH
39536: LD_INT 3
39538: PPUSH
39539: CALL_OW 272
39543: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39544: LD_ADDR_VAR 0 8
39548: PUSH
39549: LD_VAR 0 6
39553: PPUSH
39554: LD_VAR 0 4
39558: PPUSH
39559: LD_INT 3
39561: PPUSH
39562: CALL_OW 273
39566: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39567: LD_VAR 0 7
39571: PPUSH
39572: LD_VAR 0 8
39576: PPUSH
39577: CALL_OW 488
39581: NOT
39582: IFFALSE 39586
// continue ;
39584: GO 39518
// if HexInfo ( _x , _y ) = 0 then
39586: LD_VAR 0 7
39590: PPUSH
39591: LD_VAR 0 8
39595: PPUSH
39596: CALL_OW 428
39600: PUSH
39601: LD_INT 0
39603: EQUAL
39604: IFFALSE 39629
// begin ComMoveXY ( unit , _x , _y ) ;
39606: LD_VAR 0 1
39610: PPUSH
39611: LD_VAR 0 7
39615: PPUSH
39616: LD_VAR 0 8
39620: PPUSH
39621: CALL_OW 111
// exit ;
39625: POP
39626: POP
39627: GO 39633
// end ; end ;
39629: GO 39518
39631: POP
39632: POP
// end ;
39633: LD_VAR 0 3
39637: RET
// export function ScanBase ( side , base_area ) ; begin
39638: LD_INT 0
39640: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39641: LD_ADDR_VAR 0 3
39645: PUSH
39646: LD_VAR 0 2
39650: PPUSH
39651: LD_INT 81
39653: PUSH
39654: LD_VAR 0 1
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PPUSH
39663: CALL_OW 70
39667: ST_TO_ADDR
// end ;
39668: LD_VAR 0 3
39672: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39673: LD_INT 0
39675: PPUSH
39676: PPUSH
39677: PPUSH
39678: PPUSH
// result := false ;
39679: LD_ADDR_VAR 0 2
39683: PUSH
39684: LD_INT 0
39686: ST_TO_ADDR
// side := GetSide ( unit ) ;
39687: LD_ADDR_VAR 0 3
39691: PUSH
39692: LD_VAR 0 1
39696: PPUSH
39697: CALL_OW 255
39701: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39702: LD_ADDR_VAR 0 4
39706: PUSH
39707: LD_VAR 0 1
39711: PPUSH
39712: CALL_OW 248
39716: ST_TO_ADDR
// case nat of 1 :
39717: LD_VAR 0 4
39721: PUSH
39722: LD_INT 1
39724: DOUBLE
39725: EQUAL
39726: IFTRUE 39730
39728: GO 39741
39730: POP
// tech := tech_lassight ; 2 :
39731: LD_ADDR_VAR 0 5
39735: PUSH
39736: LD_INT 12
39738: ST_TO_ADDR
39739: GO 39780
39741: LD_INT 2
39743: DOUBLE
39744: EQUAL
39745: IFTRUE 39749
39747: GO 39760
39749: POP
// tech := tech_mortar ; 3 :
39750: LD_ADDR_VAR 0 5
39754: PUSH
39755: LD_INT 41
39757: ST_TO_ADDR
39758: GO 39780
39760: LD_INT 3
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39768
39766: GO 39779
39768: POP
// tech := tech_bazooka ; end ;
39769: LD_ADDR_VAR 0 5
39773: PUSH
39774: LD_INT 44
39776: ST_TO_ADDR
39777: GO 39780
39779: POP
// if Researched ( side , tech ) then
39780: LD_VAR 0 3
39784: PPUSH
39785: LD_VAR 0 5
39789: PPUSH
39790: CALL_OW 325
39794: IFFALSE 39821
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39796: LD_ADDR_VAR 0 2
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: LD_INT 8
39806: PUSH
39807: LD_INT 9
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: PUSH
39815: LD_VAR 0 4
39819: ARRAY
39820: ST_TO_ADDR
// end ;
39821: LD_VAR 0 2
39825: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39826: LD_INT 0
39828: PPUSH
39829: PPUSH
39830: PPUSH
// if not mines then
39831: LD_VAR 0 2
39835: NOT
39836: IFFALSE 39840
// exit ;
39838: GO 39984
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39840: LD_ADDR_VAR 0 5
39844: PUSH
39845: LD_INT 81
39847: PUSH
39848: LD_VAR 0 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 3
39859: PUSH
39860: LD_INT 21
39862: PUSH
39863: LD_INT 3
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PPUSH
39878: CALL_OW 69
39882: ST_TO_ADDR
// for i in mines do
39883: LD_ADDR_VAR 0 4
39887: PUSH
39888: LD_VAR 0 2
39892: PUSH
39893: FOR_IN
39894: IFFALSE 39982
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39896: LD_VAR 0 4
39900: PUSH
39901: LD_INT 1
39903: ARRAY
39904: PPUSH
39905: LD_VAR 0 4
39909: PUSH
39910: LD_INT 2
39912: ARRAY
39913: PPUSH
39914: CALL_OW 458
39918: NOT
39919: IFFALSE 39923
// continue ;
39921: GO 39893
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39923: LD_VAR 0 4
39927: PUSH
39928: LD_INT 1
39930: ARRAY
39931: PPUSH
39932: LD_VAR 0 4
39936: PUSH
39937: LD_INT 2
39939: ARRAY
39940: PPUSH
39941: CALL_OW 428
39945: PUSH
39946: LD_VAR 0 5
39950: IN
39951: IFFALSE 39980
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39953: LD_VAR 0 4
39957: PUSH
39958: LD_INT 1
39960: ARRAY
39961: PPUSH
39962: LD_VAR 0 4
39966: PUSH
39967: LD_INT 2
39969: ARRAY
39970: PPUSH
39971: LD_VAR 0 1
39975: PPUSH
39976: CALL_OW 456
// end ;
39980: GO 39893
39982: POP
39983: POP
// end ;
39984: LD_VAR 0 3
39988: RET
// export function Count ( array ) ; var i ; begin
39989: LD_INT 0
39991: PPUSH
39992: PPUSH
// result := 0 ;
39993: LD_ADDR_VAR 0 2
39997: PUSH
39998: LD_INT 0
40000: ST_TO_ADDR
// for i in array do
40001: LD_ADDR_VAR 0 3
40005: PUSH
40006: LD_VAR 0 1
40010: PUSH
40011: FOR_IN
40012: IFFALSE 40036
// if i then
40014: LD_VAR 0 3
40018: IFFALSE 40034
// result := result + 1 ;
40020: LD_ADDR_VAR 0 2
40024: PUSH
40025: LD_VAR 0 2
40029: PUSH
40030: LD_INT 1
40032: PLUS
40033: ST_TO_ADDR
40034: GO 40011
40036: POP
40037: POP
// end ;
40038: LD_VAR 0 2
40042: RET
// export function IsEmpty ( building ) ; begin
40043: LD_INT 0
40045: PPUSH
// if not building then
40046: LD_VAR 0 1
40050: NOT
40051: IFFALSE 40055
// exit ;
40053: GO 40098
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40055: LD_ADDR_VAR 0 2
40059: PUSH
40060: LD_VAR 0 1
40064: PUSH
40065: LD_INT 22
40067: PUSH
40068: LD_VAR 0 1
40072: PPUSH
40073: CALL_OW 255
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 58
40084: PUSH
40085: EMPTY
40086: LIST
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PPUSH
40092: CALL_OW 69
40096: IN
40097: ST_TO_ADDR
// end ;
40098: LD_VAR 0 2
40102: RET
// export function IsNotFull ( building ) ; begin
40103: LD_INT 0
40105: PPUSH
// if not building then
40106: LD_VAR 0 1
40110: NOT
40111: IFFALSE 40115
// exit ;
40113: GO 40134
// result := UnitsInside ( building ) < 6 ;
40115: LD_ADDR_VAR 0 2
40119: PUSH
40120: LD_VAR 0 1
40124: PPUSH
40125: CALL_OW 313
40129: PUSH
40130: LD_INT 6
40132: LESS
40133: ST_TO_ADDR
// end ;
40134: LD_VAR 0 2
40138: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40139: LD_INT 0
40141: PPUSH
40142: PPUSH
40143: PPUSH
40144: PPUSH
// tmp := [ ] ;
40145: LD_ADDR_VAR 0 3
40149: PUSH
40150: EMPTY
40151: ST_TO_ADDR
// list := [ ] ;
40152: LD_ADDR_VAR 0 5
40156: PUSH
40157: EMPTY
40158: ST_TO_ADDR
// for i = 16 to 25 do
40159: LD_ADDR_VAR 0 4
40163: PUSH
40164: DOUBLE
40165: LD_INT 16
40167: DEC
40168: ST_TO_ADDR
40169: LD_INT 25
40171: PUSH
40172: FOR_TO
40173: IFFALSE 40246
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40175: LD_ADDR_VAR 0 3
40179: PUSH
40180: LD_VAR 0 3
40184: PUSH
40185: LD_INT 22
40187: PUSH
40188: LD_VAR 0 1
40192: PPUSH
40193: CALL_OW 255
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 91
40204: PUSH
40205: LD_VAR 0 1
40209: PUSH
40210: LD_INT 6
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 30
40220: PUSH
40221: LD_VAR 0 4
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: PUSH
40235: EMPTY
40236: LIST
40237: PPUSH
40238: CALL_OW 69
40242: ADD
40243: ST_TO_ADDR
40244: GO 40172
40246: POP
40247: POP
// for i = 1 to tmp do
40248: LD_ADDR_VAR 0 4
40252: PUSH
40253: DOUBLE
40254: LD_INT 1
40256: DEC
40257: ST_TO_ADDR
40258: LD_VAR 0 3
40262: PUSH
40263: FOR_TO
40264: IFFALSE 40352
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40266: LD_ADDR_VAR 0 5
40270: PUSH
40271: LD_VAR 0 5
40275: PUSH
40276: LD_VAR 0 3
40280: PUSH
40281: LD_VAR 0 4
40285: ARRAY
40286: PPUSH
40287: CALL_OW 266
40291: PUSH
40292: LD_VAR 0 3
40296: PUSH
40297: LD_VAR 0 4
40301: ARRAY
40302: PPUSH
40303: CALL_OW 250
40307: PUSH
40308: LD_VAR 0 3
40312: PUSH
40313: LD_VAR 0 4
40317: ARRAY
40318: PPUSH
40319: CALL_OW 251
40323: PUSH
40324: LD_VAR 0 3
40328: PUSH
40329: LD_VAR 0 4
40333: ARRAY
40334: PPUSH
40335: CALL_OW 254
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: PUSH
40346: EMPTY
40347: LIST
40348: ADD
40349: ST_TO_ADDR
40350: GO 40263
40352: POP
40353: POP
// result := list ;
40354: LD_ADDR_VAR 0 2
40358: PUSH
40359: LD_VAR 0 5
40363: ST_TO_ADDR
// end ;
40364: LD_VAR 0 2
40368: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40369: LD_INT 0
40371: PPUSH
40372: PPUSH
40373: PPUSH
40374: PPUSH
40375: PPUSH
40376: PPUSH
40377: PPUSH
// if not factory then
40378: LD_VAR 0 1
40382: NOT
40383: IFFALSE 40387
// exit ;
40385: GO 40980
// if control = control_apeman then
40387: LD_VAR 0 4
40391: PUSH
40392: LD_INT 5
40394: EQUAL
40395: IFFALSE 40504
// begin tmp := UnitsInside ( factory ) ;
40397: LD_ADDR_VAR 0 8
40401: PUSH
40402: LD_VAR 0 1
40406: PPUSH
40407: CALL_OW 313
40411: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40412: LD_VAR 0 8
40416: PPUSH
40417: LD_INT 25
40419: PUSH
40420: LD_INT 12
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PPUSH
40427: CALL_OW 72
40431: NOT
40432: IFFALSE 40442
// control := control_manual ;
40434: LD_ADDR_VAR 0 4
40438: PUSH
40439: LD_INT 1
40441: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40442: LD_ADDR_VAR 0 8
40446: PUSH
40447: LD_VAR 0 1
40451: PPUSH
40452: CALL 40139 0 1
40456: ST_TO_ADDR
// if tmp then
40457: LD_VAR 0 8
40461: IFFALSE 40504
// begin for i in tmp do
40463: LD_ADDR_VAR 0 7
40467: PUSH
40468: LD_VAR 0 8
40472: PUSH
40473: FOR_IN
40474: IFFALSE 40502
// if i [ 1 ] = b_ext_radio then
40476: LD_VAR 0 7
40480: PUSH
40481: LD_INT 1
40483: ARRAY
40484: PUSH
40485: LD_INT 22
40487: EQUAL
40488: IFFALSE 40500
// begin control := control_remote ;
40490: LD_ADDR_VAR 0 4
40494: PUSH
40495: LD_INT 2
40497: ST_TO_ADDR
// break ;
40498: GO 40502
// end ;
40500: GO 40473
40502: POP
40503: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40504: LD_VAR 0 1
40508: PPUSH
40509: LD_VAR 0 2
40513: PPUSH
40514: LD_VAR 0 3
40518: PPUSH
40519: LD_VAR 0 4
40523: PPUSH
40524: LD_VAR 0 5
40528: PPUSH
40529: CALL_OW 448
40533: IFFALSE 40568
// begin result := [ chassis , engine , control , weapon ] ;
40535: LD_ADDR_VAR 0 6
40539: PUSH
40540: LD_VAR 0 2
40544: PUSH
40545: LD_VAR 0 3
40549: PUSH
40550: LD_VAR 0 4
40554: PUSH
40555: LD_VAR 0 5
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: ST_TO_ADDR
// exit ;
40566: GO 40980
// end ; _chassis := AvailableChassisList ( factory ) ;
40568: LD_ADDR_VAR 0 9
40572: PUSH
40573: LD_VAR 0 1
40577: PPUSH
40578: CALL_OW 475
40582: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40583: LD_ADDR_VAR 0 11
40587: PUSH
40588: LD_VAR 0 1
40592: PPUSH
40593: CALL_OW 476
40597: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40598: LD_ADDR_VAR 0 12
40602: PUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 477
40612: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40613: LD_ADDR_VAR 0 10
40617: PUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 478
40627: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40628: LD_VAR 0 9
40632: NOT
40633: PUSH
40634: LD_VAR 0 11
40638: NOT
40639: OR
40640: PUSH
40641: LD_VAR 0 12
40645: NOT
40646: OR
40647: PUSH
40648: LD_VAR 0 10
40652: NOT
40653: OR
40654: IFFALSE 40689
// begin result := [ chassis , engine , control , weapon ] ;
40656: LD_ADDR_VAR 0 6
40660: PUSH
40661: LD_VAR 0 2
40665: PUSH
40666: LD_VAR 0 3
40670: PUSH
40671: LD_VAR 0 4
40675: PUSH
40676: LD_VAR 0 5
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: ST_TO_ADDR
// exit ;
40687: GO 40980
// end ; if not chassis in _chassis then
40689: LD_VAR 0 2
40693: PUSH
40694: LD_VAR 0 9
40698: IN
40699: NOT
40700: IFFALSE 40726
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40702: LD_ADDR_VAR 0 2
40706: PUSH
40707: LD_VAR 0 9
40711: PUSH
40712: LD_INT 1
40714: PPUSH
40715: LD_VAR 0 9
40719: PPUSH
40720: CALL_OW 12
40724: ARRAY
40725: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40726: LD_VAR 0 2
40730: PPUSH
40731: LD_VAR 0 3
40735: PPUSH
40736: CALL 40985 0 2
40740: NOT
40741: IFFALSE 40800
// repeat engine := _engine [ 1 ] ;
40743: LD_ADDR_VAR 0 3
40747: PUSH
40748: LD_VAR 0 11
40752: PUSH
40753: LD_INT 1
40755: ARRAY
40756: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40757: LD_ADDR_VAR 0 11
40761: PUSH
40762: LD_VAR 0 11
40766: PPUSH
40767: LD_INT 1
40769: PPUSH
40770: CALL_OW 3
40774: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40775: LD_VAR 0 2
40779: PPUSH
40780: LD_VAR 0 3
40784: PPUSH
40785: CALL 40985 0 2
40789: PUSH
40790: LD_VAR 0 11
40794: PUSH
40795: EMPTY
40796: EQUAL
40797: OR
40798: IFFALSE 40743
// if not control in _control then
40800: LD_VAR 0 4
40804: PUSH
40805: LD_VAR 0 12
40809: IN
40810: NOT
40811: IFFALSE 40837
// control := _control [ rand ( 1 , _control ) ] ;
40813: LD_ADDR_VAR 0 4
40817: PUSH
40818: LD_VAR 0 12
40822: PUSH
40823: LD_INT 1
40825: PPUSH
40826: LD_VAR 0 12
40830: PPUSH
40831: CALL_OW 12
40835: ARRAY
40836: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40837: LD_VAR 0 2
40841: PPUSH
40842: LD_VAR 0 5
40846: PPUSH
40847: CALL 41205 0 2
40851: NOT
40852: IFFALSE 40911
// repeat weapon := _weapon [ 1 ] ;
40854: LD_ADDR_VAR 0 5
40858: PUSH
40859: LD_VAR 0 10
40863: PUSH
40864: LD_INT 1
40866: ARRAY
40867: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40868: LD_ADDR_VAR 0 10
40872: PUSH
40873: LD_VAR 0 10
40877: PPUSH
40878: LD_INT 1
40880: PPUSH
40881: CALL_OW 3
40885: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40886: LD_VAR 0 2
40890: PPUSH
40891: LD_VAR 0 5
40895: PPUSH
40896: CALL 41205 0 2
40900: PUSH
40901: LD_VAR 0 10
40905: PUSH
40906: EMPTY
40907: EQUAL
40908: OR
40909: IFFALSE 40854
// result := [ ] ;
40911: LD_ADDR_VAR 0 6
40915: PUSH
40916: EMPTY
40917: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40918: LD_VAR 0 1
40922: PPUSH
40923: LD_VAR 0 2
40927: PPUSH
40928: LD_VAR 0 3
40932: PPUSH
40933: LD_VAR 0 4
40937: PPUSH
40938: LD_VAR 0 5
40942: PPUSH
40943: CALL_OW 448
40947: IFFALSE 40980
// result := [ chassis , engine , control , weapon ] ;
40949: LD_ADDR_VAR 0 6
40953: PUSH
40954: LD_VAR 0 2
40958: PUSH
40959: LD_VAR 0 3
40963: PUSH
40964: LD_VAR 0 4
40968: PUSH
40969: LD_VAR 0 5
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: ST_TO_ADDR
// end ;
40980: LD_VAR 0 6
40984: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40985: LD_INT 0
40987: PPUSH
// if not chassis or not engine then
40988: LD_VAR 0 1
40992: NOT
40993: PUSH
40994: LD_VAR 0 2
40998: NOT
40999: OR
41000: IFFALSE 41004
// exit ;
41002: GO 41200
// case engine of engine_solar :
41004: LD_VAR 0 2
41008: PUSH
41009: LD_INT 2
41011: DOUBLE
41012: EQUAL
41013: IFTRUE 41017
41015: GO 41055
41017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41018: LD_ADDR_VAR 0 3
41022: PUSH
41023: LD_INT 11
41025: PUSH
41026: LD_INT 12
41028: PUSH
41029: LD_INT 13
41031: PUSH
41032: LD_INT 14
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: ST_TO_ADDR
41053: GO 41184
41055: LD_INT 1
41057: DOUBLE
41058: EQUAL
41059: IFTRUE 41063
41061: GO 41125
41063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41064: LD_ADDR_VAR 0 3
41068: PUSH
41069: LD_INT 11
41071: PUSH
41072: LD_INT 12
41074: PUSH
41075: LD_INT 13
41077: PUSH
41078: LD_INT 14
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: LD_INT 2
41086: PUSH
41087: LD_INT 3
41089: PUSH
41090: LD_INT 4
41092: PUSH
41093: LD_INT 5
41095: PUSH
41096: LD_INT 21
41098: PUSH
41099: LD_INT 23
41101: PUSH
41102: LD_INT 22
41104: PUSH
41105: LD_INT 24
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: ST_TO_ADDR
41123: GO 41184
41125: LD_INT 3
41127: DOUBLE
41128: EQUAL
41129: IFTRUE 41133
41131: GO 41183
41133: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41134: LD_ADDR_VAR 0 3
41138: PUSH
41139: LD_INT 13
41141: PUSH
41142: LD_INT 14
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: LD_INT 4
41153: PUSH
41154: LD_INT 5
41156: PUSH
41157: LD_INT 21
41159: PUSH
41160: LD_INT 22
41162: PUSH
41163: LD_INT 23
41165: PUSH
41166: LD_INT 24
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: ST_TO_ADDR
41181: GO 41184
41183: POP
// result := ( chassis in result ) ;
41184: LD_ADDR_VAR 0 3
41188: PUSH
41189: LD_VAR 0 1
41193: PUSH
41194: LD_VAR 0 3
41198: IN
41199: ST_TO_ADDR
// end ;
41200: LD_VAR 0 3
41204: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41205: LD_INT 0
41207: PPUSH
// if not chassis or not weapon then
41208: LD_VAR 0 1
41212: NOT
41213: PUSH
41214: LD_VAR 0 2
41218: NOT
41219: OR
41220: IFFALSE 41224
// exit ;
41222: GO 42286
// case weapon of us_machine_gun :
41224: LD_VAR 0 2
41228: PUSH
41229: LD_INT 2
41231: DOUBLE
41232: EQUAL
41233: IFTRUE 41237
41235: GO 41267
41237: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41238: LD_ADDR_VAR 0 3
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 3
41251: PUSH
41252: LD_INT 4
41254: PUSH
41255: LD_INT 5
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: ST_TO_ADDR
41265: GO 42270
41267: LD_INT 3
41269: DOUBLE
41270: EQUAL
41271: IFTRUE 41275
41273: GO 41305
41275: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41276: LD_ADDR_VAR 0 3
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: LD_INT 3
41289: PUSH
41290: LD_INT 4
41292: PUSH
41293: LD_INT 5
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: ST_TO_ADDR
41303: GO 42270
41305: LD_INT 11
41307: DOUBLE
41308: EQUAL
41309: IFTRUE 41313
41311: GO 41343
41313: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41314: LD_ADDR_VAR 0 3
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: LD_INT 3
41327: PUSH
41328: LD_INT 4
41330: PUSH
41331: LD_INT 5
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
41341: GO 42270
41343: LD_INT 4
41345: DOUBLE
41346: EQUAL
41347: IFTRUE 41351
41349: GO 41377
41351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41352: LD_ADDR_VAR 0 3
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 3
41362: PUSH
41363: LD_INT 4
41365: PUSH
41366: LD_INT 5
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
41375: GO 42270
41377: LD_INT 5
41379: DOUBLE
41380: EQUAL
41381: IFTRUE 41385
41383: GO 41411
41385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41386: LD_ADDR_VAR 0 3
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 3
41396: PUSH
41397: LD_INT 4
41399: PUSH
41400: LD_INT 5
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: ST_TO_ADDR
41409: GO 42270
41411: LD_INT 9
41413: DOUBLE
41414: EQUAL
41415: IFTRUE 41419
41417: GO 41445
41419: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41420: LD_ADDR_VAR 0 3
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: LD_INT 3
41430: PUSH
41431: LD_INT 4
41433: PUSH
41434: LD_INT 5
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
41443: GO 42270
41445: LD_INT 7
41447: DOUBLE
41448: EQUAL
41449: IFTRUE 41453
41451: GO 41479
41453: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41454: LD_ADDR_VAR 0 3
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: LD_INT 4
41467: PUSH
41468: LD_INT 5
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: ST_TO_ADDR
41477: GO 42270
41479: LD_INT 12
41481: DOUBLE
41482: EQUAL
41483: IFTRUE 41487
41485: GO 41513
41487: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41488: LD_ADDR_VAR 0 3
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: LD_INT 3
41498: PUSH
41499: LD_INT 4
41501: PUSH
41502: LD_INT 5
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: ST_TO_ADDR
41511: GO 42270
41513: LD_INT 13
41515: DOUBLE
41516: EQUAL
41517: IFTRUE 41521
41519: GO 41547
41521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41522: LD_ADDR_VAR 0 3
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 3
41532: PUSH
41533: LD_INT 4
41535: PUSH
41536: LD_INT 5
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: ST_TO_ADDR
41545: GO 42270
41547: LD_INT 14
41549: DOUBLE
41550: EQUAL
41551: IFTRUE 41555
41553: GO 41573
41555: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41556: LD_ADDR_VAR 0 3
41560: PUSH
41561: LD_INT 4
41563: PUSH
41564: LD_INT 5
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: ST_TO_ADDR
41571: GO 42270
41573: LD_INT 6
41575: DOUBLE
41576: EQUAL
41577: IFTRUE 41581
41579: GO 41599
41581: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41582: LD_ADDR_VAR 0 3
41586: PUSH
41587: LD_INT 4
41589: PUSH
41590: LD_INT 5
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: ST_TO_ADDR
41597: GO 42270
41599: LD_INT 10
41601: DOUBLE
41602: EQUAL
41603: IFTRUE 41607
41605: GO 41625
41607: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41608: LD_ADDR_VAR 0 3
41612: PUSH
41613: LD_INT 4
41615: PUSH
41616: LD_INT 5
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: ST_TO_ADDR
41623: GO 42270
41625: LD_INT 22
41627: DOUBLE
41628: EQUAL
41629: IFTRUE 41633
41631: GO 41659
41633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: LD_INT 11
41641: PUSH
41642: LD_INT 12
41644: PUSH
41645: LD_INT 13
41647: PUSH
41648: LD_INT 14
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: ST_TO_ADDR
41657: GO 42270
41659: LD_INT 23
41661: DOUBLE
41662: EQUAL
41663: IFTRUE 41667
41665: GO 41693
41667: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41668: LD_ADDR_VAR 0 3
41672: PUSH
41673: LD_INT 11
41675: PUSH
41676: LD_INT 12
41678: PUSH
41679: LD_INT 13
41681: PUSH
41682: LD_INT 14
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: ST_TO_ADDR
41691: GO 42270
41693: LD_INT 24
41695: DOUBLE
41696: EQUAL
41697: IFTRUE 41701
41699: GO 41727
41701: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41702: LD_ADDR_VAR 0 3
41706: PUSH
41707: LD_INT 11
41709: PUSH
41710: LD_INT 12
41712: PUSH
41713: LD_INT 13
41715: PUSH
41716: LD_INT 14
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: ST_TO_ADDR
41725: GO 42270
41727: LD_INT 30
41729: DOUBLE
41730: EQUAL
41731: IFTRUE 41735
41733: GO 41761
41735: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41736: LD_ADDR_VAR 0 3
41740: PUSH
41741: LD_INT 11
41743: PUSH
41744: LD_INT 12
41746: PUSH
41747: LD_INT 13
41749: PUSH
41750: LD_INT 14
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: ST_TO_ADDR
41759: GO 42270
41761: LD_INT 25
41763: DOUBLE
41764: EQUAL
41765: IFTRUE 41769
41767: GO 41787
41769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41770: LD_ADDR_VAR 0 3
41774: PUSH
41775: LD_INT 13
41777: PUSH
41778: LD_INT 14
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: ST_TO_ADDR
41785: GO 42270
41787: LD_INT 27
41789: DOUBLE
41790: EQUAL
41791: IFTRUE 41795
41793: GO 41813
41795: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41796: LD_ADDR_VAR 0 3
41800: PUSH
41801: LD_INT 13
41803: PUSH
41804: LD_INT 14
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: ST_TO_ADDR
41811: GO 42270
41813: LD_EXP 48
41817: DOUBLE
41818: EQUAL
41819: IFTRUE 41823
41821: GO 41849
41823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41824: LD_ADDR_VAR 0 3
41828: PUSH
41829: LD_INT 11
41831: PUSH
41832: LD_INT 12
41834: PUSH
41835: LD_INT 13
41837: PUSH
41838: LD_INT 14
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: ST_TO_ADDR
41847: GO 42270
41849: LD_INT 28
41851: DOUBLE
41852: EQUAL
41853: IFTRUE 41857
41855: GO 41875
41857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41858: LD_ADDR_VAR 0 3
41862: PUSH
41863: LD_INT 13
41865: PUSH
41866: LD_INT 14
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: ST_TO_ADDR
41873: GO 42270
41875: LD_INT 29
41877: DOUBLE
41878: EQUAL
41879: IFTRUE 41883
41881: GO 41901
41883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41884: LD_ADDR_VAR 0 3
41888: PUSH
41889: LD_INT 13
41891: PUSH
41892: LD_INT 14
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: ST_TO_ADDR
41899: GO 42270
41901: LD_INT 31
41903: DOUBLE
41904: EQUAL
41905: IFTRUE 41909
41907: GO 41927
41909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41910: LD_ADDR_VAR 0 3
41914: PUSH
41915: LD_INT 13
41917: PUSH
41918: LD_INT 14
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: ST_TO_ADDR
41925: GO 42270
41927: LD_INT 26
41929: DOUBLE
41930: EQUAL
41931: IFTRUE 41935
41933: GO 41953
41935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41936: LD_ADDR_VAR 0 3
41940: PUSH
41941: LD_INT 13
41943: PUSH
41944: LD_INT 14
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: ST_TO_ADDR
41951: GO 42270
41953: LD_INT 42
41955: DOUBLE
41956: EQUAL
41957: IFTRUE 41961
41959: GO 41987
41961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41962: LD_ADDR_VAR 0 3
41966: PUSH
41967: LD_INT 21
41969: PUSH
41970: LD_INT 22
41972: PUSH
41973: LD_INT 23
41975: PUSH
41976: LD_INT 24
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: ST_TO_ADDR
41985: GO 42270
41987: LD_INT 43
41989: DOUBLE
41990: EQUAL
41991: IFTRUE 41995
41993: GO 42021
41995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41996: LD_ADDR_VAR 0 3
42000: PUSH
42001: LD_INT 21
42003: PUSH
42004: LD_INT 22
42006: PUSH
42007: LD_INT 23
42009: PUSH
42010: LD_INT 24
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: ST_TO_ADDR
42019: GO 42270
42021: LD_INT 44
42023: DOUBLE
42024: EQUAL
42025: IFTRUE 42029
42027: GO 42055
42029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42030: LD_ADDR_VAR 0 3
42034: PUSH
42035: LD_INT 21
42037: PUSH
42038: LD_INT 22
42040: PUSH
42041: LD_INT 23
42043: PUSH
42044: LD_INT 24
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: ST_TO_ADDR
42053: GO 42270
42055: LD_INT 45
42057: DOUBLE
42058: EQUAL
42059: IFTRUE 42063
42061: GO 42089
42063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42064: LD_ADDR_VAR 0 3
42068: PUSH
42069: LD_INT 21
42071: PUSH
42072: LD_INT 22
42074: PUSH
42075: LD_INT 23
42077: PUSH
42078: LD_INT 24
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: ST_TO_ADDR
42087: GO 42270
42089: LD_INT 49
42091: DOUBLE
42092: EQUAL
42093: IFTRUE 42097
42095: GO 42123
42097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42098: LD_ADDR_VAR 0 3
42102: PUSH
42103: LD_INT 21
42105: PUSH
42106: LD_INT 22
42108: PUSH
42109: LD_INT 23
42111: PUSH
42112: LD_INT 24
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: ST_TO_ADDR
42121: GO 42270
42123: LD_INT 51
42125: DOUBLE
42126: EQUAL
42127: IFTRUE 42131
42129: GO 42157
42131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42132: LD_ADDR_VAR 0 3
42136: PUSH
42137: LD_INT 21
42139: PUSH
42140: LD_INT 22
42142: PUSH
42143: LD_INT 23
42145: PUSH
42146: LD_INT 24
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
42155: GO 42270
42157: LD_INT 52
42159: DOUBLE
42160: EQUAL
42161: IFTRUE 42165
42163: GO 42191
42165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42166: LD_ADDR_VAR 0 3
42170: PUSH
42171: LD_INT 21
42173: PUSH
42174: LD_INT 22
42176: PUSH
42177: LD_INT 23
42179: PUSH
42180: LD_INT 24
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: ST_TO_ADDR
42189: GO 42270
42191: LD_INT 53
42193: DOUBLE
42194: EQUAL
42195: IFTRUE 42199
42197: GO 42217
42199: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42200: LD_ADDR_VAR 0 3
42204: PUSH
42205: LD_INT 23
42207: PUSH
42208: LD_INT 24
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: ST_TO_ADDR
42215: GO 42270
42217: LD_INT 46
42219: DOUBLE
42220: EQUAL
42221: IFTRUE 42225
42223: GO 42243
42225: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42226: LD_ADDR_VAR 0 3
42230: PUSH
42231: LD_INT 23
42233: PUSH
42234: LD_INT 24
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: ST_TO_ADDR
42241: GO 42270
42243: LD_INT 47
42245: DOUBLE
42246: EQUAL
42247: IFTRUE 42251
42249: GO 42269
42251: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42252: LD_ADDR_VAR 0 3
42256: PUSH
42257: LD_INT 23
42259: PUSH
42260: LD_INT 24
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: ST_TO_ADDR
42267: GO 42270
42269: POP
// result := ( chassis in result ) ;
42270: LD_ADDR_VAR 0 3
42274: PUSH
42275: LD_VAR 0 1
42279: PUSH
42280: LD_VAR 0 3
42284: IN
42285: ST_TO_ADDR
// end ;
42286: LD_VAR 0 3
42290: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42291: LD_INT 0
42293: PPUSH
42294: PPUSH
42295: PPUSH
42296: PPUSH
42297: PPUSH
42298: PPUSH
42299: PPUSH
// result := array ;
42300: LD_ADDR_VAR 0 5
42304: PUSH
42305: LD_VAR 0 1
42309: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42310: LD_VAR 0 1
42314: NOT
42315: PUSH
42316: LD_VAR 0 2
42320: NOT
42321: OR
42322: PUSH
42323: LD_VAR 0 3
42327: NOT
42328: OR
42329: PUSH
42330: LD_VAR 0 2
42334: PUSH
42335: LD_VAR 0 1
42339: GREATER
42340: OR
42341: PUSH
42342: LD_VAR 0 3
42346: PUSH
42347: LD_VAR 0 1
42351: GREATER
42352: OR
42353: IFFALSE 42357
// exit ;
42355: GO 42653
// if direction then
42357: LD_VAR 0 4
42361: IFFALSE 42425
// begin d := 1 ;
42363: LD_ADDR_VAR 0 9
42367: PUSH
42368: LD_INT 1
42370: ST_TO_ADDR
// if i_from > i_to then
42371: LD_VAR 0 2
42375: PUSH
42376: LD_VAR 0 3
42380: GREATER
42381: IFFALSE 42407
// length := ( array - i_from ) + i_to else
42383: LD_ADDR_VAR 0 11
42387: PUSH
42388: LD_VAR 0 1
42392: PUSH
42393: LD_VAR 0 2
42397: MINUS
42398: PUSH
42399: LD_VAR 0 3
42403: PLUS
42404: ST_TO_ADDR
42405: GO 42423
// length := i_to - i_from ;
42407: LD_ADDR_VAR 0 11
42411: PUSH
42412: LD_VAR 0 3
42416: PUSH
42417: LD_VAR 0 2
42421: MINUS
42422: ST_TO_ADDR
// end else
42423: GO 42486
// begin d := - 1 ;
42425: LD_ADDR_VAR 0 9
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: ST_TO_ADDR
// if i_from > i_to then
42434: LD_VAR 0 2
42438: PUSH
42439: LD_VAR 0 3
42443: GREATER
42444: IFFALSE 42464
// length := i_from - i_to else
42446: LD_ADDR_VAR 0 11
42450: PUSH
42451: LD_VAR 0 2
42455: PUSH
42456: LD_VAR 0 3
42460: MINUS
42461: ST_TO_ADDR
42462: GO 42486
// length := ( array - i_to ) + i_from ;
42464: LD_ADDR_VAR 0 11
42468: PUSH
42469: LD_VAR 0 1
42473: PUSH
42474: LD_VAR 0 3
42478: MINUS
42479: PUSH
42480: LD_VAR 0 2
42484: PLUS
42485: ST_TO_ADDR
// end ; if not length then
42486: LD_VAR 0 11
42490: NOT
42491: IFFALSE 42495
// exit ;
42493: GO 42653
// tmp := array ;
42495: LD_ADDR_VAR 0 10
42499: PUSH
42500: LD_VAR 0 1
42504: ST_TO_ADDR
// for i = 1 to length do
42505: LD_ADDR_VAR 0 6
42509: PUSH
42510: DOUBLE
42511: LD_INT 1
42513: DEC
42514: ST_TO_ADDR
42515: LD_VAR 0 11
42519: PUSH
42520: FOR_TO
42521: IFFALSE 42641
// begin for j = 1 to array do
42523: LD_ADDR_VAR 0 7
42527: PUSH
42528: DOUBLE
42529: LD_INT 1
42531: DEC
42532: ST_TO_ADDR
42533: LD_VAR 0 1
42537: PUSH
42538: FOR_TO
42539: IFFALSE 42627
// begin k := j + d ;
42541: LD_ADDR_VAR 0 8
42545: PUSH
42546: LD_VAR 0 7
42550: PUSH
42551: LD_VAR 0 9
42555: PLUS
42556: ST_TO_ADDR
// if k > array then
42557: LD_VAR 0 8
42561: PUSH
42562: LD_VAR 0 1
42566: GREATER
42567: IFFALSE 42577
// k := 1 ;
42569: LD_ADDR_VAR 0 8
42573: PUSH
42574: LD_INT 1
42576: ST_TO_ADDR
// if not k then
42577: LD_VAR 0 8
42581: NOT
42582: IFFALSE 42594
// k := array ;
42584: LD_ADDR_VAR 0 8
42588: PUSH
42589: LD_VAR 0 1
42593: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42594: LD_ADDR_VAR 0 10
42598: PUSH
42599: LD_VAR 0 10
42603: PPUSH
42604: LD_VAR 0 8
42608: PPUSH
42609: LD_VAR 0 1
42613: PUSH
42614: LD_VAR 0 7
42618: ARRAY
42619: PPUSH
42620: CALL_OW 1
42624: ST_TO_ADDR
// end ;
42625: GO 42538
42627: POP
42628: POP
// array := tmp ;
42629: LD_ADDR_VAR 0 1
42633: PUSH
42634: LD_VAR 0 10
42638: ST_TO_ADDR
// end ;
42639: GO 42520
42641: POP
42642: POP
// result := array ;
42643: LD_ADDR_VAR 0 5
42647: PUSH
42648: LD_VAR 0 1
42652: ST_TO_ADDR
// end ;
42653: LD_VAR 0 5
42657: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42658: LD_INT 0
42660: PPUSH
42661: PPUSH
// result := 0 ;
42662: LD_ADDR_VAR 0 3
42666: PUSH
42667: LD_INT 0
42669: ST_TO_ADDR
// if not array or not value in array then
42670: LD_VAR 0 1
42674: NOT
42675: PUSH
42676: LD_VAR 0 2
42680: PUSH
42681: LD_VAR 0 1
42685: IN
42686: NOT
42687: OR
42688: IFFALSE 42692
// exit ;
42690: GO 42746
// for i = 1 to array do
42692: LD_ADDR_VAR 0 4
42696: PUSH
42697: DOUBLE
42698: LD_INT 1
42700: DEC
42701: ST_TO_ADDR
42702: LD_VAR 0 1
42706: PUSH
42707: FOR_TO
42708: IFFALSE 42744
// if value = array [ i ] then
42710: LD_VAR 0 2
42714: PUSH
42715: LD_VAR 0 1
42719: PUSH
42720: LD_VAR 0 4
42724: ARRAY
42725: EQUAL
42726: IFFALSE 42742
// begin result := i ;
42728: LD_ADDR_VAR 0 3
42732: PUSH
42733: LD_VAR 0 4
42737: ST_TO_ADDR
// exit ;
42738: POP
42739: POP
42740: GO 42746
// end ;
42742: GO 42707
42744: POP
42745: POP
// end ;
42746: LD_VAR 0 3
42750: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42751: LD_INT 0
42753: PPUSH
// vc_chassis := chassis ;
42754: LD_ADDR_OWVAR 37
42758: PUSH
42759: LD_VAR 0 1
42763: ST_TO_ADDR
// vc_engine := engine ;
42764: LD_ADDR_OWVAR 39
42768: PUSH
42769: LD_VAR 0 2
42773: ST_TO_ADDR
// vc_control := control ;
42774: LD_ADDR_OWVAR 38
42778: PUSH
42779: LD_VAR 0 3
42783: ST_TO_ADDR
// vc_weapon := weapon ;
42784: LD_ADDR_OWVAR 40
42788: PUSH
42789: LD_VAR 0 4
42793: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42794: LD_ADDR_OWVAR 41
42798: PUSH
42799: LD_VAR 0 5
42803: ST_TO_ADDR
// end ;
42804: LD_VAR 0 6
42808: RET
// export function WantPlant ( unit ) ; var task ; begin
42809: LD_INT 0
42811: PPUSH
42812: PPUSH
// result := false ;
42813: LD_ADDR_VAR 0 2
42817: PUSH
42818: LD_INT 0
42820: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42821: LD_ADDR_VAR 0 3
42825: PUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: CALL_OW 437
42835: ST_TO_ADDR
// if task then
42836: LD_VAR 0 3
42840: IFFALSE 42868
// if task [ 1 ] [ 1 ] = p then
42842: LD_VAR 0 3
42846: PUSH
42847: LD_INT 1
42849: ARRAY
42850: PUSH
42851: LD_INT 1
42853: ARRAY
42854: PUSH
42855: LD_STRING p
42857: EQUAL
42858: IFFALSE 42868
// result := true ;
42860: LD_ADDR_VAR 0 2
42864: PUSH
42865: LD_INT 1
42867: ST_TO_ADDR
// end ;
42868: LD_VAR 0 2
42872: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42873: LD_INT 0
42875: PPUSH
42876: PPUSH
42877: PPUSH
42878: PPUSH
// if pos < 1 then
42879: LD_VAR 0 2
42883: PUSH
42884: LD_INT 1
42886: LESS
42887: IFFALSE 42891
// exit ;
42889: GO 43194
// if pos = 1 then
42891: LD_VAR 0 2
42895: PUSH
42896: LD_INT 1
42898: EQUAL
42899: IFFALSE 42932
// result := Replace ( arr , pos [ 1 ] , value ) else
42901: LD_ADDR_VAR 0 4
42905: PUSH
42906: LD_VAR 0 1
42910: PPUSH
42911: LD_VAR 0 2
42915: PUSH
42916: LD_INT 1
42918: ARRAY
42919: PPUSH
42920: LD_VAR 0 3
42924: PPUSH
42925: CALL_OW 1
42929: ST_TO_ADDR
42930: GO 43194
// begin tmp := arr ;
42932: LD_ADDR_VAR 0 6
42936: PUSH
42937: LD_VAR 0 1
42941: ST_TO_ADDR
// s_arr := [ tmp ] ;
42942: LD_ADDR_VAR 0 7
42946: PUSH
42947: LD_VAR 0 6
42951: PUSH
42952: EMPTY
42953: LIST
42954: ST_TO_ADDR
// for i = 1 to pos - 1 do
42955: LD_ADDR_VAR 0 5
42959: PUSH
42960: DOUBLE
42961: LD_INT 1
42963: DEC
42964: ST_TO_ADDR
42965: LD_VAR 0 2
42969: PUSH
42970: LD_INT 1
42972: MINUS
42973: PUSH
42974: FOR_TO
42975: IFFALSE 43020
// begin tmp := tmp [ pos [ i ] ] ;
42977: LD_ADDR_VAR 0 6
42981: PUSH
42982: LD_VAR 0 6
42986: PUSH
42987: LD_VAR 0 2
42991: PUSH
42992: LD_VAR 0 5
42996: ARRAY
42997: ARRAY
42998: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42999: LD_ADDR_VAR 0 7
43003: PUSH
43004: LD_VAR 0 7
43008: PUSH
43009: LD_VAR 0 6
43013: PUSH
43014: EMPTY
43015: LIST
43016: ADD
43017: ST_TO_ADDR
// end ;
43018: GO 42974
43020: POP
43021: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43022: LD_ADDR_VAR 0 6
43026: PUSH
43027: LD_VAR 0 6
43031: PPUSH
43032: LD_VAR 0 2
43036: PUSH
43037: LD_VAR 0 2
43041: ARRAY
43042: PPUSH
43043: LD_VAR 0 3
43047: PPUSH
43048: CALL_OW 1
43052: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43053: LD_ADDR_VAR 0 7
43057: PUSH
43058: LD_VAR 0 7
43062: PPUSH
43063: LD_VAR 0 7
43067: PPUSH
43068: LD_VAR 0 6
43072: PPUSH
43073: CALL_OW 1
43077: ST_TO_ADDR
// for i = s_arr downto 2 do
43078: LD_ADDR_VAR 0 5
43082: PUSH
43083: DOUBLE
43084: LD_VAR 0 7
43088: INC
43089: ST_TO_ADDR
43090: LD_INT 2
43092: PUSH
43093: FOR_DOWNTO
43094: IFFALSE 43178
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43096: LD_ADDR_VAR 0 6
43100: PUSH
43101: LD_VAR 0 7
43105: PUSH
43106: LD_VAR 0 5
43110: PUSH
43111: LD_INT 1
43113: MINUS
43114: ARRAY
43115: PPUSH
43116: LD_VAR 0 2
43120: PUSH
43121: LD_VAR 0 5
43125: PUSH
43126: LD_INT 1
43128: MINUS
43129: ARRAY
43130: PPUSH
43131: LD_VAR 0 7
43135: PUSH
43136: LD_VAR 0 5
43140: ARRAY
43141: PPUSH
43142: CALL_OW 1
43146: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43147: LD_ADDR_VAR 0 7
43151: PUSH
43152: LD_VAR 0 7
43156: PPUSH
43157: LD_VAR 0 5
43161: PUSH
43162: LD_INT 1
43164: MINUS
43165: PPUSH
43166: LD_VAR 0 6
43170: PPUSH
43171: CALL_OW 1
43175: ST_TO_ADDR
// end ;
43176: GO 43093
43178: POP
43179: POP
// result := s_arr [ 1 ] ;
43180: LD_ADDR_VAR 0 4
43184: PUSH
43185: LD_VAR 0 7
43189: PUSH
43190: LD_INT 1
43192: ARRAY
43193: ST_TO_ADDR
// end ; end ;
43194: LD_VAR 0 4
43198: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43199: LD_INT 0
43201: PPUSH
43202: PPUSH
// if not list then
43203: LD_VAR 0 1
43207: NOT
43208: IFFALSE 43212
// exit ;
43210: GO 43303
// i := list [ pos1 ] ;
43212: LD_ADDR_VAR 0 5
43216: PUSH
43217: LD_VAR 0 1
43221: PUSH
43222: LD_VAR 0 2
43226: ARRAY
43227: ST_TO_ADDR
// if not i then
43228: LD_VAR 0 5
43232: NOT
43233: IFFALSE 43237
// exit ;
43235: GO 43303
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43237: LD_ADDR_VAR 0 1
43241: PUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: LD_VAR 0 2
43251: PPUSH
43252: LD_VAR 0 1
43256: PUSH
43257: LD_VAR 0 3
43261: ARRAY
43262: PPUSH
43263: CALL_OW 1
43267: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43268: LD_ADDR_VAR 0 1
43272: PUSH
43273: LD_VAR 0 1
43277: PPUSH
43278: LD_VAR 0 3
43282: PPUSH
43283: LD_VAR 0 5
43287: PPUSH
43288: CALL_OW 1
43292: ST_TO_ADDR
// result := list ;
43293: LD_ADDR_VAR 0 4
43297: PUSH
43298: LD_VAR 0 1
43302: ST_TO_ADDR
// end ;
43303: LD_VAR 0 4
43307: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43308: LD_INT 0
43310: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43311: LD_ADDR_VAR 0 5
43315: PUSH
43316: LD_VAR 0 1
43320: PPUSH
43321: CALL_OW 250
43325: PPUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 251
43335: PPUSH
43336: LD_VAR 0 2
43340: PPUSH
43341: LD_VAR 0 3
43345: PPUSH
43346: LD_VAR 0 4
43350: PPUSH
43351: CALL 43361 0 5
43355: ST_TO_ADDR
// end ;
43356: LD_VAR 0 5
43360: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43361: LD_INT 0
43363: PPUSH
43364: PPUSH
43365: PPUSH
43366: PPUSH
// if not list then
43367: LD_VAR 0 3
43371: NOT
43372: IFFALSE 43376
// exit ;
43374: GO 43764
// result := [ ] ;
43376: LD_ADDR_VAR 0 6
43380: PUSH
43381: EMPTY
43382: ST_TO_ADDR
// for i in list do
43383: LD_ADDR_VAR 0 7
43387: PUSH
43388: LD_VAR 0 3
43392: PUSH
43393: FOR_IN
43394: IFFALSE 43596
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43396: LD_ADDR_VAR 0 9
43400: PUSH
43401: LD_VAR 0 7
43405: PPUSH
43406: LD_VAR 0 1
43410: PPUSH
43411: LD_VAR 0 2
43415: PPUSH
43416: CALL_OW 297
43420: ST_TO_ADDR
// if not result then
43421: LD_VAR 0 6
43425: NOT
43426: IFFALSE 43452
// result := [ [ i , tmp ] ] else
43428: LD_ADDR_VAR 0 6
43432: PUSH
43433: LD_VAR 0 7
43437: PUSH
43438: LD_VAR 0 9
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: ST_TO_ADDR
43450: GO 43594
// begin if result [ result ] [ 2 ] < tmp then
43452: LD_VAR 0 6
43456: PUSH
43457: LD_VAR 0 6
43461: ARRAY
43462: PUSH
43463: LD_INT 2
43465: ARRAY
43466: PUSH
43467: LD_VAR 0 9
43471: LESS
43472: IFFALSE 43514
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43474: LD_ADDR_VAR 0 6
43478: PUSH
43479: LD_VAR 0 6
43483: PPUSH
43484: LD_VAR 0 6
43488: PUSH
43489: LD_INT 1
43491: PLUS
43492: PPUSH
43493: LD_VAR 0 7
43497: PUSH
43498: LD_VAR 0 9
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PPUSH
43507: CALL_OW 2
43511: ST_TO_ADDR
43512: GO 43594
// for j = 1 to result do
43514: LD_ADDR_VAR 0 8
43518: PUSH
43519: DOUBLE
43520: LD_INT 1
43522: DEC
43523: ST_TO_ADDR
43524: LD_VAR 0 6
43528: PUSH
43529: FOR_TO
43530: IFFALSE 43592
// begin if tmp < result [ j ] [ 2 ] then
43532: LD_VAR 0 9
43536: PUSH
43537: LD_VAR 0 6
43541: PUSH
43542: LD_VAR 0 8
43546: ARRAY
43547: PUSH
43548: LD_INT 2
43550: ARRAY
43551: LESS
43552: IFFALSE 43590
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43554: LD_ADDR_VAR 0 6
43558: PUSH
43559: LD_VAR 0 6
43563: PPUSH
43564: LD_VAR 0 8
43568: PPUSH
43569: LD_VAR 0 7
43573: PUSH
43574: LD_VAR 0 9
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PPUSH
43583: CALL_OW 2
43587: ST_TO_ADDR
// break ;
43588: GO 43592
// end ; end ;
43590: GO 43529
43592: POP
43593: POP
// end ; end ;
43594: GO 43393
43596: POP
43597: POP
// if result and not asc then
43598: LD_VAR 0 6
43602: PUSH
43603: LD_VAR 0 4
43607: NOT
43608: AND
43609: IFFALSE 43684
// begin tmp := result ;
43611: LD_ADDR_VAR 0 9
43615: PUSH
43616: LD_VAR 0 6
43620: ST_TO_ADDR
// for i = tmp downto 1 do
43621: LD_ADDR_VAR 0 7
43625: PUSH
43626: DOUBLE
43627: LD_VAR 0 9
43631: INC
43632: ST_TO_ADDR
43633: LD_INT 1
43635: PUSH
43636: FOR_DOWNTO
43637: IFFALSE 43682
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43639: LD_ADDR_VAR 0 6
43643: PUSH
43644: LD_VAR 0 6
43648: PPUSH
43649: LD_VAR 0 9
43653: PUSH
43654: LD_VAR 0 7
43658: MINUS
43659: PUSH
43660: LD_INT 1
43662: PLUS
43663: PPUSH
43664: LD_VAR 0 9
43668: PUSH
43669: LD_VAR 0 7
43673: ARRAY
43674: PPUSH
43675: CALL_OW 1
43679: ST_TO_ADDR
43680: GO 43636
43682: POP
43683: POP
// end ; tmp := [ ] ;
43684: LD_ADDR_VAR 0 9
43688: PUSH
43689: EMPTY
43690: ST_TO_ADDR
// if mode then
43691: LD_VAR 0 5
43695: IFFALSE 43764
// begin for i = 1 to result do
43697: LD_ADDR_VAR 0 7
43701: PUSH
43702: DOUBLE
43703: LD_INT 1
43705: DEC
43706: ST_TO_ADDR
43707: LD_VAR 0 6
43711: PUSH
43712: FOR_TO
43713: IFFALSE 43752
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43715: LD_ADDR_VAR 0 9
43719: PUSH
43720: LD_VAR 0 9
43724: PPUSH
43725: LD_VAR 0 7
43729: PPUSH
43730: LD_VAR 0 6
43734: PUSH
43735: LD_VAR 0 7
43739: ARRAY
43740: PUSH
43741: LD_INT 1
43743: ARRAY
43744: PPUSH
43745: CALL_OW 1
43749: ST_TO_ADDR
43750: GO 43712
43752: POP
43753: POP
// result := tmp ;
43754: LD_ADDR_VAR 0 6
43758: PUSH
43759: LD_VAR 0 9
43763: ST_TO_ADDR
// end ; end ;
43764: LD_VAR 0 6
43768: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43769: LD_INT 0
43771: PPUSH
43772: PPUSH
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43777: LD_ADDR_VAR 0 5
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: ST_TO_ADDR
// if not x or not y then
43799: LD_VAR 0 2
43803: NOT
43804: PUSH
43805: LD_VAR 0 3
43809: NOT
43810: OR
43811: IFFALSE 43815
// exit ;
43813: GO 45467
// if not range then
43815: LD_VAR 0 4
43819: NOT
43820: IFFALSE 43830
// range := 10 ;
43822: LD_ADDR_VAR 0 4
43826: PUSH
43827: LD_INT 10
43829: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43830: LD_ADDR_VAR 0 8
43834: PUSH
43835: LD_INT 81
43837: PUSH
43838: LD_VAR 0 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 92
43849: PUSH
43850: LD_VAR 0 2
43854: PUSH
43855: LD_VAR 0 3
43859: PUSH
43860: LD_VAR 0 4
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: LD_INT 21
43876: PUSH
43877: LD_INT 3
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: LIST
43892: PPUSH
43893: CALL_OW 69
43897: ST_TO_ADDR
// if not tmp then
43898: LD_VAR 0 8
43902: NOT
43903: IFFALSE 43907
// exit ;
43905: GO 45467
// for i in tmp do
43907: LD_ADDR_VAR 0 6
43911: PUSH
43912: LD_VAR 0 8
43916: PUSH
43917: FOR_IN
43918: IFFALSE 45442
// begin points := [ 0 , 0 , 0 ] ;
43920: LD_ADDR_VAR 0 9
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
// bpoints := 1 ;
43939: LD_ADDR_VAR 0 10
43943: PUSH
43944: LD_INT 1
43946: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43947: LD_VAR 0 6
43951: PPUSH
43952: CALL_OW 247
43956: PUSH
43957: LD_INT 1
43959: DOUBLE
43960: EQUAL
43961: IFTRUE 43965
43963: GO 44543
43965: POP
// begin if GetClass ( i ) = 1 then
43966: LD_VAR 0 6
43970: PPUSH
43971: CALL_OW 257
43975: PUSH
43976: LD_INT 1
43978: EQUAL
43979: IFFALSE 44000
// points := [ 10 , 5 , 3 ] ;
43981: LD_ADDR_VAR 0 9
43985: PUSH
43986: LD_INT 10
43988: PUSH
43989: LD_INT 5
43991: PUSH
43992: LD_INT 3
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44000: LD_VAR 0 6
44004: PPUSH
44005: CALL_OW 257
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 3
44015: PUSH
44016: LD_INT 4
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: IN
44024: IFFALSE 44045
// points := [ 3 , 2 , 1 ] ;
44026: LD_ADDR_VAR 0 9
44030: PUSH
44031: LD_INT 3
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: LIST
44044: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44045: LD_VAR 0 6
44049: PPUSH
44050: CALL_OW 257
44054: PUSH
44055: LD_INT 5
44057: EQUAL
44058: IFFALSE 44079
// points := [ 130 , 5 , 2 ] ;
44060: LD_ADDR_VAR 0 9
44064: PUSH
44065: LD_INT 130
44067: PUSH
44068: LD_INT 5
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: LIST
44078: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44079: LD_VAR 0 6
44083: PPUSH
44084: CALL_OW 257
44088: PUSH
44089: LD_INT 8
44091: EQUAL
44092: IFFALSE 44113
// points := [ 35 , 35 , 30 ] ;
44094: LD_ADDR_VAR 0 9
44098: PUSH
44099: LD_INT 35
44101: PUSH
44102: LD_INT 35
44104: PUSH
44105: LD_INT 30
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44113: LD_VAR 0 6
44117: PPUSH
44118: CALL_OW 257
44122: PUSH
44123: LD_INT 9
44125: EQUAL
44126: IFFALSE 44147
// points := [ 20 , 55 , 40 ] ;
44128: LD_ADDR_VAR 0 9
44132: PUSH
44133: LD_INT 20
44135: PUSH
44136: LD_INT 55
44138: PUSH
44139: LD_INT 40
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44147: LD_VAR 0 6
44151: PPUSH
44152: CALL_OW 257
44156: PUSH
44157: LD_INT 12
44159: PUSH
44160: LD_INT 16
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: IN
44167: IFFALSE 44188
// points := [ 5 , 3 , 2 ] ;
44169: LD_ADDR_VAR 0 9
44173: PUSH
44174: LD_INT 5
44176: PUSH
44177: LD_INT 3
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44188: LD_VAR 0 6
44192: PPUSH
44193: CALL_OW 257
44197: PUSH
44198: LD_INT 17
44200: EQUAL
44201: IFFALSE 44222
// points := [ 100 , 50 , 75 ] ;
44203: LD_ADDR_VAR 0 9
44207: PUSH
44208: LD_INT 100
44210: PUSH
44211: LD_INT 50
44213: PUSH
44214: LD_INT 75
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44222: LD_VAR 0 6
44226: PPUSH
44227: CALL_OW 257
44231: PUSH
44232: LD_INT 15
44234: EQUAL
44235: IFFALSE 44256
// points := [ 10 , 5 , 3 ] ;
44237: LD_ADDR_VAR 0 9
44241: PUSH
44242: LD_INT 10
44244: PUSH
44245: LD_INT 5
44247: PUSH
44248: LD_INT 3
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: LIST
44255: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44256: LD_VAR 0 6
44260: PPUSH
44261: CALL_OW 257
44265: PUSH
44266: LD_INT 14
44268: EQUAL
44269: IFFALSE 44290
// points := [ 10 , 0 , 0 ] ;
44271: LD_ADDR_VAR 0 9
44275: PUSH
44276: LD_INT 10
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: LIST
44289: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44290: LD_VAR 0 6
44294: PPUSH
44295: CALL_OW 257
44299: PUSH
44300: LD_INT 11
44302: EQUAL
44303: IFFALSE 44324
// points := [ 30 , 10 , 5 ] ;
44305: LD_ADDR_VAR 0 9
44309: PUSH
44310: LD_INT 30
44312: PUSH
44313: LD_INT 10
44315: PUSH
44316: LD_INT 5
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44324: LD_VAR 0 1
44328: PPUSH
44329: LD_INT 5
44331: PPUSH
44332: CALL_OW 321
44336: PUSH
44337: LD_INT 2
44339: EQUAL
44340: IFFALSE 44357
// bpoints := bpoints * 1.8 ;
44342: LD_ADDR_VAR 0 10
44346: PUSH
44347: LD_VAR 0 10
44351: PUSH
44352: LD_REAL  1.80000000000000E+0000
44355: MUL
44356: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44357: LD_VAR 0 6
44361: PPUSH
44362: CALL_OW 257
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 3
44375: PUSH
44376: LD_INT 4
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: IN
44385: PUSH
44386: LD_VAR 0 1
44390: PPUSH
44391: LD_INT 51
44393: PPUSH
44394: CALL_OW 321
44398: PUSH
44399: LD_INT 2
44401: EQUAL
44402: AND
44403: IFFALSE 44420
// bpoints := bpoints * 1.2 ;
44405: LD_ADDR_VAR 0 10
44409: PUSH
44410: LD_VAR 0 10
44414: PUSH
44415: LD_REAL  1.20000000000000E+0000
44418: MUL
44419: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44420: LD_VAR 0 6
44424: PPUSH
44425: CALL_OW 257
44429: PUSH
44430: LD_INT 5
44432: PUSH
44433: LD_INT 7
44435: PUSH
44436: LD_INT 9
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: IN
44444: PUSH
44445: LD_VAR 0 1
44449: PPUSH
44450: LD_INT 52
44452: PPUSH
44453: CALL_OW 321
44457: PUSH
44458: LD_INT 2
44460: EQUAL
44461: AND
44462: IFFALSE 44479
// bpoints := bpoints * 1.5 ;
44464: LD_ADDR_VAR 0 10
44468: PUSH
44469: LD_VAR 0 10
44473: PUSH
44474: LD_REAL  1.50000000000000E+0000
44477: MUL
44478: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44479: LD_VAR 0 1
44483: PPUSH
44484: LD_INT 66
44486: PPUSH
44487: CALL_OW 321
44491: PUSH
44492: LD_INT 2
44494: EQUAL
44495: IFFALSE 44512
// bpoints := bpoints * 1.1 ;
44497: LD_ADDR_VAR 0 10
44501: PUSH
44502: LD_VAR 0 10
44506: PUSH
44507: LD_REAL  1.10000000000000E+0000
44510: MUL
44511: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44512: LD_ADDR_VAR 0 10
44516: PUSH
44517: LD_VAR 0 10
44521: PUSH
44522: LD_VAR 0 6
44526: PPUSH
44527: LD_INT 1
44529: PPUSH
44530: CALL_OW 259
44534: PUSH
44535: LD_REAL  1.15000000000000E+0000
44538: MUL
44539: MUL
44540: ST_TO_ADDR
// end ; unit_vehicle :
44541: GO 45371
44543: LD_INT 2
44545: DOUBLE
44546: EQUAL
44547: IFTRUE 44551
44549: GO 45359
44551: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44552: LD_VAR 0 6
44556: PPUSH
44557: CALL_OW 264
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: LD_INT 42
44567: PUSH
44568: LD_INT 24
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: LIST
44575: IN
44576: IFFALSE 44597
// points := [ 25 , 5 , 3 ] ;
44578: LD_ADDR_VAR 0 9
44582: PUSH
44583: LD_INT 25
44585: PUSH
44586: LD_INT 5
44588: PUSH
44589: LD_INT 3
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: LIST
44596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44597: LD_VAR 0 6
44601: PPUSH
44602: CALL_OW 264
44606: PUSH
44607: LD_INT 4
44609: PUSH
44610: LD_INT 43
44612: PUSH
44613: LD_INT 25
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: LIST
44620: IN
44621: IFFALSE 44642
// points := [ 40 , 15 , 5 ] ;
44623: LD_ADDR_VAR 0 9
44627: PUSH
44628: LD_INT 40
44630: PUSH
44631: LD_INT 15
44633: PUSH
44634: LD_INT 5
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44642: LD_VAR 0 6
44646: PPUSH
44647: CALL_OW 264
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: LD_INT 23
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: IN
44662: IFFALSE 44683
// points := [ 7 , 25 , 8 ] ;
44664: LD_ADDR_VAR 0 9
44668: PUSH
44669: LD_INT 7
44671: PUSH
44672: LD_INT 25
44674: PUSH
44675: LD_INT 8
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44683: LD_VAR 0 6
44687: PPUSH
44688: CALL_OW 264
44692: PUSH
44693: LD_INT 5
44695: PUSH
44696: LD_INT 27
44698: PUSH
44699: LD_INT 44
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: LIST
44706: IN
44707: IFFALSE 44728
// points := [ 14 , 50 , 16 ] ;
44709: LD_ADDR_VAR 0 9
44713: PUSH
44714: LD_INT 14
44716: PUSH
44717: LD_INT 50
44719: PUSH
44720: LD_INT 16
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44728: LD_VAR 0 6
44732: PPUSH
44733: CALL_OW 264
44737: PUSH
44738: LD_INT 6
44740: PUSH
44741: LD_INT 46
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: IN
44748: IFFALSE 44769
// points := [ 32 , 120 , 70 ] ;
44750: LD_ADDR_VAR 0 9
44754: PUSH
44755: LD_INT 32
44757: PUSH
44758: LD_INT 120
44760: PUSH
44761: LD_INT 70
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44769: LD_VAR 0 6
44773: PPUSH
44774: CALL_OW 264
44778: PUSH
44779: LD_INT 7
44781: PUSH
44782: LD_INT 28
44784: PUSH
44785: LD_INT 45
44787: PUSH
44788: LD_EXP 48
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: IN
44799: IFFALSE 44820
// points := [ 35 , 20 , 45 ] ;
44801: LD_ADDR_VAR 0 9
44805: PUSH
44806: LD_INT 35
44808: PUSH
44809: LD_INT 20
44811: PUSH
44812: LD_INT 45
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44820: LD_VAR 0 6
44824: PPUSH
44825: CALL_OW 264
44829: PUSH
44830: LD_INT 47
44832: PUSH
44833: EMPTY
44834: LIST
44835: IN
44836: IFFALSE 44857
// points := [ 67 , 45 , 75 ] ;
44838: LD_ADDR_VAR 0 9
44842: PUSH
44843: LD_INT 67
44845: PUSH
44846: LD_INT 45
44848: PUSH
44849: LD_INT 75
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44857: LD_VAR 0 6
44861: PPUSH
44862: CALL_OW 264
44866: PUSH
44867: LD_INT 26
44869: PUSH
44870: EMPTY
44871: LIST
44872: IN
44873: IFFALSE 44894
// points := [ 120 , 30 , 80 ] ;
44875: LD_ADDR_VAR 0 9
44879: PUSH
44880: LD_INT 120
44882: PUSH
44883: LD_INT 30
44885: PUSH
44886: LD_INT 80
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44894: LD_VAR 0 6
44898: PPUSH
44899: CALL_OW 264
44903: PUSH
44904: LD_INT 22
44906: PUSH
44907: EMPTY
44908: LIST
44909: IN
44910: IFFALSE 44931
// points := [ 40 , 1 , 1 ] ;
44912: LD_ADDR_VAR 0 9
44916: PUSH
44917: LD_INT 40
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: LIST
44930: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44931: LD_VAR 0 6
44935: PPUSH
44936: CALL_OW 264
44940: PUSH
44941: LD_INT 29
44943: PUSH
44944: EMPTY
44945: LIST
44946: IN
44947: IFFALSE 44968
// points := [ 70 , 200 , 400 ] ;
44949: LD_ADDR_VAR 0 9
44953: PUSH
44954: LD_INT 70
44956: PUSH
44957: LD_INT 200
44959: PUSH
44960: LD_INT 400
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44968: LD_VAR 0 6
44972: PPUSH
44973: CALL_OW 264
44977: PUSH
44978: LD_INT 14
44980: PUSH
44981: LD_INT 53
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: IN
44988: IFFALSE 45009
// points := [ 40 , 10 , 20 ] ;
44990: LD_ADDR_VAR 0 9
44994: PUSH
44995: LD_INT 40
44997: PUSH
44998: LD_INT 10
45000: PUSH
45001: LD_INT 20
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45009: LD_VAR 0 6
45013: PPUSH
45014: CALL_OW 264
45018: PUSH
45019: LD_INT 9
45021: PUSH
45022: EMPTY
45023: LIST
45024: IN
45025: IFFALSE 45046
// points := [ 5 , 70 , 20 ] ;
45027: LD_ADDR_VAR 0 9
45031: PUSH
45032: LD_INT 5
45034: PUSH
45035: LD_INT 70
45037: PUSH
45038: LD_INT 20
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: LIST
45045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45046: LD_VAR 0 6
45050: PPUSH
45051: CALL_OW 264
45055: PUSH
45056: LD_INT 10
45058: PUSH
45059: EMPTY
45060: LIST
45061: IN
45062: IFFALSE 45083
// points := [ 35 , 110 , 70 ] ;
45064: LD_ADDR_VAR 0 9
45068: PUSH
45069: LD_INT 35
45071: PUSH
45072: LD_INT 110
45074: PUSH
45075: LD_INT 70
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: LIST
45082: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45083: LD_VAR 0 6
45087: PPUSH
45088: CALL_OW 265
45092: PUSH
45093: LD_INT 25
45095: EQUAL
45096: IFFALSE 45117
// points := [ 80 , 65 , 100 ] ;
45098: LD_ADDR_VAR 0 9
45102: PUSH
45103: LD_INT 80
45105: PUSH
45106: LD_INT 65
45108: PUSH
45109: LD_INT 100
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: LIST
45116: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45117: LD_VAR 0 6
45121: PPUSH
45122: CALL_OW 263
45126: PUSH
45127: LD_INT 1
45129: EQUAL
45130: IFFALSE 45165
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45132: LD_ADDR_VAR 0 10
45136: PUSH
45137: LD_VAR 0 10
45141: PUSH
45142: LD_VAR 0 6
45146: PPUSH
45147: CALL_OW 311
45151: PPUSH
45152: LD_INT 3
45154: PPUSH
45155: CALL_OW 259
45159: PUSH
45160: LD_INT 4
45162: MUL
45163: MUL
45164: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45165: LD_VAR 0 6
45169: PPUSH
45170: CALL_OW 263
45174: PUSH
45175: LD_INT 2
45177: EQUAL
45178: IFFALSE 45229
// begin j := IsControledBy ( i ) ;
45180: LD_ADDR_VAR 0 7
45184: PUSH
45185: LD_VAR 0 6
45189: PPUSH
45190: CALL_OW 312
45194: ST_TO_ADDR
// if j then
45195: LD_VAR 0 7
45199: IFFALSE 45229
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45201: LD_ADDR_VAR 0 10
45205: PUSH
45206: LD_VAR 0 10
45210: PUSH
45211: LD_VAR 0 7
45215: PPUSH
45216: LD_INT 3
45218: PPUSH
45219: CALL_OW 259
45223: PUSH
45224: LD_INT 3
45226: MUL
45227: MUL
45228: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45229: LD_VAR 0 6
45233: PPUSH
45234: CALL_OW 264
45238: PUSH
45239: LD_INT 5
45241: PUSH
45242: LD_INT 6
45244: PUSH
45245: LD_INT 46
45247: PUSH
45248: LD_INT 44
45250: PUSH
45251: LD_INT 47
45253: PUSH
45254: LD_INT 45
45256: PUSH
45257: LD_INT 28
45259: PUSH
45260: LD_INT 7
45262: PUSH
45263: LD_INT 27
45265: PUSH
45266: LD_INT 29
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: IN
45281: PUSH
45282: LD_VAR 0 1
45286: PPUSH
45287: LD_INT 52
45289: PPUSH
45290: CALL_OW 321
45294: PUSH
45295: LD_INT 2
45297: EQUAL
45298: AND
45299: IFFALSE 45316
// bpoints := bpoints * 1.2 ;
45301: LD_ADDR_VAR 0 10
45305: PUSH
45306: LD_VAR 0 10
45310: PUSH
45311: LD_REAL  1.20000000000000E+0000
45314: MUL
45315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45316: LD_VAR 0 6
45320: PPUSH
45321: CALL_OW 264
45325: PUSH
45326: LD_INT 6
45328: PUSH
45329: LD_INT 46
45331: PUSH
45332: LD_INT 47
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: IN
45340: IFFALSE 45357
// bpoints := bpoints * 1.2 ;
45342: LD_ADDR_VAR 0 10
45346: PUSH
45347: LD_VAR 0 10
45351: PUSH
45352: LD_REAL  1.20000000000000E+0000
45355: MUL
45356: ST_TO_ADDR
// end ; unit_building :
45357: GO 45371
45359: LD_INT 3
45361: DOUBLE
45362: EQUAL
45363: IFTRUE 45367
45365: GO 45370
45367: POP
// ; end ;
45368: GO 45371
45370: POP
// for j = 1 to 3 do
45371: LD_ADDR_VAR 0 7
45375: PUSH
45376: DOUBLE
45377: LD_INT 1
45379: DEC
45380: ST_TO_ADDR
45381: LD_INT 3
45383: PUSH
45384: FOR_TO
45385: IFFALSE 45438
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45387: LD_ADDR_VAR 0 5
45391: PUSH
45392: LD_VAR 0 5
45396: PPUSH
45397: LD_VAR 0 7
45401: PPUSH
45402: LD_VAR 0 5
45406: PUSH
45407: LD_VAR 0 7
45411: ARRAY
45412: PUSH
45413: LD_VAR 0 9
45417: PUSH
45418: LD_VAR 0 7
45422: ARRAY
45423: PUSH
45424: LD_VAR 0 10
45428: MUL
45429: PLUS
45430: PPUSH
45431: CALL_OW 1
45435: ST_TO_ADDR
45436: GO 45384
45438: POP
45439: POP
// end ;
45440: GO 43917
45442: POP
45443: POP
// result := Replace ( result , 4 , tmp ) ;
45444: LD_ADDR_VAR 0 5
45448: PUSH
45449: LD_VAR 0 5
45453: PPUSH
45454: LD_INT 4
45456: PPUSH
45457: LD_VAR 0 8
45461: PPUSH
45462: CALL_OW 1
45466: ST_TO_ADDR
// end ;
45467: LD_VAR 0 5
45471: RET
// export function DangerAtRange ( unit , range ) ; begin
45472: LD_INT 0
45474: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45475: LD_ADDR_VAR 0 3
45479: PUSH
45480: LD_VAR 0 1
45484: PPUSH
45485: CALL_OW 255
45489: PPUSH
45490: LD_VAR 0 1
45494: PPUSH
45495: CALL_OW 250
45499: PPUSH
45500: LD_VAR 0 1
45504: PPUSH
45505: CALL_OW 251
45509: PPUSH
45510: LD_VAR 0 2
45514: PPUSH
45515: CALL 43769 0 4
45519: ST_TO_ADDR
// end ;
45520: LD_VAR 0 3
45524: RET
// export function DangerInArea ( side , area ) ; begin
45525: LD_INT 0
45527: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45528: LD_ADDR_VAR 0 3
45532: PUSH
45533: LD_VAR 0 2
45537: PPUSH
45538: LD_INT 81
45540: PUSH
45541: LD_VAR 0 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PPUSH
45550: CALL_OW 70
45554: ST_TO_ADDR
// end ;
45555: LD_VAR 0 3
45559: RET
// export function IsExtension ( b ) ; begin
45560: LD_INT 0
45562: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45563: LD_ADDR_VAR 0 2
45567: PUSH
45568: LD_VAR 0 1
45572: PUSH
45573: LD_INT 23
45575: PUSH
45576: LD_INT 20
45578: PUSH
45579: LD_INT 22
45581: PUSH
45582: LD_INT 17
45584: PUSH
45585: LD_INT 24
45587: PUSH
45588: LD_INT 21
45590: PUSH
45591: LD_INT 19
45593: PUSH
45594: LD_INT 16
45596: PUSH
45597: LD_INT 25
45599: PUSH
45600: LD_INT 18
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: IN
45615: ST_TO_ADDR
// end ;
45616: LD_VAR 0 2
45620: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45621: LD_INT 0
45623: PPUSH
45624: PPUSH
45625: PPUSH
// result := [ ] ;
45626: LD_ADDR_VAR 0 4
45630: PUSH
45631: EMPTY
45632: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45633: LD_ADDR_VAR 0 5
45637: PUSH
45638: LD_VAR 0 2
45642: PPUSH
45643: LD_INT 21
45645: PUSH
45646: LD_INT 3
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PPUSH
45653: CALL_OW 70
45657: ST_TO_ADDR
// if not tmp then
45658: LD_VAR 0 5
45662: NOT
45663: IFFALSE 45667
// exit ;
45665: GO 45731
// if checkLink then
45667: LD_VAR 0 3
45671: IFFALSE 45721
// begin for i in tmp do
45673: LD_ADDR_VAR 0 6
45677: PUSH
45678: LD_VAR 0 5
45682: PUSH
45683: FOR_IN
45684: IFFALSE 45719
// if GetBase ( i ) <> base then
45686: LD_VAR 0 6
45690: PPUSH
45691: CALL_OW 274
45695: PUSH
45696: LD_VAR 0 1
45700: NONEQUAL
45701: IFFALSE 45717
// ComLinkToBase ( base , i ) ;
45703: LD_VAR 0 1
45707: PPUSH
45708: LD_VAR 0 6
45712: PPUSH
45713: CALL_OW 169
45717: GO 45683
45719: POP
45720: POP
// end ; result := tmp ;
45721: LD_ADDR_VAR 0 4
45725: PUSH
45726: LD_VAR 0 5
45730: ST_TO_ADDR
// end ;
45731: LD_VAR 0 4
45735: RET
// export function ComComplete ( units , b ) ; var i ; begin
45736: LD_INT 0
45738: PPUSH
45739: PPUSH
// if not units then
45740: LD_VAR 0 1
45744: NOT
45745: IFFALSE 45749
// exit ;
45747: GO 45839
// for i in units do
45749: LD_ADDR_VAR 0 4
45753: PUSH
45754: LD_VAR 0 1
45758: PUSH
45759: FOR_IN
45760: IFFALSE 45837
// if BuildingStatus ( b ) = bs_build then
45762: LD_VAR 0 2
45766: PPUSH
45767: CALL_OW 461
45771: PUSH
45772: LD_INT 1
45774: EQUAL
45775: IFFALSE 45835
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45777: LD_VAR 0 4
45781: PPUSH
45782: LD_STRING h
45784: PUSH
45785: LD_VAR 0 2
45789: PPUSH
45790: CALL_OW 250
45794: PUSH
45795: LD_VAR 0 2
45799: PPUSH
45800: CALL_OW 251
45804: PUSH
45805: LD_VAR 0 2
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: PPUSH
45831: CALL_OW 446
45835: GO 45759
45837: POP
45838: POP
// end ;
45839: LD_VAR 0 3
45843: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45844: LD_INT 0
45846: PPUSH
45847: PPUSH
45848: PPUSH
45849: PPUSH
45850: PPUSH
45851: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45852: LD_VAR 0 1
45856: NOT
45857: PUSH
45858: LD_VAR 0 1
45862: PPUSH
45863: CALL_OW 263
45867: PUSH
45868: LD_INT 2
45870: NONEQUAL
45871: OR
45872: IFFALSE 45876
// exit ;
45874: GO 46192
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45876: LD_ADDR_VAR 0 6
45880: PUSH
45881: LD_INT 22
45883: PUSH
45884: LD_VAR 0 1
45888: PPUSH
45889: CALL_OW 255
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 30
45903: PUSH
45904: LD_INT 36
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 34
45913: PUSH
45914: LD_INT 31
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PPUSH
45930: CALL_OW 69
45934: ST_TO_ADDR
// if not tmp then
45935: LD_VAR 0 6
45939: NOT
45940: IFFALSE 45944
// exit ;
45942: GO 46192
// result := [ ] ;
45944: LD_ADDR_VAR 0 2
45948: PUSH
45949: EMPTY
45950: ST_TO_ADDR
// for i in tmp do
45951: LD_ADDR_VAR 0 3
45955: PUSH
45956: LD_VAR 0 6
45960: PUSH
45961: FOR_IN
45962: IFFALSE 46033
// begin t := UnitsInside ( i ) ;
45964: LD_ADDR_VAR 0 4
45968: PUSH
45969: LD_VAR 0 3
45973: PPUSH
45974: CALL_OW 313
45978: ST_TO_ADDR
// if t then
45979: LD_VAR 0 4
45983: IFFALSE 46031
// for j in t do
45985: LD_ADDR_VAR 0 7
45989: PUSH
45990: LD_VAR 0 4
45994: PUSH
45995: FOR_IN
45996: IFFALSE 46029
// result := Replace ( result , result + 1 , j ) ;
45998: LD_ADDR_VAR 0 2
46002: PUSH
46003: LD_VAR 0 2
46007: PPUSH
46008: LD_VAR 0 2
46012: PUSH
46013: LD_INT 1
46015: PLUS
46016: PPUSH
46017: LD_VAR 0 7
46021: PPUSH
46022: CALL_OW 1
46026: ST_TO_ADDR
46027: GO 45995
46029: POP
46030: POP
// end ;
46031: GO 45961
46033: POP
46034: POP
// if not result then
46035: LD_VAR 0 2
46039: NOT
46040: IFFALSE 46044
// exit ;
46042: GO 46192
// mech := result [ 1 ] ;
46044: LD_ADDR_VAR 0 5
46048: PUSH
46049: LD_VAR 0 2
46053: PUSH
46054: LD_INT 1
46056: ARRAY
46057: ST_TO_ADDR
// if result > 1 then
46058: LD_VAR 0 2
46062: PUSH
46063: LD_INT 1
46065: GREATER
46066: IFFALSE 46178
// begin for i = 2 to result do
46068: LD_ADDR_VAR 0 3
46072: PUSH
46073: DOUBLE
46074: LD_INT 2
46076: DEC
46077: ST_TO_ADDR
46078: LD_VAR 0 2
46082: PUSH
46083: FOR_TO
46084: IFFALSE 46176
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46086: LD_ADDR_VAR 0 4
46090: PUSH
46091: LD_VAR 0 2
46095: PUSH
46096: LD_VAR 0 3
46100: ARRAY
46101: PPUSH
46102: LD_INT 3
46104: PPUSH
46105: CALL_OW 259
46109: PUSH
46110: LD_VAR 0 2
46114: PUSH
46115: LD_VAR 0 3
46119: ARRAY
46120: PPUSH
46121: CALL_OW 432
46125: MINUS
46126: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46127: LD_VAR 0 4
46131: PUSH
46132: LD_VAR 0 5
46136: PPUSH
46137: LD_INT 3
46139: PPUSH
46140: CALL_OW 259
46144: PUSH
46145: LD_VAR 0 5
46149: PPUSH
46150: CALL_OW 432
46154: MINUS
46155: GREATEREQUAL
46156: IFFALSE 46174
// mech := result [ i ] ;
46158: LD_ADDR_VAR 0 5
46162: PUSH
46163: LD_VAR 0 2
46167: PUSH
46168: LD_VAR 0 3
46172: ARRAY
46173: ST_TO_ADDR
// end ;
46174: GO 46083
46176: POP
46177: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46178: LD_VAR 0 1
46182: PPUSH
46183: LD_VAR 0 5
46187: PPUSH
46188: CALL_OW 135
// end ;
46192: LD_VAR 0 2
46196: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46197: LD_INT 0
46199: PPUSH
46200: PPUSH
46201: PPUSH
46202: PPUSH
46203: PPUSH
46204: PPUSH
46205: PPUSH
46206: PPUSH
46207: PPUSH
46208: PPUSH
46209: PPUSH
46210: PPUSH
46211: PPUSH
// result := [ ] ;
46212: LD_ADDR_VAR 0 7
46216: PUSH
46217: EMPTY
46218: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46219: LD_VAR 0 1
46223: PPUSH
46224: CALL_OW 266
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: IN
46239: NOT
46240: IFFALSE 46244
// exit ;
46242: GO 47878
// if name then
46244: LD_VAR 0 3
46248: IFFALSE 46264
// SetBName ( base_dep , name ) ;
46250: LD_VAR 0 1
46254: PPUSH
46255: LD_VAR 0 3
46259: PPUSH
46260: CALL_OW 500
// base := GetBase ( base_dep ) ;
46264: LD_ADDR_VAR 0 15
46268: PUSH
46269: LD_VAR 0 1
46273: PPUSH
46274: CALL_OW 274
46278: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46279: LD_ADDR_VAR 0 16
46283: PUSH
46284: LD_VAR 0 1
46288: PPUSH
46289: CALL_OW 255
46293: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46294: LD_ADDR_VAR 0 17
46298: PUSH
46299: LD_VAR 0 1
46303: PPUSH
46304: CALL_OW 248
46308: ST_TO_ADDR
// if sources then
46309: LD_VAR 0 5
46313: IFFALSE 46360
// for i = 1 to 3 do
46315: LD_ADDR_VAR 0 8
46319: PUSH
46320: DOUBLE
46321: LD_INT 1
46323: DEC
46324: ST_TO_ADDR
46325: LD_INT 3
46327: PUSH
46328: FOR_TO
46329: IFFALSE 46358
// AddResourceType ( base , i , sources [ i ] ) ;
46331: LD_VAR 0 15
46335: PPUSH
46336: LD_VAR 0 8
46340: PPUSH
46341: LD_VAR 0 5
46345: PUSH
46346: LD_VAR 0 8
46350: ARRAY
46351: PPUSH
46352: CALL_OW 276
46356: GO 46328
46358: POP
46359: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46360: LD_ADDR_VAR 0 18
46364: PUSH
46365: LD_VAR 0 15
46369: PPUSH
46370: LD_VAR 0 2
46374: PPUSH
46375: LD_INT 1
46377: PPUSH
46378: CALL 45621 0 3
46382: ST_TO_ADDR
// InitHc ;
46383: CALL_OW 19
// InitUc ;
46387: CALL_OW 18
// uc_side := side ;
46391: LD_ADDR_OWVAR 20
46395: PUSH
46396: LD_VAR 0 16
46400: ST_TO_ADDR
// uc_nation := nation ;
46401: LD_ADDR_OWVAR 21
46405: PUSH
46406: LD_VAR 0 17
46410: ST_TO_ADDR
// if buildings then
46411: LD_VAR 0 18
46415: IFFALSE 47737
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46417: LD_ADDR_VAR 0 19
46421: PUSH
46422: LD_VAR 0 18
46426: PPUSH
46427: LD_INT 2
46429: PUSH
46430: LD_INT 30
46432: PUSH
46433: LD_INT 29
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 30
46442: PUSH
46443: LD_INT 30
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: PPUSH
46455: CALL_OW 72
46459: ST_TO_ADDR
// if tmp then
46460: LD_VAR 0 19
46464: IFFALSE 46512
// for i in tmp do
46466: LD_ADDR_VAR 0 8
46470: PUSH
46471: LD_VAR 0 19
46475: PUSH
46476: FOR_IN
46477: IFFALSE 46510
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46479: LD_VAR 0 8
46483: PPUSH
46484: CALL_OW 250
46488: PPUSH
46489: LD_VAR 0 8
46493: PPUSH
46494: CALL_OW 251
46498: PPUSH
46499: LD_VAR 0 16
46503: PPUSH
46504: CALL_OW 441
46508: GO 46476
46510: POP
46511: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46512: LD_VAR 0 18
46516: PPUSH
46517: LD_INT 2
46519: PUSH
46520: LD_INT 30
46522: PUSH
46523: LD_INT 32
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 30
46532: PUSH
46533: LD_INT 33
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: PPUSH
46545: CALL_OW 72
46549: IFFALSE 46637
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46551: LD_ADDR_VAR 0 8
46555: PUSH
46556: LD_VAR 0 18
46560: PPUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 30
46566: PUSH
46567: LD_INT 32
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 30
46576: PUSH
46577: LD_INT 33
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: LIST
46588: PPUSH
46589: CALL_OW 72
46593: PUSH
46594: FOR_IN
46595: IFFALSE 46635
// begin if not GetBWeapon ( i ) then
46597: LD_VAR 0 8
46601: PPUSH
46602: CALL_OW 269
46606: NOT
46607: IFFALSE 46633
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46609: LD_VAR 0 8
46613: PPUSH
46614: LD_VAR 0 8
46618: PPUSH
46619: LD_VAR 0 2
46623: PPUSH
46624: CALL 47883 0 2
46628: PPUSH
46629: CALL_OW 431
// end ;
46633: GO 46594
46635: POP
46636: POP
// end ; for i = 1 to personel do
46637: LD_ADDR_VAR 0 8
46641: PUSH
46642: DOUBLE
46643: LD_INT 1
46645: DEC
46646: ST_TO_ADDR
46647: LD_VAR 0 6
46651: PUSH
46652: FOR_TO
46653: IFFALSE 47717
// begin if i > 4 then
46655: LD_VAR 0 8
46659: PUSH
46660: LD_INT 4
46662: GREATER
46663: IFFALSE 46667
// break ;
46665: GO 47717
// case i of 1 :
46667: LD_VAR 0 8
46671: PUSH
46672: LD_INT 1
46674: DOUBLE
46675: EQUAL
46676: IFTRUE 46680
46678: GO 46760
46680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46681: LD_ADDR_VAR 0 12
46685: PUSH
46686: LD_VAR 0 18
46690: PPUSH
46691: LD_INT 22
46693: PUSH
46694: LD_VAR 0 16
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 58
46705: PUSH
46706: EMPTY
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: LD_INT 30
46714: PUSH
46715: LD_INT 32
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 30
46724: PUSH
46725: LD_INT 4
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 30
46734: PUSH
46735: LD_INT 5
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: LIST
46752: PPUSH
46753: CALL_OW 72
46757: ST_TO_ADDR
46758: GO 46982
46760: LD_INT 2
46762: DOUBLE
46763: EQUAL
46764: IFTRUE 46768
46766: GO 46830
46768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46769: LD_ADDR_VAR 0 12
46773: PUSH
46774: LD_VAR 0 18
46778: PPUSH
46779: LD_INT 22
46781: PUSH
46782: LD_VAR 0 16
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 30
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 30
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PPUSH
46823: CALL_OW 72
46827: ST_TO_ADDR
46828: GO 46982
46830: LD_INT 3
46832: DOUBLE
46833: EQUAL
46834: IFTRUE 46838
46836: GO 46900
46838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46839: LD_ADDR_VAR 0 12
46843: PUSH
46844: LD_VAR 0 18
46848: PPUSH
46849: LD_INT 22
46851: PUSH
46852: LD_VAR 0 16
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 30
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 30
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PPUSH
46893: CALL_OW 72
46897: ST_TO_ADDR
46898: GO 46982
46900: LD_INT 4
46902: DOUBLE
46903: EQUAL
46904: IFTRUE 46908
46906: GO 46981
46908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46909: LD_ADDR_VAR 0 12
46913: PUSH
46914: LD_VAR 0 18
46918: PPUSH
46919: LD_INT 22
46921: PUSH
46922: LD_VAR 0 16
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 30
46936: PUSH
46937: LD_INT 6
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 30
46946: PUSH
46947: LD_INT 7
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 30
46956: PUSH
46957: LD_INT 8
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PPUSH
46974: CALL_OW 72
46978: ST_TO_ADDR
46979: GO 46982
46981: POP
// if i = 1 then
46982: LD_VAR 0 8
46986: PUSH
46987: LD_INT 1
46989: EQUAL
46990: IFFALSE 47101
// begin tmp := [ ] ;
46992: LD_ADDR_VAR 0 19
46996: PUSH
46997: EMPTY
46998: ST_TO_ADDR
// for j in f do
46999: LD_ADDR_VAR 0 9
47003: PUSH
47004: LD_VAR 0 12
47008: PUSH
47009: FOR_IN
47010: IFFALSE 47083
// if GetBType ( j ) = b_bunker then
47012: LD_VAR 0 9
47016: PPUSH
47017: CALL_OW 266
47021: PUSH
47022: LD_INT 32
47024: EQUAL
47025: IFFALSE 47052
// tmp := Insert ( tmp , 1 , j ) else
47027: LD_ADDR_VAR 0 19
47031: PUSH
47032: LD_VAR 0 19
47036: PPUSH
47037: LD_INT 1
47039: PPUSH
47040: LD_VAR 0 9
47044: PPUSH
47045: CALL_OW 2
47049: ST_TO_ADDR
47050: GO 47081
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47052: LD_ADDR_VAR 0 19
47056: PUSH
47057: LD_VAR 0 19
47061: PPUSH
47062: LD_VAR 0 19
47066: PUSH
47067: LD_INT 1
47069: PLUS
47070: PPUSH
47071: LD_VAR 0 9
47075: PPUSH
47076: CALL_OW 2
47080: ST_TO_ADDR
47081: GO 47009
47083: POP
47084: POP
// if tmp then
47085: LD_VAR 0 19
47089: IFFALSE 47101
// f := tmp ;
47091: LD_ADDR_VAR 0 12
47095: PUSH
47096: LD_VAR 0 19
47100: ST_TO_ADDR
// end ; x := personel [ i ] ;
47101: LD_ADDR_VAR 0 13
47105: PUSH
47106: LD_VAR 0 6
47110: PUSH
47111: LD_VAR 0 8
47115: ARRAY
47116: ST_TO_ADDR
// if x = - 1 then
47117: LD_VAR 0 13
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: EQUAL
47126: IFFALSE 47335
// begin for j in f do
47128: LD_ADDR_VAR 0 9
47132: PUSH
47133: LD_VAR 0 12
47137: PUSH
47138: FOR_IN
47139: IFFALSE 47331
// repeat InitHc ;
47141: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47145: LD_VAR 0 9
47149: PPUSH
47150: CALL_OW 266
47154: PUSH
47155: LD_INT 5
47157: EQUAL
47158: IFFALSE 47228
// begin if UnitsInside ( j ) < 3 then
47160: LD_VAR 0 9
47164: PPUSH
47165: CALL_OW 313
47169: PUSH
47170: LD_INT 3
47172: LESS
47173: IFFALSE 47209
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47175: LD_INT 0
47177: PPUSH
47178: LD_INT 5
47180: PUSH
47181: LD_INT 8
47183: PUSH
47184: LD_INT 9
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: LIST
47191: PUSH
47192: LD_VAR 0 17
47196: ARRAY
47197: PPUSH
47198: LD_VAR 0 4
47202: PPUSH
47203: CALL_OW 380
47207: GO 47226
// PrepareHuman ( false , i , skill ) ;
47209: LD_INT 0
47211: PPUSH
47212: LD_VAR 0 8
47216: PPUSH
47217: LD_VAR 0 4
47221: PPUSH
47222: CALL_OW 380
// end else
47226: GO 47245
// PrepareHuman ( false , i , skill ) ;
47228: LD_INT 0
47230: PPUSH
47231: LD_VAR 0 8
47235: PPUSH
47236: LD_VAR 0 4
47240: PPUSH
47241: CALL_OW 380
// un := CreateHuman ;
47245: LD_ADDR_VAR 0 14
47249: PUSH
47250: CALL_OW 44
47254: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47255: LD_ADDR_VAR 0 7
47259: PUSH
47260: LD_VAR 0 7
47264: PPUSH
47265: LD_INT 1
47267: PPUSH
47268: LD_VAR 0 14
47272: PPUSH
47273: CALL_OW 2
47277: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47278: LD_VAR 0 14
47282: PPUSH
47283: LD_VAR 0 9
47287: PPUSH
47288: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47292: LD_VAR 0 9
47296: PPUSH
47297: CALL_OW 313
47301: PUSH
47302: LD_INT 6
47304: EQUAL
47305: PUSH
47306: LD_VAR 0 9
47310: PPUSH
47311: CALL_OW 266
47315: PUSH
47316: LD_INT 32
47318: PUSH
47319: LD_INT 31
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: IN
47326: OR
47327: IFFALSE 47141
47329: GO 47138
47331: POP
47332: POP
// end else
47333: GO 47715
// for j = 1 to x do
47335: LD_ADDR_VAR 0 9
47339: PUSH
47340: DOUBLE
47341: LD_INT 1
47343: DEC
47344: ST_TO_ADDR
47345: LD_VAR 0 13
47349: PUSH
47350: FOR_TO
47351: IFFALSE 47713
// begin InitHc ;
47353: CALL_OW 19
// if not f then
47357: LD_VAR 0 12
47361: NOT
47362: IFFALSE 47451
// begin PrepareHuman ( false , i , skill ) ;
47364: LD_INT 0
47366: PPUSH
47367: LD_VAR 0 8
47371: PPUSH
47372: LD_VAR 0 4
47376: PPUSH
47377: CALL_OW 380
// un := CreateHuman ;
47381: LD_ADDR_VAR 0 14
47385: PUSH
47386: CALL_OW 44
47390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47391: LD_ADDR_VAR 0 7
47395: PUSH
47396: LD_VAR 0 7
47400: PPUSH
47401: LD_INT 1
47403: PPUSH
47404: LD_VAR 0 14
47408: PPUSH
47409: CALL_OW 2
47413: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47414: LD_VAR 0 14
47418: PPUSH
47419: LD_VAR 0 1
47423: PPUSH
47424: CALL_OW 250
47428: PPUSH
47429: LD_VAR 0 1
47433: PPUSH
47434: CALL_OW 251
47438: PPUSH
47439: LD_INT 10
47441: PPUSH
47442: LD_INT 0
47444: PPUSH
47445: CALL_OW 50
// continue ;
47449: GO 47350
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47451: LD_VAR 0 12
47455: PUSH
47456: LD_INT 1
47458: ARRAY
47459: PPUSH
47460: CALL_OW 313
47464: PUSH
47465: LD_VAR 0 12
47469: PUSH
47470: LD_INT 1
47472: ARRAY
47473: PPUSH
47474: CALL_OW 266
47478: PUSH
47479: LD_INT 32
47481: PUSH
47482: LD_INT 31
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: IN
47489: AND
47490: PUSH
47491: LD_VAR 0 12
47495: PUSH
47496: LD_INT 1
47498: ARRAY
47499: PPUSH
47500: CALL_OW 313
47504: PUSH
47505: LD_INT 6
47507: EQUAL
47508: OR
47509: IFFALSE 47529
// f := Delete ( f , 1 ) ;
47511: LD_ADDR_VAR 0 12
47515: PUSH
47516: LD_VAR 0 12
47520: PPUSH
47521: LD_INT 1
47523: PPUSH
47524: CALL_OW 3
47528: ST_TO_ADDR
// if not f then
47529: LD_VAR 0 12
47533: NOT
47534: IFFALSE 47552
// begin x := x + 2 ;
47536: LD_ADDR_VAR 0 13
47540: PUSH
47541: LD_VAR 0 13
47545: PUSH
47546: LD_INT 2
47548: PLUS
47549: ST_TO_ADDR
// continue ;
47550: GO 47350
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47552: LD_VAR 0 12
47556: PUSH
47557: LD_INT 1
47559: ARRAY
47560: PPUSH
47561: CALL_OW 266
47565: PUSH
47566: LD_INT 5
47568: EQUAL
47569: IFFALSE 47643
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47571: LD_VAR 0 12
47575: PUSH
47576: LD_INT 1
47578: ARRAY
47579: PPUSH
47580: CALL_OW 313
47584: PUSH
47585: LD_INT 3
47587: LESS
47588: IFFALSE 47624
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47590: LD_INT 0
47592: PPUSH
47593: LD_INT 5
47595: PUSH
47596: LD_INT 8
47598: PUSH
47599: LD_INT 9
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: PUSH
47607: LD_VAR 0 17
47611: ARRAY
47612: PPUSH
47613: LD_VAR 0 4
47617: PPUSH
47618: CALL_OW 380
47622: GO 47641
// PrepareHuman ( false , i , skill ) ;
47624: LD_INT 0
47626: PPUSH
47627: LD_VAR 0 8
47631: PPUSH
47632: LD_VAR 0 4
47636: PPUSH
47637: CALL_OW 380
// end else
47641: GO 47660
// PrepareHuman ( false , i , skill ) ;
47643: LD_INT 0
47645: PPUSH
47646: LD_VAR 0 8
47650: PPUSH
47651: LD_VAR 0 4
47655: PPUSH
47656: CALL_OW 380
// un := CreateHuman ;
47660: LD_ADDR_VAR 0 14
47664: PUSH
47665: CALL_OW 44
47669: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47670: LD_ADDR_VAR 0 7
47674: PUSH
47675: LD_VAR 0 7
47679: PPUSH
47680: LD_INT 1
47682: PPUSH
47683: LD_VAR 0 14
47687: PPUSH
47688: CALL_OW 2
47692: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47693: LD_VAR 0 14
47697: PPUSH
47698: LD_VAR 0 12
47702: PUSH
47703: LD_INT 1
47705: ARRAY
47706: PPUSH
47707: CALL_OW 52
// end ;
47711: GO 47350
47713: POP
47714: POP
// end ;
47715: GO 46652
47717: POP
47718: POP
// result := result ^ buildings ;
47719: LD_ADDR_VAR 0 7
47723: PUSH
47724: LD_VAR 0 7
47728: PUSH
47729: LD_VAR 0 18
47733: ADD
47734: ST_TO_ADDR
// end else
47735: GO 47878
// begin for i = 1 to personel do
47737: LD_ADDR_VAR 0 8
47741: PUSH
47742: DOUBLE
47743: LD_INT 1
47745: DEC
47746: ST_TO_ADDR
47747: LD_VAR 0 6
47751: PUSH
47752: FOR_TO
47753: IFFALSE 47876
// begin if i > 4 then
47755: LD_VAR 0 8
47759: PUSH
47760: LD_INT 4
47762: GREATER
47763: IFFALSE 47767
// break ;
47765: GO 47876
// x := personel [ i ] ;
47767: LD_ADDR_VAR 0 13
47771: PUSH
47772: LD_VAR 0 6
47776: PUSH
47777: LD_VAR 0 8
47781: ARRAY
47782: ST_TO_ADDR
// if x = - 1 then
47783: LD_VAR 0 13
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: EQUAL
47792: IFFALSE 47796
// continue ;
47794: GO 47752
// PrepareHuman ( false , i , skill ) ;
47796: LD_INT 0
47798: PPUSH
47799: LD_VAR 0 8
47803: PPUSH
47804: LD_VAR 0 4
47808: PPUSH
47809: CALL_OW 380
// un := CreateHuman ;
47813: LD_ADDR_VAR 0 14
47817: PUSH
47818: CALL_OW 44
47822: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47823: LD_VAR 0 14
47827: PPUSH
47828: LD_VAR 0 1
47832: PPUSH
47833: CALL_OW 250
47837: PPUSH
47838: LD_VAR 0 1
47842: PPUSH
47843: CALL_OW 251
47847: PPUSH
47848: LD_INT 10
47850: PPUSH
47851: LD_INT 0
47853: PPUSH
47854: CALL_OW 50
// result := result ^ un ;
47858: LD_ADDR_VAR 0 7
47862: PUSH
47863: LD_VAR 0 7
47867: PUSH
47868: LD_VAR 0 14
47872: ADD
47873: ST_TO_ADDR
// end ;
47874: GO 47752
47876: POP
47877: POP
// end ; end ;
47878: LD_VAR 0 7
47882: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47883: LD_INT 0
47885: PPUSH
47886: PPUSH
47887: PPUSH
47888: PPUSH
47889: PPUSH
47890: PPUSH
47891: PPUSH
47892: PPUSH
47893: PPUSH
47894: PPUSH
47895: PPUSH
47896: PPUSH
47897: PPUSH
47898: PPUSH
47899: PPUSH
47900: PPUSH
// result := false ;
47901: LD_ADDR_VAR 0 3
47905: PUSH
47906: LD_INT 0
47908: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47909: LD_VAR 0 1
47913: NOT
47914: PUSH
47915: LD_VAR 0 1
47919: PPUSH
47920: CALL_OW 266
47924: PUSH
47925: LD_INT 32
47927: PUSH
47928: LD_INT 33
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: IN
47935: NOT
47936: OR
47937: IFFALSE 47941
// exit ;
47939: GO 49050
// nat := GetNation ( tower ) ;
47941: LD_ADDR_VAR 0 12
47945: PUSH
47946: LD_VAR 0 1
47950: PPUSH
47951: CALL_OW 248
47955: ST_TO_ADDR
// side := GetSide ( tower ) ;
47956: LD_ADDR_VAR 0 16
47960: PUSH
47961: LD_VAR 0 1
47965: PPUSH
47966: CALL_OW 255
47970: ST_TO_ADDR
// x := GetX ( tower ) ;
47971: LD_ADDR_VAR 0 10
47975: PUSH
47976: LD_VAR 0 1
47980: PPUSH
47981: CALL_OW 250
47985: ST_TO_ADDR
// y := GetY ( tower ) ;
47986: LD_ADDR_VAR 0 11
47990: PUSH
47991: LD_VAR 0 1
47995: PPUSH
47996: CALL_OW 251
48000: ST_TO_ADDR
// if not x or not y then
48001: LD_VAR 0 10
48005: NOT
48006: PUSH
48007: LD_VAR 0 11
48011: NOT
48012: OR
48013: IFFALSE 48017
// exit ;
48015: GO 49050
// weapon := 0 ;
48017: LD_ADDR_VAR 0 18
48021: PUSH
48022: LD_INT 0
48024: ST_TO_ADDR
// fac_list := [ ] ;
48025: LD_ADDR_VAR 0 17
48029: PUSH
48030: EMPTY
48031: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48032: LD_ADDR_VAR 0 6
48036: PUSH
48037: LD_VAR 0 1
48041: PPUSH
48042: CALL_OW 274
48046: PPUSH
48047: LD_VAR 0 2
48051: PPUSH
48052: LD_INT 0
48054: PPUSH
48055: CALL 45621 0 3
48059: PPUSH
48060: LD_INT 30
48062: PUSH
48063: LD_INT 3
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PPUSH
48070: CALL_OW 72
48074: ST_TO_ADDR
// if not factories then
48075: LD_VAR 0 6
48079: NOT
48080: IFFALSE 48084
// exit ;
48082: GO 49050
// for i in factories do
48084: LD_ADDR_VAR 0 8
48088: PUSH
48089: LD_VAR 0 6
48093: PUSH
48094: FOR_IN
48095: IFFALSE 48120
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48097: LD_ADDR_VAR 0 17
48101: PUSH
48102: LD_VAR 0 17
48106: PUSH
48107: LD_VAR 0 8
48111: PPUSH
48112: CALL_OW 478
48116: UNION
48117: ST_TO_ADDR
48118: GO 48094
48120: POP
48121: POP
// if not fac_list then
48122: LD_VAR 0 17
48126: NOT
48127: IFFALSE 48131
// exit ;
48129: GO 49050
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48131: LD_ADDR_VAR 0 5
48135: PUSH
48136: LD_INT 4
48138: PUSH
48139: LD_INT 5
48141: PUSH
48142: LD_INT 9
48144: PUSH
48145: LD_INT 10
48147: PUSH
48148: LD_INT 6
48150: PUSH
48151: LD_INT 7
48153: PUSH
48154: LD_INT 11
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 27
48168: PUSH
48169: LD_INT 28
48171: PUSH
48172: LD_INT 26
48174: PUSH
48175: LD_INT 30
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 43
48186: PUSH
48187: LD_INT 44
48189: PUSH
48190: LD_INT 46
48192: PUSH
48193: LD_INT 45
48195: PUSH
48196: LD_INT 47
48198: PUSH
48199: LD_INT 49
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: LIST
48214: PUSH
48215: LD_VAR 0 12
48219: ARRAY
48220: ST_TO_ADDR
// list := list isect fac_list ;
48221: LD_ADDR_VAR 0 5
48225: PUSH
48226: LD_VAR 0 5
48230: PUSH
48231: LD_VAR 0 17
48235: ISECT
48236: ST_TO_ADDR
// if not list then
48237: LD_VAR 0 5
48241: NOT
48242: IFFALSE 48246
// exit ;
48244: GO 49050
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48246: LD_VAR 0 12
48250: PUSH
48251: LD_INT 3
48253: EQUAL
48254: PUSH
48255: LD_INT 49
48257: PUSH
48258: LD_VAR 0 5
48262: IN
48263: AND
48264: PUSH
48265: LD_INT 31
48267: PPUSH
48268: LD_VAR 0 16
48272: PPUSH
48273: CALL_OW 321
48277: PUSH
48278: LD_INT 2
48280: EQUAL
48281: AND
48282: IFFALSE 48342
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48284: LD_INT 22
48286: PUSH
48287: LD_VAR 0 16
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 35
48298: PUSH
48299: LD_INT 49
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 91
48308: PUSH
48309: LD_VAR 0 1
48313: PUSH
48314: LD_INT 10
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: PPUSH
48327: CALL_OW 69
48331: NOT
48332: IFFALSE 48342
// weapon := ru_time_lapser ;
48334: LD_ADDR_VAR 0 18
48338: PUSH
48339: LD_INT 49
48341: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48342: LD_VAR 0 12
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: IN
48357: PUSH
48358: LD_INT 11
48360: PUSH
48361: LD_VAR 0 5
48365: IN
48366: PUSH
48367: LD_INT 30
48369: PUSH
48370: LD_VAR 0 5
48374: IN
48375: OR
48376: AND
48377: PUSH
48378: LD_INT 6
48380: PPUSH
48381: LD_VAR 0 16
48385: PPUSH
48386: CALL_OW 321
48390: PUSH
48391: LD_INT 2
48393: EQUAL
48394: AND
48395: IFFALSE 48560
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48397: LD_INT 22
48399: PUSH
48400: LD_VAR 0 16
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: LD_INT 35
48414: PUSH
48415: LD_INT 11
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 35
48424: PUSH
48425: LD_INT 30
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 91
48439: PUSH
48440: LD_VAR 0 1
48444: PUSH
48445: LD_INT 18
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: PPUSH
48458: CALL_OW 69
48462: NOT
48463: PUSH
48464: LD_INT 22
48466: PUSH
48467: LD_VAR 0 16
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 30
48481: PUSH
48482: LD_INT 32
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 30
48491: PUSH
48492: LD_INT 33
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 91
48506: PUSH
48507: LD_VAR 0 1
48511: PUSH
48512: LD_INT 12
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: LIST
48524: PUSH
48525: EMPTY
48526: LIST
48527: PPUSH
48528: CALL_OW 69
48532: PUSH
48533: LD_INT 2
48535: GREATER
48536: AND
48537: IFFALSE 48560
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48539: LD_ADDR_VAR 0 18
48543: PUSH
48544: LD_INT 11
48546: PUSH
48547: LD_INT 30
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_VAR 0 12
48558: ARRAY
48559: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48560: LD_VAR 0 18
48564: NOT
48565: PUSH
48566: LD_INT 40
48568: PPUSH
48569: LD_VAR 0 16
48573: PPUSH
48574: CALL_OW 321
48578: PUSH
48579: LD_INT 2
48581: EQUAL
48582: AND
48583: PUSH
48584: LD_INT 7
48586: PUSH
48587: LD_VAR 0 5
48591: IN
48592: PUSH
48593: LD_INT 28
48595: PUSH
48596: LD_VAR 0 5
48600: IN
48601: OR
48602: PUSH
48603: LD_INT 45
48605: PUSH
48606: LD_VAR 0 5
48610: IN
48611: OR
48612: AND
48613: IFFALSE 48867
// begin hex := GetHexInfo ( x , y ) ;
48615: LD_ADDR_VAR 0 4
48619: PUSH
48620: LD_VAR 0 10
48624: PPUSH
48625: LD_VAR 0 11
48629: PPUSH
48630: CALL_OW 546
48634: ST_TO_ADDR
// if hex [ 1 ] then
48635: LD_VAR 0 4
48639: PUSH
48640: LD_INT 1
48642: ARRAY
48643: IFFALSE 48647
// exit ;
48645: GO 49050
// height := hex [ 2 ] ;
48647: LD_ADDR_VAR 0 15
48651: PUSH
48652: LD_VAR 0 4
48656: PUSH
48657: LD_INT 2
48659: ARRAY
48660: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48661: LD_ADDR_VAR 0 14
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 3
48674: PUSH
48675: LD_INT 5
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: ST_TO_ADDR
// for i in tmp do
48684: LD_ADDR_VAR 0 8
48688: PUSH
48689: LD_VAR 0 14
48693: PUSH
48694: FOR_IN
48695: IFFALSE 48865
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48697: LD_ADDR_VAR 0 9
48701: PUSH
48702: LD_VAR 0 10
48706: PPUSH
48707: LD_VAR 0 8
48711: PPUSH
48712: LD_INT 5
48714: PPUSH
48715: CALL_OW 272
48719: PUSH
48720: LD_VAR 0 11
48724: PPUSH
48725: LD_VAR 0 8
48729: PPUSH
48730: LD_INT 5
48732: PPUSH
48733: CALL_OW 273
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48742: LD_VAR 0 9
48746: PUSH
48747: LD_INT 1
48749: ARRAY
48750: PPUSH
48751: LD_VAR 0 9
48755: PUSH
48756: LD_INT 2
48758: ARRAY
48759: PPUSH
48760: CALL_OW 488
48764: IFFALSE 48863
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48766: LD_ADDR_VAR 0 4
48770: PUSH
48771: LD_VAR 0 9
48775: PUSH
48776: LD_INT 1
48778: ARRAY
48779: PPUSH
48780: LD_VAR 0 9
48784: PUSH
48785: LD_INT 2
48787: ARRAY
48788: PPUSH
48789: CALL_OW 546
48793: ST_TO_ADDR
// if hex [ 1 ] then
48794: LD_VAR 0 4
48798: PUSH
48799: LD_INT 1
48801: ARRAY
48802: IFFALSE 48806
// continue ;
48804: GO 48694
// h := hex [ 2 ] ;
48806: LD_ADDR_VAR 0 13
48810: PUSH
48811: LD_VAR 0 4
48815: PUSH
48816: LD_INT 2
48818: ARRAY
48819: ST_TO_ADDR
// if h + 7 < height then
48820: LD_VAR 0 13
48824: PUSH
48825: LD_INT 7
48827: PLUS
48828: PUSH
48829: LD_VAR 0 15
48833: LESS
48834: IFFALSE 48863
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48836: LD_ADDR_VAR 0 18
48840: PUSH
48841: LD_INT 7
48843: PUSH
48844: LD_INT 28
48846: PUSH
48847: LD_INT 45
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: PUSH
48855: LD_VAR 0 12
48859: ARRAY
48860: ST_TO_ADDR
// break ;
48861: GO 48865
// end ; end ; end ;
48863: GO 48694
48865: POP
48866: POP
// end ; if not weapon then
48867: LD_VAR 0 18
48871: NOT
48872: IFFALSE 48932
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48874: LD_ADDR_VAR 0 5
48878: PUSH
48879: LD_VAR 0 5
48883: PUSH
48884: LD_INT 11
48886: PUSH
48887: LD_INT 30
48889: PUSH
48890: LD_INT 49
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: LIST
48897: DIFF
48898: ST_TO_ADDR
// if not list then
48899: LD_VAR 0 5
48903: NOT
48904: IFFALSE 48908
// exit ;
48906: GO 49050
// weapon := list [ rand ( 1 , list ) ] ;
48908: LD_ADDR_VAR 0 18
48912: PUSH
48913: LD_VAR 0 5
48917: PUSH
48918: LD_INT 1
48920: PPUSH
48921: LD_VAR 0 5
48925: PPUSH
48926: CALL_OW 12
48930: ARRAY
48931: ST_TO_ADDR
// end ; if weapon then
48932: LD_VAR 0 18
48936: IFFALSE 49050
// begin tmp := CostOfWeapon ( weapon ) ;
48938: LD_ADDR_VAR 0 14
48942: PUSH
48943: LD_VAR 0 18
48947: PPUSH
48948: CALL_OW 451
48952: ST_TO_ADDR
// j := GetBase ( tower ) ;
48953: LD_ADDR_VAR 0 9
48957: PUSH
48958: LD_VAR 0 1
48962: PPUSH
48963: CALL_OW 274
48967: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48968: LD_VAR 0 9
48972: PPUSH
48973: LD_INT 1
48975: PPUSH
48976: CALL_OW 275
48980: PUSH
48981: LD_VAR 0 14
48985: PUSH
48986: LD_INT 1
48988: ARRAY
48989: GREATEREQUAL
48990: PUSH
48991: LD_VAR 0 9
48995: PPUSH
48996: LD_INT 2
48998: PPUSH
48999: CALL_OW 275
49003: PUSH
49004: LD_VAR 0 14
49008: PUSH
49009: LD_INT 2
49011: ARRAY
49012: GREATEREQUAL
49013: AND
49014: PUSH
49015: LD_VAR 0 9
49019: PPUSH
49020: LD_INT 3
49022: PPUSH
49023: CALL_OW 275
49027: PUSH
49028: LD_VAR 0 14
49032: PUSH
49033: LD_INT 3
49035: ARRAY
49036: GREATEREQUAL
49037: AND
49038: IFFALSE 49050
// result := weapon ;
49040: LD_ADDR_VAR 0 3
49044: PUSH
49045: LD_VAR 0 18
49049: ST_TO_ADDR
// end ; end ;
49050: LD_VAR 0 3
49054: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49055: LD_INT 0
49057: PPUSH
49058: PPUSH
// result := true ;
49059: LD_ADDR_VAR 0 3
49063: PUSH
49064: LD_INT 1
49066: ST_TO_ADDR
// if array1 = array2 then
49067: LD_VAR 0 1
49071: PUSH
49072: LD_VAR 0 2
49076: EQUAL
49077: IFFALSE 49137
// begin for i = 1 to array1 do
49079: LD_ADDR_VAR 0 4
49083: PUSH
49084: DOUBLE
49085: LD_INT 1
49087: DEC
49088: ST_TO_ADDR
49089: LD_VAR 0 1
49093: PUSH
49094: FOR_TO
49095: IFFALSE 49133
// if array1 [ i ] <> array2 [ i ] then
49097: LD_VAR 0 1
49101: PUSH
49102: LD_VAR 0 4
49106: ARRAY
49107: PUSH
49108: LD_VAR 0 2
49112: PUSH
49113: LD_VAR 0 4
49117: ARRAY
49118: NONEQUAL
49119: IFFALSE 49131
// begin result := false ;
49121: LD_ADDR_VAR 0 3
49125: PUSH
49126: LD_INT 0
49128: ST_TO_ADDR
// break ;
49129: GO 49133
// end ;
49131: GO 49094
49133: POP
49134: POP
// end else
49135: GO 49145
// result := false ;
49137: LD_ADDR_VAR 0 3
49141: PUSH
49142: LD_INT 0
49144: ST_TO_ADDR
// end ;
49145: LD_VAR 0 3
49149: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49150: LD_INT 0
49152: PPUSH
49153: PPUSH
// if not array1 or not array2 then
49154: LD_VAR 0 1
49158: NOT
49159: PUSH
49160: LD_VAR 0 2
49164: NOT
49165: OR
49166: IFFALSE 49170
// exit ;
49168: GO 49234
// result := true ;
49170: LD_ADDR_VAR 0 3
49174: PUSH
49175: LD_INT 1
49177: ST_TO_ADDR
// for i = 1 to array1 do
49178: LD_ADDR_VAR 0 4
49182: PUSH
49183: DOUBLE
49184: LD_INT 1
49186: DEC
49187: ST_TO_ADDR
49188: LD_VAR 0 1
49192: PUSH
49193: FOR_TO
49194: IFFALSE 49232
// if array1 [ i ] <> array2 [ i ] then
49196: LD_VAR 0 1
49200: PUSH
49201: LD_VAR 0 4
49205: ARRAY
49206: PUSH
49207: LD_VAR 0 2
49211: PUSH
49212: LD_VAR 0 4
49216: ARRAY
49217: NONEQUAL
49218: IFFALSE 49230
// begin result := false ;
49220: LD_ADDR_VAR 0 3
49224: PUSH
49225: LD_INT 0
49227: ST_TO_ADDR
// break ;
49228: GO 49232
// end ;
49230: GO 49193
49232: POP
49233: POP
// end ;
49234: LD_VAR 0 3
49238: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49239: LD_INT 0
49241: PPUSH
49242: PPUSH
49243: PPUSH
// pom := GetBase ( fac ) ;
49244: LD_ADDR_VAR 0 5
49248: PUSH
49249: LD_VAR 0 1
49253: PPUSH
49254: CALL_OW 274
49258: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49259: LD_ADDR_VAR 0 4
49263: PUSH
49264: LD_VAR 0 2
49268: PUSH
49269: LD_INT 1
49271: ARRAY
49272: PPUSH
49273: LD_VAR 0 2
49277: PUSH
49278: LD_INT 2
49280: ARRAY
49281: PPUSH
49282: LD_VAR 0 2
49286: PUSH
49287: LD_INT 3
49289: ARRAY
49290: PPUSH
49291: LD_VAR 0 2
49295: PUSH
49296: LD_INT 4
49298: ARRAY
49299: PPUSH
49300: CALL_OW 449
49304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49305: LD_ADDR_VAR 0 3
49309: PUSH
49310: LD_VAR 0 5
49314: PPUSH
49315: LD_INT 1
49317: PPUSH
49318: CALL_OW 275
49322: PUSH
49323: LD_VAR 0 4
49327: PUSH
49328: LD_INT 1
49330: ARRAY
49331: GREATEREQUAL
49332: PUSH
49333: LD_VAR 0 5
49337: PPUSH
49338: LD_INT 2
49340: PPUSH
49341: CALL_OW 275
49345: PUSH
49346: LD_VAR 0 4
49350: PUSH
49351: LD_INT 2
49353: ARRAY
49354: GREATEREQUAL
49355: AND
49356: PUSH
49357: LD_VAR 0 5
49361: PPUSH
49362: LD_INT 3
49364: PPUSH
49365: CALL_OW 275
49369: PUSH
49370: LD_VAR 0 4
49374: PUSH
49375: LD_INT 3
49377: ARRAY
49378: GREATEREQUAL
49379: AND
49380: ST_TO_ADDR
// end ;
49381: LD_VAR 0 3
49385: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49386: LD_INT 0
49388: PPUSH
49389: PPUSH
49390: PPUSH
49391: PPUSH
// pom := GetBase ( building ) ;
49392: LD_ADDR_VAR 0 3
49396: PUSH
49397: LD_VAR 0 1
49401: PPUSH
49402: CALL_OW 274
49406: ST_TO_ADDR
// if not pom then
49407: LD_VAR 0 3
49411: NOT
49412: IFFALSE 49416
// exit ;
49414: GO 49586
// btype := GetBType ( building ) ;
49416: LD_ADDR_VAR 0 5
49420: PUSH
49421: LD_VAR 0 1
49425: PPUSH
49426: CALL_OW 266
49430: ST_TO_ADDR
// if btype = b_armoury then
49431: LD_VAR 0 5
49435: PUSH
49436: LD_INT 4
49438: EQUAL
49439: IFFALSE 49449
// btype := b_barracks ;
49441: LD_ADDR_VAR 0 5
49445: PUSH
49446: LD_INT 5
49448: ST_TO_ADDR
// if btype = b_depot then
49449: LD_VAR 0 5
49453: PUSH
49454: LD_INT 0
49456: EQUAL
49457: IFFALSE 49467
// btype := b_warehouse ;
49459: LD_ADDR_VAR 0 5
49463: PUSH
49464: LD_INT 1
49466: ST_TO_ADDR
// if btype = b_workshop then
49467: LD_VAR 0 5
49471: PUSH
49472: LD_INT 2
49474: EQUAL
49475: IFFALSE 49485
// btype := b_factory ;
49477: LD_ADDR_VAR 0 5
49481: PUSH
49482: LD_INT 3
49484: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49485: LD_ADDR_VAR 0 4
49489: PUSH
49490: LD_VAR 0 5
49494: PPUSH
49495: LD_VAR 0 1
49499: PPUSH
49500: CALL_OW 248
49504: PPUSH
49505: CALL_OW 450
49509: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49510: LD_ADDR_VAR 0 2
49514: PUSH
49515: LD_VAR 0 3
49519: PPUSH
49520: LD_INT 1
49522: PPUSH
49523: CALL_OW 275
49527: PUSH
49528: LD_VAR 0 4
49532: PUSH
49533: LD_INT 1
49535: ARRAY
49536: GREATEREQUAL
49537: PUSH
49538: LD_VAR 0 3
49542: PPUSH
49543: LD_INT 2
49545: PPUSH
49546: CALL_OW 275
49550: PUSH
49551: LD_VAR 0 4
49555: PUSH
49556: LD_INT 2
49558: ARRAY
49559: GREATEREQUAL
49560: AND
49561: PUSH
49562: LD_VAR 0 3
49566: PPUSH
49567: LD_INT 3
49569: PPUSH
49570: CALL_OW 275
49574: PUSH
49575: LD_VAR 0 4
49579: PUSH
49580: LD_INT 3
49582: ARRAY
49583: GREATEREQUAL
49584: AND
49585: ST_TO_ADDR
// end ;
49586: LD_VAR 0 2
49590: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49591: LD_INT 0
49593: PPUSH
49594: PPUSH
49595: PPUSH
// pom := GetBase ( building ) ;
49596: LD_ADDR_VAR 0 4
49600: PUSH
49601: LD_VAR 0 1
49605: PPUSH
49606: CALL_OW 274
49610: ST_TO_ADDR
// if not pom then
49611: LD_VAR 0 4
49615: NOT
49616: IFFALSE 49620
// exit ;
49618: GO 49721
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49620: LD_ADDR_VAR 0 5
49624: PUSH
49625: LD_VAR 0 2
49629: PPUSH
49630: LD_VAR 0 1
49634: PPUSH
49635: CALL_OW 248
49639: PPUSH
49640: CALL_OW 450
49644: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49645: LD_ADDR_VAR 0 3
49649: PUSH
49650: LD_VAR 0 4
49654: PPUSH
49655: LD_INT 1
49657: PPUSH
49658: CALL_OW 275
49662: PUSH
49663: LD_VAR 0 5
49667: PUSH
49668: LD_INT 1
49670: ARRAY
49671: GREATEREQUAL
49672: PUSH
49673: LD_VAR 0 4
49677: PPUSH
49678: LD_INT 2
49680: PPUSH
49681: CALL_OW 275
49685: PUSH
49686: LD_VAR 0 5
49690: PUSH
49691: LD_INT 2
49693: ARRAY
49694: GREATEREQUAL
49695: AND
49696: PUSH
49697: LD_VAR 0 4
49701: PPUSH
49702: LD_INT 3
49704: PPUSH
49705: CALL_OW 275
49709: PUSH
49710: LD_VAR 0 5
49714: PUSH
49715: LD_INT 3
49717: ARRAY
49718: GREATEREQUAL
49719: AND
49720: ST_TO_ADDR
// end ;
49721: LD_VAR 0 3
49725: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49726: LD_INT 0
49728: PPUSH
49729: PPUSH
49730: PPUSH
49731: PPUSH
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
49736: PPUSH
49737: PPUSH
49738: PPUSH
// result := false ;
49739: LD_ADDR_VAR 0 8
49743: PUSH
49744: LD_INT 0
49746: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49747: LD_VAR 0 5
49751: NOT
49752: PUSH
49753: LD_VAR 0 1
49757: NOT
49758: OR
49759: PUSH
49760: LD_VAR 0 2
49764: NOT
49765: OR
49766: PUSH
49767: LD_VAR 0 3
49771: NOT
49772: OR
49773: IFFALSE 49777
// exit ;
49775: GO 50591
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49777: LD_ADDR_VAR 0 14
49781: PUSH
49782: LD_VAR 0 1
49786: PPUSH
49787: LD_VAR 0 2
49791: PPUSH
49792: LD_VAR 0 3
49796: PPUSH
49797: LD_VAR 0 4
49801: PPUSH
49802: LD_VAR 0 5
49806: PUSH
49807: LD_INT 1
49809: ARRAY
49810: PPUSH
49811: CALL_OW 248
49815: PPUSH
49816: LD_INT 0
49818: PPUSH
49819: CALL 51828 0 6
49823: ST_TO_ADDR
// if not hexes then
49824: LD_VAR 0 14
49828: NOT
49829: IFFALSE 49833
// exit ;
49831: GO 50591
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49833: LD_ADDR_VAR 0 17
49837: PUSH
49838: LD_VAR 0 5
49842: PPUSH
49843: LD_INT 22
49845: PUSH
49846: LD_VAR 0 13
49850: PPUSH
49851: CALL_OW 255
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 30
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 30
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PPUSH
49892: CALL_OW 72
49896: ST_TO_ADDR
// for i = 1 to hexes do
49897: LD_ADDR_VAR 0 9
49901: PUSH
49902: DOUBLE
49903: LD_INT 1
49905: DEC
49906: ST_TO_ADDR
49907: LD_VAR 0 14
49911: PUSH
49912: FOR_TO
49913: IFFALSE 50589
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49915: LD_ADDR_VAR 0 13
49919: PUSH
49920: LD_VAR 0 14
49924: PUSH
49925: LD_VAR 0 9
49929: ARRAY
49930: PUSH
49931: LD_INT 1
49933: ARRAY
49934: PPUSH
49935: LD_VAR 0 14
49939: PUSH
49940: LD_VAR 0 9
49944: ARRAY
49945: PUSH
49946: LD_INT 2
49948: ARRAY
49949: PPUSH
49950: CALL_OW 428
49954: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49955: LD_VAR 0 14
49959: PUSH
49960: LD_VAR 0 9
49964: ARRAY
49965: PUSH
49966: LD_INT 1
49968: ARRAY
49969: PPUSH
49970: LD_VAR 0 14
49974: PUSH
49975: LD_VAR 0 9
49979: ARRAY
49980: PUSH
49981: LD_INT 2
49983: ARRAY
49984: PPUSH
49985: CALL_OW 351
49989: PUSH
49990: LD_VAR 0 14
49994: PUSH
49995: LD_VAR 0 9
49999: ARRAY
50000: PUSH
50001: LD_INT 1
50003: ARRAY
50004: PPUSH
50005: LD_VAR 0 14
50009: PUSH
50010: LD_VAR 0 9
50014: ARRAY
50015: PUSH
50016: LD_INT 2
50018: ARRAY
50019: PPUSH
50020: CALL_OW 488
50024: NOT
50025: OR
50026: PUSH
50027: LD_VAR 0 13
50031: PPUSH
50032: CALL_OW 247
50036: PUSH
50037: LD_INT 3
50039: EQUAL
50040: OR
50041: IFFALSE 50047
// exit ;
50043: POP
50044: POP
50045: GO 50591
// if not tmp then
50047: LD_VAR 0 13
50051: NOT
50052: IFFALSE 50056
// continue ;
50054: GO 49912
// result := true ;
50056: LD_ADDR_VAR 0 8
50060: PUSH
50061: LD_INT 1
50063: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50064: LD_VAR 0 6
50068: PUSH
50069: LD_VAR 0 13
50073: PPUSH
50074: CALL_OW 247
50078: PUSH
50079: LD_INT 2
50081: EQUAL
50082: AND
50083: PUSH
50084: LD_VAR 0 13
50088: PPUSH
50089: CALL_OW 263
50093: PUSH
50094: LD_INT 1
50096: EQUAL
50097: AND
50098: IFFALSE 50262
// begin if IsDrivenBy ( tmp ) then
50100: LD_VAR 0 13
50104: PPUSH
50105: CALL_OW 311
50109: IFFALSE 50113
// continue ;
50111: GO 49912
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50113: LD_VAR 0 6
50117: PPUSH
50118: LD_INT 3
50120: PUSH
50121: LD_INT 60
50123: PUSH
50124: EMPTY
50125: LIST
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: PUSH
50134: LD_INT 55
50136: PUSH
50137: EMPTY
50138: LIST
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PPUSH
50148: CALL_OW 72
50152: IFFALSE 50260
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50154: LD_ADDR_VAR 0 18
50158: PUSH
50159: LD_VAR 0 6
50163: PPUSH
50164: LD_INT 3
50166: PUSH
50167: LD_INT 60
50169: PUSH
50170: EMPTY
50171: LIST
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 3
50179: PUSH
50180: LD_INT 55
50182: PUSH
50183: EMPTY
50184: LIST
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PPUSH
50194: CALL_OW 72
50198: PUSH
50199: LD_INT 1
50201: ARRAY
50202: ST_TO_ADDR
// if IsInUnit ( driver ) then
50203: LD_VAR 0 18
50207: PPUSH
50208: CALL_OW 310
50212: IFFALSE 50223
// ComExit ( driver ) ;
50214: LD_VAR 0 18
50218: PPUSH
50219: CALL 74956 0 1
// AddComEnterUnit ( driver , tmp ) ;
50223: LD_VAR 0 18
50227: PPUSH
50228: LD_VAR 0 13
50232: PPUSH
50233: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50237: LD_VAR 0 18
50241: PPUSH
50242: LD_VAR 0 7
50246: PPUSH
50247: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50251: LD_VAR 0 18
50255: PPUSH
50256: CALL_OW 181
// end ; continue ;
50260: GO 49912
// end ; if not cleaners or not tmp in cleaners then
50262: LD_VAR 0 6
50266: NOT
50267: PUSH
50268: LD_VAR 0 13
50272: PUSH
50273: LD_VAR 0 6
50277: IN
50278: NOT
50279: OR
50280: IFFALSE 50587
// begin if dep then
50282: LD_VAR 0 17
50286: IFFALSE 50422
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50288: LD_ADDR_VAR 0 16
50292: PUSH
50293: LD_VAR 0 17
50297: PUSH
50298: LD_INT 1
50300: ARRAY
50301: PPUSH
50302: CALL_OW 250
50306: PPUSH
50307: LD_VAR 0 17
50311: PUSH
50312: LD_INT 1
50314: ARRAY
50315: PPUSH
50316: CALL_OW 254
50320: PPUSH
50321: LD_INT 5
50323: PPUSH
50324: CALL_OW 272
50328: PUSH
50329: LD_VAR 0 17
50333: PUSH
50334: LD_INT 1
50336: ARRAY
50337: PPUSH
50338: CALL_OW 251
50342: PPUSH
50343: LD_VAR 0 17
50347: PUSH
50348: LD_INT 1
50350: ARRAY
50351: PPUSH
50352: CALL_OW 254
50356: PPUSH
50357: LD_INT 5
50359: PPUSH
50360: CALL_OW 273
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50369: LD_VAR 0 16
50373: PUSH
50374: LD_INT 1
50376: ARRAY
50377: PPUSH
50378: LD_VAR 0 16
50382: PUSH
50383: LD_INT 2
50385: ARRAY
50386: PPUSH
50387: CALL_OW 488
50391: IFFALSE 50422
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50393: LD_VAR 0 13
50397: PPUSH
50398: LD_VAR 0 16
50402: PUSH
50403: LD_INT 1
50405: ARRAY
50406: PPUSH
50407: LD_VAR 0 16
50411: PUSH
50412: LD_INT 2
50414: ARRAY
50415: PPUSH
50416: CALL_OW 111
// continue ;
50420: GO 49912
// end ; end ; r := GetDir ( tmp ) ;
50422: LD_ADDR_VAR 0 15
50426: PUSH
50427: LD_VAR 0 13
50431: PPUSH
50432: CALL_OW 254
50436: ST_TO_ADDR
// if r = 5 then
50437: LD_VAR 0 15
50441: PUSH
50442: LD_INT 5
50444: EQUAL
50445: IFFALSE 50455
// r := 0 ;
50447: LD_ADDR_VAR 0 15
50451: PUSH
50452: LD_INT 0
50454: ST_TO_ADDR
// for j = r to 5 do
50455: LD_ADDR_VAR 0 10
50459: PUSH
50460: DOUBLE
50461: LD_VAR 0 15
50465: DEC
50466: ST_TO_ADDR
50467: LD_INT 5
50469: PUSH
50470: FOR_TO
50471: IFFALSE 50585
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50473: LD_ADDR_VAR 0 11
50477: PUSH
50478: LD_VAR 0 13
50482: PPUSH
50483: CALL_OW 250
50487: PPUSH
50488: LD_VAR 0 10
50492: PPUSH
50493: LD_INT 2
50495: PPUSH
50496: CALL_OW 272
50500: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50501: LD_ADDR_VAR 0 12
50505: PUSH
50506: LD_VAR 0 13
50510: PPUSH
50511: CALL_OW 251
50515: PPUSH
50516: LD_VAR 0 10
50520: PPUSH
50521: LD_INT 2
50523: PPUSH
50524: CALL_OW 273
50528: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50529: LD_VAR 0 11
50533: PPUSH
50534: LD_VAR 0 12
50538: PPUSH
50539: CALL_OW 488
50543: PUSH
50544: LD_VAR 0 11
50548: PPUSH
50549: LD_VAR 0 12
50553: PPUSH
50554: CALL_OW 428
50558: NOT
50559: AND
50560: IFFALSE 50583
// begin ComMoveXY ( tmp , _x , _y ) ;
50562: LD_VAR 0 13
50566: PPUSH
50567: LD_VAR 0 11
50571: PPUSH
50572: LD_VAR 0 12
50576: PPUSH
50577: CALL_OW 111
// break ;
50581: GO 50585
// end ; end ;
50583: GO 50470
50585: POP
50586: POP
// end ; end ;
50587: GO 49912
50589: POP
50590: POP
// end ;
50591: LD_VAR 0 8
50595: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50596: LD_INT 0
50598: PPUSH
// result := true ;
50599: LD_ADDR_VAR 0 3
50603: PUSH
50604: LD_INT 1
50606: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50607: LD_VAR 0 2
50611: PUSH
50612: LD_INT 24
50614: DOUBLE
50615: EQUAL
50616: IFTRUE 50626
50618: LD_INT 33
50620: DOUBLE
50621: EQUAL
50622: IFTRUE 50626
50624: GO 50651
50626: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50627: LD_ADDR_VAR 0 3
50631: PUSH
50632: LD_INT 32
50634: PPUSH
50635: LD_VAR 0 1
50639: PPUSH
50640: CALL_OW 321
50644: PUSH
50645: LD_INT 2
50647: EQUAL
50648: ST_TO_ADDR
50649: GO 50971
50651: LD_INT 20
50653: DOUBLE
50654: EQUAL
50655: IFTRUE 50659
50657: GO 50684
50659: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50660: LD_ADDR_VAR 0 3
50664: PUSH
50665: LD_INT 6
50667: PPUSH
50668: LD_VAR 0 1
50672: PPUSH
50673: CALL_OW 321
50677: PUSH
50678: LD_INT 2
50680: EQUAL
50681: ST_TO_ADDR
50682: GO 50971
50684: LD_INT 22
50686: DOUBLE
50687: EQUAL
50688: IFTRUE 50698
50690: LD_INT 36
50692: DOUBLE
50693: EQUAL
50694: IFTRUE 50698
50696: GO 50723
50698: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50699: LD_ADDR_VAR 0 3
50703: PUSH
50704: LD_INT 15
50706: PPUSH
50707: LD_VAR 0 1
50711: PPUSH
50712: CALL_OW 321
50716: PUSH
50717: LD_INT 2
50719: EQUAL
50720: ST_TO_ADDR
50721: GO 50971
50723: LD_INT 30
50725: DOUBLE
50726: EQUAL
50727: IFTRUE 50731
50729: GO 50756
50731: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50732: LD_ADDR_VAR 0 3
50736: PUSH
50737: LD_INT 20
50739: PPUSH
50740: LD_VAR 0 1
50744: PPUSH
50745: CALL_OW 321
50749: PUSH
50750: LD_INT 2
50752: EQUAL
50753: ST_TO_ADDR
50754: GO 50971
50756: LD_INT 28
50758: DOUBLE
50759: EQUAL
50760: IFTRUE 50770
50762: LD_INT 21
50764: DOUBLE
50765: EQUAL
50766: IFTRUE 50770
50768: GO 50795
50770: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50771: LD_ADDR_VAR 0 3
50775: PUSH
50776: LD_INT 21
50778: PPUSH
50779: LD_VAR 0 1
50783: PPUSH
50784: CALL_OW 321
50788: PUSH
50789: LD_INT 2
50791: EQUAL
50792: ST_TO_ADDR
50793: GO 50971
50795: LD_INT 16
50797: DOUBLE
50798: EQUAL
50799: IFTRUE 50803
50801: GO 50830
50803: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50804: LD_ADDR_VAR 0 3
50808: PUSH
50809: LD_EXP 55
50813: PPUSH
50814: LD_VAR 0 1
50818: PPUSH
50819: CALL_OW 321
50823: PUSH
50824: LD_INT 2
50826: EQUAL
50827: ST_TO_ADDR
50828: GO 50971
50830: LD_INT 19
50832: DOUBLE
50833: EQUAL
50834: IFTRUE 50844
50836: LD_INT 23
50838: DOUBLE
50839: EQUAL
50840: IFTRUE 50844
50842: GO 50871
50844: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50845: LD_ADDR_VAR 0 3
50849: PUSH
50850: LD_EXP 54
50854: PPUSH
50855: LD_VAR 0 1
50859: PPUSH
50860: CALL_OW 321
50864: PUSH
50865: LD_INT 2
50867: EQUAL
50868: ST_TO_ADDR
50869: GO 50971
50871: LD_INT 17
50873: DOUBLE
50874: EQUAL
50875: IFTRUE 50879
50877: GO 50904
50879: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50880: LD_ADDR_VAR 0 3
50884: PUSH
50885: LD_INT 39
50887: PPUSH
50888: LD_VAR 0 1
50892: PPUSH
50893: CALL_OW 321
50897: PUSH
50898: LD_INT 2
50900: EQUAL
50901: ST_TO_ADDR
50902: GO 50971
50904: LD_INT 18
50906: DOUBLE
50907: EQUAL
50908: IFTRUE 50912
50910: GO 50937
50912: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50913: LD_ADDR_VAR 0 3
50917: PUSH
50918: LD_INT 40
50920: PPUSH
50921: LD_VAR 0 1
50925: PPUSH
50926: CALL_OW 321
50930: PUSH
50931: LD_INT 2
50933: EQUAL
50934: ST_TO_ADDR
50935: GO 50971
50937: LD_INT 27
50939: DOUBLE
50940: EQUAL
50941: IFTRUE 50945
50943: GO 50970
50945: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50946: LD_ADDR_VAR 0 3
50950: PUSH
50951: LD_INT 35
50953: PPUSH
50954: LD_VAR 0 1
50958: PPUSH
50959: CALL_OW 321
50963: PUSH
50964: LD_INT 2
50966: EQUAL
50967: ST_TO_ADDR
50968: GO 50971
50970: POP
// end ;
50971: LD_VAR 0 3
50975: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50976: LD_INT 0
50978: PPUSH
50979: PPUSH
50980: PPUSH
50981: PPUSH
50982: PPUSH
50983: PPUSH
50984: PPUSH
50985: PPUSH
50986: PPUSH
50987: PPUSH
50988: PPUSH
// result := false ;
50989: LD_ADDR_VAR 0 6
50993: PUSH
50994: LD_INT 0
50996: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50997: LD_VAR 0 1
51001: NOT
51002: PUSH
51003: LD_VAR 0 1
51007: PPUSH
51008: CALL_OW 266
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: IN
51023: NOT
51024: OR
51025: PUSH
51026: LD_VAR 0 2
51030: NOT
51031: OR
51032: PUSH
51033: LD_VAR 0 5
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 3
51049: PUSH
51050: LD_INT 4
51052: PUSH
51053: LD_INT 5
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: IN
51064: NOT
51065: OR
51066: PUSH
51067: LD_VAR 0 3
51071: PPUSH
51072: LD_VAR 0 4
51076: PPUSH
51077: CALL_OW 488
51081: NOT
51082: OR
51083: IFFALSE 51087
// exit ;
51085: GO 51823
// side := GetSide ( depot ) ;
51087: LD_ADDR_VAR 0 9
51091: PUSH
51092: LD_VAR 0 1
51096: PPUSH
51097: CALL_OW 255
51101: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51102: LD_VAR 0 9
51106: PPUSH
51107: LD_VAR 0 2
51111: PPUSH
51112: CALL 50596 0 2
51116: NOT
51117: IFFALSE 51121
// exit ;
51119: GO 51823
// pom := GetBase ( depot ) ;
51121: LD_ADDR_VAR 0 10
51125: PUSH
51126: LD_VAR 0 1
51130: PPUSH
51131: CALL_OW 274
51135: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51136: LD_ADDR_VAR 0 11
51140: PUSH
51141: LD_VAR 0 2
51145: PPUSH
51146: LD_VAR 0 1
51150: PPUSH
51151: CALL_OW 248
51155: PPUSH
51156: CALL_OW 450
51160: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51161: LD_VAR 0 10
51165: PPUSH
51166: LD_INT 1
51168: PPUSH
51169: CALL_OW 275
51173: PUSH
51174: LD_VAR 0 11
51178: PUSH
51179: LD_INT 1
51181: ARRAY
51182: GREATEREQUAL
51183: PUSH
51184: LD_VAR 0 10
51188: PPUSH
51189: LD_INT 2
51191: PPUSH
51192: CALL_OW 275
51196: PUSH
51197: LD_VAR 0 11
51201: PUSH
51202: LD_INT 2
51204: ARRAY
51205: GREATEREQUAL
51206: AND
51207: PUSH
51208: LD_VAR 0 10
51212: PPUSH
51213: LD_INT 3
51215: PPUSH
51216: CALL_OW 275
51220: PUSH
51221: LD_VAR 0 11
51225: PUSH
51226: LD_INT 3
51228: ARRAY
51229: GREATEREQUAL
51230: AND
51231: NOT
51232: IFFALSE 51236
// exit ;
51234: GO 51823
// if GetBType ( depot ) = b_depot then
51236: LD_VAR 0 1
51240: PPUSH
51241: CALL_OW 266
51245: PUSH
51246: LD_INT 0
51248: EQUAL
51249: IFFALSE 51261
// dist := 28 else
51251: LD_ADDR_VAR 0 14
51255: PUSH
51256: LD_INT 28
51258: ST_TO_ADDR
51259: GO 51269
// dist := 36 ;
51261: LD_ADDR_VAR 0 14
51265: PUSH
51266: LD_INT 36
51268: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51269: LD_VAR 0 1
51273: PPUSH
51274: LD_VAR 0 3
51278: PPUSH
51279: LD_VAR 0 4
51283: PPUSH
51284: CALL_OW 297
51288: PUSH
51289: LD_VAR 0 14
51293: GREATER
51294: IFFALSE 51298
// exit ;
51296: GO 51823
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51298: LD_ADDR_VAR 0 12
51302: PUSH
51303: LD_VAR 0 2
51307: PPUSH
51308: LD_VAR 0 3
51312: PPUSH
51313: LD_VAR 0 4
51317: PPUSH
51318: LD_VAR 0 5
51322: PPUSH
51323: LD_VAR 0 1
51327: PPUSH
51328: CALL_OW 248
51332: PPUSH
51333: LD_INT 0
51335: PPUSH
51336: CALL 51828 0 6
51340: ST_TO_ADDR
// if not hexes then
51341: LD_VAR 0 12
51345: NOT
51346: IFFALSE 51350
// exit ;
51348: GO 51823
// hex := GetHexInfo ( x , y ) ;
51350: LD_ADDR_VAR 0 15
51354: PUSH
51355: LD_VAR 0 3
51359: PPUSH
51360: LD_VAR 0 4
51364: PPUSH
51365: CALL_OW 546
51369: ST_TO_ADDR
// if hex [ 1 ] then
51370: LD_VAR 0 15
51374: PUSH
51375: LD_INT 1
51377: ARRAY
51378: IFFALSE 51382
// exit ;
51380: GO 51823
// height := hex [ 2 ] ;
51382: LD_ADDR_VAR 0 13
51386: PUSH
51387: LD_VAR 0 15
51391: PUSH
51392: LD_INT 2
51394: ARRAY
51395: ST_TO_ADDR
// for i = 1 to hexes do
51396: LD_ADDR_VAR 0 7
51400: PUSH
51401: DOUBLE
51402: LD_INT 1
51404: DEC
51405: ST_TO_ADDR
51406: LD_VAR 0 12
51410: PUSH
51411: FOR_TO
51412: IFFALSE 51742
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51414: LD_VAR 0 12
51418: PUSH
51419: LD_VAR 0 7
51423: ARRAY
51424: PUSH
51425: LD_INT 1
51427: ARRAY
51428: PPUSH
51429: LD_VAR 0 12
51433: PUSH
51434: LD_VAR 0 7
51438: ARRAY
51439: PUSH
51440: LD_INT 2
51442: ARRAY
51443: PPUSH
51444: CALL_OW 488
51448: NOT
51449: PUSH
51450: LD_VAR 0 12
51454: PUSH
51455: LD_VAR 0 7
51459: ARRAY
51460: PUSH
51461: LD_INT 1
51463: ARRAY
51464: PPUSH
51465: LD_VAR 0 12
51469: PUSH
51470: LD_VAR 0 7
51474: ARRAY
51475: PUSH
51476: LD_INT 2
51478: ARRAY
51479: PPUSH
51480: CALL_OW 428
51484: PUSH
51485: LD_INT 0
51487: GREATER
51488: OR
51489: PUSH
51490: LD_VAR 0 12
51494: PUSH
51495: LD_VAR 0 7
51499: ARRAY
51500: PUSH
51501: LD_INT 1
51503: ARRAY
51504: PPUSH
51505: LD_VAR 0 12
51509: PUSH
51510: LD_VAR 0 7
51514: ARRAY
51515: PUSH
51516: LD_INT 2
51518: ARRAY
51519: PPUSH
51520: CALL_OW 351
51524: OR
51525: IFFALSE 51531
// exit ;
51527: POP
51528: POP
51529: GO 51823
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51531: LD_ADDR_VAR 0 8
51535: PUSH
51536: LD_VAR 0 12
51540: PUSH
51541: LD_VAR 0 7
51545: ARRAY
51546: PUSH
51547: LD_INT 1
51549: ARRAY
51550: PPUSH
51551: LD_VAR 0 12
51555: PUSH
51556: LD_VAR 0 7
51560: ARRAY
51561: PUSH
51562: LD_INT 2
51564: ARRAY
51565: PPUSH
51566: CALL_OW 546
51570: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51571: LD_VAR 0 8
51575: PUSH
51576: LD_INT 1
51578: ARRAY
51579: PUSH
51580: LD_VAR 0 8
51584: PUSH
51585: LD_INT 2
51587: ARRAY
51588: PUSH
51589: LD_VAR 0 13
51593: PUSH
51594: LD_INT 2
51596: PLUS
51597: GREATER
51598: OR
51599: PUSH
51600: LD_VAR 0 8
51604: PUSH
51605: LD_INT 2
51607: ARRAY
51608: PUSH
51609: LD_VAR 0 13
51613: PUSH
51614: LD_INT 2
51616: MINUS
51617: LESS
51618: OR
51619: PUSH
51620: LD_VAR 0 8
51624: PUSH
51625: LD_INT 3
51627: ARRAY
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 8
51634: PUSH
51635: LD_INT 9
51637: PUSH
51638: LD_INT 10
51640: PUSH
51641: LD_INT 11
51643: PUSH
51644: LD_INT 12
51646: PUSH
51647: LD_INT 13
51649: PUSH
51650: LD_INT 16
51652: PUSH
51653: LD_INT 17
51655: PUSH
51656: LD_INT 18
51658: PUSH
51659: LD_INT 19
51661: PUSH
51662: LD_INT 20
51664: PUSH
51665: LD_INT 21
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: IN
51683: NOT
51684: OR
51685: PUSH
51686: LD_VAR 0 8
51690: PUSH
51691: LD_INT 5
51693: ARRAY
51694: NOT
51695: OR
51696: PUSH
51697: LD_VAR 0 8
51701: PUSH
51702: LD_INT 6
51704: ARRAY
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 7
51714: PUSH
51715: LD_INT 9
51717: PUSH
51718: LD_INT 10
51720: PUSH
51721: LD_INT 11
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: IN
51732: NOT
51733: OR
51734: IFFALSE 51740
// exit ;
51736: POP
51737: POP
51738: GO 51823
// end ;
51740: GO 51411
51742: POP
51743: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51744: LD_VAR 0 9
51748: PPUSH
51749: LD_VAR 0 3
51753: PPUSH
51754: LD_VAR 0 4
51758: PPUSH
51759: LD_INT 20
51761: PPUSH
51762: CALL 43769 0 4
51766: PUSH
51767: LD_INT 4
51769: ARRAY
51770: IFFALSE 51774
// exit ;
51772: GO 51823
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51774: LD_VAR 0 2
51778: PUSH
51779: LD_INT 29
51781: PUSH
51782: LD_INT 30
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: IN
51789: PUSH
51790: LD_VAR 0 3
51794: PPUSH
51795: LD_VAR 0 4
51799: PPUSH
51800: LD_VAR 0 9
51804: PPUSH
51805: CALL_OW 440
51809: NOT
51810: AND
51811: IFFALSE 51815
// exit ;
51813: GO 51823
// result := true ;
51815: LD_ADDR_VAR 0 6
51819: PUSH
51820: LD_INT 1
51822: ST_TO_ADDR
// end ;
51823: LD_VAR 0 6
51827: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51828: LD_INT 0
51830: PPUSH
51831: PPUSH
51832: PPUSH
51833: PPUSH
51834: PPUSH
51835: PPUSH
51836: PPUSH
51837: PPUSH
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
51843: PPUSH
51844: PPUSH
51845: PPUSH
51846: PPUSH
51847: PPUSH
51848: PPUSH
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
51856: PPUSH
51857: PPUSH
51858: PPUSH
51859: PPUSH
51860: PPUSH
51861: PPUSH
51862: PPUSH
51863: PPUSH
51864: PPUSH
51865: PPUSH
51866: PPUSH
51867: PPUSH
51868: PPUSH
51869: PPUSH
51870: PPUSH
51871: PPUSH
51872: PPUSH
51873: PPUSH
51874: PPUSH
51875: PPUSH
51876: PPUSH
51877: PPUSH
51878: PPUSH
51879: PPUSH
51880: PPUSH
51881: PPUSH
51882: PPUSH
51883: PPUSH
51884: PPUSH
51885: PPUSH
51886: PPUSH
51887: PPUSH
// result = [ ] ;
51888: LD_ADDR_VAR 0 7
51892: PUSH
51893: EMPTY
51894: ST_TO_ADDR
// temp_list = [ ] ;
51895: LD_ADDR_VAR 0 9
51899: PUSH
51900: EMPTY
51901: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51902: LD_VAR 0 4
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: LD_INT 4
51921: PUSH
51922: LD_INT 5
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: IN
51933: NOT
51934: PUSH
51935: LD_VAR 0 1
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: IN
51950: PUSH
51951: LD_VAR 0 5
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: IN
51970: NOT
51971: AND
51972: OR
51973: IFFALSE 51977
// exit ;
51975: GO 70368
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51977: LD_VAR 0 1
51981: PUSH
51982: LD_INT 6
51984: PUSH
51985: LD_INT 7
51987: PUSH
51988: LD_INT 8
51990: PUSH
51991: LD_INT 13
51993: PUSH
51994: LD_INT 12
51996: PUSH
51997: LD_INT 15
51999: PUSH
52000: LD_INT 11
52002: PUSH
52003: LD_INT 14
52005: PUSH
52006: LD_INT 10
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: IN
52020: IFFALSE 52030
// btype = b_lab ;
52022: LD_ADDR_VAR 0 1
52026: PUSH
52027: LD_INT 6
52029: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52030: LD_VAR 0 6
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: IN
52049: NOT
52050: PUSH
52051: LD_VAR 0 1
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: LD_INT 6
52070: PUSH
52071: LD_INT 36
52073: PUSH
52074: LD_INT 4
52076: PUSH
52077: LD_INT 5
52079: PUSH
52080: LD_INT 31
52082: PUSH
52083: LD_INT 32
52085: PUSH
52086: LD_INT 33
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: IN
52102: NOT
52103: PUSH
52104: LD_VAR 0 6
52108: PUSH
52109: LD_INT 1
52111: EQUAL
52112: AND
52113: OR
52114: PUSH
52115: LD_VAR 0 1
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 3
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: IN
52130: NOT
52131: PUSH
52132: LD_VAR 0 6
52136: PUSH
52137: LD_INT 2
52139: EQUAL
52140: AND
52141: OR
52142: IFFALSE 52152
// mode = 0 ;
52144: LD_ADDR_VAR 0 6
52148: PUSH
52149: LD_INT 0
52151: ST_TO_ADDR
// case mode of 0 :
52152: LD_VAR 0 6
52156: PUSH
52157: LD_INT 0
52159: DOUBLE
52160: EQUAL
52161: IFTRUE 52165
52163: GO 63618
52165: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52166: LD_ADDR_VAR 0 11
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52359: LD_ADDR_VAR 0 12
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: NEG
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 3
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52555: LD_ADDR_VAR 0 13
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52754: LD_ADDR_VAR 0 14
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 3
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 3
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: LD_INT 2
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52950: LD_ADDR_VAR 0 15
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53143: LD_ADDR_VAR 0 16
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 3
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 3
53300: PUSH
53301: LD_INT 3
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53336: LD_ADDR_VAR 0 17
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53566: LD_ADDR_VAR 0 18
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53796: LD_ADDR_VAR 0 19
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54026: LD_ADDR_VAR 0 20
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54256: LD_ADDR_VAR 0 21
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54486: LD_ADDR_VAR 0 22
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54716: LD_ADDR_VAR 0 23
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 2
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: LD_INT 3
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54996: LD_ADDR_VAR 0 24
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: LD_INT 2
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 3
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55272: LD_ADDR_VAR 0 25
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: LD_INT 3
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 3
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55546: LD_ADDR_VAR 0 26
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55822: LD_ADDR_VAR 0 27
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56102: LD_ADDR_VAR 0 28
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 3
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 3
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 3
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56384: LD_ADDR_VAR 0 29
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 3
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56663: LD_ADDR_VAR 0 30
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 3
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 3
56906: NEG
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56941: LD_ADDR_VAR 0 31
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 3
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 3
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57219: LD_ADDR_VAR 0 32
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: NEG
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57497: LD_ADDR_VAR 0 33
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: LD_INT 3
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57776: LD_ADDR_VAR 0 34
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58056: LD_ADDR_VAR 0 35
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58168: LD_ADDR_VAR 0 36
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58280: LD_ADDR_VAR 0 37
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58392: LD_ADDR_VAR 0 38
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58504: LD_ADDR_VAR 0 39
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58616: LD_ADDR_VAR 0 40
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58728: LD_ADDR_VAR 0 41
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 2
58918: NEG
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: NEG
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: NEG
59038: PUSH
59039: LD_INT 3
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59078: LD_ADDR_VAR 0 42
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: LD_INT 3
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: LD_INT 3
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 3
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 2
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: LD_INT 3
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 3
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 3
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 3
59375: NEG
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 3
59387: NEG
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59428: LD_ADDR_VAR 0 43
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 2
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: LD_INT 3
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 3
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 3
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59776: LD_ADDR_VAR 0 44
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 3
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 3
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 3
60073: NEG
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 3
60085: NEG
60086: PUSH
60087: LD_INT 3
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60126: LD_ADDR_VAR 0 45
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: LD_INT 2
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: LD_INT 2
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: LD_INT 3
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 3
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: LD_INT 3
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: LD_INT 3
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 3
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 3
60435: NEG
60436: PUSH
60437: LD_INT 3
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60476: LD_ADDR_VAR 0 46
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 2
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 3
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 3
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 2
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: LD_INT 3
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: LD_INT 3
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 2
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 2
60761: NEG
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 3
60772: NEG
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 3
60783: NEG
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60824: LD_ADDR_VAR 0 47
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: LD_INT 2
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60975: LD_ADDR_VAR 0 48
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61122: LD_ADDR_VAR 0 49
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61266: LD_ADDR_VAR 0 50
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 2
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 2
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61410: LD_ADDR_VAR 0 51
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 2
61522: NEG
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61557: LD_ADDR_VAR 0 52
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: NEG
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 2
61684: NEG
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61708: LD_ADDR_VAR 0 53
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 2
61895: NEG
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61938: LD_ADDR_VAR 0 54
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: LD_INT 2
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: LD_INT 2
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 2
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 2
62125: NEG
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62168: LD_ADDR_VAR 0 55
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 2
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 2
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: PUSH
62304: LD_INT 2
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: LD_INT 2
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: NEG
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 2
62367: NEG
62368: PUSH
62369: LD_INT 2
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62398: LD_ADDR_VAR 0 56
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 2
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 2
62585: NEG
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: LD_INT 2
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62628: LD_ADDR_VAR 0 57
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: LD_INT 2
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: NEG
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: LD_INT 2
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62858: LD_ADDR_VAR 0 58
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 2
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 2
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: LD_INT 2
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 2
63045: NEG
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63088: LD_ADDR_VAR 0 59
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 1
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63176: LD_ADDR_VAR 0 60
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63264: LD_ADDR_VAR 0 61
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63352: LD_ADDR_VAR 0 62
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63440: LD_ADDR_VAR 0 63
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63528: LD_ADDR_VAR 0 64
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: ST_TO_ADDR
// end ; 1 :
63616: GO 69513
63618: LD_INT 1
63620: DOUBLE
63621: EQUAL
63622: IFTRUE 63626
63624: GO 66249
63626: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63627: LD_ADDR_VAR 0 11
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: LD_INT 3
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: LD_INT 3
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: LD_INT 2
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: LIST
63670: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63671: LD_ADDR_VAR 0 12
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 3
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 3
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: LIST
63711: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63712: LD_ADDR_VAR 0 13
63716: PUSH
63717: LD_INT 3
63719: PUSH
63720: LD_INT 2
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 3
63729: PUSH
63730: LD_INT 3
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: LD_INT 3
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: LIST
63751: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63752: LD_ADDR_VAR 0 14
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 3
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 3
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: LIST
63792: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63793: LD_ADDR_VAR 0 15
63797: PUSH
63798: LD_INT 2
63800: NEG
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 3
63811: NEG
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 3
63822: NEG
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: LIST
63836: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63837: LD_ADDR_VAR 0 16
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: LD_INT 3
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 3
63856: NEG
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: LD_INT 3
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: LIST
63882: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63883: LD_ADDR_VAR 0 17
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: LD_INT 3
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 3
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: LIST
63926: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63927: LD_ADDR_VAR 0 18
63931: PUSH
63932: LD_INT 2
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 3
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 3
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: LIST
63967: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63968: LD_ADDR_VAR 0 19
63972: PUSH
63973: LD_INT 3
63975: PUSH
63976: LD_INT 2
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 3
63985: PUSH
63986: LD_INT 3
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 2
63995: PUSH
63996: LD_INT 3
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: LIST
64007: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64008: LD_ADDR_VAR 0 20
64012: PUSH
64013: LD_INT 1
64015: PUSH
64016: LD_INT 3
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: LD_INT 3
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: LD_INT 2
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: LIST
64048: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64049: LD_ADDR_VAR 0 21
64053: PUSH
64054: LD_INT 2
64056: NEG
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 3
64067: NEG
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 3
64078: NEG
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64093: LD_ADDR_VAR 0 22
64097: PUSH
64098: LD_INT 2
64100: NEG
64101: PUSH
64102: LD_INT 3
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: NEG
64113: PUSH
64114: LD_INT 2
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 3
64124: NEG
64125: PUSH
64126: LD_INT 3
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64139: LD_ADDR_VAR 0 23
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: LD_INT 3
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: LD_INT 4
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: LD_INT 3
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: LIST
64182: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64183: LD_ADDR_VAR 0 24
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 3
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 4
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64224: LD_ADDR_VAR 0 25
64228: PUSH
64229: LD_INT 3
64231: PUSH
64232: LD_INT 3
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 4
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 3
64251: PUSH
64252: LD_INT 4
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: LIST
64263: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64264: LD_ADDR_VAR 0 26
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: LD_INT 3
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: LD_INT 4
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: LD_INT 3
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64305: LD_ADDR_VAR 0 27
64309: PUSH
64310: LD_INT 3
64312: NEG
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 3
64323: NEG
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 4
64334: NEG
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: LIST
64348: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64349: LD_ADDR_VAR 0 28
64353: PUSH
64354: LD_INT 3
64356: NEG
64357: PUSH
64358: LD_INT 3
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 3
64368: NEG
64369: PUSH
64370: LD_INT 4
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 4
64380: NEG
64381: PUSH
64382: LD_INT 3
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: LIST
64394: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64395: LD_ADDR_VAR 0 29
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 3
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 3
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 4
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: LD_INT 4
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: LD_INT 3
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 5
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: LD_INT 5
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 4
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: LD_INT 6
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: LD_INT 6
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 5
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64550: LD_ADDR_VAR 0 30
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: LD_INT 1
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 3
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 4
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 4
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 4
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 5
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 5
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 5
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 6
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 6
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64693: LD_ADDR_VAR 0 31
64697: PUSH
64698: LD_INT 3
64700: PUSH
64701: LD_INT 2
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 3
64710: PUSH
64711: LD_INT 3
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 2
64720: PUSH
64721: LD_INT 3
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 4
64730: PUSH
64731: LD_INT 3
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 4
64740: PUSH
64741: LD_INT 4
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 3
64750: PUSH
64751: LD_INT 4
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 5
64760: PUSH
64761: LD_INT 4
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 5
64770: PUSH
64771: LD_INT 5
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 4
64780: PUSH
64781: LD_INT 5
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 6
64790: PUSH
64791: LD_INT 5
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 6
64800: PUSH
64801: LD_INT 6
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 5
64810: PUSH
64811: LD_INT 6
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64832: LD_ADDR_VAR 0 32
64836: PUSH
64837: LD_INT 1
64839: PUSH
64840: LD_INT 3
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 3
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 1
64859: NEG
64860: PUSH
64861: LD_INT 2
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: LD_INT 4
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 4
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: LD_INT 3
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: LD_INT 5
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: LD_INT 5
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: LD_INT 4
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: LD_INT 6
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 6
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: LD_INT 5
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64975: LD_ADDR_VAR 0 33
64979: PUSH
64980: LD_INT 2
64982: NEG
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 3
64993: NEG
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 3
65004: NEG
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 3
65016: NEG
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 4
65027: NEG
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 4
65038: NEG
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 4
65050: NEG
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 5
65061: NEG
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 5
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 5
65084: NEG
65085: PUSH
65086: LD_INT 1
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 6
65095: NEG
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 6
65106: NEG
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65130: LD_ADDR_VAR 0 34
65134: PUSH
65135: LD_INT 2
65137: NEG
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 3
65149: NEG
65150: PUSH
65151: LD_INT 2
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 3
65161: NEG
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 3
65173: NEG
65174: PUSH
65175: LD_INT 4
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 4
65185: NEG
65186: PUSH
65187: LD_INT 3
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 4
65197: NEG
65198: PUSH
65199: LD_INT 4
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 4
65209: NEG
65210: PUSH
65211: LD_INT 5
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 5
65221: NEG
65222: PUSH
65223: LD_INT 4
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 5
65233: NEG
65234: PUSH
65235: LD_INT 5
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 5
65245: NEG
65246: PUSH
65247: LD_INT 6
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 6
65257: NEG
65258: PUSH
65259: LD_INT 5
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 6
65269: NEG
65270: PUSH
65271: LD_INT 6
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65293: LD_ADDR_VAR 0 41
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 2
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: LD_INT 3
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 1
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65337: LD_ADDR_VAR 0 42
65341: PUSH
65342: LD_INT 2
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 2
65354: PUSH
65355: LD_INT 1
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: LD_INT 1
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65378: LD_ADDR_VAR 0 43
65382: PUSH
65383: LD_INT 2
65385: PUSH
65386: LD_INT 2
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 3
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: LD_INT 3
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65418: LD_ADDR_VAR 0 44
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 3
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: LIST
65458: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65459: LD_ADDR_VAR 0 45
65463: PUSH
65464: LD_INT 2
65466: NEG
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 2
65477: NEG
65478: PUSH
65479: LD_INT 1
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 3
65488: NEG
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: LIST
65502: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65503: LD_ADDR_VAR 0 46
65507: PUSH
65508: LD_INT 2
65510: NEG
65511: PUSH
65512: LD_INT 2
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 2
65522: NEG
65523: PUSH
65524: LD_INT 3
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 3
65534: NEG
65535: PUSH
65536: LD_INT 2
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65549: LD_ADDR_VAR 0 47
65553: PUSH
65554: LD_INT 2
65556: NEG
65557: PUSH
65558: LD_INT 3
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 1
65568: NEG
65569: PUSH
65570: LD_INT 3
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65582: LD_ADDR_VAR 0 48
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 2
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 2
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65613: LD_ADDR_VAR 0 49
65617: PUSH
65618: LD_INT 3
65620: PUSH
65621: LD_INT 1
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 3
65630: PUSH
65631: LD_INT 2
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65642: LD_ADDR_VAR 0 50
65646: PUSH
65647: LD_INT 2
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 1
65659: PUSH
65660: LD_INT 3
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65671: LD_ADDR_VAR 0 51
65675: PUSH
65676: LD_INT 1
65678: NEG
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 2
65689: NEG
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65702: LD_ADDR_VAR 0 52
65706: PUSH
65707: LD_INT 3
65709: NEG
65710: PUSH
65711: LD_INT 1
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 3
65721: NEG
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65735: LD_ADDR_VAR 0 53
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: LD_INT 3
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: LD_INT 3
65757: NEG
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: LD_INT 2
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: LIST
65778: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65779: LD_ADDR_VAR 0 54
65783: PUSH
65784: LD_INT 2
65786: PUSH
65787: LD_INT 1
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 3
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 3
65807: PUSH
65808: LD_INT 1
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: LIST
65819: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65820: LD_ADDR_VAR 0 55
65824: PUSH
65825: LD_INT 3
65827: PUSH
65828: LD_INT 2
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: LD_INT 3
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 2
65847: PUSH
65848: LD_INT 3
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: LIST
65859: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65860: LD_ADDR_VAR 0 56
65864: PUSH
65865: LD_INT 1
65867: PUSH
65868: LD_INT 3
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: LD_INT 3
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 1
65887: NEG
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65901: LD_ADDR_VAR 0 57
65905: PUSH
65906: LD_INT 2
65908: NEG
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 3
65919: NEG
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 3
65930: NEG
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65945: LD_ADDR_VAR 0 58
65949: PUSH
65950: LD_INT 2
65952: NEG
65953: PUSH
65954: LD_INT 3
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: NEG
65965: PUSH
65966: LD_INT 2
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 3
65976: NEG
65977: PUSH
65978: LD_INT 3
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: LIST
65990: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65991: LD_ADDR_VAR 0 59
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: LD_INT 2
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: LD_INT 2
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 1
66021: PUSH
66022: LD_INT 1
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: LIST
66034: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66035: LD_ADDR_VAR 0 60
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 2
66063: PUSH
66064: LD_INT 1
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66076: LD_ADDR_VAR 0 61
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: LD_INT 1
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: LD_INT 2
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: LD_INT 2
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: LIST
66115: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66116: LD_ADDR_VAR 0 62
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: LD_INT 2
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 0
66133: PUSH
66134: LD_INT 2
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 1
66143: NEG
66144: PUSH
66145: LD_INT 1
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: LIST
66156: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66157: LD_ADDR_VAR 0 63
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 2
66175: NEG
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: LD_INT 1
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66201: LD_ADDR_VAR 0 64
66205: PUSH
66206: LD_INT 1
66208: NEG
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 2
66220: NEG
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 2
66232: NEG
66233: PUSH
66234: LD_INT 2
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: LIST
66246: ST_TO_ADDR
// end ; 2 :
66247: GO 69513
66249: LD_INT 2
66251: DOUBLE
66252: EQUAL
66253: IFTRUE 66257
66255: GO 69512
66257: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66258: LD_ADDR_VAR 0 29
66262: PUSH
66263: LD_INT 4
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 4
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 5
66286: PUSH
66287: LD_INT 0
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 5
66296: PUSH
66297: LD_INT 1
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 4
66306: PUSH
66307: LD_INT 1
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 3
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 3
66326: PUSH
66327: LD_INT 1
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 3
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 5
66348: PUSH
66349: LD_INT 2
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 3
66358: PUSH
66359: LD_INT 3
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 3
66368: PUSH
66369: LD_INT 2
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 4
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 4
66388: PUSH
66389: LD_INT 4
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: PUSH
66399: LD_INT 4
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 2
66408: PUSH
66409: LD_INT 3
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: LD_INT 2
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 4
66428: PUSH
66429: LD_INT 2
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 2
66438: PUSH
66439: LD_INT 4
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 0
66448: PUSH
66449: LD_INT 4
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: LD_INT 3
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 1
66468: PUSH
66469: LD_INT 4
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: LD_INT 5
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: LD_INT 5
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: LD_INT 4
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 3
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: LD_INT 5
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 2
66530: NEG
66531: PUSH
66532: LD_INT 3
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 3
66541: NEG
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 3
66552: NEG
66553: PUSH
66554: LD_INT 1
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 2
66564: NEG
66565: PUSH
66566: LD_INT 0
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 2
66575: NEG
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 3
66586: NEG
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 4
66597: NEG
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 4
66608: NEG
66609: PUSH
66610: LD_INT 1
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 4
66620: NEG
66621: PUSH
66622: LD_INT 2
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: LD_INT 2
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 4
66643: NEG
66644: PUSH
66645: LD_INT 4
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 4
66655: NEG
66656: PUSH
66657: LD_INT 5
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: NEG
66668: PUSH
66669: LD_INT 4
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 3
66679: NEG
66680: PUSH
66681: LD_INT 3
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 4
66691: NEG
66692: PUSH
66693: LD_INT 3
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 5
66703: NEG
66704: PUSH
66705: LD_INT 4
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 5
66715: NEG
66716: PUSH
66717: LD_INT 5
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 3
66727: NEG
66728: PUSH
66729: LD_INT 5
66731: NEG
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 5
66739: NEG
66740: PUSH
66741: LD_INT 3
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66796: LD_ADDR_VAR 0 30
66800: PUSH
66801: LD_INT 4
66803: PUSH
66804: LD_INT 4
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 4
66813: PUSH
66814: LD_INT 3
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 5
66823: PUSH
66824: LD_INT 4
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 5
66833: PUSH
66834: LD_INT 5
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 4
66843: PUSH
66844: LD_INT 5
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 3
66853: PUSH
66854: LD_INT 4
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 3
66863: PUSH
66864: LD_INT 3
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 5
66873: PUSH
66874: LD_INT 3
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 3
66883: PUSH
66884: LD_INT 5
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 0
66893: PUSH
66894: LD_INT 3
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: LD_INT 2
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: LD_INT 3
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: LD_INT 4
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: LD_INT 4
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: NEG
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: NEG
66955: PUSH
66956: LD_INT 2
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 2
66965: PUSH
66966: LD_INT 4
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 2
66975: NEG
66976: PUSH
66977: LD_INT 2
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 4
66986: NEG
66987: PUSH
66988: LD_INT 0
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 4
66997: NEG
66998: PUSH
66999: LD_INT 1
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 3
67009: NEG
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 3
67020: NEG
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 4
67031: NEG
67032: PUSH
67033: LD_INT 1
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 5
67042: NEG
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 5
67053: NEG
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 5
67065: NEG
67066: PUSH
67067: LD_INT 2
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 3
67077: NEG
67078: PUSH
67079: LD_INT 2
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 3
67088: NEG
67089: PUSH
67090: LD_INT 3
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 3
67100: NEG
67101: PUSH
67102: LD_INT 4
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 2
67112: NEG
67113: PUSH
67114: LD_INT 3
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 2
67124: NEG
67125: PUSH
67126: LD_INT 2
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: NEG
67137: PUSH
67138: LD_INT 2
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 4
67148: NEG
67149: PUSH
67150: LD_INT 3
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 4
67160: NEG
67161: PUSH
67162: LD_INT 4
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 2
67172: NEG
67173: PUSH
67174: LD_INT 4
67176: NEG
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 4
67184: NEG
67185: PUSH
67186: LD_INT 2
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: LD_INT 4
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: LD_INT 5
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: LD_INT 4
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: LD_INT 3
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: LD_INT 3
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 1
67251: NEG
67252: PUSH
67253: LD_INT 4
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 1
67263: NEG
67264: PUSH
67265: LD_INT 5
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 2
67275: PUSH
67276: LD_INT 3
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 2
67286: NEG
67287: PUSH
67288: LD_INT 5
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67343: LD_ADDR_VAR 0 31
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: LD_INT 4
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: LD_INT 3
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 1
67370: PUSH
67371: LD_INT 4
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: LD_INT 5
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: LD_INT 5
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 1
67400: NEG
67401: PUSH
67402: LD_INT 4
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: LD_INT 3
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 2
67422: PUSH
67423: LD_INT 5
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 2
67432: NEG
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 3
67443: NEG
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 3
67454: NEG
67455: PUSH
67456: LD_INT 1
67458: NEG
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 2
67466: NEG
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 2
67477: NEG
67478: PUSH
67479: LD_INT 1
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 3
67488: NEG
67489: PUSH
67490: LD_INT 1
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 4
67499: NEG
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 4
67510: NEG
67511: PUSH
67512: LD_INT 1
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 4
67522: NEG
67523: PUSH
67524: LD_INT 2
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 2
67534: NEG
67535: PUSH
67536: LD_INT 2
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 4
67545: NEG
67546: PUSH
67547: LD_INT 4
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 4
67557: NEG
67558: PUSH
67559: LD_INT 5
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 3
67569: NEG
67570: PUSH
67571: LD_INT 4
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 3
67581: NEG
67582: PUSH
67583: LD_INT 3
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 4
67593: NEG
67594: PUSH
67595: LD_INT 3
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 5
67605: NEG
67606: PUSH
67607: LD_INT 4
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 5
67617: NEG
67618: PUSH
67619: LD_INT 5
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 3
67629: NEG
67630: PUSH
67631: LD_INT 5
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 5
67641: NEG
67642: PUSH
67643: LD_INT 3
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: LD_INT 4
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: LD_INT 3
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 1
67686: PUSH
67687: LD_INT 2
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 0
67697: PUSH
67698: LD_INT 2
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 1
67708: NEG
67709: PUSH
67710: LD_INT 3
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: LD_INT 4
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 2
67732: PUSH
67733: LD_INT 2
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 2
67743: NEG
67744: PUSH
67745: LD_INT 4
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 4
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 4
67765: PUSH
67766: LD_INT 1
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 5
67776: PUSH
67777: LD_INT 0
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 5
67786: PUSH
67787: LD_INT 1
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 4
67796: PUSH
67797: LD_INT 1
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 3
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 3
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 3
67827: PUSH
67828: LD_INT 2
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 5
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67893: LD_ADDR_VAR 0 32
67897: PUSH
67898: LD_INT 4
67900: NEG
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 4
67911: NEG
67912: PUSH
67913: LD_INT 1
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 3
67923: NEG
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: LD_INT 1
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 4
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 5
67956: NEG
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 5
67967: NEG
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 5
67979: NEG
67980: PUSH
67981: LD_INT 2
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 3
67991: NEG
67992: PUSH
67993: LD_INT 2
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 3
68002: NEG
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 3
68014: NEG
68015: PUSH
68016: LD_INT 4
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: LD_INT 3
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 2
68038: NEG
68039: PUSH
68040: LD_INT 2
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: LD_INT 2
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 4
68062: NEG
68063: PUSH
68064: LD_INT 3
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 4
68074: NEG
68075: PUSH
68076: LD_INT 4
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 2
68086: NEG
68087: PUSH
68088: LD_INT 4
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 4
68098: NEG
68099: PUSH
68100: LD_INT 2
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: LD_INT 4
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: LD_INT 5
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 1
68132: PUSH
68133: LD_INT 4
68135: NEG
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: LD_INT 3
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: LD_INT 3
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 1
68165: NEG
68166: PUSH
68167: LD_INT 4
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: NEG
68178: PUSH
68179: LD_INT 5
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: LD_INT 3
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 2
68200: NEG
68201: PUSH
68202: LD_INT 5
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 3
68212: PUSH
68213: LD_INT 0
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 3
68222: PUSH
68223: LD_INT 1
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 4
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 4
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 3
68253: PUSH
68254: LD_INT 1
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 2
68263: PUSH
68264: LD_INT 0
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 2
68273: PUSH
68274: LD_INT 1
68276: NEG
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 2
68284: PUSH
68285: LD_INT 2
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 4
68295: PUSH
68296: LD_INT 2
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 4
68305: PUSH
68306: LD_INT 4
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 4
68315: PUSH
68316: LD_INT 3
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 5
68325: PUSH
68326: LD_INT 4
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 5
68335: PUSH
68336: LD_INT 5
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 4
68345: PUSH
68346: LD_INT 5
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 3
68355: PUSH
68356: LD_INT 4
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 3
68365: PUSH
68366: LD_INT 3
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 5
68375: PUSH
68376: LD_INT 3
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 3
68385: PUSH
68386: LD_INT 5
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68440: LD_ADDR_VAR 0 33
68444: PUSH
68445: LD_INT 4
68447: NEG
68448: PUSH
68449: LD_INT 4
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 4
68459: NEG
68460: PUSH
68461: LD_INT 5
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 3
68471: NEG
68472: PUSH
68473: LD_INT 4
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 3
68483: NEG
68484: PUSH
68485: LD_INT 3
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 4
68495: NEG
68496: PUSH
68497: LD_INT 3
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 5
68507: NEG
68508: PUSH
68509: LD_INT 4
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 5
68519: NEG
68520: PUSH
68521: LD_INT 5
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 3
68531: NEG
68532: PUSH
68533: LD_INT 5
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 5
68543: NEG
68544: PUSH
68545: LD_INT 3
68547: NEG
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 0
68555: PUSH
68556: LD_INT 3
68558: NEG
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: LD_INT 4
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 1
68577: PUSH
68578: LD_INT 3
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: LD_INT 2
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: LD_INT 2
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 1
68610: NEG
68611: PUSH
68612: LD_INT 3
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 1
68622: NEG
68623: PUSH
68624: LD_INT 4
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 2
68634: PUSH
68635: LD_INT 2
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 2
68645: NEG
68646: PUSH
68647: LD_INT 4
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 4
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 4
68667: PUSH
68668: LD_INT 1
68670: NEG
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 5
68678: PUSH
68679: LD_INT 0
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 5
68688: PUSH
68689: LD_INT 1
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 4
68698: PUSH
68699: LD_INT 1
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 3
68708: PUSH
68709: LD_INT 0
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 3
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 3
68729: PUSH
68730: LD_INT 2
68732: NEG
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 5
68740: PUSH
68741: LD_INT 2
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 3
68750: PUSH
68751: LD_INT 3
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 3
68760: PUSH
68761: LD_INT 2
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 4
68770: PUSH
68771: LD_INT 3
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 4
68780: PUSH
68781: LD_INT 4
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 3
68790: PUSH
68791: LD_INT 4
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 2
68800: PUSH
68801: LD_INT 3
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 2
68810: PUSH
68811: LD_INT 2
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 4
68820: PUSH
68821: LD_INT 2
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 2
68830: PUSH
68831: LD_INT 4
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 0
68840: PUSH
68841: LD_INT 4
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 0
68850: PUSH
68851: LD_INT 3
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 1
68860: PUSH
68861: LD_INT 4
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 1
68870: PUSH
68871: LD_INT 5
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: LD_INT 5
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 1
68890: NEG
68891: PUSH
68892: LD_INT 4
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: PUSH
68903: LD_INT 3
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 2
68912: PUSH
68913: LD_INT 5
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 2
68922: NEG
68923: PUSH
68924: LD_INT 3
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68978: LD_ADDR_VAR 0 34
68982: PUSH
68983: LD_INT 0
68985: PUSH
68986: LD_INT 4
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 0
68996: PUSH
68997: LD_INT 5
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 1
69007: PUSH
69008: LD_INT 4
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: PUSH
69019: LD_INT 3
69021: NEG
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 0
69029: PUSH
69030: LD_INT 3
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 1
69040: NEG
69041: PUSH
69042: LD_INT 4
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 1
69052: NEG
69053: PUSH
69054: LD_INT 5
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 2
69064: PUSH
69065: LD_INT 3
69067: NEG
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 2
69075: NEG
69076: PUSH
69077: LD_INT 5
69079: NEG
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 3
69087: PUSH
69088: LD_INT 0
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: LD_INT 1
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 4
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 4
69118: PUSH
69119: LD_INT 1
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 3
69128: PUSH
69129: LD_INT 1
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 2
69138: PUSH
69139: LD_INT 0
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 2
69148: PUSH
69149: LD_INT 1
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 2
69159: PUSH
69160: LD_INT 2
69162: NEG
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 4
69170: PUSH
69171: LD_INT 2
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 4
69180: PUSH
69181: LD_INT 4
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 4
69190: PUSH
69191: LD_INT 3
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 5
69200: PUSH
69201: LD_INT 4
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 5
69210: PUSH
69211: LD_INT 5
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 4
69220: PUSH
69221: LD_INT 5
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 3
69230: PUSH
69231: LD_INT 4
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 3
69240: PUSH
69241: LD_INT 3
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 5
69250: PUSH
69251: LD_INT 3
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 3
69260: PUSH
69261: LD_INT 5
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: LD_INT 3
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 0
69280: PUSH
69281: LD_INT 2
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 1
69290: PUSH
69291: LD_INT 3
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: LD_INT 4
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 0
69310: PUSH
69311: LD_INT 4
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 1
69320: NEG
69321: PUSH
69322: LD_INT 3
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: NEG
69332: PUSH
69333: LD_INT 2
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 2
69342: PUSH
69343: LD_INT 4
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 2
69352: NEG
69353: PUSH
69354: LD_INT 2
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 4
69363: NEG
69364: PUSH
69365: LD_INT 0
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 4
69374: NEG
69375: PUSH
69376: LD_INT 1
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 3
69386: NEG
69387: PUSH
69388: LD_INT 0
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 3
69397: NEG
69398: PUSH
69399: LD_INT 1
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 4
69408: NEG
69409: PUSH
69410: LD_INT 1
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 5
69419: NEG
69420: PUSH
69421: LD_INT 0
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 5
69430: NEG
69431: PUSH
69432: LD_INT 1
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 5
69442: NEG
69443: PUSH
69444: LD_INT 2
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 3
69454: NEG
69455: PUSH
69456: LD_INT 2
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: ST_TO_ADDR
// end ; end ;
69510: GO 69513
69512: POP
// case btype of b_depot , b_warehouse :
69513: LD_VAR 0 1
69517: PUSH
69518: LD_INT 0
69520: DOUBLE
69521: EQUAL
69522: IFTRUE 69532
69524: LD_INT 1
69526: DOUBLE
69527: EQUAL
69528: IFTRUE 69532
69530: GO 69733
69532: POP
// case nation of nation_american :
69533: LD_VAR 0 5
69537: PUSH
69538: LD_INT 1
69540: DOUBLE
69541: EQUAL
69542: IFTRUE 69546
69544: GO 69602
69546: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69547: LD_ADDR_VAR 0 9
69551: PUSH
69552: LD_VAR 0 11
69556: PUSH
69557: LD_VAR 0 12
69561: PUSH
69562: LD_VAR 0 13
69566: PUSH
69567: LD_VAR 0 14
69571: PUSH
69572: LD_VAR 0 15
69576: PUSH
69577: LD_VAR 0 16
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: PUSH
69590: LD_VAR 0 4
69594: PUSH
69595: LD_INT 1
69597: PLUS
69598: ARRAY
69599: ST_TO_ADDR
69600: GO 69731
69602: LD_INT 2
69604: DOUBLE
69605: EQUAL
69606: IFTRUE 69610
69608: GO 69666
69610: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69611: LD_ADDR_VAR 0 9
69615: PUSH
69616: LD_VAR 0 17
69620: PUSH
69621: LD_VAR 0 18
69625: PUSH
69626: LD_VAR 0 19
69630: PUSH
69631: LD_VAR 0 20
69635: PUSH
69636: LD_VAR 0 21
69640: PUSH
69641: LD_VAR 0 22
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: PUSH
69654: LD_VAR 0 4
69658: PUSH
69659: LD_INT 1
69661: PLUS
69662: ARRAY
69663: ST_TO_ADDR
69664: GO 69731
69666: LD_INT 3
69668: DOUBLE
69669: EQUAL
69670: IFTRUE 69674
69672: GO 69730
69674: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69675: LD_ADDR_VAR 0 9
69679: PUSH
69680: LD_VAR 0 23
69684: PUSH
69685: LD_VAR 0 24
69689: PUSH
69690: LD_VAR 0 25
69694: PUSH
69695: LD_VAR 0 26
69699: PUSH
69700: LD_VAR 0 27
69704: PUSH
69705: LD_VAR 0 28
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: PUSH
69718: LD_VAR 0 4
69722: PUSH
69723: LD_INT 1
69725: PLUS
69726: ARRAY
69727: ST_TO_ADDR
69728: GO 69731
69730: POP
69731: GO 70286
69733: LD_INT 2
69735: DOUBLE
69736: EQUAL
69737: IFTRUE 69747
69739: LD_INT 3
69741: DOUBLE
69742: EQUAL
69743: IFTRUE 69747
69745: GO 69803
69747: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69748: LD_ADDR_VAR 0 9
69752: PUSH
69753: LD_VAR 0 29
69757: PUSH
69758: LD_VAR 0 30
69762: PUSH
69763: LD_VAR 0 31
69767: PUSH
69768: LD_VAR 0 32
69772: PUSH
69773: LD_VAR 0 33
69777: PUSH
69778: LD_VAR 0 34
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: PUSH
69791: LD_VAR 0 4
69795: PUSH
69796: LD_INT 1
69798: PLUS
69799: ARRAY
69800: ST_TO_ADDR
69801: GO 70286
69803: LD_INT 16
69805: DOUBLE
69806: EQUAL
69807: IFTRUE 69865
69809: LD_INT 17
69811: DOUBLE
69812: EQUAL
69813: IFTRUE 69865
69815: LD_INT 18
69817: DOUBLE
69818: EQUAL
69819: IFTRUE 69865
69821: LD_INT 19
69823: DOUBLE
69824: EQUAL
69825: IFTRUE 69865
69827: LD_INT 22
69829: DOUBLE
69830: EQUAL
69831: IFTRUE 69865
69833: LD_INT 20
69835: DOUBLE
69836: EQUAL
69837: IFTRUE 69865
69839: LD_INT 21
69841: DOUBLE
69842: EQUAL
69843: IFTRUE 69865
69845: LD_INT 23
69847: DOUBLE
69848: EQUAL
69849: IFTRUE 69865
69851: LD_INT 24
69853: DOUBLE
69854: EQUAL
69855: IFTRUE 69865
69857: LD_INT 25
69859: DOUBLE
69860: EQUAL
69861: IFTRUE 69865
69863: GO 69921
69865: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69866: LD_ADDR_VAR 0 9
69870: PUSH
69871: LD_VAR 0 35
69875: PUSH
69876: LD_VAR 0 36
69880: PUSH
69881: LD_VAR 0 37
69885: PUSH
69886: LD_VAR 0 38
69890: PUSH
69891: LD_VAR 0 39
69895: PUSH
69896: LD_VAR 0 40
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: PUSH
69909: LD_VAR 0 4
69913: PUSH
69914: LD_INT 1
69916: PLUS
69917: ARRAY
69918: ST_TO_ADDR
69919: GO 70286
69921: LD_INT 6
69923: DOUBLE
69924: EQUAL
69925: IFTRUE 69977
69927: LD_INT 7
69929: DOUBLE
69930: EQUAL
69931: IFTRUE 69977
69933: LD_INT 8
69935: DOUBLE
69936: EQUAL
69937: IFTRUE 69977
69939: LD_INT 13
69941: DOUBLE
69942: EQUAL
69943: IFTRUE 69977
69945: LD_INT 12
69947: DOUBLE
69948: EQUAL
69949: IFTRUE 69977
69951: LD_INT 15
69953: DOUBLE
69954: EQUAL
69955: IFTRUE 69977
69957: LD_INT 11
69959: DOUBLE
69960: EQUAL
69961: IFTRUE 69977
69963: LD_INT 14
69965: DOUBLE
69966: EQUAL
69967: IFTRUE 69977
69969: LD_INT 10
69971: DOUBLE
69972: EQUAL
69973: IFTRUE 69977
69975: GO 70033
69977: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69978: LD_ADDR_VAR 0 9
69982: PUSH
69983: LD_VAR 0 41
69987: PUSH
69988: LD_VAR 0 42
69992: PUSH
69993: LD_VAR 0 43
69997: PUSH
69998: LD_VAR 0 44
70002: PUSH
70003: LD_VAR 0 45
70007: PUSH
70008: LD_VAR 0 46
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: PUSH
70021: LD_VAR 0 4
70025: PUSH
70026: LD_INT 1
70028: PLUS
70029: ARRAY
70030: ST_TO_ADDR
70031: GO 70286
70033: LD_INT 36
70035: DOUBLE
70036: EQUAL
70037: IFTRUE 70041
70039: GO 70097
70041: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70042: LD_ADDR_VAR 0 9
70046: PUSH
70047: LD_VAR 0 47
70051: PUSH
70052: LD_VAR 0 48
70056: PUSH
70057: LD_VAR 0 49
70061: PUSH
70062: LD_VAR 0 50
70066: PUSH
70067: LD_VAR 0 51
70071: PUSH
70072: LD_VAR 0 52
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: PUSH
70085: LD_VAR 0 4
70089: PUSH
70090: LD_INT 1
70092: PLUS
70093: ARRAY
70094: ST_TO_ADDR
70095: GO 70286
70097: LD_INT 4
70099: DOUBLE
70100: EQUAL
70101: IFTRUE 70123
70103: LD_INT 5
70105: DOUBLE
70106: EQUAL
70107: IFTRUE 70123
70109: LD_INT 34
70111: DOUBLE
70112: EQUAL
70113: IFTRUE 70123
70115: LD_INT 37
70117: DOUBLE
70118: EQUAL
70119: IFTRUE 70123
70121: GO 70179
70123: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70124: LD_ADDR_VAR 0 9
70128: PUSH
70129: LD_VAR 0 53
70133: PUSH
70134: LD_VAR 0 54
70138: PUSH
70139: LD_VAR 0 55
70143: PUSH
70144: LD_VAR 0 56
70148: PUSH
70149: LD_VAR 0 57
70153: PUSH
70154: LD_VAR 0 58
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: PUSH
70167: LD_VAR 0 4
70171: PUSH
70172: LD_INT 1
70174: PLUS
70175: ARRAY
70176: ST_TO_ADDR
70177: GO 70286
70179: LD_INT 31
70181: DOUBLE
70182: EQUAL
70183: IFTRUE 70229
70185: LD_INT 32
70187: DOUBLE
70188: EQUAL
70189: IFTRUE 70229
70191: LD_INT 33
70193: DOUBLE
70194: EQUAL
70195: IFTRUE 70229
70197: LD_INT 27
70199: DOUBLE
70200: EQUAL
70201: IFTRUE 70229
70203: LD_INT 26
70205: DOUBLE
70206: EQUAL
70207: IFTRUE 70229
70209: LD_INT 28
70211: DOUBLE
70212: EQUAL
70213: IFTRUE 70229
70215: LD_INT 29
70217: DOUBLE
70218: EQUAL
70219: IFTRUE 70229
70221: LD_INT 30
70223: DOUBLE
70224: EQUAL
70225: IFTRUE 70229
70227: GO 70285
70229: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70230: LD_ADDR_VAR 0 9
70234: PUSH
70235: LD_VAR 0 59
70239: PUSH
70240: LD_VAR 0 60
70244: PUSH
70245: LD_VAR 0 61
70249: PUSH
70250: LD_VAR 0 62
70254: PUSH
70255: LD_VAR 0 63
70259: PUSH
70260: LD_VAR 0 64
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: PUSH
70273: LD_VAR 0 4
70277: PUSH
70278: LD_INT 1
70280: PLUS
70281: ARRAY
70282: ST_TO_ADDR
70283: GO 70286
70285: POP
// temp_list2 = [ ] ;
70286: LD_ADDR_VAR 0 10
70290: PUSH
70291: EMPTY
70292: ST_TO_ADDR
// for i in temp_list do
70293: LD_ADDR_VAR 0 8
70297: PUSH
70298: LD_VAR 0 9
70302: PUSH
70303: FOR_IN
70304: IFFALSE 70356
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70306: LD_ADDR_VAR 0 10
70310: PUSH
70311: LD_VAR 0 10
70315: PUSH
70316: LD_VAR 0 8
70320: PUSH
70321: LD_INT 1
70323: ARRAY
70324: PUSH
70325: LD_VAR 0 2
70329: PLUS
70330: PUSH
70331: LD_VAR 0 8
70335: PUSH
70336: LD_INT 2
70338: ARRAY
70339: PUSH
70340: LD_VAR 0 3
70344: PLUS
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: EMPTY
70351: LIST
70352: ADD
70353: ST_TO_ADDR
70354: GO 70303
70356: POP
70357: POP
// result = temp_list2 ;
70358: LD_ADDR_VAR 0 7
70362: PUSH
70363: LD_VAR 0 10
70367: ST_TO_ADDR
// end ;
70368: LD_VAR 0 7
70372: RET
// export function EnemyInRange ( unit , dist ) ; begin
70373: LD_INT 0
70375: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70376: LD_ADDR_VAR 0 3
70380: PUSH
70381: LD_VAR 0 1
70385: PPUSH
70386: CALL_OW 255
70390: PPUSH
70391: LD_VAR 0 1
70395: PPUSH
70396: CALL_OW 250
70400: PPUSH
70401: LD_VAR 0 1
70405: PPUSH
70406: CALL_OW 251
70410: PPUSH
70411: LD_VAR 0 2
70415: PPUSH
70416: CALL 43769 0 4
70420: PUSH
70421: LD_INT 4
70423: ARRAY
70424: ST_TO_ADDR
// end ;
70425: LD_VAR 0 3
70429: RET
// export function PlayerSeeMe ( unit ) ; begin
70430: LD_INT 0
70432: PPUSH
// result := See ( your_side , unit ) ;
70433: LD_ADDR_VAR 0 2
70437: PUSH
70438: LD_OWVAR 2
70442: PPUSH
70443: LD_VAR 0 1
70447: PPUSH
70448: CALL_OW 292
70452: ST_TO_ADDR
// end ;
70453: LD_VAR 0 2
70457: RET
// export function ReverseDir ( unit ) ; begin
70458: LD_INT 0
70460: PPUSH
// if not unit then
70461: LD_VAR 0 1
70465: NOT
70466: IFFALSE 70470
// exit ;
70468: GO 70493
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70470: LD_ADDR_VAR 0 2
70474: PUSH
70475: LD_VAR 0 1
70479: PPUSH
70480: CALL_OW 254
70484: PUSH
70485: LD_INT 3
70487: PLUS
70488: PUSH
70489: LD_INT 6
70491: MOD
70492: ST_TO_ADDR
// end ;
70493: LD_VAR 0 2
70497: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70498: LD_INT 0
70500: PPUSH
70501: PPUSH
70502: PPUSH
70503: PPUSH
70504: PPUSH
// if not hexes then
70505: LD_VAR 0 2
70509: NOT
70510: IFFALSE 70514
// exit ;
70512: GO 70662
// dist := 9999 ;
70514: LD_ADDR_VAR 0 5
70518: PUSH
70519: LD_INT 9999
70521: ST_TO_ADDR
// for i = 1 to hexes do
70522: LD_ADDR_VAR 0 4
70526: PUSH
70527: DOUBLE
70528: LD_INT 1
70530: DEC
70531: ST_TO_ADDR
70532: LD_VAR 0 2
70536: PUSH
70537: FOR_TO
70538: IFFALSE 70650
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70540: LD_VAR 0 1
70544: PPUSH
70545: LD_VAR 0 2
70549: PUSH
70550: LD_VAR 0 4
70554: ARRAY
70555: PUSH
70556: LD_INT 1
70558: ARRAY
70559: PPUSH
70560: LD_VAR 0 2
70564: PUSH
70565: LD_VAR 0 4
70569: ARRAY
70570: PUSH
70571: LD_INT 2
70573: ARRAY
70574: PPUSH
70575: CALL_OW 297
70579: PUSH
70580: LD_VAR 0 5
70584: LESS
70585: IFFALSE 70648
// begin hex := hexes [ i ] ;
70587: LD_ADDR_VAR 0 7
70591: PUSH
70592: LD_VAR 0 2
70596: PUSH
70597: LD_VAR 0 4
70601: ARRAY
70602: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70603: LD_ADDR_VAR 0 5
70607: PUSH
70608: LD_VAR 0 1
70612: PPUSH
70613: LD_VAR 0 2
70617: PUSH
70618: LD_VAR 0 4
70622: ARRAY
70623: PUSH
70624: LD_INT 1
70626: ARRAY
70627: PPUSH
70628: LD_VAR 0 2
70632: PUSH
70633: LD_VAR 0 4
70637: ARRAY
70638: PUSH
70639: LD_INT 2
70641: ARRAY
70642: PPUSH
70643: CALL_OW 297
70647: ST_TO_ADDR
// end ; end ;
70648: GO 70537
70650: POP
70651: POP
// result := hex ;
70652: LD_ADDR_VAR 0 3
70656: PUSH
70657: LD_VAR 0 7
70661: ST_TO_ADDR
// end ;
70662: LD_VAR 0 3
70666: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70667: LD_INT 0
70669: PPUSH
70670: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70671: LD_VAR 0 1
70675: NOT
70676: PUSH
70677: LD_VAR 0 1
70681: PUSH
70682: LD_INT 21
70684: PUSH
70685: LD_INT 2
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 23
70694: PUSH
70695: LD_INT 2
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PPUSH
70706: CALL_OW 69
70710: IN
70711: NOT
70712: OR
70713: IFFALSE 70717
// exit ;
70715: GO 70764
// for i = 1 to 3 do
70717: LD_ADDR_VAR 0 3
70721: PUSH
70722: DOUBLE
70723: LD_INT 1
70725: DEC
70726: ST_TO_ADDR
70727: LD_INT 3
70729: PUSH
70730: FOR_TO
70731: IFFALSE 70762
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70733: LD_VAR 0 1
70737: PPUSH
70738: CALL_OW 250
70742: PPUSH
70743: LD_VAR 0 1
70747: PPUSH
70748: CALL_OW 251
70752: PPUSH
70753: LD_INT 1
70755: PPUSH
70756: CALL_OW 453
70760: GO 70730
70762: POP
70763: POP
// end ;
70764: LD_VAR 0 2
70768: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70769: LD_INT 0
70771: PPUSH
70772: PPUSH
70773: PPUSH
70774: PPUSH
70775: PPUSH
70776: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70777: LD_VAR 0 1
70781: NOT
70782: PUSH
70783: LD_VAR 0 2
70787: NOT
70788: OR
70789: PUSH
70790: LD_VAR 0 1
70794: PPUSH
70795: CALL_OW 314
70799: OR
70800: IFFALSE 70804
// exit ;
70802: GO 71245
// x := GetX ( enemy_unit ) ;
70804: LD_ADDR_VAR 0 7
70808: PUSH
70809: LD_VAR 0 2
70813: PPUSH
70814: CALL_OW 250
70818: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70819: LD_ADDR_VAR 0 8
70823: PUSH
70824: LD_VAR 0 2
70828: PPUSH
70829: CALL_OW 251
70833: ST_TO_ADDR
// if not x or not y then
70834: LD_VAR 0 7
70838: NOT
70839: PUSH
70840: LD_VAR 0 8
70844: NOT
70845: OR
70846: IFFALSE 70850
// exit ;
70848: GO 71245
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70850: LD_ADDR_VAR 0 6
70854: PUSH
70855: LD_VAR 0 7
70859: PPUSH
70860: LD_INT 0
70862: PPUSH
70863: LD_INT 4
70865: PPUSH
70866: CALL_OW 272
70870: PUSH
70871: LD_VAR 0 8
70875: PPUSH
70876: LD_INT 0
70878: PPUSH
70879: LD_INT 4
70881: PPUSH
70882: CALL_OW 273
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_VAR 0 7
70895: PPUSH
70896: LD_INT 1
70898: PPUSH
70899: LD_INT 4
70901: PPUSH
70902: CALL_OW 272
70906: PUSH
70907: LD_VAR 0 8
70911: PPUSH
70912: LD_INT 1
70914: PPUSH
70915: LD_INT 4
70917: PPUSH
70918: CALL_OW 273
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_VAR 0 7
70931: PPUSH
70932: LD_INT 2
70934: PPUSH
70935: LD_INT 4
70937: PPUSH
70938: CALL_OW 272
70942: PUSH
70943: LD_VAR 0 8
70947: PPUSH
70948: LD_INT 2
70950: PPUSH
70951: LD_INT 4
70953: PPUSH
70954: CALL_OW 273
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_VAR 0 7
70967: PPUSH
70968: LD_INT 3
70970: PPUSH
70971: LD_INT 4
70973: PPUSH
70974: CALL_OW 272
70978: PUSH
70979: LD_VAR 0 8
70983: PPUSH
70984: LD_INT 3
70986: PPUSH
70987: LD_INT 4
70989: PPUSH
70990: CALL_OW 273
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_VAR 0 7
71003: PPUSH
71004: LD_INT 4
71006: PPUSH
71007: LD_INT 4
71009: PPUSH
71010: CALL_OW 272
71014: PUSH
71015: LD_VAR 0 8
71019: PPUSH
71020: LD_INT 4
71022: PPUSH
71023: LD_INT 4
71025: PPUSH
71026: CALL_OW 273
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_VAR 0 7
71039: PPUSH
71040: LD_INT 5
71042: PPUSH
71043: LD_INT 4
71045: PPUSH
71046: CALL_OW 272
71050: PUSH
71051: LD_VAR 0 8
71055: PPUSH
71056: LD_INT 5
71058: PPUSH
71059: LD_INT 4
71061: PPUSH
71062: CALL_OW 273
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: ST_TO_ADDR
// for i = tmp downto 1 do
71079: LD_ADDR_VAR 0 4
71083: PUSH
71084: DOUBLE
71085: LD_VAR 0 6
71089: INC
71090: ST_TO_ADDR
71091: LD_INT 1
71093: PUSH
71094: FOR_DOWNTO
71095: IFFALSE 71196
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71097: LD_VAR 0 6
71101: PUSH
71102: LD_VAR 0 4
71106: ARRAY
71107: PUSH
71108: LD_INT 1
71110: ARRAY
71111: PPUSH
71112: LD_VAR 0 6
71116: PUSH
71117: LD_VAR 0 4
71121: ARRAY
71122: PUSH
71123: LD_INT 2
71125: ARRAY
71126: PPUSH
71127: CALL_OW 488
71131: NOT
71132: PUSH
71133: LD_VAR 0 6
71137: PUSH
71138: LD_VAR 0 4
71142: ARRAY
71143: PUSH
71144: LD_INT 1
71146: ARRAY
71147: PPUSH
71148: LD_VAR 0 6
71152: PUSH
71153: LD_VAR 0 4
71157: ARRAY
71158: PUSH
71159: LD_INT 2
71161: ARRAY
71162: PPUSH
71163: CALL_OW 428
71167: PUSH
71168: LD_INT 0
71170: NONEQUAL
71171: OR
71172: IFFALSE 71194
// tmp := Delete ( tmp , i ) ;
71174: LD_ADDR_VAR 0 6
71178: PUSH
71179: LD_VAR 0 6
71183: PPUSH
71184: LD_VAR 0 4
71188: PPUSH
71189: CALL_OW 3
71193: ST_TO_ADDR
71194: GO 71094
71196: POP
71197: POP
// j := GetClosestHex ( unit , tmp ) ;
71198: LD_ADDR_VAR 0 5
71202: PUSH
71203: LD_VAR 0 1
71207: PPUSH
71208: LD_VAR 0 6
71212: PPUSH
71213: CALL 70498 0 2
71217: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71218: LD_VAR 0 1
71222: PPUSH
71223: LD_VAR 0 5
71227: PUSH
71228: LD_INT 1
71230: ARRAY
71231: PPUSH
71232: LD_VAR 0 5
71236: PUSH
71237: LD_INT 2
71239: ARRAY
71240: PPUSH
71241: CALL_OW 111
// end ;
71245: LD_VAR 0 3
71249: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71250: LD_INT 0
71252: PPUSH
71253: PPUSH
71254: PPUSH
// uc_side = 0 ;
71255: LD_ADDR_OWVAR 20
71259: PUSH
71260: LD_INT 0
71262: ST_TO_ADDR
// uc_nation = 0 ;
71263: LD_ADDR_OWVAR 21
71267: PUSH
71268: LD_INT 0
71270: ST_TO_ADDR
// InitHc_All ( ) ;
71271: CALL_OW 584
// InitVc ;
71275: CALL_OW 20
// if mastodonts then
71279: LD_VAR 0 6
71283: IFFALSE 71350
// for i = 1 to mastodonts do
71285: LD_ADDR_VAR 0 11
71289: PUSH
71290: DOUBLE
71291: LD_INT 1
71293: DEC
71294: ST_TO_ADDR
71295: LD_VAR 0 6
71299: PUSH
71300: FOR_TO
71301: IFFALSE 71348
// begin vc_chassis := 31 ;
71303: LD_ADDR_OWVAR 37
71307: PUSH
71308: LD_INT 31
71310: ST_TO_ADDR
// vc_control := control_rider ;
71311: LD_ADDR_OWVAR 38
71315: PUSH
71316: LD_INT 4
71318: ST_TO_ADDR
// animal := CreateVehicle ;
71319: LD_ADDR_VAR 0 12
71323: PUSH
71324: CALL_OW 45
71328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71329: LD_VAR 0 12
71333: PPUSH
71334: LD_VAR 0 8
71338: PPUSH
71339: LD_INT 0
71341: PPUSH
71342: CALL 73485 0 3
// end ;
71346: GO 71300
71348: POP
71349: POP
// if horses then
71350: LD_VAR 0 5
71354: IFFALSE 71421
// for i = 1 to horses do
71356: LD_ADDR_VAR 0 11
71360: PUSH
71361: DOUBLE
71362: LD_INT 1
71364: DEC
71365: ST_TO_ADDR
71366: LD_VAR 0 5
71370: PUSH
71371: FOR_TO
71372: IFFALSE 71419
// begin hc_class := 21 ;
71374: LD_ADDR_OWVAR 28
71378: PUSH
71379: LD_INT 21
71381: ST_TO_ADDR
// hc_gallery :=  ;
71382: LD_ADDR_OWVAR 33
71386: PUSH
71387: LD_STRING 
71389: ST_TO_ADDR
// animal := CreateHuman ;
71390: LD_ADDR_VAR 0 12
71394: PUSH
71395: CALL_OW 44
71399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71400: LD_VAR 0 12
71404: PPUSH
71405: LD_VAR 0 8
71409: PPUSH
71410: LD_INT 0
71412: PPUSH
71413: CALL 73485 0 3
// end ;
71417: GO 71371
71419: POP
71420: POP
// if birds then
71421: LD_VAR 0 1
71425: IFFALSE 71492
// for i = 1 to birds do
71427: LD_ADDR_VAR 0 11
71431: PUSH
71432: DOUBLE
71433: LD_INT 1
71435: DEC
71436: ST_TO_ADDR
71437: LD_VAR 0 1
71441: PUSH
71442: FOR_TO
71443: IFFALSE 71490
// begin hc_class = 18 ;
71445: LD_ADDR_OWVAR 28
71449: PUSH
71450: LD_INT 18
71452: ST_TO_ADDR
// hc_gallery =  ;
71453: LD_ADDR_OWVAR 33
71457: PUSH
71458: LD_STRING 
71460: ST_TO_ADDR
// animal := CreateHuman ;
71461: LD_ADDR_VAR 0 12
71465: PUSH
71466: CALL_OW 44
71470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71471: LD_VAR 0 12
71475: PPUSH
71476: LD_VAR 0 8
71480: PPUSH
71481: LD_INT 0
71483: PPUSH
71484: CALL 73485 0 3
// end ;
71488: GO 71442
71490: POP
71491: POP
// if tigers then
71492: LD_VAR 0 2
71496: IFFALSE 71580
// for i = 1 to tigers do
71498: LD_ADDR_VAR 0 11
71502: PUSH
71503: DOUBLE
71504: LD_INT 1
71506: DEC
71507: ST_TO_ADDR
71508: LD_VAR 0 2
71512: PUSH
71513: FOR_TO
71514: IFFALSE 71578
// begin hc_class = class_tiger ;
71516: LD_ADDR_OWVAR 28
71520: PUSH
71521: LD_INT 14
71523: ST_TO_ADDR
// hc_gallery =  ;
71524: LD_ADDR_OWVAR 33
71528: PUSH
71529: LD_STRING 
71531: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71532: LD_ADDR_OWVAR 35
71536: PUSH
71537: LD_INT 7
71539: NEG
71540: PPUSH
71541: LD_INT 7
71543: PPUSH
71544: CALL_OW 12
71548: ST_TO_ADDR
// animal := CreateHuman ;
71549: LD_ADDR_VAR 0 12
71553: PUSH
71554: CALL_OW 44
71558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71559: LD_VAR 0 12
71563: PPUSH
71564: LD_VAR 0 8
71568: PPUSH
71569: LD_INT 0
71571: PPUSH
71572: CALL 73485 0 3
// end ;
71576: GO 71513
71578: POP
71579: POP
// if apemans then
71580: LD_VAR 0 3
71584: IFFALSE 71707
// for i = 1 to apemans do
71586: LD_ADDR_VAR 0 11
71590: PUSH
71591: DOUBLE
71592: LD_INT 1
71594: DEC
71595: ST_TO_ADDR
71596: LD_VAR 0 3
71600: PUSH
71601: FOR_TO
71602: IFFALSE 71705
// begin hc_class = class_apeman ;
71604: LD_ADDR_OWVAR 28
71608: PUSH
71609: LD_INT 12
71611: ST_TO_ADDR
// hc_gallery =  ;
71612: LD_ADDR_OWVAR 33
71616: PUSH
71617: LD_STRING 
71619: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71620: LD_ADDR_OWVAR 35
71624: PUSH
71625: LD_INT 2
71627: NEG
71628: PPUSH
71629: LD_INT 2
71631: PPUSH
71632: CALL_OW 12
71636: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71637: LD_ADDR_OWVAR 31
71641: PUSH
71642: LD_INT 1
71644: PPUSH
71645: LD_INT 3
71647: PPUSH
71648: CALL_OW 12
71652: PUSH
71653: LD_INT 1
71655: PPUSH
71656: LD_INT 3
71658: PPUSH
71659: CALL_OW 12
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: LD_INT 0
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: ST_TO_ADDR
// animal := CreateHuman ;
71676: LD_ADDR_VAR 0 12
71680: PUSH
71681: CALL_OW 44
71685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71686: LD_VAR 0 12
71690: PPUSH
71691: LD_VAR 0 8
71695: PPUSH
71696: LD_INT 0
71698: PPUSH
71699: CALL 73485 0 3
// end ;
71703: GO 71601
71705: POP
71706: POP
// if enchidnas then
71707: LD_VAR 0 4
71711: IFFALSE 71778
// for i = 1 to enchidnas do
71713: LD_ADDR_VAR 0 11
71717: PUSH
71718: DOUBLE
71719: LD_INT 1
71721: DEC
71722: ST_TO_ADDR
71723: LD_VAR 0 4
71727: PUSH
71728: FOR_TO
71729: IFFALSE 71776
// begin hc_class = 13 ;
71731: LD_ADDR_OWVAR 28
71735: PUSH
71736: LD_INT 13
71738: ST_TO_ADDR
// hc_gallery =  ;
71739: LD_ADDR_OWVAR 33
71743: PUSH
71744: LD_STRING 
71746: ST_TO_ADDR
// animal := CreateHuman ;
71747: LD_ADDR_VAR 0 12
71751: PUSH
71752: CALL_OW 44
71756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71757: LD_VAR 0 12
71761: PPUSH
71762: LD_VAR 0 8
71766: PPUSH
71767: LD_INT 0
71769: PPUSH
71770: CALL 73485 0 3
// end ;
71774: GO 71728
71776: POP
71777: POP
// if fishes then
71778: LD_VAR 0 7
71782: IFFALSE 71849
// for i = 1 to fishes do
71784: LD_ADDR_VAR 0 11
71788: PUSH
71789: DOUBLE
71790: LD_INT 1
71792: DEC
71793: ST_TO_ADDR
71794: LD_VAR 0 7
71798: PUSH
71799: FOR_TO
71800: IFFALSE 71847
// begin hc_class = 20 ;
71802: LD_ADDR_OWVAR 28
71806: PUSH
71807: LD_INT 20
71809: ST_TO_ADDR
// hc_gallery =  ;
71810: LD_ADDR_OWVAR 33
71814: PUSH
71815: LD_STRING 
71817: ST_TO_ADDR
// animal := CreateHuman ;
71818: LD_ADDR_VAR 0 12
71822: PUSH
71823: CALL_OW 44
71827: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71828: LD_VAR 0 12
71832: PPUSH
71833: LD_VAR 0 9
71837: PPUSH
71838: LD_INT 0
71840: PPUSH
71841: CALL 73485 0 3
// end ;
71845: GO 71799
71847: POP
71848: POP
// end ;
71849: LD_VAR 0 10
71853: RET
// export function WantHeal ( sci , unit ) ; begin
71854: LD_INT 0
71856: PPUSH
// if GetTaskList ( sci ) > 0 then
71857: LD_VAR 0 1
71861: PPUSH
71862: CALL_OW 437
71866: PUSH
71867: LD_INT 0
71869: GREATER
71870: IFFALSE 71940
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71872: LD_VAR 0 1
71876: PPUSH
71877: CALL_OW 437
71881: PUSH
71882: LD_INT 1
71884: ARRAY
71885: PUSH
71886: LD_INT 1
71888: ARRAY
71889: PUSH
71890: LD_STRING l
71892: EQUAL
71893: PUSH
71894: LD_VAR 0 1
71898: PPUSH
71899: CALL_OW 437
71903: PUSH
71904: LD_INT 1
71906: ARRAY
71907: PUSH
71908: LD_INT 4
71910: ARRAY
71911: PUSH
71912: LD_VAR 0 2
71916: EQUAL
71917: AND
71918: IFFALSE 71930
// result := true else
71920: LD_ADDR_VAR 0 3
71924: PUSH
71925: LD_INT 1
71927: ST_TO_ADDR
71928: GO 71938
// result := false ;
71930: LD_ADDR_VAR 0 3
71934: PUSH
71935: LD_INT 0
71937: ST_TO_ADDR
// end else
71938: GO 71948
// result := false ;
71940: LD_ADDR_VAR 0 3
71944: PUSH
71945: LD_INT 0
71947: ST_TO_ADDR
// end ;
71948: LD_VAR 0 3
71952: RET
// export function HealTarget ( sci ) ; begin
71953: LD_INT 0
71955: PPUSH
// if not sci then
71956: LD_VAR 0 1
71960: NOT
71961: IFFALSE 71965
// exit ;
71963: GO 72030
// result := 0 ;
71965: LD_ADDR_VAR 0 2
71969: PUSH
71970: LD_INT 0
71972: ST_TO_ADDR
// if GetTaskList ( sci ) then
71973: LD_VAR 0 1
71977: PPUSH
71978: CALL_OW 437
71982: IFFALSE 72030
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71984: LD_VAR 0 1
71988: PPUSH
71989: CALL_OW 437
71993: PUSH
71994: LD_INT 1
71996: ARRAY
71997: PUSH
71998: LD_INT 1
72000: ARRAY
72001: PUSH
72002: LD_STRING l
72004: EQUAL
72005: IFFALSE 72030
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72007: LD_ADDR_VAR 0 2
72011: PUSH
72012: LD_VAR 0 1
72016: PPUSH
72017: CALL_OW 437
72021: PUSH
72022: LD_INT 1
72024: ARRAY
72025: PUSH
72026: LD_INT 4
72028: ARRAY
72029: ST_TO_ADDR
// end ;
72030: LD_VAR 0 2
72034: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72035: LD_INT 0
72037: PPUSH
72038: PPUSH
72039: PPUSH
72040: PPUSH
// if not base_units then
72041: LD_VAR 0 1
72045: NOT
72046: IFFALSE 72050
// exit ;
72048: GO 72137
// result := false ;
72050: LD_ADDR_VAR 0 2
72054: PUSH
72055: LD_INT 0
72057: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72058: LD_ADDR_VAR 0 5
72062: PUSH
72063: LD_VAR 0 1
72067: PPUSH
72068: LD_INT 21
72070: PUSH
72071: LD_INT 3
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PPUSH
72078: CALL_OW 72
72082: ST_TO_ADDR
// if not tmp then
72083: LD_VAR 0 5
72087: NOT
72088: IFFALSE 72092
// exit ;
72090: GO 72137
// for i in tmp do
72092: LD_ADDR_VAR 0 3
72096: PUSH
72097: LD_VAR 0 5
72101: PUSH
72102: FOR_IN
72103: IFFALSE 72135
// begin result := EnemyInRange ( i , 22 ) ;
72105: LD_ADDR_VAR 0 2
72109: PUSH
72110: LD_VAR 0 3
72114: PPUSH
72115: LD_INT 22
72117: PPUSH
72118: CALL 70373 0 2
72122: ST_TO_ADDR
// if result then
72123: LD_VAR 0 2
72127: IFFALSE 72133
// exit ;
72129: POP
72130: POP
72131: GO 72137
// end ;
72133: GO 72102
72135: POP
72136: POP
// end ;
72137: LD_VAR 0 2
72141: RET
// export function FilterByTag ( units , tag ) ; begin
72142: LD_INT 0
72144: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72145: LD_ADDR_VAR 0 3
72149: PUSH
72150: LD_VAR 0 1
72154: PPUSH
72155: LD_INT 120
72157: PUSH
72158: LD_VAR 0 2
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PPUSH
72167: CALL_OW 72
72171: ST_TO_ADDR
// end ;
72172: LD_VAR 0 3
72176: RET
// export function IsDriver ( un ) ; begin
72177: LD_INT 0
72179: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72180: LD_ADDR_VAR 0 2
72184: PUSH
72185: LD_VAR 0 1
72189: PUSH
72190: LD_INT 55
72192: PUSH
72193: EMPTY
72194: LIST
72195: PPUSH
72196: CALL_OW 69
72200: IN
72201: ST_TO_ADDR
// end ;
72202: LD_VAR 0 2
72206: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72207: LD_INT 0
72209: PPUSH
72210: PPUSH
// list := [ ] ;
72211: LD_ADDR_VAR 0 5
72215: PUSH
72216: EMPTY
72217: ST_TO_ADDR
// case d of 0 :
72218: LD_VAR 0 3
72222: PUSH
72223: LD_INT 0
72225: DOUBLE
72226: EQUAL
72227: IFTRUE 72231
72229: GO 72364
72231: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72232: LD_ADDR_VAR 0 5
72236: PUSH
72237: LD_VAR 0 1
72241: PUSH
72242: LD_INT 4
72244: MINUS
72245: PUSH
72246: LD_VAR 0 2
72250: PUSH
72251: LD_INT 4
72253: MINUS
72254: PUSH
72255: LD_INT 2
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: LIST
72262: PUSH
72263: LD_VAR 0 1
72267: PUSH
72268: LD_INT 3
72270: MINUS
72271: PUSH
72272: LD_VAR 0 2
72276: PUSH
72277: LD_INT 1
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: LIST
72284: PUSH
72285: LD_VAR 0 1
72289: PUSH
72290: LD_INT 4
72292: PLUS
72293: PUSH
72294: LD_VAR 0 2
72298: PUSH
72299: LD_INT 4
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: LIST
72306: PUSH
72307: LD_VAR 0 1
72311: PUSH
72312: LD_INT 3
72314: PLUS
72315: PUSH
72316: LD_VAR 0 2
72320: PUSH
72321: LD_INT 3
72323: PLUS
72324: PUSH
72325: LD_INT 5
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: LIST
72332: PUSH
72333: LD_VAR 0 1
72337: PUSH
72338: LD_VAR 0 2
72342: PUSH
72343: LD_INT 4
72345: PLUS
72346: PUSH
72347: LD_INT 0
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: LIST
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: ST_TO_ADDR
// end ; 1 :
72362: GO 73062
72364: LD_INT 1
72366: DOUBLE
72367: EQUAL
72368: IFTRUE 72372
72370: GO 72505
72372: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72373: LD_ADDR_VAR 0 5
72377: PUSH
72378: LD_VAR 0 1
72382: PUSH
72383: LD_VAR 0 2
72387: PUSH
72388: LD_INT 4
72390: MINUS
72391: PUSH
72392: LD_INT 3
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: LIST
72399: PUSH
72400: LD_VAR 0 1
72404: PUSH
72405: LD_INT 3
72407: MINUS
72408: PUSH
72409: LD_VAR 0 2
72413: PUSH
72414: LD_INT 3
72416: MINUS
72417: PUSH
72418: LD_INT 2
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: LIST
72425: PUSH
72426: LD_VAR 0 1
72430: PUSH
72431: LD_INT 4
72433: MINUS
72434: PUSH
72435: LD_VAR 0 2
72439: PUSH
72440: LD_INT 1
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: LIST
72447: PUSH
72448: LD_VAR 0 1
72452: PUSH
72453: LD_VAR 0 2
72457: PUSH
72458: LD_INT 3
72460: PLUS
72461: PUSH
72462: LD_INT 0
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: LIST
72469: PUSH
72470: LD_VAR 0 1
72474: PUSH
72475: LD_INT 4
72477: PLUS
72478: PUSH
72479: LD_VAR 0 2
72483: PUSH
72484: LD_INT 4
72486: PLUS
72487: PUSH
72488: LD_INT 5
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: LIST
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: ST_TO_ADDR
// end ; 2 :
72503: GO 73062
72505: LD_INT 2
72507: DOUBLE
72508: EQUAL
72509: IFTRUE 72513
72511: GO 72642
72513: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72514: LD_ADDR_VAR 0 5
72518: PUSH
72519: LD_VAR 0 1
72523: PUSH
72524: LD_VAR 0 2
72528: PUSH
72529: LD_INT 3
72531: MINUS
72532: PUSH
72533: LD_INT 3
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: LIST
72540: PUSH
72541: LD_VAR 0 1
72545: PUSH
72546: LD_INT 4
72548: PLUS
72549: PUSH
72550: LD_VAR 0 2
72554: PUSH
72555: LD_INT 4
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: LIST
72562: PUSH
72563: LD_VAR 0 1
72567: PUSH
72568: LD_VAR 0 2
72572: PUSH
72573: LD_INT 4
72575: PLUS
72576: PUSH
72577: LD_INT 0
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: LIST
72584: PUSH
72585: LD_VAR 0 1
72589: PUSH
72590: LD_INT 3
72592: MINUS
72593: PUSH
72594: LD_VAR 0 2
72598: PUSH
72599: LD_INT 1
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: LIST
72606: PUSH
72607: LD_VAR 0 1
72611: PUSH
72612: LD_INT 4
72614: MINUS
72615: PUSH
72616: LD_VAR 0 2
72620: PUSH
72621: LD_INT 4
72623: MINUS
72624: PUSH
72625: LD_INT 2
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: LIST
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: ST_TO_ADDR
// end ; 3 :
72640: GO 73062
72642: LD_INT 3
72644: DOUBLE
72645: EQUAL
72646: IFTRUE 72650
72648: GO 72783
72650: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72651: LD_ADDR_VAR 0 5
72655: PUSH
72656: LD_VAR 0 1
72660: PUSH
72661: LD_INT 3
72663: PLUS
72664: PUSH
72665: LD_VAR 0 2
72669: PUSH
72670: LD_INT 4
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: LIST
72677: PUSH
72678: LD_VAR 0 1
72682: PUSH
72683: LD_INT 4
72685: PLUS
72686: PUSH
72687: LD_VAR 0 2
72691: PUSH
72692: LD_INT 4
72694: PLUS
72695: PUSH
72696: LD_INT 5
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: LIST
72703: PUSH
72704: LD_VAR 0 1
72708: PUSH
72709: LD_INT 4
72711: MINUS
72712: PUSH
72713: LD_VAR 0 2
72717: PUSH
72718: LD_INT 1
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: LIST
72725: PUSH
72726: LD_VAR 0 1
72730: PUSH
72731: LD_VAR 0 2
72735: PUSH
72736: LD_INT 4
72738: MINUS
72739: PUSH
72740: LD_INT 3
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: LIST
72747: PUSH
72748: LD_VAR 0 1
72752: PUSH
72753: LD_INT 3
72755: MINUS
72756: PUSH
72757: LD_VAR 0 2
72761: PUSH
72762: LD_INT 3
72764: MINUS
72765: PUSH
72766: LD_INT 2
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: LIST
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: ST_TO_ADDR
// end ; 4 :
72781: GO 73062
72783: LD_INT 4
72785: DOUBLE
72786: EQUAL
72787: IFTRUE 72791
72789: GO 72924
72791: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72792: LD_ADDR_VAR 0 5
72796: PUSH
72797: LD_VAR 0 1
72801: PUSH
72802: LD_VAR 0 2
72806: PUSH
72807: LD_INT 4
72809: PLUS
72810: PUSH
72811: LD_INT 0
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: LIST
72818: PUSH
72819: LD_VAR 0 1
72823: PUSH
72824: LD_INT 3
72826: PLUS
72827: PUSH
72828: LD_VAR 0 2
72832: PUSH
72833: LD_INT 3
72835: PLUS
72836: PUSH
72837: LD_INT 5
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: LIST
72844: PUSH
72845: LD_VAR 0 1
72849: PUSH
72850: LD_INT 4
72852: PLUS
72853: PUSH
72854: LD_VAR 0 2
72858: PUSH
72859: LD_INT 4
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: LIST
72866: PUSH
72867: LD_VAR 0 1
72871: PUSH
72872: LD_VAR 0 2
72876: PUSH
72877: LD_INT 3
72879: MINUS
72880: PUSH
72881: LD_INT 3
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: LIST
72888: PUSH
72889: LD_VAR 0 1
72893: PUSH
72894: LD_INT 4
72896: MINUS
72897: PUSH
72898: LD_VAR 0 2
72902: PUSH
72903: LD_INT 4
72905: MINUS
72906: PUSH
72907: LD_INT 2
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: LIST
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: ST_TO_ADDR
// end ; 5 :
72922: GO 73062
72924: LD_INT 5
72926: DOUBLE
72927: EQUAL
72928: IFTRUE 72932
72930: GO 73061
72932: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72933: LD_ADDR_VAR 0 5
72937: PUSH
72938: LD_VAR 0 1
72942: PUSH
72943: LD_INT 4
72945: MINUS
72946: PUSH
72947: LD_VAR 0 2
72951: PUSH
72952: LD_INT 1
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: LIST
72959: PUSH
72960: LD_VAR 0 1
72964: PUSH
72965: LD_VAR 0 2
72969: PUSH
72970: LD_INT 4
72972: MINUS
72973: PUSH
72974: LD_INT 3
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: LIST
72981: PUSH
72982: LD_VAR 0 1
72986: PUSH
72987: LD_INT 4
72989: PLUS
72990: PUSH
72991: LD_VAR 0 2
72995: PUSH
72996: LD_INT 4
72998: PLUS
72999: PUSH
73000: LD_INT 5
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: LIST
73007: PUSH
73008: LD_VAR 0 1
73012: PUSH
73013: LD_INT 3
73015: PLUS
73016: PUSH
73017: LD_VAR 0 2
73021: PUSH
73022: LD_INT 4
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: LIST
73029: PUSH
73030: LD_VAR 0 1
73034: PUSH
73035: LD_VAR 0 2
73039: PUSH
73040: LD_INT 3
73042: PLUS
73043: PUSH
73044: LD_INT 0
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: LIST
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: ST_TO_ADDR
// end ; end ;
73059: GO 73062
73061: POP
// result := list ;
73062: LD_ADDR_VAR 0 4
73066: PUSH
73067: LD_VAR 0 5
73071: ST_TO_ADDR
// end ;
73072: LD_VAR 0 4
73076: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73077: LD_INT 0
73079: PPUSH
73080: PPUSH
73081: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73082: LD_VAR 0 1
73086: NOT
73087: PUSH
73088: LD_VAR 0 2
73092: PUSH
73093: LD_INT 1
73095: PUSH
73096: LD_INT 2
73098: PUSH
73099: LD_INT 3
73101: PUSH
73102: LD_INT 4
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: IN
73111: NOT
73112: OR
73113: IFFALSE 73117
// exit ;
73115: GO 73209
// tmp := [ ] ;
73117: LD_ADDR_VAR 0 5
73121: PUSH
73122: EMPTY
73123: ST_TO_ADDR
// for i in units do
73124: LD_ADDR_VAR 0 4
73128: PUSH
73129: LD_VAR 0 1
73133: PUSH
73134: FOR_IN
73135: IFFALSE 73178
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73137: LD_ADDR_VAR 0 5
73141: PUSH
73142: LD_VAR 0 5
73146: PPUSH
73147: LD_VAR 0 5
73151: PUSH
73152: LD_INT 1
73154: PLUS
73155: PPUSH
73156: LD_VAR 0 4
73160: PPUSH
73161: LD_VAR 0 2
73165: PPUSH
73166: CALL_OW 259
73170: PPUSH
73171: CALL_OW 2
73175: ST_TO_ADDR
73176: GO 73134
73178: POP
73179: POP
// if not tmp then
73180: LD_VAR 0 5
73184: NOT
73185: IFFALSE 73189
// exit ;
73187: GO 73209
// result := SortListByListDesc ( units , tmp ) ;
73189: LD_ADDR_VAR 0 3
73193: PUSH
73194: LD_VAR 0 1
73198: PPUSH
73199: LD_VAR 0 5
73203: PPUSH
73204: CALL_OW 77
73208: ST_TO_ADDR
// end ;
73209: LD_VAR 0 3
73213: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73214: LD_INT 0
73216: PPUSH
73217: PPUSH
73218: PPUSH
// result := false ;
73219: LD_ADDR_VAR 0 3
73223: PUSH
73224: LD_INT 0
73226: ST_TO_ADDR
// x := GetX ( building ) ;
73227: LD_ADDR_VAR 0 4
73231: PUSH
73232: LD_VAR 0 2
73236: PPUSH
73237: CALL_OW 250
73241: ST_TO_ADDR
// y := GetY ( building ) ;
73242: LD_ADDR_VAR 0 5
73246: PUSH
73247: LD_VAR 0 2
73251: PPUSH
73252: CALL_OW 251
73256: ST_TO_ADDR
// if not building or not x or not y then
73257: LD_VAR 0 2
73261: NOT
73262: PUSH
73263: LD_VAR 0 4
73267: NOT
73268: OR
73269: PUSH
73270: LD_VAR 0 5
73274: NOT
73275: OR
73276: IFFALSE 73280
// exit ;
73278: GO 73372
// if GetTaskList ( unit ) then
73280: LD_VAR 0 1
73284: PPUSH
73285: CALL_OW 437
73289: IFFALSE 73372
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73291: LD_STRING e
73293: PUSH
73294: LD_VAR 0 1
73298: PPUSH
73299: CALL_OW 437
73303: PUSH
73304: LD_INT 1
73306: ARRAY
73307: PUSH
73308: LD_INT 1
73310: ARRAY
73311: EQUAL
73312: PUSH
73313: LD_VAR 0 4
73317: PUSH
73318: LD_VAR 0 1
73322: PPUSH
73323: CALL_OW 437
73327: PUSH
73328: LD_INT 1
73330: ARRAY
73331: PUSH
73332: LD_INT 2
73334: ARRAY
73335: EQUAL
73336: AND
73337: PUSH
73338: LD_VAR 0 5
73342: PUSH
73343: LD_VAR 0 1
73347: PPUSH
73348: CALL_OW 437
73352: PUSH
73353: LD_INT 1
73355: ARRAY
73356: PUSH
73357: LD_INT 3
73359: ARRAY
73360: EQUAL
73361: AND
73362: IFFALSE 73372
// result := true end ;
73364: LD_ADDR_VAR 0 3
73368: PUSH
73369: LD_INT 1
73371: ST_TO_ADDR
// end ;
73372: LD_VAR 0 3
73376: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73377: LD_INT 0
73379: PPUSH
// result := false ;
73380: LD_ADDR_VAR 0 4
73384: PUSH
73385: LD_INT 0
73387: ST_TO_ADDR
// if GetTaskList ( unit ) then
73388: LD_VAR 0 1
73392: PPUSH
73393: CALL_OW 437
73397: IFFALSE 73480
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73399: LD_STRING M
73401: PUSH
73402: LD_VAR 0 1
73406: PPUSH
73407: CALL_OW 437
73411: PUSH
73412: LD_INT 1
73414: ARRAY
73415: PUSH
73416: LD_INT 1
73418: ARRAY
73419: EQUAL
73420: PUSH
73421: LD_VAR 0 2
73425: PUSH
73426: LD_VAR 0 1
73430: PPUSH
73431: CALL_OW 437
73435: PUSH
73436: LD_INT 1
73438: ARRAY
73439: PUSH
73440: LD_INT 2
73442: ARRAY
73443: EQUAL
73444: AND
73445: PUSH
73446: LD_VAR 0 3
73450: PUSH
73451: LD_VAR 0 1
73455: PPUSH
73456: CALL_OW 437
73460: PUSH
73461: LD_INT 1
73463: ARRAY
73464: PUSH
73465: LD_INT 3
73467: ARRAY
73468: EQUAL
73469: AND
73470: IFFALSE 73480
// result := true ;
73472: LD_ADDR_VAR 0 4
73476: PUSH
73477: LD_INT 1
73479: ST_TO_ADDR
// end ; end ;
73480: LD_VAR 0 4
73484: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73485: LD_INT 0
73487: PPUSH
73488: PPUSH
73489: PPUSH
73490: PPUSH
// if not unit or not area then
73491: LD_VAR 0 1
73495: NOT
73496: PUSH
73497: LD_VAR 0 2
73501: NOT
73502: OR
73503: IFFALSE 73507
// exit ;
73505: GO 73671
// tmp := AreaToList ( area , i ) ;
73507: LD_ADDR_VAR 0 6
73511: PUSH
73512: LD_VAR 0 2
73516: PPUSH
73517: LD_VAR 0 5
73521: PPUSH
73522: CALL_OW 517
73526: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73527: LD_ADDR_VAR 0 5
73531: PUSH
73532: DOUBLE
73533: LD_INT 1
73535: DEC
73536: ST_TO_ADDR
73537: LD_VAR 0 6
73541: PUSH
73542: LD_INT 1
73544: ARRAY
73545: PUSH
73546: FOR_TO
73547: IFFALSE 73669
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73549: LD_ADDR_VAR 0 7
73553: PUSH
73554: LD_VAR 0 6
73558: PUSH
73559: LD_INT 1
73561: ARRAY
73562: PUSH
73563: LD_VAR 0 5
73567: ARRAY
73568: PUSH
73569: LD_VAR 0 6
73573: PUSH
73574: LD_INT 2
73576: ARRAY
73577: PUSH
73578: LD_VAR 0 5
73582: ARRAY
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73588: LD_VAR 0 7
73592: PUSH
73593: LD_INT 1
73595: ARRAY
73596: PPUSH
73597: LD_VAR 0 7
73601: PUSH
73602: LD_INT 2
73604: ARRAY
73605: PPUSH
73606: CALL_OW 428
73610: PUSH
73611: LD_INT 0
73613: EQUAL
73614: IFFALSE 73667
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73616: LD_VAR 0 1
73620: PPUSH
73621: LD_VAR 0 7
73625: PUSH
73626: LD_INT 1
73628: ARRAY
73629: PPUSH
73630: LD_VAR 0 7
73634: PUSH
73635: LD_INT 2
73637: ARRAY
73638: PPUSH
73639: LD_VAR 0 3
73643: PPUSH
73644: CALL_OW 48
// result := IsPlaced ( unit ) ;
73648: LD_ADDR_VAR 0 4
73652: PUSH
73653: LD_VAR 0 1
73657: PPUSH
73658: CALL_OW 305
73662: ST_TO_ADDR
// exit ;
73663: POP
73664: POP
73665: GO 73671
// end ; end ;
73667: GO 73546
73669: POP
73670: POP
// end ;
73671: LD_VAR 0 4
73675: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73676: LD_INT 0
73678: PPUSH
73679: PPUSH
73680: PPUSH
// if not side or side > 8 then
73681: LD_VAR 0 1
73685: NOT
73686: PUSH
73687: LD_VAR 0 1
73691: PUSH
73692: LD_INT 8
73694: GREATER
73695: OR
73696: IFFALSE 73700
// exit ;
73698: GO 73887
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73700: LD_ADDR_VAR 0 4
73704: PUSH
73705: LD_INT 22
73707: PUSH
73708: LD_VAR 0 1
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 21
73719: PUSH
73720: LD_INT 3
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: PPUSH
73731: CALL_OW 69
73735: ST_TO_ADDR
// if not tmp then
73736: LD_VAR 0 4
73740: NOT
73741: IFFALSE 73745
// exit ;
73743: GO 73887
// enable_addtolog := true ;
73745: LD_ADDR_OWVAR 81
73749: PUSH
73750: LD_INT 1
73752: ST_TO_ADDR
// AddToLog ( [ ) ;
73753: LD_STRING [
73755: PPUSH
73756: CALL_OW 561
// for i in tmp do
73760: LD_ADDR_VAR 0 3
73764: PUSH
73765: LD_VAR 0 4
73769: PUSH
73770: FOR_IN
73771: IFFALSE 73878
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73773: LD_STRING [
73775: PUSH
73776: LD_VAR 0 3
73780: PPUSH
73781: CALL_OW 266
73785: STR
73786: PUSH
73787: LD_STRING , 
73789: STR
73790: PUSH
73791: LD_VAR 0 3
73795: PPUSH
73796: CALL_OW 250
73800: STR
73801: PUSH
73802: LD_STRING , 
73804: STR
73805: PUSH
73806: LD_VAR 0 3
73810: PPUSH
73811: CALL_OW 251
73815: STR
73816: PUSH
73817: LD_STRING , 
73819: STR
73820: PUSH
73821: LD_VAR 0 3
73825: PPUSH
73826: CALL_OW 254
73830: STR
73831: PUSH
73832: LD_STRING , 
73834: STR
73835: PUSH
73836: LD_VAR 0 3
73840: PPUSH
73841: LD_INT 1
73843: PPUSH
73844: CALL_OW 268
73848: STR
73849: PUSH
73850: LD_STRING , 
73852: STR
73853: PUSH
73854: LD_VAR 0 3
73858: PPUSH
73859: LD_INT 2
73861: PPUSH
73862: CALL_OW 268
73866: STR
73867: PUSH
73868: LD_STRING ],
73870: STR
73871: PPUSH
73872: CALL_OW 561
// end ;
73876: GO 73770
73878: POP
73879: POP
// AddToLog ( ]; ) ;
73880: LD_STRING ];
73882: PPUSH
73883: CALL_OW 561
// end ;
73887: LD_VAR 0 2
73891: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73892: LD_INT 0
73894: PPUSH
73895: PPUSH
73896: PPUSH
73897: PPUSH
73898: PPUSH
// if not area or not rate or not max then
73899: LD_VAR 0 1
73903: NOT
73904: PUSH
73905: LD_VAR 0 2
73909: NOT
73910: OR
73911: PUSH
73912: LD_VAR 0 4
73916: NOT
73917: OR
73918: IFFALSE 73922
// exit ;
73920: GO 74111
// while 1 do
73922: LD_INT 1
73924: IFFALSE 74111
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73926: LD_ADDR_VAR 0 9
73930: PUSH
73931: LD_VAR 0 1
73935: PPUSH
73936: LD_INT 1
73938: PPUSH
73939: CALL_OW 287
73943: PUSH
73944: LD_INT 10
73946: MUL
73947: ST_TO_ADDR
// r := rate / 10 ;
73948: LD_ADDR_VAR 0 7
73952: PUSH
73953: LD_VAR 0 2
73957: PUSH
73958: LD_INT 10
73960: DIVREAL
73961: ST_TO_ADDR
// time := 1 1$00 ;
73962: LD_ADDR_VAR 0 8
73966: PUSH
73967: LD_INT 2100
73969: ST_TO_ADDR
// if amount < min then
73970: LD_VAR 0 9
73974: PUSH
73975: LD_VAR 0 3
73979: LESS
73980: IFFALSE 73998
// r := r * 2 else
73982: LD_ADDR_VAR 0 7
73986: PUSH
73987: LD_VAR 0 7
73991: PUSH
73992: LD_INT 2
73994: MUL
73995: ST_TO_ADDR
73996: GO 74024
// if amount > max then
73998: LD_VAR 0 9
74002: PUSH
74003: LD_VAR 0 4
74007: GREATER
74008: IFFALSE 74024
// r := r / 2 ;
74010: LD_ADDR_VAR 0 7
74014: PUSH
74015: LD_VAR 0 7
74019: PUSH
74020: LD_INT 2
74022: DIVREAL
74023: ST_TO_ADDR
// time := time / r ;
74024: LD_ADDR_VAR 0 8
74028: PUSH
74029: LD_VAR 0 8
74033: PUSH
74034: LD_VAR 0 7
74038: DIVREAL
74039: ST_TO_ADDR
// if time < 0 then
74040: LD_VAR 0 8
74044: PUSH
74045: LD_INT 0
74047: LESS
74048: IFFALSE 74065
// time := time * - 1 ;
74050: LD_ADDR_VAR 0 8
74054: PUSH
74055: LD_VAR 0 8
74059: PUSH
74060: LD_INT 1
74062: NEG
74063: MUL
74064: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74065: LD_VAR 0 8
74069: PUSH
74070: LD_INT 35
74072: PPUSH
74073: LD_INT 875
74075: PPUSH
74076: CALL_OW 12
74080: PLUS
74081: PPUSH
74082: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74086: LD_INT 1
74088: PPUSH
74089: LD_INT 5
74091: PPUSH
74092: CALL_OW 12
74096: PPUSH
74097: LD_VAR 0 1
74101: PPUSH
74102: LD_INT 1
74104: PPUSH
74105: CALL_OW 55
// end ;
74109: GO 73922
// end ;
74111: LD_VAR 0 5
74115: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74116: LD_INT 0
74118: PPUSH
74119: PPUSH
74120: PPUSH
74121: PPUSH
74122: PPUSH
74123: PPUSH
74124: PPUSH
74125: PPUSH
// if not turrets or not factories then
74126: LD_VAR 0 1
74130: NOT
74131: PUSH
74132: LD_VAR 0 2
74136: NOT
74137: OR
74138: IFFALSE 74142
// exit ;
74140: GO 74449
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74142: LD_ADDR_VAR 0 10
74146: PUSH
74147: LD_INT 5
74149: PUSH
74150: LD_INT 6
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 2
74159: PUSH
74160: LD_INT 4
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 3
74169: PUSH
74170: LD_INT 5
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: LIST
74181: PUSH
74182: LD_INT 24
74184: PUSH
74185: LD_INT 25
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_INT 23
74194: PUSH
74195: LD_INT 27
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 42
74208: PUSH
74209: LD_INT 43
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 44
74218: PUSH
74219: LD_INT 46
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 45
74228: PUSH
74229: LD_INT 47
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: LIST
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: LIST
74245: ST_TO_ADDR
// result := [ ] ;
74246: LD_ADDR_VAR 0 3
74250: PUSH
74251: EMPTY
74252: ST_TO_ADDR
// for i in turrets do
74253: LD_ADDR_VAR 0 4
74257: PUSH
74258: LD_VAR 0 1
74262: PUSH
74263: FOR_IN
74264: IFFALSE 74447
// begin nat := GetNation ( i ) ;
74266: LD_ADDR_VAR 0 7
74270: PUSH
74271: LD_VAR 0 4
74275: PPUSH
74276: CALL_OW 248
74280: ST_TO_ADDR
// weapon := 0 ;
74281: LD_ADDR_VAR 0 8
74285: PUSH
74286: LD_INT 0
74288: ST_TO_ADDR
// if not nat then
74289: LD_VAR 0 7
74293: NOT
74294: IFFALSE 74298
// continue ;
74296: GO 74263
// for j in list [ nat ] do
74298: LD_ADDR_VAR 0 5
74302: PUSH
74303: LD_VAR 0 10
74307: PUSH
74308: LD_VAR 0 7
74312: ARRAY
74313: PUSH
74314: FOR_IN
74315: IFFALSE 74356
// if GetBWeapon ( i ) = j [ 1 ] then
74317: LD_VAR 0 4
74321: PPUSH
74322: CALL_OW 269
74326: PUSH
74327: LD_VAR 0 5
74331: PUSH
74332: LD_INT 1
74334: ARRAY
74335: EQUAL
74336: IFFALSE 74354
// begin weapon := j [ 2 ] ;
74338: LD_ADDR_VAR 0 8
74342: PUSH
74343: LD_VAR 0 5
74347: PUSH
74348: LD_INT 2
74350: ARRAY
74351: ST_TO_ADDR
// break ;
74352: GO 74356
// end ;
74354: GO 74314
74356: POP
74357: POP
// if not weapon then
74358: LD_VAR 0 8
74362: NOT
74363: IFFALSE 74367
// continue ;
74365: GO 74263
// for k in factories do
74367: LD_ADDR_VAR 0 6
74371: PUSH
74372: LD_VAR 0 2
74376: PUSH
74377: FOR_IN
74378: IFFALSE 74443
// begin weapons := AvailableWeaponList ( k ) ;
74380: LD_ADDR_VAR 0 9
74384: PUSH
74385: LD_VAR 0 6
74389: PPUSH
74390: CALL_OW 478
74394: ST_TO_ADDR
// if not weapons then
74395: LD_VAR 0 9
74399: NOT
74400: IFFALSE 74404
// continue ;
74402: GO 74377
// if weapon in weapons then
74404: LD_VAR 0 8
74408: PUSH
74409: LD_VAR 0 9
74413: IN
74414: IFFALSE 74441
// begin result := [ i , weapon ] ;
74416: LD_ADDR_VAR 0 3
74420: PUSH
74421: LD_VAR 0 4
74425: PUSH
74426: LD_VAR 0 8
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: ST_TO_ADDR
// exit ;
74435: POP
74436: POP
74437: POP
74438: POP
74439: GO 74449
// end ; end ;
74441: GO 74377
74443: POP
74444: POP
// end ;
74445: GO 74263
74447: POP
74448: POP
// end ;
74449: LD_VAR 0 3
74453: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74454: LD_INT 0
74456: PPUSH
// if not side or side > 8 then
74457: LD_VAR 0 3
74461: NOT
74462: PUSH
74463: LD_VAR 0 3
74467: PUSH
74468: LD_INT 8
74470: GREATER
74471: OR
74472: IFFALSE 74476
// exit ;
74474: GO 74535
// if not range then
74476: LD_VAR 0 4
74480: NOT
74481: IFFALSE 74492
// range := - 12 ;
74483: LD_ADDR_VAR 0 4
74487: PUSH
74488: LD_INT 12
74490: NEG
74491: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74492: LD_VAR 0 1
74496: PPUSH
74497: LD_VAR 0 2
74501: PPUSH
74502: LD_VAR 0 3
74506: PPUSH
74507: LD_VAR 0 4
74511: PPUSH
74512: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74516: LD_VAR 0 1
74520: PPUSH
74521: LD_VAR 0 2
74525: PPUSH
74526: LD_VAR 0 3
74530: PPUSH
74531: CALL_OW 331
// end ;
74535: LD_VAR 0 5
74539: RET
// export function Video ( mode ) ; begin
74540: LD_INT 0
74542: PPUSH
// ingame_video = mode ;
74543: LD_ADDR_OWVAR 52
74547: PUSH
74548: LD_VAR 0 1
74552: ST_TO_ADDR
// interface_hidden = mode ;
74553: LD_ADDR_OWVAR 54
74557: PUSH
74558: LD_VAR 0 1
74562: ST_TO_ADDR
// end ;
74563: LD_VAR 0 2
74567: RET
// export function Join ( array , element ) ; begin
74568: LD_INT 0
74570: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74571: LD_ADDR_VAR 0 3
74575: PUSH
74576: LD_VAR 0 1
74580: PPUSH
74581: LD_VAR 0 1
74585: PUSH
74586: LD_INT 1
74588: PLUS
74589: PPUSH
74590: LD_VAR 0 2
74594: PPUSH
74595: CALL_OW 1
74599: ST_TO_ADDR
// end ;
74600: LD_VAR 0 3
74604: RET
// export function JoinUnion ( array , element ) ; begin
74605: LD_INT 0
74607: PPUSH
// result := array union element ;
74608: LD_ADDR_VAR 0 3
74612: PUSH
74613: LD_VAR 0 1
74617: PUSH
74618: LD_VAR 0 2
74622: UNION
74623: ST_TO_ADDR
// end ;
74624: LD_VAR 0 3
74628: RET
// export function GetBehemoths ( side ) ; begin
74629: LD_INT 0
74631: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74632: LD_ADDR_VAR 0 2
74636: PUSH
74637: LD_INT 22
74639: PUSH
74640: LD_VAR 0 1
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: PUSH
74649: LD_INT 31
74651: PUSH
74652: LD_INT 25
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PPUSH
74663: CALL_OW 69
74667: ST_TO_ADDR
// end ;
74668: LD_VAR 0 2
74672: RET
// export function Shuffle ( array ) ; var i , index ; begin
74673: LD_INT 0
74675: PPUSH
74676: PPUSH
74677: PPUSH
// result := [ ] ;
74678: LD_ADDR_VAR 0 2
74682: PUSH
74683: EMPTY
74684: ST_TO_ADDR
// if not array then
74685: LD_VAR 0 1
74689: NOT
74690: IFFALSE 74694
// exit ;
74692: GO 74793
// Randomize ;
74694: CALL_OW 10
// for i = array downto 1 do
74698: LD_ADDR_VAR 0 3
74702: PUSH
74703: DOUBLE
74704: LD_VAR 0 1
74708: INC
74709: ST_TO_ADDR
74710: LD_INT 1
74712: PUSH
74713: FOR_DOWNTO
74714: IFFALSE 74791
// begin index := rand ( 1 , array ) ;
74716: LD_ADDR_VAR 0 4
74720: PUSH
74721: LD_INT 1
74723: PPUSH
74724: LD_VAR 0 1
74728: PPUSH
74729: CALL_OW 12
74733: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74734: LD_ADDR_VAR 0 2
74738: PUSH
74739: LD_VAR 0 2
74743: PPUSH
74744: LD_VAR 0 2
74748: PUSH
74749: LD_INT 1
74751: PLUS
74752: PPUSH
74753: LD_VAR 0 1
74757: PUSH
74758: LD_VAR 0 4
74762: ARRAY
74763: PPUSH
74764: CALL_OW 2
74768: ST_TO_ADDR
// array := Delete ( array , index ) ;
74769: LD_ADDR_VAR 0 1
74773: PUSH
74774: LD_VAR 0 1
74778: PPUSH
74779: LD_VAR 0 4
74783: PPUSH
74784: CALL_OW 3
74788: ST_TO_ADDR
// end ;
74789: GO 74713
74791: POP
74792: POP
// end ;
74793: LD_VAR 0 2
74797: RET
// export function GetBaseMaterials ( base ) ; begin
74798: LD_INT 0
74800: PPUSH
// result := [ 0 , 0 , 0 ] ;
74801: LD_ADDR_VAR 0 2
74805: PUSH
74806: LD_INT 0
74808: PUSH
74809: LD_INT 0
74811: PUSH
74812: LD_INT 0
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: LIST
74819: ST_TO_ADDR
// if not base then
74820: LD_VAR 0 1
74824: NOT
74825: IFFALSE 74829
// exit ;
74827: GO 74878
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74829: LD_ADDR_VAR 0 2
74833: PUSH
74834: LD_VAR 0 1
74838: PPUSH
74839: LD_INT 1
74841: PPUSH
74842: CALL_OW 275
74846: PUSH
74847: LD_VAR 0 1
74851: PPUSH
74852: LD_INT 2
74854: PPUSH
74855: CALL_OW 275
74859: PUSH
74860: LD_VAR 0 1
74864: PPUSH
74865: LD_INT 3
74867: PPUSH
74868: CALL_OW 275
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: LIST
74877: ST_TO_ADDR
// end ;
74878: LD_VAR 0 2
74882: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74883: LD_INT 0
74885: PPUSH
74886: PPUSH
// result := array ;
74887: LD_ADDR_VAR 0 3
74891: PUSH
74892: LD_VAR 0 1
74896: ST_TO_ADDR
// if size > 0 then
74897: LD_VAR 0 2
74901: PUSH
74902: LD_INT 0
74904: GREATER
74905: IFFALSE 74951
// for i := array downto size do
74907: LD_ADDR_VAR 0 4
74911: PUSH
74912: DOUBLE
74913: LD_VAR 0 1
74917: INC
74918: ST_TO_ADDR
74919: LD_VAR 0 2
74923: PUSH
74924: FOR_DOWNTO
74925: IFFALSE 74949
// result := Delete ( result , result ) ;
74927: LD_ADDR_VAR 0 3
74931: PUSH
74932: LD_VAR 0 3
74936: PPUSH
74937: LD_VAR 0 3
74941: PPUSH
74942: CALL_OW 3
74946: ST_TO_ADDR
74947: GO 74924
74949: POP
74950: POP
// end ;
74951: LD_VAR 0 3
74955: RET
// export function ComExit ( unit ) ; var tmp ; begin
74956: LD_INT 0
74958: PPUSH
74959: PPUSH
// if not IsInUnit ( unit ) then
74960: LD_VAR 0 1
74964: PPUSH
74965: CALL_OW 310
74969: NOT
74970: IFFALSE 74974
// exit ;
74972: GO 75034
// tmp := IsInUnit ( unit ) ;
74974: LD_ADDR_VAR 0 3
74978: PUSH
74979: LD_VAR 0 1
74983: PPUSH
74984: CALL_OW 310
74988: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74989: LD_VAR 0 3
74993: PPUSH
74994: CALL_OW 247
74998: PUSH
74999: LD_INT 2
75001: EQUAL
75002: IFFALSE 75015
// ComExitVehicle ( unit ) else
75004: LD_VAR 0 1
75008: PPUSH
75009: CALL_OW 121
75013: GO 75024
// ComExitBuilding ( unit ) ;
75015: LD_VAR 0 1
75019: PPUSH
75020: CALL_OW 122
// result := tmp ;
75024: LD_ADDR_VAR 0 2
75028: PUSH
75029: LD_VAR 0 3
75033: ST_TO_ADDR
// end ;
75034: LD_VAR 0 2
75038: RET
// export function ComExitAll ( units ) ; var i ; begin
75039: LD_INT 0
75041: PPUSH
75042: PPUSH
// if not units then
75043: LD_VAR 0 1
75047: NOT
75048: IFFALSE 75052
// exit ;
75050: GO 75078
// for i in units do
75052: LD_ADDR_VAR 0 3
75056: PUSH
75057: LD_VAR 0 1
75061: PUSH
75062: FOR_IN
75063: IFFALSE 75076
// ComExit ( i ) ;
75065: LD_VAR 0 3
75069: PPUSH
75070: CALL 74956 0 1
75074: GO 75062
75076: POP
75077: POP
// end ;
75078: LD_VAR 0 2
75082: RET
// export function ResetHc ; begin
75083: LD_INT 0
75085: PPUSH
// InitHc ;
75086: CALL_OW 19
// hc_importance := 0 ;
75090: LD_ADDR_OWVAR 32
75094: PUSH
75095: LD_INT 0
75097: ST_TO_ADDR
// end ;
75098: LD_VAR 0 1
75102: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75103: LD_INT 0
75105: PPUSH
75106: PPUSH
75107: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75108: LD_ADDR_VAR 0 6
75112: PUSH
75113: LD_VAR 0 1
75117: PUSH
75118: LD_VAR 0 3
75122: PLUS
75123: PUSH
75124: LD_INT 2
75126: DIV
75127: ST_TO_ADDR
// if _x < 0 then
75128: LD_VAR 0 6
75132: PUSH
75133: LD_INT 0
75135: LESS
75136: IFFALSE 75153
// _x := _x * - 1 ;
75138: LD_ADDR_VAR 0 6
75142: PUSH
75143: LD_VAR 0 6
75147: PUSH
75148: LD_INT 1
75150: NEG
75151: MUL
75152: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75153: LD_ADDR_VAR 0 7
75157: PUSH
75158: LD_VAR 0 2
75162: PUSH
75163: LD_VAR 0 4
75167: PLUS
75168: PUSH
75169: LD_INT 2
75171: DIV
75172: ST_TO_ADDR
// if _y < 0 then
75173: LD_VAR 0 7
75177: PUSH
75178: LD_INT 0
75180: LESS
75181: IFFALSE 75198
// _y := _y * - 1 ;
75183: LD_ADDR_VAR 0 7
75187: PUSH
75188: LD_VAR 0 7
75192: PUSH
75193: LD_INT 1
75195: NEG
75196: MUL
75197: ST_TO_ADDR
// result := [ _x , _y ] ;
75198: LD_ADDR_VAR 0 5
75202: PUSH
75203: LD_VAR 0 6
75207: PUSH
75208: LD_VAR 0 7
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: ST_TO_ADDR
// end ;
75217: LD_VAR 0 5
75221: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75222: LD_INT 0
75224: PPUSH
75225: PPUSH
75226: PPUSH
75227: PPUSH
// task := GetTaskList ( unit ) ;
75228: LD_ADDR_VAR 0 7
75232: PUSH
75233: LD_VAR 0 1
75237: PPUSH
75238: CALL_OW 437
75242: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75243: LD_VAR 0 7
75247: NOT
75248: PUSH
75249: LD_VAR 0 1
75253: PPUSH
75254: LD_VAR 0 2
75258: PPUSH
75259: CALL_OW 308
75263: NOT
75264: AND
75265: IFFALSE 75269
// exit ;
75267: GO 75387
// if IsInArea ( unit , area ) then
75269: LD_VAR 0 1
75273: PPUSH
75274: LD_VAR 0 2
75278: PPUSH
75279: CALL_OW 308
75283: IFFALSE 75301
// begin ComMoveToArea ( unit , goAway ) ;
75285: LD_VAR 0 1
75289: PPUSH
75290: LD_VAR 0 3
75294: PPUSH
75295: CALL_OW 113
// exit ;
75299: GO 75387
// end ; if task [ 1 ] [ 1 ] <> M then
75301: LD_VAR 0 7
75305: PUSH
75306: LD_INT 1
75308: ARRAY
75309: PUSH
75310: LD_INT 1
75312: ARRAY
75313: PUSH
75314: LD_STRING M
75316: NONEQUAL
75317: IFFALSE 75321
// exit ;
75319: GO 75387
// x := task [ 1 ] [ 2 ] ;
75321: LD_ADDR_VAR 0 5
75325: PUSH
75326: LD_VAR 0 7
75330: PUSH
75331: LD_INT 1
75333: ARRAY
75334: PUSH
75335: LD_INT 2
75337: ARRAY
75338: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75339: LD_ADDR_VAR 0 6
75343: PUSH
75344: LD_VAR 0 7
75348: PUSH
75349: LD_INT 1
75351: ARRAY
75352: PUSH
75353: LD_INT 3
75355: ARRAY
75356: ST_TO_ADDR
// if InArea ( x , y , area ) then
75357: LD_VAR 0 5
75361: PPUSH
75362: LD_VAR 0 6
75366: PPUSH
75367: LD_VAR 0 2
75371: PPUSH
75372: CALL_OW 309
75376: IFFALSE 75387
// ComStop ( unit ) ;
75378: LD_VAR 0 1
75382: PPUSH
75383: CALL_OW 141
// end ;
75387: LD_VAR 0 4
75391: RET
// export function Abs ( value ) ; begin
75392: LD_INT 0
75394: PPUSH
// result := value ;
75395: LD_ADDR_VAR 0 2
75399: PUSH
75400: LD_VAR 0 1
75404: ST_TO_ADDR
// if value < 0 then
75405: LD_VAR 0 1
75409: PUSH
75410: LD_INT 0
75412: LESS
75413: IFFALSE 75430
// result := value * - 1 ;
75415: LD_ADDR_VAR 0 2
75419: PUSH
75420: LD_VAR 0 1
75424: PUSH
75425: LD_INT 1
75427: NEG
75428: MUL
75429: ST_TO_ADDR
// end ;
75430: LD_VAR 0 2
75434: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75435: LD_INT 0
75437: PPUSH
75438: PPUSH
75439: PPUSH
75440: PPUSH
75441: PPUSH
75442: PPUSH
75443: PPUSH
75444: PPUSH
// if not unit or not building then
75445: LD_VAR 0 1
75449: NOT
75450: PUSH
75451: LD_VAR 0 2
75455: NOT
75456: OR
75457: IFFALSE 75461
// exit ;
75459: GO 75687
// x := GetX ( building ) ;
75461: LD_ADDR_VAR 0 4
75465: PUSH
75466: LD_VAR 0 2
75470: PPUSH
75471: CALL_OW 250
75475: ST_TO_ADDR
// y := GetY ( building ) ;
75476: LD_ADDR_VAR 0 6
75480: PUSH
75481: LD_VAR 0 2
75485: PPUSH
75486: CALL_OW 251
75490: ST_TO_ADDR
// d := GetDir ( building ) ;
75491: LD_ADDR_VAR 0 8
75495: PUSH
75496: LD_VAR 0 2
75500: PPUSH
75501: CALL_OW 254
75505: ST_TO_ADDR
// r := 4 ;
75506: LD_ADDR_VAR 0 9
75510: PUSH
75511: LD_INT 4
75513: ST_TO_ADDR
// for i := 1 to 5 do
75514: LD_ADDR_VAR 0 10
75518: PUSH
75519: DOUBLE
75520: LD_INT 1
75522: DEC
75523: ST_TO_ADDR
75524: LD_INT 5
75526: PUSH
75527: FOR_TO
75528: IFFALSE 75685
// begin _x := ShiftX ( x , d , r + i ) ;
75530: LD_ADDR_VAR 0 5
75534: PUSH
75535: LD_VAR 0 4
75539: PPUSH
75540: LD_VAR 0 8
75544: PPUSH
75545: LD_VAR 0 9
75549: PUSH
75550: LD_VAR 0 10
75554: PLUS
75555: PPUSH
75556: CALL_OW 272
75560: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75561: LD_ADDR_VAR 0 7
75565: PUSH
75566: LD_VAR 0 6
75570: PPUSH
75571: LD_VAR 0 8
75575: PPUSH
75576: LD_VAR 0 9
75580: PUSH
75581: LD_VAR 0 10
75585: PLUS
75586: PPUSH
75587: CALL_OW 273
75591: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75592: LD_VAR 0 5
75596: PPUSH
75597: LD_VAR 0 7
75601: PPUSH
75602: CALL_OW 488
75606: PUSH
75607: LD_VAR 0 5
75611: PPUSH
75612: LD_VAR 0 7
75616: PPUSH
75617: CALL_OW 428
75621: PPUSH
75622: CALL_OW 247
75626: PUSH
75627: LD_INT 3
75629: PUSH
75630: LD_INT 2
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: IN
75637: NOT
75638: AND
75639: IFFALSE 75683
// begin ComMoveXY ( unit , _x , _y ) ;
75641: LD_VAR 0 1
75645: PPUSH
75646: LD_VAR 0 5
75650: PPUSH
75651: LD_VAR 0 7
75655: PPUSH
75656: CALL_OW 111
// result := [ _x , _y ] ;
75660: LD_ADDR_VAR 0 3
75664: PUSH
75665: LD_VAR 0 5
75669: PUSH
75670: LD_VAR 0 7
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: ST_TO_ADDR
// exit ;
75679: POP
75680: POP
75681: GO 75687
// end ; end ;
75683: GO 75527
75685: POP
75686: POP
// end ;
75687: LD_VAR 0 3
75691: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75692: LD_INT 0
75694: PPUSH
75695: PPUSH
75696: PPUSH
// result := 0 ;
75697: LD_ADDR_VAR 0 3
75701: PUSH
75702: LD_INT 0
75704: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75705: LD_VAR 0 1
75709: PUSH
75710: LD_INT 0
75712: LESS
75713: PUSH
75714: LD_VAR 0 1
75718: PUSH
75719: LD_INT 8
75721: GREATER
75722: OR
75723: PUSH
75724: LD_VAR 0 2
75728: PUSH
75729: LD_INT 0
75731: LESS
75732: OR
75733: PUSH
75734: LD_VAR 0 2
75738: PUSH
75739: LD_INT 8
75741: GREATER
75742: OR
75743: IFFALSE 75747
// exit ;
75745: GO 75822
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75747: LD_ADDR_VAR 0 4
75751: PUSH
75752: LD_INT 22
75754: PUSH
75755: LD_VAR 0 2
75759: PUSH
75760: EMPTY
75761: LIST
75762: LIST
75763: PPUSH
75764: CALL_OW 69
75768: PUSH
75769: FOR_IN
75770: IFFALSE 75820
// begin un := UnitShoot ( i ) ;
75772: LD_ADDR_VAR 0 5
75776: PUSH
75777: LD_VAR 0 4
75781: PPUSH
75782: CALL_OW 504
75786: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75787: LD_VAR 0 5
75791: PPUSH
75792: CALL_OW 255
75796: PUSH
75797: LD_VAR 0 1
75801: EQUAL
75802: IFFALSE 75818
// begin result := un ;
75804: LD_ADDR_VAR 0 3
75808: PUSH
75809: LD_VAR 0 5
75813: ST_TO_ADDR
// exit ;
75814: POP
75815: POP
75816: GO 75822
// end ; end ;
75818: GO 75769
75820: POP
75821: POP
// end ;
75822: LD_VAR 0 3
75826: RET
// export function GetCargoBay ( units ) ; begin
75827: LD_INT 0
75829: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75830: LD_ADDR_VAR 0 2
75834: PUSH
75835: LD_VAR 0 1
75839: PPUSH
75840: LD_INT 2
75842: PUSH
75843: LD_INT 34
75845: PUSH
75846: LD_INT 12
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: PUSH
75853: LD_INT 34
75855: PUSH
75856: LD_INT 51
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PUSH
75863: LD_INT 34
75865: PUSH
75866: LD_INT 32
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: PUSH
75873: LD_INT 34
75875: PUSH
75876: LD_EXP 44
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: PPUSH
75892: CALL_OW 72
75896: ST_TO_ADDR
// end ;
75897: LD_VAR 0 2
75901: RET
// export function Negate ( value ) ; begin
75902: LD_INT 0
75904: PPUSH
// result := not value ;
75905: LD_ADDR_VAR 0 2
75909: PUSH
75910: LD_VAR 0 1
75914: NOT
75915: ST_TO_ADDR
// end ;
75916: LD_VAR 0 2
75920: RET
// export function Inc ( value ) ; begin
75921: LD_INT 0
75923: PPUSH
// result := value + 1 ;
75924: LD_ADDR_VAR 0 2
75928: PUSH
75929: LD_VAR 0 1
75933: PUSH
75934: LD_INT 1
75936: PLUS
75937: ST_TO_ADDR
// end ;
75938: LD_VAR 0 2
75942: RET
// export function Dec ( value ) ; begin
75943: LD_INT 0
75945: PPUSH
// result := value - 1 ;
75946: LD_ADDR_VAR 0 2
75950: PUSH
75951: LD_VAR 0 1
75955: PUSH
75956: LD_INT 1
75958: MINUS
75959: ST_TO_ADDR
// end ;
75960: LD_VAR 0 2
75964: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75965: LD_INT 0
75967: PPUSH
75968: PPUSH
75969: PPUSH
75970: PPUSH
75971: PPUSH
75972: PPUSH
75973: PPUSH
75974: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75975: LD_VAR 0 1
75979: PPUSH
75980: LD_VAR 0 2
75984: PPUSH
75985: CALL_OW 488
75989: NOT
75990: PUSH
75991: LD_VAR 0 3
75995: PPUSH
75996: LD_VAR 0 4
76000: PPUSH
76001: CALL_OW 488
76005: NOT
76006: OR
76007: IFFALSE 76020
// begin result := - 1 ;
76009: LD_ADDR_VAR 0 5
76013: PUSH
76014: LD_INT 1
76016: NEG
76017: ST_TO_ADDR
// exit ;
76018: GO 76255
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76020: LD_ADDR_VAR 0 12
76024: PUSH
76025: LD_VAR 0 1
76029: PPUSH
76030: LD_VAR 0 2
76034: PPUSH
76035: LD_VAR 0 3
76039: PPUSH
76040: LD_VAR 0 4
76044: PPUSH
76045: CALL 75103 0 4
76049: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76050: LD_ADDR_VAR 0 11
76054: PUSH
76055: LD_VAR 0 1
76059: PPUSH
76060: LD_VAR 0 2
76064: PPUSH
76065: LD_VAR 0 12
76069: PUSH
76070: LD_INT 1
76072: ARRAY
76073: PPUSH
76074: LD_VAR 0 12
76078: PUSH
76079: LD_INT 2
76081: ARRAY
76082: PPUSH
76083: CALL_OW 298
76087: ST_TO_ADDR
// distance := 9999 ;
76088: LD_ADDR_VAR 0 10
76092: PUSH
76093: LD_INT 9999
76095: ST_TO_ADDR
// for i := 0 to 5 do
76096: LD_ADDR_VAR 0 6
76100: PUSH
76101: DOUBLE
76102: LD_INT 0
76104: DEC
76105: ST_TO_ADDR
76106: LD_INT 5
76108: PUSH
76109: FOR_TO
76110: IFFALSE 76253
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76112: LD_ADDR_VAR 0 7
76116: PUSH
76117: LD_VAR 0 1
76121: PPUSH
76122: LD_VAR 0 6
76126: PPUSH
76127: LD_VAR 0 11
76131: PPUSH
76132: CALL_OW 272
76136: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76137: LD_ADDR_VAR 0 8
76141: PUSH
76142: LD_VAR 0 2
76146: PPUSH
76147: LD_VAR 0 6
76151: PPUSH
76152: LD_VAR 0 11
76156: PPUSH
76157: CALL_OW 273
76161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76162: LD_VAR 0 7
76166: PPUSH
76167: LD_VAR 0 8
76171: PPUSH
76172: CALL_OW 488
76176: NOT
76177: IFFALSE 76181
// continue ;
76179: GO 76109
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76181: LD_ADDR_VAR 0 9
76185: PUSH
76186: LD_VAR 0 12
76190: PUSH
76191: LD_INT 1
76193: ARRAY
76194: PPUSH
76195: LD_VAR 0 12
76199: PUSH
76200: LD_INT 2
76202: ARRAY
76203: PPUSH
76204: LD_VAR 0 7
76208: PPUSH
76209: LD_VAR 0 8
76213: PPUSH
76214: CALL_OW 298
76218: ST_TO_ADDR
// if tmp < distance then
76219: LD_VAR 0 9
76223: PUSH
76224: LD_VAR 0 10
76228: LESS
76229: IFFALSE 76251
// begin result := i ;
76231: LD_ADDR_VAR 0 5
76235: PUSH
76236: LD_VAR 0 6
76240: ST_TO_ADDR
// distance := tmp ;
76241: LD_ADDR_VAR 0 10
76245: PUSH
76246: LD_VAR 0 9
76250: ST_TO_ADDR
// end ; end ;
76251: GO 76109
76253: POP
76254: POP
// end ;
76255: LD_VAR 0 5
76259: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76260: LD_INT 0
76262: PPUSH
76263: PPUSH
// if not driver or not IsInUnit ( driver ) then
76264: LD_VAR 0 1
76268: NOT
76269: PUSH
76270: LD_VAR 0 1
76274: PPUSH
76275: CALL_OW 310
76279: NOT
76280: OR
76281: IFFALSE 76285
// exit ;
76283: GO 76375
// vehicle := IsInUnit ( driver ) ;
76285: LD_ADDR_VAR 0 3
76289: PUSH
76290: LD_VAR 0 1
76294: PPUSH
76295: CALL_OW 310
76299: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76300: LD_VAR 0 1
76304: PPUSH
76305: LD_STRING \
76307: PUSH
76308: LD_INT 0
76310: PUSH
76311: LD_INT 0
76313: PUSH
76314: LD_INT 0
76316: PUSH
76317: LD_INT 0
76319: PUSH
76320: LD_INT 0
76322: PUSH
76323: LD_INT 0
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: LIST
76330: LIST
76331: LIST
76332: LIST
76333: LIST
76334: PUSH
76335: LD_STRING E
76337: PUSH
76338: LD_INT 0
76340: PUSH
76341: LD_INT 0
76343: PUSH
76344: LD_VAR 0 3
76348: PUSH
76349: LD_INT 0
76351: PUSH
76352: LD_INT 0
76354: PUSH
76355: LD_INT 0
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: LIST
76362: LIST
76363: LIST
76364: LIST
76365: LIST
76366: PUSH
76367: EMPTY
76368: LIST
76369: LIST
76370: PPUSH
76371: CALL_OW 446
// end ;
76375: LD_VAR 0 2
76379: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76380: LD_INT 0
76382: PPUSH
76383: PPUSH
// if not driver or not IsInUnit ( driver ) then
76384: LD_VAR 0 1
76388: NOT
76389: PUSH
76390: LD_VAR 0 1
76394: PPUSH
76395: CALL_OW 310
76399: NOT
76400: OR
76401: IFFALSE 76405
// exit ;
76403: GO 76495
// vehicle := IsInUnit ( driver ) ;
76405: LD_ADDR_VAR 0 3
76409: PUSH
76410: LD_VAR 0 1
76414: PPUSH
76415: CALL_OW 310
76419: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76420: LD_VAR 0 1
76424: PPUSH
76425: LD_STRING \
76427: PUSH
76428: LD_INT 0
76430: PUSH
76431: LD_INT 0
76433: PUSH
76434: LD_INT 0
76436: PUSH
76437: LD_INT 0
76439: PUSH
76440: LD_INT 0
76442: PUSH
76443: LD_INT 0
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: LIST
76450: LIST
76451: LIST
76452: LIST
76453: LIST
76454: PUSH
76455: LD_STRING E
76457: PUSH
76458: LD_INT 0
76460: PUSH
76461: LD_INT 0
76463: PUSH
76464: LD_VAR 0 3
76468: PUSH
76469: LD_INT 0
76471: PUSH
76472: LD_INT 0
76474: PUSH
76475: LD_INT 0
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: PPUSH
76491: CALL_OW 447
// end ;
76495: LD_VAR 0 2
76499: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76500: LD_INT 0
76502: PPUSH
76503: PPUSH
76504: PPUSH
// tmp := [ ] ;
76505: LD_ADDR_VAR 0 5
76509: PUSH
76510: EMPTY
76511: ST_TO_ADDR
// for i in units do
76512: LD_ADDR_VAR 0 4
76516: PUSH
76517: LD_VAR 0 1
76521: PUSH
76522: FOR_IN
76523: IFFALSE 76561
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76525: LD_ADDR_VAR 0 5
76529: PUSH
76530: LD_VAR 0 5
76534: PPUSH
76535: LD_VAR 0 5
76539: PUSH
76540: LD_INT 1
76542: PLUS
76543: PPUSH
76544: LD_VAR 0 4
76548: PPUSH
76549: CALL_OW 256
76553: PPUSH
76554: CALL_OW 2
76558: ST_TO_ADDR
76559: GO 76522
76561: POP
76562: POP
// if not tmp then
76563: LD_VAR 0 5
76567: NOT
76568: IFFALSE 76572
// exit ;
76570: GO 76620
// if asc then
76572: LD_VAR 0 2
76576: IFFALSE 76600
// result := SortListByListAsc ( units , tmp ) else
76578: LD_ADDR_VAR 0 3
76582: PUSH
76583: LD_VAR 0 1
76587: PPUSH
76588: LD_VAR 0 5
76592: PPUSH
76593: CALL_OW 76
76597: ST_TO_ADDR
76598: GO 76620
// result := SortListByListDesc ( units , tmp ) ;
76600: LD_ADDR_VAR 0 3
76604: PUSH
76605: LD_VAR 0 1
76609: PPUSH
76610: LD_VAR 0 5
76614: PPUSH
76615: CALL_OW 77
76619: ST_TO_ADDR
// end ;
76620: LD_VAR 0 3
76624: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76625: LD_INT 0
76627: PPUSH
76628: PPUSH
// task := GetTaskList ( mech ) ;
76629: LD_ADDR_VAR 0 4
76633: PUSH
76634: LD_VAR 0 1
76638: PPUSH
76639: CALL_OW 437
76643: ST_TO_ADDR
// if not task then
76644: LD_VAR 0 4
76648: NOT
76649: IFFALSE 76653
// exit ;
76651: GO 76695
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76653: LD_ADDR_VAR 0 3
76657: PUSH
76658: LD_VAR 0 4
76662: PUSH
76663: LD_INT 1
76665: ARRAY
76666: PUSH
76667: LD_INT 1
76669: ARRAY
76670: PUSH
76671: LD_STRING r
76673: EQUAL
76674: PUSH
76675: LD_VAR 0 4
76679: PUSH
76680: LD_INT 1
76682: ARRAY
76683: PUSH
76684: LD_INT 4
76686: ARRAY
76687: PUSH
76688: LD_VAR 0 2
76692: EQUAL
76693: AND
76694: ST_TO_ADDR
// end ;
76695: LD_VAR 0 3
76699: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76700: LD_INT 0
76702: PPUSH
// SetDir ( unit , d ) ;
76703: LD_VAR 0 1
76707: PPUSH
76708: LD_VAR 0 4
76712: PPUSH
76713: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76717: LD_VAR 0 1
76721: PPUSH
76722: LD_VAR 0 2
76726: PPUSH
76727: LD_VAR 0 3
76731: PPUSH
76732: LD_VAR 0 5
76736: PPUSH
76737: CALL_OW 48
// end ;
76741: LD_VAR 0 6
76745: RET
// export function ToNaturalNumber ( number ) ; begin
76746: LD_INT 0
76748: PPUSH
// result := number div 1 ;
76749: LD_ADDR_VAR 0 2
76753: PUSH
76754: LD_VAR 0 1
76758: PUSH
76759: LD_INT 1
76761: DIV
76762: ST_TO_ADDR
// if number < 0 then
76763: LD_VAR 0 1
76767: PUSH
76768: LD_INT 0
76770: LESS
76771: IFFALSE 76781
// result := 0 ;
76773: LD_ADDR_VAR 0 2
76777: PUSH
76778: LD_INT 0
76780: ST_TO_ADDR
// end ;
76781: LD_VAR 0 2
76785: RET
// export function SortByClass ( units , class ) ; var un ; begin
76786: LD_INT 0
76788: PPUSH
76789: PPUSH
// if not units or not class then
76790: LD_VAR 0 1
76794: NOT
76795: PUSH
76796: LD_VAR 0 2
76800: NOT
76801: OR
76802: IFFALSE 76806
// exit ;
76804: GO 76901
// result := [ ] ;
76806: LD_ADDR_VAR 0 3
76810: PUSH
76811: EMPTY
76812: ST_TO_ADDR
// for un in units do
76813: LD_ADDR_VAR 0 4
76817: PUSH
76818: LD_VAR 0 1
76822: PUSH
76823: FOR_IN
76824: IFFALSE 76899
// if GetClass ( un ) = class then
76826: LD_VAR 0 4
76830: PPUSH
76831: CALL_OW 257
76835: PUSH
76836: LD_VAR 0 2
76840: EQUAL
76841: IFFALSE 76868
// result := Insert ( result , 1 , un ) else
76843: LD_ADDR_VAR 0 3
76847: PUSH
76848: LD_VAR 0 3
76852: PPUSH
76853: LD_INT 1
76855: PPUSH
76856: LD_VAR 0 4
76860: PPUSH
76861: CALL_OW 2
76865: ST_TO_ADDR
76866: GO 76897
// result := Replace ( result , result + 1 , un ) ;
76868: LD_ADDR_VAR 0 3
76872: PUSH
76873: LD_VAR 0 3
76877: PPUSH
76878: LD_VAR 0 3
76882: PUSH
76883: LD_INT 1
76885: PLUS
76886: PPUSH
76887: LD_VAR 0 4
76891: PPUSH
76892: CALL_OW 1
76896: ST_TO_ADDR
76897: GO 76823
76899: POP
76900: POP
// end ;
76901: LD_VAR 0 3
76905: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76906: LD_INT 0
76908: PPUSH
76909: PPUSH
76910: PPUSH
76911: PPUSH
76912: PPUSH
76913: PPUSH
76914: PPUSH
// result := [ ] ;
76915: LD_ADDR_VAR 0 4
76919: PUSH
76920: EMPTY
76921: ST_TO_ADDR
// if x - r < 0 then
76922: LD_VAR 0 1
76926: PUSH
76927: LD_VAR 0 3
76931: MINUS
76932: PUSH
76933: LD_INT 0
76935: LESS
76936: IFFALSE 76948
// min_x := 0 else
76938: LD_ADDR_VAR 0 8
76942: PUSH
76943: LD_INT 0
76945: ST_TO_ADDR
76946: GO 76964
// min_x := x - r ;
76948: LD_ADDR_VAR 0 8
76952: PUSH
76953: LD_VAR 0 1
76957: PUSH
76958: LD_VAR 0 3
76962: MINUS
76963: ST_TO_ADDR
// if y - r < 0 then
76964: LD_VAR 0 2
76968: PUSH
76969: LD_VAR 0 3
76973: MINUS
76974: PUSH
76975: LD_INT 0
76977: LESS
76978: IFFALSE 76990
// min_y := 0 else
76980: LD_ADDR_VAR 0 7
76984: PUSH
76985: LD_INT 0
76987: ST_TO_ADDR
76988: GO 77006
// min_y := y - r ;
76990: LD_ADDR_VAR 0 7
76994: PUSH
76995: LD_VAR 0 2
76999: PUSH
77000: LD_VAR 0 3
77004: MINUS
77005: ST_TO_ADDR
// max_x := x + r ;
77006: LD_ADDR_VAR 0 9
77010: PUSH
77011: LD_VAR 0 1
77015: PUSH
77016: LD_VAR 0 3
77020: PLUS
77021: ST_TO_ADDR
// max_y := y + r ;
77022: LD_ADDR_VAR 0 10
77026: PUSH
77027: LD_VAR 0 2
77031: PUSH
77032: LD_VAR 0 3
77036: PLUS
77037: ST_TO_ADDR
// for _x = min_x to max_x do
77038: LD_ADDR_VAR 0 5
77042: PUSH
77043: DOUBLE
77044: LD_VAR 0 8
77048: DEC
77049: ST_TO_ADDR
77050: LD_VAR 0 9
77054: PUSH
77055: FOR_TO
77056: IFFALSE 77157
// for _y = min_y to max_y do
77058: LD_ADDR_VAR 0 6
77062: PUSH
77063: DOUBLE
77064: LD_VAR 0 7
77068: DEC
77069: ST_TO_ADDR
77070: LD_VAR 0 10
77074: PUSH
77075: FOR_TO
77076: IFFALSE 77153
// begin if not ValidHex ( _x , _y ) then
77078: LD_VAR 0 5
77082: PPUSH
77083: LD_VAR 0 6
77087: PPUSH
77088: CALL_OW 488
77092: NOT
77093: IFFALSE 77097
// continue ;
77095: GO 77075
// if GetResourceTypeXY ( _x , _y ) then
77097: LD_VAR 0 5
77101: PPUSH
77102: LD_VAR 0 6
77106: PPUSH
77107: CALL_OW 283
77111: IFFALSE 77151
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77113: LD_ADDR_VAR 0 4
77117: PUSH
77118: LD_VAR 0 4
77122: PPUSH
77123: LD_VAR 0 4
77127: PUSH
77128: LD_INT 1
77130: PLUS
77131: PPUSH
77132: LD_VAR 0 5
77136: PUSH
77137: LD_VAR 0 6
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: PPUSH
77146: CALL_OW 1
77150: ST_TO_ADDR
// end ;
77151: GO 77075
77153: POP
77154: POP
77155: GO 77055
77157: POP
77158: POP
// end ;
77159: LD_VAR 0 4
77163: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77164: LD_INT 0
77166: PPUSH
77167: PPUSH
77168: PPUSH
77169: PPUSH
77170: PPUSH
77171: PPUSH
77172: PPUSH
77173: PPUSH
// if not units then
77174: LD_VAR 0 1
77178: NOT
77179: IFFALSE 77183
// exit ;
77181: GO 77608
// result := UnitFilter ( units , [ f_ok ] ) ;
77183: LD_ADDR_VAR 0 3
77187: PUSH
77188: LD_VAR 0 1
77192: PPUSH
77193: LD_INT 50
77195: PUSH
77196: EMPTY
77197: LIST
77198: PPUSH
77199: CALL_OW 72
77203: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77204: LD_ADDR_VAR 0 8
77208: PUSH
77209: LD_VAR 0 1
77213: PUSH
77214: LD_INT 1
77216: ARRAY
77217: PPUSH
77218: CALL_OW 255
77222: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77223: LD_ADDR_VAR 0 10
77227: PUSH
77228: LD_INT 29
77230: PUSH
77231: LD_EXP 47
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: ST_TO_ADDR
// if not result then
77240: LD_VAR 0 3
77244: NOT
77245: IFFALSE 77249
// exit ;
77247: GO 77608
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77249: LD_ADDR_VAR 0 5
77253: PUSH
77254: LD_INT 81
77256: PUSH
77257: LD_VAR 0 8
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: PPUSH
77266: CALL_OW 69
77270: ST_TO_ADDR
// for i in result do
77271: LD_ADDR_VAR 0 4
77275: PUSH
77276: LD_VAR 0 3
77280: PUSH
77281: FOR_IN
77282: IFFALSE 77606
// begin tag := GetTag ( i ) + 1 ;
77284: LD_ADDR_VAR 0 9
77288: PUSH
77289: LD_VAR 0 4
77293: PPUSH
77294: CALL_OW 110
77298: PUSH
77299: LD_INT 1
77301: PLUS
77302: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77303: LD_ADDR_VAR 0 7
77307: PUSH
77308: LD_VAR 0 4
77312: PPUSH
77313: CALL_OW 250
77317: PPUSH
77318: LD_VAR 0 4
77322: PPUSH
77323: CALL_OW 251
77327: PPUSH
77328: LD_INT 6
77330: PPUSH
77331: CALL 76906 0 3
77335: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77336: LD_VAR 0 7
77340: PUSH
77341: LD_VAR 0 4
77345: PPUSH
77346: CALL_OW 264
77350: PUSH
77351: LD_VAR 0 10
77355: IN
77356: NOT
77357: AND
77358: IFFALSE 77397
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77360: LD_VAR 0 4
77364: PPUSH
77365: LD_VAR 0 7
77369: PUSH
77370: LD_INT 1
77372: ARRAY
77373: PUSH
77374: LD_INT 1
77376: ARRAY
77377: PPUSH
77378: LD_VAR 0 7
77382: PUSH
77383: LD_INT 1
77385: ARRAY
77386: PUSH
77387: LD_INT 2
77389: ARRAY
77390: PPUSH
77391: CALL_OW 116
77395: GO 77604
// if path > tag then
77397: LD_VAR 0 2
77401: PUSH
77402: LD_VAR 0 9
77406: GREATER
77407: IFFALSE 77574
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77409: LD_ADDR_VAR 0 6
77413: PUSH
77414: LD_VAR 0 5
77418: PPUSH
77419: LD_INT 91
77421: PUSH
77422: LD_VAR 0 4
77426: PUSH
77427: LD_INT 12
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: LIST
77434: PPUSH
77435: CALL_OW 72
77439: ST_TO_ADDR
// if nearEnemy then
77440: LD_VAR 0 6
77444: IFFALSE 77472
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77446: LD_VAR 0 4
77450: PPUSH
77451: LD_VAR 0 6
77455: PPUSH
77456: LD_VAR 0 4
77460: PPUSH
77461: CALL_OW 74
77465: PPUSH
77466: CALL_OW 115
77470: GO 77572
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77472: LD_VAR 0 4
77476: PPUSH
77477: LD_VAR 0 2
77481: PUSH
77482: LD_VAR 0 9
77486: ARRAY
77487: PUSH
77488: LD_INT 1
77490: ARRAY
77491: PPUSH
77492: LD_VAR 0 2
77496: PUSH
77497: LD_VAR 0 9
77501: ARRAY
77502: PUSH
77503: LD_INT 2
77505: ARRAY
77506: PPUSH
77507: CALL_OW 297
77511: PUSH
77512: LD_INT 6
77514: GREATER
77515: IFFALSE 77558
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77517: LD_VAR 0 4
77521: PPUSH
77522: LD_VAR 0 2
77526: PUSH
77527: LD_VAR 0 9
77531: ARRAY
77532: PUSH
77533: LD_INT 1
77535: ARRAY
77536: PPUSH
77537: LD_VAR 0 2
77541: PUSH
77542: LD_VAR 0 9
77546: ARRAY
77547: PUSH
77548: LD_INT 2
77550: ARRAY
77551: PPUSH
77552: CALL_OW 114
77556: GO 77572
// SetTag ( i , tag ) ;
77558: LD_VAR 0 4
77562: PPUSH
77563: LD_VAR 0 9
77567: PPUSH
77568: CALL_OW 109
// end else
77572: GO 77604
// if enemy then
77574: LD_VAR 0 5
77578: IFFALSE 77604
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77580: LD_VAR 0 4
77584: PPUSH
77585: LD_VAR 0 5
77589: PPUSH
77590: LD_VAR 0 4
77594: PPUSH
77595: CALL_OW 74
77599: PPUSH
77600: CALL_OW 115
// end ;
77604: GO 77281
77606: POP
77607: POP
// end ;
77608: LD_VAR 0 3
77612: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77613: LD_INT 0
77615: PPUSH
77616: PPUSH
77617: PPUSH
// if not unit or IsInUnit ( unit ) then
77618: LD_VAR 0 1
77622: NOT
77623: PUSH
77624: LD_VAR 0 1
77628: PPUSH
77629: CALL_OW 310
77633: OR
77634: IFFALSE 77638
// exit ;
77636: GO 77729
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77638: LD_ADDR_VAR 0 4
77642: PUSH
77643: LD_VAR 0 1
77647: PPUSH
77648: CALL_OW 250
77652: PPUSH
77653: LD_VAR 0 2
77657: PPUSH
77658: LD_INT 1
77660: PPUSH
77661: CALL_OW 272
77665: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77666: LD_ADDR_VAR 0 5
77670: PUSH
77671: LD_VAR 0 1
77675: PPUSH
77676: CALL_OW 251
77680: PPUSH
77681: LD_VAR 0 2
77685: PPUSH
77686: LD_INT 1
77688: PPUSH
77689: CALL_OW 273
77693: ST_TO_ADDR
// if ValidHex ( x , y ) then
77694: LD_VAR 0 4
77698: PPUSH
77699: LD_VAR 0 5
77703: PPUSH
77704: CALL_OW 488
77708: IFFALSE 77729
// ComTurnXY ( unit , x , y ) ;
77710: LD_VAR 0 1
77714: PPUSH
77715: LD_VAR 0 4
77719: PPUSH
77720: LD_VAR 0 5
77724: PPUSH
77725: CALL_OW 118
// end ;
77729: LD_VAR 0 3
77733: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77734: LD_INT 0
77736: PPUSH
77737: PPUSH
// result := false ;
77738: LD_ADDR_VAR 0 3
77742: PUSH
77743: LD_INT 0
77745: ST_TO_ADDR
// if not units then
77746: LD_VAR 0 2
77750: NOT
77751: IFFALSE 77755
// exit ;
77753: GO 77800
// for i in units do
77755: LD_ADDR_VAR 0 4
77759: PUSH
77760: LD_VAR 0 2
77764: PUSH
77765: FOR_IN
77766: IFFALSE 77798
// if See ( side , i ) then
77768: LD_VAR 0 1
77772: PPUSH
77773: LD_VAR 0 4
77777: PPUSH
77778: CALL_OW 292
77782: IFFALSE 77796
// begin result := true ;
77784: LD_ADDR_VAR 0 3
77788: PUSH
77789: LD_INT 1
77791: ST_TO_ADDR
// exit ;
77792: POP
77793: POP
77794: GO 77800
// end ;
77796: GO 77765
77798: POP
77799: POP
// end ;
77800: LD_VAR 0 3
77804: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77805: LD_INT 0
77807: PPUSH
77808: PPUSH
77809: PPUSH
77810: PPUSH
// if not unit or not points then
77811: LD_VAR 0 1
77815: NOT
77816: PUSH
77817: LD_VAR 0 2
77821: NOT
77822: OR
77823: IFFALSE 77827
// exit ;
77825: GO 77917
// dist := 99999 ;
77827: LD_ADDR_VAR 0 5
77831: PUSH
77832: LD_INT 99999
77834: ST_TO_ADDR
// for i in points do
77835: LD_ADDR_VAR 0 4
77839: PUSH
77840: LD_VAR 0 2
77844: PUSH
77845: FOR_IN
77846: IFFALSE 77915
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77848: LD_ADDR_VAR 0 6
77852: PUSH
77853: LD_VAR 0 1
77857: PPUSH
77858: LD_VAR 0 4
77862: PUSH
77863: LD_INT 1
77865: ARRAY
77866: PPUSH
77867: LD_VAR 0 4
77871: PUSH
77872: LD_INT 2
77874: ARRAY
77875: PPUSH
77876: CALL_OW 297
77880: ST_TO_ADDR
// if tmpDist < dist then
77881: LD_VAR 0 6
77885: PUSH
77886: LD_VAR 0 5
77890: LESS
77891: IFFALSE 77913
// begin result := i ;
77893: LD_ADDR_VAR 0 3
77897: PUSH
77898: LD_VAR 0 4
77902: ST_TO_ADDR
// dist := tmpDist ;
77903: LD_ADDR_VAR 0 5
77907: PUSH
77908: LD_VAR 0 6
77912: ST_TO_ADDR
// end ; end ;
77913: GO 77845
77915: POP
77916: POP
// end ; end_of_file
77917: LD_VAR 0 3
77921: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77922: LD_VAR 0 1
77926: PUSH
77927: LD_INT 200
77929: DOUBLE
77930: GREATEREQUAL
77931: IFFALSE 77939
77933: LD_INT 299
77935: DOUBLE
77936: LESSEQUAL
77937: IFTRUE 77941
77939: GO 77973
77941: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77942: LD_VAR 0 1
77946: PPUSH
77947: LD_VAR 0 2
77951: PPUSH
77952: LD_VAR 0 3
77956: PPUSH
77957: LD_VAR 0 4
77961: PPUSH
77962: LD_VAR 0 5
77966: PPUSH
77967: CALL 33625 0 5
77971: GO 78050
77973: LD_INT 300
77975: DOUBLE
77976: GREATEREQUAL
77977: IFFALSE 77985
77979: LD_INT 399
77981: DOUBLE
77982: LESSEQUAL
77983: IFTRUE 77987
77985: GO 78049
77987: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77988: LD_VAR 0 1
77992: PPUSH
77993: LD_VAR 0 2
77997: PPUSH
77998: LD_VAR 0 3
78002: PPUSH
78003: LD_VAR 0 4
78007: PPUSH
78008: LD_VAR 0 5
78012: PPUSH
78013: LD_VAR 0 6
78017: PPUSH
78018: LD_VAR 0 7
78022: PPUSH
78023: LD_VAR 0 8
78027: PPUSH
78028: LD_VAR 0 9
78032: PPUSH
78033: LD_VAR 0 10
78037: PPUSH
78038: LD_VAR 0 11
78042: PPUSH
78043: CALL 31267 0 11
78047: GO 78050
78049: POP
// end ;
78050: PPOPN 11
78052: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78053: LD_VAR 0 1
78057: PPUSH
78058: LD_VAR 0 2
78062: PPUSH
78063: LD_VAR 0 3
78067: PPUSH
78068: LD_VAR 0 4
78072: PPUSH
78073: LD_VAR 0 5
78077: PPUSH
78078: CALL 33361 0 5
// end ; end_of_file
78082: PPOPN 5
78084: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78085: LD_VAR 0 1
78089: PPUSH
78090: LD_VAR 0 2
78094: PPUSH
78095: LD_VAR 0 3
78099: PPUSH
78100: LD_VAR 0 4
78104: PPUSH
78105: LD_VAR 0 5
78109: PPUSH
78110: LD_VAR 0 6
78114: PPUSH
78115: CALL 18960 0 6
// end ;
78119: PPOPN 6
78121: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78122: CALL 18935 0 0
// end ;
78126: PPOPN 1
78128: END
