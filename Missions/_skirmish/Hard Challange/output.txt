// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 70656 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 255
17962: PUSH
17963: LD_INT 3
17965: EQUAL
17966: PUSH
17967: LD_VAR 0 1
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 34
17977: PUSH
17978: LD_INT 46
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 34
17987: PUSH
17988: LD_INT 47
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 34
17997: PUSH
17998: LD_INT 45
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: PPUSH
18014: CALL_OW 69
18018: IN
18019: AND
18020: IFFALSE 18038
// ru_reserve := ru_reserve ^ un ;
18022: LD_ADDR_EXP 9
18026: PUSH
18027: LD_EXP 9
18031: PUSH
18032: LD_VAR 0 1
18036: ADD
18037: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18038: LD_VAR 0 1
18042: PPUSH
18043: CALL_OW 255
18047: PUSH
18048: LD_INT 3
18050: EQUAL
18051: PUSH
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 264
18061: PUSH
18062: LD_INT 48
18064: PUSH
18065: LD_INT 52
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: IN
18072: NOT
18073: AND
18074: IFFALSE 18091
// ComMoveXY ( un , 65 , 60 ) ;
18076: LD_VAR 0 1
18080: PPUSH
18081: LD_INT 65
18083: PPUSH
18084: LD_INT 60
18086: PPUSH
18087: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18091: LD_VAR 0 1
18095: PUSH
18096: LD_INT 22
18098: PUSH
18099: LD_INT 3
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 34
18108: PUSH
18109: LD_INT 48
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PPUSH
18120: CALL_OW 69
18124: IN
18125: IFFALSE 18178
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18127: LD_INT 12
18129: PPUSH
18130: LD_INT 22
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 70
18144: IFFALSE 18163
// ComAttackPlace ( un , 98 , 10 ) else
18146: LD_VAR 0 1
18150: PPUSH
18151: LD_INT 98
18153: PPUSH
18154: LD_INT 10
18156: PPUSH
18157: CALL_OW 116
18161: GO 18178
// ComAttackPlace ( un , 134 , 99 ) ;
18163: LD_VAR 0 1
18167: PPUSH
18168: LD_INT 134
18170: PPUSH
18171: LD_INT 99
18173: PPUSH
18174: CALL_OW 116
// end ;
18178: PPOPN 2
18180: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL 32684 0 1
// if GetChassis ( un ) = 25 then
18190: LD_VAR 0 1
18194: PPUSH
18195: CALL_OW 265
18199: PUSH
18200: LD_INT 25
18202: EQUAL
18203: IFFALSE 18212
// SetAchievement ( ACH_BEH ) ;
18205: LD_STRING ACH_BEH
18207: PPUSH
18208: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18212: LD_VAR 0 1
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_INT 3
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 21
18229: PUSH
18230: LD_INT 3
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: IN
18246: PUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 266
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: LD_INT 29
18262: PUSH
18263: LD_INT 30
18265: PUSH
18266: LD_INT 26
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: IN
18275: NOT
18276: AND
18277: IFFALSE 18363
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18279: LD_ADDR_EXP 13
18283: PUSH
18284: LD_EXP 13
18288: PUSH
18289: LD_VAR 0 1
18293: PPUSH
18294: CALL_OW 266
18298: ADD
18299: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18300: LD_ADDR_EXP 13
18304: PUSH
18305: LD_EXP 13
18309: PUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 250
18319: ADD
18320: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18321: LD_ADDR_EXP 13
18325: PUSH
18326: LD_EXP 13
18330: PUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 251
18340: ADD
18341: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18342: LD_ADDR_EXP 13
18346: PUSH
18347: LD_EXP 13
18351: PUSH
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 254
18361: ADD
18362: ST_TO_ADDR
// end ; if un in ru_attack_list then
18363: LD_VAR 0 1
18367: PUSH
18368: LD_EXP 10
18372: IN
18373: IFFALSE 18391
// ru_attack_list := ru_attack_list diff un ;
18375: LD_ADDR_EXP 10
18379: PUSH
18380: LD_EXP 10
18384: PUSH
18385: LD_VAR 0 1
18389: DIFF
18390: ST_TO_ADDR
// if un in ru_protector then
18391: LD_VAR 0 1
18395: PUSH
18396: LD_EXP 17
18400: IN
18401: IFFALSE 18419
// ru_protector := ru_protector diff un ;
18403: LD_ADDR_EXP 17
18407: PUSH
18408: LD_EXP 17
18412: PUSH
18413: LD_VAR 0 1
18417: DIFF
18418: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 266
18428: PUSH
18429: LD_INT 30
18431: EQUAL
18432: PUSH
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 255
18442: PUSH
18443: LD_INT 1
18445: EQUAL
18446: AND
18447: IFFALSE 18457
// mine_ck := true ;
18449: LD_ADDR_EXP 35
18453: PUSH
18454: LD_INT 1
18456: ST_TO_ADDR
// end ;
18457: PPOPN 1
18459: END
// on BuildingComplete ( un ) do var i ;
18460: LD_INT 0
18462: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 255
18472: PUSH
18473: LD_INT 1
18475: EQUAL
18476: PUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 266
18486: PUSH
18487: LD_INT 0
18489: EQUAL
18490: AND
18491: IFFALSE 18501
// depotConstructed := true ;
18493: LD_ADDR_EXP 2
18497: PUSH
18498: LD_INT 1
18500: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 255
18510: PUSH
18511: LD_INT 1
18513: EQUAL
18514: PUSH
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 266
18524: PUSH
18525: LD_INT 30
18527: EQUAL
18528: AND
18529: IFFALSE 18539
// mine_constructed := true ;
18531: LD_ADDR_EXP 37
18535: PUSH
18536: LD_INT 1
18538: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 255
18548: PUSH
18549: LD_INT 3
18551: EQUAL
18552: PUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 266
18562: PUSH
18563: LD_INT 0
18565: EQUAL
18566: AND
18567: IFFALSE 18624
// begin for i = 1 to 2 do
18569: LD_ADDR_VAR 0 2
18573: PUSH
18574: DOUBLE
18575: LD_INT 1
18577: DEC
18578: ST_TO_ADDR
18579: LD_INT 2
18581: PUSH
18582: FOR_TO
18583: IFFALSE 18622
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18585: LD_EXP 20
18589: PUSH
18590: LD_VAR 0 2
18594: ARRAY
18595: PPUSH
18596: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18600: LD_EXP 20
18604: PUSH
18605: LD_VAR 0 2
18609: ARRAY
18610: PPUSH
18611: LD_VAR 0 1
18615: PPUSH
18616: CALL_OW 180
// end ;
18620: GO 18582
18622: POP
18623: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 255
18633: PUSH
18634: LD_INT 3
18636: EQUAL
18637: PUSH
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 266
18647: PUSH
18648: LD_EXP 13
18652: IN
18653: AND
18654: IFFALSE 18694
// for i = 1 to 4 do
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: DOUBLE
18662: LD_INT 1
18664: DEC
18665: ST_TO_ADDR
18666: LD_INT 4
18668: PUSH
18669: FOR_TO
18670: IFFALSE 18692
// ru_blist := Delete ( ru_blist , 1 ) ;
18672: LD_ADDR_EXP 13
18676: PUSH
18677: LD_EXP 13
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL_OW 3
18689: ST_TO_ADDR
18690: GO 18669
18692: POP
18693: POP
// end ;
18694: PPOPN 2
18696: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18697: LD_VAR 0 1
18701: PPUSH
18702: LD_VAR 0 2
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: CALL 32782 0 3
// end ;
18716: PPOPN 3
18718: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18719: LD_VAR 0 1
18723: PPUSH
18724: CALL 32790 0 1
// end ; end_of_file
18728: PPOPN 1
18730: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18731: LD_INT 0
18733: PPUSH
// ar_miner := 81 ;
18734: LD_ADDR_EXP 50
18738: PUSH
18739: LD_INT 81
18741: ST_TO_ADDR
// ar_crane := 88 ;
18742: LD_ADDR_EXP 49
18746: PUSH
18747: LD_INT 88
18749: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18750: LD_ADDR_EXP 44
18754: PUSH
18755: LD_INT 89
18757: ST_TO_ADDR
// us_hack := 99 ;
18758: LD_ADDR_EXP 45
18762: PUSH
18763: LD_INT 99
18765: ST_TO_ADDR
// us_artillery := 97 ;
18766: LD_ADDR_EXP 46
18770: PUSH
18771: LD_INT 97
18773: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18774: LD_ADDR_EXP 47
18778: PUSH
18779: LD_INT 91
18781: ST_TO_ADDR
// ar_mortar := 92 ;
18782: LD_ADDR_EXP 48
18786: PUSH
18787: LD_INT 92
18789: ST_TO_ADDR
// ru_radar := 98 ;
18790: LD_ADDR_EXP 43
18794: PUSH
18795: LD_INT 98
18797: ST_TO_ADDR
// tech_Artillery := 80 ;
18798: LD_ADDR_EXP 51
18802: PUSH
18803: LD_INT 80
18805: ST_TO_ADDR
// tech_RadMat := 81 ;
18806: LD_ADDR_EXP 52
18810: PUSH
18811: LD_INT 81
18813: ST_TO_ADDR
// tech_BasicTools := 82 ;
18814: LD_ADDR_EXP 53
18818: PUSH
18819: LD_INT 82
18821: ST_TO_ADDR
// tech_Cargo := 83 ;
18822: LD_ADDR_EXP 54
18826: PUSH
18827: LD_INT 83
18829: ST_TO_ADDR
// tech_Track := 84 ;
18830: LD_ADDR_EXP 55
18834: PUSH
18835: LD_INT 84
18837: ST_TO_ADDR
// tech_Crane := 85 ;
18838: LD_ADDR_EXP 56
18842: PUSH
18843: LD_INT 85
18845: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18846: LD_ADDR_EXP 57
18850: PUSH
18851: LD_INT 86
18853: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18854: LD_ADDR_EXP 58
18858: PUSH
18859: LD_INT 87
18861: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18862: LD_ADDR_EXP 59
18866: PUSH
18867: LD_INT 88
18869: ST_TO_ADDR
// class_mastodont := 31 ;
18870: LD_ADDR_EXP 60
18874: PUSH
18875: LD_INT 31
18877: ST_TO_ADDR
// class_horse := 21 ;
18878: LD_ADDR_EXP 61
18882: PUSH
18883: LD_INT 21
18885: ST_TO_ADDR
// end ;
18886: LD_VAR 0 1
18890: RET
// every 1 do
18891: GO 18893
18893: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18894: CALL 18731 0 0
18898: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18899: LD_INT 0
18901: PPUSH
// if p2 = 100 then
18902: LD_VAR 0 2
18906: PUSH
18907: LD_INT 100
18909: EQUAL
18910: IFFALSE 19913
// begin if not StreamModeActive then
18912: LD_EXP 62
18916: NOT
18917: IFFALSE 18927
// StreamModeActive := true ;
18919: LD_ADDR_EXP 62
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// if p3 = 0 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 0
18934: EQUAL
18935: IFFALSE 18941
// InitStreamMode ;
18937: CALL 20073 0 0
// if p3 = 1 then
18941: LD_VAR 0 3
18945: PUSH
18946: LD_INT 1
18948: EQUAL
18949: IFFALSE 18959
// sRocket := true ;
18951: LD_ADDR_EXP 67
18955: PUSH
18956: LD_INT 1
18958: ST_TO_ADDR
// if p3 = 2 then
18959: LD_VAR 0 3
18963: PUSH
18964: LD_INT 2
18966: EQUAL
18967: IFFALSE 18977
// sSpeed := true ;
18969: LD_ADDR_EXP 66
18973: PUSH
18974: LD_INT 1
18976: ST_TO_ADDR
// if p3 = 3 then
18977: LD_VAR 0 3
18981: PUSH
18982: LD_INT 3
18984: EQUAL
18985: IFFALSE 18995
// sEngine := true ;
18987: LD_ADDR_EXP 68
18991: PUSH
18992: LD_INT 1
18994: ST_TO_ADDR
// if p3 = 4 then
18995: LD_VAR 0 3
18999: PUSH
19000: LD_INT 4
19002: EQUAL
19003: IFFALSE 19013
// sSpec := true ;
19005: LD_ADDR_EXP 65
19009: PUSH
19010: LD_INT 1
19012: ST_TO_ADDR
// if p3 = 5 then
19013: LD_VAR 0 3
19017: PUSH
19018: LD_INT 5
19020: EQUAL
19021: IFFALSE 19031
// sLevel := true ;
19023: LD_ADDR_EXP 69
19027: PUSH
19028: LD_INT 1
19030: ST_TO_ADDR
// if p3 = 6 then
19031: LD_VAR 0 3
19035: PUSH
19036: LD_INT 6
19038: EQUAL
19039: IFFALSE 19049
// sArmoury := true ;
19041: LD_ADDR_EXP 70
19045: PUSH
19046: LD_INT 1
19048: ST_TO_ADDR
// if p3 = 7 then
19049: LD_VAR 0 3
19053: PUSH
19054: LD_INT 7
19056: EQUAL
19057: IFFALSE 19067
// sRadar := true ;
19059: LD_ADDR_EXP 71
19063: PUSH
19064: LD_INT 1
19066: ST_TO_ADDR
// if p3 = 8 then
19067: LD_VAR 0 3
19071: PUSH
19072: LD_INT 8
19074: EQUAL
19075: IFFALSE 19085
// sBunker := true ;
19077: LD_ADDR_EXP 72
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// if p3 = 9 then
19085: LD_VAR 0 3
19089: PUSH
19090: LD_INT 9
19092: EQUAL
19093: IFFALSE 19103
// sHack := true ;
19095: LD_ADDR_EXP 73
19099: PUSH
19100: LD_INT 1
19102: ST_TO_ADDR
// if p3 = 10 then
19103: LD_VAR 0 3
19107: PUSH
19108: LD_INT 10
19110: EQUAL
19111: IFFALSE 19121
// sFire := true ;
19113: LD_ADDR_EXP 74
19117: PUSH
19118: LD_INT 1
19120: ST_TO_ADDR
// if p3 = 11 then
19121: LD_VAR 0 3
19125: PUSH
19126: LD_INT 11
19128: EQUAL
19129: IFFALSE 19139
// sRefresh := true ;
19131: LD_ADDR_EXP 75
19135: PUSH
19136: LD_INT 1
19138: ST_TO_ADDR
// if p3 = 12 then
19139: LD_VAR 0 3
19143: PUSH
19144: LD_INT 12
19146: EQUAL
19147: IFFALSE 19157
// sExp := true ;
19149: LD_ADDR_EXP 76
19153: PUSH
19154: LD_INT 1
19156: ST_TO_ADDR
// if p3 = 13 then
19157: LD_VAR 0 3
19161: PUSH
19162: LD_INT 13
19164: EQUAL
19165: IFFALSE 19175
// sDepot := true ;
19167: LD_ADDR_EXP 77
19171: PUSH
19172: LD_INT 1
19174: ST_TO_ADDR
// if p3 = 14 then
19175: LD_VAR 0 3
19179: PUSH
19180: LD_INT 14
19182: EQUAL
19183: IFFALSE 19193
// sFlag := true ;
19185: LD_ADDR_EXP 78
19189: PUSH
19190: LD_INT 1
19192: ST_TO_ADDR
// if p3 = 15 then
19193: LD_VAR 0 3
19197: PUSH
19198: LD_INT 15
19200: EQUAL
19201: IFFALSE 19211
// sKamikadze := true ;
19203: LD_ADDR_EXP 86
19207: PUSH
19208: LD_INT 1
19210: ST_TO_ADDR
// if p3 = 16 then
19211: LD_VAR 0 3
19215: PUSH
19216: LD_INT 16
19218: EQUAL
19219: IFFALSE 19229
// sTroll := true ;
19221: LD_ADDR_EXP 87
19225: PUSH
19226: LD_INT 1
19228: ST_TO_ADDR
// if p3 = 17 then
19229: LD_VAR 0 3
19233: PUSH
19234: LD_INT 17
19236: EQUAL
19237: IFFALSE 19247
// sSlow := true ;
19239: LD_ADDR_EXP 88
19243: PUSH
19244: LD_INT 1
19246: ST_TO_ADDR
// if p3 = 18 then
19247: LD_VAR 0 3
19251: PUSH
19252: LD_INT 18
19254: EQUAL
19255: IFFALSE 19265
// sLack := true ;
19257: LD_ADDR_EXP 89
19261: PUSH
19262: LD_INT 1
19264: ST_TO_ADDR
// if p3 = 19 then
19265: LD_VAR 0 3
19269: PUSH
19270: LD_INT 19
19272: EQUAL
19273: IFFALSE 19283
// sTank := true ;
19275: LD_ADDR_EXP 91
19279: PUSH
19280: LD_INT 1
19282: ST_TO_ADDR
// if p3 = 20 then
19283: LD_VAR 0 3
19287: PUSH
19288: LD_INT 20
19290: EQUAL
19291: IFFALSE 19301
// sRemote := true ;
19293: LD_ADDR_EXP 92
19297: PUSH
19298: LD_INT 1
19300: ST_TO_ADDR
// if p3 = 21 then
19301: LD_VAR 0 3
19305: PUSH
19306: LD_INT 21
19308: EQUAL
19309: IFFALSE 19319
// sPowell := true ;
19311: LD_ADDR_EXP 93
19315: PUSH
19316: LD_INT 1
19318: ST_TO_ADDR
// if p3 = 22 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 22
19326: EQUAL
19327: IFFALSE 19337
// sTeleport := true ;
19329: LD_ADDR_EXP 96
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 23 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 23
19344: EQUAL
19345: IFFALSE 19355
// sOilTower := true ;
19347: LD_ADDR_EXP 98
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// if p3 = 24 then
19355: LD_VAR 0 3
19359: PUSH
19360: LD_INT 24
19362: EQUAL
19363: IFFALSE 19373
// sShovel := true ;
19365: LD_ADDR_EXP 99
19369: PUSH
19370: LD_INT 1
19372: ST_TO_ADDR
// if p3 = 25 then
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 25
19380: EQUAL
19381: IFFALSE 19391
// sSheik := true ;
19383: LD_ADDR_EXP 100
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if p3 = 26 then
19391: LD_VAR 0 3
19395: PUSH
19396: LD_INT 26
19398: EQUAL
19399: IFFALSE 19409
// sEarthquake := true ;
19401: LD_ADDR_EXP 102
19405: PUSH
19406: LD_INT 1
19408: ST_TO_ADDR
// if p3 = 27 then
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 27
19416: EQUAL
19417: IFFALSE 19427
// sAI := true ;
19419: LD_ADDR_EXP 103
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
// if p3 = 28 then
19427: LD_VAR 0 3
19431: PUSH
19432: LD_INT 28
19434: EQUAL
19435: IFFALSE 19445
// sCargo := true ;
19437: LD_ADDR_EXP 106
19441: PUSH
19442: LD_INT 1
19444: ST_TO_ADDR
// if p3 = 29 then
19445: LD_VAR 0 3
19449: PUSH
19450: LD_INT 29
19452: EQUAL
19453: IFFALSE 19463
// sDLaser := true ;
19455: LD_ADDR_EXP 107
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// if p3 = 30 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 30
19470: EQUAL
19471: IFFALSE 19481
// sExchange := true ;
19473: LD_ADDR_EXP 108
19477: PUSH
19478: LD_INT 1
19480: ST_TO_ADDR
// if p3 = 31 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 31
19488: EQUAL
19489: IFFALSE 19499
// sFac := true ;
19491: LD_ADDR_EXP 109
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 32 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 32
19506: EQUAL
19507: IFFALSE 19517
// sPower := true ;
19509: LD_ADDR_EXP 110
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 33 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 33
19524: EQUAL
19525: IFFALSE 19535
// sRandom := true ;
19527: LD_ADDR_EXP 111
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 34 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 34
19542: EQUAL
19543: IFFALSE 19553
// sShield := true ;
19545: LD_ADDR_EXP 112
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 35 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 35
19560: EQUAL
19561: IFFALSE 19571
// sTime := true ;
19563: LD_ADDR_EXP 113
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 36 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 36
19578: EQUAL
19579: IFFALSE 19589
// sTools := true ;
19581: LD_ADDR_EXP 114
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 101 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 101
19596: EQUAL
19597: IFFALSE 19607
// sSold := true ;
19599: LD_ADDR_EXP 79
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 102 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 102
19614: EQUAL
19615: IFFALSE 19625
// sDiff := true ;
19617: LD_ADDR_EXP 80
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 103 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 103
19632: EQUAL
19633: IFFALSE 19643
// sFog := true ;
19635: LD_ADDR_EXP 83
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 104 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 104
19650: EQUAL
19651: IFFALSE 19661
// sReset := true ;
19653: LD_ADDR_EXP 84
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 105 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 105
19668: EQUAL
19669: IFFALSE 19679
// sSun := true ;
19671: LD_ADDR_EXP 85
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 106 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 106
19686: EQUAL
19687: IFFALSE 19697
// sTiger := true ;
19689: LD_ADDR_EXP 81
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 107 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 107
19704: EQUAL
19705: IFFALSE 19715
// sBomb := true ;
19707: LD_ADDR_EXP 82
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 108 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 108
19722: EQUAL
19723: IFFALSE 19733
// sWound := true ;
19725: LD_ADDR_EXP 90
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 109 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 109
19740: EQUAL
19741: IFFALSE 19751
// sBetray := true ;
19743: LD_ADDR_EXP 94
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if p3 = 110 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 110
19758: EQUAL
19759: IFFALSE 19769
// sContamin := true ;
19761: LD_ADDR_EXP 95
19765: PUSH
19766: LD_INT 1
19768: ST_TO_ADDR
// if p3 = 111 then
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 111
19776: EQUAL
19777: IFFALSE 19787
// sOil := true ;
19779: LD_ADDR_EXP 97
19783: PUSH
19784: LD_INT 1
19786: ST_TO_ADDR
// if p3 = 112 then
19787: LD_VAR 0 3
19791: PUSH
19792: LD_INT 112
19794: EQUAL
19795: IFFALSE 19805
// sStu := true ;
19797: LD_ADDR_EXP 101
19801: PUSH
19802: LD_INT 1
19804: ST_TO_ADDR
// if p3 = 113 then
19805: LD_VAR 0 3
19809: PUSH
19810: LD_INT 113
19812: EQUAL
19813: IFFALSE 19823
// sBazooka := true ;
19815: LD_ADDR_EXP 104
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 114 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 114
19830: EQUAL
19831: IFFALSE 19841
// sMortar := true ;
19833: LD_ADDR_EXP 105
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 115 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 115
19848: EQUAL
19849: IFFALSE 19859
// sRanger := true ;
19851: LD_ADDR_EXP 115
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 116 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 116
19866: EQUAL
19867: IFFALSE 19877
// sComputer := true ;
19869: LD_ADDR_EXP 116
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 117 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 117
19884: EQUAL
19885: IFFALSE 19895
// s30 := true ;
19887: LD_ADDR_EXP 117
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 118 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 118
19902: EQUAL
19903: IFFALSE 19913
// s60 := true ;
19905: LD_ADDR_EXP 118
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// end ; if p2 = 101 then
19913: LD_VAR 0 2
19917: PUSH
19918: LD_INT 101
19920: EQUAL
19921: IFFALSE 20049
// begin case p3 of 1 :
19923: LD_VAR 0 3
19927: PUSH
19928: LD_INT 1
19930: DOUBLE
19931: EQUAL
19932: IFTRUE 19936
19934: GO 19943
19936: POP
// hHackUnlimitedResources ; 2 :
19937: CALL 31645 0 0
19941: GO 20049
19943: LD_INT 2
19945: DOUBLE
19946: EQUAL
19947: IFTRUE 19951
19949: GO 19958
19951: POP
// hHackSetLevel10 ; 3 :
19952: CALL 31778 0 0
19956: GO 20049
19958: LD_INT 3
19960: DOUBLE
19961: EQUAL
19962: IFTRUE 19966
19964: GO 19973
19966: POP
// hHackSetLevel10YourUnits ; 4 :
19967: CALL 31863 0 0
19971: GO 20049
19973: LD_INT 4
19975: DOUBLE
19976: EQUAL
19977: IFTRUE 19981
19979: GO 19988
19981: POP
// hHackInvincible ; 5 :
19982: CALL 32311 0 0
19986: GO 20049
19988: LD_INT 5
19990: DOUBLE
19991: EQUAL
19992: IFTRUE 19996
19994: GO 20003
19996: POP
// hHackInvisible ; 6 :
19997: CALL 32422 0 0
20001: GO 20049
20003: LD_INT 6
20005: DOUBLE
20006: EQUAL
20007: IFTRUE 20011
20009: GO 20018
20011: POP
// hHackChangeYourSide ; 7 :
20012: CALL 32479 0 0
20016: GO 20049
20018: LD_INT 7
20020: DOUBLE
20021: EQUAL
20022: IFTRUE 20026
20024: GO 20033
20026: POP
// hHackChangeUnitSide ; 8 :
20027: CALL 32521 0 0
20031: GO 20049
20033: LD_INT 8
20035: DOUBLE
20036: EQUAL
20037: IFTRUE 20041
20039: GO 20048
20041: POP
// hHackFog ; end ;
20042: CALL 32622 0 0
20046: GO 20049
20048: POP
// end ; end ;
20049: LD_VAR 0 7
20053: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20054: GO 20056
20056: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20057: LD_STRING initStreamRollete();
20059: PPUSH
20060: CALL_OW 559
// InitStreamMode ;
20064: CALL 20073 0 0
// DefineStreamItems ( ) ;
20068: CALL 20537 0 0
// end ;
20072: END
// function InitStreamMode ; begin
20073: LD_INT 0
20075: PPUSH
// streamModeActive := false ;
20076: LD_ADDR_EXP 62
20080: PUSH
20081: LD_INT 0
20083: ST_TO_ADDR
// normalCounter := 36 ;
20084: LD_ADDR_EXP 63
20088: PUSH
20089: LD_INT 36
20091: ST_TO_ADDR
// hardcoreCounter := 16 ;
20092: LD_ADDR_EXP 64
20096: PUSH
20097: LD_INT 16
20099: ST_TO_ADDR
// sRocket := false ;
20100: LD_ADDR_EXP 67
20104: PUSH
20105: LD_INT 0
20107: ST_TO_ADDR
// sSpeed := false ;
20108: LD_ADDR_EXP 66
20112: PUSH
20113: LD_INT 0
20115: ST_TO_ADDR
// sEngine := false ;
20116: LD_ADDR_EXP 68
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// sSpec := false ;
20124: LD_ADDR_EXP 65
20128: PUSH
20129: LD_INT 0
20131: ST_TO_ADDR
// sLevel := false ;
20132: LD_ADDR_EXP 69
20136: PUSH
20137: LD_INT 0
20139: ST_TO_ADDR
// sArmoury := false ;
20140: LD_ADDR_EXP 70
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// sRadar := false ;
20148: LD_ADDR_EXP 71
20152: PUSH
20153: LD_INT 0
20155: ST_TO_ADDR
// sBunker := false ;
20156: LD_ADDR_EXP 72
20160: PUSH
20161: LD_INT 0
20163: ST_TO_ADDR
// sHack := false ;
20164: LD_ADDR_EXP 73
20168: PUSH
20169: LD_INT 0
20171: ST_TO_ADDR
// sFire := false ;
20172: LD_ADDR_EXP 74
20176: PUSH
20177: LD_INT 0
20179: ST_TO_ADDR
// sRefresh := false ;
20180: LD_ADDR_EXP 75
20184: PUSH
20185: LD_INT 0
20187: ST_TO_ADDR
// sExp := false ;
20188: LD_ADDR_EXP 76
20192: PUSH
20193: LD_INT 0
20195: ST_TO_ADDR
// sDepot := false ;
20196: LD_ADDR_EXP 77
20200: PUSH
20201: LD_INT 0
20203: ST_TO_ADDR
// sFlag := false ;
20204: LD_ADDR_EXP 78
20208: PUSH
20209: LD_INT 0
20211: ST_TO_ADDR
// sKamikadze := false ;
20212: LD_ADDR_EXP 86
20216: PUSH
20217: LD_INT 0
20219: ST_TO_ADDR
// sTroll := false ;
20220: LD_ADDR_EXP 87
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// sSlow := false ;
20228: LD_ADDR_EXP 88
20232: PUSH
20233: LD_INT 0
20235: ST_TO_ADDR
// sLack := false ;
20236: LD_ADDR_EXP 89
20240: PUSH
20241: LD_INT 0
20243: ST_TO_ADDR
// sTank := false ;
20244: LD_ADDR_EXP 91
20248: PUSH
20249: LD_INT 0
20251: ST_TO_ADDR
// sRemote := false ;
20252: LD_ADDR_EXP 92
20256: PUSH
20257: LD_INT 0
20259: ST_TO_ADDR
// sPowell := false ;
20260: LD_ADDR_EXP 93
20264: PUSH
20265: LD_INT 0
20267: ST_TO_ADDR
// sTeleport := false ;
20268: LD_ADDR_EXP 96
20272: PUSH
20273: LD_INT 0
20275: ST_TO_ADDR
// sOilTower := false ;
20276: LD_ADDR_EXP 98
20280: PUSH
20281: LD_INT 0
20283: ST_TO_ADDR
// sShovel := false ;
20284: LD_ADDR_EXP 99
20288: PUSH
20289: LD_INT 0
20291: ST_TO_ADDR
// sSheik := false ;
20292: LD_ADDR_EXP 100
20296: PUSH
20297: LD_INT 0
20299: ST_TO_ADDR
// sEarthquake := false ;
20300: LD_ADDR_EXP 102
20304: PUSH
20305: LD_INT 0
20307: ST_TO_ADDR
// sAI := false ;
20308: LD_ADDR_EXP 103
20312: PUSH
20313: LD_INT 0
20315: ST_TO_ADDR
// sCargo := false ;
20316: LD_ADDR_EXP 106
20320: PUSH
20321: LD_INT 0
20323: ST_TO_ADDR
// sDLaser := false ;
20324: LD_ADDR_EXP 107
20328: PUSH
20329: LD_INT 0
20331: ST_TO_ADDR
// sExchange := false ;
20332: LD_ADDR_EXP 108
20336: PUSH
20337: LD_INT 0
20339: ST_TO_ADDR
// sFac := false ;
20340: LD_ADDR_EXP 109
20344: PUSH
20345: LD_INT 0
20347: ST_TO_ADDR
// sPower := false ;
20348: LD_ADDR_EXP 110
20352: PUSH
20353: LD_INT 0
20355: ST_TO_ADDR
// sRandom := false ;
20356: LD_ADDR_EXP 111
20360: PUSH
20361: LD_INT 0
20363: ST_TO_ADDR
// sShield := false ;
20364: LD_ADDR_EXP 112
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// sTime := false ;
20372: LD_ADDR_EXP 113
20376: PUSH
20377: LD_INT 0
20379: ST_TO_ADDR
// sTools := false ;
20380: LD_ADDR_EXP 114
20384: PUSH
20385: LD_INT 0
20387: ST_TO_ADDR
// sSold := false ;
20388: LD_ADDR_EXP 79
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
// sDiff := false ;
20396: LD_ADDR_EXP 80
20400: PUSH
20401: LD_INT 0
20403: ST_TO_ADDR
// sFog := false ;
20404: LD_ADDR_EXP 83
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// sReset := false ;
20412: LD_ADDR_EXP 84
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// sSun := false ;
20420: LD_ADDR_EXP 85
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// sTiger := false ;
20428: LD_ADDR_EXP 81
20432: PUSH
20433: LD_INT 0
20435: ST_TO_ADDR
// sBomb := false ;
20436: LD_ADDR_EXP 82
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// sWound := false ;
20444: LD_ADDR_EXP 90
20448: PUSH
20449: LD_INT 0
20451: ST_TO_ADDR
// sBetray := false ;
20452: LD_ADDR_EXP 94
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
// sContamin := false ;
20460: LD_ADDR_EXP 95
20464: PUSH
20465: LD_INT 0
20467: ST_TO_ADDR
// sOil := false ;
20468: LD_ADDR_EXP 97
20472: PUSH
20473: LD_INT 0
20475: ST_TO_ADDR
// sStu := false ;
20476: LD_ADDR_EXP 101
20480: PUSH
20481: LD_INT 0
20483: ST_TO_ADDR
// sBazooka := false ;
20484: LD_ADDR_EXP 104
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// sMortar := false ;
20492: LD_ADDR_EXP 105
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
// sRanger := false ;
20500: LD_ADDR_EXP 115
20504: PUSH
20505: LD_INT 0
20507: ST_TO_ADDR
// sComputer := false ;
20508: LD_ADDR_EXP 116
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// s30 := false ;
20516: LD_ADDR_EXP 117
20520: PUSH
20521: LD_INT 0
20523: ST_TO_ADDR
// s60 := false ;
20524: LD_ADDR_EXP 118
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// end ;
20532: LD_VAR 0 1
20536: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20537: LD_INT 0
20539: PPUSH
20540: PPUSH
20541: PPUSH
20542: PPUSH
20543: PPUSH
// result := [ ] ;
20544: LD_ADDR_VAR 0 1
20548: PUSH
20549: EMPTY
20550: ST_TO_ADDR
// if campaign_id = 1 then
20551: LD_OWVAR 69
20555: PUSH
20556: LD_INT 1
20558: EQUAL
20559: IFFALSE 23725
// begin case mission_number of 1 :
20561: LD_OWVAR 70
20565: PUSH
20566: LD_INT 1
20568: DOUBLE
20569: EQUAL
20570: IFTRUE 20574
20572: GO 20650
20574: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20575: LD_ADDR_VAR 0 1
20579: PUSH
20580: LD_INT 2
20582: PUSH
20583: LD_INT 4
20585: PUSH
20586: LD_INT 11
20588: PUSH
20589: LD_INT 12
20591: PUSH
20592: LD_INT 15
20594: PUSH
20595: LD_INT 16
20597: PUSH
20598: LD_INT 22
20600: PUSH
20601: LD_INT 23
20603: PUSH
20604: LD_INT 26
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 101
20620: PUSH
20621: LD_INT 102
20623: PUSH
20624: LD_INT 106
20626: PUSH
20627: LD_INT 116
20629: PUSH
20630: LD_INT 117
20632: PUSH
20633: LD_INT 118
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: ST_TO_ADDR
20648: GO 23723
20650: LD_INT 2
20652: DOUBLE
20653: EQUAL
20654: IFTRUE 20658
20656: GO 20742
20658: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20659: LD_ADDR_VAR 0 1
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 4
20669: PUSH
20670: LD_INT 11
20672: PUSH
20673: LD_INT 12
20675: PUSH
20676: LD_INT 15
20678: PUSH
20679: LD_INT 16
20681: PUSH
20682: LD_INT 22
20684: PUSH
20685: LD_INT 23
20687: PUSH
20688: LD_INT 26
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 101
20704: PUSH
20705: LD_INT 102
20707: PUSH
20708: LD_INT 105
20710: PUSH
20711: LD_INT 106
20713: PUSH
20714: LD_INT 108
20716: PUSH
20717: LD_INT 116
20719: PUSH
20720: LD_INT 117
20722: PUSH
20723: LD_INT 118
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: ST_TO_ADDR
20740: GO 23723
20742: LD_INT 3
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20838
20750: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20751: LD_ADDR_VAR 0 1
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: LD_INT 4
20761: PUSH
20762: LD_INT 5
20764: PUSH
20765: LD_INT 11
20767: PUSH
20768: LD_INT 12
20770: PUSH
20771: LD_INT 15
20773: PUSH
20774: LD_INT 16
20776: PUSH
20777: LD_INT 22
20779: PUSH
20780: LD_INT 26
20782: PUSH
20783: LD_INT 36
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 101
20800: PUSH
20801: LD_INT 102
20803: PUSH
20804: LD_INT 105
20806: PUSH
20807: LD_INT 106
20809: PUSH
20810: LD_INT 108
20812: PUSH
20813: LD_INT 116
20815: PUSH
20816: LD_INT 117
20818: PUSH
20819: LD_INT 118
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: ST_TO_ADDR
20836: GO 23723
20838: LD_INT 4
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20942
20846: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20847: LD_ADDR_VAR 0 1
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 4
20857: PUSH
20858: LD_INT 5
20860: PUSH
20861: LD_INT 8
20863: PUSH
20864: LD_INT 11
20866: PUSH
20867: LD_INT 12
20869: PUSH
20870: LD_INT 15
20872: PUSH
20873: LD_INT 16
20875: PUSH
20876: LD_INT 22
20878: PUSH
20879: LD_INT 23
20881: PUSH
20882: LD_INT 26
20884: PUSH
20885: LD_INT 36
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 101
20904: PUSH
20905: LD_INT 102
20907: PUSH
20908: LD_INT 105
20910: PUSH
20911: LD_INT 106
20913: PUSH
20914: LD_INT 108
20916: PUSH
20917: LD_INT 116
20919: PUSH
20920: LD_INT 117
20922: PUSH
20923: LD_INT 118
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: ST_TO_ADDR
20940: GO 23723
20942: LD_INT 5
20944: DOUBLE
20945: EQUAL
20946: IFTRUE 20950
20948: GO 21062
20950: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20951: LD_ADDR_VAR 0 1
20955: PUSH
20956: LD_INT 2
20958: PUSH
20959: LD_INT 4
20961: PUSH
20962: LD_INT 5
20964: PUSH
20965: LD_INT 6
20967: PUSH
20968: LD_INT 8
20970: PUSH
20971: LD_INT 11
20973: PUSH
20974: LD_INT 12
20976: PUSH
20977: LD_INT 15
20979: PUSH
20980: LD_INT 16
20982: PUSH
20983: LD_INT 22
20985: PUSH
20986: LD_INT 23
20988: PUSH
20989: LD_INT 25
20991: PUSH
20992: LD_INT 26
20994: PUSH
20995: LD_INT 36
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 101
21016: PUSH
21017: LD_INT 102
21019: PUSH
21020: LD_INT 105
21022: PUSH
21023: LD_INT 106
21025: PUSH
21026: LD_INT 108
21028: PUSH
21029: LD_INT 109
21031: PUSH
21032: LD_INT 112
21034: PUSH
21035: LD_INT 116
21037: PUSH
21038: LD_INT 117
21040: PUSH
21041: LD_INT 118
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: ST_TO_ADDR
21060: GO 23723
21062: LD_INT 6
21064: DOUBLE
21065: EQUAL
21066: IFTRUE 21070
21068: GO 21202
21070: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21071: LD_ADDR_VAR 0 1
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: LD_INT 4
21081: PUSH
21082: LD_INT 5
21084: PUSH
21085: LD_INT 6
21087: PUSH
21088: LD_INT 8
21090: PUSH
21091: LD_INT 11
21093: PUSH
21094: LD_INT 12
21096: PUSH
21097: LD_INT 15
21099: PUSH
21100: LD_INT 16
21102: PUSH
21103: LD_INT 20
21105: PUSH
21106: LD_INT 21
21108: PUSH
21109: LD_INT 22
21111: PUSH
21112: LD_INT 23
21114: PUSH
21115: LD_INT 25
21117: PUSH
21118: LD_INT 26
21120: PUSH
21121: LD_INT 30
21123: PUSH
21124: LD_INT 31
21126: PUSH
21127: LD_INT 32
21129: PUSH
21130: LD_INT 36
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 101
21156: PUSH
21157: LD_INT 102
21159: PUSH
21160: LD_INT 105
21162: PUSH
21163: LD_INT 106
21165: PUSH
21166: LD_INT 108
21168: PUSH
21169: LD_INT 109
21171: PUSH
21172: LD_INT 112
21174: PUSH
21175: LD_INT 116
21177: PUSH
21178: LD_INT 117
21180: PUSH
21181: LD_INT 118
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: ST_TO_ADDR
21200: GO 23723
21202: LD_INT 7
21204: DOUBLE
21205: EQUAL
21206: IFTRUE 21210
21208: GO 21322
21210: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21211: LD_ADDR_VAR 0 1
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: LD_INT 4
21221: PUSH
21222: LD_INT 5
21224: PUSH
21225: LD_INT 7
21227: PUSH
21228: LD_INT 11
21230: PUSH
21231: LD_INT 12
21233: PUSH
21234: LD_INT 15
21236: PUSH
21237: LD_INT 16
21239: PUSH
21240: LD_INT 20
21242: PUSH
21243: LD_INT 21
21245: PUSH
21246: LD_INT 22
21248: PUSH
21249: LD_INT 23
21251: PUSH
21252: LD_INT 25
21254: PUSH
21255: LD_INT 26
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 101
21276: PUSH
21277: LD_INT 102
21279: PUSH
21280: LD_INT 103
21282: PUSH
21283: LD_INT 105
21285: PUSH
21286: LD_INT 106
21288: PUSH
21289: LD_INT 108
21291: PUSH
21292: LD_INT 112
21294: PUSH
21295: LD_INT 116
21297: PUSH
21298: LD_INT 117
21300: PUSH
21301: LD_INT 118
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: ST_TO_ADDR
21320: GO 23723
21322: LD_INT 8
21324: DOUBLE
21325: EQUAL
21326: IFTRUE 21330
21328: GO 21470
21330: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21331: LD_ADDR_VAR 0 1
21335: PUSH
21336: LD_INT 2
21338: PUSH
21339: LD_INT 4
21341: PUSH
21342: LD_INT 5
21344: PUSH
21345: LD_INT 6
21347: PUSH
21348: LD_INT 7
21350: PUSH
21351: LD_INT 8
21353: PUSH
21354: LD_INT 11
21356: PUSH
21357: LD_INT 12
21359: PUSH
21360: LD_INT 15
21362: PUSH
21363: LD_INT 16
21365: PUSH
21366: LD_INT 20
21368: PUSH
21369: LD_INT 21
21371: PUSH
21372: LD_INT 22
21374: PUSH
21375: LD_INT 23
21377: PUSH
21378: LD_INT 25
21380: PUSH
21381: LD_INT 26
21383: PUSH
21384: LD_INT 30
21386: PUSH
21387: LD_INT 31
21389: PUSH
21390: LD_INT 32
21392: PUSH
21393: LD_INT 36
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 101
21420: PUSH
21421: LD_INT 102
21423: PUSH
21424: LD_INT 103
21426: PUSH
21427: LD_INT 105
21429: PUSH
21430: LD_INT 106
21432: PUSH
21433: LD_INT 108
21435: PUSH
21436: LD_INT 109
21438: PUSH
21439: LD_INT 112
21441: PUSH
21442: LD_INT 116
21444: PUSH
21445: LD_INT 117
21447: PUSH
21448: LD_INT 118
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: ST_TO_ADDR
21468: GO 23723
21470: LD_INT 9
21472: DOUBLE
21473: EQUAL
21474: IFTRUE 21478
21476: GO 21626
21478: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21479: LD_ADDR_VAR 0 1
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: LD_INT 4
21489: PUSH
21490: LD_INT 5
21492: PUSH
21493: LD_INT 6
21495: PUSH
21496: LD_INT 7
21498: PUSH
21499: LD_INT 8
21501: PUSH
21502: LD_INT 11
21504: PUSH
21505: LD_INT 12
21507: PUSH
21508: LD_INT 15
21510: PUSH
21511: LD_INT 16
21513: PUSH
21514: LD_INT 20
21516: PUSH
21517: LD_INT 21
21519: PUSH
21520: LD_INT 22
21522: PUSH
21523: LD_INT 23
21525: PUSH
21526: LD_INT 25
21528: PUSH
21529: LD_INT 26
21531: PUSH
21532: LD_INT 28
21534: PUSH
21535: LD_INT 30
21537: PUSH
21538: LD_INT 31
21540: PUSH
21541: LD_INT 32
21543: PUSH
21544: LD_INT 36
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 101
21572: PUSH
21573: LD_INT 102
21575: PUSH
21576: LD_INT 103
21578: PUSH
21579: LD_INT 105
21581: PUSH
21582: LD_INT 106
21584: PUSH
21585: LD_INT 108
21587: PUSH
21588: LD_INT 109
21590: PUSH
21591: LD_INT 112
21593: PUSH
21594: LD_INT 114
21596: PUSH
21597: LD_INT 116
21599: PUSH
21600: LD_INT 117
21602: PUSH
21603: LD_INT 118
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: ST_TO_ADDR
21624: GO 23723
21626: LD_INT 10
21628: DOUBLE
21629: EQUAL
21630: IFTRUE 21634
21632: GO 21830
21634: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21635: LD_ADDR_VAR 0 1
21639: PUSH
21640: LD_INT 2
21642: PUSH
21643: LD_INT 4
21645: PUSH
21646: LD_INT 5
21648: PUSH
21649: LD_INT 6
21651: PUSH
21652: LD_INT 7
21654: PUSH
21655: LD_INT 8
21657: PUSH
21658: LD_INT 9
21660: PUSH
21661: LD_INT 10
21663: PUSH
21664: LD_INT 11
21666: PUSH
21667: LD_INT 12
21669: PUSH
21670: LD_INT 13
21672: PUSH
21673: LD_INT 14
21675: PUSH
21676: LD_INT 15
21678: PUSH
21679: LD_INT 16
21681: PUSH
21682: LD_INT 17
21684: PUSH
21685: LD_INT 18
21687: PUSH
21688: LD_INT 19
21690: PUSH
21691: LD_INT 20
21693: PUSH
21694: LD_INT 21
21696: PUSH
21697: LD_INT 22
21699: PUSH
21700: LD_INT 23
21702: PUSH
21703: LD_INT 24
21705: PUSH
21706: LD_INT 25
21708: PUSH
21709: LD_INT 26
21711: PUSH
21712: LD_INT 28
21714: PUSH
21715: LD_INT 30
21717: PUSH
21718: LD_INT 31
21720: PUSH
21721: LD_INT 32
21723: PUSH
21724: LD_INT 36
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 101
21760: PUSH
21761: LD_INT 102
21763: PUSH
21764: LD_INT 103
21766: PUSH
21767: LD_INT 104
21769: PUSH
21770: LD_INT 105
21772: PUSH
21773: LD_INT 106
21775: PUSH
21776: LD_INT 107
21778: PUSH
21779: LD_INT 108
21781: PUSH
21782: LD_INT 109
21784: PUSH
21785: LD_INT 110
21787: PUSH
21788: LD_INT 111
21790: PUSH
21791: LD_INT 112
21793: PUSH
21794: LD_INT 114
21796: PUSH
21797: LD_INT 116
21799: PUSH
21800: LD_INT 117
21802: PUSH
21803: LD_INT 118
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: ST_TO_ADDR
21828: GO 23723
21830: LD_INT 11
21832: DOUBLE
21833: EQUAL
21834: IFTRUE 21838
21836: GO 22042
21838: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21839: LD_ADDR_VAR 0 1
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: LD_INT 3
21849: PUSH
21850: LD_INT 4
21852: PUSH
21853: LD_INT 5
21855: PUSH
21856: LD_INT 6
21858: PUSH
21859: LD_INT 7
21861: PUSH
21862: LD_INT 8
21864: PUSH
21865: LD_INT 9
21867: PUSH
21868: LD_INT 10
21870: PUSH
21871: LD_INT 11
21873: PUSH
21874: LD_INT 12
21876: PUSH
21877: LD_INT 13
21879: PUSH
21880: LD_INT 14
21882: PUSH
21883: LD_INT 15
21885: PUSH
21886: LD_INT 16
21888: PUSH
21889: LD_INT 17
21891: PUSH
21892: LD_INT 18
21894: PUSH
21895: LD_INT 19
21897: PUSH
21898: LD_INT 20
21900: PUSH
21901: LD_INT 21
21903: PUSH
21904: LD_INT 22
21906: PUSH
21907: LD_INT 23
21909: PUSH
21910: LD_INT 24
21912: PUSH
21913: LD_INT 25
21915: PUSH
21916: LD_INT 26
21918: PUSH
21919: LD_INT 28
21921: PUSH
21922: LD_INT 30
21924: PUSH
21925: LD_INT 31
21927: PUSH
21928: LD_INT 32
21930: PUSH
21931: LD_INT 34
21933: PUSH
21934: LD_INT 36
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 101
21972: PUSH
21973: LD_INT 102
21975: PUSH
21976: LD_INT 103
21978: PUSH
21979: LD_INT 104
21981: PUSH
21982: LD_INT 105
21984: PUSH
21985: LD_INT 106
21987: PUSH
21988: LD_INT 107
21990: PUSH
21991: LD_INT 108
21993: PUSH
21994: LD_INT 109
21996: PUSH
21997: LD_INT 110
21999: PUSH
22000: LD_INT 111
22002: PUSH
22003: LD_INT 112
22005: PUSH
22006: LD_INT 114
22008: PUSH
22009: LD_INT 116
22011: PUSH
22012: LD_INT 117
22014: PUSH
22015: LD_INT 118
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: ST_TO_ADDR
22040: GO 23723
22042: LD_INT 12
22044: DOUBLE
22045: EQUAL
22046: IFTRUE 22050
22048: GO 22270
22050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22051: LD_ADDR_VAR 0 1
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: LD_INT 3
22064: PUSH
22065: LD_INT 4
22067: PUSH
22068: LD_INT 5
22070: PUSH
22071: LD_INT 6
22073: PUSH
22074: LD_INT 7
22076: PUSH
22077: LD_INT 8
22079: PUSH
22080: LD_INT 9
22082: PUSH
22083: LD_INT 10
22085: PUSH
22086: LD_INT 11
22088: PUSH
22089: LD_INT 12
22091: PUSH
22092: LD_INT 13
22094: PUSH
22095: LD_INT 14
22097: PUSH
22098: LD_INT 15
22100: PUSH
22101: LD_INT 16
22103: PUSH
22104: LD_INT 17
22106: PUSH
22107: LD_INT 18
22109: PUSH
22110: LD_INT 19
22112: PUSH
22113: LD_INT 20
22115: PUSH
22116: LD_INT 21
22118: PUSH
22119: LD_INT 22
22121: PUSH
22122: LD_INT 23
22124: PUSH
22125: LD_INT 24
22127: PUSH
22128: LD_INT 25
22130: PUSH
22131: LD_INT 26
22133: PUSH
22134: LD_INT 27
22136: PUSH
22137: LD_INT 28
22139: PUSH
22140: LD_INT 30
22142: PUSH
22143: LD_INT 31
22145: PUSH
22146: LD_INT 32
22148: PUSH
22149: LD_INT 33
22151: PUSH
22152: LD_INT 34
22154: PUSH
22155: LD_INT 36
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 101
22196: PUSH
22197: LD_INT 102
22199: PUSH
22200: LD_INT 103
22202: PUSH
22203: LD_INT 104
22205: PUSH
22206: LD_INT 105
22208: PUSH
22209: LD_INT 106
22211: PUSH
22212: LD_INT 107
22214: PUSH
22215: LD_INT 108
22217: PUSH
22218: LD_INT 109
22220: PUSH
22221: LD_INT 110
22223: PUSH
22224: LD_INT 111
22226: PUSH
22227: LD_INT 112
22229: PUSH
22230: LD_INT 113
22232: PUSH
22233: LD_INT 114
22235: PUSH
22236: LD_INT 116
22238: PUSH
22239: LD_INT 117
22241: PUSH
22242: LD_INT 118
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: ST_TO_ADDR
22268: GO 23723
22270: LD_INT 13
22272: DOUBLE
22273: EQUAL
22274: IFTRUE 22278
22276: GO 22486
22278: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22279: LD_ADDR_VAR 0 1
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: LD_INT 2
22289: PUSH
22290: LD_INT 3
22292: PUSH
22293: LD_INT 4
22295: PUSH
22296: LD_INT 5
22298: PUSH
22299: LD_INT 8
22301: PUSH
22302: LD_INT 9
22304: PUSH
22305: LD_INT 10
22307: PUSH
22308: LD_INT 11
22310: PUSH
22311: LD_INT 12
22313: PUSH
22314: LD_INT 14
22316: PUSH
22317: LD_INT 15
22319: PUSH
22320: LD_INT 16
22322: PUSH
22323: LD_INT 17
22325: PUSH
22326: LD_INT 18
22328: PUSH
22329: LD_INT 19
22331: PUSH
22332: LD_INT 20
22334: PUSH
22335: LD_INT 21
22337: PUSH
22338: LD_INT 22
22340: PUSH
22341: LD_INT 23
22343: PUSH
22344: LD_INT 24
22346: PUSH
22347: LD_INT 25
22349: PUSH
22350: LD_INT 26
22352: PUSH
22353: LD_INT 27
22355: PUSH
22356: LD_INT 28
22358: PUSH
22359: LD_INT 30
22361: PUSH
22362: LD_INT 31
22364: PUSH
22365: LD_INT 32
22367: PUSH
22368: LD_INT 33
22370: PUSH
22371: LD_INT 34
22373: PUSH
22374: LD_INT 36
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 101
22412: PUSH
22413: LD_INT 102
22415: PUSH
22416: LD_INT 103
22418: PUSH
22419: LD_INT 104
22421: PUSH
22422: LD_INT 105
22424: PUSH
22425: LD_INT 106
22427: PUSH
22428: LD_INT 107
22430: PUSH
22431: LD_INT 108
22433: PUSH
22434: LD_INT 109
22436: PUSH
22437: LD_INT 110
22439: PUSH
22440: LD_INT 111
22442: PUSH
22443: LD_INT 112
22445: PUSH
22446: LD_INT 113
22448: PUSH
22449: LD_INT 114
22451: PUSH
22452: LD_INT 116
22454: PUSH
22455: LD_INT 117
22457: PUSH
22458: LD_INT 118
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: ST_TO_ADDR
22484: GO 23723
22486: LD_INT 14
22488: DOUBLE
22489: EQUAL
22490: IFTRUE 22494
22492: GO 22718
22494: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22495: LD_ADDR_VAR 0 1
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: LD_INT 2
22505: PUSH
22506: LD_INT 3
22508: PUSH
22509: LD_INT 4
22511: PUSH
22512: LD_INT 5
22514: PUSH
22515: LD_INT 6
22517: PUSH
22518: LD_INT 7
22520: PUSH
22521: LD_INT 8
22523: PUSH
22524: LD_INT 9
22526: PUSH
22527: LD_INT 10
22529: PUSH
22530: LD_INT 11
22532: PUSH
22533: LD_INT 12
22535: PUSH
22536: LD_INT 13
22538: PUSH
22539: LD_INT 14
22541: PUSH
22542: LD_INT 15
22544: PUSH
22545: LD_INT 16
22547: PUSH
22548: LD_INT 17
22550: PUSH
22551: LD_INT 18
22553: PUSH
22554: LD_INT 19
22556: PUSH
22557: LD_INT 20
22559: PUSH
22560: LD_INT 21
22562: PUSH
22563: LD_INT 22
22565: PUSH
22566: LD_INT 23
22568: PUSH
22569: LD_INT 24
22571: PUSH
22572: LD_INT 25
22574: PUSH
22575: LD_INT 26
22577: PUSH
22578: LD_INT 27
22580: PUSH
22581: LD_INT 28
22583: PUSH
22584: LD_INT 29
22586: PUSH
22587: LD_INT 30
22589: PUSH
22590: LD_INT 31
22592: PUSH
22593: LD_INT 32
22595: PUSH
22596: LD_INT 33
22598: PUSH
22599: LD_INT 34
22601: PUSH
22602: LD_INT 36
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 101
22644: PUSH
22645: LD_INT 102
22647: PUSH
22648: LD_INT 103
22650: PUSH
22651: LD_INT 104
22653: PUSH
22654: LD_INT 105
22656: PUSH
22657: LD_INT 106
22659: PUSH
22660: LD_INT 107
22662: PUSH
22663: LD_INT 108
22665: PUSH
22666: LD_INT 109
22668: PUSH
22669: LD_INT 110
22671: PUSH
22672: LD_INT 111
22674: PUSH
22675: LD_INT 112
22677: PUSH
22678: LD_INT 113
22680: PUSH
22681: LD_INT 114
22683: PUSH
22684: LD_INT 116
22686: PUSH
22687: LD_INT 117
22689: PUSH
22690: LD_INT 118
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: ST_TO_ADDR
22716: GO 23723
22718: LD_INT 15
22720: DOUBLE
22721: EQUAL
22722: IFTRUE 22726
22724: GO 22950
22726: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22727: LD_ADDR_VAR 0 1
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: LD_INT 4
22743: PUSH
22744: LD_INT 5
22746: PUSH
22747: LD_INT 6
22749: PUSH
22750: LD_INT 7
22752: PUSH
22753: LD_INT 8
22755: PUSH
22756: LD_INT 9
22758: PUSH
22759: LD_INT 10
22761: PUSH
22762: LD_INT 11
22764: PUSH
22765: LD_INT 12
22767: PUSH
22768: LD_INT 13
22770: PUSH
22771: LD_INT 14
22773: PUSH
22774: LD_INT 15
22776: PUSH
22777: LD_INT 16
22779: PUSH
22780: LD_INT 17
22782: PUSH
22783: LD_INT 18
22785: PUSH
22786: LD_INT 19
22788: PUSH
22789: LD_INT 20
22791: PUSH
22792: LD_INT 21
22794: PUSH
22795: LD_INT 22
22797: PUSH
22798: LD_INT 23
22800: PUSH
22801: LD_INT 24
22803: PUSH
22804: LD_INT 25
22806: PUSH
22807: LD_INT 26
22809: PUSH
22810: LD_INT 27
22812: PUSH
22813: LD_INT 28
22815: PUSH
22816: LD_INT 29
22818: PUSH
22819: LD_INT 30
22821: PUSH
22822: LD_INT 31
22824: PUSH
22825: LD_INT 32
22827: PUSH
22828: LD_INT 33
22830: PUSH
22831: LD_INT 34
22833: PUSH
22834: LD_INT 36
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 101
22876: PUSH
22877: LD_INT 102
22879: PUSH
22880: LD_INT 103
22882: PUSH
22883: LD_INT 104
22885: PUSH
22886: LD_INT 105
22888: PUSH
22889: LD_INT 106
22891: PUSH
22892: LD_INT 107
22894: PUSH
22895: LD_INT 108
22897: PUSH
22898: LD_INT 109
22900: PUSH
22901: LD_INT 110
22903: PUSH
22904: LD_INT 111
22906: PUSH
22907: LD_INT 112
22909: PUSH
22910: LD_INT 113
22912: PUSH
22913: LD_INT 114
22915: PUSH
22916: LD_INT 116
22918: PUSH
22919: LD_INT 117
22921: PUSH
22922: LD_INT 118
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: ST_TO_ADDR
22948: GO 23723
22950: LD_INT 16
22952: DOUBLE
22953: EQUAL
22954: IFTRUE 22958
22956: GO 23094
22958: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22959: LD_ADDR_VAR 0 1
22963: PUSH
22964: LD_INT 2
22966: PUSH
22967: LD_INT 4
22969: PUSH
22970: LD_INT 5
22972: PUSH
22973: LD_INT 7
22975: PUSH
22976: LD_INT 11
22978: PUSH
22979: LD_INT 12
22981: PUSH
22982: LD_INT 15
22984: PUSH
22985: LD_INT 16
22987: PUSH
22988: LD_INT 20
22990: PUSH
22991: LD_INT 21
22993: PUSH
22994: LD_INT 22
22996: PUSH
22997: LD_INT 23
22999: PUSH
23000: LD_INT 25
23002: PUSH
23003: LD_INT 26
23005: PUSH
23006: LD_INT 30
23008: PUSH
23009: LD_INT 31
23011: PUSH
23012: LD_INT 32
23014: PUSH
23015: LD_INT 33
23017: PUSH
23018: LD_INT 34
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 101
23044: PUSH
23045: LD_INT 102
23047: PUSH
23048: LD_INT 103
23050: PUSH
23051: LD_INT 106
23053: PUSH
23054: LD_INT 108
23056: PUSH
23057: LD_INT 112
23059: PUSH
23060: LD_INT 113
23062: PUSH
23063: LD_INT 114
23065: PUSH
23066: LD_INT 116
23068: PUSH
23069: LD_INT 117
23071: PUSH
23072: LD_INT 118
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: ST_TO_ADDR
23092: GO 23723
23094: LD_INT 17
23096: DOUBLE
23097: EQUAL
23098: IFTRUE 23102
23100: GO 23326
23102: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23103: LD_ADDR_VAR 0 1
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: LD_INT 3
23116: PUSH
23117: LD_INT 4
23119: PUSH
23120: LD_INT 5
23122: PUSH
23123: LD_INT 6
23125: PUSH
23126: LD_INT 7
23128: PUSH
23129: LD_INT 8
23131: PUSH
23132: LD_INT 9
23134: PUSH
23135: LD_INT 10
23137: PUSH
23138: LD_INT 11
23140: PUSH
23141: LD_INT 12
23143: PUSH
23144: LD_INT 13
23146: PUSH
23147: LD_INT 14
23149: PUSH
23150: LD_INT 15
23152: PUSH
23153: LD_INT 16
23155: PUSH
23156: LD_INT 17
23158: PUSH
23159: LD_INT 18
23161: PUSH
23162: LD_INT 19
23164: PUSH
23165: LD_INT 20
23167: PUSH
23168: LD_INT 21
23170: PUSH
23171: LD_INT 22
23173: PUSH
23174: LD_INT 23
23176: PUSH
23177: LD_INT 24
23179: PUSH
23180: LD_INT 25
23182: PUSH
23183: LD_INT 26
23185: PUSH
23186: LD_INT 27
23188: PUSH
23189: LD_INT 28
23191: PUSH
23192: LD_INT 29
23194: PUSH
23195: LD_INT 30
23197: PUSH
23198: LD_INT 31
23200: PUSH
23201: LD_INT 32
23203: PUSH
23204: LD_INT 33
23206: PUSH
23207: LD_INT 34
23209: PUSH
23210: LD_INT 36
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 101
23252: PUSH
23253: LD_INT 102
23255: PUSH
23256: LD_INT 103
23258: PUSH
23259: LD_INT 104
23261: PUSH
23262: LD_INT 105
23264: PUSH
23265: LD_INT 106
23267: PUSH
23268: LD_INT 107
23270: PUSH
23271: LD_INT 108
23273: PUSH
23274: LD_INT 109
23276: PUSH
23277: LD_INT 110
23279: PUSH
23280: LD_INT 111
23282: PUSH
23283: LD_INT 112
23285: PUSH
23286: LD_INT 113
23288: PUSH
23289: LD_INT 114
23291: PUSH
23292: LD_INT 116
23294: PUSH
23295: LD_INT 117
23297: PUSH
23298: LD_INT 118
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: ST_TO_ADDR
23324: GO 23723
23326: LD_INT 18
23328: DOUBLE
23329: EQUAL
23330: IFTRUE 23334
23332: GO 23482
23334: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23335: LD_ADDR_VAR 0 1
23339: PUSH
23340: LD_INT 2
23342: PUSH
23343: LD_INT 4
23345: PUSH
23346: LD_INT 5
23348: PUSH
23349: LD_INT 7
23351: PUSH
23352: LD_INT 11
23354: PUSH
23355: LD_INT 12
23357: PUSH
23358: LD_INT 15
23360: PUSH
23361: LD_INT 16
23363: PUSH
23364: LD_INT 20
23366: PUSH
23367: LD_INT 21
23369: PUSH
23370: LD_INT 22
23372: PUSH
23373: LD_INT 23
23375: PUSH
23376: LD_INT 25
23378: PUSH
23379: LD_INT 26
23381: PUSH
23382: LD_INT 30
23384: PUSH
23385: LD_INT 31
23387: PUSH
23388: LD_INT 32
23390: PUSH
23391: LD_INT 33
23393: PUSH
23394: LD_INT 34
23396: PUSH
23397: LD_INT 35
23399: PUSH
23400: LD_INT 36
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 101
23428: PUSH
23429: LD_INT 102
23431: PUSH
23432: LD_INT 103
23434: PUSH
23435: LD_INT 106
23437: PUSH
23438: LD_INT 108
23440: PUSH
23441: LD_INT 112
23443: PUSH
23444: LD_INT 113
23446: PUSH
23447: LD_INT 114
23449: PUSH
23450: LD_INT 115
23452: PUSH
23453: LD_INT 116
23455: PUSH
23456: LD_INT 117
23458: PUSH
23459: LD_INT 118
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: ST_TO_ADDR
23480: GO 23723
23482: LD_INT 19
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23490
23488: GO 23722
23490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23491: LD_ADDR_VAR 0 1
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: LD_INT 3
23504: PUSH
23505: LD_INT 4
23507: PUSH
23508: LD_INT 5
23510: PUSH
23511: LD_INT 6
23513: PUSH
23514: LD_INT 7
23516: PUSH
23517: LD_INT 8
23519: PUSH
23520: LD_INT 9
23522: PUSH
23523: LD_INT 10
23525: PUSH
23526: LD_INT 11
23528: PUSH
23529: LD_INT 12
23531: PUSH
23532: LD_INT 13
23534: PUSH
23535: LD_INT 14
23537: PUSH
23538: LD_INT 15
23540: PUSH
23541: LD_INT 16
23543: PUSH
23544: LD_INT 17
23546: PUSH
23547: LD_INT 18
23549: PUSH
23550: LD_INT 19
23552: PUSH
23553: LD_INT 20
23555: PUSH
23556: LD_INT 21
23558: PUSH
23559: LD_INT 22
23561: PUSH
23562: LD_INT 23
23564: PUSH
23565: LD_INT 24
23567: PUSH
23568: LD_INT 25
23570: PUSH
23571: LD_INT 26
23573: PUSH
23574: LD_INT 27
23576: PUSH
23577: LD_INT 28
23579: PUSH
23580: LD_INT 29
23582: PUSH
23583: LD_INT 30
23585: PUSH
23586: LD_INT 31
23588: PUSH
23589: LD_INT 32
23591: PUSH
23592: LD_INT 33
23594: PUSH
23595: LD_INT 34
23597: PUSH
23598: LD_INT 35
23600: PUSH
23601: LD_INT 36
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 101
23644: PUSH
23645: LD_INT 102
23647: PUSH
23648: LD_INT 103
23650: PUSH
23651: LD_INT 104
23653: PUSH
23654: LD_INT 105
23656: PUSH
23657: LD_INT 106
23659: PUSH
23660: LD_INT 107
23662: PUSH
23663: LD_INT 108
23665: PUSH
23666: LD_INT 109
23668: PUSH
23669: LD_INT 110
23671: PUSH
23672: LD_INT 111
23674: PUSH
23675: LD_INT 112
23677: PUSH
23678: LD_INT 113
23680: PUSH
23681: LD_INT 114
23683: PUSH
23684: LD_INT 115
23686: PUSH
23687: LD_INT 116
23689: PUSH
23690: LD_INT 117
23692: PUSH
23693: LD_INT 118
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: ST_TO_ADDR
23720: GO 23723
23722: POP
// end else
23723: GO 23954
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23725: LD_ADDR_VAR 0 1
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: LD_INT 3
23738: PUSH
23739: LD_INT 4
23741: PUSH
23742: LD_INT 5
23744: PUSH
23745: LD_INT 6
23747: PUSH
23748: LD_INT 7
23750: PUSH
23751: LD_INT 8
23753: PUSH
23754: LD_INT 9
23756: PUSH
23757: LD_INT 10
23759: PUSH
23760: LD_INT 11
23762: PUSH
23763: LD_INT 12
23765: PUSH
23766: LD_INT 13
23768: PUSH
23769: LD_INT 14
23771: PUSH
23772: LD_INT 15
23774: PUSH
23775: LD_INT 16
23777: PUSH
23778: LD_INT 17
23780: PUSH
23781: LD_INT 18
23783: PUSH
23784: LD_INT 19
23786: PUSH
23787: LD_INT 20
23789: PUSH
23790: LD_INT 21
23792: PUSH
23793: LD_INT 22
23795: PUSH
23796: LD_INT 23
23798: PUSH
23799: LD_INT 24
23801: PUSH
23802: LD_INT 25
23804: PUSH
23805: LD_INT 26
23807: PUSH
23808: LD_INT 27
23810: PUSH
23811: LD_INT 28
23813: PUSH
23814: LD_INT 29
23816: PUSH
23817: LD_INT 30
23819: PUSH
23820: LD_INT 31
23822: PUSH
23823: LD_INT 32
23825: PUSH
23826: LD_INT 33
23828: PUSH
23829: LD_INT 34
23831: PUSH
23832: LD_INT 35
23834: PUSH
23835: LD_INT 36
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 101
23878: PUSH
23879: LD_INT 102
23881: PUSH
23882: LD_INT 103
23884: PUSH
23885: LD_INT 104
23887: PUSH
23888: LD_INT 105
23890: PUSH
23891: LD_INT 106
23893: PUSH
23894: LD_INT 107
23896: PUSH
23897: LD_INT 108
23899: PUSH
23900: LD_INT 109
23902: PUSH
23903: LD_INT 110
23905: PUSH
23906: LD_INT 111
23908: PUSH
23909: LD_INT 112
23911: PUSH
23912: LD_INT 113
23914: PUSH
23915: LD_INT 114
23917: PUSH
23918: LD_INT 115
23920: PUSH
23921: LD_INT 116
23923: PUSH
23924: LD_INT 117
23926: PUSH
23927: LD_INT 118
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: ST_TO_ADDR
// if result then
23954: LD_VAR 0 1
23958: IFFALSE 24247
// begin normal :=  ;
23960: LD_ADDR_VAR 0 3
23964: PUSH
23965: LD_STRING 
23967: ST_TO_ADDR
// hardcore :=  ;
23968: LD_ADDR_VAR 0 4
23972: PUSH
23973: LD_STRING 
23975: ST_TO_ADDR
// for i = 1 to normalCounter do
23976: LD_ADDR_VAR 0 5
23980: PUSH
23981: DOUBLE
23982: LD_INT 1
23984: DEC
23985: ST_TO_ADDR
23986: LD_EXP 63
23990: PUSH
23991: FOR_TO
23992: IFFALSE 24093
// begin tmp := 0 ;
23994: LD_ADDR_VAR 0 2
23998: PUSH
23999: LD_STRING 0
24001: ST_TO_ADDR
// if result [ 1 ] then
24002: LD_VAR 0 1
24006: PUSH
24007: LD_INT 1
24009: ARRAY
24010: IFFALSE 24075
// if result [ 1 ] [ 1 ] = i then
24012: LD_VAR 0 1
24016: PUSH
24017: LD_INT 1
24019: ARRAY
24020: PUSH
24021: LD_INT 1
24023: ARRAY
24024: PUSH
24025: LD_VAR 0 5
24029: EQUAL
24030: IFFALSE 24075
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24032: LD_ADDR_VAR 0 1
24036: PUSH
24037: LD_VAR 0 1
24041: PPUSH
24042: LD_INT 1
24044: PPUSH
24045: LD_VAR 0 1
24049: PUSH
24050: LD_INT 1
24052: ARRAY
24053: PPUSH
24054: LD_INT 1
24056: PPUSH
24057: CALL_OW 3
24061: PPUSH
24062: CALL_OW 1
24066: ST_TO_ADDR
// tmp := 1 ;
24067: LD_ADDR_VAR 0 2
24071: PUSH
24072: LD_STRING 1
24074: ST_TO_ADDR
// end ; normal := normal & tmp ;
24075: LD_ADDR_VAR 0 3
24079: PUSH
24080: LD_VAR 0 3
24084: PUSH
24085: LD_VAR 0 2
24089: STR
24090: ST_TO_ADDR
// end ;
24091: GO 23991
24093: POP
24094: POP
// for i = 1 to hardcoreCounter do
24095: LD_ADDR_VAR 0 5
24099: PUSH
24100: DOUBLE
24101: LD_INT 1
24103: DEC
24104: ST_TO_ADDR
24105: LD_EXP 64
24109: PUSH
24110: FOR_TO
24111: IFFALSE 24216
// begin tmp := 0 ;
24113: LD_ADDR_VAR 0 2
24117: PUSH
24118: LD_STRING 0
24120: ST_TO_ADDR
// if result [ 2 ] then
24121: LD_VAR 0 1
24125: PUSH
24126: LD_INT 2
24128: ARRAY
24129: IFFALSE 24198
// if result [ 2 ] [ 1 ] = 100 + i then
24131: LD_VAR 0 1
24135: PUSH
24136: LD_INT 2
24138: ARRAY
24139: PUSH
24140: LD_INT 1
24142: ARRAY
24143: PUSH
24144: LD_INT 100
24146: PUSH
24147: LD_VAR 0 5
24151: PLUS
24152: EQUAL
24153: IFFALSE 24198
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24155: LD_ADDR_VAR 0 1
24159: PUSH
24160: LD_VAR 0 1
24164: PPUSH
24165: LD_INT 2
24167: PPUSH
24168: LD_VAR 0 1
24172: PUSH
24173: LD_INT 2
24175: ARRAY
24176: PPUSH
24177: LD_INT 1
24179: PPUSH
24180: CALL_OW 3
24184: PPUSH
24185: CALL_OW 1
24189: ST_TO_ADDR
// tmp := 1 ;
24190: LD_ADDR_VAR 0 2
24194: PUSH
24195: LD_STRING 1
24197: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24198: LD_ADDR_VAR 0 4
24202: PUSH
24203: LD_VAR 0 4
24207: PUSH
24208: LD_VAR 0 2
24212: STR
24213: ST_TO_ADDR
// end ;
24214: GO 24110
24216: POP
24217: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24218: LD_STRING getStreamItemsFromMission("
24220: PUSH
24221: LD_VAR 0 3
24225: STR
24226: PUSH
24227: LD_STRING ","
24229: STR
24230: PUSH
24231: LD_VAR 0 4
24235: STR
24236: PUSH
24237: LD_STRING ")
24239: STR
24240: PPUSH
24241: CALL_OW 559
// end else
24245: GO 24254
// ToLua ( getStreamItemsFromMission("","") ) ;
24247: LD_STRING getStreamItemsFromMission("","")
24249: PPUSH
24250: CALL_OW 559
// end ;
24254: LD_VAR 0 1
24258: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24259: LD_EXP 62
24263: PUSH
24264: LD_EXP 67
24268: AND
24269: IFFALSE 24393
24271: GO 24273
24273: DISABLE
24274: LD_INT 0
24276: PPUSH
24277: PPUSH
// begin enable ;
24278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24279: LD_ADDR_VAR 0 2
24283: PUSH
24284: LD_INT 22
24286: PUSH
24287: LD_OWVAR 2
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 34
24301: PUSH
24302: LD_INT 7
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 34
24311: PUSH
24312: LD_INT 45
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 34
24321: PUSH
24322: LD_INT 28
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 34
24331: PUSH
24332: LD_INT 47
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PPUSH
24350: CALL_OW 69
24354: ST_TO_ADDR
// if not tmp then
24355: LD_VAR 0 2
24359: NOT
24360: IFFALSE 24364
// exit ;
24362: GO 24393
// for i in tmp do
24364: LD_ADDR_VAR 0 1
24368: PUSH
24369: LD_VAR 0 2
24373: PUSH
24374: FOR_IN
24375: IFFALSE 24391
// begin SetLives ( i , 0 ) ;
24377: LD_VAR 0 1
24381: PPUSH
24382: LD_INT 0
24384: PPUSH
24385: CALL_OW 234
// end ;
24389: GO 24374
24391: POP
24392: POP
// end ;
24393: PPOPN 2
24395: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24396: LD_EXP 62
24400: PUSH
24401: LD_EXP 68
24405: AND
24406: IFFALSE 24490
24408: GO 24410
24410: DISABLE
24411: LD_INT 0
24413: PPUSH
24414: PPUSH
// begin enable ;
24415: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24416: LD_ADDR_VAR 0 2
24420: PUSH
24421: LD_INT 22
24423: PUSH
24424: LD_OWVAR 2
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 32
24435: PUSH
24436: LD_INT 3
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PPUSH
24447: CALL_OW 69
24451: ST_TO_ADDR
// if not tmp then
24452: LD_VAR 0 2
24456: NOT
24457: IFFALSE 24461
// exit ;
24459: GO 24490
// for i in tmp do
24461: LD_ADDR_VAR 0 1
24465: PUSH
24466: LD_VAR 0 2
24470: PUSH
24471: FOR_IN
24472: IFFALSE 24488
// begin SetLives ( i , 0 ) ;
24474: LD_VAR 0 1
24478: PPUSH
24479: LD_INT 0
24481: PPUSH
24482: CALL_OW 234
// end ;
24486: GO 24471
24488: POP
24489: POP
// end ;
24490: PPOPN 2
24492: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24493: LD_EXP 62
24497: PUSH
24498: LD_EXP 65
24502: AND
24503: IFFALSE 24596
24505: GO 24507
24507: DISABLE
24508: LD_INT 0
24510: PPUSH
// begin enable ;
24511: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24512: LD_ADDR_VAR 0 1
24516: PUSH
24517: LD_INT 22
24519: PUSH
24520: LD_OWVAR 2
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: LD_INT 25
24534: PUSH
24535: LD_INT 5
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 25
24544: PUSH
24545: LD_INT 9
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 25
24554: PUSH
24555: LD_INT 8
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PPUSH
24572: CALL_OW 69
24576: PUSH
24577: FOR_IN
24578: IFFALSE 24594
// begin SetClass ( i , 1 ) ;
24580: LD_VAR 0 1
24584: PPUSH
24585: LD_INT 1
24587: PPUSH
24588: CALL_OW 336
// end ;
24592: GO 24577
24594: POP
24595: POP
// end ;
24596: PPOPN 1
24598: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24599: LD_EXP 62
24603: PUSH
24604: LD_EXP 66
24608: AND
24609: PUSH
24610: LD_OWVAR 65
24614: PUSH
24615: LD_INT 7
24617: LESS
24618: AND
24619: IFFALSE 24633
24621: GO 24623
24623: DISABLE
// begin enable ;
24624: ENABLE
// game_speed := 7 ;
24625: LD_ADDR_OWVAR 65
24629: PUSH
24630: LD_INT 7
24632: ST_TO_ADDR
// end ;
24633: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24634: LD_EXP 62
24638: PUSH
24639: LD_EXP 69
24643: AND
24644: IFFALSE 24846
24646: GO 24648
24648: DISABLE
24649: LD_INT 0
24651: PPUSH
24652: PPUSH
24653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24654: LD_ADDR_VAR 0 3
24658: PUSH
24659: LD_INT 81
24661: PUSH
24662: LD_OWVAR 2
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 21
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PPUSH
24685: CALL_OW 69
24689: ST_TO_ADDR
// if not tmp then
24690: LD_VAR 0 3
24694: NOT
24695: IFFALSE 24699
// exit ;
24697: GO 24846
// if tmp > 5 then
24699: LD_VAR 0 3
24703: PUSH
24704: LD_INT 5
24706: GREATER
24707: IFFALSE 24719
// k := 5 else
24709: LD_ADDR_VAR 0 2
24713: PUSH
24714: LD_INT 5
24716: ST_TO_ADDR
24717: GO 24729
// k := tmp ;
24719: LD_ADDR_VAR 0 2
24723: PUSH
24724: LD_VAR 0 3
24728: ST_TO_ADDR
// for i := 1 to k do
24729: LD_ADDR_VAR 0 1
24733: PUSH
24734: DOUBLE
24735: LD_INT 1
24737: DEC
24738: ST_TO_ADDR
24739: LD_VAR 0 2
24743: PUSH
24744: FOR_TO
24745: IFFALSE 24844
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24747: LD_VAR 0 3
24751: PUSH
24752: LD_VAR 0 1
24756: ARRAY
24757: PPUSH
24758: LD_VAR 0 1
24762: PUSH
24763: LD_INT 4
24765: MOD
24766: PUSH
24767: LD_INT 1
24769: PLUS
24770: PPUSH
24771: CALL_OW 259
24775: PUSH
24776: LD_INT 10
24778: LESS
24779: IFFALSE 24842
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24781: LD_VAR 0 3
24785: PUSH
24786: LD_VAR 0 1
24790: ARRAY
24791: PPUSH
24792: LD_VAR 0 1
24796: PUSH
24797: LD_INT 4
24799: MOD
24800: PUSH
24801: LD_INT 1
24803: PLUS
24804: PPUSH
24805: LD_VAR 0 3
24809: PUSH
24810: LD_VAR 0 1
24814: ARRAY
24815: PPUSH
24816: LD_VAR 0 1
24820: PUSH
24821: LD_INT 4
24823: MOD
24824: PUSH
24825: LD_INT 1
24827: PLUS
24828: PPUSH
24829: CALL_OW 259
24833: PUSH
24834: LD_INT 1
24836: PLUS
24837: PPUSH
24838: CALL_OW 237
24842: GO 24744
24844: POP
24845: POP
// end ;
24846: PPOPN 3
24848: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24849: LD_EXP 62
24853: PUSH
24854: LD_EXP 70
24858: AND
24859: IFFALSE 24879
24861: GO 24863
24863: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24864: LD_INT 4
24866: PPUSH
24867: LD_OWVAR 2
24871: PPUSH
24872: LD_INT 0
24874: PPUSH
24875: CALL_OW 324
24879: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24880: LD_EXP 62
24884: PUSH
24885: LD_EXP 99
24889: AND
24890: IFFALSE 24910
24892: GO 24894
24894: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24895: LD_INT 19
24897: PPUSH
24898: LD_OWVAR 2
24902: PPUSH
24903: LD_INT 0
24905: PPUSH
24906: CALL_OW 324
24910: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24911: LD_EXP 62
24915: PUSH
24916: LD_EXP 71
24920: AND
24921: IFFALSE 25023
24923: GO 24925
24925: DISABLE
24926: LD_INT 0
24928: PPUSH
24929: PPUSH
// begin enable ;
24930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24931: LD_ADDR_VAR 0 2
24935: PUSH
24936: LD_INT 22
24938: PUSH
24939: LD_OWVAR 2
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 2
24950: PUSH
24951: LD_INT 34
24953: PUSH
24954: LD_INT 11
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 34
24963: PUSH
24964: LD_INT 30
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: LIST
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PPUSH
24980: CALL_OW 69
24984: ST_TO_ADDR
// if not tmp then
24985: LD_VAR 0 2
24989: NOT
24990: IFFALSE 24994
// exit ;
24992: GO 25023
// for i in tmp do
24994: LD_ADDR_VAR 0 1
24998: PUSH
24999: LD_VAR 0 2
25003: PUSH
25004: FOR_IN
25005: IFFALSE 25021
// begin SetLives ( i , 0 ) ;
25007: LD_VAR 0 1
25011: PPUSH
25012: LD_INT 0
25014: PPUSH
25015: CALL_OW 234
// end ;
25019: GO 25004
25021: POP
25022: POP
// end ;
25023: PPOPN 2
25025: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25026: LD_EXP 62
25030: PUSH
25031: LD_EXP 72
25035: AND
25036: IFFALSE 25056
25038: GO 25040
25040: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25041: LD_INT 32
25043: PPUSH
25044: LD_OWVAR 2
25048: PPUSH
25049: LD_INT 0
25051: PPUSH
25052: CALL_OW 324
25056: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25057: LD_EXP 62
25061: PUSH
25062: LD_EXP 73
25066: AND
25067: IFFALSE 25248
25069: GO 25071
25071: DISABLE
25072: LD_INT 0
25074: PPUSH
25075: PPUSH
25076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25077: LD_ADDR_VAR 0 2
25081: PUSH
25082: LD_INT 22
25084: PUSH
25085: LD_OWVAR 2
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 33
25096: PUSH
25097: LD_INT 3
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PPUSH
25108: CALL_OW 69
25112: ST_TO_ADDR
// if not tmp then
25113: LD_VAR 0 2
25117: NOT
25118: IFFALSE 25122
// exit ;
25120: GO 25248
// side := 0 ;
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_INT 0
25129: ST_TO_ADDR
// for i := 1 to 8 do
25130: LD_ADDR_VAR 0 1
25134: PUSH
25135: DOUBLE
25136: LD_INT 1
25138: DEC
25139: ST_TO_ADDR
25140: LD_INT 8
25142: PUSH
25143: FOR_TO
25144: IFFALSE 25192
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25146: LD_OWVAR 2
25150: PUSH
25151: LD_VAR 0 1
25155: NONEQUAL
25156: PUSH
25157: LD_OWVAR 2
25161: PPUSH
25162: LD_VAR 0 1
25166: PPUSH
25167: CALL_OW 81
25171: PUSH
25172: LD_INT 2
25174: EQUAL
25175: AND
25176: IFFALSE 25190
// begin side := i ;
25178: LD_ADDR_VAR 0 3
25182: PUSH
25183: LD_VAR 0 1
25187: ST_TO_ADDR
// break ;
25188: GO 25192
// end ;
25190: GO 25143
25192: POP
25193: POP
// if not side then
25194: LD_VAR 0 3
25198: NOT
25199: IFFALSE 25203
// exit ;
25201: GO 25248
// for i := 1 to tmp do
25203: LD_ADDR_VAR 0 1
25207: PUSH
25208: DOUBLE
25209: LD_INT 1
25211: DEC
25212: ST_TO_ADDR
25213: LD_VAR 0 2
25217: PUSH
25218: FOR_TO
25219: IFFALSE 25246
// if Prob ( 60 ) then
25221: LD_INT 60
25223: PPUSH
25224: CALL_OW 13
25228: IFFALSE 25244
// SetSide ( i , side ) ;
25230: LD_VAR 0 1
25234: PPUSH
25235: LD_VAR 0 3
25239: PPUSH
25240: CALL_OW 235
25244: GO 25218
25246: POP
25247: POP
// end ;
25248: PPOPN 3
25250: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25251: LD_EXP 62
25255: PUSH
25256: LD_EXP 75
25260: AND
25261: IFFALSE 25380
25263: GO 25265
25265: DISABLE
25266: LD_INT 0
25268: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25269: LD_ADDR_VAR 0 1
25273: PUSH
25274: LD_INT 22
25276: PUSH
25277: LD_OWVAR 2
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 21
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 3
25298: PUSH
25299: LD_INT 23
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: LIST
25317: PPUSH
25318: CALL_OW 69
25322: PUSH
25323: FOR_IN
25324: IFFALSE 25378
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 257
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: LD_INT 2
25341: PUSH
25342: LD_INT 3
25344: PUSH
25345: LD_INT 4
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: IN
25354: IFFALSE 25376
// SetClass ( un , rand ( 1 , 4 ) ) ;
25356: LD_VAR 0 1
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: LD_INT 4
25366: PPUSH
25367: CALL_OW 12
25371: PPUSH
25372: CALL_OW 336
25376: GO 25323
25378: POP
25379: POP
// end ;
25380: PPOPN 1
25382: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25383: LD_EXP 62
25387: PUSH
25388: LD_EXP 74
25392: AND
25393: IFFALSE 25472
25395: GO 25397
25397: DISABLE
25398: LD_INT 0
25400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25401: LD_ADDR_VAR 0 1
25405: PUSH
25406: LD_INT 22
25408: PUSH
25409: LD_OWVAR 2
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 21
25420: PUSH
25421: LD_INT 3
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PPUSH
25432: CALL_OW 69
25436: ST_TO_ADDR
// if not tmp then
25437: LD_VAR 0 1
25441: NOT
25442: IFFALSE 25446
// exit ;
25444: GO 25472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25446: LD_VAR 0 1
25450: PUSH
25451: LD_INT 1
25453: PPUSH
25454: LD_VAR 0 1
25458: PPUSH
25459: CALL_OW 12
25463: ARRAY
25464: PPUSH
25465: LD_INT 100
25467: PPUSH
25468: CALL_OW 234
// end ;
25472: PPOPN 1
25474: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25475: LD_EXP 62
25479: PUSH
25480: LD_EXP 76
25484: AND
25485: IFFALSE 25583
25487: GO 25489
25489: DISABLE
25490: LD_INT 0
25492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25493: LD_ADDR_VAR 0 1
25497: PUSH
25498: LD_INT 22
25500: PUSH
25501: LD_OWVAR 2
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 21
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 69
25528: ST_TO_ADDR
// if not tmp then
25529: LD_VAR 0 1
25533: NOT
25534: IFFALSE 25538
// exit ;
25536: GO 25583
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25538: LD_VAR 0 1
25542: PUSH
25543: LD_INT 1
25545: PPUSH
25546: LD_VAR 0 1
25550: PPUSH
25551: CALL_OW 12
25555: ARRAY
25556: PPUSH
25557: LD_INT 1
25559: PPUSH
25560: LD_INT 4
25562: PPUSH
25563: CALL_OW 12
25567: PPUSH
25568: LD_INT 3000
25570: PPUSH
25571: LD_INT 9000
25573: PPUSH
25574: CALL_OW 12
25578: PPUSH
25579: CALL_OW 492
// end ;
25583: PPOPN 1
25585: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25586: LD_EXP 62
25590: PUSH
25591: LD_EXP 77
25595: AND
25596: IFFALSE 25616
25598: GO 25600
25600: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25601: LD_INT 1
25603: PPUSH
25604: LD_OWVAR 2
25608: PPUSH
25609: LD_INT 0
25611: PPUSH
25612: CALL_OW 324
25616: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25617: LD_EXP 62
25621: PUSH
25622: LD_EXP 78
25626: AND
25627: IFFALSE 25710
25629: GO 25631
25631: DISABLE
25632: LD_INT 0
25634: PPUSH
25635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25636: LD_ADDR_VAR 0 2
25640: PUSH
25641: LD_INT 22
25643: PUSH
25644: LD_OWVAR 2
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 21
25655: PUSH
25656: LD_INT 3
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PPUSH
25667: CALL_OW 69
25671: ST_TO_ADDR
// if not tmp then
25672: LD_VAR 0 2
25676: NOT
25677: IFFALSE 25681
// exit ;
25679: GO 25710
// for i in tmp do
25681: LD_ADDR_VAR 0 1
25685: PUSH
25686: LD_VAR 0 2
25690: PUSH
25691: FOR_IN
25692: IFFALSE 25708
// SetBLevel ( i , 10 ) ;
25694: LD_VAR 0 1
25698: PPUSH
25699: LD_INT 10
25701: PPUSH
25702: CALL_OW 241
25706: GO 25691
25708: POP
25709: POP
// end ;
25710: PPOPN 2
25712: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25713: LD_EXP 62
25717: PUSH
25718: LD_EXP 79
25722: AND
25723: IFFALSE 25834
25725: GO 25727
25727: DISABLE
25728: LD_INT 0
25730: PPUSH
25731: PPUSH
25732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25733: LD_ADDR_VAR 0 3
25737: PUSH
25738: LD_INT 22
25740: PUSH
25741: LD_OWVAR 2
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 25
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PPUSH
25764: CALL_OW 69
25768: ST_TO_ADDR
// if not tmp then
25769: LD_VAR 0 3
25773: NOT
25774: IFFALSE 25778
// exit ;
25776: GO 25834
// un := tmp [ rand ( 1 , tmp ) ] ;
25778: LD_ADDR_VAR 0 2
25782: PUSH
25783: LD_VAR 0 3
25787: PUSH
25788: LD_INT 1
25790: PPUSH
25791: LD_VAR 0 3
25795: PPUSH
25796: CALL_OW 12
25800: ARRAY
25801: ST_TO_ADDR
// if Crawls ( un ) then
25802: LD_VAR 0 2
25806: PPUSH
25807: CALL_OW 318
25811: IFFALSE 25822
// ComWalk ( un ) ;
25813: LD_VAR 0 2
25817: PPUSH
25818: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25822: LD_VAR 0 2
25826: PPUSH
25827: LD_INT 5
25829: PPUSH
25830: CALL_OW 336
// end ;
25834: PPOPN 3
25836: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25837: LD_EXP 62
25841: PUSH
25842: LD_EXP 80
25846: AND
25847: PUSH
25848: LD_OWVAR 67
25852: PUSH
25853: LD_INT 4
25855: LESS
25856: AND
25857: IFFALSE 25876
25859: GO 25861
25861: DISABLE
// begin Difficulty := Difficulty + 1 ;
25862: LD_ADDR_OWVAR 67
25866: PUSH
25867: LD_OWVAR 67
25871: PUSH
25872: LD_INT 1
25874: PLUS
25875: ST_TO_ADDR
// end ;
25876: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25877: LD_EXP 62
25881: PUSH
25882: LD_EXP 81
25886: AND
25887: IFFALSE 25990
25889: GO 25891
25891: DISABLE
25892: LD_INT 0
25894: PPUSH
// begin for i := 1 to 5 do
25895: LD_ADDR_VAR 0 1
25899: PUSH
25900: DOUBLE
25901: LD_INT 1
25903: DEC
25904: ST_TO_ADDR
25905: LD_INT 5
25907: PUSH
25908: FOR_TO
25909: IFFALSE 25988
// begin uc_nation := nation_nature ;
25911: LD_ADDR_OWVAR 21
25915: PUSH
25916: LD_INT 0
25918: ST_TO_ADDR
// uc_side := 0 ;
25919: LD_ADDR_OWVAR 20
25923: PUSH
25924: LD_INT 0
25926: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25927: LD_ADDR_OWVAR 29
25931: PUSH
25932: LD_INT 12
25934: PUSH
25935: LD_INT 12
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: ST_TO_ADDR
// hc_agressivity := 20 ;
25942: LD_ADDR_OWVAR 35
25946: PUSH
25947: LD_INT 20
25949: ST_TO_ADDR
// hc_class := class_tiger ;
25950: LD_ADDR_OWVAR 28
25954: PUSH
25955: LD_INT 14
25957: ST_TO_ADDR
// hc_gallery :=  ;
25958: LD_ADDR_OWVAR 33
25962: PUSH
25963: LD_STRING 
25965: ST_TO_ADDR
// hc_name :=  ;
25966: LD_ADDR_OWVAR 26
25970: PUSH
25971: LD_STRING 
25973: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25974: CALL_OW 44
25978: PPUSH
25979: LD_INT 0
25981: PPUSH
25982: CALL_OW 51
// end ;
25986: GO 25908
25988: POP
25989: POP
// end ;
25990: PPOPN 1
25992: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25993: LD_EXP 62
25997: PUSH
25998: LD_EXP 82
26002: AND
26003: IFFALSE 26012
26005: GO 26007
26007: DISABLE
// StreamSibBomb ;
26008: CALL 26013 0 0
26012: END
// export function StreamSibBomb ; var i , x , y ; begin
26013: LD_INT 0
26015: PPUSH
26016: PPUSH
26017: PPUSH
26018: PPUSH
// result := false ;
26019: LD_ADDR_VAR 0 1
26023: PUSH
26024: LD_INT 0
26026: ST_TO_ADDR
// for i := 1 to 16 do
26027: LD_ADDR_VAR 0 2
26031: PUSH
26032: DOUBLE
26033: LD_INT 1
26035: DEC
26036: ST_TO_ADDR
26037: LD_INT 16
26039: PUSH
26040: FOR_TO
26041: IFFALSE 26240
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26043: LD_ADDR_VAR 0 3
26047: PUSH
26048: LD_INT 10
26050: PUSH
26051: LD_INT 20
26053: PUSH
26054: LD_INT 30
26056: PUSH
26057: LD_INT 40
26059: PUSH
26060: LD_INT 50
26062: PUSH
26063: LD_INT 60
26065: PUSH
26066: LD_INT 70
26068: PUSH
26069: LD_INT 80
26071: PUSH
26072: LD_INT 90
26074: PUSH
26075: LD_INT 100
26077: PUSH
26078: LD_INT 110
26080: PUSH
26081: LD_INT 120
26083: PUSH
26084: LD_INT 130
26086: PUSH
26087: LD_INT 140
26089: PUSH
26090: LD_INT 150
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PPUSH
26113: LD_INT 15
26115: PPUSH
26116: CALL_OW 12
26120: ARRAY
26121: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26122: LD_ADDR_VAR 0 4
26126: PUSH
26127: LD_INT 10
26129: PUSH
26130: LD_INT 20
26132: PUSH
26133: LD_INT 30
26135: PUSH
26136: LD_INT 40
26138: PUSH
26139: LD_INT 50
26141: PUSH
26142: LD_INT 60
26144: PUSH
26145: LD_INT 70
26147: PUSH
26148: LD_INT 80
26150: PUSH
26151: LD_INT 90
26153: PUSH
26154: LD_INT 100
26156: PUSH
26157: LD_INT 110
26159: PUSH
26160: LD_INT 120
26162: PUSH
26163: LD_INT 130
26165: PUSH
26166: LD_INT 140
26168: PUSH
26169: LD_INT 150
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: PPUSH
26192: LD_INT 15
26194: PPUSH
26195: CALL_OW 12
26199: ARRAY
26200: ST_TO_ADDR
// if ValidHex ( x , y ) then
26201: LD_VAR 0 3
26205: PPUSH
26206: LD_VAR 0 4
26210: PPUSH
26211: CALL_OW 488
26215: IFFALSE 26238
// begin result := [ x , y ] ;
26217: LD_ADDR_VAR 0 1
26221: PUSH
26222: LD_VAR 0 3
26226: PUSH
26227: LD_VAR 0 4
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: ST_TO_ADDR
// break ;
26236: GO 26240
// end ; end ;
26238: GO 26040
26240: POP
26241: POP
// if result then
26242: LD_VAR 0 1
26246: IFFALSE 26306
// begin ToLua ( playSibBomb() ) ;
26248: LD_STRING playSibBomb()
26250: PPUSH
26251: CALL_OW 559
// wait ( 0 0$14 ) ;
26255: LD_INT 490
26257: PPUSH
26258: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26262: LD_VAR 0 1
26266: PUSH
26267: LD_INT 1
26269: ARRAY
26270: PPUSH
26271: LD_VAR 0 1
26275: PUSH
26276: LD_INT 2
26278: ARRAY
26279: PPUSH
26280: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26284: LD_VAR 0 1
26288: PUSH
26289: LD_INT 1
26291: ARRAY
26292: PPUSH
26293: LD_VAR 0 1
26297: PUSH
26298: LD_INT 2
26300: ARRAY
26301: PPUSH
26302: CALL_OW 429
// end ; end ;
26306: LD_VAR 0 1
26310: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26311: LD_EXP 62
26315: PUSH
26316: LD_EXP 84
26320: AND
26321: IFFALSE 26333
26323: GO 26325
26325: DISABLE
// YouLost (  ) ;
26326: LD_STRING 
26328: PPUSH
26329: CALL_OW 104
26333: END
// every 0 0$1 trigger StreamModeActive and sFog do
26334: LD_EXP 62
26338: PUSH
26339: LD_EXP 83
26343: AND
26344: IFFALSE 26358
26346: GO 26348
26348: DISABLE
// FogOff ( your_side ) ;
26349: LD_OWVAR 2
26353: PPUSH
26354: CALL_OW 344
26358: END
// every 0 0$1 trigger StreamModeActive and sSun do
26359: LD_EXP 62
26363: PUSH
26364: LD_EXP 85
26368: AND
26369: IFFALSE 26397
26371: GO 26373
26373: DISABLE
// begin solar_recharge_percent := 0 ;
26374: LD_ADDR_OWVAR 79
26378: PUSH
26379: LD_INT 0
26381: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26382: LD_INT 10500
26384: PPUSH
26385: CALL_OW 67
// solar_recharge_percent := 100 ;
26389: LD_ADDR_OWVAR 79
26393: PUSH
26394: LD_INT 100
26396: ST_TO_ADDR
// end ;
26397: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26398: LD_EXP 62
26402: PUSH
26403: LD_EXP 86
26407: AND
26408: IFFALSE 26647
26410: GO 26412
26412: DISABLE
26413: LD_INT 0
26415: PPUSH
26416: PPUSH
26417: PPUSH
// begin tmp := [ ] ;
26418: LD_ADDR_VAR 0 3
26422: PUSH
26423: EMPTY
26424: ST_TO_ADDR
// for i := 1 to 6 do
26425: LD_ADDR_VAR 0 1
26429: PUSH
26430: DOUBLE
26431: LD_INT 1
26433: DEC
26434: ST_TO_ADDR
26435: LD_INT 6
26437: PUSH
26438: FOR_TO
26439: IFFALSE 26544
// begin uc_nation := nation_nature ;
26441: LD_ADDR_OWVAR 21
26445: PUSH
26446: LD_INT 0
26448: ST_TO_ADDR
// uc_side := 0 ;
26449: LD_ADDR_OWVAR 20
26453: PUSH
26454: LD_INT 0
26456: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26457: LD_ADDR_OWVAR 29
26461: PUSH
26462: LD_INT 12
26464: PUSH
26465: LD_INT 12
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: ST_TO_ADDR
// hc_agressivity := 20 ;
26472: LD_ADDR_OWVAR 35
26476: PUSH
26477: LD_INT 20
26479: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26480: LD_ADDR_OWVAR 28
26484: PUSH
26485: LD_INT 17
26487: ST_TO_ADDR
// hc_gallery :=  ;
26488: LD_ADDR_OWVAR 33
26492: PUSH
26493: LD_STRING 
26495: ST_TO_ADDR
// hc_name :=  ;
26496: LD_ADDR_OWVAR 26
26500: PUSH
26501: LD_STRING 
26503: ST_TO_ADDR
// un := CreateHuman ;
26504: LD_ADDR_VAR 0 2
26508: PUSH
26509: CALL_OW 44
26513: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26514: LD_VAR 0 2
26518: PPUSH
26519: LD_INT 1
26521: PPUSH
26522: CALL_OW 51
// tmp := tmp ^ un ;
26526: LD_ADDR_VAR 0 3
26530: PUSH
26531: LD_VAR 0 3
26535: PUSH
26536: LD_VAR 0 2
26540: ADD
26541: ST_TO_ADDR
// end ;
26542: GO 26438
26544: POP
26545: POP
// repeat wait ( 0 0$1 ) ;
26546: LD_INT 35
26548: PPUSH
26549: CALL_OW 67
// for un in tmp do
26553: LD_ADDR_VAR 0 2
26557: PUSH
26558: LD_VAR 0 3
26562: PUSH
26563: FOR_IN
26564: IFFALSE 26638
// begin if IsDead ( un ) then
26566: LD_VAR 0 2
26570: PPUSH
26571: CALL_OW 301
26575: IFFALSE 26595
// begin tmp := tmp diff un ;
26577: LD_ADDR_VAR 0 3
26581: PUSH
26582: LD_VAR 0 3
26586: PUSH
26587: LD_VAR 0 2
26591: DIFF
26592: ST_TO_ADDR
// continue ;
26593: GO 26563
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26595: LD_VAR 0 2
26599: PPUSH
26600: LD_INT 3
26602: PUSH
26603: LD_INT 22
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PPUSH
26617: CALL_OW 69
26621: PPUSH
26622: LD_VAR 0 2
26626: PPUSH
26627: CALL_OW 74
26631: PPUSH
26632: CALL_OW 115
// end ;
26636: GO 26563
26638: POP
26639: POP
// until not tmp ;
26640: LD_VAR 0 3
26644: NOT
26645: IFFALSE 26546
// end ;
26647: PPOPN 3
26649: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26650: LD_EXP 62
26654: PUSH
26655: LD_EXP 87
26659: AND
26660: IFFALSE 26714
26662: GO 26664
26664: DISABLE
// begin ToLua ( displayTroll(); ) ;
26665: LD_STRING displayTroll();
26667: PPUSH
26668: CALL_OW 559
// wait ( 3 3$00 ) ;
26672: LD_INT 6300
26674: PPUSH
26675: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26679: LD_STRING hideTroll();
26681: PPUSH
26682: CALL_OW 559
// wait ( 1 1$00 ) ;
26686: LD_INT 2100
26688: PPUSH
26689: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26693: LD_STRING displayTroll();
26695: PPUSH
26696: CALL_OW 559
// wait ( 1 1$00 ) ;
26700: LD_INT 2100
26702: PPUSH
26703: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26707: LD_STRING hideTroll();
26709: PPUSH
26710: CALL_OW 559
// end ;
26714: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26715: LD_EXP 62
26719: PUSH
26720: LD_EXP 88
26724: AND
26725: IFFALSE 26788
26727: GO 26729
26729: DISABLE
26730: LD_INT 0
26732: PPUSH
// begin p := 0 ;
26733: LD_ADDR_VAR 0 1
26737: PUSH
26738: LD_INT 0
26740: ST_TO_ADDR
// repeat game_speed := 1 ;
26741: LD_ADDR_OWVAR 65
26745: PUSH
26746: LD_INT 1
26748: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26749: LD_INT 35
26751: PPUSH
26752: CALL_OW 67
// p := p + 1 ;
26756: LD_ADDR_VAR 0 1
26760: PUSH
26761: LD_VAR 0 1
26765: PUSH
26766: LD_INT 1
26768: PLUS
26769: ST_TO_ADDR
// until p >= 60 ;
26770: LD_VAR 0 1
26774: PUSH
26775: LD_INT 60
26777: GREATEREQUAL
26778: IFFALSE 26741
// game_speed := 4 ;
26780: LD_ADDR_OWVAR 65
26784: PUSH
26785: LD_INT 4
26787: ST_TO_ADDR
// end ;
26788: PPOPN 1
26790: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26791: LD_EXP 62
26795: PUSH
26796: LD_EXP 89
26800: AND
26801: IFFALSE 26947
26803: GO 26805
26805: DISABLE
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26810: LD_ADDR_VAR 0 1
26814: PUSH
26815: LD_INT 22
26817: PUSH
26818: LD_OWVAR 2
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: LD_INT 30
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 30
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PPUSH
26859: CALL_OW 69
26863: ST_TO_ADDR
// if not depot then
26864: LD_VAR 0 1
26868: NOT
26869: IFFALSE 26873
// exit ;
26871: GO 26947
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26873: LD_ADDR_VAR 0 2
26877: PUSH
26878: LD_VAR 0 1
26882: PUSH
26883: LD_INT 1
26885: PPUSH
26886: LD_VAR 0 1
26890: PPUSH
26891: CALL_OW 12
26895: ARRAY
26896: PPUSH
26897: CALL_OW 274
26901: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26902: LD_VAR 0 2
26906: PPUSH
26907: LD_INT 1
26909: PPUSH
26910: LD_INT 0
26912: PPUSH
26913: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26917: LD_VAR 0 2
26921: PPUSH
26922: LD_INT 2
26924: PPUSH
26925: LD_INT 0
26927: PPUSH
26928: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26932: LD_VAR 0 2
26936: PPUSH
26937: LD_INT 3
26939: PPUSH
26940: LD_INT 0
26942: PPUSH
26943: CALL_OW 277
// end ;
26947: PPOPN 2
26949: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26950: LD_EXP 62
26954: PUSH
26955: LD_EXP 90
26959: AND
26960: IFFALSE 27057
26962: GO 26964
26964: DISABLE
26965: LD_INT 0
26967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26968: LD_ADDR_VAR 0 1
26972: PUSH
26973: LD_INT 22
26975: PUSH
26976: LD_OWVAR 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 21
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 3
26997: PUSH
26998: LD_INT 23
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: PPUSH
27017: CALL_OW 69
27021: ST_TO_ADDR
// if not tmp then
27022: LD_VAR 0 1
27026: NOT
27027: IFFALSE 27031
// exit ;
27029: GO 27057
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27031: LD_VAR 0 1
27035: PUSH
27036: LD_INT 1
27038: PPUSH
27039: LD_VAR 0 1
27043: PPUSH
27044: CALL_OW 12
27048: ARRAY
27049: PPUSH
27050: LD_INT 200
27052: PPUSH
27053: CALL_OW 234
// end ;
27057: PPOPN 1
27059: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27060: LD_EXP 62
27064: PUSH
27065: LD_EXP 91
27069: AND
27070: IFFALSE 27149
27072: GO 27074
27074: DISABLE
27075: LD_INT 0
27077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27078: LD_ADDR_VAR 0 1
27082: PUSH
27083: LD_INT 22
27085: PUSH
27086: LD_OWVAR 2
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 21
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PPUSH
27109: CALL_OW 69
27113: ST_TO_ADDR
// if not tmp then
27114: LD_VAR 0 1
27118: NOT
27119: IFFALSE 27123
// exit ;
27121: GO 27149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27123: LD_VAR 0 1
27127: PUSH
27128: LD_INT 1
27130: PPUSH
27131: LD_VAR 0 1
27135: PPUSH
27136: CALL_OW 12
27140: ARRAY
27141: PPUSH
27142: LD_INT 60
27144: PPUSH
27145: CALL_OW 234
// end ;
27149: PPOPN 1
27151: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27152: LD_EXP 62
27156: PUSH
27157: LD_EXP 92
27161: AND
27162: IFFALSE 27261
27164: GO 27166
27166: DISABLE
27167: LD_INT 0
27169: PPUSH
27170: PPUSH
// begin enable ;
27171: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27172: LD_ADDR_VAR 0 1
27176: PUSH
27177: LD_INT 22
27179: PUSH
27180: LD_OWVAR 2
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 61
27191: PUSH
27192: EMPTY
27193: LIST
27194: PUSH
27195: LD_INT 33
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: LIST
27209: PPUSH
27210: CALL_OW 69
27214: ST_TO_ADDR
// if not tmp then
27215: LD_VAR 0 1
27219: NOT
27220: IFFALSE 27224
// exit ;
27222: GO 27261
// for i in tmp do
27224: LD_ADDR_VAR 0 2
27228: PUSH
27229: LD_VAR 0 1
27233: PUSH
27234: FOR_IN
27235: IFFALSE 27259
// if IsControledBy ( i ) then
27237: LD_VAR 0 2
27241: PPUSH
27242: CALL_OW 312
27246: IFFALSE 27257
// ComUnlink ( i ) ;
27248: LD_VAR 0 2
27252: PPUSH
27253: CALL_OW 136
27257: GO 27234
27259: POP
27260: POP
// end ;
27261: PPOPN 2
27263: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27264: LD_EXP 62
27268: PUSH
27269: LD_EXP 93
27273: AND
27274: IFFALSE 27414
27276: GO 27278
27278: DISABLE
27279: LD_INT 0
27281: PPUSH
27282: PPUSH
// begin ToLua ( displayPowell(); ) ;
27283: LD_STRING displayPowell();
27285: PPUSH
27286: CALL_OW 559
// uc_side := 0 ;
27290: LD_ADDR_OWVAR 20
27294: PUSH
27295: LD_INT 0
27297: ST_TO_ADDR
// uc_nation := 2 ;
27298: LD_ADDR_OWVAR 21
27302: PUSH
27303: LD_INT 2
27305: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27306: LD_ADDR_OWVAR 37
27310: PUSH
27311: LD_INT 14
27313: ST_TO_ADDR
// vc_engine := engine_siberite ;
27314: LD_ADDR_OWVAR 39
27318: PUSH
27319: LD_INT 3
27321: ST_TO_ADDR
// vc_control := control_apeman ;
27322: LD_ADDR_OWVAR 38
27326: PUSH
27327: LD_INT 5
27329: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27330: LD_ADDR_OWVAR 40
27334: PUSH
27335: LD_INT 29
27337: ST_TO_ADDR
// un := CreateVehicle ;
27338: LD_ADDR_VAR 0 2
27342: PUSH
27343: CALL_OW 45
27347: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27348: LD_VAR 0 2
27352: PPUSH
27353: LD_INT 1
27355: PPUSH
27356: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27360: LD_INT 35
27362: PPUSH
27363: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27367: LD_VAR 0 2
27371: PPUSH
27372: LD_INT 22
27374: PUSH
27375: LD_OWVAR 2
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PPUSH
27384: CALL_OW 69
27388: PPUSH
27389: LD_VAR 0 2
27393: PPUSH
27394: CALL_OW 74
27398: PPUSH
27399: CALL_OW 115
// until IsDead ( un ) ;
27403: LD_VAR 0 2
27407: PPUSH
27408: CALL_OW 301
27412: IFFALSE 27360
// end ;
27414: PPOPN 2
27416: END
// every 0 0$1 trigger StreamModeActive and sStu do
27417: LD_EXP 62
27421: PUSH
27422: LD_EXP 101
27426: AND
27427: IFFALSE 27443
27429: GO 27431
27431: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27432: LD_STRING displayStucuk();
27434: PPUSH
27435: CALL_OW 559
// ResetFog ;
27439: CALL_OW 335
// end ;
27443: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27444: LD_EXP 62
27448: PUSH
27449: LD_EXP 94
27453: AND
27454: IFFALSE 27595
27456: GO 27458
27458: DISABLE
27459: LD_INT 0
27461: PPUSH
27462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27463: LD_ADDR_VAR 0 2
27467: PUSH
27468: LD_INT 22
27470: PUSH
27471: LD_OWVAR 2
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 21
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PPUSH
27494: CALL_OW 69
27498: ST_TO_ADDR
// if not tmp then
27499: LD_VAR 0 2
27503: NOT
27504: IFFALSE 27508
// exit ;
27506: GO 27595
// un := tmp [ rand ( 1 , tmp ) ] ;
27508: LD_ADDR_VAR 0 1
27512: PUSH
27513: LD_VAR 0 2
27517: PUSH
27518: LD_INT 1
27520: PPUSH
27521: LD_VAR 0 2
27525: PPUSH
27526: CALL_OW 12
27530: ARRAY
27531: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27532: LD_VAR 0 1
27536: PPUSH
27537: LD_INT 0
27539: PPUSH
27540: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27544: LD_VAR 0 1
27548: PPUSH
27549: LD_OWVAR 3
27553: PUSH
27554: LD_VAR 0 1
27558: DIFF
27559: PPUSH
27560: LD_VAR 0 1
27564: PPUSH
27565: CALL_OW 74
27569: PPUSH
27570: CALL_OW 115
// wait ( 0 0$20 ) ;
27574: LD_INT 700
27576: PPUSH
27577: CALL_OW 67
// SetSide ( un , your_side ) ;
27581: LD_VAR 0 1
27585: PPUSH
27586: LD_OWVAR 2
27590: PPUSH
27591: CALL_OW 235
// end ;
27595: PPOPN 2
27597: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27598: LD_EXP 62
27602: PUSH
27603: LD_EXP 95
27607: AND
27608: IFFALSE 27714
27610: GO 27612
27612: DISABLE
27613: LD_INT 0
27615: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27616: LD_ADDR_VAR 0 1
27620: PUSH
27621: LD_INT 22
27623: PUSH
27624: LD_OWVAR 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: LD_INT 30
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 30
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PPUSH
27665: CALL_OW 69
27669: ST_TO_ADDR
// if not depot then
27670: LD_VAR 0 1
27674: NOT
27675: IFFALSE 27679
// exit ;
27677: GO 27714
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27679: LD_VAR 0 1
27683: PUSH
27684: LD_INT 1
27686: ARRAY
27687: PPUSH
27688: CALL_OW 250
27692: PPUSH
27693: LD_VAR 0 1
27697: PUSH
27698: LD_INT 1
27700: ARRAY
27701: PPUSH
27702: CALL_OW 251
27706: PPUSH
27707: LD_INT 70
27709: PPUSH
27710: CALL_OW 495
// end ;
27714: PPOPN 1
27716: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27717: LD_EXP 62
27721: PUSH
27722: LD_EXP 96
27726: AND
27727: IFFALSE 27938
27729: GO 27731
27731: DISABLE
27732: LD_INT 0
27734: PPUSH
27735: PPUSH
27736: PPUSH
27737: PPUSH
27738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27739: LD_ADDR_VAR 0 5
27743: PUSH
27744: LD_INT 22
27746: PUSH
27747: LD_OWVAR 2
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 21
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PPUSH
27770: CALL_OW 69
27774: ST_TO_ADDR
// if not tmp then
27775: LD_VAR 0 5
27779: NOT
27780: IFFALSE 27784
// exit ;
27782: GO 27938
// for i in tmp do
27784: LD_ADDR_VAR 0 1
27788: PUSH
27789: LD_VAR 0 5
27793: PUSH
27794: FOR_IN
27795: IFFALSE 27936
// begin d := rand ( 0 , 5 ) ;
27797: LD_ADDR_VAR 0 4
27801: PUSH
27802: LD_INT 0
27804: PPUSH
27805: LD_INT 5
27807: PPUSH
27808: CALL_OW 12
27812: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27813: LD_ADDR_VAR 0 2
27817: PUSH
27818: LD_VAR 0 1
27822: PPUSH
27823: CALL_OW 250
27827: PPUSH
27828: LD_VAR 0 4
27832: PPUSH
27833: LD_INT 3
27835: PPUSH
27836: LD_INT 12
27838: PPUSH
27839: CALL_OW 12
27843: PPUSH
27844: CALL_OW 272
27848: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27849: LD_ADDR_VAR 0 3
27853: PUSH
27854: LD_VAR 0 1
27858: PPUSH
27859: CALL_OW 251
27863: PPUSH
27864: LD_VAR 0 4
27868: PPUSH
27869: LD_INT 3
27871: PPUSH
27872: LD_INT 12
27874: PPUSH
27875: CALL_OW 12
27879: PPUSH
27880: CALL_OW 273
27884: ST_TO_ADDR
// if ValidHex ( x , y ) then
27885: LD_VAR 0 2
27889: PPUSH
27890: LD_VAR 0 3
27894: PPUSH
27895: CALL_OW 488
27899: IFFALSE 27934
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27901: LD_VAR 0 1
27905: PPUSH
27906: LD_VAR 0 2
27910: PPUSH
27911: LD_VAR 0 3
27915: PPUSH
27916: LD_INT 3
27918: PPUSH
27919: LD_INT 6
27921: PPUSH
27922: CALL_OW 12
27926: PPUSH
27927: LD_INT 1
27929: PPUSH
27930: CALL_OW 483
// end ;
27934: GO 27794
27936: POP
27937: POP
// end ;
27938: PPOPN 5
27940: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27941: LD_EXP 62
27945: PUSH
27946: LD_EXP 97
27950: AND
27951: IFFALSE 28045
27953: GO 27955
27955: DISABLE
27956: LD_INT 0
27958: PPUSH
27959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27960: LD_ADDR_VAR 0 2
27964: PUSH
27965: LD_INT 22
27967: PUSH
27968: LD_OWVAR 2
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 32
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 21
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: PPUSH
28002: CALL_OW 69
28006: ST_TO_ADDR
// if not tmp then
28007: LD_VAR 0 2
28011: NOT
28012: IFFALSE 28016
// exit ;
28014: GO 28045
// for i in tmp do
28016: LD_ADDR_VAR 0 1
28020: PUSH
28021: LD_VAR 0 2
28025: PUSH
28026: FOR_IN
28027: IFFALSE 28043
// SetFuel ( i , 0 ) ;
28029: LD_VAR 0 1
28033: PPUSH
28034: LD_INT 0
28036: PPUSH
28037: CALL_OW 240
28041: GO 28026
28043: POP
28044: POP
// end ;
28045: PPOPN 2
28047: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28048: LD_EXP 62
28052: PUSH
28053: LD_EXP 98
28057: AND
28058: IFFALSE 28124
28060: GO 28062
28062: DISABLE
28063: LD_INT 0
28065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28066: LD_ADDR_VAR 0 1
28070: PUSH
28071: LD_INT 22
28073: PUSH
28074: LD_OWVAR 2
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 30
28085: PUSH
28086: LD_INT 29
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PPUSH
28097: CALL_OW 69
28101: ST_TO_ADDR
// if not tmp then
28102: LD_VAR 0 1
28106: NOT
28107: IFFALSE 28111
// exit ;
28109: GO 28124
// DestroyUnit ( tmp [ 1 ] ) ;
28111: LD_VAR 0 1
28115: PUSH
28116: LD_INT 1
28118: ARRAY
28119: PPUSH
28120: CALL_OW 65
// end ;
28124: PPOPN 1
28126: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28127: LD_EXP 62
28131: PUSH
28132: LD_EXP 100
28136: AND
28137: IFFALSE 28266
28139: GO 28141
28141: DISABLE
28142: LD_INT 0
28144: PPUSH
// begin uc_side := 0 ;
28145: LD_ADDR_OWVAR 20
28149: PUSH
28150: LD_INT 0
28152: ST_TO_ADDR
// uc_nation := nation_arabian ;
28153: LD_ADDR_OWVAR 21
28157: PUSH
28158: LD_INT 2
28160: ST_TO_ADDR
// hc_gallery :=  ;
28161: LD_ADDR_OWVAR 33
28165: PUSH
28166: LD_STRING 
28168: ST_TO_ADDR
// hc_name :=  ;
28169: LD_ADDR_OWVAR 26
28173: PUSH
28174: LD_STRING 
28176: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28177: LD_INT 1
28179: PPUSH
28180: LD_INT 11
28182: PPUSH
28183: LD_INT 10
28185: PPUSH
28186: CALL_OW 380
// un := CreateHuman ;
28190: LD_ADDR_VAR 0 1
28194: PUSH
28195: CALL_OW 44
28199: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28200: LD_VAR 0 1
28204: PPUSH
28205: LD_INT 1
28207: PPUSH
28208: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28212: LD_INT 35
28214: PPUSH
28215: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28219: LD_VAR 0 1
28223: PPUSH
28224: LD_INT 22
28226: PUSH
28227: LD_OWVAR 2
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PPUSH
28236: CALL_OW 69
28240: PPUSH
28241: LD_VAR 0 1
28245: PPUSH
28246: CALL_OW 74
28250: PPUSH
28251: CALL_OW 115
// until IsDead ( un ) ;
28255: LD_VAR 0 1
28259: PPUSH
28260: CALL_OW 301
28264: IFFALSE 28212
// end ;
28266: PPOPN 1
28268: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28269: LD_EXP 62
28273: PUSH
28274: LD_EXP 102
28278: AND
28279: IFFALSE 28291
28281: GO 28283
28283: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28284: LD_STRING earthquake(getX(game), 0, 32)
28286: PPUSH
28287: CALL_OW 559
28291: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28292: LD_EXP 62
28296: PUSH
28297: LD_EXP 103
28301: AND
28302: IFFALSE 28393
28304: GO 28306
28306: DISABLE
28307: LD_INT 0
28309: PPUSH
// begin enable ;
28310: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28311: LD_ADDR_VAR 0 1
28315: PUSH
28316: LD_INT 22
28318: PUSH
28319: LD_OWVAR 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 21
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 33
28340: PUSH
28341: LD_INT 3
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: PPUSH
28353: CALL_OW 69
28357: ST_TO_ADDR
// if not tmp then
28358: LD_VAR 0 1
28362: NOT
28363: IFFALSE 28367
// exit ;
28365: GO 28393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28367: LD_VAR 0 1
28371: PUSH
28372: LD_INT 1
28374: PPUSH
28375: LD_VAR 0 1
28379: PPUSH
28380: CALL_OW 12
28384: ARRAY
28385: PPUSH
28386: LD_INT 1
28388: PPUSH
28389: CALL_OW 234
// end ;
28393: PPOPN 1
28395: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28396: LD_EXP 62
28400: PUSH
28401: LD_EXP 104
28405: AND
28406: IFFALSE 28547
28408: GO 28410
28410: DISABLE
28411: LD_INT 0
28413: PPUSH
28414: PPUSH
28415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28416: LD_ADDR_VAR 0 3
28420: PUSH
28421: LD_INT 22
28423: PUSH
28424: LD_OWVAR 2
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 25
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PPUSH
28447: CALL_OW 69
28451: ST_TO_ADDR
// if not tmp then
28452: LD_VAR 0 3
28456: NOT
28457: IFFALSE 28461
// exit ;
28459: GO 28547
// un := tmp [ rand ( 1 , tmp ) ] ;
28461: LD_ADDR_VAR 0 2
28465: PUSH
28466: LD_VAR 0 3
28470: PUSH
28471: LD_INT 1
28473: PPUSH
28474: LD_VAR 0 3
28478: PPUSH
28479: CALL_OW 12
28483: ARRAY
28484: ST_TO_ADDR
// if Crawls ( un ) then
28485: LD_VAR 0 2
28489: PPUSH
28490: CALL_OW 318
28494: IFFALSE 28505
// ComWalk ( un ) ;
28496: LD_VAR 0 2
28500: PPUSH
28501: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28505: LD_VAR 0 2
28509: PPUSH
28510: LD_INT 9
28512: PPUSH
28513: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28517: LD_INT 28
28519: PPUSH
28520: LD_OWVAR 2
28524: PPUSH
28525: LD_INT 2
28527: PPUSH
28528: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28532: LD_INT 29
28534: PPUSH
28535: LD_OWVAR 2
28539: PPUSH
28540: LD_INT 2
28542: PPUSH
28543: CALL_OW 322
// end ;
28547: PPOPN 3
28549: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28550: LD_EXP 62
28554: PUSH
28555: LD_EXP 105
28559: AND
28560: IFFALSE 28671
28562: GO 28564
28564: DISABLE
28565: LD_INT 0
28567: PPUSH
28568: PPUSH
28569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28570: LD_ADDR_VAR 0 3
28574: PUSH
28575: LD_INT 22
28577: PUSH
28578: LD_OWVAR 2
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 25
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PPUSH
28601: CALL_OW 69
28605: ST_TO_ADDR
// if not tmp then
28606: LD_VAR 0 3
28610: NOT
28611: IFFALSE 28615
// exit ;
28613: GO 28671
// un := tmp [ rand ( 1 , tmp ) ] ;
28615: LD_ADDR_VAR 0 2
28619: PUSH
28620: LD_VAR 0 3
28624: PUSH
28625: LD_INT 1
28627: PPUSH
28628: LD_VAR 0 3
28632: PPUSH
28633: CALL_OW 12
28637: ARRAY
28638: ST_TO_ADDR
// if Crawls ( un ) then
28639: LD_VAR 0 2
28643: PPUSH
28644: CALL_OW 318
28648: IFFALSE 28659
// ComWalk ( un ) ;
28650: LD_VAR 0 2
28654: PPUSH
28655: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28659: LD_VAR 0 2
28663: PPUSH
28664: LD_INT 8
28666: PPUSH
28667: CALL_OW 336
// end ;
28671: PPOPN 3
28673: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28674: LD_EXP 62
28678: PUSH
28679: LD_EXP 106
28683: AND
28684: IFFALSE 28828
28686: GO 28688
28688: DISABLE
28689: LD_INT 0
28691: PPUSH
28692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28693: LD_ADDR_VAR 0 2
28697: PUSH
28698: LD_INT 22
28700: PUSH
28701: LD_OWVAR 2
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 21
28712: PUSH
28713: LD_INT 2
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 2
28722: PUSH
28723: LD_INT 34
28725: PUSH
28726: LD_INT 12
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 34
28735: PUSH
28736: LD_INT 51
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 34
28745: PUSH
28746: LD_INT 32
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: LIST
28763: PPUSH
28764: CALL_OW 69
28768: ST_TO_ADDR
// if not tmp then
28769: LD_VAR 0 2
28773: NOT
28774: IFFALSE 28778
// exit ;
28776: GO 28828
// for i in tmp do
28778: LD_ADDR_VAR 0 1
28782: PUSH
28783: LD_VAR 0 2
28787: PUSH
28788: FOR_IN
28789: IFFALSE 28826
// if GetCargo ( i , mat_artifact ) = 0 then
28791: LD_VAR 0 1
28795: PPUSH
28796: LD_INT 4
28798: PPUSH
28799: CALL_OW 289
28803: PUSH
28804: LD_INT 0
28806: EQUAL
28807: IFFALSE 28824
// SetCargo ( i , mat_siberit , 100 ) ;
28809: LD_VAR 0 1
28813: PPUSH
28814: LD_INT 3
28816: PPUSH
28817: LD_INT 100
28819: PPUSH
28820: CALL_OW 290
28824: GO 28788
28826: POP
28827: POP
// end ;
28828: PPOPN 2
28830: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28831: LD_EXP 62
28835: PUSH
28836: LD_EXP 107
28840: AND
28841: IFFALSE 29024
28843: GO 28845
28845: DISABLE
28846: LD_INT 0
28848: PPUSH
28849: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28850: LD_ADDR_VAR 0 2
28854: PUSH
28855: LD_INT 22
28857: PUSH
28858: LD_OWVAR 2
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PPUSH
28867: CALL_OW 69
28871: ST_TO_ADDR
// if not tmp then
28872: LD_VAR 0 2
28876: NOT
28877: IFFALSE 28881
// exit ;
28879: GO 29024
// for i := 1 to 2 do
28881: LD_ADDR_VAR 0 1
28885: PUSH
28886: DOUBLE
28887: LD_INT 1
28889: DEC
28890: ST_TO_ADDR
28891: LD_INT 2
28893: PUSH
28894: FOR_TO
28895: IFFALSE 29022
// begin uc_side := your_side ;
28897: LD_ADDR_OWVAR 20
28901: PUSH
28902: LD_OWVAR 2
28906: ST_TO_ADDR
// uc_nation := nation_american ;
28907: LD_ADDR_OWVAR 21
28911: PUSH
28912: LD_INT 1
28914: ST_TO_ADDR
// vc_chassis := us_morphling ;
28915: LD_ADDR_OWVAR 37
28919: PUSH
28920: LD_INT 5
28922: ST_TO_ADDR
// vc_engine := engine_siberite ;
28923: LD_ADDR_OWVAR 39
28927: PUSH
28928: LD_INT 3
28930: ST_TO_ADDR
// vc_control := control_computer ;
28931: LD_ADDR_OWVAR 38
28935: PUSH
28936: LD_INT 3
28938: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28939: LD_ADDR_OWVAR 40
28943: PUSH
28944: LD_INT 10
28946: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28947: LD_VAR 0 2
28951: PUSH
28952: LD_INT 1
28954: ARRAY
28955: PPUSH
28956: CALL_OW 310
28960: NOT
28961: IFFALSE 29008
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28963: CALL_OW 45
28967: PPUSH
28968: LD_VAR 0 2
28972: PUSH
28973: LD_INT 1
28975: ARRAY
28976: PPUSH
28977: CALL_OW 250
28981: PPUSH
28982: LD_VAR 0 2
28986: PUSH
28987: LD_INT 1
28989: ARRAY
28990: PPUSH
28991: CALL_OW 251
28995: PPUSH
28996: LD_INT 12
28998: PPUSH
28999: LD_INT 1
29001: PPUSH
29002: CALL_OW 50
29006: GO 29020
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29008: CALL_OW 45
29012: PPUSH
29013: LD_INT 1
29015: PPUSH
29016: CALL_OW 51
// end ;
29020: GO 28894
29022: POP
29023: POP
// end ;
29024: PPOPN 2
29026: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29027: LD_EXP 62
29031: PUSH
29032: LD_EXP 108
29036: AND
29037: IFFALSE 29259
29039: GO 29041
29041: DISABLE
29042: LD_INT 0
29044: PPUSH
29045: PPUSH
29046: PPUSH
29047: PPUSH
29048: PPUSH
29049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29050: LD_ADDR_VAR 0 6
29054: PUSH
29055: LD_INT 22
29057: PUSH
29058: LD_OWVAR 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 21
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 3
29079: PUSH
29080: LD_INT 23
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: LIST
29098: PPUSH
29099: CALL_OW 69
29103: ST_TO_ADDR
// if not tmp then
29104: LD_VAR 0 6
29108: NOT
29109: IFFALSE 29113
// exit ;
29111: GO 29259
// s1 := rand ( 1 , 4 ) ;
29113: LD_ADDR_VAR 0 2
29117: PUSH
29118: LD_INT 1
29120: PPUSH
29121: LD_INT 4
29123: PPUSH
29124: CALL_OW 12
29128: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29129: LD_ADDR_VAR 0 4
29133: PUSH
29134: LD_VAR 0 6
29138: PUSH
29139: LD_INT 1
29141: ARRAY
29142: PPUSH
29143: LD_VAR 0 2
29147: PPUSH
29148: CALL_OW 259
29152: ST_TO_ADDR
// if s1 = 1 then
29153: LD_VAR 0 2
29157: PUSH
29158: LD_INT 1
29160: EQUAL
29161: IFFALSE 29181
// s2 := rand ( 2 , 4 ) else
29163: LD_ADDR_VAR 0 3
29167: PUSH
29168: LD_INT 2
29170: PPUSH
29171: LD_INT 4
29173: PPUSH
29174: CALL_OW 12
29178: ST_TO_ADDR
29179: GO 29189
// s2 := 1 ;
29181: LD_ADDR_VAR 0 3
29185: PUSH
29186: LD_INT 1
29188: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29189: LD_ADDR_VAR 0 5
29193: PUSH
29194: LD_VAR 0 6
29198: PUSH
29199: LD_INT 1
29201: ARRAY
29202: PPUSH
29203: LD_VAR 0 3
29207: PPUSH
29208: CALL_OW 259
29212: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29213: LD_VAR 0 6
29217: PUSH
29218: LD_INT 1
29220: ARRAY
29221: PPUSH
29222: LD_VAR 0 2
29226: PPUSH
29227: LD_VAR 0 5
29231: PPUSH
29232: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29236: LD_VAR 0 6
29240: PUSH
29241: LD_INT 1
29243: ARRAY
29244: PPUSH
29245: LD_VAR 0 3
29249: PPUSH
29250: LD_VAR 0 4
29254: PPUSH
29255: CALL_OW 237
// end ;
29259: PPOPN 6
29261: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29262: LD_EXP 62
29266: PUSH
29267: LD_EXP 109
29271: AND
29272: IFFALSE 29351
29274: GO 29276
29276: DISABLE
29277: LD_INT 0
29279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29280: LD_ADDR_VAR 0 1
29284: PUSH
29285: LD_INT 22
29287: PUSH
29288: LD_OWVAR 2
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 30
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PPUSH
29311: CALL_OW 69
29315: ST_TO_ADDR
// if not tmp then
29316: LD_VAR 0 1
29320: NOT
29321: IFFALSE 29325
// exit ;
29323: GO 29351
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29325: LD_VAR 0 1
29329: PUSH
29330: LD_INT 1
29332: PPUSH
29333: LD_VAR 0 1
29337: PPUSH
29338: CALL_OW 12
29342: ARRAY
29343: PPUSH
29344: LD_INT 1
29346: PPUSH
29347: CALL_OW 234
// end ;
29351: PPOPN 1
29353: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29354: LD_EXP 62
29358: PUSH
29359: LD_EXP 110
29363: AND
29364: IFFALSE 29476
29366: GO 29368
29368: DISABLE
29369: LD_INT 0
29371: PPUSH
29372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29373: LD_ADDR_VAR 0 2
29377: PUSH
29378: LD_INT 22
29380: PUSH
29381: LD_OWVAR 2
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 2
29392: PUSH
29393: LD_INT 30
29395: PUSH
29396: LD_INT 27
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 30
29405: PUSH
29406: LD_INT 26
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 30
29415: PUSH
29416: LD_INT 28
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PPUSH
29433: CALL_OW 69
29437: ST_TO_ADDR
// if not tmp then
29438: LD_VAR 0 2
29442: NOT
29443: IFFALSE 29447
// exit ;
29445: GO 29476
// for i in tmp do
29447: LD_ADDR_VAR 0 1
29451: PUSH
29452: LD_VAR 0 2
29456: PUSH
29457: FOR_IN
29458: IFFALSE 29474
// SetLives ( i , 1 ) ;
29460: LD_VAR 0 1
29464: PPUSH
29465: LD_INT 1
29467: PPUSH
29468: CALL_OW 234
29472: GO 29457
29474: POP
29475: POP
// end ;
29476: PPOPN 2
29478: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29479: LD_EXP 62
29483: PUSH
29484: LD_EXP 111
29488: AND
29489: IFFALSE 29776
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
29497: PPUSH
29498: PPUSH
// begin i := rand ( 1 , 7 ) ;
29499: LD_ADDR_VAR 0 1
29503: PUSH
29504: LD_INT 1
29506: PPUSH
29507: LD_INT 7
29509: PPUSH
29510: CALL_OW 12
29514: ST_TO_ADDR
// case i of 1 :
29515: LD_VAR 0 1
29519: PUSH
29520: LD_INT 1
29522: DOUBLE
29523: EQUAL
29524: IFTRUE 29528
29526: GO 29538
29528: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29529: LD_STRING earthquake(getX(game), 0, 32)
29531: PPUSH
29532: CALL_OW 559
29536: GO 29776
29538: LD_INT 2
29540: DOUBLE
29541: EQUAL
29542: IFTRUE 29546
29544: GO 29560
29546: POP
// begin ToLua ( displayStucuk(); ) ;
29547: LD_STRING displayStucuk();
29549: PPUSH
29550: CALL_OW 559
// ResetFog ;
29554: CALL_OW 335
// end ; 3 :
29558: GO 29776
29560: LD_INT 3
29562: DOUBLE
29563: EQUAL
29564: IFTRUE 29568
29566: GO 29672
29568: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29569: LD_ADDR_VAR 0 2
29573: PUSH
29574: LD_INT 22
29576: PUSH
29577: LD_OWVAR 2
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 25
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PPUSH
29600: CALL_OW 69
29604: ST_TO_ADDR
// if not tmp then
29605: LD_VAR 0 2
29609: NOT
29610: IFFALSE 29614
// exit ;
29612: GO 29776
// un := tmp [ rand ( 1 , tmp ) ] ;
29614: LD_ADDR_VAR 0 3
29618: PUSH
29619: LD_VAR 0 2
29623: PUSH
29624: LD_INT 1
29626: PPUSH
29627: LD_VAR 0 2
29631: PPUSH
29632: CALL_OW 12
29636: ARRAY
29637: ST_TO_ADDR
// if Crawls ( un ) then
29638: LD_VAR 0 3
29642: PPUSH
29643: CALL_OW 318
29647: IFFALSE 29658
// ComWalk ( un ) ;
29649: LD_VAR 0 3
29653: PPUSH
29654: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29658: LD_VAR 0 3
29662: PPUSH
29663: LD_INT 8
29665: PPUSH
29666: CALL_OW 336
// end ; 4 :
29670: GO 29776
29672: LD_INT 4
29674: DOUBLE
29675: EQUAL
29676: IFTRUE 29680
29678: GO 29754
29680: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29681: LD_ADDR_VAR 0 2
29685: PUSH
29686: LD_INT 22
29688: PUSH
29689: LD_OWVAR 2
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 30
29700: PUSH
29701: LD_INT 29
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PPUSH
29712: CALL_OW 69
29716: ST_TO_ADDR
// if not tmp then
29717: LD_VAR 0 2
29721: NOT
29722: IFFALSE 29726
// exit ;
29724: GO 29776
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29726: LD_VAR 0 2
29730: PUSH
29731: LD_INT 1
29733: ARRAY
29734: PPUSH
29735: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29739: LD_VAR 0 2
29743: PUSH
29744: LD_INT 1
29746: ARRAY
29747: PPUSH
29748: CALL_OW 65
// end ; 5 .. 7 :
29752: GO 29776
29754: LD_INT 5
29756: DOUBLE
29757: GREATEREQUAL
29758: IFFALSE 29766
29760: LD_INT 7
29762: DOUBLE
29763: LESSEQUAL
29764: IFTRUE 29768
29766: GO 29775
29768: POP
// StreamSibBomb ; end ;
29769: CALL 26013 0 0
29773: GO 29776
29775: POP
// end ;
29776: PPOPN 3
29778: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29779: LD_EXP 62
29783: PUSH
29784: LD_EXP 112
29788: AND
29789: IFFALSE 29945
29791: GO 29793
29793: DISABLE
29794: LD_INT 0
29796: PPUSH
29797: PPUSH
29798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29799: LD_ADDR_VAR 0 2
29803: PUSH
29804: LD_INT 81
29806: PUSH
29807: LD_OWVAR 2
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 2
29818: PUSH
29819: LD_INT 21
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 21
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PPUSH
29848: CALL_OW 69
29852: ST_TO_ADDR
// if not tmp then
29853: LD_VAR 0 2
29857: NOT
29858: IFFALSE 29862
// exit ;
29860: GO 29945
// p := 0 ;
29862: LD_ADDR_VAR 0 3
29866: PUSH
29867: LD_INT 0
29869: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29870: LD_INT 35
29872: PPUSH
29873: CALL_OW 67
// p := p + 1 ;
29877: LD_ADDR_VAR 0 3
29881: PUSH
29882: LD_VAR 0 3
29886: PUSH
29887: LD_INT 1
29889: PLUS
29890: ST_TO_ADDR
// for i in tmp do
29891: LD_ADDR_VAR 0 1
29895: PUSH
29896: LD_VAR 0 2
29900: PUSH
29901: FOR_IN
29902: IFFALSE 29933
// if GetLives ( i ) < 1000 then
29904: LD_VAR 0 1
29908: PPUSH
29909: CALL_OW 256
29913: PUSH
29914: LD_INT 1000
29916: LESS
29917: IFFALSE 29931
// SetLives ( i , 1000 ) ;
29919: LD_VAR 0 1
29923: PPUSH
29924: LD_INT 1000
29926: PPUSH
29927: CALL_OW 234
29931: GO 29901
29933: POP
29934: POP
// until p > 20 ;
29935: LD_VAR 0 3
29939: PUSH
29940: LD_INT 20
29942: GREATER
29943: IFFALSE 29870
// end ;
29945: PPOPN 3
29947: END
// every 0 0$1 trigger StreamModeActive and sTime do
29948: LD_EXP 62
29952: PUSH
29953: LD_EXP 113
29957: AND
29958: IFFALSE 29993
29960: GO 29962
29962: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29963: LD_INT 28
29965: PPUSH
29966: LD_OWVAR 2
29970: PPUSH
29971: LD_INT 2
29973: PPUSH
29974: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29978: LD_INT 30
29980: PPUSH
29981: LD_OWVAR 2
29985: PPUSH
29986: LD_INT 2
29988: PPUSH
29989: CALL_OW 322
// end ;
29993: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29994: LD_EXP 62
29998: PUSH
29999: LD_EXP 114
30003: AND
30004: IFFALSE 30125
30006: GO 30008
30008: DISABLE
30009: LD_INT 0
30011: PPUSH
30012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30013: LD_ADDR_VAR 0 2
30017: PUSH
30018: LD_INT 22
30020: PUSH
30021: LD_OWVAR 2
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 21
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 3
30042: PUSH
30043: LD_INT 23
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: PPUSH
30062: CALL_OW 69
30066: ST_TO_ADDR
// if not tmp then
30067: LD_VAR 0 2
30071: NOT
30072: IFFALSE 30076
// exit ;
30074: GO 30125
// for i in tmp do
30076: LD_ADDR_VAR 0 1
30080: PUSH
30081: LD_VAR 0 2
30085: PUSH
30086: FOR_IN
30087: IFFALSE 30123
// begin if Crawls ( i ) then
30089: LD_VAR 0 1
30093: PPUSH
30094: CALL_OW 318
30098: IFFALSE 30109
// ComWalk ( i ) ;
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL_OW 138
// SetClass ( i , 2 ) ;
30109: LD_VAR 0 1
30113: PPUSH
30114: LD_INT 2
30116: PPUSH
30117: CALL_OW 336
// end ;
30121: GO 30086
30123: POP
30124: POP
// end ;
30125: PPOPN 2
30127: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30128: LD_EXP 62
30132: PUSH
30133: LD_EXP 115
30137: AND
30138: IFFALSE 30426
30140: GO 30142
30142: DISABLE
30143: LD_INT 0
30145: PPUSH
30146: PPUSH
30147: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30148: LD_OWVAR 2
30152: PPUSH
30153: LD_INT 9
30155: PPUSH
30156: LD_INT 1
30158: PPUSH
30159: LD_INT 1
30161: PPUSH
30162: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30166: LD_INT 9
30168: PPUSH
30169: LD_OWVAR 2
30173: PPUSH
30174: CALL_OW 343
// uc_side := 9 ;
30178: LD_ADDR_OWVAR 20
30182: PUSH
30183: LD_INT 9
30185: ST_TO_ADDR
// uc_nation := 2 ;
30186: LD_ADDR_OWVAR 21
30190: PUSH
30191: LD_INT 2
30193: ST_TO_ADDR
// hc_name := Dark Warrior ;
30194: LD_ADDR_OWVAR 26
30198: PUSH
30199: LD_STRING Dark Warrior
30201: ST_TO_ADDR
// hc_gallery :=  ;
30202: LD_ADDR_OWVAR 33
30206: PUSH
30207: LD_STRING 
30209: ST_TO_ADDR
// hc_noskilllimit := true ;
30210: LD_ADDR_OWVAR 76
30214: PUSH
30215: LD_INT 1
30217: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30218: LD_ADDR_OWVAR 31
30222: PUSH
30223: LD_INT 30
30225: PUSH
30226: LD_INT 30
30228: PUSH
30229: LD_INT 30
30231: PUSH
30232: LD_INT 30
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: ST_TO_ADDR
// un := CreateHuman ;
30241: LD_ADDR_VAR 0 3
30245: PUSH
30246: CALL_OW 44
30250: ST_TO_ADDR
// hc_noskilllimit := false ;
30251: LD_ADDR_OWVAR 76
30255: PUSH
30256: LD_INT 0
30258: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30259: LD_VAR 0 3
30263: PPUSH
30264: LD_INT 1
30266: PPUSH
30267: CALL_OW 51
// ToLua ( playRanger() ) ;
30271: LD_STRING playRanger()
30273: PPUSH
30274: CALL_OW 559
// p := 0 ;
30278: LD_ADDR_VAR 0 2
30282: PUSH
30283: LD_INT 0
30285: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30286: LD_INT 35
30288: PPUSH
30289: CALL_OW 67
// p := p + 1 ;
30293: LD_ADDR_VAR 0 2
30297: PUSH
30298: LD_VAR 0 2
30302: PUSH
30303: LD_INT 1
30305: PLUS
30306: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30307: LD_VAR 0 3
30311: PPUSH
30312: CALL_OW 256
30316: PUSH
30317: LD_INT 1000
30319: LESS
30320: IFFALSE 30334
// SetLives ( un , 1000 ) ;
30322: LD_VAR 0 3
30326: PPUSH
30327: LD_INT 1000
30329: PPUSH
30330: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30334: LD_VAR 0 3
30338: PPUSH
30339: LD_INT 81
30341: PUSH
30342: LD_OWVAR 2
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 91
30353: PUSH
30354: LD_VAR 0 3
30358: PUSH
30359: LD_INT 30
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PPUSH
30371: CALL_OW 69
30375: PPUSH
30376: LD_VAR 0 3
30380: PPUSH
30381: CALL_OW 74
30385: PPUSH
30386: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30390: LD_VAR 0 2
30394: PUSH
30395: LD_INT 80
30397: GREATER
30398: PUSH
30399: LD_VAR 0 3
30403: PPUSH
30404: CALL_OW 301
30408: OR
30409: IFFALSE 30286
// if un then
30411: LD_VAR 0 3
30415: IFFALSE 30426
// RemoveUnit ( un ) ;
30417: LD_VAR 0 3
30421: PPUSH
30422: CALL_OW 64
// end ;
30426: PPOPN 3
30428: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30429: LD_EXP 116
30433: IFFALSE 30549
30435: GO 30437
30437: DISABLE
30438: LD_INT 0
30440: PPUSH
30441: PPUSH
30442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30443: LD_ADDR_VAR 0 2
30447: PUSH
30448: LD_INT 81
30450: PUSH
30451: LD_OWVAR 2
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 21
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PPUSH
30474: CALL_OW 69
30478: ST_TO_ADDR
// if not tmp then
30479: LD_VAR 0 2
30483: NOT
30484: IFFALSE 30488
// exit ;
30486: GO 30549
// ToLua ( playComputer() ) ;
30488: LD_STRING playComputer()
30490: PPUSH
30491: CALL_OW 559
// for i in tmp do
30495: LD_ADDR_VAR 0 1
30499: PUSH
30500: LD_VAR 0 2
30504: PUSH
30505: FOR_IN
30506: IFFALSE 30547
// for j := 1 to 4 do
30508: LD_ADDR_VAR 0 3
30512: PUSH
30513: DOUBLE
30514: LD_INT 1
30516: DEC
30517: ST_TO_ADDR
30518: LD_INT 4
30520: PUSH
30521: FOR_TO
30522: IFFALSE 30543
// SetSkill ( i , j , 10 ) ;
30524: LD_VAR 0 1
30528: PPUSH
30529: LD_VAR 0 3
30533: PPUSH
30534: LD_INT 10
30536: PPUSH
30537: CALL_OW 237
30541: GO 30521
30543: POP
30544: POP
30545: GO 30505
30547: POP
30548: POP
// end ;
30549: PPOPN 3
30551: END
// every 0 0$1 trigger s30 do var i , tmp ;
30552: LD_EXP 117
30556: IFFALSE 30625
30558: GO 30560
30560: DISABLE
30561: LD_INT 0
30563: PPUSH
30564: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30565: LD_ADDR_VAR 0 2
30569: PUSH
30570: LD_INT 22
30572: PUSH
30573: LD_OWVAR 2
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PPUSH
30582: CALL_OW 69
30586: ST_TO_ADDR
// if not tmp then
30587: LD_VAR 0 2
30591: NOT
30592: IFFALSE 30596
// exit ;
30594: GO 30625
// for i in tmp do
30596: LD_ADDR_VAR 0 1
30600: PUSH
30601: LD_VAR 0 2
30605: PUSH
30606: FOR_IN
30607: IFFALSE 30623
// SetLives ( i , 300 ) ;
30609: LD_VAR 0 1
30613: PPUSH
30614: LD_INT 300
30616: PPUSH
30617: CALL_OW 234
30621: GO 30606
30623: POP
30624: POP
// end ;
30625: PPOPN 2
30627: END
// every 0 0$1 trigger s60 do var i , tmp ;
30628: LD_EXP 118
30632: IFFALSE 30701
30634: GO 30636
30636: DISABLE
30637: LD_INT 0
30639: PPUSH
30640: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30641: LD_ADDR_VAR 0 2
30645: PUSH
30646: LD_INT 22
30648: PUSH
30649: LD_OWVAR 2
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PPUSH
30658: CALL_OW 69
30662: ST_TO_ADDR
// if not tmp then
30663: LD_VAR 0 2
30667: NOT
30668: IFFALSE 30672
// exit ;
30670: GO 30701
// for i in tmp do
30672: LD_ADDR_VAR 0 1
30676: PUSH
30677: LD_VAR 0 2
30681: PUSH
30682: FOR_IN
30683: IFFALSE 30699
// SetLives ( i , 600 ) ;
30685: LD_VAR 0 1
30689: PPUSH
30690: LD_INT 600
30692: PPUSH
30693: CALL_OW 234
30697: GO 30682
30699: POP
30700: POP
// end ;
30701: PPOPN 2
30703: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30704: LD_INT 0
30706: PPUSH
// case cmd of 301 :
30707: LD_VAR 0 1
30711: PUSH
30712: LD_INT 301
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30752
30720: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30721: LD_VAR 0 6
30725: PPUSH
30726: LD_VAR 0 7
30730: PPUSH
30731: LD_VAR 0 8
30735: PPUSH
30736: LD_VAR 0 4
30740: PPUSH
30741: LD_VAR 0 5
30745: PPUSH
30746: CALL 31953 0 5
30750: GO 30873
30752: LD_INT 302
30754: DOUBLE
30755: EQUAL
30756: IFTRUE 30760
30758: GO 30797
30760: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30761: LD_VAR 0 6
30765: PPUSH
30766: LD_VAR 0 7
30770: PPUSH
30771: LD_VAR 0 8
30775: PPUSH
30776: LD_VAR 0 9
30780: PPUSH
30781: LD_VAR 0 4
30785: PPUSH
30786: LD_VAR 0 5
30790: PPUSH
30791: CALL 32044 0 6
30795: GO 30873
30797: LD_INT 303
30799: DOUBLE
30800: EQUAL
30801: IFTRUE 30805
30803: GO 30842
30805: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30806: LD_VAR 0 6
30810: PPUSH
30811: LD_VAR 0 7
30815: PPUSH
30816: LD_VAR 0 8
30820: PPUSH
30821: LD_VAR 0 9
30825: PPUSH
30826: LD_VAR 0 4
30830: PPUSH
30831: LD_VAR 0 5
30835: PPUSH
30836: CALL 30878 0 6
30840: GO 30873
30842: LD_INT 304
30844: DOUBLE
30845: EQUAL
30846: IFTRUE 30850
30848: GO 30872
30850: POP
// hHackTeleport ( unit , x , y ) ; end ;
30851: LD_VAR 0 2
30855: PPUSH
30856: LD_VAR 0 4
30860: PPUSH
30861: LD_VAR 0 5
30865: PPUSH
30866: CALL 32637 0 3
30870: GO 30873
30872: POP
// end ;
30873: LD_VAR 0 12
30877: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30878: LD_INT 0
30880: PPUSH
30881: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30882: LD_VAR 0 1
30886: PUSH
30887: LD_INT 1
30889: LESS
30890: PUSH
30891: LD_VAR 0 1
30895: PUSH
30896: LD_INT 3
30898: GREATER
30899: OR
30900: PUSH
30901: LD_VAR 0 5
30905: PPUSH
30906: LD_VAR 0 6
30910: PPUSH
30911: CALL_OW 428
30915: OR
30916: IFFALSE 30920
// exit ;
30918: GO 31640
// uc_side := your_side ;
30920: LD_ADDR_OWVAR 20
30924: PUSH
30925: LD_OWVAR 2
30929: ST_TO_ADDR
// uc_nation := nation ;
30930: LD_ADDR_OWVAR 21
30934: PUSH
30935: LD_VAR 0 1
30939: ST_TO_ADDR
// bc_level = 1 ;
30940: LD_ADDR_OWVAR 43
30944: PUSH
30945: LD_INT 1
30947: ST_TO_ADDR
// case btype of 1 :
30948: LD_VAR 0 2
30952: PUSH
30953: LD_INT 1
30955: DOUBLE
30956: EQUAL
30957: IFTRUE 30961
30959: GO 30972
30961: POP
// bc_type := b_depot ; 2 :
30962: LD_ADDR_OWVAR 42
30966: PUSH
30967: LD_INT 0
30969: ST_TO_ADDR
30970: GO 31584
30972: LD_INT 2
30974: DOUBLE
30975: EQUAL
30976: IFTRUE 30980
30978: GO 30991
30980: POP
// bc_type := b_warehouse ; 3 :
30981: LD_ADDR_OWVAR 42
30985: PUSH
30986: LD_INT 1
30988: ST_TO_ADDR
30989: GO 31584
30991: LD_INT 3
30993: DOUBLE
30994: EQUAL
30995: IFTRUE 30999
30997: GO 31010
30999: POP
// bc_type := b_lab ; 4 .. 9 :
31000: LD_ADDR_OWVAR 42
31004: PUSH
31005: LD_INT 6
31007: ST_TO_ADDR
31008: GO 31584
31010: LD_INT 4
31012: DOUBLE
31013: GREATEREQUAL
31014: IFFALSE 31022
31016: LD_INT 9
31018: DOUBLE
31019: LESSEQUAL
31020: IFTRUE 31024
31022: GO 31076
31024: POP
// begin bc_type := b_lab_half ;
31025: LD_ADDR_OWVAR 42
31029: PUSH
31030: LD_INT 7
31032: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31033: LD_ADDR_OWVAR 44
31037: PUSH
31038: LD_INT 10
31040: PUSH
31041: LD_INT 11
31043: PUSH
31044: LD_INT 12
31046: PUSH
31047: LD_INT 15
31049: PUSH
31050: LD_INT 14
31052: PUSH
31053: LD_INT 13
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: PUSH
31064: LD_VAR 0 2
31068: PUSH
31069: LD_INT 3
31071: MINUS
31072: ARRAY
31073: ST_TO_ADDR
// end ; 10 .. 13 :
31074: GO 31584
31076: LD_INT 10
31078: DOUBLE
31079: GREATEREQUAL
31080: IFFALSE 31088
31082: LD_INT 13
31084: DOUBLE
31085: LESSEQUAL
31086: IFTRUE 31090
31088: GO 31167
31090: POP
// begin bc_type := b_lab_full ;
31091: LD_ADDR_OWVAR 42
31095: PUSH
31096: LD_INT 8
31098: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31099: LD_ADDR_OWVAR 44
31103: PUSH
31104: LD_INT 10
31106: PUSH
31107: LD_INT 12
31109: PUSH
31110: LD_INT 14
31112: PUSH
31113: LD_INT 13
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: PUSH
31122: LD_VAR 0 2
31126: PUSH
31127: LD_INT 9
31129: MINUS
31130: ARRAY
31131: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31132: LD_ADDR_OWVAR 45
31136: PUSH
31137: LD_INT 11
31139: PUSH
31140: LD_INT 15
31142: PUSH
31143: LD_INT 12
31145: PUSH
31146: LD_INT 15
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: PUSH
31155: LD_VAR 0 2
31159: PUSH
31160: LD_INT 9
31162: MINUS
31163: ARRAY
31164: ST_TO_ADDR
// end ; 14 :
31165: GO 31584
31167: LD_INT 14
31169: DOUBLE
31170: EQUAL
31171: IFTRUE 31175
31173: GO 31186
31175: POP
// bc_type := b_workshop ; 15 :
31176: LD_ADDR_OWVAR 42
31180: PUSH
31181: LD_INT 2
31183: ST_TO_ADDR
31184: GO 31584
31186: LD_INT 15
31188: DOUBLE
31189: EQUAL
31190: IFTRUE 31194
31192: GO 31205
31194: POP
// bc_type := b_factory ; 16 :
31195: LD_ADDR_OWVAR 42
31199: PUSH
31200: LD_INT 3
31202: ST_TO_ADDR
31203: GO 31584
31205: LD_INT 16
31207: DOUBLE
31208: EQUAL
31209: IFTRUE 31213
31211: GO 31224
31213: POP
// bc_type := b_ext_gun ; 17 :
31214: LD_ADDR_OWVAR 42
31218: PUSH
31219: LD_INT 17
31221: ST_TO_ADDR
31222: GO 31584
31224: LD_INT 17
31226: DOUBLE
31227: EQUAL
31228: IFTRUE 31232
31230: GO 31260
31232: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31233: LD_ADDR_OWVAR 42
31237: PUSH
31238: LD_INT 19
31240: PUSH
31241: LD_INT 23
31243: PUSH
31244: LD_INT 19
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: LIST
31251: PUSH
31252: LD_VAR 0 1
31256: ARRAY
31257: ST_TO_ADDR
31258: GO 31584
31260: LD_INT 18
31262: DOUBLE
31263: EQUAL
31264: IFTRUE 31268
31266: GO 31279
31268: POP
// bc_type := b_ext_radar ; 19 :
31269: LD_ADDR_OWVAR 42
31273: PUSH
31274: LD_INT 20
31276: ST_TO_ADDR
31277: GO 31584
31279: LD_INT 19
31281: DOUBLE
31282: EQUAL
31283: IFTRUE 31287
31285: GO 31298
31287: POP
// bc_type := b_ext_radio ; 20 :
31288: LD_ADDR_OWVAR 42
31292: PUSH
31293: LD_INT 22
31295: ST_TO_ADDR
31296: GO 31584
31298: LD_INT 20
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31317
31306: POP
// bc_type := b_ext_siberium ; 21 :
31307: LD_ADDR_OWVAR 42
31311: PUSH
31312: LD_INT 21
31314: ST_TO_ADDR
31315: GO 31584
31317: LD_INT 21
31319: DOUBLE
31320: EQUAL
31321: IFTRUE 31325
31323: GO 31336
31325: POP
// bc_type := b_ext_computer ; 22 :
31326: LD_ADDR_OWVAR 42
31330: PUSH
31331: LD_INT 24
31333: ST_TO_ADDR
31334: GO 31584
31336: LD_INT 22
31338: DOUBLE
31339: EQUAL
31340: IFTRUE 31344
31342: GO 31355
31344: POP
// bc_type := b_ext_track ; 23 :
31345: LD_ADDR_OWVAR 42
31349: PUSH
31350: LD_INT 16
31352: ST_TO_ADDR
31353: GO 31584
31355: LD_INT 23
31357: DOUBLE
31358: EQUAL
31359: IFTRUE 31363
31361: GO 31374
31363: POP
// bc_type := b_ext_laser ; 24 :
31364: LD_ADDR_OWVAR 42
31368: PUSH
31369: LD_INT 25
31371: ST_TO_ADDR
31372: GO 31584
31374: LD_INT 24
31376: DOUBLE
31377: EQUAL
31378: IFTRUE 31382
31380: GO 31393
31382: POP
// bc_type := b_control_tower ; 25 :
31383: LD_ADDR_OWVAR 42
31387: PUSH
31388: LD_INT 36
31390: ST_TO_ADDR
31391: GO 31584
31393: LD_INT 25
31395: DOUBLE
31396: EQUAL
31397: IFTRUE 31401
31399: GO 31412
31401: POP
// bc_type := b_breastwork ; 26 :
31402: LD_ADDR_OWVAR 42
31406: PUSH
31407: LD_INT 31
31409: ST_TO_ADDR
31410: GO 31584
31412: LD_INT 26
31414: DOUBLE
31415: EQUAL
31416: IFTRUE 31420
31418: GO 31431
31420: POP
// bc_type := b_bunker ; 27 :
31421: LD_ADDR_OWVAR 42
31425: PUSH
31426: LD_INT 32
31428: ST_TO_ADDR
31429: GO 31584
31431: LD_INT 27
31433: DOUBLE
31434: EQUAL
31435: IFTRUE 31439
31437: GO 31450
31439: POP
// bc_type := b_turret ; 28 :
31440: LD_ADDR_OWVAR 42
31444: PUSH
31445: LD_INT 33
31447: ST_TO_ADDR
31448: GO 31584
31450: LD_INT 28
31452: DOUBLE
31453: EQUAL
31454: IFTRUE 31458
31456: GO 31469
31458: POP
// bc_type := b_armoury ; 29 :
31459: LD_ADDR_OWVAR 42
31463: PUSH
31464: LD_INT 4
31466: ST_TO_ADDR
31467: GO 31584
31469: LD_INT 29
31471: DOUBLE
31472: EQUAL
31473: IFTRUE 31477
31475: GO 31488
31477: POP
// bc_type := b_barracks ; 30 :
31478: LD_ADDR_OWVAR 42
31482: PUSH
31483: LD_INT 5
31485: ST_TO_ADDR
31486: GO 31584
31488: LD_INT 30
31490: DOUBLE
31491: EQUAL
31492: IFTRUE 31496
31494: GO 31507
31496: POP
// bc_type := b_solar_power ; 31 :
31497: LD_ADDR_OWVAR 42
31501: PUSH
31502: LD_INT 27
31504: ST_TO_ADDR
31505: GO 31584
31507: LD_INT 31
31509: DOUBLE
31510: EQUAL
31511: IFTRUE 31515
31513: GO 31526
31515: POP
// bc_type := b_oil_power ; 32 :
31516: LD_ADDR_OWVAR 42
31520: PUSH
31521: LD_INT 26
31523: ST_TO_ADDR
31524: GO 31584
31526: LD_INT 32
31528: DOUBLE
31529: EQUAL
31530: IFTRUE 31534
31532: GO 31545
31534: POP
// bc_type := b_siberite_power ; 33 :
31535: LD_ADDR_OWVAR 42
31539: PUSH
31540: LD_INT 28
31542: ST_TO_ADDR
31543: GO 31584
31545: LD_INT 33
31547: DOUBLE
31548: EQUAL
31549: IFTRUE 31553
31551: GO 31564
31553: POP
// bc_type := b_oil_mine ; 34 :
31554: LD_ADDR_OWVAR 42
31558: PUSH
31559: LD_INT 29
31561: ST_TO_ADDR
31562: GO 31584
31564: LD_INT 34
31566: DOUBLE
31567: EQUAL
31568: IFTRUE 31572
31570: GO 31583
31572: POP
// bc_type := b_siberite_mine ; end ;
31573: LD_ADDR_OWVAR 42
31577: PUSH
31578: LD_INT 30
31580: ST_TO_ADDR
31581: GO 31584
31583: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31584: LD_ADDR_VAR 0 8
31588: PUSH
31589: LD_VAR 0 5
31593: PPUSH
31594: LD_VAR 0 6
31598: PPUSH
31599: LD_VAR 0 3
31603: PPUSH
31604: CALL_OW 47
31608: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31609: LD_OWVAR 42
31613: PUSH
31614: LD_INT 32
31616: PUSH
31617: LD_INT 33
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: IN
31624: IFFALSE 31640
// PlaceWeaponTurret ( b , weapon ) ;
31626: LD_VAR 0 8
31630: PPUSH
31631: LD_VAR 0 4
31635: PPUSH
31636: CALL_OW 431
// end ;
31640: LD_VAR 0 7
31644: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31645: LD_INT 0
31647: PPUSH
31648: PPUSH
31649: PPUSH
31650: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31651: LD_ADDR_VAR 0 4
31655: PUSH
31656: LD_INT 22
31658: PUSH
31659: LD_OWVAR 2
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 2
31670: PUSH
31671: LD_INT 30
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 30
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PPUSH
31700: CALL_OW 69
31704: ST_TO_ADDR
// if not tmp then
31705: LD_VAR 0 4
31709: NOT
31710: IFFALSE 31714
// exit ;
31712: GO 31773
// for i in tmp do
31714: LD_ADDR_VAR 0 2
31718: PUSH
31719: LD_VAR 0 4
31723: PUSH
31724: FOR_IN
31725: IFFALSE 31771
// for j = 1 to 3 do
31727: LD_ADDR_VAR 0 3
31731: PUSH
31732: DOUBLE
31733: LD_INT 1
31735: DEC
31736: ST_TO_ADDR
31737: LD_INT 3
31739: PUSH
31740: FOR_TO
31741: IFFALSE 31767
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31743: LD_VAR 0 2
31747: PPUSH
31748: CALL_OW 274
31752: PPUSH
31753: LD_VAR 0 3
31757: PPUSH
31758: LD_INT 99999
31760: PPUSH
31761: CALL_OW 277
31765: GO 31740
31767: POP
31768: POP
31769: GO 31724
31771: POP
31772: POP
// end ;
31773: LD_VAR 0 1
31777: RET
// export function hHackSetLevel10 ; var i , j ; begin
31778: LD_INT 0
31780: PPUSH
31781: PPUSH
31782: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31783: LD_ADDR_VAR 0 2
31787: PUSH
31788: LD_INT 21
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PPUSH
31798: CALL_OW 69
31802: PUSH
31803: FOR_IN
31804: IFFALSE 31856
// if IsSelected ( i ) then
31806: LD_VAR 0 2
31810: PPUSH
31811: CALL_OW 306
31815: IFFALSE 31854
// begin for j := 1 to 4 do
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: DOUBLE
31823: LD_INT 1
31825: DEC
31826: ST_TO_ADDR
31827: LD_INT 4
31829: PUSH
31830: FOR_TO
31831: IFFALSE 31852
// SetSkill ( i , j , 10 ) ;
31833: LD_VAR 0 2
31837: PPUSH
31838: LD_VAR 0 3
31842: PPUSH
31843: LD_INT 10
31845: PPUSH
31846: CALL_OW 237
31850: GO 31830
31852: POP
31853: POP
// end ;
31854: GO 31803
31856: POP
31857: POP
// end ;
31858: LD_VAR 0 1
31862: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31863: LD_INT 0
31865: PPUSH
31866: PPUSH
31867: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31868: LD_ADDR_VAR 0 2
31872: PUSH
31873: LD_INT 22
31875: PUSH
31876: LD_OWVAR 2
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 21
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PPUSH
31899: CALL_OW 69
31903: PUSH
31904: FOR_IN
31905: IFFALSE 31946
// begin for j := 1 to 4 do
31907: LD_ADDR_VAR 0 3
31911: PUSH
31912: DOUBLE
31913: LD_INT 1
31915: DEC
31916: ST_TO_ADDR
31917: LD_INT 4
31919: PUSH
31920: FOR_TO
31921: IFFALSE 31942
// SetSkill ( i , j , 10 ) ;
31923: LD_VAR 0 2
31927: PPUSH
31928: LD_VAR 0 3
31932: PPUSH
31933: LD_INT 10
31935: PPUSH
31936: CALL_OW 237
31940: GO 31920
31942: POP
31943: POP
// end ;
31944: GO 31904
31946: POP
31947: POP
// end ;
31948: LD_VAR 0 1
31952: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31953: LD_INT 0
31955: PPUSH
// uc_side := your_side ;
31956: LD_ADDR_OWVAR 20
31960: PUSH
31961: LD_OWVAR 2
31965: ST_TO_ADDR
// uc_nation := nation ;
31966: LD_ADDR_OWVAR 21
31970: PUSH
31971: LD_VAR 0 1
31975: ST_TO_ADDR
// InitHc ;
31976: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31980: LD_INT 0
31982: PPUSH
31983: LD_VAR 0 2
31987: PPUSH
31988: LD_VAR 0 3
31992: PPUSH
31993: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31997: LD_VAR 0 4
32001: PPUSH
32002: LD_VAR 0 5
32006: PPUSH
32007: CALL_OW 428
32011: PUSH
32012: LD_INT 0
32014: EQUAL
32015: IFFALSE 32039
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32017: CALL_OW 44
32021: PPUSH
32022: LD_VAR 0 4
32026: PPUSH
32027: LD_VAR 0 5
32031: PPUSH
32032: LD_INT 1
32034: PPUSH
32035: CALL_OW 48
// end ;
32039: LD_VAR 0 6
32043: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32044: LD_INT 0
32046: PPUSH
32047: PPUSH
// uc_side := your_side ;
32048: LD_ADDR_OWVAR 20
32052: PUSH
32053: LD_OWVAR 2
32057: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32058: LD_VAR 0 1
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: LD_INT 2
32068: PUSH
32069: LD_INT 3
32071: PUSH
32072: LD_INT 4
32074: PUSH
32075: LD_INT 5
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: IN
32085: IFFALSE 32097
// uc_nation := nation_american else
32087: LD_ADDR_OWVAR 21
32091: PUSH
32092: LD_INT 1
32094: ST_TO_ADDR
32095: GO 32140
// if chassis in [ 11 , 12 , 13 , 14 ] then
32097: LD_VAR 0 1
32101: PUSH
32102: LD_INT 11
32104: PUSH
32105: LD_INT 12
32107: PUSH
32108: LD_INT 13
32110: PUSH
32111: LD_INT 14
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: IN
32120: IFFALSE 32132
// uc_nation := nation_arabian else
32122: LD_ADDR_OWVAR 21
32126: PUSH
32127: LD_INT 2
32129: ST_TO_ADDR
32130: GO 32140
// uc_nation := nation_russian ;
32132: LD_ADDR_OWVAR 21
32136: PUSH
32137: LD_INT 3
32139: ST_TO_ADDR
// vc_chassis := chassis ;
32140: LD_ADDR_OWVAR 37
32144: PUSH
32145: LD_VAR 0 1
32149: ST_TO_ADDR
// vc_engine := engine ;
32150: LD_ADDR_OWVAR 39
32154: PUSH
32155: LD_VAR 0 2
32159: ST_TO_ADDR
// vc_control := control ;
32160: LD_ADDR_OWVAR 38
32164: PUSH
32165: LD_VAR 0 3
32169: ST_TO_ADDR
// vc_weapon := weapon ;
32170: LD_ADDR_OWVAR 40
32174: PUSH
32175: LD_VAR 0 4
32179: ST_TO_ADDR
// un := CreateVehicle ;
32180: LD_ADDR_VAR 0 8
32184: PUSH
32185: CALL_OW 45
32189: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32190: LD_VAR 0 8
32194: PPUSH
32195: LD_INT 0
32197: PPUSH
32198: LD_INT 5
32200: PPUSH
32201: CALL_OW 12
32205: PPUSH
32206: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32210: LD_VAR 0 8
32214: PPUSH
32215: LD_VAR 0 5
32219: PPUSH
32220: LD_VAR 0 6
32224: PPUSH
32225: LD_INT 1
32227: PPUSH
32228: CALL_OW 48
// end ;
32232: LD_VAR 0 7
32236: RET
// export hInvincible ; every 1 do
32237: GO 32239
32239: DISABLE
// hInvincible := [ ] ;
32240: LD_ADDR_EXP 119
32244: PUSH
32245: EMPTY
32246: ST_TO_ADDR
32247: END
// every 10 do var i ;
32248: GO 32250
32250: DISABLE
32251: LD_INT 0
32253: PPUSH
// begin enable ;
32254: ENABLE
// if not hInvincible then
32255: LD_EXP 119
32259: NOT
32260: IFFALSE 32264
// exit ;
32262: GO 32308
// for i in hInvincible do
32264: LD_ADDR_VAR 0 1
32268: PUSH
32269: LD_EXP 119
32273: PUSH
32274: FOR_IN
32275: IFFALSE 32306
// if GetLives ( i ) < 1000 then
32277: LD_VAR 0 1
32281: PPUSH
32282: CALL_OW 256
32286: PUSH
32287: LD_INT 1000
32289: LESS
32290: IFFALSE 32304
// SetLives ( i , 1000 ) ;
32292: LD_VAR 0 1
32296: PPUSH
32297: LD_INT 1000
32299: PPUSH
32300: CALL_OW 234
32304: GO 32274
32306: POP
32307: POP
// end ;
32308: PPOPN 1
32310: END
// export function hHackInvincible ; var i ; begin
32311: LD_INT 0
32313: PPUSH
32314: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32315: LD_ADDR_VAR 0 2
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: LD_INT 21
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 21
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: LIST
32347: PPUSH
32348: CALL_OW 69
32352: PUSH
32353: FOR_IN
32354: IFFALSE 32415
// if IsSelected ( i ) then
32356: LD_VAR 0 2
32360: PPUSH
32361: CALL_OW 306
32365: IFFALSE 32413
// begin if i in hInvincible then
32367: LD_VAR 0 2
32371: PUSH
32372: LD_EXP 119
32376: IN
32377: IFFALSE 32397
// hInvincible := hInvincible diff i else
32379: LD_ADDR_EXP 119
32383: PUSH
32384: LD_EXP 119
32388: PUSH
32389: LD_VAR 0 2
32393: DIFF
32394: ST_TO_ADDR
32395: GO 32413
// hInvincible := hInvincible union i ;
32397: LD_ADDR_EXP 119
32401: PUSH
32402: LD_EXP 119
32406: PUSH
32407: LD_VAR 0 2
32411: UNION
32412: ST_TO_ADDR
// end ;
32413: GO 32353
32415: POP
32416: POP
// end ;
32417: LD_VAR 0 1
32421: RET
// export function hHackInvisible ; var i , j ; begin
32422: LD_INT 0
32424: PPUSH
32425: PPUSH
32426: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32427: LD_ADDR_VAR 0 2
32431: PUSH
32432: LD_INT 21
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PPUSH
32442: CALL_OW 69
32446: PUSH
32447: FOR_IN
32448: IFFALSE 32472
// if IsSelected ( i ) then
32450: LD_VAR 0 2
32454: PPUSH
32455: CALL_OW 306
32459: IFFALSE 32470
// ComForceInvisible ( i ) ;
32461: LD_VAR 0 2
32465: PPUSH
32466: CALL_OW 496
32470: GO 32447
32472: POP
32473: POP
// end ;
32474: LD_VAR 0 1
32478: RET
// export function hHackChangeYourSide ; begin
32479: LD_INT 0
32481: PPUSH
// if your_side = 8 then
32482: LD_OWVAR 2
32486: PUSH
32487: LD_INT 8
32489: EQUAL
32490: IFFALSE 32502
// your_side := 0 else
32492: LD_ADDR_OWVAR 2
32496: PUSH
32497: LD_INT 0
32499: ST_TO_ADDR
32500: GO 32516
// your_side := your_side + 1 ;
32502: LD_ADDR_OWVAR 2
32506: PUSH
32507: LD_OWVAR 2
32511: PUSH
32512: LD_INT 1
32514: PLUS
32515: ST_TO_ADDR
// end ;
32516: LD_VAR 0 1
32520: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32521: LD_INT 0
32523: PPUSH
32524: PPUSH
32525: PPUSH
// for i in all_units do
32526: LD_ADDR_VAR 0 2
32530: PUSH
32531: LD_OWVAR 3
32535: PUSH
32536: FOR_IN
32537: IFFALSE 32615
// if IsSelected ( i ) then
32539: LD_VAR 0 2
32543: PPUSH
32544: CALL_OW 306
32548: IFFALSE 32613
// begin j := GetSide ( i ) ;
32550: LD_ADDR_VAR 0 3
32554: PUSH
32555: LD_VAR 0 2
32559: PPUSH
32560: CALL_OW 255
32564: ST_TO_ADDR
// if j = 8 then
32565: LD_VAR 0 3
32569: PUSH
32570: LD_INT 8
32572: EQUAL
32573: IFFALSE 32585
// j := 0 else
32575: LD_ADDR_VAR 0 3
32579: PUSH
32580: LD_INT 0
32582: ST_TO_ADDR
32583: GO 32599
// j := j + 1 ;
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_VAR 0 3
32594: PUSH
32595: LD_INT 1
32597: PLUS
32598: ST_TO_ADDR
// SetSide ( i , j ) ;
32599: LD_VAR 0 2
32603: PPUSH
32604: LD_VAR 0 3
32608: PPUSH
32609: CALL_OW 235
// end ;
32613: GO 32536
32615: POP
32616: POP
// end ;
32617: LD_VAR 0 1
32621: RET
// export function hHackFog ; begin
32622: LD_INT 0
32624: PPUSH
// FogOff ( true ) ;
32625: LD_INT 1
32627: PPUSH
32628: CALL_OW 344
// end ;
32632: LD_VAR 0 1
32636: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32637: LD_INT 0
32639: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32640: LD_VAR 0 1
32644: PPUSH
32645: LD_VAR 0 2
32649: PPUSH
32650: LD_VAR 0 3
32654: PPUSH
32655: LD_INT 1
32657: PPUSH
32658: LD_INT 1
32660: PPUSH
32661: CALL_OW 483
// CenterOnXY ( x , y ) ;
32665: LD_VAR 0 2
32669: PPUSH
32670: LD_VAR 0 3
32674: PPUSH
32675: CALL_OW 84
// end ; end_of_file
32679: LD_VAR 0 4
32683: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32684: LD_INT 0
32686: PPUSH
32687: PPUSH
32688: PPUSH
32689: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32690: LD_VAR 0 1
32694: PPUSH
32695: CALL_OW 264
32699: PUSH
32700: LD_EXP 47
32704: EQUAL
32705: IFFALSE 32777
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32707: LD_INT 68
32709: PPUSH
32710: LD_VAR 0 1
32714: PPUSH
32715: CALL_OW 255
32719: PPUSH
32720: CALL_OW 321
32724: PUSH
32725: LD_INT 2
32727: EQUAL
32728: IFFALSE 32740
// eff := 70 else
32730: LD_ADDR_VAR 0 4
32734: PUSH
32735: LD_INT 70
32737: ST_TO_ADDR
32738: GO 32748
// eff := 30 ;
32740: LD_ADDR_VAR 0 4
32744: PUSH
32745: LD_INT 30
32747: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32748: LD_VAR 0 1
32752: PPUSH
32753: CALL_OW 250
32757: PPUSH
32758: LD_VAR 0 1
32762: PPUSH
32763: CALL_OW 251
32767: PPUSH
32768: LD_VAR 0 4
32772: PPUSH
32773: CALL_OW 495
// end ; end ;
32777: LD_VAR 0 2
32781: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32782: LD_INT 0
32784: PPUSH
// end ;
32785: LD_VAR 0 4
32789: RET
// export function SOS_Command ( cmd ) ; begin
32790: LD_INT 0
32792: PPUSH
// end ;
32793: LD_VAR 0 2
32797: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32798: LD_INT 0
32800: PPUSH
// end ;
32801: LD_VAR 0 6
32805: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32806: LD_INT 0
32808: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32809: LD_VAR 0 1
32813: PUSH
32814: LD_INT 250
32816: EQUAL
32817: PUSH
32818: LD_VAR 0 2
32822: PPUSH
32823: CALL_OW 264
32827: PUSH
32828: LD_EXP 50
32832: EQUAL
32833: AND
32834: IFFALSE 32855
// MinerPlaceMine ( unit , x , y ) ;
32836: LD_VAR 0 2
32840: PPUSH
32841: LD_VAR 0 4
32845: PPUSH
32846: LD_VAR 0 5
32850: PPUSH
32851: CALL 35204 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32855: LD_VAR 0 1
32859: PUSH
32860: LD_INT 251
32862: EQUAL
32863: PUSH
32864: LD_VAR 0 2
32868: PPUSH
32869: CALL_OW 264
32873: PUSH
32874: LD_EXP 50
32878: EQUAL
32879: AND
32880: IFFALSE 32901
// MinerDetonateMine ( unit , x , y ) ;
32882: LD_VAR 0 2
32886: PPUSH
32887: LD_VAR 0 4
32891: PPUSH
32892: LD_VAR 0 5
32896: PPUSH
32897: CALL 35481 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32901: LD_VAR 0 1
32905: PUSH
32906: LD_INT 252
32908: EQUAL
32909: PUSH
32910: LD_VAR 0 2
32914: PPUSH
32915: CALL_OW 264
32919: PUSH
32920: LD_EXP 50
32924: EQUAL
32925: AND
32926: IFFALSE 32947
// MinerCreateMinefield ( unit , x , y ) ;
32928: LD_VAR 0 2
32932: PPUSH
32933: LD_VAR 0 4
32937: PPUSH
32938: LD_VAR 0 5
32942: PPUSH
32943: CALL 35898 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32947: LD_VAR 0 1
32951: PUSH
32952: LD_INT 253
32954: EQUAL
32955: PUSH
32956: LD_VAR 0 2
32960: PPUSH
32961: CALL_OW 257
32965: PUSH
32966: LD_INT 5
32968: EQUAL
32969: AND
32970: IFFALSE 32991
// ComBinocular ( unit , x , y ) ;
32972: LD_VAR 0 2
32976: PPUSH
32977: LD_VAR 0 4
32981: PPUSH
32982: LD_VAR 0 5
32986: PPUSH
32987: CALL 36269 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32991: LD_VAR 0 1
32995: PUSH
32996: LD_INT 254
32998: EQUAL
32999: PUSH
33000: LD_VAR 0 2
33004: PPUSH
33005: CALL_OW 264
33009: PUSH
33010: LD_EXP 45
33014: EQUAL
33015: AND
33016: PUSH
33017: LD_VAR 0 3
33021: PPUSH
33022: CALL_OW 263
33026: PUSH
33027: LD_INT 3
33029: EQUAL
33030: AND
33031: IFFALSE 33047
// HackDestroyVehicle ( unit , selectedUnit ) ;
33033: LD_VAR 0 2
33037: PPUSH
33038: LD_VAR 0 3
33042: PPUSH
33043: CALL 34564 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33047: LD_VAR 0 1
33051: PUSH
33052: LD_INT 255
33054: EQUAL
33055: PUSH
33056: LD_VAR 0 2
33060: PPUSH
33061: CALL_OW 264
33065: PUSH
33066: LD_INT 14
33068: PUSH
33069: LD_INT 53
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: IN
33076: AND
33077: PUSH
33078: LD_VAR 0 4
33082: PPUSH
33083: LD_VAR 0 5
33087: PPUSH
33088: CALL_OW 488
33092: AND
33093: IFFALSE 33117
// CutTreeXYR ( unit , x , y , 12 ) ;
33095: LD_VAR 0 2
33099: PPUSH
33100: LD_VAR 0 4
33104: PPUSH
33105: LD_VAR 0 5
33109: PPUSH
33110: LD_INT 12
33112: PPUSH
33113: CALL 33130 0 4
// end ;
33117: LD_VAR 0 6
33121: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33122: LD_INT 0
33124: PPUSH
// end ;
33125: LD_VAR 0 4
33129: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33130: LD_INT 0
33132: PPUSH
33133: PPUSH
33134: PPUSH
33135: PPUSH
33136: PPUSH
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33141: LD_VAR 0 1
33145: NOT
33146: PUSH
33147: LD_VAR 0 2
33151: PPUSH
33152: LD_VAR 0 3
33156: PPUSH
33157: CALL_OW 488
33161: NOT
33162: OR
33163: PUSH
33164: LD_VAR 0 4
33168: NOT
33169: OR
33170: IFFALSE 33174
// exit ;
33172: GO 33514
// list := [ ] ;
33174: LD_ADDR_VAR 0 13
33178: PUSH
33179: EMPTY
33180: ST_TO_ADDR
// if x - r < 0 then
33181: LD_VAR 0 2
33185: PUSH
33186: LD_VAR 0 4
33190: MINUS
33191: PUSH
33192: LD_INT 0
33194: LESS
33195: IFFALSE 33207
// min_x := 0 else
33197: LD_ADDR_VAR 0 7
33201: PUSH
33202: LD_INT 0
33204: ST_TO_ADDR
33205: GO 33223
// min_x := x - r ;
33207: LD_ADDR_VAR 0 7
33211: PUSH
33212: LD_VAR 0 2
33216: PUSH
33217: LD_VAR 0 4
33221: MINUS
33222: ST_TO_ADDR
// if y - r < 0 then
33223: LD_VAR 0 3
33227: PUSH
33228: LD_VAR 0 4
33232: MINUS
33233: PUSH
33234: LD_INT 0
33236: LESS
33237: IFFALSE 33249
// min_y := 0 else
33239: LD_ADDR_VAR 0 8
33243: PUSH
33244: LD_INT 0
33246: ST_TO_ADDR
33247: GO 33265
// min_y := y - r ;
33249: LD_ADDR_VAR 0 8
33253: PUSH
33254: LD_VAR 0 3
33258: PUSH
33259: LD_VAR 0 4
33263: MINUS
33264: ST_TO_ADDR
// max_x := x + r ;
33265: LD_ADDR_VAR 0 9
33269: PUSH
33270: LD_VAR 0 2
33274: PUSH
33275: LD_VAR 0 4
33279: PLUS
33280: ST_TO_ADDR
// max_y := y + r ;
33281: LD_ADDR_VAR 0 10
33285: PUSH
33286: LD_VAR 0 3
33290: PUSH
33291: LD_VAR 0 4
33295: PLUS
33296: ST_TO_ADDR
// for _x = min_x to max_x do
33297: LD_ADDR_VAR 0 11
33301: PUSH
33302: DOUBLE
33303: LD_VAR 0 7
33307: DEC
33308: ST_TO_ADDR
33309: LD_VAR 0 9
33313: PUSH
33314: FOR_TO
33315: IFFALSE 33432
// for _y = min_y to max_y do
33317: LD_ADDR_VAR 0 12
33321: PUSH
33322: DOUBLE
33323: LD_VAR 0 8
33327: DEC
33328: ST_TO_ADDR
33329: LD_VAR 0 10
33333: PUSH
33334: FOR_TO
33335: IFFALSE 33428
// begin if not ValidHex ( _x , _y ) then
33337: LD_VAR 0 11
33341: PPUSH
33342: LD_VAR 0 12
33346: PPUSH
33347: CALL_OW 488
33351: NOT
33352: IFFALSE 33356
// continue ;
33354: GO 33334
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33356: LD_VAR 0 11
33360: PPUSH
33361: LD_VAR 0 12
33365: PPUSH
33366: CALL_OW 351
33370: PUSH
33371: LD_VAR 0 11
33375: PPUSH
33376: LD_VAR 0 12
33380: PPUSH
33381: CALL_OW 554
33385: AND
33386: IFFALSE 33426
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33388: LD_ADDR_VAR 0 13
33392: PUSH
33393: LD_VAR 0 13
33397: PPUSH
33398: LD_VAR 0 13
33402: PUSH
33403: LD_INT 1
33405: PLUS
33406: PPUSH
33407: LD_VAR 0 11
33411: PUSH
33412: LD_VAR 0 12
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PPUSH
33421: CALL_OW 2
33425: ST_TO_ADDR
// end ;
33426: GO 33334
33428: POP
33429: POP
33430: GO 33314
33432: POP
33433: POP
// if not list then
33434: LD_VAR 0 13
33438: NOT
33439: IFFALSE 33443
// exit ;
33441: GO 33514
// for i in list do
33443: LD_ADDR_VAR 0 6
33447: PUSH
33448: LD_VAR 0 13
33452: PUSH
33453: FOR_IN
33454: IFFALSE 33512
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33456: LD_VAR 0 1
33460: PPUSH
33461: LD_STRING M
33463: PUSH
33464: LD_VAR 0 6
33468: PUSH
33469: LD_INT 1
33471: ARRAY
33472: PUSH
33473: LD_VAR 0 6
33477: PUSH
33478: LD_INT 2
33480: ARRAY
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: PUSH
33503: EMPTY
33504: LIST
33505: PPUSH
33506: CALL_OW 447
33510: GO 33453
33512: POP
33513: POP
// end ;
33514: LD_VAR 0 5
33518: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33519: LD_EXP 122
33523: NOT
33524: IFFALSE 33574
33526: GO 33528
33528: DISABLE
// begin initHack := true ;
33529: LD_ADDR_EXP 122
33533: PUSH
33534: LD_INT 1
33536: ST_TO_ADDR
// hackTanks := [ ] ;
33537: LD_ADDR_EXP 123
33541: PUSH
33542: EMPTY
33543: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33544: LD_ADDR_EXP 124
33548: PUSH
33549: EMPTY
33550: ST_TO_ADDR
// hackLimit := 3 ;
33551: LD_ADDR_EXP 125
33555: PUSH
33556: LD_INT 3
33558: ST_TO_ADDR
// hackDist := 12 ;
33559: LD_ADDR_EXP 126
33563: PUSH
33564: LD_INT 12
33566: ST_TO_ADDR
// hackCounter := [ ] ;
33567: LD_ADDR_EXP 127
33571: PUSH
33572: EMPTY
33573: ST_TO_ADDR
// end ;
33574: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33575: LD_EXP 122
33579: PUSH
33580: LD_INT 34
33582: PUSH
33583: LD_EXP 45
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PPUSH
33592: CALL_OW 69
33596: AND
33597: IFFALSE 33852
33599: GO 33601
33601: DISABLE
33602: LD_INT 0
33604: PPUSH
33605: PPUSH
// begin enable ;
33606: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33607: LD_ADDR_VAR 0 1
33611: PUSH
33612: LD_INT 34
33614: PUSH
33615: LD_EXP 45
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PPUSH
33624: CALL_OW 69
33628: PUSH
33629: FOR_IN
33630: IFFALSE 33850
// begin if not i in hackTanks then
33632: LD_VAR 0 1
33636: PUSH
33637: LD_EXP 123
33641: IN
33642: NOT
33643: IFFALSE 33726
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33645: LD_ADDR_EXP 123
33649: PUSH
33650: LD_EXP 123
33654: PPUSH
33655: LD_EXP 123
33659: PUSH
33660: LD_INT 1
33662: PLUS
33663: PPUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: CALL_OW 1
33673: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33674: LD_ADDR_EXP 124
33678: PUSH
33679: LD_EXP 124
33683: PPUSH
33684: LD_EXP 124
33688: PUSH
33689: LD_INT 1
33691: PLUS
33692: PPUSH
33693: EMPTY
33694: PPUSH
33695: CALL_OW 1
33699: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33700: LD_ADDR_EXP 127
33704: PUSH
33705: LD_EXP 127
33709: PPUSH
33710: LD_EXP 127
33714: PUSH
33715: LD_INT 1
33717: PLUS
33718: PPUSH
33719: EMPTY
33720: PPUSH
33721: CALL_OW 1
33725: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33726: LD_VAR 0 1
33730: PPUSH
33731: CALL_OW 302
33735: NOT
33736: IFFALSE 33749
// begin HackUnlinkAll ( i ) ;
33738: LD_VAR 0 1
33742: PPUSH
33743: CALL 33855 0 1
// continue ;
33747: GO 33629
// end ; HackCheckCapturedStatus ( i ) ;
33749: LD_VAR 0 1
33753: PPUSH
33754: CALL 34298 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33758: LD_ADDR_VAR 0 2
33762: PUSH
33763: LD_INT 81
33765: PUSH
33766: LD_VAR 0 1
33770: PPUSH
33771: CALL_OW 255
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 33
33782: PUSH
33783: LD_INT 3
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 91
33792: PUSH
33793: LD_VAR 0 1
33797: PUSH
33798: LD_EXP 126
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 50
33810: PUSH
33811: EMPTY
33812: LIST
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: PPUSH
33820: CALL_OW 69
33824: ST_TO_ADDR
// if not tmp then
33825: LD_VAR 0 2
33829: NOT
33830: IFFALSE 33834
// continue ;
33832: GO 33629
// HackLink ( i , tmp ) ;
33834: LD_VAR 0 1
33838: PPUSH
33839: LD_VAR 0 2
33843: PPUSH
33844: CALL 33991 0 2
// end ;
33848: GO 33629
33850: POP
33851: POP
// end ;
33852: PPOPN 2
33854: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33855: LD_INT 0
33857: PPUSH
33858: PPUSH
33859: PPUSH
// if not hack in hackTanks then
33860: LD_VAR 0 1
33864: PUSH
33865: LD_EXP 123
33869: IN
33870: NOT
33871: IFFALSE 33875
// exit ;
33873: GO 33986
// index := GetElementIndex ( hackTanks , hack ) ;
33875: LD_ADDR_VAR 0 4
33879: PUSH
33880: LD_EXP 123
33884: PPUSH
33885: LD_VAR 0 1
33889: PPUSH
33890: CALL 41460 0 2
33894: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33895: LD_EXP 124
33899: PUSH
33900: LD_VAR 0 4
33904: ARRAY
33905: IFFALSE 33986
// begin for i in hackTanksCaptured [ index ] do
33907: LD_ADDR_VAR 0 3
33911: PUSH
33912: LD_EXP 124
33916: PUSH
33917: LD_VAR 0 4
33921: ARRAY
33922: PUSH
33923: FOR_IN
33924: IFFALSE 33950
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33926: LD_VAR 0 3
33930: PUSH
33931: LD_INT 1
33933: ARRAY
33934: PPUSH
33935: LD_VAR 0 3
33939: PUSH
33940: LD_INT 2
33942: ARRAY
33943: PPUSH
33944: CALL_OW 235
33948: GO 33923
33950: POP
33951: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33952: LD_ADDR_EXP 124
33956: PUSH
33957: LD_EXP 124
33961: PPUSH
33962: LD_VAR 0 4
33966: PPUSH
33967: EMPTY
33968: PPUSH
33969: CALL_OW 1
33973: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33974: LD_VAR 0 1
33978: PPUSH
33979: LD_INT 0
33981: PPUSH
33982: CALL_OW 505
// end ; end ;
33986: LD_VAR 0 2
33990: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33991: LD_INT 0
33993: PPUSH
33994: PPUSH
33995: PPUSH
// if not hack in hackTanks or not vehicles then
33996: LD_VAR 0 1
34000: PUSH
34001: LD_EXP 123
34005: IN
34006: NOT
34007: PUSH
34008: LD_VAR 0 2
34012: NOT
34013: OR
34014: IFFALSE 34018
// exit ;
34016: GO 34293
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34018: LD_ADDR_VAR 0 2
34022: PUSH
34023: LD_VAR 0 1
34027: PPUSH
34028: LD_VAR 0 2
34032: PPUSH
34033: LD_INT 1
34035: PPUSH
34036: LD_INT 1
34038: PPUSH
34039: CALL 42110 0 4
34043: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34044: LD_ADDR_VAR 0 5
34048: PUSH
34049: LD_EXP 123
34053: PPUSH
34054: LD_VAR 0 1
34058: PPUSH
34059: CALL 41460 0 2
34063: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34064: LD_EXP 124
34068: PUSH
34069: LD_VAR 0 5
34073: ARRAY
34074: PUSH
34075: LD_EXP 125
34079: LESS
34080: IFFALSE 34269
// begin for i := 1 to vehicles do
34082: LD_ADDR_VAR 0 4
34086: PUSH
34087: DOUBLE
34088: LD_INT 1
34090: DEC
34091: ST_TO_ADDR
34092: LD_VAR 0 2
34096: PUSH
34097: FOR_TO
34098: IFFALSE 34267
// begin if hackTanksCaptured [ index ] = hackLimit then
34100: LD_EXP 124
34104: PUSH
34105: LD_VAR 0 5
34109: ARRAY
34110: PUSH
34111: LD_EXP 125
34115: EQUAL
34116: IFFALSE 34120
// break ;
34118: GO 34267
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34120: LD_ADDR_EXP 127
34124: PUSH
34125: LD_EXP 127
34129: PPUSH
34130: LD_VAR 0 5
34134: PPUSH
34135: LD_EXP 127
34139: PUSH
34140: LD_VAR 0 5
34144: ARRAY
34145: PUSH
34146: LD_INT 1
34148: PLUS
34149: PPUSH
34150: CALL_OW 1
34154: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34155: LD_ADDR_EXP 124
34159: PUSH
34160: LD_EXP 124
34164: PPUSH
34165: LD_VAR 0 5
34169: PUSH
34170: LD_EXP 124
34174: PUSH
34175: LD_VAR 0 5
34179: ARRAY
34180: PUSH
34181: LD_INT 1
34183: PLUS
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PPUSH
34189: LD_VAR 0 2
34193: PUSH
34194: LD_VAR 0 4
34198: ARRAY
34199: PUSH
34200: LD_VAR 0 2
34204: PUSH
34205: LD_VAR 0 4
34209: ARRAY
34210: PPUSH
34211: CALL_OW 255
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PPUSH
34220: CALL 41675 0 3
34224: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34225: LD_VAR 0 2
34229: PUSH
34230: LD_VAR 0 4
34234: ARRAY
34235: PPUSH
34236: LD_VAR 0 1
34240: PPUSH
34241: CALL_OW 255
34245: PPUSH
34246: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34250: LD_VAR 0 2
34254: PUSH
34255: LD_VAR 0 4
34259: ARRAY
34260: PPUSH
34261: CALL_OW 141
// end ;
34265: GO 34097
34267: POP
34268: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34269: LD_VAR 0 1
34273: PPUSH
34274: LD_EXP 124
34278: PUSH
34279: LD_VAR 0 5
34283: ARRAY
34284: PUSH
34285: LD_INT 0
34287: PLUS
34288: PPUSH
34289: CALL_OW 505
// end ;
34293: LD_VAR 0 3
34297: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34298: LD_INT 0
34300: PPUSH
34301: PPUSH
34302: PPUSH
34303: PPUSH
// if not hack in hackTanks then
34304: LD_VAR 0 1
34308: PUSH
34309: LD_EXP 123
34313: IN
34314: NOT
34315: IFFALSE 34319
// exit ;
34317: GO 34559
// index := GetElementIndex ( hackTanks , hack ) ;
34319: LD_ADDR_VAR 0 4
34323: PUSH
34324: LD_EXP 123
34328: PPUSH
34329: LD_VAR 0 1
34333: PPUSH
34334: CALL 41460 0 2
34338: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34339: LD_ADDR_VAR 0 3
34343: PUSH
34344: DOUBLE
34345: LD_EXP 124
34349: PUSH
34350: LD_VAR 0 4
34354: ARRAY
34355: INC
34356: ST_TO_ADDR
34357: LD_INT 1
34359: PUSH
34360: FOR_DOWNTO
34361: IFFALSE 34533
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34363: LD_ADDR_VAR 0 5
34367: PUSH
34368: LD_EXP 124
34372: PUSH
34373: LD_VAR 0 4
34377: ARRAY
34378: PUSH
34379: LD_VAR 0 3
34383: ARRAY
34384: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34385: LD_VAR 0 5
34389: PUSH
34390: LD_INT 1
34392: ARRAY
34393: PPUSH
34394: CALL_OW 302
34398: NOT
34399: PUSH
34400: LD_VAR 0 5
34404: PUSH
34405: LD_INT 1
34407: ARRAY
34408: PPUSH
34409: CALL_OW 255
34413: PUSH
34414: LD_VAR 0 1
34418: PPUSH
34419: CALL_OW 255
34423: NONEQUAL
34424: OR
34425: IFFALSE 34531
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34427: LD_VAR 0 5
34431: PUSH
34432: LD_INT 1
34434: ARRAY
34435: PPUSH
34436: CALL_OW 305
34440: PUSH
34441: LD_VAR 0 5
34445: PUSH
34446: LD_INT 1
34448: ARRAY
34449: PPUSH
34450: CALL_OW 255
34454: PUSH
34455: LD_VAR 0 1
34459: PPUSH
34460: CALL_OW 255
34464: EQUAL
34465: AND
34466: IFFALSE 34490
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34468: LD_VAR 0 5
34472: PUSH
34473: LD_INT 1
34475: ARRAY
34476: PPUSH
34477: LD_VAR 0 5
34481: PUSH
34482: LD_INT 2
34484: ARRAY
34485: PPUSH
34486: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34490: LD_ADDR_EXP 124
34494: PUSH
34495: LD_EXP 124
34499: PPUSH
34500: LD_VAR 0 4
34504: PPUSH
34505: LD_EXP 124
34509: PUSH
34510: LD_VAR 0 4
34514: ARRAY
34515: PPUSH
34516: LD_VAR 0 3
34520: PPUSH
34521: CALL_OW 3
34525: PPUSH
34526: CALL_OW 1
34530: ST_TO_ADDR
// end ; end ;
34531: GO 34360
34533: POP
34534: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34535: LD_VAR 0 1
34539: PPUSH
34540: LD_EXP 124
34544: PUSH
34545: LD_VAR 0 4
34549: ARRAY
34550: PUSH
34551: LD_INT 0
34553: PLUS
34554: PPUSH
34555: CALL_OW 505
// end ;
34559: LD_VAR 0 2
34563: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34564: LD_INT 0
34566: PPUSH
34567: PPUSH
34568: PPUSH
34569: PPUSH
// if not hack in hackTanks then
34570: LD_VAR 0 1
34574: PUSH
34575: LD_EXP 123
34579: IN
34580: NOT
34581: IFFALSE 34585
// exit ;
34583: GO 34670
// index := GetElementIndex ( hackTanks , hack ) ;
34585: LD_ADDR_VAR 0 5
34589: PUSH
34590: LD_EXP 123
34594: PPUSH
34595: LD_VAR 0 1
34599: PPUSH
34600: CALL 41460 0 2
34604: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34605: LD_ADDR_VAR 0 4
34609: PUSH
34610: DOUBLE
34611: LD_INT 1
34613: DEC
34614: ST_TO_ADDR
34615: LD_EXP 124
34619: PUSH
34620: LD_VAR 0 5
34624: ARRAY
34625: PUSH
34626: FOR_TO
34627: IFFALSE 34668
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34629: LD_EXP 124
34633: PUSH
34634: LD_VAR 0 5
34638: ARRAY
34639: PUSH
34640: LD_VAR 0 4
34644: ARRAY
34645: PUSH
34646: LD_INT 1
34648: ARRAY
34649: PUSH
34650: LD_VAR 0 2
34654: EQUAL
34655: IFFALSE 34666
// KillUnit ( vehicle ) ;
34657: LD_VAR 0 2
34661: PPUSH
34662: CALL_OW 66
34666: GO 34626
34668: POP
34669: POP
// end ;
34670: LD_VAR 0 3
34674: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34675: LD_EXP 128
34679: NOT
34680: IFFALSE 34715
34682: GO 34684
34684: DISABLE
// begin initMiner := true ;
34685: LD_ADDR_EXP 128
34689: PUSH
34690: LD_INT 1
34692: ST_TO_ADDR
// minersList := [ ] ;
34693: LD_ADDR_EXP 129
34697: PUSH
34698: EMPTY
34699: ST_TO_ADDR
// minerMinesList := [ ] ;
34700: LD_ADDR_EXP 130
34704: PUSH
34705: EMPTY
34706: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34707: LD_ADDR_EXP 131
34711: PUSH
34712: LD_INT 5
34714: ST_TO_ADDR
// end ;
34715: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34716: LD_EXP 128
34720: PUSH
34721: LD_INT 34
34723: PUSH
34724: LD_EXP 50
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PPUSH
34733: CALL_OW 69
34737: AND
34738: IFFALSE 35201
34740: GO 34742
34742: DISABLE
34743: LD_INT 0
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
// begin enable ;
34749: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34750: LD_ADDR_VAR 0 1
34754: PUSH
34755: LD_INT 34
34757: PUSH
34758: LD_EXP 50
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PPUSH
34767: CALL_OW 69
34771: PUSH
34772: FOR_IN
34773: IFFALSE 34845
// begin if not i in minersList then
34775: LD_VAR 0 1
34779: PUSH
34780: LD_EXP 129
34784: IN
34785: NOT
34786: IFFALSE 34843
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34788: LD_ADDR_EXP 129
34792: PUSH
34793: LD_EXP 129
34797: PPUSH
34798: LD_EXP 129
34802: PUSH
34803: LD_INT 1
34805: PLUS
34806: PPUSH
34807: LD_VAR 0 1
34811: PPUSH
34812: CALL_OW 1
34816: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34817: LD_ADDR_EXP 130
34821: PUSH
34822: LD_EXP 130
34826: PPUSH
34827: LD_EXP 130
34831: PUSH
34832: LD_INT 1
34834: PLUS
34835: PPUSH
34836: EMPTY
34837: PPUSH
34838: CALL_OW 1
34842: ST_TO_ADDR
// end end ;
34843: GO 34772
34845: POP
34846: POP
// for i := minerMinesList downto 1 do
34847: LD_ADDR_VAR 0 1
34851: PUSH
34852: DOUBLE
34853: LD_EXP 130
34857: INC
34858: ST_TO_ADDR
34859: LD_INT 1
34861: PUSH
34862: FOR_DOWNTO
34863: IFFALSE 35199
// begin if IsLive ( minersList [ i ] ) then
34865: LD_EXP 129
34869: PUSH
34870: LD_VAR 0 1
34874: ARRAY
34875: PPUSH
34876: CALL_OW 300
34880: IFFALSE 34908
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34882: LD_EXP 129
34886: PUSH
34887: LD_VAR 0 1
34891: ARRAY
34892: PPUSH
34893: LD_EXP 130
34897: PUSH
34898: LD_VAR 0 1
34902: ARRAY
34903: PPUSH
34904: CALL_OW 505
// if not minerMinesList [ i ] then
34908: LD_EXP 130
34912: PUSH
34913: LD_VAR 0 1
34917: ARRAY
34918: NOT
34919: IFFALSE 34923
// continue ;
34921: GO 34862
// for j := minerMinesList [ i ] downto 1 do
34923: LD_ADDR_VAR 0 2
34927: PUSH
34928: DOUBLE
34929: LD_EXP 130
34933: PUSH
34934: LD_VAR 0 1
34938: ARRAY
34939: INC
34940: ST_TO_ADDR
34941: LD_INT 1
34943: PUSH
34944: FOR_DOWNTO
34945: IFFALSE 35195
// begin side := GetSide ( minersList [ i ] ) ;
34947: LD_ADDR_VAR 0 3
34951: PUSH
34952: LD_EXP 129
34956: PUSH
34957: LD_VAR 0 1
34961: ARRAY
34962: PPUSH
34963: CALL_OW 255
34967: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34968: LD_ADDR_VAR 0 4
34972: PUSH
34973: LD_EXP 130
34977: PUSH
34978: LD_VAR 0 1
34982: ARRAY
34983: PUSH
34984: LD_VAR 0 2
34988: ARRAY
34989: PUSH
34990: LD_INT 1
34992: ARRAY
34993: PPUSH
34994: LD_EXP 130
34998: PUSH
34999: LD_VAR 0 1
35003: ARRAY
35004: PUSH
35005: LD_VAR 0 2
35009: ARRAY
35010: PUSH
35011: LD_INT 2
35013: ARRAY
35014: PPUSH
35015: CALL_OW 428
35019: ST_TO_ADDR
// if not tmp then
35020: LD_VAR 0 4
35024: NOT
35025: IFFALSE 35029
// continue ;
35027: GO 34944
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35029: LD_VAR 0 4
35033: PUSH
35034: LD_INT 81
35036: PUSH
35037: LD_VAR 0 3
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PPUSH
35046: CALL_OW 69
35050: IN
35051: PUSH
35052: LD_EXP 130
35056: PUSH
35057: LD_VAR 0 1
35061: ARRAY
35062: PUSH
35063: LD_VAR 0 2
35067: ARRAY
35068: PUSH
35069: LD_INT 1
35071: ARRAY
35072: PPUSH
35073: LD_EXP 130
35077: PUSH
35078: LD_VAR 0 1
35082: ARRAY
35083: PUSH
35084: LD_VAR 0 2
35088: ARRAY
35089: PUSH
35090: LD_INT 2
35092: ARRAY
35093: PPUSH
35094: CALL_OW 458
35098: AND
35099: IFFALSE 35193
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35101: LD_EXP 130
35105: PUSH
35106: LD_VAR 0 1
35110: ARRAY
35111: PUSH
35112: LD_VAR 0 2
35116: ARRAY
35117: PUSH
35118: LD_INT 1
35120: ARRAY
35121: PPUSH
35122: LD_EXP 130
35126: PUSH
35127: LD_VAR 0 1
35131: ARRAY
35132: PUSH
35133: LD_VAR 0 2
35137: ARRAY
35138: PUSH
35139: LD_INT 2
35141: ARRAY
35142: PPUSH
35143: LD_VAR 0 3
35147: PPUSH
35148: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35152: LD_ADDR_EXP 130
35156: PUSH
35157: LD_EXP 130
35161: PPUSH
35162: LD_VAR 0 1
35166: PPUSH
35167: LD_EXP 130
35171: PUSH
35172: LD_VAR 0 1
35176: ARRAY
35177: PPUSH
35178: LD_VAR 0 2
35182: PPUSH
35183: CALL_OW 3
35187: PPUSH
35188: CALL_OW 1
35192: ST_TO_ADDR
// end ; end ;
35193: GO 34944
35195: POP
35196: POP
// end ;
35197: GO 34862
35199: POP
35200: POP
// end ;
35201: PPOPN 4
35203: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35204: LD_INT 0
35206: PPUSH
35207: PPUSH
// result := false ;
35208: LD_ADDR_VAR 0 4
35212: PUSH
35213: LD_INT 0
35215: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35216: LD_VAR 0 1
35220: PPUSH
35221: CALL_OW 264
35225: PUSH
35226: LD_EXP 50
35230: EQUAL
35231: NOT
35232: IFFALSE 35236
// exit ;
35234: GO 35476
// index := GetElementIndex ( minersList , unit ) ;
35236: LD_ADDR_VAR 0 5
35240: PUSH
35241: LD_EXP 129
35245: PPUSH
35246: LD_VAR 0 1
35250: PPUSH
35251: CALL 41460 0 2
35255: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35256: LD_EXP 130
35260: PUSH
35261: LD_VAR 0 5
35265: ARRAY
35266: PUSH
35267: LD_EXP 131
35271: GREATEREQUAL
35272: IFFALSE 35276
// exit ;
35274: GO 35476
// ComMoveXY ( unit , x , y ) ;
35276: LD_VAR 0 1
35280: PPUSH
35281: LD_VAR 0 2
35285: PPUSH
35286: LD_VAR 0 3
35290: PPUSH
35291: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35295: LD_INT 35
35297: PPUSH
35298: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35302: LD_VAR 0 1
35306: PPUSH
35307: LD_VAR 0 2
35311: PPUSH
35312: LD_VAR 0 3
35316: PPUSH
35317: CALL 72232 0 3
35321: NOT
35322: PUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 314
35332: AND
35333: IFFALSE 35337
// exit ;
35335: GO 35476
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35337: LD_VAR 0 2
35341: PPUSH
35342: LD_VAR 0 3
35346: PPUSH
35347: CALL_OW 428
35351: PUSH
35352: LD_VAR 0 1
35356: EQUAL
35357: PUSH
35358: LD_VAR 0 1
35362: PPUSH
35363: CALL_OW 314
35367: NOT
35368: AND
35369: IFFALSE 35295
// PlaySoundXY ( x , y , PlantMine ) ;
35371: LD_VAR 0 2
35375: PPUSH
35376: LD_VAR 0 3
35380: PPUSH
35381: LD_STRING PlantMine
35383: PPUSH
35384: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35388: LD_VAR 0 2
35392: PPUSH
35393: LD_VAR 0 3
35397: PPUSH
35398: LD_VAR 0 1
35402: PPUSH
35403: CALL_OW 255
35407: PPUSH
35408: LD_INT 0
35410: PPUSH
35411: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35415: LD_ADDR_EXP 130
35419: PUSH
35420: LD_EXP 130
35424: PPUSH
35425: LD_VAR 0 5
35429: PUSH
35430: LD_EXP 130
35434: PUSH
35435: LD_VAR 0 5
35439: ARRAY
35440: PUSH
35441: LD_INT 1
35443: PLUS
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PPUSH
35449: LD_VAR 0 2
35453: PUSH
35454: LD_VAR 0 3
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PPUSH
35463: CALL 41675 0 3
35467: ST_TO_ADDR
// result := true ;
35468: LD_ADDR_VAR 0 4
35472: PUSH
35473: LD_INT 1
35475: ST_TO_ADDR
// end ;
35476: LD_VAR 0 4
35480: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35481: LD_INT 0
35483: PPUSH
35484: PPUSH
35485: PPUSH
// if not unit in minersList then
35486: LD_VAR 0 1
35490: PUSH
35491: LD_EXP 129
35495: IN
35496: NOT
35497: IFFALSE 35501
// exit ;
35499: GO 35893
// index := GetElementIndex ( minersList , unit ) ;
35501: LD_ADDR_VAR 0 6
35505: PUSH
35506: LD_EXP 129
35510: PPUSH
35511: LD_VAR 0 1
35515: PPUSH
35516: CALL 41460 0 2
35520: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35521: LD_ADDR_VAR 0 5
35525: PUSH
35526: DOUBLE
35527: LD_EXP 130
35531: PUSH
35532: LD_VAR 0 6
35536: ARRAY
35537: INC
35538: ST_TO_ADDR
35539: LD_INT 1
35541: PUSH
35542: FOR_DOWNTO
35543: IFFALSE 35704
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35545: LD_EXP 130
35549: PUSH
35550: LD_VAR 0 6
35554: ARRAY
35555: PUSH
35556: LD_VAR 0 5
35560: ARRAY
35561: PUSH
35562: LD_INT 1
35564: ARRAY
35565: PUSH
35566: LD_VAR 0 2
35570: EQUAL
35571: PUSH
35572: LD_EXP 130
35576: PUSH
35577: LD_VAR 0 6
35581: ARRAY
35582: PUSH
35583: LD_VAR 0 5
35587: ARRAY
35588: PUSH
35589: LD_INT 2
35591: ARRAY
35592: PUSH
35593: LD_VAR 0 3
35597: EQUAL
35598: AND
35599: IFFALSE 35702
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35601: LD_EXP 130
35605: PUSH
35606: LD_VAR 0 6
35610: ARRAY
35611: PUSH
35612: LD_VAR 0 5
35616: ARRAY
35617: PUSH
35618: LD_INT 1
35620: ARRAY
35621: PPUSH
35622: LD_EXP 130
35626: PUSH
35627: LD_VAR 0 6
35631: ARRAY
35632: PUSH
35633: LD_VAR 0 5
35637: ARRAY
35638: PUSH
35639: LD_INT 2
35641: ARRAY
35642: PPUSH
35643: LD_VAR 0 1
35647: PPUSH
35648: CALL_OW 255
35652: PPUSH
35653: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35657: LD_ADDR_EXP 130
35661: PUSH
35662: LD_EXP 130
35666: PPUSH
35667: LD_VAR 0 6
35671: PPUSH
35672: LD_EXP 130
35676: PUSH
35677: LD_VAR 0 6
35681: ARRAY
35682: PPUSH
35683: LD_VAR 0 5
35687: PPUSH
35688: CALL_OW 3
35692: PPUSH
35693: CALL_OW 1
35697: ST_TO_ADDR
// exit ;
35698: POP
35699: POP
35700: GO 35893
// end ; end ;
35702: GO 35542
35704: POP
35705: POP
// for i := minerMinesList [ index ] downto 1 do
35706: LD_ADDR_VAR 0 5
35710: PUSH
35711: DOUBLE
35712: LD_EXP 130
35716: PUSH
35717: LD_VAR 0 6
35721: ARRAY
35722: INC
35723: ST_TO_ADDR
35724: LD_INT 1
35726: PUSH
35727: FOR_DOWNTO
35728: IFFALSE 35891
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35730: LD_EXP 130
35734: PUSH
35735: LD_VAR 0 6
35739: ARRAY
35740: PUSH
35741: LD_VAR 0 5
35745: ARRAY
35746: PUSH
35747: LD_INT 1
35749: ARRAY
35750: PPUSH
35751: LD_EXP 130
35755: PUSH
35756: LD_VAR 0 6
35760: ARRAY
35761: PUSH
35762: LD_VAR 0 5
35766: ARRAY
35767: PUSH
35768: LD_INT 2
35770: ARRAY
35771: PPUSH
35772: LD_VAR 0 2
35776: PPUSH
35777: LD_VAR 0 3
35781: PPUSH
35782: CALL_OW 298
35786: PUSH
35787: LD_INT 6
35789: LESS
35790: IFFALSE 35889
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35792: LD_EXP 130
35796: PUSH
35797: LD_VAR 0 6
35801: ARRAY
35802: PUSH
35803: LD_VAR 0 5
35807: ARRAY
35808: PUSH
35809: LD_INT 1
35811: ARRAY
35812: PPUSH
35813: LD_EXP 130
35817: PUSH
35818: LD_VAR 0 6
35822: ARRAY
35823: PUSH
35824: LD_VAR 0 5
35828: ARRAY
35829: PUSH
35830: LD_INT 2
35832: ARRAY
35833: PPUSH
35834: LD_VAR 0 1
35838: PPUSH
35839: CALL_OW 255
35843: PPUSH
35844: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35848: LD_ADDR_EXP 130
35852: PUSH
35853: LD_EXP 130
35857: PPUSH
35858: LD_VAR 0 6
35862: PPUSH
35863: LD_EXP 130
35867: PUSH
35868: LD_VAR 0 6
35872: ARRAY
35873: PPUSH
35874: LD_VAR 0 5
35878: PPUSH
35879: CALL_OW 3
35883: PPUSH
35884: CALL_OW 1
35888: ST_TO_ADDR
// end ; end ;
35889: GO 35727
35891: POP
35892: POP
// end ;
35893: LD_VAR 0 4
35897: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35898: LD_INT 0
35900: PPUSH
35901: PPUSH
35902: PPUSH
35903: PPUSH
35904: PPUSH
35905: PPUSH
35906: PPUSH
35907: PPUSH
35908: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35909: LD_VAR 0 1
35913: PPUSH
35914: CALL_OW 264
35918: PUSH
35919: LD_EXP 50
35923: EQUAL
35924: NOT
35925: PUSH
35926: LD_VAR 0 1
35930: PUSH
35931: LD_EXP 129
35935: IN
35936: NOT
35937: OR
35938: IFFALSE 35942
// exit ;
35940: GO 36264
// index := GetElementIndex ( minersList , unit ) ;
35942: LD_ADDR_VAR 0 6
35946: PUSH
35947: LD_EXP 129
35951: PPUSH
35952: LD_VAR 0 1
35956: PPUSH
35957: CALL 41460 0 2
35961: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35962: LD_ADDR_VAR 0 8
35966: PUSH
35967: LD_EXP 131
35971: PUSH
35972: LD_EXP 130
35976: PUSH
35977: LD_VAR 0 6
35981: ARRAY
35982: MINUS
35983: ST_TO_ADDR
// if not minesFreeAmount then
35984: LD_VAR 0 8
35988: NOT
35989: IFFALSE 35993
// exit ;
35991: GO 36264
// tmp := [ ] ;
35993: LD_ADDR_VAR 0 7
35997: PUSH
35998: EMPTY
35999: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36000: LD_ADDR_VAR 0 5
36004: PUSH
36005: DOUBLE
36006: LD_INT 1
36008: DEC
36009: ST_TO_ADDR
36010: LD_VAR 0 8
36014: PUSH
36015: FOR_TO
36016: IFFALSE 36211
// begin _d := rand ( 0 , 5 ) ;
36018: LD_ADDR_VAR 0 11
36022: PUSH
36023: LD_INT 0
36025: PPUSH
36026: LD_INT 5
36028: PPUSH
36029: CALL_OW 12
36033: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36034: LD_ADDR_VAR 0 12
36038: PUSH
36039: LD_INT 2
36041: PPUSH
36042: LD_INT 6
36044: PPUSH
36045: CALL_OW 12
36049: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36050: LD_ADDR_VAR 0 9
36054: PUSH
36055: LD_VAR 0 2
36059: PPUSH
36060: LD_VAR 0 11
36064: PPUSH
36065: LD_VAR 0 12
36069: PPUSH
36070: CALL_OW 272
36074: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36075: LD_ADDR_VAR 0 10
36079: PUSH
36080: LD_VAR 0 3
36084: PPUSH
36085: LD_VAR 0 11
36089: PPUSH
36090: LD_VAR 0 12
36094: PPUSH
36095: CALL_OW 273
36099: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36100: LD_VAR 0 9
36104: PPUSH
36105: LD_VAR 0 10
36109: PPUSH
36110: CALL_OW 488
36114: PUSH
36115: LD_VAR 0 9
36119: PUSH
36120: LD_VAR 0 10
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_VAR 0 7
36133: IN
36134: NOT
36135: AND
36136: PUSH
36137: LD_VAR 0 9
36141: PPUSH
36142: LD_VAR 0 10
36146: PPUSH
36147: CALL_OW 458
36151: NOT
36152: AND
36153: IFFALSE 36195
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36155: LD_ADDR_VAR 0 7
36159: PUSH
36160: LD_VAR 0 7
36164: PPUSH
36165: LD_VAR 0 7
36169: PUSH
36170: LD_INT 1
36172: PLUS
36173: PPUSH
36174: LD_VAR 0 9
36178: PUSH
36179: LD_VAR 0 10
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PPUSH
36188: CALL_OW 1
36192: ST_TO_ADDR
36193: GO 36209
// i := i - 1 ;
36195: LD_ADDR_VAR 0 5
36199: PUSH
36200: LD_VAR 0 5
36204: PUSH
36205: LD_INT 1
36207: MINUS
36208: ST_TO_ADDR
// end ;
36209: GO 36015
36211: POP
36212: POP
// for i in tmp do
36213: LD_ADDR_VAR 0 5
36217: PUSH
36218: LD_VAR 0 7
36222: PUSH
36223: FOR_IN
36224: IFFALSE 36262
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36226: LD_VAR 0 1
36230: PPUSH
36231: LD_VAR 0 5
36235: PUSH
36236: LD_INT 1
36238: ARRAY
36239: PPUSH
36240: LD_VAR 0 5
36244: PUSH
36245: LD_INT 2
36247: ARRAY
36248: PPUSH
36249: CALL 35204 0 3
36253: NOT
36254: IFFALSE 36260
// exit ;
36256: POP
36257: POP
36258: GO 36264
36260: GO 36223
36262: POP
36263: POP
// end ;
36264: LD_VAR 0 4
36268: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36269: LD_INT 0
36271: PPUSH
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
// if not GetClass ( unit ) = class_sniper then
36278: LD_VAR 0 1
36282: PPUSH
36283: CALL_OW 257
36287: PUSH
36288: LD_INT 5
36290: EQUAL
36291: NOT
36292: IFFALSE 36296
// exit ;
36294: GO 36684
// dist := 8 ;
36296: LD_ADDR_VAR 0 5
36300: PUSH
36301: LD_INT 8
36303: ST_TO_ADDR
// viewRange := 12 ;
36304: LD_ADDR_VAR 0 7
36308: PUSH
36309: LD_INT 12
36311: ST_TO_ADDR
// side := GetSide ( unit ) ;
36312: LD_ADDR_VAR 0 6
36316: PUSH
36317: LD_VAR 0 1
36321: PPUSH
36322: CALL_OW 255
36326: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36327: LD_INT 61
36329: PPUSH
36330: LD_VAR 0 6
36334: PPUSH
36335: CALL_OW 321
36339: PUSH
36340: LD_INT 2
36342: EQUAL
36343: IFFALSE 36353
// viewRange := 16 ;
36345: LD_ADDR_VAR 0 7
36349: PUSH
36350: LD_INT 16
36352: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36353: LD_VAR 0 1
36357: PPUSH
36358: LD_VAR 0 2
36362: PPUSH
36363: LD_VAR 0 3
36367: PPUSH
36368: CALL_OW 297
36372: PUSH
36373: LD_VAR 0 5
36377: GREATER
36378: IFFALSE 36457
// begin ComMoveXY ( unit , x , y ) ;
36380: LD_VAR 0 1
36384: PPUSH
36385: LD_VAR 0 2
36389: PPUSH
36390: LD_VAR 0 3
36394: PPUSH
36395: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36399: LD_INT 35
36401: PPUSH
36402: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36406: LD_VAR 0 1
36410: PPUSH
36411: LD_VAR 0 2
36415: PPUSH
36416: LD_VAR 0 3
36420: PPUSH
36421: CALL 72232 0 3
36425: NOT
36426: IFFALSE 36430
// exit ;
36428: GO 36684
// until GetDistUnitXY ( unit , x , y ) < dist ;
36430: LD_VAR 0 1
36434: PPUSH
36435: LD_VAR 0 2
36439: PPUSH
36440: LD_VAR 0 3
36444: PPUSH
36445: CALL_OW 297
36449: PUSH
36450: LD_VAR 0 5
36454: LESS
36455: IFFALSE 36399
// end ; ComTurnXY ( unit , x , y ) ;
36457: LD_VAR 0 1
36461: PPUSH
36462: LD_VAR 0 2
36466: PPUSH
36467: LD_VAR 0 3
36471: PPUSH
36472: CALL_OW 118
// wait ( 5 ) ;
36476: LD_INT 5
36478: PPUSH
36479: CALL_OW 67
// _d := GetDir ( unit ) ;
36483: LD_ADDR_VAR 0 10
36487: PUSH
36488: LD_VAR 0 1
36492: PPUSH
36493: CALL_OW 254
36497: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36498: LD_ADDR_VAR 0 8
36502: PUSH
36503: LD_VAR 0 1
36507: PPUSH
36508: CALL_OW 250
36512: PPUSH
36513: LD_VAR 0 10
36517: PPUSH
36518: LD_VAR 0 5
36522: PPUSH
36523: CALL_OW 272
36527: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36528: LD_ADDR_VAR 0 9
36532: PUSH
36533: LD_VAR 0 1
36537: PPUSH
36538: CALL_OW 251
36542: PPUSH
36543: LD_VAR 0 10
36547: PPUSH
36548: LD_VAR 0 5
36552: PPUSH
36553: CALL_OW 273
36557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36558: LD_VAR 0 8
36562: PPUSH
36563: LD_VAR 0 9
36567: PPUSH
36568: CALL_OW 488
36572: NOT
36573: IFFALSE 36577
// exit ;
36575: GO 36684
// ComAnimCustom ( unit , 1 ) ;
36577: LD_VAR 0 1
36581: PPUSH
36582: LD_INT 1
36584: PPUSH
36585: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36589: LD_VAR 0 8
36593: PPUSH
36594: LD_VAR 0 9
36598: PPUSH
36599: LD_VAR 0 6
36603: PPUSH
36604: LD_VAR 0 7
36608: PPUSH
36609: CALL_OW 330
// repeat wait ( 1 ) ;
36613: LD_INT 1
36615: PPUSH
36616: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36620: LD_VAR 0 1
36624: PPUSH
36625: CALL_OW 316
36629: PUSH
36630: LD_VAR 0 1
36634: PPUSH
36635: CALL_OW 314
36639: OR
36640: PUSH
36641: LD_VAR 0 1
36645: PPUSH
36646: CALL_OW 302
36650: NOT
36651: OR
36652: PUSH
36653: LD_VAR 0 1
36657: PPUSH
36658: CALL_OW 301
36662: OR
36663: IFFALSE 36613
// RemoveSeeing ( _x , _y , side ) ;
36665: LD_VAR 0 8
36669: PPUSH
36670: LD_VAR 0 9
36674: PPUSH
36675: LD_VAR 0 6
36679: PPUSH
36680: CALL_OW 331
// end ; end_of_file
36684: LD_VAR 0 4
36688: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36689: LD_INT 0
36691: PPUSH
36692: PPUSH
// if exist_mode then
36693: LD_VAR 0 2
36697: IFFALSE 36722
// unit := CreateCharacter ( prefix & ident ) else
36699: LD_ADDR_VAR 0 5
36703: PUSH
36704: LD_VAR 0 3
36708: PUSH
36709: LD_VAR 0 1
36713: STR
36714: PPUSH
36715: CALL_OW 34
36719: ST_TO_ADDR
36720: GO 36737
// unit := NewCharacter ( ident ) ;
36722: LD_ADDR_VAR 0 5
36726: PUSH
36727: LD_VAR 0 1
36731: PPUSH
36732: CALL_OW 25
36736: ST_TO_ADDR
// result := unit ;
36737: LD_ADDR_VAR 0 4
36741: PUSH
36742: LD_VAR 0 5
36746: ST_TO_ADDR
// end ;
36747: LD_VAR 0 4
36751: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36752: LD_INT 0
36754: PPUSH
36755: PPUSH
// if not side or not nation then
36756: LD_VAR 0 1
36760: NOT
36761: PUSH
36762: LD_VAR 0 2
36766: NOT
36767: OR
36768: IFFALSE 36772
// exit ;
36770: GO 37540
// case nation of nation_american :
36772: LD_VAR 0 2
36776: PUSH
36777: LD_INT 1
36779: DOUBLE
36780: EQUAL
36781: IFTRUE 36785
36783: GO 36999
36785: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36786: LD_ADDR_VAR 0 4
36790: PUSH
36791: LD_INT 35
36793: PUSH
36794: LD_INT 45
36796: PUSH
36797: LD_INT 46
36799: PUSH
36800: LD_INT 47
36802: PUSH
36803: LD_INT 82
36805: PUSH
36806: LD_INT 83
36808: PUSH
36809: LD_INT 84
36811: PUSH
36812: LD_INT 85
36814: PUSH
36815: LD_INT 86
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: LD_INT 6
36826: PUSH
36827: LD_INT 15
36829: PUSH
36830: LD_INT 16
36832: PUSH
36833: LD_INT 7
36835: PUSH
36836: LD_INT 12
36838: PUSH
36839: LD_INT 13
36841: PUSH
36842: LD_INT 10
36844: PUSH
36845: LD_INT 14
36847: PUSH
36848: LD_INT 20
36850: PUSH
36851: LD_INT 21
36853: PUSH
36854: LD_INT 22
36856: PUSH
36857: LD_INT 25
36859: PUSH
36860: LD_INT 32
36862: PUSH
36863: LD_INT 27
36865: PUSH
36866: LD_INT 36
36868: PUSH
36869: LD_INT 69
36871: PUSH
36872: LD_INT 39
36874: PUSH
36875: LD_INT 34
36877: PUSH
36878: LD_INT 40
36880: PUSH
36881: LD_INT 48
36883: PUSH
36884: LD_INT 49
36886: PUSH
36887: LD_INT 50
36889: PUSH
36890: LD_INT 51
36892: PUSH
36893: LD_INT 52
36895: PUSH
36896: LD_INT 53
36898: PUSH
36899: LD_INT 54
36901: PUSH
36902: LD_INT 55
36904: PUSH
36905: LD_INT 56
36907: PUSH
36908: LD_INT 57
36910: PUSH
36911: LD_INT 58
36913: PUSH
36914: LD_INT 59
36916: PUSH
36917: LD_INT 60
36919: PUSH
36920: LD_INT 61
36922: PUSH
36923: LD_INT 62
36925: PUSH
36926: LD_INT 80
36928: PUSH
36929: LD_INT 82
36931: PUSH
36932: LD_INT 83
36934: PUSH
36935: LD_INT 84
36937: PUSH
36938: LD_INT 85
36940: PUSH
36941: LD_INT 86
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
36997: GO 37464
36999: LD_INT 2
37001: DOUBLE
37002: EQUAL
37003: IFTRUE 37007
37005: GO 37233
37007: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37008: LD_ADDR_VAR 0 4
37012: PUSH
37013: LD_INT 35
37015: PUSH
37016: LD_INT 45
37018: PUSH
37019: LD_INT 46
37021: PUSH
37022: LD_INT 47
37024: PUSH
37025: LD_INT 82
37027: PUSH
37028: LD_INT 83
37030: PUSH
37031: LD_INT 84
37033: PUSH
37034: LD_INT 85
37036: PUSH
37037: LD_INT 87
37039: PUSH
37040: LD_INT 70
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 11
37048: PUSH
37049: LD_INT 3
37051: PUSH
37052: LD_INT 4
37054: PUSH
37055: LD_INT 5
37057: PUSH
37058: LD_INT 6
37060: PUSH
37061: LD_INT 15
37063: PUSH
37064: LD_INT 18
37066: PUSH
37067: LD_INT 7
37069: PUSH
37070: LD_INT 17
37072: PUSH
37073: LD_INT 8
37075: PUSH
37076: LD_INT 20
37078: PUSH
37079: LD_INT 21
37081: PUSH
37082: LD_INT 22
37084: PUSH
37085: LD_INT 72
37087: PUSH
37088: LD_INT 26
37090: PUSH
37091: LD_INT 69
37093: PUSH
37094: LD_INT 39
37096: PUSH
37097: LD_INT 40
37099: PUSH
37100: LD_INT 41
37102: PUSH
37103: LD_INT 42
37105: PUSH
37106: LD_INT 43
37108: PUSH
37109: LD_INT 48
37111: PUSH
37112: LD_INT 49
37114: PUSH
37115: LD_INT 50
37117: PUSH
37118: LD_INT 51
37120: PUSH
37121: LD_INT 52
37123: PUSH
37124: LD_INT 53
37126: PUSH
37127: LD_INT 54
37129: PUSH
37130: LD_INT 55
37132: PUSH
37133: LD_INT 56
37135: PUSH
37136: LD_INT 60
37138: PUSH
37139: LD_INT 61
37141: PUSH
37142: LD_INT 62
37144: PUSH
37145: LD_INT 66
37147: PUSH
37148: LD_INT 67
37150: PUSH
37151: LD_INT 68
37153: PUSH
37154: LD_INT 81
37156: PUSH
37157: LD_INT 82
37159: PUSH
37160: LD_INT 83
37162: PUSH
37163: LD_INT 84
37165: PUSH
37166: LD_INT 85
37168: PUSH
37169: LD_INT 87
37171: PUSH
37172: LD_INT 88
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: ST_TO_ADDR
37231: GO 37464
37233: LD_INT 3
37235: DOUBLE
37236: EQUAL
37237: IFTRUE 37241
37239: GO 37463
37241: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37242: LD_ADDR_VAR 0 4
37246: PUSH
37247: LD_INT 46
37249: PUSH
37250: LD_INT 47
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: LD_INT 82
37261: PUSH
37262: LD_INT 83
37264: PUSH
37265: LD_INT 84
37267: PUSH
37268: LD_INT 85
37270: PUSH
37271: LD_INT 86
37273: PUSH
37274: LD_INT 11
37276: PUSH
37277: LD_INT 9
37279: PUSH
37280: LD_INT 20
37282: PUSH
37283: LD_INT 19
37285: PUSH
37286: LD_INT 21
37288: PUSH
37289: LD_INT 24
37291: PUSH
37292: LD_INT 22
37294: PUSH
37295: LD_INT 25
37297: PUSH
37298: LD_INT 28
37300: PUSH
37301: LD_INT 29
37303: PUSH
37304: LD_INT 30
37306: PUSH
37307: LD_INT 31
37309: PUSH
37310: LD_INT 37
37312: PUSH
37313: LD_INT 38
37315: PUSH
37316: LD_INT 32
37318: PUSH
37319: LD_INT 27
37321: PUSH
37322: LD_INT 33
37324: PUSH
37325: LD_INT 69
37327: PUSH
37328: LD_INT 39
37330: PUSH
37331: LD_INT 34
37333: PUSH
37334: LD_INT 40
37336: PUSH
37337: LD_INT 71
37339: PUSH
37340: LD_INT 23
37342: PUSH
37343: LD_INT 44
37345: PUSH
37346: LD_INT 48
37348: PUSH
37349: LD_INT 49
37351: PUSH
37352: LD_INT 50
37354: PUSH
37355: LD_INT 51
37357: PUSH
37358: LD_INT 52
37360: PUSH
37361: LD_INT 53
37363: PUSH
37364: LD_INT 54
37366: PUSH
37367: LD_INT 55
37369: PUSH
37370: LD_INT 56
37372: PUSH
37373: LD_INT 57
37375: PUSH
37376: LD_INT 58
37378: PUSH
37379: LD_INT 59
37381: PUSH
37382: LD_INT 63
37384: PUSH
37385: LD_INT 64
37387: PUSH
37388: LD_INT 65
37390: PUSH
37391: LD_INT 82
37393: PUSH
37394: LD_INT 83
37396: PUSH
37397: LD_INT 84
37399: PUSH
37400: LD_INT 85
37402: PUSH
37403: LD_INT 86
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: ST_TO_ADDR
37461: GO 37464
37463: POP
// if state > - 1 and state < 3 then
37464: LD_VAR 0 3
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: GREATER
37473: PUSH
37474: LD_VAR 0 3
37478: PUSH
37479: LD_INT 3
37481: LESS
37482: AND
37483: IFFALSE 37540
// for i in result do
37485: LD_ADDR_VAR 0 5
37489: PUSH
37490: LD_VAR 0 4
37494: PUSH
37495: FOR_IN
37496: IFFALSE 37538
// if GetTech ( i , side ) <> state then
37498: LD_VAR 0 5
37502: PPUSH
37503: LD_VAR 0 1
37507: PPUSH
37508: CALL_OW 321
37512: PUSH
37513: LD_VAR 0 3
37517: NONEQUAL
37518: IFFALSE 37536
// result := result diff i ;
37520: LD_ADDR_VAR 0 4
37524: PUSH
37525: LD_VAR 0 4
37529: PUSH
37530: LD_VAR 0 5
37534: DIFF
37535: ST_TO_ADDR
37536: GO 37495
37538: POP
37539: POP
// end ;
37540: LD_VAR 0 4
37544: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37545: LD_INT 0
37547: PPUSH
37548: PPUSH
37549: PPUSH
// result := true ;
37550: LD_ADDR_VAR 0 3
37554: PUSH
37555: LD_INT 1
37557: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37558: LD_ADDR_VAR 0 5
37562: PUSH
37563: LD_VAR 0 2
37567: PPUSH
37568: CALL_OW 480
37572: ST_TO_ADDR
// if not tmp then
37573: LD_VAR 0 5
37577: NOT
37578: IFFALSE 37582
// exit ;
37580: GO 37631
// for i in tmp do
37582: LD_ADDR_VAR 0 4
37586: PUSH
37587: LD_VAR 0 5
37591: PUSH
37592: FOR_IN
37593: IFFALSE 37629
// if GetTech ( i , side ) <> state_researched then
37595: LD_VAR 0 4
37599: PPUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: CALL_OW 321
37609: PUSH
37610: LD_INT 2
37612: NONEQUAL
37613: IFFALSE 37627
// begin result := false ;
37615: LD_ADDR_VAR 0 3
37619: PUSH
37620: LD_INT 0
37622: ST_TO_ADDR
// exit ;
37623: POP
37624: POP
37625: GO 37631
// end ;
37627: GO 37592
37629: POP
37630: POP
// end ;
37631: LD_VAR 0 3
37635: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37636: LD_INT 0
37638: PPUSH
37639: PPUSH
37640: PPUSH
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
37650: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37651: LD_VAR 0 1
37655: NOT
37656: PUSH
37657: LD_VAR 0 1
37661: PPUSH
37662: CALL_OW 257
37666: PUSH
37667: LD_INT 9
37669: NONEQUAL
37670: OR
37671: IFFALSE 37675
// exit ;
37673: GO 38248
// side := GetSide ( unit ) ;
37675: LD_ADDR_VAR 0 9
37679: PUSH
37680: LD_VAR 0 1
37684: PPUSH
37685: CALL_OW 255
37689: ST_TO_ADDR
// tech_space := tech_spacanom ;
37690: LD_ADDR_VAR 0 12
37694: PUSH
37695: LD_INT 29
37697: ST_TO_ADDR
// tech_time := tech_taurad ;
37698: LD_ADDR_VAR 0 13
37702: PUSH
37703: LD_INT 28
37705: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37706: LD_ADDR_VAR 0 11
37710: PUSH
37711: LD_VAR 0 1
37715: PPUSH
37716: CALL_OW 310
37720: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37721: LD_VAR 0 11
37725: PPUSH
37726: CALL_OW 247
37730: PUSH
37731: LD_INT 2
37733: EQUAL
37734: IFFALSE 37738
// exit ;
37736: GO 38248
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37738: LD_ADDR_VAR 0 8
37742: PUSH
37743: LD_INT 81
37745: PUSH
37746: LD_VAR 0 9
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 3
37757: PUSH
37758: LD_INT 21
37760: PUSH
37761: LD_INT 3
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PPUSH
37776: CALL_OW 69
37780: ST_TO_ADDR
// if not tmp then
37781: LD_VAR 0 8
37785: NOT
37786: IFFALSE 37790
// exit ;
37788: GO 38248
// if in_unit then
37790: LD_VAR 0 11
37794: IFFALSE 37818
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37796: LD_ADDR_VAR 0 10
37800: PUSH
37801: LD_VAR 0 8
37805: PPUSH
37806: LD_VAR 0 11
37810: PPUSH
37811: CALL_OW 74
37815: ST_TO_ADDR
37816: GO 37838
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37818: LD_ADDR_VAR 0 10
37822: PUSH
37823: LD_VAR 0 8
37827: PPUSH
37828: LD_VAR 0 1
37832: PPUSH
37833: CALL_OW 74
37837: ST_TO_ADDR
// if not enemy then
37838: LD_VAR 0 10
37842: NOT
37843: IFFALSE 37847
// exit ;
37845: GO 38248
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37847: LD_VAR 0 11
37851: PUSH
37852: LD_VAR 0 11
37856: PPUSH
37857: LD_VAR 0 10
37861: PPUSH
37862: CALL_OW 296
37866: PUSH
37867: LD_INT 13
37869: GREATER
37870: AND
37871: PUSH
37872: LD_VAR 0 1
37876: PPUSH
37877: LD_VAR 0 10
37881: PPUSH
37882: CALL_OW 296
37886: PUSH
37887: LD_INT 12
37889: GREATER
37890: OR
37891: IFFALSE 37895
// exit ;
37893: GO 38248
// missile := [ 1 ] ;
37895: LD_ADDR_VAR 0 14
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37906: LD_VAR 0 9
37910: PPUSH
37911: LD_VAR 0 12
37915: PPUSH
37916: CALL_OW 325
37920: IFFALSE 37949
// missile := Insert ( missile , missile + 1 , 2 ) ;
37922: LD_ADDR_VAR 0 14
37926: PUSH
37927: LD_VAR 0 14
37931: PPUSH
37932: LD_VAR 0 14
37936: PUSH
37937: LD_INT 1
37939: PLUS
37940: PPUSH
37941: LD_INT 2
37943: PPUSH
37944: CALL_OW 2
37948: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37949: LD_VAR 0 9
37953: PPUSH
37954: LD_VAR 0 13
37958: PPUSH
37959: CALL_OW 325
37963: PUSH
37964: LD_VAR 0 10
37968: PPUSH
37969: CALL_OW 255
37973: PPUSH
37974: LD_VAR 0 13
37978: PPUSH
37979: CALL_OW 325
37983: NOT
37984: AND
37985: IFFALSE 38014
// missile := Insert ( missile , missile + 1 , 3 ) ;
37987: LD_ADDR_VAR 0 14
37991: PUSH
37992: LD_VAR 0 14
37996: PPUSH
37997: LD_VAR 0 14
38001: PUSH
38002: LD_INT 1
38004: PLUS
38005: PPUSH
38006: LD_INT 3
38008: PPUSH
38009: CALL_OW 2
38013: ST_TO_ADDR
// if missile < 2 then
38014: LD_VAR 0 14
38018: PUSH
38019: LD_INT 2
38021: LESS
38022: IFFALSE 38026
// exit ;
38024: GO 38248
// x := GetX ( enemy ) ;
38026: LD_ADDR_VAR 0 4
38030: PUSH
38031: LD_VAR 0 10
38035: PPUSH
38036: CALL_OW 250
38040: ST_TO_ADDR
// y := GetY ( enemy ) ;
38041: LD_ADDR_VAR 0 5
38045: PUSH
38046: LD_VAR 0 10
38050: PPUSH
38051: CALL_OW 251
38055: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38056: LD_ADDR_VAR 0 6
38060: PUSH
38061: LD_VAR 0 4
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PPUSH
38070: LD_INT 1
38072: PPUSH
38073: CALL_OW 12
38077: PLUS
38078: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38079: LD_ADDR_VAR 0 7
38083: PUSH
38084: LD_VAR 0 5
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PPUSH
38093: LD_INT 1
38095: PPUSH
38096: CALL_OW 12
38100: PLUS
38101: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38102: LD_VAR 0 6
38106: PPUSH
38107: LD_VAR 0 7
38111: PPUSH
38112: CALL_OW 488
38116: NOT
38117: IFFALSE 38139
// begin _x := x ;
38119: LD_ADDR_VAR 0 6
38123: PUSH
38124: LD_VAR 0 4
38128: ST_TO_ADDR
// _y := y ;
38129: LD_ADDR_VAR 0 7
38133: PUSH
38134: LD_VAR 0 5
38138: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38139: LD_ADDR_VAR 0 3
38143: PUSH
38144: LD_INT 1
38146: PPUSH
38147: LD_VAR 0 14
38151: PPUSH
38152: CALL_OW 12
38156: ST_TO_ADDR
// case i of 1 :
38157: LD_VAR 0 3
38161: PUSH
38162: LD_INT 1
38164: DOUBLE
38165: EQUAL
38166: IFTRUE 38170
38168: GO 38187
38170: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38171: LD_VAR 0 1
38175: PPUSH
38176: LD_VAR 0 10
38180: PPUSH
38181: CALL_OW 115
38185: GO 38248
38187: LD_INT 2
38189: DOUBLE
38190: EQUAL
38191: IFTRUE 38195
38193: GO 38217
38195: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38196: LD_VAR 0 1
38200: PPUSH
38201: LD_VAR 0 6
38205: PPUSH
38206: LD_VAR 0 7
38210: PPUSH
38211: CALL_OW 153
38215: GO 38248
38217: LD_INT 3
38219: DOUBLE
38220: EQUAL
38221: IFTRUE 38225
38223: GO 38247
38225: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38226: LD_VAR 0 1
38230: PPUSH
38231: LD_VAR 0 6
38235: PPUSH
38236: LD_VAR 0 7
38240: PPUSH
38241: CALL_OW 154
38245: GO 38248
38247: POP
// end ;
38248: LD_VAR 0 2
38252: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38253: LD_INT 0
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
38259: PPUSH
38260: PPUSH
// if not unit or not building then
38261: LD_VAR 0 1
38265: NOT
38266: PUSH
38267: LD_VAR 0 2
38271: NOT
38272: OR
38273: IFFALSE 38277
// exit ;
38275: GO 38435
// x := GetX ( building ) ;
38277: LD_ADDR_VAR 0 5
38281: PUSH
38282: LD_VAR 0 2
38286: PPUSH
38287: CALL_OW 250
38291: ST_TO_ADDR
// y := GetY ( building ) ;
38292: LD_ADDR_VAR 0 6
38296: PUSH
38297: LD_VAR 0 2
38301: PPUSH
38302: CALL_OW 251
38306: ST_TO_ADDR
// for i = 0 to 5 do
38307: LD_ADDR_VAR 0 4
38311: PUSH
38312: DOUBLE
38313: LD_INT 0
38315: DEC
38316: ST_TO_ADDR
38317: LD_INT 5
38319: PUSH
38320: FOR_TO
38321: IFFALSE 38433
// begin _x := ShiftX ( x , i , 3 ) ;
38323: LD_ADDR_VAR 0 7
38327: PUSH
38328: LD_VAR 0 5
38332: PPUSH
38333: LD_VAR 0 4
38337: PPUSH
38338: LD_INT 3
38340: PPUSH
38341: CALL_OW 272
38345: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38346: LD_ADDR_VAR 0 8
38350: PUSH
38351: LD_VAR 0 6
38355: PPUSH
38356: LD_VAR 0 4
38360: PPUSH
38361: LD_INT 3
38363: PPUSH
38364: CALL_OW 273
38368: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38369: LD_VAR 0 7
38373: PPUSH
38374: LD_VAR 0 8
38378: PPUSH
38379: CALL_OW 488
38383: NOT
38384: IFFALSE 38388
// continue ;
38386: GO 38320
// if HexInfo ( _x , _y ) = 0 then
38388: LD_VAR 0 7
38392: PPUSH
38393: LD_VAR 0 8
38397: PPUSH
38398: CALL_OW 428
38402: PUSH
38403: LD_INT 0
38405: EQUAL
38406: IFFALSE 38431
// begin ComMoveXY ( unit , _x , _y ) ;
38408: LD_VAR 0 1
38412: PPUSH
38413: LD_VAR 0 7
38417: PPUSH
38418: LD_VAR 0 8
38422: PPUSH
38423: CALL_OW 111
// exit ;
38427: POP
38428: POP
38429: GO 38435
// end ; end ;
38431: GO 38320
38433: POP
38434: POP
// end ;
38435: LD_VAR 0 3
38439: RET
// export function ScanBase ( side , base_area ) ; begin
38440: LD_INT 0
38442: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38443: LD_ADDR_VAR 0 3
38447: PUSH
38448: LD_VAR 0 2
38452: PPUSH
38453: LD_INT 81
38455: PUSH
38456: LD_VAR 0 1
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PPUSH
38465: CALL_OW 70
38469: ST_TO_ADDR
// end ;
38470: LD_VAR 0 3
38474: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38475: LD_INT 0
38477: PPUSH
38478: PPUSH
38479: PPUSH
38480: PPUSH
// result := false ;
38481: LD_ADDR_VAR 0 2
38485: PUSH
38486: LD_INT 0
38488: ST_TO_ADDR
// side := GetSide ( unit ) ;
38489: LD_ADDR_VAR 0 3
38493: PUSH
38494: LD_VAR 0 1
38498: PPUSH
38499: CALL_OW 255
38503: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38504: LD_ADDR_VAR 0 4
38508: PUSH
38509: LD_VAR 0 1
38513: PPUSH
38514: CALL_OW 248
38518: ST_TO_ADDR
// case nat of 1 :
38519: LD_VAR 0 4
38523: PUSH
38524: LD_INT 1
38526: DOUBLE
38527: EQUAL
38528: IFTRUE 38532
38530: GO 38543
38532: POP
// tech := tech_lassight ; 2 :
38533: LD_ADDR_VAR 0 5
38537: PUSH
38538: LD_INT 12
38540: ST_TO_ADDR
38541: GO 38582
38543: LD_INT 2
38545: DOUBLE
38546: EQUAL
38547: IFTRUE 38551
38549: GO 38562
38551: POP
// tech := tech_mortar ; 3 :
38552: LD_ADDR_VAR 0 5
38556: PUSH
38557: LD_INT 41
38559: ST_TO_ADDR
38560: GO 38582
38562: LD_INT 3
38564: DOUBLE
38565: EQUAL
38566: IFTRUE 38570
38568: GO 38581
38570: POP
// tech := tech_bazooka ; end ;
38571: LD_ADDR_VAR 0 5
38575: PUSH
38576: LD_INT 44
38578: ST_TO_ADDR
38579: GO 38582
38581: POP
// if Researched ( side , tech ) then
38582: LD_VAR 0 3
38586: PPUSH
38587: LD_VAR 0 5
38591: PPUSH
38592: CALL_OW 325
38596: IFFALSE 38623
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38598: LD_ADDR_VAR 0 2
38602: PUSH
38603: LD_INT 5
38605: PUSH
38606: LD_INT 8
38608: PUSH
38609: LD_INT 9
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: PUSH
38617: LD_VAR 0 4
38621: ARRAY
38622: ST_TO_ADDR
// end ;
38623: LD_VAR 0 2
38627: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38628: LD_INT 0
38630: PPUSH
38631: PPUSH
38632: PPUSH
// if not mines then
38633: LD_VAR 0 2
38637: NOT
38638: IFFALSE 38642
// exit ;
38640: GO 38786
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38642: LD_ADDR_VAR 0 5
38646: PUSH
38647: LD_INT 81
38649: PUSH
38650: LD_VAR 0 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 3
38661: PUSH
38662: LD_INT 21
38664: PUSH
38665: LD_INT 3
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PPUSH
38680: CALL_OW 69
38684: ST_TO_ADDR
// for i in mines do
38685: LD_ADDR_VAR 0 4
38689: PUSH
38690: LD_VAR 0 2
38694: PUSH
38695: FOR_IN
38696: IFFALSE 38784
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38698: LD_VAR 0 4
38702: PUSH
38703: LD_INT 1
38705: ARRAY
38706: PPUSH
38707: LD_VAR 0 4
38711: PUSH
38712: LD_INT 2
38714: ARRAY
38715: PPUSH
38716: CALL_OW 458
38720: NOT
38721: IFFALSE 38725
// continue ;
38723: GO 38695
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38725: LD_VAR 0 4
38729: PUSH
38730: LD_INT 1
38732: ARRAY
38733: PPUSH
38734: LD_VAR 0 4
38738: PUSH
38739: LD_INT 2
38741: ARRAY
38742: PPUSH
38743: CALL_OW 428
38747: PUSH
38748: LD_VAR 0 5
38752: IN
38753: IFFALSE 38782
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38755: LD_VAR 0 4
38759: PUSH
38760: LD_INT 1
38762: ARRAY
38763: PPUSH
38764: LD_VAR 0 4
38768: PUSH
38769: LD_INT 2
38771: ARRAY
38772: PPUSH
38773: LD_VAR 0 1
38777: PPUSH
38778: CALL_OW 456
// end ;
38782: GO 38695
38784: POP
38785: POP
// end ;
38786: LD_VAR 0 3
38790: RET
// export function Count ( array ) ; var i ; begin
38791: LD_INT 0
38793: PPUSH
38794: PPUSH
// result := 0 ;
38795: LD_ADDR_VAR 0 2
38799: PUSH
38800: LD_INT 0
38802: ST_TO_ADDR
// for i in array do
38803: LD_ADDR_VAR 0 3
38807: PUSH
38808: LD_VAR 0 1
38812: PUSH
38813: FOR_IN
38814: IFFALSE 38838
// if i then
38816: LD_VAR 0 3
38820: IFFALSE 38836
// result := result + 1 ;
38822: LD_ADDR_VAR 0 2
38826: PUSH
38827: LD_VAR 0 2
38831: PUSH
38832: LD_INT 1
38834: PLUS
38835: ST_TO_ADDR
38836: GO 38813
38838: POP
38839: POP
// end ;
38840: LD_VAR 0 2
38844: RET
// export function IsEmpty ( building ) ; begin
38845: LD_INT 0
38847: PPUSH
// if not building then
38848: LD_VAR 0 1
38852: NOT
38853: IFFALSE 38857
// exit ;
38855: GO 38900
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38857: LD_ADDR_VAR 0 2
38861: PUSH
38862: LD_VAR 0 1
38866: PUSH
38867: LD_INT 22
38869: PUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: CALL_OW 255
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 58
38886: PUSH
38887: EMPTY
38888: LIST
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PPUSH
38894: CALL_OW 69
38898: IN
38899: ST_TO_ADDR
// end ;
38900: LD_VAR 0 2
38904: RET
// export function IsNotFull ( building ) ; begin
38905: LD_INT 0
38907: PPUSH
// if not building then
38908: LD_VAR 0 1
38912: NOT
38913: IFFALSE 38917
// exit ;
38915: GO 38936
// result := UnitsInside ( building ) < 6 ;
38917: LD_ADDR_VAR 0 2
38921: PUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: CALL_OW 313
38931: PUSH
38932: LD_INT 6
38934: LESS
38935: ST_TO_ADDR
// end ;
38936: LD_VAR 0 2
38940: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38941: LD_INT 0
38943: PPUSH
38944: PPUSH
38945: PPUSH
38946: PPUSH
// tmp := [ ] ;
38947: LD_ADDR_VAR 0 3
38951: PUSH
38952: EMPTY
38953: ST_TO_ADDR
// list := [ ] ;
38954: LD_ADDR_VAR 0 5
38958: PUSH
38959: EMPTY
38960: ST_TO_ADDR
// for i = 16 to 25 do
38961: LD_ADDR_VAR 0 4
38965: PUSH
38966: DOUBLE
38967: LD_INT 16
38969: DEC
38970: ST_TO_ADDR
38971: LD_INT 25
38973: PUSH
38974: FOR_TO
38975: IFFALSE 39048
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38977: LD_ADDR_VAR 0 3
38981: PUSH
38982: LD_VAR 0 3
38986: PUSH
38987: LD_INT 22
38989: PUSH
38990: LD_VAR 0 1
38994: PPUSH
38995: CALL_OW 255
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 91
39006: PUSH
39007: LD_VAR 0 1
39011: PUSH
39012: LD_INT 6
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 30
39022: PUSH
39023: LD_VAR 0 4
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: PUSH
39037: EMPTY
39038: LIST
39039: PPUSH
39040: CALL_OW 69
39044: ADD
39045: ST_TO_ADDR
39046: GO 38974
39048: POP
39049: POP
// for i = 1 to tmp do
39050: LD_ADDR_VAR 0 4
39054: PUSH
39055: DOUBLE
39056: LD_INT 1
39058: DEC
39059: ST_TO_ADDR
39060: LD_VAR 0 3
39064: PUSH
39065: FOR_TO
39066: IFFALSE 39154
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39068: LD_ADDR_VAR 0 5
39072: PUSH
39073: LD_VAR 0 5
39077: PUSH
39078: LD_VAR 0 3
39082: PUSH
39083: LD_VAR 0 4
39087: ARRAY
39088: PPUSH
39089: CALL_OW 266
39093: PUSH
39094: LD_VAR 0 3
39098: PUSH
39099: LD_VAR 0 4
39103: ARRAY
39104: PPUSH
39105: CALL_OW 250
39109: PUSH
39110: LD_VAR 0 3
39114: PUSH
39115: LD_VAR 0 4
39119: ARRAY
39120: PPUSH
39121: CALL_OW 251
39125: PUSH
39126: LD_VAR 0 3
39130: PUSH
39131: LD_VAR 0 4
39135: ARRAY
39136: PPUSH
39137: CALL_OW 254
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: ADD
39151: ST_TO_ADDR
39152: GO 39065
39154: POP
39155: POP
// result := list ;
39156: LD_ADDR_VAR 0 2
39160: PUSH
39161: LD_VAR 0 5
39165: ST_TO_ADDR
// end ;
39166: LD_VAR 0 2
39170: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39171: LD_INT 0
39173: PPUSH
39174: PPUSH
39175: PPUSH
39176: PPUSH
39177: PPUSH
39178: PPUSH
39179: PPUSH
// if not factory then
39180: LD_VAR 0 1
39184: NOT
39185: IFFALSE 39189
// exit ;
39187: GO 39782
// if control = control_apeman then
39189: LD_VAR 0 4
39193: PUSH
39194: LD_INT 5
39196: EQUAL
39197: IFFALSE 39306
// begin tmp := UnitsInside ( factory ) ;
39199: LD_ADDR_VAR 0 8
39203: PUSH
39204: LD_VAR 0 1
39208: PPUSH
39209: CALL_OW 313
39213: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39214: LD_VAR 0 8
39218: PPUSH
39219: LD_INT 25
39221: PUSH
39222: LD_INT 12
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PPUSH
39229: CALL_OW 72
39233: NOT
39234: IFFALSE 39244
// control := control_manual ;
39236: LD_ADDR_VAR 0 4
39240: PUSH
39241: LD_INT 1
39243: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39244: LD_ADDR_VAR 0 8
39248: PUSH
39249: LD_VAR 0 1
39253: PPUSH
39254: CALL 38941 0 1
39258: ST_TO_ADDR
// if tmp then
39259: LD_VAR 0 8
39263: IFFALSE 39306
// begin for i in tmp do
39265: LD_ADDR_VAR 0 7
39269: PUSH
39270: LD_VAR 0 8
39274: PUSH
39275: FOR_IN
39276: IFFALSE 39304
// if i [ 1 ] = b_ext_radio then
39278: LD_VAR 0 7
39282: PUSH
39283: LD_INT 1
39285: ARRAY
39286: PUSH
39287: LD_INT 22
39289: EQUAL
39290: IFFALSE 39302
// begin control := control_remote ;
39292: LD_ADDR_VAR 0 4
39296: PUSH
39297: LD_INT 2
39299: ST_TO_ADDR
// break ;
39300: GO 39304
// end ;
39302: GO 39275
39304: POP
39305: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39306: LD_VAR 0 1
39310: PPUSH
39311: LD_VAR 0 2
39315: PPUSH
39316: LD_VAR 0 3
39320: PPUSH
39321: LD_VAR 0 4
39325: PPUSH
39326: LD_VAR 0 5
39330: PPUSH
39331: CALL_OW 448
39335: IFFALSE 39370
// begin result := [ chassis , engine , control , weapon ] ;
39337: LD_ADDR_VAR 0 6
39341: PUSH
39342: LD_VAR 0 2
39346: PUSH
39347: LD_VAR 0 3
39351: PUSH
39352: LD_VAR 0 4
39356: PUSH
39357: LD_VAR 0 5
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: ST_TO_ADDR
// exit ;
39368: GO 39782
// end ; _chassis := AvailableChassisList ( factory ) ;
39370: LD_ADDR_VAR 0 9
39374: PUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 475
39384: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39385: LD_ADDR_VAR 0 11
39389: PUSH
39390: LD_VAR 0 1
39394: PPUSH
39395: CALL_OW 476
39399: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39400: LD_ADDR_VAR 0 12
39404: PUSH
39405: LD_VAR 0 1
39409: PPUSH
39410: CALL_OW 477
39414: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39415: LD_ADDR_VAR 0 10
39419: PUSH
39420: LD_VAR 0 1
39424: PPUSH
39425: CALL_OW 478
39429: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39430: LD_VAR 0 9
39434: NOT
39435: PUSH
39436: LD_VAR 0 11
39440: NOT
39441: OR
39442: PUSH
39443: LD_VAR 0 12
39447: NOT
39448: OR
39449: PUSH
39450: LD_VAR 0 10
39454: NOT
39455: OR
39456: IFFALSE 39491
// begin result := [ chassis , engine , control , weapon ] ;
39458: LD_ADDR_VAR 0 6
39462: PUSH
39463: LD_VAR 0 2
39467: PUSH
39468: LD_VAR 0 3
39472: PUSH
39473: LD_VAR 0 4
39477: PUSH
39478: LD_VAR 0 5
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: ST_TO_ADDR
// exit ;
39489: GO 39782
// end ; if not chassis in _chassis then
39491: LD_VAR 0 2
39495: PUSH
39496: LD_VAR 0 9
39500: IN
39501: NOT
39502: IFFALSE 39528
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39504: LD_ADDR_VAR 0 2
39508: PUSH
39509: LD_VAR 0 9
39513: PUSH
39514: LD_INT 1
39516: PPUSH
39517: LD_VAR 0 9
39521: PPUSH
39522: CALL_OW 12
39526: ARRAY
39527: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39528: LD_VAR 0 2
39532: PPUSH
39533: LD_VAR 0 3
39537: PPUSH
39538: CALL 39787 0 2
39542: NOT
39543: IFFALSE 39602
// repeat engine := _engine [ 1 ] ;
39545: LD_ADDR_VAR 0 3
39549: PUSH
39550: LD_VAR 0 11
39554: PUSH
39555: LD_INT 1
39557: ARRAY
39558: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39559: LD_ADDR_VAR 0 11
39563: PUSH
39564: LD_VAR 0 11
39568: PPUSH
39569: LD_INT 1
39571: PPUSH
39572: CALL_OW 3
39576: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39577: LD_VAR 0 2
39581: PPUSH
39582: LD_VAR 0 3
39586: PPUSH
39587: CALL 39787 0 2
39591: PUSH
39592: LD_VAR 0 11
39596: PUSH
39597: EMPTY
39598: EQUAL
39599: OR
39600: IFFALSE 39545
// if not control in _control then
39602: LD_VAR 0 4
39606: PUSH
39607: LD_VAR 0 12
39611: IN
39612: NOT
39613: IFFALSE 39639
// control := _control [ rand ( 1 , _control ) ] ;
39615: LD_ADDR_VAR 0 4
39619: PUSH
39620: LD_VAR 0 12
39624: PUSH
39625: LD_INT 1
39627: PPUSH
39628: LD_VAR 0 12
39632: PPUSH
39633: CALL_OW 12
39637: ARRAY
39638: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39639: LD_VAR 0 2
39643: PPUSH
39644: LD_VAR 0 5
39648: PPUSH
39649: CALL 40007 0 2
39653: NOT
39654: IFFALSE 39713
// repeat weapon := _weapon [ 1 ] ;
39656: LD_ADDR_VAR 0 5
39660: PUSH
39661: LD_VAR 0 10
39665: PUSH
39666: LD_INT 1
39668: ARRAY
39669: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39670: LD_ADDR_VAR 0 10
39674: PUSH
39675: LD_VAR 0 10
39679: PPUSH
39680: LD_INT 1
39682: PPUSH
39683: CALL_OW 3
39687: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39688: LD_VAR 0 2
39692: PPUSH
39693: LD_VAR 0 5
39697: PPUSH
39698: CALL 40007 0 2
39702: PUSH
39703: LD_VAR 0 10
39707: PUSH
39708: EMPTY
39709: EQUAL
39710: OR
39711: IFFALSE 39656
// result := [ ] ;
39713: LD_ADDR_VAR 0 6
39717: PUSH
39718: EMPTY
39719: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39720: LD_VAR 0 1
39724: PPUSH
39725: LD_VAR 0 2
39729: PPUSH
39730: LD_VAR 0 3
39734: PPUSH
39735: LD_VAR 0 4
39739: PPUSH
39740: LD_VAR 0 5
39744: PPUSH
39745: CALL_OW 448
39749: IFFALSE 39782
// result := [ chassis , engine , control , weapon ] ;
39751: LD_ADDR_VAR 0 6
39755: PUSH
39756: LD_VAR 0 2
39760: PUSH
39761: LD_VAR 0 3
39765: PUSH
39766: LD_VAR 0 4
39770: PUSH
39771: LD_VAR 0 5
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: ST_TO_ADDR
// end ;
39782: LD_VAR 0 6
39786: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39787: LD_INT 0
39789: PPUSH
// if not chassis or not engine then
39790: LD_VAR 0 1
39794: NOT
39795: PUSH
39796: LD_VAR 0 2
39800: NOT
39801: OR
39802: IFFALSE 39806
// exit ;
39804: GO 40002
// case engine of engine_solar :
39806: LD_VAR 0 2
39810: PUSH
39811: LD_INT 2
39813: DOUBLE
39814: EQUAL
39815: IFTRUE 39819
39817: GO 39857
39819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39820: LD_ADDR_VAR 0 3
39824: PUSH
39825: LD_INT 11
39827: PUSH
39828: LD_INT 12
39830: PUSH
39831: LD_INT 13
39833: PUSH
39834: LD_INT 14
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: LD_INT 3
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: ST_TO_ADDR
39855: GO 39986
39857: LD_INT 1
39859: DOUBLE
39860: EQUAL
39861: IFTRUE 39865
39863: GO 39927
39865: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39866: LD_ADDR_VAR 0 3
39870: PUSH
39871: LD_INT 11
39873: PUSH
39874: LD_INT 12
39876: PUSH
39877: LD_INT 13
39879: PUSH
39880: LD_INT 14
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: LD_INT 3
39891: PUSH
39892: LD_INT 4
39894: PUSH
39895: LD_INT 5
39897: PUSH
39898: LD_INT 21
39900: PUSH
39901: LD_INT 23
39903: PUSH
39904: LD_INT 22
39906: PUSH
39907: LD_INT 24
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: ST_TO_ADDR
39925: GO 39986
39927: LD_INT 3
39929: DOUBLE
39930: EQUAL
39931: IFTRUE 39935
39933: GO 39985
39935: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39936: LD_ADDR_VAR 0 3
39940: PUSH
39941: LD_INT 13
39943: PUSH
39944: LD_INT 14
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: LD_INT 3
39952: PUSH
39953: LD_INT 4
39955: PUSH
39956: LD_INT 5
39958: PUSH
39959: LD_INT 21
39961: PUSH
39962: LD_INT 22
39964: PUSH
39965: LD_INT 23
39967: PUSH
39968: LD_INT 24
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: ST_TO_ADDR
39983: GO 39986
39985: POP
// result := ( chassis in result ) ;
39986: LD_ADDR_VAR 0 3
39990: PUSH
39991: LD_VAR 0 1
39995: PUSH
39996: LD_VAR 0 3
40000: IN
40001: ST_TO_ADDR
// end ;
40002: LD_VAR 0 3
40006: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40007: LD_INT 0
40009: PPUSH
// if not chassis or not weapon then
40010: LD_VAR 0 1
40014: NOT
40015: PUSH
40016: LD_VAR 0 2
40020: NOT
40021: OR
40022: IFFALSE 40026
// exit ;
40024: GO 41088
// case weapon of us_machine_gun :
40026: LD_VAR 0 2
40030: PUSH
40031: LD_INT 2
40033: DOUBLE
40034: EQUAL
40035: IFTRUE 40039
40037: GO 40069
40039: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40040: LD_ADDR_VAR 0 3
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 2
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: LD_INT 4
40056: PUSH
40057: LD_INT 5
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: ST_TO_ADDR
40067: GO 41072
40069: LD_INT 3
40071: DOUBLE
40072: EQUAL
40073: IFTRUE 40077
40075: GO 40107
40077: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40078: LD_ADDR_VAR 0 3
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 3
40091: PUSH
40092: LD_INT 4
40094: PUSH
40095: LD_INT 5
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: ST_TO_ADDR
40105: GO 41072
40107: LD_INT 11
40109: DOUBLE
40110: EQUAL
40111: IFTRUE 40115
40113: GO 40145
40115: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40116: LD_ADDR_VAR 0 3
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: LD_INT 3
40129: PUSH
40130: LD_INT 4
40132: PUSH
40133: LD_INT 5
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: ST_TO_ADDR
40143: GO 41072
40145: LD_INT 4
40147: DOUBLE
40148: EQUAL
40149: IFTRUE 40153
40151: GO 40179
40153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40154: LD_ADDR_VAR 0 3
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: LD_INT 4
40167: PUSH
40168: LD_INT 5
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: ST_TO_ADDR
40177: GO 41072
40179: LD_INT 5
40181: DOUBLE
40182: EQUAL
40183: IFTRUE 40187
40185: GO 40213
40187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40188: LD_ADDR_VAR 0 3
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: LD_INT 3
40198: PUSH
40199: LD_INT 4
40201: PUSH
40202: LD_INT 5
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: ST_TO_ADDR
40211: GO 41072
40213: LD_INT 9
40215: DOUBLE
40216: EQUAL
40217: IFTRUE 40221
40219: GO 40247
40221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40222: LD_ADDR_VAR 0 3
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: LD_INT 3
40232: PUSH
40233: LD_INT 4
40235: PUSH
40236: LD_INT 5
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: ST_TO_ADDR
40245: GO 41072
40247: LD_INT 7
40249: DOUBLE
40250: EQUAL
40251: IFTRUE 40255
40253: GO 40281
40255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40256: LD_ADDR_VAR 0 3
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 3
40266: PUSH
40267: LD_INT 4
40269: PUSH
40270: LD_INT 5
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: ST_TO_ADDR
40279: GO 41072
40281: LD_INT 12
40283: DOUBLE
40284: EQUAL
40285: IFTRUE 40289
40287: GO 40315
40289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40290: LD_ADDR_VAR 0 3
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 3
40300: PUSH
40301: LD_INT 4
40303: PUSH
40304: LD_INT 5
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: ST_TO_ADDR
40313: GO 41072
40315: LD_INT 13
40317: DOUBLE
40318: EQUAL
40319: IFTRUE 40323
40321: GO 40349
40323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40324: LD_ADDR_VAR 0 3
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: LD_INT 3
40334: PUSH
40335: LD_INT 4
40337: PUSH
40338: LD_INT 5
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: ST_TO_ADDR
40347: GO 41072
40349: LD_INT 14
40351: DOUBLE
40352: EQUAL
40353: IFTRUE 40357
40355: GO 40375
40357: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40358: LD_ADDR_VAR 0 3
40362: PUSH
40363: LD_INT 4
40365: PUSH
40366: LD_INT 5
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: ST_TO_ADDR
40373: GO 41072
40375: LD_INT 6
40377: DOUBLE
40378: EQUAL
40379: IFTRUE 40383
40381: GO 40401
40383: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40384: LD_ADDR_VAR 0 3
40388: PUSH
40389: LD_INT 4
40391: PUSH
40392: LD_INT 5
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: ST_TO_ADDR
40399: GO 41072
40401: LD_INT 10
40403: DOUBLE
40404: EQUAL
40405: IFTRUE 40409
40407: GO 40427
40409: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40410: LD_ADDR_VAR 0 3
40414: PUSH
40415: LD_INT 4
40417: PUSH
40418: LD_INT 5
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: ST_TO_ADDR
40425: GO 41072
40427: LD_INT 22
40429: DOUBLE
40430: EQUAL
40431: IFTRUE 40435
40433: GO 40461
40435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40436: LD_ADDR_VAR 0 3
40440: PUSH
40441: LD_INT 11
40443: PUSH
40444: LD_INT 12
40446: PUSH
40447: LD_INT 13
40449: PUSH
40450: LD_INT 14
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: ST_TO_ADDR
40459: GO 41072
40461: LD_INT 23
40463: DOUBLE
40464: EQUAL
40465: IFTRUE 40469
40467: GO 40495
40469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40470: LD_ADDR_VAR 0 3
40474: PUSH
40475: LD_INT 11
40477: PUSH
40478: LD_INT 12
40480: PUSH
40481: LD_INT 13
40483: PUSH
40484: LD_INT 14
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: ST_TO_ADDR
40493: GO 41072
40495: LD_INT 24
40497: DOUBLE
40498: EQUAL
40499: IFTRUE 40503
40501: GO 40529
40503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40504: LD_ADDR_VAR 0 3
40508: PUSH
40509: LD_INT 11
40511: PUSH
40512: LD_INT 12
40514: PUSH
40515: LD_INT 13
40517: PUSH
40518: LD_INT 14
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: ST_TO_ADDR
40527: GO 41072
40529: LD_INT 30
40531: DOUBLE
40532: EQUAL
40533: IFTRUE 40537
40535: GO 40563
40537: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40538: LD_ADDR_VAR 0 3
40542: PUSH
40543: LD_INT 11
40545: PUSH
40546: LD_INT 12
40548: PUSH
40549: LD_INT 13
40551: PUSH
40552: LD_INT 14
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: ST_TO_ADDR
40561: GO 41072
40563: LD_INT 25
40565: DOUBLE
40566: EQUAL
40567: IFTRUE 40571
40569: GO 40589
40571: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40572: LD_ADDR_VAR 0 3
40576: PUSH
40577: LD_INT 13
40579: PUSH
40580: LD_INT 14
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: ST_TO_ADDR
40587: GO 41072
40589: LD_INT 27
40591: DOUBLE
40592: EQUAL
40593: IFTRUE 40597
40595: GO 40615
40597: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40598: LD_ADDR_VAR 0 3
40602: PUSH
40603: LD_INT 13
40605: PUSH
40606: LD_INT 14
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: ST_TO_ADDR
40613: GO 41072
40615: LD_EXP 48
40619: DOUBLE
40620: EQUAL
40621: IFTRUE 40625
40623: GO 40651
40625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_INT 11
40633: PUSH
40634: LD_INT 12
40636: PUSH
40637: LD_INT 13
40639: PUSH
40640: LD_INT 14
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
40649: GO 41072
40651: LD_INT 28
40653: DOUBLE
40654: EQUAL
40655: IFTRUE 40659
40657: GO 40677
40659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40660: LD_ADDR_VAR 0 3
40664: PUSH
40665: LD_INT 13
40667: PUSH
40668: LD_INT 14
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: ST_TO_ADDR
40675: GO 41072
40677: LD_INT 29
40679: DOUBLE
40680: EQUAL
40681: IFTRUE 40685
40683: GO 40703
40685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40686: LD_ADDR_VAR 0 3
40690: PUSH
40691: LD_INT 13
40693: PUSH
40694: LD_INT 14
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: ST_TO_ADDR
40701: GO 41072
40703: LD_INT 31
40705: DOUBLE
40706: EQUAL
40707: IFTRUE 40711
40709: GO 40729
40711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40712: LD_ADDR_VAR 0 3
40716: PUSH
40717: LD_INT 13
40719: PUSH
40720: LD_INT 14
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: ST_TO_ADDR
40727: GO 41072
40729: LD_INT 26
40731: DOUBLE
40732: EQUAL
40733: IFTRUE 40737
40735: GO 40755
40737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40738: LD_ADDR_VAR 0 3
40742: PUSH
40743: LD_INT 13
40745: PUSH
40746: LD_INT 14
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: ST_TO_ADDR
40753: GO 41072
40755: LD_INT 42
40757: DOUBLE
40758: EQUAL
40759: IFTRUE 40763
40761: GO 40789
40763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40764: LD_ADDR_VAR 0 3
40768: PUSH
40769: LD_INT 21
40771: PUSH
40772: LD_INT 22
40774: PUSH
40775: LD_INT 23
40777: PUSH
40778: LD_INT 24
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: ST_TO_ADDR
40787: GO 41072
40789: LD_INT 43
40791: DOUBLE
40792: EQUAL
40793: IFTRUE 40797
40795: GO 40823
40797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40798: LD_ADDR_VAR 0 3
40802: PUSH
40803: LD_INT 21
40805: PUSH
40806: LD_INT 22
40808: PUSH
40809: LD_INT 23
40811: PUSH
40812: LD_INT 24
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: ST_TO_ADDR
40821: GO 41072
40823: LD_INT 44
40825: DOUBLE
40826: EQUAL
40827: IFTRUE 40831
40829: GO 40857
40831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40832: LD_ADDR_VAR 0 3
40836: PUSH
40837: LD_INT 21
40839: PUSH
40840: LD_INT 22
40842: PUSH
40843: LD_INT 23
40845: PUSH
40846: LD_INT 24
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
40855: GO 41072
40857: LD_INT 45
40859: DOUBLE
40860: EQUAL
40861: IFTRUE 40865
40863: GO 40891
40865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40866: LD_ADDR_VAR 0 3
40870: PUSH
40871: LD_INT 21
40873: PUSH
40874: LD_INT 22
40876: PUSH
40877: LD_INT 23
40879: PUSH
40880: LD_INT 24
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
40889: GO 41072
40891: LD_INT 49
40893: DOUBLE
40894: EQUAL
40895: IFTRUE 40899
40897: GO 40925
40899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40900: LD_ADDR_VAR 0 3
40904: PUSH
40905: LD_INT 21
40907: PUSH
40908: LD_INT 22
40910: PUSH
40911: LD_INT 23
40913: PUSH
40914: LD_INT 24
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: ST_TO_ADDR
40923: GO 41072
40925: LD_INT 51
40927: DOUBLE
40928: EQUAL
40929: IFTRUE 40933
40931: GO 40959
40933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40934: LD_ADDR_VAR 0 3
40938: PUSH
40939: LD_INT 21
40941: PUSH
40942: LD_INT 22
40944: PUSH
40945: LD_INT 23
40947: PUSH
40948: LD_INT 24
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: ST_TO_ADDR
40957: GO 41072
40959: LD_INT 52
40961: DOUBLE
40962: EQUAL
40963: IFTRUE 40967
40965: GO 40993
40967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40968: LD_ADDR_VAR 0 3
40972: PUSH
40973: LD_INT 21
40975: PUSH
40976: LD_INT 22
40978: PUSH
40979: LD_INT 23
40981: PUSH
40982: LD_INT 24
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: ST_TO_ADDR
40991: GO 41072
40993: LD_INT 53
40995: DOUBLE
40996: EQUAL
40997: IFTRUE 41001
40999: GO 41019
41001: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41002: LD_ADDR_VAR 0 3
41006: PUSH
41007: LD_INT 23
41009: PUSH
41010: LD_INT 24
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: ST_TO_ADDR
41017: GO 41072
41019: LD_INT 46
41021: DOUBLE
41022: EQUAL
41023: IFTRUE 41027
41025: GO 41045
41027: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41028: LD_ADDR_VAR 0 3
41032: PUSH
41033: LD_INT 23
41035: PUSH
41036: LD_INT 24
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: ST_TO_ADDR
41043: GO 41072
41045: LD_INT 47
41047: DOUBLE
41048: EQUAL
41049: IFTRUE 41053
41051: GO 41071
41053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41054: LD_ADDR_VAR 0 3
41058: PUSH
41059: LD_INT 23
41061: PUSH
41062: LD_INT 24
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: ST_TO_ADDR
41069: GO 41072
41071: POP
// result := ( chassis in result ) ;
41072: LD_ADDR_VAR 0 3
41076: PUSH
41077: LD_VAR 0 1
41081: PUSH
41082: LD_VAR 0 3
41086: IN
41087: ST_TO_ADDR
// end ;
41088: LD_VAR 0 3
41092: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41093: LD_INT 0
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
41101: PPUSH
// result := array ;
41102: LD_ADDR_VAR 0 5
41106: PUSH
41107: LD_VAR 0 1
41111: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41112: LD_VAR 0 1
41116: NOT
41117: PUSH
41118: LD_VAR 0 2
41122: NOT
41123: OR
41124: PUSH
41125: LD_VAR 0 3
41129: NOT
41130: OR
41131: PUSH
41132: LD_VAR 0 2
41136: PUSH
41137: LD_VAR 0 1
41141: GREATER
41142: OR
41143: PUSH
41144: LD_VAR 0 3
41148: PUSH
41149: LD_VAR 0 1
41153: GREATER
41154: OR
41155: IFFALSE 41159
// exit ;
41157: GO 41455
// if direction then
41159: LD_VAR 0 4
41163: IFFALSE 41227
// begin d := 1 ;
41165: LD_ADDR_VAR 0 9
41169: PUSH
41170: LD_INT 1
41172: ST_TO_ADDR
// if i_from > i_to then
41173: LD_VAR 0 2
41177: PUSH
41178: LD_VAR 0 3
41182: GREATER
41183: IFFALSE 41209
// length := ( array - i_from ) + i_to else
41185: LD_ADDR_VAR 0 11
41189: PUSH
41190: LD_VAR 0 1
41194: PUSH
41195: LD_VAR 0 2
41199: MINUS
41200: PUSH
41201: LD_VAR 0 3
41205: PLUS
41206: ST_TO_ADDR
41207: GO 41225
// length := i_to - i_from ;
41209: LD_ADDR_VAR 0 11
41213: PUSH
41214: LD_VAR 0 3
41218: PUSH
41219: LD_VAR 0 2
41223: MINUS
41224: ST_TO_ADDR
// end else
41225: GO 41288
// begin d := - 1 ;
41227: LD_ADDR_VAR 0 9
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: ST_TO_ADDR
// if i_from > i_to then
41236: LD_VAR 0 2
41240: PUSH
41241: LD_VAR 0 3
41245: GREATER
41246: IFFALSE 41266
// length := i_from - i_to else
41248: LD_ADDR_VAR 0 11
41252: PUSH
41253: LD_VAR 0 2
41257: PUSH
41258: LD_VAR 0 3
41262: MINUS
41263: ST_TO_ADDR
41264: GO 41288
// length := ( array - i_to ) + i_from ;
41266: LD_ADDR_VAR 0 11
41270: PUSH
41271: LD_VAR 0 1
41275: PUSH
41276: LD_VAR 0 3
41280: MINUS
41281: PUSH
41282: LD_VAR 0 2
41286: PLUS
41287: ST_TO_ADDR
// end ; if not length then
41288: LD_VAR 0 11
41292: NOT
41293: IFFALSE 41297
// exit ;
41295: GO 41455
// tmp := array ;
41297: LD_ADDR_VAR 0 10
41301: PUSH
41302: LD_VAR 0 1
41306: ST_TO_ADDR
// for i = 1 to length do
41307: LD_ADDR_VAR 0 6
41311: PUSH
41312: DOUBLE
41313: LD_INT 1
41315: DEC
41316: ST_TO_ADDR
41317: LD_VAR 0 11
41321: PUSH
41322: FOR_TO
41323: IFFALSE 41443
// begin for j = 1 to array do
41325: LD_ADDR_VAR 0 7
41329: PUSH
41330: DOUBLE
41331: LD_INT 1
41333: DEC
41334: ST_TO_ADDR
41335: LD_VAR 0 1
41339: PUSH
41340: FOR_TO
41341: IFFALSE 41429
// begin k := j + d ;
41343: LD_ADDR_VAR 0 8
41347: PUSH
41348: LD_VAR 0 7
41352: PUSH
41353: LD_VAR 0 9
41357: PLUS
41358: ST_TO_ADDR
// if k > array then
41359: LD_VAR 0 8
41363: PUSH
41364: LD_VAR 0 1
41368: GREATER
41369: IFFALSE 41379
// k := 1 ;
41371: LD_ADDR_VAR 0 8
41375: PUSH
41376: LD_INT 1
41378: ST_TO_ADDR
// if not k then
41379: LD_VAR 0 8
41383: NOT
41384: IFFALSE 41396
// k := array ;
41386: LD_ADDR_VAR 0 8
41390: PUSH
41391: LD_VAR 0 1
41395: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41396: LD_ADDR_VAR 0 10
41400: PUSH
41401: LD_VAR 0 10
41405: PPUSH
41406: LD_VAR 0 8
41410: PPUSH
41411: LD_VAR 0 1
41415: PUSH
41416: LD_VAR 0 7
41420: ARRAY
41421: PPUSH
41422: CALL_OW 1
41426: ST_TO_ADDR
// end ;
41427: GO 41340
41429: POP
41430: POP
// array := tmp ;
41431: LD_ADDR_VAR 0 1
41435: PUSH
41436: LD_VAR 0 10
41440: ST_TO_ADDR
// end ;
41441: GO 41322
41443: POP
41444: POP
// result := array ;
41445: LD_ADDR_VAR 0 5
41449: PUSH
41450: LD_VAR 0 1
41454: ST_TO_ADDR
// end ;
41455: LD_VAR 0 5
41459: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41460: LD_INT 0
41462: PPUSH
41463: PPUSH
// result := 0 ;
41464: LD_ADDR_VAR 0 3
41468: PUSH
41469: LD_INT 0
41471: ST_TO_ADDR
// if not array or not value in array then
41472: LD_VAR 0 1
41476: NOT
41477: PUSH
41478: LD_VAR 0 2
41482: PUSH
41483: LD_VAR 0 1
41487: IN
41488: NOT
41489: OR
41490: IFFALSE 41494
// exit ;
41492: GO 41548
// for i = 1 to array do
41494: LD_ADDR_VAR 0 4
41498: PUSH
41499: DOUBLE
41500: LD_INT 1
41502: DEC
41503: ST_TO_ADDR
41504: LD_VAR 0 1
41508: PUSH
41509: FOR_TO
41510: IFFALSE 41546
// if value = array [ i ] then
41512: LD_VAR 0 2
41516: PUSH
41517: LD_VAR 0 1
41521: PUSH
41522: LD_VAR 0 4
41526: ARRAY
41527: EQUAL
41528: IFFALSE 41544
// begin result := i ;
41530: LD_ADDR_VAR 0 3
41534: PUSH
41535: LD_VAR 0 4
41539: ST_TO_ADDR
// exit ;
41540: POP
41541: POP
41542: GO 41548
// end ;
41544: GO 41509
41546: POP
41547: POP
// end ;
41548: LD_VAR 0 3
41552: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41553: LD_INT 0
41555: PPUSH
// vc_chassis := chassis ;
41556: LD_ADDR_OWVAR 37
41560: PUSH
41561: LD_VAR 0 1
41565: ST_TO_ADDR
// vc_engine := engine ;
41566: LD_ADDR_OWVAR 39
41570: PUSH
41571: LD_VAR 0 2
41575: ST_TO_ADDR
// vc_control := control ;
41576: LD_ADDR_OWVAR 38
41580: PUSH
41581: LD_VAR 0 3
41585: ST_TO_ADDR
// vc_weapon := weapon ;
41586: LD_ADDR_OWVAR 40
41590: PUSH
41591: LD_VAR 0 4
41595: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41596: LD_ADDR_OWVAR 41
41600: PUSH
41601: LD_VAR 0 5
41605: ST_TO_ADDR
// end ;
41606: LD_VAR 0 6
41610: RET
// export function WantPlant ( unit ) ; var task ; begin
41611: LD_INT 0
41613: PPUSH
41614: PPUSH
// result := false ;
41615: LD_ADDR_VAR 0 2
41619: PUSH
41620: LD_INT 0
41622: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41623: LD_ADDR_VAR 0 3
41627: PUSH
41628: LD_VAR 0 1
41632: PPUSH
41633: CALL_OW 437
41637: ST_TO_ADDR
// if task then
41638: LD_VAR 0 3
41642: IFFALSE 41670
// if task [ 1 ] [ 1 ] = p then
41644: LD_VAR 0 3
41648: PUSH
41649: LD_INT 1
41651: ARRAY
41652: PUSH
41653: LD_INT 1
41655: ARRAY
41656: PUSH
41657: LD_STRING p
41659: EQUAL
41660: IFFALSE 41670
// result := true ;
41662: LD_ADDR_VAR 0 2
41666: PUSH
41667: LD_INT 1
41669: ST_TO_ADDR
// end ;
41670: LD_VAR 0 2
41674: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41675: LD_INT 0
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
// if pos < 1 then
41681: LD_VAR 0 2
41685: PUSH
41686: LD_INT 1
41688: LESS
41689: IFFALSE 41693
// exit ;
41691: GO 41996
// if pos = 1 then
41693: LD_VAR 0 2
41697: PUSH
41698: LD_INT 1
41700: EQUAL
41701: IFFALSE 41734
// result := Replace ( arr , pos [ 1 ] , value ) else
41703: LD_ADDR_VAR 0 4
41707: PUSH
41708: LD_VAR 0 1
41712: PPUSH
41713: LD_VAR 0 2
41717: PUSH
41718: LD_INT 1
41720: ARRAY
41721: PPUSH
41722: LD_VAR 0 3
41726: PPUSH
41727: CALL_OW 1
41731: ST_TO_ADDR
41732: GO 41996
// begin tmp := arr ;
41734: LD_ADDR_VAR 0 6
41738: PUSH
41739: LD_VAR 0 1
41743: ST_TO_ADDR
// s_arr := [ tmp ] ;
41744: LD_ADDR_VAR 0 7
41748: PUSH
41749: LD_VAR 0 6
41753: PUSH
41754: EMPTY
41755: LIST
41756: ST_TO_ADDR
// for i = 1 to pos - 1 do
41757: LD_ADDR_VAR 0 5
41761: PUSH
41762: DOUBLE
41763: LD_INT 1
41765: DEC
41766: ST_TO_ADDR
41767: LD_VAR 0 2
41771: PUSH
41772: LD_INT 1
41774: MINUS
41775: PUSH
41776: FOR_TO
41777: IFFALSE 41822
// begin tmp := tmp [ pos [ i ] ] ;
41779: LD_ADDR_VAR 0 6
41783: PUSH
41784: LD_VAR 0 6
41788: PUSH
41789: LD_VAR 0 2
41793: PUSH
41794: LD_VAR 0 5
41798: ARRAY
41799: ARRAY
41800: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41801: LD_ADDR_VAR 0 7
41805: PUSH
41806: LD_VAR 0 7
41810: PUSH
41811: LD_VAR 0 6
41815: PUSH
41816: EMPTY
41817: LIST
41818: ADD
41819: ST_TO_ADDR
// end ;
41820: GO 41776
41822: POP
41823: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41824: LD_ADDR_VAR 0 6
41828: PUSH
41829: LD_VAR 0 6
41833: PPUSH
41834: LD_VAR 0 2
41838: PUSH
41839: LD_VAR 0 2
41843: ARRAY
41844: PPUSH
41845: LD_VAR 0 3
41849: PPUSH
41850: CALL_OW 1
41854: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41855: LD_ADDR_VAR 0 7
41859: PUSH
41860: LD_VAR 0 7
41864: PPUSH
41865: LD_VAR 0 7
41869: PPUSH
41870: LD_VAR 0 6
41874: PPUSH
41875: CALL_OW 1
41879: ST_TO_ADDR
// for i = s_arr downto 2 do
41880: LD_ADDR_VAR 0 5
41884: PUSH
41885: DOUBLE
41886: LD_VAR 0 7
41890: INC
41891: ST_TO_ADDR
41892: LD_INT 2
41894: PUSH
41895: FOR_DOWNTO
41896: IFFALSE 41980
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41898: LD_ADDR_VAR 0 6
41902: PUSH
41903: LD_VAR 0 7
41907: PUSH
41908: LD_VAR 0 5
41912: PUSH
41913: LD_INT 1
41915: MINUS
41916: ARRAY
41917: PPUSH
41918: LD_VAR 0 2
41922: PUSH
41923: LD_VAR 0 5
41927: PUSH
41928: LD_INT 1
41930: MINUS
41931: ARRAY
41932: PPUSH
41933: LD_VAR 0 7
41937: PUSH
41938: LD_VAR 0 5
41942: ARRAY
41943: PPUSH
41944: CALL_OW 1
41948: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41949: LD_ADDR_VAR 0 7
41953: PUSH
41954: LD_VAR 0 7
41958: PPUSH
41959: LD_VAR 0 5
41963: PUSH
41964: LD_INT 1
41966: MINUS
41967: PPUSH
41968: LD_VAR 0 6
41972: PPUSH
41973: CALL_OW 1
41977: ST_TO_ADDR
// end ;
41978: GO 41895
41980: POP
41981: POP
// result := s_arr [ 1 ] ;
41982: LD_ADDR_VAR 0 4
41986: PUSH
41987: LD_VAR 0 7
41991: PUSH
41992: LD_INT 1
41994: ARRAY
41995: ST_TO_ADDR
// end ; end ;
41996: LD_VAR 0 4
42000: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42001: LD_INT 0
42003: PPUSH
42004: PPUSH
// if not list then
42005: LD_VAR 0 1
42009: NOT
42010: IFFALSE 42014
// exit ;
42012: GO 42105
// i := list [ pos1 ] ;
42014: LD_ADDR_VAR 0 5
42018: PUSH
42019: LD_VAR 0 1
42023: PUSH
42024: LD_VAR 0 2
42028: ARRAY
42029: ST_TO_ADDR
// if not i then
42030: LD_VAR 0 5
42034: NOT
42035: IFFALSE 42039
// exit ;
42037: GO 42105
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42039: LD_ADDR_VAR 0 1
42043: PUSH
42044: LD_VAR 0 1
42048: PPUSH
42049: LD_VAR 0 2
42053: PPUSH
42054: LD_VAR 0 1
42058: PUSH
42059: LD_VAR 0 3
42063: ARRAY
42064: PPUSH
42065: CALL_OW 1
42069: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42070: LD_ADDR_VAR 0 1
42074: PUSH
42075: LD_VAR 0 1
42079: PPUSH
42080: LD_VAR 0 3
42084: PPUSH
42085: LD_VAR 0 5
42089: PPUSH
42090: CALL_OW 1
42094: ST_TO_ADDR
// result := list ;
42095: LD_ADDR_VAR 0 4
42099: PUSH
42100: LD_VAR 0 1
42104: ST_TO_ADDR
// end ;
42105: LD_VAR 0 4
42109: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42110: LD_INT 0
42112: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42113: LD_ADDR_VAR 0 5
42117: PUSH
42118: LD_VAR 0 1
42122: PPUSH
42123: CALL_OW 250
42127: PPUSH
42128: LD_VAR 0 1
42132: PPUSH
42133: CALL_OW 251
42137: PPUSH
42138: LD_VAR 0 2
42142: PPUSH
42143: LD_VAR 0 3
42147: PPUSH
42148: LD_VAR 0 4
42152: PPUSH
42153: CALL 42163 0 5
42157: ST_TO_ADDR
// end ;
42158: LD_VAR 0 5
42162: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42163: LD_INT 0
42165: PPUSH
42166: PPUSH
42167: PPUSH
42168: PPUSH
// if not list then
42169: LD_VAR 0 3
42173: NOT
42174: IFFALSE 42178
// exit ;
42176: GO 42566
// result := [ ] ;
42178: LD_ADDR_VAR 0 6
42182: PUSH
42183: EMPTY
42184: ST_TO_ADDR
// for i in list do
42185: LD_ADDR_VAR 0 7
42189: PUSH
42190: LD_VAR 0 3
42194: PUSH
42195: FOR_IN
42196: IFFALSE 42398
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42198: LD_ADDR_VAR 0 9
42202: PUSH
42203: LD_VAR 0 7
42207: PPUSH
42208: LD_VAR 0 1
42212: PPUSH
42213: LD_VAR 0 2
42217: PPUSH
42218: CALL_OW 297
42222: ST_TO_ADDR
// if not result then
42223: LD_VAR 0 6
42227: NOT
42228: IFFALSE 42254
// result := [ [ i , tmp ] ] else
42230: LD_ADDR_VAR 0 6
42234: PUSH
42235: LD_VAR 0 7
42239: PUSH
42240: LD_VAR 0 9
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: EMPTY
42250: LIST
42251: ST_TO_ADDR
42252: GO 42396
// begin if result [ result ] [ 2 ] < tmp then
42254: LD_VAR 0 6
42258: PUSH
42259: LD_VAR 0 6
42263: ARRAY
42264: PUSH
42265: LD_INT 2
42267: ARRAY
42268: PUSH
42269: LD_VAR 0 9
42273: LESS
42274: IFFALSE 42316
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42276: LD_ADDR_VAR 0 6
42280: PUSH
42281: LD_VAR 0 6
42285: PPUSH
42286: LD_VAR 0 6
42290: PUSH
42291: LD_INT 1
42293: PLUS
42294: PPUSH
42295: LD_VAR 0 7
42299: PUSH
42300: LD_VAR 0 9
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PPUSH
42309: CALL_OW 2
42313: ST_TO_ADDR
42314: GO 42396
// for j = 1 to result do
42316: LD_ADDR_VAR 0 8
42320: PUSH
42321: DOUBLE
42322: LD_INT 1
42324: DEC
42325: ST_TO_ADDR
42326: LD_VAR 0 6
42330: PUSH
42331: FOR_TO
42332: IFFALSE 42394
// begin if tmp < result [ j ] [ 2 ] then
42334: LD_VAR 0 9
42338: PUSH
42339: LD_VAR 0 6
42343: PUSH
42344: LD_VAR 0 8
42348: ARRAY
42349: PUSH
42350: LD_INT 2
42352: ARRAY
42353: LESS
42354: IFFALSE 42392
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42356: LD_ADDR_VAR 0 6
42360: PUSH
42361: LD_VAR 0 6
42365: PPUSH
42366: LD_VAR 0 8
42370: PPUSH
42371: LD_VAR 0 7
42375: PUSH
42376: LD_VAR 0 9
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PPUSH
42385: CALL_OW 2
42389: ST_TO_ADDR
// break ;
42390: GO 42394
// end ; end ;
42392: GO 42331
42394: POP
42395: POP
// end ; end ;
42396: GO 42195
42398: POP
42399: POP
// if result and not asc then
42400: LD_VAR 0 6
42404: PUSH
42405: LD_VAR 0 4
42409: NOT
42410: AND
42411: IFFALSE 42486
// begin tmp := result ;
42413: LD_ADDR_VAR 0 9
42417: PUSH
42418: LD_VAR 0 6
42422: ST_TO_ADDR
// for i = tmp downto 1 do
42423: LD_ADDR_VAR 0 7
42427: PUSH
42428: DOUBLE
42429: LD_VAR 0 9
42433: INC
42434: ST_TO_ADDR
42435: LD_INT 1
42437: PUSH
42438: FOR_DOWNTO
42439: IFFALSE 42484
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42441: LD_ADDR_VAR 0 6
42445: PUSH
42446: LD_VAR 0 6
42450: PPUSH
42451: LD_VAR 0 9
42455: PUSH
42456: LD_VAR 0 7
42460: MINUS
42461: PUSH
42462: LD_INT 1
42464: PLUS
42465: PPUSH
42466: LD_VAR 0 9
42470: PUSH
42471: LD_VAR 0 7
42475: ARRAY
42476: PPUSH
42477: CALL_OW 1
42481: ST_TO_ADDR
42482: GO 42438
42484: POP
42485: POP
// end ; tmp := [ ] ;
42486: LD_ADDR_VAR 0 9
42490: PUSH
42491: EMPTY
42492: ST_TO_ADDR
// if mode then
42493: LD_VAR 0 5
42497: IFFALSE 42566
// begin for i = 1 to result do
42499: LD_ADDR_VAR 0 7
42503: PUSH
42504: DOUBLE
42505: LD_INT 1
42507: DEC
42508: ST_TO_ADDR
42509: LD_VAR 0 6
42513: PUSH
42514: FOR_TO
42515: IFFALSE 42554
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42517: LD_ADDR_VAR 0 9
42521: PUSH
42522: LD_VAR 0 9
42526: PPUSH
42527: LD_VAR 0 7
42531: PPUSH
42532: LD_VAR 0 6
42536: PUSH
42537: LD_VAR 0 7
42541: ARRAY
42542: PUSH
42543: LD_INT 1
42545: ARRAY
42546: PPUSH
42547: CALL_OW 1
42551: ST_TO_ADDR
42552: GO 42514
42554: POP
42555: POP
// result := tmp ;
42556: LD_ADDR_VAR 0 6
42560: PUSH
42561: LD_VAR 0 9
42565: ST_TO_ADDR
// end ; end ;
42566: LD_VAR 0 6
42570: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42571: LD_INT 0
42573: PPUSH
42574: PPUSH
42575: PPUSH
42576: PPUSH
42577: PPUSH
42578: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42579: LD_ADDR_VAR 0 5
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: ST_TO_ADDR
// if not x or not y then
42601: LD_VAR 0 2
42605: NOT
42606: PUSH
42607: LD_VAR 0 3
42611: NOT
42612: OR
42613: IFFALSE 42617
// exit ;
42615: GO 44269
// if not range then
42617: LD_VAR 0 4
42621: NOT
42622: IFFALSE 42632
// range := 10 ;
42624: LD_ADDR_VAR 0 4
42628: PUSH
42629: LD_INT 10
42631: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42632: LD_ADDR_VAR 0 8
42636: PUSH
42637: LD_INT 81
42639: PUSH
42640: LD_VAR 0 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 92
42651: PUSH
42652: LD_VAR 0 2
42656: PUSH
42657: LD_VAR 0 3
42661: PUSH
42662: LD_VAR 0 4
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 3
42675: PUSH
42676: LD_INT 21
42678: PUSH
42679: LD_INT 3
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: LIST
42694: PPUSH
42695: CALL_OW 69
42699: ST_TO_ADDR
// if not tmp then
42700: LD_VAR 0 8
42704: NOT
42705: IFFALSE 42709
// exit ;
42707: GO 44269
// for i in tmp do
42709: LD_ADDR_VAR 0 6
42713: PUSH
42714: LD_VAR 0 8
42718: PUSH
42719: FOR_IN
42720: IFFALSE 44244
// begin points := [ 0 , 0 , 0 ] ;
42722: LD_ADDR_VAR 0 9
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
// bpoints := 1 ;
42741: LD_ADDR_VAR 0 10
42745: PUSH
42746: LD_INT 1
42748: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42749: LD_VAR 0 6
42753: PPUSH
42754: CALL_OW 247
42758: PUSH
42759: LD_INT 1
42761: DOUBLE
42762: EQUAL
42763: IFTRUE 42767
42765: GO 43345
42767: POP
// begin if GetClass ( i ) = 1 then
42768: LD_VAR 0 6
42772: PPUSH
42773: CALL_OW 257
42777: PUSH
42778: LD_INT 1
42780: EQUAL
42781: IFFALSE 42802
// points := [ 10 , 5 , 3 ] ;
42783: LD_ADDR_VAR 0 9
42787: PUSH
42788: LD_INT 10
42790: PUSH
42791: LD_INT 5
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: LIST
42801: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42802: LD_VAR 0 6
42806: PPUSH
42807: CALL_OW 257
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: LD_INT 3
42817: PUSH
42818: LD_INT 4
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: IN
42826: IFFALSE 42847
// points := [ 3 , 2 , 1 ] ;
42828: LD_ADDR_VAR 0 9
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42847: LD_VAR 0 6
42851: PPUSH
42852: CALL_OW 257
42856: PUSH
42857: LD_INT 5
42859: EQUAL
42860: IFFALSE 42881
// points := [ 130 , 5 , 2 ] ;
42862: LD_ADDR_VAR 0 9
42866: PUSH
42867: LD_INT 130
42869: PUSH
42870: LD_INT 5
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42881: LD_VAR 0 6
42885: PPUSH
42886: CALL_OW 257
42890: PUSH
42891: LD_INT 8
42893: EQUAL
42894: IFFALSE 42915
// points := [ 35 , 35 , 30 ] ;
42896: LD_ADDR_VAR 0 9
42900: PUSH
42901: LD_INT 35
42903: PUSH
42904: LD_INT 35
42906: PUSH
42907: LD_INT 30
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42915: LD_VAR 0 6
42919: PPUSH
42920: CALL_OW 257
42924: PUSH
42925: LD_INT 9
42927: EQUAL
42928: IFFALSE 42949
// points := [ 20 , 55 , 40 ] ;
42930: LD_ADDR_VAR 0 9
42934: PUSH
42935: LD_INT 20
42937: PUSH
42938: LD_INT 55
42940: PUSH
42941: LD_INT 40
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42949: LD_VAR 0 6
42953: PPUSH
42954: CALL_OW 257
42958: PUSH
42959: LD_INT 12
42961: PUSH
42962: LD_INT 16
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: IN
42969: IFFALSE 42990
// points := [ 5 , 3 , 2 ] ;
42971: LD_ADDR_VAR 0 9
42975: PUSH
42976: LD_INT 5
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42990: LD_VAR 0 6
42994: PPUSH
42995: CALL_OW 257
42999: PUSH
43000: LD_INT 17
43002: EQUAL
43003: IFFALSE 43024
// points := [ 100 , 50 , 75 ] ;
43005: LD_ADDR_VAR 0 9
43009: PUSH
43010: LD_INT 100
43012: PUSH
43013: LD_INT 50
43015: PUSH
43016: LD_INT 75
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43024: LD_VAR 0 6
43028: PPUSH
43029: CALL_OW 257
43033: PUSH
43034: LD_INT 15
43036: EQUAL
43037: IFFALSE 43058
// points := [ 10 , 5 , 3 ] ;
43039: LD_ADDR_VAR 0 9
43043: PUSH
43044: LD_INT 10
43046: PUSH
43047: LD_INT 5
43049: PUSH
43050: LD_INT 3
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43058: LD_VAR 0 6
43062: PPUSH
43063: CALL_OW 257
43067: PUSH
43068: LD_INT 14
43070: EQUAL
43071: IFFALSE 43092
// points := [ 10 , 0 , 0 ] ;
43073: LD_ADDR_VAR 0 9
43077: PUSH
43078: LD_INT 10
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43092: LD_VAR 0 6
43096: PPUSH
43097: CALL_OW 257
43101: PUSH
43102: LD_INT 11
43104: EQUAL
43105: IFFALSE 43126
// points := [ 30 , 10 , 5 ] ;
43107: LD_ADDR_VAR 0 9
43111: PUSH
43112: LD_INT 30
43114: PUSH
43115: LD_INT 10
43117: PUSH
43118: LD_INT 5
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43126: LD_VAR 0 1
43130: PPUSH
43131: LD_INT 5
43133: PPUSH
43134: CALL_OW 321
43138: PUSH
43139: LD_INT 2
43141: EQUAL
43142: IFFALSE 43159
// bpoints := bpoints * 1.8 ;
43144: LD_ADDR_VAR 0 10
43148: PUSH
43149: LD_VAR 0 10
43153: PUSH
43154: LD_REAL  1.80000000000000E+0000
43157: MUL
43158: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43159: LD_VAR 0 6
43163: PPUSH
43164: CALL_OW 257
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: LD_INT 3
43177: PUSH
43178: LD_INT 4
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: IN
43187: PUSH
43188: LD_VAR 0 1
43192: PPUSH
43193: LD_INT 51
43195: PPUSH
43196: CALL_OW 321
43200: PUSH
43201: LD_INT 2
43203: EQUAL
43204: AND
43205: IFFALSE 43222
// bpoints := bpoints * 1.2 ;
43207: LD_ADDR_VAR 0 10
43211: PUSH
43212: LD_VAR 0 10
43216: PUSH
43217: LD_REAL  1.20000000000000E+0000
43220: MUL
43221: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43222: LD_VAR 0 6
43226: PPUSH
43227: CALL_OW 257
43231: PUSH
43232: LD_INT 5
43234: PUSH
43235: LD_INT 7
43237: PUSH
43238: LD_INT 9
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: IN
43246: PUSH
43247: LD_VAR 0 1
43251: PPUSH
43252: LD_INT 52
43254: PPUSH
43255: CALL_OW 321
43259: PUSH
43260: LD_INT 2
43262: EQUAL
43263: AND
43264: IFFALSE 43281
// bpoints := bpoints * 1.5 ;
43266: LD_ADDR_VAR 0 10
43270: PUSH
43271: LD_VAR 0 10
43275: PUSH
43276: LD_REAL  1.50000000000000E+0000
43279: MUL
43280: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43281: LD_VAR 0 1
43285: PPUSH
43286: LD_INT 66
43288: PPUSH
43289: CALL_OW 321
43293: PUSH
43294: LD_INT 2
43296: EQUAL
43297: IFFALSE 43314
// bpoints := bpoints * 1.1 ;
43299: LD_ADDR_VAR 0 10
43303: PUSH
43304: LD_VAR 0 10
43308: PUSH
43309: LD_REAL  1.10000000000000E+0000
43312: MUL
43313: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43314: LD_ADDR_VAR 0 10
43318: PUSH
43319: LD_VAR 0 10
43323: PUSH
43324: LD_VAR 0 6
43328: PPUSH
43329: LD_INT 1
43331: PPUSH
43332: CALL_OW 259
43336: PUSH
43337: LD_REAL  1.15000000000000E+0000
43340: MUL
43341: MUL
43342: ST_TO_ADDR
// end ; unit_vehicle :
43343: GO 44173
43345: LD_INT 2
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43353
43351: GO 44161
43353: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43354: LD_VAR 0 6
43358: PPUSH
43359: CALL_OW 264
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 42
43369: PUSH
43370: LD_INT 24
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: IN
43378: IFFALSE 43399
// points := [ 25 , 5 , 3 ] ;
43380: LD_ADDR_VAR 0 9
43384: PUSH
43385: LD_INT 25
43387: PUSH
43388: LD_INT 5
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43399: LD_VAR 0 6
43403: PPUSH
43404: CALL_OW 264
43408: PUSH
43409: LD_INT 4
43411: PUSH
43412: LD_INT 43
43414: PUSH
43415: LD_INT 25
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: IN
43423: IFFALSE 43444
// points := [ 40 , 15 , 5 ] ;
43425: LD_ADDR_VAR 0 9
43429: PUSH
43430: LD_INT 40
43432: PUSH
43433: LD_INT 15
43435: PUSH
43436: LD_INT 5
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43444: LD_VAR 0 6
43448: PPUSH
43449: CALL_OW 264
43453: PUSH
43454: LD_INT 3
43456: PUSH
43457: LD_INT 23
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: IN
43464: IFFALSE 43485
// points := [ 7 , 25 , 8 ] ;
43466: LD_ADDR_VAR 0 9
43470: PUSH
43471: LD_INT 7
43473: PUSH
43474: LD_INT 25
43476: PUSH
43477: LD_INT 8
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43485: LD_VAR 0 6
43489: PPUSH
43490: CALL_OW 264
43494: PUSH
43495: LD_INT 5
43497: PUSH
43498: LD_INT 27
43500: PUSH
43501: LD_INT 44
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: IN
43509: IFFALSE 43530
// points := [ 14 , 50 , 16 ] ;
43511: LD_ADDR_VAR 0 9
43515: PUSH
43516: LD_INT 14
43518: PUSH
43519: LD_INT 50
43521: PUSH
43522: LD_INT 16
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: LIST
43529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43530: LD_VAR 0 6
43534: PPUSH
43535: CALL_OW 264
43539: PUSH
43540: LD_INT 6
43542: PUSH
43543: LD_INT 46
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: IN
43550: IFFALSE 43571
// points := [ 32 , 120 , 70 ] ;
43552: LD_ADDR_VAR 0 9
43556: PUSH
43557: LD_INT 32
43559: PUSH
43560: LD_INT 120
43562: PUSH
43563: LD_INT 70
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43571: LD_VAR 0 6
43575: PPUSH
43576: CALL_OW 264
43580: PUSH
43581: LD_INT 7
43583: PUSH
43584: LD_INT 28
43586: PUSH
43587: LD_INT 45
43589: PUSH
43590: LD_EXP 48
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: IN
43601: IFFALSE 43622
// points := [ 35 , 20 , 45 ] ;
43603: LD_ADDR_VAR 0 9
43607: PUSH
43608: LD_INT 35
43610: PUSH
43611: LD_INT 20
43613: PUSH
43614: LD_INT 45
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: LIST
43621: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43622: LD_VAR 0 6
43626: PPUSH
43627: CALL_OW 264
43631: PUSH
43632: LD_INT 47
43634: PUSH
43635: EMPTY
43636: LIST
43637: IN
43638: IFFALSE 43659
// points := [ 67 , 45 , 75 ] ;
43640: LD_ADDR_VAR 0 9
43644: PUSH
43645: LD_INT 67
43647: PUSH
43648: LD_INT 45
43650: PUSH
43651: LD_INT 75
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43659: LD_VAR 0 6
43663: PPUSH
43664: CALL_OW 264
43668: PUSH
43669: LD_INT 26
43671: PUSH
43672: EMPTY
43673: LIST
43674: IN
43675: IFFALSE 43696
// points := [ 120 , 30 , 80 ] ;
43677: LD_ADDR_VAR 0 9
43681: PUSH
43682: LD_INT 120
43684: PUSH
43685: LD_INT 30
43687: PUSH
43688: LD_INT 80
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43696: LD_VAR 0 6
43700: PPUSH
43701: CALL_OW 264
43705: PUSH
43706: LD_INT 22
43708: PUSH
43709: EMPTY
43710: LIST
43711: IN
43712: IFFALSE 43733
// points := [ 40 , 1 , 1 ] ;
43714: LD_ADDR_VAR 0 9
43718: PUSH
43719: LD_INT 40
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43733: LD_VAR 0 6
43737: PPUSH
43738: CALL_OW 264
43742: PUSH
43743: LD_INT 29
43745: PUSH
43746: EMPTY
43747: LIST
43748: IN
43749: IFFALSE 43770
// points := [ 70 , 200 , 400 ] ;
43751: LD_ADDR_VAR 0 9
43755: PUSH
43756: LD_INT 70
43758: PUSH
43759: LD_INT 200
43761: PUSH
43762: LD_INT 400
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: LIST
43769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43770: LD_VAR 0 6
43774: PPUSH
43775: CALL_OW 264
43779: PUSH
43780: LD_INT 14
43782: PUSH
43783: LD_INT 53
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: IN
43790: IFFALSE 43811
// points := [ 40 , 10 , 20 ] ;
43792: LD_ADDR_VAR 0 9
43796: PUSH
43797: LD_INT 40
43799: PUSH
43800: LD_INT 10
43802: PUSH
43803: LD_INT 20
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43811: LD_VAR 0 6
43815: PPUSH
43816: CALL_OW 264
43820: PUSH
43821: LD_INT 9
43823: PUSH
43824: EMPTY
43825: LIST
43826: IN
43827: IFFALSE 43848
// points := [ 5 , 70 , 20 ] ;
43829: LD_ADDR_VAR 0 9
43833: PUSH
43834: LD_INT 5
43836: PUSH
43837: LD_INT 70
43839: PUSH
43840: LD_INT 20
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43848: LD_VAR 0 6
43852: PPUSH
43853: CALL_OW 264
43857: PUSH
43858: LD_INT 10
43860: PUSH
43861: EMPTY
43862: LIST
43863: IN
43864: IFFALSE 43885
// points := [ 35 , 110 , 70 ] ;
43866: LD_ADDR_VAR 0 9
43870: PUSH
43871: LD_INT 35
43873: PUSH
43874: LD_INT 110
43876: PUSH
43877: LD_INT 70
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43885: LD_VAR 0 6
43889: PPUSH
43890: CALL_OW 265
43894: PUSH
43895: LD_INT 25
43897: EQUAL
43898: IFFALSE 43919
// points := [ 80 , 65 , 100 ] ;
43900: LD_ADDR_VAR 0 9
43904: PUSH
43905: LD_INT 80
43907: PUSH
43908: LD_INT 65
43910: PUSH
43911: LD_INT 100
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: LIST
43918: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43919: LD_VAR 0 6
43923: PPUSH
43924: CALL_OW 263
43928: PUSH
43929: LD_INT 1
43931: EQUAL
43932: IFFALSE 43967
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43934: LD_ADDR_VAR 0 10
43938: PUSH
43939: LD_VAR 0 10
43943: PUSH
43944: LD_VAR 0 6
43948: PPUSH
43949: CALL_OW 311
43953: PPUSH
43954: LD_INT 3
43956: PPUSH
43957: CALL_OW 259
43961: PUSH
43962: LD_INT 4
43964: MUL
43965: MUL
43966: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43967: LD_VAR 0 6
43971: PPUSH
43972: CALL_OW 263
43976: PUSH
43977: LD_INT 2
43979: EQUAL
43980: IFFALSE 44031
// begin j := IsControledBy ( i ) ;
43982: LD_ADDR_VAR 0 7
43986: PUSH
43987: LD_VAR 0 6
43991: PPUSH
43992: CALL_OW 312
43996: ST_TO_ADDR
// if j then
43997: LD_VAR 0 7
44001: IFFALSE 44031
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44003: LD_ADDR_VAR 0 10
44007: PUSH
44008: LD_VAR 0 10
44012: PUSH
44013: LD_VAR 0 7
44017: PPUSH
44018: LD_INT 3
44020: PPUSH
44021: CALL_OW 259
44025: PUSH
44026: LD_INT 3
44028: MUL
44029: MUL
44030: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44031: LD_VAR 0 6
44035: PPUSH
44036: CALL_OW 264
44040: PUSH
44041: LD_INT 5
44043: PUSH
44044: LD_INT 6
44046: PUSH
44047: LD_INT 46
44049: PUSH
44050: LD_INT 44
44052: PUSH
44053: LD_INT 47
44055: PUSH
44056: LD_INT 45
44058: PUSH
44059: LD_INT 28
44061: PUSH
44062: LD_INT 7
44064: PUSH
44065: LD_INT 27
44067: PUSH
44068: LD_INT 29
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: IN
44083: PUSH
44084: LD_VAR 0 1
44088: PPUSH
44089: LD_INT 52
44091: PPUSH
44092: CALL_OW 321
44096: PUSH
44097: LD_INT 2
44099: EQUAL
44100: AND
44101: IFFALSE 44118
// bpoints := bpoints * 1.2 ;
44103: LD_ADDR_VAR 0 10
44107: PUSH
44108: LD_VAR 0 10
44112: PUSH
44113: LD_REAL  1.20000000000000E+0000
44116: MUL
44117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44118: LD_VAR 0 6
44122: PPUSH
44123: CALL_OW 264
44127: PUSH
44128: LD_INT 6
44130: PUSH
44131: LD_INT 46
44133: PUSH
44134: LD_INT 47
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: IN
44142: IFFALSE 44159
// bpoints := bpoints * 1.2 ;
44144: LD_ADDR_VAR 0 10
44148: PUSH
44149: LD_VAR 0 10
44153: PUSH
44154: LD_REAL  1.20000000000000E+0000
44157: MUL
44158: ST_TO_ADDR
// end ; unit_building :
44159: GO 44173
44161: LD_INT 3
44163: DOUBLE
44164: EQUAL
44165: IFTRUE 44169
44167: GO 44172
44169: POP
// ; end ;
44170: GO 44173
44172: POP
// for j = 1 to 3 do
44173: LD_ADDR_VAR 0 7
44177: PUSH
44178: DOUBLE
44179: LD_INT 1
44181: DEC
44182: ST_TO_ADDR
44183: LD_INT 3
44185: PUSH
44186: FOR_TO
44187: IFFALSE 44240
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44189: LD_ADDR_VAR 0 5
44193: PUSH
44194: LD_VAR 0 5
44198: PPUSH
44199: LD_VAR 0 7
44203: PPUSH
44204: LD_VAR 0 5
44208: PUSH
44209: LD_VAR 0 7
44213: ARRAY
44214: PUSH
44215: LD_VAR 0 9
44219: PUSH
44220: LD_VAR 0 7
44224: ARRAY
44225: PUSH
44226: LD_VAR 0 10
44230: MUL
44231: PLUS
44232: PPUSH
44233: CALL_OW 1
44237: ST_TO_ADDR
44238: GO 44186
44240: POP
44241: POP
// end ;
44242: GO 42719
44244: POP
44245: POP
// result := Replace ( result , 4 , tmp ) ;
44246: LD_ADDR_VAR 0 5
44250: PUSH
44251: LD_VAR 0 5
44255: PPUSH
44256: LD_INT 4
44258: PPUSH
44259: LD_VAR 0 8
44263: PPUSH
44264: CALL_OW 1
44268: ST_TO_ADDR
// end ;
44269: LD_VAR 0 5
44273: RET
// export function DangerAtRange ( unit , range ) ; begin
44274: LD_INT 0
44276: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44277: LD_ADDR_VAR 0 3
44281: PUSH
44282: LD_VAR 0 1
44286: PPUSH
44287: CALL_OW 255
44291: PPUSH
44292: LD_VAR 0 1
44296: PPUSH
44297: CALL_OW 250
44301: PPUSH
44302: LD_VAR 0 1
44306: PPUSH
44307: CALL_OW 251
44311: PPUSH
44312: LD_VAR 0 2
44316: PPUSH
44317: CALL 42571 0 4
44321: ST_TO_ADDR
// end ;
44322: LD_VAR 0 3
44326: RET
// export function DangerInArea ( side , area ) ; begin
44327: LD_INT 0
44329: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44330: LD_ADDR_VAR 0 3
44334: PUSH
44335: LD_VAR 0 2
44339: PPUSH
44340: LD_INT 81
44342: PUSH
44343: LD_VAR 0 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PPUSH
44352: CALL_OW 70
44356: ST_TO_ADDR
// end ;
44357: LD_VAR 0 3
44361: RET
// export function IsExtension ( b ) ; begin
44362: LD_INT 0
44364: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44365: LD_ADDR_VAR 0 2
44369: PUSH
44370: LD_VAR 0 1
44374: PUSH
44375: LD_INT 23
44377: PUSH
44378: LD_INT 20
44380: PUSH
44381: LD_INT 22
44383: PUSH
44384: LD_INT 17
44386: PUSH
44387: LD_INT 24
44389: PUSH
44390: LD_INT 21
44392: PUSH
44393: LD_INT 19
44395: PUSH
44396: LD_INT 16
44398: PUSH
44399: LD_INT 25
44401: PUSH
44402: LD_INT 18
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: IN
44417: ST_TO_ADDR
// end ;
44418: LD_VAR 0 2
44422: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44423: LD_INT 0
44425: PPUSH
44426: PPUSH
44427: PPUSH
// result := [ ] ;
44428: LD_ADDR_VAR 0 4
44432: PUSH
44433: EMPTY
44434: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44435: LD_ADDR_VAR 0 5
44439: PUSH
44440: LD_VAR 0 2
44444: PPUSH
44445: LD_INT 21
44447: PUSH
44448: LD_INT 3
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PPUSH
44455: CALL_OW 70
44459: ST_TO_ADDR
// if not tmp then
44460: LD_VAR 0 5
44464: NOT
44465: IFFALSE 44469
// exit ;
44467: GO 44533
// if checkLink then
44469: LD_VAR 0 3
44473: IFFALSE 44523
// begin for i in tmp do
44475: LD_ADDR_VAR 0 6
44479: PUSH
44480: LD_VAR 0 5
44484: PUSH
44485: FOR_IN
44486: IFFALSE 44521
// if GetBase ( i ) <> base then
44488: LD_VAR 0 6
44492: PPUSH
44493: CALL_OW 274
44497: PUSH
44498: LD_VAR 0 1
44502: NONEQUAL
44503: IFFALSE 44519
// ComLinkToBase ( base , i ) ;
44505: LD_VAR 0 1
44509: PPUSH
44510: LD_VAR 0 6
44514: PPUSH
44515: CALL_OW 169
44519: GO 44485
44521: POP
44522: POP
// end ; result := tmp ;
44523: LD_ADDR_VAR 0 4
44527: PUSH
44528: LD_VAR 0 5
44532: ST_TO_ADDR
// end ;
44533: LD_VAR 0 4
44537: RET
// export function ComComplete ( units , b ) ; var i ; begin
44538: LD_INT 0
44540: PPUSH
44541: PPUSH
// if not units then
44542: LD_VAR 0 1
44546: NOT
44547: IFFALSE 44551
// exit ;
44549: GO 44641
// for i in units do
44551: LD_ADDR_VAR 0 4
44555: PUSH
44556: LD_VAR 0 1
44560: PUSH
44561: FOR_IN
44562: IFFALSE 44639
// if BuildingStatus ( b ) = bs_build then
44564: LD_VAR 0 2
44568: PPUSH
44569: CALL_OW 461
44573: PUSH
44574: LD_INT 1
44576: EQUAL
44577: IFFALSE 44637
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44579: LD_VAR 0 4
44583: PPUSH
44584: LD_STRING h
44586: PUSH
44587: LD_VAR 0 2
44591: PPUSH
44592: CALL_OW 250
44596: PUSH
44597: LD_VAR 0 2
44601: PPUSH
44602: CALL_OW 251
44606: PUSH
44607: LD_VAR 0 2
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: PUSH
44630: EMPTY
44631: LIST
44632: PPUSH
44633: CALL_OW 446
44637: GO 44561
44639: POP
44640: POP
// end ;
44641: LD_VAR 0 3
44645: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44646: LD_INT 0
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44654: LD_VAR 0 1
44658: NOT
44659: PUSH
44660: LD_VAR 0 1
44664: PPUSH
44665: CALL_OW 263
44669: PUSH
44670: LD_INT 2
44672: NONEQUAL
44673: OR
44674: IFFALSE 44678
// exit ;
44676: GO 44994
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44678: LD_ADDR_VAR 0 6
44682: PUSH
44683: LD_INT 22
44685: PUSH
44686: LD_VAR 0 1
44690: PPUSH
44691: CALL_OW 255
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 30
44705: PUSH
44706: LD_INT 36
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 34
44715: PUSH
44716: LD_INT 31
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PPUSH
44732: CALL_OW 69
44736: ST_TO_ADDR
// if not tmp then
44737: LD_VAR 0 6
44741: NOT
44742: IFFALSE 44746
// exit ;
44744: GO 44994
// result := [ ] ;
44746: LD_ADDR_VAR 0 2
44750: PUSH
44751: EMPTY
44752: ST_TO_ADDR
// for i in tmp do
44753: LD_ADDR_VAR 0 3
44757: PUSH
44758: LD_VAR 0 6
44762: PUSH
44763: FOR_IN
44764: IFFALSE 44835
// begin t := UnitsInside ( i ) ;
44766: LD_ADDR_VAR 0 4
44770: PUSH
44771: LD_VAR 0 3
44775: PPUSH
44776: CALL_OW 313
44780: ST_TO_ADDR
// if t then
44781: LD_VAR 0 4
44785: IFFALSE 44833
// for j in t do
44787: LD_ADDR_VAR 0 7
44791: PUSH
44792: LD_VAR 0 4
44796: PUSH
44797: FOR_IN
44798: IFFALSE 44831
// result := Replace ( result , result + 1 , j ) ;
44800: LD_ADDR_VAR 0 2
44804: PUSH
44805: LD_VAR 0 2
44809: PPUSH
44810: LD_VAR 0 2
44814: PUSH
44815: LD_INT 1
44817: PLUS
44818: PPUSH
44819: LD_VAR 0 7
44823: PPUSH
44824: CALL_OW 1
44828: ST_TO_ADDR
44829: GO 44797
44831: POP
44832: POP
// end ;
44833: GO 44763
44835: POP
44836: POP
// if not result then
44837: LD_VAR 0 2
44841: NOT
44842: IFFALSE 44846
// exit ;
44844: GO 44994
// mech := result [ 1 ] ;
44846: LD_ADDR_VAR 0 5
44850: PUSH
44851: LD_VAR 0 2
44855: PUSH
44856: LD_INT 1
44858: ARRAY
44859: ST_TO_ADDR
// if result > 1 then
44860: LD_VAR 0 2
44864: PUSH
44865: LD_INT 1
44867: GREATER
44868: IFFALSE 44980
// begin for i = 2 to result do
44870: LD_ADDR_VAR 0 3
44874: PUSH
44875: DOUBLE
44876: LD_INT 2
44878: DEC
44879: ST_TO_ADDR
44880: LD_VAR 0 2
44884: PUSH
44885: FOR_TO
44886: IFFALSE 44978
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44888: LD_ADDR_VAR 0 4
44892: PUSH
44893: LD_VAR 0 2
44897: PUSH
44898: LD_VAR 0 3
44902: ARRAY
44903: PPUSH
44904: LD_INT 3
44906: PPUSH
44907: CALL_OW 259
44911: PUSH
44912: LD_VAR 0 2
44916: PUSH
44917: LD_VAR 0 3
44921: ARRAY
44922: PPUSH
44923: CALL_OW 432
44927: MINUS
44928: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44929: LD_VAR 0 4
44933: PUSH
44934: LD_VAR 0 5
44938: PPUSH
44939: LD_INT 3
44941: PPUSH
44942: CALL_OW 259
44946: PUSH
44947: LD_VAR 0 5
44951: PPUSH
44952: CALL_OW 432
44956: MINUS
44957: GREATEREQUAL
44958: IFFALSE 44976
// mech := result [ i ] ;
44960: LD_ADDR_VAR 0 5
44964: PUSH
44965: LD_VAR 0 2
44969: PUSH
44970: LD_VAR 0 3
44974: ARRAY
44975: ST_TO_ADDR
// end ;
44976: GO 44885
44978: POP
44979: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44980: LD_VAR 0 1
44984: PPUSH
44985: LD_VAR 0 5
44989: PPUSH
44990: CALL_OW 135
// end ;
44994: LD_VAR 0 2
44998: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44999: LD_INT 0
45001: PPUSH
45002: PPUSH
45003: PPUSH
45004: PPUSH
45005: PPUSH
45006: PPUSH
45007: PPUSH
45008: PPUSH
45009: PPUSH
45010: PPUSH
45011: PPUSH
45012: PPUSH
45013: PPUSH
// result := [ ] ;
45014: LD_ADDR_VAR 0 7
45018: PUSH
45019: EMPTY
45020: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45021: LD_VAR 0 1
45025: PPUSH
45026: CALL_OW 266
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: IN
45041: NOT
45042: IFFALSE 45046
// exit ;
45044: GO 46680
// if name then
45046: LD_VAR 0 3
45050: IFFALSE 45066
// SetBName ( base_dep , name ) ;
45052: LD_VAR 0 1
45056: PPUSH
45057: LD_VAR 0 3
45061: PPUSH
45062: CALL_OW 500
// base := GetBase ( base_dep ) ;
45066: LD_ADDR_VAR 0 15
45070: PUSH
45071: LD_VAR 0 1
45075: PPUSH
45076: CALL_OW 274
45080: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45081: LD_ADDR_VAR 0 16
45085: PUSH
45086: LD_VAR 0 1
45090: PPUSH
45091: CALL_OW 255
45095: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45096: LD_ADDR_VAR 0 17
45100: PUSH
45101: LD_VAR 0 1
45105: PPUSH
45106: CALL_OW 248
45110: ST_TO_ADDR
// if sources then
45111: LD_VAR 0 5
45115: IFFALSE 45162
// for i = 1 to 3 do
45117: LD_ADDR_VAR 0 8
45121: PUSH
45122: DOUBLE
45123: LD_INT 1
45125: DEC
45126: ST_TO_ADDR
45127: LD_INT 3
45129: PUSH
45130: FOR_TO
45131: IFFALSE 45160
// AddResourceType ( base , i , sources [ i ] ) ;
45133: LD_VAR 0 15
45137: PPUSH
45138: LD_VAR 0 8
45142: PPUSH
45143: LD_VAR 0 5
45147: PUSH
45148: LD_VAR 0 8
45152: ARRAY
45153: PPUSH
45154: CALL_OW 276
45158: GO 45130
45160: POP
45161: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45162: LD_ADDR_VAR 0 18
45166: PUSH
45167: LD_VAR 0 15
45171: PPUSH
45172: LD_VAR 0 2
45176: PPUSH
45177: LD_INT 1
45179: PPUSH
45180: CALL 44423 0 3
45184: ST_TO_ADDR
// InitHc ;
45185: CALL_OW 19
// InitUc ;
45189: CALL_OW 18
// uc_side := side ;
45193: LD_ADDR_OWVAR 20
45197: PUSH
45198: LD_VAR 0 16
45202: ST_TO_ADDR
// uc_nation := nation ;
45203: LD_ADDR_OWVAR 21
45207: PUSH
45208: LD_VAR 0 17
45212: ST_TO_ADDR
// if buildings then
45213: LD_VAR 0 18
45217: IFFALSE 46539
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45219: LD_ADDR_VAR 0 19
45223: PUSH
45224: LD_VAR 0 18
45228: PPUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 30
45234: PUSH
45235: LD_INT 29
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 30
45244: PUSH
45245: LD_INT 30
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: LIST
45256: PPUSH
45257: CALL_OW 72
45261: ST_TO_ADDR
// if tmp then
45262: LD_VAR 0 19
45266: IFFALSE 45314
// for i in tmp do
45268: LD_ADDR_VAR 0 8
45272: PUSH
45273: LD_VAR 0 19
45277: PUSH
45278: FOR_IN
45279: IFFALSE 45312
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45281: LD_VAR 0 8
45285: PPUSH
45286: CALL_OW 250
45290: PPUSH
45291: LD_VAR 0 8
45295: PPUSH
45296: CALL_OW 251
45300: PPUSH
45301: LD_VAR 0 16
45305: PPUSH
45306: CALL_OW 441
45310: GO 45278
45312: POP
45313: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45314: LD_VAR 0 18
45318: PPUSH
45319: LD_INT 2
45321: PUSH
45322: LD_INT 30
45324: PUSH
45325: LD_INT 32
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 30
45334: PUSH
45335: LD_INT 33
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: LIST
45346: PPUSH
45347: CALL_OW 72
45351: IFFALSE 45439
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45353: LD_ADDR_VAR 0 8
45357: PUSH
45358: LD_VAR 0 18
45362: PPUSH
45363: LD_INT 2
45365: PUSH
45366: LD_INT 30
45368: PUSH
45369: LD_INT 32
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 30
45378: PUSH
45379: LD_INT 33
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: LIST
45390: PPUSH
45391: CALL_OW 72
45395: PUSH
45396: FOR_IN
45397: IFFALSE 45437
// begin if not GetBWeapon ( i ) then
45399: LD_VAR 0 8
45403: PPUSH
45404: CALL_OW 269
45408: NOT
45409: IFFALSE 45435
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45411: LD_VAR 0 8
45415: PPUSH
45416: LD_VAR 0 8
45420: PPUSH
45421: LD_VAR 0 2
45425: PPUSH
45426: CALL 46685 0 2
45430: PPUSH
45431: CALL_OW 431
// end ;
45435: GO 45396
45437: POP
45438: POP
// end ; for i = 1 to personel do
45439: LD_ADDR_VAR 0 8
45443: PUSH
45444: DOUBLE
45445: LD_INT 1
45447: DEC
45448: ST_TO_ADDR
45449: LD_VAR 0 6
45453: PUSH
45454: FOR_TO
45455: IFFALSE 46519
// begin if i > 4 then
45457: LD_VAR 0 8
45461: PUSH
45462: LD_INT 4
45464: GREATER
45465: IFFALSE 45469
// break ;
45467: GO 46519
// case i of 1 :
45469: LD_VAR 0 8
45473: PUSH
45474: LD_INT 1
45476: DOUBLE
45477: EQUAL
45478: IFTRUE 45482
45480: GO 45562
45482: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45483: LD_ADDR_VAR 0 12
45487: PUSH
45488: LD_VAR 0 18
45492: PPUSH
45493: LD_INT 22
45495: PUSH
45496: LD_VAR 0 16
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 58
45507: PUSH
45508: EMPTY
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 30
45516: PUSH
45517: LD_INT 32
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 30
45526: PUSH
45527: LD_INT 4
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 30
45536: PUSH
45537: LD_INT 5
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: PPUSH
45555: CALL_OW 72
45559: ST_TO_ADDR
45560: GO 45784
45562: LD_INT 2
45564: DOUBLE
45565: EQUAL
45566: IFTRUE 45570
45568: GO 45632
45570: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45571: LD_ADDR_VAR 0 12
45575: PUSH
45576: LD_VAR 0 18
45580: PPUSH
45581: LD_INT 22
45583: PUSH
45584: LD_VAR 0 16
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: LD_INT 30
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 30
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: LIST
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PPUSH
45625: CALL_OW 72
45629: ST_TO_ADDR
45630: GO 45784
45632: LD_INT 3
45634: DOUBLE
45635: EQUAL
45636: IFTRUE 45640
45638: GO 45702
45640: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45641: LD_ADDR_VAR 0 12
45645: PUSH
45646: LD_VAR 0 18
45650: PPUSH
45651: LD_INT 22
45653: PUSH
45654: LD_VAR 0 16
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 30
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 30
45678: PUSH
45679: LD_INT 3
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PPUSH
45695: CALL_OW 72
45699: ST_TO_ADDR
45700: GO 45784
45702: LD_INT 4
45704: DOUBLE
45705: EQUAL
45706: IFTRUE 45710
45708: GO 45783
45710: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45711: LD_ADDR_VAR 0 12
45715: PUSH
45716: LD_VAR 0 18
45720: PPUSH
45721: LD_INT 22
45723: PUSH
45724: LD_VAR 0 16
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: LD_INT 30
45738: PUSH
45739: LD_INT 6
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 30
45748: PUSH
45749: LD_INT 7
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 30
45758: PUSH
45759: LD_INT 8
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PPUSH
45776: CALL_OW 72
45780: ST_TO_ADDR
45781: GO 45784
45783: POP
// if i = 1 then
45784: LD_VAR 0 8
45788: PUSH
45789: LD_INT 1
45791: EQUAL
45792: IFFALSE 45903
// begin tmp := [ ] ;
45794: LD_ADDR_VAR 0 19
45798: PUSH
45799: EMPTY
45800: ST_TO_ADDR
// for j in f do
45801: LD_ADDR_VAR 0 9
45805: PUSH
45806: LD_VAR 0 12
45810: PUSH
45811: FOR_IN
45812: IFFALSE 45885
// if GetBType ( j ) = b_bunker then
45814: LD_VAR 0 9
45818: PPUSH
45819: CALL_OW 266
45823: PUSH
45824: LD_INT 32
45826: EQUAL
45827: IFFALSE 45854
// tmp := Insert ( tmp , 1 , j ) else
45829: LD_ADDR_VAR 0 19
45833: PUSH
45834: LD_VAR 0 19
45838: PPUSH
45839: LD_INT 1
45841: PPUSH
45842: LD_VAR 0 9
45846: PPUSH
45847: CALL_OW 2
45851: ST_TO_ADDR
45852: GO 45883
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45854: LD_ADDR_VAR 0 19
45858: PUSH
45859: LD_VAR 0 19
45863: PPUSH
45864: LD_VAR 0 19
45868: PUSH
45869: LD_INT 1
45871: PLUS
45872: PPUSH
45873: LD_VAR 0 9
45877: PPUSH
45878: CALL_OW 2
45882: ST_TO_ADDR
45883: GO 45811
45885: POP
45886: POP
// if tmp then
45887: LD_VAR 0 19
45891: IFFALSE 45903
// f := tmp ;
45893: LD_ADDR_VAR 0 12
45897: PUSH
45898: LD_VAR 0 19
45902: ST_TO_ADDR
// end ; x := personel [ i ] ;
45903: LD_ADDR_VAR 0 13
45907: PUSH
45908: LD_VAR 0 6
45912: PUSH
45913: LD_VAR 0 8
45917: ARRAY
45918: ST_TO_ADDR
// if x = - 1 then
45919: LD_VAR 0 13
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: EQUAL
45928: IFFALSE 46137
// begin for j in f do
45930: LD_ADDR_VAR 0 9
45934: PUSH
45935: LD_VAR 0 12
45939: PUSH
45940: FOR_IN
45941: IFFALSE 46133
// repeat InitHc ;
45943: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45947: LD_VAR 0 9
45951: PPUSH
45952: CALL_OW 266
45956: PUSH
45957: LD_INT 5
45959: EQUAL
45960: IFFALSE 46030
// begin if UnitsInside ( j ) < 3 then
45962: LD_VAR 0 9
45966: PPUSH
45967: CALL_OW 313
45971: PUSH
45972: LD_INT 3
45974: LESS
45975: IFFALSE 46011
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45977: LD_INT 0
45979: PPUSH
45980: LD_INT 5
45982: PUSH
45983: LD_INT 8
45985: PUSH
45986: LD_INT 9
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: PUSH
45994: LD_VAR 0 17
45998: ARRAY
45999: PPUSH
46000: LD_VAR 0 4
46004: PPUSH
46005: CALL_OW 380
46009: GO 46028
// PrepareHuman ( false , i , skill ) ;
46011: LD_INT 0
46013: PPUSH
46014: LD_VAR 0 8
46018: PPUSH
46019: LD_VAR 0 4
46023: PPUSH
46024: CALL_OW 380
// end else
46028: GO 46047
// PrepareHuman ( false , i , skill ) ;
46030: LD_INT 0
46032: PPUSH
46033: LD_VAR 0 8
46037: PPUSH
46038: LD_VAR 0 4
46042: PPUSH
46043: CALL_OW 380
// un := CreateHuman ;
46047: LD_ADDR_VAR 0 14
46051: PUSH
46052: CALL_OW 44
46056: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46057: LD_ADDR_VAR 0 7
46061: PUSH
46062: LD_VAR 0 7
46066: PPUSH
46067: LD_INT 1
46069: PPUSH
46070: LD_VAR 0 14
46074: PPUSH
46075: CALL_OW 2
46079: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46080: LD_VAR 0 14
46084: PPUSH
46085: LD_VAR 0 9
46089: PPUSH
46090: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46094: LD_VAR 0 9
46098: PPUSH
46099: CALL_OW 313
46103: PUSH
46104: LD_INT 6
46106: EQUAL
46107: PUSH
46108: LD_VAR 0 9
46112: PPUSH
46113: CALL_OW 266
46117: PUSH
46118: LD_INT 32
46120: PUSH
46121: LD_INT 31
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: IN
46128: OR
46129: IFFALSE 45943
46131: GO 45940
46133: POP
46134: POP
// end else
46135: GO 46517
// for j = 1 to x do
46137: LD_ADDR_VAR 0 9
46141: PUSH
46142: DOUBLE
46143: LD_INT 1
46145: DEC
46146: ST_TO_ADDR
46147: LD_VAR 0 13
46151: PUSH
46152: FOR_TO
46153: IFFALSE 46515
// begin InitHc ;
46155: CALL_OW 19
// if not f then
46159: LD_VAR 0 12
46163: NOT
46164: IFFALSE 46253
// begin PrepareHuman ( false , i , skill ) ;
46166: LD_INT 0
46168: PPUSH
46169: LD_VAR 0 8
46173: PPUSH
46174: LD_VAR 0 4
46178: PPUSH
46179: CALL_OW 380
// un := CreateHuman ;
46183: LD_ADDR_VAR 0 14
46187: PUSH
46188: CALL_OW 44
46192: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46193: LD_ADDR_VAR 0 7
46197: PUSH
46198: LD_VAR 0 7
46202: PPUSH
46203: LD_INT 1
46205: PPUSH
46206: LD_VAR 0 14
46210: PPUSH
46211: CALL_OW 2
46215: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46216: LD_VAR 0 14
46220: PPUSH
46221: LD_VAR 0 1
46225: PPUSH
46226: CALL_OW 250
46230: PPUSH
46231: LD_VAR 0 1
46235: PPUSH
46236: CALL_OW 251
46240: PPUSH
46241: LD_INT 10
46243: PPUSH
46244: LD_INT 0
46246: PPUSH
46247: CALL_OW 50
// continue ;
46251: GO 46152
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46253: LD_VAR 0 12
46257: PUSH
46258: LD_INT 1
46260: ARRAY
46261: PPUSH
46262: CALL_OW 313
46266: PUSH
46267: LD_VAR 0 12
46271: PUSH
46272: LD_INT 1
46274: ARRAY
46275: PPUSH
46276: CALL_OW 266
46280: PUSH
46281: LD_INT 32
46283: PUSH
46284: LD_INT 31
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: IN
46291: AND
46292: PUSH
46293: LD_VAR 0 12
46297: PUSH
46298: LD_INT 1
46300: ARRAY
46301: PPUSH
46302: CALL_OW 313
46306: PUSH
46307: LD_INT 6
46309: EQUAL
46310: OR
46311: IFFALSE 46331
// f := Delete ( f , 1 ) ;
46313: LD_ADDR_VAR 0 12
46317: PUSH
46318: LD_VAR 0 12
46322: PPUSH
46323: LD_INT 1
46325: PPUSH
46326: CALL_OW 3
46330: ST_TO_ADDR
// if not f then
46331: LD_VAR 0 12
46335: NOT
46336: IFFALSE 46354
// begin x := x + 2 ;
46338: LD_ADDR_VAR 0 13
46342: PUSH
46343: LD_VAR 0 13
46347: PUSH
46348: LD_INT 2
46350: PLUS
46351: ST_TO_ADDR
// continue ;
46352: GO 46152
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46354: LD_VAR 0 12
46358: PUSH
46359: LD_INT 1
46361: ARRAY
46362: PPUSH
46363: CALL_OW 266
46367: PUSH
46368: LD_INT 5
46370: EQUAL
46371: IFFALSE 46445
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46373: LD_VAR 0 12
46377: PUSH
46378: LD_INT 1
46380: ARRAY
46381: PPUSH
46382: CALL_OW 313
46386: PUSH
46387: LD_INT 3
46389: LESS
46390: IFFALSE 46426
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46392: LD_INT 0
46394: PPUSH
46395: LD_INT 5
46397: PUSH
46398: LD_INT 8
46400: PUSH
46401: LD_INT 9
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: PUSH
46409: LD_VAR 0 17
46413: ARRAY
46414: PPUSH
46415: LD_VAR 0 4
46419: PPUSH
46420: CALL_OW 380
46424: GO 46443
// PrepareHuman ( false , i , skill ) ;
46426: LD_INT 0
46428: PPUSH
46429: LD_VAR 0 8
46433: PPUSH
46434: LD_VAR 0 4
46438: PPUSH
46439: CALL_OW 380
// end else
46443: GO 46462
// PrepareHuman ( false , i , skill ) ;
46445: LD_INT 0
46447: PPUSH
46448: LD_VAR 0 8
46452: PPUSH
46453: LD_VAR 0 4
46457: PPUSH
46458: CALL_OW 380
// un := CreateHuman ;
46462: LD_ADDR_VAR 0 14
46466: PUSH
46467: CALL_OW 44
46471: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46472: LD_ADDR_VAR 0 7
46476: PUSH
46477: LD_VAR 0 7
46481: PPUSH
46482: LD_INT 1
46484: PPUSH
46485: LD_VAR 0 14
46489: PPUSH
46490: CALL_OW 2
46494: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46495: LD_VAR 0 14
46499: PPUSH
46500: LD_VAR 0 12
46504: PUSH
46505: LD_INT 1
46507: ARRAY
46508: PPUSH
46509: CALL_OW 52
// end ;
46513: GO 46152
46515: POP
46516: POP
// end ;
46517: GO 45454
46519: POP
46520: POP
// result := result ^ buildings ;
46521: LD_ADDR_VAR 0 7
46525: PUSH
46526: LD_VAR 0 7
46530: PUSH
46531: LD_VAR 0 18
46535: ADD
46536: ST_TO_ADDR
// end else
46537: GO 46680
// begin for i = 1 to personel do
46539: LD_ADDR_VAR 0 8
46543: PUSH
46544: DOUBLE
46545: LD_INT 1
46547: DEC
46548: ST_TO_ADDR
46549: LD_VAR 0 6
46553: PUSH
46554: FOR_TO
46555: IFFALSE 46678
// begin if i > 4 then
46557: LD_VAR 0 8
46561: PUSH
46562: LD_INT 4
46564: GREATER
46565: IFFALSE 46569
// break ;
46567: GO 46678
// x := personel [ i ] ;
46569: LD_ADDR_VAR 0 13
46573: PUSH
46574: LD_VAR 0 6
46578: PUSH
46579: LD_VAR 0 8
46583: ARRAY
46584: ST_TO_ADDR
// if x = - 1 then
46585: LD_VAR 0 13
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: EQUAL
46594: IFFALSE 46598
// continue ;
46596: GO 46554
// PrepareHuman ( false , i , skill ) ;
46598: LD_INT 0
46600: PPUSH
46601: LD_VAR 0 8
46605: PPUSH
46606: LD_VAR 0 4
46610: PPUSH
46611: CALL_OW 380
// un := CreateHuman ;
46615: LD_ADDR_VAR 0 14
46619: PUSH
46620: CALL_OW 44
46624: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46625: LD_VAR 0 14
46629: PPUSH
46630: LD_VAR 0 1
46634: PPUSH
46635: CALL_OW 250
46639: PPUSH
46640: LD_VAR 0 1
46644: PPUSH
46645: CALL_OW 251
46649: PPUSH
46650: LD_INT 10
46652: PPUSH
46653: LD_INT 0
46655: PPUSH
46656: CALL_OW 50
// result := result ^ un ;
46660: LD_ADDR_VAR 0 7
46664: PUSH
46665: LD_VAR 0 7
46669: PUSH
46670: LD_VAR 0 14
46674: ADD
46675: ST_TO_ADDR
// end ;
46676: GO 46554
46678: POP
46679: POP
// end ; end ;
46680: LD_VAR 0 7
46684: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46685: LD_INT 0
46687: PPUSH
46688: PPUSH
46689: PPUSH
46690: PPUSH
46691: PPUSH
46692: PPUSH
46693: PPUSH
46694: PPUSH
46695: PPUSH
46696: PPUSH
46697: PPUSH
46698: PPUSH
46699: PPUSH
46700: PPUSH
46701: PPUSH
46702: PPUSH
// result := false ;
46703: LD_ADDR_VAR 0 3
46707: PUSH
46708: LD_INT 0
46710: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46711: LD_VAR 0 1
46715: NOT
46716: PUSH
46717: LD_VAR 0 1
46721: PPUSH
46722: CALL_OW 266
46726: PUSH
46727: LD_INT 32
46729: PUSH
46730: LD_INT 33
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: IN
46737: NOT
46738: OR
46739: IFFALSE 46743
// exit ;
46741: GO 47852
// nat := GetNation ( tower ) ;
46743: LD_ADDR_VAR 0 12
46747: PUSH
46748: LD_VAR 0 1
46752: PPUSH
46753: CALL_OW 248
46757: ST_TO_ADDR
// side := GetSide ( tower ) ;
46758: LD_ADDR_VAR 0 16
46762: PUSH
46763: LD_VAR 0 1
46767: PPUSH
46768: CALL_OW 255
46772: ST_TO_ADDR
// x := GetX ( tower ) ;
46773: LD_ADDR_VAR 0 10
46777: PUSH
46778: LD_VAR 0 1
46782: PPUSH
46783: CALL_OW 250
46787: ST_TO_ADDR
// y := GetY ( tower ) ;
46788: LD_ADDR_VAR 0 11
46792: PUSH
46793: LD_VAR 0 1
46797: PPUSH
46798: CALL_OW 251
46802: ST_TO_ADDR
// if not x or not y then
46803: LD_VAR 0 10
46807: NOT
46808: PUSH
46809: LD_VAR 0 11
46813: NOT
46814: OR
46815: IFFALSE 46819
// exit ;
46817: GO 47852
// weapon := 0 ;
46819: LD_ADDR_VAR 0 18
46823: PUSH
46824: LD_INT 0
46826: ST_TO_ADDR
// fac_list := [ ] ;
46827: LD_ADDR_VAR 0 17
46831: PUSH
46832: EMPTY
46833: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46834: LD_ADDR_VAR 0 6
46838: PUSH
46839: LD_VAR 0 1
46843: PPUSH
46844: CALL_OW 274
46848: PPUSH
46849: LD_VAR 0 2
46853: PPUSH
46854: LD_INT 0
46856: PPUSH
46857: CALL 44423 0 3
46861: PPUSH
46862: LD_INT 30
46864: PUSH
46865: LD_INT 3
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PPUSH
46872: CALL_OW 72
46876: ST_TO_ADDR
// if not factories then
46877: LD_VAR 0 6
46881: NOT
46882: IFFALSE 46886
// exit ;
46884: GO 47852
// for i in factories do
46886: LD_ADDR_VAR 0 8
46890: PUSH
46891: LD_VAR 0 6
46895: PUSH
46896: FOR_IN
46897: IFFALSE 46922
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46899: LD_ADDR_VAR 0 17
46903: PUSH
46904: LD_VAR 0 17
46908: PUSH
46909: LD_VAR 0 8
46913: PPUSH
46914: CALL_OW 478
46918: UNION
46919: ST_TO_ADDR
46920: GO 46896
46922: POP
46923: POP
// if not fac_list then
46924: LD_VAR 0 17
46928: NOT
46929: IFFALSE 46933
// exit ;
46931: GO 47852
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46933: LD_ADDR_VAR 0 5
46937: PUSH
46938: LD_INT 4
46940: PUSH
46941: LD_INT 5
46943: PUSH
46944: LD_INT 9
46946: PUSH
46947: LD_INT 10
46949: PUSH
46950: LD_INT 6
46952: PUSH
46953: LD_INT 7
46955: PUSH
46956: LD_INT 11
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 27
46970: PUSH
46971: LD_INT 28
46973: PUSH
46974: LD_INT 26
46976: PUSH
46977: LD_INT 30
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 43
46988: PUSH
46989: LD_INT 44
46991: PUSH
46992: LD_INT 46
46994: PUSH
46995: LD_INT 45
46997: PUSH
46998: LD_INT 47
47000: PUSH
47001: LD_INT 49
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: PUSH
47017: LD_VAR 0 12
47021: ARRAY
47022: ST_TO_ADDR
// list := list isect fac_list ;
47023: LD_ADDR_VAR 0 5
47027: PUSH
47028: LD_VAR 0 5
47032: PUSH
47033: LD_VAR 0 17
47037: ISECT
47038: ST_TO_ADDR
// if not list then
47039: LD_VAR 0 5
47043: NOT
47044: IFFALSE 47048
// exit ;
47046: GO 47852
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47048: LD_VAR 0 12
47052: PUSH
47053: LD_INT 3
47055: EQUAL
47056: PUSH
47057: LD_INT 49
47059: PUSH
47060: LD_VAR 0 5
47064: IN
47065: AND
47066: PUSH
47067: LD_INT 31
47069: PPUSH
47070: LD_VAR 0 16
47074: PPUSH
47075: CALL_OW 321
47079: PUSH
47080: LD_INT 2
47082: EQUAL
47083: AND
47084: IFFALSE 47144
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47086: LD_INT 22
47088: PUSH
47089: LD_VAR 0 16
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 35
47100: PUSH
47101: LD_INT 49
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 91
47110: PUSH
47111: LD_VAR 0 1
47115: PUSH
47116: LD_INT 10
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: LIST
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: LIST
47128: PPUSH
47129: CALL_OW 69
47133: NOT
47134: IFFALSE 47144
// weapon := ru_time_lapser ;
47136: LD_ADDR_VAR 0 18
47140: PUSH
47141: LD_INT 49
47143: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47144: LD_VAR 0 12
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: IN
47159: PUSH
47160: LD_INT 11
47162: PUSH
47163: LD_VAR 0 5
47167: IN
47168: PUSH
47169: LD_INT 30
47171: PUSH
47172: LD_VAR 0 5
47176: IN
47177: OR
47178: AND
47179: PUSH
47180: LD_INT 6
47182: PPUSH
47183: LD_VAR 0 16
47187: PPUSH
47188: CALL_OW 321
47192: PUSH
47193: LD_INT 2
47195: EQUAL
47196: AND
47197: IFFALSE 47362
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47199: LD_INT 22
47201: PUSH
47202: LD_VAR 0 16
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: LD_INT 35
47216: PUSH
47217: LD_INT 11
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 35
47226: PUSH
47227: LD_INT 30
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 91
47241: PUSH
47242: LD_VAR 0 1
47246: PUSH
47247: LD_INT 18
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: LIST
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: LIST
47259: PPUSH
47260: CALL_OW 69
47264: NOT
47265: PUSH
47266: LD_INT 22
47268: PUSH
47269: LD_VAR 0 16
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: LD_INT 30
47283: PUSH
47284: LD_INT 32
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 30
47293: PUSH
47294: LD_INT 33
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 91
47308: PUSH
47309: LD_VAR 0 1
47313: PUSH
47314: LD_INT 12
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: PPUSH
47330: CALL_OW 69
47334: PUSH
47335: LD_INT 2
47337: GREATER
47338: AND
47339: IFFALSE 47362
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47341: LD_ADDR_VAR 0 18
47345: PUSH
47346: LD_INT 11
47348: PUSH
47349: LD_INT 30
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_VAR 0 12
47360: ARRAY
47361: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47362: LD_VAR 0 18
47366: NOT
47367: PUSH
47368: LD_INT 40
47370: PPUSH
47371: LD_VAR 0 16
47375: PPUSH
47376: CALL_OW 321
47380: PUSH
47381: LD_INT 2
47383: EQUAL
47384: AND
47385: PUSH
47386: LD_INT 7
47388: PUSH
47389: LD_VAR 0 5
47393: IN
47394: PUSH
47395: LD_INT 28
47397: PUSH
47398: LD_VAR 0 5
47402: IN
47403: OR
47404: PUSH
47405: LD_INT 45
47407: PUSH
47408: LD_VAR 0 5
47412: IN
47413: OR
47414: AND
47415: IFFALSE 47669
// begin hex := GetHexInfo ( x , y ) ;
47417: LD_ADDR_VAR 0 4
47421: PUSH
47422: LD_VAR 0 10
47426: PPUSH
47427: LD_VAR 0 11
47431: PPUSH
47432: CALL_OW 546
47436: ST_TO_ADDR
// if hex [ 1 ] then
47437: LD_VAR 0 4
47441: PUSH
47442: LD_INT 1
47444: ARRAY
47445: IFFALSE 47449
// exit ;
47447: GO 47852
// height := hex [ 2 ] ;
47449: LD_ADDR_VAR 0 15
47453: PUSH
47454: LD_VAR 0 4
47458: PUSH
47459: LD_INT 2
47461: ARRAY
47462: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47463: LD_ADDR_VAR 0 14
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: LD_INT 5
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: ST_TO_ADDR
// for i in tmp do
47486: LD_ADDR_VAR 0 8
47490: PUSH
47491: LD_VAR 0 14
47495: PUSH
47496: FOR_IN
47497: IFFALSE 47667
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47499: LD_ADDR_VAR 0 9
47503: PUSH
47504: LD_VAR 0 10
47508: PPUSH
47509: LD_VAR 0 8
47513: PPUSH
47514: LD_INT 5
47516: PPUSH
47517: CALL_OW 272
47521: PUSH
47522: LD_VAR 0 11
47526: PPUSH
47527: LD_VAR 0 8
47531: PPUSH
47532: LD_INT 5
47534: PPUSH
47535: CALL_OW 273
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47544: LD_VAR 0 9
47548: PUSH
47549: LD_INT 1
47551: ARRAY
47552: PPUSH
47553: LD_VAR 0 9
47557: PUSH
47558: LD_INT 2
47560: ARRAY
47561: PPUSH
47562: CALL_OW 488
47566: IFFALSE 47665
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47568: LD_ADDR_VAR 0 4
47572: PUSH
47573: LD_VAR 0 9
47577: PUSH
47578: LD_INT 1
47580: ARRAY
47581: PPUSH
47582: LD_VAR 0 9
47586: PUSH
47587: LD_INT 2
47589: ARRAY
47590: PPUSH
47591: CALL_OW 546
47595: ST_TO_ADDR
// if hex [ 1 ] then
47596: LD_VAR 0 4
47600: PUSH
47601: LD_INT 1
47603: ARRAY
47604: IFFALSE 47608
// continue ;
47606: GO 47496
// h := hex [ 2 ] ;
47608: LD_ADDR_VAR 0 13
47612: PUSH
47613: LD_VAR 0 4
47617: PUSH
47618: LD_INT 2
47620: ARRAY
47621: ST_TO_ADDR
// if h + 7 < height then
47622: LD_VAR 0 13
47626: PUSH
47627: LD_INT 7
47629: PLUS
47630: PUSH
47631: LD_VAR 0 15
47635: LESS
47636: IFFALSE 47665
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47638: LD_ADDR_VAR 0 18
47642: PUSH
47643: LD_INT 7
47645: PUSH
47646: LD_INT 28
47648: PUSH
47649: LD_INT 45
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: LIST
47656: PUSH
47657: LD_VAR 0 12
47661: ARRAY
47662: ST_TO_ADDR
// break ;
47663: GO 47667
// end ; end ; end ;
47665: GO 47496
47667: POP
47668: POP
// end ; if not weapon then
47669: LD_VAR 0 18
47673: NOT
47674: IFFALSE 47734
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47676: LD_ADDR_VAR 0 5
47680: PUSH
47681: LD_VAR 0 5
47685: PUSH
47686: LD_INT 11
47688: PUSH
47689: LD_INT 30
47691: PUSH
47692: LD_INT 49
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: LIST
47699: DIFF
47700: ST_TO_ADDR
// if not list then
47701: LD_VAR 0 5
47705: NOT
47706: IFFALSE 47710
// exit ;
47708: GO 47852
// weapon := list [ rand ( 1 , list ) ] ;
47710: LD_ADDR_VAR 0 18
47714: PUSH
47715: LD_VAR 0 5
47719: PUSH
47720: LD_INT 1
47722: PPUSH
47723: LD_VAR 0 5
47727: PPUSH
47728: CALL_OW 12
47732: ARRAY
47733: ST_TO_ADDR
// end ; if weapon then
47734: LD_VAR 0 18
47738: IFFALSE 47852
// begin tmp := CostOfWeapon ( weapon ) ;
47740: LD_ADDR_VAR 0 14
47744: PUSH
47745: LD_VAR 0 18
47749: PPUSH
47750: CALL_OW 451
47754: ST_TO_ADDR
// j := GetBase ( tower ) ;
47755: LD_ADDR_VAR 0 9
47759: PUSH
47760: LD_VAR 0 1
47764: PPUSH
47765: CALL_OW 274
47769: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47770: LD_VAR 0 9
47774: PPUSH
47775: LD_INT 1
47777: PPUSH
47778: CALL_OW 275
47782: PUSH
47783: LD_VAR 0 14
47787: PUSH
47788: LD_INT 1
47790: ARRAY
47791: GREATEREQUAL
47792: PUSH
47793: LD_VAR 0 9
47797: PPUSH
47798: LD_INT 2
47800: PPUSH
47801: CALL_OW 275
47805: PUSH
47806: LD_VAR 0 14
47810: PUSH
47811: LD_INT 2
47813: ARRAY
47814: GREATEREQUAL
47815: AND
47816: PUSH
47817: LD_VAR 0 9
47821: PPUSH
47822: LD_INT 3
47824: PPUSH
47825: CALL_OW 275
47829: PUSH
47830: LD_VAR 0 14
47834: PUSH
47835: LD_INT 3
47837: ARRAY
47838: GREATEREQUAL
47839: AND
47840: IFFALSE 47852
// result := weapon ;
47842: LD_ADDR_VAR 0 3
47846: PUSH
47847: LD_VAR 0 18
47851: ST_TO_ADDR
// end ; end ;
47852: LD_VAR 0 3
47856: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47857: LD_INT 0
47859: PPUSH
47860: PPUSH
// result := true ;
47861: LD_ADDR_VAR 0 3
47865: PUSH
47866: LD_INT 1
47868: ST_TO_ADDR
// if array1 = array2 then
47869: LD_VAR 0 1
47873: PUSH
47874: LD_VAR 0 2
47878: EQUAL
47879: IFFALSE 47939
// begin for i = 1 to array1 do
47881: LD_ADDR_VAR 0 4
47885: PUSH
47886: DOUBLE
47887: LD_INT 1
47889: DEC
47890: ST_TO_ADDR
47891: LD_VAR 0 1
47895: PUSH
47896: FOR_TO
47897: IFFALSE 47935
// if array1 [ i ] <> array2 [ i ] then
47899: LD_VAR 0 1
47903: PUSH
47904: LD_VAR 0 4
47908: ARRAY
47909: PUSH
47910: LD_VAR 0 2
47914: PUSH
47915: LD_VAR 0 4
47919: ARRAY
47920: NONEQUAL
47921: IFFALSE 47933
// begin result := false ;
47923: LD_ADDR_VAR 0 3
47927: PUSH
47928: LD_INT 0
47930: ST_TO_ADDR
// break ;
47931: GO 47935
// end ;
47933: GO 47896
47935: POP
47936: POP
// end else
47937: GO 47947
// result := false ;
47939: LD_ADDR_VAR 0 3
47943: PUSH
47944: LD_INT 0
47946: ST_TO_ADDR
// end ;
47947: LD_VAR 0 3
47951: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47952: LD_INT 0
47954: PPUSH
47955: PPUSH
// if not array1 or not array2 then
47956: LD_VAR 0 1
47960: NOT
47961: PUSH
47962: LD_VAR 0 2
47966: NOT
47967: OR
47968: IFFALSE 47972
// exit ;
47970: GO 48036
// result := true ;
47972: LD_ADDR_VAR 0 3
47976: PUSH
47977: LD_INT 1
47979: ST_TO_ADDR
// for i = 1 to array1 do
47980: LD_ADDR_VAR 0 4
47984: PUSH
47985: DOUBLE
47986: LD_INT 1
47988: DEC
47989: ST_TO_ADDR
47990: LD_VAR 0 1
47994: PUSH
47995: FOR_TO
47996: IFFALSE 48034
// if array1 [ i ] <> array2 [ i ] then
47998: LD_VAR 0 1
48002: PUSH
48003: LD_VAR 0 4
48007: ARRAY
48008: PUSH
48009: LD_VAR 0 2
48013: PUSH
48014: LD_VAR 0 4
48018: ARRAY
48019: NONEQUAL
48020: IFFALSE 48032
// begin result := false ;
48022: LD_ADDR_VAR 0 3
48026: PUSH
48027: LD_INT 0
48029: ST_TO_ADDR
// break ;
48030: GO 48034
// end ;
48032: GO 47995
48034: POP
48035: POP
// end ;
48036: LD_VAR 0 3
48040: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48041: LD_INT 0
48043: PPUSH
48044: PPUSH
48045: PPUSH
// pom := GetBase ( fac ) ;
48046: LD_ADDR_VAR 0 5
48050: PUSH
48051: LD_VAR 0 1
48055: PPUSH
48056: CALL_OW 274
48060: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48061: LD_ADDR_VAR 0 4
48065: PUSH
48066: LD_VAR 0 2
48070: PUSH
48071: LD_INT 1
48073: ARRAY
48074: PPUSH
48075: LD_VAR 0 2
48079: PUSH
48080: LD_INT 2
48082: ARRAY
48083: PPUSH
48084: LD_VAR 0 2
48088: PUSH
48089: LD_INT 3
48091: ARRAY
48092: PPUSH
48093: LD_VAR 0 2
48097: PUSH
48098: LD_INT 4
48100: ARRAY
48101: PPUSH
48102: CALL_OW 449
48106: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48107: LD_ADDR_VAR 0 3
48111: PUSH
48112: LD_VAR 0 5
48116: PPUSH
48117: LD_INT 1
48119: PPUSH
48120: CALL_OW 275
48124: PUSH
48125: LD_VAR 0 4
48129: PUSH
48130: LD_INT 1
48132: ARRAY
48133: GREATEREQUAL
48134: PUSH
48135: LD_VAR 0 5
48139: PPUSH
48140: LD_INT 2
48142: PPUSH
48143: CALL_OW 275
48147: PUSH
48148: LD_VAR 0 4
48152: PUSH
48153: LD_INT 2
48155: ARRAY
48156: GREATEREQUAL
48157: AND
48158: PUSH
48159: LD_VAR 0 5
48163: PPUSH
48164: LD_INT 3
48166: PPUSH
48167: CALL_OW 275
48171: PUSH
48172: LD_VAR 0 4
48176: PUSH
48177: LD_INT 3
48179: ARRAY
48180: GREATEREQUAL
48181: AND
48182: ST_TO_ADDR
// end ;
48183: LD_VAR 0 3
48187: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48188: LD_INT 0
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
// pom := GetBase ( building ) ;
48194: LD_ADDR_VAR 0 3
48198: PUSH
48199: LD_VAR 0 1
48203: PPUSH
48204: CALL_OW 274
48208: ST_TO_ADDR
// if not pom then
48209: LD_VAR 0 3
48213: NOT
48214: IFFALSE 48218
// exit ;
48216: GO 48388
// btype := GetBType ( building ) ;
48218: LD_ADDR_VAR 0 5
48222: PUSH
48223: LD_VAR 0 1
48227: PPUSH
48228: CALL_OW 266
48232: ST_TO_ADDR
// if btype = b_armoury then
48233: LD_VAR 0 5
48237: PUSH
48238: LD_INT 4
48240: EQUAL
48241: IFFALSE 48251
// btype := b_barracks ;
48243: LD_ADDR_VAR 0 5
48247: PUSH
48248: LD_INT 5
48250: ST_TO_ADDR
// if btype = b_depot then
48251: LD_VAR 0 5
48255: PUSH
48256: LD_INT 0
48258: EQUAL
48259: IFFALSE 48269
// btype := b_warehouse ;
48261: LD_ADDR_VAR 0 5
48265: PUSH
48266: LD_INT 1
48268: ST_TO_ADDR
// if btype = b_workshop then
48269: LD_VAR 0 5
48273: PUSH
48274: LD_INT 2
48276: EQUAL
48277: IFFALSE 48287
// btype := b_factory ;
48279: LD_ADDR_VAR 0 5
48283: PUSH
48284: LD_INT 3
48286: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48287: LD_ADDR_VAR 0 4
48291: PUSH
48292: LD_VAR 0 5
48296: PPUSH
48297: LD_VAR 0 1
48301: PPUSH
48302: CALL_OW 248
48306: PPUSH
48307: CALL_OW 450
48311: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48312: LD_ADDR_VAR 0 2
48316: PUSH
48317: LD_VAR 0 3
48321: PPUSH
48322: LD_INT 1
48324: PPUSH
48325: CALL_OW 275
48329: PUSH
48330: LD_VAR 0 4
48334: PUSH
48335: LD_INT 1
48337: ARRAY
48338: GREATEREQUAL
48339: PUSH
48340: LD_VAR 0 3
48344: PPUSH
48345: LD_INT 2
48347: PPUSH
48348: CALL_OW 275
48352: PUSH
48353: LD_VAR 0 4
48357: PUSH
48358: LD_INT 2
48360: ARRAY
48361: GREATEREQUAL
48362: AND
48363: PUSH
48364: LD_VAR 0 3
48368: PPUSH
48369: LD_INT 3
48371: PPUSH
48372: CALL_OW 275
48376: PUSH
48377: LD_VAR 0 4
48381: PUSH
48382: LD_INT 3
48384: ARRAY
48385: GREATEREQUAL
48386: AND
48387: ST_TO_ADDR
// end ;
48388: LD_VAR 0 2
48392: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48393: LD_INT 0
48395: PPUSH
48396: PPUSH
48397: PPUSH
// pom := GetBase ( building ) ;
48398: LD_ADDR_VAR 0 4
48402: PUSH
48403: LD_VAR 0 1
48407: PPUSH
48408: CALL_OW 274
48412: ST_TO_ADDR
// if not pom then
48413: LD_VAR 0 4
48417: NOT
48418: IFFALSE 48422
// exit ;
48420: GO 48523
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48422: LD_ADDR_VAR 0 5
48426: PUSH
48427: LD_VAR 0 2
48431: PPUSH
48432: LD_VAR 0 1
48436: PPUSH
48437: CALL_OW 248
48441: PPUSH
48442: CALL_OW 450
48446: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48447: LD_ADDR_VAR 0 3
48451: PUSH
48452: LD_VAR 0 4
48456: PPUSH
48457: LD_INT 1
48459: PPUSH
48460: CALL_OW 275
48464: PUSH
48465: LD_VAR 0 5
48469: PUSH
48470: LD_INT 1
48472: ARRAY
48473: GREATEREQUAL
48474: PUSH
48475: LD_VAR 0 4
48479: PPUSH
48480: LD_INT 2
48482: PPUSH
48483: CALL_OW 275
48487: PUSH
48488: LD_VAR 0 5
48492: PUSH
48493: LD_INT 2
48495: ARRAY
48496: GREATEREQUAL
48497: AND
48498: PUSH
48499: LD_VAR 0 4
48503: PPUSH
48504: LD_INT 3
48506: PPUSH
48507: CALL_OW 275
48511: PUSH
48512: LD_VAR 0 5
48516: PUSH
48517: LD_INT 3
48519: ARRAY
48520: GREATEREQUAL
48521: AND
48522: ST_TO_ADDR
// end ;
48523: LD_VAR 0 3
48527: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48528: LD_INT 0
48530: PPUSH
48531: PPUSH
48532: PPUSH
48533: PPUSH
48534: PPUSH
48535: PPUSH
48536: PPUSH
48537: PPUSH
48538: PPUSH
48539: PPUSH
48540: PPUSH
// result := false ;
48541: LD_ADDR_VAR 0 8
48545: PUSH
48546: LD_INT 0
48548: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48549: LD_VAR 0 5
48553: NOT
48554: PUSH
48555: LD_VAR 0 1
48559: NOT
48560: OR
48561: PUSH
48562: LD_VAR 0 2
48566: NOT
48567: OR
48568: PUSH
48569: LD_VAR 0 3
48573: NOT
48574: OR
48575: IFFALSE 48579
// exit ;
48577: GO 49393
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48579: LD_ADDR_VAR 0 14
48583: PUSH
48584: LD_VAR 0 1
48588: PPUSH
48589: LD_VAR 0 2
48593: PPUSH
48594: LD_VAR 0 3
48598: PPUSH
48599: LD_VAR 0 4
48603: PPUSH
48604: LD_VAR 0 5
48608: PUSH
48609: LD_INT 1
48611: ARRAY
48612: PPUSH
48613: CALL_OW 248
48617: PPUSH
48618: LD_INT 0
48620: PPUSH
48621: CALL 50630 0 6
48625: ST_TO_ADDR
// if not hexes then
48626: LD_VAR 0 14
48630: NOT
48631: IFFALSE 48635
// exit ;
48633: GO 49393
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48635: LD_ADDR_VAR 0 17
48639: PUSH
48640: LD_VAR 0 5
48644: PPUSH
48645: LD_INT 22
48647: PUSH
48648: LD_VAR 0 13
48652: PPUSH
48653: CALL_OW 255
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: LD_INT 30
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 30
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: LIST
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PPUSH
48694: CALL_OW 72
48698: ST_TO_ADDR
// for i = 1 to hexes do
48699: LD_ADDR_VAR 0 9
48703: PUSH
48704: DOUBLE
48705: LD_INT 1
48707: DEC
48708: ST_TO_ADDR
48709: LD_VAR 0 14
48713: PUSH
48714: FOR_TO
48715: IFFALSE 49391
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48717: LD_ADDR_VAR 0 13
48721: PUSH
48722: LD_VAR 0 14
48726: PUSH
48727: LD_VAR 0 9
48731: ARRAY
48732: PUSH
48733: LD_INT 1
48735: ARRAY
48736: PPUSH
48737: LD_VAR 0 14
48741: PUSH
48742: LD_VAR 0 9
48746: ARRAY
48747: PUSH
48748: LD_INT 2
48750: ARRAY
48751: PPUSH
48752: CALL_OW 428
48756: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48757: LD_VAR 0 14
48761: PUSH
48762: LD_VAR 0 9
48766: ARRAY
48767: PUSH
48768: LD_INT 1
48770: ARRAY
48771: PPUSH
48772: LD_VAR 0 14
48776: PUSH
48777: LD_VAR 0 9
48781: ARRAY
48782: PUSH
48783: LD_INT 2
48785: ARRAY
48786: PPUSH
48787: CALL_OW 351
48791: PUSH
48792: LD_VAR 0 14
48796: PUSH
48797: LD_VAR 0 9
48801: ARRAY
48802: PUSH
48803: LD_INT 1
48805: ARRAY
48806: PPUSH
48807: LD_VAR 0 14
48811: PUSH
48812: LD_VAR 0 9
48816: ARRAY
48817: PUSH
48818: LD_INT 2
48820: ARRAY
48821: PPUSH
48822: CALL_OW 488
48826: NOT
48827: OR
48828: PUSH
48829: LD_VAR 0 13
48833: PPUSH
48834: CALL_OW 247
48838: PUSH
48839: LD_INT 3
48841: EQUAL
48842: OR
48843: IFFALSE 48849
// exit ;
48845: POP
48846: POP
48847: GO 49393
// if not tmp then
48849: LD_VAR 0 13
48853: NOT
48854: IFFALSE 48858
// continue ;
48856: GO 48714
// result := true ;
48858: LD_ADDR_VAR 0 8
48862: PUSH
48863: LD_INT 1
48865: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48866: LD_VAR 0 6
48870: PUSH
48871: LD_VAR 0 13
48875: PPUSH
48876: CALL_OW 247
48880: PUSH
48881: LD_INT 2
48883: EQUAL
48884: AND
48885: PUSH
48886: LD_VAR 0 13
48890: PPUSH
48891: CALL_OW 263
48895: PUSH
48896: LD_INT 1
48898: EQUAL
48899: AND
48900: IFFALSE 49064
// begin if IsDrivenBy ( tmp ) then
48902: LD_VAR 0 13
48906: PPUSH
48907: CALL_OW 311
48911: IFFALSE 48915
// continue ;
48913: GO 48714
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48915: LD_VAR 0 6
48919: PPUSH
48920: LD_INT 3
48922: PUSH
48923: LD_INT 60
48925: PUSH
48926: EMPTY
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: LD_INT 55
48938: PUSH
48939: EMPTY
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PPUSH
48950: CALL_OW 72
48954: IFFALSE 49062
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48956: LD_ADDR_VAR 0 18
48960: PUSH
48961: LD_VAR 0 6
48965: PPUSH
48966: LD_INT 3
48968: PUSH
48969: LD_INT 60
48971: PUSH
48972: EMPTY
48973: LIST
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: LD_INT 55
48984: PUSH
48985: EMPTY
48986: LIST
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PPUSH
48996: CALL_OW 72
49000: PUSH
49001: LD_INT 1
49003: ARRAY
49004: ST_TO_ADDR
// if IsInUnit ( driver ) then
49005: LD_VAR 0 18
49009: PPUSH
49010: CALL_OW 310
49014: IFFALSE 49025
// ComExit ( driver ) ;
49016: LD_VAR 0 18
49020: PPUSH
49021: CALL 73814 0 1
// AddComEnterUnit ( driver , tmp ) ;
49025: LD_VAR 0 18
49029: PPUSH
49030: LD_VAR 0 13
49034: PPUSH
49035: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49039: LD_VAR 0 18
49043: PPUSH
49044: LD_VAR 0 7
49048: PPUSH
49049: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49053: LD_VAR 0 18
49057: PPUSH
49058: CALL_OW 181
// end ; continue ;
49062: GO 48714
// end ; if not cleaners or not tmp in cleaners then
49064: LD_VAR 0 6
49068: NOT
49069: PUSH
49070: LD_VAR 0 13
49074: PUSH
49075: LD_VAR 0 6
49079: IN
49080: NOT
49081: OR
49082: IFFALSE 49389
// begin if dep then
49084: LD_VAR 0 17
49088: IFFALSE 49224
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49090: LD_ADDR_VAR 0 16
49094: PUSH
49095: LD_VAR 0 17
49099: PUSH
49100: LD_INT 1
49102: ARRAY
49103: PPUSH
49104: CALL_OW 250
49108: PPUSH
49109: LD_VAR 0 17
49113: PUSH
49114: LD_INT 1
49116: ARRAY
49117: PPUSH
49118: CALL_OW 254
49122: PPUSH
49123: LD_INT 5
49125: PPUSH
49126: CALL_OW 272
49130: PUSH
49131: LD_VAR 0 17
49135: PUSH
49136: LD_INT 1
49138: ARRAY
49139: PPUSH
49140: CALL_OW 251
49144: PPUSH
49145: LD_VAR 0 17
49149: PUSH
49150: LD_INT 1
49152: ARRAY
49153: PPUSH
49154: CALL_OW 254
49158: PPUSH
49159: LD_INT 5
49161: PPUSH
49162: CALL_OW 273
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49171: LD_VAR 0 16
49175: PUSH
49176: LD_INT 1
49178: ARRAY
49179: PPUSH
49180: LD_VAR 0 16
49184: PUSH
49185: LD_INT 2
49187: ARRAY
49188: PPUSH
49189: CALL_OW 488
49193: IFFALSE 49224
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49195: LD_VAR 0 13
49199: PPUSH
49200: LD_VAR 0 16
49204: PUSH
49205: LD_INT 1
49207: ARRAY
49208: PPUSH
49209: LD_VAR 0 16
49213: PUSH
49214: LD_INT 2
49216: ARRAY
49217: PPUSH
49218: CALL_OW 111
// continue ;
49222: GO 48714
// end ; end ; r := GetDir ( tmp ) ;
49224: LD_ADDR_VAR 0 15
49228: PUSH
49229: LD_VAR 0 13
49233: PPUSH
49234: CALL_OW 254
49238: ST_TO_ADDR
// if r = 5 then
49239: LD_VAR 0 15
49243: PUSH
49244: LD_INT 5
49246: EQUAL
49247: IFFALSE 49257
// r := 0 ;
49249: LD_ADDR_VAR 0 15
49253: PUSH
49254: LD_INT 0
49256: ST_TO_ADDR
// for j = r to 5 do
49257: LD_ADDR_VAR 0 10
49261: PUSH
49262: DOUBLE
49263: LD_VAR 0 15
49267: DEC
49268: ST_TO_ADDR
49269: LD_INT 5
49271: PUSH
49272: FOR_TO
49273: IFFALSE 49387
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49275: LD_ADDR_VAR 0 11
49279: PUSH
49280: LD_VAR 0 13
49284: PPUSH
49285: CALL_OW 250
49289: PPUSH
49290: LD_VAR 0 10
49294: PPUSH
49295: LD_INT 2
49297: PPUSH
49298: CALL_OW 272
49302: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49303: LD_ADDR_VAR 0 12
49307: PUSH
49308: LD_VAR 0 13
49312: PPUSH
49313: CALL_OW 251
49317: PPUSH
49318: LD_VAR 0 10
49322: PPUSH
49323: LD_INT 2
49325: PPUSH
49326: CALL_OW 273
49330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49331: LD_VAR 0 11
49335: PPUSH
49336: LD_VAR 0 12
49340: PPUSH
49341: CALL_OW 488
49345: PUSH
49346: LD_VAR 0 11
49350: PPUSH
49351: LD_VAR 0 12
49355: PPUSH
49356: CALL_OW 428
49360: NOT
49361: AND
49362: IFFALSE 49385
// begin ComMoveXY ( tmp , _x , _y ) ;
49364: LD_VAR 0 13
49368: PPUSH
49369: LD_VAR 0 11
49373: PPUSH
49374: LD_VAR 0 12
49378: PPUSH
49379: CALL_OW 111
// break ;
49383: GO 49387
// end ; end ;
49385: GO 49272
49387: POP
49388: POP
// end ; end ;
49389: GO 48714
49391: POP
49392: POP
// end ;
49393: LD_VAR 0 8
49397: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49398: LD_INT 0
49400: PPUSH
// result := true ;
49401: LD_ADDR_VAR 0 3
49405: PUSH
49406: LD_INT 1
49408: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49409: LD_VAR 0 2
49413: PUSH
49414: LD_INT 24
49416: DOUBLE
49417: EQUAL
49418: IFTRUE 49428
49420: LD_INT 33
49422: DOUBLE
49423: EQUAL
49424: IFTRUE 49428
49426: GO 49453
49428: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49429: LD_ADDR_VAR 0 3
49433: PUSH
49434: LD_INT 32
49436: PPUSH
49437: LD_VAR 0 1
49441: PPUSH
49442: CALL_OW 321
49446: PUSH
49447: LD_INT 2
49449: EQUAL
49450: ST_TO_ADDR
49451: GO 49773
49453: LD_INT 20
49455: DOUBLE
49456: EQUAL
49457: IFTRUE 49461
49459: GO 49486
49461: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49462: LD_ADDR_VAR 0 3
49466: PUSH
49467: LD_INT 6
49469: PPUSH
49470: LD_VAR 0 1
49474: PPUSH
49475: CALL_OW 321
49479: PUSH
49480: LD_INT 2
49482: EQUAL
49483: ST_TO_ADDR
49484: GO 49773
49486: LD_INT 22
49488: DOUBLE
49489: EQUAL
49490: IFTRUE 49500
49492: LD_INT 36
49494: DOUBLE
49495: EQUAL
49496: IFTRUE 49500
49498: GO 49525
49500: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49501: LD_ADDR_VAR 0 3
49505: PUSH
49506: LD_INT 15
49508: PPUSH
49509: LD_VAR 0 1
49513: PPUSH
49514: CALL_OW 321
49518: PUSH
49519: LD_INT 2
49521: EQUAL
49522: ST_TO_ADDR
49523: GO 49773
49525: LD_INT 30
49527: DOUBLE
49528: EQUAL
49529: IFTRUE 49533
49531: GO 49558
49533: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49534: LD_ADDR_VAR 0 3
49538: PUSH
49539: LD_INT 20
49541: PPUSH
49542: LD_VAR 0 1
49546: PPUSH
49547: CALL_OW 321
49551: PUSH
49552: LD_INT 2
49554: EQUAL
49555: ST_TO_ADDR
49556: GO 49773
49558: LD_INT 28
49560: DOUBLE
49561: EQUAL
49562: IFTRUE 49572
49564: LD_INT 21
49566: DOUBLE
49567: EQUAL
49568: IFTRUE 49572
49570: GO 49597
49572: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49573: LD_ADDR_VAR 0 3
49577: PUSH
49578: LD_INT 21
49580: PPUSH
49581: LD_VAR 0 1
49585: PPUSH
49586: CALL_OW 321
49590: PUSH
49591: LD_INT 2
49593: EQUAL
49594: ST_TO_ADDR
49595: GO 49773
49597: LD_INT 16
49599: DOUBLE
49600: EQUAL
49601: IFTRUE 49605
49603: GO 49632
49605: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49606: LD_ADDR_VAR 0 3
49610: PUSH
49611: LD_EXP 55
49615: PPUSH
49616: LD_VAR 0 1
49620: PPUSH
49621: CALL_OW 321
49625: PUSH
49626: LD_INT 2
49628: EQUAL
49629: ST_TO_ADDR
49630: GO 49773
49632: LD_INT 19
49634: DOUBLE
49635: EQUAL
49636: IFTRUE 49646
49638: LD_INT 23
49640: DOUBLE
49641: EQUAL
49642: IFTRUE 49646
49644: GO 49673
49646: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49647: LD_ADDR_VAR 0 3
49651: PUSH
49652: LD_EXP 54
49656: PPUSH
49657: LD_VAR 0 1
49661: PPUSH
49662: CALL_OW 321
49666: PUSH
49667: LD_INT 2
49669: EQUAL
49670: ST_TO_ADDR
49671: GO 49773
49673: LD_INT 17
49675: DOUBLE
49676: EQUAL
49677: IFTRUE 49681
49679: GO 49706
49681: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49682: LD_ADDR_VAR 0 3
49686: PUSH
49687: LD_INT 39
49689: PPUSH
49690: LD_VAR 0 1
49694: PPUSH
49695: CALL_OW 321
49699: PUSH
49700: LD_INT 2
49702: EQUAL
49703: ST_TO_ADDR
49704: GO 49773
49706: LD_INT 18
49708: DOUBLE
49709: EQUAL
49710: IFTRUE 49714
49712: GO 49739
49714: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49715: LD_ADDR_VAR 0 3
49719: PUSH
49720: LD_INT 40
49722: PPUSH
49723: LD_VAR 0 1
49727: PPUSH
49728: CALL_OW 321
49732: PUSH
49733: LD_INT 2
49735: EQUAL
49736: ST_TO_ADDR
49737: GO 49773
49739: LD_INT 27
49741: DOUBLE
49742: EQUAL
49743: IFTRUE 49747
49745: GO 49772
49747: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49748: LD_ADDR_VAR 0 3
49752: PUSH
49753: LD_INT 35
49755: PPUSH
49756: LD_VAR 0 1
49760: PPUSH
49761: CALL_OW 321
49765: PUSH
49766: LD_INT 2
49768: EQUAL
49769: ST_TO_ADDR
49770: GO 49773
49772: POP
// end ;
49773: LD_VAR 0 3
49777: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49778: LD_INT 0
49780: PPUSH
49781: PPUSH
49782: PPUSH
49783: PPUSH
49784: PPUSH
49785: PPUSH
49786: PPUSH
49787: PPUSH
49788: PPUSH
49789: PPUSH
49790: PPUSH
// result := false ;
49791: LD_ADDR_VAR 0 6
49795: PUSH
49796: LD_INT 0
49798: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49799: LD_VAR 0 1
49803: NOT
49804: PUSH
49805: LD_VAR 0 1
49809: PPUSH
49810: CALL_OW 266
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: IN
49825: NOT
49826: OR
49827: PUSH
49828: LD_VAR 0 2
49832: NOT
49833: OR
49834: PUSH
49835: LD_VAR 0 5
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: LD_INT 4
49854: PUSH
49855: LD_INT 5
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: IN
49866: NOT
49867: OR
49868: PUSH
49869: LD_VAR 0 3
49873: PPUSH
49874: LD_VAR 0 4
49878: PPUSH
49879: CALL_OW 488
49883: NOT
49884: OR
49885: IFFALSE 49889
// exit ;
49887: GO 50625
// side := GetSide ( depot ) ;
49889: LD_ADDR_VAR 0 9
49893: PUSH
49894: LD_VAR 0 1
49898: PPUSH
49899: CALL_OW 255
49903: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49904: LD_VAR 0 9
49908: PPUSH
49909: LD_VAR 0 2
49913: PPUSH
49914: CALL 49398 0 2
49918: NOT
49919: IFFALSE 49923
// exit ;
49921: GO 50625
// pom := GetBase ( depot ) ;
49923: LD_ADDR_VAR 0 10
49927: PUSH
49928: LD_VAR 0 1
49932: PPUSH
49933: CALL_OW 274
49937: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49938: LD_ADDR_VAR 0 11
49942: PUSH
49943: LD_VAR 0 2
49947: PPUSH
49948: LD_VAR 0 1
49952: PPUSH
49953: CALL_OW 248
49957: PPUSH
49958: CALL_OW 450
49962: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49963: LD_VAR 0 10
49967: PPUSH
49968: LD_INT 1
49970: PPUSH
49971: CALL_OW 275
49975: PUSH
49976: LD_VAR 0 11
49980: PUSH
49981: LD_INT 1
49983: ARRAY
49984: GREATEREQUAL
49985: PUSH
49986: LD_VAR 0 10
49990: PPUSH
49991: LD_INT 2
49993: PPUSH
49994: CALL_OW 275
49998: PUSH
49999: LD_VAR 0 11
50003: PUSH
50004: LD_INT 2
50006: ARRAY
50007: GREATEREQUAL
50008: AND
50009: PUSH
50010: LD_VAR 0 10
50014: PPUSH
50015: LD_INT 3
50017: PPUSH
50018: CALL_OW 275
50022: PUSH
50023: LD_VAR 0 11
50027: PUSH
50028: LD_INT 3
50030: ARRAY
50031: GREATEREQUAL
50032: AND
50033: NOT
50034: IFFALSE 50038
// exit ;
50036: GO 50625
// if GetBType ( depot ) = b_depot then
50038: LD_VAR 0 1
50042: PPUSH
50043: CALL_OW 266
50047: PUSH
50048: LD_INT 0
50050: EQUAL
50051: IFFALSE 50063
// dist := 28 else
50053: LD_ADDR_VAR 0 14
50057: PUSH
50058: LD_INT 28
50060: ST_TO_ADDR
50061: GO 50071
// dist := 36 ;
50063: LD_ADDR_VAR 0 14
50067: PUSH
50068: LD_INT 36
50070: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50071: LD_VAR 0 1
50075: PPUSH
50076: LD_VAR 0 3
50080: PPUSH
50081: LD_VAR 0 4
50085: PPUSH
50086: CALL_OW 297
50090: PUSH
50091: LD_VAR 0 14
50095: GREATER
50096: IFFALSE 50100
// exit ;
50098: GO 50625
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50100: LD_ADDR_VAR 0 12
50104: PUSH
50105: LD_VAR 0 2
50109: PPUSH
50110: LD_VAR 0 3
50114: PPUSH
50115: LD_VAR 0 4
50119: PPUSH
50120: LD_VAR 0 5
50124: PPUSH
50125: LD_VAR 0 1
50129: PPUSH
50130: CALL_OW 248
50134: PPUSH
50135: LD_INT 0
50137: PPUSH
50138: CALL 50630 0 6
50142: ST_TO_ADDR
// if not hexes then
50143: LD_VAR 0 12
50147: NOT
50148: IFFALSE 50152
// exit ;
50150: GO 50625
// hex := GetHexInfo ( x , y ) ;
50152: LD_ADDR_VAR 0 15
50156: PUSH
50157: LD_VAR 0 3
50161: PPUSH
50162: LD_VAR 0 4
50166: PPUSH
50167: CALL_OW 546
50171: ST_TO_ADDR
// if hex [ 1 ] then
50172: LD_VAR 0 15
50176: PUSH
50177: LD_INT 1
50179: ARRAY
50180: IFFALSE 50184
// exit ;
50182: GO 50625
// height := hex [ 2 ] ;
50184: LD_ADDR_VAR 0 13
50188: PUSH
50189: LD_VAR 0 15
50193: PUSH
50194: LD_INT 2
50196: ARRAY
50197: ST_TO_ADDR
// for i = 1 to hexes do
50198: LD_ADDR_VAR 0 7
50202: PUSH
50203: DOUBLE
50204: LD_INT 1
50206: DEC
50207: ST_TO_ADDR
50208: LD_VAR 0 12
50212: PUSH
50213: FOR_TO
50214: IFFALSE 50544
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50216: LD_VAR 0 12
50220: PUSH
50221: LD_VAR 0 7
50225: ARRAY
50226: PUSH
50227: LD_INT 1
50229: ARRAY
50230: PPUSH
50231: LD_VAR 0 12
50235: PUSH
50236: LD_VAR 0 7
50240: ARRAY
50241: PUSH
50242: LD_INT 2
50244: ARRAY
50245: PPUSH
50246: CALL_OW 488
50250: NOT
50251: PUSH
50252: LD_VAR 0 12
50256: PUSH
50257: LD_VAR 0 7
50261: ARRAY
50262: PUSH
50263: LD_INT 1
50265: ARRAY
50266: PPUSH
50267: LD_VAR 0 12
50271: PUSH
50272: LD_VAR 0 7
50276: ARRAY
50277: PUSH
50278: LD_INT 2
50280: ARRAY
50281: PPUSH
50282: CALL_OW 428
50286: PUSH
50287: LD_INT 0
50289: GREATER
50290: OR
50291: PUSH
50292: LD_VAR 0 12
50296: PUSH
50297: LD_VAR 0 7
50301: ARRAY
50302: PUSH
50303: LD_INT 1
50305: ARRAY
50306: PPUSH
50307: LD_VAR 0 12
50311: PUSH
50312: LD_VAR 0 7
50316: ARRAY
50317: PUSH
50318: LD_INT 2
50320: ARRAY
50321: PPUSH
50322: CALL_OW 351
50326: OR
50327: IFFALSE 50333
// exit ;
50329: POP
50330: POP
50331: GO 50625
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50333: LD_ADDR_VAR 0 8
50337: PUSH
50338: LD_VAR 0 12
50342: PUSH
50343: LD_VAR 0 7
50347: ARRAY
50348: PUSH
50349: LD_INT 1
50351: ARRAY
50352: PPUSH
50353: LD_VAR 0 12
50357: PUSH
50358: LD_VAR 0 7
50362: ARRAY
50363: PUSH
50364: LD_INT 2
50366: ARRAY
50367: PPUSH
50368: CALL_OW 546
50372: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50373: LD_VAR 0 8
50377: PUSH
50378: LD_INT 1
50380: ARRAY
50381: PUSH
50382: LD_VAR 0 8
50386: PUSH
50387: LD_INT 2
50389: ARRAY
50390: PUSH
50391: LD_VAR 0 13
50395: PUSH
50396: LD_INT 2
50398: PLUS
50399: GREATER
50400: OR
50401: PUSH
50402: LD_VAR 0 8
50406: PUSH
50407: LD_INT 2
50409: ARRAY
50410: PUSH
50411: LD_VAR 0 13
50415: PUSH
50416: LD_INT 2
50418: MINUS
50419: LESS
50420: OR
50421: PUSH
50422: LD_VAR 0 8
50426: PUSH
50427: LD_INT 3
50429: ARRAY
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 8
50436: PUSH
50437: LD_INT 9
50439: PUSH
50440: LD_INT 10
50442: PUSH
50443: LD_INT 11
50445: PUSH
50446: LD_INT 12
50448: PUSH
50449: LD_INT 13
50451: PUSH
50452: LD_INT 16
50454: PUSH
50455: LD_INT 17
50457: PUSH
50458: LD_INT 18
50460: PUSH
50461: LD_INT 19
50463: PUSH
50464: LD_INT 20
50466: PUSH
50467: LD_INT 21
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: IN
50485: NOT
50486: OR
50487: PUSH
50488: LD_VAR 0 8
50492: PUSH
50493: LD_INT 5
50495: ARRAY
50496: NOT
50497: OR
50498: PUSH
50499: LD_VAR 0 8
50503: PUSH
50504: LD_INT 6
50506: ARRAY
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 7
50516: PUSH
50517: LD_INT 9
50519: PUSH
50520: LD_INT 10
50522: PUSH
50523: LD_INT 11
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: IN
50534: NOT
50535: OR
50536: IFFALSE 50542
// exit ;
50538: POP
50539: POP
50540: GO 50625
// end ;
50542: GO 50213
50544: POP
50545: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50546: LD_VAR 0 9
50550: PPUSH
50551: LD_VAR 0 3
50555: PPUSH
50556: LD_VAR 0 4
50560: PPUSH
50561: LD_INT 20
50563: PPUSH
50564: CALL 42571 0 4
50568: PUSH
50569: LD_INT 4
50571: ARRAY
50572: IFFALSE 50576
// exit ;
50574: GO 50625
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50576: LD_VAR 0 2
50580: PUSH
50581: LD_INT 29
50583: PUSH
50584: LD_INT 30
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: IN
50591: PUSH
50592: LD_VAR 0 3
50596: PPUSH
50597: LD_VAR 0 4
50601: PPUSH
50602: LD_VAR 0 9
50606: PPUSH
50607: CALL_OW 440
50611: NOT
50612: AND
50613: IFFALSE 50617
// exit ;
50615: GO 50625
// result := true ;
50617: LD_ADDR_VAR 0 6
50621: PUSH
50622: LD_INT 1
50624: ST_TO_ADDR
// end ;
50625: LD_VAR 0 6
50629: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50630: LD_INT 0
50632: PPUSH
50633: PPUSH
50634: PPUSH
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
50653: PPUSH
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
50661: PPUSH
50662: PPUSH
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
50670: PPUSH
50671: PPUSH
50672: PPUSH
50673: PPUSH
50674: PPUSH
50675: PPUSH
50676: PPUSH
50677: PPUSH
50678: PPUSH
50679: PPUSH
50680: PPUSH
50681: PPUSH
50682: PPUSH
50683: PPUSH
50684: PPUSH
50685: PPUSH
50686: PPUSH
50687: PPUSH
50688: PPUSH
50689: PPUSH
// result = [ ] ;
50690: LD_ADDR_VAR 0 7
50694: PUSH
50695: EMPTY
50696: ST_TO_ADDR
// temp_list = [ ] ;
50697: LD_ADDR_VAR 0 9
50701: PUSH
50702: EMPTY
50703: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50704: LD_VAR 0 4
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: LD_INT 4
50723: PUSH
50724: LD_INT 5
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: IN
50735: NOT
50736: PUSH
50737: LD_VAR 0 1
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: IN
50752: PUSH
50753: LD_VAR 0 5
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: LIST
50771: IN
50772: NOT
50773: AND
50774: OR
50775: IFFALSE 50779
// exit ;
50777: GO 69170
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50779: LD_VAR 0 1
50783: PUSH
50784: LD_INT 6
50786: PUSH
50787: LD_INT 7
50789: PUSH
50790: LD_INT 8
50792: PUSH
50793: LD_INT 13
50795: PUSH
50796: LD_INT 12
50798: PUSH
50799: LD_INT 15
50801: PUSH
50802: LD_INT 11
50804: PUSH
50805: LD_INT 14
50807: PUSH
50808: LD_INT 10
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: IN
50822: IFFALSE 50832
// btype = b_lab ;
50824: LD_ADDR_VAR 0 1
50828: PUSH
50829: LD_INT 6
50831: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50832: LD_VAR 0 6
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: LIST
50850: IN
50851: NOT
50852: PUSH
50853: LD_VAR 0 1
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: LD_INT 3
50869: PUSH
50870: LD_INT 6
50872: PUSH
50873: LD_INT 36
50875: PUSH
50876: LD_INT 4
50878: PUSH
50879: LD_INT 5
50881: PUSH
50882: LD_INT 31
50884: PUSH
50885: LD_INT 32
50887: PUSH
50888: LD_INT 33
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: IN
50904: NOT
50905: PUSH
50906: LD_VAR 0 6
50910: PUSH
50911: LD_INT 1
50913: EQUAL
50914: AND
50915: OR
50916: PUSH
50917: LD_VAR 0 1
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: LD_INT 3
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: IN
50932: NOT
50933: PUSH
50934: LD_VAR 0 6
50938: PUSH
50939: LD_INT 2
50941: EQUAL
50942: AND
50943: OR
50944: IFFALSE 50954
// mode = 0 ;
50946: LD_ADDR_VAR 0 6
50950: PUSH
50951: LD_INT 0
50953: ST_TO_ADDR
// case mode of 0 :
50954: LD_VAR 0 6
50958: PUSH
50959: LD_INT 0
50961: DOUBLE
50962: EQUAL
50963: IFTRUE 50967
50965: GO 62420
50967: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50968: LD_ADDR_VAR 0 11
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51161: LD_ADDR_VAR 0 12
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 3
51318: NEG
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51357: LD_ADDR_VAR 0 13
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 2
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: NEG
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 3
51528: NEG
51529: PUSH
51530: LD_INT 3
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51556: LD_ADDR_VAR 0 14
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 3
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51752: LD_ADDR_VAR 0 15
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 3
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51945: LD_ADDR_VAR 0 16
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: LD_INT 3
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 3
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52138: LD_ADDR_VAR 0 17
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 2
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52368: LD_ADDR_VAR 0 18
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52598: LD_ADDR_VAR 0 19
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52828: LD_ADDR_VAR 0 20
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53058: LD_ADDR_VAR 0 21
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53288: LD_ADDR_VAR 0 22
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53518: LD_ADDR_VAR 0 23
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: LD_INT 3
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53798: LD_ADDR_VAR 0 24
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 3
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54074: LD_ADDR_VAR 0 25
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 3
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: LD_INT 3
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54348: LD_ADDR_VAR 0 26
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54624: LD_ADDR_VAR 0 27
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 3
54857: NEG
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54904: LD_ADDR_VAR 0 28
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55186: LD_ADDR_VAR 0 29
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: LD_INT 3
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 3
55430: NEG
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55465: LD_ADDR_VAR 0 30
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: LD_INT 2
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 3
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55743: LD_ADDR_VAR 0 31
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 3
55986: NEG
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56021: LD_ADDR_VAR 0 32
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 2
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 3
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: LD_INT 3
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: NEG
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56299: LD_ADDR_VAR 0 33
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 3
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 3
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56578: LD_ADDR_VAR 0 34
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: NEG
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 3
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 3
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 3
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56858: LD_ADDR_VAR 0 35
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56970: LD_ADDR_VAR 0 36
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57082: LD_ADDR_VAR 0 37
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57194: LD_ADDR_VAR 0 38
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57306: LD_ADDR_VAR 0 39
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57418: LD_ADDR_VAR 0 40
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 1
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57530: LD_ADDR_VAR 0 41
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: NEG
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 3
57839: NEG
57840: PUSH
57841: LD_INT 3
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57880: LD_ADDR_VAR 0 42
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 3
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: LD_INT 3
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58230: LD_ADDR_VAR 0 43
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: LD_INT 3
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 3
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58578: LD_ADDR_VAR 0 44
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 3
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 3
58852: NEG
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: LD_INT 3
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58928: LD_ADDR_VAR 0 45
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: LD_INT 3
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 3
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 3
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 3
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 3
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 3
59237: NEG
59238: PUSH
59239: LD_INT 3
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59278: LD_ADDR_VAR 0 46
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 2
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 3
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 3
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 3
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 3
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: NEG
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: NEG
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59626: LD_ADDR_VAR 0 47
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59777: LD_ADDR_VAR 0 48
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 2
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59924: LD_ADDR_VAR 0 49
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: LD_INT 2
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60068: LD_ADDR_VAR 0 50
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: LD_INT 2
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60212: LD_ADDR_VAR 0 51
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: LD_INT 2
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: NEG
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60359: LD_ADDR_VAR 0 52
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60510: LD_ADDR_VAR 0 53
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 2
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: NEG
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: NEG
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60740: LD_ADDR_VAR 0 54
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 2
60927: NEG
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60970: LD_ADDR_VAR 0 55
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 2
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61200: LD_ADDR_VAR 0 56
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: LD_INT 1
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: LD_INT 2
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 2
61376: NEG
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 2
61387: NEG
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 2
61399: NEG
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61430: LD_ADDR_VAR 0 57
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 2
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61660: LD_ADDR_VAR 0 58
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: LD_INT 1
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: LD_INT 2
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: LD_INT 2
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: LD_INT 2
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: NEG
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61890: LD_ADDR_VAR 0 59
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: LD_INT 1
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 1
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61978: LD_ADDR_VAR 0 60
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62066: LD_ADDR_VAR 0 61
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62154: LD_ADDR_VAR 0 62
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62242: LD_ADDR_VAR 0 63
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62330: LD_ADDR_VAR 0 64
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: LD_INT 1
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: ST_TO_ADDR
// end ; 1 :
62418: GO 68315
62420: LD_INT 1
62422: DOUBLE
62423: EQUAL
62424: IFTRUE 62428
62426: GO 65051
62428: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62429: LD_ADDR_VAR 0 11
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 3
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: LD_INT 3
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 2
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62473: LD_ADDR_VAR 0 12
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 3
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 3
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62514: LD_ADDR_VAR 0 13
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62554: LD_ADDR_VAR 0 14
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 3
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62595: LD_ADDR_VAR 0 15
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 3
62613: NEG
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 3
62624: NEG
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: LIST
62638: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62639: LD_ADDR_VAR 0 16
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: LD_INT 3
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 3
62658: NEG
62659: PUSH
62660: LD_INT 2
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 3
62670: NEG
62671: PUSH
62672: LD_INT 3
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: LIST
62684: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62685: LD_ADDR_VAR 0 17
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: LD_INT 3
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: LD_INT 3
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: LD_INT 2
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: LIST
62728: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62729: LD_ADDR_VAR 0 18
62733: PUSH
62734: LD_INT 2
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 3
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62770: LD_ADDR_VAR 0 19
62774: PUSH
62775: LD_INT 3
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 3
62787: PUSH
62788: LD_INT 3
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62810: LD_ADDR_VAR 0 20
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: LD_INT 3
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: LD_INT 2
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62851: LD_ADDR_VAR 0 21
62855: PUSH
62856: LD_INT 2
62858: NEG
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 3
62869: NEG
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 3
62880: NEG
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: LIST
62894: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62895: LD_ADDR_VAR 0 22
62899: PUSH
62900: LD_INT 2
62902: NEG
62903: PUSH
62904: LD_INT 3
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 3
62914: NEG
62915: PUSH
62916: LD_INT 2
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 3
62926: NEG
62927: PUSH
62928: LD_INT 3
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: LIST
62940: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62941: LD_ADDR_VAR 0 23
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: LD_INT 4
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 3
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: LIST
62984: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62985: LD_ADDR_VAR 0 24
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 3
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 4
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63026: LD_ADDR_VAR 0 25
63030: PUSH
63031: LD_INT 3
63033: PUSH
63034: LD_INT 3
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 4
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 3
63053: PUSH
63054: LD_INT 4
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: LIST
63065: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63066: LD_ADDR_VAR 0 26
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: LD_INT 4
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63107: LD_ADDR_VAR 0 27
63111: PUSH
63112: LD_INT 3
63114: NEG
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 4
63136: NEG
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63151: LD_ADDR_VAR 0 28
63155: PUSH
63156: LD_INT 3
63158: NEG
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 3
63170: NEG
63171: PUSH
63172: LD_INT 4
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 4
63182: NEG
63183: PUSH
63184: LD_INT 3
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: LIST
63196: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63197: LD_ADDR_VAR 0 29
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: LD_INT 3
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: LD_INT 3
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: LD_INT 2
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: LD_INT 4
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 4
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: LD_INT 3
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: LD_INT 5
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 5
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: LD_INT 4
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: LD_INT 6
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: LD_INT 6
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: LD_INT 5
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63352: LD_ADDR_VAR 0 30
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 3
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 3
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 3
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 4
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 4
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 4
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 5
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 5
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 5
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 6
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 6
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63495: LD_ADDR_VAR 0 31
63499: PUSH
63500: LD_INT 3
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 3
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: LD_INT 3
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 4
63532: PUSH
63533: LD_INT 3
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 4
63542: PUSH
63543: LD_INT 4
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 3
63552: PUSH
63553: LD_INT 4
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 5
63562: PUSH
63563: LD_INT 4
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 5
63572: PUSH
63573: LD_INT 5
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 4
63582: PUSH
63583: LD_INT 5
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 6
63592: PUSH
63593: LD_INT 5
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 6
63602: PUSH
63603: LD_INT 6
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 5
63612: PUSH
63613: LD_INT 6
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63634: LD_ADDR_VAR 0 32
63638: PUSH
63639: LD_INT 1
63641: PUSH
63642: LD_INT 3
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 3
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 1
63661: NEG
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 4
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 4
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 3
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 5
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: LD_INT 5
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: LD_INT 4
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: LD_INT 6
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: LD_INT 6
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 5
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63777: LD_ADDR_VAR 0 33
63781: PUSH
63782: LD_INT 2
63784: NEG
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 3
63795: NEG
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 3
63818: NEG
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 4
63829: NEG
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 4
63840: NEG
63841: PUSH
63842: LD_INT 1
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 4
63852: NEG
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 5
63863: NEG
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 5
63874: NEG
63875: PUSH
63876: LD_INT 1
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 5
63886: NEG
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 6
63897: NEG
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 6
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63932: LD_ADDR_VAR 0 34
63936: PUSH
63937: LD_INT 2
63939: NEG
63940: PUSH
63941: LD_INT 3
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 3
63951: NEG
63952: PUSH
63953: LD_INT 2
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 3
63963: NEG
63964: PUSH
63965: LD_INT 3
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 3
63975: NEG
63976: PUSH
63977: LD_INT 4
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 4
63987: NEG
63988: PUSH
63989: LD_INT 3
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 4
63999: NEG
64000: PUSH
64001: LD_INT 4
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 4
64011: NEG
64012: PUSH
64013: LD_INT 5
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 5
64023: NEG
64024: PUSH
64025: LD_INT 4
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 5
64035: NEG
64036: PUSH
64037: LD_INT 5
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 5
64047: NEG
64048: PUSH
64049: LD_INT 6
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 6
64059: NEG
64060: PUSH
64061: LD_INT 5
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 6
64071: NEG
64072: PUSH
64073: LD_INT 6
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64095: LD_ADDR_VAR 0 41
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: LD_INT 2
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 1
64113: NEG
64114: PUSH
64115: LD_INT 3
64117: NEG
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: LD_INT 2
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64139: LD_ADDR_VAR 0 42
64143: PUSH
64144: LD_INT 2
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 2
64156: PUSH
64157: LD_INT 1
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 3
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: LIST
64179: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64180: LD_ADDR_VAR 0 43
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: LD_INT 2
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 3
64197: PUSH
64198: LD_INT 2
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: LD_INT 3
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: LIST
64219: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64220: LD_ADDR_VAR 0 44
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 3
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64261: LD_ADDR_VAR 0 45
64265: PUSH
64266: LD_INT 2
64268: NEG
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 2
64279: NEG
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 3
64290: NEG
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64305: LD_ADDR_VAR 0 46
64309: PUSH
64310: LD_INT 2
64312: NEG
64313: PUSH
64314: LD_INT 2
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: NEG
64325: PUSH
64326: LD_INT 3
64328: NEG
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 3
64336: NEG
64337: PUSH
64338: LD_INT 2
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: LIST
64350: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64351: LD_ADDR_VAR 0 47
64355: PUSH
64356: LD_INT 2
64358: NEG
64359: PUSH
64360: LD_INT 3
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: LD_INT 3
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64384: LD_ADDR_VAR 0 48
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: LD_INT 2
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64415: LD_ADDR_VAR 0 49
64419: PUSH
64420: LD_INT 3
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 3
64432: PUSH
64433: LD_INT 2
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64444: LD_ADDR_VAR 0 50
64448: PUSH
64449: LD_INT 2
64451: PUSH
64452: LD_INT 3
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: LD_INT 3
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64473: LD_ADDR_VAR 0 51
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: LD_INT 2
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 2
64491: NEG
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64504: LD_ADDR_VAR 0 52
64508: PUSH
64509: LD_INT 3
64511: NEG
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 3
64523: NEG
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64537: LD_ADDR_VAR 0 53
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: LD_INT 3
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 3
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 1
64567: PUSH
64568: LD_INT 2
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: LIST
64580: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64581: LD_ADDR_VAR 0 54
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 3
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: LIST
64621: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64622: LD_ADDR_VAR 0 55
64626: PUSH
64627: LD_INT 3
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 3
64639: PUSH
64640: LD_INT 3
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: PUSH
64650: LD_INT 3
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: LIST
64661: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64662: LD_ADDR_VAR 0 56
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 3
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 3
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: NEG
64690: PUSH
64691: LD_INT 2
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64703: LD_ADDR_VAR 0 57
64707: PUSH
64708: LD_INT 2
64710: NEG
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 3
64721: NEG
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 3
64732: NEG
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64747: LD_ADDR_VAR 0 58
64751: PUSH
64752: LD_INT 2
64754: NEG
64755: PUSH
64756: LD_INT 3
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 3
64766: NEG
64767: PUSH
64768: LD_INT 2
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 3
64778: NEG
64779: PUSH
64780: LD_INT 3
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: LIST
64792: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64793: LD_ADDR_VAR 0 59
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 2
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: LIST
64836: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64837: LD_ADDR_VAR 0 60
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: LIST
64877: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64878: LD_ADDR_VAR 0 61
64882: PUSH
64883: LD_INT 2
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 2
64895: PUSH
64896: LD_INT 2
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: LD_INT 2
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: LIST
64917: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64918: LD_ADDR_VAR 0 62
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: LD_INT 2
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 2
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: LD_INT 1
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: LIST
64958: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64959: LD_ADDR_VAR 0 63
64963: PUSH
64964: LD_INT 1
64966: NEG
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 2
64977: NEG
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 2
64988: NEG
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: LIST
65002: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65003: LD_ADDR_VAR 0 64
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 2
65022: NEG
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 2
65034: NEG
65035: PUSH
65036: LD_INT 2
65038: NEG
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: LIST
65048: ST_TO_ADDR
// end ; 2 :
65049: GO 68315
65051: LD_INT 2
65053: DOUBLE
65054: EQUAL
65055: IFTRUE 65059
65057: GO 68314
65059: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65060: LD_ADDR_VAR 0 29
65064: PUSH
65065: LD_INT 4
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 4
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 5
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 5
65098: PUSH
65099: LD_INT 1
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 4
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 3
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 3
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 3
65139: PUSH
65140: LD_INT 2
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 5
65150: PUSH
65151: LD_INT 2
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 3
65160: PUSH
65161: LD_INT 3
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 3
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 4
65180: PUSH
65181: LD_INT 3
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 4
65190: PUSH
65191: LD_INT 4
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 3
65200: PUSH
65201: LD_INT 4
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 2
65210: PUSH
65211: LD_INT 3
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 2
65220: PUSH
65221: LD_INT 2
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 4
65230: PUSH
65231: LD_INT 2
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: LD_INT 4
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: LD_INT 4
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: LD_INT 3
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: LD_INT 4
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 1
65280: PUSH
65281: LD_INT 5
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: LD_INT 5
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 1
65300: NEG
65301: PUSH
65302: LD_INT 4
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: LD_INT 3
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 2
65322: PUSH
65323: LD_INT 5
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 2
65332: NEG
65333: PUSH
65334: LD_INT 3
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 3
65343: NEG
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 3
65354: NEG
65355: PUSH
65356: LD_INT 1
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 2
65377: NEG
65378: PUSH
65379: LD_INT 1
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 3
65388: NEG
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 4
65399: NEG
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 4
65410: NEG
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 4
65422: NEG
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: LD_INT 2
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 4
65445: NEG
65446: PUSH
65447: LD_INT 4
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 4
65457: NEG
65458: PUSH
65459: LD_INT 5
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 3
65469: NEG
65470: PUSH
65471: LD_INT 4
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: LD_INT 3
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 4
65493: NEG
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 5
65505: NEG
65506: PUSH
65507: LD_INT 4
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 5
65517: NEG
65518: PUSH
65519: LD_INT 5
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 3
65529: NEG
65530: PUSH
65531: LD_INT 5
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 5
65541: NEG
65542: PUSH
65543: LD_INT 3
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65598: LD_ADDR_VAR 0 30
65602: PUSH
65603: LD_INT 4
65605: PUSH
65606: LD_INT 4
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 4
65615: PUSH
65616: LD_INT 3
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 5
65625: PUSH
65626: LD_INT 4
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 5
65635: PUSH
65636: LD_INT 5
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 4
65645: PUSH
65646: LD_INT 5
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 3
65655: PUSH
65656: LD_INT 4
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: PUSH
65666: LD_INT 3
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 5
65675: PUSH
65676: LD_INT 3
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 3
65685: PUSH
65686: LD_INT 5
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: LD_INT 2
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 1
65725: PUSH
65726: LD_INT 4
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: LD_INT 4
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 3
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: PUSH
65768: LD_INT 4
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: LD_INT 2
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 4
65788: NEG
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 4
65799: NEG
65800: PUSH
65801: LD_INT 1
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 3
65811: NEG
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 3
65822: NEG
65823: PUSH
65824: LD_INT 1
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 4
65833: NEG
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 5
65844: NEG
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 5
65855: NEG
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 5
65867: NEG
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 3
65879: NEG
65880: PUSH
65881: LD_INT 2
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 3
65890: NEG
65891: PUSH
65892: LD_INT 3
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 3
65902: NEG
65903: PUSH
65904: LD_INT 4
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 2
65914: NEG
65915: PUSH
65916: LD_INT 3
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 2
65926: NEG
65927: PUSH
65928: LD_INT 2
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 3
65938: NEG
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 4
65950: NEG
65951: PUSH
65952: LD_INT 3
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 4
65962: NEG
65963: PUSH
65964: LD_INT 4
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 2
65974: NEG
65975: PUSH
65976: LD_INT 4
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 4
65986: NEG
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: LD_INT 4
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: LD_INT 5
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 1
66020: PUSH
66021: LD_INT 4
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: LD_INT 3
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: LD_INT 3
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: LD_INT 4
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 1
66065: NEG
66066: PUSH
66067: LD_INT 5
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: LD_INT 3
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 2
66088: NEG
66089: PUSH
66090: LD_INT 5
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66145: LD_ADDR_VAR 0 31
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: LD_INT 4
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 0
66162: PUSH
66163: LD_INT 3
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: LD_INT 4
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: LD_INT 5
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: LD_INT 5
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 1
66202: NEG
66203: PUSH
66204: LD_INT 4
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: LD_INT 3
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 2
66224: PUSH
66225: LD_INT 5
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 2
66234: NEG
66235: PUSH
66236: LD_INT 3
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 3
66245: NEG
66246: PUSH
66247: LD_INT 0
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 3
66256: NEG
66257: PUSH
66258: LD_INT 1
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 2
66268: NEG
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 2
66279: NEG
66280: PUSH
66281: LD_INT 1
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 3
66290: NEG
66291: PUSH
66292: LD_INT 1
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 4
66301: NEG
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 4
66312: NEG
66313: PUSH
66314: LD_INT 1
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 4
66324: NEG
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: LD_INT 2
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 4
66347: NEG
66348: PUSH
66349: LD_INT 4
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 4
66359: NEG
66360: PUSH
66361: LD_INT 5
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 3
66371: NEG
66372: PUSH
66373: LD_INT 4
66375: NEG
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 3
66383: NEG
66384: PUSH
66385: LD_INT 3
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 4
66395: NEG
66396: PUSH
66397: LD_INT 3
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 5
66407: NEG
66408: PUSH
66409: LD_INT 4
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 5
66419: NEG
66420: PUSH
66421: LD_INT 5
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 3
66431: NEG
66432: PUSH
66433: LD_INT 5
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 5
66443: NEG
66444: PUSH
66445: LD_INT 3
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: LD_INT 3
66458: NEG
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: LD_INT 4
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: LD_INT 3
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: LD_INT 2
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: LD_INT 2
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: LD_INT 3
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 1
66522: NEG
66523: PUSH
66524: LD_INT 4
66526: NEG
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 2
66534: PUSH
66535: LD_INT 2
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 2
66545: NEG
66546: PUSH
66547: LD_INT 4
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 4
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 4
66567: PUSH
66568: LD_INT 1
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 5
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 5
66588: PUSH
66589: LD_INT 1
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 4
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 3
66608: PUSH
66609: LD_INT 0
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 3
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 5
66640: PUSH
66641: LD_INT 2
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66695: LD_ADDR_VAR 0 32
66699: PUSH
66700: LD_INT 4
66702: NEG
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 4
66713: NEG
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 3
66725: NEG
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 3
66736: NEG
66737: PUSH
66738: LD_INT 1
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 4
66747: NEG
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 5
66758: NEG
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 5
66769: NEG
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 5
66781: NEG
66782: PUSH
66783: LD_INT 2
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 3
66793: NEG
66794: PUSH
66795: LD_INT 2
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 3
66804: NEG
66805: PUSH
66806: LD_INT 3
66808: NEG
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 3
66816: NEG
66817: PUSH
66818: LD_INT 4
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 2
66828: NEG
66829: PUSH
66830: LD_INT 3
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: NEG
66841: PUSH
66842: LD_INT 2
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 3
66852: NEG
66853: PUSH
66854: LD_INT 2
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 4
66864: NEG
66865: PUSH
66866: LD_INT 3
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 4
66876: NEG
66877: PUSH
66878: LD_INT 4
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 2
66888: NEG
66889: PUSH
66890: LD_INT 4
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 4
66900: NEG
66901: PUSH
66902: LD_INT 2
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: LD_INT 4
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: LD_INT 5
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: LD_INT 4
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 1
66945: PUSH
66946: LD_INT 3
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: LD_INT 3
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 1
66967: NEG
66968: PUSH
66969: LD_INT 4
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 1
66979: NEG
66980: PUSH
66981: LD_INT 5
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 2
66991: PUSH
66992: LD_INT 3
66994: NEG
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 2
67002: NEG
67003: PUSH
67004: LD_INT 5
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 3
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 3
67024: PUSH
67025: LD_INT 1
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 4
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 4
67045: PUSH
67046: LD_INT 1
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 3
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 2
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: LD_INT 1
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: LD_INT 2
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 4
67097: PUSH
67098: LD_INT 2
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 4
67107: PUSH
67108: LD_INT 4
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 4
67117: PUSH
67118: LD_INT 3
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 5
67127: PUSH
67128: LD_INT 4
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 5
67137: PUSH
67138: LD_INT 5
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 4
67147: PUSH
67148: LD_INT 5
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 3
67157: PUSH
67158: LD_INT 4
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: LD_INT 3
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 5
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 3
67187: PUSH
67188: LD_INT 5
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67242: LD_ADDR_VAR 0 33
67246: PUSH
67247: LD_INT 4
67249: NEG
67250: PUSH
67251: LD_INT 4
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 4
67261: NEG
67262: PUSH
67263: LD_INT 5
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 3
67273: NEG
67274: PUSH
67275: LD_INT 4
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 3
67285: NEG
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 4
67297: NEG
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 5
67309: NEG
67310: PUSH
67311: LD_INT 4
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 5
67321: NEG
67322: PUSH
67323: LD_INT 5
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 3
67333: NEG
67334: PUSH
67335: LD_INT 5
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 5
67345: NEG
67346: PUSH
67347: LD_INT 3
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 0
67357: PUSH
67358: LD_INT 3
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: LD_INT 4
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: PUSH
67380: LD_INT 3
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 1
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: LD_INT 3
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 1
67424: NEG
67425: PUSH
67426: LD_INT 4
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 2
67436: PUSH
67437: LD_INT 2
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 2
67447: NEG
67448: PUSH
67449: LD_INT 4
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 4
67459: PUSH
67460: LD_INT 0
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 4
67469: PUSH
67470: LD_INT 1
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 5
67480: PUSH
67481: LD_INT 0
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 5
67490: PUSH
67491: LD_INT 1
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 4
67500: PUSH
67501: LD_INT 1
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 3
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 3
67520: PUSH
67521: LD_INT 1
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: LD_INT 2
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 5
67542: PUSH
67543: LD_INT 2
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 3
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 4
67572: PUSH
67573: LD_INT 3
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 4
67582: PUSH
67583: LD_INT 4
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 3
67592: PUSH
67593: LD_INT 4
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 2
67602: PUSH
67603: LD_INT 3
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 2
67612: PUSH
67613: LD_INT 2
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 4
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: LD_INT 4
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: LD_INT 4
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 0
67652: PUSH
67653: LD_INT 3
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 1
67662: PUSH
67663: LD_INT 4
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 1
67672: PUSH
67673: LD_INT 5
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: LD_INT 5
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 1
67692: NEG
67693: PUSH
67694: LD_INT 4
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 2
67714: PUSH
67715: LD_INT 5
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 2
67724: NEG
67725: PUSH
67726: LD_INT 3
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67780: LD_ADDR_VAR 0 34
67784: PUSH
67785: LD_INT 0
67787: PUSH
67788: LD_INT 4
67790: NEG
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: LD_INT 5
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: LD_INT 4
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 1
67820: PUSH
67821: LD_INT 3
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: LD_INT 3
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: PUSH
67844: LD_INT 4
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: LD_INT 5
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 2
67866: PUSH
67867: LD_INT 3
67869: NEG
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 2
67877: NEG
67878: PUSH
67879: LD_INT 5
67881: NEG
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 4
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 4
67920: PUSH
67921: LD_INT 1
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 3
67930: PUSH
67931: LD_INT 1
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 2
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 2
67950: PUSH
67951: LD_INT 1
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 2
67961: PUSH
67962: LD_INT 2
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: LD_INT 2
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 4
67982: PUSH
67983: LD_INT 4
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 4
67992: PUSH
67993: LD_INT 3
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 5
68002: PUSH
68003: LD_INT 4
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 5
68012: PUSH
68013: LD_INT 5
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 4
68022: PUSH
68023: LD_INT 5
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 3
68032: PUSH
68033: LD_INT 4
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 3
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 5
68052: PUSH
68053: LD_INT 3
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 3
68062: PUSH
68063: LD_INT 5
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 3
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: LD_INT 2
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: LD_INT 3
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 1
68102: PUSH
68103: LD_INT 4
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 0
68112: PUSH
68113: LD_INT 4
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 1
68122: NEG
68123: PUSH
68124: LD_INT 3
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 1
68133: NEG
68134: PUSH
68135: LD_INT 2
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 2
68144: PUSH
68145: LD_INT 4
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 2
68154: NEG
68155: PUSH
68156: LD_INT 2
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 4
68165: NEG
68166: PUSH
68167: LD_INT 0
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 4
68176: NEG
68177: PUSH
68178: LD_INT 1
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 3
68188: NEG
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 3
68199: NEG
68200: PUSH
68201: LD_INT 1
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 4
68210: NEG
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 5
68221: NEG
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 5
68232: NEG
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 5
68244: NEG
68245: PUSH
68246: LD_INT 2
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 3
68256: NEG
68257: PUSH
68258: LD_INT 2
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: ST_TO_ADDR
// end ; end ;
68312: GO 68315
68314: POP
// case btype of b_depot , b_warehouse :
68315: LD_VAR 0 1
68319: PUSH
68320: LD_INT 0
68322: DOUBLE
68323: EQUAL
68324: IFTRUE 68334
68326: LD_INT 1
68328: DOUBLE
68329: EQUAL
68330: IFTRUE 68334
68332: GO 68535
68334: POP
// case nation of nation_american :
68335: LD_VAR 0 5
68339: PUSH
68340: LD_INT 1
68342: DOUBLE
68343: EQUAL
68344: IFTRUE 68348
68346: GO 68404
68348: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68349: LD_ADDR_VAR 0 9
68353: PUSH
68354: LD_VAR 0 11
68358: PUSH
68359: LD_VAR 0 12
68363: PUSH
68364: LD_VAR 0 13
68368: PUSH
68369: LD_VAR 0 14
68373: PUSH
68374: LD_VAR 0 15
68378: PUSH
68379: LD_VAR 0 16
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: PUSH
68392: LD_VAR 0 4
68396: PUSH
68397: LD_INT 1
68399: PLUS
68400: ARRAY
68401: ST_TO_ADDR
68402: GO 68533
68404: LD_INT 2
68406: DOUBLE
68407: EQUAL
68408: IFTRUE 68412
68410: GO 68468
68412: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68413: LD_ADDR_VAR 0 9
68417: PUSH
68418: LD_VAR 0 17
68422: PUSH
68423: LD_VAR 0 18
68427: PUSH
68428: LD_VAR 0 19
68432: PUSH
68433: LD_VAR 0 20
68437: PUSH
68438: LD_VAR 0 21
68442: PUSH
68443: LD_VAR 0 22
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: PUSH
68456: LD_VAR 0 4
68460: PUSH
68461: LD_INT 1
68463: PLUS
68464: ARRAY
68465: ST_TO_ADDR
68466: GO 68533
68468: LD_INT 3
68470: DOUBLE
68471: EQUAL
68472: IFTRUE 68476
68474: GO 68532
68476: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68477: LD_ADDR_VAR 0 9
68481: PUSH
68482: LD_VAR 0 23
68486: PUSH
68487: LD_VAR 0 24
68491: PUSH
68492: LD_VAR 0 25
68496: PUSH
68497: LD_VAR 0 26
68501: PUSH
68502: LD_VAR 0 27
68506: PUSH
68507: LD_VAR 0 28
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: PUSH
68520: LD_VAR 0 4
68524: PUSH
68525: LD_INT 1
68527: PLUS
68528: ARRAY
68529: ST_TO_ADDR
68530: GO 68533
68532: POP
68533: GO 69088
68535: LD_INT 2
68537: DOUBLE
68538: EQUAL
68539: IFTRUE 68549
68541: LD_INT 3
68543: DOUBLE
68544: EQUAL
68545: IFTRUE 68549
68547: GO 68605
68549: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68550: LD_ADDR_VAR 0 9
68554: PUSH
68555: LD_VAR 0 29
68559: PUSH
68560: LD_VAR 0 30
68564: PUSH
68565: LD_VAR 0 31
68569: PUSH
68570: LD_VAR 0 32
68574: PUSH
68575: LD_VAR 0 33
68579: PUSH
68580: LD_VAR 0 34
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: PUSH
68593: LD_VAR 0 4
68597: PUSH
68598: LD_INT 1
68600: PLUS
68601: ARRAY
68602: ST_TO_ADDR
68603: GO 69088
68605: LD_INT 16
68607: DOUBLE
68608: EQUAL
68609: IFTRUE 68667
68611: LD_INT 17
68613: DOUBLE
68614: EQUAL
68615: IFTRUE 68667
68617: LD_INT 18
68619: DOUBLE
68620: EQUAL
68621: IFTRUE 68667
68623: LD_INT 19
68625: DOUBLE
68626: EQUAL
68627: IFTRUE 68667
68629: LD_INT 22
68631: DOUBLE
68632: EQUAL
68633: IFTRUE 68667
68635: LD_INT 20
68637: DOUBLE
68638: EQUAL
68639: IFTRUE 68667
68641: LD_INT 21
68643: DOUBLE
68644: EQUAL
68645: IFTRUE 68667
68647: LD_INT 23
68649: DOUBLE
68650: EQUAL
68651: IFTRUE 68667
68653: LD_INT 24
68655: DOUBLE
68656: EQUAL
68657: IFTRUE 68667
68659: LD_INT 25
68661: DOUBLE
68662: EQUAL
68663: IFTRUE 68667
68665: GO 68723
68667: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68668: LD_ADDR_VAR 0 9
68672: PUSH
68673: LD_VAR 0 35
68677: PUSH
68678: LD_VAR 0 36
68682: PUSH
68683: LD_VAR 0 37
68687: PUSH
68688: LD_VAR 0 38
68692: PUSH
68693: LD_VAR 0 39
68697: PUSH
68698: LD_VAR 0 40
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: PUSH
68711: LD_VAR 0 4
68715: PUSH
68716: LD_INT 1
68718: PLUS
68719: ARRAY
68720: ST_TO_ADDR
68721: GO 69088
68723: LD_INT 6
68725: DOUBLE
68726: EQUAL
68727: IFTRUE 68779
68729: LD_INT 7
68731: DOUBLE
68732: EQUAL
68733: IFTRUE 68779
68735: LD_INT 8
68737: DOUBLE
68738: EQUAL
68739: IFTRUE 68779
68741: LD_INT 13
68743: DOUBLE
68744: EQUAL
68745: IFTRUE 68779
68747: LD_INT 12
68749: DOUBLE
68750: EQUAL
68751: IFTRUE 68779
68753: LD_INT 15
68755: DOUBLE
68756: EQUAL
68757: IFTRUE 68779
68759: LD_INT 11
68761: DOUBLE
68762: EQUAL
68763: IFTRUE 68779
68765: LD_INT 14
68767: DOUBLE
68768: EQUAL
68769: IFTRUE 68779
68771: LD_INT 10
68773: DOUBLE
68774: EQUAL
68775: IFTRUE 68779
68777: GO 68835
68779: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68780: LD_ADDR_VAR 0 9
68784: PUSH
68785: LD_VAR 0 41
68789: PUSH
68790: LD_VAR 0 42
68794: PUSH
68795: LD_VAR 0 43
68799: PUSH
68800: LD_VAR 0 44
68804: PUSH
68805: LD_VAR 0 45
68809: PUSH
68810: LD_VAR 0 46
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: PUSH
68823: LD_VAR 0 4
68827: PUSH
68828: LD_INT 1
68830: PLUS
68831: ARRAY
68832: ST_TO_ADDR
68833: GO 69088
68835: LD_INT 36
68837: DOUBLE
68838: EQUAL
68839: IFTRUE 68843
68841: GO 68899
68843: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68844: LD_ADDR_VAR 0 9
68848: PUSH
68849: LD_VAR 0 47
68853: PUSH
68854: LD_VAR 0 48
68858: PUSH
68859: LD_VAR 0 49
68863: PUSH
68864: LD_VAR 0 50
68868: PUSH
68869: LD_VAR 0 51
68873: PUSH
68874: LD_VAR 0 52
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: PUSH
68887: LD_VAR 0 4
68891: PUSH
68892: LD_INT 1
68894: PLUS
68895: ARRAY
68896: ST_TO_ADDR
68897: GO 69088
68899: LD_INT 4
68901: DOUBLE
68902: EQUAL
68903: IFTRUE 68925
68905: LD_INT 5
68907: DOUBLE
68908: EQUAL
68909: IFTRUE 68925
68911: LD_INT 34
68913: DOUBLE
68914: EQUAL
68915: IFTRUE 68925
68917: LD_INT 37
68919: DOUBLE
68920: EQUAL
68921: IFTRUE 68925
68923: GO 68981
68925: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68926: LD_ADDR_VAR 0 9
68930: PUSH
68931: LD_VAR 0 53
68935: PUSH
68936: LD_VAR 0 54
68940: PUSH
68941: LD_VAR 0 55
68945: PUSH
68946: LD_VAR 0 56
68950: PUSH
68951: LD_VAR 0 57
68955: PUSH
68956: LD_VAR 0 58
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: PUSH
68969: LD_VAR 0 4
68973: PUSH
68974: LD_INT 1
68976: PLUS
68977: ARRAY
68978: ST_TO_ADDR
68979: GO 69088
68981: LD_INT 31
68983: DOUBLE
68984: EQUAL
68985: IFTRUE 69031
68987: LD_INT 32
68989: DOUBLE
68990: EQUAL
68991: IFTRUE 69031
68993: LD_INT 33
68995: DOUBLE
68996: EQUAL
68997: IFTRUE 69031
68999: LD_INT 27
69001: DOUBLE
69002: EQUAL
69003: IFTRUE 69031
69005: LD_INT 26
69007: DOUBLE
69008: EQUAL
69009: IFTRUE 69031
69011: LD_INT 28
69013: DOUBLE
69014: EQUAL
69015: IFTRUE 69031
69017: LD_INT 29
69019: DOUBLE
69020: EQUAL
69021: IFTRUE 69031
69023: LD_INT 30
69025: DOUBLE
69026: EQUAL
69027: IFTRUE 69031
69029: GO 69087
69031: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69032: LD_ADDR_VAR 0 9
69036: PUSH
69037: LD_VAR 0 59
69041: PUSH
69042: LD_VAR 0 60
69046: PUSH
69047: LD_VAR 0 61
69051: PUSH
69052: LD_VAR 0 62
69056: PUSH
69057: LD_VAR 0 63
69061: PUSH
69062: LD_VAR 0 64
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: PUSH
69075: LD_VAR 0 4
69079: PUSH
69080: LD_INT 1
69082: PLUS
69083: ARRAY
69084: ST_TO_ADDR
69085: GO 69088
69087: POP
// temp_list2 = [ ] ;
69088: LD_ADDR_VAR 0 10
69092: PUSH
69093: EMPTY
69094: ST_TO_ADDR
// for i in temp_list do
69095: LD_ADDR_VAR 0 8
69099: PUSH
69100: LD_VAR 0 9
69104: PUSH
69105: FOR_IN
69106: IFFALSE 69158
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69108: LD_ADDR_VAR 0 10
69112: PUSH
69113: LD_VAR 0 10
69117: PUSH
69118: LD_VAR 0 8
69122: PUSH
69123: LD_INT 1
69125: ARRAY
69126: PUSH
69127: LD_VAR 0 2
69131: PLUS
69132: PUSH
69133: LD_VAR 0 8
69137: PUSH
69138: LD_INT 2
69140: ARRAY
69141: PUSH
69142: LD_VAR 0 3
69146: PLUS
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: EMPTY
69153: LIST
69154: ADD
69155: ST_TO_ADDR
69156: GO 69105
69158: POP
69159: POP
// result = temp_list2 ;
69160: LD_ADDR_VAR 0 7
69164: PUSH
69165: LD_VAR 0 10
69169: ST_TO_ADDR
// end ;
69170: LD_VAR 0 7
69174: RET
// export function EnemyInRange ( unit , dist ) ; begin
69175: LD_INT 0
69177: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69178: LD_ADDR_VAR 0 3
69182: PUSH
69183: LD_VAR 0 1
69187: PPUSH
69188: CALL_OW 255
69192: PPUSH
69193: LD_VAR 0 1
69197: PPUSH
69198: CALL_OW 250
69202: PPUSH
69203: LD_VAR 0 1
69207: PPUSH
69208: CALL_OW 251
69212: PPUSH
69213: LD_VAR 0 2
69217: PPUSH
69218: CALL 42571 0 4
69222: PUSH
69223: LD_INT 4
69225: ARRAY
69226: ST_TO_ADDR
// end ;
69227: LD_VAR 0 3
69231: RET
// export function PlayerSeeMe ( unit ) ; begin
69232: LD_INT 0
69234: PPUSH
// result := See ( your_side , unit ) ;
69235: LD_ADDR_VAR 0 2
69239: PUSH
69240: LD_OWVAR 2
69244: PPUSH
69245: LD_VAR 0 1
69249: PPUSH
69250: CALL_OW 292
69254: ST_TO_ADDR
// end ;
69255: LD_VAR 0 2
69259: RET
// export function ReverseDir ( unit ) ; begin
69260: LD_INT 0
69262: PPUSH
// if not unit then
69263: LD_VAR 0 1
69267: NOT
69268: IFFALSE 69272
// exit ;
69270: GO 69295
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69272: LD_ADDR_VAR 0 2
69276: PUSH
69277: LD_VAR 0 1
69281: PPUSH
69282: CALL_OW 254
69286: PUSH
69287: LD_INT 3
69289: PLUS
69290: PUSH
69291: LD_INT 6
69293: MOD
69294: ST_TO_ADDR
// end ;
69295: LD_VAR 0 2
69299: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69300: LD_INT 0
69302: PPUSH
69303: PPUSH
69304: PPUSH
69305: PPUSH
69306: PPUSH
// if not hexes then
69307: LD_VAR 0 2
69311: NOT
69312: IFFALSE 69316
// exit ;
69314: GO 69464
// dist := 9999 ;
69316: LD_ADDR_VAR 0 5
69320: PUSH
69321: LD_INT 9999
69323: ST_TO_ADDR
// for i = 1 to hexes do
69324: LD_ADDR_VAR 0 4
69328: PUSH
69329: DOUBLE
69330: LD_INT 1
69332: DEC
69333: ST_TO_ADDR
69334: LD_VAR 0 2
69338: PUSH
69339: FOR_TO
69340: IFFALSE 69452
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69342: LD_VAR 0 1
69346: PPUSH
69347: LD_VAR 0 2
69351: PUSH
69352: LD_VAR 0 4
69356: ARRAY
69357: PUSH
69358: LD_INT 1
69360: ARRAY
69361: PPUSH
69362: LD_VAR 0 2
69366: PUSH
69367: LD_VAR 0 4
69371: ARRAY
69372: PUSH
69373: LD_INT 2
69375: ARRAY
69376: PPUSH
69377: CALL_OW 297
69381: PUSH
69382: LD_VAR 0 5
69386: LESS
69387: IFFALSE 69450
// begin hex := hexes [ i ] ;
69389: LD_ADDR_VAR 0 7
69393: PUSH
69394: LD_VAR 0 2
69398: PUSH
69399: LD_VAR 0 4
69403: ARRAY
69404: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69405: LD_ADDR_VAR 0 5
69409: PUSH
69410: LD_VAR 0 1
69414: PPUSH
69415: LD_VAR 0 2
69419: PUSH
69420: LD_VAR 0 4
69424: ARRAY
69425: PUSH
69426: LD_INT 1
69428: ARRAY
69429: PPUSH
69430: LD_VAR 0 2
69434: PUSH
69435: LD_VAR 0 4
69439: ARRAY
69440: PUSH
69441: LD_INT 2
69443: ARRAY
69444: PPUSH
69445: CALL_OW 297
69449: ST_TO_ADDR
// end ; end ;
69450: GO 69339
69452: POP
69453: POP
// result := hex ;
69454: LD_ADDR_VAR 0 3
69458: PUSH
69459: LD_VAR 0 7
69463: ST_TO_ADDR
// end ;
69464: LD_VAR 0 3
69468: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69469: LD_INT 0
69471: PPUSH
69472: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69473: LD_VAR 0 1
69477: NOT
69478: PUSH
69479: LD_VAR 0 1
69483: PUSH
69484: LD_INT 21
69486: PUSH
69487: LD_INT 2
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 23
69496: PUSH
69497: LD_INT 2
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PPUSH
69508: CALL_OW 69
69512: IN
69513: NOT
69514: OR
69515: IFFALSE 69519
// exit ;
69517: GO 69566
// for i = 1 to 3 do
69519: LD_ADDR_VAR 0 3
69523: PUSH
69524: DOUBLE
69525: LD_INT 1
69527: DEC
69528: ST_TO_ADDR
69529: LD_INT 3
69531: PUSH
69532: FOR_TO
69533: IFFALSE 69564
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69535: LD_VAR 0 1
69539: PPUSH
69540: CALL_OW 250
69544: PPUSH
69545: LD_VAR 0 1
69549: PPUSH
69550: CALL_OW 251
69554: PPUSH
69555: LD_INT 1
69557: PPUSH
69558: CALL_OW 453
69562: GO 69532
69564: POP
69565: POP
// end ;
69566: LD_VAR 0 2
69570: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69571: LD_INT 0
69573: PPUSH
69574: PPUSH
69575: PPUSH
69576: PPUSH
69577: PPUSH
69578: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69579: LD_VAR 0 1
69583: NOT
69584: PUSH
69585: LD_VAR 0 2
69589: NOT
69590: OR
69591: PUSH
69592: LD_VAR 0 1
69596: PPUSH
69597: CALL_OW 314
69601: OR
69602: IFFALSE 69606
// exit ;
69604: GO 70047
// x := GetX ( enemy_unit ) ;
69606: LD_ADDR_VAR 0 7
69610: PUSH
69611: LD_VAR 0 2
69615: PPUSH
69616: CALL_OW 250
69620: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69621: LD_ADDR_VAR 0 8
69625: PUSH
69626: LD_VAR 0 2
69630: PPUSH
69631: CALL_OW 251
69635: ST_TO_ADDR
// if not x or not y then
69636: LD_VAR 0 7
69640: NOT
69641: PUSH
69642: LD_VAR 0 8
69646: NOT
69647: OR
69648: IFFALSE 69652
// exit ;
69650: GO 70047
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69652: LD_ADDR_VAR 0 6
69656: PUSH
69657: LD_VAR 0 7
69661: PPUSH
69662: LD_INT 0
69664: PPUSH
69665: LD_INT 4
69667: PPUSH
69668: CALL_OW 272
69672: PUSH
69673: LD_VAR 0 8
69677: PPUSH
69678: LD_INT 0
69680: PPUSH
69681: LD_INT 4
69683: PPUSH
69684: CALL_OW 273
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_VAR 0 7
69697: PPUSH
69698: LD_INT 1
69700: PPUSH
69701: LD_INT 4
69703: PPUSH
69704: CALL_OW 272
69708: PUSH
69709: LD_VAR 0 8
69713: PPUSH
69714: LD_INT 1
69716: PPUSH
69717: LD_INT 4
69719: PPUSH
69720: CALL_OW 273
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_VAR 0 7
69733: PPUSH
69734: LD_INT 2
69736: PPUSH
69737: LD_INT 4
69739: PPUSH
69740: CALL_OW 272
69744: PUSH
69745: LD_VAR 0 8
69749: PPUSH
69750: LD_INT 2
69752: PPUSH
69753: LD_INT 4
69755: PPUSH
69756: CALL_OW 273
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_VAR 0 7
69769: PPUSH
69770: LD_INT 3
69772: PPUSH
69773: LD_INT 4
69775: PPUSH
69776: CALL_OW 272
69780: PUSH
69781: LD_VAR 0 8
69785: PPUSH
69786: LD_INT 3
69788: PPUSH
69789: LD_INT 4
69791: PPUSH
69792: CALL_OW 273
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_VAR 0 7
69805: PPUSH
69806: LD_INT 4
69808: PPUSH
69809: LD_INT 4
69811: PPUSH
69812: CALL_OW 272
69816: PUSH
69817: LD_VAR 0 8
69821: PPUSH
69822: LD_INT 4
69824: PPUSH
69825: LD_INT 4
69827: PPUSH
69828: CALL_OW 273
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_VAR 0 7
69841: PPUSH
69842: LD_INT 5
69844: PPUSH
69845: LD_INT 4
69847: PPUSH
69848: CALL_OW 272
69852: PUSH
69853: LD_VAR 0 8
69857: PPUSH
69858: LD_INT 5
69860: PPUSH
69861: LD_INT 4
69863: PPUSH
69864: CALL_OW 273
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: ST_TO_ADDR
// for i = tmp downto 1 do
69881: LD_ADDR_VAR 0 4
69885: PUSH
69886: DOUBLE
69887: LD_VAR 0 6
69891: INC
69892: ST_TO_ADDR
69893: LD_INT 1
69895: PUSH
69896: FOR_DOWNTO
69897: IFFALSE 69998
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69899: LD_VAR 0 6
69903: PUSH
69904: LD_VAR 0 4
69908: ARRAY
69909: PUSH
69910: LD_INT 1
69912: ARRAY
69913: PPUSH
69914: LD_VAR 0 6
69918: PUSH
69919: LD_VAR 0 4
69923: ARRAY
69924: PUSH
69925: LD_INT 2
69927: ARRAY
69928: PPUSH
69929: CALL_OW 488
69933: NOT
69934: PUSH
69935: LD_VAR 0 6
69939: PUSH
69940: LD_VAR 0 4
69944: ARRAY
69945: PUSH
69946: LD_INT 1
69948: ARRAY
69949: PPUSH
69950: LD_VAR 0 6
69954: PUSH
69955: LD_VAR 0 4
69959: ARRAY
69960: PUSH
69961: LD_INT 2
69963: ARRAY
69964: PPUSH
69965: CALL_OW 428
69969: PUSH
69970: LD_INT 0
69972: NONEQUAL
69973: OR
69974: IFFALSE 69996
// tmp := Delete ( tmp , i ) ;
69976: LD_ADDR_VAR 0 6
69980: PUSH
69981: LD_VAR 0 6
69985: PPUSH
69986: LD_VAR 0 4
69990: PPUSH
69991: CALL_OW 3
69995: ST_TO_ADDR
69996: GO 69896
69998: POP
69999: POP
// j := GetClosestHex ( unit , tmp ) ;
70000: LD_ADDR_VAR 0 5
70004: PUSH
70005: LD_VAR 0 1
70009: PPUSH
70010: LD_VAR 0 6
70014: PPUSH
70015: CALL 69300 0 2
70019: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70020: LD_VAR 0 1
70024: PPUSH
70025: LD_VAR 0 5
70029: PUSH
70030: LD_INT 1
70032: ARRAY
70033: PPUSH
70034: LD_VAR 0 5
70038: PUSH
70039: LD_INT 2
70041: ARRAY
70042: PPUSH
70043: CALL_OW 111
// end ;
70047: LD_VAR 0 3
70051: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70052: LD_INT 0
70054: PPUSH
70055: PPUSH
70056: PPUSH
// uc_side = 0 ;
70057: LD_ADDR_OWVAR 20
70061: PUSH
70062: LD_INT 0
70064: ST_TO_ADDR
// uc_nation = 0 ;
70065: LD_ADDR_OWVAR 21
70069: PUSH
70070: LD_INT 0
70072: ST_TO_ADDR
// InitHc_All ( ) ;
70073: CALL_OW 584
// InitVc ;
70077: CALL_OW 20
// if mastodonts then
70081: LD_VAR 0 6
70085: IFFALSE 70152
// for i = 1 to mastodonts do
70087: LD_ADDR_VAR 0 11
70091: PUSH
70092: DOUBLE
70093: LD_INT 1
70095: DEC
70096: ST_TO_ADDR
70097: LD_VAR 0 6
70101: PUSH
70102: FOR_TO
70103: IFFALSE 70150
// begin vc_chassis := 31 ;
70105: LD_ADDR_OWVAR 37
70109: PUSH
70110: LD_INT 31
70112: ST_TO_ADDR
// vc_control := control_rider ;
70113: LD_ADDR_OWVAR 38
70117: PUSH
70118: LD_INT 4
70120: ST_TO_ADDR
// animal := CreateVehicle ;
70121: LD_ADDR_VAR 0 12
70125: PUSH
70126: CALL_OW 45
70130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70131: LD_VAR 0 12
70135: PPUSH
70136: LD_VAR 0 8
70140: PPUSH
70141: LD_INT 0
70143: PPUSH
70144: CALL 72340 0 3
// end ;
70148: GO 70102
70150: POP
70151: POP
// if horses then
70152: LD_VAR 0 5
70156: IFFALSE 70223
// for i = 1 to horses do
70158: LD_ADDR_VAR 0 11
70162: PUSH
70163: DOUBLE
70164: LD_INT 1
70166: DEC
70167: ST_TO_ADDR
70168: LD_VAR 0 5
70172: PUSH
70173: FOR_TO
70174: IFFALSE 70221
// begin hc_class := 21 ;
70176: LD_ADDR_OWVAR 28
70180: PUSH
70181: LD_INT 21
70183: ST_TO_ADDR
// hc_gallery :=  ;
70184: LD_ADDR_OWVAR 33
70188: PUSH
70189: LD_STRING 
70191: ST_TO_ADDR
// animal := CreateHuman ;
70192: LD_ADDR_VAR 0 12
70196: PUSH
70197: CALL_OW 44
70201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70202: LD_VAR 0 12
70206: PPUSH
70207: LD_VAR 0 8
70211: PPUSH
70212: LD_INT 0
70214: PPUSH
70215: CALL 72340 0 3
// end ;
70219: GO 70173
70221: POP
70222: POP
// if birds then
70223: LD_VAR 0 1
70227: IFFALSE 70294
// for i = 1 to birds do
70229: LD_ADDR_VAR 0 11
70233: PUSH
70234: DOUBLE
70235: LD_INT 1
70237: DEC
70238: ST_TO_ADDR
70239: LD_VAR 0 1
70243: PUSH
70244: FOR_TO
70245: IFFALSE 70292
// begin hc_class = 18 ;
70247: LD_ADDR_OWVAR 28
70251: PUSH
70252: LD_INT 18
70254: ST_TO_ADDR
// hc_gallery =  ;
70255: LD_ADDR_OWVAR 33
70259: PUSH
70260: LD_STRING 
70262: ST_TO_ADDR
// animal := CreateHuman ;
70263: LD_ADDR_VAR 0 12
70267: PUSH
70268: CALL_OW 44
70272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70273: LD_VAR 0 12
70277: PPUSH
70278: LD_VAR 0 8
70282: PPUSH
70283: LD_INT 0
70285: PPUSH
70286: CALL 72340 0 3
// end ;
70290: GO 70244
70292: POP
70293: POP
// if tigers then
70294: LD_VAR 0 2
70298: IFFALSE 70382
// for i = 1 to tigers do
70300: LD_ADDR_VAR 0 11
70304: PUSH
70305: DOUBLE
70306: LD_INT 1
70308: DEC
70309: ST_TO_ADDR
70310: LD_VAR 0 2
70314: PUSH
70315: FOR_TO
70316: IFFALSE 70380
// begin hc_class = class_tiger ;
70318: LD_ADDR_OWVAR 28
70322: PUSH
70323: LD_INT 14
70325: ST_TO_ADDR
// hc_gallery =  ;
70326: LD_ADDR_OWVAR 33
70330: PUSH
70331: LD_STRING 
70333: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70334: LD_ADDR_OWVAR 35
70338: PUSH
70339: LD_INT 7
70341: NEG
70342: PPUSH
70343: LD_INT 7
70345: PPUSH
70346: CALL_OW 12
70350: ST_TO_ADDR
// animal := CreateHuman ;
70351: LD_ADDR_VAR 0 12
70355: PUSH
70356: CALL_OW 44
70360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70361: LD_VAR 0 12
70365: PPUSH
70366: LD_VAR 0 8
70370: PPUSH
70371: LD_INT 0
70373: PPUSH
70374: CALL 72340 0 3
// end ;
70378: GO 70315
70380: POP
70381: POP
// if apemans then
70382: LD_VAR 0 3
70386: IFFALSE 70509
// for i = 1 to apemans do
70388: LD_ADDR_VAR 0 11
70392: PUSH
70393: DOUBLE
70394: LD_INT 1
70396: DEC
70397: ST_TO_ADDR
70398: LD_VAR 0 3
70402: PUSH
70403: FOR_TO
70404: IFFALSE 70507
// begin hc_class = class_apeman ;
70406: LD_ADDR_OWVAR 28
70410: PUSH
70411: LD_INT 12
70413: ST_TO_ADDR
// hc_gallery =  ;
70414: LD_ADDR_OWVAR 33
70418: PUSH
70419: LD_STRING 
70421: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70422: LD_ADDR_OWVAR 35
70426: PUSH
70427: LD_INT 2
70429: NEG
70430: PPUSH
70431: LD_INT 2
70433: PPUSH
70434: CALL_OW 12
70438: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70439: LD_ADDR_OWVAR 31
70443: PUSH
70444: LD_INT 1
70446: PPUSH
70447: LD_INT 3
70449: PPUSH
70450: CALL_OW 12
70454: PUSH
70455: LD_INT 1
70457: PPUSH
70458: LD_INT 3
70460: PPUSH
70461: CALL_OW 12
70465: PUSH
70466: LD_INT 0
70468: PUSH
70469: LD_INT 0
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: ST_TO_ADDR
// animal := CreateHuman ;
70478: LD_ADDR_VAR 0 12
70482: PUSH
70483: CALL_OW 44
70487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70488: LD_VAR 0 12
70492: PPUSH
70493: LD_VAR 0 8
70497: PPUSH
70498: LD_INT 0
70500: PPUSH
70501: CALL 72340 0 3
// end ;
70505: GO 70403
70507: POP
70508: POP
// if enchidnas then
70509: LD_VAR 0 4
70513: IFFALSE 70580
// for i = 1 to enchidnas do
70515: LD_ADDR_VAR 0 11
70519: PUSH
70520: DOUBLE
70521: LD_INT 1
70523: DEC
70524: ST_TO_ADDR
70525: LD_VAR 0 4
70529: PUSH
70530: FOR_TO
70531: IFFALSE 70578
// begin hc_class = 13 ;
70533: LD_ADDR_OWVAR 28
70537: PUSH
70538: LD_INT 13
70540: ST_TO_ADDR
// hc_gallery =  ;
70541: LD_ADDR_OWVAR 33
70545: PUSH
70546: LD_STRING 
70548: ST_TO_ADDR
// animal := CreateHuman ;
70549: LD_ADDR_VAR 0 12
70553: PUSH
70554: CALL_OW 44
70558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70559: LD_VAR 0 12
70563: PPUSH
70564: LD_VAR 0 8
70568: PPUSH
70569: LD_INT 0
70571: PPUSH
70572: CALL 72340 0 3
// end ;
70576: GO 70530
70578: POP
70579: POP
// if fishes then
70580: LD_VAR 0 7
70584: IFFALSE 70651
// for i = 1 to fishes do
70586: LD_ADDR_VAR 0 11
70590: PUSH
70591: DOUBLE
70592: LD_INT 1
70594: DEC
70595: ST_TO_ADDR
70596: LD_VAR 0 7
70600: PUSH
70601: FOR_TO
70602: IFFALSE 70649
// begin hc_class = 20 ;
70604: LD_ADDR_OWVAR 28
70608: PUSH
70609: LD_INT 20
70611: ST_TO_ADDR
// hc_gallery =  ;
70612: LD_ADDR_OWVAR 33
70616: PUSH
70617: LD_STRING 
70619: ST_TO_ADDR
// animal := CreateHuman ;
70620: LD_ADDR_VAR 0 12
70624: PUSH
70625: CALL_OW 44
70629: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70630: LD_VAR 0 12
70634: PPUSH
70635: LD_VAR 0 9
70639: PPUSH
70640: LD_INT 0
70642: PPUSH
70643: CALL 72340 0 3
// end ;
70647: GO 70601
70649: POP
70650: POP
// end ;
70651: LD_VAR 0 10
70655: RET
// export function WantHeal ( sci , unit ) ; begin
70656: LD_INT 0
70658: PPUSH
// if GetTaskList ( sci ) > 0 then
70659: LD_VAR 0 1
70663: PPUSH
70664: CALL_OW 437
70668: PUSH
70669: LD_INT 0
70671: GREATER
70672: IFFALSE 70742
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70674: LD_VAR 0 1
70678: PPUSH
70679: CALL_OW 437
70683: PUSH
70684: LD_INT 1
70686: ARRAY
70687: PUSH
70688: LD_INT 1
70690: ARRAY
70691: PUSH
70692: LD_STRING l
70694: EQUAL
70695: PUSH
70696: LD_VAR 0 1
70700: PPUSH
70701: CALL_OW 437
70705: PUSH
70706: LD_INT 1
70708: ARRAY
70709: PUSH
70710: LD_INT 4
70712: ARRAY
70713: PUSH
70714: LD_VAR 0 2
70718: EQUAL
70719: AND
70720: IFFALSE 70732
// result := true else
70722: LD_ADDR_VAR 0 3
70726: PUSH
70727: LD_INT 1
70729: ST_TO_ADDR
70730: GO 70740
// result := false ;
70732: LD_ADDR_VAR 0 3
70736: PUSH
70737: LD_INT 0
70739: ST_TO_ADDR
// end else
70740: GO 70750
// result := false ;
70742: LD_ADDR_VAR 0 3
70746: PUSH
70747: LD_INT 0
70749: ST_TO_ADDR
// end ;
70750: LD_VAR 0 3
70754: RET
// export function HealTarget ( sci ) ; begin
70755: LD_INT 0
70757: PPUSH
// if not sci then
70758: LD_VAR 0 1
70762: NOT
70763: IFFALSE 70767
// exit ;
70765: GO 70832
// result := 0 ;
70767: LD_ADDR_VAR 0 2
70771: PUSH
70772: LD_INT 0
70774: ST_TO_ADDR
// if GetTaskList ( sci ) then
70775: LD_VAR 0 1
70779: PPUSH
70780: CALL_OW 437
70784: IFFALSE 70832
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70786: LD_VAR 0 1
70790: PPUSH
70791: CALL_OW 437
70795: PUSH
70796: LD_INT 1
70798: ARRAY
70799: PUSH
70800: LD_INT 1
70802: ARRAY
70803: PUSH
70804: LD_STRING l
70806: EQUAL
70807: IFFALSE 70832
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70809: LD_ADDR_VAR 0 2
70813: PUSH
70814: LD_VAR 0 1
70818: PPUSH
70819: CALL_OW 437
70823: PUSH
70824: LD_INT 1
70826: ARRAY
70827: PUSH
70828: LD_INT 4
70830: ARRAY
70831: ST_TO_ADDR
// end ;
70832: LD_VAR 0 2
70836: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70837: LD_INT 0
70839: PPUSH
70840: PPUSH
70841: PPUSH
70842: PPUSH
// if not base_units then
70843: LD_VAR 0 1
70847: NOT
70848: IFFALSE 70852
// exit ;
70850: GO 70939
// result := false ;
70852: LD_ADDR_VAR 0 2
70856: PUSH
70857: LD_INT 0
70859: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70860: LD_ADDR_VAR 0 5
70864: PUSH
70865: LD_VAR 0 1
70869: PPUSH
70870: LD_INT 21
70872: PUSH
70873: LD_INT 3
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PPUSH
70880: CALL_OW 72
70884: ST_TO_ADDR
// if not tmp then
70885: LD_VAR 0 5
70889: NOT
70890: IFFALSE 70894
// exit ;
70892: GO 70939
// for i in tmp do
70894: LD_ADDR_VAR 0 3
70898: PUSH
70899: LD_VAR 0 5
70903: PUSH
70904: FOR_IN
70905: IFFALSE 70937
// begin result := EnemyInRange ( i , 22 ) ;
70907: LD_ADDR_VAR 0 2
70911: PUSH
70912: LD_VAR 0 3
70916: PPUSH
70917: LD_INT 22
70919: PPUSH
70920: CALL 69175 0 2
70924: ST_TO_ADDR
// if result then
70925: LD_VAR 0 2
70929: IFFALSE 70935
// exit ;
70931: POP
70932: POP
70933: GO 70939
// end ;
70935: GO 70904
70937: POP
70938: POP
// end ;
70939: LD_VAR 0 2
70943: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70944: LD_INT 0
70946: PPUSH
70947: PPUSH
// if not units then
70948: LD_VAR 0 1
70952: NOT
70953: IFFALSE 70957
// exit ;
70955: GO 71027
// result := [ ] ;
70957: LD_ADDR_VAR 0 3
70961: PUSH
70962: EMPTY
70963: ST_TO_ADDR
// for i in units do
70964: LD_ADDR_VAR 0 4
70968: PUSH
70969: LD_VAR 0 1
70973: PUSH
70974: FOR_IN
70975: IFFALSE 71025
// if GetTag ( i ) = tag then
70977: LD_VAR 0 4
70981: PPUSH
70982: CALL_OW 110
70986: PUSH
70987: LD_VAR 0 2
70991: EQUAL
70992: IFFALSE 71023
// result := Replace ( result , result + 1 , i ) ;
70994: LD_ADDR_VAR 0 3
70998: PUSH
70999: LD_VAR 0 3
71003: PPUSH
71004: LD_VAR 0 3
71008: PUSH
71009: LD_INT 1
71011: PLUS
71012: PPUSH
71013: LD_VAR 0 4
71017: PPUSH
71018: CALL_OW 1
71022: ST_TO_ADDR
71023: GO 70974
71025: POP
71026: POP
// end ;
71027: LD_VAR 0 3
71031: RET
// export function IsDriver ( un ) ; begin
71032: LD_INT 0
71034: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71035: LD_ADDR_VAR 0 2
71039: PUSH
71040: LD_VAR 0 1
71044: PUSH
71045: LD_INT 55
71047: PUSH
71048: EMPTY
71049: LIST
71050: PPUSH
71051: CALL_OW 69
71055: IN
71056: ST_TO_ADDR
// end ;
71057: LD_VAR 0 2
71061: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71062: LD_INT 0
71064: PPUSH
71065: PPUSH
// list := [ ] ;
71066: LD_ADDR_VAR 0 5
71070: PUSH
71071: EMPTY
71072: ST_TO_ADDR
// case d of 0 :
71073: LD_VAR 0 3
71077: PUSH
71078: LD_INT 0
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71086
71084: GO 71219
71086: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71087: LD_ADDR_VAR 0 5
71091: PUSH
71092: LD_VAR 0 1
71096: PUSH
71097: LD_INT 4
71099: MINUS
71100: PUSH
71101: LD_VAR 0 2
71105: PUSH
71106: LD_INT 4
71108: MINUS
71109: PUSH
71110: LD_INT 2
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: LIST
71117: PUSH
71118: LD_VAR 0 1
71122: PUSH
71123: LD_INT 3
71125: MINUS
71126: PUSH
71127: LD_VAR 0 2
71131: PUSH
71132: LD_INT 1
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: LIST
71139: PUSH
71140: LD_VAR 0 1
71144: PUSH
71145: LD_INT 4
71147: PLUS
71148: PUSH
71149: LD_VAR 0 2
71153: PUSH
71154: LD_INT 4
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: PUSH
71162: LD_VAR 0 1
71166: PUSH
71167: LD_INT 3
71169: PLUS
71170: PUSH
71171: LD_VAR 0 2
71175: PUSH
71176: LD_INT 3
71178: PLUS
71179: PUSH
71180: LD_INT 5
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: LIST
71187: PUSH
71188: LD_VAR 0 1
71192: PUSH
71193: LD_VAR 0 2
71197: PUSH
71198: LD_INT 4
71200: PLUS
71201: PUSH
71202: LD_INT 0
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: ST_TO_ADDR
// end ; 1 :
71217: GO 71917
71219: LD_INT 1
71221: DOUBLE
71222: EQUAL
71223: IFTRUE 71227
71225: GO 71360
71227: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71228: LD_ADDR_VAR 0 5
71232: PUSH
71233: LD_VAR 0 1
71237: PUSH
71238: LD_VAR 0 2
71242: PUSH
71243: LD_INT 4
71245: MINUS
71246: PUSH
71247: LD_INT 3
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: LIST
71254: PUSH
71255: LD_VAR 0 1
71259: PUSH
71260: LD_INT 3
71262: MINUS
71263: PUSH
71264: LD_VAR 0 2
71268: PUSH
71269: LD_INT 3
71271: MINUS
71272: PUSH
71273: LD_INT 2
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: LIST
71280: PUSH
71281: LD_VAR 0 1
71285: PUSH
71286: LD_INT 4
71288: MINUS
71289: PUSH
71290: LD_VAR 0 2
71294: PUSH
71295: LD_INT 1
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: LIST
71302: PUSH
71303: LD_VAR 0 1
71307: PUSH
71308: LD_VAR 0 2
71312: PUSH
71313: LD_INT 3
71315: PLUS
71316: PUSH
71317: LD_INT 0
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: LIST
71324: PUSH
71325: LD_VAR 0 1
71329: PUSH
71330: LD_INT 4
71332: PLUS
71333: PUSH
71334: LD_VAR 0 2
71338: PUSH
71339: LD_INT 4
71341: PLUS
71342: PUSH
71343: LD_INT 5
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: LIST
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: ST_TO_ADDR
// end ; 2 :
71358: GO 71917
71360: LD_INT 2
71362: DOUBLE
71363: EQUAL
71364: IFTRUE 71368
71366: GO 71497
71368: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71369: LD_ADDR_VAR 0 5
71373: PUSH
71374: LD_VAR 0 1
71378: PUSH
71379: LD_VAR 0 2
71383: PUSH
71384: LD_INT 3
71386: MINUS
71387: PUSH
71388: LD_INT 3
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: LIST
71395: PUSH
71396: LD_VAR 0 1
71400: PUSH
71401: LD_INT 4
71403: PLUS
71404: PUSH
71405: LD_VAR 0 2
71409: PUSH
71410: LD_INT 4
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: LIST
71417: PUSH
71418: LD_VAR 0 1
71422: PUSH
71423: LD_VAR 0 2
71427: PUSH
71428: LD_INT 4
71430: PLUS
71431: PUSH
71432: LD_INT 0
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: LIST
71439: PUSH
71440: LD_VAR 0 1
71444: PUSH
71445: LD_INT 3
71447: MINUS
71448: PUSH
71449: LD_VAR 0 2
71453: PUSH
71454: LD_INT 1
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: LIST
71461: PUSH
71462: LD_VAR 0 1
71466: PUSH
71467: LD_INT 4
71469: MINUS
71470: PUSH
71471: LD_VAR 0 2
71475: PUSH
71476: LD_INT 4
71478: MINUS
71479: PUSH
71480: LD_INT 2
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: LIST
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: ST_TO_ADDR
// end ; 3 :
71495: GO 71917
71497: LD_INT 3
71499: DOUBLE
71500: EQUAL
71501: IFTRUE 71505
71503: GO 71638
71505: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71506: LD_ADDR_VAR 0 5
71510: PUSH
71511: LD_VAR 0 1
71515: PUSH
71516: LD_INT 3
71518: PLUS
71519: PUSH
71520: LD_VAR 0 2
71524: PUSH
71525: LD_INT 4
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: LIST
71532: PUSH
71533: LD_VAR 0 1
71537: PUSH
71538: LD_INT 4
71540: PLUS
71541: PUSH
71542: LD_VAR 0 2
71546: PUSH
71547: LD_INT 4
71549: PLUS
71550: PUSH
71551: LD_INT 5
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: LIST
71558: PUSH
71559: LD_VAR 0 1
71563: PUSH
71564: LD_INT 4
71566: MINUS
71567: PUSH
71568: LD_VAR 0 2
71572: PUSH
71573: LD_INT 1
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: LIST
71580: PUSH
71581: LD_VAR 0 1
71585: PUSH
71586: LD_VAR 0 2
71590: PUSH
71591: LD_INT 4
71593: MINUS
71594: PUSH
71595: LD_INT 3
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: LIST
71602: PUSH
71603: LD_VAR 0 1
71607: PUSH
71608: LD_INT 3
71610: MINUS
71611: PUSH
71612: LD_VAR 0 2
71616: PUSH
71617: LD_INT 3
71619: MINUS
71620: PUSH
71621: LD_INT 2
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: LIST
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: ST_TO_ADDR
// end ; 4 :
71636: GO 71917
71638: LD_INT 4
71640: DOUBLE
71641: EQUAL
71642: IFTRUE 71646
71644: GO 71779
71646: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71647: LD_ADDR_VAR 0 5
71651: PUSH
71652: LD_VAR 0 1
71656: PUSH
71657: LD_VAR 0 2
71661: PUSH
71662: LD_INT 4
71664: PLUS
71665: PUSH
71666: LD_INT 0
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: LIST
71673: PUSH
71674: LD_VAR 0 1
71678: PUSH
71679: LD_INT 3
71681: PLUS
71682: PUSH
71683: LD_VAR 0 2
71687: PUSH
71688: LD_INT 3
71690: PLUS
71691: PUSH
71692: LD_INT 5
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: LIST
71699: PUSH
71700: LD_VAR 0 1
71704: PUSH
71705: LD_INT 4
71707: PLUS
71708: PUSH
71709: LD_VAR 0 2
71713: PUSH
71714: LD_INT 4
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: LIST
71721: PUSH
71722: LD_VAR 0 1
71726: PUSH
71727: LD_VAR 0 2
71731: PUSH
71732: LD_INT 3
71734: MINUS
71735: PUSH
71736: LD_INT 3
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: LIST
71743: PUSH
71744: LD_VAR 0 1
71748: PUSH
71749: LD_INT 4
71751: MINUS
71752: PUSH
71753: LD_VAR 0 2
71757: PUSH
71758: LD_INT 4
71760: MINUS
71761: PUSH
71762: LD_INT 2
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: LIST
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: ST_TO_ADDR
// end ; 5 :
71777: GO 71917
71779: LD_INT 5
71781: DOUBLE
71782: EQUAL
71783: IFTRUE 71787
71785: GO 71916
71787: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71788: LD_ADDR_VAR 0 5
71792: PUSH
71793: LD_VAR 0 1
71797: PUSH
71798: LD_INT 4
71800: MINUS
71801: PUSH
71802: LD_VAR 0 2
71806: PUSH
71807: LD_INT 1
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: LIST
71814: PUSH
71815: LD_VAR 0 1
71819: PUSH
71820: LD_VAR 0 2
71824: PUSH
71825: LD_INT 4
71827: MINUS
71828: PUSH
71829: LD_INT 3
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: LIST
71836: PUSH
71837: LD_VAR 0 1
71841: PUSH
71842: LD_INT 4
71844: PLUS
71845: PUSH
71846: LD_VAR 0 2
71850: PUSH
71851: LD_INT 4
71853: PLUS
71854: PUSH
71855: LD_INT 5
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: LIST
71862: PUSH
71863: LD_VAR 0 1
71867: PUSH
71868: LD_INT 3
71870: PLUS
71871: PUSH
71872: LD_VAR 0 2
71876: PUSH
71877: LD_INT 4
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: LIST
71884: PUSH
71885: LD_VAR 0 1
71889: PUSH
71890: LD_VAR 0 2
71894: PUSH
71895: LD_INT 3
71897: PLUS
71898: PUSH
71899: LD_INT 0
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: LIST
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: ST_TO_ADDR
// end ; end ;
71914: GO 71917
71916: POP
// result := list ;
71917: LD_ADDR_VAR 0 4
71921: PUSH
71922: LD_VAR 0 5
71926: ST_TO_ADDR
// end ;
71927: LD_VAR 0 4
71931: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71932: LD_INT 0
71934: PPUSH
71935: PPUSH
71936: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71937: LD_VAR 0 1
71941: NOT
71942: PUSH
71943: LD_VAR 0 2
71947: PUSH
71948: LD_INT 1
71950: PUSH
71951: LD_INT 2
71953: PUSH
71954: LD_INT 3
71956: PUSH
71957: LD_INT 4
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: IN
71966: NOT
71967: OR
71968: IFFALSE 71972
// exit ;
71970: GO 72064
// tmp := [ ] ;
71972: LD_ADDR_VAR 0 5
71976: PUSH
71977: EMPTY
71978: ST_TO_ADDR
// for i in units do
71979: LD_ADDR_VAR 0 4
71983: PUSH
71984: LD_VAR 0 1
71988: PUSH
71989: FOR_IN
71990: IFFALSE 72033
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71992: LD_ADDR_VAR 0 5
71996: PUSH
71997: LD_VAR 0 5
72001: PPUSH
72002: LD_VAR 0 5
72006: PUSH
72007: LD_INT 1
72009: PLUS
72010: PPUSH
72011: LD_VAR 0 4
72015: PPUSH
72016: LD_VAR 0 2
72020: PPUSH
72021: CALL_OW 259
72025: PPUSH
72026: CALL_OW 2
72030: ST_TO_ADDR
72031: GO 71989
72033: POP
72034: POP
// if not tmp then
72035: LD_VAR 0 5
72039: NOT
72040: IFFALSE 72044
// exit ;
72042: GO 72064
// result := SortListByListDesc ( units , tmp ) ;
72044: LD_ADDR_VAR 0 3
72048: PUSH
72049: LD_VAR 0 1
72053: PPUSH
72054: LD_VAR 0 5
72058: PPUSH
72059: CALL_OW 77
72063: ST_TO_ADDR
// end ;
72064: LD_VAR 0 3
72068: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72069: LD_INT 0
72071: PPUSH
72072: PPUSH
72073: PPUSH
// result := false ;
72074: LD_ADDR_VAR 0 3
72078: PUSH
72079: LD_INT 0
72081: ST_TO_ADDR
// x := GetX ( building ) ;
72082: LD_ADDR_VAR 0 4
72086: PUSH
72087: LD_VAR 0 2
72091: PPUSH
72092: CALL_OW 250
72096: ST_TO_ADDR
// y := GetY ( building ) ;
72097: LD_ADDR_VAR 0 5
72101: PUSH
72102: LD_VAR 0 2
72106: PPUSH
72107: CALL_OW 251
72111: ST_TO_ADDR
// if not building or not x or not y then
72112: LD_VAR 0 2
72116: NOT
72117: PUSH
72118: LD_VAR 0 4
72122: NOT
72123: OR
72124: PUSH
72125: LD_VAR 0 5
72129: NOT
72130: OR
72131: IFFALSE 72135
// exit ;
72133: GO 72227
// if GetTaskList ( unit ) then
72135: LD_VAR 0 1
72139: PPUSH
72140: CALL_OW 437
72144: IFFALSE 72227
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72146: LD_STRING e
72148: PUSH
72149: LD_VAR 0 1
72153: PPUSH
72154: CALL_OW 437
72158: PUSH
72159: LD_INT 1
72161: ARRAY
72162: PUSH
72163: LD_INT 1
72165: ARRAY
72166: EQUAL
72167: PUSH
72168: LD_VAR 0 4
72172: PUSH
72173: LD_VAR 0 1
72177: PPUSH
72178: CALL_OW 437
72182: PUSH
72183: LD_INT 1
72185: ARRAY
72186: PUSH
72187: LD_INT 2
72189: ARRAY
72190: EQUAL
72191: AND
72192: PUSH
72193: LD_VAR 0 5
72197: PUSH
72198: LD_VAR 0 1
72202: PPUSH
72203: CALL_OW 437
72207: PUSH
72208: LD_INT 1
72210: ARRAY
72211: PUSH
72212: LD_INT 3
72214: ARRAY
72215: EQUAL
72216: AND
72217: IFFALSE 72227
// result := true end ;
72219: LD_ADDR_VAR 0 3
72223: PUSH
72224: LD_INT 1
72226: ST_TO_ADDR
// end ;
72227: LD_VAR 0 3
72231: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72232: LD_INT 0
72234: PPUSH
// result := false ;
72235: LD_ADDR_VAR 0 4
72239: PUSH
72240: LD_INT 0
72242: ST_TO_ADDR
// if GetTaskList ( unit ) then
72243: LD_VAR 0 1
72247: PPUSH
72248: CALL_OW 437
72252: IFFALSE 72335
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72254: LD_STRING M
72256: PUSH
72257: LD_VAR 0 1
72261: PPUSH
72262: CALL_OW 437
72266: PUSH
72267: LD_INT 1
72269: ARRAY
72270: PUSH
72271: LD_INT 1
72273: ARRAY
72274: EQUAL
72275: PUSH
72276: LD_VAR 0 2
72280: PUSH
72281: LD_VAR 0 1
72285: PPUSH
72286: CALL_OW 437
72290: PUSH
72291: LD_INT 1
72293: ARRAY
72294: PUSH
72295: LD_INT 2
72297: ARRAY
72298: EQUAL
72299: AND
72300: PUSH
72301: LD_VAR 0 3
72305: PUSH
72306: LD_VAR 0 1
72310: PPUSH
72311: CALL_OW 437
72315: PUSH
72316: LD_INT 1
72318: ARRAY
72319: PUSH
72320: LD_INT 3
72322: ARRAY
72323: EQUAL
72324: AND
72325: IFFALSE 72335
// result := true ;
72327: LD_ADDR_VAR 0 4
72331: PUSH
72332: LD_INT 1
72334: ST_TO_ADDR
// end ; end ;
72335: LD_VAR 0 4
72339: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72340: LD_INT 0
72342: PPUSH
72343: PPUSH
72344: PPUSH
72345: PPUSH
// if not unit or not area then
72346: LD_VAR 0 1
72350: NOT
72351: PUSH
72352: LD_VAR 0 2
72356: NOT
72357: OR
72358: IFFALSE 72362
// exit ;
72360: GO 72526
// tmp := AreaToList ( area , i ) ;
72362: LD_ADDR_VAR 0 6
72366: PUSH
72367: LD_VAR 0 2
72371: PPUSH
72372: LD_VAR 0 5
72376: PPUSH
72377: CALL_OW 517
72381: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72382: LD_ADDR_VAR 0 5
72386: PUSH
72387: DOUBLE
72388: LD_INT 1
72390: DEC
72391: ST_TO_ADDR
72392: LD_VAR 0 6
72396: PUSH
72397: LD_INT 1
72399: ARRAY
72400: PUSH
72401: FOR_TO
72402: IFFALSE 72524
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72404: LD_ADDR_VAR 0 7
72408: PUSH
72409: LD_VAR 0 6
72413: PUSH
72414: LD_INT 1
72416: ARRAY
72417: PUSH
72418: LD_VAR 0 5
72422: ARRAY
72423: PUSH
72424: LD_VAR 0 6
72428: PUSH
72429: LD_INT 2
72431: ARRAY
72432: PUSH
72433: LD_VAR 0 5
72437: ARRAY
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72443: LD_VAR 0 7
72447: PUSH
72448: LD_INT 1
72450: ARRAY
72451: PPUSH
72452: LD_VAR 0 7
72456: PUSH
72457: LD_INT 2
72459: ARRAY
72460: PPUSH
72461: CALL_OW 428
72465: PUSH
72466: LD_INT 0
72468: EQUAL
72469: IFFALSE 72522
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72471: LD_VAR 0 1
72475: PPUSH
72476: LD_VAR 0 7
72480: PUSH
72481: LD_INT 1
72483: ARRAY
72484: PPUSH
72485: LD_VAR 0 7
72489: PUSH
72490: LD_INT 2
72492: ARRAY
72493: PPUSH
72494: LD_VAR 0 3
72498: PPUSH
72499: CALL_OW 48
// result := IsPlaced ( unit ) ;
72503: LD_ADDR_VAR 0 4
72507: PUSH
72508: LD_VAR 0 1
72512: PPUSH
72513: CALL_OW 305
72517: ST_TO_ADDR
// exit ;
72518: POP
72519: POP
72520: GO 72526
// end ; end ;
72522: GO 72401
72524: POP
72525: POP
// end ;
72526: LD_VAR 0 4
72530: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72531: LD_INT 0
72533: PPUSH
72534: PPUSH
72535: PPUSH
// if not side or side > 8 then
72536: LD_VAR 0 1
72540: NOT
72541: PUSH
72542: LD_VAR 0 1
72546: PUSH
72547: LD_INT 8
72549: GREATER
72550: OR
72551: IFFALSE 72555
// exit ;
72553: GO 72742
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72555: LD_ADDR_VAR 0 4
72559: PUSH
72560: LD_INT 22
72562: PUSH
72563: LD_VAR 0 1
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 21
72574: PUSH
72575: LD_INT 3
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PPUSH
72586: CALL_OW 69
72590: ST_TO_ADDR
// if not tmp then
72591: LD_VAR 0 4
72595: NOT
72596: IFFALSE 72600
// exit ;
72598: GO 72742
// enable_addtolog := true ;
72600: LD_ADDR_OWVAR 81
72604: PUSH
72605: LD_INT 1
72607: ST_TO_ADDR
// AddToLog ( [ ) ;
72608: LD_STRING [
72610: PPUSH
72611: CALL_OW 561
// for i in tmp do
72615: LD_ADDR_VAR 0 3
72619: PUSH
72620: LD_VAR 0 4
72624: PUSH
72625: FOR_IN
72626: IFFALSE 72733
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72628: LD_STRING [
72630: PUSH
72631: LD_VAR 0 3
72635: PPUSH
72636: CALL_OW 266
72640: STR
72641: PUSH
72642: LD_STRING , 
72644: STR
72645: PUSH
72646: LD_VAR 0 3
72650: PPUSH
72651: CALL_OW 250
72655: STR
72656: PUSH
72657: LD_STRING , 
72659: STR
72660: PUSH
72661: LD_VAR 0 3
72665: PPUSH
72666: CALL_OW 251
72670: STR
72671: PUSH
72672: LD_STRING , 
72674: STR
72675: PUSH
72676: LD_VAR 0 3
72680: PPUSH
72681: CALL_OW 254
72685: STR
72686: PUSH
72687: LD_STRING , 
72689: STR
72690: PUSH
72691: LD_VAR 0 3
72695: PPUSH
72696: LD_INT 1
72698: PPUSH
72699: CALL_OW 268
72703: STR
72704: PUSH
72705: LD_STRING , 
72707: STR
72708: PUSH
72709: LD_VAR 0 3
72713: PPUSH
72714: LD_INT 2
72716: PPUSH
72717: CALL_OW 268
72721: STR
72722: PUSH
72723: LD_STRING ],
72725: STR
72726: PPUSH
72727: CALL_OW 561
// end ;
72731: GO 72625
72733: POP
72734: POP
// AddToLog ( ]; ) ;
72735: LD_STRING ];
72737: PPUSH
72738: CALL_OW 561
// end ;
72742: LD_VAR 0 2
72746: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72747: LD_INT 0
72749: PPUSH
72750: PPUSH
72751: PPUSH
72752: PPUSH
72753: PPUSH
// if not area or not rate or not max then
72754: LD_VAR 0 1
72758: NOT
72759: PUSH
72760: LD_VAR 0 2
72764: NOT
72765: OR
72766: PUSH
72767: LD_VAR 0 4
72771: NOT
72772: OR
72773: IFFALSE 72777
// exit ;
72775: GO 72969
// while 1 do
72777: LD_INT 1
72779: IFFALSE 72969
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72781: LD_ADDR_VAR 0 9
72785: PUSH
72786: LD_VAR 0 1
72790: PPUSH
72791: LD_INT 1
72793: PPUSH
72794: CALL_OW 287
72798: PUSH
72799: LD_INT 10
72801: MUL
72802: ST_TO_ADDR
// r := rate / 10 ;
72803: LD_ADDR_VAR 0 7
72807: PUSH
72808: LD_VAR 0 2
72812: PUSH
72813: LD_INT 10
72815: DIVREAL
72816: ST_TO_ADDR
// time := 1 1$00 ;
72817: LD_ADDR_VAR 0 8
72821: PUSH
72822: LD_INT 2100
72824: ST_TO_ADDR
// if amount < min then
72825: LD_VAR 0 9
72829: PUSH
72830: LD_VAR 0 3
72834: LESS
72835: IFFALSE 72853
// r := r * 2 else
72837: LD_ADDR_VAR 0 7
72841: PUSH
72842: LD_VAR 0 7
72846: PUSH
72847: LD_INT 2
72849: MUL
72850: ST_TO_ADDR
72851: GO 72879
// if amount > max then
72853: LD_VAR 0 9
72857: PUSH
72858: LD_VAR 0 4
72862: GREATER
72863: IFFALSE 72879
// r := r / 2 ;
72865: LD_ADDR_VAR 0 7
72869: PUSH
72870: LD_VAR 0 7
72874: PUSH
72875: LD_INT 2
72877: DIVREAL
72878: ST_TO_ADDR
// time := time / r ;
72879: LD_ADDR_VAR 0 8
72883: PUSH
72884: LD_VAR 0 8
72888: PUSH
72889: LD_VAR 0 7
72893: DIVREAL
72894: ST_TO_ADDR
// if time < 0 then
72895: LD_VAR 0 8
72899: PUSH
72900: LD_INT 0
72902: LESS
72903: IFFALSE 72920
// time := time * - 1 ;
72905: LD_ADDR_VAR 0 8
72909: PUSH
72910: LD_VAR 0 8
72914: PUSH
72915: LD_INT 1
72917: NEG
72918: MUL
72919: ST_TO_ADDR
// wait ( time ) ;
72920: LD_VAR 0 8
72924: PPUSH
72925: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72929: LD_INT 35
72931: PPUSH
72932: LD_INT 875
72934: PPUSH
72935: CALL_OW 12
72939: PPUSH
72940: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72944: LD_INT 1
72946: PPUSH
72947: LD_INT 5
72949: PPUSH
72950: CALL_OW 12
72954: PPUSH
72955: LD_VAR 0 1
72959: PPUSH
72960: LD_INT 1
72962: PPUSH
72963: CALL_OW 55
// end ;
72967: GO 72777
// end ;
72969: LD_VAR 0 5
72973: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72974: LD_INT 0
72976: PPUSH
72977: PPUSH
72978: PPUSH
72979: PPUSH
72980: PPUSH
72981: PPUSH
72982: PPUSH
72983: PPUSH
// if not turrets or not factories then
72984: LD_VAR 0 1
72988: NOT
72989: PUSH
72990: LD_VAR 0 2
72994: NOT
72995: OR
72996: IFFALSE 73000
// exit ;
72998: GO 73307
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73000: LD_ADDR_VAR 0 10
73004: PUSH
73005: LD_INT 5
73007: PUSH
73008: LD_INT 6
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: LD_INT 2
73017: PUSH
73018: LD_INT 4
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: LD_INT 3
73027: PUSH
73028: LD_INT 5
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 24
73042: PUSH
73043: LD_INT 25
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 23
73052: PUSH
73053: LD_INT 27
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 42
73066: PUSH
73067: LD_INT 43
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 44
73076: PUSH
73077: LD_INT 46
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 45
73086: PUSH
73087: LD_INT 47
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: LIST
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: LIST
73103: ST_TO_ADDR
// result := [ ] ;
73104: LD_ADDR_VAR 0 3
73108: PUSH
73109: EMPTY
73110: ST_TO_ADDR
// for i in turrets do
73111: LD_ADDR_VAR 0 4
73115: PUSH
73116: LD_VAR 0 1
73120: PUSH
73121: FOR_IN
73122: IFFALSE 73305
// begin nat := GetNation ( i ) ;
73124: LD_ADDR_VAR 0 7
73128: PUSH
73129: LD_VAR 0 4
73133: PPUSH
73134: CALL_OW 248
73138: ST_TO_ADDR
// weapon := 0 ;
73139: LD_ADDR_VAR 0 8
73143: PUSH
73144: LD_INT 0
73146: ST_TO_ADDR
// if not nat then
73147: LD_VAR 0 7
73151: NOT
73152: IFFALSE 73156
// continue ;
73154: GO 73121
// for j in list [ nat ] do
73156: LD_ADDR_VAR 0 5
73160: PUSH
73161: LD_VAR 0 10
73165: PUSH
73166: LD_VAR 0 7
73170: ARRAY
73171: PUSH
73172: FOR_IN
73173: IFFALSE 73214
// if GetBWeapon ( i ) = j [ 1 ] then
73175: LD_VAR 0 4
73179: PPUSH
73180: CALL_OW 269
73184: PUSH
73185: LD_VAR 0 5
73189: PUSH
73190: LD_INT 1
73192: ARRAY
73193: EQUAL
73194: IFFALSE 73212
// begin weapon := j [ 2 ] ;
73196: LD_ADDR_VAR 0 8
73200: PUSH
73201: LD_VAR 0 5
73205: PUSH
73206: LD_INT 2
73208: ARRAY
73209: ST_TO_ADDR
// break ;
73210: GO 73214
// end ;
73212: GO 73172
73214: POP
73215: POP
// if not weapon then
73216: LD_VAR 0 8
73220: NOT
73221: IFFALSE 73225
// continue ;
73223: GO 73121
// for k in factories do
73225: LD_ADDR_VAR 0 6
73229: PUSH
73230: LD_VAR 0 2
73234: PUSH
73235: FOR_IN
73236: IFFALSE 73301
// begin weapons := AvailableWeaponList ( k ) ;
73238: LD_ADDR_VAR 0 9
73242: PUSH
73243: LD_VAR 0 6
73247: PPUSH
73248: CALL_OW 478
73252: ST_TO_ADDR
// if not weapons then
73253: LD_VAR 0 9
73257: NOT
73258: IFFALSE 73262
// continue ;
73260: GO 73235
// if weapon in weapons then
73262: LD_VAR 0 8
73266: PUSH
73267: LD_VAR 0 9
73271: IN
73272: IFFALSE 73299
// begin result := [ i , weapon ] ;
73274: LD_ADDR_VAR 0 3
73278: PUSH
73279: LD_VAR 0 4
73283: PUSH
73284: LD_VAR 0 8
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: ST_TO_ADDR
// exit ;
73293: POP
73294: POP
73295: POP
73296: POP
73297: GO 73307
// end ; end ;
73299: GO 73235
73301: POP
73302: POP
// end ;
73303: GO 73121
73305: POP
73306: POP
// end ;
73307: LD_VAR 0 3
73311: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73312: LD_INT 0
73314: PPUSH
// if not side or side > 8 then
73315: LD_VAR 0 3
73319: NOT
73320: PUSH
73321: LD_VAR 0 3
73325: PUSH
73326: LD_INT 8
73328: GREATER
73329: OR
73330: IFFALSE 73334
// exit ;
73332: GO 73393
// if not range then
73334: LD_VAR 0 4
73338: NOT
73339: IFFALSE 73350
// range := - 12 ;
73341: LD_ADDR_VAR 0 4
73345: PUSH
73346: LD_INT 12
73348: NEG
73349: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73350: LD_VAR 0 1
73354: PPUSH
73355: LD_VAR 0 2
73359: PPUSH
73360: LD_VAR 0 3
73364: PPUSH
73365: LD_VAR 0 4
73369: PPUSH
73370: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73374: LD_VAR 0 1
73378: PPUSH
73379: LD_VAR 0 2
73383: PPUSH
73384: LD_VAR 0 3
73388: PPUSH
73389: CALL_OW 331
// end ;
73393: LD_VAR 0 5
73397: RET
// export function Video ( mode ) ; begin
73398: LD_INT 0
73400: PPUSH
// ingame_video = mode ;
73401: LD_ADDR_OWVAR 52
73405: PUSH
73406: LD_VAR 0 1
73410: ST_TO_ADDR
// interface_hidden = mode ;
73411: LD_ADDR_OWVAR 54
73415: PUSH
73416: LD_VAR 0 1
73420: ST_TO_ADDR
// end ;
73421: LD_VAR 0 2
73425: RET
// export function Join ( array , element ) ; begin
73426: LD_INT 0
73428: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73429: LD_ADDR_VAR 0 3
73433: PUSH
73434: LD_VAR 0 1
73438: PPUSH
73439: LD_VAR 0 1
73443: PUSH
73444: LD_INT 1
73446: PLUS
73447: PPUSH
73448: LD_VAR 0 2
73452: PPUSH
73453: CALL_OW 1
73457: ST_TO_ADDR
// end ;
73458: LD_VAR 0 3
73462: RET
// export function JoinUnion ( array , element ) ; begin
73463: LD_INT 0
73465: PPUSH
// result := array union element ;
73466: LD_ADDR_VAR 0 3
73470: PUSH
73471: LD_VAR 0 1
73475: PUSH
73476: LD_VAR 0 2
73480: UNION
73481: ST_TO_ADDR
// end ;
73482: LD_VAR 0 3
73486: RET
// export function GetBehemoths ( side ) ; begin
73487: LD_INT 0
73489: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73490: LD_ADDR_VAR 0 2
73494: PUSH
73495: LD_INT 22
73497: PUSH
73498: LD_VAR 0 1
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 31
73509: PUSH
73510: LD_INT 25
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PPUSH
73521: CALL_OW 69
73525: ST_TO_ADDR
// end ;
73526: LD_VAR 0 2
73530: RET
// export function Shuffle ( array ) ; var i , index ; begin
73531: LD_INT 0
73533: PPUSH
73534: PPUSH
73535: PPUSH
// result := [ ] ;
73536: LD_ADDR_VAR 0 2
73540: PUSH
73541: EMPTY
73542: ST_TO_ADDR
// if not array then
73543: LD_VAR 0 1
73547: NOT
73548: IFFALSE 73552
// exit ;
73550: GO 73651
// Randomize ;
73552: CALL_OW 10
// for i = array downto 1 do
73556: LD_ADDR_VAR 0 3
73560: PUSH
73561: DOUBLE
73562: LD_VAR 0 1
73566: INC
73567: ST_TO_ADDR
73568: LD_INT 1
73570: PUSH
73571: FOR_DOWNTO
73572: IFFALSE 73649
// begin index := rand ( 1 , array ) ;
73574: LD_ADDR_VAR 0 4
73578: PUSH
73579: LD_INT 1
73581: PPUSH
73582: LD_VAR 0 1
73586: PPUSH
73587: CALL_OW 12
73591: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73592: LD_ADDR_VAR 0 2
73596: PUSH
73597: LD_VAR 0 2
73601: PPUSH
73602: LD_VAR 0 2
73606: PUSH
73607: LD_INT 1
73609: PLUS
73610: PPUSH
73611: LD_VAR 0 1
73615: PUSH
73616: LD_VAR 0 4
73620: ARRAY
73621: PPUSH
73622: CALL_OW 2
73626: ST_TO_ADDR
// array := Delete ( array , index ) ;
73627: LD_ADDR_VAR 0 1
73631: PUSH
73632: LD_VAR 0 1
73636: PPUSH
73637: LD_VAR 0 4
73641: PPUSH
73642: CALL_OW 3
73646: ST_TO_ADDR
// end ;
73647: GO 73571
73649: POP
73650: POP
// end ;
73651: LD_VAR 0 2
73655: RET
// export function GetBaseMaterials ( base ) ; begin
73656: LD_INT 0
73658: PPUSH
// result := [ 0 , 0 , 0 ] ;
73659: LD_ADDR_VAR 0 2
73663: PUSH
73664: LD_INT 0
73666: PUSH
73667: LD_INT 0
73669: PUSH
73670: LD_INT 0
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: LIST
73677: ST_TO_ADDR
// if not base then
73678: LD_VAR 0 1
73682: NOT
73683: IFFALSE 73687
// exit ;
73685: GO 73736
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73687: LD_ADDR_VAR 0 2
73691: PUSH
73692: LD_VAR 0 1
73696: PPUSH
73697: LD_INT 1
73699: PPUSH
73700: CALL_OW 275
73704: PUSH
73705: LD_VAR 0 1
73709: PPUSH
73710: LD_INT 2
73712: PPUSH
73713: CALL_OW 275
73717: PUSH
73718: LD_VAR 0 1
73722: PPUSH
73723: LD_INT 3
73725: PPUSH
73726: CALL_OW 275
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: LIST
73735: ST_TO_ADDR
// end ;
73736: LD_VAR 0 2
73740: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73741: LD_INT 0
73743: PPUSH
73744: PPUSH
// result := array ;
73745: LD_ADDR_VAR 0 3
73749: PUSH
73750: LD_VAR 0 1
73754: ST_TO_ADDR
// if size > 0 then
73755: LD_VAR 0 2
73759: PUSH
73760: LD_INT 0
73762: GREATER
73763: IFFALSE 73809
// for i := array downto size do
73765: LD_ADDR_VAR 0 4
73769: PUSH
73770: DOUBLE
73771: LD_VAR 0 1
73775: INC
73776: ST_TO_ADDR
73777: LD_VAR 0 2
73781: PUSH
73782: FOR_DOWNTO
73783: IFFALSE 73807
// result := Delete ( result , result ) ;
73785: LD_ADDR_VAR 0 3
73789: PUSH
73790: LD_VAR 0 3
73794: PPUSH
73795: LD_VAR 0 3
73799: PPUSH
73800: CALL_OW 3
73804: ST_TO_ADDR
73805: GO 73782
73807: POP
73808: POP
// end ;
73809: LD_VAR 0 3
73813: RET
// export function ComExit ( unit ) ; var tmp ; begin
73814: LD_INT 0
73816: PPUSH
73817: PPUSH
// if not IsInUnit ( unit ) then
73818: LD_VAR 0 1
73822: PPUSH
73823: CALL_OW 310
73827: NOT
73828: IFFALSE 73832
// exit ;
73830: GO 73892
// tmp := IsInUnit ( unit ) ;
73832: LD_ADDR_VAR 0 3
73836: PUSH
73837: LD_VAR 0 1
73841: PPUSH
73842: CALL_OW 310
73846: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73847: LD_VAR 0 3
73851: PPUSH
73852: CALL_OW 247
73856: PUSH
73857: LD_INT 2
73859: EQUAL
73860: IFFALSE 73873
// ComExitVehicle ( unit ) else
73862: LD_VAR 0 1
73866: PPUSH
73867: CALL_OW 121
73871: GO 73882
// ComExitBuilding ( unit ) ;
73873: LD_VAR 0 1
73877: PPUSH
73878: CALL_OW 122
// result := tmp ;
73882: LD_ADDR_VAR 0 2
73886: PUSH
73887: LD_VAR 0 3
73891: ST_TO_ADDR
// end ;
73892: LD_VAR 0 2
73896: RET
// export function ComExitAll ( units ) ; var i ; begin
73897: LD_INT 0
73899: PPUSH
73900: PPUSH
// if not units then
73901: LD_VAR 0 1
73905: NOT
73906: IFFALSE 73910
// exit ;
73908: GO 73936
// for i in units do
73910: LD_ADDR_VAR 0 3
73914: PUSH
73915: LD_VAR 0 1
73919: PUSH
73920: FOR_IN
73921: IFFALSE 73934
// ComExit ( i ) ;
73923: LD_VAR 0 3
73927: PPUSH
73928: CALL 73814 0 1
73932: GO 73920
73934: POP
73935: POP
// end ;
73936: LD_VAR 0 2
73940: RET
// export function ResetHc ; begin
73941: LD_INT 0
73943: PPUSH
// InitHc ;
73944: CALL_OW 19
// hc_importance := 0 ;
73948: LD_ADDR_OWVAR 32
73952: PUSH
73953: LD_INT 0
73955: ST_TO_ADDR
// end ;
73956: LD_VAR 0 1
73960: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73961: LD_INT 0
73963: PPUSH
73964: PPUSH
73965: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73966: LD_ADDR_VAR 0 6
73970: PUSH
73971: LD_VAR 0 1
73975: PUSH
73976: LD_VAR 0 3
73980: PLUS
73981: PUSH
73982: LD_INT 2
73984: DIV
73985: ST_TO_ADDR
// if _x < 0 then
73986: LD_VAR 0 6
73990: PUSH
73991: LD_INT 0
73993: LESS
73994: IFFALSE 74011
// _x := _x * - 1 ;
73996: LD_ADDR_VAR 0 6
74000: PUSH
74001: LD_VAR 0 6
74005: PUSH
74006: LD_INT 1
74008: NEG
74009: MUL
74010: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74011: LD_ADDR_VAR 0 7
74015: PUSH
74016: LD_VAR 0 2
74020: PUSH
74021: LD_VAR 0 4
74025: PLUS
74026: PUSH
74027: LD_INT 2
74029: DIV
74030: ST_TO_ADDR
// if _y < 0 then
74031: LD_VAR 0 7
74035: PUSH
74036: LD_INT 0
74038: LESS
74039: IFFALSE 74056
// _y := _y * - 1 ;
74041: LD_ADDR_VAR 0 7
74045: PUSH
74046: LD_VAR 0 7
74050: PUSH
74051: LD_INT 1
74053: NEG
74054: MUL
74055: ST_TO_ADDR
// result := [ _x , _y ] ;
74056: LD_ADDR_VAR 0 5
74060: PUSH
74061: LD_VAR 0 6
74065: PUSH
74066: LD_VAR 0 7
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: ST_TO_ADDR
// end ;
74075: LD_VAR 0 5
74079: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74080: LD_INT 0
74082: PPUSH
74083: PPUSH
74084: PPUSH
74085: PPUSH
// task := GetTaskList ( unit ) ;
74086: LD_ADDR_VAR 0 7
74090: PUSH
74091: LD_VAR 0 1
74095: PPUSH
74096: CALL_OW 437
74100: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74101: LD_VAR 0 7
74105: NOT
74106: PUSH
74107: LD_VAR 0 1
74111: PPUSH
74112: LD_VAR 0 2
74116: PPUSH
74117: CALL_OW 308
74121: NOT
74122: AND
74123: IFFALSE 74127
// exit ;
74125: GO 74245
// if IsInArea ( unit , area ) then
74127: LD_VAR 0 1
74131: PPUSH
74132: LD_VAR 0 2
74136: PPUSH
74137: CALL_OW 308
74141: IFFALSE 74159
// begin ComMoveToArea ( unit , goAway ) ;
74143: LD_VAR 0 1
74147: PPUSH
74148: LD_VAR 0 3
74152: PPUSH
74153: CALL_OW 113
// exit ;
74157: GO 74245
// end ; if task [ 1 ] [ 1 ] <> M then
74159: LD_VAR 0 7
74163: PUSH
74164: LD_INT 1
74166: ARRAY
74167: PUSH
74168: LD_INT 1
74170: ARRAY
74171: PUSH
74172: LD_STRING M
74174: NONEQUAL
74175: IFFALSE 74179
// exit ;
74177: GO 74245
// x := task [ 1 ] [ 2 ] ;
74179: LD_ADDR_VAR 0 5
74183: PUSH
74184: LD_VAR 0 7
74188: PUSH
74189: LD_INT 1
74191: ARRAY
74192: PUSH
74193: LD_INT 2
74195: ARRAY
74196: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74197: LD_ADDR_VAR 0 6
74201: PUSH
74202: LD_VAR 0 7
74206: PUSH
74207: LD_INT 1
74209: ARRAY
74210: PUSH
74211: LD_INT 3
74213: ARRAY
74214: ST_TO_ADDR
// if InArea ( x , y , area ) then
74215: LD_VAR 0 5
74219: PPUSH
74220: LD_VAR 0 6
74224: PPUSH
74225: LD_VAR 0 2
74229: PPUSH
74230: CALL_OW 309
74234: IFFALSE 74245
// ComStop ( unit ) ;
74236: LD_VAR 0 1
74240: PPUSH
74241: CALL_OW 141
// end ;
74245: LD_VAR 0 4
74249: RET
// export function Abs ( value ) ; begin
74250: LD_INT 0
74252: PPUSH
// result := value ;
74253: LD_ADDR_VAR 0 2
74257: PUSH
74258: LD_VAR 0 1
74262: ST_TO_ADDR
// if value < 0 then
74263: LD_VAR 0 1
74267: PUSH
74268: LD_INT 0
74270: LESS
74271: IFFALSE 74288
// result := value * - 1 ;
74273: LD_ADDR_VAR 0 2
74277: PUSH
74278: LD_VAR 0 1
74282: PUSH
74283: LD_INT 1
74285: NEG
74286: MUL
74287: ST_TO_ADDR
// end ;
74288: LD_VAR 0 2
74292: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74293: LD_INT 0
74295: PPUSH
74296: PPUSH
74297: PPUSH
74298: PPUSH
74299: PPUSH
74300: PPUSH
74301: PPUSH
74302: PPUSH
// if not unit or not building then
74303: LD_VAR 0 1
74307: NOT
74308: PUSH
74309: LD_VAR 0 2
74313: NOT
74314: OR
74315: IFFALSE 74319
// exit ;
74317: GO 74545
// x := GetX ( building ) ;
74319: LD_ADDR_VAR 0 4
74323: PUSH
74324: LD_VAR 0 2
74328: PPUSH
74329: CALL_OW 250
74333: ST_TO_ADDR
// y := GetY ( building ) ;
74334: LD_ADDR_VAR 0 6
74338: PUSH
74339: LD_VAR 0 2
74343: PPUSH
74344: CALL_OW 251
74348: ST_TO_ADDR
// d := GetDir ( building ) ;
74349: LD_ADDR_VAR 0 8
74353: PUSH
74354: LD_VAR 0 2
74358: PPUSH
74359: CALL_OW 254
74363: ST_TO_ADDR
// r := 4 ;
74364: LD_ADDR_VAR 0 9
74368: PUSH
74369: LD_INT 4
74371: ST_TO_ADDR
// for i := 1 to 5 do
74372: LD_ADDR_VAR 0 10
74376: PUSH
74377: DOUBLE
74378: LD_INT 1
74380: DEC
74381: ST_TO_ADDR
74382: LD_INT 5
74384: PUSH
74385: FOR_TO
74386: IFFALSE 74543
// begin _x := ShiftX ( x , d , r + i ) ;
74388: LD_ADDR_VAR 0 5
74392: PUSH
74393: LD_VAR 0 4
74397: PPUSH
74398: LD_VAR 0 8
74402: PPUSH
74403: LD_VAR 0 9
74407: PUSH
74408: LD_VAR 0 10
74412: PLUS
74413: PPUSH
74414: CALL_OW 272
74418: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74419: LD_ADDR_VAR 0 7
74423: PUSH
74424: LD_VAR 0 6
74428: PPUSH
74429: LD_VAR 0 8
74433: PPUSH
74434: LD_VAR 0 9
74438: PUSH
74439: LD_VAR 0 10
74443: PLUS
74444: PPUSH
74445: CALL_OW 273
74449: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74450: LD_VAR 0 5
74454: PPUSH
74455: LD_VAR 0 7
74459: PPUSH
74460: CALL_OW 488
74464: PUSH
74465: LD_VAR 0 5
74469: PPUSH
74470: LD_VAR 0 7
74474: PPUSH
74475: CALL_OW 428
74479: PPUSH
74480: CALL_OW 247
74484: PUSH
74485: LD_INT 3
74487: PUSH
74488: LD_INT 2
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: IN
74495: NOT
74496: AND
74497: IFFALSE 74541
// begin ComMoveXY ( unit , _x , _y ) ;
74499: LD_VAR 0 1
74503: PPUSH
74504: LD_VAR 0 5
74508: PPUSH
74509: LD_VAR 0 7
74513: PPUSH
74514: CALL_OW 111
// result := [ _x , _y ] ;
74518: LD_ADDR_VAR 0 3
74522: PUSH
74523: LD_VAR 0 5
74527: PUSH
74528: LD_VAR 0 7
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: ST_TO_ADDR
// exit ;
74537: POP
74538: POP
74539: GO 74545
// end ; end ;
74541: GO 74385
74543: POP
74544: POP
// end ;
74545: LD_VAR 0 3
74549: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74550: LD_INT 0
74552: PPUSH
74553: PPUSH
74554: PPUSH
// result := 0 ;
74555: LD_ADDR_VAR 0 3
74559: PUSH
74560: LD_INT 0
74562: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74563: LD_VAR 0 1
74567: PUSH
74568: LD_INT 0
74570: LESS
74571: PUSH
74572: LD_VAR 0 1
74576: PUSH
74577: LD_INT 8
74579: GREATER
74580: OR
74581: PUSH
74582: LD_VAR 0 2
74586: PUSH
74587: LD_INT 0
74589: LESS
74590: OR
74591: PUSH
74592: LD_VAR 0 2
74596: PUSH
74597: LD_INT 8
74599: GREATER
74600: OR
74601: IFFALSE 74605
// exit ;
74603: GO 74680
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74605: LD_ADDR_VAR 0 4
74609: PUSH
74610: LD_INT 22
74612: PUSH
74613: LD_VAR 0 2
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: PPUSH
74622: CALL_OW 69
74626: PUSH
74627: FOR_IN
74628: IFFALSE 74678
// begin un := UnitShoot ( i ) ;
74630: LD_ADDR_VAR 0 5
74634: PUSH
74635: LD_VAR 0 4
74639: PPUSH
74640: CALL_OW 504
74644: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74645: LD_VAR 0 5
74649: PPUSH
74650: CALL_OW 255
74654: PUSH
74655: LD_VAR 0 1
74659: EQUAL
74660: IFFALSE 74676
// begin result := un ;
74662: LD_ADDR_VAR 0 3
74666: PUSH
74667: LD_VAR 0 5
74671: ST_TO_ADDR
// exit ;
74672: POP
74673: POP
74674: GO 74680
// end ; end ;
74676: GO 74627
74678: POP
74679: POP
// end ;
74680: LD_VAR 0 3
74684: RET
// export function GetCargoBay ( units ) ; begin
74685: LD_INT 0
74687: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74688: LD_ADDR_VAR 0 2
74692: PUSH
74693: LD_VAR 0 1
74697: PPUSH
74698: LD_INT 2
74700: PUSH
74701: LD_INT 34
74703: PUSH
74704: LD_INT 12
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 34
74713: PUSH
74714: LD_INT 51
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 34
74723: PUSH
74724: LD_INT 32
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 34
74733: PUSH
74734: LD_EXP 44
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: PPUSH
74750: CALL_OW 72
74754: ST_TO_ADDR
// end ;
74755: LD_VAR 0 2
74759: RET
// export function Negate ( value ) ; begin
74760: LD_INT 0
74762: PPUSH
// result := not value ;
74763: LD_ADDR_VAR 0 2
74767: PUSH
74768: LD_VAR 0 1
74772: NOT
74773: ST_TO_ADDR
// end ;
74774: LD_VAR 0 2
74778: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74779: LD_INT 0
74781: PPUSH
// if x1 = x2 then
74782: LD_VAR 0 1
74786: PUSH
74787: LD_VAR 0 3
74791: EQUAL
74792: IFFALSE 74826
// begin if y1 > y2 then
74794: LD_VAR 0 2
74798: PUSH
74799: LD_VAR 0 4
74803: GREATER
74804: IFFALSE 74816
// result := 0 else
74806: LD_ADDR_VAR 0 5
74810: PUSH
74811: LD_INT 0
74813: ST_TO_ADDR
74814: GO 74824
// result := 3 ;
74816: LD_ADDR_VAR 0 5
74820: PUSH
74821: LD_INT 3
74823: ST_TO_ADDR
// exit ;
74824: GO 74912
// end ; if y1 = y2 then
74826: LD_VAR 0 2
74830: PUSH
74831: LD_VAR 0 4
74835: EQUAL
74836: IFFALSE 74870
// begin if x1 > x2 then
74838: LD_VAR 0 1
74842: PUSH
74843: LD_VAR 0 3
74847: GREATER
74848: IFFALSE 74860
// result := 1 else
74850: LD_ADDR_VAR 0 5
74854: PUSH
74855: LD_INT 1
74857: ST_TO_ADDR
74858: GO 74868
// result := 4 ;
74860: LD_ADDR_VAR 0 5
74864: PUSH
74865: LD_INT 4
74867: ST_TO_ADDR
// exit ;
74868: GO 74912
// end ; if x1 > x2 and y1 > y2 then
74870: LD_VAR 0 1
74874: PUSH
74875: LD_VAR 0 3
74879: GREATER
74880: PUSH
74881: LD_VAR 0 2
74885: PUSH
74886: LD_VAR 0 4
74890: GREATER
74891: AND
74892: IFFALSE 74904
// result := 2 else
74894: LD_ADDR_VAR 0 5
74898: PUSH
74899: LD_INT 2
74901: ST_TO_ADDR
74902: GO 74912
// result := 5 ;
74904: LD_ADDR_VAR 0 5
74908: PUSH
74909: LD_INT 5
74911: ST_TO_ADDR
// end ;
74912: LD_VAR 0 5
74916: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74917: LD_INT 0
74919: PPUSH
74920: PPUSH
// if not driver or not IsInUnit ( driver ) then
74921: LD_VAR 0 1
74925: NOT
74926: PUSH
74927: LD_VAR 0 1
74931: PPUSH
74932: CALL_OW 310
74936: NOT
74937: OR
74938: IFFALSE 74942
// exit ;
74940: GO 75032
// vehicle := IsInUnit ( driver ) ;
74942: LD_ADDR_VAR 0 3
74946: PUSH
74947: LD_VAR 0 1
74951: PPUSH
74952: CALL_OW 310
74956: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74957: LD_VAR 0 1
74961: PPUSH
74962: LD_STRING \
74964: PUSH
74965: LD_INT 0
74967: PUSH
74968: LD_INT 0
74970: PUSH
74971: LD_INT 0
74973: PUSH
74974: LD_INT 0
74976: PUSH
74977: LD_INT 0
74979: PUSH
74980: LD_INT 0
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: PUSH
74992: LD_STRING E
74994: PUSH
74995: LD_INT 0
74997: PUSH
74998: LD_INT 0
75000: PUSH
75001: LD_VAR 0 3
75005: PUSH
75006: LD_INT 0
75008: PUSH
75009: LD_INT 0
75011: PUSH
75012: LD_INT 0
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PPUSH
75028: CALL_OW 446
// end ;
75032: LD_VAR 0 2
75036: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75037: LD_INT 0
75039: PPUSH
75040: PPUSH
// if not driver or not IsInUnit ( driver ) then
75041: LD_VAR 0 1
75045: NOT
75046: PUSH
75047: LD_VAR 0 1
75051: PPUSH
75052: CALL_OW 310
75056: NOT
75057: OR
75058: IFFALSE 75062
// exit ;
75060: GO 75152
// vehicle := IsInUnit ( driver ) ;
75062: LD_ADDR_VAR 0 3
75066: PUSH
75067: LD_VAR 0 1
75071: PPUSH
75072: CALL_OW 310
75076: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75077: LD_VAR 0 1
75081: PPUSH
75082: LD_STRING \
75084: PUSH
75085: LD_INT 0
75087: PUSH
75088: LD_INT 0
75090: PUSH
75091: LD_INT 0
75093: PUSH
75094: LD_INT 0
75096: PUSH
75097: LD_INT 0
75099: PUSH
75100: LD_INT 0
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: LIST
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: PUSH
75112: LD_STRING E
75114: PUSH
75115: LD_INT 0
75117: PUSH
75118: LD_INT 0
75120: PUSH
75121: LD_VAR 0 3
75125: PUSH
75126: LD_INT 0
75128: PUSH
75129: LD_INT 0
75131: PUSH
75132: LD_INT 0
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PPUSH
75148: CALL_OW 447
// end ;
75152: LD_VAR 0 2
75156: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75157: LD_INT 0
75159: PPUSH
75160: PPUSH
75161: PPUSH
// tmp := [ ] ;
75162: LD_ADDR_VAR 0 5
75166: PUSH
75167: EMPTY
75168: ST_TO_ADDR
// for i in units do
75169: LD_ADDR_VAR 0 4
75173: PUSH
75174: LD_VAR 0 1
75178: PUSH
75179: FOR_IN
75180: IFFALSE 75218
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75182: LD_ADDR_VAR 0 5
75186: PUSH
75187: LD_VAR 0 5
75191: PPUSH
75192: LD_VAR 0 5
75196: PUSH
75197: LD_INT 1
75199: PLUS
75200: PPUSH
75201: LD_VAR 0 4
75205: PPUSH
75206: CALL_OW 256
75210: PPUSH
75211: CALL_OW 2
75215: ST_TO_ADDR
75216: GO 75179
75218: POP
75219: POP
// if not tmp then
75220: LD_VAR 0 5
75224: NOT
75225: IFFALSE 75229
// exit ;
75227: GO 75277
// if asc then
75229: LD_VAR 0 2
75233: IFFALSE 75257
// result := SortListByListAsc ( units , tmp ) else
75235: LD_ADDR_VAR 0 3
75239: PUSH
75240: LD_VAR 0 1
75244: PPUSH
75245: LD_VAR 0 5
75249: PPUSH
75250: CALL_OW 76
75254: ST_TO_ADDR
75255: GO 75277
// result := SortListByListDesc ( units , tmp ) ;
75257: LD_ADDR_VAR 0 3
75261: PUSH
75262: LD_VAR 0 1
75266: PPUSH
75267: LD_VAR 0 5
75271: PPUSH
75272: CALL_OW 77
75276: ST_TO_ADDR
// end ;
75277: LD_VAR 0 3
75281: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75282: LD_INT 0
75284: PPUSH
75285: PPUSH
// task := GetTaskList ( mech ) ;
75286: LD_ADDR_VAR 0 4
75290: PUSH
75291: LD_VAR 0 1
75295: PPUSH
75296: CALL_OW 437
75300: ST_TO_ADDR
// if not task then
75301: LD_VAR 0 4
75305: NOT
75306: IFFALSE 75310
// exit ;
75308: GO 75352
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75310: LD_ADDR_VAR 0 3
75314: PUSH
75315: LD_VAR 0 4
75319: PUSH
75320: LD_INT 1
75322: ARRAY
75323: PUSH
75324: LD_INT 1
75326: ARRAY
75327: PUSH
75328: LD_STRING r
75330: EQUAL
75331: PUSH
75332: LD_VAR 0 4
75336: PUSH
75337: LD_INT 1
75339: ARRAY
75340: PUSH
75341: LD_INT 4
75343: ARRAY
75344: PUSH
75345: LD_VAR 0 2
75349: EQUAL
75350: AND
75351: ST_TO_ADDR
// end ;
75352: LD_VAR 0 3
75356: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75357: LD_INT 0
75359: PPUSH
// SetDir ( unit , d ) ;
75360: LD_VAR 0 1
75364: PPUSH
75365: LD_VAR 0 4
75369: PPUSH
75370: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75374: LD_VAR 0 1
75378: PPUSH
75379: LD_VAR 0 2
75383: PPUSH
75384: LD_VAR 0 3
75388: PPUSH
75389: LD_VAR 0 5
75393: PPUSH
75394: CALL_OW 48
// end ;
75398: LD_VAR 0 6
75402: RET
// export function ToNaturalNumber ( number ) ; begin
75403: LD_INT 0
75405: PPUSH
// result := number div 1 ;
75406: LD_ADDR_VAR 0 2
75410: PUSH
75411: LD_VAR 0 1
75415: PUSH
75416: LD_INT 1
75418: DIV
75419: ST_TO_ADDR
// if number < 0 then
75420: LD_VAR 0 1
75424: PUSH
75425: LD_INT 0
75427: LESS
75428: IFFALSE 75438
// result := 0 ;
75430: LD_ADDR_VAR 0 2
75434: PUSH
75435: LD_INT 0
75437: ST_TO_ADDR
// end ;
75438: LD_VAR 0 2
75442: RET
// export function SortByClass ( units , class ) ; var un ; begin
75443: LD_INT 0
75445: PPUSH
75446: PPUSH
// if not units or not class then
75447: LD_VAR 0 1
75451: NOT
75452: PUSH
75453: LD_VAR 0 2
75457: NOT
75458: OR
75459: IFFALSE 75463
// exit ;
75461: GO 75558
// result := [ ] ;
75463: LD_ADDR_VAR 0 3
75467: PUSH
75468: EMPTY
75469: ST_TO_ADDR
// for un in units do
75470: LD_ADDR_VAR 0 4
75474: PUSH
75475: LD_VAR 0 1
75479: PUSH
75480: FOR_IN
75481: IFFALSE 75556
// if GetClass ( un ) = class then
75483: LD_VAR 0 4
75487: PPUSH
75488: CALL_OW 257
75492: PUSH
75493: LD_VAR 0 2
75497: EQUAL
75498: IFFALSE 75525
// result := Insert ( result , 1 , un ) else
75500: LD_ADDR_VAR 0 3
75504: PUSH
75505: LD_VAR 0 3
75509: PPUSH
75510: LD_INT 1
75512: PPUSH
75513: LD_VAR 0 4
75517: PPUSH
75518: CALL_OW 2
75522: ST_TO_ADDR
75523: GO 75554
// result := Replace ( result , result + 1 , un ) ;
75525: LD_ADDR_VAR 0 3
75529: PUSH
75530: LD_VAR 0 3
75534: PPUSH
75535: LD_VAR 0 3
75539: PUSH
75540: LD_INT 1
75542: PLUS
75543: PPUSH
75544: LD_VAR 0 4
75548: PPUSH
75549: CALL_OW 1
75553: ST_TO_ADDR
75554: GO 75480
75556: POP
75557: POP
// end ;
75558: LD_VAR 0 3
75562: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75563: LD_INT 0
75565: PPUSH
75566: PPUSH
75567: PPUSH
75568: PPUSH
75569: PPUSH
75570: PPUSH
75571: PPUSH
// result := [ ] ;
75572: LD_ADDR_VAR 0 4
75576: PUSH
75577: EMPTY
75578: ST_TO_ADDR
// if x - r < 0 then
75579: LD_VAR 0 1
75583: PUSH
75584: LD_VAR 0 3
75588: MINUS
75589: PUSH
75590: LD_INT 0
75592: LESS
75593: IFFALSE 75605
// min_x := 0 else
75595: LD_ADDR_VAR 0 8
75599: PUSH
75600: LD_INT 0
75602: ST_TO_ADDR
75603: GO 75621
// min_x := x - r ;
75605: LD_ADDR_VAR 0 8
75609: PUSH
75610: LD_VAR 0 1
75614: PUSH
75615: LD_VAR 0 3
75619: MINUS
75620: ST_TO_ADDR
// if y - r < 0 then
75621: LD_VAR 0 2
75625: PUSH
75626: LD_VAR 0 3
75630: MINUS
75631: PUSH
75632: LD_INT 0
75634: LESS
75635: IFFALSE 75647
// min_y := 0 else
75637: LD_ADDR_VAR 0 7
75641: PUSH
75642: LD_INT 0
75644: ST_TO_ADDR
75645: GO 75663
// min_y := y - r ;
75647: LD_ADDR_VAR 0 7
75651: PUSH
75652: LD_VAR 0 2
75656: PUSH
75657: LD_VAR 0 3
75661: MINUS
75662: ST_TO_ADDR
// max_x := x + r ;
75663: LD_ADDR_VAR 0 9
75667: PUSH
75668: LD_VAR 0 1
75672: PUSH
75673: LD_VAR 0 3
75677: PLUS
75678: ST_TO_ADDR
// max_y := y + r ;
75679: LD_ADDR_VAR 0 10
75683: PUSH
75684: LD_VAR 0 2
75688: PUSH
75689: LD_VAR 0 3
75693: PLUS
75694: ST_TO_ADDR
// for _x = min_x to max_x do
75695: LD_ADDR_VAR 0 5
75699: PUSH
75700: DOUBLE
75701: LD_VAR 0 8
75705: DEC
75706: ST_TO_ADDR
75707: LD_VAR 0 9
75711: PUSH
75712: FOR_TO
75713: IFFALSE 75814
// for _y = min_y to max_y do
75715: LD_ADDR_VAR 0 6
75719: PUSH
75720: DOUBLE
75721: LD_VAR 0 7
75725: DEC
75726: ST_TO_ADDR
75727: LD_VAR 0 10
75731: PUSH
75732: FOR_TO
75733: IFFALSE 75810
// begin if not ValidHex ( _x , _y ) then
75735: LD_VAR 0 5
75739: PPUSH
75740: LD_VAR 0 6
75744: PPUSH
75745: CALL_OW 488
75749: NOT
75750: IFFALSE 75754
// continue ;
75752: GO 75732
// if GetResourceTypeXY ( _x , _y ) then
75754: LD_VAR 0 5
75758: PPUSH
75759: LD_VAR 0 6
75763: PPUSH
75764: CALL_OW 283
75768: IFFALSE 75808
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75770: LD_ADDR_VAR 0 4
75774: PUSH
75775: LD_VAR 0 4
75779: PPUSH
75780: LD_VAR 0 4
75784: PUSH
75785: LD_INT 1
75787: PLUS
75788: PPUSH
75789: LD_VAR 0 5
75793: PUSH
75794: LD_VAR 0 6
75798: PUSH
75799: EMPTY
75800: LIST
75801: LIST
75802: PPUSH
75803: CALL_OW 1
75807: ST_TO_ADDR
// end ;
75808: GO 75732
75810: POP
75811: POP
75812: GO 75712
75814: POP
75815: POP
// end ;
75816: LD_VAR 0 4
75820: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
75821: LD_INT 0
75823: PPUSH
75824: PPUSH
75825: PPUSH
75826: PPUSH
75827: PPUSH
75828: PPUSH
// if not units then
75829: LD_VAR 0 1
75833: NOT
75834: IFFALSE 75838
// exit ;
75836: GO 76239
// result := UnitFilter ( units , [ f_ok ] ) ;
75838: LD_ADDR_VAR 0 3
75842: PUSH
75843: LD_VAR 0 1
75847: PPUSH
75848: LD_INT 50
75850: PUSH
75851: EMPTY
75852: LIST
75853: PPUSH
75854: CALL_OW 72
75858: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75859: LD_ADDR_VAR 0 7
75863: PUSH
75864: LD_VAR 0 1
75868: PUSH
75869: LD_INT 1
75871: ARRAY
75872: PPUSH
75873: CALL_OW 255
75877: ST_TO_ADDR
// if not result then
75878: LD_VAR 0 3
75882: NOT
75883: IFFALSE 75887
// exit ;
75885: GO 76239
// for i in result do
75887: LD_ADDR_VAR 0 4
75891: PUSH
75892: LD_VAR 0 3
75896: PUSH
75897: FOR_IN
75898: IFFALSE 76237
// begin tag := GetTag ( i ) + 1 ;
75900: LD_ADDR_VAR 0 8
75904: PUSH
75905: LD_VAR 0 4
75909: PPUSH
75910: CALL_OW 110
75914: PUSH
75915: LD_INT 1
75917: PLUS
75918: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75919: LD_ADDR_VAR 0 6
75923: PUSH
75924: LD_VAR 0 4
75928: PPUSH
75929: CALL_OW 250
75933: PPUSH
75934: LD_VAR 0 4
75938: PPUSH
75939: CALL_OW 251
75943: PPUSH
75944: LD_INT 6
75946: PPUSH
75947: CALL 75563 0 3
75951: ST_TO_ADDR
// if cr then
75952: LD_VAR 0 6
75956: IFFALSE 75995
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75958: LD_VAR 0 4
75962: PPUSH
75963: LD_VAR 0 6
75967: PUSH
75968: LD_INT 1
75970: ARRAY
75971: PUSH
75972: LD_INT 1
75974: ARRAY
75975: PPUSH
75976: LD_VAR 0 6
75980: PUSH
75981: LD_INT 1
75983: ARRAY
75984: PUSH
75985: LD_INT 2
75987: ARRAY
75988: PPUSH
75989: CALL_OW 116
75993: GO 76235
// if path > tag then
75995: LD_VAR 0 2
75999: PUSH
76000: LD_VAR 0 8
76004: GREATER
76005: IFFALSE 76183
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76007: LD_ADDR_VAR 0 5
76011: PUSH
76012: LD_INT 81
76014: PUSH
76015: LD_VAR 0 7
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PUSH
76024: LD_INT 91
76026: PUSH
76027: LD_VAR 0 4
76031: PUSH
76032: LD_INT 12
76034: PUSH
76035: EMPTY
76036: LIST
76037: LIST
76038: LIST
76039: PUSH
76040: EMPTY
76041: LIST
76042: LIST
76043: PPUSH
76044: CALL_OW 69
76048: ST_TO_ADDR
// if enemy then
76049: LD_VAR 0 5
76053: IFFALSE 76081
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76055: LD_VAR 0 4
76059: PPUSH
76060: LD_VAR 0 5
76064: PPUSH
76065: LD_VAR 0 4
76069: PPUSH
76070: CALL_OW 74
76074: PPUSH
76075: CALL_OW 115
76079: GO 76181
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76081: LD_VAR 0 4
76085: PPUSH
76086: LD_VAR 0 2
76090: PUSH
76091: LD_VAR 0 8
76095: ARRAY
76096: PUSH
76097: LD_INT 1
76099: ARRAY
76100: PPUSH
76101: LD_VAR 0 2
76105: PUSH
76106: LD_VAR 0 8
76110: ARRAY
76111: PUSH
76112: LD_INT 2
76114: ARRAY
76115: PPUSH
76116: CALL_OW 297
76120: PUSH
76121: LD_INT 6
76123: GREATER
76124: IFFALSE 76167
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76126: LD_VAR 0 4
76130: PPUSH
76131: LD_VAR 0 2
76135: PUSH
76136: LD_VAR 0 8
76140: ARRAY
76141: PUSH
76142: LD_INT 1
76144: ARRAY
76145: PPUSH
76146: LD_VAR 0 2
76150: PUSH
76151: LD_VAR 0 8
76155: ARRAY
76156: PUSH
76157: LD_INT 2
76159: ARRAY
76160: PPUSH
76161: CALL_OW 114
76165: GO 76181
// SetTag ( i , tag ) ;
76167: LD_VAR 0 4
76171: PPUSH
76172: LD_VAR 0 8
76176: PPUSH
76177: CALL_OW 109
// end else
76181: GO 76235
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76183: LD_ADDR_VAR 0 5
76187: PUSH
76188: LD_INT 81
76190: PUSH
76191: LD_VAR 0 7
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PPUSH
76200: CALL_OW 69
76204: ST_TO_ADDR
// if enemy then
76205: LD_VAR 0 5
76209: IFFALSE 76235
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76211: LD_VAR 0 4
76215: PPUSH
76216: LD_VAR 0 5
76220: PPUSH
76221: LD_VAR 0 4
76225: PPUSH
76226: CALL_OW 74
76230: PPUSH
76231: CALL_OW 115
// end ; end ;
76235: GO 75897
76237: POP
76238: POP
// end ; end_of_file
76239: LD_VAR 0 3
76243: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76244: LD_VAR 0 1
76248: PUSH
76249: LD_INT 200
76251: DOUBLE
76252: GREATEREQUAL
76253: IFFALSE 76261
76255: LD_INT 299
76257: DOUBLE
76258: LESSEQUAL
76259: IFTRUE 76263
76261: GO 76295
76263: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76264: LD_VAR 0 1
76268: PPUSH
76269: LD_VAR 0 2
76273: PPUSH
76274: LD_VAR 0 3
76278: PPUSH
76279: LD_VAR 0 4
76283: PPUSH
76284: LD_VAR 0 5
76288: PPUSH
76289: CALL 32806 0 5
76293: GO 76372
76295: LD_INT 300
76297: DOUBLE
76298: GREATEREQUAL
76299: IFFALSE 76307
76301: LD_INT 399
76303: DOUBLE
76304: LESSEQUAL
76305: IFTRUE 76309
76307: GO 76371
76309: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76310: LD_VAR 0 1
76314: PPUSH
76315: LD_VAR 0 2
76319: PPUSH
76320: LD_VAR 0 3
76324: PPUSH
76325: LD_VAR 0 4
76329: PPUSH
76330: LD_VAR 0 5
76334: PPUSH
76335: LD_VAR 0 6
76339: PPUSH
76340: LD_VAR 0 7
76344: PPUSH
76345: LD_VAR 0 8
76349: PPUSH
76350: LD_VAR 0 9
76354: PPUSH
76355: LD_VAR 0 10
76359: PPUSH
76360: LD_VAR 0 11
76364: PPUSH
76365: CALL 30704 0 11
76369: GO 76372
76371: POP
// end ;
76372: PPOPN 11
76374: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76375: LD_VAR 0 1
76379: PPUSH
76380: LD_VAR 0 2
76384: PPUSH
76385: LD_VAR 0 3
76389: PPUSH
76390: LD_VAR 0 4
76394: PPUSH
76395: LD_VAR 0 5
76399: PPUSH
76400: CALL 32798 0 5
// end ; end_of_file
76404: PPOPN 5
76406: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76407: LD_VAR 0 1
76411: PPUSH
76412: LD_VAR 0 2
76416: PPUSH
76417: LD_VAR 0 3
76421: PPUSH
76422: LD_VAR 0 4
76426: PPUSH
76427: LD_VAR 0 5
76431: PPUSH
76432: LD_VAR 0 6
76436: PPUSH
76437: CALL 18899 0 6
// end ;
76441: PPOPN 6
76443: END
