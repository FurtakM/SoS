// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 73345 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL 34514 0 2
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: PUSH
17981: LD_VAR 0 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 34
17991: PUSH
17992: LD_INT 46
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 34
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 34
18011: PUSH
18012: LD_INT 45
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: IN
18033: AND
18034: IFFALSE 18052
// ru_reserve := ru_reserve ^ un ;
18036: LD_ADDR_EXP 9
18040: PUSH
18041: LD_EXP 9
18045: PUSH
18046: LD_VAR 0 1
18050: ADD
18051: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 255
18061: PUSH
18062: LD_INT 3
18064: EQUAL
18065: PUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 264
18075: PUSH
18076: LD_INT 48
18078: PUSH
18079: LD_INT 52
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: IN
18086: NOT
18087: AND
18088: IFFALSE 18105
// ComMoveXY ( un , 65 , 60 ) ;
18090: LD_VAR 0 1
18094: PPUSH
18095: LD_INT 65
18097: PPUSH
18098: LD_INT 60
18100: PPUSH
18101: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18105: LD_VAR 0 1
18109: PUSH
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 48
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: IN
18139: IFFALSE 18192
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18141: LD_INT 12
18143: PPUSH
18144: LD_INT 22
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 70
18158: IFFALSE 18177
// ComAttackPlace ( un , 98 , 10 ) else
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_INT 98
18167: PPUSH
18168: LD_INT 10
18170: PPUSH
18171: CALL_OW 116
18175: GO 18192
// ComAttackPlace ( un , 134 , 99 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 134
18184: PPUSH
18185: LD_INT 99
18187: PPUSH
18188: CALL_OW 116
// end ;
18192: PPOPN 2
18194: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL 34394 0 1
// if GetChassis ( un ) = 25 then
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 265
18213: PUSH
18214: LD_INT 25
18216: EQUAL
18217: IFFALSE 18226
// SetAchievement ( ACH_BEH ) ;
18219: LD_STRING ACH_BEH
18221: PPUSH
18222: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18226: LD_VAR 0 1
18230: PUSH
18231: LD_INT 22
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 21
18243: PUSH
18244: LD_INT 3
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: IN
18260: PUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 266
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 29
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 26
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: IN
18289: NOT
18290: AND
18291: IFFALSE 18377
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18293: LD_ADDR_EXP 13
18297: PUSH
18298: LD_EXP 13
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 266
18312: ADD
18313: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18314: LD_ADDR_EXP 13
18318: PUSH
18319: LD_EXP 13
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 250
18333: ADD
18334: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18335: LD_ADDR_EXP 13
18339: PUSH
18340: LD_EXP 13
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 251
18354: ADD
18355: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18356: LD_ADDR_EXP 13
18360: PUSH
18361: LD_EXP 13
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 254
18375: ADD
18376: ST_TO_ADDR
// end ; if un in ru_attack_list then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_EXP 10
18386: IN
18387: IFFALSE 18405
// ru_attack_list := ru_attack_list diff un ;
18389: LD_ADDR_EXP 10
18393: PUSH
18394: LD_EXP 10
18398: PUSH
18399: LD_VAR 0 1
18403: DIFF
18404: ST_TO_ADDR
// if un in ru_protector then
18405: LD_VAR 0 1
18409: PUSH
18410: LD_EXP 17
18414: IN
18415: IFFALSE 18433
// ru_protector := ru_protector diff un ;
18417: LD_ADDR_EXP 17
18421: PUSH
18422: LD_EXP 17
18426: PUSH
18427: LD_VAR 0 1
18431: DIFF
18432: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 266
18442: PUSH
18443: LD_INT 30
18445: EQUAL
18446: PUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: LD_INT 1
18459: EQUAL
18460: AND
18461: IFFALSE 18471
// mine_ck := true ;
18463: LD_ADDR_EXP 35
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// end ;
18471: PPOPN 1
18473: END
// on BuildingComplete ( un ) do var i ;
18474: LD_INT 0
18476: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 255
18486: PUSH
18487: LD_INT 1
18489: EQUAL
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 266
18500: PUSH
18501: LD_INT 0
18503: EQUAL
18504: AND
18505: IFFALSE 18515
// depotConstructed := true ;
18507: LD_ADDR_EXP 2
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 255
18524: PUSH
18525: LD_INT 1
18527: EQUAL
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 266
18538: PUSH
18539: LD_INT 30
18541: EQUAL
18542: AND
18543: IFFALSE 18553
// mine_constructed := true ;
18545: LD_ADDR_EXP 37
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: LD_INT 3
18565: EQUAL
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 266
18576: PUSH
18577: LD_INT 0
18579: EQUAL
18580: AND
18581: IFFALSE 18638
// begin for i = 1 to 2 do
18583: LD_ADDR_VAR 0 2
18587: PUSH
18588: DOUBLE
18589: LD_INT 1
18591: DEC
18592: ST_TO_ADDR
18593: LD_INT 2
18595: PUSH
18596: FOR_TO
18597: IFFALSE 18636
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18599: LD_EXP 20
18603: PUSH
18604: LD_VAR 0 2
18608: ARRAY
18609: PPUSH
18610: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18614: LD_EXP 20
18618: PUSH
18619: LD_VAR 0 2
18623: ARRAY
18624: PPUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 180
// end ;
18634: GO 18596
18636: POP
18637: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 255
18647: PUSH
18648: LD_INT 3
18650: EQUAL
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 266
18661: PUSH
18662: LD_EXP 13
18666: IN
18667: AND
18668: IFFALSE 18708
// for i = 1 to 4 do
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: DOUBLE
18676: LD_INT 1
18678: DEC
18679: ST_TO_ADDR
18680: LD_INT 4
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18706
// ru_blist := Delete ( ru_blist , 1 ) ;
18686: LD_ADDR_EXP 13
18690: PUSH
18691: LD_EXP 13
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 3
18703: ST_TO_ADDR
18704: GO 18683
18706: POP
18707: POP
// end ;
18708: PPOPN 2
18710: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18711: LD_VAR 0 1
18715: PPUSH
18716: LD_VAR 0 2
18720: PPUSH
18721: LD_VAR 0 3
18725: PPUSH
18726: CALL 34490 0 3
// end ;
18730: PPOPN 3
18732: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL 34498 0 1
// end ; end_of_file end_of_file
18742: PPOPN 1
18744: END
// every 0 0$1 do
18745: GO 18747
18747: DISABLE
// begin enable ;
18748: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18749: LD_STRING updateTimer(
18751: PUSH
18752: LD_OWVAR 1
18756: STR
18757: PUSH
18758: LD_STRING );
18760: STR
18761: PPUSH
18762: CALL_OW 559
// end ;
18766: END
// export function SOS_MapStart ( ) ; begin
18767: LD_INT 0
18769: PPUSH
// if streamModeActive then
18770: LD_EXP 43
18774: IFFALSE 18783
// DefineStreamItems ( true ) ;
18776: LD_INT 1
18778: PPUSH
18779: CALL 20437 0 1
// UpdateFactoryWaypoints ( ) ;
18783: CALL 33298 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18787: CALL 33555 0 0
// end ;
18791: LD_VAR 0 1
18795: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18796: LD_INT 0
18798: PPUSH
// if p2 = 100 then
18799: LD_VAR 0 2
18803: PUSH
18804: LD_INT 100
18806: EQUAL
18807: IFFALSE 19810
// begin if not StreamModeActive then
18809: LD_EXP 43
18813: NOT
18814: IFFALSE 18824
// StreamModeActive := true ;
18816: LD_ADDR_EXP 43
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// if p3 = 0 then
18824: LD_VAR 0 3
18828: PUSH
18829: LD_INT 0
18831: EQUAL
18832: IFFALSE 18838
// InitStreamMode ;
18834: CALL 19973 0 0
// if p3 = 1 then
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 1
18845: EQUAL
18846: IFFALSE 18856
// sRocket := true ;
18848: LD_ADDR_EXP 48
18852: PUSH
18853: LD_INT 1
18855: ST_TO_ADDR
// if p3 = 2 then
18856: LD_VAR 0 3
18860: PUSH
18861: LD_INT 2
18863: EQUAL
18864: IFFALSE 18874
// sSpeed := true ;
18866: LD_ADDR_EXP 47
18870: PUSH
18871: LD_INT 1
18873: ST_TO_ADDR
// if p3 = 3 then
18874: LD_VAR 0 3
18878: PUSH
18879: LD_INT 3
18881: EQUAL
18882: IFFALSE 18892
// sEngine := true ;
18884: LD_ADDR_EXP 49
18888: PUSH
18889: LD_INT 1
18891: ST_TO_ADDR
// if p3 = 4 then
18892: LD_VAR 0 3
18896: PUSH
18897: LD_INT 4
18899: EQUAL
18900: IFFALSE 18910
// sSpec := true ;
18902: LD_ADDR_EXP 46
18906: PUSH
18907: LD_INT 1
18909: ST_TO_ADDR
// if p3 = 5 then
18910: LD_VAR 0 3
18914: PUSH
18915: LD_INT 5
18917: EQUAL
18918: IFFALSE 18928
// sLevel := true ;
18920: LD_ADDR_EXP 50
18924: PUSH
18925: LD_INT 1
18927: ST_TO_ADDR
// if p3 = 6 then
18928: LD_VAR 0 3
18932: PUSH
18933: LD_INT 6
18935: EQUAL
18936: IFFALSE 18946
// sArmoury := true ;
18938: LD_ADDR_EXP 51
18942: PUSH
18943: LD_INT 1
18945: ST_TO_ADDR
// if p3 = 7 then
18946: LD_VAR 0 3
18950: PUSH
18951: LD_INT 7
18953: EQUAL
18954: IFFALSE 18964
// sRadar := true ;
18956: LD_ADDR_EXP 52
18960: PUSH
18961: LD_INT 1
18963: ST_TO_ADDR
// if p3 = 8 then
18964: LD_VAR 0 3
18968: PUSH
18969: LD_INT 8
18971: EQUAL
18972: IFFALSE 18982
// sBunker := true ;
18974: LD_ADDR_EXP 53
18978: PUSH
18979: LD_INT 1
18981: ST_TO_ADDR
// if p3 = 9 then
18982: LD_VAR 0 3
18986: PUSH
18987: LD_INT 9
18989: EQUAL
18990: IFFALSE 19000
// sHack := true ;
18992: LD_ADDR_EXP 54
18996: PUSH
18997: LD_INT 1
18999: ST_TO_ADDR
// if p3 = 10 then
19000: LD_VAR 0 3
19004: PUSH
19005: LD_INT 10
19007: EQUAL
19008: IFFALSE 19018
// sFire := true ;
19010: LD_ADDR_EXP 55
19014: PUSH
19015: LD_INT 1
19017: ST_TO_ADDR
// if p3 = 11 then
19018: LD_VAR 0 3
19022: PUSH
19023: LD_INT 11
19025: EQUAL
19026: IFFALSE 19036
// sRefresh := true ;
19028: LD_ADDR_EXP 56
19032: PUSH
19033: LD_INT 1
19035: ST_TO_ADDR
// if p3 = 12 then
19036: LD_VAR 0 3
19040: PUSH
19041: LD_INT 12
19043: EQUAL
19044: IFFALSE 19054
// sExp := true ;
19046: LD_ADDR_EXP 57
19050: PUSH
19051: LD_INT 1
19053: ST_TO_ADDR
// if p3 = 13 then
19054: LD_VAR 0 3
19058: PUSH
19059: LD_INT 13
19061: EQUAL
19062: IFFALSE 19072
// sDepot := true ;
19064: LD_ADDR_EXP 58
19068: PUSH
19069: LD_INT 1
19071: ST_TO_ADDR
// if p3 = 14 then
19072: LD_VAR 0 3
19076: PUSH
19077: LD_INT 14
19079: EQUAL
19080: IFFALSE 19090
// sFlag := true ;
19082: LD_ADDR_EXP 59
19086: PUSH
19087: LD_INT 1
19089: ST_TO_ADDR
// if p3 = 15 then
19090: LD_VAR 0 3
19094: PUSH
19095: LD_INT 15
19097: EQUAL
19098: IFFALSE 19108
// sKamikadze := true ;
19100: LD_ADDR_EXP 67
19104: PUSH
19105: LD_INT 1
19107: ST_TO_ADDR
// if p3 = 16 then
19108: LD_VAR 0 3
19112: PUSH
19113: LD_INT 16
19115: EQUAL
19116: IFFALSE 19126
// sTroll := true ;
19118: LD_ADDR_EXP 68
19122: PUSH
19123: LD_INT 1
19125: ST_TO_ADDR
// if p3 = 17 then
19126: LD_VAR 0 3
19130: PUSH
19131: LD_INT 17
19133: EQUAL
19134: IFFALSE 19144
// sSlow := true ;
19136: LD_ADDR_EXP 69
19140: PUSH
19141: LD_INT 1
19143: ST_TO_ADDR
// if p3 = 18 then
19144: LD_VAR 0 3
19148: PUSH
19149: LD_INT 18
19151: EQUAL
19152: IFFALSE 19162
// sLack := true ;
19154: LD_ADDR_EXP 70
19158: PUSH
19159: LD_INT 1
19161: ST_TO_ADDR
// if p3 = 19 then
19162: LD_VAR 0 3
19166: PUSH
19167: LD_INT 19
19169: EQUAL
19170: IFFALSE 19180
// sTank := true ;
19172: LD_ADDR_EXP 72
19176: PUSH
19177: LD_INT 1
19179: ST_TO_ADDR
// if p3 = 20 then
19180: LD_VAR 0 3
19184: PUSH
19185: LD_INT 20
19187: EQUAL
19188: IFFALSE 19198
// sRemote := true ;
19190: LD_ADDR_EXP 73
19194: PUSH
19195: LD_INT 1
19197: ST_TO_ADDR
// if p3 = 21 then
19198: LD_VAR 0 3
19202: PUSH
19203: LD_INT 21
19205: EQUAL
19206: IFFALSE 19216
// sPowell := true ;
19208: LD_ADDR_EXP 74
19212: PUSH
19213: LD_INT 1
19215: ST_TO_ADDR
// if p3 = 22 then
19216: LD_VAR 0 3
19220: PUSH
19221: LD_INT 22
19223: EQUAL
19224: IFFALSE 19234
// sTeleport := true ;
19226: LD_ADDR_EXP 77
19230: PUSH
19231: LD_INT 1
19233: ST_TO_ADDR
// if p3 = 23 then
19234: LD_VAR 0 3
19238: PUSH
19239: LD_INT 23
19241: EQUAL
19242: IFFALSE 19252
// sOilTower := true ;
19244: LD_ADDR_EXP 79
19248: PUSH
19249: LD_INT 1
19251: ST_TO_ADDR
// if p3 = 24 then
19252: LD_VAR 0 3
19256: PUSH
19257: LD_INT 24
19259: EQUAL
19260: IFFALSE 19270
// sShovel := true ;
19262: LD_ADDR_EXP 80
19266: PUSH
19267: LD_INT 1
19269: ST_TO_ADDR
// if p3 = 25 then
19270: LD_VAR 0 3
19274: PUSH
19275: LD_INT 25
19277: EQUAL
19278: IFFALSE 19288
// sSheik := true ;
19280: LD_ADDR_EXP 81
19284: PUSH
19285: LD_INT 1
19287: ST_TO_ADDR
// if p3 = 26 then
19288: LD_VAR 0 3
19292: PUSH
19293: LD_INT 26
19295: EQUAL
19296: IFFALSE 19306
// sEarthquake := true ;
19298: LD_ADDR_EXP 83
19302: PUSH
19303: LD_INT 1
19305: ST_TO_ADDR
// if p3 = 27 then
19306: LD_VAR 0 3
19310: PUSH
19311: LD_INT 27
19313: EQUAL
19314: IFFALSE 19324
// sAI := true ;
19316: LD_ADDR_EXP 84
19320: PUSH
19321: LD_INT 1
19323: ST_TO_ADDR
// if p3 = 28 then
19324: LD_VAR 0 3
19328: PUSH
19329: LD_INT 28
19331: EQUAL
19332: IFFALSE 19342
// sCargo := true ;
19334: LD_ADDR_EXP 87
19338: PUSH
19339: LD_INT 1
19341: ST_TO_ADDR
// if p3 = 29 then
19342: LD_VAR 0 3
19346: PUSH
19347: LD_INT 29
19349: EQUAL
19350: IFFALSE 19360
// sDLaser := true ;
19352: LD_ADDR_EXP 88
19356: PUSH
19357: LD_INT 1
19359: ST_TO_ADDR
// if p3 = 30 then
19360: LD_VAR 0 3
19364: PUSH
19365: LD_INT 30
19367: EQUAL
19368: IFFALSE 19378
// sExchange := true ;
19370: LD_ADDR_EXP 89
19374: PUSH
19375: LD_INT 1
19377: ST_TO_ADDR
// if p3 = 31 then
19378: LD_VAR 0 3
19382: PUSH
19383: LD_INT 31
19385: EQUAL
19386: IFFALSE 19396
// sFac := true ;
19388: LD_ADDR_EXP 90
19392: PUSH
19393: LD_INT 1
19395: ST_TO_ADDR
// if p3 = 32 then
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 32
19403: EQUAL
19404: IFFALSE 19414
// sPower := true ;
19406: LD_ADDR_EXP 91
19410: PUSH
19411: LD_INT 1
19413: ST_TO_ADDR
// if p3 = 33 then
19414: LD_VAR 0 3
19418: PUSH
19419: LD_INT 33
19421: EQUAL
19422: IFFALSE 19432
// sRandom := true ;
19424: LD_ADDR_EXP 92
19428: PUSH
19429: LD_INT 1
19431: ST_TO_ADDR
// if p3 = 34 then
19432: LD_VAR 0 3
19436: PUSH
19437: LD_INT 34
19439: EQUAL
19440: IFFALSE 19450
// sShield := true ;
19442: LD_ADDR_EXP 93
19446: PUSH
19447: LD_INT 1
19449: ST_TO_ADDR
// if p3 = 35 then
19450: LD_VAR 0 3
19454: PUSH
19455: LD_INT 35
19457: EQUAL
19458: IFFALSE 19468
// sTime := true ;
19460: LD_ADDR_EXP 94
19464: PUSH
19465: LD_INT 1
19467: ST_TO_ADDR
// if p3 = 36 then
19468: LD_VAR 0 3
19472: PUSH
19473: LD_INT 36
19475: EQUAL
19476: IFFALSE 19486
// sTools := true ;
19478: LD_ADDR_EXP 95
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// if p3 = 101 then
19486: LD_VAR 0 3
19490: PUSH
19491: LD_INT 101
19493: EQUAL
19494: IFFALSE 19504
// sSold := true ;
19496: LD_ADDR_EXP 60
19500: PUSH
19501: LD_INT 1
19503: ST_TO_ADDR
// if p3 = 102 then
19504: LD_VAR 0 3
19508: PUSH
19509: LD_INT 102
19511: EQUAL
19512: IFFALSE 19522
// sDiff := true ;
19514: LD_ADDR_EXP 61
19518: PUSH
19519: LD_INT 1
19521: ST_TO_ADDR
// if p3 = 103 then
19522: LD_VAR 0 3
19526: PUSH
19527: LD_INT 103
19529: EQUAL
19530: IFFALSE 19540
// sFog := true ;
19532: LD_ADDR_EXP 64
19536: PUSH
19537: LD_INT 1
19539: ST_TO_ADDR
// if p3 = 104 then
19540: LD_VAR 0 3
19544: PUSH
19545: LD_INT 104
19547: EQUAL
19548: IFFALSE 19558
// sReset := true ;
19550: LD_ADDR_EXP 65
19554: PUSH
19555: LD_INT 1
19557: ST_TO_ADDR
// if p3 = 105 then
19558: LD_VAR 0 3
19562: PUSH
19563: LD_INT 105
19565: EQUAL
19566: IFFALSE 19576
// sSun := true ;
19568: LD_ADDR_EXP 66
19572: PUSH
19573: LD_INT 1
19575: ST_TO_ADDR
// if p3 = 106 then
19576: LD_VAR 0 3
19580: PUSH
19581: LD_INT 106
19583: EQUAL
19584: IFFALSE 19594
// sTiger := true ;
19586: LD_ADDR_EXP 62
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// if p3 = 107 then
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 107
19601: EQUAL
19602: IFFALSE 19612
// sBomb := true ;
19604: LD_ADDR_EXP 63
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// if p3 = 108 then
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 108
19619: EQUAL
19620: IFFALSE 19630
// sWound := true ;
19622: LD_ADDR_EXP 71
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// if p3 = 109 then
19630: LD_VAR 0 3
19634: PUSH
19635: LD_INT 109
19637: EQUAL
19638: IFFALSE 19648
// sBetray := true ;
19640: LD_ADDR_EXP 75
19644: PUSH
19645: LD_INT 1
19647: ST_TO_ADDR
// if p3 = 110 then
19648: LD_VAR 0 3
19652: PUSH
19653: LD_INT 110
19655: EQUAL
19656: IFFALSE 19666
// sContamin := true ;
19658: LD_ADDR_EXP 76
19662: PUSH
19663: LD_INT 1
19665: ST_TO_ADDR
// if p3 = 111 then
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 111
19673: EQUAL
19674: IFFALSE 19684
// sOil := true ;
19676: LD_ADDR_EXP 78
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// if p3 = 112 then
19684: LD_VAR 0 3
19688: PUSH
19689: LD_INT 112
19691: EQUAL
19692: IFFALSE 19702
// sStu := true ;
19694: LD_ADDR_EXP 82
19698: PUSH
19699: LD_INT 1
19701: ST_TO_ADDR
// if p3 = 113 then
19702: LD_VAR 0 3
19706: PUSH
19707: LD_INT 113
19709: EQUAL
19710: IFFALSE 19720
// sBazooka := true ;
19712: LD_ADDR_EXP 85
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// if p3 = 114 then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 114
19727: EQUAL
19728: IFFALSE 19738
// sMortar := true ;
19730: LD_ADDR_EXP 86
19734: PUSH
19735: LD_INT 1
19737: ST_TO_ADDR
// if p3 = 115 then
19738: LD_VAR 0 3
19742: PUSH
19743: LD_INT 115
19745: EQUAL
19746: IFFALSE 19756
// sRanger := true ;
19748: LD_ADDR_EXP 96
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if p3 = 116 then
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 116
19763: EQUAL
19764: IFFALSE 19774
// sComputer := true ;
19766: LD_ADDR_EXP 97
19770: PUSH
19771: LD_INT 1
19773: ST_TO_ADDR
// if p3 = 117 then
19774: LD_VAR 0 3
19778: PUSH
19779: LD_INT 117
19781: EQUAL
19782: IFFALSE 19792
// s30 := true ;
19784: LD_ADDR_EXP 98
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// if p3 = 118 then
19792: LD_VAR 0 3
19796: PUSH
19797: LD_INT 118
19799: EQUAL
19800: IFFALSE 19810
// s60 := true ;
19802: LD_ADDR_EXP 99
19806: PUSH
19807: LD_INT 1
19809: ST_TO_ADDR
// end ; if p2 = 101 then
19810: LD_VAR 0 2
19814: PUSH
19815: LD_INT 101
19817: EQUAL
19818: IFFALSE 19946
// begin case p3 of 1 :
19820: LD_VAR 0 3
19824: PUSH
19825: LD_INT 1
19827: DOUBLE
19828: EQUAL
19829: IFTRUE 19833
19831: GO 19840
19833: POP
// hHackUnlimitedResources ; 2 :
19834: CALL 32044 0 0
19838: GO 19946
19840: LD_INT 2
19842: DOUBLE
19843: EQUAL
19844: IFTRUE 19848
19846: GO 19855
19848: POP
// hHackSetLevel10 ; 3 :
19849: CALL 32177 0 0
19853: GO 19946
19855: LD_INT 3
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 19870
19863: POP
// hHackSetLevel10YourUnits ; 4 :
19864: CALL 32262 0 0
19868: GO 19946
19870: LD_INT 4
19872: DOUBLE
19873: EQUAL
19874: IFTRUE 19878
19876: GO 19885
19878: POP
// hHackInvincible ; 5 :
19879: CALL 32710 0 0
19883: GO 19946
19885: LD_INT 5
19887: DOUBLE
19888: EQUAL
19889: IFTRUE 19893
19891: GO 19900
19893: POP
// hHackInvisible ; 6 :
19894: CALL 32821 0 0
19898: GO 19946
19900: LD_INT 6
19902: DOUBLE
19903: EQUAL
19904: IFTRUE 19908
19906: GO 19915
19908: POP
// hHackChangeYourSide ; 7 :
19909: CALL 32878 0 0
19913: GO 19946
19915: LD_INT 7
19917: DOUBLE
19918: EQUAL
19919: IFTRUE 19923
19921: GO 19930
19923: POP
// hHackChangeUnitSide ; 8 :
19924: CALL 32920 0 0
19928: GO 19946
19930: LD_INT 8
19932: DOUBLE
19933: EQUAL
19934: IFTRUE 19938
19936: GO 19945
19938: POP
// hHackFog ; end ;
19939: CALL 33021 0 0
19943: GO 19946
19945: POP
// end ; end ;
19946: LD_VAR 0 7
19950: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19951: GO 19953
19953: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19954: LD_STRING initStreamRollete();
19956: PPUSH
19957: CALL_OW 559
// InitStreamMode ;
19961: CALL 19973 0 0
// DefineStreamItems ( false ) ;
19965: LD_INT 0
19967: PPUSH
19968: CALL 20437 0 1
// end ;
19972: END
// function InitStreamMode ; begin
19973: LD_INT 0
19975: PPUSH
// streamModeActive := false ;
19976: LD_ADDR_EXP 43
19980: PUSH
19981: LD_INT 0
19983: ST_TO_ADDR
// normalCounter := 36 ;
19984: LD_ADDR_EXP 44
19988: PUSH
19989: LD_INT 36
19991: ST_TO_ADDR
// hardcoreCounter := 18 ;
19992: LD_ADDR_EXP 45
19996: PUSH
19997: LD_INT 18
19999: ST_TO_ADDR
// sRocket := false ;
20000: LD_ADDR_EXP 48
20004: PUSH
20005: LD_INT 0
20007: ST_TO_ADDR
// sSpeed := false ;
20008: LD_ADDR_EXP 47
20012: PUSH
20013: LD_INT 0
20015: ST_TO_ADDR
// sEngine := false ;
20016: LD_ADDR_EXP 49
20020: PUSH
20021: LD_INT 0
20023: ST_TO_ADDR
// sSpec := false ;
20024: LD_ADDR_EXP 46
20028: PUSH
20029: LD_INT 0
20031: ST_TO_ADDR
// sLevel := false ;
20032: LD_ADDR_EXP 50
20036: PUSH
20037: LD_INT 0
20039: ST_TO_ADDR
// sArmoury := false ;
20040: LD_ADDR_EXP 51
20044: PUSH
20045: LD_INT 0
20047: ST_TO_ADDR
// sRadar := false ;
20048: LD_ADDR_EXP 52
20052: PUSH
20053: LD_INT 0
20055: ST_TO_ADDR
// sBunker := false ;
20056: LD_ADDR_EXP 53
20060: PUSH
20061: LD_INT 0
20063: ST_TO_ADDR
// sHack := false ;
20064: LD_ADDR_EXP 54
20068: PUSH
20069: LD_INT 0
20071: ST_TO_ADDR
// sFire := false ;
20072: LD_ADDR_EXP 55
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// sRefresh := false ;
20080: LD_ADDR_EXP 56
20084: PUSH
20085: LD_INT 0
20087: ST_TO_ADDR
// sExp := false ;
20088: LD_ADDR_EXP 57
20092: PUSH
20093: LD_INT 0
20095: ST_TO_ADDR
// sDepot := false ;
20096: LD_ADDR_EXP 58
20100: PUSH
20101: LD_INT 0
20103: ST_TO_ADDR
// sFlag := false ;
20104: LD_ADDR_EXP 59
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// sKamikadze := false ;
20112: LD_ADDR_EXP 67
20116: PUSH
20117: LD_INT 0
20119: ST_TO_ADDR
// sTroll := false ;
20120: LD_ADDR_EXP 68
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// sSlow := false ;
20128: LD_ADDR_EXP 69
20132: PUSH
20133: LD_INT 0
20135: ST_TO_ADDR
// sLack := false ;
20136: LD_ADDR_EXP 70
20140: PUSH
20141: LD_INT 0
20143: ST_TO_ADDR
// sTank := false ;
20144: LD_ADDR_EXP 72
20148: PUSH
20149: LD_INT 0
20151: ST_TO_ADDR
// sRemote := false ;
20152: LD_ADDR_EXP 73
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
// sPowell := false ;
20160: LD_ADDR_EXP 74
20164: PUSH
20165: LD_INT 0
20167: ST_TO_ADDR
// sTeleport := false ;
20168: LD_ADDR_EXP 77
20172: PUSH
20173: LD_INT 0
20175: ST_TO_ADDR
// sOilTower := false ;
20176: LD_ADDR_EXP 79
20180: PUSH
20181: LD_INT 0
20183: ST_TO_ADDR
// sShovel := false ;
20184: LD_ADDR_EXP 80
20188: PUSH
20189: LD_INT 0
20191: ST_TO_ADDR
// sSheik := false ;
20192: LD_ADDR_EXP 81
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
// sEarthquake := false ;
20200: LD_ADDR_EXP 83
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// sAI := false ;
20208: LD_ADDR_EXP 84
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// sCargo := false ;
20216: LD_ADDR_EXP 87
20220: PUSH
20221: LD_INT 0
20223: ST_TO_ADDR
// sDLaser := false ;
20224: LD_ADDR_EXP 88
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// sExchange := false ;
20232: LD_ADDR_EXP 89
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// sFac := false ;
20240: LD_ADDR_EXP 90
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// sPower := false ;
20248: LD_ADDR_EXP 91
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// sRandom := false ;
20256: LD_ADDR_EXP 92
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// sShield := false ;
20264: LD_ADDR_EXP 93
20268: PUSH
20269: LD_INT 0
20271: ST_TO_ADDR
// sTime := false ;
20272: LD_ADDR_EXP 94
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// sTools := false ;
20280: LD_ADDR_EXP 95
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// sSold := false ;
20288: LD_ADDR_EXP 60
20292: PUSH
20293: LD_INT 0
20295: ST_TO_ADDR
// sDiff := false ;
20296: LD_ADDR_EXP 61
20300: PUSH
20301: LD_INT 0
20303: ST_TO_ADDR
// sFog := false ;
20304: LD_ADDR_EXP 64
20308: PUSH
20309: LD_INT 0
20311: ST_TO_ADDR
// sReset := false ;
20312: LD_ADDR_EXP 65
20316: PUSH
20317: LD_INT 0
20319: ST_TO_ADDR
// sSun := false ;
20320: LD_ADDR_EXP 66
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// sTiger := false ;
20328: LD_ADDR_EXP 62
20332: PUSH
20333: LD_INT 0
20335: ST_TO_ADDR
// sBomb := false ;
20336: LD_ADDR_EXP 63
20340: PUSH
20341: LD_INT 0
20343: ST_TO_ADDR
// sWound := false ;
20344: LD_ADDR_EXP 71
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// sBetray := false ;
20352: LD_ADDR_EXP 75
20356: PUSH
20357: LD_INT 0
20359: ST_TO_ADDR
// sContamin := false ;
20360: LD_ADDR_EXP 76
20364: PUSH
20365: LD_INT 0
20367: ST_TO_ADDR
// sOil := false ;
20368: LD_ADDR_EXP 78
20372: PUSH
20373: LD_INT 0
20375: ST_TO_ADDR
// sStu := false ;
20376: LD_ADDR_EXP 82
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// sBazooka := false ;
20384: LD_ADDR_EXP 85
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// sMortar := false ;
20392: LD_ADDR_EXP 86
20396: PUSH
20397: LD_INT 0
20399: ST_TO_ADDR
// sRanger := false ;
20400: LD_ADDR_EXP 96
20404: PUSH
20405: LD_INT 0
20407: ST_TO_ADDR
// sComputer := false ;
20408: LD_ADDR_EXP 97
20412: PUSH
20413: LD_INT 0
20415: ST_TO_ADDR
// s30 := false ;
20416: LD_ADDR_EXP 98
20420: PUSH
20421: LD_INT 0
20423: ST_TO_ADDR
// s60 := false ;
20424: LD_ADDR_EXP 99
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// end ;
20432: LD_VAR 0 1
20436: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20437: LD_INT 0
20439: PPUSH
20440: PPUSH
20441: PPUSH
20442: PPUSH
20443: PPUSH
20444: PPUSH
20445: PPUSH
// result := [ ] ;
20446: LD_ADDR_VAR 0 2
20450: PUSH
20451: EMPTY
20452: ST_TO_ADDR
// if campaign_id = 1 then
20453: LD_OWVAR 69
20457: PUSH
20458: LD_INT 1
20460: EQUAL
20461: IFFALSE 23627
// begin case mission_number of 1 :
20463: LD_OWVAR 70
20467: PUSH
20468: LD_INT 1
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20552
20476: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20477: LD_ADDR_VAR 0 2
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 4
20487: PUSH
20488: LD_INT 11
20490: PUSH
20491: LD_INT 12
20493: PUSH
20494: LD_INT 15
20496: PUSH
20497: LD_INT 16
20499: PUSH
20500: LD_INT 22
20502: PUSH
20503: LD_INT 23
20505: PUSH
20506: LD_INT 26
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 101
20522: PUSH
20523: LD_INT 102
20525: PUSH
20526: LD_INT 106
20528: PUSH
20529: LD_INT 116
20531: PUSH
20532: LD_INT 117
20534: PUSH
20535: LD_INT 118
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: ST_TO_ADDR
20550: GO 23625
20552: LD_INT 2
20554: DOUBLE
20555: EQUAL
20556: IFTRUE 20560
20558: GO 20644
20560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20561: LD_ADDR_VAR 0 2
20565: PUSH
20566: LD_INT 2
20568: PUSH
20569: LD_INT 4
20571: PUSH
20572: LD_INT 11
20574: PUSH
20575: LD_INT 12
20577: PUSH
20578: LD_INT 15
20580: PUSH
20581: LD_INT 16
20583: PUSH
20584: LD_INT 22
20586: PUSH
20587: LD_INT 23
20589: PUSH
20590: LD_INT 26
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 101
20606: PUSH
20607: LD_INT 102
20609: PUSH
20610: LD_INT 105
20612: PUSH
20613: LD_INT 106
20615: PUSH
20616: LD_INT 108
20618: PUSH
20619: LD_INT 116
20621: PUSH
20622: LD_INT 117
20624: PUSH
20625: LD_INT 118
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: ST_TO_ADDR
20642: GO 23625
20644: LD_INT 3
20646: DOUBLE
20647: EQUAL
20648: IFTRUE 20652
20650: GO 20740
20652: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20653: LD_ADDR_VAR 0 2
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 4
20663: PUSH
20664: LD_INT 5
20666: PUSH
20667: LD_INT 11
20669: PUSH
20670: LD_INT 12
20672: PUSH
20673: LD_INT 15
20675: PUSH
20676: LD_INT 16
20678: PUSH
20679: LD_INT 22
20681: PUSH
20682: LD_INT 26
20684: PUSH
20685: LD_INT 36
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 101
20702: PUSH
20703: LD_INT 102
20705: PUSH
20706: LD_INT 105
20708: PUSH
20709: LD_INT 106
20711: PUSH
20712: LD_INT 108
20714: PUSH
20715: LD_INT 116
20717: PUSH
20718: LD_INT 117
20720: PUSH
20721: LD_INT 118
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: ST_TO_ADDR
20738: GO 23625
20740: LD_INT 4
20742: DOUBLE
20743: EQUAL
20744: IFTRUE 20748
20746: GO 20844
20748: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20749: LD_ADDR_VAR 0 2
20753: PUSH
20754: LD_INT 2
20756: PUSH
20757: LD_INT 4
20759: PUSH
20760: LD_INT 5
20762: PUSH
20763: LD_INT 8
20765: PUSH
20766: LD_INT 11
20768: PUSH
20769: LD_INT 12
20771: PUSH
20772: LD_INT 15
20774: PUSH
20775: LD_INT 16
20777: PUSH
20778: LD_INT 22
20780: PUSH
20781: LD_INT 23
20783: PUSH
20784: LD_INT 26
20786: PUSH
20787: LD_INT 36
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 101
20806: PUSH
20807: LD_INT 102
20809: PUSH
20810: LD_INT 105
20812: PUSH
20813: LD_INT 106
20815: PUSH
20816: LD_INT 108
20818: PUSH
20819: LD_INT 116
20821: PUSH
20822: LD_INT 117
20824: PUSH
20825: LD_INT 118
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: ST_TO_ADDR
20842: GO 23625
20844: LD_INT 5
20846: DOUBLE
20847: EQUAL
20848: IFTRUE 20852
20850: GO 20964
20852: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20853: LD_ADDR_VAR 0 2
20857: PUSH
20858: LD_INT 2
20860: PUSH
20861: LD_INT 4
20863: PUSH
20864: LD_INT 5
20866: PUSH
20867: LD_INT 6
20869: PUSH
20870: LD_INT 8
20872: PUSH
20873: LD_INT 11
20875: PUSH
20876: LD_INT 12
20878: PUSH
20879: LD_INT 15
20881: PUSH
20882: LD_INT 16
20884: PUSH
20885: LD_INT 22
20887: PUSH
20888: LD_INT 23
20890: PUSH
20891: LD_INT 25
20893: PUSH
20894: LD_INT 26
20896: PUSH
20897: LD_INT 36
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 101
20918: PUSH
20919: LD_INT 102
20921: PUSH
20922: LD_INT 105
20924: PUSH
20925: LD_INT 106
20927: PUSH
20928: LD_INT 108
20930: PUSH
20931: LD_INT 109
20933: PUSH
20934: LD_INT 112
20936: PUSH
20937: LD_INT 116
20939: PUSH
20940: LD_INT 117
20942: PUSH
20943: LD_INT 118
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: ST_TO_ADDR
20962: GO 23625
20964: LD_INT 6
20966: DOUBLE
20967: EQUAL
20968: IFTRUE 20972
20970: GO 21104
20972: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20973: LD_ADDR_VAR 0 2
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 4
20983: PUSH
20984: LD_INT 5
20986: PUSH
20987: LD_INT 6
20989: PUSH
20990: LD_INT 8
20992: PUSH
20993: LD_INT 11
20995: PUSH
20996: LD_INT 12
20998: PUSH
20999: LD_INT 15
21001: PUSH
21002: LD_INT 16
21004: PUSH
21005: LD_INT 20
21007: PUSH
21008: LD_INT 21
21010: PUSH
21011: LD_INT 22
21013: PUSH
21014: LD_INT 23
21016: PUSH
21017: LD_INT 25
21019: PUSH
21020: LD_INT 26
21022: PUSH
21023: LD_INT 30
21025: PUSH
21026: LD_INT 31
21028: PUSH
21029: LD_INT 32
21031: PUSH
21032: LD_INT 36
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 101
21058: PUSH
21059: LD_INT 102
21061: PUSH
21062: LD_INT 105
21064: PUSH
21065: LD_INT 106
21067: PUSH
21068: LD_INT 108
21070: PUSH
21071: LD_INT 109
21073: PUSH
21074: LD_INT 112
21076: PUSH
21077: LD_INT 116
21079: PUSH
21080: LD_INT 117
21082: PUSH
21083: LD_INT 118
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: ST_TO_ADDR
21102: GO 23625
21104: LD_INT 7
21106: DOUBLE
21107: EQUAL
21108: IFTRUE 21112
21110: GO 21224
21112: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21113: LD_ADDR_VAR 0 2
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 4
21123: PUSH
21124: LD_INT 5
21126: PUSH
21127: LD_INT 7
21129: PUSH
21130: LD_INT 11
21132: PUSH
21133: LD_INT 12
21135: PUSH
21136: LD_INT 15
21138: PUSH
21139: LD_INT 16
21141: PUSH
21142: LD_INT 20
21144: PUSH
21145: LD_INT 21
21147: PUSH
21148: LD_INT 22
21150: PUSH
21151: LD_INT 23
21153: PUSH
21154: LD_INT 25
21156: PUSH
21157: LD_INT 26
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 101
21178: PUSH
21179: LD_INT 102
21181: PUSH
21182: LD_INT 103
21184: PUSH
21185: LD_INT 105
21187: PUSH
21188: LD_INT 106
21190: PUSH
21191: LD_INT 108
21193: PUSH
21194: LD_INT 112
21196: PUSH
21197: LD_INT 116
21199: PUSH
21200: LD_INT 117
21202: PUSH
21203: LD_INT 118
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: ST_TO_ADDR
21222: GO 23625
21224: LD_INT 8
21226: DOUBLE
21227: EQUAL
21228: IFTRUE 21232
21230: GO 21372
21232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21233: LD_ADDR_VAR 0 2
21237: PUSH
21238: LD_INT 2
21240: PUSH
21241: LD_INT 4
21243: PUSH
21244: LD_INT 5
21246: PUSH
21247: LD_INT 6
21249: PUSH
21250: LD_INT 7
21252: PUSH
21253: LD_INT 8
21255: PUSH
21256: LD_INT 11
21258: PUSH
21259: LD_INT 12
21261: PUSH
21262: LD_INT 15
21264: PUSH
21265: LD_INT 16
21267: PUSH
21268: LD_INT 20
21270: PUSH
21271: LD_INT 21
21273: PUSH
21274: LD_INT 22
21276: PUSH
21277: LD_INT 23
21279: PUSH
21280: LD_INT 25
21282: PUSH
21283: LD_INT 26
21285: PUSH
21286: LD_INT 30
21288: PUSH
21289: LD_INT 31
21291: PUSH
21292: LD_INT 32
21294: PUSH
21295: LD_INT 36
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 101
21322: PUSH
21323: LD_INT 102
21325: PUSH
21326: LD_INT 103
21328: PUSH
21329: LD_INT 105
21331: PUSH
21332: LD_INT 106
21334: PUSH
21335: LD_INT 108
21337: PUSH
21338: LD_INT 109
21340: PUSH
21341: LD_INT 112
21343: PUSH
21344: LD_INT 116
21346: PUSH
21347: LD_INT 117
21349: PUSH
21350: LD_INT 118
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: ST_TO_ADDR
21370: GO 23625
21372: LD_INT 9
21374: DOUBLE
21375: EQUAL
21376: IFTRUE 21380
21378: GO 21528
21380: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21381: LD_ADDR_VAR 0 2
21385: PUSH
21386: LD_INT 2
21388: PUSH
21389: LD_INT 4
21391: PUSH
21392: LD_INT 5
21394: PUSH
21395: LD_INT 6
21397: PUSH
21398: LD_INT 7
21400: PUSH
21401: LD_INT 8
21403: PUSH
21404: LD_INT 11
21406: PUSH
21407: LD_INT 12
21409: PUSH
21410: LD_INT 15
21412: PUSH
21413: LD_INT 16
21415: PUSH
21416: LD_INT 20
21418: PUSH
21419: LD_INT 21
21421: PUSH
21422: LD_INT 22
21424: PUSH
21425: LD_INT 23
21427: PUSH
21428: LD_INT 25
21430: PUSH
21431: LD_INT 26
21433: PUSH
21434: LD_INT 28
21436: PUSH
21437: LD_INT 30
21439: PUSH
21440: LD_INT 31
21442: PUSH
21443: LD_INT 32
21445: PUSH
21446: LD_INT 36
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 101
21474: PUSH
21475: LD_INT 102
21477: PUSH
21478: LD_INT 103
21480: PUSH
21481: LD_INT 105
21483: PUSH
21484: LD_INT 106
21486: PUSH
21487: LD_INT 108
21489: PUSH
21490: LD_INT 109
21492: PUSH
21493: LD_INT 112
21495: PUSH
21496: LD_INT 114
21498: PUSH
21499: LD_INT 116
21501: PUSH
21502: LD_INT 117
21504: PUSH
21505: LD_INT 118
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: ST_TO_ADDR
21526: GO 23625
21528: LD_INT 10
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21732
21536: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 4
21547: PUSH
21548: LD_INT 5
21550: PUSH
21551: LD_INT 6
21553: PUSH
21554: LD_INT 7
21556: PUSH
21557: LD_INT 8
21559: PUSH
21560: LD_INT 9
21562: PUSH
21563: LD_INT 10
21565: PUSH
21566: LD_INT 11
21568: PUSH
21569: LD_INT 12
21571: PUSH
21572: LD_INT 13
21574: PUSH
21575: LD_INT 14
21577: PUSH
21578: LD_INT 15
21580: PUSH
21581: LD_INT 16
21583: PUSH
21584: LD_INT 17
21586: PUSH
21587: LD_INT 18
21589: PUSH
21590: LD_INT 19
21592: PUSH
21593: LD_INT 20
21595: PUSH
21596: LD_INT 21
21598: PUSH
21599: LD_INT 22
21601: PUSH
21602: LD_INT 23
21604: PUSH
21605: LD_INT 24
21607: PUSH
21608: LD_INT 25
21610: PUSH
21611: LD_INT 26
21613: PUSH
21614: LD_INT 28
21616: PUSH
21617: LD_INT 30
21619: PUSH
21620: LD_INT 31
21622: PUSH
21623: LD_INT 32
21625: PUSH
21626: LD_INT 36
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 101
21662: PUSH
21663: LD_INT 102
21665: PUSH
21666: LD_INT 103
21668: PUSH
21669: LD_INT 104
21671: PUSH
21672: LD_INT 105
21674: PUSH
21675: LD_INT 106
21677: PUSH
21678: LD_INT 107
21680: PUSH
21681: LD_INT 108
21683: PUSH
21684: LD_INT 109
21686: PUSH
21687: LD_INT 110
21689: PUSH
21690: LD_INT 111
21692: PUSH
21693: LD_INT 112
21695: PUSH
21696: LD_INT 114
21698: PUSH
21699: LD_INT 116
21701: PUSH
21702: LD_INT 117
21704: PUSH
21705: LD_INT 118
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: ST_TO_ADDR
21730: GO 23625
21732: LD_INT 11
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21944
21740: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21741: LD_ADDR_VAR 0 2
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: LD_INT 3
21751: PUSH
21752: LD_INT 4
21754: PUSH
21755: LD_INT 5
21757: PUSH
21758: LD_INT 6
21760: PUSH
21761: LD_INT 7
21763: PUSH
21764: LD_INT 8
21766: PUSH
21767: LD_INT 9
21769: PUSH
21770: LD_INT 10
21772: PUSH
21773: LD_INT 11
21775: PUSH
21776: LD_INT 12
21778: PUSH
21779: LD_INT 13
21781: PUSH
21782: LD_INT 14
21784: PUSH
21785: LD_INT 15
21787: PUSH
21788: LD_INT 16
21790: PUSH
21791: LD_INT 17
21793: PUSH
21794: LD_INT 18
21796: PUSH
21797: LD_INT 19
21799: PUSH
21800: LD_INT 20
21802: PUSH
21803: LD_INT 21
21805: PUSH
21806: LD_INT 22
21808: PUSH
21809: LD_INT 23
21811: PUSH
21812: LD_INT 24
21814: PUSH
21815: LD_INT 25
21817: PUSH
21818: LD_INT 26
21820: PUSH
21821: LD_INT 28
21823: PUSH
21824: LD_INT 30
21826: PUSH
21827: LD_INT 31
21829: PUSH
21830: LD_INT 32
21832: PUSH
21833: LD_INT 34
21835: PUSH
21836: LD_INT 36
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 101
21874: PUSH
21875: LD_INT 102
21877: PUSH
21878: LD_INT 103
21880: PUSH
21881: LD_INT 104
21883: PUSH
21884: LD_INT 105
21886: PUSH
21887: LD_INT 106
21889: PUSH
21890: LD_INT 107
21892: PUSH
21893: LD_INT 108
21895: PUSH
21896: LD_INT 109
21898: PUSH
21899: LD_INT 110
21901: PUSH
21902: LD_INT 111
21904: PUSH
21905: LD_INT 112
21907: PUSH
21908: LD_INT 114
21910: PUSH
21911: LD_INT 116
21913: PUSH
21914: LD_INT 117
21916: PUSH
21917: LD_INT 118
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: ST_TO_ADDR
21942: GO 23625
21944: LD_INT 12
21946: DOUBLE
21947: EQUAL
21948: IFTRUE 21952
21950: GO 22172
21952: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21953: LD_ADDR_VAR 0 2
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 3
21966: PUSH
21967: LD_INT 4
21969: PUSH
21970: LD_INT 5
21972: PUSH
21973: LD_INT 6
21975: PUSH
21976: LD_INT 7
21978: PUSH
21979: LD_INT 8
21981: PUSH
21982: LD_INT 9
21984: PUSH
21985: LD_INT 10
21987: PUSH
21988: LD_INT 11
21990: PUSH
21991: LD_INT 12
21993: PUSH
21994: LD_INT 13
21996: PUSH
21997: LD_INT 14
21999: PUSH
22000: LD_INT 15
22002: PUSH
22003: LD_INT 16
22005: PUSH
22006: LD_INT 17
22008: PUSH
22009: LD_INT 18
22011: PUSH
22012: LD_INT 19
22014: PUSH
22015: LD_INT 20
22017: PUSH
22018: LD_INT 21
22020: PUSH
22021: LD_INT 22
22023: PUSH
22024: LD_INT 23
22026: PUSH
22027: LD_INT 24
22029: PUSH
22030: LD_INT 25
22032: PUSH
22033: LD_INT 26
22035: PUSH
22036: LD_INT 27
22038: PUSH
22039: LD_INT 28
22041: PUSH
22042: LD_INT 30
22044: PUSH
22045: LD_INT 31
22047: PUSH
22048: LD_INT 32
22050: PUSH
22051: LD_INT 33
22053: PUSH
22054: LD_INT 34
22056: PUSH
22057: LD_INT 36
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 101
22098: PUSH
22099: LD_INT 102
22101: PUSH
22102: LD_INT 103
22104: PUSH
22105: LD_INT 104
22107: PUSH
22108: LD_INT 105
22110: PUSH
22111: LD_INT 106
22113: PUSH
22114: LD_INT 107
22116: PUSH
22117: LD_INT 108
22119: PUSH
22120: LD_INT 109
22122: PUSH
22123: LD_INT 110
22125: PUSH
22126: LD_INT 111
22128: PUSH
22129: LD_INT 112
22131: PUSH
22132: LD_INT 113
22134: PUSH
22135: LD_INT 114
22137: PUSH
22138: LD_INT 116
22140: PUSH
22141: LD_INT 117
22143: PUSH
22144: LD_INT 118
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: ST_TO_ADDR
22170: GO 23625
22172: LD_INT 13
22174: DOUBLE
22175: EQUAL
22176: IFTRUE 22180
22178: GO 22388
22180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22181: LD_ADDR_VAR 0 2
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: LD_INT 2
22191: PUSH
22192: LD_INT 3
22194: PUSH
22195: LD_INT 4
22197: PUSH
22198: LD_INT 5
22200: PUSH
22201: LD_INT 8
22203: PUSH
22204: LD_INT 9
22206: PUSH
22207: LD_INT 10
22209: PUSH
22210: LD_INT 11
22212: PUSH
22213: LD_INT 12
22215: PUSH
22216: LD_INT 14
22218: PUSH
22219: LD_INT 15
22221: PUSH
22222: LD_INT 16
22224: PUSH
22225: LD_INT 17
22227: PUSH
22228: LD_INT 18
22230: PUSH
22231: LD_INT 19
22233: PUSH
22234: LD_INT 20
22236: PUSH
22237: LD_INT 21
22239: PUSH
22240: LD_INT 22
22242: PUSH
22243: LD_INT 23
22245: PUSH
22246: LD_INT 24
22248: PUSH
22249: LD_INT 25
22251: PUSH
22252: LD_INT 26
22254: PUSH
22255: LD_INT 27
22257: PUSH
22258: LD_INT 28
22260: PUSH
22261: LD_INT 30
22263: PUSH
22264: LD_INT 31
22266: PUSH
22267: LD_INT 32
22269: PUSH
22270: LD_INT 33
22272: PUSH
22273: LD_INT 34
22275: PUSH
22276: LD_INT 36
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 101
22314: PUSH
22315: LD_INT 102
22317: PUSH
22318: LD_INT 103
22320: PUSH
22321: LD_INT 104
22323: PUSH
22324: LD_INT 105
22326: PUSH
22327: LD_INT 106
22329: PUSH
22330: LD_INT 107
22332: PUSH
22333: LD_INT 108
22335: PUSH
22336: LD_INT 109
22338: PUSH
22339: LD_INT 110
22341: PUSH
22342: LD_INT 111
22344: PUSH
22345: LD_INT 112
22347: PUSH
22348: LD_INT 113
22350: PUSH
22351: LD_INT 114
22353: PUSH
22354: LD_INT 116
22356: PUSH
22357: LD_INT 117
22359: PUSH
22360: LD_INT 118
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: ST_TO_ADDR
22386: GO 23625
22388: LD_INT 14
22390: DOUBLE
22391: EQUAL
22392: IFTRUE 22396
22394: GO 22620
22396: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22397: LD_ADDR_VAR 0 2
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: LD_INT 2
22407: PUSH
22408: LD_INT 3
22410: PUSH
22411: LD_INT 4
22413: PUSH
22414: LD_INT 5
22416: PUSH
22417: LD_INT 6
22419: PUSH
22420: LD_INT 7
22422: PUSH
22423: LD_INT 8
22425: PUSH
22426: LD_INT 9
22428: PUSH
22429: LD_INT 10
22431: PUSH
22432: LD_INT 11
22434: PUSH
22435: LD_INT 12
22437: PUSH
22438: LD_INT 13
22440: PUSH
22441: LD_INT 14
22443: PUSH
22444: LD_INT 15
22446: PUSH
22447: LD_INT 16
22449: PUSH
22450: LD_INT 17
22452: PUSH
22453: LD_INT 18
22455: PUSH
22456: LD_INT 19
22458: PUSH
22459: LD_INT 20
22461: PUSH
22462: LD_INT 21
22464: PUSH
22465: LD_INT 22
22467: PUSH
22468: LD_INT 23
22470: PUSH
22471: LD_INT 24
22473: PUSH
22474: LD_INT 25
22476: PUSH
22477: LD_INT 26
22479: PUSH
22480: LD_INT 27
22482: PUSH
22483: LD_INT 28
22485: PUSH
22486: LD_INT 29
22488: PUSH
22489: LD_INT 30
22491: PUSH
22492: LD_INT 31
22494: PUSH
22495: LD_INT 32
22497: PUSH
22498: LD_INT 33
22500: PUSH
22501: LD_INT 34
22503: PUSH
22504: LD_INT 36
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 101
22546: PUSH
22547: LD_INT 102
22549: PUSH
22550: LD_INT 103
22552: PUSH
22553: LD_INT 104
22555: PUSH
22556: LD_INT 105
22558: PUSH
22559: LD_INT 106
22561: PUSH
22562: LD_INT 107
22564: PUSH
22565: LD_INT 108
22567: PUSH
22568: LD_INT 109
22570: PUSH
22571: LD_INT 110
22573: PUSH
22574: LD_INT 111
22576: PUSH
22577: LD_INT 112
22579: PUSH
22580: LD_INT 113
22582: PUSH
22583: LD_INT 114
22585: PUSH
22586: LD_INT 116
22588: PUSH
22589: LD_INT 117
22591: PUSH
22592: LD_INT 118
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: ST_TO_ADDR
22618: GO 23625
22620: LD_INT 15
22622: DOUBLE
22623: EQUAL
22624: IFTRUE 22628
22626: GO 22852
22628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22629: LD_ADDR_VAR 0 2
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: LD_INT 3
22642: PUSH
22643: LD_INT 4
22645: PUSH
22646: LD_INT 5
22648: PUSH
22649: LD_INT 6
22651: PUSH
22652: LD_INT 7
22654: PUSH
22655: LD_INT 8
22657: PUSH
22658: LD_INT 9
22660: PUSH
22661: LD_INT 10
22663: PUSH
22664: LD_INT 11
22666: PUSH
22667: LD_INT 12
22669: PUSH
22670: LD_INT 13
22672: PUSH
22673: LD_INT 14
22675: PUSH
22676: LD_INT 15
22678: PUSH
22679: LD_INT 16
22681: PUSH
22682: LD_INT 17
22684: PUSH
22685: LD_INT 18
22687: PUSH
22688: LD_INT 19
22690: PUSH
22691: LD_INT 20
22693: PUSH
22694: LD_INT 21
22696: PUSH
22697: LD_INT 22
22699: PUSH
22700: LD_INT 23
22702: PUSH
22703: LD_INT 24
22705: PUSH
22706: LD_INT 25
22708: PUSH
22709: LD_INT 26
22711: PUSH
22712: LD_INT 27
22714: PUSH
22715: LD_INT 28
22717: PUSH
22718: LD_INT 29
22720: PUSH
22721: LD_INT 30
22723: PUSH
22724: LD_INT 31
22726: PUSH
22727: LD_INT 32
22729: PUSH
22730: LD_INT 33
22732: PUSH
22733: LD_INT 34
22735: PUSH
22736: LD_INT 36
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 101
22778: PUSH
22779: LD_INT 102
22781: PUSH
22782: LD_INT 103
22784: PUSH
22785: LD_INT 104
22787: PUSH
22788: LD_INT 105
22790: PUSH
22791: LD_INT 106
22793: PUSH
22794: LD_INT 107
22796: PUSH
22797: LD_INT 108
22799: PUSH
22800: LD_INT 109
22802: PUSH
22803: LD_INT 110
22805: PUSH
22806: LD_INT 111
22808: PUSH
22809: LD_INT 112
22811: PUSH
22812: LD_INT 113
22814: PUSH
22815: LD_INT 114
22817: PUSH
22818: LD_INT 116
22820: PUSH
22821: LD_INT 117
22823: PUSH
22824: LD_INT 118
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: ST_TO_ADDR
22850: GO 23625
22852: LD_INT 16
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 22996
22860: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22861: LD_ADDR_VAR 0 2
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: LD_INT 4
22871: PUSH
22872: LD_INT 5
22874: PUSH
22875: LD_INT 7
22877: PUSH
22878: LD_INT 11
22880: PUSH
22881: LD_INT 12
22883: PUSH
22884: LD_INT 15
22886: PUSH
22887: LD_INT 16
22889: PUSH
22890: LD_INT 20
22892: PUSH
22893: LD_INT 21
22895: PUSH
22896: LD_INT 22
22898: PUSH
22899: LD_INT 23
22901: PUSH
22902: LD_INT 25
22904: PUSH
22905: LD_INT 26
22907: PUSH
22908: LD_INT 30
22910: PUSH
22911: LD_INT 31
22913: PUSH
22914: LD_INT 32
22916: PUSH
22917: LD_INT 33
22919: PUSH
22920: LD_INT 34
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 101
22946: PUSH
22947: LD_INT 102
22949: PUSH
22950: LD_INT 103
22952: PUSH
22953: LD_INT 106
22955: PUSH
22956: LD_INT 108
22958: PUSH
22959: LD_INT 112
22961: PUSH
22962: LD_INT 113
22964: PUSH
22965: LD_INT 114
22967: PUSH
22968: LD_INT 116
22970: PUSH
22971: LD_INT 117
22973: PUSH
22974: LD_INT 118
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: ST_TO_ADDR
22994: GO 23625
22996: LD_INT 17
22998: DOUBLE
22999: EQUAL
23000: IFTRUE 23004
23002: GO 23228
23004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23005: LD_ADDR_VAR 0 2
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: LD_INT 3
23018: PUSH
23019: LD_INT 4
23021: PUSH
23022: LD_INT 5
23024: PUSH
23025: LD_INT 6
23027: PUSH
23028: LD_INT 7
23030: PUSH
23031: LD_INT 8
23033: PUSH
23034: LD_INT 9
23036: PUSH
23037: LD_INT 10
23039: PUSH
23040: LD_INT 11
23042: PUSH
23043: LD_INT 12
23045: PUSH
23046: LD_INT 13
23048: PUSH
23049: LD_INT 14
23051: PUSH
23052: LD_INT 15
23054: PUSH
23055: LD_INT 16
23057: PUSH
23058: LD_INT 17
23060: PUSH
23061: LD_INT 18
23063: PUSH
23064: LD_INT 19
23066: PUSH
23067: LD_INT 20
23069: PUSH
23070: LD_INT 21
23072: PUSH
23073: LD_INT 22
23075: PUSH
23076: LD_INT 23
23078: PUSH
23079: LD_INT 24
23081: PUSH
23082: LD_INT 25
23084: PUSH
23085: LD_INT 26
23087: PUSH
23088: LD_INT 27
23090: PUSH
23091: LD_INT 28
23093: PUSH
23094: LD_INT 29
23096: PUSH
23097: LD_INT 30
23099: PUSH
23100: LD_INT 31
23102: PUSH
23103: LD_INT 32
23105: PUSH
23106: LD_INT 33
23108: PUSH
23109: LD_INT 34
23111: PUSH
23112: LD_INT 36
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 101
23154: PUSH
23155: LD_INT 102
23157: PUSH
23158: LD_INT 103
23160: PUSH
23161: LD_INT 104
23163: PUSH
23164: LD_INT 105
23166: PUSH
23167: LD_INT 106
23169: PUSH
23170: LD_INT 107
23172: PUSH
23173: LD_INT 108
23175: PUSH
23176: LD_INT 109
23178: PUSH
23179: LD_INT 110
23181: PUSH
23182: LD_INT 111
23184: PUSH
23185: LD_INT 112
23187: PUSH
23188: LD_INT 113
23190: PUSH
23191: LD_INT 114
23193: PUSH
23194: LD_INT 116
23196: PUSH
23197: LD_INT 117
23199: PUSH
23200: LD_INT 118
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: ST_TO_ADDR
23226: GO 23625
23228: LD_INT 18
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23384
23236: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23237: LD_ADDR_VAR 0 2
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: LD_INT 4
23247: PUSH
23248: LD_INT 5
23250: PUSH
23251: LD_INT 7
23253: PUSH
23254: LD_INT 11
23256: PUSH
23257: LD_INT 12
23259: PUSH
23260: LD_INT 15
23262: PUSH
23263: LD_INT 16
23265: PUSH
23266: LD_INT 20
23268: PUSH
23269: LD_INT 21
23271: PUSH
23272: LD_INT 22
23274: PUSH
23275: LD_INT 23
23277: PUSH
23278: LD_INT 25
23280: PUSH
23281: LD_INT 26
23283: PUSH
23284: LD_INT 30
23286: PUSH
23287: LD_INT 31
23289: PUSH
23290: LD_INT 32
23292: PUSH
23293: LD_INT 33
23295: PUSH
23296: LD_INT 34
23298: PUSH
23299: LD_INT 35
23301: PUSH
23302: LD_INT 36
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 101
23330: PUSH
23331: LD_INT 102
23333: PUSH
23334: LD_INT 103
23336: PUSH
23337: LD_INT 106
23339: PUSH
23340: LD_INT 108
23342: PUSH
23343: LD_INT 112
23345: PUSH
23346: LD_INT 113
23348: PUSH
23349: LD_INT 114
23351: PUSH
23352: LD_INT 115
23354: PUSH
23355: LD_INT 116
23357: PUSH
23358: LD_INT 117
23360: PUSH
23361: LD_INT 118
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: ST_TO_ADDR
23382: GO 23625
23384: LD_INT 19
23386: DOUBLE
23387: EQUAL
23388: IFTRUE 23392
23390: GO 23624
23392: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: LD_INT 2
23403: PUSH
23404: LD_INT 3
23406: PUSH
23407: LD_INT 4
23409: PUSH
23410: LD_INT 5
23412: PUSH
23413: LD_INT 6
23415: PUSH
23416: LD_INT 7
23418: PUSH
23419: LD_INT 8
23421: PUSH
23422: LD_INT 9
23424: PUSH
23425: LD_INT 10
23427: PUSH
23428: LD_INT 11
23430: PUSH
23431: LD_INT 12
23433: PUSH
23434: LD_INT 13
23436: PUSH
23437: LD_INT 14
23439: PUSH
23440: LD_INT 15
23442: PUSH
23443: LD_INT 16
23445: PUSH
23446: LD_INT 17
23448: PUSH
23449: LD_INT 18
23451: PUSH
23452: LD_INT 19
23454: PUSH
23455: LD_INT 20
23457: PUSH
23458: LD_INT 21
23460: PUSH
23461: LD_INT 22
23463: PUSH
23464: LD_INT 23
23466: PUSH
23467: LD_INT 24
23469: PUSH
23470: LD_INT 25
23472: PUSH
23473: LD_INT 26
23475: PUSH
23476: LD_INT 27
23478: PUSH
23479: LD_INT 28
23481: PUSH
23482: LD_INT 29
23484: PUSH
23485: LD_INT 30
23487: PUSH
23488: LD_INT 31
23490: PUSH
23491: LD_INT 32
23493: PUSH
23494: LD_INT 33
23496: PUSH
23497: LD_INT 34
23499: PUSH
23500: LD_INT 35
23502: PUSH
23503: LD_INT 36
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 101
23546: PUSH
23547: LD_INT 102
23549: PUSH
23550: LD_INT 103
23552: PUSH
23553: LD_INT 104
23555: PUSH
23556: LD_INT 105
23558: PUSH
23559: LD_INT 106
23561: PUSH
23562: LD_INT 107
23564: PUSH
23565: LD_INT 108
23567: PUSH
23568: LD_INT 109
23570: PUSH
23571: LD_INT 110
23573: PUSH
23574: LD_INT 111
23576: PUSH
23577: LD_INT 112
23579: PUSH
23580: LD_INT 113
23582: PUSH
23583: LD_INT 114
23585: PUSH
23586: LD_INT 115
23588: PUSH
23589: LD_INT 116
23591: PUSH
23592: LD_INT 117
23594: PUSH
23595: LD_INT 118
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: ST_TO_ADDR
23622: GO 23625
23624: POP
// end else
23625: GO 23856
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23627: LD_ADDR_VAR 0 2
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: LD_INT 3
23640: PUSH
23641: LD_INT 4
23643: PUSH
23644: LD_INT 5
23646: PUSH
23647: LD_INT 6
23649: PUSH
23650: LD_INT 7
23652: PUSH
23653: LD_INT 8
23655: PUSH
23656: LD_INT 9
23658: PUSH
23659: LD_INT 10
23661: PUSH
23662: LD_INT 11
23664: PUSH
23665: LD_INT 12
23667: PUSH
23668: LD_INT 13
23670: PUSH
23671: LD_INT 14
23673: PUSH
23674: LD_INT 15
23676: PUSH
23677: LD_INT 16
23679: PUSH
23680: LD_INT 17
23682: PUSH
23683: LD_INT 18
23685: PUSH
23686: LD_INT 19
23688: PUSH
23689: LD_INT 20
23691: PUSH
23692: LD_INT 21
23694: PUSH
23695: LD_INT 22
23697: PUSH
23698: LD_INT 23
23700: PUSH
23701: LD_INT 24
23703: PUSH
23704: LD_INT 25
23706: PUSH
23707: LD_INT 26
23709: PUSH
23710: LD_INT 27
23712: PUSH
23713: LD_INT 28
23715: PUSH
23716: LD_INT 29
23718: PUSH
23719: LD_INT 30
23721: PUSH
23722: LD_INT 31
23724: PUSH
23725: LD_INT 32
23727: PUSH
23728: LD_INT 33
23730: PUSH
23731: LD_INT 34
23733: PUSH
23734: LD_INT 35
23736: PUSH
23737: LD_INT 36
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 101
23780: PUSH
23781: LD_INT 102
23783: PUSH
23784: LD_INT 103
23786: PUSH
23787: LD_INT 104
23789: PUSH
23790: LD_INT 105
23792: PUSH
23793: LD_INT 106
23795: PUSH
23796: LD_INT 107
23798: PUSH
23799: LD_INT 108
23801: PUSH
23802: LD_INT 109
23804: PUSH
23805: LD_INT 110
23807: PUSH
23808: LD_INT 111
23810: PUSH
23811: LD_INT 112
23813: PUSH
23814: LD_INT 113
23816: PUSH
23817: LD_INT 114
23819: PUSH
23820: LD_INT 115
23822: PUSH
23823: LD_INT 116
23825: PUSH
23826: LD_INT 117
23828: PUSH
23829: LD_INT 118
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: ST_TO_ADDR
// if result then
23856: LD_VAR 0 2
23860: IFFALSE 24646
// begin normal :=  ;
23862: LD_ADDR_VAR 0 5
23866: PUSH
23867: LD_STRING 
23869: ST_TO_ADDR
// hardcore :=  ;
23870: LD_ADDR_VAR 0 6
23874: PUSH
23875: LD_STRING 
23877: ST_TO_ADDR
// active :=  ;
23878: LD_ADDR_VAR 0 7
23882: PUSH
23883: LD_STRING 
23885: ST_TO_ADDR
// for i = 1 to normalCounter do
23886: LD_ADDR_VAR 0 8
23890: PUSH
23891: DOUBLE
23892: LD_INT 1
23894: DEC
23895: ST_TO_ADDR
23896: LD_EXP 44
23900: PUSH
23901: FOR_TO
23902: IFFALSE 24003
// begin tmp := 0 ;
23904: LD_ADDR_VAR 0 3
23908: PUSH
23909: LD_STRING 0
23911: ST_TO_ADDR
// if result [ 1 ] then
23912: LD_VAR 0 2
23916: PUSH
23917: LD_INT 1
23919: ARRAY
23920: IFFALSE 23985
// if result [ 1 ] [ 1 ] = i then
23922: LD_VAR 0 2
23926: PUSH
23927: LD_INT 1
23929: ARRAY
23930: PUSH
23931: LD_INT 1
23933: ARRAY
23934: PUSH
23935: LD_VAR 0 8
23939: EQUAL
23940: IFFALSE 23985
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23942: LD_ADDR_VAR 0 2
23946: PUSH
23947: LD_VAR 0 2
23951: PPUSH
23952: LD_INT 1
23954: PPUSH
23955: LD_VAR 0 2
23959: PUSH
23960: LD_INT 1
23962: ARRAY
23963: PPUSH
23964: LD_INT 1
23966: PPUSH
23967: CALL_OW 3
23971: PPUSH
23972: CALL_OW 1
23976: ST_TO_ADDR
// tmp := 1 ;
23977: LD_ADDR_VAR 0 3
23981: PUSH
23982: LD_STRING 1
23984: ST_TO_ADDR
// end ; normal := normal & tmp ;
23985: LD_ADDR_VAR 0 5
23989: PUSH
23990: LD_VAR 0 5
23994: PUSH
23995: LD_VAR 0 3
23999: STR
24000: ST_TO_ADDR
// end ;
24001: GO 23901
24003: POP
24004: POP
// for i = 1 to hardcoreCounter do
24005: LD_ADDR_VAR 0 8
24009: PUSH
24010: DOUBLE
24011: LD_INT 1
24013: DEC
24014: ST_TO_ADDR
24015: LD_EXP 45
24019: PUSH
24020: FOR_TO
24021: IFFALSE 24126
// begin tmp := 0 ;
24023: LD_ADDR_VAR 0 3
24027: PUSH
24028: LD_STRING 0
24030: ST_TO_ADDR
// if result [ 2 ] then
24031: LD_VAR 0 2
24035: PUSH
24036: LD_INT 2
24038: ARRAY
24039: IFFALSE 24108
// if result [ 2 ] [ 1 ] = 100 + i then
24041: LD_VAR 0 2
24045: PUSH
24046: LD_INT 2
24048: ARRAY
24049: PUSH
24050: LD_INT 1
24052: ARRAY
24053: PUSH
24054: LD_INT 100
24056: PUSH
24057: LD_VAR 0 8
24061: PLUS
24062: EQUAL
24063: IFFALSE 24108
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24065: LD_ADDR_VAR 0 2
24069: PUSH
24070: LD_VAR 0 2
24074: PPUSH
24075: LD_INT 2
24077: PPUSH
24078: LD_VAR 0 2
24082: PUSH
24083: LD_INT 2
24085: ARRAY
24086: PPUSH
24087: LD_INT 1
24089: PPUSH
24090: CALL_OW 3
24094: PPUSH
24095: CALL_OW 1
24099: ST_TO_ADDR
// tmp := 1 ;
24100: LD_ADDR_VAR 0 3
24104: PUSH
24105: LD_STRING 1
24107: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24108: LD_ADDR_VAR 0 6
24112: PUSH
24113: LD_VAR 0 6
24117: PUSH
24118: LD_VAR 0 3
24122: STR
24123: ST_TO_ADDR
// end ;
24124: GO 24020
24126: POP
24127: POP
// if isGameLoad then
24128: LD_VAR 0 1
24132: IFFALSE 24607
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24134: LD_ADDR_VAR 0 4
24138: PUSH
24139: LD_EXP 48
24143: PUSH
24144: LD_EXP 47
24148: PUSH
24149: LD_EXP 49
24153: PUSH
24154: LD_EXP 46
24158: PUSH
24159: LD_EXP 50
24163: PUSH
24164: LD_EXP 51
24168: PUSH
24169: LD_EXP 52
24173: PUSH
24174: LD_EXP 53
24178: PUSH
24179: LD_EXP 54
24183: PUSH
24184: LD_EXP 55
24188: PUSH
24189: LD_EXP 56
24193: PUSH
24194: LD_EXP 57
24198: PUSH
24199: LD_EXP 58
24203: PUSH
24204: LD_EXP 59
24208: PUSH
24209: LD_EXP 67
24213: PUSH
24214: LD_EXP 68
24218: PUSH
24219: LD_EXP 69
24223: PUSH
24224: LD_EXP 70
24228: PUSH
24229: LD_EXP 72
24233: PUSH
24234: LD_EXP 73
24238: PUSH
24239: LD_EXP 74
24243: PUSH
24244: LD_EXP 77
24248: PUSH
24249: LD_EXP 79
24253: PUSH
24254: LD_EXP 80
24258: PUSH
24259: LD_EXP 81
24263: PUSH
24264: LD_EXP 83
24268: PUSH
24269: LD_EXP 84
24273: PUSH
24274: LD_EXP 87
24278: PUSH
24279: LD_EXP 88
24283: PUSH
24284: LD_EXP 89
24288: PUSH
24289: LD_EXP 90
24293: PUSH
24294: LD_EXP 91
24298: PUSH
24299: LD_EXP 92
24303: PUSH
24304: LD_EXP 93
24308: PUSH
24309: LD_EXP 94
24313: PUSH
24314: LD_EXP 95
24318: PUSH
24319: LD_EXP 60
24323: PUSH
24324: LD_EXP 61
24328: PUSH
24329: LD_EXP 64
24333: PUSH
24334: LD_EXP 65
24338: PUSH
24339: LD_EXP 66
24343: PUSH
24344: LD_EXP 62
24348: PUSH
24349: LD_EXP 63
24353: PUSH
24354: LD_EXP 71
24358: PUSH
24359: LD_EXP 75
24363: PUSH
24364: LD_EXP 76
24368: PUSH
24369: LD_EXP 78
24373: PUSH
24374: LD_EXP 82
24378: PUSH
24379: LD_EXP 85
24383: PUSH
24384: LD_EXP 86
24388: PUSH
24389: LD_EXP 96
24393: PUSH
24394: LD_EXP 97
24398: PUSH
24399: LD_EXP 98
24403: PUSH
24404: LD_EXP 99
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: ST_TO_ADDR
// tmp :=  ;
24465: LD_ADDR_VAR 0 3
24469: PUSH
24470: LD_STRING 
24472: ST_TO_ADDR
// for i = 1 to normalCounter do
24473: LD_ADDR_VAR 0 8
24477: PUSH
24478: DOUBLE
24479: LD_INT 1
24481: DEC
24482: ST_TO_ADDR
24483: LD_EXP 44
24487: PUSH
24488: FOR_TO
24489: IFFALSE 24525
// begin if flags [ i ] then
24491: LD_VAR 0 4
24495: PUSH
24496: LD_VAR 0 8
24500: ARRAY
24501: IFFALSE 24523
// tmp := tmp & i & ; ;
24503: LD_ADDR_VAR 0 3
24507: PUSH
24508: LD_VAR 0 3
24512: PUSH
24513: LD_VAR 0 8
24517: STR
24518: PUSH
24519: LD_STRING ;
24521: STR
24522: ST_TO_ADDR
// end ;
24523: GO 24488
24525: POP
24526: POP
// for i = 1 to hardcoreCounter do
24527: LD_ADDR_VAR 0 8
24531: PUSH
24532: DOUBLE
24533: LD_INT 1
24535: DEC
24536: ST_TO_ADDR
24537: LD_EXP 45
24541: PUSH
24542: FOR_TO
24543: IFFALSE 24589
// begin if flags [ normalCounter + i ] then
24545: LD_VAR 0 4
24549: PUSH
24550: LD_EXP 44
24554: PUSH
24555: LD_VAR 0 8
24559: PLUS
24560: ARRAY
24561: IFFALSE 24587
// tmp := tmp & ( 100 + i ) & ; ;
24563: LD_ADDR_VAR 0 3
24567: PUSH
24568: LD_VAR 0 3
24572: PUSH
24573: LD_INT 100
24575: PUSH
24576: LD_VAR 0 8
24580: PLUS
24581: STR
24582: PUSH
24583: LD_STRING ;
24585: STR
24586: ST_TO_ADDR
// end ;
24587: GO 24542
24589: POP
24590: POP
// if tmp then
24591: LD_VAR 0 3
24595: IFFALSE 24607
// active := tmp ;
24597: LD_ADDR_VAR 0 7
24601: PUSH
24602: LD_VAR 0 3
24606: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24607: LD_STRING getStreamItemsFromMission("
24609: PUSH
24610: LD_VAR 0 5
24614: STR
24615: PUSH
24616: LD_STRING ","
24618: STR
24619: PUSH
24620: LD_VAR 0 6
24624: STR
24625: PUSH
24626: LD_STRING ","
24628: STR
24629: PUSH
24630: LD_VAR 0 7
24634: STR
24635: PUSH
24636: LD_STRING ")
24638: STR
24639: PPUSH
24640: CALL_OW 559
// end else
24644: GO 24653
// ToLua ( getStreamItemsFromMission("","","") ) ;
24646: LD_STRING getStreamItemsFromMission("","","")
24648: PPUSH
24649: CALL_OW 559
// end ;
24653: LD_VAR 0 2
24657: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24658: LD_EXP 43
24662: PUSH
24663: LD_EXP 48
24667: AND
24668: IFFALSE 24792
24670: GO 24672
24672: DISABLE
24673: LD_INT 0
24675: PPUSH
24676: PPUSH
// begin enable ;
24677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24678: LD_ADDR_VAR 0 2
24682: PUSH
24683: LD_INT 22
24685: PUSH
24686: LD_OWVAR 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: LD_INT 34
24700: PUSH
24701: LD_INT 7
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 34
24710: PUSH
24711: LD_INT 45
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 34
24720: PUSH
24721: LD_INT 28
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 34
24730: PUSH
24731: LD_INT 47
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PPUSH
24749: CALL_OW 69
24753: ST_TO_ADDR
// if not tmp then
24754: LD_VAR 0 2
24758: NOT
24759: IFFALSE 24763
// exit ;
24761: GO 24792
// for i in tmp do
24763: LD_ADDR_VAR 0 1
24767: PUSH
24768: LD_VAR 0 2
24772: PUSH
24773: FOR_IN
24774: IFFALSE 24790
// begin SetLives ( i , 0 ) ;
24776: LD_VAR 0 1
24780: PPUSH
24781: LD_INT 0
24783: PPUSH
24784: CALL_OW 234
// end ;
24788: GO 24773
24790: POP
24791: POP
// end ;
24792: PPOPN 2
24794: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24795: LD_EXP 43
24799: PUSH
24800: LD_EXP 49
24804: AND
24805: IFFALSE 24889
24807: GO 24809
24809: DISABLE
24810: LD_INT 0
24812: PPUSH
24813: PPUSH
// begin enable ;
24814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24815: LD_ADDR_VAR 0 2
24819: PUSH
24820: LD_INT 22
24822: PUSH
24823: LD_OWVAR 2
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 32
24834: PUSH
24835: LD_INT 3
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PPUSH
24846: CALL_OW 69
24850: ST_TO_ADDR
// if not tmp then
24851: LD_VAR 0 2
24855: NOT
24856: IFFALSE 24860
// exit ;
24858: GO 24889
// for i in tmp do
24860: LD_ADDR_VAR 0 1
24864: PUSH
24865: LD_VAR 0 2
24869: PUSH
24870: FOR_IN
24871: IFFALSE 24887
// begin SetLives ( i , 0 ) ;
24873: LD_VAR 0 1
24877: PPUSH
24878: LD_INT 0
24880: PPUSH
24881: CALL_OW 234
// end ;
24885: GO 24870
24887: POP
24888: POP
// end ;
24889: PPOPN 2
24891: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24892: LD_EXP 43
24896: PUSH
24897: LD_EXP 46
24901: AND
24902: IFFALSE 24995
24904: GO 24906
24906: DISABLE
24907: LD_INT 0
24909: PPUSH
// begin enable ;
24910: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24911: LD_ADDR_VAR 0 1
24915: PUSH
24916: LD_INT 22
24918: PUSH
24919: LD_OWVAR 2
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: PUSH
24931: LD_INT 25
24933: PUSH
24934: LD_INT 5
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 25
24943: PUSH
24944: LD_INT 9
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 25
24953: PUSH
24954: LD_INT 8
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PPUSH
24971: CALL_OW 69
24975: PUSH
24976: FOR_IN
24977: IFFALSE 24993
// begin SetClass ( i , 1 ) ;
24979: LD_VAR 0 1
24983: PPUSH
24984: LD_INT 1
24986: PPUSH
24987: CALL_OW 336
// end ;
24991: GO 24976
24993: POP
24994: POP
// end ;
24995: PPOPN 1
24997: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24998: LD_EXP 43
25002: PUSH
25003: LD_EXP 47
25007: AND
25008: PUSH
25009: LD_OWVAR 65
25013: PUSH
25014: LD_INT 7
25016: LESS
25017: AND
25018: IFFALSE 25032
25020: GO 25022
25022: DISABLE
// begin enable ;
25023: ENABLE
// game_speed := 7 ;
25024: LD_ADDR_OWVAR 65
25028: PUSH
25029: LD_INT 7
25031: ST_TO_ADDR
// end ;
25032: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25033: LD_EXP 43
25037: PUSH
25038: LD_EXP 50
25042: AND
25043: IFFALSE 25245
25045: GO 25047
25047: DISABLE
25048: LD_INT 0
25050: PPUSH
25051: PPUSH
25052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: LD_INT 81
25060: PUSH
25061: LD_OWVAR 2
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 21
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PPUSH
25084: CALL_OW 69
25088: ST_TO_ADDR
// if not tmp then
25089: LD_VAR 0 3
25093: NOT
25094: IFFALSE 25098
// exit ;
25096: GO 25245
// if tmp > 5 then
25098: LD_VAR 0 3
25102: PUSH
25103: LD_INT 5
25105: GREATER
25106: IFFALSE 25118
// k := 5 else
25108: LD_ADDR_VAR 0 2
25112: PUSH
25113: LD_INT 5
25115: ST_TO_ADDR
25116: GO 25128
// k := tmp ;
25118: LD_ADDR_VAR 0 2
25122: PUSH
25123: LD_VAR 0 3
25127: ST_TO_ADDR
// for i := 1 to k do
25128: LD_ADDR_VAR 0 1
25132: PUSH
25133: DOUBLE
25134: LD_INT 1
25136: DEC
25137: ST_TO_ADDR
25138: LD_VAR 0 2
25142: PUSH
25143: FOR_TO
25144: IFFALSE 25243
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25146: LD_VAR 0 3
25150: PUSH
25151: LD_VAR 0 1
25155: ARRAY
25156: PPUSH
25157: LD_VAR 0 1
25161: PUSH
25162: LD_INT 4
25164: MOD
25165: PUSH
25166: LD_INT 1
25168: PLUS
25169: PPUSH
25170: CALL_OW 259
25174: PUSH
25175: LD_INT 10
25177: LESS
25178: IFFALSE 25241
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25180: LD_VAR 0 3
25184: PUSH
25185: LD_VAR 0 1
25189: ARRAY
25190: PPUSH
25191: LD_VAR 0 1
25195: PUSH
25196: LD_INT 4
25198: MOD
25199: PUSH
25200: LD_INT 1
25202: PLUS
25203: PPUSH
25204: LD_VAR 0 3
25208: PUSH
25209: LD_VAR 0 1
25213: ARRAY
25214: PPUSH
25215: LD_VAR 0 1
25219: PUSH
25220: LD_INT 4
25222: MOD
25223: PUSH
25224: LD_INT 1
25226: PLUS
25227: PPUSH
25228: CALL_OW 259
25232: PUSH
25233: LD_INT 1
25235: PLUS
25236: PPUSH
25237: CALL_OW 237
25241: GO 25143
25243: POP
25244: POP
// end ;
25245: PPOPN 3
25247: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25248: LD_EXP 43
25252: PUSH
25253: LD_EXP 51
25257: AND
25258: IFFALSE 25278
25260: GO 25262
25262: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25263: LD_INT 4
25265: PPUSH
25266: LD_OWVAR 2
25270: PPUSH
25271: LD_INT 0
25273: PPUSH
25274: CALL_OW 324
25278: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25279: LD_EXP 43
25283: PUSH
25284: LD_EXP 80
25288: AND
25289: IFFALSE 25309
25291: GO 25293
25293: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25294: LD_INT 19
25296: PPUSH
25297: LD_OWVAR 2
25301: PPUSH
25302: LD_INT 0
25304: PPUSH
25305: CALL_OW 324
25309: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25310: LD_EXP 43
25314: PUSH
25315: LD_EXP 52
25319: AND
25320: IFFALSE 25422
25322: GO 25324
25324: DISABLE
25325: LD_INT 0
25327: PPUSH
25328: PPUSH
// begin enable ;
25329: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25330: LD_ADDR_VAR 0 2
25334: PUSH
25335: LD_INT 22
25337: PUSH
25338: LD_OWVAR 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: LD_INT 34
25352: PUSH
25353: LD_INT 11
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 34
25362: PUSH
25363: LD_INT 30
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: LIST
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PPUSH
25379: CALL_OW 69
25383: ST_TO_ADDR
// if not tmp then
25384: LD_VAR 0 2
25388: NOT
25389: IFFALSE 25393
// exit ;
25391: GO 25422
// for i in tmp do
25393: LD_ADDR_VAR 0 1
25397: PUSH
25398: LD_VAR 0 2
25402: PUSH
25403: FOR_IN
25404: IFFALSE 25420
// begin SetLives ( i , 0 ) ;
25406: LD_VAR 0 1
25410: PPUSH
25411: LD_INT 0
25413: PPUSH
25414: CALL_OW 234
// end ;
25418: GO 25403
25420: POP
25421: POP
// end ;
25422: PPOPN 2
25424: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25425: LD_EXP 43
25429: PUSH
25430: LD_EXP 53
25434: AND
25435: IFFALSE 25455
25437: GO 25439
25439: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25440: LD_INT 32
25442: PPUSH
25443: LD_OWVAR 2
25447: PPUSH
25448: LD_INT 0
25450: PPUSH
25451: CALL_OW 324
25455: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25456: LD_EXP 43
25460: PUSH
25461: LD_EXP 54
25465: AND
25466: IFFALSE 25647
25468: GO 25470
25470: DISABLE
25471: LD_INT 0
25473: PPUSH
25474: PPUSH
25475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25476: LD_ADDR_VAR 0 2
25480: PUSH
25481: LD_INT 22
25483: PUSH
25484: LD_OWVAR 2
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 33
25495: PUSH
25496: LD_INT 3
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PPUSH
25507: CALL_OW 69
25511: ST_TO_ADDR
// if not tmp then
25512: LD_VAR 0 2
25516: NOT
25517: IFFALSE 25521
// exit ;
25519: GO 25647
// side := 0 ;
25521: LD_ADDR_VAR 0 3
25525: PUSH
25526: LD_INT 0
25528: ST_TO_ADDR
// for i := 1 to 8 do
25529: LD_ADDR_VAR 0 1
25533: PUSH
25534: DOUBLE
25535: LD_INT 1
25537: DEC
25538: ST_TO_ADDR
25539: LD_INT 8
25541: PUSH
25542: FOR_TO
25543: IFFALSE 25591
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25545: LD_OWVAR 2
25549: PUSH
25550: LD_VAR 0 1
25554: NONEQUAL
25555: PUSH
25556: LD_OWVAR 2
25560: PPUSH
25561: LD_VAR 0 1
25565: PPUSH
25566: CALL_OW 81
25570: PUSH
25571: LD_INT 2
25573: EQUAL
25574: AND
25575: IFFALSE 25589
// begin side := i ;
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_VAR 0 1
25586: ST_TO_ADDR
// break ;
25587: GO 25591
// end ;
25589: GO 25542
25591: POP
25592: POP
// if not side then
25593: LD_VAR 0 3
25597: NOT
25598: IFFALSE 25602
// exit ;
25600: GO 25647
// for i := 1 to tmp do
25602: LD_ADDR_VAR 0 1
25606: PUSH
25607: DOUBLE
25608: LD_INT 1
25610: DEC
25611: ST_TO_ADDR
25612: LD_VAR 0 2
25616: PUSH
25617: FOR_TO
25618: IFFALSE 25645
// if Prob ( 60 ) then
25620: LD_INT 60
25622: PPUSH
25623: CALL_OW 13
25627: IFFALSE 25643
// SetSide ( i , side ) ;
25629: LD_VAR 0 1
25633: PPUSH
25634: LD_VAR 0 3
25638: PPUSH
25639: CALL_OW 235
25643: GO 25617
25645: POP
25646: POP
// end ;
25647: PPOPN 3
25649: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25650: LD_EXP 43
25654: PUSH
25655: LD_EXP 56
25659: AND
25660: IFFALSE 25779
25662: GO 25664
25664: DISABLE
25665: LD_INT 0
25667: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25668: LD_ADDR_VAR 0 1
25672: PUSH
25673: LD_INT 22
25675: PUSH
25676: LD_OWVAR 2
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 21
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 3
25697: PUSH
25698: LD_INT 23
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: PPUSH
25717: CALL_OW 69
25721: PUSH
25722: FOR_IN
25723: IFFALSE 25777
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25725: LD_VAR 0 1
25729: PPUSH
25730: CALL_OW 257
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: LD_INT 3
25743: PUSH
25744: LD_INT 4
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: IN
25753: IFFALSE 25775
// SetClass ( un , rand ( 1 , 4 ) ) ;
25755: LD_VAR 0 1
25759: PPUSH
25760: LD_INT 1
25762: PPUSH
25763: LD_INT 4
25765: PPUSH
25766: CALL_OW 12
25770: PPUSH
25771: CALL_OW 336
25775: GO 25722
25777: POP
25778: POP
// end ;
25779: PPOPN 1
25781: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25782: LD_EXP 43
25786: PUSH
25787: LD_EXP 55
25791: AND
25792: IFFALSE 25871
25794: GO 25796
25796: DISABLE
25797: LD_INT 0
25799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25800: LD_ADDR_VAR 0 1
25804: PUSH
25805: LD_INT 22
25807: PUSH
25808: LD_OWVAR 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 21
25819: PUSH
25820: LD_INT 3
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PPUSH
25831: CALL_OW 69
25835: ST_TO_ADDR
// if not tmp then
25836: LD_VAR 0 1
25840: NOT
25841: IFFALSE 25845
// exit ;
25843: GO 25871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25845: LD_VAR 0 1
25849: PUSH
25850: LD_INT 1
25852: PPUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 12
25862: ARRAY
25863: PPUSH
25864: LD_INT 100
25866: PPUSH
25867: CALL_OW 234
// end ;
25871: PPOPN 1
25873: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25874: LD_EXP 43
25878: PUSH
25879: LD_EXP 57
25883: AND
25884: IFFALSE 25982
25886: GO 25888
25888: DISABLE
25889: LD_INT 0
25891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25892: LD_ADDR_VAR 0 1
25896: PUSH
25897: LD_INT 22
25899: PUSH
25900: LD_OWVAR 2
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 21
25911: PUSH
25912: LD_INT 1
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PPUSH
25923: CALL_OW 69
25927: ST_TO_ADDR
// if not tmp then
25928: LD_VAR 0 1
25932: NOT
25933: IFFALSE 25937
// exit ;
25935: GO 25982
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25937: LD_VAR 0 1
25941: PUSH
25942: LD_INT 1
25944: PPUSH
25945: LD_VAR 0 1
25949: PPUSH
25950: CALL_OW 12
25954: ARRAY
25955: PPUSH
25956: LD_INT 1
25958: PPUSH
25959: LD_INT 4
25961: PPUSH
25962: CALL_OW 12
25966: PPUSH
25967: LD_INT 3000
25969: PPUSH
25970: LD_INT 9000
25972: PPUSH
25973: CALL_OW 12
25977: PPUSH
25978: CALL_OW 492
// end ;
25982: PPOPN 1
25984: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25985: LD_EXP 43
25989: PUSH
25990: LD_EXP 58
25994: AND
25995: IFFALSE 26015
25997: GO 25999
25999: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26000: LD_INT 1
26002: PPUSH
26003: LD_OWVAR 2
26007: PPUSH
26008: LD_INT 0
26010: PPUSH
26011: CALL_OW 324
26015: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26016: LD_EXP 43
26020: PUSH
26021: LD_EXP 59
26025: AND
26026: IFFALSE 26109
26028: GO 26030
26030: DISABLE
26031: LD_INT 0
26033: PPUSH
26034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26035: LD_ADDR_VAR 0 2
26039: PUSH
26040: LD_INT 22
26042: PUSH
26043: LD_OWVAR 2
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 21
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PPUSH
26066: CALL_OW 69
26070: ST_TO_ADDR
// if not tmp then
26071: LD_VAR 0 2
26075: NOT
26076: IFFALSE 26080
// exit ;
26078: GO 26109
// for i in tmp do
26080: LD_ADDR_VAR 0 1
26084: PUSH
26085: LD_VAR 0 2
26089: PUSH
26090: FOR_IN
26091: IFFALSE 26107
// SetBLevel ( i , 10 ) ;
26093: LD_VAR 0 1
26097: PPUSH
26098: LD_INT 10
26100: PPUSH
26101: CALL_OW 241
26105: GO 26090
26107: POP
26108: POP
// end ;
26109: PPOPN 2
26111: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26112: LD_EXP 43
26116: PUSH
26117: LD_EXP 60
26121: AND
26122: IFFALSE 26233
26124: GO 26126
26126: DISABLE
26127: LD_INT 0
26129: PPUSH
26130: PPUSH
26131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26132: LD_ADDR_VAR 0 3
26136: PUSH
26137: LD_INT 22
26139: PUSH
26140: LD_OWVAR 2
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 25
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PPUSH
26163: CALL_OW 69
26167: ST_TO_ADDR
// if not tmp then
26168: LD_VAR 0 3
26172: NOT
26173: IFFALSE 26177
// exit ;
26175: GO 26233
// un := tmp [ rand ( 1 , tmp ) ] ;
26177: LD_ADDR_VAR 0 2
26181: PUSH
26182: LD_VAR 0 3
26186: PUSH
26187: LD_INT 1
26189: PPUSH
26190: LD_VAR 0 3
26194: PPUSH
26195: CALL_OW 12
26199: ARRAY
26200: ST_TO_ADDR
// if Crawls ( un ) then
26201: LD_VAR 0 2
26205: PPUSH
26206: CALL_OW 318
26210: IFFALSE 26221
// ComWalk ( un ) ;
26212: LD_VAR 0 2
26216: PPUSH
26217: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26221: LD_VAR 0 2
26225: PPUSH
26226: LD_INT 5
26228: PPUSH
26229: CALL_OW 336
// end ;
26233: PPOPN 3
26235: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26236: LD_EXP 43
26240: PUSH
26241: LD_EXP 61
26245: AND
26246: PUSH
26247: LD_OWVAR 67
26251: PUSH
26252: LD_INT 4
26254: LESS
26255: AND
26256: IFFALSE 26275
26258: GO 26260
26260: DISABLE
// begin Difficulty := Difficulty + 1 ;
26261: LD_ADDR_OWVAR 67
26265: PUSH
26266: LD_OWVAR 67
26270: PUSH
26271: LD_INT 1
26273: PLUS
26274: ST_TO_ADDR
// end ;
26275: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26276: LD_EXP 43
26280: PUSH
26281: LD_EXP 62
26285: AND
26286: IFFALSE 26389
26288: GO 26290
26290: DISABLE
26291: LD_INT 0
26293: PPUSH
// begin for i := 1 to 5 do
26294: LD_ADDR_VAR 0 1
26298: PUSH
26299: DOUBLE
26300: LD_INT 1
26302: DEC
26303: ST_TO_ADDR
26304: LD_INT 5
26306: PUSH
26307: FOR_TO
26308: IFFALSE 26387
// begin uc_nation := nation_nature ;
26310: LD_ADDR_OWVAR 21
26314: PUSH
26315: LD_INT 0
26317: ST_TO_ADDR
// uc_side := 0 ;
26318: LD_ADDR_OWVAR 20
26322: PUSH
26323: LD_INT 0
26325: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26326: LD_ADDR_OWVAR 29
26330: PUSH
26331: LD_INT 12
26333: PUSH
26334: LD_INT 12
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: ST_TO_ADDR
// hc_agressivity := 20 ;
26341: LD_ADDR_OWVAR 35
26345: PUSH
26346: LD_INT 20
26348: ST_TO_ADDR
// hc_class := class_tiger ;
26349: LD_ADDR_OWVAR 28
26353: PUSH
26354: LD_INT 14
26356: ST_TO_ADDR
// hc_gallery :=  ;
26357: LD_ADDR_OWVAR 33
26361: PUSH
26362: LD_STRING 
26364: ST_TO_ADDR
// hc_name :=  ;
26365: LD_ADDR_OWVAR 26
26369: PUSH
26370: LD_STRING 
26372: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26373: CALL_OW 44
26377: PPUSH
26378: LD_INT 0
26380: PPUSH
26381: CALL_OW 51
// end ;
26385: GO 26307
26387: POP
26388: POP
// end ;
26389: PPOPN 1
26391: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26392: LD_EXP 43
26396: PUSH
26397: LD_EXP 63
26401: AND
26402: IFFALSE 26411
26404: GO 26406
26406: DISABLE
// StreamSibBomb ;
26407: CALL 26412 0 0
26411: END
// export function StreamSibBomb ; var i , x , y ; begin
26412: LD_INT 0
26414: PPUSH
26415: PPUSH
26416: PPUSH
26417: PPUSH
// result := false ;
26418: LD_ADDR_VAR 0 1
26422: PUSH
26423: LD_INT 0
26425: ST_TO_ADDR
// for i := 1 to 16 do
26426: LD_ADDR_VAR 0 2
26430: PUSH
26431: DOUBLE
26432: LD_INT 1
26434: DEC
26435: ST_TO_ADDR
26436: LD_INT 16
26438: PUSH
26439: FOR_TO
26440: IFFALSE 26639
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26442: LD_ADDR_VAR 0 3
26446: PUSH
26447: LD_INT 10
26449: PUSH
26450: LD_INT 20
26452: PUSH
26453: LD_INT 30
26455: PUSH
26456: LD_INT 40
26458: PUSH
26459: LD_INT 50
26461: PUSH
26462: LD_INT 60
26464: PUSH
26465: LD_INT 70
26467: PUSH
26468: LD_INT 80
26470: PUSH
26471: LD_INT 90
26473: PUSH
26474: LD_INT 100
26476: PUSH
26477: LD_INT 110
26479: PUSH
26480: LD_INT 120
26482: PUSH
26483: LD_INT 130
26485: PUSH
26486: LD_INT 140
26488: PUSH
26489: LD_INT 150
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: PPUSH
26512: LD_INT 15
26514: PPUSH
26515: CALL_OW 12
26519: ARRAY
26520: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26521: LD_ADDR_VAR 0 4
26525: PUSH
26526: LD_INT 10
26528: PUSH
26529: LD_INT 20
26531: PUSH
26532: LD_INT 30
26534: PUSH
26535: LD_INT 40
26537: PUSH
26538: LD_INT 50
26540: PUSH
26541: LD_INT 60
26543: PUSH
26544: LD_INT 70
26546: PUSH
26547: LD_INT 80
26549: PUSH
26550: LD_INT 90
26552: PUSH
26553: LD_INT 100
26555: PUSH
26556: LD_INT 110
26558: PUSH
26559: LD_INT 120
26561: PUSH
26562: LD_INT 130
26564: PUSH
26565: LD_INT 140
26567: PUSH
26568: LD_INT 150
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 1
26590: PPUSH
26591: LD_INT 15
26593: PPUSH
26594: CALL_OW 12
26598: ARRAY
26599: ST_TO_ADDR
// if ValidHex ( x , y ) then
26600: LD_VAR 0 3
26604: PPUSH
26605: LD_VAR 0 4
26609: PPUSH
26610: CALL_OW 488
26614: IFFALSE 26637
// begin result := [ x , y ] ;
26616: LD_ADDR_VAR 0 1
26620: PUSH
26621: LD_VAR 0 3
26625: PUSH
26626: LD_VAR 0 4
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: ST_TO_ADDR
// break ;
26635: GO 26639
// end ; end ;
26637: GO 26439
26639: POP
26640: POP
// if result then
26641: LD_VAR 0 1
26645: IFFALSE 26705
// begin ToLua ( playSibBomb() ) ;
26647: LD_STRING playSibBomb()
26649: PPUSH
26650: CALL_OW 559
// wait ( 0 0$14 ) ;
26654: LD_INT 490
26656: PPUSH
26657: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26661: LD_VAR 0 1
26665: PUSH
26666: LD_INT 1
26668: ARRAY
26669: PPUSH
26670: LD_VAR 0 1
26674: PUSH
26675: LD_INT 2
26677: ARRAY
26678: PPUSH
26679: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26683: LD_VAR 0 1
26687: PUSH
26688: LD_INT 1
26690: ARRAY
26691: PPUSH
26692: LD_VAR 0 1
26696: PUSH
26697: LD_INT 2
26699: ARRAY
26700: PPUSH
26701: CALL_OW 429
// end ; end ;
26705: LD_VAR 0 1
26709: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26710: LD_EXP 43
26714: PUSH
26715: LD_EXP 65
26719: AND
26720: IFFALSE 26732
26722: GO 26724
26724: DISABLE
// YouLost (  ) ;
26725: LD_STRING 
26727: PPUSH
26728: CALL_OW 104
26732: END
// every 0 0$1 trigger StreamModeActive and sFog do
26733: LD_EXP 43
26737: PUSH
26738: LD_EXP 64
26742: AND
26743: IFFALSE 26757
26745: GO 26747
26747: DISABLE
// FogOff ( your_side ) ;
26748: LD_OWVAR 2
26752: PPUSH
26753: CALL_OW 344
26757: END
// every 0 0$1 trigger StreamModeActive and sSun do
26758: LD_EXP 43
26762: PUSH
26763: LD_EXP 66
26767: AND
26768: IFFALSE 26796
26770: GO 26772
26772: DISABLE
// begin solar_recharge_percent := 0 ;
26773: LD_ADDR_OWVAR 79
26777: PUSH
26778: LD_INT 0
26780: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26781: LD_INT 10500
26783: PPUSH
26784: CALL_OW 67
// solar_recharge_percent := 100 ;
26788: LD_ADDR_OWVAR 79
26792: PUSH
26793: LD_INT 100
26795: ST_TO_ADDR
// end ;
26796: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26797: LD_EXP 43
26801: PUSH
26802: LD_EXP 67
26806: AND
26807: IFFALSE 27046
26809: GO 26811
26811: DISABLE
26812: LD_INT 0
26814: PPUSH
26815: PPUSH
26816: PPUSH
// begin tmp := [ ] ;
26817: LD_ADDR_VAR 0 3
26821: PUSH
26822: EMPTY
26823: ST_TO_ADDR
// for i := 1 to 6 do
26824: LD_ADDR_VAR 0 1
26828: PUSH
26829: DOUBLE
26830: LD_INT 1
26832: DEC
26833: ST_TO_ADDR
26834: LD_INT 6
26836: PUSH
26837: FOR_TO
26838: IFFALSE 26943
// begin uc_nation := nation_nature ;
26840: LD_ADDR_OWVAR 21
26844: PUSH
26845: LD_INT 0
26847: ST_TO_ADDR
// uc_side := 0 ;
26848: LD_ADDR_OWVAR 20
26852: PUSH
26853: LD_INT 0
26855: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26856: LD_ADDR_OWVAR 29
26860: PUSH
26861: LD_INT 12
26863: PUSH
26864: LD_INT 12
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: ST_TO_ADDR
// hc_agressivity := 20 ;
26871: LD_ADDR_OWVAR 35
26875: PUSH
26876: LD_INT 20
26878: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26879: LD_ADDR_OWVAR 28
26883: PUSH
26884: LD_INT 17
26886: ST_TO_ADDR
// hc_gallery :=  ;
26887: LD_ADDR_OWVAR 33
26891: PUSH
26892: LD_STRING 
26894: ST_TO_ADDR
// hc_name :=  ;
26895: LD_ADDR_OWVAR 26
26899: PUSH
26900: LD_STRING 
26902: ST_TO_ADDR
// un := CreateHuman ;
26903: LD_ADDR_VAR 0 2
26907: PUSH
26908: CALL_OW 44
26912: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26913: LD_VAR 0 2
26917: PPUSH
26918: LD_INT 1
26920: PPUSH
26921: CALL_OW 51
// tmp := tmp ^ un ;
26925: LD_ADDR_VAR 0 3
26929: PUSH
26930: LD_VAR 0 3
26934: PUSH
26935: LD_VAR 0 2
26939: ADD
26940: ST_TO_ADDR
// end ;
26941: GO 26837
26943: POP
26944: POP
// repeat wait ( 0 0$1 ) ;
26945: LD_INT 35
26947: PPUSH
26948: CALL_OW 67
// for un in tmp do
26952: LD_ADDR_VAR 0 2
26956: PUSH
26957: LD_VAR 0 3
26961: PUSH
26962: FOR_IN
26963: IFFALSE 27037
// begin if IsDead ( un ) then
26965: LD_VAR 0 2
26969: PPUSH
26970: CALL_OW 301
26974: IFFALSE 26994
// begin tmp := tmp diff un ;
26976: LD_ADDR_VAR 0 3
26980: PUSH
26981: LD_VAR 0 3
26985: PUSH
26986: LD_VAR 0 2
26990: DIFF
26991: ST_TO_ADDR
// continue ;
26992: GO 26962
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26994: LD_VAR 0 2
26998: PPUSH
26999: LD_INT 3
27001: PUSH
27002: LD_INT 22
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PPUSH
27016: CALL_OW 69
27020: PPUSH
27021: LD_VAR 0 2
27025: PPUSH
27026: CALL_OW 74
27030: PPUSH
27031: CALL_OW 115
// end ;
27035: GO 26962
27037: POP
27038: POP
// until not tmp ;
27039: LD_VAR 0 3
27043: NOT
27044: IFFALSE 26945
// end ;
27046: PPOPN 3
27048: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27049: LD_EXP 43
27053: PUSH
27054: LD_EXP 68
27058: AND
27059: IFFALSE 27113
27061: GO 27063
27063: DISABLE
// begin ToLua ( displayTroll(); ) ;
27064: LD_STRING displayTroll();
27066: PPUSH
27067: CALL_OW 559
// wait ( 3 3$00 ) ;
27071: LD_INT 6300
27073: PPUSH
27074: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27078: LD_STRING hideTroll();
27080: PPUSH
27081: CALL_OW 559
// wait ( 1 1$00 ) ;
27085: LD_INT 2100
27087: PPUSH
27088: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27092: LD_STRING displayTroll();
27094: PPUSH
27095: CALL_OW 559
// wait ( 1 1$00 ) ;
27099: LD_INT 2100
27101: PPUSH
27102: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27106: LD_STRING hideTroll();
27108: PPUSH
27109: CALL_OW 559
// end ;
27113: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27114: LD_EXP 43
27118: PUSH
27119: LD_EXP 69
27123: AND
27124: IFFALSE 27187
27126: GO 27128
27128: DISABLE
27129: LD_INT 0
27131: PPUSH
// begin p := 0 ;
27132: LD_ADDR_VAR 0 1
27136: PUSH
27137: LD_INT 0
27139: ST_TO_ADDR
// repeat game_speed := 1 ;
27140: LD_ADDR_OWVAR 65
27144: PUSH
27145: LD_INT 1
27147: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27148: LD_INT 35
27150: PPUSH
27151: CALL_OW 67
// p := p + 1 ;
27155: LD_ADDR_VAR 0 1
27159: PUSH
27160: LD_VAR 0 1
27164: PUSH
27165: LD_INT 1
27167: PLUS
27168: ST_TO_ADDR
// until p >= 60 ;
27169: LD_VAR 0 1
27173: PUSH
27174: LD_INT 60
27176: GREATEREQUAL
27177: IFFALSE 27140
// game_speed := 4 ;
27179: LD_ADDR_OWVAR 65
27183: PUSH
27184: LD_INT 4
27186: ST_TO_ADDR
// end ;
27187: PPOPN 1
27189: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27190: LD_EXP 43
27194: PUSH
27195: LD_EXP 70
27199: AND
27200: IFFALSE 27346
27202: GO 27204
27204: DISABLE
27205: LD_INT 0
27207: PPUSH
27208: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27209: LD_ADDR_VAR 0 1
27213: PUSH
27214: LD_INT 22
27216: PUSH
27217: LD_OWVAR 2
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: LD_INT 30
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 30
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: LIST
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PPUSH
27258: CALL_OW 69
27262: ST_TO_ADDR
// if not depot then
27263: LD_VAR 0 1
27267: NOT
27268: IFFALSE 27272
// exit ;
27270: GO 27346
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27272: LD_ADDR_VAR 0 2
27276: PUSH
27277: LD_VAR 0 1
27281: PUSH
27282: LD_INT 1
27284: PPUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 12
27294: ARRAY
27295: PPUSH
27296: CALL_OW 274
27300: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27301: LD_VAR 0 2
27305: PPUSH
27306: LD_INT 1
27308: PPUSH
27309: LD_INT 0
27311: PPUSH
27312: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27316: LD_VAR 0 2
27320: PPUSH
27321: LD_INT 2
27323: PPUSH
27324: LD_INT 0
27326: PPUSH
27327: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27331: LD_VAR 0 2
27335: PPUSH
27336: LD_INT 3
27338: PPUSH
27339: LD_INT 0
27341: PPUSH
27342: CALL_OW 277
// end ;
27346: PPOPN 2
27348: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27349: LD_EXP 43
27353: PUSH
27354: LD_EXP 71
27358: AND
27359: IFFALSE 27456
27361: GO 27363
27363: DISABLE
27364: LD_INT 0
27366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27367: LD_ADDR_VAR 0 1
27371: PUSH
27372: LD_INT 22
27374: PUSH
27375: LD_OWVAR 2
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 21
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: LD_INT 23
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: LIST
27415: PPUSH
27416: CALL_OW 69
27420: ST_TO_ADDR
// if not tmp then
27421: LD_VAR 0 1
27425: NOT
27426: IFFALSE 27430
// exit ;
27428: GO 27456
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27430: LD_VAR 0 1
27434: PUSH
27435: LD_INT 1
27437: PPUSH
27438: LD_VAR 0 1
27442: PPUSH
27443: CALL_OW 12
27447: ARRAY
27448: PPUSH
27449: LD_INT 200
27451: PPUSH
27452: CALL_OW 234
// end ;
27456: PPOPN 1
27458: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27459: LD_EXP 43
27463: PUSH
27464: LD_EXP 72
27468: AND
27469: IFFALSE 27548
27471: GO 27473
27473: DISABLE
27474: LD_INT 0
27476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27477: LD_ADDR_VAR 0 1
27481: PUSH
27482: LD_INT 22
27484: PUSH
27485: LD_OWVAR 2
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 21
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PPUSH
27508: CALL_OW 69
27512: ST_TO_ADDR
// if not tmp then
27513: LD_VAR 0 1
27517: NOT
27518: IFFALSE 27522
// exit ;
27520: GO 27548
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27522: LD_VAR 0 1
27526: PUSH
27527: LD_INT 1
27529: PPUSH
27530: LD_VAR 0 1
27534: PPUSH
27535: CALL_OW 12
27539: ARRAY
27540: PPUSH
27541: LD_INT 60
27543: PPUSH
27544: CALL_OW 234
// end ;
27548: PPOPN 1
27550: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27551: LD_EXP 43
27555: PUSH
27556: LD_EXP 73
27560: AND
27561: IFFALSE 27660
27563: GO 27565
27565: DISABLE
27566: LD_INT 0
27568: PPUSH
27569: PPUSH
// begin enable ;
27570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27571: LD_ADDR_VAR 0 1
27575: PUSH
27576: LD_INT 22
27578: PUSH
27579: LD_OWVAR 2
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 61
27590: PUSH
27591: EMPTY
27592: LIST
27593: PUSH
27594: LD_INT 33
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: PPUSH
27609: CALL_OW 69
27613: ST_TO_ADDR
// if not tmp then
27614: LD_VAR 0 1
27618: NOT
27619: IFFALSE 27623
// exit ;
27621: GO 27660
// for i in tmp do
27623: LD_ADDR_VAR 0 2
27627: PUSH
27628: LD_VAR 0 1
27632: PUSH
27633: FOR_IN
27634: IFFALSE 27658
// if IsControledBy ( i ) then
27636: LD_VAR 0 2
27640: PPUSH
27641: CALL_OW 312
27645: IFFALSE 27656
// ComUnlink ( i ) ;
27647: LD_VAR 0 2
27651: PPUSH
27652: CALL_OW 136
27656: GO 27633
27658: POP
27659: POP
// end ;
27660: PPOPN 2
27662: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27663: LD_EXP 43
27667: PUSH
27668: LD_EXP 74
27672: AND
27673: IFFALSE 27813
27675: GO 27677
27677: DISABLE
27678: LD_INT 0
27680: PPUSH
27681: PPUSH
// begin ToLua ( displayPowell(); ) ;
27682: LD_STRING displayPowell();
27684: PPUSH
27685: CALL_OW 559
// uc_side := 0 ;
27689: LD_ADDR_OWVAR 20
27693: PUSH
27694: LD_INT 0
27696: ST_TO_ADDR
// uc_nation := 2 ;
27697: LD_ADDR_OWVAR 21
27701: PUSH
27702: LD_INT 2
27704: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27705: LD_ADDR_OWVAR 37
27709: PUSH
27710: LD_INT 14
27712: ST_TO_ADDR
// vc_engine := engine_siberite ;
27713: LD_ADDR_OWVAR 39
27717: PUSH
27718: LD_INT 3
27720: ST_TO_ADDR
// vc_control := control_apeman ;
27721: LD_ADDR_OWVAR 38
27725: PUSH
27726: LD_INT 5
27728: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27729: LD_ADDR_OWVAR 40
27733: PUSH
27734: LD_INT 29
27736: ST_TO_ADDR
// un := CreateVehicle ;
27737: LD_ADDR_VAR 0 2
27741: PUSH
27742: CALL_OW 45
27746: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27747: LD_VAR 0 2
27751: PPUSH
27752: LD_INT 1
27754: PPUSH
27755: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27759: LD_INT 35
27761: PPUSH
27762: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27766: LD_VAR 0 2
27770: PPUSH
27771: LD_INT 22
27773: PUSH
27774: LD_OWVAR 2
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PPUSH
27783: CALL_OW 69
27787: PPUSH
27788: LD_VAR 0 2
27792: PPUSH
27793: CALL_OW 74
27797: PPUSH
27798: CALL_OW 115
// until IsDead ( un ) ;
27802: LD_VAR 0 2
27806: PPUSH
27807: CALL_OW 301
27811: IFFALSE 27759
// end ;
27813: PPOPN 2
27815: END
// every 0 0$1 trigger StreamModeActive and sStu do
27816: LD_EXP 43
27820: PUSH
27821: LD_EXP 82
27825: AND
27826: IFFALSE 27842
27828: GO 27830
27830: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27831: LD_STRING displayStucuk();
27833: PPUSH
27834: CALL_OW 559
// ResetFog ;
27838: CALL_OW 335
// end ;
27842: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27843: LD_EXP 43
27847: PUSH
27848: LD_EXP 75
27852: AND
27853: IFFALSE 27994
27855: GO 27857
27857: DISABLE
27858: LD_INT 0
27860: PPUSH
27861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27862: LD_ADDR_VAR 0 2
27866: PUSH
27867: LD_INT 22
27869: PUSH
27870: LD_OWVAR 2
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 21
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PPUSH
27893: CALL_OW 69
27897: ST_TO_ADDR
// if not tmp then
27898: LD_VAR 0 2
27902: NOT
27903: IFFALSE 27907
// exit ;
27905: GO 27994
// un := tmp [ rand ( 1 , tmp ) ] ;
27907: LD_ADDR_VAR 0 1
27911: PUSH
27912: LD_VAR 0 2
27916: PUSH
27917: LD_INT 1
27919: PPUSH
27920: LD_VAR 0 2
27924: PPUSH
27925: CALL_OW 12
27929: ARRAY
27930: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27931: LD_VAR 0 1
27935: PPUSH
27936: LD_INT 0
27938: PPUSH
27939: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27943: LD_VAR 0 1
27947: PPUSH
27948: LD_OWVAR 3
27952: PUSH
27953: LD_VAR 0 1
27957: DIFF
27958: PPUSH
27959: LD_VAR 0 1
27963: PPUSH
27964: CALL_OW 74
27968: PPUSH
27969: CALL_OW 115
// wait ( 0 0$20 ) ;
27973: LD_INT 700
27975: PPUSH
27976: CALL_OW 67
// SetSide ( un , your_side ) ;
27980: LD_VAR 0 1
27984: PPUSH
27985: LD_OWVAR 2
27989: PPUSH
27990: CALL_OW 235
// end ;
27994: PPOPN 2
27996: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27997: LD_EXP 43
28001: PUSH
28002: LD_EXP 76
28006: AND
28007: IFFALSE 28113
28009: GO 28011
28011: DISABLE
28012: LD_INT 0
28014: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28015: LD_ADDR_VAR 0 1
28019: PUSH
28020: LD_INT 22
28022: PUSH
28023: LD_OWVAR 2
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: LD_INT 30
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 30
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PPUSH
28064: CALL_OW 69
28068: ST_TO_ADDR
// if not depot then
28069: LD_VAR 0 1
28073: NOT
28074: IFFALSE 28078
// exit ;
28076: GO 28113
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28078: LD_VAR 0 1
28082: PUSH
28083: LD_INT 1
28085: ARRAY
28086: PPUSH
28087: CALL_OW 250
28091: PPUSH
28092: LD_VAR 0 1
28096: PUSH
28097: LD_INT 1
28099: ARRAY
28100: PPUSH
28101: CALL_OW 251
28105: PPUSH
28106: LD_INT 70
28108: PPUSH
28109: CALL_OW 495
// end ;
28113: PPOPN 1
28115: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28116: LD_EXP 43
28120: PUSH
28121: LD_EXP 77
28125: AND
28126: IFFALSE 28337
28128: GO 28130
28130: DISABLE
28131: LD_INT 0
28133: PPUSH
28134: PPUSH
28135: PPUSH
28136: PPUSH
28137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28138: LD_ADDR_VAR 0 5
28142: PUSH
28143: LD_INT 22
28145: PUSH
28146: LD_OWVAR 2
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 21
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PPUSH
28169: CALL_OW 69
28173: ST_TO_ADDR
// if not tmp then
28174: LD_VAR 0 5
28178: NOT
28179: IFFALSE 28183
// exit ;
28181: GO 28337
// for i in tmp do
28183: LD_ADDR_VAR 0 1
28187: PUSH
28188: LD_VAR 0 5
28192: PUSH
28193: FOR_IN
28194: IFFALSE 28335
// begin d := rand ( 0 , 5 ) ;
28196: LD_ADDR_VAR 0 4
28200: PUSH
28201: LD_INT 0
28203: PPUSH
28204: LD_INT 5
28206: PPUSH
28207: CALL_OW 12
28211: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28212: LD_ADDR_VAR 0 2
28216: PUSH
28217: LD_VAR 0 1
28221: PPUSH
28222: CALL_OW 250
28226: PPUSH
28227: LD_VAR 0 4
28231: PPUSH
28232: LD_INT 3
28234: PPUSH
28235: LD_INT 12
28237: PPUSH
28238: CALL_OW 12
28242: PPUSH
28243: CALL_OW 272
28247: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28248: LD_ADDR_VAR 0 3
28252: PUSH
28253: LD_VAR 0 1
28257: PPUSH
28258: CALL_OW 251
28262: PPUSH
28263: LD_VAR 0 4
28267: PPUSH
28268: LD_INT 3
28270: PPUSH
28271: LD_INT 12
28273: PPUSH
28274: CALL_OW 12
28278: PPUSH
28279: CALL_OW 273
28283: ST_TO_ADDR
// if ValidHex ( x , y ) then
28284: LD_VAR 0 2
28288: PPUSH
28289: LD_VAR 0 3
28293: PPUSH
28294: CALL_OW 488
28298: IFFALSE 28333
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28300: LD_VAR 0 1
28304: PPUSH
28305: LD_VAR 0 2
28309: PPUSH
28310: LD_VAR 0 3
28314: PPUSH
28315: LD_INT 3
28317: PPUSH
28318: LD_INT 6
28320: PPUSH
28321: CALL_OW 12
28325: PPUSH
28326: LD_INT 1
28328: PPUSH
28329: CALL_OW 483
// end ;
28333: GO 28193
28335: POP
28336: POP
// end ;
28337: PPOPN 5
28339: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28340: LD_EXP 43
28344: PUSH
28345: LD_EXP 78
28349: AND
28350: IFFALSE 28444
28352: GO 28354
28354: DISABLE
28355: LD_INT 0
28357: PPUSH
28358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28359: LD_ADDR_VAR 0 2
28363: PUSH
28364: LD_INT 22
28366: PUSH
28367: LD_OWVAR 2
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 32
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 21
28388: PUSH
28389: LD_INT 2
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: LIST
28400: PPUSH
28401: CALL_OW 69
28405: ST_TO_ADDR
// if not tmp then
28406: LD_VAR 0 2
28410: NOT
28411: IFFALSE 28415
// exit ;
28413: GO 28444
// for i in tmp do
28415: LD_ADDR_VAR 0 1
28419: PUSH
28420: LD_VAR 0 2
28424: PUSH
28425: FOR_IN
28426: IFFALSE 28442
// SetFuel ( i , 0 ) ;
28428: LD_VAR 0 1
28432: PPUSH
28433: LD_INT 0
28435: PPUSH
28436: CALL_OW 240
28440: GO 28425
28442: POP
28443: POP
// end ;
28444: PPOPN 2
28446: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28447: LD_EXP 43
28451: PUSH
28452: LD_EXP 79
28456: AND
28457: IFFALSE 28523
28459: GO 28461
28461: DISABLE
28462: LD_INT 0
28464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28465: LD_ADDR_VAR 0 1
28469: PUSH
28470: LD_INT 22
28472: PUSH
28473: LD_OWVAR 2
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 30
28484: PUSH
28485: LD_INT 29
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PPUSH
28496: CALL_OW 69
28500: ST_TO_ADDR
// if not tmp then
28501: LD_VAR 0 1
28505: NOT
28506: IFFALSE 28510
// exit ;
28508: GO 28523
// DestroyUnit ( tmp [ 1 ] ) ;
28510: LD_VAR 0 1
28514: PUSH
28515: LD_INT 1
28517: ARRAY
28518: PPUSH
28519: CALL_OW 65
// end ;
28523: PPOPN 1
28525: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28526: LD_EXP 43
28530: PUSH
28531: LD_EXP 81
28535: AND
28536: IFFALSE 28665
28538: GO 28540
28540: DISABLE
28541: LD_INT 0
28543: PPUSH
// begin uc_side := 0 ;
28544: LD_ADDR_OWVAR 20
28548: PUSH
28549: LD_INT 0
28551: ST_TO_ADDR
// uc_nation := nation_arabian ;
28552: LD_ADDR_OWVAR 21
28556: PUSH
28557: LD_INT 2
28559: ST_TO_ADDR
// hc_gallery :=  ;
28560: LD_ADDR_OWVAR 33
28564: PUSH
28565: LD_STRING 
28567: ST_TO_ADDR
// hc_name :=  ;
28568: LD_ADDR_OWVAR 26
28572: PUSH
28573: LD_STRING 
28575: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28576: LD_INT 1
28578: PPUSH
28579: LD_INT 11
28581: PPUSH
28582: LD_INT 10
28584: PPUSH
28585: CALL_OW 380
// un := CreateHuman ;
28589: LD_ADDR_VAR 0 1
28593: PUSH
28594: CALL_OW 44
28598: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28599: LD_VAR 0 1
28603: PPUSH
28604: LD_INT 1
28606: PPUSH
28607: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28611: LD_INT 35
28613: PPUSH
28614: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28618: LD_VAR 0 1
28622: PPUSH
28623: LD_INT 22
28625: PUSH
28626: LD_OWVAR 2
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PPUSH
28635: CALL_OW 69
28639: PPUSH
28640: LD_VAR 0 1
28644: PPUSH
28645: CALL_OW 74
28649: PPUSH
28650: CALL_OW 115
// until IsDead ( un ) ;
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 301
28663: IFFALSE 28611
// end ;
28665: PPOPN 1
28667: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28668: LD_EXP 43
28672: PUSH
28673: LD_EXP 83
28677: AND
28678: IFFALSE 28690
28680: GO 28682
28682: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28683: LD_STRING earthquake(getX(game), 0, 32)
28685: PPUSH
28686: CALL_OW 559
28690: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28691: LD_EXP 43
28695: PUSH
28696: LD_EXP 84
28700: AND
28701: IFFALSE 28792
28703: GO 28705
28705: DISABLE
28706: LD_INT 0
28708: PPUSH
// begin enable ;
28709: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28710: LD_ADDR_VAR 0 1
28714: PUSH
28715: LD_INT 22
28717: PUSH
28718: LD_OWVAR 2
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 21
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 33
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: LIST
28751: PPUSH
28752: CALL_OW 69
28756: ST_TO_ADDR
// if not tmp then
28757: LD_VAR 0 1
28761: NOT
28762: IFFALSE 28766
// exit ;
28764: GO 28792
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28766: LD_VAR 0 1
28770: PUSH
28771: LD_INT 1
28773: PPUSH
28774: LD_VAR 0 1
28778: PPUSH
28779: CALL_OW 12
28783: ARRAY
28784: PPUSH
28785: LD_INT 1
28787: PPUSH
28788: CALL_OW 234
// end ;
28792: PPOPN 1
28794: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28795: LD_EXP 43
28799: PUSH
28800: LD_EXP 85
28804: AND
28805: IFFALSE 28946
28807: GO 28809
28809: DISABLE
28810: LD_INT 0
28812: PPUSH
28813: PPUSH
28814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28815: LD_ADDR_VAR 0 3
28819: PUSH
28820: LD_INT 22
28822: PUSH
28823: LD_OWVAR 2
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 25
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PPUSH
28846: CALL_OW 69
28850: ST_TO_ADDR
// if not tmp then
28851: LD_VAR 0 3
28855: NOT
28856: IFFALSE 28860
// exit ;
28858: GO 28946
// un := tmp [ rand ( 1 , tmp ) ] ;
28860: LD_ADDR_VAR 0 2
28864: PUSH
28865: LD_VAR 0 3
28869: PUSH
28870: LD_INT 1
28872: PPUSH
28873: LD_VAR 0 3
28877: PPUSH
28878: CALL_OW 12
28882: ARRAY
28883: ST_TO_ADDR
// if Crawls ( un ) then
28884: LD_VAR 0 2
28888: PPUSH
28889: CALL_OW 318
28893: IFFALSE 28904
// ComWalk ( un ) ;
28895: LD_VAR 0 2
28899: PPUSH
28900: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28904: LD_VAR 0 2
28908: PPUSH
28909: LD_INT 9
28911: PPUSH
28912: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28916: LD_INT 28
28918: PPUSH
28919: LD_OWVAR 2
28923: PPUSH
28924: LD_INT 2
28926: PPUSH
28927: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28931: LD_INT 29
28933: PPUSH
28934: LD_OWVAR 2
28938: PPUSH
28939: LD_INT 2
28941: PPUSH
28942: CALL_OW 322
// end ;
28946: PPOPN 3
28948: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28949: LD_EXP 43
28953: PUSH
28954: LD_EXP 86
28958: AND
28959: IFFALSE 29070
28961: GO 28963
28963: DISABLE
28964: LD_INT 0
28966: PPUSH
28967: PPUSH
28968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28969: LD_ADDR_VAR 0 3
28973: PUSH
28974: LD_INT 22
28976: PUSH
28977: LD_OWVAR 2
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 25
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PPUSH
29000: CALL_OW 69
29004: ST_TO_ADDR
// if not tmp then
29005: LD_VAR 0 3
29009: NOT
29010: IFFALSE 29014
// exit ;
29012: GO 29070
// un := tmp [ rand ( 1 , tmp ) ] ;
29014: LD_ADDR_VAR 0 2
29018: PUSH
29019: LD_VAR 0 3
29023: PUSH
29024: LD_INT 1
29026: PPUSH
29027: LD_VAR 0 3
29031: PPUSH
29032: CALL_OW 12
29036: ARRAY
29037: ST_TO_ADDR
// if Crawls ( un ) then
29038: LD_VAR 0 2
29042: PPUSH
29043: CALL_OW 318
29047: IFFALSE 29058
// ComWalk ( un ) ;
29049: LD_VAR 0 2
29053: PPUSH
29054: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29058: LD_VAR 0 2
29062: PPUSH
29063: LD_INT 8
29065: PPUSH
29066: CALL_OW 336
// end ;
29070: PPOPN 3
29072: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29073: LD_EXP 43
29077: PUSH
29078: LD_EXP 87
29082: AND
29083: IFFALSE 29227
29085: GO 29087
29087: DISABLE
29088: LD_INT 0
29090: PPUSH
29091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29092: LD_ADDR_VAR 0 2
29096: PUSH
29097: LD_INT 22
29099: PUSH
29100: LD_OWVAR 2
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 21
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 34
29124: PUSH
29125: LD_INT 12
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 34
29134: PUSH
29135: LD_INT 51
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 34
29144: PUSH
29145: LD_INT 32
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: PPUSH
29163: CALL_OW 69
29167: ST_TO_ADDR
// if not tmp then
29168: LD_VAR 0 2
29172: NOT
29173: IFFALSE 29177
// exit ;
29175: GO 29227
// for i in tmp do
29177: LD_ADDR_VAR 0 1
29181: PUSH
29182: LD_VAR 0 2
29186: PUSH
29187: FOR_IN
29188: IFFALSE 29225
// if GetCargo ( i , mat_artifact ) = 0 then
29190: LD_VAR 0 1
29194: PPUSH
29195: LD_INT 4
29197: PPUSH
29198: CALL_OW 289
29202: PUSH
29203: LD_INT 0
29205: EQUAL
29206: IFFALSE 29223
// SetCargo ( i , mat_siberit , 100 ) ;
29208: LD_VAR 0 1
29212: PPUSH
29213: LD_INT 3
29215: PPUSH
29216: LD_INT 100
29218: PPUSH
29219: CALL_OW 290
29223: GO 29187
29225: POP
29226: POP
// end ;
29227: PPOPN 2
29229: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29230: LD_EXP 43
29234: PUSH
29235: LD_EXP 88
29239: AND
29240: IFFALSE 29423
29242: GO 29244
29244: DISABLE
29245: LD_INT 0
29247: PPUSH
29248: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29249: LD_ADDR_VAR 0 2
29253: PUSH
29254: LD_INT 22
29256: PUSH
29257: LD_OWVAR 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PPUSH
29266: CALL_OW 69
29270: ST_TO_ADDR
// if not tmp then
29271: LD_VAR 0 2
29275: NOT
29276: IFFALSE 29280
// exit ;
29278: GO 29423
// for i := 1 to 2 do
29280: LD_ADDR_VAR 0 1
29284: PUSH
29285: DOUBLE
29286: LD_INT 1
29288: DEC
29289: ST_TO_ADDR
29290: LD_INT 2
29292: PUSH
29293: FOR_TO
29294: IFFALSE 29421
// begin uc_side := your_side ;
29296: LD_ADDR_OWVAR 20
29300: PUSH
29301: LD_OWVAR 2
29305: ST_TO_ADDR
// uc_nation := nation_american ;
29306: LD_ADDR_OWVAR 21
29310: PUSH
29311: LD_INT 1
29313: ST_TO_ADDR
// vc_chassis := us_morphling ;
29314: LD_ADDR_OWVAR 37
29318: PUSH
29319: LD_INT 5
29321: ST_TO_ADDR
// vc_engine := engine_siberite ;
29322: LD_ADDR_OWVAR 39
29326: PUSH
29327: LD_INT 3
29329: ST_TO_ADDR
// vc_control := control_computer ;
29330: LD_ADDR_OWVAR 38
29334: PUSH
29335: LD_INT 3
29337: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29338: LD_ADDR_OWVAR 40
29342: PUSH
29343: LD_INT 10
29345: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29346: LD_VAR 0 2
29350: PUSH
29351: LD_INT 1
29353: ARRAY
29354: PPUSH
29355: CALL_OW 310
29359: NOT
29360: IFFALSE 29407
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29362: CALL_OW 45
29366: PPUSH
29367: LD_VAR 0 2
29371: PUSH
29372: LD_INT 1
29374: ARRAY
29375: PPUSH
29376: CALL_OW 250
29380: PPUSH
29381: LD_VAR 0 2
29385: PUSH
29386: LD_INT 1
29388: ARRAY
29389: PPUSH
29390: CALL_OW 251
29394: PPUSH
29395: LD_INT 12
29397: PPUSH
29398: LD_INT 1
29400: PPUSH
29401: CALL_OW 50
29405: GO 29419
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29407: CALL_OW 45
29411: PPUSH
29412: LD_INT 1
29414: PPUSH
29415: CALL_OW 51
// end ;
29419: GO 29293
29421: POP
29422: POP
// end ;
29423: PPOPN 2
29425: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29426: LD_EXP 43
29430: PUSH
29431: LD_EXP 89
29435: AND
29436: IFFALSE 29658
29438: GO 29440
29440: DISABLE
29441: LD_INT 0
29443: PPUSH
29444: PPUSH
29445: PPUSH
29446: PPUSH
29447: PPUSH
29448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29449: LD_ADDR_VAR 0 6
29453: PUSH
29454: LD_INT 22
29456: PUSH
29457: LD_OWVAR 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 21
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 3
29478: PUSH
29479: LD_INT 23
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: PPUSH
29498: CALL_OW 69
29502: ST_TO_ADDR
// if not tmp then
29503: LD_VAR 0 6
29507: NOT
29508: IFFALSE 29512
// exit ;
29510: GO 29658
// s1 := rand ( 1 , 4 ) ;
29512: LD_ADDR_VAR 0 2
29516: PUSH
29517: LD_INT 1
29519: PPUSH
29520: LD_INT 4
29522: PPUSH
29523: CALL_OW 12
29527: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29528: LD_ADDR_VAR 0 4
29532: PUSH
29533: LD_VAR 0 6
29537: PUSH
29538: LD_INT 1
29540: ARRAY
29541: PPUSH
29542: LD_VAR 0 2
29546: PPUSH
29547: CALL_OW 259
29551: ST_TO_ADDR
// if s1 = 1 then
29552: LD_VAR 0 2
29556: PUSH
29557: LD_INT 1
29559: EQUAL
29560: IFFALSE 29580
// s2 := rand ( 2 , 4 ) else
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_INT 2
29569: PPUSH
29570: LD_INT 4
29572: PPUSH
29573: CALL_OW 12
29577: ST_TO_ADDR
29578: GO 29588
// s2 := 1 ;
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: LD_INT 1
29587: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29588: LD_ADDR_VAR 0 5
29592: PUSH
29593: LD_VAR 0 6
29597: PUSH
29598: LD_INT 1
29600: ARRAY
29601: PPUSH
29602: LD_VAR 0 3
29606: PPUSH
29607: CALL_OW 259
29611: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29612: LD_VAR 0 6
29616: PUSH
29617: LD_INT 1
29619: ARRAY
29620: PPUSH
29621: LD_VAR 0 2
29625: PPUSH
29626: LD_VAR 0 5
29630: PPUSH
29631: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29635: LD_VAR 0 6
29639: PUSH
29640: LD_INT 1
29642: ARRAY
29643: PPUSH
29644: LD_VAR 0 3
29648: PPUSH
29649: LD_VAR 0 4
29653: PPUSH
29654: CALL_OW 237
// end ;
29658: PPOPN 6
29660: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29661: LD_EXP 43
29665: PUSH
29666: LD_EXP 90
29670: AND
29671: IFFALSE 29750
29673: GO 29675
29675: DISABLE
29676: LD_INT 0
29678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29679: LD_ADDR_VAR 0 1
29683: PUSH
29684: LD_INT 22
29686: PUSH
29687: LD_OWVAR 2
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 30
29698: PUSH
29699: LD_INT 3
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PPUSH
29710: CALL_OW 69
29714: ST_TO_ADDR
// if not tmp then
29715: LD_VAR 0 1
29719: NOT
29720: IFFALSE 29724
// exit ;
29722: GO 29750
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29724: LD_VAR 0 1
29728: PUSH
29729: LD_INT 1
29731: PPUSH
29732: LD_VAR 0 1
29736: PPUSH
29737: CALL_OW 12
29741: ARRAY
29742: PPUSH
29743: LD_INT 1
29745: PPUSH
29746: CALL_OW 234
// end ;
29750: PPOPN 1
29752: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29753: LD_EXP 43
29757: PUSH
29758: LD_EXP 91
29762: AND
29763: IFFALSE 29875
29765: GO 29767
29767: DISABLE
29768: LD_INT 0
29770: PPUSH
29771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29772: LD_ADDR_VAR 0 2
29776: PUSH
29777: LD_INT 22
29779: PUSH
29780: LD_OWVAR 2
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 2
29791: PUSH
29792: LD_INT 30
29794: PUSH
29795: LD_INT 27
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 30
29804: PUSH
29805: LD_INT 26
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 30
29814: PUSH
29815: LD_INT 28
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PPUSH
29832: CALL_OW 69
29836: ST_TO_ADDR
// if not tmp then
29837: LD_VAR 0 2
29841: NOT
29842: IFFALSE 29846
// exit ;
29844: GO 29875
// for i in tmp do
29846: LD_ADDR_VAR 0 1
29850: PUSH
29851: LD_VAR 0 2
29855: PUSH
29856: FOR_IN
29857: IFFALSE 29873
// SetLives ( i , 1 ) ;
29859: LD_VAR 0 1
29863: PPUSH
29864: LD_INT 1
29866: PPUSH
29867: CALL_OW 234
29871: GO 29856
29873: POP
29874: POP
// end ;
29875: PPOPN 2
29877: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29878: LD_EXP 43
29882: PUSH
29883: LD_EXP 92
29887: AND
29888: IFFALSE 30175
29890: GO 29892
29892: DISABLE
29893: LD_INT 0
29895: PPUSH
29896: PPUSH
29897: PPUSH
// begin i := rand ( 1 , 7 ) ;
29898: LD_ADDR_VAR 0 1
29902: PUSH
29903: LD_INT 1
29905: PPUSH
29906: LD_INT 7
29908: PPUSH
29909: CALL_OW 12
29913: ST_TO_ADDR
// case i of 1 :
29914: LD_VAR 0 1
29918: PUSH
29919: LD_INT 1
29921: DOUBLE
29922: EQUAL
29923: IFTRUE 29927
29925: GO 29937
29927: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29928: LD_STRING earthquake(getX(game), 0, 32)
29930: PPUSH
29931: CALL_OW 559
29935: GO 30175
29937: LD_INT 2
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29945
29943: GO 29959
29945: POP
// begin ToLua ( displayStucuk(); ) ;
29946: LD_STRING displayStucuk();
29948: PPUSH
29949: CALL_OW 559
// ResetFog ;
29953: CALL_OW 335
// end ; 3 :
29957: GO 30175
29959: LD_INT 3
29961: DOUBLE
29962: EQUAL
29963: IFTRUE 29967
29965: GO 30071
29967: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29968: LD_ADDR_VAR 0 2
29972: PUSH
29973: LD_INT 22
29975: PUSH
29976: LD_OWVAR 2
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 25
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PPUSH
29999: CALL_OW 69
30003: ST_TO_ADDR
// if not tmp then
30004: LD_VAR 0 2
30008: NOT
30009: IFFALSE 30013
// exit ;
30011: GO 30175
// un := tmp [ rand ( 1 , tmp ) ] ;
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_VAR 0 2
30022: PUSH
30023: LD_INT 1
30025: PPUSH
30026: LD_VAR 0 2
30030: PPUSH
30031: CALL_OW 12
30035: ARRAY
30036: ST_TO_ADDR
// if Crawls ( un ) then
30037: LD_VAR 0 3
30041: PPUSH
30042: CALL_OW 318
30046: IFFALSE 30057
// ComWalk ( un ) ;
30048: LD_VAR 0 3
30052: PPUSH
30053: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30057: LD_VAR 0 3
30061: PPUSH
30062: LD_INT 8
30064: PPUSH
30065: CALL_OW 336
// end ; 4 :
30069: GO 30175
30071: LD_INT 4
30073: DOUBLE
30074: EQUAL
30075: IFTRUE 30079
30077: GO 30153
30079: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30080: LD_ADDR_VAR 0 2
30084: PUSH
30085: LD_INT 22
30087: PUSH
30088: LD_OWVAR 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 30
30099: PUSH
30100: LD_INT 29
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PPUSH
30111: CALL_OW 69
30115: ST_TO_ADDR
// if not tmp then
30116: LD_VAR 0 2
30120: NOT
30121: IFFALSE 30125
// exit ;
30123: GO 30175
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30125: LD_VAR 0 2
30129: PUSH
30130: LD_INT 1
30132: ARRAY
30133: PPUSH
30134: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30138: LD_VAR 0 2
30142: PUSH
30143: LD_INT 1
30145: ARRAY
30146: PPUSH
30147: CALL_OW 65
// end ; 5 .. 7 :
30151: GO 30175
30153: LD_INT 5
30155: DOUBLE
30156: GREATEREQUAL
30157: IFFALSE 30165
30159: LD_INT 7
30161: DOUBLE
30162: LESSEQUAL
30163: IFTRUE 30167
30165: GO 30174
30167: POP
// StreamSibBomb ; end ;
30168: CALL 26412 0 0
30172: GO 30175
30174: POP
// end ;
30175: PPOPN 3
30177: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30178: LD_EXP 43
30182: PUSH
30183: LD_EXP 93
30187: AND
30188: IFFALSE 30344
30190: GO 30192
30192: DISABLE
30193: LD_INT 0
30195: PPUSH
30196: PPUSH
30197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30198: LD_ADDR_VAR 0 2
30202: PUSH
30203: LD_INT 81
30205: PUSH
30206: LD_OWVAR 2
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: LD_INT 21
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 21
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PPUSH
30247: CALL_OW 69
30251: ST_TO_ADDR
// if not tmp then
30252: LD_VAR 0 2
30256: NOT
30257: IFFALSE 30261
// exit ;
30259: GO 30344
// p := 0 ;
30261: LD_ADDR_VAR 0 3
30265: PUSH
30266: LD_INT 0
30268: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30269: LD_INT 35
30271: PPUSH
30272: CALL_OW 67
// p := p + 1 ;
30276: LD_ADDR_VAR 0 3
30280: PUSH
30281: LD_VAR 0 3
30285: PUSH
30286: LD_INT 1
30288: PLUS
30289: ST_TO_ADDR
// for i in tmp do
30290: LD_ADDR_VAR 0 1
30294: PUSH
30295: LD_VAR 0 2
30299: PUSH
30300: FOR_IN
30301: IFFALSE 30332
// if GetLives ( i ) < 1000 then
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL_OW 256
30312: PUSH
30313: LD_INT 1000
30315: LESS
30316: IFFALSE 30330
// SetLives ( i , 1000 ) ;
30318: LD_VAR 0 1
30322: PPUSH
30323: LD_INT 1000
30325: PPUSH
30326: CALL_OW 234
30330: GO 30300
30332: POP
30333: POP
// until p > 20 ;
30334: LD_VAR 0 3
30338: PUSH
30339: LD_INT 20
30341: GREATER
30342: IFFALSE 30269
// end ;
30344: PPOPN 3
30346: END
// every 0 0$1 trigger StreamModeActive and sTime do
30347: LD_EXP 43
30351: PUSH
30352: LD_EXP 94
30356: AND
30357: IFFALSE 30392
30359: GO 30361
30361: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30362: LD_INT 28
30364: PPUSH
30365: LD_OWVAR 2
30369: PPUSH
30370: LD_INT 2
30372: PPUSH
30373: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30377: LD_INT 30
30379: PPUSH
30380: LD_OWVAR 2
30384: PPUSH
30385: LD_INT 2
30387: PPUSH
30388: CALL_OW 322
// end ;
30392: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30393: LD_EXP 43
30397: PUSH
30398: LD_EXP 95
30402: AND
30403: IFFALSE 30524
30405: GO 30407
30407: DISABLE
30408: LD_INT 0
30410: PPUSH
30411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30412: LD_ADDR_VAR 0 2
30416: PUSH
30417: LD_INT 22
30419: PUSH
30420: LD_OWVAR 2
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 21
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: LD_INT 23
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: LIST
30460: PPUSH
30461: CALL_OW 69
30465: ST_TO_ADDR
// if not tmp then
30466: LD_VAR 0 2
30470: NOT
30471: IFFALSE 30475
// exit ;
30473: GO 30524
// for i in tmp do
30475: LD_ADDR_VAR 0 1
30479: PUSH
30480: LD_VAR 0 2
30484: PUSH
30485: FOR_IN
30486: IFFALSE 30522
// begin if Crawls ( i ) then
30488: LD_VAR 0 1
30492: PPUSH
30493: CALL_OW 318
30497: IFFALSE 30508
// ComWalk ( i ) ;
30499: LD_VAR 0 1
30503: PPUSH
30504: CALL_OW 138
// SetClass ( i , 2 ) ;
30508: LD_VAR 0 1
30512: PPUSH
30513: LD_INT 2
30515: PPUSH
30516: CALL_OW 336
// end ;
30520: GO 30485
30522: POP
30523: POP
// end ;
30524: PPOPN 2
30526: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30527: LD_EXP 43
30531: PUSH
30532: LD_EXP 96
30536: AND
30537: IFFALSE 30825
30539: GO 30541
30541: DISABLE
30542: LD_INT 0
30544: PPUSH
30545: PPUSH
30546: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30547: LD_OWVAR 2
30551: PPUSH
30552: LD_INT 9
30554: PPUSH
30555: LD_INT 1
30557: PPUSH
30558: LD_INT 1
30560: PPUSH
30561: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30565: LD_INT 9
30567: PPUSH
30568: LD_OWVAR 2
30572: PPUSH
30573: CALL_OW 343
// uc_side := 9 ;
30577: LD_ADDR_OWVAR 20
30581: PUSH
30582: LD_INT 9
30584: ST_TO_ADDR
// uc_nation := 2 ;
30585: LD_ADDR_OWVAR 21
30589: PUSH
30590: LD_INT 2
30592: ST_TO_ADDR
// hc_name := Dark Warrior ;
30593: LD_ADDR_OWVAR 26
30597: PUSH
30598: LD_STRING Dark Warrior
30600: ST_TO_ADDR
// hc_gallery :=  ;
30601: LD_ADDR_OWVAR 33
30605: PUSH
30606: LD_STRING 
30608: ST_TO_ADDR
// hc_noskilllimit := true ;
30609: LD_ADDR_OWVAR 76
30613: PUSH
30614: LD_INT 1
30616: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30617: LD_ADDR_OWVAR 31
30621: PUSH
30622: LD_INT 30
30624: PUSH
30625: LD_INT 30
30627: PUSH
30628: LD_INT 30
30630: PUSH
30631: LD_INT 30
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: ST_TO_ADDR
// un := CreateHuman ;
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: CALL_OW 44
30649: ST_TO_ADDR
// hc_noskilllimit := false ;
30650: LD_ADDR_OWVAR 76
30654: PUSH
30655: LD_INT 0
30657: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30658: LD_VAR 0 3
30662: PPUSH
30663: LD_INT 1
30665: PPUSH
30666: CALL_OW 51
// ToLua ( playRanger() ) ;
30670: LD_STRING playRanger()
30672: PPUSH
30673: CALL_OW 559
// p := 0 ;
30677: LD_ADDR_VAR 0 2
30681: PUSH
30682: LD_INT 0
30684: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30685: LD_INT 35
30687: PPUSH
30688: CALL_OW 67
// p := p + 1 ;
30692: LD_ADDR_VAR 0 2
30696: PUSH
30697: LD_VAR 0 2
30701: PUSH
30702: LD_INT 1
30704: PLUS
30705: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30706: LD_VAR 0 3
30710: PPUSH
30711: CALL_OW 256
30715: PUSH
30716: LD_INT 1000
30718: LESS
30719: IFFALSE 30733
// SetLives ( un , 1000 ) ;
30721: LD_VAR 0 3
30725: PPUSH
30726: LD_INT 1000
30728: PPUSH
30729: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30733: LD_VAR 0 3
30737: PPUSH
30738: LD_INT 81
30740: PUSH
30741: LD_OWVAR 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 91
30752: PUSH
30753: LD_VAR 0 3
30757: PUSH
30758: LD_INT 30
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PPUSH
30770: CALL_OW 69
30774: PPUSH
30775: LD_VAR 0 3
30779: PPUSH
30780: CALL_OW 74
30784: PPUSH
30785: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30789: LD_VAR 0 2
30793: PUSH
30794: LD_INT 80
30796: GREATER
30797: PUSH
30798: LD_VAR 0 3
30802: PPUSH
30803: CALL_OW 301
30807: OR
30808: IFFALSE 30685
// if un then
30810: LD_VAR 0 3
30814: IFFALSE 30825
// RemoveUnit ( un ) ;
30816: LD_VAR 0 3
30820: PPUSH
30821: CALL_OW 64
// end ;
30825: PPOPN 3
30827: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30828: LD_EXP 97
30832: IFFALSE 30948
30834: GO 30836
30836: DISABLE
30837: LD_INT 0
30839: PPUSH
30840: PPUSH
30841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30842: LD_ADDR_VAR 0 2
30846: PUSH
30847: LD_INT 81
30849: PUSH
30850: LD_OWVAR 2
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 21
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PPUSH
30873: CALL_OW 69
30877: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30878: LD_STRING playComputer()
30880: PPUSH
30881: CALL_OW 559
// if not tmp then
30885: LD_VAR 0 2
30889: NOT
30890: IFFALSE 30894
// exit ;
30892: GO 30948
// for i in tmp do
30894: LD_ADDR_VAR 0 1
30898: PUSH
30899: LD_VAR 0 2
30903: PUSH
30904: FOR_IN
30905: IFFALSE 30946
// for j := 1 to 4 do
30907: LD_ADDR_VAR 0 3
30911: PUSH
30912: DOUBLE
30913: LD_INT 1
30915: DEC
30916: ST_TO_ADDR
30917: LD_INT 4
30919: PUSH
30920: FOR_TO
30921: IFFALSE 30942
// SetSkill ( i , j , 10 ) ;
30923: LD_VAR 0 1
30927: PPUSH
30928: LD_VAR 0 3
30932: PPUSH
30933: LD_INT 10
30935: PPUSH
30936: CALL_OW 237
30940: GO 30920
30942: POP
30943: POP
30944: GO 30904
30946: POP
30947: POP
// end ;
30948: PPOPN 3
30950: END
// every 0 0$1 trigger s30 do var i , tmp ;
30951: LD_EXP 98
30955: IFFALSE 31024
30957: GO 30959
30959: DISABLE
30960: LD_INT 0
30962: PPUSH
30963: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30964: LD_ADDR_VAR 0 2
30968: PUSH
30969: LD_INT 22
30971: PUSH
30972: LD_OWVAR 2
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PPUSH
30981: CALL_OW 69
30985: ST_TO_ADDR
// if not tmp then
30986: LD_VAR 0 2
30990: NOT
30991: IFFALSE 30995
// exit ;
30993: GO 31024
// for i in tmp do
30995: LD_ADDR_VAR 0 1
30999: PUSH
31000: LD_VAR 0 2
31004: PUSH
31005: FOR_IN
31006: IFFALSE 31022
// SetLives ( i , 300 ) ;
31008: LD_VAR 0 1
31012: PPUSH
31013: LD_INT 300
31015: PPUSH
31016: CALL_OW 234
31020: GO 31005
31022: POP
31023: POP
// end ;
31024: PPOPN 2
31026: END
// every 0 0$1 trigger s60 do var i , tmp ;
31027: LD_EXP 99
31031: IFFALSE 31100
31033: GO 31035
31035: DISABLE
31036: LD_INT 0
31038: PPUSH
31039: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31040: LD_ADDR_VAR 0 2
31044: PUSH
31045: LD_INT 22
31047: PUSH
31048: LD_OWVAR 2
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PPUSH
31057: CALL_OW 69
31061: ST_TO_ADDR
// if not tmp then
31062: LD_VAR 0 2
31066: NOT
31067: IFFALSE 31071
// exit ;
31069: GO 31100
// for i in tmp do
31071: LD_ADDR_VAR 0 1
31075: PUSH
31076: LD_VAR 0 2
31080: PUSH
31081: FOR_IN
31082: IFFALSE 31098
// SetLives ( i , 600 ) ;
31084: LD_VAR 0 1
31088: PPUSH
31089: LD_INT 600
31091: PPUSH
31092: CALL_OW 234
31096: GO 31081
31098: POP
31099: POP
// end ;
31100: PPOPN 2
31102: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31103: LD_INT 0
31105: PPUSH
// case cmd of 301 :
31106: LD_VAR 0 1
31110: PUSH
31111: LD_INT 301
31113: DOUBLE
31114: EQUAL
31115: IFTRUE 31119
31117: GO 31151
31119: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31120: LD_VAR 0 6
31124: PPUSH
31125: LD_VAR 0 7
31129: PPUSH
31130: LD_VAR 0 8
31134: PPUSH
31135: LD_VAR 0 4
31139: PPUSH
31140: LD_VAR 0 5
31144: PPUSH
31145: CALL 32352 0 5
31149: GO 31272
31151: LD_INT 302
31153: DOUBLE
31154: EQUAL
31155: IFTRUE 31159
31157: GO 31196
31159: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31160: LD_VAR 0 6
31164: PPUSH
31165: LD_VAR 0 7
31169: PPUSH
31170: LD_VAR 0 8
31174: PPUSH
31175: LD_VAR 0 9
31179: PPUSH
31180: LD_VAR 0 4
31184: PPUSH
31185: LD_VAR 0 5
31189: PPUSH
31190: CALL 32443 0 6
31194: GO 31272
31196: LD_INT 303
31198: DOUBLE
31199: EQUAL
31200: IFTRUE 31204
31202: GO 31241
31204: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31205: LD_VAR 0 6
31209: PPUSH
31210: LD_VAR 0 7
31214: PPUSH
31215: LD_VAR 0 8
31219: PPUSH
31220: LD_VAR 0 9
31224: PPUSH
31225: LD_VAR 0 4
31229: PPUSH
31230: LD_VAR 0 5
31234: PPUSH
31235: CALL 31277 0 6
31239: GO 31272
31241: LD_INT 304
31243: DOUBLE
31244: EQUAL
31245: IFTRUE 31249
31247: GO 31271
31249: POP
// hHackTeleport ( unit , x , y ) ; end ;
31250: LD_VAR 0 2
31254: PPUSH
31255: LD_VAR 0 4
31259: PPUSH
31260: LD_VAR 0 5
31264: PPUSH
31265: CALL 33036 0 3
31269: GO 31272
31271: POP
// end ;
31272: LD_VAR 0 12
31276: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31277: LD_INT 0
31279: PPUSH
31280: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31281: LD_VAR 0 1
31285: PUSH
31286: LD_INT 1
31288: LESS
31289: PUSH
31290: LD_VAR 0 1
31294: PUSH
31295: LD_INT 3
31297: GREATER
31298: OR
31299: PUSH
31300: LD_VAR 0 5
31304: PPUSH
31305: LD_VAR 0 6
31309: PPUSH
31310: CALL_OW 428
31314: OR
31315: IFFALSE 31319
// exit ;
31317: GO 32039
// uc_side := your_side ;
31319: LD_ADDR_OWVAR 20
31323: PUSH
31324: LD_OWVAR 2
31328: ST_TO_ADDR
// uc_nation := nation ;
31329: LD_ADDR_OWVAR 21
31333: PUSH
31334: LD_VAR 0 1
31338: ST_TO_ADDR
// bc_level = 1 ;
31339: LD_ADDR_OWVAR 43
31343: PUSH
31344: LD_INT 1
31346: ST_TO_ADDR
// case btype of 1 :
31347: LD_VAR 0 2
31351: PUSH
31352: LD_INT 1
31354: DOUBLE
31355: EQUAL
31356: IFTRUE 31360
31358: GO 31371
31360: POP
// bc_type := b_depot ; 2 :
31361: LD_ADDR_OWVAR 42
31365: PUSH
31366: LD_INT 0
31368: ST_TO_ADDR
31369: GO 31983
31371: LD_INT 2
31373: DOUBLE
31374: EQUAL
31375: IFTRUE 31379
31377: GO 31390
31379: POP
// bc_type := b_warehouse ; 3 :
31380: LD_ADDR_OWVAR 42
31384: PUSH
31385: LD_INT 1
31387: ST_TO_ADDR
31388: GO 31983
31390: LD_INT 3
31392: DOUBLE
31393: EQUAL
31394: IFTRUE 31398
31396: GO 31409
31398: POP
// bc_type := b_lab ; 4 .. 9 :
31399: LD_ADDR_OWVAR 42
31403: PUSH
31404: LD_INT 6
31406: ST_TO_ADDR
31407: GO 31983
31409: LD_INT 4
31411: DOUBLE
31412: GREATEREQUAL
31413: IFFALSE 31421
31415: LD_INT 9
31417: DOUBLE
31418: LESSEQUAL
31419: IFTRUE 31423
31421: GO 31475
31423: POP
// begin bc_type := b_lab_half ;
31424: LD_ADDR_OWVAR 42
31428: PUSH
31429: LD_INT 7
31431: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31432: LD_ADDR_OWVAR 44
31436: PUSH
31437: LD_INT 10
31439: PUSH
31440: LD_INT 11
31442: PUSH
31443: LD_INT 12
31445: PUSH
31446: LD_INT 15
31448: PUSH
31449: LD_INT 14
31451: PUSH
31452: LD_INT 13
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: PUSH
31463: LD_VAR 0 2
31467: PUSH
31468: LD_INT 3
31470: MINUS
31471: ARRAY
31472: ST_TO_ADDR
// end ; 10 .. 13 :
31473: GO 31983
31475: LD_INT 10
31477: DOUBLE
31478: GREATEREQUAL
31479: IFFALSE 31487
31481: LD_INT 13
31483: DOUBLE
31484: LESSEQUAL
31485: IFTRUE 31489
31487: GO 31566
31489: POP
// begin bc_type := b_lab_full ;
31490: LD_ADDR_OWVAR 42
31494: PUSH
31495: LD_INT 8
31497: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31498: LD_ADDR_OWVAR 44
31502: PUSH
31503: LD_INT 10
31505: PUSH
31506: LD_INT 12
31508: PUSH
31509: LD_INT 14
31511: PUSH
31512: LD_INT 13
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: PUSH
31521: LD_VAR 0 2
31525: PUSH
31526: LD_INT 9
31528: MINUS
31529: ARRAY
31530: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31531: LD_ADDR_OWVAR 45
31535: PUSH
31536: LD_INT 11
31538: PUSH
31539: LD_INT 15
31541: PUSH
31542: LD_INT 12
31544: PUSH
31545: LD_INT 15
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: PUSH
31554: LD_VAR 0 2
31558: PUSH
31559: LD_INT 9
31561: MINUS
31562: ARRAY
31563: ST_TO_ADDR
// end ; 14 :
31564: GO 31983
31566: LD_INT 14
31568: DOUBLE
31569: EQUAL
31570: IFTRUE 31574
31572: GO 31585
31574: POP
// bc_type := b_workshop ; 15 :
31575: LD_ADDR_OWVAR 42
31579: PUSH
31580: LD_INT 2
31582: ST_TO_ADDR
31583: GO 31983
31585: LD_INT 15
31587: DOUBLE
31588: EQUAL
31589: IFTRUE 31593
31591: GO 31604
31593: POP
// bc_type := b_factory ; 16 :
31594: LD_ADDR_OWVAR 42
31598: PUSH
31599: LD_INT 3
31601: ST_TO_ADDR
31602: GO 31983
31604: LD_INT 16
31606: DOUBLE
31607: EQUAL
31608: IFTRUE 31612
31610: GO 31623
31612: POP
// bc_type := b_ext_gun ; 17 :
31613: LD_ADDR_OWVAR 42
31617: PUSH
31618: LD_INT 17
31620: ST_TO_ADDR
31621: GO 31983
31623: LD_INT 17
31625: DOUBLE
31626: EQUAL
31627: IFTRUE 31631
31629: GO 31659
31631: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31632: LD_ADDR_OWVAR 42
31636: PUSH
31637: LD_INT 19
31639: PUSH
31640: LD_INT 23
31642: PUSH
31643: LD_INT 19
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: PUSH
31651: LD_VAR 0 1
31655: ARRAY
31656: ST_TO_ADDR
31657: GO 31983
31659: LD_INT 18
31661: DOUBLE
31662: EQUAL
31663: IFTRUE 31667
31665: GO 31678
31667: POP
// bc_type := b_ext_radar ; 19 :
31668: LD_ADDR_OWVAR 42
31672: PUSH
31673: LD_INT 20
31675: ST_TO_ADDR
31676: GO 31983
31678: LD_INT 19
31680: DOUBLE
31681: EQUAL
31682: IFTRUE 31686
31684: GO 31697
31686: POP
// bc_type := b_ext_radio ; 20 :
31687: LD_ADDR_OWVAR 42
31691: PUSH
31692: LD_INT 22
31694: ST_TO_ADDR
31695: GO 31983
31697: LD_INT 20
31699: DOUBLE
31700: EQUAL
31701: IFTRUE 31705
31703: GO 31716
31705: POP
// bc_type := b_ext_siberium ; 21 :
31706: LD_ADDR_OWVAR 42
31710: PUSH
31711: LD_INT 21
31713: ST_TO_ADDR
31714: GO 31983
31716: LD_INT 21
31718: DOUBLE
31719: EQUAL
31720: IFTRUE 31724
31722: GO 31735
31724: POP
// bc_type := b_ext_computer ; 22 :
31725: LD_ADDR_OWVAR 42
31729: PUSH
31730: LD_INT 24
31732: ST_TO_ADDR
31733: GO 31983
31735: LD_INT 22
31737: DOUBLE
31738: EQUAL
31739: IFTRUE 31743
31741: GO 31754
31743: POP
// bc_type := b_ext_track ; 23 :
31744: LD_ADDR_OWVAR 42
31748: PUSH
31749: LD_INT 16
31751: ST_TO_ADDR
31752: GO 31983
31754: LD_INT 23
31756: DOUBLE
31757: EQUAL
31758: IFTRUE 31762
31760: GO 31773
31762: POP
// bc_type := b_ext_laser ; 24 :
31763: LD_ADDR_OWVAR 42
31767: PUSH
31768: LD_INT 25
31770: ST_TO_ADDR
31771: GO 31983
31773: LD_INT 24
31775: DOUBLE
31776: EQUAL
31777: IFTRUE 31781
31779: GO 31792
31781: POP
// bc_type := b_control_tower ; 25 :
31782: LD_ADDR_OWVAR 42
31786: PUSH
31787: LD_INT 36
31789: ST_TO_ADDR
31790: GO 31983
31792: LD_INT 25
31794: DOUBLE
31795: EQUAL
31796: IFTRUE 31800
31798: GO 31811
31800: POP
// bc_type := b_breastwork ; 26 :
31801: LD_ADDR_OWVAR 42
31805: PUSH
31806: LD_INT 31
31808: ST_TO_ADDR
31809: GO 31983
31811: LD_INT 26
31813: DOUBLE
31814: EQUAL
31815: IFTRUE 31819
31817: GO 31830
31819: POP
// bc_type := b_bunker ; 27 :
31820: LD_ADDR_OWVAR 42
31824: PUSH
31825: LD_INT 32
31827: ST_TO_ADDR
31828: GO 31983
31830: LD_INT 27
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31849
31838: POP
// bc_type := b_turret ; 28 :
31839: LD_ADDR_OWVAR 42
31843: PUSH
31844: LD_INT 33
31846: ST_TO_ADDR
31847: GO 31983
31849: LD_INT 28
31851: DOUBLE
31852: EQUAL
31853: IFTRUE 31857
31855: GO 31868
31857: POP
// bc_type := b_armoury ; 29 :
31858: LD_ADDR_OWVAR 42
31862: PUSH
31863: LD_INT 4
31865: ST_TO_ADDR
31866: GO 31983
31868: LD_INT 29
31870: DOUBLE
31871: EQUAL
31872: IFTRUE 31876
31874: GO 31887
31876: POP
// bc_type := b_barracks ; 30 :
31877: LD_ADDR_OWVAR 42
31881: PUSH
31882: LD_INT 5
31884: ST_TO_ADDR
31885: GO 31983
31887: LD_INT 30
31889: DOUBLE
31890: EQUAL
31891: IFTRUE 31895
31893: GO 31906
31895: POP
// bc_type := b_solar_power ; 31 :
31896: LD_ADDR_OWVAR 42
31900: PUSH
31901: LD_INT 27
31903: ST_TO_ADDR
31904: GO 31983
31906: LD_INT 31
31908: DOUBLE
31909: EQUAL
31910: IFTRUE 31914
31912: GO 31925
31914: POP
// bc_type := b_oil_power ; 32 :
31915: LD_ADDR_OWVAR 42
31919: PUSH
31920: LD_INT 26
31922: ST_TO_ADDR
31923: GO 31983
31925: LD_INT 32
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31944
31933: POP
// bc_type := b_siberite_power ; 33 :
31934: LD_ADDR_OWVAR 42
31938: PUSH
31939: LD_INT 28
31941: ST_TO_ADDR
31942: GO 31983
31944: LD_INT 33
31946: DOUBLE
31947: EQUAL
31948: IFTRUE 31952
31950: GO 31963
31952: POP
// bc_type := b_oil_mine ; 34 :
31953: LD_ADDR_OWVAR 42
31957: PUSH
31958: LD_INT 29
31960: ST_TO_ADDR
31961: GO 31983
31963: LD_INT 34
31965: DOUBLE
31966: EQUAL
31967: IFTRUE 31971
31969: GO 31982
31971: POP
// bc_type := b_siberite_mine ; end ;
31972: LD_ADDR_OWVAR 42
31976: PUSH
31977: LD_INT 30
31979: ST_TO_ADDR
31980: GO 31983
31982: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31983: LD_ADDR_VAR 0 8
31987: PUSH
31988: LD_VAR 0 5
31992: PPUSH
31993: LD_VAR 0 6
31997: PPUSH
31998: LD_VAR 0 3
32002: PPUSH
32003: CALL_OW 47
32007: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32008: LD_OWVAR 42
32012: PUSH
32013: LD_INT 32
32015: PUSH
32016: LD_INT 33
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: IN
32023: IFFALSE 32039
// PlaceWeaponTurret ( b , weapon ) ;
32025: LD_VAR 0 8
32029: PPUSH
32030: LD_VAR 0 4
32034: PPUSH
32035: CALL_OW 431
// end ;
32039: LD_VAR 0 7
32043: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32044: LD_INT 0
32046: PPUSH
32047: PPUSH
32048: PPUSH
32049: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32050: LD_ADDR_VAR 0 4
32054: PUSH
32055: LD_INT 22
32057: PUSH
32058: LD_OWVAR 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: LD_INT 30
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 30
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PPUSH
32099: CALL_OW 69
32103: ST_TO_ADDR
// if not tmp then
32104: LD_VAR 0 4
32108: NOT
32109: IFFALSE 32113
// exit ;
32111: GO 32172
// for i in tmp do
32113: LD_ADDR_VAR 0 2
32117: PUSH
32118: LD_VAR 0 4
32122: PUSH
32123: FOR_IN
32124: IFFALSE 32170
// for j = 1 to 3 do
32126: LD_ADDR_VAR 0 3
32130: PUSH
32131: DOUBLE
32132: LD_INT 1
32134: DEC
32135: ST_TO_ADDR
32136: LD_INT 3
32138: PUSH
32139: FOR_TO
32140: IFFALSE 32166
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32142: LD_VAR 0 2
32146: PPUSH
32147: CALL_OW 274
32151: PPUSH
32152: LD_VAR 0 3
32156: PPUSH
32157: LD_INT 99999
32159: PPUSH
32160: CALL_OW 277
32164: GO 32139
32166: POP
32167: POP
32168: GO 32123
32170: POP
32171: POP
// end ;
32172: LD_VAR 0 1
32176: RET
// export function hHackSetLevel10 ; var i , j ; begin
32177: LD_INT 0
32179: PPUSH
32180: PPUSH
32181: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32182: LD_ADDR_VAR 0 2
32186: PUSH
32187: LD_INT 21
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PPUSH
32197: CALL_OW 69
32201: PUSH
32202: FOR_IN
32203: IFFALSE 32255
// if IsSelected ( i ) then
32205: LD_VAR 0 2
32209: PPUSH
32210: CALL_OW 306
32214: IFFALSE 32253
// begin for j := 1 to 4 do
32216: LD_ADDR_VAR 0 3
32220: PUSH
32221: DOUBLE
32222: LD_INT 1
32224: DEC
32225: ST_TO_ADDR
32226: LD_INT 4
32228: PUSH
32229: FOR_TO
32230: IFFALSE 32251
// SetSkill ( i , j , 10 ) ;
32232: LD_VAR 0 2
32236: PPUSH
32237: LD_VAR 0 3
32241: PPUSH
32242: LD_INT 10
32244: PPUSH
32245: CALL_OW 237
32249: GO 32229
32251: POP
32252: POP
// end ;
32253: GO 32202
32255: POP
32256: POP
// end ;
32257: LD_VAR 0 1
32261: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32262: LD_INT 0
32264: PPUSH
32265: PPUSH
32266: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32267: LD_ADDR_VAR 0 2
32271: PUSH
32272: LD_INT 22
32274: PUSH
32275: LD_OWVAR 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 21
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PPUSH
32298: CALL_OW 69
32302: PUSH
32303: FOR_IN
32304: IFFALSE 32345
// begin for j := 1 to 4 do
32306: LD_ADDR_VAR 0 3
32310: PUSH
32311: DOUBLE
32312: LD_INT 1
32314: DEC
32315: ST_TO_ADDR
32316: LD_INT 4
32318: PUSH
32319: FOR_TO
32320: IFFALSE 32341
// SetSkill ( i , j , 10 ) ;
32322: LD_VAR 0 2
32326: PPUSH
32327: LD_VAR 0 3
32331: PPUSH
32332: LD_INT 10
32334: PPUSH
32335: CALL_OW 237
32339: GO 32319
32341: POP
32342: POP
// end ;
32343: GO 32303
32345: POP
32346: POP
// end ;
32347: LD_VAR 0 1
32351: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32352: LD_INT 0
32354: PPUSH
// uc_side := your_side ;
32355: LD_ADDR_OWVAR 20
32359: PUSH
32360: LD_OWVAR 2
32364: ST_TO_ADDR
// uc_nation := nation ;
32365: LD_ADDR_OWVAR 21
32369: PUSH
32370: LD_VAR 0 1
32374: ST_TO_ADDR
// InitHc ;
32375: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32379: LD_INT 0
32381: PPUSH
32382: LD_VAR 0 2
32386: PPUSH
32387: LD_VAR 0 3
32391: PPUSH
32392: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32396: LD_VAR 0 4
32400: PPUSH
32401: LD_VAR 0 5
32405: PPUSH
32406: CALL_OW 428
32410: PUSH
32411: LD_INT 0
32413: EQUAL
32414: IFFALSE 32438
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32416: CALL_OW 44
32420: PPUSH
32421: LD_VAR 0 4
32425: PPUSH
32426: LD_VAR 0 5
32430: PPUSH
32431: LD_INT 1
32433: PPUSH
32434: CALL_OW 48
// end ;
32438: LD_VAR 0 6
32442: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32443: LD_INT 0
32445: PPUSH
32446: PPUSH
// uc_side := your_side ;
32447: LD_ADDR_OWVAR 20
32451: PUSH
32452: LD_OWVAR 2
32456: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32457: LD_VAR 0 1
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 3
32470: PUSH
32471: LD_INT 4
32473: PUSH
32474: LD_INT 5
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: IN
32484: IFFALSE 32496
// uc_nation := nation_american else
32486: LD_ADDR_OWVAR 21
32490: PUSH
32491: LD_INT 1
32493: ST_TO_ADDR
32494: GO 32539
// if chassis in [ 11 , 12 , 13 , 14 ] then
32496: LD_VAR 0 1
32500: PUSH
32501: LD_INT 11
32503: PUSH
32504: LD_INT 12
32506: PUSH
32507: LD_INT 13
32509: PUSH
32510: LD_INT 14
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: IN
32519: IFFALSE 32531
// uc_nation := nation_arabian else
32521: LD_ADDR_OWVAR 21
32525: PUSH
32526: LD_INT 2
32528: ST_TO_ADDR
32529: GO 32539
// uc_nation := nation_russian ;
32531: LD_ADDR_OWVAR 21
32535: PUSH
32536: LD_INT 3
32538: ST_TO_ADDR
// vc_chassis := chassis ;
32539: LD_ADDR_OWVAR 37
32543: PUSH
32544: LD_VAR 0 1
32548: ST_TO_ADDR
// vc_engine := engine ;
32549: LD_ADDR_OWVAR 39
32553: PUSH
32554: LD_VAR 0 2
32558: ST_TO_ADDR
// vc_control := control ;
32559: LD_ADDR_OWVAR 38
32563: PUSH
32564: LD_VAR 0 3
32568: ST_TO_ADDR
// vc_weapon := weapon ;
32569: LD_ADDR_OWVAR 40
32573: PUSH
32574: LD_VAR 0 4
32578: ST_TO_ADDR
// un := CreateVehicle ;
32579: LD_ADDR_VAR 0 8
32583: PUSH
32584: CALL_OW 45
32588: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32589: LD_VAR 0 8
32593: PPUSH
32594: LD_INT 0
32596: PPUSH
32597: LD_INT 5
32599: PPUSH
32600: CALL_OW 12
32604: PPUSH
32605: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32609: LD_VAR 0 8
32613: PPUSH
32614: LD_VAR 0 5
32618: PPUSH
32619: LD_VAR 0 6
32623: PPUSH
32624: LD_INT 1
32626: PPUSH
32627: CALL_OW 48
// end ;
32631: LD_VAR 0 7
32635: RET
// export hInvincible ; every 1 do
32636: GO 32638
32638: DISABLE
// hInvincible := [ ] ;
32639: LD_ADDR_EXP 100
32643: PUSH
32644: EMPTY
32645: ST_TO_ADDR
32646: END
// every 10 do var i ;
32647: GO 32649
32649: DISABLE
32650: LD_INT 0
32652: PPUSH
// begin enable ;
32653: ENABLE
// if not hInvincible then
32654: LD_EXP 100
32658: NOT
32659: IFFALSE 32663
// exit ;
32661: GO 32707
// for i in hInvincible do
32663: LD_ADDR_VAR 0 1
32667: PUSH
32668: LD_EXP 100
32672: PUSH
32673: FOR_IN
32674: IFFALSE 32705
// if GetLives ( i ) < 1000 then
32676: LD_VAR 0 1
32680: PPUSH
32681: CALL_OW 256
32685: PUSH
32686: LD_INT 1000
32688: LESS
32689: IFFALSE 32703
// SetLives ( i , 1000 ) ;
32691: LD_VAR 0 1
32695: PPUSH
32696: LD_INT 1000
32698: PPUSH
32699: CALL_OW 234
32703: GO 32673
32705: POP
32706: POP
// end ;
32707: PPOPN 1
32709: END
// export function hHackInvincible ; var i ; begin
32710: LD_INT 0
32712: PPUSH
32713: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32714: LD_ADDR_VAR 0 2
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 21
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 21
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: PPUSH
32747: CALL_OW 69
32751: PUSH
32752: FOR_IN
32753: IFFALSE 32814
// if IsSelected ( i ) then
32755: LD_VAR 0 2
32759: PPUSH
32760: CALL_OW 306
32764: IFFALSE 32812
// begin if i in hInvincible then
32766: LD_VAR 0 2
32770: PUSH
32771: LD_EXP 100
32775: IN
32776: IFFALSE 32796
// hInvincible := hInvincible diff i else
32778: LD_ADDR_EXP 100
32782: PUSH
32783: LD_EXP 100
32787: PUSH
32788: LD_VAR 0 2
32792: DIFF
32793: ST_TO_ADDR
32794: GO 32812
// hInvincible := hInvincible union i ;
32796: LD_ADDR_EXP 100
32800: PUSH
32801: LD_EXP 100
32805: PUSH
32806: LD_VAR 0 2
32810: UNION
32811: ST_TO_ADDR
// end ;
32812: GO 32752
32814: POP
32815: POP
// end ;
32816: LD_VAR 0 1
32820: RET
// export function hHackInvisible ; var i , j ; begin
32821: LD_INT 0
32823: PPUSH
32824: PPUSH
32825: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32826: LD_ADDR_VAR 0 2
32830: PUSH
32831: LD_INT 21
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PPUSH
32841: CALL_OW 69
32845: PUSH
32846: FOR_IN
32847: IFFALSE 32871
// if IsSelected ( i ) then
32849: LD_VAR 0 2
32853: PPUSH
32854: CALL_OW 306
32858: IFFALSE 32869
// ComForceInvisible ( i ) ;
32860: LD_VAR 0 2
32864: PPUSH
32865: CALL_OW 496
32869: GO 32846
32871: POP
32872: POP
// end ;
32873: LD_VAR 0 1
32877: RET
// export function hHackChangeYourSide ; begin
32878: LD_INT 0
32880: PPUSH
// if your_side = 8 then
32881: LD_OWVAR 2
32885: PUSH
32886: LD_INT 8
32888: EQUAL
32889: IFFALSE 32901
// your_side := 0 else
32891: LD_ADDR_OWVAR 2
32895: PUSH
32896: LD_INT 0
32898: ST_TO_ADDR
32899: GO 32915
// your_side := your_side + 1 ;
32901: LD_ADDR_OWVAR 2
32905: PUSH
32906: LD_OWVAR 2
32910: PUSH
32911: LD_INT 1
32913: PLUS
32914: ST_TO_ADDR
// end ;
32915: LD_VAR 0 1
32919: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32920: LD_INT 0
32922: PPUSH
32923: PPUSH
32924: PPUSH
// for i in all_units do
32925: LD_ADDR_VAR 0 2
32929: PUSH
32930: LD_OWVAR 3
32934: PUSH
32935: FOR_IN
32936: IFFALSE 33014
// if IsSelected ( i ) then
32938: LD_VAR 0 2
32942: PPUSH
32943: CALL_OW 306
32947: IFFALSE 33012
// begin j := GetSide ( i ) ;
32949: LD_ADDR_VAR 0 3
32953: PUSH
32954: LD_VAR 0 2
32958: PPUSH
32959: CALL_OW 255
32963: ST_TO_ADDR
// if j = 8 then
32964: LD_VAR 0 3
32968: PUSH
32969: LD_INT 8
32971: EQUAL
32972: IFFALSE 32984
// j := 0 else
32974: LD_ADDR_VAR 0 3
32978: PUSH
32979: LD_INT 0
32981: ST_TO_ADDR
32982: GO 32998
// j := j + 1 ;
32984: LD_ADDR_VAR 0 3
32988: PUSH
32989: LD_VAR 0 3
32993: PUSH
32994: LD_INT 1
32996: PLUS
32997: ST_TO_ADDR
// SetSide ( i , j ) ;
32998: LD_VAR 0 2
33002: PPUSH
33003: LD_VAR 0 3
33007: PPUSH
33008: CALL_OW 235
// end ;
33012: GO 32935
33014: POP
33015: POP
// end ;
33016: LD_VAR 0 1
33020: RET
// export function hHackFog ; begin
33021: LD_INT 0
33023: PPUSH
// FogOff ( true ) ;
33024: LD_INT 1
33026: PPUSH
33027: CALL_OW 344
// end ;
33031: LD_VAR 0 1
33035: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33036: LD_INT 0
33038: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33039: LD_VAR 0 1
33043: PPUSH
33044: LD_VAR 0 2
33048: PPUSH
33049: LD_VAR 0 3
33053: PPUSH
33054: LD_INT 1
33056: PPUSH
33057: LD_INT 1
33059: PPUSH
33060: CALL_OW 483
// CenterOnXY ( x , y ) ;
33064: LD_VAR 0 2
33068: PPUSH
33069: LD_VAR 0 3
33073: PPUSH
33074: CALL_OW 84
// end ;
33078: LD_VAR 0 4
33082: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33083: LD_INT 0
33085: PPUSH
33086: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33087: LD_VAR 0 1
33091: NOT
33092: PUSH
33093: LD_VAR 0 2
33097: PPUSH
33098: LD_VAR 0 3
33102: PPUSH
33103: CALL_OW 488
33107: NOT
33108: OR
33109: PUSH
33110: LD_VAR 0 1
33114: PPUSH
33115: CALL_OW 266
33119: PUSH
33120: LD_INT 3
33122: NONEQUAL
33123: PUSH
33124: LD_VAR 0 1
33128: PPUSH
33129: CALL_OW 247
33133: PUSH
33134: LD_INT 1
33136: EQUAL
33137: NOT
33138: AND
33139: OR
33140: IFFALSE 33144
// exit ;
33142: GO 33293
// if GetType ( factory ) = unit_human then
33144: LD_VAR 0 1
33148: PPUSH
33149: CALL_OW 247
33153: PUSH
33154: LD_INT 1
33156: EQUAL
33157: IFFALSE 33174
// factory := IsInUnit ( factory ) ;
33159: LD_ADDR_VAR 0 1
33163: PUSH
33164: LD_VAR 0 1
33168: PPUSH
33169: CALL_OW 310
33173: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33174: LD_VAR 0 1
33178: PPUSH
33179: CALL_OW 266
33183: PUSH
33184: LD_INT 3
33186: NONEQUAL
33187: IFFALSE 33191
// exit ;
33189: GO 33293
// if HexInfo ( x , y ) = factory then
33191: LD_VAR 0 2
33195: PPUSH
33196: LD_VAR 0 3
33200: PPUSH
33201: CALL_OW 428
33205: PUSH
33206: LD_VAR 0 1
33210: EQUAL
33211: IFFALSE 33238
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33213: LD_ADDR_EXP 101
33217: PUSH
33218: LD_EXP 101
33222: PPUSH
33223: LD_VAR 0 1
33227: PPUSH
33228: LD_INT 0
33230: PPUSH
33231: CALL_OW 1
33235: ST_TO_ADDR
33236: GO 33289
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33238: LD_ADDR_EXP 101
33242: PUSH
33243: LD_EXP 101
33247: PPUSH
33248: LD_VAR 0 1
33252: PPUSH
33253: LD_VAR 0 1
33257: PPUSH
33258: CALL_OW 255
33262: PUSH
33263: LD_VAR 0 1
33267: PUSH
33268: LD_VAR 0 2
33272: PUSH
33273: LD_VAR 0 3
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: PPUSH
33284: CALL_OW 1
33288: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33289: CALL 33298 0 0
// end ;
33293: LD_VAR 0 4
33297: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33298: LD_INT 0
33300: PPUSH
33301: PPUSH
33302: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33303: LD_STRING resetFactoryWaypoint();
33305: PPUSH
33306: CALL_OW 559
// if factoryWaypoints then
33310: LD_EXP 101
33314: IFFALSE 33440
// begin list := PrepareArray ( factoryWaypoints ) ;
33316: LD_ADDR_VAR 0 3
33320: PUSH
33321: LD_EXP 101
33325: PPUSH
33326: CALL 79817 0 1
33330: ST_TO_ADDR
// for i := 1 to list do
33331: LD_ADDR_VAR 0 2
33335: PUSH
33336: DOUBLE
33337: LD_INT 1
33339: DEC
33340: ST_TO_ADDR
33341: LD_VAR 0 3
33345: PUSH
33346: FOR_TO
33347: IFFALSE 33438
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33349: LD_STRING setFactoryWaypointXY(
33351: PUSH
33352: LD_VAR 0 3
33356: PUSH
33357: LD_VAR 0 2
33361: ARRAY
33362: PUSH
33363: LD_INT 1
33365: ARRAY
33366: STR
33367: PUSH
33368: LD_STRING ,
33370: STR
33371: PUSH
33372: LD_VAR 0 3
33376: PUSH
33377: LD_VAR 0 2
33381: ARRAY
33382: PUSH
33383: LD_INT 2
33385: ARRAY
33386: STR
33387: PUSH
33388: LD_STRING ,
33390: STR
33391: PUSH
33392: LD_VAR 0 3
33396: PUSH
33397: LD_VAR 0 2
33401: ARRAY
33402: PUSH
33403: LD_INT 3
33405: ARRAY
33406: STR
33407: PUSH
33408: LD_STRING ,
33410: STR
33411: PUSH
33412: LD_VAR 0 3
33416: PUSH
33417: LD_VAR 0 2
33421: ARRAY
33422: PUSH
33423: LD_INT 4
33425: ARRAY
33426: STR
33427: PUSH
33428: LD_STRING )
33430: STR
33431: PPUSH
33432: CALL_OW 559
33436: GO 33346
33438: POP
33439: POP
// end ; end ;
33440: LD_VAR 0 1
33444: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33445: LD_INT 0
33447: PPUSH
// if HexInfo ( x , y ) = warehouse then
33448: LD_VAR 0 2
33452: PPUSH
33453: LD_VAR 0 3
33457: PPUSH
33458: CALL_OW 428
33462: PUSH
33463: LD_VAR 0 1
33467: EQUAL
33468: IFFALSE 33495
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33470: LD_ADDR_EXP 102
33474: PUSH
33475: LD_EXP 102
33479: PPUSH
33480: LD_VAR 0 1
33484: PPUSH
33485: LD_INT 0
33487: PPUSH
33488: CALL_OW 1
33492: ST_TO_ADDR
33493: GO 33546
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33495: LD_ADDR_EXP 102
33499: PUSH
33500: LD_EXP 102
33504: PPUSH
33505: LD_VAR 0 1
33509: PPUSH
33510: LD_VAR 0 1
33514: PPUSH
33515: CALL_OW 255
33519: PUSH
33520: LD_VAR 0 1
33524: PUSH
33525: LD_VAR 0 2
33529: PUSH
33530: LD_VAR 0 3
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: PPUSH
33541: CALL_OW 1
33545: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33546: CALL 33555 0 0
// end ;
33550: LD_VAR 0 4
33554: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33555: LD_INT 0
33557: PPUSH
33558: PPUSH
33559: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33560: LD_STRING resetWarehouseGatheringPoints();
33562: PPUSH
33563: CALL_OW 559
// if warehouseGatheringPoints then
33567: LD_EXP 102
33571: IFFALSE 33697
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33573: LD_ADDR_VAR 0 3
33577: PUSH
33578: LD_EXP 102
33582: PPUSH
33583: CALL 79817 0 1
33587: ST_TO_ADDR
// for i := 1 to list do
33588: LD_ADDR_VAR 0 2
33592: PUSH
33593: DOUBLE
33594: LD_INT 1
33596: DEC
33597: ST_TO_ADDR
33598: LD_VAR 0 3
33602: PUSH
33603: FOR_TO
33604: IFFALSE 33695
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33606: LD_STRING setWarehouseGatheringPointXY(
33608: PUSH
33609: LD_VAR 0 3
33613: PUSH
33614: LD_VAR 0 2
33618: ARRAY
33619: PUSH
33620: LD_INT 1
33622: ARRAY
33623: STR
33624: PUSH
33625: LD_STRING ,
33627: STR
33628: PUSH
33629: LD_VAR 0 3
33633: PUSH
33634: LD_VAR 0 2
33638: ARRAY
33639: PUSH
33640: LD_INT 2
33642: ARRAY
33643: STR
33644: PUSH
33645: LD_STRING ,
33647: STR
33648: PUSH
33649: LD_VAR 0 3
33653: PUSH
33654: LD_VAR 0 2
33658: ARRAY
33659: PUSH
33660: LD_INT 3
33662: ARRAY
33663: STR
33664: PUSH
33665: LD_STRING ,
33667: STR
33668: PUSH
33669: LD_VAR 0 3
33673: PUSH
33674: LD_VAR 0 2
33678: ARRAY
33679: PUSH
33680: LD_INT 4
33682: ARRAY
33683: STR
33684: PUSH
33685: LD_STRING )
33687: STR
33688: PPUSH
33689: CALL_OW 559
33693: GO 33603
33695: POP
33696: POP
// end ; end ;
33697: LD_VAR 0 1
33701: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33702: LD_EXP 102
33706: IFFALSE 34391
33708: GO 33710
33710: DISABLE
33711: LD_INT 0
33713: PPUSH
33714: PPUSH
33715: PPUSH
33716: PPUSH
33717: PPUSH
33718: PPUSH
33719: PPUSH
33720: PPUSH
33721: PPUSH
// begin enable ;
33722: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33723: LD_ADDR_VAR 0 3
33727: PUSH
33728: LD_EXP 102
33732: PPUSH
33733: CALL 79817 0 1
33737: ST_TO_ADDR
// if not list then
33738: LD_VAR 0 3
33742: NOT
33743: IFFALSE 33747
// exit ;
33745: GO 34391
// for i := 1 to list do
33747: LD_ADDR_VAR 0 1
33751: PUSH
33752: DOUBLE
33753: LD_INT 1
33755: DEC
33756: ST_TO_ADDR
33757: LD_VAR 0 3
33761: PUSH
33762: FOR_TO
33763: IFFALSE 34389
// begin depot := list [ i ] [ 2 ] ;
33765: LD_ADDR_VAR 0 8
33769: PUSH
33770: LD_VAR 0 3
33774: PUSH
33775: LD_VAR 0 1
33779: ARRAY
33780: PUSH
33781: LD_INT 2
33783: ARRAY
33784: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33785: LD_ADDR_VAR 0 5
33789: PUSH
33790: LD_VAR 0 3
33794: PUSH
33795: LD_VAR 0 1
33799: ARRAY
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33805: LD_VAR 0 8
33809: PPUSH
33810: CALL_OW 301
33814: PUSH
33815: LD_VAR 0 5
33819: PUSH
33820: LD_VAR 0 8
33824: PPUSH
33825: CALL_OW 255
33829: NONEQUAL
33830: OR
33831: IFFALSE 33860
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33833: LD_ADDR_EXP 102
33837: PUSH
33838: LD_EXP 102
33842: PPUSH
33843: LD_VAR 0 8
33847: PPUSH
33848: LD_INT 0
33850: PPUSH
33851: CALL_OW 1
33855: ST_TO_ADDR
// exit ;
33856: POP
33857: POP
33858: GO 34391
// end ; x := list [ i ] [ 3 ] ;
33860: LD_ADDR_VAR 0 6
33864: PUSH
33865: LD_VAR 0 3
33869: PUSH
33870: LD_VAR 0 1
33874: ARRAY
33875: PUSH
33876: LD_INT 3
33878: ARRAY
33879: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33880: LD_ADDR_VAR 0 7
33884: PUSH
33885: LD_VAR 0 3
33889: PUSH
33890: LD_VAR 0 1
33894: ARRAY
33895: PUSH
33896: LD_INT 4
33898: ARRAY
33899: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33900: LD_ADDR_VAR 0 9
33904: PUSH
33905: LD_VAR 0 6
33909: PPUSH
33910: LD_VAR 0 7
33914: PPUSH
33915: LD_INT 16
33917: PPUSH
33918: CALL 78405 0 3
33922: ST_TO_ADDR
// if not cratesNearbyPoint then
33923: LD_VAR 0 9
33927: NOT
33928: IFFALSE 33934
// exit ;
33930: POP
33931: POP
33932: GO 34391
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33934: LD_ADDR_VAR 0 4
33938: PUSH
33939: LD_INT 22
33941: PUSH
33942: LD_VAR 0 5
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 3
33953: PUSH
33954: LD_INT 60
33956: PUSH
33957: EMPTY
33958: LIST
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 91
33966: PUSH
33967: LD_VAR 0 8
33971: PUSH
33972: LD_INT 6
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 2
33982: PUSH
33983: LD_INT 25
33985: PUSH
33986: LD_INT 2
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 25
33995: PUSH
33996: LD_INT 16
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: LIST
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: PPUSH
34014: CALL_OW 69
34018: PUSH
34019: LD_VAR 0 8
34023: PPUSH
34024: CALL_OW 313
34028: PPUSH
34029: LD_INT 3
34031: PUSH
34032: LD_INT 60
34034: PUSH
34035: EMPTY
34036: LIST
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: LD_INT 25
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 25
34057: PUSH
34058: LD_INT 16
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PPUSH
34074: CALL_OW 72
34078: UNION
34079: ST_TO_ADDR
// if tmp then
34080: LD_VAR 0 4
34084: IFFALSE 34164
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34086: LD_ADDR_VAR 0 4
34090: PUSH
34091: LD_VAR 0 4
34095: PPUSH
34096: LD_INT 3
34098: PPUSH
34099: CALL 76374 0 2
34103: ST_TO_ADDR
// for j in tmp do
34104: LD_ADDR_VAR 0 2
34108: PUSH
34109: LD_VAR 0 4
34113: PUSH
34114: FOR_IN
34115: IFFALSE 34158
// begin if IsInUnit ( j ) then
34117: LD_VAR 0 2
34121: PPUSH
34122: CALL_OW 310
34126: IFFALSE 34137
// ComExit ( j ) ;
34128: LD_VAR 0 2
34132: PPUSH
34133: CALL 76457 0 1
// AddComCollect ( j , x , y ) ;
34137: LD_VAR 0 2
34141: PPUSH
34142: LD_VAR 0 6
34146: PPUSH
34147: LD_VAR 0 7
34151: PPUSH
34152: CALL_OW 177
// end ;
34156: GO 34114
34158: POP
34159: POP
// exit ;
34160: POP
34161: POP
34162: GO 34391
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34164: LD_ADDR_VAR 0 4
34168: PUSH
34169: LD_INT 22
34171: PUSH
34172: LD_VAR 0 5
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 91
34183: PUSH
34184: LD_VAR 0 8
34188: PUSH
34189: LD_INT 8
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: LD_INT 34
34202: PUSH
34203: LD_INT 12
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 34
34212: PUSH
34213: LD_INT 51
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 34
34222: PUSH
34223: LD_INT 32
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 34
34232: PUSH
34233: LD_INT 89
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: PPUSH
34252: CALL_OW 69
34256: ST_TO_ADDR
// if tmp then
34257: LD_VAR 0 4
34261: IFFALSE 34387
// begin for j in tmp do
34263: LD_ADDR_VAR 0 2
34267: PUSH
34268: LD_VAR 0 4
34272: PUSH
34273: FOR_IN
34274: IFFALSE 34385
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34276: LD_VAR 0 2
34280: PPUSH
34281: CALL_OW 262
34285: PUSH
34286: LD_INT 3
34288: EQUAL
34289: PUSH
34290: LD_VAR 0 2
34294: PPUSH
34295: CALL_OW 261
34299: PUSH
34300: LD_INT 20
34302: GREATER
34303: OR
34304: PUSH
34305: LD_VAR 0 2
34309: PPUSH
34310: CALL_OW 314
34314: NOT
34315: AND
34316: PUSH
34317: LD_VAR 0 2
34321: PPUSH
34322: CALL_OW 263
34326: PUSH
34327: LD_INT 1
34329: NONEQUAL
34330: PUSH
34331: LD_VAR 0 2
34335: PPUSH
34336: CALL_OW 311
34340: OR
34341: AND
34342: IFFALSE 34383
// begin ComCollect ( j , x , y ) ;
34344: LD_VAR 0 2
34348: PPUSH
34349: LD_VAR 0 6
34353: PPUSH
34354: LD_VAR 0 7
34358: PPUSH
34359: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34363: LD_VAR 0 2
34367: PPUSH
34368: LD_VAR 0 8
34372: PPUSH
34373: CALL_OW 172
// exit ;
34377: POP
34378: POP
34379: POP
34380: POP
34381: GO 34391
// end ;
34383: GO 34273
34385: POP
34386: POP
// end ; end ;
34387: GO 33762
34389: POP
34390: POP
// end ; end_of_file
34391: PPOPN 9
34393: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34394: LD_INT 0
34396: PPUSH
34397: PPUSH
34398: PPUSH
34399: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34400: LD_VAR 0 1
34404: PPUSH
34405: CALL_OW 264
34409: PUSH
34410: LD_INT 91
34412: EQUAL
34413: IFFALSE 34485
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34415: LD_INT 68
34417: PPUSH
34418: LD_VAR 0 1
34422: PPUSH
34423: CALL_OW 255
34427: PPUSH
34428: CALL_OW 321
34432: PUSH
34433: LD_INT 2
34435: EQUAL
34436: IFFALSE 34448
// eff := 70 else
34438: LD_ADDR_VAR 0 4
34442: PUSH
34443: LD_INT 70
34445: ST_TO_ADDR
34446: GO 34456
// eff := 30 ;
34448: LD_ADDR_VAR 0 4
34452: PUSH
34453: LD_INT 30
34455: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34456: LD_VAR 0 1
34460: PPUSH
34461: CALL_OW 250
34465: PPUSH
34466: LD_VAR 0 1
34470: PPUSH
34471: CALL_OW 251
34475: PPUSH
34476: LD_VAR 0 4
34480: PPUSH
34481: CALL_OW 495
// end ; end ;
34485: LD_VAR 0 2
34489: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34490: LD_INT 0
34492: PPUSH
// end ;
34493: LD_VAR 0 4
34497: RET
// export function SOS_Command ( cmd ) ; begin
34498: LD_INT 0
34500: PPUSH
// end ;
34501: LD_VAR 0 2
34505: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34506: LD_INT 0
34508: PPUSH
// end ;
34509: LD_VAR 0 6
34513: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34514: LD_INT 0
34516: PPUSH
34517: PPUSH
// if not vehicle or not factory then
34518: LD_VAR 0 1
34522: NOT
34523: PUSH
34524: LD_VAR 0 2
34528: NOT
34529: OR
34530: IFFALSE 34534
// exit ;
34532: GO 34765
// if factoryWaypoints >= factory then
34534: LD_EXP 101
34538: PUSH
34539: LD_VAR 0 2
34543: GREATEREQUAL
34544: IFFALSE 34765
// if factoryWaypoints [ factory ] then
34546: LD_EXP 101
34550: PUSH
34551: LD_VAR 0 2
34555: ARRAY
34556: IFFALSE 34765
// begin if GetControl ( vehicle ) = control_manual then
34558: LD_VAR 0 1
34562: PPUSH
34563: CALL_OW 263
34567: PUSH
34568: LD_INT 1
34570: EQUAL
34571: IFFALSE 34652
// begin driver := IsDrivenBy ( vehicle ) ;
34573: LD_ADDR_VAR 0 4
34577: PUSH
34578: LD_VAR 0 1
34582: PPUSH
34583: CALL_OW 311
34587: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34588: LD_VAR 0 4
34592: PPUSH
34593: LD_EXP 101
34597: PUSH
34598: LD_VAR 0 2
34602: ARRAY
34603: PUSH
34604: LD_INT 3
34606: ARRAY
34607: PPUSH
34608: LD_EXP 101
34612: PUSH
34613: LD_VAR 0 2
34617: ARRAY
34618: PUSH
34619: LD_INT 4
34621: ARRAY
34622: PPUSH
34623: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34627: LD_VAR 0 4
34631: PPUSH
34632: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34636: LD_VAR 0 4
34640: PPUSH
34641: LD_VAR 0 2
34645: PPUSH
34646: CALL_OW 180
// end else
34650: GO 34765
// if GetControl ( vehicle ) = control_remote then
34652: LD_VAR 0 1
34656: PPUSH
34657: CALL_OW 263
34661: PUSH
34662: LD_INT 2
34664: EQUAL
34665: IFFALSE 34726
// begin wait ( 0 0$2 ) ;
34667: LD_INT 70
34669: PPUSH
34670: CALL_OW 67
// if Connect ( vehicle ) then
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL 46789 0 1
34683: IFFALSE 34724
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34685: LD_VAR 0 1
34689: PPUSH
34690: LD_EXP 101
34694: PUSH
34695: LD_VAR 0 2
34699: ARRAY
34700: PUSH
34701: LD_INT 3
34703: ARRAY
34704: PPUSH
34705: LD_EXP 101
34709: PUSH
34710: LD_VAR 0 2
34714: ARRAY
34715: PUSH
34716: LD_INT 4
34718: ARRAY
34719: PPUSH
34720: CALL_OW 171
// end else
34724: GO 34765
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34726: LD_VAR 0 1
34730: PPUSH
34731: LD_EXP 101
34735: PUSH
34736: LD_VAR 0 2
34740: ARRAY
34741: PUSH
34742: LD_INT 3
34744: ARRAY
34745: PPUSH
34746: LD_EXP 101
34750: PUSH
34751: LD_VAR 0 2
34755: ARRAY
34756: PUSH
34757: LD_INT 4
34759: ARRAY
34760: PPUSH
34761: CALL_OW 171
// end ; end ;
34765: LD_VAR 0 3
34769: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34770: LD_INT 0
34772: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34773: LD_VAR 0 1
34777: PUSH
34778: LD_INT 250
34780: EQUAL
34781: PUSH
34782: LD_VAR 0 2
34786: PPUSH
34787: CALL_OW 264
34791: PUSH
34792: LD_INT 81
34794: EQUAL
34795: AND
34796: IFFALSE 34817
// MinerPlaceMine ( unit , x , y ) ;
34798: LD_VAR 0 2
34802: PPUSH
34803: LD_VAR 0 4
34807: PPUSH
34808: LD_VAR 0 5
34812: PPUSH
34813: CALL 37202 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34817: LD_VAR 0 1
34821: PUSH
34822: LD_INT 251
34824: EQUAL
34825: PUSH
34826: LD_VAR 0 2
34830: PPUSH
34831: CALL_OW 264
34835: PUSH
34836: LD_INT 81
34838: EQUAL
34839: AND
34840: IFFALSE 34861
// MinerDetonateMine ( unit , x , y ) ;
34842: LD_VAR 0 2
34846: PPUSH
34847: LD_VAR 0 4
34851: PPUSH
34852: LD_VAR 0 5
34856: PPUSH
34857: CALL 37477 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34861: LD_VAR 0 1
34865: PUSH
34866: LD_INT 252
34868: EQUAL
34869: PUSH
34870: LD_VAR 0 2
34874: PPUSH
34875: CALL_OW 264
34879: PUSH
34880: LD_INT 81
34882: EQUAL
34883: AND
34884: IFFALSE 34905
// MinerCreateMinefield ( unit , x , y ) ;
34886: LD_VAR 0 2
34890: PPUSH
34891: LD_VAR 0 4
34895: PPUSH
34896: LD_VAR 0 5
34900: PPUSH
34901: CALL 37894 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34905: LD_VAR 0 1
34909: PUSH
34910: LD_INT 253
34912: EQUAL
34913: PUSH
34914: LD_VAR 0 2
34918: PPUSH
34919: CALL_OW 257
34923: PUSH
34924: LD_INT 5
34926: EQUAL
34927: AND
34928: IFFALSE 34949
// ComBinocular ( unit , x , y ) ;
34930: LD_VAR 0 2
34934: PPUSH
34935: LD_VAR 0 4
34939: PPUSH
34940: LD_VAR 0 5
34944: PPUSH
34945: CALL 38263 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34949: LD_VAR 0 1
34953: PUSH
34954: LD_INT 254
34956: EQUAL
34957: PUSH
34958: LD_VAR 0 2
34962: PPUSH
34963: CALL_OW 264
34967: PUSH
34968: LD_INT 99
34970: EQUAL
34971: AND
34972: PUSH
34973: LD_VAR 0 3
34977: PPUSH
34978: CALL_OW 263
34982: PUSH
34983: LD_INT 3
34985: EQUAL
34986: AND
34987: IFFALSE 35003
// HackDestroyVehicle ( unit , selectedUnit ) ;
34989: LD_VAR 0 2
34993: PPUSH
34994: LD_VAR 0 3
34998: PPUSH
34999: CALL 36566 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35003: LD_VAR 0 1
35007: PUSH
35008: LD_INT 255
35010: EQUAL
35011: PUSH
35012: LD_VAR 0 2
35016: PPUSH
35017: CALL_OW 264
35021: PUSH
35022: LD_INT 14
35024: PUSH
35025: LD_INT 53
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: IN
35032: AND
35033: PUSH
35034: LD_VAR 0 4
35038: PPUSH
35039: LD_VAR 0 5
35043: PPUSH
35044: CALL_OW 488
35048: AND
35049: IFFALSE 35073
// CutTreeXYR ( unit , x , y , 12 ) ;
35051: LD_VAR 0 2
35055: PPUSH
35056: LD_VAR 0 4
35060: PPUSH
35061: LD_VAR 0 5
35065: PPUSH
35066: LD_INT 12
35068: PPUSH
35069: CALL 35136 0 4
// if cmd = 256 then
35073: LD_VAR 0 1
35077: PUSH
35078: LD_INT 256
35080: EQUAL
35081: IFFALSE 35102
// SetFactoryWaypoint ( unit , x , y ) ;
35083: LD_VAR 0 2
35087: PPUSH
35088: LD_VAR 0 4
35092: PPUSH
35093: LD_VAR 0 5
35097: PPUSH
35098: CALL 33083 0 3
// if cmd = 257 then
35102: LD_VAR 0 1
35106: PUSH
35107: LD_INT 257
35109: EQUAL
35110: IFFALSE 35131
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35112: LD_VAR 0 2
35116: PPUSH
35117: LD_VAR 0 4
35121: PPUSH
35122: LD_VAR 0 5
35126: PPUSH
35127: CALL 33445 0 3
// end ;
35131: LD_VAR 0 6
35135: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35136: LD_INT 0
35138: PPUSH
35139: PPUSH
35140: PPUSH
35141: PPUSH
35142: PPUSH
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35147: LD_VAR 0 1
35151: NOT
35152: PUSH
35153: LD_VAR 0 2
35157: PPUSH
35158: LD_VAR 0 3
35162: PPUSH
35163: CALL_OW 488
35167: NOT
35168: OR
35169: PUSH
35170: LD_VAR 0 4
35174: NOT
35175: OR
35176: IFFALSE 35180
// exit ;
35178: GO 35520
// list := [ ] ;
35180: LD_ADDR_VAR 0 13
35184: PUSH
35185: EMPTY
35186: ST_TO_ADDR
// if x - r < 0 then
35187: LD_VAR 0 2
35191: PUSH
35192: LD_VAR 0 4
35196: MINUS
35197: PUSH
35198: LD_INT 0
35200: LESS
35201: IFFALSE 35213
// min_x := 0 else
35203: LD_ADDR_VAR 0 7
35207: PUSH
35208: LD_INT 0
35210: ST_TO_ADDR
35211: GO 35229
// min_x := x - r ;
35213: LD_ADDR_VAR 0 7
35217: PUSH
35218: LD_VAR 0 2
35222: PUSH
35223: LD_VAR 0 4
35227: MINUS
35228: ST_TO_ADDR
// if y - r < 0 then
35229: LD_VAR 0 3
35233: PUSH
35234: LD_VAR 0 4
35238: MINUS
35239: PUSH
35240: LD_INT 0
35242: LESS
35243: IFFALSE 35255
// min_y := 0 else
35245: LD_ADDR_VAR 0 8
35249: PUSH
35250: LD_INT 0
35252: ST_TO_ADDR
35253: GO 35271
// min_y := y - r ;
35255: LD_ADDR_VAR 0 8
35259: PUSH
35260: LD_VAR 0 3
35264: PUSH
35265: LD_VAR 0 4
35269: MINUS
35270: ST_TO_ADDR
// max_x := x + r ;
35271: LD_ADDR_VAR 0 9
35275: PUSH
35276: LD_VAR 0 2
35280: PUSH
35281: LD_VAR 0 4
35285: PLUS
35286: ST_TO_ADDR
// max_y := y + r ;
35287: LD_ADDR_VAR 0 10
35291: PUSH
35292: LD_VAR 0 3
35296: PUSH
35297: LD_VAR 0 4
35301: PLUS
35302: ST_TO_ADDR
// for _x = min_x to max_x do
35303: LD_ADDR_VAR 0 11
35307: PUSH
35308: DOUBLE
35309: LD_VAR 0 7
35313: DEC
35314: ST_TO_ADDR
35315: LD_VAR 0 9
35319: PUSH
35320: FOR_TO
35321: IFFALSE 35438
// for _y = min_y to max_y do
35323: LD_ADDR_VAR 0 12
35327: PUSH
35328: DOUBLE
35329: LD_VAR 0 8
35333: DEC
35334: ST_TO_ADDR
35335: LD_VAR 0 10
35339: PUSH
35340: FOR_TO
35341: IFFALSE 35434
// begin if not ValidHex ( _x , _y ) then
35343: LD_VAR 0 11
35347: PPUSH
35348: LD_VAR 0 12
35352: PPUSH
35353: CALL_OW 488
35357: NOT
35358: IFFALSE 35362
// continue ;
35360: GO 35340
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35362: LD_VAR 0 11
35366: PPUSH
35367: LD_VAR 0 12
35371: PPUSH
35372: CALL_OW 351
35376: PUSH
35377: LD_VAR 0 11
35381: PPUSH
35382: LD_VAR 0 12
35386: PPUSH
35387: CALL_OW 554
35391: AND
35392: IFFALSE 35432
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35394: LD_ADDR_VAR 0 13
35398: PUSH
35399: LD_VAR 0 13
35403: PPUSH
35404: LD_VAR 0 13
35408: PUSH
35409: LD_INT 1
35411: PLUS
35412: PPUSH
35413: LD_VAR 0 11
35417: PUSH
35418: LD_VAR 0 12
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PPUSH
35427: CALL_OW 2
35431: ST_TO_ADDR
// end ;
35432: GO 35340
35434: POP
35435: POP
35436: GO 35320
35438: POP
35439: POP
// if not list then
35440: LD_VAR 0 13
35444: NOT
35445: IFFALSE 35449
// exit ;
35447: GO 35520
// for i in list do
35449: LD_ADDR_VAR 0 6
35453: PUSH
35454: LD_VAR 0 13
35458: PUSH
35459: FOR_IN
35460: IFFALSE 35518
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35462: LD_VAR 0 1
35466: PPUSH
35467: LD_STRING M
35469: PUSH
35470: LD_VAR 0 6
35474: PUSH
35475: LD_INT 1
35477: ARRAY
35478: PUSH
35479: LD_VAR 0 6
35483: PUSH
35484: LD_INT 2
35486: ARRAY
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: PUSH
35509: EMPTY
35510: LIST
35511: PPUSH
35512: CALL_OW 447
35516: GO 35459
35518: POP
35519: POP
// end ;
35520: LD_VAR 0 5
35524: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35525: LD_EXP 104
35529: NOT
35530: IFFALSE 35580
35532: GO 35534
35534: DISABLE
// begin initHack := true ;
35535: LD_ADDR_EXP 104
35539: PUSH
35540: LD_INT 1
35542: ST_TO_ADDR
// hackTanks := [ ] ;
35543: LD_ADDR_EXP 105
35547: PUSH
35548: EMPTY
35549: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35550: LD_ADDR_EXP 106
35554: PUSH
35555: EMPTY
35556: ST_TO_ADDR
// hackLimit := 3 ;
35557: LD_ADDR_EXP 107
35561: PUSH
35562: LD_INT 3
35564: ST_TO_ADDR
// hackDist := 12 ;
35565: LD_ADDR_EXP 108
35569: PUSH
35570: LD_INT 12
35572: ST_TO_ADDR
// hackCounter := [ ] ;
35573: LD_ADDR_EXP 109
35577: PUSH
35578: EMPTY
35579: ST_TO_ADDR
// end ;
35580: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35581: LD_EXP 104
35585: PUSH
35586: LD_INT 34
35588: PUSH
35589: LD_INT 99
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PPUSH
35596: CALL_OW 69
35600: AND
35601: IFFALSE 35854
35603: GO 35605
35605: DISABLE
35606: LD_INT 0
35608: PPUSH
35609: PPUSH
// begin enable ;
35610: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35611: LD_ADDR_VAR 0 1
35615: PUSH
35616: LD_INT 34
35618: PUSH
35619: LD_INT 99
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PPUSH
35626: CALL_OW 69
35630: PUSH
35631: FOR_IN
35632: IFFALSE 35852
// begin if not i in hackTanks then
35634: LD_VAR 0 1
35638: PUSH
35639: LD_EXP 105
35643: IN
35644: NOT
35645: IFFALSE 35728
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35647: LD_ADDR_EXP 105
35651: PUSH
35652: LD_EXP 105
35656: PPUSH
35657: LD_EXP 105
35661: PUSH
35662: LD_INT 1
35664: PLUS
35665: PPUSH
35666: LD_VAR 0 1
35670: PPUSH
35671: CALL_OW 1
35675: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35676: LD_ADDR_EXP 106
35680: PUSH
35681: LD_EXP 106
35685: PPUSH
35686: LD_EXP 106
35690: PUSH
35691: LD_INT 1
35693: PLUS
35694: PPUSH
35695: EMPTY
35696: PPUSH
35697: CALL_OW 1
35701: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35702: LD_ADDR_EXP 109
35706: PUSH
35707: LD_EXP 109
35711: PPUSH
35712: LD_EXP 109
35716: PUSH
35717: LD_INT 1
35719: PLUS
35720: PPUSH
35721: EMPTY
35722: PPUSH
35723: CALL_OW 1
35727: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35728: LD_VAR 0 1
35732: PPUSH
35733: CALL_OW 302
35737: NOT
35738: IFFALSE 35751
// begin HackUnlinkAll ( i ) ;
35740: LD_VAR 0 1
35744: PPUSH
35745: CALL 35857 0 1
// continue ;
35749: GO 35631
// end ; HackCheckCapturedStatus ( i ) ;
35751: LD_VAR 0 1
35755: PPUSH
35756: CALL 36300 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35760: LD_ADDR_VAR 0 2
35764: PUSH
35765: LD_INT 81
35767: PUSH
35768: LD_VAR 0 1
35772: PPUSH
35773: CALL_OW 255
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 33
35784: PUSH
35785: LD_INT 3
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 91
35794: PUSH
35795: LD_VAR 0 1
35799: PUSH
35800: LD_EXP 108
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 50
35812: PUSH
35813: EMPTY
35814: LIST
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: PPUSH
35822: CALL_OW 69
35826: ST_TO_ADDR
// if not tmp then
35827: LD_VAR 0 2
35831: NOT
35832: IFFALSE 35836
// continue ;
35834: GO 35631
// HackLink ( i , tmp ) ;
35836: LD_VAR 0 1
35840: PPUSH
35841: LD_VAR 0 2
35845: PPUSH
35846: CALL 35993 0 2
// end ;
35850: GO 35631
35852: POP
35853: POP
// end ;
35854: PPOPN 2
35856: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35857: LD_INT 0
35859: PPUSH
35860: PPUSH
35861: PPUSH
// if not hack in hackTanks then
35862: LD_VAR 0 1
35866: PUSH
35867: LD_EXP 105
35871: IN
35872: NOT
35873: IFFALSE 35877
// exit ;
35875: GO 35988
// index := GetElementIndex ( hackTanks , hack ) ;
35877: LD_ADDR_VAR 0 4
35881: PUSH
35882: LD_EXP 105
35886: PPUSH
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL 43605 0 2
35896: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35897: LD_EXP 106
35901: PUSH
35902: LD_VAR 0 4
35906: ARRAY
35907: IFFALSE 35988
// begin for i in hackTanksCaptured [ index ] do
35909: LD_ADDR_VAR 0 3
35913: PUSH
35914: LD_EXP 106
35918: PUSH
35919: LD_VAR 0 4
35923: ARRAY
35924: PUSH
35925: FOR_IN
35926: IFFALSE 35952
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35928: LD_VAR 0 3
35932: PUSH
35933: LD_INT 1
35935: ARRAY
35936: PPUSH
35937: LD_VAR 0 3
35941: PUSH
35942: LD_INT 2
35944: ARRAY
35945: PPUSH
35946: CALL_OW 235
35950: GO 35925
35952: POP
35953: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35954: LD_ADDR_EXP 106
35958: PUSH
35959: LD_EXP 106
35963: PPUSH
35964: LD_VAR 0 4
35968: PPUSH
35969: EMPTY
35970: PPUSH
35971: CALL_OW 1
35975: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35976: LD_VAR 0 1
35980: PPUSH
35981: LD_INT 0
35983: PPUSH
35984: CALL_OW 505
// end ; end ;
35988: LD_VAR 0 2
35992: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35993: LD_INT 0
35995: PPUSH
35996: PPUSH
35997: PPUSH
// if not hack in hackTanks or not vehicles then
35998: LD_VAR 0 1
36002: PUSH
36003: LD_EXP 105
36007: IN
36008: NOT
36009: PUSH
36010: LD_VAR 0 2
36014: NOT
36015: OR
36016: IFFALSE 36020
// exit ;
36018: GO 36295
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36020: LD_ADDR_VAR 0 2
36024: PUSH
36025: LD_VAR 0 1
36029: PPUSH
36030: LD_VAR 0 2
36034: PPUSH
36035: LD_INT 1
36037: PPUSH
36038: LD_INT 1
36040: PPUSH
36041: CALL 44255 0 4
36045: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36046: LD_ADDR_VAR 0 5
36050: PUSH
36051: LD_EXP 105
36055: PPUSH
36056: LD_VAR 0 1
36060: PPUSH
36061: CALL 43605 0 2
36065: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36066: LD_EXP 106
36070: PUSH
36071: LD_VAR 0 5
36075: ARRAY
36076: PUSH
36077: LD_EXP 107
36081: LESS
36082: IFFALSE 36271
// begin for i := 1 to vehicles do
36084: LD_ADDR_VAR 0 4
36088: PUSH
36089: DOUBLE
36090: LD_INT 1
36092: DEC
36093: ST_TO_ADDR
36094: LD_VAR 0 2
36098: PUSH
36099: FOR_TO
36100: IFFALSE 36269
// begin if hackTanksCaptured [ index ] = hackLimit then
36102: LD_EXP 106
36106: PUSH
36107: LD_VAR 0 5
36111: ARRAY
36112: PUSH
36113: LD_EXP 107
36117: EQUAL
36118: IFFALSE 36122
// break ;
36120: GO 36269
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36122: LD_ADDR_EXP 109
36126: PUSH
36127: LD_EXP 109
36131: PPUSH
36132: LD_VAR 0 5
36136: PPUSH
36137: LD_EXP 109
36141: PUSH
36142: LD_VAR 0 5
36146: ARRAY
36147: PUSH
36148: LD_INT 1
36150: PLUS
36151: PPUSH
36152: CALL_OW 1
36156: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36157: LD_ADDR_EXP 106
36161: PUSH
36162: LD_EXP 106
36166: PPUSH
36167: LD_VAR 0 5
36171: PUSH
36172: LD_EXP 106
36176: PUSH
36177: LD_VAR 0 5
36181: ARRAY
36182: PUSH
36183: LD_INT 1
36185: PLUS
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PPUSH
36191: LD_VAR 0 2
36195: PUSH
36196: LD_VAR 0 4
36200: ARRAY
36201: PUSH
36202: LD_VAR 0 2
36206: PUSH
36207: LD_VAR 0 4
36211: ARRAY
36212: PPUSH
36213: CALL_OW 255
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PPUSH
36222: CALL 43820 0 3
36226: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36227: LD_VAR 0 2
36231: PUSH
36232: LD_VAR 0 4
36236: ARRAY
36237: PPUSH
36238: LD_VAR 0 1
36242: PPUSH
36243: CALL_OW 255
36247: PPUSH
36248: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36252: LD_VAR 0 2
36256: PUSH
36257: LD_VAR 0 4
36261: ARRAY
36262: PPUSH
36263: CALL_OW 141
// end ;
36267: GO 36099
36269: POP
36270: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36271: LD_VAR 0 1
36275: PPUSH
36276: LD_EXP 106
36280: PUSH
36281: LD_VAR 0 5
36285: ARRAY
36286: PUSH
36287: LD_INT 0
36289: PLUS
36290: PPUSH
36291: CALL_OW 505
// end ;
36295: LD_VAR 0 3
36299: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36300: LD_INT 0
36302: PPUSH
36303: PPUSH
36304: PPUSH
36305: PPUSH
// if not hack in hackTanks then
36306: LD_VAR 0 1
36310: PUSH
36311: LD_EXP 105
36315: IN
36316: NOT
36317: IFFALSE 36321
// exit ;
36319: GO 36561
// index := GetElementIndex ( hackTanks , hack ) ;
36321: LD_ADDR_VAR 0 4
36325: PUSH
36326: LD_EXP 105
36330: PPUSH
36331: LD_VAR 0 1
36335: PPUSH
36336: CALL 43605 0 2
36340: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36341: LD_ADDR_VAR 0 3
36345: PUSH
36346: DOUBLE
36347: LD_EXP 106
36351: PUSH
36352: LD_VAR 0 4
36356: ARRAY
36357: INC
36358: ST_TO_ADDR
36359: LD_INT 1
36361: PUSH
36362: FOR_DOWNTO
36363: IFFALSE 36535
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36365: LD_ADDR_VAR 0 5
36369: PUSH
36370: LD_EXP 106
36374: PUSH
36375: LD_VAR 0 4
36379: ARRAY
36380: PUSH
36381: LD_VAR 0 3
36385: ARRAY
36386: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36387: LD_VAR 0 5
36391: PUSH
36392: LD_INT 1
36394: ARRAY
36395: PPUSH
36396: CALL_OW 302
36400: NOT
36401: PUSH
36402: LD_VAR 0 5
36406: PUSH
36407: LD_INT 1
36409: ARRAY
36410: PPUSH
36411: CALL_OW 255
36415: PUSH
36416: LD_VAR 0 1
36420: PPUSH
36421: CALL_OW 255
36425: NONEQUAL
36426: OR
36427: IFFALSE 36533
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36429: LD_VAR 0 5
36433: PUSH
36434: LD_INT 1
36436: ARRAY
36437: PPUSH
36438: CALL_OW 305
36442: PUSH
36443: LD_VAR 0 5
36447: PUSH
36448: LD_INT 1
36450: ARRAY
36451: PPUSH
36452: CALL_OW 255
36456: PUSH
36457: LD_VAR 0 1
36461: PPUSH
36462: CALL_OW 255
36466: EQUAL
36467: AND
36468: IFFALSE 36492
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36470: LD_VAR 0 5
36474: PUSH
36475: LD_INT 1
36477: ARRAY
36478: PPUSH
36479: LD_VAR 0 5
36483: PUSH
36484: LD_INT 2
36486: ARRAY
36487: PPUSH
36488: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36492: LD_ADDR_EXP 106
36496: PUSH
36497: LD_EXP 106
36501: PPUSH
36502: LD_VAR 0 4
36506: PPUSH
36507: LD_EXP 106
36511: PUSH
36512: LD_VAR 0 4
36516: ARRAY
36517: PPUSH
36518: LD_VAR 0 3
36522: PPUSH
36523: CALL_OW 3
36527: PPUSH
36528: CALL_OW 1
36532: ST_TO_ADDR
// end ; end ;
36533: GO 36362
36535: POP
36536: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36537: LD_VAR 0 1
36541: PPUSH
36542: LD_EXP 106
36546: PUSH
36547: LD_VAR 0 4
36551: ARRAY
36552: PUSH
36553: LD_INT 0
36555: PLUS
36556: PPUSH
36557: CALL_OW 505
// end ;
36561: LD_VAR 0 2
36565: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36566: LD_INT 0
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
// if not hack in hackTanks then
36572: LD_VAR 0 1
36576: PUSH
36577: LD_EXP 105
36581: IN
36582: NOT
36583: IFFALSE 36587
// exit ;
36585: GO 36672
// index := GetElementIndex ( hackTanks , hack ) ;
36587: LD_ADDR_VAR 0 5
36591: PUSH
36592: LD_EXP 105
36596: PPUSH
36597: LD_VAR 0 1
36601: PPUSH
36602: CALL 43605 0 2
36606: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36607: LD_ADDR_VAR 0 4
36611: PUSH
36612: DOUBLE
36613: LD_INT 1
36615: DEC
36616: ST_TO_ADDR
36617: LD_EXP 106
36621: PUSH
36622: LD_VAR 0 5
36626: ARRAY
36627: PUSH
36628: FOR_TO
36629: IFFALSE 36670
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36631: LD_EXP 106
36635: PUSH
36636: LD_VAR 0 5
36640: ARRAY
36641: PUSH
36642: LD_VAR 0 4
36646: ARRAY
36647: PUSH
36648: LD_INT 1
36650: ARRAY
36651: PUSH
36652: LD_VAR 0 2
36656: EQUAL
36657: IFFALSE 36668
// KillUnit ( vehicle ) ;
36659: LD_VAR 0 2
36663: PPUSH
36664: CALL_OW 66
36668: GO 36628
36670: POP
36671: POP
// end ;
36672: LD_VAR 0 3
36676: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36677: LD_EXP 110
36681: NOT
36682: IFFALSE 36717
36684: GO 36686
36686: DISABLE
// begin initMiner := true ;
36687: LD_ADDR_EXP 110
36691: PUSH
36692: LD_INT 1
36694: ST_TO_ADDR
// minersList := [ ] ;
36695: LD_ADDR_EXP 111
36699: PUSH
36700: EMPTY
36701: ST_TO_ADDR
// minerMinesList := [ ] ;
36702: LD_ADDR_EXP 112
36706: PUSH
36707: EMPTY
36708: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36709: LD_ADDR_EXP 113
36713: PUSH
36714: LD_INT 5
36716: ST_TO_ADDR
// end ;
36717: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36718: LD_EXP 110
36722: PUSH
36723: LD_INT 34
36725: PUSH
36726: LD_INT 81
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PPUSH
36733: CALL_OW 69
36737: AND
36738: IFFALSE 37199
36740: GO 36742
36742: DISABLE
36743: LD_INT 0
36745: PPUSH
36746: PPUSH
36747: PPUSH
36748: PPUSH
// begin enable ;
36749: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36750: LD_ADDR_VAR 0 1
36754: PUSH
36755: LD_INT 34
36757: PUSH
36758: LD_INT 81
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PPUSH
36765: CALL_OW 69
36769: PUSH
36770: FOR_IN
36771: IFFALSE 36843
// begin if not i in minersList then
36773: LD_VAR 0 1
36777: PUSH
36778: LD_EXP 111
36782: IN
36783: NOT
36784: IFFALSE 36841
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36786: LD_ADDR_EXP 111
36790: PUSH
36791: LD_EXP 111
36795: PPUSH
36796: LD_EXP 111
36800: PUSH
36801: LD_INT 1
36803: PLUS
36804: PPUSH
36805: LD_VAR 0 1
36809: PPUSH
36810: CALL_OW 1
36814: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36815: LD_ADDR_EXP 112
36819: PUSH
36820: LD_EXP 112
36824: PPUSH
36825: LD_EXP 112
36829: PUSH
36830: LD_INT 1
36832: PLUS
36833: PPUSH
36834: EMPTY
36835: PPUSH
36836: CALL_OW 1
36840: ST_TO_ADDR
// end end ;
36841: GO 36770
36843: POP
36844: POP
// for i := minerMinesList downto 1 do
36845: LD_ADDR_VAR 0 1
36849: PUSH
36850: DOUBLE
36851: LD_EXP 112
36855: INC
36856: ST_TO_ADDR
36857: LD_INT 1
36859: PUSH
36860: FOR_DOWNTO
36861: IFFALSE 37197
// begin if IsLive ( minersList [ i ] ) then
36863: LD_EXP 111
36867: PUSH
36868: LD_VAR 0 1
36872: ARRAY
36873: PPUSH
36874: CALL_OW 300
36878: IFFALSE 36906
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36880: LD_EXP 111
36884: PUSH
36885: LD_VAR 0 1
36889: ARRAY
36890: PPUSH
36891: LD_EXP 112
36895: PUSH
36896: LD_VAR 0 1
36900: ARRAY
36901: PPUSH
36902: CALL_OW 505
// if not minerMinesList [ i ] then
36906: LD_EXP 112
36910: PUSH
36911: LD_VAR 0 1
36915: ARRAY
36916: NOT
36917: IFFALSE 36921
// continue ;
36919: GO 36860
// for j := minerMinesList [ i ] downto 1 do
36921: LD_ADDR_VAR 0 2
36925: PUSH
36926: DOUBLE
36927: LD_EXP 112
36931: PUSH
36932: LD_VAR 0 1
36936: ARRAY
36937: INC
36938: ST_TO_ADDR
36939: LD_INT 1
36941: PUSH
36942: FOR_DOWNTO
36943: IFFALSE 37193
// begin side := GetSide ( minersList [ i ] ) ;
36945: LD_ADDR_VAR 0 3
36949: PUSH
36950: LD_EXP 111
36954: PUSH
36955: LD_VAR 0 1
36959: ARRAY
36960: PPUSH
36961: CALL_OW 255
36965: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36966: LD_ADDR_VAR 0 4
36970: PUSH
36971: LD_EXP 112
36975: PUSH
36976: LD_VAR 0 1
36980: ARRAY
36981: PUSH
36982: LD_VAR 0 2
36986: ARRAY
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: PPUSH
36992: LD_EXP 112
36996: PUSH
36997: LD_VAR 0 1
37001: ARRAY
37002: PUSH
37003: LD_VAR 0 2
37007: ARRAY
37008: PUSH
37009: LD_INT 2
37011: ARRAY
37012: PPUSH
37013: CALL_OW 428
37017: ST_TO_ADDR
// if not tmp then
37018: LD_VAR 0 4
37022: NOT
37023: IFFALSE 37027
// continue ;
37025: GO 36942
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37027: LD_VAR 0 4
37031: PUSH
37032: LD_INT 81
37034: PUSH
37035: LD_VAR 0 3
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PPUSH
37044: CALL_OW 69
37048: IN
37049: PUSH
37050: LD_EXP 112
37054: PUSH
37055: LD_VAR 0 1
37059: ARRAY
37060: PUSH
37061: LD_VAR 0 2
37065: ARRAY
37066: PUSH
37067: LD_INT 1
37069: ARRAY
37070: PPUSH
37071: LD_EXP 112
37075: PUSH
37076: LD_VAR 0 1
37080: ARRAY
37081: PUSH
37082: LD_VAR 0 2
37086: ARRAY
37087: PUSH
37088: LD_INT 2
37090: ARRAY
37091: PPUSH
37092: CALL_OW 458
37096: AND
37097: IFFALSE 37191
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37099: LD_EXP 112
37103: PUSH
37104: LD_VAR 0 1
37108: ARRAY
37109: PUSH
37110: LD_VAR 0 2
37114: ARRAY
37115: PUSH
37116: LD_INT 1
37118: ARRAY
37119: PPUSH
37120: LD_EXP 112
37124: PUSH
37125: LD_VAR 0 1
37129: ARRAY
37130: PUSH
37131: LD_VAR 0 2
37135: ARRAY
37136: PUSH
37137: LD_INT 2
37139: ARRAY
37140: PPUSH
37141: LD_VAR 0 3
37145: PPUSH
37146: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37150: LD_ADDR_EXP 112
37154: PUSH
37155: LD_EXP 112
37159: PPUSH
37160: LD_VAR 0 1
37164: PPUSH
37165: LD_EXP 112
37169: PUSH
37170: LD_VAR 0 1
37174: ARRAY
37175: PPUSH
37176: LD_VAR 0 2
37180: PPUSH
37181: CALL_OW 3
37185: PPUSH
37186: CALL_OW 1
37190: ST_TO_ADDR
// end ; end ;
37191: GO 36942
37193: POP
37194: POP
// end ;
37195: GO 36860
37197: POP
37198: POP
// end ;
37199: PPOPN 4
37201: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37202: LD_INT 0
37204: PPUSH
37205: PPUSH
// result := false ;
37206: LD_ADDR_VAR 0 4
37210: PUSH
37211: LD_INT 0
37213: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37214: LD_VAR 0 1
37218: PPUSH
37219: CALL_OW 264
37223: PUSH
37224: LD_INT 81
37226: EQUAL
37227: NOT
37228: IFFALSE 37232
// exit ;
37230: GO 37472
// index := GetElementIndex ( minersList , unit ) ;
37232: LD_ADDR_VAR 0 5
37236: PUSH
37237: LD_EXP 111
37241: PPUSH
37242: LD_VAR 0 1
37246: PPUSH
37247: CALL 43605 0 2
37251: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37252: LD_EXP 112
37256: PUSH
37257: LD_VAR 0 5
37261: ARRAY
37262: PUSH
37263: LD_EXP 113
37267: GREATEREQUAL
37268: IFFALSE 37272
// exit ;
37270: GO 37472
// ComMoveXY ( unit , x , y ) ;
37272: LD_VAR 0 1
37276: PPUSH
37277: LD_VAR 0 2
37281: PPUSH
37282: LD_VAR 0 3
37286: PPUSH
37287: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37291: LD_INT 35
37293: PPUSH
37294: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37298: LD_VAR 0 1
37302: PPUSH
37303: LD_VAR 0 2
37307: PPUSH
37308: LD_VAR 0 3
37312: PPUSH
37313: CALL 74868 0 3
37317: NOT
37318: PUSH
37319: LD_VAR 0 1
37323: PPUSH
37324: CALL_OW 314
37328: AND
37329: IFFALSE 37333
// exit ;
37331: GO 37472
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37333: LD_VAR 0 2
37337: PPUSH
37338: LD_VAR 0 3
37342: PPUSH
37343: CALL_OW 428
37347: PUSH
37348: LD_VAR 0 1
37352: EQUAL
37353: PUSH
37354: LD_VAR 0 1
37358: PPUSH
37359: CALL_OW 314
37363: NOT
37364: AND
37365: IFFALSE 37291
// PlaySoundXY ( x , y , PlantMine ) ;
37367: LD_VAR 0 2
37371: PPUSH
37372: LD_VAR 0 3
37376: PPUSH
37377: LD_STRING PlantMine
37379: PPUSH
37380: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37384: LD_VAR 0 2
37388: PPUSH
37389: LD_VAR 0 3
37393: PPUSH
37394: LD_VAR 0 1
37398: PPUSH
37399: CALL_OW 255
37403: PPUSH
37404: LD_INT 0
37406: PPUSH
37407: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37411: LD_ADDR_EXP 112
37415: PUSH
37416: LD_EXP 112
37420: PPUSH
37421: LD_VAR 0 5
37425: PUSH
37426: LD_EXP 112
37430: PUSH
37431: LD_VAR 0 5
37435: ARRAY
37436: PUSH
37437: LD_INT 1
37439: PLUS
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PPUSH
37445: LD_VAR 0 2
37449: PUSH
37450: LD_VAR 0 3
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PPUSH
37459: CALL 43820 0 3
37463: ST_TO_ADDR
// result := true ;
37464: LD_ADDR_VAR 0 4
37468: PUSH
37469: LD_INT 1
37471: ST_TO_ADDR
// end ;
37472: LD_VAR 0 4
37476: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37477: LD_INT 0
37479: PPUSH
37480: PPUSH
37481: PPUSH
// if not unit in minersList then
37482: LD_VAR 0 1
37486: PUSH
37487: LD_EXP 111
37491: IN
37492: NOT
37493: IFFALSE 37497
// exit ;
37495: GO 37889
// index := GetElementIndex ( minersList , unit ) ;
37497: LD_ADDR_VAR 0 6
37501: PUSH
37502: LD_EXP 111
37506: PPUSH
37507: LD_VAR 0 1
37511: PPUSH
37512: CALL 43605 0 2
37516: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37517: LD_ADDR_VAR 0 5
37521: PUSH
37522: DOUBLE
37523: LD_EXP 112
37527: PUSH
37528: LD_VAR 0 6
37532: ARRAY
37533: INC
37534: ST_TO_ADDR
37535: LD_INT 1
37537: PUSH
37538: FOR_DOWNTO
37539: IFFALSE 37700
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37541: LD_EXP 112
37545: PUSH
37546: LD_VAR 0 6
37550: ARRAY
37551: PUSH
37552: LD_VAR 0 5
37556: ARRAY
37557: PUSH
37558: LD_INT 1
37560: ARRAY
37561: PUSH
37562: LD_VAR 0 2
37566: EQUAL
37567: PUSH
37568: LD_EXP 112
37572: PUSH
37573: LD_VAR 0 6
37577: ARRAY
37578: PUSH
37579: LD_VAR 0 5
37583: ARRAY
37584: PUSH
37585: LD_INT 2
37587: ARRAY
37588: PUSH
37589: LD_VAR 0 3
37593: EQUAL
37594: AND
37595: IFFALSE 37698
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37597: LD_EXP 112
37601: PUSH
37602: LD_VAR 0 6
37606: ARRAY
37607: PUSH
37608: LD_VAR 0 5
37612: ARRAY
37613: PUSH
37614: LD_INT 1
37616: ARRAY
37617: PPUSH
37618: LD_EXP 112
37622: PUSH
37623: LD_VAR 0 6
37627: ARRAY
37628: PUSH
37629: LD_VAR 0 5
37633: ARRAY
37634: PUSH
37635: LD_INT 2
37637: ARRAY
37638: PPUSH
37639: LD_VAR 0 1
37643: PPUSH
37644: CALL_OW 255
37648: PPUSH
37649: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37653: LD_ADDR_EXP 112
37657: PUSH
37658: LD_EXP 112
37662: PPUSH
37663: LD_VAR 0 6
37667: PPUSH
37668: LD_EXP 112
37672: PUSH
37673: LD_VAR 0 6
37677: ARRAY
37678: PPUSH
37679: LD_VAR 0 5
37683: PPUSH
37684: CALL_OW 3
37688: PPUSH
37689: CALL_OW 1
37693: ST_TO_ADDR
// exit ;
37694: POP
37695: POP
37696: GO 37889
// end ; end ;
37698: GO 37538
37700: POP
37701: POP
// for i := minerMinesList [ index ] downto 1 do
37702: LD_ADDR_VAR 0 5
37706: PUSH
37707: DOUBLE
37708: LD_EXP 112
37712: PUSH
37713: LD_VAR 0 6
37717: ARRAY
37718: INC
37719: ST_TO_ADDR
37720: LD_INT 1
37722: PUSH
37723: FOR_DOWNTO
37724: IFFALSE 37887
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37726: LD_EXP 112
37730: PUSH
37731: LD_VAR 0 6
37735: ARRAY
37736: PUSH
37737: LD_VAR 0 5
37741: ARRAY
37742: PUSH
37743: LD_INT 1
37745: ARRAY
37746: PPUSH
37747: LD_EXP 112
37751: PUSH
37752: LD_VAR 0 6
37756: ARRAY
37757: PUSH
37758: LD_VAR 0 5
37762: ARRAY
37763: PUSH
37764: LD_INT 2
37766: ARRAY
37767: PPUSH
37768: LD_VAR 0 2
37772: PPUSH
37773: LD_VAR 0 3
37777: PPUSH
37778: CALL_OW 298
37782: PUSH
37783: LD_INT 6
37785: LESS
37786: IFFALSE 37885
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37788: LD_EXP 112
37792: PUSH
37793: LD_VAR 0 6
37797: ARRAY
37798: PUSH
37799: LD_VAR 0 5
37803: ARRAY
37804: PUSH
37805: LD_INT 1
37807: ARRAY
37808: PPUSH
37809: LD_EXP 112
37813: PUSH
37814: LD_VAR 0 6
37818: ARRAY
37819: PUSH
37820: LD_VAR 0 5
37824: ARRAY
37825: PUSH
37826: LD_INT 2
37828: ARRAY
37829: PPUSH
37830: LD_VAR 0 1
37834: PPUSH
37835: CALL_OW 255
37839: PPUSH
37840: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37844: LD_ADDR_EXP 112
37848: PUSH
37849: LD_EXP 112
37853: PPUSH
37854: LD_VAR 0 6
37858: PPUSH
37859: LD_EXP 112
37863: PUSH
37864: LD_VAR 0 6
37868: ARRAY
37869: PPUSH
37870: LD_VAR 0 5
37874: PPUSH
37875: CALL_OW 3
37879: PPUSH
37880: CALL_OW 1
37884: ST_TO_ADDR
// end ; end ;
37885: GO 37723
37887: POP
37888: POP
// end ;
37889: LD_VAR 0 4
37893: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37894: LD_INT 0
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
37900: PPUSH
37901: PPUSH
37902: PPUSH
37903: PPUSH
37904: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37905: LD_VAR 0 1
37909: PPUSH
37910: CALL_OW 264
37914: PUSH
37915: LD_INT 81
37917: EQUAL
37918: NOT
37919: PUSH
37920: LD_VAR 0 1
37924: PUSH
37925: LD_EXP 111
37929: IN
37930: NOT
37931: OR
37932: IFFALSE 37936
// exit ;
37934: GO 38258
// index := GetElementIndex ( minersList , unit ) ;
37936: LD_ADDR_VAR 0 6
37940: PUSH
37941: LD_EXP 111
37945: PPUSH
37946: LD_VAR 0 1
37950: PPUSH
37951: CALL 43605 0 2
37955: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37956: LD_ADDR_VAR 0 8
37960: PUSH
37961: LD_EXP 113
37965: PUSH
37966: LD_EXP 112
37970: PUSH
37971: LD_VAR 0 6
37975: ARRAY
37976: MINUS
37977: ST_TO_ADDR
// if not minesFreeAmount then
37978: LD_VAR 0 8
37982: NOT
37983: IFFALSE 37987
// exit ;
37985: GO 38258
// tmp := [ ] ;
37987: LD_ADDR_VAR 0 7
37991: PUSH
37992: EMPTY
37993: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37994: LD_ADDR_VAR 0 5
37998: PUSH
37999: DOUBLE
38000: LD_INT 1
38002: DEC
38003: ST_TO_ADDR
38004: LD_VAR 0 8
38008: PUSH
38009: FOR_TO
38010: IFFALSE 38205
// begin _d := rand ( 0 , 5 ) ;
38012: LD_ADDR_VAR 0 11
38016: PUSH
38017: LD_INT 0
38019: PPUSH
38020: LD_INT 5
38022: PPUSH
38023: CALL_OW 12
38027: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38028: LD_ADDR_VAR 0 12
38032: PUSH
38033: LD_INT 2
38035: PPUSH
38036: LD_INT 6
38038: PPUSH
38039: CALL_OW 12
38043: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38044: LD_ADDR_VAR 0 9
38048: PUSH
38049: LD_VAR 0 2
38053: PPUSH
38054: LD_VAR 0 11
38058: PPUSH
38059: LD_VAR 0 12
38063: PPUSH
38064: CALL_OW 272
38068: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38069: LD_ADDR_VAR 0 10
38073: PUSH
38074: LD_VAR 0 3
38078: PPUSH
38079: LD_VAR 0 11
38083: PPUSH
38084: LD_VAR 0 12
38088: PPUSH
38089: CALL_OW 273
38093: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38094: LD_VAR 0 9
38098: PPUSH
38099: LD_VAR 0 10
38103: PPUSH
38104: CALL_OW 488
38108: PUSH
38109: LD_VAR 0 9
38113: PUSH
38114: LD_VAR 0 10
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_VAR 0 7
38127: IN
38128: NOT
38129: AND
38130: PUSH
38131: LD_VAR 0 9
38135: PPUSH
38136: LD_VAR 0 10
38140: PPUSH
38141: CALL_OW 458
38145: NOT
38146: AND
38147: IFFALSE 38189
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38149: LD_ADDR_VAR 0 7
38153: PUSH
38154: LD_VAR 0 7
38158: PPUSH
38159: LD_VAR 0 7
38163: PUSH
38164: LD_INT 1
38166: PLUS
38167: PPUSH
38168: LD_VAR 0 9
38172: PUSH
38173: LD_VAR 0 10
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PPUSH
38182: CALL_OW 1
38186: ST_TO_ADDR
38187: GO 38203
// i := i - 1 ;
38189: LD_ADDR_VAR 0 5
38193: PUSH
38194: LD_VAR 0 5
38198: PUSH
38199: LD_INT 1
38201: MINUS
38202: ST_TO_ADDR
// end ;
38203: GO 38009
38205: POP
38206: POP
// for i in tmp do
38207: LD_ADDR_VAR 0 5
38211: PUSH
38212: LD_VAR 0 7
38216: PUSH
38217: FOR_IN
38218: IFFALSE 38256
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38220: LD_VAR 0 1
38224: PPUSH
38225: LD_VAR 0 5
38229: PUSH
38230: LD_INT 1
38232: ARRAY
38233: PPUSH
38234: LD_VAR 0 5
38238: PUSH
38239: LD_INT 2
38241: ARRAY
38242: PPUSH
38243: CALL 37202 0 3
38247: NOT
38248: IFFALSE 38254
// exit ;
38250: POP
38251: POP
38252: GO 38258
38254: GO 38217
38256: POP
38257: POP
// end ;
38258: LD_VAR 0 4
38262: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38263: LD_INT 0
38265: PPUSH
38266: PPUSH
38267: PPUSH
38268: PPUSH
38269: PPUSH
38270: PPUSH
38271: PPUSH
// if not GetClass ( unit ) = class_sniper then
38272: LD_VAR 0 1
38276: PPUSH
38277: CALL_OW 257
38281: PUSH
38282: LD_INT 5
38284: EQUAL
38285: NOT
38286: IFFALSE 38290
// exit ;
38288: GO 38678
// dist := 8 ;
38290: LD_ADDR_VAR 0 5
38294: PUSH
38295: LD_INT 8
38297: ST_TO_ADDR
// viewRange := 12 ;
38298: LD_ADDR_VAR 0 7
38302: PUSH
38303: LD_INT 12
38305: ST_TO_ADDR
// side := GetSide ( unit ) ;
38306: LD_ADDR_VAR 0 6
38310: PUSH
38311: LD_VAR 0 1
38315: PPUSH
38316: CALL_OW 255
38320: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38321: LD_INT 61
38323: PPUSH
38324: LD_VAR 0 6
38328: PPUSH
38329: CALL_OW 321
38333: PUSH
38334: LD_INT 2
38336: EQUAL
38337: IFFALSE 38347
// viewRange := 16 ;
38339: LD_ADDR_VAR 0 7
38343: PUSH
38344: LD_INT 16
38346: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38347: LD_VAR 0 1
38351: PPUSH
38352: LD_VAR 0 2
38356: PPUSH
38357: LD_VAR 0 3
38361: PPUSH
38362: CALL_OW 297
38366: PUSH
38367: LD_VAR 0 5
38371: GREATER
38372: IFFALSE 38451
// begin ComMoveXY ( unit , x , y ) ;
38374: LD_VAR 0 1
38378: PPUSH
38379: LD_VAR 0 2
38383: PPUSH
38384: LD_VAR 0 3
38388: PPUSH
38389: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38393: LD_INT 35
38395: PPUSH
38396: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38400: LD_VAR 0 1
38404: PPUSH
38405: LD_VAR 0 2
38409: PPUSH
38410: LD_VAR 0 3
38414: PPUSH
38415: CALL 74868 0 3
38419: NOT
38420: IFFALSE 38424
// exit ;
38422: GO 38678
// until GetDistUnitXY ( unit , x , y ) < dist ;
38424: LD_VAR 0 1
38428: PPUSH
38429: LD_VAR 0 2
38433: PPUSH
38434: LD_VAR 0 3
38438: PPUSH
38439: CALL_OW 297
38443: PUSH
38444: LD_VAR 0 5
38448: LESS
38449: IFFALSE 38393
// end ; ComTurnXY ( unit , x , y ) ;
38451: LD_VAR 0 1
38455: PPUSH
38456: LD_VAR 0 2
38460: PPUSH
38461: LD_VAR 0 3
38465: PPUSH
38466: CALL_OW 118
// wait ( 5 ) ;
38470: LD_INT 5
38472: PPUSH
38473: CALL_OW 67
// _d := GetDir ( unit ) ;
38477: LD_ADDR_VAR 0 10
38481: PUSH
38482: LD_VAR 0 1
38486: PPUSH
38487: CALL_OW 254
38491: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38492: LD_ADDR_VAR 0 8
38496: PUSH
38497: LD_VAR 0 1
38501: PPUSH
38502: CALL_OW 250
38506: PPUSH
38507: LD_VAR 0 10
38511: PPUSH
38512: LD_VAR 0 5
38516: PPUSH
38517: CALL_OW 272
38521: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38522: LD_ADDR_VAR 0 9
38526: PUSH
38527: LD_VAR 0 1
38531: PPUSH
38532: CALL_OW 251
38536: PPUSH
38537: LD_VAR 0 10
38541: PPUSH
38542: LD_VAR 0 5
38546: PPUSH
38547: CALL_OW 273
38551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38552: LD_VAR 0 8
38556: PPUSH
38557: LD_VAR 0 9
38561: PPUSH
38562: CALL_OW 488
38566: NOT
38567: IFFALSE 38571
// exit ;
38569: GO 38678
// ComAnimCustom ( unit , 1 ) ;
38571: LD_VAR 0 1
38575: PPUSH
38576: LD_INT 1
38578: PPUSH
38579: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38583: LD_VAR 0 8
38587: PPUSH
38588: LD_VAR 0 9
38592: PPUSH
38593: LD_VAR 0 6
38597: PPUSH
38598: LD_VAR 0 7
38602: PPUSH
38603: CALL_OW 330
// repeat wait ( 1 ) ;
38607: LD_INT 1
38609: PPUSH
38610: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38614: LD_VAR 0 1
38618: PPUSH
38619: CALL_OW 316
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL_OW 314
38633: OR
38634: PUSH
38635: LD_VAR 0 1
38639: PPUSH
38640: CALL_OW 302
38644: NOT
38645: OR
38646: PUSH
38647: LD_VAR 0 1
38651: PPUSH
38652: CALL_OW 301
38656: OR
38657: IFFALSE 38607
// RemoveSeeing ( _x , _y , side ) ;
38659: LD_VAR 0 8
38663: PPUSH
38664: LD_VAR 0 9
38668: PPUSH
38669: LD_VAR 0 6
38673: PPUSH
38674: CALL_OW 331
// end ; end_of_file
38678: LD_VAR 0 4
38682: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38683: LD_INT 0
38685: PPUSH
38686: PPUSH
// if exist_mode then
38687: LD_VAR 0 2
38691: IFFALSE 38716
// unit := CreateCharacter ( prefix & ident ) else
38693: LD_ADDR_VAR 0 5
38697: PUSH
38698: LD_VAR 0 3
38702: PUSH
38703: LD_VAR 0 1
38707: STR
38708: PPUSH
38709: CALL_OW 34
38713: ST_TO_ADDR
38714: GO 38731
// unit := NewCharacter ( ident ) ;
38716: LD_ADDR_VAR 0 5
38720: PUSH
38721: LD_VAR 0 1
38725: PPUSH
38726: CALL_OW 25
38730: ST_TO_ADDR
// result := unit ;
38731: LD_ADDR_VAR 0 4
38735: PUSH
38736: LD_VAR 0 5
38740: ST_TO_ADDR
// end ;
38741: LD_VAR 0 4
38745: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38746: LD_INT 0
38748: PPUSH
38749: PPUSH
// if not side or not nation then
38750: LD_VAR 0 1
38754: NOT
38755: PUSH
38756: LD_VAR 0 2
38760: NOT
38761: OR
38762: IFFALSE 38766
// exit ;
38764: GO 39534
// case nation of nation_american :
38766: LD_VAR 0 2
38770: PUSH
38771: LD_INT 1
38773: DOUBLE
38774: EQUAL
38775: IFTRUE 38779
38777: GO 38993
38779: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38780: LD_ADDR_VAR 0 4
38784: PUSH
38785: LD_INT 35
38787: PUSH
38788: LD_INT 45
38790: PUSH
38791: LD_INT 46
38793: PUSH
38794: LD_INT 47
38796: PUSH
38797: LD_INT 82
38799: PUSH
38800: LD_INT 83
38802: PUSH
38803: LD_INT 84
38805: PUSH
38806: LD_INT 85
38808: PUSH
38809: LD_INT 86
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: LD_INT 6
38820: PUSH
38821: LD_INT 15
38823: PUSH
38824: LD_INT 16
38826: PUSH
38827: LD_INT 7
38829: PUSH
38830: LD_INT 12
38832: PUSH
38833: LD_INT 13
38835: PUSH
38836: LD_INT 10
38838: PUSH
38839: LD_INT 14
38841: PUSH
38842: LD_INT 20
38844: PUSH
38845: LD_INT 21
38847: PUSH
38848: LD_INT 22
38850: PUSH
38851: LD_INT 25
38853: PUSH
38854: LD_INT 32
38856: PUSH
38857: LD_INT 27
38859: PUSH
38860: LD_INT 36
38862: PUSH
38863: LD_INT 69
38865: PUSH
38866: LD_INT 39
38868: PUSH
38869: LD_INT 34
38871: PUSH
38872: LD_INT 40
38874: PUSH
38875: LD_INT 48
38877: PUSH
38878: LD_INT 49
38880: PUSH
38881: LD_INT 50
38883: PUSH
38884: LD_INT 51
38886: PUSH
38887: LD_INT 52
38889: PUSH
38890: LD_INT 53
38892: PUSH
38893: LD_INT 54
38895: PUSH
38896: LD_INT 55
38898: PUSH
38899: LD_INT 56
38901: PUSH
38902: LD_INT 57
38904: PUSH
38905: LD_INT 58
38907: PUSH
38908: LD_INT 59
38910: PUSH
38911: LD_INT 60
38913: PUSH
38914: LD_INT 61
38916: PUSH
38917: LD_INT 62
38919: PUSH
38920: LD_INT 80
38922: PUSH
38923: LD_INT 82
38925: PUSH
38926: LD_INT 83
38928: PUSH
38929: LD_INT 84
38931: PUSH
38932: LD_INT 85
38934: PUSH
38935: LD_INT 86
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
38991: GO 39458
38993: LD_INT 2
38995: DOUBLE
38996: EQUAL
38997: IFTRUE 39001
38999: GO 39227
39001: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39002: LD_ADDR_VAR 0 4
39006: PUSH
39007: LD_INT 35
39009: PUSH
39010: LD_INT 45
39012: PUSH
39013: LD_INT 46
39015: PUSH
39016: LD_INT 47
39018: PUSH
39019: LD_INT 82
39021: PUSH
39022: LD_INT 83
39024: PUSH
39025: LD_INT 84
39027: PUSH
39028: LD_INT 85
39030: PUSH
39031: LD_INT 87
39033: PUSH
39034: LD_INT 70
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: LD_INT 11
39042: PUSH
39043: LD_INT 3
39045: PUSH
39046: LD_INT 4
39048: PUSH
39049: LD_INT 5
39051: PUSH
39052: LD_INT 6
39054: PUSH
39055: LD_INT 15
39057: PUSH
39058: LD_INT 18
39060: PUSH
39061: LD_INT 7
39063: PUSH
39064: LD_INT 17
39066: PUSH
39067: LD_INT 8
39069: PUSH
39070: LD_INT 20
39072: PUSH
39073: LD_INT 21
39075: PUSH
39076: LD_INT 22
39078: PUSH
39079: LD_INT 72
39081: PUSH
39082: LD_INT 26
39084: PUSH
39085: LD_INT 69
39087: PUSH
39088: LD_INT 39
39090: PUSH
39091: LD_INT 40
39093: PUSH
39094: LD_INT 41
39096: PUSH
39097: LD_INT 42
39099: PUSH
39100: LD_INT 43
39102: PUSH
39103: LD_INT 48
39105: PUSH
39106: LD_INT 49
39108: PUSH
39109: LD_INT 50
39111: PUSH
39112: LD_INT 51
39114: PUSH
39115: LD_INT 52
39117: PUSH
39118: LD_INT 53
39120: PUSH
39121: LD_INT 54
39123: PUSH
39124: LD_INT 55
39126: PUSH
39127: LD_INT 56
39129: PUSH
39130: LD_INT 60
39132: PUSH
39133: LD_INT 61
39135: PUSH
39136: LD_INT 62
39138: PUSH
39139: LD_INT 66
39141: PUSH
39142: LD_INT 67
39144: PUSH
39145: LD_INT 68
39147: PUSH
39148: LD_INT 81
39150: PUSH
39151: LD_INT 82
39153: PUSH
39154: LD_INT 83
39156: PUSH
39157: LD_INT 84
39159: PUSH
39160: LD_INT 85
39162: PUSH
39163: LD_INT 87
39165: PUSH
39166: LD_INT 88
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: ST_TO_ADDR
39225: GO 39458
39227: LD_INT 3
39229: DOUBLE
39230: EQUAL
39231: IFTRUE 39235
39233: GO 39457
39235: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39236: LD_ADDR_VAR 0 4
39240: PUSH
39241: LD_INT 46
39243: PUSH
39244: LD_INT 47
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 82
39255: PUSH
39256: LD_INT 83
39258: PUSH
39259: LD_INT 84
39261: PUSH
39262: LD_INT 85
39264: PUSH
39265: LD_INT 86
39267: PUSH
39268: LD_INT 11
39270: PUSH
39271: LD_INT 9
39273: PUSH
39274: LD_INT 20
39276: PUSH
39277: LD_INT 19
39279: PUSH
39280: LD_INT 21
39282: PUSH
39283: LD_INT 24
39285: PUSH
39286: LD_INT 22
39288: PUSH
39289: LD_INT 25
39291: PUSH
39292: LD_INT 28
39294: PUSH
39295: LD_INT 29
39297: PUSH
39298: LD_INT 30
39300: PUSH
39301: LD_INT 31
39303: PUSH
39304: LD_INT 37
39306: PUSH
39307: LD_INT 38
39309: PUSH
39310: LD_INT 32
39312: PUSH
39313: LD_INT 27
39315: PUSH
39316: LD_INT 33
39318: PUSH
39319: LD_INT 69
39321: PUSH
39322: LD_INT 39
39324: PUSH
39325: LD_INT 34
39327: PUSH
39328: LD_INT 40
39330: PUSH
39331: LD_INT 71
39333: PUSH
39334: LD_INT 23
39336: PUSH
39337: LD_INT 44
39339: PUSH
39340: LD_INT 48
39342: PUSH
39343: LD_INT 49
39345: PUSH
39346: LD_INT 50
39348: PUSH
39349: LD_INT 51
39351: PUSH
39352: LD_INT 52
39354: PUSH
39355: LD_INT 53
39357: PUSH
39358: LD_INT 54
39360: PUSH
39361: LD_INT 55
39363: PUSH
39364: LD_INT 56
39366: PUSH
39367: LD_INT 57
39369: PUSH
39370: LD_INT 58
39372: PUSH
39373: LD_INT 59
39375: PUSH
39376: LD_INT 63
39378: PUSH
39379: LD_INT 64
39381: PUSH
39382: LD_INT 65
39384: PUSH
39385: LD_INT 82
39387: PUSH
39388: LD_INT 83
39390: PUSH
39391: LD_INT 84
39393: PUSH
39394: LD_INT 85
39396: PUSH
39397: LD_INT 86
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: ST_TO_ADDR
39455: GO 39458
39457: POP
// if state > - 1 and state < 3 then
39458: LD_VAR 0 3
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: GREATER
39467: PUSH
39468: LD_VAR 0 3
39472: PUSH
39473: LD_INT 3
39475: LESS
39476: AND
39477: IFFALSE 39534
// for i in result do
39479: LD_ADDR_VAR 0 5
39483: PUSH
39484: LD_VAR 0 4
39488: PUSH
39489: FOR_IN
39490: IFFALSE 39532
// if GetTech ( i , side ) <> state then
39492: LD_VAR 0 5
39496: PPUSH
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 321
39506: PUSH
39507: LD_VAR 0 3
39511: NONEQUAL
39512: IFFALSE 39530
// result := result diff i ;
39514: LD_ADDR_VAR 0 4
39518: PUSH
39519: LD_VAR 0 4
39523: PUSH
39524: LD_VAR 0 5
39528: DIFF
39529: ST_TO_ADDR
39530: GO 39489
39532: POP
39533: POP
// end ;
39534: LD_VAR 0 4
39538: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39539: LD_INT 0
39541: PPUSH
39542: PPUSH
39543: PPUSH
// result := true ;
39544: LD_ADDR_VAR 0 3
39548: PUSH
39549: LD_INT 1
39551: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39552: LD_ADDR_VAR 0 5
39556: PUSH
39557: LD_VAR 0 2
39561: PPUSH
39562: CALL_OW 480
39566: ST_TO_ADDR
// if not tmp then
39567: LD_VAR 0 5
39571: NOT
39572: IFFALSE 39576
// exit ;
39574: GO 39625
// for i in tmp do
39576: LD_ADDR_VAR 0 4
39580: PUSH
39581: LD_VAR 0 5
39585: PUSH
39586: FOR_IN
39587: IFFALSE 39623
// if GetTech ( i , side ) <> state_researched then
39589: LD_VAR 0 4
39593: PPUSH
39594: LD_VAR 0 1
39598: PPUSH
39599: CALL_OW 321
39603: PUSH
39604: LD_INT 2
39606: NONEQUAL
39607: IFFALSE 39621
// begin result := false ;
39609: LD_ADDR_VAR 0 3
39613: PUSH
39614: LD_INT 0
39616: ST_TO_ADDR
// exit ;
39617: POP
39618: POP
39619: GO 39625
// end ;
39621: GO 39586
39623: POP
39624: POP
// end ;
39625: LD_VAR 0 3
39629: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39630: LD_INT 0
39632: PPUSH
39633: PPUSH
39634: PPUSH
39635: PPUSH
39636: PPUSH
39637: PPUSH
39638: PPUSH
39639: PPUSH
39640: PPUSH
39641: PPUSH
39642: PPUSH
39643: PPUSH
39644: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39645: LD_VAR 0 1
39649: NOT
39650: PUSH
39651: LD_VAR 0 1
39655: PPUSH
39656: CALL_OW 257
39660: PUSH
39661: LD_INT 9
39663: NONEQUAL
39664: OR
39665: IFFALSE 39669
// exit ;
39667: GO 40242
// side := GetSide ( unit ) ;
39669: LD_ADDR_VAR 0 9
39673: PUSH
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL_OW 255
39683: ST_TO_ADDR
// tech_space := tech_spacanom ;
39684: LD_ADDR_VAR 0 12
39688: PUSH
39689: LD_INT 29
39691: ST_TO_ADDR
// tech_time := tech_taurad ;
39692: LD_ADDR_VAR 0 13
39696: PUSH
39697: LD_INT 28
39699: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39700: LD_ADDR_VAR 0 11
39704: PUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 310
39714: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39715: LD_VAR 0 11
39719: PPUSH
39720: CALL_OW 247
39724: PUSH
39725: LD_INT 2
39727: EQUAL
39728: IFFALSE 39732
// exit ;
39730: GO 40242
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39732: LD_ADDR_VAR 0 8
39736: PUSH
39737: LD_INT 81
39739: PUSH
39740: LD_VAR 0 9
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 3
39751: PUSH
39752: LD_INT 21
39754: PUSH
39755: LD_INT 3
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PPUSH
39770: CALL_OW 69
39774: ST_TO_ADDR
// if not tmp then
39775: LD_VAR 0 8
39779: NOT
39780: IFFALSE 39784
// exit ;
39782: GO 40242
// if in_unit then
39784: LD_VAR 0 11
39788: IFFALSE 39812
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39790: LD_ADDR_VAR 0 10
39794: PUSH
39795: LD_VAR 0 8
39799: PPUSH
39800: LD_VAR 0 11
39804: PPUSH
39805: CALL_OW 74
39809: ST_TO_ADDR
39810: GO 39832
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39812: LD_ADDR_VAR 0 10
39816: PUSH
39817: LD_VAR 0 8
39821: PPUSH
39822: LD_VAR 0 1
39826: PPUSH
39827: CALL_OW 74
39831: ST_TO_ADDR
// if not enemy then
39832: LD_VAR 0 10
39836: NOT
39837: IFFALSE 39841
// exit ;
39839: GO 40242
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39841: LD_VAR 0 11
39845: PUSH
39846: LD_VAR 0 11
39850: PPUSH
39851: LD_VAR 0 10
39855: PPUSH
39856: CALL_OW 296
39860: PUSH
39861: LD_INT 13
39863: GREATER
39864: AND
39865: PUSH
39866: LD_VAR 0 1
39870: PPUSH
39871: LD_VAR 0 10
39875: PPUSH
39876: CALL_OW 296
39880: PUSH
39881: LD_INT 12
39883: GREATER
39884: OR
39885: IFFALSE 39889
// exit ;
39887: GO 40242
// missile := [ 1 ] ;
39889: LD_ADDR_VAR 0 14
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39900: LD_VAR 0 9
39904: PPUSH
39905: LD_VAR 0 12
39909: PPUSH
39910: CALL_OW 325
39914: IFFALSE 39943
// missile := Replace ( missile , missile + 1 , 2 ) ;
39916: LD_ADDR_VAR 0 14
39920: PUSH
39921: LD_VAR 0 14
39925: PPUSH
39926: LD_VAR 0 14
39930: PUSH
39931: LD_INT 1
39933: PLUS
39934: PPUSH
39935: LD_INT 2
39937: PPUSH
39938: CALL_OW 1
39942: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39943: LD_VAR 0 9
39947: PPUSH
39948: LD_VAR 0 13
39952: PPUSH
39953: CALL_OW 325
39957: PUSH
39958: LD_VAR 0 10
39962: PPUSH
39963: CALL_OW 255
39967: PPUSH
39968: LD_VAR 0 13
39972: PPUSH
39973: CALL_OW 325
39977: NOT
39978: AND
39979: IFFALSE 40008
// missile := Replace ( missile , missile + 1 , 3 ) ;
39981: LD_ADDR_VAR 0 14
39985: PUSH
39986: LD_VAR 0 14
39990: PPUSH
39991: LD_VAR 0 14
39995: PUSH
39996: LD_INT 1
39998: PLUS
39999: PPUSH
40000: LD_INT 3
40002: PPUSH
40003: CALL_OW 1
40007: ST_TO_ADDR
// if missile < 2 then
40008: LD_VAR 0 14
40012: PUSH
40013: LD_INT 2
40015: LESS
40016: IFFALSE 40020
// exit ;
40018: GO 40242
// x := GetX ( enemy ) ;
40020: LD_ADDR_VAR 0 4
40024: PUSH
40025: LD_VAR 0 10
40029: PPUSH
40030: CALL_OW 250
40034: ST_TO_ADDR
// y := GetY ( enemy ) ;
40035: LD_ADDR_VAR 0 5
40039: PUSH
40040: LD_VAR 0 10
40044: PPUSH
40045: CALL_OW 251
40049: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40050: LD_ADDR_VAR 0 6
40054: PUSH
40055: LD_VAR 0 4
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PPUSH
40064: LD_INT 1
40066: PPUSH
40067: CALL_OW 12
40071: PLUS
40072: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40073: LD_ADDR_VAR 0 7
40077: PUSH
40078: LD_VAR 0 5
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PPUSH
40087: LD_INT 1
40089: PPUSH
40090: CALL_OW 12
40094: PLUS
40095: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40096: LD_VAR 0 6
40100: PPUSH
40101: LD_VAR 0 7
40105: PPUSH
40106: CALL_OW 488
40110: NOT
40111: IFFALSE 40133
// begin _x := x ;
40113: LD_ADDR_VAR 0 6
40117: PUSH
40118: LD_VAR 0 4
40122: ST_TO_ADDR
// _y := y ;
40123: LD_ADDR_VAR 0 7
40127: PUSH
40128: LD_VAR 0 5
40132: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40133: LD_ADDR_VAR 0 3
40137: PUSH
40138: LD_INT 1
40140: PPUSH
40141: LD_VAR 0 14
40145: PPUSH
40146: CALL_OW 12
40150: ST_TO_ADDR
// case i of 1 :
40151: LD_VAR 0 3
40155: PUSH
40156: LD_INT 1
40158: DOUBLE
40159: EQUAL
40160: IFTRUE 40164
40162: GO 40181
40164: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40165: LD_VAR 0 1
40169: PPUSH
40170: LD_VAR 0 10
40174: PPUSH
40175: CALL_OW 115
40179: GO 40242
40181: LD_INT 2
40183: DOUBLE
40184: EQUAL
40185: IFTRUE 40189
40187: GO 40211
40189: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40190: LD_VAR 0 1
40194: PPUSH
40195: LD_VAR 0 6
40199: PPUSH
40200: LD_VAR 0 7
40204: PPUSH
40205: CALL_OW 153
40209: GO 40242
40211: LD_INT 3
40213: DOUBLE
40214: EQUAL
40215: IFTRUE 40219
40217: GO 40241
40219: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40220: LD_VAR 0 1
40224: PPUSH
40225: LD_VAR 0 6
40229: PPUSH
40230: LD_VAR 0 7
40234: PPUSH
40235: CALL_OW 154
40239: GO 40242
40241: POP
// end ;
40242: LD_VAR 0 2
40246: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40247: LD_INT 0
40249: PPUSH
40250: PPUSH
40251: PPUSH
40252: PPUSH
40253: PPUSH
40254: PPUSH
// if not unit or not building then
40255: LD_VAR 0 1
40259: NOT
40260: PUSH
40261: LD_VAR 0 2
40265: NOT
40266: OR
40267: IFFALSE 40271
// exit ;
40269: GO 40429
// x := GetX ( building ) ;
40271: LD_ADDR_VAR 0 5
40275: PUSH
40276: LD_VAR 0 2
40280: PPUSH
40281: CALL_OW 250
40285: ST_TO_ADDR
// y := GetY ( building ) ;
40286: LD_ADDR_VAR 0 6
40290: PUSH
40291: LD_VAR 0 2
40295: PPUSH
40296: CALL_OW 251
40300: ST_TO_ADDR
// for i = 0 to 5 do
40301: LD_ADDR_VAR 0 4
40305: PUSH
40306: DOUBLE
40307: LD_INT 0
40309: DEC
40310: ST_TO_ADDR
40311: LD_INT 5
40313: PUSH
40314: FOR_TO
40315: IFFALSE 40427
// begin _x := ShiftX ( x , i , 3 ) ;
40317: LD_ADDR_VAR 0 7
40321: PUSH
40322: LD_VAR 0 5
40326: PPUSH
40327: LD_VAR 0 4
40331: PPUSH
40332: LD_INT 3
40334: PPUSH
40335: CALL_OW 272
40339: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40340: LD_ADDR_VAR 0 8
40344: PUSH
40345: LD_VAR 0 6
40349: PPUSH
40350: LD_VAR 0 4
40354: PPUSH
40355: LD_INT 3
40357: PPUSH
40358: CALL_OW 273
40362: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40363: LD_VAR 0 7
40367: PPUSH
40368: LD_VAR 0 8
40372: PPUSH
40373: CALL_OW 488
40377: NOT
40378: IFFALSE 40382
// continue ;
40380: GO 40314
// if HexInfo ( _x , _y ) = 0 then
40382: LD_VAR 0 7
40386: PPUSH
40387: LD_VAR 0 8
40391: PPUSH
40392: CALL_OW 428
40396: PUSH
40397: LD_INT 0
40399: EQUAL
40400: IFFALSE 40425
// begin ComMoveXY ( unit , _x , _y ) ;
40402: LD_VAR 0 1
40406: PPUSH
40407: LD_VAR 0 7
40411: PPUSH
40412: LD_VAR 0 8
40416: PPUSH
40417: CALL_OW 111
// exit ;
40421: POP
40422: POP
40423: GO 40429
// end ; end ;
40425: GO 40314
40427: POP
40428: POP
// end ;
40429: LD_VAR 0 3
40433: RET
// export function ScanBase ( side , base_area ) ; begin
40434: LD_INT 0
40436: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40437: LD_ADDR_VAR 0 3
40441: PUSH
40442: LD_VAR 0 2
40446: PPUSH
40447: LD_INT 81
40449: PUSH
40450: LD_VAR 0 1
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PPUSH
40459: CALL_OW 70
40463: ST_TO_ADDR
// end ;
40464: LD_VAR 0 3
40468: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40469: LD_INT 0
40471: PPUSH
40472: PPUSH
40473: PPUSH
40474: PPUSH
// result := false ;
40475: LD_ADDR_VAR 0 2
40479: PUSH
40480: LD_INT 0
40482: ST_TO_ADDR
// side := GetSide ( unit ) ;
40483: LD_ADDR_VAR 0 3
40487: PUSH
40488: LD_VAR 0 1
40492: PPUSH
40493: CALL_OW 255
40497: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40498: LD_ADDR_VAR 0 4
40502: PUSH
40503: LD_VAR 0 1
40507: PPUSH
40508: CALL_OW 248
40512: ST_TO_ADDR
// case nat of 1 :
40513: LD_VAR 0 4
40517: PUSH
40518: LD_INT 1
40520: DOUBLE
40521: EQUAL
40522: IFTRUE 40526
40524: GO 40537
40526: POP
// tech := tech_lassight ; 2 :
40527: LD_ADDR_VAR 0 5
40531: PUSH
40532: LD_INT 12
40534: ST_TO_ADDR
40535: GO 40576
40537: LD_INT 2
40539: DOUBLE
40540: EQUAL
40541: IFTRUE 40545
40543: GO 40556
40545: POP
// tech := tech_mortar ; 3 :
40546: LD_ADDR_VAR 0 5
40550: PUSH
40551: LD_INT 41
40553: ST_TO_ADDR
40554: GO 40576
40556: LD_INT 3
40558: DOUBLE
40559: EQUAL
40560: IFTRUE 40564
40562: GO 40575
40564: POP
// tech := tech_bazooka ; end ;
40565: LD_ADDR_VAR 0 5
40569: PUSH
40570: LD_INT 44
40572: ST_TO_ADDR
40573: GO 40576
40575: POP
// if Researched ( side , tech ) then
40576: LD_VAR 0 3
40580: PPUSH
40581: LD_VAR 0 5
40585: PPUSH
40586: CALL_OW 325
40590: IFFALSE 40617
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40592: LD_ADDR_VAR 0 2
40596: PUSH
40597: LD_INT 5
40599: PUSH
40600: LD_INT 8
40602: PUSH
40603: LD_INT 9
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: LIST
40610: PUSH
40611: LD_VAR 0 4
40615: ARRAY
40616: ST_TO_ADDR
// end ;
40617: LD_VAR 0 2
40621: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40622: LD_INT 0
40624: PPUSH
40625: PPUSH
40626: PPUSH
// if not mines then
40627: LD_VAR 0 2
40631: NOT
40632: IFFALSE 40636
// exit ;
40634: GO 40780
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40636: LD_ADDR_VAR 0 5
40640: PUSH
40641: LD_INT 81
40643: PUSH
40644: LD_VAR 0 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 3
40655: PUSH
40656: LD_INT 21
40658: PUSH
40659: LD_INT 3
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PPUSH
40674: CALL_OW 69
40678: ST_TO_ADDR
// for i in mines do
40679: LD_ADDR_VAR 0 4
40683: PUSH
40684: LD_VAR 0 2
40688: PUSH
40689: FOR_IN
40690: IFFALSE 40778
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40692: LD_VAR 0 4
40696: PUSH
40697: LD_INT 1
40699: ARRAY
40700: PPUSH
40701: LD_VAR 0 4
40705: PUSH
40706: LD_INT 2
40708: ARRAY
40709: PPUSH
40710: CALL_OW 458
40714: NOT
40715: IFFALSE 40719
// continue ;
40717: GO 40689
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40719: LD_VAR 0 4
40723: PUSH
40724: LD_INT 1
40726: ARRAY
40727: PPUSH
40728: LD_VAR 0 4
40732: PUSH
40733: LD_INT 2
40735: ARRAY
40736: PPUSH
40737: CALL_OW 428
40741: PUSH
40742: LD_VAR 0 5
40746: IN
40747: IFFALSE 40776
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40749: LD_VAR 0 4
40753: PUSH
40754: LD_INT 1
40756: ARRAY
40757: PPUSH
40758: LD_VAR 0 4
40762: PUSH
40763: LD_INT 2
40765: ARRAY
40766: PPUSH
40767: LD_VAR 0 1
40771: PPUSH
40772: CALL_OW 456
// end ;
40776: GO 40689
40778: POP
40779: POP
// end ;
40780: LD_VAR 0 3
40784: RET
// export function Count ( array ) ; var i ; begin
40785: LD_INT 0
40787: PPUSH
40788: PPUSH
// result := 0 ;
40789: LD_ADDR_VAR 0 2
40793: PUSH
40794: LD_INT 0
40796: ST_TO_ADDR
// for i in array do
40797: LD_ADDR_VAR 0 3
40801: PUSH
40802: LD_VAR 0 1
40806: PUSH
40807: FOR_IN
40808: IFFALSE 40832
// if i then
40810: LD_VAR 0 3
40814: IFFALSE 40830
// result := result + 1 ;
40816: LD_ADDR_VAR 0 2
40820: PUSH
40821: LD_VAR 0 2
40825: PUSH
40826: LD_INT 1
40828: PLUS
40829: ST_TO_ADDR
40830: GO 40807
40832: POP
40833: POP
// end ;
40834: LD_VAR 0 2
40838: RET
// export function IsEmpty ( building ) ; begin
40839: LD_INT 0
40841: PPUSH
// if not building then
40842: LD_VAR 0 1
40846: NOT
40847: IFFALSE 40851
// exit ;
40849: GO 40894
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40851: LD_ADDR_VAR 0 2
40855: PUSH
40856: LD_VAR 0 1
40860: PUSH
40861: LD_INT 22
40863: PUSH
40864: LD_VAR 0 1
40868: PPUSH
40869: CALL_OW 255
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 58
40880: PUSH
40881: EMPTY
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PPUSH
40888: CALL_OW 69
40892: IN
40893: ST_TO_ADDR
// end ;
40894: LD_VAR 0 2
40898: RET
// export function IsNotFull ( building ) ; var places ; begin
40899: LD_INT 0
40901: PPUSH
40902: PPUSH
// if not building then
40903: LD_VAR 0 1
40907: NOT
40908: IFFALSE 40912
// exit ;
40910: GO 41083
// result := false ;
40912: LD_ADDR_VAR 0 2
40916: PUSH
40917: LD_INT 0
40919: ST_TO_ADDR
// places := 0 ;
40920: LD_ADDR_VAR 0 3
40924: PUSH
40925: LD_INT 0
40927: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
40928: LD_VAR 0 1
40932: PPUSH
40933: CALL_OW 266
40937: PUSH
40938: LD_INT 0
40940: DOUBLE
40941: EQUAL
40942: IFTRUE 41000
40944: LD_INT 1
40946: DOUBLE
40947: EQUAL
40948: IFTRUE 41000
40950: LD_INT 6
40952: DOUBLE
40953: EQUAL
40954: IFTRUE 41000
40956: LD_INT 7
40958: DOUBLE
40959: EQUAL
40960: IFTRUE 41000
40962: LD_INT 8
40964: DOUBLE
40965: EQUAL
40966: IFTRUE 41000
40968: LD_INT 4
40970: DOUBLE
40971: EQUAL
40972: IFTRUE 41000
40974: LD_INT 5
40976: DOUBLE
40977: EQUAL
40978: IFTRUE 41000
40980: LD_INT 2
40982: DOUBLE
40983: EQUAL
40984: IFTRUE 41000
40986: LD_INT 3
40988: DOUBLE
40989: EQUAL
40990: IFTRUE 41000
40992: LD_INT 35
40994: DOUBLE
40995: EQUAL
40996: IFTRUE 41000
40998: GO 41011
41000: POP
// places := 6 ; b_bunker , b_breastwork :
41001: LD_ADDR_VAR 0 3
41005: PUSH
41006: LD_INT 6
41008: ST_TO_ADDR
41009: GO 41056
41011: LD_INT 32
41013: DOUBLE
41014: EQUAL
41015: IFTRUE 41025
41017: LD_INT 31
41019: DOUBLE
41020: EQUAL
41021: IFTRUE 41025
41023: GO 41036
41025: POP
// places := 1 ; b_control_tower :
41026: LD_ADDR_VAR 0 3
41030: PUSH
41031: LD_INT 1
41033: ST_TO_ADDR
41034: GO 41056
41036: LD_INT 36
41038: DOUBLE
41039: EQUAL
41040: IFTRUE 41044
41042: GO 41055
41044: POP
// places := 3 ; end ;
41045: LD_ADDR_VAR 0 3
41049: PUSH
41050: LD_INT 3
41052: ST_TO_ADDR
41053: GO 41056
41055: POP
// if places then
41056: LD_VAR 0 3
41060: IFFALSE 41083
// result := UnitsInside ( building ) < places ;
41062: LD_ADDR_VAR 0 2
41066: PUSH
41067: LD_VAR 0 1
41071: PPUSH
41072: CALL_OW 313
41076: PUSH
41077: LD_VAR 0 3
41081: LESS
41082: ST_TO_ADDR
// end ;
41083: LD_VAR 0 2
41087: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41088: LD_INT 0
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
// tmp := [ ] ;
41094: LD_ADDR_VAR 0 3
41098: PUSH
41099: EMPTY
41100: ST_TO_ADDR
// list := [ ] ;
41101: LD_ADDR_VAR 0 5
41105: PUSH
41106: EMPTY
41107: ST_TO_ADDR
// for i = 16 to 25 do
41108: LD_ADDR_VAR 0 4
41112: PUSH
41113: DOUBLE
41114: LD_INT 16
41116: DEC
41117: ST_TO_ADDR
41118: LD_INT 25
41120: PUSH
41121: FOR_TO
41122: IFFALSE 41195
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41124: LD_ADDR_VAR 0 3
41128: PUSH
41129: LD_VAR 0 3
41133: PUSH
41134: LD_INT 22
41136: PUSH
41137: LD_VAR 0 1
41141: PPUSH
41142: CALL_OW 255
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 91
41153: PUSH
41154: LD_VAR 0 1
41158: PUSH
41159: LD_INT 6
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 30
41169: PUSH
41170: LD_VAR 0 4
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: LIST
41183: PUSH
41184: EMPTY
41185: LIST
41186: PPUSH
41187: CALL_OW 69
41191: ADD
41192: ST_TO_ADDR
41193: GO 41121
41195: POP
41196: POP
// for i = 1 to tmp do
41197: LD_ADDR_VAR 0 4
41201: PUSH
41202: DOUBLE
41203: LD_INT 1
41205: DEC
41206: ST_TO_ADDR
41207: LD_VAR 0 3
41211: PUSH
41212: FOR_TO
41213: IFFALSE 41301
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41215: LD_ADDR_VAR 0 5
41219: PUSH
41220: LD_VAR 0 5
41224: PUSH
41225: LD_VAR 0 3
41229: PUSH
41230: LD_VAR 0 4
41234: ARRAY
41235: PPUSH
41236: CALL_OW 266
41240: PUSH
41241: LD_VAR 0 3
41245: PUSH
41246: LD_VAR 0 4
41250: ARRAY
41251: PPUSH
41252: CALL_OW 250
41256: PUSH
41257: LD_VAR 0 3
41261: PUSH
41262: LD_VAR 0 4
41266: ARRAY
41267: PPUSH
41268: CALL_OW 251
41272: PUSH
41273: LD_VAR 0 3
41277: PUSH
41278: LD_VAR 0 4
41282: ARRAY
41283: PPUSH
41284: CALL_OW 254
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: PUSH
41295: EMPTY
41296: LIST
41297: ADD
41298: ST_TO_ADDR
41299: GO 41212
41301: POP
41302: POP
// result := list ;
41303: LD_ADDR_VAR 0 2
41307: PUSH
41308: LD_VAR 0 5
41312: ST_TO_ADDR
// end ;
41313: LD_VAR 0 2
41317: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41318: LD_INT 0
41320: PPUSH
41321: PPUSH
41322: PPUSH
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
// if not factory then
41327: LD_VAR 0 1
41331: NOT
41332: IFFALSE 41336
// exit ;
41334: GO 41929
// if control = control_apeman then
41336: LD_VAR 0 4
41340: PUSH
41341: LD_INT 5
41343: EQUAL
41344: IFFALSE 41453
// begin tmp := UnitsInside ( factory ) ;
41346: LD_ADDR_VAR 0 8
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 313
41360: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41361: LD_VAR 0 8
41365: PPUSH
41366: LD_INT 25
41368: PUSH
41369: LD_INT 12
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PPUSH
41376: CALL_OW 72
41380: NOT
41381: IFFALSE 41391
// control := control_manual ;
41383: LD_ADDR_VAR 0 4
41387: PUSH
41388: LD_INT 1
41390: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41391: LD_ADDR_VAR 0 8
41395: PUSH
41396: LD_VAR 0 1
41400: PPUSH
41401: CALL 41088 0 1
41405: ST_TO_ADDR
// if tmp then
41406: LD_VAR 0 8
41410: IFFALSE 41453
// begin for i in tmp do
41412: LD_ADDR_VAR 0 7
41416: PUSH
41417: LD_VAR 0 8
41421: PUSH
41422: FOR_IN
41423: IFFALSE 41451
// if i [ 1 ] = b_ext_radio then
41425: LD_VAR 0 7
41429: PUSH
41430: LD_INT 1
41432: ARRAY
41433: PUSH
41434: LD_INT 22
41436: EQUAL
41437: IFFALSE 41449
// begin control := control_remote ;
41439: LD_ADDR_VAR 0 4
41443: PUSH
41444: LD_INT 2
41446: ST_TO_ADDR
// break ;
41447: GO 41451
// end ;
41449: GO 41422
41451: POP
41452: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41453: LD_VAR 0 1
41457: PPUSH
41458: LD_VAR 0 2
41462: PPUSH
41463: LD_VAR 0 3
41467: PPUSH
41468: LD_VAR 0 4
41472: PPUSH
41473: LD_VAR 0 5
41477: PPUSH
41478: CALL_OW 448
41482: IFFALSE 41517
// begin result := [ chassis , engine , control , weapon ] ;
41484: LD_ADDR_VAR 0 6
41488: PUSH
41489: LD_VAR 0 2
41493: PUSH
41494: LD_VAR 0 3
41498: PUSH
41499: LD_VAR 0 4
41503: PUSH
41504: LD_VAR 0 5
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: ST_TO_ADDR
// exit ;
41515: GO 41929
// end ; _chassis := AvailableChassisList ( factory ) ;
41517: LD_ADDR_VAR 0 9
41521: PUSH
41522: LD_VAR 0 1
41526: PPUSH
41527: CALL_OW 475
41531: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41532: LD_ADDR_VAR 0 11
41536: PUSH
41537: LD_VAR 0 1
41541: PPUSH
41542: CALL_OW 476
41546: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41547: LD_ADDR_VAR 0 12
41551: PUSH
41552: LD_VAR 0 1
41556: PPUSH
41557: CALL_OW 477
41561: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41562: LD_ADDR_VAR 0 10
41566: PUSH
41567: LD_VAR 0 1
41571: PPUSH
41572: CALL_OW 478
41576: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41577: LD_VAR 0 9
41581: NOT
41582: PUSH
41583: LD_VAR 0 11
41587: NOT
41588: OR
41589: PUSH
41590: LD_VAR 0 12
41594: NOT
41595: OR
41596: PUSH
41597: LD_VAR 0 10
41601: NOT
41602: OR
41603: IFFALSE 41638
// begin result := [ chassis , engine , control , weapon ] ;
41605: LD_ADDR_VAR 0 6
41609: PUSH
41610: LD_VAR 0 2
41614: PUSH
41615: LD_VAR 0 3
41619: PUSH
41620: LD_VAR 0 4
41624: PUSH
41625: LD_VAR 0 5
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: ST_TO_ADDR
// exit ;
41636: GO 41929
// end ; if not chassis in _chassis then
41638: LD_VAR 0 2
41642: PUSH
41643: LD_VAR 0 9
41647: IN
41648: NOT
41649: IFFALSE 41675
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41651: LD_ADDR_VAR 0 2
41655: PUSH
41656: LD_VAR 0 9
41660: PUSH
41661: LD_INT 1
41663: PPUSH
41664: LD_VAR 0 9
41668: PPUSH
41669: CALL_OW 12
41673: ARRAY
41674: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41675: LD_VAR 0 2
41679: PPUSH
41680: LD_VAR 0 3
41684: PPUSH
41685: CALL 41934 0 2
41689: NOT
41690: IFFALSE 41749
// repeat engine := _engine [ 1 ] ;
41692: LD_ADDR_VAR 0 3
41696: PUSH
41697: LD_VAR 0 11
41701: PUSH
41702: LD_INT 1
41704: ARRAY
41705: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41706: LD_ADDR_VAR 0 11
41710: PUSH
41711: LD_VAR 0 11
41715: PPUSH
41716: LD_INT 1
41718: PPUSH
41719: CALL_OW 3
41723: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41724: LD_VAR 0 2
41728: PPUSH
41729: LD_VAR 0 3
41733: PPUSH
41734: CALL 41934 0 2
41738: PUSH
41739: LD_VAR 0 11
41743: PUSH
41744: EMPTY
41745: EQUAL
41746: OR
41747: IFFALSE 41692
// if not control in _control then
41749: LD_VAR 0 4
41753: PUSH
41754: LD_VAR 0 12
41758: IN
41759: NOT
41760: IFFALSE 41786
// control := _control [ rand ( 1 , _control ) ] ;
41762: LD_ADDR_VAR 0 4
41766: PUSH
41767: LD_VAR 0 12
41771: PUSH
41772: LD_INT 1
41774: PPUSH
41775: LD_VAR 0 12
41779: PPUSH
41780: CALL_OW 12
41784: ARRAY
41785: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41786: LD_VAR 0 2
41790: PPUSH
41791: LD_VAR 0 5
41795: PPUSH
41796: CALL 42154 0 2
41800: NOT
41801: IFFALSE 41860
// repeat weapon := _weapon [ 1 ] ;
41803: LD_ADDR_VAR 0 5
41807: PUSH
41808: LD_VAR 0 10
41812: PUSH
41813: LD_INT 1
41815: ARRAY
41816: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41817: LD_ADDR_VAR 0 10
41821: PUSH
41822: LD_VAR 0 10
41826: PPUSH
41827: LD_INT 1
41829: PPUSH
41830: CALL_OW 3
41834: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41835: LD_VAR 0 2
41839: PPUSH
41840: LD_VAR 0 5
41844: PPUSH
41845: CALL 42154 0 2
41849: PUSH
41850: LD_VAR 0 10
41854: PUSH
41855: EMPTY
41856: EQUAL
41857: OR
41858: IFFALSE 41803
// result := [ ] ;
41860: LD_ADDR_VAR 0 6
41864: PUSH
41865: EMPTY
41866: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41867: LD_VAR 0 1
41871: PPUSH
41872: LD_VAR 0 2
41876: PPUSH
41877: LD_VAR 0 3
41881: PPUSH
41882: LD_VAR 0 4
41886: PPUSH
41887: LD_VAR 0 5
41891: PPUSH
41892: CALL_OW 448
41896: IFFALSE 41929
// result := [ chassis , engine , control , weapon ] ;
41898: LD_ADDR_VAR 0 6
41902: PUSH
41903: LD_VAR 0 2
41907: PUSH
41908: LD_VAR 0 3
41912: PUSH
41913: LD_VAR 0 4
41917: PUSH
41918: LD_VAR 0 5
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: ST_TO_ADDR
// end ;
41929: LD_VAR 0 6
41933: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41934: LD_INT 0
41936: PPUSH
// if not chassis or not engine then
41937: LD_VAR 0 1
41941: NOT
41942: PUSH
41943: LD_VAR 0 2
41947: NOT
41948: OR
41949: IFFALSE 41953
// exit ;
41951: GO 42149
// case engine of engine_solar :
41953: LD_VAR 0 2
41957: PUSH
41958: LD_INT 2
41960: DOUBLE
41961: EQUAL
41962: IFTRUE 41966
41964: GO 42004
41966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41967: LD_ADDR_VAR 0 3
41971: PUSH
41972: LD_INT 11
41974: PUSH
41975: LD_INT 12
41977: PUSH
41978: LD_INT 13
41980: PUSH
41981: LD_INT 14
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 3
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: ST_TO_ADDR
42002: GO 42133
42004: LD_INT 1
42006: DOUBLE
42007: EQUAL
42008: IFTRUE 42012
42010: GO 42074
42012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42013: LD_ADDR_VAR 0 3
42017: PUSH
42018: LD_INT 11
42020: PUSH
42021: LD_INT 12
42023: PUSH
42024: LD_INT 13
42026: PUSH
42027: LD_INT 14
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: LD_INT 4
42041: PUSH
42042: LD_INT 5
42044: PUSH
42045: LD_INT 21
42047: PUSH
42048: LD_INT 23
42050: PUSH
42051: LD_INT 22
42053: PUSH
42054: LD_INT 24
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: ST_TO_ADDR
42072: GO 42133
42074: LD_INT 3
42076: DOUBLE
42077: EQUAL
42078: IFTRUE 42082
42080: GO 42132
42082: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42083: LD_ADDR_VAR 0 3
42087: PUSH
42088: LD_INT 13
42090: PUSH
42091: LD_INT 14
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: LD_INT 4
42102: PUSH
42103: LD_INT 5
42105: PUSH
42106: LD_INT 21
42108: PUSH
42109: LD_INT 22
42111: PUSH
42112: LD_INT 23
42114: PUSH
42115: LD_INT 24
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
42130: GO 42133
42132: POP
// result := ( chassis in result ) ;
42133: LD_ADDR_VAR 0 3
42137: PUSH
42138: LD_VAR 0 1
42142: PUSH
42143: LD_VAR 0 3
42147: IN
42148: ST_TO_ADDR
// end ;
42149: LD_VAR 0 3
42153: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42154: LD_INT 0
42156: PPUSH
// if not chassis or not weapon then
42157: LD_VAR 0 1
42161: NOT
42162: PUSH
42163: LD_VAR 0 2
42167: NOT
42168: OR
42169: IFFALSE 42173
// exit ;
42171: GO 43233
// case weapon of us_machine_gun :
42173: LD_VAR 0 2
42177: PUSH
42178: LD_INT 2
42180: DOUBLE
42181: EQUAL
42182: IFTRUE 42186
42184: GO 42216
42186: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42187: LD_ADDR_VAR 0 3
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: LD_INT 3
42200: PUSH
42201: LD_INT 4
42203: PUSH
42204: LD_INT 5
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: ST_TO_ADDR
42214: GO 43217
42216: LD_INT 3
42218: DOUBLE
42219: EQUAL
42220: IFTRUE 42224
42222: GO 42254
42224: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42225: LD_ADDR_VAR 0 3
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: LD_INT 4
42241: PUSH
42242: LD_INT 5
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
42252: GO 43217
42254: LD_INT 11
42256: DOUBLE
42257: EQUAL
42258: IFTRUE 42262
42260: GO 42292
42262: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 3
42276: PUSH
42277: LD_INT 4
42279: PUSH
42280: LD_INT 5
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: ST_TO_ADDR
42290: GO 43217
42292: LD_INT 4
42294: DOUBLE
42295: EQUAL
42296: IFTRUE 42300
42298: GO 42326
42300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42301: LD_ADDR_VAR 0 3
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: LD_INT 3
42311: PUSH
42312: LD_INT 4
42314: PUSH
42315: LD_INT 5
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: ST_TO_ADDR
42324: GO 43217
42326: LD_INT 5
42328: DOUBLE
42329: EQUAL
42330: IFTRUE 42334
42332: GO 42360
42334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42335: LD_ADDR_VAR 0 3
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 3
42345: PUSH
42346: LD_INT 4
42348: PUSH
42349: LD_INT 5
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: ST_TO_ADDR
42358: GO 43217
42360: LD_INT 9
42362: DOUBLE
42363: EQUAL
42364: IFTRUE 42368
42366: GO 42394
42368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42369: LD_ADDR_VAR 0 3
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 3
42379: PUSH
42380: LD_INT 4
42382: PUSH
42383: LD_INT 5
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: ST_TO_ADDR
42392: GO 43217
42394: LD_INT 7
42396: DOUBLE
42397: EQUAL
42398: IFTRUE 42402
42400: GO 42428
42402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42403: LD_ADDR_VAR 0 3
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: LD_INT 3
42413: PUSH
42414: LD_INT 4
42416: PUSH
42417: LD_INT 5
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: ST_TO_ADDR
42426: GO 43217
42428: LD_INT 12
42430: DOUBLE
42431: EQUAL
42432: IFTRUE 42436
42434: GO 42462
42436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42437: LD_ADDR_VAR 0 3
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: LD_INT 3
42447: PUSH
42448: LD_INT 4
42450: PUSH
42451: LD_INT 5
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: ST_TO_ADDR
42460: GO 43217
42462: LD_INT 13
42464: DOUBLE
42465: EQUAL
42466: IFTRUE 42470
42468: GO 42496
42470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42471: LD_ADDR_VAR 0 3
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: LD_INT 3
42481: PUSH
42482: LD_INT 4
42484: PUSH
42485: LD_INT 5
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: ST_TO_ADDR
42494: GO 43217
42496: LD_INT 14
42498: DOUBLE
42499: EQUAL
42500: IFTRUE 42504
42502: GO 42522
42504: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42505: LD_ADDR_VAR 0 3
42509: PUSH
42510: LD_INT 4
42512: PUSH
42513: LD_INT 5
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: ST_TO_ADDR
42520: GO 43217
42522: LD_INT 6
42524: DOUBLE
42525: EQUAL
42526: IFTRUE 42530
42528: GO 42548
42530: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42531: LD_ADDR_VAR 0 3
42535: PUSH
42536: LD_INT 4
42538: PUSH
42539: LD_INT 5
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: ST_TO_ADDR
42546: GO 43217
42548: LD_INT 10
42550: DOUBLE
42551: EQUAL
42552: IFTRUE 42556
42554: GO 42574
42556: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42557: LD_ADDR_VAR 0 3
42561: PUSH
42562: LD_INT 4
42564: PUSH
42565: LD_INT 5
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: ST_TO_ADDR
42572: GO 43217
42574: LD_INT 22
42576: DOUBLE
42577: EQUAL
42578: IFTRUE 42582
42580: GO 42608
42582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42583: LD_ADDR_VAR 0 3
42587: PUSH
42588: LD_INT 11
42590: PUSH
42591: LD_INT 12
42593: PUSH
42594: LD_INT 13
42596: PUSH
42597: LD_INT 14
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: ST_TO_ADDR
42606: GO 43217
42608: LD_INT 23
42610: DOUBLE
42611: EQUAL
42612: IFTRUE 42616
42614: GO 42642
42616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42617: LD_ADDR_VAR 0 3
42621: PUSH
42622: LD_INT 11
42624: PUSH
42625: LD_INT 12
42627: PUSH
42628: LD_INT 13
42630: PUSH
42631: LD_INT 14
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: ST_TO_ADDR
42640: GO 43217
42642: LD_INT 24
42644: DOUBLE
42645: EQUAL
42646: IFTRUE 42650
42648: GO 42676
42650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42651: LD_ADDR_VAR 0 3
42655: PUSH
42656: LD_INT 11
42658: PUSH
42659: LD_INT 12
42661: PUSH
42662: LD_INT 13
42664: PUSH
42665: LD_INT 14
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: ST_TO_ADDR
42674: GO 43217
42676: LD_INT 30
42678: DOUBLE
42679: EQUAL
42680: IFTRUE 42684
42682: GO 42710
42684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42685: LD_ADDR_VAR 0 3
42689: PUSH
42690: LD_INT 11
42692: PUSH
42693: LD_INT 12
42695: PUSH
42696: LD_INT 13
42698: PUSH
42699: LD_INT 14
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: ST_TO_ADDR
42708: GO 43217
42710: LD_INT 25
42712: DOUBLE
42713: EQUAL
42714: IFTRUE 42718
42716: GO 42736
42718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42719: LD_ADDR_VAR 0 3
42723: PUSH
42724: LD_INT 13
42726: PUSH
42727: LD_INT 14
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: ST_TO_ADDR
42734: GO 43217
42736: LD_INT 27
42738: DOUBLE
42739: EQUAL
42740: IFTRUE 42744
42742: GO 42762
42744: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42745: LD_ADDR_VAR 0 3
42749: PUSH
42750: LD_INT 13
42752: PUSH
42753: LD_INT 14
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: ST_TO_ADDR
42760: GO 43217
42762: LD_INT 92
42764: DOUBLE
42765: EQUAL
42766: IFTRUE 42770
42768: GO 42796
42770: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42771: LD_ADDR_VAR 0 3
42775: PUSH
42776: LD_INT 11
42778: PUSH
42779: LD_INT 12
42781: PUSH
42782: LD_INT 13
42784: PUSH
42785: LD_INT 14
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: ST_TO_ADDR
42794: GO 43217
42796: LD_INT 28
42798: DOUBLE
42799: EQUAL
42800: IFTRUE 42804
42802: GO 42822
42804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42805: LD_ADDR_VAR 0 3
42809: PUSH
42810: LD_INT 13
42812: PUSH
42813: LD_INT 14
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: ST_TO_ADDR
42820: GO 43217
42822: LD_INT 29
42824: DOUBLE
42825: EQUAL
42826: IFTRUE 42830
42828: GO 42848
42830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42831: LD_ADDR_VAR 0 3
42835: PUSH
42836: LD_INT 13
42838: PUSH
42839: LD_INT 14
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: ST_TO_ADDR
42846: GO 43217
42848: LD_INT 31
42850: DOUBLE
42851: EQUAL
42852: IFTRUE 42856
42854: GO 42874
42856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42857: LD_ADDR_VAR 0 3
42861: PUSH
42862: LD_INT 13
42864: PUSH
42865: LD_INT 14
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: ST_TO_ADDR
42872: GO 43217
42874: LD_INT 26
42876: DOUBLE
42877: EQUAL
42878: IFTRUE 42882
42880: GO 42900
42882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42883: LD_ADDR_VAR 0 3
42887: PUSH
42888: LD_INT 13
42890: PUSH
42891: LD_INT 14
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: ST_TO_ADDR
42898: GO 43217
42900: LD_INT 42
42902: DOUBLE
42903: EQUAL
42904: IFTRUE 42908
42906: GO 42934
42908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42909: LD_ADDR_VAR 0 3
42913: PUSH
42914: LD_INT 21
42916: PUSH
42917: LD_INT 22
42919: PUSH
42920: LD_INT 23
42922: PUSH
42923: LD_INT 24
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: ST_TO_ADDR
42932: GO 43217
42934: LD_INT 43
42936: DOUBLE
42937: EQUAL
42938: IFTRUE 42942
42940: GO 42968
42942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42943: LD_ADDR_VAR 0 3
42947: PUSH
42948: LD_INT 21
42950: PUSH
42951: LD_INT 22
42953: PUSH
42954: LD_INT 23
42956: PUSH
42957: LD_INT 24
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: ST_TO_ADDR
42966: GO 43217
42968: LD_INT 44
42970: DOUBLE
42971: EQUAL
42972: IFTRUE 42976
42974: GO 43002
42976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42977: LD_ADDR_VAR 0 3
42981: PUSH
42982: LD_INT 21
42984: PUSH
42985: LD_INT 22
42987: PUSH
42988: LD_INT 23
42990: PUSH
42991: LD_INT 24
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
43000: GO 43217
43002: LD_INT 45
43004: DOUBLE
43005: EQUAL
43006: IFTRUE 43010
43008: GO 43036
43010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43011: LD_ADDR_VAR 0 3
43015: PUSH
43016: LD_INT 21
43018: PUSH
43019: LD_INT 22
43021: PUSH
43022: LD_INT 23
43024: PUSH
43025: LD_INT 24
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
43034: GO 43217
43036: LD_INT 49
43038: DOUBLE
43039: EQUAL
43040: IFTRUE 43044
43042: GO 43070
43044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43045: LD_ADDR_VAR 0 3
43049: PUSH
43050: LD_INT 21
43052: PUSH
43053: LD_INT 22
43055: PUSH
43056: LD_INT 23
43058: PUSH
43059: LD_INT 24
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
43068: GO 43217
43070: LD_INT 51
43072: DOUBLE
43073: EQUAL
43074: IFTRUE 43078
43076: GO 43104
43078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43079: LD_ADDR_VAR 0 3
43083: PUSH
43084: LD_INT 21
43086: PUSH
43087: LD_INT 22
43089: PUSH
43090: LD_INT 23
43092: PUSH
43093: LD_INT 24
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: ST_TO_ADDR
43102: GO 43217
43104: LD_INT 52
43106: DOUBLE
43107: EQUAL
43108: IFTRUE 43112
43110: GO 43138
43112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43113: LD_ADDR_VAR 0 3
43117: PUSH
43118: LD_INT 21
43120: PUSH
43121: LD_INT 22
43123: PUSH
43124: LD_INT 23
43126: PUSH
43127: LD_INT 24
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: ST_TO_ADDR
43136: GO 43217
43138: LD_INT 53
43140: DOUBLE
43141: EQUAL
43142: IFTRUE 43146
43144: GO 43164
43146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43147: LD_ADDR_VAR 0 3
43151: PUSH
43152: LD_INT 23
43154: PUSH
43155: LD_INT 24
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: ST_TO_ADDR
43162: GO 43217
43164: LD_INT 46
43166: DOUBLE
43167: EQUAL
43168: IFTRUE 43172
43170: GO 43190
43172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43173: LD_ADDR_VAR 0 3
43177: PUSH
43178: LD_INT 23
43180: PUSH
43181: LD_INT 24
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: ST_TO_ADDR
43188: GO 43217
43190: LD_INT 47
43192: DOUBLE
43193: EQUAL
43194: IFTRUE 43198
43196: GO 43216
43198: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43199: LD_ADDR_VAR 0 3
43203: PUSH
43204: LD_INT 23
43206: PUSH
43207: LD_INT 24
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: ST_TO_ADDR
43214: GO 43217
43216: POP
// result := ( chassis in result ) ;
43217: LD_ADDR_VAR 0 3
43221: PUSH
43222: LD_VAR 0 1
43226: PUSH
43227: LD_VAR 0 3
43231: IN
43232: ST_TO_ADDR
// end ;
43233: LD_VAR 0 3
43237: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43238: LD_INT 0
43240: PPUSH
43241: PPUSH
43242: PPUSH
43243: PPUSH
43244: PPUSH
43245: PPUSH
43246: PPUSH
// result := array ;
43247: LD_ADDR_VAR 0 5
43251: PUSH
43252: LD_VAR 0 1
43256: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43257: LD_VAR 0 1
43261: NOT
43262: PUSH
43263: LD_VAR 0 2
43267: NOT
43268: OR
43269: PUSH
43270: LD_VAR 0 3
43274: NOT
43275: OR
43276: PUSH
43277: LD_VAR 0 2
43281: PUSH
43282: LD_VAR 0 1
43286: GREATER
43287: OR
43288: PUSH
43289: LD_VAR 0 3
43293: PUSH
43294: LD_VAR 0 1
43298: GREATER
43299: OR
43300: IFFALSE 43304
// exit ;
43302: GO 43600
// if direction then
43304: LD_VAR 0 4
43308: IFFALSE 43372
// begin d := 1 ;
43310: LD_ADDR_VAR 0 9
43314: PUSH
43315: LD_INT 1
43317: ST_TO_ADDR
// if i_from > i_to then
43318: LD_VAR 0 2
43322: PUSH
43323: LD_VAR 0 3
43327: GREATER
43328: IFFALSE 43354
// length := ( array - i_from ) + i_to else
43330: LD_ADDR_VAR 0 11
43334: PUSH
43335: LD_VAR 0 1
43339: PUSH
43340: LD_VAR 0 2
43344: MINUS
43345: PUSH
43346: LD_VAR 0 3
43350: PLUS
43351: ST_TO_ADDR
43352: GO 43370
// length := i_to - i_from ;
43354: LD_ADDR_VAR 0 11
43358: PUSH
43359: LD_VAR 0 3
43363: PUSH
43364: LD_VAR 0 2
43368: MINUS
43369: ST_TO_ADDR
// end else
43370: GO 43433
// begin d := - 1 ;
43372: LD_ADDR_VAR 0 9
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: ST_TO_ADDR
// if i_from > i_to then
43381: LD_VAR 0 2
43385: PUSH
43386: LD_VAR 0 3
43390: GREATER
43391: IFFALSE 43411
// length := i_from - i_to else
43393: LD_ADDR_VAR 0 11
43397: PUSH
43398: LD_VAR 0 2
43402: PUSH
43403: LD_VAR 0 3
43407: MINUS
43408: ST_TO_ADDR
43409: GO 43433
// length := ( array - i_to ) + i_from ;
43411: LD_ADDR_VAR 0 11
43415: PUSH
43416: LD_VAR 0 1
43420: PUSH
43421: LD_VAR 0 3
43425: MINUS
43426: PUSH
43427: LD_VAR 0 2
43431: PLUS
43432: ST_TO_ADDR
// end ; if not length then
43433: LD_VAR 0 11
43437: NOT
43438: IFFALSE 43442
// exit ;
43440: GO 43600
// tmp := array ;
43442: LD_ADDR_VAR 0 10
43446: PUSH
43447: LD_VAR 0 1
43451: ST_TO_ADDR
// for i = 1 to length do
43452: LD_ADDR_VAR 0 6
43456: PUSH
43457: DOUBLE
43458: LD_INT 1
43460: DEC
43461: ST_TO_ADDR
43462: LD_VAR 0 11
43466: PUSH
43467: FOR_TO
43468: IFFALSE 43588
// begin for j = 1 to array do
43470: LD_ADDR_VAR 0 7
43474: PUSH
43475: DOUBLE
43476: LD_INT 1
43478: DEC
43479: ST_TO_ADDR
43480: LD_VAR 0 1
43484: PUSH
43485: FOR_TO
43486: IFFALSE 43574
// begin k := j + d ;
43488: LD_ADDR_VAR 0 8
43492: PUSH
43493: LD_VAR 0 7
43497: PUSH
43498: LD_VAR 0 9
43502: PLUS
43503: ST_TO_ADDR
// if k > array then
43504: LD_VAR 0 8
43508: PUSH
43509: LD_VAR 0 1
43513: GREATER
43514: IFFALSE 43524
// k := 1 ;
43516: LD_ADDR_VAR 0 8
43520: PUSH
43521: LD_INT 1
43523: ST_TO_ADDR
// if not k then
43524: LD_VAR 0 8
43528: NOT
43529: IFFALSE 43541
// k := array ;
43531: LD_ADDR_VAR 0 8
43535: PUSH
43536: LD_VAR 0 1
43540: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43541: LD_ADDR_VAR 0 10
43545: PUSH
43546: LD_VAR 0 10
43550: PPUSH
43551: LD_VAR 0 8
43555: PPUSH
43556: LD_VAR 0 1
43560: PUSH
43561: LD_VAR 0 7
43565: ARRAY
43566: PPUSH
43567: CALL_OW 1
43571: ST_TO_ADDR
// end ;
43572: GO 43485
43574: POP
43575: POP
// array := tmp ;
43576: LD_ADDR_VAR 0 1
43580: PUSH
43581: LD_VAR 0 10
43585: ST_TO_ADDR
// end ;
43586: GO 43467
43588: POP
43589: POP
// result := array ;
43590: LD_ADDR_VAR 0 5
43594: PUSH
43595: LD_VAR 0 1
43599: ST_TO_ADDR
// end ;
43600: LD_VAR 0 5
43604: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43605: LD_INT 0
43607: PPUSH
43608: PPUSH
// result := 0 ;
43609: LD_ADDR_VAR 0 3
43613: PUSH
43614: LD_INT 0
43616: ST_TO_ADDR
// if not array or not value in array then
43617: LD_VAR 0 1
43621: NOT
43622: PUSH
43623: LD_VAR 0 2
43627: PUSH
43628: LD_VAR 0 1
43632: IN
43633: NOT
43634: OR
43635: IFFALSE 43639
// exit ;
43637: GO 43693
// for i = 1 to array do
43639: LD_ADDR_VAR 0 4
43643: PUSH
43644: DOUBLE
43645: LD_INT 1
43647: DEC
43648: ST_TO_ADDR
43649: LD_VAR 0 1
43653: PUSH
43654: FOR_TO
43655: IFFALSE 43691
// if value = array [ i ] then
43657: LD_VAR 0 2
43661: PUSH
43662: LD_VAR 0 1
43666: PUSH
43667: LD_VAR 0 4
43671: ARRAY
43672: EQUAL
43673: IFFALSE 43689
// begin result := i ;
43675: LD_ADDR_VAR 0 3
43679: PUSH
43680: LD_VAR 0 4
43684: ST_TO_ADDR
// exit ;
43685: POP
43686: POP
43687: GO 43693
// end ;
43689: GO 43654
43691: POP
43692: POP
// end ;
43693: LD_VAR 0 3
43697: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43698: LD_INT 0
43700: PPUSH
// vc_chassis := chassis ;
43701: LD_ADDR_OWVAR 37
43705: PUSH
43706: LD_VAR 0 1
43710: ST_TO_ADDR
// vc_engine := engine ;
43711: LD_ADDR_OWVAR 39
43715: PUSH
43716: LD_VAR 0 2
43720: ST_TO_ADDR
// vc_control := control ;
43721: LD_ADDR_OWVAR 38
43725: PUSH
43726: LD_VAR 0 3
43730: ST_TO_ADDR
// vc_weapon := weapon ;
43731: LD_ADDR_OWVAR 40
43735: PUSH
43736: LD_VAR 0 4
43740: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43741: LD_ADDR_OWVAR 41
43745: PUSH
43746: LD_VAR 0 5
43750: ST_TO_ADDR
// end ;
43751: LD_VAR 0 6
43755: RET
// export function WantPlant ( unit ) ; var task ; begin
43756: LD_INT 0
43758: PPUSH
43759: PPUSH
// result := false ;
43760: LD_ADDR_VAR 0 2
43764: PUSH
43765: LD_INT 0
43767: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43768: LD_ADDR_VAR 0 3
43772: PUSH
43773: LD_VAR 0 1
43777: PPUSH
43778: CALL_OW 437
43782: ST_TO_ADDR
// if task then
43783: LD_VAR 0 3
43787: IFFALSE 43815
// if task [ 1 ] [ 1 ] = p then
43789: LD_VAR 0 3
43793: PUSH
43794: LD_INT 1
43796: ARRAY
43797: PUSH
43798: LD_INT 1
43800: ARRAY
43801: PUSH
43802: LD_STRING p
43804: EQUAL
43805: IFFALSE 43815
// result := true ;
43807: LD_ADDR_VAR 0 2
43811: PUSH
43812: LD_INT 1
43814: ST_TO_ADDR
// end ;
43815: LD_VAR 0 2
43819: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43820: LD_INT 0
43822: PPUSH
43823: PPUSH
43824: PPUSH
43825: PPUSH
// if pos < 1 then
43826: LD_VAR 0 2
43830: PUSH
43831: LD_INT 1
43833: LESS
43834: IFFALSE 43838
// exit ;
43836: GO 44141
// if pos = 1 then
43838: LD_VAR 0 2
43842: PUSH
43843: LD_INT 1
43845: EQUAL
43846: IFFALSE 43879
// result := Replace ( arr , pos [ 1 ] , value ) else
43848: LD_ADDR_VAR 0 4
43852: PUSH
43853: LD_VAR 0 1
43857: PPUSH
43858: LD_VAR 0 2
43862: PUSH
43863: LD_INT 1
43865: ARRAY
43866: PPUSH
43867: LD_VAR 0 3
43871: PPUSH
43872: CALL_OW 1
43876: ST_TO_ADDR
43877: GO 44141
// begin tmp := arr ;
43879: LD_ADDR_VAR 0 6
43883: PUSH
43884: LD_VAR 0 1
43888: ST_TO_ADDR
// s_arr := [ tmp ] ;
43889: LD_ADDR_VAR 0 7
43893: PUSH
43894: LD_VAR 0 6
43898: PUSH
43899: EMPTY
43900: LIST
43901: ST_TO_ADDR
// for i = 1 to pos - 1 do
43902: LD_ADDR_VAR 0 5
43906: PUSH
43907: DOUBLE
43908: LD_INT 1
43910: DEC
43911: ST_TO_ADDR
43912: LD_VAR 0 2
43916: PUSH
43917: LD_INT 1
43919: MINUS
43920: PUSH
43921: FOR_TO
43922: IFFALSE 43967
// begin tmp := tmp [ pos [ i ] ] ;
43924: LD_ADDR_VAR 0 6
43928: PUSH
43929: LD_VAR 0 6
43933: PUSH
43934: LD_VAR 0 2
43938: PUSH
43939: LD_VAR 0 5
43943: ARRAY
43944: ARRAY
43945: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43946: LD_ADDR_VAR 0 7
43950: PUSH
43951: LD_VAR 0 7
43955: PUSH
43956: LD_VAR 0 6
43960: PUSH
43961: EMPTY
43962: LIST
43963: ADD
43964: ST_TO_ADDR
// end ;
43965: GO 43921
43967: POP
43968: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43969: LD_ADDR_VAR 0 6
43973: PUSH
43974: LD_VAR 0 6
43978: PPUSH
43979: LD_VAR 0 2
43983: PUSH
43984: LD_VAR 0 2
43988: ARRAY
43989: PPUSH
43990: LD_VAR 0 3
43994: PPUSH
43995: CALL_OW 1
43999: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44000: LD_ADDR_VAR 0 7
44004: PUSH
44005: LD_VAR 0 7
44009: PPUSH
44010: LD_VAR 0 7
44014: PPUSH
44015: LD_VAR 0 6
44019: PPUSH
44020: CALL_OW 1
44024: ST_TO_ADDR
// for i = s_arr downto 2 do
44025: LD_ADDR_VAR 0 5
44029: PUSH
44030: DOUBLE
44031: LD_VAR 0 7
44035: INC
44036: ST_TO_ADDR
44037: LD_INT 2
44039: PUSH
44040: FOR_DOWNTO
44041: IFFALSE 44125
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44043: LD_ADDR_VAR 0 6
44047: PUSH
44048: LD_VAR 0 7
44052: PUSH
44053: LD_VAR 0 5
44057: PUSH
44058: LD_INT 1
44060: MINUS
44061: ARRAY
44062: PPUSH
44063: LD_VAR 0 2
44067: PUSH
44068: LD_VAR 0 5
44072: PUSH
44073: LD_INT 1
44075: MINUS
44076: ARRAY
44077: PPUSH
44078: LD_VAR 0 7
44082: PUSH
44083: LD_VAR 0 5
44087: ARRAY
44088: PPUSH
44089: CALL_OW 1
44093: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44094: LD_ADDR_VAR 0 7
44098: PUSH
44099: LD_VAR 0 7
44103: PPUSH
44104: LD_VAR 0 5
44108: PUSH
44109: LD_INT 1
44111: MINUS
44112: PPUSH
44113: LD_VAR 0 6
44117: PPUSH
44118: CALL_OW 1
44122: ST_TO_ADDR
// end ;
44123: GO 44040
44125: POP
44126: POP
// result := s_arr [ 1 ] ;
44127: LD_ADDR_VAR 0 4
44131: PUSH
44132: LD_VAR 0 7
44136: PUSH
44137: LD_INT 1
44139: ARRAY
44140: ST_TO_ADDR
// end ; end ;
44141: LD_VAR 0 4
44145: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44146: LD_INT 0
44148: PPUSH
44149: PPUSH
// if not list then
44150: LD_VAR 0 1
44154: NOT
44155: IFFALSE 44159
// exit ;
44157: GO 44250
// i := list [ pos1 ] ;
44159: LD_ADDR_VAR 0 5
44163: PUSH
44164: LD_VAR 0 1
44168: PUSH
44169: LD_VAR 0 2
44173: ARRAY
44174: ST_TO_ADDR
// if not i then
44175: LD_VAR 0 5
44179: NOT
44180: IFFALSE 44184
// exit ;
44182: GO 44250
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44184: LD_ADDR_VAR 0 1
44188: PUSH
44189: LD_VAR 0 1
44193: PPUSH
44194: LD_VAR 0 2
44198: PPUSH
44199: LD_VAR 0 1
44203: PUSH
44204: LD_VAR 0 3
44208: ARRAY
44209: PPUSH
44210: CALL_OW 1
44214: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44215: LD_ADDR_VAR 0 1
44219: PUSH
44220: LD_VAR 0 1
44224: PPUSH
44225: LD_VAR 0 3
44229: PPUSH
44230: LD_VAR 0 5
44234: PPUSH
44235: CALL_OW 1
44239: ST_TO_ADDR
// result := list ;
44240: LD_ADDR_VAR 0 4
44244: PUSH
44245: LD_VAR 0 1
44249: ST_TO_ADDR
// end ;
44250: LD_VAR 0 4
44254: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44255: LD_INT 0
44257: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44258: LD_ADDR_VAR 0 5
44262: PUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: CALL_OW 250
44272: PPUSH
44273: LD_VAR 0 1
44277: PPUSH
44278: CALL_OW 251
44282: PPUSH
44283: LD_VAR 0 2
44287: PPUSH
44288: LD_VAR 0 3
44292: PPUSH
44293: LD_VAR 0 4
44297: PPUSH
44298: CALL 44308 0 5
44302: ST_TO_ADDR
// end ;
44303: LD_VAR 0 5
44307: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44308: LD_INT 0
44310: PPUSH
44311: PPUSH
44312: PPUSH
44313: PPUSH
// if not list then
44314: LD_VAR 0 3
44318: NOT
44319: IFFALSE 44323
// exit ;
44321: GO 44711
// result := [ ] ;
44323: LD_ADDR_VAR 0 6
44327: PUSH
44328: EMPTY
44329: ST_TO_ADDR
// for i in list do
44330: LD_ADDR_VAR 0 7
44334: PUSH
44335: LD_VAR 0 3
44339: PUSH
44340: FOR_IN
44341: IFFALSE 44543
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44343: LD_ADDR_VAR 0 9
44347: PUSH
44348: LD_VAR 0 7
44352: PPUSH
44353: LD_VAR 0 1
44357: PPUSH
44358: LD_VAR 0 2
44362: PPUSH
44363: CALL_OW 297
44367: ST_TO_ADDR
// if not result then
44368: LD_VAR 0 6
44372: NOT
44373: IFFALSE 44399
// result := [ [ i , tmp ] ] else
44375: LD_ADDR_VAR 0 6
44379: PUSH
44380: LD_VAR 0 7
44384: PUSH
44385: LD_VAR 0 9
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: EMPTY
44395: LIST
44396: ST_TO_ADDR
44397: GO 44541
// begin if result [ result ] [ 2 ] < tmp then
44399: LD_VAR 0 6
44403: PUSH
44404: LD_VAR 0 6
44408: ARRAY
44409: PUSH
44410: LD_INT 2
44412: ARRAY
44413: PUSH
44414: LD_VAR 0 9
44418: LESS
44419: IFFALSE 44461
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44421: LD_ADDR_VAR 0 6
44425: PUSH
44426: LD_VAR 0 6
44430: PPUSH
44431: LD_VAR 0 6
44435: PUSH
44436: LD_INT 1
44438: PLUS
44439: PPUSH
44440: LD_VAR 0 7
44444: PUSH
44445: LD_VAR 0 9
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PPUSH
44454: CALL_OW 2
44458: ST_TO_ADDR
44459: GO 44541
// for j = 1 to result do
44461: LD_ADDR_VAR 0 8
44465: PUSH
44466: DOUBLE
44467: LD_INT 1
44469: DEC
44470: ST_TO_ADDR
44471: LD_VAR 0 6
44475: PUSH
44476: FOR_TO
44477: IFFALSE 44539
// begin if tmp < result [ j ] [ 2 ] then
44479: LD_VAR 0 9
44483: PUSH
44484: LD_VAR 0 6
44488: PUSH
44489: LD_VAR 0 8
44493: ARRAY
44494: PUSH
44495: LD_INT 2
44497: ARRAY
44498: LESS
44499: IFFALSE 44537
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44501: LD_ADDR_VAR 0 6
44505: PUSH
44506: LD_VAR 0 6
44510: PPUSH
44511: LD_VAR 0 8
44515: PPUSH
44516: LD_VAR 0 7
44520: PUSH
44521: LD_VAR 0 9
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PPUSH
44530: CALL_OW 2
44534: ST_TO_ADDR
// break ;
44535: GO 44539
// end ; end ;
44537: GO 44476
44539: POP
44540: POP
// end ; end ;
44541: GO 44340
44543: POP
44544: POP
// if result and not asc then
44545: LD_VAR 0 6
44549: PUSH
44550: LD_VAR 0 4
44554: NOT
44555: AND
44556: IFFALSE 44631
// begin tmp := result ;
44558: LD_ADDR_VAR 0 9
44562: PUSH
44563: LD_VAR 0 6
44567: ST_TO_ADDR
// for i = tmp downto 1 do
44568: LD_ADDR_VAR 0 7
44572: PUSH
44573: DOUBLE
44574: LD_VAR 0 9
44578: INC
44579: ST_TO_ADDR
44580: LD_INT 1
44582: PUSH
44583: FOR_DOWNTO
44584: IFFALSE 44629
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44586: LD_ADDR_VAR 0 6
44590: PUSH
44591: LD_VAR 0 6
44595: PPUSH
44596: LD_VAR 0 9
44600: PUSH
44601: LD_VAR 0 7
44605: MINUS
44606: PUSH
44607: LD_INT 1
44609: PLUS
44610: PPUSH
44611: LD_VAR 0 9
44615: PUSH
44616: LD_VAR 0 7
44620: ARRAY
44621: PPUSH
44622: CALL_OW 1
44626: ST_TO_ADDR
44627: GO 44583
44629: POP
44630: POP
// end ; tmp := [ ] ;
44631: LD_ADDR_VAR 0 9
44635: PUSH
44636: EMPTY
44637: ST_TO_ADDR
// if mode then
44638: LD_VAR 0 5
44642: IFFALSE 44711
// begin for i = 1 to result do
44644: LD_ADDR_VAR 0 7
44648: PUSH
44649: DOUBLE
44650: LD_INT 1
44652: DEC
44653: ST_TO_ADDR
44654: LD_VAR 0 6
44658: PUSH
44659: FOR_TO
44660: IFFALSE 44699
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44662: LD_ADDR_VAR 0 9
44666: PUSH
44667: LD_VAR 0 9
44671: PPUSH
44672: LD_VAR 0 7
44676: PPUSH
44677: LD_VAR 0 6
44681: PUSH
44682: LD_VAR 0 7
44686: ARRAY
44687: PUSH
44688: LD_INT 1
44690: ARRAY
44691: PPUSH
44692: CALL_OW 1
44696: ST_TO_ADDR
44697: GO 44659
44699: POP
44700: POP
// result := tmp ;
44701: LD_ADDR_VAR 0 6
44705: PUSH
44706: LD_VAR 0 9
44710: ST_TO_ADDR
// end ; end ;
44711: LD_VAR 0 6
44715: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44716: LD_INT 0
44718: PPUSH
44719: PPUSH
44720: PPUSH
44721: PPUSH
44722: PPUSH
44723: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44724: LD_ADDR_VAR 0 5
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: ST_TO_ADDR
// if not x or not y then
44746: LD_VAR 0 2
44750: NOT
44751: PUSH
44752: LD_VAR 0 3
44756: NOT
44757: OR
44758: IFFALSE 44762
// exit ;
44760: GO 46412
// if not range then
44762: LD_VAR 0 4
44766: NOT
44767: IFFALSE 44777
// range := 10 ;
44769: LD_ADDR_VAR 0 4
44773: PUSH
44774: LD_INT 10
44776: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44777: LD_ADDR_VAR 0 8
44781: PUSH
44782: LD_INT 81
44784: PUSH
44785: LD_VAR 0 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 92
44796: PUSH
44797: LD_VAR 0 2
44801: PUSH
44802: LD_VAR 0 3
44806: PUSH
44807: LD_VAR 0 4
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: LD_INT 21
44823: PUSH
44824: LD_INT 3
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: PPUSH
44840: CALL_OW 69
44844: ST_TO_ADDR
// if not tmp then
44845: LD_VAR 0 8
44849: NOT
44850: IFFALSE 44854
// exit ;
44852: GO 46412
// for i in tmp do
44854: LD_ADDR_VAR 0 6
44858: PUSH
44859: LD_VAR 0 8
44863: PUSH
44864: FOR_IN
44865: IFFALSE 46387
// begin points := [ 0 , 0 , 0 ] ;
44867: LD_ADDR_VAR 0 9
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: LIST
44885: ST_TO_ADDR
// bpoints := 1 ;
44886: LD_ADDR_VAR 0 10
44890: PUSH
44891: LD_INT 1
44893: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44894: LD_VAR 0 6
44898: PPUSH
44899: CALL_OW 247
44903: PUSH
44904: LD_INT 1
44906: DOUBLE
44907: EQUAL
44908: IFTRUE 44912
44910: GO 45490
44912: POP
// begin if GetClass ( i ) = 1 then
44913: LD_VAR 0 6
44917: PPUSH
44918: CALL_OW 257
44922: PUSH
44923: LD_INT 1
44925: EQUAL
44926: IFFALSE 44947
// points := [ 10 , 5 , 3 ] ;
44928: LD_ADDR_VAR 0 9
44932: PUSH
44933: LD_INT 10
44935: PUSH
44936: LD_INT 5
44938: PUSH
44939: LD_INT 3
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44947: LD_VAR 0 6
44951: PPUSH
44952: CALL_OW 257
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 3
44962: PUSH
44963: LD_INT 4
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: IN
44971: IFFALSE 44992
// points := [ 3 , 2 , 1 ] ;
44973: LD_ADDR_VAR 0 9
44977: PUSH
44978: LD_INT 3
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44992: LD_VAR 0 6
44996: PPUSH
44997: CALL_OW 257
45001: PUSH
45002: LD_INT 5
45004: EQUAL
45005: IFFALSE 45026
// points := [ 130 , 5 , 2 ] ;
45007: LD_ADDR_VAR 0 9
45011: PUSH
45012: LD_INT 130
45014: PUSH
45015: LD_INT 5
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45026: LD_VAR 0 6
45030: PPUSH
45031: CALL_OW 257
45035: PUSH
45036: LD_INT 8
45038: EQUAL
45039: IFFALSE 45060
// points := [ 35 , 35 , 30 ] ;
45041: LD_ADDR_VAR 0 9
45045: PUSH
45046: LD_INT 35
45048: PUSH
45049: LD_INT 35
45051: PUSH
45052: LD_INT 30
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45060: LD_VAR 0 6
45064: PPUSH
45065: CALL_OW 257
45069: PUSH
45070: LD_INT 9
45072: EQUAL
45073: IFFALSE 45094
// points := [ 20 , 55 , 40 ] ;
45075: LD_ADDR_VAR 0 9
45079: PUSH
45080: LD_INT 20
45082: PUSH
45083: LD_INT 55
45085: PUSH
45086: LD_INT 40
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: LIST
45093: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45094: LD_VAR 0 6
45098: PPUSH
45099: CALL_OW 257
45103: PUSH
45104: LD_INT 12
45106: PUSH
45107: LD_INT 16
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: IN
45114: IFFALSE 45135
// points := [ 5 , 3 , 2 ] ;
45116: LD_ADDR_VAR 0 9
45120: PUSH
45121: LD_INT 5
45123: PUSH
45124: LD_INT 3
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: LIST
45134: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45135: LD_VAR 0 6
45139: PPUSH
45140: CALL_OW 257
45144: PUSH
45145: LD_INT 17
45147: EQUAL
45148: IFFALSE 45169
// points := [ 100 , 50 , 75 ] ;
45150: LD_ADDR_VAR 0 9
45154: PUSH
45155: LD_INT 100
45157: PUSH
45158: LD_INT 50
45160: PUSH
45161: LD_INT 75
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: LIST
45168: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45169: LD_VAR 0 6
45173: PPUSH
45174: CALL_OW 257
45178: PUSH
45179: LD_INT 15
45181: EQUAL
45182: IFFALSE 45203
// points := [ 10 , 5 , 3 ] ;
45184: LD_ADDR_VAR 0 9
45188: PUSH
45189: LD_INT 10
45191: PUSH
45192: LD_INT 5
45194: PUSH
45195: LD_INT 3
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: LIST
45202: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45203: LD_VAR 0 6
45207: PPUSH
45208: CALL_OW 257
45212: PUSH
45213: LD_INT 14
45215: EQUAL
45216: IFFALSE 45237
// points := [ 10 , 0 , 0 ] ;
45218: LD_ADDR_VAR 0 9
45222: PUSH
45223: LD_INT 10
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: LIST
45236: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45237: LD_VAR 0 6
45241: PPUSH
45242: CALL_OW 257
45246: PUSH
45247: LD_INT 11
45249: EQUAL
45250: IFFALSE 45271
// points := [ 30 , 10 , 5 ] ;
45252: LD_ADDR_VAR 0 9
45256: PUSH
45257: LD_INT 30
45259: PUSH
45260: LD_INT 10
45262: PUSH
45263: LD_INT 5
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45271: LD_VAR 0 1
45275: PPUSH
45276: LD_INT 5
45278: PPUSH
45279: CALL_OW 321
45283: PUSH
45284: LD_INT 2
45286: EQUAL
45287: IFFALSE 45304
// bpoints := bpoints * 1.8 ;
45289: LD_ADDR_VAR 0 10
45293: PUSH
45294: LD_VAR 0 10
45298: PUSH
45299: LD_REAL  1.80000000000000E+0000
45302: MUL
45303: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45304: LD_VAR 0 6
45308: PPUSH
45309: CALL_OW 257
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: LD_INT 3
45322: PUSH
45323: LD_INT 4
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: IN
45332: PUSH
45333: LD_VAR 0 1
45337: PPUSH
45338: LD_INT 51
45340: PPUSH
45341: CALL_OW 321
45345: PUSH
45346: LD_INT 2
45348: EQUAL
45349: AND
45350: IFFALSE 45367
// bpoints := bpoints * 1.2 ;
45352: LD_ADDR_VAR 0 10
45356: PUSH
45357: LD_VAR 0 10
45361: PUSH
45362: LD_REAL  1.20000000000000E+0000
45365: MUL
45366: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45367: LD_VAR 0 6
45371: PPUSH
45372: CALL_OW 257
45376: PUSH
45377: LD_INT 5
45379: PUSH
45380: LD_INT 7
45382: PUSH
45383: LD_INT 9
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: LIST
45390: IN
45391: PUSH
45392: LD_VAR 0 1
45396: PPUSH
45397: LD_INT 52
45399: PPUSH
45400: CALL_OW 321
45404: PUSH
45405: LD_INT 2
45407: EQUAL
45408: AND
45409: IFFALSE 45426
// bpoints := bpoints * 1.5 ;
45411: LD_ADDR_VAR 0 10
45415: PUSH
45416: LD_VAR 0 10
45420: PUSH
45421: LD_REAL  1.50000000000000E+0000
45424: MUL
45425: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45426: LD_VAR 0 1
45430: PPUSH
45431: LD_INT 66
45433: PPUSH
45434: CALL_OW 321
45438: PUSH
45439: LD_INT 2
45441: EQUAL
45442: IFFALSE 45459
// bpoints := bpoints * 1.1 ;
45444: LD_ADDR_VAR 0 10
45448: PUSH
45449: LD_VAR 0 10
45453: PUSH
45454: LD_REAL  1.10000000000000E+0000
45457: MUL
45458: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45459: LD_ADDR_VAR 0 10
45463: PUSH
45464: LD_VAR 0 10
45468: PUSH
45469: LD_VAR 0 6
45473: PPUSH
45474: LD_INT 1
45476: PPUSH
45477: CALL_OW 259
45481: PUSH
45482: LD_REAL  1.15000000000000E+0000
45485: MUL
45486: MUL
45487: ST_TO_ADDR
// end ; unit_vehicle :
45488: GO 46316
45490: LD_INT 2
45492: DOUBLE
45493: EQUAL
45494: IFTRUE 45498
45496: GO 46304
45498: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45499: LD_VAR 0 6
45503: PPUSH
45504: CALL_OW 264
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 42
45514: PUSH
45515: LD_INT 24
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: IN
45523: IFFALSE 45544
// points := [ 25 , 5 , 3 ] ;
45525: LD_ADDR_VAR 0 9
45529: PUSH
45530: LD_INT 25
45532: PUSH
45533: LD_INT 5
45535: PUSH
45536: LD_INT 3
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: LIST
45543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45544: LD_VAR 0 6
45548: PPUSH
45549: CALL_OW 264
45553: PUSH
45554: LD_INT 4
45556: PUSH
45557: LD_INT 43
45559: PUSH
45560: LD_INT 25
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: IN
45568: IFFALSE 45589
// points := [ 40 , 15 , 5 ] ;
45570: LD_ADDR_VAR 0 9
45574: PUSH
45575: LD_INT 40
45577: PUSH
45578: LD_INT 15
45580: PUSH
45581: LD_INT 5
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45589: LD_VAR 0 6
45593: PPUSH
45594: CALL_OW 264
45598: PUSH
45599: LD_INT 3
45601: PUSH
45602: LD_INT 23
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: IN
45609: IFFALSE 45630
// points := [ 7 , 25 , 8 ] ;
45611: LD_ADDR_VAR 0 9
45615: PUSH
45616: LD_INT 7
45618: PUSH
45619: LD_INT 25
45621: PUSH
45622: LD_INT 8
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45630: LD_VAR 0 6
45634: PPUSH
45635: CALL_OW 264
45639: PUSH
45640: LD_INT 5
45642: PUSH
45643: LD_INT 27
45645: PUSH
45646: LD_INT 44
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: LIST
45653: IN
45654: IFFALSE 45675
// points := [ 14 , 50 , 16 ] ;
45656: LD_ADDR_VAR 0 9
45660: PUSH
45661: LD_INT 14
45663: PUSH
45664: LD_INT 50
45666: PUSH
45667: LD_INT 16
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45675: LD_VAR 0 6
45679: PPUSH
45680: CALL_OW 264
45684: PUSH
45685: LD_INT 6
45687: PUSH
45688: LD_INT 46
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: IN
45695: IFFALSE 45716
// points := [ 32 , 120 , 70 ] ;
45697: LD_ADDR_VAR 0 9
45701: PUSH
45702: LD_INT 32
45704: PUSH
45705: LD_INT 120
45707: PUSH
45708: LD_INT 70
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: LIST
45715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45716: LD_VAR 0 6
45720: PPUSH
45721: CALL_OW 264
45725: PUSH
45726: LD_INT 7
45728: PUSH
45729: LD_INT 28
45731: PUSH
45732: LD_INT 45
45734: PUSH
45735: LD_INT 92
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: IN
45744: IFFALSE 45765
// points := [ 35 , 20 , 45 ] ;
45746: LD_ADDR_VAR 0 9
45750: PUSH
45751: LD_INT 35
45753: PUSH
45754: LD_INT 20
45756: PUSH
45757: LD_INT 45
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45765: LD_VAR 0 6
45769: PPUSH
45770: CALL_OW 264
45774: PUSH
45775: LD_INT 47
45777: PUSH
45778: EMPTY
45779: LIST
45780: IN
45781: IFFALSE 45802
// points := [ 67 , 45 , 75 ] ;
45783: LD_ADDR_VAR 0 9
45787: PUSH
45788: LD_INT 67
45790: PUSH
45791: LD_INT 45
45793: PUSH
45794: LD_INT 75
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45802: LD_VAR 0 6
45806: PPUSH
45807: CALL_OW 264
45811: PUSH
45812: LD_INT 26
45814: PUSH
45815: EMPTY
45816: LIST
45817: IN
45818: IFFALSE 45839
// points := [ 120 , 30 , 80 ] ;
45820: LD_ADDR_VAR 0 9
45824: PUSH
45825: LD_INT 120
45827: PUSH
45828: LD_INT 30
45830: PUSH
45831: LD_INT 80
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45839: LD_VAR 0 6
45843: PPUSH
45844: CALL_OW 264
45848: PUSH
45849: LD_INT 22
45851: PUSH
45852: EMPTY
45853: LIST
45854: IN
45855: IFFALSE 45876
// points := [ 40 , 1 , 1 ] ;
45857: LD_ADDR_VAR 0 9
45861: PUSH
45862: LD_INT 40
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: LIST
45875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45876: LD_VAR 0 6
45880: PPUSH
45881: CALL_OW 264
45885: PUSH
45886: LD_INT 29
45888: PUSH
45889: EMPTY
45890: LIST
45891: IN
45892: IFFALSE 45913
// points := [ 70 , 200 , 400 ] ;
45894: LD_ADDR_VAR 0 9
45898: PUSH
45899: LD_INT 70
45901: PUSH
45902: LD_INT 200
45904: PUSH
45905: LD_INT 400
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45913: LD_VAR 0 6
45917: PPUSH
45918: CALL_OW 264
45922: PUSH
45923: LD_INT 14
45925: PUSH
45926: LD_INT 53
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: IN
45933: IFFALSE 45954
// points := [ 40 , 10 , 20 ] ;
45935: LD_ADDR_VAR 0 9
45939: PUSH
45940: LD_INT 40
45942: PUSH
45943: LD_INT 10
45945: PUSH
45946: LD_INT 20
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45954: LD_VAR 0 6
45958: PPUSH
45959: CALL_OW 264
45963: PUSH
45964: LD_INT 9
45966: PUSH
45967: EMPTY
45968: LIST
45969: IN
45970: IFFALSE 45991
// points := [ 5 , 70 , 20 ] ;
45972: LD_ADDR_VAR 0 9
45976: PUSH
45977: LD_INT 5
45979: PUSH
45980: LD_INT 70
45982: PUSH
45983: LD_INT 20
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45991: LD_VAR 0 6
45995: PPUSH
45996: CALL_OW 264
46000: PUSH
46001: LD_INT 10
46003: PUSH
46004: EMPTY
46005: LIST
46006: IN
46007: IFFALSE 46028
// points := [ 35 , 110 , 70 ] ;
46009: LD_ADDR_VAR 0 9
46013: PUSH
46014: LD_INT 35
46016: PUSH
46017: LD_INT 110
46019: PUSH
46020: LD_INT 70
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46028: LD_VAR 0 6
46032: PPUSH
46033: CALL_OW 265
46037: PUSH
46038: LD_INT 25
46040: EQUAL
46041: IFFALSE 46062
// points := [ 80 , 65 , 100 ] ;
46043: LD_ADDR_VAR 0 9
46047: PUSH
46048: LD_INT 80
46050: PUSH
46051: LD_INT 65
46053: PUSH
46054: LD_INT 100
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46062: LD_VAR 0 6
46066: PPUSH
46067: CALL_OW 263
46071: PUSH
46072: LD_INT 1
46074: EQUAL
46075: IFFALSE 46110
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46077: LD_ADDR_VAR 0 10
46081: PUSH
46082: LD_VAR 0 10
46086: PUSH
46087: LD_VAR 0 6
46091: PPUSH
46092: CALL_OW 311
46096: PPUSH
46097: LD_INT 3
46099: PPUSH
46100: CALL_OW 259
46104: PUSH
46105: LD_INT 4
46107: MUL
46108: MUL
46109: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46110: LD_VAR 0 6
46114: PPUSH
46115: CALL_OW 263
46119: PUSH
46120: LD_INT 2
46122: EQUAL
46123: IFFALSE 46174
// begin j := IsControledBy ( i ) ;
46125: LD_ADDR_VAR 0 7
46129: PUSH
46130: LD_VAR 0 6
46134: PPUSH
46135: CALL_OW 312
46139: ST_TO_ADDR
// if j then
46140: LD_VAR 0 7
46144: IFFALSE 46174
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46146: LD_ADDR_VAR 0 10
46150: PUSH
46151: LD_VAR 0 10
46155: PUSH
46156: LD_VAR 0 7
46160: PPUSH
46161: LD_INT 3
46163: PPUSH
46164: CALL_OW 259
46168: PUSH
46169: LD_INT 3
46171: MUL
46172: MUL
46173: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46174: LD_VAR 0 6
46178: PPUSH
46179: CALL_OW 264
46183: PUSH
46184: LD_INT 5
46186: PUSH
46187: LD_INT 6
46189: PUSH
46190: LD_INT 46
46192: PUSH
46193: LD_INT 44
46195: PUSH
46196: LD_INT 47
46198: PUSH
46199: LD_INT 45
46201: PUSH
46202: LD_INT 28
46204: PUSH
46205: LD_INT 7
46207: PUSH
46208: LD_INT 27
46210: PUSH
46211: LD_INT 29
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: IN
46226: PUSH
46227: LD_VAR 0 1
46231: PPUSH
46232: LD_INT 52
46234: PPUSH
46235: CALL_OW 321
46239: PUSH
46240: LD_INT 2
46242: EQUAL
46243: AND
46244: IFFALSE 46261
// bpoints := bpoints * 1.2 ;
46246: LD_ADDR_VAR 0 10
46250: PUSH
46251: LD_VAR 0 10
46255: PUSH
46256: LD_REAL  1.20000000000000E+0000
46259: MUL
46260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46261: LD_VAR 0 6
46265: PPUSH
46266: CALL_OW 264
46270: PUSH
46271: LD_INT 6
46273: PUSH
46274: LD_INT 46
46276: PUSH
46277: LD_INT 47
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: IN
46285: IFFALSE 46302
// bpoints := bpoints * 1.2 ;
46287: LD_ADDR_VAR 0 10
46291: PUSH
46292: LD_VAR 0 10
46296: PUSH
46297: LD_REAL  1.20000000000000E+0000
46300: MUL
46301: ST_TO_ADDR
// end ; unit_building :
46302: GO 46316
46304: LD_INT 3
46306: DOUBLE
46307: EQUAL
46308: IFTRUE 46312
46310: GO 46315
46312: POP
// ; end ;
46313: GO 46316
46315: POP
// for j = 1 to 3 do
46316: LD_ADDR_VAR 0 7
46320: PUSH
46321: DOUBLE
46322: LD_INT 1
46324: DEC
46325: ST_TO_ADDR
46326: LD_INT 3
46328: PUSH
46329: FOR_TO
46330: IFFALSE 46383
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46332: LD_ADDR_VAR 0 5
46336: PUSH
46337: LD_VAR 0 5
46341: PPUSH
46342: LD_VAR 0 7
46346: PPUSH
46347: LD_VAR 0 5
46351: PUSH
46352: LD_VAR 0 7
46356: ARRAY
46357: PUSH
46358: LD_VAR 0 9
46362: PUSH
46363: LD_VAR 0 7
46367: ARRAY
46368: PUSH
46369: LD_VAR 0 10
46373: MUL
46374: PLUS
46375: PPUSH
46376: CALL_OW 1
46380: ST_TO_ADDR
46381: GO 46329
46383: POP
46384: POP
// end ;
46385: GO 44864
46387: POP
46388: POP
// result := Replace ( result , 4 , tmp ) ;
46389: LD_ADDR_VAR 0 5
46393: PUSH
46394: LD_VAR 0 5
46398: PPUSH
46399: LD_INT 4
46401: PPUSH
46402: LD_VAR 0 8
46406: PPUSH
46407: CALL_OW 1
46411: ST_TO_ADDR
// end ;
46412: LD_VAR 0 5
46416: RET
// export function DangerAtRange ( unit , range ) ; begin
46417: LD_INT 0
46419: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46420: LD_ADDR_VAR 0 3
46424: PUSH
46425: LD_VAR 0 1
46429: PPUSH
46430: CALL_OW 255
46434: PPUSH
46435: LD_VAR 0 1
46439: PPUSH
46440: CALL_OW 250
46444: PPUSH
46445: LD_VAR 0 1
46449: PPUSH
46450: CALL_OW 251
46454: PPUSH
46455: LD_VAR 0 2
46459: PPUSH
46460: CALL 44716 0 4
46464: ST_TO_ADDR
// end ;
46465: LD_VAR 0 3
46469: RET
// export function DangerInArea ( side , area ) ; begin
46470: LD_INT 0
46472: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46473: LD_ADDR_VAR 0 3
46477: PUSH
46478: LD_VAR 0 2
46482: PPUSH
46483: LD_INT 81
46485: PUSH
46486: LD_VAR 0 1
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PPUSH
46495: CALL_OW 70
46499: ST_TO_ADDR
// end ;
46500: LD_VAR 0 3
46504: RET
// export function IsExtension ( b ) ; begin
46505: LD_INT 0
46507: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46508: LD_ADDR_VAR 0 2
46512: PUSH
46513: LD_VAR 0 1
46517: PUSH
46518: LD_INT 23
46520: PUSH
46521: LD_INT 20
46523: PUSH
46524: LD_INT 22
46526: PUSH
46527: LD_INT 17
46529: PUSH
46530: LD_INT 24
46532: PUSH
46533: LD_INT 21
46535: PUSH
46536: LD_INT 19
46538: PUSH
46539: LD_INT 16
46541: PUSH
46542: LD_INT 25
46544: PUSH
46545: LD_INT 18
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: IN
46560: ST_TO_ADDR
// end ;
46561: LD_VAR 0 2
46565: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46566: LD_INT 0
46568: PPUSH
46569: PPUSH
46570: PPUSH
// result := [ ] ;
46571: LD_ADDR_VAR 0 4
46575: PUSH
46576: EMPTY
46577: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46578: LD_ADDR_VAR 0 5
46582: PUSH
46583: LD_VAR 0 2
46587: PPUSH
46588: LD_INT 21
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PPUSH
46598: CALL_OW 70
46602: ST_TO_ADDR
// if not tmp then
46603: LD_VAR 0 5
46607: NOT
46608: IFFALSE 46612
// exit ;
46610: GO 46676
// if checkLink then
46612: LD_VAR 0 3
46616: IFFALSE 46666
// begin for i in tmp do
46618: LD_ADDR_VAR 0 6
46622: PUSH
46623: LD_VAR 0 5
46627: PUSH
46628: FOR_IN
46629: IFFALSE 46664
// if GetBase ( i ) <> base then
46631: LD_VAR 0 6
46635: PPUSH
46636: CALL_OW 274
46640: PUSH
46641: LD_VAR 0 1
46645: NONEQUAL
46646: IFFALSE 46662
// ComLinkToBase ( base , i ) ;
46648: LD_VAR 0 1
46652: PPUSH
46653: LD_VAR 0 6
46657: PPUSH
46658: CALL_OW 169
46662: GO 46628
46664: POP
46665: POP
// end ; result := tmp ;
46666: LD_ADDR_VAR 0 4
46670: PUSH
46671: LD_VAR 0 5
46675: ST_TO_ADDR
// end ;
46676: LD_VAR 0 4
46680: RET
// export function ComComplete ( units , b ) ; var i ; begin
46681: LD_INT 0
46683: PPUSH
46684: PPUSH
// if not units then
46685: LD_VAR 0 1
46689: NOT
46690: IFFALSE 46694
// exit ;
46692: GO 46784
// for i in units do
46694: LD_ADDR_VAR 0 4
46698: PUSH
46699: LD_VAR 0 1
46703: PUSH
46704: FOR_IN
46705: IFFALSE 46782
// if BuildingStatus ( b ) = bs_build then
46707: LD_VAR 0 2
46711: PPUSH
46712: CALL_OW 461
46716: PUSH
46717: LD_INT 1
46719: EQUAL
46720: IFFALSE 46780
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46722: LD_VAR 0 4
46726: PPUSH
46727: LD_STRING h
46729: PUSH
46730: LD_VAR 0 2
46734: PPUSH
46735: CALL_OW 250
46739: PUSH
46740: LD_VAR 0 2
46744: PPUSH
46745: CALL_OW 251
46749: PUSH
46750: LD_VAR 0 2
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: PUSH
46773: EMPTY
46774: LIST
46775: PPUSH
46776: CALL_OW 446
46780: GO 46704
46782: POP
46783: POP
// end ;
46784: LD_VAR 0 3
46788: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46789: LD_INT 0
46791: PPUSH
46792: PPUSH
46793: PPUSH
46794: PPUSH
46795: PPUSH
46796: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46797: LD_VAR 0 1
46801: NOT
46802: PUSH
46803: LD_VAR 0 1
46807: PPUSH
46808: CALL_OW 263
46812: PUSH
46813: LD_INT 2
46815: NONEQUAL
46816: OR
46817: IFFALSE 46821
// exit ;
46819: GO 47137
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46821: LD_ADDR_VAR 0 6
46825: PUSH
46826: LD_INT 22
46828: PUSH
46829: LD_VAR 0 1
46833: PPUSH
46834: CALL_OW 255
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 30
46848: PUSH
46849: LD_INT 36
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 34
46858: PUSH
46859: LD_INT 31
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: LIST
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PPUSH
46875: CALL_OW 69
46879: ST_TO_ADDR
// if not tmp then
46880: LD_VAR 0 6
46884: NOT
46885: IFFALSE 46889
// exit ;
46887: GO 47137
// result := [ ] ;
46889: LD_ADDR_VAR 0 2
46893: PUSH
46894: EMPTY
46895: ST_TO_ADDR
// for i in tmp do
46896: LD_ADDR_VAR 0 3
46900: PUSH
46901: LD_VAR 0 6
46905: PUSH
46906: FOR_IN
46907: IFFALSE 46978
// begin t := UnitsInside ( i ) ;
46909: LD_ADDR_VAR 0 4
46913: PUSH
46914: LD_VAR 0 3
46918: PPUSH
46919: CALL_OW 313
46923: ST_TO_ADDR
// if t then
46924: LD_VAR 0 4
46928: IFFALSE 46976
// for j in t do
46930: LD_ADDR_VAR 0 7
46934: PUSH
46935: LD_VAR 0 4
46939: PUSH
46940: FOR_IN
46941: IFFALSE 46974
// result := Replace ( result , result + 1 , j ) ;
46943: LD_ADDR_VAR 0 2
46947: PUSH
46948: LD_VAR 0 2
46952: PPUSH
46953: LD_VAR 0 2
46957: PUSH
46958: LD_INT 1
46960: PLUS
46961: PPUSH
46962: LD_VAR 0 7
46966: PPUSH
46967: CALL_OW 1
46971: ST_TO_ADDR
46972: GO 46940
46974: POP
46975: POP
// end ;
46976: GO 46906
46978: POP
46979: POP
// if not result then
46980: LD_VAR 0 2
46984: NOT
46985: IFFALSE 46989
// exit ;
46987: GO 47137
// mech := result [ 1 ] ;
46989: LD_ADDR_VAR 0 5
46993: PUSH
46994: LD_VAR 0 2
46998: PUSH
46999: LD_INT 1
47001: ARRAY
47002: ST_TO_ADDR
// if result > 1 then
47003: LD_VAR 0 2
47007: PUSH
47008: LD_INT 1
47010: GREATER
47011: IFFALSE 47123
// begin for i = 2 to result do
47013: LD_ADDR_VAR 0 3
47017: PUSH
47018: DOUBLE
47019: LD_INT 2
47021: DEC
47022: ST_TO_ADDR
47023: LD_VAR 0 2
47027: PUSH
47028: FOR_TO
47029: IFFALSE 47121
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47031: LD_ADDR_VAR 0 4
47035: PUSH
47036: LD_VAR 0 2
47040: PUSH
47041: LD_VAR 0 3
47045: ARRAY
47046: PPUSH
47047: LD_INT 3
47049: PPUSH
47050: CALL_OW 259
47054: PUSH
47055: LD_VAR 0 2
47059: PUSH
47060: LD_VAR 0 3
47064: ARRAY
47065: PPUSH
47066: CALL_OW 432
47070: MINUS
47071: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47072: LD_VAR 0 4
47076: PUSH
47077: LD_VAR 0 5
47081: PPUSH
47082: LD_INT 3
47084: PPUSH
47085: CALL_OW 259
47089: PUSH
47090: LD_VAR 0 5
47094: PPUSH
47095: CALL_OW 432
47099: MINUS
47100: GREATEREQUAL
47101: IFFALSE 47119
// mech := result [ i ] ;
47103: LD_ADDR_VAR 0 5
47107: PUSH
47108: LD_VAR 0 2
47112: PUSH
47113: LD_VAR 0 3
47117: ARRAY
47118: ST_TO_ADDR
// end ;
47119: GO 47028
47121: POP
47122: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47123: LD_VAR 0 1
47127: PPUSH
47128: LD_VAR 0 5
47132: PPUSH
47133: CALL_OW 135
// end ;
47137: LD_VAR 0 2
47141: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47142: LD_INT 0
47144: PPUSH
47145: PPUSH
47146: PPUSH
47147: PPUSH
47148: PPUSH
47149: PPUSH
47150: PPUSH
47151: PPUSH
47152: PPUSH
47153: PPUSH
47154: PPUSH
47155: PPUSH
47156: PPUSH
// result := [ ] ;
47157: LD_ADDR_VAR 0 7
47161: PUSH
47162: EMPTY
47163: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47164: LD_VAR 0 1
47168: PPUSH
47169: CALL_OW 266
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: IN
47184: NOT
47185: IFFALSE 47189
// exit ;
47187: GO 48823
// if name then
47189: LD_VAR 0 3
47193: IFFALSE 47209
// SetBName ( base_dep , name ) ;
47195: LD_VAR 0 1
47199: PPUSH
47200: LD_VAR 0 3
47204: PPUSH
47205: CALL_OW 500
// base := GetBase ( base_dep ) ;
47209: LD_ADDR_VAR 0 15
47213: PUSH
47214: LD_VAR 0 1
47218: PPUSH
47219: CALL_OW 274
47223: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47224: LD_ADDR_VAR 0 16
47228: PUSH
47229: LD_VAR 0 1
47233: PPUSH
47234: CALL_OW 255
47238: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47239: LD_ADDR_VAR 0 17
47243: PUSH
47244: LD_VAR 0 1
47248: PPUSH
47249: CALL_OW 248
47253: ST_TO_ADDR
// if sources then
47254: LD_VAR 0 5
47258: IFFALSE 47305
// for i = 1 to 3 do
47260: LD_ADDR_VAR 0 8
47264: PUSH
47265: DOUBLE
47266: LD_INT 1
47268: DEC
47269: ST_TO_ADDR
47270: LD_INT 3
47272: PUSH
47273: FOR_TO
47274: IFFALSE 47303
// AddResourceType ( base , i , sources [ i ] ) ;
47276: LD_VAR 0 15
47280: PPUSH
47281: LD_VAR 0 8
47285: PPUSH
47286: LD_VAR 0 5
47290: PUSH
47291: LD_VAR 0 8
47295: ARRAY
47296: PPUSH
47297: CALL_OW 276
47301: GO 47273
47303: POP
47304: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47305: LD_ADDR_VAR 0 18
47309: PUSH
47310: LD_VAR 0 15
47314: PPUSH
47315: LD_VAR 0 2
47319: PPUSH
47320: LD_INT 1
47322: PPUSH
47323: CALL 46566 0 3
47327: ST_TO_ADDR
// InitHc ;
47328: CALL_OW 19
// InitUc ;
47332: CALL_OW 18
// uc_side := side ;
47336: LD_ADDR_OWVAR 20
47340: PUSH
47341: LD_VAR 0 16
47345: ST_TO_ADDR
// uc_nation := nation ;
47346: LD_ADDR_OWVAR 21
47350: PUSH
47351: LD_VAR 0 17
47355: ST_TO_ADDR
// if buildings then
47356: LD_VAR 0 18
47360: IFFALSE 48682
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47362: LD_ADDR_VAR 0 19
47366: PUSH
47367: LD_VAR 0 18
47371: PPUSH
47372: LD_INT 2
47374: PUSH
47375: LD_INT 30
47377: PUSH
47378: LD_INT 29
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 30
47387: PUSH
47388: LD_INT 30
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: LIST
47399: PPUSH
47400: CALL_OW 72
47404: ST_TO_ADDR
// if tmp then
47405: LD_VAR 0 19
47409: IFFALSE 47457
// for i in tmp do
47411: LD_ADDR_VAR 0 8
47415: PUSH
47416: LD_VAR 0 19
47420: PUSH
47421: FOR_IN
47422: IFFALSE 47455
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47424: LD_VAR 0 8
47428: PPUSH
47429: CALL_OW 250
47433: PPUSH
47434: LD_VAR 0 8
47438: PPUSH
47439: CALL_OW 251
47443: PPUSH
47444: LD_VAR 0 16
47448: PPUSH
47449: CALL_OW 441
47453: GO 47421
47455: POP
47456: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47457: LD_VAR 0 18
47461: PPUSH
47462: LD_INT 2
47464: PUSH
47465: LD_INT 30
47467: PUSH
47468: LD_INT 32
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 30
47477: PUSH
47478: LD_INT 33
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: LIST
47489: PPUSH
47490: CALL_OW 72
47494: IFFALSE 47582
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47496: LD_ADDR_VAR 0 8
47500: PUSH
47501: LD_VAR 0 18
47505: PPUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 30
47511: PUSH
47512: LD_INT 32
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 30
47521: PUSH
47522: LD_INT 33
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: PPUSH
47534: CALL_OW 72
47538: PUSH
47539: FOR_IN
47540: IFFALSE 47580
// begin if not GetBWeapon ( i ) then
47542: LD_VAR 0 8
47546: PPUSH
47547: CALL_OW 269
47551: NOT
47552: IFFALSE 47578
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47554: LD_VAR 0 8
47558: PPUSH
47559: LD_VAR 0 8
47563: PPUSH
47564: LD_VAR 0 2
47568: PPUSH
47569: CALL 48828 0 2
47573: PPUSH
47574: CALL_OW 431
// end ;
47578: GO 47539
47580: POP
47581: POP
// end ; for i = 1 to personel do
47582: LD_ADDR_VAR 0 8
47586: PUSH
47587: DOUBLE
47588: LD_INT 1
47590: DEC
47591: ST_TO_ADDR
47592: LD_VAR 0 6
47596: PUSH
47597: FOR_TO
47598: IFFALSE 48662
// begin if i > 4 then
47600: LD_VAR 0 8
47604: PUSH
47605: LD_INT 4
47607: GREATER
47608: IFFALSE 47612
// break ;
47610: GO 48662
// case i of 1 :
47612: LD_VAR 0 8
47616: PUSH
47617: LD_INT 1
47619: DOUBLE
47620: EQUAL
47621: IFTRUE 47625
47623: GO 47705
47625: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47626: LD_ADDR_VAR 0 12
47630: PUSH
47631: LD_VAR 0 18
47635: PPUSH
47636: LD_INT 22
47638: PUSH
47639: LD_VAR 0 16
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 58
47650: PUSH
47651: EMPTY
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: LD_INT 30
47659: PUSH
47660: LD_INT 32
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 30
47669: PUSH
47670: LD_INT 4
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 30
47679: PUSH
47680: LD_INT 5
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: PPUSH
47698: CALL_OW 72
47702: ST_TO_ADDR
47703: GO 47927
47705: LD_INT 2
47707: DOUBLE
47708: EQUAL
47709: IFTRUE 47713
47711: GO 47775
47713: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47714: LD_ADDR_VAR 0 12
47718: PUSH
47719: LD_VAR 0 18
47723: PPUSH
47724: LD_INT 22
47726: PUSH
47727: LD_VAR 0 16
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: LD_INT 30
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 30
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PPUSH
47768: CALL_OW 72
47772: ST_TO_ADDR
47773: GO 47927
47775: LD_INT 3
47777: DOUBLE
47778: EQUAL
47779: IFTRUE 47783
47781: GO 47845
47783: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47784: LD_ADDR_VAR 0 12
47788: PUSH
47789: LD_VAR 0 18
47793: PPUSH
47794: LD_INT 22
47796: PUSH
47797: LD_VAR 0 16
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 30
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 30
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: LIST
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PPUSH
47838: CALL_OW 72
47842: ST_TO_ADDR
47843: GO 47927
47845: LD_INT 4
47847: DOUBLE
47848: EQUAL
47849: IFTRUE 47853
47851: GO 47926
47853: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47854: LD_ADDR_VAR 0 12
47858: PUSH
47859: LD_VAR 0 18
47863: PPUSH
47864: LD_INT 22
47866: PUSH
47867: LD_VAR 0 16
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: LD_INT 30
47881: PUSH
47882: LD_INT 6
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 30
47891: PUSH
47892: LD_INT 7
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 30
47901: PUSH
47902: LD_INT 8
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PPUSH
47919: CALL_OW 72
47923: ST_TO_ADDR
47924: GO 47927
47926: POP
// if i = 1 then
47927: LD_VAR 0 8
47931: PUSH
47932: LD_INT 1
47934: EQUAL
47935: IFFALSE 48046
// begin tmp := [ ] ;
47937: LD_ADDR_VAR 0 19
47941: PUSH
47942: EMPTY
47943: ST_TO_ADDR
// for j in f do
47944: LD_ADDR_VAR 0 9
47948: PUSH
47949: LD_VAR 0 12
47953: PUSH
47954: FOR_IN
47955: IFFALSE 48028
// if GetBType ( j ) = b_bunker then
47957: LD_VAR 0 9
47961: PPUSH
47962: CALL_OW 266
47966: PUSH
47967: LD_INT 32
47969: EQUAL
47970: IFFALSE 47997
// tmp := Insert ( tmp , 1 , j ) else
47972: LD_ADDR_VAR 0 19
47976: PUSH
47977: LD_VAR 0 19
47981: PPUSH
47982: LD_INT 1
47984: PPUSH
47985: LD_VAR 0 9
47989: PPUSH
47990: CALL_OW 2
47994: ST_TO_ADDR
47995: GO 48026
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47997: LD_ADDR_VAR 0 19
48001: PUSH
48002: LD_VAR 0 19
48006: PPUSH
48007: LD_VAR 0 19
48011: PUSH
48012: LD_INT 1
48014: PLUS
48015: PPUSH
48016: LD_VAR 0 9
48020: PPUSH
48021: CALL_OW 2
48025: ST_TO_ADDR
48026: GO 47954
48028: POP
48029: POP
// if tmp then
48030: LD_VAR 0 19
48034: IFFALSE 48046
// f := tmp ;
48036: LD_ADDR_VAR 0 12
48040: PUSH
48041: LD_VAR 0 19
48045: ST_TO_ADDR
// end ; x := personel [ i ] ;
48046: LD_ADDR_VAR 0 13
48050: PUSH
48051: LD_VAR 0 6
48055: PUSH
48056: LD_VAR 0 8
48060: ARRAY
48061: ST_TO_ADDR
// if x = - 1 then
48062: LD_VAR 0 13
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: EQUAL
48071: IFFALSE 48280
// begin for j in f do
48073: LD_ADDR_VAR 0 9
48077: PUSH
48078: LD_VAR 0 12
48082: PUSH
48083: FOR_IN
48084: IFFALSE 48276
// repeat InitHc ;
48086: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48090: LD_VAR 0 9
48094: PPUSH
48095: CALL_OW 266
48099: PUSH
48100: LD_INT 5
48102: EQUAL
48103: IFFALSE 48173
// begin if UnitsInside ( j ) < 3 then
48105: LD_VAR 0 9
48109: PPUSH
48110: CALL_OW 313
48114: PUSH
48115: LD_INT 3
48117: LESS
48118: IFFALSE 48154
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48120: LD_INT 0
48122: PPUSH
48123: LD_INT 5
48125: PUSH
48126: LD_INT 8
48128: PUSH
48129: LD_INT 9
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: PUSH
48137: LD_VAR 0 17
48141: ARRAY
48142: PPUSH
48143: LD_VAR 0 4
48147: PPUSH
48148: CALL_OW 380
48152: GO 48171
// PrepareHuman ( false , i , skill ) ;
48154: LD_INT 0
48156: PPUSH
48157: LD_VAR 0 8
48161: PPUSH
48162: LD_VAR 0 4
48166: PPUSH
48167: CALL_OW 380
// end else
48171: GO 48190
// PrepareHuman ( false , i , skill ) ;
48173: LD_INT 0
48175: PPUSH
48176: LD_VAR 0 8
48180: PPUSH
48181: LD_VAR 0 4
48185: PPUSH
48186: CALL_OW 380
// un := CreateHuman ;
48190: LD_ADDR_VAR 0 14
48194: PUSH
48195: CALL_OW 44
48199: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48200: LD_ADDR_VAR 0 7
48204: PUSH
48205: LD_VAR 0 7
48209: PPUSH
48210: LD_INT 1
48212: PPUSH
48213: LD_VAR 0 14
48217: PPUSH
48218: CALL_OW 2
48222: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48223: LD_VAR 0 14
48227: PPUSH
48228: LD_VAR 0 9
48232: PPUSH
48233: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48237: LD_VAR 0 9
48241: PPUSH
48242: CALL_OW 313
48246: PUSH
48247: LD_INT 6
48249: EQUAL
48250: PUSH
48251: LD_VAR 0 9
48255: PPUSH
48256: CALL_OW 266
48260: PUSH
48261: LD_INT 32
48263: PUSH
48264: LD_INT 31
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: IN
48271: OR
48272: IFFALSE 48086
48274: GO 48083
48276: POP
48277: POP
// end else
48278: GO 48660
// for j = 1 to x do
48280: LD_ADDR_VAR 0 9
48284: PUSH
48285: DOUBLE
48286: LD_INT 1
48288: DEC
48289: ST_TO_ADDR
48290: LD_VAR 0 13
48294: PUSH
48295: FOR_TO
48296: IFFALSE 48658
// begin InitHc ;
48298: CALL_OW 19
// if not f then
48302: LD_VAR 0 12
48306: NOT
48307: IFFALSE 48396
// begin PrepareHuman ( false , i , skill ) ;
48309: LD_INT 0
48311: PPUSH
48312: LD_VAR 0 8
48316: PPUSH
48317: LD_VAR 0 4
48321: PPUSH
48322: CALL_OW 380
// un := CreateHuman ;
48326: LD_ADDR_VAR 0 14
48330: PUSH
48331: CALL_OW 44
48335: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48336: LD_ADDR_VAR 0 7
48340: PUSH
48341: LD_VAR 0 7
48345: PPUSH
48346: LD_INT 1
48348: PPUSH
48349: LD_VAR 0 14
48353: PPUSH
48354: CALL_OW 2
48358: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48359: LD_VAR 0 14
48363: PPUSH
48364: LD_VAR 0 1
48368: PPUSH
48369: CALL_OW 250
48373: PPUSH
48374: LD_VAR 0 1
48378: PPUSH
48379: CALL_OW 251
48383: PPUSH
48384: LD_INT 10
48386: PPUSH
48387: LD_INT 0
48389: PPUSH
48390: CALL_OW 50
// continue ;
48394: GO 48295
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48396: LD_VAR 0 12
48400: PUSH
48401: LD_INT 1
48403: ARRAY
48404: PPUSH
48405: CALL_OW 313
48409: PUSH
48410: LD_VAR 0 12
48414: PUSH
48415: LD_INT 1
48417: ARRAY
48418: PPUSH
48419: CALL_OW 266
48423: PUSH
48424: LD_INT 32
48426: PUSH
48427: LD_INT 31
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: IN
48434: AND
48435: PUSH
48436: LD_VAR 0 12
48440: PUSH
48441: LD_INT 1
48443: ARRAY
48444: PPUSH
48445: CALL_OW 313
48449: PUSH
48450: LD_INT 6
48452: EQUAL
48453: OR
48454: IFFALSE 48474
// f := Delete ( f , 1 ) ;
48456: LD_ADDR_VAR 0 12
48460: PUSH
48461: LD_VAR 0 12
48465: PPUSH
48466: LD_INT 1
48468: PPUSH
48469: CALL_OW 3
48473: ST_TO_ADDR
// if not f then
48474: LD_VAR 0 12
48478: NOT
48479: IFFALSE 48497
// begin x := x + 2 ;
48481: LD_ADDR_VAR 0 13
48485: PUSH
48486: LD_VAR 0 13
48490: PUSH
48491: LD_INT 2
48493: PLUS
48494: ST_TO_ADDR
// continue ;
48495: GO 48295
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48497: LD_VAR 0 12
48501: PUSH
48502: LD_INT 1
48504: ARRAY
48505: PPUSH
48506: CALL_OW 266
48510: PUSH
48511: LD_INT 5
48513: EQUAL
48514: IFFALSE 48588
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48516: LD_VAR 0 12
48520: PUSH
48521: LD_INT 1
48523: ARRAY
48524: PPUSH
48525: CALL_OW 313
48529: PUSH
48530: LD_INT 3
48532: LESS
48533: IFFALSE 48569
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48535: LD_INT 0
48537: PPUSH
48538: LD_INT 5
48540: PUSH
48541: LD_INT 8
48543: PUSH
48544: LD_INT 9
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: PUSH
48552: LD_VAR 0 17
48556: ARRAY
48557: PPUSH
48558: LD_VAR 0 4
48562: PPUSH
48563: CALL_OW 380
48567: GO 48586
// PrepareHuman ( false , i , skill ) ;
48569: LD_INT 0
48571: PPUSH
48572: LD_VAR 0 8
48576: PPUSH
48577: LD_VAR 0 4
48581: PPUSH
48582: CALL_OW 380
// end else
48586: GO 48605
// PrepareHuman ( false , i , skill ) ;
48588: LD_INT 0
48590: PPUSH
48591: LD_VAR 0 8
48595: PPUSH
48596: LD_VAR 0 4
48600: PPUSH
48601: CALL_OW 380
// un := CreateHuman ;
48605: LD_ADDR_VAR 0 14
48609: PUSH
48610: CALL_OW 44
48614: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48615: LD_ADDR_VAR 0 7
48619: PUSH
48620: LD_VAR 0 7
48624: PPUSH
48625: LD_INT 1
48627: PPUSH
48628: LD_VAR 0 14
48632: PPUSH
48633: CALL_OW 2
48637: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48638: LD_VAR 0 14
48642: PPUSH
48643: LD_VAR 0 12
48647: PUSH
48648: LD_INT 1
48650: ARRAY
48651: PPUSH
48652: CALL_OW 52
// end ;
48656: GO 48295
48658: POP
48659: POP
// end ;
48660: GO 47597
48662: POP
48663: POP
// result := result ^ buildings ;
48664: LD_ADDR_VAR 0 7
48668: PUSH
48669: LD_VAR 0 7
48673: PUSH
48674: LD_VAR 0 18
48678: ADD
48679: ST_TO_ADDR
// end else
48680: GO 48823
// begin for i = 1 to personel do
48682: LD_ADDR_VAR 0 8
48686: PUSH
48687: DOUBLE
48688: LD_INT 1
48690: DEC
48691: ST_TO_ADDR
48692: LD_VAR 0 6
48696: PUSH
48697: FOR_TO
48698: IFFALSE 48821
// begin if i > 4 then
48700: LD_VAR 0 8
48704: PUSH
48705: LD_INT 4
48707: GREATER
48708: IFFALSE 48712
// break ;
48710: GO 48821
// x := personel [ i ] ;
48712: LD_ADDR_VAR 0 13
48716: PUSH
48717: LD_VAR 0 6
48721: PUSH
48722: LD_VAR 0 8
48726: ARRAY
48727: ST_TO_ADDR
// if x = - 1 then
48728: LD_VAR 0 13
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: EQUAL
48737: IFFALSE 48741
// continue ;
48739: GO 48697
// PrepareHuman ( false , i , skill ) ;
48741: LD_INT 0
48743: PPUSH
48744: LD_VAR 0 8
48748: PPUSH
48749: LD_VAR 0 4
48753: PPUSH
48754: CALL_OW 380
// un := CreateHuman ;
48758: LD_ADDR_VAR 0 14
48762: PUSH
48763: CALL_OW 44
48767: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48768: LD_VAR 0 14
48772: PPUSH
48773: LD_VAR 0 1
48777: PPUSH
48778: CALL_OW 250
48782: PPUSH
48783: LD_VAR 0 1
48787: PPUSH
48788: CALL_OW 251
48792: PPUSH
48793: LD_INT 10
48795: PPUSH
48796: LD_INT 0
48798: PPUSH
48799: CALL_OW 50
// result := result ^ un ;
48803: LD_ADDR_VAR 0 7
48807: PUSH
48808: LD_VAR 0 7
48812: PUSH
48813: LD_VAR 0 14
48817: ADD
48818: ST_TO_ADDR
// end ;
48819: GO 48697
48821: POP
48822: POP
// end ; end ;
48823: LD_VAR 0 7
48827: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48828: LD_INT 0
48830: PPUSH
48831: PPUSH
48832: PPUSH
48833: PPUSH
48834: PPUSH
48835: PPUSH
48836: PPUSH
48837: PPUSH
48838: PPUSH
48839: PPUSH
48840: PPUSH
48841: PPUSH
48842: PPUSH
48843: PPUSH
48844: PPUSH
48845: PPUSH
// result := false ;
48846: LD_ADDR_VAR 0 3
48850: PUSH
48851: LD_INT 0
48853: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48854: LD_VAR 0 1
48858: NOT
48859: PUSH
48860: LD_VAR 0 1
48864: PPUSH
48865: CALL_OW 266
48869: PUSH
48870: LD_INT 32
48872: PUSH
48873: LD_INT 33
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: IN
48880: NOT
48881: OR
48882: IFFALSE 48886
// exit ;
48884: GO 49995
// nat := GetNation ( tower ) ;
48886: LD_ADDR_VAR 0 12
48890: PUSH
48891: LD_VAR 0 1
48895: PPUSH
48896: CALL_OW 248
48900: ST_TO_ADDR
// side := GetSide ( tower ) ;
48901: LD_ADDR_VAR 0 16
48905: PUSH
48906: LD_VAR 0 1
48910: PPUSH
48911: CALL_OW 255
48915: ST_TO_ADDR
// x := GetX ( tower ) ;
48916: LD_ADDR_VAR 0 10
48920: PUSH
48921: LD_VAR 0 1
48925: PPUSH
48926: CALL_OW 250
48930: ST_TO_ADDR
// y := GetY ( tower ) ;
48931: LD_ADDR_VAR 0 11
48935: PUSH
48936: LD_VAR 0 1
48940: PPUSH
48941: CALL_OW 251
48945: ST_TO_ADDR
// if not x or not y then
48946: LD_VAR 0 10
48950: NOT
48951: PUSH
48952: LD_VAR 0 11
48956: NOT
48957: OR
48958: IFFALSE 48962
// exit ;
48960: GO 49995
// weapon := 0 ;
48962: LD_ADDR_VAR 0 18
48966: PUSH
48967: LD_INT 0
48969: ST_TO_ADDR
// fac_list := [ ] ;
48970: LD_ADDR_VAR 0 17
48974: PUSH
48975: EMPTY
48976: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48977: LD_ADDR_VAR 0 6
48981: PUSH
48982: LD_VAR 0 1
48986: PPUSH
48987: CALL_OW 274
48991: PPUSH
48992: LD_VAR 0 2
48996: PPUSH
48997: LD_INT 0
48999: PPUSH
49000: CALL 46566 0 3
49004: PPUSH
49005: LD_INT 30
49007: PUSH
49008: LD_INT 3
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PPUSH
49015: CALL_OW 72
49019: ST_TO_ADDR
// if not factories then
49020: LD_VAR 0 6
49024: NOT
49025: IFFALSE 49029
// exit ;
49027: GO 49995
// for i in factories do
49029: LD_ADDR_VAR 0 8
49033: PUSH
49034: LD_VAR 0 6
49038: PUSH
49039: FOR_IN
49040: IFFALSE 49065
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49042: LD_ADDR_VAR 0 17
49046: PUSH
49047: LD_VAR 0 17
49051: PUSH
49052: LD_VAR 0 8
49056: PPUSH
49057: CALL_OW 478
49061: UNION
49062: ST_TO_ADDR
49063: GO 49039
49065: POP
49066: POP
// if not fac_list then
49067: LD_VAR 0 17
49071: NOT
49072: IFFALSE 49076
// exit ;
49074: GO 49995
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49076: LD_ADDR_VAR 0 5
49080: PUSH
49081: LD_INT 4
49083: PUSH
49084: LD_INT 5
49086: PUSH
49087: LD_INT 9
49089: PUSH
49090: LD_INT 10
49092: PUSH
49093: LD_INT 6
49095: PUSH
49096: LD_INT 7
49098: PUSH
49099: LD_INT 11
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 27
49113: PUSH
49114: LD_INT 28
49116: PUSH
49117: LD_INT 26
49119: PUSH
49120: LD_INT 30
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 43
49131: PUSH
49132: LD_INT 44
49134: PUSH
49135: LD_INT 46
49137: PUSH
49138: LD_INT 45
49140: PUSH
49141: LD_INT 47
49143: PUSH
49144: LD_INT 49
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: LIST
49159: PUSH
49160: LD_VAR 0 12
49164: ARRAY
49165: ST_TO_ADDR
// list := list isect fac_list ;
49166: LD_ADDR_VAR 0 5
49170: PUSH
49171: LD_VAR 0 5
49175: PUSH
49176: LD_VAR 0 17
49180: ISECT
49181: ST_TO_ADDR
// if not list then
49182: LD_VAR 0 5
49186: NOT
49187: IFFALSE 49191
// exit ;
49189: GO 49995
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49191: LD_VAR 0 12
49195: PUSH
49196: LD_INT 3
49198: EQUAL
49199: PUSH
49200: LD_INT 49
49202: PUSH
49203: LD_VAR 0 5
49207: IN
49208: AND
49209: PUSH
49210: LD_INT 31
49212: PPUSH
49213: LD_VAR 0 16
49217: PPUSH
49218: CALL_OW 321
49222: PUSH
49223: LD_INT 2
49225: EQUAL
49226: AND
49227: IFFALSE 49287
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49229: LD_INT 22
49231: PUSH
49232: LD_VAR 0 16
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 35
49243: PUSH
49244: LD_INT 49
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 91
49253: PUSH
49254: LD_VAR 0 1
49258: PUSH
49259: LD_INT 10
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: PPUSH
49272: CALL_OW 69
49276: NOT
49277: IFFALSE 49287
// weapon := ru_time_lapser ;
49279: LD_ADDR_VAR 0 18
49283: PUSH
49284: LD_INT 49
49286: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49287: LD_VAR 0 12
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: IN
49302: PUSH
49303: LD_INT 11
49305: PUSH
49306: LD_VAR 0 5
49310: IN
49311: PUSH
49312: LD_INT 30
49314: PUSH
49315: LD_VAR 0 5
49319: IN
49320: OR
49321: AND
49322: PUSH
49323: LD_INT 6
49325: PPUSH
49326: LD_VAR 0 16
49330: PPUSH
49331: CALL_OW 321
49335: PUSH
49336: LD_INT 2
49338: EQUAL
49339: AND
49340: IFFALSE 49505
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49342: LD_INT 22
49344: PUSH
49345: LD_VAR 0 16
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: LD_INT 35
49359: PUSH
49360: LD_INT 11
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 35
49369: PUSH
49370: LD_INT 30
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 91
49384: PUSH
49385: LD_VAR 0 1
49389: PUSH
49390: LD_INT 18
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: LIST
49402: PPUSH
49403: CALL_OW 69
49407: NOT
49408: PUSH
49409: LD_INT 22
49411: PUSH
49412: LD_VAR 0 16
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: LD_INT 30
49426: PUSH
49427: LD_INT 32
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 30
49436: PUSH
49437: LD_INT 33
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 91
49451: PUSH
49452: LD_VAR 0 1
49456: PUSH
49457: LD_INT 12
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: LIST
49469: PUSH
49470: EMPTY
49471: LIST
49472: PPUSH
49473: CALL_OW 69
49477: PUSH
49478: LD_INT 2
49480: GREATER
49481: AND
49482: IFFALSE 49505
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49484: LD_ADDR_VAR 0 18
49488: PUSH
49489: LD_INT 11
49491: PUSH
49492: LD_INT 30
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_VAR 0 12
49503: ARRAY
49504: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49505: LD_VAR 0 18
49509: NOT
49510: PUSH
49511: LD_INT 40
49513: PPUSH
49514: LD_VAR 0 16
49518: PPUSH
49519: CALL_OW 321
49523: PUSH
49524: LD_INT 2
49526: EQUAL
49527: AND
49528: PUSH
49529: LD_INT 7
49531: PUSH
49532: LD_VAR 0 5
49536: IN
49537: PUSH
49538: LD_INT 28
49540: PUSH
49541: LD_VAR 0 5
49545: IN
49546: OR
49547: PUSH
49548: LD_INT 45
49550: PUSH
49551: LD_VAR 0 5
49555: IN
49556: OR
49557: AND
49558: IFFALSE 49812
// begin hex := GetHexInfo ( x , y ) ;
49560: LD_ADDR_VAR 0 4
49564: PUSH
49565: LD_VAR 0 10
49569: PPUSH
49570: LD_VAR 0 11
49574: PPUSH
49575: CALL_OW 546
49579: ST_TO_ADDR
// if hex [ 1 ] then
49580: LD_VAR 0 4
49584: PUSH
49585: LD_INT 1
49587: ARRAY
49588: IFFALSE 49592
// exit ;
49590: GO 49995
// height := hex [ 2 ] ;
49592: LD_ADDR_VAR 0 15
49596: PUSH
49597: LD_VAR 0 4
49601: PUSH
49602: LD_INT 2
49604: ARRAY
49605: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49606: LD_ADDR_VAR 0 14
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 3
49619: PUSH
49620: LD_INT 5
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: ST_TO_ADDR
// for i in tmp do
49629: LD_ADDR_VAR 0 8
49633: PUSH
49634: LD_VAR 0 14
49638: PUSH
49639: FOR_IN
49640: IFFALSE 49810
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49642: LD_ADDR_VAR 0 9
49646: PUSH
49647: LD_VAR 0 10
49651: PPUSH
49652: LD_VAR 0 8
49656: PPUSH
49657: LD_INT 5
49659: PPUSH
49660: CALL_OW 272
49664: PUSH
49665: LD_VAR 0 11
49669: PPUSH
49670: LD_VAR 0 8
49674: PPUSH
49675: LD_INT 5
49677: PPUSH
49678: CALL_OW 273
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49687: LD_VAR 0 9
49691: PUSH
49692: LD_INT 1
49694: ARRAY
49695: PPUSH
49696: LD_VAR 0 9
49700: PUSH
49701: LD_INT 2
49703: ARRAY
49704: PPUSH
49705: CALL_OW 488
49709: IFFALSE 49808
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49711: LD_ADDR_VAR 0 4
49715: PUSH
49716: LD_VAR 0 9
49720: PUSH
49721: LD_INT 1
49723: ARRAY
49724: PPUSH
49725: LD_VAR 0 9
49729: PUSH
49730: LD_INT 2
49732: ARRAY
49733: PPUSH
49734: CALL_OW 546
49738: ST_TO_ADDR
// if hex [ 1 ] then
49739: LD_VAR 0 4
49743: PUSH
49744: LD_INT 1
49746: ARRAY
49747: IFFALSE 49751
// continue ;
49749: GO 49639
// h := hex [ 2 ] ;
49751: LD_ADDR_VAR 0 13
49755: PUSH
49756: LD_VAR 0 4
49760: PUSH
49761: LD_INT 2
49763: ARRAY
49764: ST_TO_ADDR
// if h + 7 < height then
49765: LD_VAR 0 13
49769: PUSH
49770: LD_INT 7
49772: PLUS
49773: PUSH
49774: LD_VAR 0 15
49778: LESS
49779: IFFALSE 49808
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49781: LD_ADDR_VAR 0 18
49785: PUSH
49786: LD_INT 7
49788: PUSH
49789: LD_INT 28
49791: PUSH
49792: LD_INT 45
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: LIST
49799: PUSH
49800: LD_VAR 0 12
49804: ARRAY
49805: ST_TO_ADDR
// break ;
49806: GO 49810
// end ; end ; end ;
49808: GO 49639
49810: POP
49811: POP
// end ; if not weapon then
49812: LD_VAR 0 18
49816: NOT
49817: IFFALSE 49877
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49819: LD_ADDR_VAR 0 5
49823: PUSH
49824: LD_VAR 0 5
49828: PUSH
49829: LD_INT 11
49831: PUSH
49832: LD_INT 30
49834: PUSH
49835: LD_INT 49
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: DIFF
49843: ST_TO_ADDR
// if not list then
49844: LD_VAR 0 5
49848: NOT
49849: IFFALSE 49853
// exit ;
49851: GO 49995
// weapon := list [ rand ( 1 , list ) ] ;
49853: LD_ADDR_VAR 0 18
49857: PUSH
49858: LD_VAR 0 5
49862: PUSH
49863: LD_INT 1
49865: PPUSH
49866: LD_VAR 0 5
49870: PPUSH
49871: CALL_OW 12
49875: ARRAY
49876: ST_TO_ADDR
// end ; if weapon then
49877: LD_VAR 0 18
49881: IFFALSE 49995
// begin tmp := CostOfWeapon ( weapon ) ;
49883: LD_ADDR_VAR 0 14
49887: PUSH
49888: LD_VAR 0 18
49892: PPUSH
49893: CALL_OW 451
49897: ST_TO_ADDR
// j := GetBase ( tower ) ;
49898: LD_ADDR_VAR 0 9
49902: PUSH
49903: LD_VAR 0 1
49907: PPUSH
49908: CALL_OW 274
49912: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49913: LD_VAR 0 9
49917: PPUSH
49918: LD_INT 1
49920: PPUSH
49921: CALL_OW 275
49925: PUSH
49926: LD_VAR 0 14
49930: PUSH
49931: LD_INT 1
49933: ARRAY
49934: GREATEREQUAL
49935: PUSH
49936: LD_VAR 0 9
49940: PPUSH
49941: LD_INT 2
49943: PPUSH
49944: CALL_OW 275
49948: PUSH
49949: LD_VAR 0 14
49953: PUSH
49954: LD_INT 2
49956: ARRAY
49957: GREATEREQUAL
49958: AND
49959: PUSH
49960: LD_VAR 0 9
49964: PPUSH
49965: LD_INT 3
49967: PPUSH
49968: CALL_OW 275
49972: PUSH
49973: LD_VAR 0 14
49977: PUSH
49978: LD_INT 3
49980: ARRAY
49981: GREATEREQUAL
49982: AND
49983: IFFALSE 49995
// result := weapon ;
49985: LD_ADDR_VAR 0 3
49989: PUSH
49990: LD_VAR 0 18
49994: ST_TO_ADDR
// end ; end ;
49995: LD_VAR 0 3
49999: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50000: LD_INT 0
50002: PPUSH
50003: PPUSH
// result := true ;
50004: LD_ADDR_VAR 0 3
50008: PUSH
50009: LD_INT 1
50011: ST_TO_ADDR
// if array1 = array2 then
50012: LD_VAR 0 1
50016: PUSH
50017: LD_VAR 0 2
50021: EQUAL
50022: IFFALSE 50082
// begin for i = 1 to array1 do
50024: LD_ADDR_VAR 0 4
50028: PUSH
50029: DOUBLE
50030: LD_INT 1
50032: DEC
50033: ST_TO_ADDR
50034: LD_VAR 0 1
50038: PUSH
50039: FOR_TO
50040: IFFALSE 50078
// if array1 [ i ] <> array2 [ i ] then
50042: LD_VAR 0 1
50046: PUSH
50047: LD_VAR 0 4
50051: ARRAY
50052: PUSH
50053: LD_VAR 0 2
50057: PUSH
50058: LD_VAR 0 4
50062: ARRAY
50063: NONEQUAL
50064: IFFALSE 50076
// begin result := false ;
50066: LD_ADDR_VAR 0 3
50070: PUSH
50071: LD_INT 0
50073: ST_TO_ADDR
// break ;
50074: GO 50078
// end ;
50076: GO 50039
50078: POP
50079: POP
// end else
50080: GO 50090
// result := false ;
50082: LD_ADDR_VAR 0 3
50086: PUSH
50087: LD_INT 0
50089: ST_TO_ADDR
// end ;
50090: LD_VAR 0 3
50094: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50095: LD_INT 0
50097: PPUSH
50098: PPUSH
// if not array1 or not array2 then
50099: LD_VAR 0 1
50103: NOT
50104: PUSH
50105: LD_VAR 0 2
50109: NOT
50110: OR
50111: IFFALSE 50115
// exit ;
50113: GO 50179
// result := true ;
50115: LD_ADDR_VAR 0 3
50119: PUSH
50120: LD_INT 1
50122: ST_TO_ADDR
// for i = 1 to array1 do
50123: LD_ADDR_VAR 0 4
50127: PUSH
50128: DOUBLE
50129: LD_INT 1
50131: DEC
50132: ST_TO_ADDR
50133: LD_VAR 0 1
50137: PUSH
50138: FOR_TO
50139: IFFALSE 50177
// if array1 [ i ] <> array2 [ i ] then
50141: LD_VAR 0 1
50145: PUSH
50146: LD_VAR 0 4
50150: ARRAY
50151: PUSH
50152: LD_VAR 0 2
50156: PUSH
50157: LD_VAR 0 4
50161: ARRAY
50162: NONEQUAL
50163: IFFALSE 50175
// begin result := false ;
50165: LD_ADDR_VAR 0 3
50169: PUSH
50170: LD_INT 0
50172: ST_TO_ADDR
// break ;
50173: GO 50177
// end ;
50175: GO 50138
50177: POP
50178: POP
// end ;
50179: LD_VAR 0 3
50183: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50184: LD_INT 0
50186: PPUSH
50187: PPUSH
50188: PPUSH
// pom := GetBase ( fac ) ;
50189: LD_ADDR_VAR 0 5
50193: PUSH
50194: LD_VAR 0 1
50198: PPUSH
50199: CALL_OW 274
50203: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50204: LD_ADDR_VAR 0 4
50208: PUSH
50209: LD_VAR 0 2
50213: PUSH
50214: LD_INT 1
50216: ARRAY
50217: PPUSH
50218: LD_VAR 0 2
50222: PUSH
50223: LD_INT 2
50225: ARRAY
50226: PPUSH
50227: LD_VAR 0 2
50231: PUSH
50232: LD_INT 3
50234: ARRAY
50235: PPUSH
50236: LD_VAR 0 2
50240: PUSH
50241: LD_INT 4
50243: ARRAY
50244: PPUSH
50245: CALL_OW 449
50249: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50250: LD_ADDR_VAR 0 3
50254: PUSH
50255: LD_VAR 0 5
50259: PPUSH
50260: LD_INT 1
50262: PPUSH
50263: CALL_OW 275
50267: PUSH
50268: LD_VAR 0 4
50272: PUSH
50273: LD_INT 1
50275: ARRAY
50276: GREATEREQUAL
50277: PUSH
50278: LD_VAR 0 5
50282: PPUSH
50283: LD_INT 2
50285: PPUSH
50286: CALL_OW 275
50290: PUSH
50291: LD_VAR 0 4
50295: PUSH
50296: LD_INT 2
50298: ARRAY
50299: GREATEREQUAL
50300: AND
50301: PUSH
50302: LD_VAR 0 5
50306: PPUSH
50307: LD_INT 3
50309: PPUSH
50310: CALL_OW 275
50314: PUSH
50315: LD_VAR 0 4
50319: PUSH
50320: LD_INT 3
50322: ARRAY
50323: GREATEREQUAL
50324: AND
50325: ST_TO_ADDR
// end ;
50326: LD_VAR 0 3
50330: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50331: LD_INT 0
50333: PPUSH
50334: PPUSH
50335: PPUSH
50336: PPUSH
// pom := GetBase ( building ) ;
50337: LD_ADDR_VAR 0 3
50341: PUSH
50342: LD_VAR 0 1
50346: PPUSH
50347: CALL_OW 274
50351: ST_TO_ADDR
// if not pom then
50352: LD_VAR 0 3
50356: NOT
50357: IFFALSE 50361
// exit ;
50359: GO 50531
// btype := GetBType ( building ) ;
50361: LD_ADDR_VAR 0 5
50365: PUSH
50366: LD_VAR 0 1
50370: PPUSH
50371: CALL_OW 266
50375: ST_TO_ADDR
// if btype = b_armoury then
50376: LD_VAR 0 5
50380: PUSH
50381: LD_INT 4
50383: EQUAL
50384: IFFALSE 50394
// btype := b_barracks ;
50386: LD_ADDR_VAR 0 5
50390: PUSH
50391: LD_INT 5
50393: ST_TO_ADDR
// if btype = b_depot then
50394: LD_VAR 0 5
50398: PUSH
50399: LD_INT 0
50401: EQUAL
50402: IFFALSE 50412
// btype := b_warehouse ;
50404: LD_ADDR_VAR 0 5
50408: PUSH
50409: LD_INT 1
50411: ST_TO_ADDR
// if btype = b_workshop then
50412: LD_VAR 0 5
50416: PUSH
50417: LD_INT 2
50419: EQUAL
50420: IFFALSE 50430
// btype := b_factory ;
50422: LD_ADDR_VAR 0 5
50426: PUSH
50427: LD_INT 3
50429: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50430: LD_ADDR_VAR 0 4
50434: PUSH
50435: LD_VAR 0 5
50439: PPUSH
50440: LD_VAR 0 1
50444: PPUSH
50445: CALL_OW 248
50449: PPUSH
50450: CALL_OW 450
50454: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50455: LD_ADDR_VAR 0 2
50459: PUSH
50460: LD_VAR 0 3
50464: PPUSH
50465: LD_INT 1
50467: PPUSH
50468: CALL_OW 275
50472: PUSH
50473: LD_VAR 0 4
50477: PUSH
50478: LD_INT 1
50480: ARRAY
50481: GREATEREQUAL
50482: PUSH
50483: LD_VAR 0 3
50487: PPUSH
50488: LD_INT 2
50490: PPUSH
50491: CALL_OW 275
50495: PUSH
50496: LD_VAR 0 4
50500: PUSH
50501: LD_INT 2
50503: ARRAY
50504: GREATEREQUAL
50505: AND
50506: PUSH
50507: LD_VAR 0 3
50511: PPUSH
50512: LD_INT 3
50514: PPUSH
50515: CALL_OW 275
50519: PUSH
50520: LD_VAR 0 4
50524: PUSH
50525: LD_INT 3
50527: ARRAY
50528: GREATEREQUAL
50529: AND
50530: ST_TO_ADDR
// end ;
50531: LD_VAR 0 2
50535: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50536: LD_INT 0
50538: PPUSH
50539: PPUSH
50540: PPUSH
// pom := GetBase ( building ) ;
50541: LD_ADDR_VAR 0 4
50545: PUSH
50546: LD_VAR 0 1
50550: PPUSH
50551: CALL_OW 274
50555: ST_TO_ADDR
// if not pom then
50556: LD_VAR 0 4
50560: NOT
50561: IFFALSE 50565
// exit ;
50563: GO 50666
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50565: LD_ADDR_VAR 0 5
50569: PUSH
50570: LD_VAR 0 2
50574: PPUSH
50575: LD_VAR 0 1
50579: PPUSH
50580: CALL_OW 248
50584: PPUSH
50585: CALL_OW 450
50589: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50590: LD_ADDR_VAR 0 3
50594: PUSH
50595: LD_VAR 0 4
50599: PPUSH
50600: LD_INT 1
50602: PPUSH
50603: CALL_OW 275
50607: PUSH
50608: LD_VAR 0 5
50612: PUSH
50613: LD_INT 1
50615: ARRAY
50616: GREATEREQUAL
50617: PUSH
50618: LD_VAR 0 4
50622: PPUSH
50623: LD_INT 2
50625: PPUSH
50626: CALL_OW 275
50630: PUSH
50631: LD_VAR 0 5
50635: PUSH
50636: LD_INT 2
50638: ARRAY
50639: GREATEREQUAL
50640: AND
50641: PUSH
50642: LD_VAR 0 4
50646: PPUSH
50647: LD_INT 3
50649: PPUSH
50650: CALL_OW 275
50654: PUSH
50655: LD_VAR 0 5
50659: PUSH
50660: LD_INT 3
50662: ARRAY
50663: GREATEREQUAL
50664: AND
50665: ST_TO_ADDR
// end ;
50666: LD_VAR 0 3
50670: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50671: LD_INT 0
50673: PPUSH
50674: PPUSH
50675: PPUSH
50676: PPUSH
50677: PPUSH
50678: PPUSH
50679: PPUSH
50680: PPUSH
50681: PPUSH
50682: PPUSH
50683: PPUSH
// result := false ;
50684: LD_ADDR_VAR 0 8
50688: PUSH
50689: LD_INT 0
50691: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50692: LD_VAR 0 5
50696: NOT
50697: PUSH
50698: LD_VAR 0 1
50702: NOT
50703: OR
50704: PUSH
50705: LD_VAR 0 2
50709: NOT
50710: OR
50711: PUSH
50712: LD_VAR 0 3
50716: NOT
50717: OR
50718: IFFALSE 50722
// exit ;
50720: GO 51536
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50722: LD_ADDR_VAR 0 14
50726: PUSH
50727: LD_VAR 0 1
50731: PPUSH
50732: LD_VAR 0 2
50736: PPUSH
50737: LD_VAR 0 3
50741: PPUSH
50742: LD_VAR 0 4
50746: PPUSH
50747: LD_VAR 0 5
50751: PUSH
50752: LD_INT 1
50754: ARRAY
50755: PPUSH
50756: CALL_OW 248
50760: PPUSH
50761: LD_INT 0
50763: PPUSH
50764: CALL 52769 0 6
50768: ST_TO_ADDR
// if not hexes then
50769: LD_VAR 0 14
50773: NOT
50774: IFFALSE 50778
// exit ;
50776: GO 51536
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50778: LD_ADDR_VAR 0 17
50782: PUSH
50783: LD_VAR 0 5
50787: PPUSH
50788: LD_INT 22
50790: PUSH
50791: LD_VAR 0 13
50795: PPUSH
50796: CALL_OW 255
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: LD_INT 30
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 30
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PPUSH
50837: CALL_OW 72
50841: ST_TO_ADDR
// for i = 1 to hexes do
50842: LD_ADDR_VAR 0 9
50846: PUSH
50847: DOUBLE
50848: LD_INT 1
50850: DEC
50851: ST_TO_ADDR
50852: LD_VAR 0 14
50856: PUSH
50857: FOR_TO
50858: IFFALSE 51534
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50860: LD_ADDR_VAR 0 13
50864: PUSH
50865: LD_VAR 0 14
50869: PUSH
50870: LD_VAR 0 9
50874: ARRAY
50875: PUSH
50876: LD_INT 1
50878: ARRAY
50879: PPUSH
50880: LD_VAR 0 14
50884: PUSH
50885: LD_VAR 0 9
50889: ARRAY
50890: PUSH
50891: LD_INT 2
50893: ARRAY
50894: PPUSH
50895: CALL_OW 428
50899: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50900: LD_VAR 0 14
50904: PUSH
50905: LD_VAR 0 9
50909: ARRAY
50910: PUSH
50911: LD_INT 1
50913: ARRAY
50914: PPUSH
50915: LD_VAR 0 14
50919: PUSH
50920: LD_VAR 0 9
50924: ARRAY
50925: PUSH
50926: LD_INT 2
50928: ARRAY
50929: PPUSH
50930: CALL_OW 351
50934: PUSH
50935: LD_VAR 0 14
50939: PUSH
50940: LD_VAR 0 9
50944: ARRAY
50945: PUSH
50946: LD_INT 1
50948: ARRAY
50949: PPUSH
50950: LD_VAR 0 14
50954: PUSH
50955: LD_VAR 0 9
50959: ARRAY
50960: PUSH
50961: LD_INT 2
50963: ARRAY
50964: PPUSH
50965: CALL_OW 488
50969: NOT
50970: OR
50971: PUSH
50972: LD_VAR 0 13
50976: PPUSH
50977: CALL_OW 247
50981: PUSH
50982: LD_INT 3
50984: EQUAL
50985: OR
50986: IFFALSE 50992
// exit ;
50988: POP
50989: POP
50990: GO 51536
// if not tmp then
50992: LD_VAR 0 13
50996: NOT
50997: IFFALSE 51001
// continue ;
50999: GO 50857
// result := true ;
51001: LD_ADDR_VAR 0 8
51005: PUSH
51006: LD_INT 1
51008: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51009: LD_VAR 0 6
51013: PUSH
51014: LD_VAR 0 13
51018: PPUSH
51019: CALL_OW 247
51023: PUSH
51024: LD_INT 2
51026: EQUAL
51027: AND
51028: PUSH
51029: LD_VAR 0 13
51033: PPUSH
51034: CALL_OW 263
51038: PUSH
51039: LD_INT 1
51041: EQUAL
51042: AND
51043: IFFALSE 51207
// begin if IsDrivenBy ( tmp ) then
51045: LD_VAR 0 13
51049: PPUSH
51050: CALL_OW 311
51054: IFFALSE 51058
// continue ;
51056: GO 50857
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51058: LD_VAR 0 6
51062: PPUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 60
51068: PUSH
51069: EMPTY
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: LD_INT 55
51081: PUSH
51082: EMPTY
51083: LIST
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PPUSH
51093: CALL_OW 72
51097: IFFALSE 51205
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51099: LD_ADDR_VAR 0 18
51103: PUSH
51104: LD_VAR 0 6
51108: PPUSH
51109: LD_INT 3
51111: PUSH
51112: LD_INT 60
51114: PUSH
51115: EMPTY
51116: LIST
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 3
51124: PUSH
51125: LD_INT 55
51127: PUSH
51128: EMPTY
51129: LIST
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PPUSH
51139: CALL_OW 72
51143: PUSH
51144: LD_INT 1
51146: ARRAY
51147: ST_TO_ADDR
// if IsInUnit ( driver ) then
51148: LD_VAR 0 18
51152: PPUSH
51153: CALL_OW 310
51157: IFFALSE 51168
// ComExit ( driver ) ;
51159: LD_VAR 0 18
51163: PPUSH
51164: CALL 76457 0 1
// AddComEnterUnit ( driver , tmp ) ;
51168: LD_VAR 0 18
51172: PPUSH
51173: LD_VAR 0 13
51177: PPUSH
51178: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51182: LD_VAR 0 18
51186: PPUSH
51187: LD_VAR 0 7
51191: PPUSH
51192: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51196: LD_VAR 0 18
51200: PPUSH
51201: CALL_OW 181
// end ; continue ;
51205: GO 50857
// end ; if not cleaners or not tmp in cleaners then
51207: LD_VAR 0 6
51211: NOT
51212: PUSH
51213: LD_VAR 0 13
51217: PUSH
51218: LD_VAR 0 6
51222: IN
51223: NOT
51224: OR
51225: IFFALSE 51532
// begin if dep then
51227: LD_VAR 0 17
51231: IFFALSE 51367
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51233: LD_ADDR_VAR 0 16
51237: PUSH
51238: LD_VAR 0 17
51242: PUSH
51243: LD_INT 1
51245: ARRAY
51246: PPUSH
51247: CALL_OW 250
51251: PPUSH
51252: LD_VAR 0 17
51256: PUSH
51257: LD_INT 1
51259: ARRAY
51260: PPUSH
51261: CALL_OW 254
51265: PPUSH
51266: LD_INT 5
51268: PPUSH
51269: CALL_OW 272
51273: PUSH
51274: LD_VAR 0 17
51278: PUSH
51279: LD_INT 1
51281: ARRAY
51282: PPUSH
51283: CALL_OW 251
51287: PPUSH
51288: LD_VAR 0 17
51292: PUSH
51293: LD_INT 1
51295: ARRAY
51296: PPUSH
51297: CALL_OW 254
51301: PPUSH
51302: LD_INT 5
51304: PPUSH
51305: CALL_OW 273
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51314: LD_VAR 0 16
51318: PUSH
51319: LD_INT 1
51321: ARRAY
51322: PPUSH
51323: LD_VAR 0 16
51327: PUSH
51328: LD_INT 2
51330: ARRAY
51331: PPUSH
51332: CALL_OW 488
51336: IFFALSE 51367
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51338: LD_VAR 0 13
51342: PPUSH
51343: LD_VAR 0 16
51347: PUSH
51348: LD_INT 1
51350: ARRAY
51351: PPUSH
51352: LD_VAR 0 16
51356: PUSH
51357: LD_INT 2
51359: ARRAY
51360: PPUSH
51361: CALL_OW 111
// continue ;
51365: GO 50857
// end ; end ; r := GetDir ( tmp ) ;
51367: LD_ADDR_VAR 0 15
51371: PUSH
51372: LD_VAR 0 13
51376: PPUSH
51377: CALL_OW 254
51381: ST_TO_ADDR
// if r = 5 then
51382: LD_VAR 0 15
51386: PUSH
51387: LD_INT 5
51389: EQUAL
51390: IFFALSE 51400
// r := 0 ;
51392: LD_ADDR_VAR 0 15
51396: PUSH
51397: LD_INT 0
51399: ST_TO_ADDR
// for j = r to 5 do
51400: LD_ADDR_VAR 0 10
51404: PUSH
51405: DOUBLE
51406: LD_VAR 0 15
51410: DEC
51411: ST_TO_ADDR
51412: LD_INT 5
51414: PUSH
51415: FOR_TO
51416: IFFALSE 51530
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51418: LD_ADDR_VAR 0 11
51422: PUSH
51423: LD_VAR 0 13
51427: PPUSH
51428: CALL_OW 250
51432: PPUSH
51433: LD_VAR 0 10
51437: PPUSH
51438: LD_INT 2
51440: PPUSH
51441: CALL_OW 272
51445: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51446: LD_ADDR_VAR 0 12
51450: PUSH
51451: LD_VAR 0 13
51455: PPUSH
51456: CALL_OW 251
51460: PPUSH
51461: LD_VAR 0 10
51465: PPUSH
51466: LD_INT 2
51468: PPUSH
51469: CALL_OW 273
51473: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51474: LD_VAR 0 11
51478: PPUSH
51479: LD_VAR 0 12
51483: PPUSH
51484: CALL_OW 488
51488: PUSH
51489: LD_VAR 0 11
51493: PPUSH
51494: LD_VAR 0 12
51498: PPUSH
51499: CALL_OW 428
51503: NOT
51504: AND
51505: IFFALSE 51528
// begin ComMoveXY ( tmp , _x , _y ) ;
51507: LD_VAR 0 13
51511: PPUSH
51512: LD_VAR 0 11
51516: PPUSH
51517: LD_VAR 0 12
51521: PPUSH
51522: CALL_OW 111
// break ;
51526: GO 51530
// end ; end ;
51528: GO 51415
51530: POP
51531: POP
// end ; end ;
51532: GO 50857
51534: POP
51535: POP
// end ;
51536: LD_VAR 0 8
51540: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51541: LD_INT 0
51543: PPUSH
// result := true ;
51544: LD_ADDR_VAR 0 3
51548: PUSH
51549: LD_INT 1
51551: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51552: LD_VAR 0 2
51556: PUSH
51557: LD_INT 24
51559: DOUBLE
51560: EQUAL
51561: IFTRUE 51571
51563: LD_INT 33
51565: DOUBLE
51566: EQUAL
51567: IFTRUE 51571
51569: GO 51596
51571: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51572: LD_ADDR_VAR 0 3
51576: PUSH
51577: LD_INT 32
51579: PPUSH
51580: LD_VAR 0 1
51584: PPUSH
51585: CALL_OW 321
51589: PUSH
51590: LD_INT 2
51592: EQUAL
51593: ST_TO_ADDR
51594: GO 51912
51596: LD_INT 20
51598: DOUBLE
51599: EQUAL
51600: IFTRUE 51604
51602: GO 51629
51604: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51605: LD_ADDR_VAR 0 3
51609: PUSH
51610: LD_INT 6
51612: PPUSH
51613: LD_VAR 0 1
51617: PPUSH
51618: CALL_OW 321
51622: PUSH
51623: LD_INT 2
51625: EQUAL
51626: ST_TO_ADDR
51627: GO 51912
51629: LD_INT 22
51631: DOUBLE
51632: EQUAL
51633: IFTRUE 51643
51635: LD_INT 36
51637: DOUBLE
51638: EQUAL
51639: IFTRUE 51643
51641: GO 51668
51643: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51644: LD_ADDR_VAR 0 3
51648: PUSH
51649: LD_INT 15
51651: PPUSH
51652: LD_VAR 0 1
51656: PPUSH
51657: CALL_OW 321
51661: PUSH
51662: LD_INT 2
51664: EQUAL
51665: ST_TO_ADDR
51666: GO 51912
51668: LD_INT 30
51670: DOUBLE
51671: EQUAL
51672: IFTRUE 51676
51674: GO 51701
51676: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51677: LD_ADDR_VAR 0 3
51681: PUSH
51682: LD_INT 20
51684: PPUSH
51685: LD_VAR 0 1
51689: PPUSH
51690: CALL_OW 321
51694: PUSH
51695: LD_INT 2
51697: EQUAL
51698: ST_TO_ADDR
51699: GO 51912
51701: LD_INT 28
51703: DOUBLE
51704: EQUAL
51705: IFTRUE 51715
51707: LD_INT 21
51709: DOUBLE
51710: EQUAL
51711: IFTRUE 51715
51713: GO 51740
51715: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51716: LD_ADDR_VAR 0 3
51720: PUSH
51721: LD_INT 21
51723: PPUSH
51724: LD_VAR 0 1
51728: PPUSH
51729: CALL_OW 321
51733: PUSH
51734: LD_INT 2
51736: EQUAL
51737: ST_TO_ADDR
51738: GO 51912
51740: LD_INT 16
51742: DOUBLE
51743: EQUAL
51744: IFTRUE 51748
51746: GO 51773
51748: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51749: LD_ADDR_VAR 0 3
51753: PUSH
51754: LD_INT 84
51756: PPUSH
51757: LD_VAR 0 1
51761: PPUSH
51762: CALL_OW 321
51766: PUSH
51767: LD_INT 2
51769: EQUAL
51770: ST_TO_ADDR
51771: GO 51912
51773: LD_INT 19
51775: DOUBLE
51776: EQUAL
51777: IFTRUE 51787
51779: LD_INT 23
51781: DOUBLE
51782: EQUAL
51783: IFTRUE 51787
51785: GO 51812
51787: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51788: LD_ADDR_VAR 0 3
51792: PUSH
51793: LD_INT 83
51795: PPUSH
51796: LD_VAR 0 1
51800: PPUSH
51801: CALL_OW 321
51805: PUSH
51806: LD_INT 2
51808: EQUAL
51809: ST_TO_ADDR
51810: GO 51912
51812: LD_INT 17
51814: DOUBLE
51815: EQUAL
51816: IFTRUE 51820
51818: GO 51845
51820: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51821: LD_ADDR_VAR 0 3
51825: PUSH
51826: LD_INT 39
51828: PPUSH
51829: LD_VAR 0 1
51833: PPUSH
51834: CALL_OW 321
51838: PUSH
51839: LD_INT 2
51841: EQUAL
51842: ST_TO_ADDR
51843: GO 51912
51845: LD_INT 18
51847: DOUBLE
51848: EQUAL
51849: IFTRUE 51853
51851: GO 51878
51853: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51854: LD_ADDR_VAR 0 3
51858: PUSH
51859: LD_INT 40
51861: PPUSH
51862: LD_VAR 0 1
51866: PPUSH
51867: CALL_OW 321
51871: PUSH
51872: LD_INT 2
51874: EQUAL
51875: ST_TO_ADDR
51876: GO 51912
51878: LD_INT 27
51880: DOUBLE
51881: EQUAL
51882: IFTRUE 51886
51884: GO 51911
51886: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51887: LD_ADDR_VAR 0 3
51891: PUSH
51892: LD_INT 35
51894: PPUSH
51895: LD_VAR 0 1
51899: PPUSH
51900: CALL_OW 321
51904: PUSH
51905: LD_INT 2
51907: EQUAL
51908: ST_TO_ADDR
51909: GO 51912
51911: POP
// end ;
51912: LD_VAR 0 3
51916: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51917: LD_INT 0
51919: PPUSH
51920: PPUSH
51921: PPUSH
51922: PPUSH
51923: PPUSH
51924: PPUSH
51925: PPUSH
51926: PPUSH
51927: PPUSH
51928: PPUSH
51929: PPUSH
// result := false ;
51930: LD_ADDR_VAR 0 6
51934: PUSH
51935: LD_INT 0
51937: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51938: LD_VAR 0 1
51942: NOT
51943: PUSH
51944: LD_VAR 0 1
51948: PPUSH
51949: CALL_OW 266
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: IN
51964: NOT
51965: OR
51966: PUSH
51967: LD_VAR 0 2
51971: NOT
51972: OR
51973: PUSH
51974: LD_VAR 0 5
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: LD_INT 4
51993: PUSH
51994: LD_INT 5
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: IN
52005: NOT
52006: OR
52007: PUSH
52008: LD_VAR 0 3
52012: PPUSH
52013: LD_VAR 0 4
52017: PPUSH
52018: CALL_OW 488
52022: NOT
52023: OR
52024: IFFALSE 52028
// exit ;
52026: GO 52764
// side := GetSide ( depot ) ;
52028: LD_ADDR_VAR 0 9
52032: PUSH
52033: LD_VAR 0 1
52037: PPUSH
52038: CALL_OW 255
52042: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52043: LD_VAR 0 9
52047: PPUSH
52048: LD_VAR 0 2
52052: PPUSH
52053: CALL 51541 0 2
52057: NOT
52058: IFFALSE 52062
// exit ;
52060: GO 52764
// pom := GetBase ( depot ) ;
52062: LD_ADDR_VAR 0 10
52066: PUSH
52067: LD_VAR 0 1
52071: PPUSH
52072: CALL_OW 274
52076: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52077: LD_ADDR_VAR 0 11
52081: PUSH
52082: LD_VAR 0 2
52086: PPUSH
52087: LD_VAR 0 1
52091: PPUSH
52092: CALL_OW 248
52096: PPUSH
52097: CALL_OW 450
52101: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52102: LD_VAR 0 10
52106: PPUSH
52107: LD_INT 1
52109: PPUSH
52110: CALL_OW 275
52114: PUSH
52115: LD_VAR 0 11
52119: PUSH
52120: LD_INT 1
52122: ARRAY
52123: GREATEREQUAL
52124: PUSH
52125: LD_VAR 0 10
52129: PPUSH
52130: LD_INT 2
52132: PPUSH
52133: CALL_OW 275
52137: PUSH
52138: LD_VAR 0 11
52142: PUSH
52143: LD_INT 2
52145: ARRAY
52146: GREATEREQUAL
52147: AND
52148: PUSH
52149: LD_VAR 0 10
52153: PPUSH
52154: LD_INT 3
52156: PPUSH
52157: CALL_OW 275
52161: PUSH
52162: LD_VAR 0 11
52166: PUSH
52167: LD_INT 3
52169: ARRAY
52170: GREATEREQUAL
52171: AND
52172: NOT
52173: IFFALSE 52177
// exit ;
52175: GO 52764
// if GetBType ( depot ) = b_depot then
52177: LD_VAR 0 1
52181: PPUSH
52182: CALL_OW 266
52186: PUSH
52187: LD_INT 0
52189: EQUAL
52190: IFFALSE 52202
// dist := 28 else
52192: LD_ADDR_VAR 0 14
52196: PUSH
52197: LD_INT 28
52199: ST_TO_ADDR
52200: GO 52210
// dist := 36 ;
52202: LD_ADDR_VAR 0 14
52206: PUSH
52207: LD_INT 36
52209: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52210: LD_VAR 0 1
52214: PPUSH
52215: LD_VAR 0 3
52219: PPUSH
52220: LD_VAR 0 4
52224: PPUSH
52225: CALL_OW 297
52229: PUSH
52230: LD_VAR 0 14
52234: GREATER
52235: IFFALSE 52239
// exit ;
52237: GO 52764
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52239: LD_ADDR_VAR 0 12
52243: PUSH
52244: LD_VAR 0 2
52248: PPUSH
52249: LD_VAR 0 3
52253: PPUSH
52254: LD_VAR 0 4
52258: PPUSH
52259: LD_VAR 0 5
52263: PPUSH
52264: LD_VAR 0 1
52268: PPUSH
52269: CALL_OW 248
52273: PPUSH
52274: LD_INT 0
52276: PPUSH
52277: CALL 52769 0 6
52281: ST_TO_ADDR
// if not hexes then
52282: LD_VAR 0 12
52286: NOT
52287: IFFALSE 52291
// exit ;
52289: GO 52764
// hex := GetHexInfo ( x , y ) ;
52291: LD_ADDR_VAR 0 15
52295: PUSH
52296: LD_VAR 0 3
52300: PPUSH
52301: LD_VAR 0 4
52305: PPUSH
52306: CALL_OW 546
52310: ST_TO_ADDR
// if hex [ 1 ] then
52311: LD_VAR 0 15
52315: PUSH
52316: LD_INT 1
52318: ARRAY
52319: IFFALSE 52323
// exit ;
52321: GO 52764
// height := hex [ 2 ] ;
52323: LD_ADDR_VAR 0 13
52327: PUSH
52328: LD_VAR 0 15
52332: PUSH
52333: LD_INT 2
52335: ARRAY
52336: ST_TO_ADDR
// for i = 1 to hexes do
52337: LD_ADDR_VAR 0 7
52341: PUSH
52342: DOUBLE
52343: LD_INT 1
52345: DEC
52346: ST_TO_ADDR
52347: LD_VAR 0 12
52351: PUSH
52352: FOR_TO
52353: IFFALSE 52683
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52355: LD_VAR 0 12
52359: PUSH
52360: LD_VAR 0 7
52364: ARRAY
52365: PUSH
52366: LD_INT 1
52368: ARRAY
52369: PPUSH
52370: LD_VAR 0 12
52374: PUSH
52375: LD_VAR 0 7
52379: ARRAY
52380: PUSH
52381: LD_INT 2
52383: ARRAY
52384: PPUSH
52385: CALL_OW 488
52389: NOT
52390: PUSH
52391: LD_VAR 0 12
52395: PUSH
52396: LD_VAR 0 7
52400: ARRAY
52401: PUSH
52402: LD_INT 1
52404: ARRAY
52405: PPUSH
52406: LD_VAR 0 12
52410: PUSH
52411: LD_VAR 0 7
52415: ARRAY
52416: PUSH
52417: LD_INT 2
52419: ARRAY
52420: PPUSH
52421: CALL_OW 428
52425: PUSH
52426: LD_INT 0
52428: GREATER
52429: OR
52430: PUSH
52431: LD_VAR 0 12
52435: PUSH
52436: LD_VAR 0 7
52440: ARRAY
52441: PUSH
52442: LD_INT 1
52444: ARRAY
52445: PPUSH
52446: LD_VAR 0 12
52450: PUSH
52451: LD_VAR 0 7
52455: ARRAY
52456: PUSH
52457: LD_INT 2
52459: ARRAY
52460: PPUSH
52461: CALL_OW 351
52465: OR
52466: IFFALSE 52472
// exit ;
52468: POP
52469: POP
52470: GO 52764
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52472: LD_ADDR_VAR 0 8
52476: PUSH
52477: LD_VAR 0 12
52481: PUSH
52482: LD_VAR 0 7
52486: ARRAY
52487: PUSH
52488: LD_INT 1
52490: ARRAY
52491: PPUSH
52492: LD_VAR 0 12
52496: PUSH
52497: LD_VAR 0 7
52501: ARRAY
52502: PUSH
52503: LD_INT 2
52505: ARRAY
52506: PPUSH
52507: CALL_OW 546
52511: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52512: LD_VAR 0 8
52516: PUSH
52517: LD_INT 1
52519: ARRAY
52520: PUSH
52521: LD_VAR 0 8
52525: PUSH
52526: LD_INT 2
52528: ARRAY
52529: PUSH
52530: LD_VAR 0 13
52534: PUSH
52535: LD_INT 2
52537: PLUS
52538: GREATER
52539: OR
52540: PUSH
52541: LD_VAR 0 8
52545: PUSH
52546: LD_INT 2
52548: ARRAY
52549: PUSH
52550: LD_VAR 0 13
52554: PUSH
52555: LD_INT 2
52557: MINUS
52558: LESS
52559: OR
52560: PUSH
52561: LD_VAR 0 8
52565: PUSH
52566: LD_INT 3
52568: ARRAY
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 8
52575: PUSH
52576: LD_INT 9
52578: PUSH
52579: LD_INT 10
52581: PUSH
52582: LD_INT 11
52584: PUSH
52585: LD_INT 12
52587: PUSH
52588: LD_INT 13
52590: PUSH
52591: LD_INT 16
52593: PUSH
52594: LD_INT 17
52596: PUSH
52597: LD_INT 18
52599: PUSH
52600: LD_INT 19
52602: PUSH
52603: LD_INT 20
52605: PUSH
52606: LD_INT 21
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: IN
52624: NOT
52625: OR
52626: PUSH
52627: LD_VAR 0 8
52631: PUSH
52632: LD_INT 5
52634: ARRAY
52635: NOT
52636: OR
52637: PUSH
52638: LD_VAR 0 8
52642: PUSH
52643: LD_INT 6
52645: ARRAY
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: LD_INT 7
52655: PUSH
52656: LD_INT 9
52658: PUSH
52659: LD_INT 10
52661: PUSH
52662: LD_INT 11
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: IN
52673: NOT
52674: OR
52675: IFFALSE 52681
// exit ;
52677: POP
52678: POP
52679: GO 52764
// end ;
52681: GO 52352
52683: POP
52684: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52685: LD_VAR 0 9
52689: PPUSH
52690: LD_VAR 0 3
52694: PPUSH
52695: LD_VAR 0 4
52699: PPUSH
52700: LD_INT 20
52702: PPUSH
52703: CALL 44716 0 4
52707: PUSH
52708: LD_INT 4
52710: ARRAY
52711: IFFALSE 52715
// exit ;
52713: GO 52764
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52715: LD_VAR 0 2
52719: PUSH
52720: LD_INT 29
52722: PUSH
52723: LD_INT 30
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: IN
52730: PUSH
52731: LD_VAR 0 3
52735: PPUSH
52736: LD_VAR 0 4
52740: PPUSH
52741: LD_VAR 0 9
52745: PPUSH
52746: CALL_OW 440
52750: NOT
52751: AND
52752: IFFALSE 52756
// exit ;
52754: GO 52764
// result := true ;
52756: LD_ADDR_VAR 0 6
52760: PUSH
52761: LD_INT 1
52763: ST_TO_ADDR
// end ;
52764: LD_VAR 0 6
52768: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52769: LD_INT 0
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
52776: PPUSH
52777: PPUSH
52778: PPUSH
52779: PPUSH
52780: PPUSH
52781: PPUSH
52782: PPUSH
52783: PPUSH
52784: PPUSH
52785: PPUSH
52786: PPUSH
52787: PPUSH
52788: PPUSH
52789: PPUSH
52790: PPUSH
52791: PPUSH
52792: PPUSH
52793: PPUSH
52794: PPUSH
52795: PPUSH
52796: PPUSH
52797: PPUSH
52798: PPUSH
52799: PPUSH
52800: PPUSH
52801: PPUSH
52802: PPUSH
52803: PPUSH
52804: PPUSH
52805: PPUSH
52806: PPUSH
52807: PPUSH
52808: PPUSH
52809: PPUSH
52810: PPUSH
52811: PPUSH
52812: PPUSH
52813: PPUSH
52814: PPUSH
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
52819: PPUSH
52820: PPUSH
52821: PPUSH
52822: PPUSH
52823: PPUSH
52824: PPUSH
52825: PPUSH
52826: PPUSH
52827: PPUSH
52828: PPUSH
// result = [ ] ;
52829: LD_ADDR_VAR 0 7
52833: PUSH
52834: EMPTY
52835: ST_TO_ADDR
// temp_list = [ ] ;
52836: LD_ADDR_VAR 0 9
52840: PUSH
52841: EMPTY
52842: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52843: LD_VAR 0 4
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: LD_INT 3
52859: PUSH
52860: LD_INT 4
52862: PUSH
52863: LD_INT 5
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: IN
52874: NOT
52875: PUSH
52876: LD_VAR 0 1
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: IN
52891: PUSH
52892: LD_VAR 0 5
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: LIST
52910: IN
52911: NOT
52912: AND
52913: OR
52914: IFFALSE 52918
// exit ;
52916: GO 71309
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52918: LD_VAR 0 1
52922: PUSH
52923: LD_INT 6
52925: PUSH
52926: LD_INT 7
52928: PUSH
52929: LD_INT 8
52931: PUSH
52932: LD_INT 13
52934: PUSH
52935: LD_INT 12
52937: PUSH
52938: LD_INT 15
52940: PUSH
52941: LD_INT 11
52943: PUSH
52944: LD_INT 14
52946: PUSH
52947: LD_INT 10
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: IN
52961: IFFALSE 52971
// btype = b_lab ;
52963: LD_ADDR_VAR 0 1
52967: PUSH
52968: LD_INT 6
52970: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52971: LD_VAR 0 6
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: IN
52990: NOT
52991: PUSH
52992: LD_VAR 0 1
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: LD_INT 6
53011: PUSH
53012: LD_INT 36
53014: PUSH
53015: LD_INT 4
53017: PUSH
53018: LD_INT 5
53020: PUSH
53021: LD_INT 31
53023: PUSH
53024: LD_INT 32
53026: PUSH
53027: LD_INT 33
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: IN
53043: NOT
53044: PUSH
53045: LD_VAR 0 6
53049: PUSH
53050: LD_INT 1
53052: EQUAL
53053: AND
53054: OR
53055: PUSH
53056: LD_VAR 0 1
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: LD_INT 3
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: IN
53071: NOT
53072: PUSH
53073: LD_VAR 0 6
53077: PUSH
53078: LD_INT 2
53080: EQUAL
53081: AND
53082: OR
53083: IFFALSE 53093
// mode = 0 ;
53085: LD_ADDR_VAR 0 6
53089: PUSH
53090: LD_INT 0
53092: ST_TO_ADDR
// case mode of 0 :
53093: LD_VAR 0 6
53097: PUSH
53098: LD_INT 0
53100: DOUBLE
53101: EQUAL
53102: IFTRUE 53106
53104: GO 64559
53106: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53107: LD_ADDR_VAR 0 11
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 3
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 3
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53300: LD_ADDR_VAR 0 12
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: NEG
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53496: LD_ADDR_VAR 0 13
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: LD_INT 3
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 3
53655: NEG
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53695: LD_ADDR_VAR 0 14
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53891: LD_ADDR_VAR 0 15
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 3
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54084: LD_ADDR_VAR 0 16
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 2
54219: NEG
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 3
54231: PUSH
54232: LD_INT 2
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 3
54241: PUSH
54242: LD_INT 3
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 3
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54277: LD_ADDR_VAR 0 17
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54507: LD_ADDR_VAR 0 18
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54737: LD_ADDR_VAR 0 19
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54967: LD_ADDR_VAR 0 20
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55197: LD_ADDR_VAR 0 21
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55427: LD_ADDR_VAR 0 22
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55657: LD_ADDR_VAR 0 23
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: LD_INT 3
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55937: LD_ADDR_VAR 0 24
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56213: LD_ADDR_VAR 0 25
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: LD_INT 3
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56487: LD_ADDR_VAR 0 26
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56763: LD_ADDR_VAR 0 27
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 3
57008: NEG
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57043: LD_ADDR_VAR 0 28
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 2
57242: NEG
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: LD_INT 3
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 3
57290: NEG
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57325: LD_ADDR_VAR 0 29
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 2
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 3
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 3
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 3
57569: NEG
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57604: LD_ADDR_VAR 0 30
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 3
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: NEG
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57882: LD_ADDR_VAR 0 31
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 3
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: NEG
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58160: LD_ADDR_VAR 0 32
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: LD_INT 3
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 3
58403: NEG
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58438: LD_ADDR_VAR 0 33
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: NEG
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 2
58604: NEG
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 3
58682: NEG
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58717: LD_ADDR_VAR 0 34
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 2
58896: NEG
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 3
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: LD_INT 3
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 3
58962: NEG
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58997: LD_ADDR_VAR 0 35
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59109: LD_ADDR_VAR 0 36
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59221: LD_ADDR_VAR 0 37
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59333: LD_ADDR_VAR 0 38
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59445: LD_ADDR_VAR 0 39
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59557: LD_ADDR_VAR 0 40
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59669: LD_ADDR_VAR 0 41
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 3
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 3
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 3
59912: PUSH
59913: LD_INT 3
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 2
59922: PUSH
59923: LD_INT 3
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 2
59932: NEG
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 3
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60019: LD_ADDR_VAR 0 42
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: NEG
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: LD_INT 3
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 3
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: LD_INT 3
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60369: LD_ADDR_VAR 0 43
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 3
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 3
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 3
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: LD_INT 3
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 3
60665: NEG
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 3
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60717: LD_ADDR_VAR 0 44
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: LD_INT 3
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: LD_INT 3
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: LD_INT 3
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 3
60991: NEG
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 3
61002: NEG
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 3
61014: NEG
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 3
61026: NEG
61027: PUSH
61028: LD_INT 3
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61067: LD_ADDR_VAR 0 45
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 2
61257: NEG
61258: PUSH
61259: LD_INT 3
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: LD_INT 3
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: LD_INT 3
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 3
61364: NEG
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 3
61376: NEG
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61417: LD_ADDR_VAR 0 46
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: LD_INT 1
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 2
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 2
61583: NEG
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: LD_INT 1
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: LD_INT 3
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: LD_INT 3
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 3
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 3
61713: NEG
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61765: LD_ADDR_VAR 0 47
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61916: LD_ADDR_VAR 0 48
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 2
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62063: LD_ADDR_VAR 0 49
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: LD_INT 1
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62207: LD_ADDR_VAR 0 50
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 2
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62351: LD_ADDR_VAR 0 51
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: LD_INT 0
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 2
62474: NEG
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62498: LD_ADDR_VAR 0 52
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62649: LD_ADDR_VAR 0 53
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 2
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62879: LD_ADDR_VAR 0 54
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: LD_INT 1
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: LD_INT 2
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: LD_INT 2
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 2
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: PUSH
63015: LD_INT 2
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63109: LD_ADDR_VAR 0 55
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: LD_INT 1
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: LD_INT 2
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: LD_INT 2
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 2
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 2
63285: NEG
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 2
63296: NEG
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: LD_INT 2
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63339: LD_ADDR_VAR 0 56
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 2
63515: NEG
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63569: LD_ADDR_VAR 0 57
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 1
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 1
63627: NEG
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 2
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 2
63745: NEG
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63799: LD_ADDR_VAR 0 58
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 2
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 2
63934: PUSH
63935: LD_INT 2
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: NEG
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: LD_INT 2
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64029: LD_ADDR_VAR 0 59
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64117: LD_ADDR_VAR 0 60
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 1
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64205: LD_ADDR_VAR 0 61
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64293: LD_ADDR_VAR 0 62
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 1
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: NEG
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: NEG
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64381: LD_ADDR_VAR 0 63
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64469: LD_ADDR_VAR 0 64
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: LD_INT 1
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: ST_TO_ADDR
// end ; 1 :
64557: GO 70454
64559: LD_INT 1
64561: DOUBLE
64562: EQUAL
64563: IFTRUE 64567
64565: GO 67190
64567: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64568: LD_ADDR_VAR 0 11
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: LD_INT 3
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: LD_INT 3
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: LD_INT 2
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: LIST
64611: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64612: LD_ADDR_VAR 0 12
64616: PUSH
64617: LD_INT 2
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 3
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 3
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: LIST
64652: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64653: LD_ADDR_VAR 0 13
64657: PUSH
64658: LD_INT 3
64660: PUSH
64661: LD_INT 2
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 3
64670: PUSH
64671: LD_INT 3
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 2
64680: PUSH
64681: LD_INT 3
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64693: LD_ADDR_VAR 0 14
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: LD_INT 3
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 3
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: LIST
64733: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64734: LD_ADDR_VAR 0 15
64738: PUSH
64739: LD_INT 2
64741: NEG
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 3
64752: NEG
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 3
64763: NEG
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: LIST
64777: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64778: LD_ADDR_VAR 0 16
64782: PUSH
64783: LD_INT 2
64785: NEG
64786: PUSH
64787: LD_INT 3
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 3
64797: NEG
64798: PUSH
64799: LD_INT 2
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 3
64809: NEG
64810: PUSH
64811: LD_INT 3
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: LIST
64823: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64824: LD_ADDR_VAR 0 17
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: LD_INT 3
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: LD_INT 3
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: LD_INT 2
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64868: LD_ADDR_VAR 0 18
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: LIST
64908: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64909: LD_ADDR_VAR 0 19
64913: PUSH
64914: LD_INT 3
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 3
64926: PUSH
64927: LD_INT 3
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 2
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64949: LD_ADDR_VAR 0 20
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: LD_INT 3
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: LD_INT 3
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: LD_INT 2
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64990: LD_ADDR_VAR 0 21
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 3
65008: NEG
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 3
65019: NEG
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: LIST
65033: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65034: LD_ADDR_VAR 0 22
65038: PUSH
65039: LD_INT 2
65041: NEG
65042: PUSH
65043: LD_INT 3
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 3
65053: NEG
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 3
65065: NEG
65066: PUSH
65067: LD_INT 3
65069: NEG
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65080: LD_ADDR_VAR 0 23
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 3
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: LD_INT 4
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: LD_INT 3
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65124: LD_ADDR_VAR 0 24
65128: PUSH
65129: LD_INT 3
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 3
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 4
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: LIST
65164: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65165: LD_ADDR_VAR 0 25
65169: PUSH
65170: LD_INT 3
65172: PUSH
65173: LD_INT 3
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 4
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 3
65192: PUSH
65193: LD_INT 4
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65205: LD_ADDR_VAR 0 26
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 3
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 1
65222: PUSH
65223: LD_INT 4
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: LD_INT 3
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: LIST
65245: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65246: LD_ADDR_VAR 0 27
65250: PUSH
65251: LD_INT 3
65253: NEG
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 3
65264: NEG
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 4
65275: NEG
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: LIST
65289: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65290: LD_ADDR_VAR 0 28
65294: PUSH
65295: LD_INT 3
65297: NEG
65298: PUSH
65299: LD_INT 3
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 3
65309: NEG
65310: PUSH
65311: LD_INT 4
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 4
65321: NEG
65322: PUSH
65323: LD_INT 3
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: LIST
65335: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65336: LD_ADDR_VAR 0 29
65340: PUSH
65341: LD_INT 1
65343: NEG
65344: PUSH
65345: LD_INT 3
65347: NEG
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: LD_INT 3
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: LD_INT 2
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: LD_INT 4
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 4
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: LD_INT 5
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 5
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: LD_INT 4
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 6
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: LD_INT 6
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 1
65468: PUSH
65469: LD_INT 5
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65491: LD_ADDR_VAR 0 30
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: LD_INT 1
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 3
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 3
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 4
65540: PUSH
65541: LD_INT 0
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 4
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 4
65560: PUSH
65561: LD_INT 1
65563: NEG
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 5
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 5
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 5
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 6
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 6
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65634: LD_ADDR_VAR 0 31
65638: PUSH
65639: LD_INT 3
65641: PUSH
65642: LD_INT 2
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 3
65651: PUSH
65652: LD_INT 3
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 2
65661: PUSH
65662: LD_INT 3
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 4
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 4
65681: PUSH
65682: LD_INT 4
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 3
65691: PUSH
65692: LD_INT 4
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 5
65701: PUSH
65702: LD_INT 4
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 5
65711: PUSH
65712: LD_INT 5
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 4
65721: PUSH
65722: LD_INT 5
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 6
65731: PUSH
65732: LD_INT 5
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 6
65741: PUSH
65742: LD_INT 6
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 5
65751: PUSH
65752: LD_INT 6
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65773: LD_ADDR_VAR 0 32
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: LD_INT 3
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: LD_INT 3
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 2
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: LD_INT 4
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: LD_INT 4
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: LD_INT 5
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: LD_INT 5
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: LD_INT 4
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: PUSH
65874: LD_INT 6
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 6
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: PUSH
65895: LD_INT 5
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65916: LD_ADDR_VAR 0 33
65920: PUSH
65921: LD_INT 2
65923: NEG
65924: PUSH
65925: LD_INT 1
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 3
65934: NEG
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 3
65945: NEG
65946: PUSH
65947: LD_INT 1
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 3
65957: NEG
65958: PUSH
65959: LD_INT 1
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 4
65968: NEG
65969: PUSH
65970: LD_INT 0
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 4
65979: NEG
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 4
65991: NEG
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 5
66002: NEG
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 5
66013: NEG
66014: PUSH
66015: LD_INT 1
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 5
66025: NEG
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 6
66036: NEG
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 6
66047: NEG
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66071: LD_ADDR_VAR 0 34
66075: PUSH
66076: LD_INT 2
66078: NEG
66079: PUSH
66080: LD_INT 3
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 3
66090: NEG
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 3
66102: NEG
66103: PUSH
66104: LD_INT 3
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 3
66114: NEG
66115: PUSH
66116: LD_INT 4
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 4
66126: NEG
66127: PUSH
66128: LD_INT 3
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 4
66138: NEG
66139: PUSH
66140: LD_INT 4
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 4
66150: NEG
66151: PUSH
66152: LD_INT 5
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 5
66162: NEG
66163: PUSH
66164: LD_INT 4
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 5
66174: NEG
66175: PUSH
66176: LD_INT 5
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 5
66186: NEG
66187: PUSH
66188: LD_INT 6
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 6
66198: NEG
66199: PUSH
66200: LD_INT 5
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 6
66210: NEG
66211: PUSH
66212: LD_INT 6
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66234: LD_ADDR_VAR 0 41
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: LD_INT 2
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 1
66252: NEG
66253: PUSH
66254: LD_INT 3
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: LD_INT 2
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: LIST
66277: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66278: LD_ADDR_VAR 0 42
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: LD_INT 0
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: PUSH
66307: LD_INT 1
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: LIST
66318: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66319: LD_ADDR_VAR 0 43
66323: PUSH
66324: LD_INT 2
66326: PUSH
66327: LD_INT 2
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 3
66336: PUSH
66337: LD_INT 2
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: LD_INT 3
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66359: LD_ADDR_VAR 0 44
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 2
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: LD_INT 3
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 1
66386: NEG
66387: PUSH
66388: LD_INT 2
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: LIST
66399: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66400: LD_ADDR_VAR 0 45
66404: PUSH
66405: LD_INT 2
66407: NEG
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 2
66418: NEG
66419: PUSH
66420: LD_INT 1
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 3
66429: NEG
66430: PUSH
66431: LD_INT 1
66433: NEG
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66444: LD_ADDR_VAR 0 46
66448: PUSH
66449: LD_INT 2
66451: NEG
66452: PUSH
66453: LD_INT 2
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: LD_INT 3
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 3
66475: NEG
66476: PUSH
66477: LD_INT 2
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: LIST
66489: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66490: LD_ADDR_VAR 0 47
66494: PUSH
66495: LD_INT 2
66497: NEG
66498: PUSH
66499: LD_INT 3
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 3
66513: NEG
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66523: LD_ADDR_VAR 0 48
66527: PUSH
66528: LD_INT 1
66530: PUSH
66531: LD_INT 2
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 2
66541: PUSH
66542: LD_INT 1
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66554: LD_ADDR_VAR 0 49
66558: PUSH
66559: LD_INT 3
66561: PUSH
66562: LD_INT 1
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66583: LD_ADDR_VAR 0 50
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: LD_INT 3
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: LD_INT 3
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66612: LD_ADDR_VAR 0 51
66616: PUSH
66617: LD_INT 1
66619: NEG
66620: PUSH
66621: LD_INT 2
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 2
66630: NEG
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66643: LD_ADDR_VAR 0 52
66647: PUSH
66648: LD_INT 3
66650: NEG
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 3
66662: NEG
66663: PUSH
66664: LD_INT 2
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66676: LD_ADDR_VAR 0 53
66680: PUSH
66681: LD_INT 1
66683: NEG
66684: PUSH
66685: LD_INT 3
66687: NEG
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: LD_INT 3
66698: NEG
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: LD_INT 2
66709: NEG
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: LIST
66719: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66720: LD_ADDR_VAR 0 54
66724: PUSH
66725: LD_INT 2
66727: PUSH
66728: LD_INT 1
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 3
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: LIST
66760: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66761: LD_ADDR_VAR 0 55
66765: PUSH
66766: LD_INT 3
66768: PUSH
66769: LD_INT 2
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 3
66778: PUSH
66779: LD_INT 3
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 2
66788: PUSH
66789: LD_INT 3
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: LIST
66800: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66801: LD_ADDR_VAR 0 56
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: LD_INT 3
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: LD_INT 3
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: LD_INT 2
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: LIST
66841: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66842: LD_ADDR_VAR 0 57
66846: PUSH
66847: LD_INT 2
66849: NEG
66850: PUSH
66851: LD_INT 1
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 3
66860: NEG
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 3
66871: NEG
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: LIST
66885: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66886: LD_ADDR_VAR 0 58
66890: PUSH
66891: LD_INT 2
66893: NEG
66894: PUSH
66895: LD_INT 3
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 3
66905: NEG
66906: PUSH
66907: LD_INT 2
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 3
66917: NEG
66918: PUSH
66919: LD_INT 3
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: LIST
66931: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66932: LD_ADDR_VAR 0 59
66936: PUSH
66937: LD_INT 1
66939: NEG
66940: PUSH
66941: LD_INT 2
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 0
66951: PUSH
66952: LD_INT 2
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 1
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: LIST
66975: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66976: LD_ADDR_VAR 0 60
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: LD_INT 1
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: LIST
67016: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67017: LD_ADDR_VAR 0 61
67021: PUSH
67022: LD_INT 2
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: LIST
67056: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67057: LD_ADDR_VAR 0 62
67061: PUSH
67062: LD_INT 1
67064: PUSH
67065: LD_INT 2
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: LD_INT 2
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: LD_INT 1
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: LIST
67097: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67098: LD_ADDR_VAR 0 63
67102: PUSH
67103: LD_INT 1
67105: NEG
67106: PUSH
67107: LD_INT 1
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 2
67116: NEG
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 2
67127: NEG
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: LIST
67141: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67142: LD_ADDR_VAR 0 64
67146: PUSH
67147: LD_INT 1
67149: NEG
67150: PUSH
67151: LD_INT 2
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 2
67161: NEG
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 2
67173: NEG
67174: PUSH
67175: LD_INT 2
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: LIST
67187: ST_TO_ADDR
// end ; 2 :
67188: GO 70454
67190: LD_INT 2
67192: DOUBLE
67193: EQUAL
67194: IFTRUE 67198
67196: GO 70453
67198: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67199: LD_ADDR_VAR 0 29
67203: PUSH
67204: LD_INT 4
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 4
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 5
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 5
67237: PUSH
67238: LD_INT 1
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 4
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 3
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 3
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: LD_INT 2
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 5
67289: PUSH
67290: LD_INT 2
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 3
67299: PUSH
67300: LD_INT 3
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 3
67309: PUSH
67310: LD_INT 2
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 4
67319: PUSH
67320: LD_INT 3
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 4
67329: PUSH
67330: LD_INT 4
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 3
67339: PUSH
67340: LD_INT 4
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: LD_INT 3
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 2
67359: PUSH
67360: LD_INT 2
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 4
67369: PUSH
67370: LD_INT 2
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 2
67379: PUSH
67380: LD_INT 4
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 0
67389: PUSH
67390: LD_INT 4
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 0
67399: PUSH
67400: LD_INT 3
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 1
67409: PUSH
67410: LD_INT 4
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 1
67419: PUSH
67420: LD_INT 5
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: LD_INT 5
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: LD_INT 4
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 1
67450: NEG
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 2
67461: PUSH
67462: LD_INT 5
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 2
67471: NEG
67472: PUSH
67473: LD_INT 3
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 3
67482: NEG
67483: PUSH
67484: LD_INT 0
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 3
67493: NEG
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 2
67505: NEG
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 2
67516: NEG
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 3
67527: NEG
67528: PUSH
67529: LD_INT 1
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 4
67538: NEG
67539: PUSH
67540: LD_INT 0
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 4
67549: NEG
67550: PUSH
67551: LD_INT 1
67553: NEG
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 4
67561: NEG
67562: PUSH
67563: LD_INT 2
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 2
67573: NEG
67574: PUSH
67575: LD_INT 2
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 4
67584: NEG
67585: PUSH
67586: LD_INT 4
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 4
67596: NEG
67597: PUSH
67598: LD_INT 5
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 3
67608: NEG
67609: PUSH
67610: LD_INT 4
67612: NEG
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 3
67620: NEG
67621: PUSH
67622: LD_INT 3
67624: NEG
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 4
67632: NEG
67633: PUSH
67634: LD_INT 3
67636: NEG
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 5
67644: NEG
67645: PUSH
67646: LD_INT 4
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 5
67656: NEG
67657: PUSH
67658: LD_INT 5
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 3
67668: NEG
67669: PUSH
67670: LD_INT 5
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 5
67680: NEG
67681: PUSH
67682: LD_INT 3
67684: NEG
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67737: LD_ADDR_VAR 0 30
67741: PUSH
67742: LD_INT 4
67744: PUSH
67745: LD_INT 4
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 4
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 5
67764: PUSH
67765: LD_INT 4
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 5
67774: PUSH
67775: LD_INT 5
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 4
67784: PUSH
67785: LD_INT 5
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: LD_INT 4
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 3
67804: PUSH
67805: LD_INT 3
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 5
67814: PUSH
67815: LD_INT 3
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 3
67824: PUSH
67825: LD_INT 5
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: LD_INT 3
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 0
67844: PUSH
67845: LD_INT 2
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 1
67854: PUSH
67855: LD_INT 3
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: LD_INT 4
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: LD_INT 4
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: LD_INT 3
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: LD_INT 2
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 2
67906: PUSH
67907: LD_INT 4
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 2
67916: NEG
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 4
67927: NEG
67928: PUSH
67929: LD_INT 0
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 4
67938: NEG
67939: PUSH
67940: LD_INT 1
67942: NEG
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 3
67950: NEG
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 3
67961: NEG
67962: PUSH
67963: LD_INT 1
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 4
67972: NEG
67973: PUSH
67974: LD_INT 1
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 5
67983: NEG
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 5
67994: NEG
67995: PUSH
67996: LD_INT 1
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 5
68006: NEG
68007: PUSH
68008: LD_INT 2
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 3
68018: NEG
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 3
68029: NEG
68030: PUSH
68031: LD_INT 3
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 3
68041: NEG
68042: PUSH
68043: LD_INT 4
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 2
68053: NEG
68054: PUSH
68055: LD_INT 3
68057: NEG
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 2
68065: NEG
68066: PUSH
68067: LD_INT 2
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 3
68077: NEG
68078: PUSH
68079: LD_INT 2
68081: NEG
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 4
68089: NEG
68090: PUSH
68091: LD_INT 3
68093: NEG
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 4
68101: NEG
68102: PUSH
68103: LD_INT 4
68105: NEG
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 2
68113: NEG
68114: PUSH
68115: LD_INT 4
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 4
68125: NEG
68126: PUSH
68127: LD_INT 2
68129: NEG
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: LD_INT 4
68140: NEG
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 0
68148: PUSH
68149: LD_INT 5
68151: NEG
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 1
68159: PUSH
68160: LD_INT 4
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: LD_INT 3
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: LD_INT 3
68184: NEG
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 1
68192: NEG
68193: PUSH
68194: LD_INT 4
68196: NEG
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 1
68204: NEG
68205: PUSH
68206: LD_INT 5
68208: NEG
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 2
68216: PUSH
68217: LD_INT 3
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 2
68227: NEG
68228: PUSH
68229: LD_INT 5
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68284: LD_ADDR_VAR 0 31
68288: PUSH
68289: LD_INT 0
68291: PUSH
68292: LD_INT 4
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: LD_INT 3
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: LD_INT 4
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: LD_INT 5
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: LD_INT 5
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 1
68341: NEG
68342: PUSH
68343: LD_INT 4
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 1
68352: NEG
68353: PUSH
68354: LD_INT 3
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 2
68363: PUSH
68364: LD_INT 5
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 2
68373: NEG
68374: PUSH
68375: LD_INT 3
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 3
68384: NEG
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: NEG
68396: PUSH
68397: LD_INT 1
68399: NEG
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 2
68407: NEG
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 2
68418: NEG
68419: PUSH
68420: LD_INT 1
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 3
68429: NEG
68430: PUSH
68431: LD_INT 1
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 4
68440: NEG
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 4
68451: NEG
68452: PUSH
68453: LD_INT 1
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 4
68463: NEG
68464: PUSH
68465: LD_INT 2
68467: NEG
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 2
68475: NEG
68476: PUSH
68477: LD_INT 2
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 4
68486: NEG
68487: PUSH
68488: LD_INT 4
68490: NEG
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 4
68498: NEG
68499: PUSH
68500: LD_INT 5
68502: NEG
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 3
68510: NEG
68511: PUSH
68512: LD_INT 4
68514: NEG
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 3
68522: NEG
68523: PUSH
68524: LD_INT 3
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 4
68534: NEG
68535: PUSH
68536: LD_INT 3
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 5
68546: NEG
68547: PUSH
68548: LD_INT 4
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 5
68558: NEG
68559: PUSH
68560: LD_INT 5
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 3
68570: NEG
68571: PUSH
68572: LD_INT 5
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 5
68582: NEG
68583: PUSH
68584: LD_INT 3
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 0
68594: PUSH
68595: LD_INT 3
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: LD_INT 4
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: LD_INT 3
68619: NEG
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 1
68627: PUSH
68628: LD_INT 2
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 0
68638: PUSH
68639: LD_INT 2
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 1
68649: NEG
68650: PUSH
68651: LD_INT 3
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 1
68661: NEG
68662: PUSH
68663: LD_INT 4
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 2
68673: PUSH
68674: LD_INT 2
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 2
68684: NEG
68685: PUSH
68686: LD_INT 4
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 4
68696: PUSH
68697: LD_INT 0
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 4
68706: PUSH
68707: LD_INT 1
68709: NEG
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 5
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 5
68727: PUSH
68728: LD_INT 1
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 4
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 3
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 3
68768: PUSH
68769: LD_INT 2
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 5
68779: PUSH
68780: LD_INT 2
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68834: LD_ADDR_VAR 0 32
68838: PUSH
68839: LD_INT 4
68841: NEG
68842: PUSH
68843: LD_INT 0
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 4
68852: NEG
68853: PUSH
68854: LD_INT 1
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 3
68864: NEG
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 3
68875: NEG
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 4
68886: NEG
68887: PUSH
68888: LD_INT 1
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 5
68897: NEG
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 5
68908: NEG
68909: PUSH
68910: LD_INT 1
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 5
68920: NEG
68921: PUSH
68922: LD_INT 2
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 3
68932: NEG
68933: PUSH
68934: LD_INT 2
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 3
68943: NEG
68944: PUSH
68945: LD_INT 3
68947: NEG
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 3
68955: NEG
68956: PUSH
68957: LD_INT 4
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 2
68967: NEG
68968: PUSH
68969: LD_INT 3
68971: NEG
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 2
68979: NEG
68980: PUSH
68981: LD_INT 2
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 3
68991: NEG
68992: PUSH
68993: LD_INT 2
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 4
69003: NEG
69004: PUSH
69005: LD_INT 3
69007: NEG
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 4
69015: NEG
69016: PUSH
69017: LD_INT 4
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 2
69027: NEG
69028: PUSH
69029: LD_INT 4
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 4
69039: NEG
69040: PUSH
69041: LD_INT 2
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 0
69051: PUSH
69052: LD_INT 4
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: LD_INT 5
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: PUSH
69074: LD_INT 4
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 1
69084: PUSH
69085: LD_INT 3
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 0
69095: PUSH
69096: LD_INT 3
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 1
69106: NEG
69107: PUSH
69108: LD_INT 4
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 1
69118: NEG
69119: PUSH
69120: LD_INT 5
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: LD_INT 3
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 2
69141: NEG
69142: PUSH
69143: LD_INT 5
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 3
69153: PUSH
69154: LD_INT 0
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 3
69163: PUSH
69164: LD_INT 1
69166: NEG
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 4
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 4
69184: PUSH
69185: LD_INT 1
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 3
69194: PUSH
69195: LD_INT 1
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 2
69204: PUSH
69205: LD_INT 0
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 2
69214: PUSH
69215: LD_INT 1
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 2
69225: PUSH
69226: LD_INT 2
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 4
69236: PUSH
69237: LD_INT 2
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 4
69246: PUSH
69247: LD_INT 4
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 4
69256: PUSH
69257: LD_INT 3
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 5
69266: PUSH
69267: LD_INT 4
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 5
69276: PUSH
69277: LD_INT 5
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 4
69286: PUSH
69287: LD_INT 5
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 3
69296: PUSH
69297: LD_INT 4
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 3
69306: PUSH
69307: LD_INT 3
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 5
69316: PUSH
69317: LD_INT 3
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 3
69326: PUSH
69327: LD_INT 5
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69381: LD_ADDR_VAR 0 33
69385: PUSH
69386: LD_INT 4
69388: NEG
69389: PUSH
69390: LD_INT 4
69392: NEG
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 4
69400: NEG
69401: PUSH
69402: LD_INT 5
69404: NEG
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 3
69412: NEG
69413: PUSH
69414: LD_INT 4
69416: NEG
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 3
69424: NEG
69425: PUSH
69426: LD_INT 3
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 4
69436: NEG
69437: PUSH
69438: LD_INT 3
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 5
69448: NEG
69449: PUSH
69450: LD_INT 4
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 5
69460: NEG
69461: PUSH
69462: LD_INT 5
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 3
69472: NEG
69473: PUSH
69474: LD_INT 5
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 5
69484: NEG
69485: PUSH
69486: LD_INT 3
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: LD_INT 3
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: LD_INT 4
69510: NEG
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 1
69518: PUSH
69519: LD_INT 3
69521: NEG
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 1
69529: PUSH
69530: LD_INT 2
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: LD_INT 2
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 1
69551: NEG
69552: PUSH
69553: LD_INT 3
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 1
69563: NEG
69564: PUSH
69565: LD_INT 4
69567: NEG
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 2
69575: PUSH
69576: LD_INT 2
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 2
69586: NEG
69587: PUSH
69588: LD_INT 4
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 4
69598: PUSH
69599: LD_INT 0
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 4
69608: PUSH
69609: LD_INT 1
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 5
69619: PUSH
69620: LD_INT 0
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 5
69629: PUSH
69630: LD_INT 1
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 4
69639: PUSH
69640: LD_INT 1
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 3
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 3
69659: PUSH
69660: LD_INT 1
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 3
69670: PUSH
69671: LD_INT 2
69673: NEG
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 5
69681: PUSH
69682: LD_INT 2
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 3
69691: PUSH
69692: LD_INT 3
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 3
69701: PUSH
69702: LD_INT 2
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 4
69711: PUSH
69712: LD_INT 3
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 4
69721: PUSH
69722: LD_INT 4
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 3
69731: PUSH
69732: LD_INT 4
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 2
69741: PUSH
69742: LD_INT 3
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 2
69751: PUSH
69752: LD_INT 2
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 4
69761: PUSH
69762: LD_INT 2
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 2
69771: PUSH
69772: LD_INT 4
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 0
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 0
69791: PUSH
69792: LD_INT 3
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 1
69801: PUSH
69802: LD_INT 4
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 1
69811: PUSH
69812: LD_INT 5
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: LD_INT 5
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 1
69831: NEG
69832: PUSH
69833: LD_INT 4
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 1
69842: NEG
69843: PUSH
69844: LD_INT 3
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 2
69853: PUSH
69854: LD_INT 5
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 2
69863: NEG
69864: PUSH
69865: LD_INT 3
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69919: LD_ADDR_VAR 0 34
69923: PUSH
69924: LD_INT 0
69926: PUSH
69927: LD_INT 4
69929: NEG
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 0
69937: PUSH
69938: LD_INT 5
69940: NEG
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 1
69948: PUSH
69949: LD_INT 4
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 1
69959: PUSH
69960: LD_INT 3
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: LD_INT 3
69973: NEG
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 1
69981: NEG
69982: PUSH
69983: LD_INT 4
69985: NEG
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 1
69993: NEG
69994: PUSH
69995: LD_INT 5
69997: NEG
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 2
70005: PUSH
70006: LD_INT 3
70008: NEG
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 2
70016: NEG
70017: PUSH
70018: LD_INT 5
70020: NEG
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 3
70028: PUSH
70029: LD_INT 0
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 3
70038: PUSH
70039: LD_INT 1
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 4
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 4
70059: PUSH
70060: LD_INT 1
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 3
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 2
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 2
70089: PUSH
70090: LD_INT 1
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 2
70100: PUSH
70101: LD_INT 2
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 4
70111: PUSH
70112: LD_INT 2
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 4
70121: PUSH
70122: LD_INT 4
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 4
70131: PUSH
70132: LD_INT 3
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 5
70141: PUSH
70142: LD_INT 4
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 5
70151: PUSH
70152: LD_INT 5
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 4
70161: PUSH
70162: LD_INT 5
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 3
70171: PUSH
70172: LD_INT 4
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 3
70181: PUSH
70182: LD_INT 3
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 5
70191: PUSH
70192: LD_INT 3
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 3
70201: PUSH
70202: LD_INT 5
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 0
70211: PUSH
70212: LD_INT 3
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 0
70221: PUSH
70222: LD_INT 2
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 1
70231: PUSH
70232: LD_INT 3
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 1
70241: PUSH
70242: LD_INT 4
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: LD_INT 4
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 1
70261: NEG
70262: PUSH
70263: LD_INT 3
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 1
70272: NEG
70273: PUSH
70274: LD_INT 2
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: LD_INT 4
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 2
70293: NEG
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 4
70304: NEG
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 4
70315: NEG
70316: PUSH
70317: LD_INT 1
70319: NEG
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 3
70327: NEG
70328: PUSH
70329: LD_INT 0
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 3
70338: NEG
70339: PUSH
70340: LD_INT 1
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 4
70349: NEG
70350: PUSH
70351: LD_INT 1
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 5
70360: NEG
70361: PUSH
70362: LD_INT 0
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 5
70371: NEG
70372: PUSH
70373: LD_INT 1
70375: NEG
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 5
70383: NEG
70384: PUSH
70385: LD_INT 2
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 3
70395: NEG
70396: PUSH
70397: LD_INT 2
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: ST_TO_ADDR
// end ; end ;
70451: GO 70454
70453: POP
// case btype of b_depot , b_warehouse :
70454: LD_VAR 0 1
70458: PUSH
70459: LD_INT 0
70461: DOUBLE
70462: EQUAL
70463: IFTRUE 70473
70465: LD_INT 1
70467: DOUBLE
70468: EQUAL
70469: IFTRUE 70473
70471: GO 70674
70473: POP
// case nation of nation_american :
70474: LD_VAR 0 5
70478: PUSH
70479: LD_INT 1
70481: DOUBLE
70482: EQUAL
70483: IFTRUE 70487
70485: GO 70543
70487: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70488: LD_ADDR_VAR 0 9
70492: PUSH
70493: LD_VAR 0 11
70497: PUSH
70498: LD_VAR 0 12
70502: PUSH
70503: LD_VAR 0 13
70507: PUSH
70508: LD_VAR 0 14
70512: PUSH
70513: LD_VAR 0 15
70517: PUSH
70518: LD_VAR 0 16
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: PUSH
70531: LD_VAR 0 4
70535: PUSH
70536: LD_INT 1
70538: PLUS
70539: ARRAY
70540: ST_TO_ADDR
70541: GO 70672
70543: LD_INT 2
70545: DOUBLE
70546: EQUAL
70547: IFTRUE 70551
70549: GO 70607
70551: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70552: LD_ADDR_VAR 0 9
70556: PUSH
70557: LD_VAR 0 17
70561: PUSH
70562: LD_VAR 0 18
70566: PUSH
70567: LD_VAR 0 19
70571: PUSH
70572: LD_VAR 0 20
70576: PUSH
70577: LD_VAR 0 21
70581: PUSH
70582: LD_VAR 0 22
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: PUSH
70595: LD_VAR 0 4
70599: PUSH
70600: LD_INT 1
70602: PLUS
70603: ARRAY
70604: ST_TO_ADDR
70605: GO 70672
70607: LD_INT 3
70609: DOUBLE
70610: EQUAL
70611: IFTRUE 70615
70613: GO 70671
70615: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70616: LD_ADDR_VAR 0 9
70620: PUSH
70621: LD_VAR 0 23
70625: PUSH
70626: LD_VAR 0 24
70630: PUSH
70631: LD_VAR 0 25
70635: PUSH
70636: LD_VAR 0 26
70640: PUSH
70641: LD_VAR 0 27
70645: PUSH
70646: LD_VAR 0 28
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: PUSH
70659: LD_VAR 0 4
70663: PUSH
70664: LD_INT 1
70666: PLUS
70667: ARRAY
70668: ST_TO_ADDR
70669: GO 70672
70671: POP
70672: GO 71227
70674: LD_INT 2
70676: DOUBLE
70677: EQUAL
70678: IFTRUE 70688
70680: LD_INT 3
70682: DOUBLE
70683: EQUAL
70684: IFTRUE 70688
70686: GO 70744
70688: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70689: LD_ADDR_VAR 0 9
70693: PUSH
70694: LD_VAR 0 29
70698: PUSH
70699: LD_VAR 0 30
70703: PUSH
70704: LD_VAR 0 31
70708: PUSH
70709: LD_VAR 0 32
70713: PUSH
70714: LD_VAR 0 33
70718: PUSH
70719: LD_VAR 0 34
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: PUSH
70732: LD_VAR 0 4
70736: PUSH
70737: LD_INT 1
70739: PLUS
70740: ARRAY
70741: ST_TO_ADDR
70742: GO 71227
70744: LD_INT 16
70746: DOUBLE
70747: EQUAL
70748: IFTRUE 70806
70750: LD_INT 17
70752: DOUBLE
70753: EQUAL
70754: IFTRUE 70806
70756: LD_INT 18
70758: DOUBLE
70759: EQUAL
70760: IFTRUE 70806
70762: LD_INT 19
70764: DOUBLE
70765: EQUAL
70766: IFTRUE 70806
70768: LD_INT 22
70770: DOUBLE
70771: EQUAL
70772: IFTRUE 70806
70774: LD_INT 20
70776: DOUBLE
70777: EQUAL
70778: IFTRUE 70806
70780: LD_INT 21
70782: DOUBLE
70783: EQUAL
70784: IFTRUE 70806
70786: LD_INT 23
70788: DOUBLE
70789: EQUAL
70790: IFTRUE 70806
70792: LD_INT 24
70794: DOUBLE
70795: EQUAL
70796: IFTRUE 70806
70798: LD_INT 25
70800: DOUBLE
70801: EQUAL
70802: IFTRUE 70806
70804: GO 70862
70806: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70807: LD_ADDR_VAR 0 9
70811: PUSH
70812: LD_VAR 0 35
70816: PUSH
70817: LD_VAR 0 36
70821: PUSH
70822: LD_VAR 0 37
70826: PUSH
70827: LD_VAR 0 38
70831: PUSH
70832: LD_VAR 0 39
70836: PUSH
70837: LD_VAR 0 40
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: PUSH
70850: LD_VAR 0 4
70854: PUSH
70855: LD_INT 1
70857: PLUS
70858: ARRAY
70859: ST_TO_ADDR
70860: GO 71227
70862: LD_INT 6
70864: DOUBLE
70865: EQUAL
70866: IFTRUE 70918
70868: LD_INT 7
70870: DOUBLE
70871: EQUAL
70872: IFTRUE 70918
70874: LD_INT 8
70876: DOUBLE
70877: EQUAL
70878: IFTRUE 70918
70880: LD_INT 13
70882: DOUBLE
70883: EQUAL
70884: IFTRUE 70918
70886: LD_INT 12
70888: DOUBLE
70889: EQUAL
70890: IFTRUE 70918
70892: LD_INT 15
70894: DOUBLE
70895: EQUAL
70896: IFTRUE 70918
70898: LD_INT 11
70900: DOUBLE
70901: EQUAL
70902: IFTRUE 70918
70904: LD_INT 14
70906: DOUBLE
70907: EQUAL
70908: IFTRUE 70918
70910: LD_INT 10
70912: DOUBLE
70913: EQUAL
70914: IFTRUE 70918
70916: GO 70974
70918: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70919: LD_ADDR_VAR 0 9
70923: PUSH
70924: LD_VAR 0 41
70928: PUSH
70929: LD_VAR 0 42
70933: PUSH
70934: LD_VAR 0 43
70938: PUSH
70939: LD_VAR 0 44
70943: PUSH
70944: LD_VAR 0 45
70948: PUSH
70949: LD_VAR 0 46
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: PUSH
70962: LD_VAR 0 4
70966: PUSH
70967: LD_INT 1
70969: PLUS
70970: ARRAY
70971: ST_TO_ADDR
70972: GO 71227
70974: LD_INT 36
70976: DOUBLE
70977: EQUAL
70978: IFTRUE 70982
70980: GO 71038
70982: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70983: LD_ADDR_VAR 0 9
70987: PUSH
70988: LD_VAR 0 47
70992: PUSH
70993: LD_VAR 0 48
70997: PUSH
70998: LD_VAR 0 49
71002: PUSH
71003: LD_VAR 0 50
71007: PUSH
71008: LD_VAR 0 51
71012: PUSH
71013: LD_VAR 0 52
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: PUSH
71026: LD_VAR 0 4
71030: PUSH
71031: LD_INT 1
71033: PLUS
71034: ARRAY
71035: ST_TO_ADDR
71036: GO 71227
71038: LD_INT 4
71040: DOUBLE
71041: EQUAL
71042: IFTRUE 71064
71044: LD_INT 5
71046: DOUBLE
71047: EQUAL
71048: IFTRUE 71064
71050: LD_INT 34
71052: DOUBLE
71053: EQUAL
71054: IFTRUE 71064
71056: LD_INT 37
71058: DOUBLE
71059: EQUAL
71060: IFTRUE 71064
71062: GO 71120
71064: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71065: LD_ADDR_VAR 0 9
71069: PUSH
71070: LD_VAR 0 53
71074: PUSH
71075: LD_VAR 0 54
71079: PUSH
71080: LD_VAR 0 55
71084: PUSH
71085: LD_VAR 0 56
71089: PUSH
71090: LD_VAR 0 57
71094: PUSH
71095: LD_VAR 0 58
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: PUSH
71108: LD_VAR 0 4
71112: PUSH
71113: LD_INT 1
71115: PLUS
71116: ARRAY
71117: ST_TO_ADDR
71118: GO 71227
71120: LD_INT 31
71122: DOUBLE
71123: EQUAL
71124: IFTRUE 71170
71126: LD_INT 32
71128: DOUBLE
71129: EQUAL
71130: IFTRUE 71170
71132: LD_INT 33
71134: DOUBLE
71135: EQUAL
71136: IFTRUE 71170
71138: LD_INT 27
71140: DOUBLE
71141: EQUAL
71142: IFTRUE 71170
71144: LD_INT 26
71146: DOUBLE
71147: EQUAL
71148: IFTRUE 71170
71150: LD_INT 28
71152: DOUBLE
71153: EQUAL
71154: IFTRUE 71170
71156: LD_INT 29
71158: DOUBLE
71159: EQUAL
71160: IFTRUE 71170
71162: LD_INT 30
71164: DOUBLE
71165: EQUAL
71166: IFTRUE 71170
71168: GO 71226
71170: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71171: LD_ADDR_VAR 0 9
71175: PUSH
71176: LD_VAR 0 59
71180: PUSH
71181: LD_VAR 0 60
71185: PUSH
71186: LD_VAR 0 61
71190: PUSH
71191: LD_VAR 0 62
71195: PUSH
71196: LD_VAR 0 63
71200: PUSH
71201: LD_VAR 0 64
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: PUSH
71214: LD_VAR 0 4
71218: PUSH
71219: LD_INT 1
71221: PLUS
71222: ARRAY
71223: ST_TO_ADDR
71224: GO 71227
71226: POP
// temp_list2 = [ ] ;
71227: LD_ADDR_VAR 0 10
71231: PUSH
71232: EMPTY
71233: ST_TO_ADDR
// for i in temp_list do
71234: LD_ADDR_VAR 0 8
71238: PUSH
71239: LD_VAR 0 9
71243: PUSH
71244: FOR_IN
71245: IFFALSE 71297
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71247: LD_ADDR_VAR 0 10
71251: PUSH
71252: LD_VAR 0 10
71256: PUSH
71257: LD_VAR 0 8
71261: PUSH
71262: LD_INT 1
71264: ARRAY
71265: PUSH
71266: LD_VAR 0 2
71270: PLUS
71271: PUSH
71272: LD_VAR 0 8
71276: PUSH
71277: LD_INT 2
71279: ARRAY
71280: PUSH
71281: LD_VAR 0 3
71285: PLUS
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: EMPTY
71292: LIST
71293: ADD
71294: ST_TO_ADDR
71295: GO 71244
71297: POP
71298: POP
// result = temp_list2 ;
71299: LD_ADDR_VAR 0 7
71303: PUSH
71304: LD_VAR 0 10
71308: ST_TO_ADDR
// end ;
71309: LD_VAR 0 7
71313: RET
// export function EnemyInRange ( unit , dist ) ; begin
71314: LD_INT 0
71316: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71317: LD_ADDR_VAR 0 3
71321: PUSH
71322: LD_VAR 0 1
71326: PPUSH
71327: CALL_OW 255
71331: PPUSH
71332: LD_VAR 0 1
71336: PPUSH
71337: CALL_OW 250
71341: PPUSH
71342: LD_VAR 0 1
71346: PPUSH
71347: CALL_OW 251
71351: PPUSH
71352: LD_VAR 0 2
71356: PPUSH
71357: CALL 44716 0 4
71361: PUSH
71362: LD_INT 4
71364: ARRAY
71365: ST_TO_ADDR
// end ;
71366: LD_VAR 0 3
71370: RET
// export function PlayerSeeMe ( unit ) ; begin
71371: LD_INT 0
71373: PPUSH
// result := See ( your_side , unit ) ;
71374: LD_ADDR_VAR 0 2
71378: PUSH
71379: LD_OWVAR 2
71383: PPUSH
71384: LD_VAR 0 1
71388: PPUSH
71389: CALL_OW 292
71393: ST_TO_ADDR
// end ;
71394: LD_VAR 0 2
71398: RET
// export function ReverseDir ( unit ) ; begin
71399: LD_INT 0
71401: PPUSH
// if not unit then
71402: LD_VAR 0 1
71406: NOT
71407: IFFALSE 71411
// exit ;
71409: GO 71434
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71411: LD_ADDR_VAR 0 2
71415: PUSH
71416: LD_VAR 0 1
71420: PPUSH
71421: CALL_OW 254
71425: PUSH
71426: LD_INT 3
71428: PLUS
71429: PUSH
71430: LD_INT 6
71432: MOD
71433: ST_TO_ADDR
// end ;
71434: LD_VAR 0 2
71438: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71439: LD_INT 0
71441: PPUSH
71442: PPUSH
71443: PPUSH
71444: PPUSH
71445: PPUSH
71446: PPUSH
// if not unit or not hexes then
71447: LD_VAR 0 1
71451: NOT
71452: PUSH
71453: LD_VAR 0 2
71457: NOT
71458: OR
71459: IFFALSE 71463
// exit ;
71461: GO 71586
// dist := 9999 ;
71463: LD_ADDR_VAR 0 5
71467: PUSH
71468: LD_INT 9999
71470: ST_TO_ADDR
// for i = 1 to hexes do
71471: LD_ADDR_VAR 0 4
71475: PUSH
71476: DOUBLE
71477: LD_INT 1
71479: DEC
71480: ST_TO_ADDR
71481: LD_VAR 0 2
71485: PUSH
71486: FOR_TO
71487: IFFALSE 71574
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71489: LD_ADDR_VAR 0 6
71493: PUSH
71494: LD_VAR 0 1
71498: PPUSH
71499: LD_VAR 0 2
71503: PUSH
71504: LD_VAR 0 4
71508: ARRAY
71509: PUSH
71510: LD_INT 1
71512: ARRAY
71513: PPUSH
71514: LD_VAR 0 2
71518: PUSH
71519: LD_VAR 0 4
71523: ARRAY
71524: PUSH
71525: LD_INT 2
71527: ARRAY
71528: PPUSH
71529: CALL_OW 297
71533: ST_TO_ADDR
// if tdist < dist then
71534: LD_VAR 0 6
71538: PUSH
71539: LD_VAR 0 5
71543: LESS
71544: IFFALSE 71572
// begin hex := hexes [ i ] ;
71546: LD_ADDR_VAR 0 8
71550: PUSH
71551: LD_VAR 0 2
71555: PUSH
71556: LD_VAR 0 4
71560: ARRAY
71561: ST_TO_ADDR
// dist := tdist ;
71562: LD_ADDR_VAR 0 5
71566: PUSH
71567: LD_VAR 0 6
71571: ST_TO_ADDR
// end ; end ;
71572: GO 71486
71574: POP
71575: POP
// result := hex ;
71576: LD_ADDR_VAR 0 3
71580: PUSH
71581: LD_VAR 0 8
71585: ST_TO_ADDR
// end ;
71586: LD_VAR 0 3
71590: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71591: LD_INT 0
71593: PPUSH
71594: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71595: LD_VAR 0 1
71599: NOT
71600: PUSH
71601: LD_VAR 0 1
71605: PUSH
71606: LD_INT 21
71608: PUSH
71609: LD_INT 2
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 23
71618: PUSH
71619: LD_INT 2
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PPUSH
71630: CALL_OW 69
71634: IN
71635: NOT
71636: OR
71637: IFFALSE 71641
// exit ;
71639: GO 71688
// for i = 1 to 3 do
71641: LD_ADDR_VAR 0 3
71645: PUSH
71646: DOUBLE
71647: LD_INT 1
71649: DEC
71650: ST_TO_ADDR
71651: LD_INT 3
71653: PUSH
71654: FOR_TO
71655: IFFALSE 71686
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71657: LD_VAR 0 1
71661: PPUSH
71662: CALL_OW 250
71666: PPUSH
71667: LD_VAR 0 1
71671: PPUSH
71672: CALL_OW 251
71676: PPUSH
71677: LD_INT 1
71679: PPUSH
71680: CALL_OW 453
71684: GO 71654
71686: POP
71687: POP
// end ;
71688: LD_VAR 0 2
71692: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71693: LD_INT 0
71695: PPUSH
71696: PPUSH
71697: PPUSH
71698: PPUSH
71699: PPUSH
71700: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71701: LD_VAR 0 1
71705: NOT
71706: PUSH
71707: LD_VAR 0 2
71711: NOT
71712: OR
71713: PUSH
71714: LD_VAR 0 1
71718: PPUSH
71719: CALL_OW 314
71723: OR
71724: IFFALSE 71728
// exit ;
71726: GO 72169
// x := GetX ( enemy_unit ) ;
71728: LD_ADDR_VAR 0 7
71732: PUSH
71733: LD_VAR 0 2
71737: PPUSH
71738: CALL_OW 250
71742: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71743: LD_ADDR_VAR 0 8
71747: PUSH
71748: LD_VAR 0 2
71752: PPUSH
71753: CALL_OW 251
71757: ST_TO_ADDR
// if not x or not y then
71758: LD_VAR 0 7
71762: NOT
71763: PUSH
71764: LD_VAR 0 8
71768: NOT
71769: OR
71770: IFFALSE 71774
// exit ;
71772: GO 72169
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71774: LD_ADDR_VAR 0 6
71778: PUSH
71779: LD_VAR 0 7
71783: PPUSH
71784: LD_INT 0
71786: PPUSH
71787: LD_INT 4
71789: PPUSH
71790: CALL_OW 272
71794: PUSH
71795: LD_VAR 0 8
71799: PPUSH
71800: LD_INT 0
71802: PPUSH
71803: LD_INT 4
71805: PPUSH
71806: CALL_OW 273
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_VAR 0 7
71819: PPUSH
71820: LD_INT 1
71822: PPUSH
71823: LD_INT 4
71825: PPUSH
71826: CALL_OW 272
71830: PUSH
71831: LD_VAR 0 8
71835: PPUSH
71836: LD_INT 1
71838: PPUSH
71839: LD_INT 4
71841: PPUSH
71842: CALL_OW 273
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_VAR 0 7
71855: PPUSH
71856: LD_INT 2
71858: PPUSH
71859: LD_INT 4
71861: PPUSH
71862: CALL_OW 272
71866: PUSH
71867: LD_VAR 0 8
71871: PPUSH
71872: LD_INT 2
71874: PPUSH
71875: LD_INT 4
71877: PPUSH
71878: CALL_OW 273
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_VAR 0 7
71891: PPUSH
71892: LD_INT 3
71894: PPUSH
71895: LD_INT 4
71897: PPUSH
71898: CALL_OW 272
71902: PUSH
71903: LD_VAR 0 8
71907: PPUSH
71908: LD_INT 3
71910: PPUSH
71911: LD_INT 4
71913: PPUSH
71914: CALL_OW 273
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_VAR 0 7
71927: PPUSH
71928: LD_INT 4
71930: PPUSH
71931: LD_INT 4
71933: PPUSH
71934: CALL_OW 272
71938: PUSH
71939: LD_VAR 0 8
71943: PPUSH
71944: LD_INT 4
71946: PPUSH
71947: LD_INT 4
71949: PPUSH
71950: CALL_OW 273
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_VAR 0 7
71963: PPUSH
71964: LD_INT 5
71966: PPUSH
71967: LD_INT 4
71969: PPUSH
71970: CALL_OW 272
71974: PUSH
71975: LD_VAR 0 8
71979: PPUSH
71980: LD_INT 5
71982: PPUSH
71983: LD_INT 4
71985: PPUSH
71986: CALL_OW 273
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: ST_TO_ADDR
// for i = tmp downto 1 do
72003: LD_ADDR_VAR 0 4
72007: PUSH
72008: DOUBLE
72009: LD_VAR 0 6
72013: INC
72014: ST_TO_ADDR
72015: LD_INT 1
72017: PUSH
72018: FOR_DOWNTO
72019: IFFALSE 72120
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72021: LD_VAR 0 6
72025: PUSH
72026: LD_VAR 0 4
72030: ARRAY
72031: PUSH
72032: LD_INT 1
72034: ARRAY
72035: PPUSH
72036: LD_VAR 0 6
72040: PUSH
72041: LD_VAR 0 4
72045: ARRAY
72046: PUSH
72047: LD_INT 2
72049: ARRAY
72050: PPUSH
72051: CALL_OW 488
72055: NOT
72056: PUSH
72057: LD_VAR 0 6
72061: PUSH
72062: LD_VAR 0 4
72066: ARRAY
72067: PUSH
72068: LD_INT 1
72070: ARRAY
72071: PPUSH
72072: LD_VAR 0 6
72076: PUSH
72077: LD_VAR 0 4
72081: ARRAY
72082: PUSH
72083: LD_INT 2
72085: ARRAY
72086: PPUSH
72087: CALL_OW 428
72091: PUSH
72092: LD_INT 0
72094: NONEQUAL
72095: OR
72096: IFFALSE 72118
// tmp := Delete ( tmp , i ) ;
72098: LD_ADDR_VAR 0 6
72102: PUSH
72103: LD_VAR 0 6
72107: PPUSH
72108: LD_VAR 0 4
72112: PPUSH
72113: CALL_OW 3
72117: ST_TO_ADDR
72118: GO 72018
72120: POP
72121: POP
// j := GetClosestHex ( unit , tmp ) ;
72122: LD_ADDR_VAR 0 5
72126: PUSH
72127: LD_VAR 0 1
72131: PPUSH
72132: LD_VAR 0 6
72136: PPUSH
72137: CALL 71439 0 2
72141: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72142: LD_VAR 0 1
72146: PPUSH
72147: LD_VAR 0 5
72151: PUSH
72152: LD_INT 1
72154: ARRAY
72155: PPUSH
72156: LD_VAR 0 5
72160: PUSH
72161: LD_INT 2
72163: ARRAY
72164: PPUSH
72165: CALL_OW 111
// end ;
72169: LD_VAR 0 3
72173: RET
// export function PrepareApemanSoldier ( ) ; begin
72174: LD_INT 0
72176: PPUSH
// uc_nation := 0 ;
72177: LD_ADDR_OWVAR 21
72181: PUSH
72182: LD_INT 0
72184: ST_TO_ADDR
// hc_sex := sex_male ;
72185: LD_ADDR_OWVAR 27
72189: PUSH
72190: LD_INT 1
72192: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72193: LD_ADDR_OWVAR 28
72197: PUSH
72198: LD_INT 15
72200: ST_TO_ADDR
// hc_gallery :=  ;
72201: LD_ADDR_OWVAR 33
72205: PUSH
72206: LD_STRING 
72208: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72209: LD_ADDR_OWVAR 31
72213: PUSH
72214: LD_INT 0
72216: PPUSH
72217: LD_INT 3
72219: PPUSH
72220: CALL_OW 12
72224: PUSH
72225: LD_INT 0
72227: PPUSH
72228: LD_INT 3
72230: PPUSH
72231: CALL_OW 12
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: LD_INT 0
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: ST_TO_ADDR
// end ;
72248: LD_VAR 0 1
72252: RET
// export function PrepareApemanEngineer ( ) ; begin
72253: LD_INT 0
72255: PPUSH
// uc_nation := 0 ;
72256: LD_ADDR_OWVAR 21
72260: PUSH
72261: LD_INT 0
72263: ST_TO_ADDR
// hc_sex := sex_male ;
72264: LD_ADDR_OWVAR 27
72268: PUSH
72269: LD_INT 1
72271: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72272: LD_ADDR_OWVAR 28
72276: PUSH
72277: LD_INT 16
72279: ST_TO_ADDR
// hc_gallery :=  ;
72280: LD_ADDR_OWVAR 33
72284: PUSH
72285: LD_STRING 
72287: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72288: LD_ADDR_OWVAR 31
72292: PUSH
72293: LD_INT 0
72295: PPUSH
72296: LD_INT 3
72298: PPUSH
72299: CALL_OW 12
72303: PUSH
72304: LD_INT 0
72306: PPUSH
72307: LD_INT 3
72309: PPUSH
72310: CALL_OW 12
72314: PUSH
72315: LD_INT 0
72317: PUSH
72318: LD_INT 0
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: ST_TO_ADDR
// end ;
72327: LD_VAR 0 1
72331: RET
// export function PrepareApeman ( agressivity ) ; begin
72332: LD_INT 0
72334: PPUSH
// uc_side := 0 ;
72335: LD_ADDR_OWVAR 20
72339: PUSH
72340: LD_INT 0
72342: ST_TO_ADDR
// uc_nation := 0 ;
72343: LD_ADDR_OWVAR 21
72347: PUSH
72348: LD_INT 0
72350: ST_TO_ADDR
// hc_sex := sex_male ;
72351: LD_ADDR_OWVAR 27
72355: PUSH
72356: LD_INT 1
72358: ST_TO_ADDR
// hc_class := class_apeman ;
72359: LD_ADDR_OWVAR 28
72363: PUSH
72364: LD_INT 12
72366: ST_TO_ADDR
// hc_gallery :=  ;
72367: LD_ADDR_OWVAR 33
72371: PUSH
72372: LD_STRING 
72374: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72375: LD_ADDR_OWVAR 35
72379: PUSH
72380: LD_VAR 0 1
72384: NEG
72385: PPUSH
72386: LD_VAR 0 1
72390: PPUSH
72391: CALL_OW 12
72395: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72396: LD_ADDR_OWVAR 31
72400: PUSH
72401: LD_INT 0
72403: PPUSH
72404: LD_INT 3
72406: PPUSH
72407: CALL_OW 12
72411: PUSH
72412: LD_INT 0
72414: PPUSH
72415: LD_INT 3
72417: PPUSH
72418: CALL_OW 12
72422: PUSH
72423: LD_INT 0
72425: PUSH
72426: LD_INT 0
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: ST_TO_ADDR
// end ;
72435: LD_VAR 0 2
72439: RET
// export function PrepareTiger ( agressivity ) ; begin
72440: LD_INT 0
72442: PPUSH
// uc_side := 0 ;
72443: LD_ADDR_OWVAR 20
72447: PUSH
72448: LD_INT 0
72450: ST_TO_ADDR
// uc_nation := 0 ;
72451: LD_ADDR_OWVAR 21
72455: PUSH
72456: LD_INT 0
72458: ST_TO_ADDR
// hc_class := class_tiger ;
72459: LD_ADDR_OWVAR 28
72463: PUSH
72464: LD_INT 14
72466: ST_TO_ADDR
// hc_gallery :=  ;
72467: LD_ADDR_OWVAR 33
72471: PUSH
72472: LD_STRING 
72474: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72475: LD_ADDR_OWVAR 35
72479: PUSH
72480: LD_VAR 0 1
72484: NEG
72485: PPUSH
72486: LD_VAR 0 1
72490: PPUSH
72491: CALL_OW 12
72495: ST_TO_ADDR
// end ;
72496: LD_VAR 0 2
72500: RET
// export function PrepareEnchidna ( ) ; begin
72501: LD_INT 0
72503: PPUSH
// uc_side := 0 ;
72504: LD_ADDR_OWVAR 20
72508: PUSH
72509: LD_INT 0
72511: ST_TO_ADDR
// uc_nation := 0 ;
72512: LD_ADDR_OWVAR 21
72516: PUSH
72517: LD_INT 0
72519: ST_TO_ADDR
// hc_class := class_baggie ;
72520: LD_ADDR_OWVAR 28
72524: PUSH
72525: LD_INT 13
72527: ST_TO_ADDR
// hc_gallery :=  ;
72528: LD_ADDR_OWVAR 33
72532: PUSH
72533: LD_STRING 
72535: ST_TO_ADDR
// end ;
72536: LD_VAR 0 1
72540: RET
// export function PrepareFrog ( ) ; begin
72541: LD_INT 0
72543: PPUSH
// uc_side := 0 ;
72544: LD_ADDR_OWVAR 20
72548: PUSH
72549: LD_INT 0
72551: ST_TO_ADDR
// uc_nation := 0 ;
72552: LD_ADDR_OWVAR 21
72556: PUSH
72557: LD_INT 0
72559: ST_TO_ADDR
// hc_class := class_frog ;
72560: LD_ADDR_OWVAR 28
72564: PUSH
72565: LD_INT 19
72567: ST_TO_ADDR
// hc_gallery :=  ;
72568: LD_ADDR_OWVAR 33
72572: PUSH
72573: LD_STRING 
72575: ST_TO_ADDR
// end ;
72576: LD_VAR 0 1
72580: RET
// export function PrepareFish ( ) ; begin
72581: LD_INT 0
72583: PPUSH
// uc_side := 0 ;
72584: LD_ADDR_OWVAR 20
72588: PUSH
72589: LD_INT 0
72591: ST_TO_ADDR
// uc_nation := 0 ;
72592: LD_ADDR_OWVAR 21
72596: PUSH
72597: LD_INT 0
72599: ST_TO_ADDR
// hc_class := class_fish ;
72600: LD_ADDR_OWVAR 28
72604: PUSH
72605: LD_INT 20
72607: ST_TO_ADDR
// hc_gallery :=  ;
72608: LD_ADDR_OWVAR 33
72612: PUSH
72613: LD_STRING 
72615: ST_TO_ADDR
// end ;
72616: LD_VAR 0 1
72620: RET
// export function PrepareBird ( ) ; begin
72621: LD_INT 0
72623: PPUSH
// uc_side := 0 ;
72624: LD_ADDR_OWVAR 20
72628: PUSH
72629: LD_INT 0
72631: ST_TO_ADDR
// uc_nation := 0 ;
72632: LD_ADDR_OWVAR 21
72636: PUSH
72637: LD_INT 0
72639: ST_TO_ADDR
// hc_class := class_phororhacos ;
72640: LD_ADDR_OWVAR 28
72644: PUSH
72645: LD_INT 18
72647: ST_TO_ADDR
// hc_gallery :=  ;
72648: LD_ADDR_OWVAR 33
72652: PUSH
72653: LD_STRING 
72655: ST_TO_ADDR
// end ;
72656: LD_VAR 0 1
72660: RET
// export function PrepareHorse ( ) ; begin
72661: LD_INT 0
72663: PPUSH
// uc_side := 0 ;
72664: LD_ADDR_OWVAR 20
72668: PUSH
72669: LD_INT 0
72671: ST_TO_ADDR
// uc_nation := 0 ;
72672: LD_ADDR_OWVAR 21
72676: PUSH
72677: LD_INT 0
72679: ST_TO_ADDR
// hc_class := class_horse ;
72680: LD_ADDR_OWVAR 28
72684: PUSH
72685: LD_INT 21
72687: ST_TO_ADDR
// hc_gallery :=  ;
72688: LD_ADDR_OWVAR 33
72692: PUSH
72693: LD_STRING 
72695: ST_TO_ADDR
// end ;
72696: LD_VAR 0 1
72700: RET
// export function PrepareMastodont ( ) ; begin
72701: LD_INT 0
72703: PPUSH
// uc_side := 0 ;
72704: LD_ADDR_OWVAR 20
72708: PUSH
72709: LD_INT 0
72711: ST_TO_ADDR
// uc_nation := 0 ;
72712: LD_ADDR_OWVAR 21
72716: PUSH
72717: LD_INT 0
72719: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72720: LD_ADDR_OWVAR 37
72724: PUSH
72725: LD_INT 31
72727: ST_TO_ADDR
// vc_control := control_rider ;
72728: LD_ADDR_OWVAR 38
72732: PUSH
72733: LD_INT 4
72735: ST_TO_ADDR
// end ;
72736: LD_VAR 0 1
72740: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72741: LD_INT 0
72743: PPUSH
72744: PPUSH
72745: PPUSH
// uc_side = 0 ;
72746: LD_ADDR_OWVAR 20
72750: PUSH
72751: LD_INT 0
72753: ST_TO_ADDR
// uc_nation = 0 ;
72754: LD_ADDR_OWVAR 21
72758: PUSH
72759: LD_INT 0
72761: ST_TO_ADDR
// InitHc_All ( ) ;
72762: CALL_OW 584
// InitVc ;
72766: CALL_OW 20
// if mastodonts then
72770: LD_VAR 0 6
72774: IFFALSE 72841
// for i = 1 to mastodonts do
72776: LD_ADDR_VAR 0 11
72780: PUSH
72781: DOUBLE
72782: LD_INT 1
72784: DEC
72785: ST_TO_ADDR
72786: LD_VAR 0 6
72790: PUSH
72791: FOR_TO
72792: IFFALSE 72839
// begin vc_chassis := 31 ;
72794: LD_ADDR_OWVAR 37
72798: PUSH
72799: LD_INT 31
72801: ST_TO_ADDR
// vc_control := control_rider ;
72802: LD_ADDR_OWVAR 38
72806: PUSH
72807: LD_INT 4
72809: ST_TO_ADDR
// animal := CreateVehicle ;
72810: LD_ADDR_VAR 0 12
72814: PUSH
72815: CALL_OW 45
72819: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72820: LD_VAR 0 12
72824: PPUSH
72825: LD_VAR 0 8
72829: PPUSH
72830: LD_INT 0
72832: PPUSH
72833: CALL 74976 0 3
// end ;
72837: GO 72791
72839: POP
72840: POP
// if horses then
72841: LD_VAR 0 5
72845: IFFALSE 72912
// for i = 1 to horses do
72847: LD_ADDR_VAR 0 11
72851: PUSH
72852: DOUBLE
72853: LD_INT 1
72855: DEC
72856: ST_TO_ADDR
72857: LD_VAR 0 5
72861: PUSH
72862: FOR_TO
72863: IFFALSE 72910
// begin hc_class := 21 ;
72865: LD_ADDR_OWVAR 28
72869: PUSH
72870: LD_INT 21
72872: ST_TO_ADDR
// hc_gallery :=  ;
72873: LD_ADDR_OWVAR 33
72877: PUSH
72878: LD_STRING 
72880: ST_TO_ADDR
// animal := CreateHuman ;
72881: LD_ADDR_VAR 0 12
72885: PUSH
72886: CALL_OW 44
72890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72891: LD_VAR 0 12
72895: PPUSH
72896: LD_VAR 0 8
72900: PPUSH
72901: LD_INT 0
72903: PPUSH
72904: CALL 74976 0 3
// end ;
72908: GO 72862
72910: POP
72911: POP
// if birds then
72912: LD_VAR 0 1
72916: IFFALSE 72983
// for i = 1 to birds do
72918: LD_ADDR_VAR 0 11
72922: PUSH
72923: DOUBLE
72924: LD_INT 1
72926: DEC
72927: ST_TO_ADDR
72928: LD_VAR 0 1
72932: PUSH
72933: FOR_TO
72934: IFFALSE 72981
// begin hc_class = 18 ;
72936: LD_ADDR_OWVAR 28
72940: PUSH
72941: LD_INT 18
72943: ST_TO_ADDR
// hc_gallery =  ;
72944: LD_ADDR_OWVAR 33
72948: PUSH
72949: LD_STRING 
72951: ST_TO_ADDR
// animal := CreateHuman ;
72952: LD_ADDR_VAR 0 12
72956: PUSH
72957: CALL_OW 44
72961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72962: LD_VAR 0 12
72966: PPUSH
72967: LD_VAR 0 8
72971: PPUSH
72972: LD_INT 0
72974: PPUSH
72975: CALL 74976 0 3
// end ;
72979: GO 72933
72981: POP
72982: POP
// if tigers then
72983: LD_VAR 0 2
72987: IFFALSE 73071
// for i = 1 to tigers do
72989: LD_ADDR_VAR 0 11
72993: PUSH
72994: DOUBLE
72995: LD_INT 1
72997: DEC
72998: ST_TO_ADDR
72999: LD_VAR 0 2
73003: PUSH
73004: FOR_TO
73005: IFFALSE 73069
// begin hc_class = class_tiger ;
73007: LD_ADDR_OWVAR 28
73011: PUSH
73012: LD_INT 14
73014: ST_TO_ADDR
// hc_gallery =  ;
73015: LD_ADDR_OWVAR 33
73019: PUSH
73020: LD_STRING 
73022: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73023: LD_ADDR_OWVAR 35
73027: PUSH
73028: LD_INT 7
73030: NEG
73031: PPUSH
73032: LD_INT 7
73034: PPUSH
73035: CALL_OW 12
73039: ST_TO_ADDR
// animal := CreateHuman ;
73040: LD_ADDR_VAR 0 12
73044: PUSH
73045: CALL_OW 44
73049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73050: LD_VAR 0 12
73054: PPUSH
73055: LD_VAR 0 8
73059: PPUSH
73060: LD_INT 0
73062: PPUSH
73063: CALL 74976 0 3
// end ;
73067: GO 73004
73069: POP
73070: POP
// if apemans then
73071: LD_VAR 0 3
73075: IFFALSE 73198
// for i = 1 to apemans do
73077: LD_ADDR_VAR 0 11
73081: PUSH
73082: DOUBLE
73083: LD_INT 1
73085: DEC
73086: ST_TO_ADDR
73087: LD_VAR 0 3
73091: PUSH
73092: FOR_TO
73093: IFFALSE 73196
// begin hc_class = class_apeman ;
73095: LD_ADDR_OWVAR 28
73099: PUSH
73100: LD_INT 12
73102: ST_TO_ADDR
// hc_gallery =  ;
73103: LD_ADDR_OWVAR 33
73107: PUSH
73108: LD_STRING 
73110: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73111: LD_ADDR_OWVAR 35
73115: PUSH
73116: LD_INT 2
73118: NEG
73119: PPUSH
73120: LD_INT 2
73122: PPUSH
73123: CALL_OW 12
73127: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73128: LD_ADDR_OWVAR 31
73132: PUSH
73133: LD_INT 1
73135: PPUSH
73136: LD_INT 3
73138: PPUSH
73139: CALL_OW 12
73143: PUSH
73144: LD_INT 1
73146: PPUSH
73147: LD_INT 3
73149: PPUSH
73150: CALL_OW 12
73154: PUSH
73155: LD_INT 0
73157: PUSH
73158: LD_INT 0
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: ST_TO_ADDR
// animal := CreateHuman ;
73167: LD_ADDR_VAR 0 12
73171: PUSH
73172: CALL_OW 44
73176: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73177: LD_VAR 0 12
73181: PPUSH
73182: LD_VAR 0 8
73186: PPUSH
73187: LD_INT 0
73189: PPUSH
73190: CALL 74976 0 3
// end ;
73194: GO 73092
73196: POP
73197: POP
// if enchidnas then
73198: LD_VAR 0 4
73202: IFFALSE 73269
// for i = 1 to enchidnas do
73204: LD_ADDR_VAR 0 11
73208: PUSH
73209: DOUBLE
73210: LD_INT 1
73212: DEC
73213: ST_TO_ADDR
73214: LD_VAR 0 4
73218: PUSH
73219: FOR_TO
73220: IFFALSE 73267
// begin hc_class = 13 ;
73222: LD_ADDR_OWVAR 28
73226: PUSH
73227: LD_INT 13
73229: ST_TO_ADDR
// hc_gallery =  ;
73230: LD_ADDR_OWVAR 33
73234: PUSH
73235: LD_STRING 
73237: ST_TO_ADDR
// animal := CreateHuman ;
73238: LD_ADDR_VAR 0 12
73242: PUSH
73243: CALL_OW 44
73247: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73248: LD_VAR 0 12
73252: PPUSH
73253: LD_VAR 0 8
73257: PPUSH
73258: LD_INT 0
73260: PPUSH
73261: CALL 74976 0 3
// end ;
73265: GO 73219
73267: POP
73268: POP
// if fishes then
73269: LD_VAR 0 7
73273: IFFALSE 73340
// for i = 1 to fishes do
73275: LD_ADDR_VAR 0 11
73279: PUSH
73280: DOUBLE
73281: LD_INT 1
73283: DEC
73284: ST_TO_ADDR
73285: LD_VAR 0 7
73289: PUSH
73290: FOR_TO
73291: IFFALSE 73338
// begin hc_class = 20 ;
73293: LD_ADDR_OWVAR 28
73297: PUSH
73298: LD_INT 20
73300: ST_TO_ADDR
// hc_gallery =  ;
73301: LD_ADDR_OWVAR 33
73305: PUSH
73306: LD_STRING 
73308: ST_TO_ADDR
// animal := CreateHuman ;
73309: LD_ADDR_VAR 0 12
73313: PUSH
73314: CALL_OW 44
73318: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73319: LD_VAR 0 12
73323: PPUSH
73324: LD_VAR 0 9
73328: PPUSH
73329: LD_INT 0
73331: PPUSH
73332: CALL 74976 0 3
// end ;
73336: GO 73290
73338: POP
73339: POP
// end ;
73340: LD_VAR 0 10
73344: RET
// export function WantHeal ( sci , unit ) ; begin
73345: LD_INT 0
73347: PPUSH
// if GetTaskList ( sci ) > 0 then
73348: LD_VAR 0 1
73352: PPUSH
73353: CALL_OW 437
73357: PUSH
73358: LD_INT 0
73360: GREATER
73361: IFFALSE 73431
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73363: LD_VAR 0 1
73367: PPUSH
73368: CALL_OW 437
73372: PUSH
73373: LD_INT 1
73375: ARRAY
73376: PUSH
73377: LD_INT 1
73379: ARRAY
73380: PUSH
73381: LD_STRING l
73383: EQUAL
73384: PUSH
73385: LD_VAR 0 1
73389: PPUSH
73390: CALL_OW 437
73394: PUSH
73395: LD_INT 1
73397: ARRAY
73398: PUSH
73399: LD_INT 4
73401: ARRAY
73402: PUSH
73403: LD_VAR 0 2
73407: EQUAL
73408: AND
73409: IFFALSE 73421
// result := true else
73411: LD_ADDR_VAR 0 3
73415: PUSH
73416: LD_INT 1
73418: ST_TO_ADDR
73419: GO 73429
// result := false ;
73421: LD_ADDR_VAR 0 3
73425: PUSH
73426: LD_INT 0
73428: ST_TO_ADDR
// end else
73429: GO 73439
// result := false ;
73431: LD_ADDR_VAR 0 3
73435: PUSH
73436: LD_INT 0
73438: ST_TO_ADDR
// end ;
73439: LD_VAR 0 3
73443: RET
// export function HealTarget ( sci ) ; begin
73444: LD_INT 0
73446: PPUSH
// if not sci then
73447: LD_VAR 0 1
73451: NOT
73452: IFFALSE 73456
// exit ;
73454: GO 73521
// result := 0 ;
73456: LD_ADDR_VAR 0 2
73460: PUSH
73461: LD_INT 0
73463: ST_TO_ADDR
// if GetTaskList ( sci ) then
73464: LD_VAR 0 1
73468: PPUSH
73469: CALL_OW 437
73473: IFFALSE 73521
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73475: LD_VAR 0 1
73479: PPUSH
73480: CALL_OW 437
73484: PUSH
73485: LD_INT 1
73487: ARRAY
73488: PUSH
73489: LD_INT 1
73491: ARRAY
73492: PUSH
73493: LD_STRING l
73495: EQUAL
73496: IFFALSE 73521
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73498: LD_ADDR_VAR 0 2
73502: PUSH
73503: LD_VAR 0 1
73507: PPUSH
73508: CALL_OW 437
73512: PUSH
73513: LD_INT 1
73515: ARRAY
73516: PUSH
73517: LD_INT 4
73519: ARRAY
73520: ST_TO_ADDR
// end ;
73521: LD_VAR 0 2
73525: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73526: LD_INT 0
73528: PPUSH
73529: PPUSH
73530: PPUSH
73531: PPUSH
// if not base_units then
73532: LD_VAR 0 1
73536: NOT
73537: IFFALSE 73541
// exit ;
73539: GO 73628
// result := false ;
73541: LD_ADDR_VAR 0 2
73545: PUSH
73546: LD_INT 0
73548: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73549: LD_ADDR_VAR 0 5
73553: PUSH
73554: LD_VAR 0 1
73558: PPUSH
73559: LD_INT 21
73561: PUSH
73562: LD_INT 3
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PPUSH
73569: CALL_OW 72
73573: ST_TO_ADDR
// if not tmp then
73574: LD_VAR 0 5
73578: NOT
73579: IFFALSE 73583
// exit ;
73581: GO 73628
// for i in tmp do
73583: LD_ADDR_VAR 0 3
73587: PUSH
73588: LD_VAR 0 5
73592: PUSH
73593: FOR_IN
73594: IFFALSE 73626
// begin result := EnemyInRange ( i , 22 ) ;
73596: LD_ADDR_VAR 0 2
73600: PUSH
73601: LD_VAR 0 3
73605: PPUSH
73606: LD_INT 22
73608: PPUSH
73609: CALL 71314 0 2
73613: ST_TO_ADDR
// if result then
73614: LD_VAR 0 2
73618: IFFALSE 73624
// exit ;
73620: POP
73621: POP
73622: GO 73628
// end ;
73624: GO 73593
73626: POP
73627: POP
// end ;
73628: LD_VAR 0 2
73632: RET
// export function FilterByTag ( units , tag ) ; begin
73633: LD_INT 0
73635: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73636: LD_ADDR_VAR 0 3
73640: PUSH
73641: LD_VAR 0 1
73645: PPUSH
73646: LD_INT 120
73648: PUSH
73649: LD_VAR 0 2
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PPUSH
73658: CALL_OW 72
73662: ST_TO_ADDR
// end ;
73663: LD_VAR 0 3
73667: RET
// export function IsDriver ( un ) ; begin
73668: LD_INT 0
73670: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73671: LD_ADDR_VAR 0 2
73675: PUSH
73676: LD_VAR 0 1
73680: PUSH
73681: LD_INT 55
73683: PUSH
73684: EMPTY
73685: LIST
73686: PPUSH
73687: CALL_OW 69
73691: IN
73692: ST_TO_ADDR
// end ;
73693: LD_VAR 0 2
73697: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73698: LD_INT 0
73700: PPUSH
73701: PPUSH
// list := [ ] ;
73702: LD_ADDR_VAR 0 5
73706: PUSH
73707: EMPTY
73708: ST_TO_ADDR
// case d of 0 :
73709: LD_VAR 0 3
73713: PUSH
73714: LD_INT 0
73716: DOUBLE
73717: EQUAL
73718: IFTRUE 73722
73720: GO 73855
73722: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73723: LD_ADDR_VAR 0 5
73727: PUSH
73728: LD_VAR 0 1
73732: PUSH
73733: LD_INT 4
73735: MINUS
73736: PUSH
73737: LD_VAR 0 2
73741: PUSH
73742: LD_INT 4
73744: MINUS
73745: PUSH
73746: LD_INT 2
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: LIST
73753: PUSH
73754: LD_VAR 0 1
73758: PUSH
73759: LD_INT 3
73761: MINUS
73762: PUSH
73763: LD_VAR 0 2
73767: PUSH
73768: LD_INT 1
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: LIST
73775: PUSH
73776: LD_VAR 0 1
73780: PUSH
73781: LD_INT 4
73783: PLUS
73784: PUSH
73785: LD_VAR 0 2
73789: PUSH
73790: LD_INT 4
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: LIST
73797: PUSH
73798: LD_VAR 0 1
73802: PUSH
73803: LD_INT 3
73805: PLUS
73806: PUSH
73807: LD_VAR 0 2
73811: PUSH
73812: LD_INT 3
73814: PLUS
73815: PUSH
73816: LD_INT 5
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: LIST
73823: PUSH
73824: LD_VAR 0 1
73828: PUSH
73829: LD_VAR 0 2
73833: PUSH
73834: LD_INT 4
73836: PLUS
73837: PUSH
73838: LD_INT 0
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: LIST
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: ST_TO_ADDR
// end ; 1 :
73853: GO 74553
73855: LD_INT 1
73857: DOUBLE
73858: EQUAL
73859: IFTRUE 73863
73861: GO 73996
73863: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73864: LD_ADDR_VAR 0 5
73868: PUSH
73869: LD_VAR 0 1
73873: PUSH
73874: LD_VAR 0 2
73878: PUSH
73879: LD_INT 4
73881: MINUS
73882: PUSH
73883: LD_INT 3
73885: PUSH
73886: EMPTY
73887: LIST
73888: LIST
73889: LIST
73890: PUSH
73891: LD_VAR 0 1
73895: PUSH
73896: LD_INT 3
73898: MINUS
73899: PUSH
73900: LD_VAR 0 2
73904: PUSH
73905: LD_INT 3
73907: MINUS
73908: PUSH
73909: LD_INT 2
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: LIST
73916: PUSH
73917: LD_VAR 0 1
73921: PUSH
73922: LD_INT 4
73924: MINUS
73925: PUSH
73926: LD_VAR 0 2
73930: PUSH
73931: LD_INT 1
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: LIST
73938: PUSH
73939: LD_VAR 0 1
73943: PUSH
73944: LD_VAR 0 2
73948: PUSH
73949: LD_INT 3
73951: PLUS
73952: PUSH
73953: LD_INT 0
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: LIST
73960: PUSH
73961: LD_VAR 0 1
73965: PUSH
73966: LD_INT 4
73968: PLUS
73969: PUSH
73970: LD_VAR 0 2
73974: PUSH
73975: LD_INT 4
73977: PLUS
73978: PUSH
73979: LD_INT 5
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: LIST
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: ST_TO_ADDR
// end ; 2 :
73994: GO 74553
73996: LD_INT 2
73998: DOUBLE
73999: EQUAL
74000: IFTRUE 74004
74002: GO 74133
74004: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74005: LD_ADDR_VAR 0 5
74009: PUSH
74010: LD_VAR 0 1
74014: PUSH
74015: LD_VAR 0 2
74019: PUSH
74020: LD_INT 3
74022: MINUS
74023: PUSH
74024: LD_INT 3
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: LIST
74031: PUSH
74032: LD_VAR 0 1
74036: PUSH
74037: LD_INT 4
74039: PLUS
74040: PUSH
74041: LD_VAR 0 2
74045: PUSH
74046: LD_INT 4
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: LIST
74053: PUSH
74054: LD_VAR 0 1
74058: PUSH
74059: LD_VAR 0 2
74063: PUSH
74064: LD_INT 4
74066: PLUS
74067: PUSH
74068: LD_INT 0
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: LIST
74075: PUSH
74076: LD_VAR 0 1
74080: PUSH
74081: LD_INT 3
74083: MINUS
74084: PUSH
74085: LD_VAR 0 2
74089: PUSH
74090: LD_INT 1
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: LIST
74097: PUSH
74098: LD_VAR 0 1
74102: PUSH
74103: LD_INT 4
74105: MINUS
74106: PUSH
74107: LD_VAR 0 2
74111: PUSH
74112: LD_INT 4
74114: MINUS
74115: PUSH
74116: LD_INT 2
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: LIST
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: ST_TO_ADDR
// end ; 3 :
74131: GO 74553
74133: LD_INT 3
74135: DOUBLE
74136: EQUAL
74137: IFTRUE 74141
74139: GO 74274
74141: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74142: LD_ADDR_VAR 0 5
74146: PUSH
74147: LD_VAR 0 1
74151: PUSH
74152: LD_INT 3
74154: PLUS
74155: PUSH
74156: LD_VAR 0 2
74160: PUSH
74161: LD_INT 4
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: LIST
74168: PUSH
74169: LD_VAR 0 1
74173: PUSH
74174: LD_INT 4
74176: PLUS
74177: PUSH
74178: LD_VAR 0 2
74182: PUSH
74183: LD_INT 4
74185: PLUS
74186: PUSH
74187: LD_INT 5
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: LIST
74194: PUSH
74195: LD_VAR 0 1
74199: PUSH
74200: LD_INT 4
74202: MINUS
74203: PUSH
74204: LD_VAR 0 2
74208: PUSH
74209: LD_INT 1
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: LIST
74216: PUSH
74217: LD_VAR 0 1
74221: PUSH
74222: LD_VAR 0 2
74226: PUSH
74227: LD_INT 4
74229: MINUS
74230: PUSH
74231: LD_INT 3
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: LIST
74238: PUSH
74239: LD_VAR 0 1
74243: PUSH
74244: LD_INT 3
74246: MINUS
74247: PUSH
74248: LD_VAR 0 2
74252: PUSH
74253: LD_INT 3
74255: MINUS
74256: PUSH
74257: LD_INT 2
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: LIST
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: ST_TO_ADDR
// end ; 4 :
74272: GO 74553
74274: LD_INT 4
74276: DOUBLE
74277: EQUAL
74278: IFTRUE 74282
74280: GO 74415
74282: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74283: LD_ADDR_VAR 0 5
74287: PUSH
74288: LD_VAR 0 1
74292: PUSH
74293: LD_VAR 0 2
74297: PUSH
74298: LD_INT 4
74300: PLUS
74301: PUSH
74302: LD_INT 0
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: LIST
74309: PUSH
74310: LD_VAR 0 1
74314: PUSH
74315: LD_INT 3
74317: PLUS
74318: PUSH
74319: LD_VAR 0 2
74323: PUSH
74324: LD_INT 3
74326: PLUS
74327: PUSH
74328: LD_INT 5
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: LIST
74335: PUSH
74336: LD_VAR 0 1
74340: PUSH
74341: LD_INT 4
74343: PLUS
74344: PUSH
74345: LD_VAR 0 2
74349: PUSH
74350: LD_INT 4
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: LIST
74357: PUSH
74358: LD_VAR 0 1
74362: PUSH
74363: LD_VAR 0 2
74367: PUSH
74368: LD_INT 3
74370: MINUS
74371: PUSH
74372: LD_INT 3
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: LIST
74379: PUSH
74380: LD_VAR 0 1
74384: PUSH
74385: LD_INT 4
74387: MINUS
74388: PUSH
74389: LD_VAR 0 2
74393: PUSH
74394: LD_INT 4
74396: MINUS
74397: PUSH
74398: LD_INT 2
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: LIST
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: ST_TO_ADDR
// end ; 5 :
74413: GO 74553
74415: LD_INT 5
74417: DOUBLE
74418: EQUAL
74419: IFTRUE 74423
74421: GO 74552
74423: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74424: LD_ADDR_VAR 0 5
74428: PUSH
74429: LD_VAR 0 1
74433: PUSH
74434: LD_INT 4
74436: MINUS
74437: PUSH
74438: LD_VAR 0 2
74442: PUSH
74443: LD_INT 1
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: LIST
74450: PUSH
74451: LD_VAR 0 1
74455: PUSH
74456: LD_VAR 0 2
74460: PUSH
74461: LD_INT 4
74463: MINUS
74464: PUSH
74465: LD_INT 3
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: LIST
74472: PUSH
74473: LD_VAR 0 1
74477: PUSH
74478: LD_INT 4
74480: PLUS
74481: PUSH
74482: LD_VAR 0 2
74486: PUSH
74487: LD_INT 4
74489: PLUS
74490: PUSH
74491: LD_INT 5
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: LIST
74498: PUSH
74499: LD_VAR 0 1
74503: PUSH
74504: LD_INT 3
74506: PLUS
74507: PUSH
74508: LD_VAR 0 2
74512: PUSH
74513: LD_INT 4
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: LIST
74520: PUSH
74521: LD_VAR 0 1
74525: PUSH
74526: LD_VAR 0 2
74530: PUSH
74531: LD_INT 3
74533: PLUS
74534: PUSH
74535: LD_INT 0
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: LIST
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: ST_TO_ADDR
// end ; end ;
74550: GO 74553
74552: POP
// result := list ;
74553: LD_ADDR_VAR 0 4
74557: PUSH
74558: LD_VAR 0 5
74562: ST_TO_ADDR
// end ;
74563: LD_VAR 0 4
74567: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74568: LD_INT 0
74570: PPUSH
74571: PPUSH
74572: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74573: LD_VAR 0 1
74577: NOT
74578: PUSH
74579: LD_VAR 0 2
74583: PUSH
74584: LD_INT 1
74586: PUSH
74587: LD_INT 2
74589: PUSH
74590: LD_INT 3
74592: PUSH
74593: LD_INT 4
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: LIST
74600: LIST
74601: IN
74602: NOT
74603: OR
74604: IFFALSE 74608
// exit ;
74606: GO 74700
// tmp := [ ] ;
74608: LD_ADDR_VAR 0 5
74612: PUSH
74613: EMPTY
74614: ST_TO_ADDR
// for i in units do
74615: LD_ADDR_VAR 0 4
74619: PUSH
74620: LD_VAR 0 1
74624: PUSH
74625: FOR_IN
74626: IFFALSE 74669
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74628: LD_ADDR_VAR 0 5
74632: PUSH
74633: LD_VAR 0 5
74637: PPUSH
74638: LD_VAR 0 5
74642: PUSH
74643: LD_INT 1
74645: PLUS
74646: PPUSH
74647: LD_VAR 0 4
74651: PPUSH
74652: LD_VAR 0 2
74656: PPUSH
74657: CALL_OW 259
74661: PPUSH
74662: CALL_OW 2
74666: ST_TO_ADDR
74667: GO 74625
74669: POP
74670: POP
// if not tmp then
74671: LD_VAR 0 5
74675: NOT
74676: IFFALSE 74680
// exit ;
74678: GO 74700
// result := SortListByListDesc ( units , tmp ) ;
74680: LD_ADDR_VAR 0 3
74684: PUSH
74685: LD_VAR 0 1
74689: PPUSH
74690: LD_VAR 0 5
74694: PPUSH
74695: CALL_OW 77
74699: ST_TO_ADDR
// end ;
74700: LD_VAR 0 3
74704: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74705: LD_INT 0
74707: PPUSH
74708: PPUSH
74709: PPUSH
// result := false ;
74710: LD_ADDR_VAR 0 3
74714: PUSH
74715: LD_INT 0
74717: ST_TO_ADDR
// x := GetX ( building ) ;
74718: LD_ADDR_VAR 0 4
74722: PUSH
74723: LD_VAR 0 2
74727: PPUSH
74728: CALL_OW 250
74732: ST_TO_ADDR
// y := GetY ( building ) ;
74733: LD_ADDR_VAR 0 5
74737: PUSH
74738: LD_VAR 0 2
74742: PPUSH
74743: CALL_OW 251
74747: ST_TO_ADDR
// if not building or not x or not y then
74748: LD_VAR 0 2
74752: NOT
74753: PUSH
74754: LD_VAR 0 4
74758: NOT
74759: OR
74760: PUSH
74761: LD_VAR 0 5
74765: NOT
74766: OR
74767: IFFALSE 74771
// exit ;
74769: GO 74863
// if GetTaskList ( unit ) then
74771: LD_VAR 0 1
74775: PPUSH
74776: CALL_OW 437
74780: IFFALSE 74863
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74782: LD_STRING e
74784: PUSH
74785: LD_VAR 0 1
74789: PPUSH
74790: CALL_OW 437
74794: PUSH
74795: LD_INT 1
74797: ARRAY
74798: PUSH
74799: LD_INT 1
74801: ARRAY
74802: EQUAL
74803: PUSH
74804: LD_VAR 0 4
74808: PUSH
74809: LD_VAR 0 1
74813: PPUSH
74814: CALL_OW 437
74818: PUSH
74819: LD_INT 1
74821: ARRAY
74822: PUSH
74823: LD_INT 2
74825: ARRAY
74826: EQUAL
74827: AND
74828: PUSH
74829: LD_VAR 0 5
74833: PUSH
74834: LD_VAR 0 1
74838: PPUSH
74839: CALL_OW 437
74843: PUSH
74844: LD_INT 1
74846: ARRAY
74847: PUSH
74848: LD_INT 3
74850: ARRAY
74851: EQUAL
74852: AND
74853: IFFALSE 74863
// result := true end ;
74855: LD_ADDR_VAR 0 3
74859: PUSH
74860: LD_INT 1
74862: ST_TO_ADDR
// end ;
74863: LD_VAR 0 3
74867: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74868: LD_INT 0
74870: PPUSH
// result := false ;
74871: LD_ADDR_VAR 0 4
74875: PUSH
74876: LD_INT 0
74878: ST_TO_ADDR
// if GetTaskList ( unit ) then
74879: LD_VAR 0 1
74883: PPUSH
74884: CALL_OW 437
74888: IFFALSE 74971
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74890: LD_STRING M
74892: PUSH
74893: LD_VAR 0 1
74897: PPUSH
74898: CALL_OW 437
74902: PUSH
74903: LD_INT 1
74905: ARRAY
74906: PUSH
74907: LD_INT 1
74909: ARRAY
74910: EQUAL
74911: PUSH
74912: LD_VAR 0 2
74916: PUSH
74917: LD_VAR 0 1
74921: PPUSH
74922: CALL_OW 437
74926: PUSH
74927: LD_INT 1
74929: ARRAY
74930: PUSH
74931: LD_INT 2
74933: ARRAY
74934: EQUAL
74935: AND
74936: PUSH
74937: LD_VAR 0 3
74941: PUSH
74942: LD_VAR 0 1
74946: PPUSH
74947: CALL_OW 437
74951: PUSH
74952: LD_INT 1
74954: ARRAY
74955: PUSH
74956: LD_INT 3
74958: ARRAY
74959: EQUAL
74960: AND
74961: IFFALSE 74971
// result := true ;
74963: LD_ADDR_VAR 0 4
74967: PUSH
74968: LD_INT 1
74970: ST_TO_ADDR
// end ; end ;
74971: LD_VAR 0 4
74975: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74976: LD_INT 0
74978: PPUSH
74979: PPUSH
74980: PPUSH
74981: PPUSH
// if not unit or not area then
74982: LD_VAR 0 1
74986: NOT
74987: PUSH
74988: LD_VAR 0 2
74992: NOT
74993: OR
74994: IFFALSE 74998
// exit ;
74996: GO 75162
// tmp := AreaToList ( area , i ) ;
74998: LD_ADDR_VAR 0 6
75002: PUSH
75003: LD_VAR 0 2
75007: PPUSH
75008: LD_VAR 0 5
75012: PPUSH
75013: CALL_OW 517
75017: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75018: LD_ADDR_VAR 0 5
75022: PUSH
75023: DOUBLE
75024: LD_INT 1
75026: DEC
75027: ST_TO_ADDR
75028: LD_VAR 0 6
75032: PUSH
75033: LD_INT 1
75035: ARRAY
75036: PUSH
75037: FOR_TO
75038: IFFALSE 75160
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75040: LD_ADDR_VAR 0 7
75044: PUSH
75045: LD_VAR 0 6
75049: PUSH
75050: LD_INT 1
75052: ARRAY
75053: PUSH
75054: LD_VAR 0 5
75058: ARRAY
75059: PUSH
75060: LD_VAR 0 6
75064: PUSH
75065: LD_INT 2
75067: ARRAY
75068: PUSH
75069: LD_VAR 0 5
75073: ARRAY
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75079: LD_VAR 0 7
75083: PUSH
75084: LD_INT 1
75086: ARRAY
75087: PPUSH
75088: LD_VAR 0 7
75092: PUSH
75093: LD_INT 2
75095: ARRAY
75096: PPUSH
75097: CALL_OW 428
75101: PUSH
75102: LD_INT 0
75104: EQUAL
75105: IFFALSE 75158
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75107: LD_VAR 0 1
75111: PPUSH
75112: LD_VAR 0 7
75116: PUSH
75117: LD_INT 1
75119: ARRAY
75120: PPUSH
75121: LD_VAR 0 7
75125: PUSH
75126: LD_INT 2
75128: ARRAY
75129: PPUSH
75130: LD_VAR 0 3
75134: PPUSH
75135: CALL_OW 48
// result := IsPlaced ( unit ) ;
75139: LD_ADDR_VAR 0 4
75143: PUSH
75144: LD_VAR 0 1
75148: PPUSH
75149: CALL_OW 305
75153: ST_TO_ADDR
// exit ;
75154: POP
75155: POP
75156: GO 75162
// end ; end ;
75158: GO 75037
75160: POP
75161: POP
// end ;
75162: LD_VAR 0 4
75166: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75167: LD_INT 0
75169: PPUSH
75170: PPUSH
75171: PPUSH
// if not side or side > 8 then
75172: LD_VAR 0 1
75176: NOT
75177: PUSH
75178: LD_VAR 0 1
75182: PUSH
75183: LD_INT 8
75185: GREATER
75186: OR
75187: IFFALSE 75191
// exit ;
75189: GO 75378
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75191: LD_ADDR_VAR 0 4
75195: PUSH
75196: LD_INT 22
75198: PUSH
75199: LD_VAR 0 1
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: PUSH
75208: LD_INT 21
75210: PUSH
75211: LD_INT 3
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PPUSH
75222: CALL_OW 69
75226: ST_TO_ADDR
// if not tmp then
75227: LD_VAR 0 4
75231: NOT
75232: IFFALSE 75236
// exit ;
75234: GO 75378
// enable_addtolog := true ;
75236: LD_ADDR_OWVAR 81
75240: PUSH
75241: LD_INT 1
75243: ST_TO_ADDR
// AddToLog ( [ ) ;
75244: LD_STRING [
75246: PPUSH
75247: CALL_OW 561
// for i in tmp do
75251: LD_ADDR_VAR 0 3
75255: PUSH
75256: LD_VAR 0 4
75260: PUSH
75261: FOR_IN
75262: IFFALSE 75369
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75264: LD_STRING [
75266: PUSH
75267: LD_VAR 0 3
75271: PPUSH
75272: CALL_OW 266
75276: STR
75277: PUSH
75278: LD_STRING , 
75280: STR
75281: PUSH
75282: LD_VAR 0 3
75286: PPUSH
75287: CALL_OW 250
75291: STR
75292: PUSH
75293: LD_STRING , 
75295: STR
75296: PUSH
75297: LD_VAR 0 3
75301: PPUSH
75302: CALL_OW 251
75306: STR
75307: PUSH
75308: LD_STRING , 
75310: STR
75311: PUSH
75312: LD_VAR 0 3
75316: PPUSH
75317: CALL_OW 254
75321: STR
75322: PUSH
75323: LD_STRING , 
75325: STR
75326: PUSH
75327: LD_VAR 0 3
75331: PPUSH
75332: LD_INT 1
75334: PPUSH
75335: CALL_OW 268
75339: STR
75340: PUSH
75341: LD_STRING , 
75343: STR
75344: PUSH
75345: LD_VAR 0 3
75349: PPUSH
75350: LD_INT 2
75352: PPUSH
75353: CALL_OW 268
75357: STR
75358: PUSH
75359: LD_STRING ],
75361: STR
75362: PPUSH
75363: CALL_OW 561
// end ;
75367: GO 75261
75369: POP
75370: POP
// AddToLog ( ]; ) ;
75371: LD_STRING ];
75373: PPUSH
75374: CALL_OW 561
// end ;
75378: LD_VAR 0 2
75382: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75383: LD_INT 0
75385: PPUSH
75386: PPUSH
75387: PPUSH
75388: PPUSH
75389: PPUSH
// if not area or not rate or not max then
75390: LD_VAR 0 1
75394: NOT
75395: PUSH
75396: LD_VAR 0 2
75400: NOT
75401: OR
75402: PUSH
75403: LD_VAR 0 4
75407: NOT
75408: OR
75409: IFFALSE 75413
// exit ;
75411: GO 75602
// while 1 do
75413: LD_INT 1
75415: IFFALSE 75602
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75417: LD_ADDR_VAR 0 9
75421: PUSH
75422: LD_VAR 0 1
75426: PPUSH
75427: LD_INT 1
75429: PPUSH
75430: CALL_OW 287
75434: PUSH
75435: LD_INT 10
75437: MUL
75438: ST_TO_ADDR
// r := rate / 10 ;
75439: LD_ADDR_VAR 0 7
75443: PUSH
75444: LD_VAR 0 2
75448: PUSH
75449: LD_INT 10
75451: DIVREAL
75452: ST_TO_ADDR
// time := 1 1$00 ;
75453: LD_ADDR_VAR 0 8
75457: PUSH
75458: LD_INT 2100
75460: ST_TO_ADDR
// if amount < min then
75461: LD_VAR 0 9
75465: PUSH
75466: LD_VAR 0 3
75470: LESS
75471: IFFALSE 75489
// r := r * 2 else
75473: LD_ADDR_VAR 0 7
75477: PUSH
75478: LD_VAR 0 7
75482: PUSH
75483: LD_INT 2
75485: MUL
75486: ST_TO_ADDR
75487: GO 75515
// if amount > max then
75489: LD_VAR 0 9
75493: PUSH
75494: LD_VAR 0 4
75498: GREATER
75499: IFFALSE 75515
// r := r / 2 ;
75501: LD_ADDR_VAR 0 7
75505: PUSH
75506: LD_VAR 0 7
75510: PUSH
75511: LD_INT 2
75513: DIVREAL
75514: ST_TO_ADDR
// time := time / r ;
75515: LD_ADDR_VAR 0 8
75519: PUSH
75520: LD_VAR 0 8
75524: PUSH
75525: LD_VAR 0 7
75529: DIVREAL
75530: ST_TO_ADDR
// if time < 0 then
75531: LD_VAR 0 8
75535: PUSH
75536: LD_INT 0
75538: LESS
75539: IFFALSE 75556
// time := time * - 1 ;
75541: LD_ADDR_VAR 0 8
75545: PUSH
75546: LD_VAR 0 8
75550: PUSH
75551: LD_INT 1
75553: NEG
75554: MUL
75555: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75556: LD_VAR 0 8
75560: PUSH
75561: LD_INT 35
75563: PPUSH
75564: LD_INT 875
75566: PPUSH
75567: CALL_OW 12
75571: PLUS
75572: PPUSH
75573: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75577: LD_INT 1
75579: PPUSH
75580: LD_INT 5
75582: PPUSH
75583: CALL_OW 12
75587: PPUSH
75588: LD_VAR 0 1
75592: PPUSH
75593: LD_INT 1
75595: PPUSH
75596: CALL_OW 55
// end ;
75600: GO 75413
// end ;
75602: LD_VAR 0 5
75606: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75607: LD_INT 0
75609: PPUSH
75610: PPUSH
75611: PPUSH
75612: PPUSH
75613: PPUSH
75614: PPUSH
75615: PPUSH
75616: PPUSH
// if not turrets or not factories then
75617: LD_VAR 0 1
75621: NOT
75622: PUSH
75623: LD_VAR 0 2
75627: NOT
75628: OR
75629: IFFALSE 75633
// exit ;
75631: GO 75940
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75633: LD_ADDR_VAR 0 10
75637: PUSH
75638: LD_INT 5
75640: PUSH
75641: LD_INT 6
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: PUSH
75648: LD_INT 2
75650: PUSH
75651: LD_INT 4
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PUSH
75658: LD_INT 3
75660: PUSH
75661: LD_INT 5
75663: PUSH
75664: EMPTY
75665: LIST
75666: LIST
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: LIST
75672: PUSH
75673: LD_INT 24
75675: PUSH
75676: LD_INT 25
75678: PUSH
75679: EMPTY
75680: LIST
75681: LIST
75682: PUSH
75683: LD_INT 23
75685: PUSH
75686: LD_INT 27
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: PUSH
75693: EMPTY
75694: LIST
75695: LIST
75696: PUSH
75697: LD_INT 42
75699: PUSH
75700: LD_INT 43
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: PUSH
75707: LD_INT 44
75709: PUSH
75710: LD_INT 46
75712: PUSH
75713: EMPTY
75714: LIST
75715: LIST
75716: PUSH
75717: LD_INT 45
75719: PUSH
75720: LD_INT 47
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: LIST
75731: PUSH
75732: EMPTY
75733: LIST
75734: LIST
75735: LIST
75736: ST_TO_ADDR
// result := [ ] ;
75737: LD_ADDR_VAR 0 3
75741: PUSH
75742: EMPTY
75743: ST_TO_ADDR
// for i in turrets do
75744: LD_ADDR_VAR 0 4
75748: PUSH
75749: LD_VAR 0 1
75753: PUSH
75754: FOR_IN
75755: IFFALSE 75938
// begin nat := GetNation ( i ) ;
75757: LD_ADDR_VAR 0 7
75761: PUSH
75762: LD_VAR 0 4
75766: PPUSH
75767: CALL_OW 248
75771: ST_TO_ADDR
// weapon := 0 ;
75772: LD_ADDR_VAR 0 8
75776: PUSH
75777: LD_INT 0
75779: ST_TO_ADDR
// if not nat then
75780: LD_VAR 0 7
75784: NOT
75785: IFFALSE 75789
// continue ;
75787: GO 75754
// for j in list [ nat ] do
75789: LD_ADDR_VAR 0 5
75793: PUSH
75794: LD_VAR 0 10
75798: PUSH
75799: LD_VAR 0 7
75803: ARRAY
75804: PUSH
75805: FOR_IN
75806: IFFALSE 75847
// if GetBWeapon ( i ) = j [ 1 ] then
75808: LD_VAR 0 4
75812: PPUSH
75813: CALL_OW 269
75817: PUSH
75818: LD_VAR 0 5
75822: PUSH
75823: LD_INT 1
75825: ARRAY
75826: EQUAL
75827: IFFALSE 75845
// begin weapon := j [ 2 ] ;
75829: LD_ADDR_VAR 0 8
75833: PUSH
75834: LD_VAR 0 5
75838: PUSH
75839: LD_INT 2
75841: ARRAY
75842: ST_TO_ADDR
// break ;
75843: GO 75847
// end ;
75845: GO 75805
75847: POP
75848: POP
// if not weapon then
75849: LD_VAR 0 8
75853: NOT
75854: IFFALSE 75858
// continue ;
75856: GO 75754
// for k in factories do
75858: LD_ADDR_VAR 0 6
75862: PUSH
75863: LD_VAR 0 2
75867: PUSH
75868: FOR_IN
75869: IFFALSE 75934
// begin weapons := AvailableWeaponList ( k ) ;
75871: LD_ADDR_VAR 0 9
75875: PUSH
75876: LD_VAR 0 6
75880: PPUSH
75881: CALL_OW 478
75885: ST_TO_ADDR
// if not weapons then
75886: LD_VAR 0 9
75890: NOT
75891: IFFALSE 75895
// continue ;
75893: GO 75868
// if weapon in weapons then
75895: LD_VAR 0 8
75899: PUSH
75900: LD_VAR 0 9
75904: IN
75905: IFFALSE 75932
// begin result := [ i , weapon ] ;
75907: LD_ADDR_VAR 0 3
75911: PUSH
75912: LD_VAR 0 4
75916: PUSH
75917: LD_VAR 0 8
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: ST_TO_ADDR
// exit ;
75926: POP
75927: POP
75928: POP
75929: POP
75930: GO 75940
// end ; end ;
75932: GO 75868
75934: POP
75935: POP
// end ;
75936: GO 75754
75938: POP
75939: POP
// end ;
75940: LD_VAR 0 3
75944: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75945: LD_INT 0
75947: PPUSH
// if not side or side > 8 then
75948: LD_VAR 0 3
75952: NOT
75953: PUSH
75954: LD_VAR 0 3
75958: PUSH
75959: LD_INT 8
75961: GREATER
75962: OR
75963: IFFALSE 75967
// exit ;
75965: GO 76026
// if not range then
75967: LD_VAR 0 4
75971: NOT
75972: IFFALSE 75983
// range := - 12 ;
75974: LD_ADDR_VAR 0 4
75978: PUSH
75979: LD_INT 12
75981: NEG
75982: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75983: LD_VAR 0 1
75987: PPUSH
75988: LD_VAR 0 2
75992: PPUSH
75993: LD_VAR 0 3
75997: PPUSH
75998: LD_VAR 0 4
76002: PPUSH
76003: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76007: LD_VAR 0 1
76011: PPUSH
76012: LD_VAR 0 2
76016: PPUSH
76017: LD_VAR 0 3
76021: PPUSH
76022: CALL_OW 331
// end ;
76026: LD_VAR 0 5
76030: RET
// export function Video ( mode ) ; begin
76031: LD_INT 0
76033: PPUSH
// ingame_video = mode ;
76034: LD_ADDR_OWVAR 52
76038: PUSH
76039: LD_VAR 0 1
76043: ST_TO_ADDR
// interface_hidden = mode ;
76044: LD_ADDR_OWVAR 54
76048: PUSH
76049: LD_VAR 0 1
76053: ST_TO_ADDR
// end ;
76054: LD_VAR 0 2
76058: RET
// export function Join ( array , element ) ; begin
76059: LD_INT 0
76061: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76062: LD_ADDR_VAR 0 3
76066: PUSH
76067: LD_VAR 0 1
76071: PPUSH
76072: LD_VAR 0 1
76076: PUSH
76077: LD_INT 1
76079: PLUS
76080: PPUSH
76081: LD_VAR 0 2
76085: PPUSH
76086: CALL_OW 1
76090: ST_TO_ADDR
// end ;
76091: LD_VAR 0 3
76095: RET
// export function JoinUnion ( array , element ) ; begin
76096: LD_INT 0
76098: PPUSH
// result := array union element ;
76099: LD_ADDR_VAR 0 3
76103: PUSH
76104: LD_VAR 0 1
76108: PUSH
76109: LD_VAR 0 2
76113: UNION
76114: ST_TO_ADDR
// end ;
76115: LD_VAR 0 3
76119: RET
// export function GetBehemoths ( side ) ; begin
76120: LD_INT 0
76122: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76123: LD_ADDR_VAR 0 2
76127: PUSH
76128: LD_INT 22
76130: PUSH
76131: LD_VAR 0 1
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PUSH
76140: LD_INT 31
76142: PUSH
76143: LD_INT 25
76145: PUSH
76146: EMPTY
76147: LIST
76148: LIST
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PPUSH
76154: CALL_OW 69
76158: ST_TO_ADDR
// end ;
76159: LD_VAR 0 2
76163: RET
// export function Shuffle ( array ) ; var i , index ; begin
76164: LD_INT 0
76166: PPUSH
76167: PPUSH
76168: PPUSH
// result := [ ] ;
76169: LD_ADDR_VAR 0 2
76173: PUSH
76174: EMPTY
76175: ST_TO_ADDR
// if not array then
76176: LD_VAR 0 1
76180: NOT
76181: IFFALSE 76185
// exit ;
76183: GO 76284
// Randomize ;
76185: CALL_OW 10
// for i = array downto 1 do
76189: LD_ADDR_VAR 0 3
76193: PUSH
76194: DOUBLE
76195: LD_VAR 0 1
76199: INC
76200: ST_TO_ADDR
76201: LD_INT 1
76203: PUSH
76204: FOR_DOWNTO
76205: IFFALSE 76282
// begin index := rand ( 1 , array ) ;
76207: LD_ADDR_VAR 0 4
76211: PUSH
76212: LD_INT 1
76214: PPUSH
76215: LD_VAR 0 1
76219: PPUSH
76220: CALL_OW 12
76224: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76225: LD_ADDR_VAR 0 2
76229: PUSH
76230: LD_VAR 0 2
76234: PPUSH
76235: LD_VAR 0 2
76239: PUSH
76240: LD_INT 1
76242: PLUS
76243: PPUSH
76244: LD_VAR 0 1
76248: PUSH
76249: LD_VAR 0 4
76253: ARRAY
76254: PPUSH
76255: CALL_OW 2
76259: ST_TO_ADDR
// array := Delete ( array , index ) ;
76260: LD_ADDR_VAR 0 1
76264: PUSH
76265: LD_VAR 0 1
76269: PPUSH
76270: LD_VAR 0 4
76274: PPUSH
76275: CALL_OW 3
76279: ST_TO_ADDR
// end ;
76280: GO 76204
76282: POP
76283: POP
// end ;
76284: LD_VAR 0 2
76288: RET
// export function GetBaseMaterials ( base ) ; begin
76289: LD_INT 0
76291: PPUSH
// result := [ 0 , 0 , 0 ] ;
76292: LD_ADDR_VAR 0 2
76296: PUSH
76297: LD_INT 0
76299: PUSH
76300: LD_INT 0
76302: PUSH
76303: LD_INT 0
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: LIST
76310: ST_TO_ADDR
// if not base then
76311: LD_VAR 0 1
76315: NOT
76316: IFFALSE 76320
// exit ;
76318: GO 76369
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76320: LD_ADDR_VAR 0 2
76324: PUSH
76325: LD_VAR 0 1
76329: PPUSH
76330: LD_INT 1
76332: PPUSH
76333: CALL_OW 275
76337: PUSH
76338: LD_VAR 0 1
76342: PPUSH
76343: LD_INT 2
76345: PPUSH
76346: CALL_OW 275
76350: PUSH
76351: LD_VAR 0 1
76355: PPUSH
76356: LD_INT 3
76358: PPUSH
76359: CALL_OW 275
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: LIST
76368: ST_TO_ADDR
// end ;
76369: LD_VAR 0 2
76373: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76374: LD_INT 0
76376: PPUSH
76377: PPUSH
// result := array ;
76378: LD_ADDR_VAR 0 3
76382: PUSH
76383: LD_VAR 0 1
76387: ST_TO_ADDR
// if size >= result then
76388: LD_VAR 0 2
76392: PUSH
76393: LD_VAR 0 3
76397: GREATEREQUAL
76398: IFFALSE 76402
// exit ;
76400: GO 76452
// if size then
76402: LD_VAR 0 2
76406: IFFALSE 76452
// for i := array downto size do
76408: LD_ADDR_VAR 0 4
76412: PUSH
76413: DOUBLE
76414: LD_VAR 0 1
76418: INC
76419: ST_TO_ADDR
76420: LD_VAR 0 2
76424: PUSH
76425: FOR_DOWNTO
76426: IFFALSE 76450
// result := Delete ( result , result ) ;
76428: LD_ADDR_VAR 0 3
76432: PUSH
76433: LD_VAR 0 3
76437: PPUSH
76438: LD_VAR 0 3
76442: PPUSH
76443: CALL_OW 3
76447: ST_TO_ADDR
76448: GO 76425
76450: POP
76451: POP
// end ;
76452: LD_VAR 0 3
76456: RET
// export function ComExit ( unit ) ; var tmp ; begin
76457: LD_INT 0
76459: PPUSH
76460: PPUSH
// if not IsInUnit ( unit ) then
76461: LD_VAR 0 1
76465: PPUSH
76466: CALL_OW 310
76470: NOT
76471: IFFALSE 76475
// exit ;
76473: GO 76535
// tmp := IsInUnit ( unit ) ;
76475: LD_ADDR_VAR 0 3
76479: PUSH
76480: LD_VAR 0 1
76484: PPUSH
76485: CALL_OW 310
76489: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76490: LD_VAR 0 3
76494: PPUSH
76495: CALL_OW 247
76499: PUSH
76500: LD_INT 2
76502: EQUAL
76503: IFFALSE 76516
// ComExitVehicle ( unit ) else
76505: LD_VAR 0 1
76509: PPUSH
76510: CALL_OW 121
76514: GO 76525
// ComExitBuilding ( unit ) ;
76516: LD_VAR 0 1
76520: PPUSH
76521: CALL_OW 122
// result := tmp ;
76525: LD_ADDR_VAR 0 2
76529: PUSH
76530: LD_VAR 0 3
76534: ST_TO_ADDR
// end ;
76535: LD_VAR 0 2
76539: RET
// export function ComExitAll ( units ) ; var i ; begin
76540: LD_INT 0
76542: PPUSH
76543: PPUSH
// if not units then
76544: LD_VAR 0 1
76548: NOT
76549: IFFALSE 76553
// exit ;
76551: GO 76579
// for i in units do
76553: LD_ADDR_VAR 0 3
76557: PUSH
76558: LD_VAR 0 1
76562: PUSH
76563: FOR_IN
76564: IFFALSE 76577
// ComExit ( i ) ;
76566: LD_VAR 0 3
76570: PPUSH
76571: CALL 76457 0 1
76575: GO 76563
76577: POP
76578: POP
// end ;
76579: LD_VAR 0 2
76583: RET
// export function ResetHc ; begin
76584: LD_INT 0
76586: PPUSH
// InitHc ;
76587: CALL_OW 19
// hc_importance := 0 ;
76591: LD_ADDR_OWVAR 32
76595: PUSH
76596: LD_INT 0
76598: ST_TO_ADDR
// end ;
76599: LD_VAR 0 1
76603: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76604: LD_INT 0
76606: PPUSH
76607: PPUSH
76608: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76609: LD_ADDR_VAR 0 6
76613: PUSH
76614: LD_VAR 0 1
76618: PUSH
76619: LD_VAR 0 3
76623: PLUS
76624: PUSH
76625: LD_INT 2
76627: DIV
76628: ST_TO_ADDR
// if _x < 0 then
76629: LD_VAR 0 6
76633: PUSH
76634: LD_INT 0
76636: LESS
76637: IFFALSE 76654
// _x := _x * - 1 ;
76639: LD_ADDR_VAR 0 6
76643: PUSH
76644: LD_VAR 0 6
76648: PUSH
76649: LD_INT 1
76651: NEG
76652: MUL
76653: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76654: LD_ADDR_VAR 0 7
76658: PUSH
76659: LD_VAR 0 2
76663: PUSH
76664: LD_VAR 0 4
76668: PLUS
76669: PUSH
76670: LD_INT 2
76672: DIV
76673: ST_TO_ADDR
// if _y < 0 then
76674: LD_VAR 0 7
76678: PUSH
76679: LD_INT 0
76681: LESS
76682: IFFALSE 76699
// _y := _y * - 1 ;
76684: LD_ADDR_VAR 0 7
76688: PUSH
76689: LD_VAR 0 7
76693: PUSH
76694: LD_INT 1
76696: NEG
76697: MUL
76698: ST_TO_ADDR
// result := [ _x , _y ] ;
76699: LD_ADDR_VAR 0 5
76703: PUSH
76704: LD_VAR 0 6
76708: PUSH
76709: LD_VAR 0 7
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: ST_TO_ADDR
// end ;
76718: LD_VAR 0 5
76722: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76723: LD_INT 0
76725: PPUSH
76726: PPUSH
76727: PPUSH
76728: PPUSH
// task := GetTaskList ( unit ) ;
76729: LD_ADDR_VAR 0 7
76733: PUSH
76734: LD_VAR 0 1
76738: PPUSH
76739: CALL_OW 437
76743: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76744: LD_VAR 0 7
76748: NOT
76749: PUSH
76750: LD_VAR 0 1
76754: PPUSH
76755: LD_VAR 0 2
76759: PPUSH
76760: CALL_OW 308
76764: NOT
76765: AND
76766: IFFALSE 76770
// exit ;
76768: GO 76888
// if IsInArea ( unit , area ) then
76770: LD_VAR 0 1
76774: PPUSH
76775: LD_VAR 0 2
76779: PPUSH
76780: CALL_OW 308
76784: IFFALSE 76802
// begin ComMoveToArea ( unit , goAway ) ;
76786: LD_VAR 0 1
76790: PPUSH
76791: LD_VAR 0 3
76795: PPUSH
76796: CALL_OW 113
// exit ;
76800: GO 76888
// end ; if task [ 1 ] [ 1 ] <> M then
76802: LD_VAR 0 7
76806: PUSH
76807: LD_INT 1
76809: ARRAY
76810: PUSH
76811: LD_INT 1
76813: ARRAY
76814: PUSH
76815: LD_STRING M
76817: NONEQUAL
76818: IFFALSE 76822
// exit ;
76820: GO 76888
// x := task [ 1 ] [ 2 ] ;
76822: LD_ADDR_VAR 0 5
76826: PUSH
76827: LD_VAR 0 7
76831: PUSH
76832: LD_INT 1
76834: ARRAY
76835: PUSH
76836: LD_INT 2
76838: ARRAY
76839: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76840: LD_ADDR_VAR 0 6
76844: PUSH
76845: LD_VAR 0 7
76849: PUSH
76850: LD_INT 1
76852: ARRAY
76853: PUSH
76854: LD_INT 3
76856: ARRAY
76857: ST_TO_ADDR
// if InArea ( x , y , area ) then
76858: LD_VAR 0 5
76862: PPUSH
76863: LD_VAR 0 6
76867: PPUSH
76868: LD_VAR 0 2
76872: PPUSH
76873: CALL_OW 309
76877: IFFALSE 76888
// ComStop ( unit ) ;
76879: LD_VAR 0 1
76883: PPUSH
76884: CALL_OW 141
// end ;
76888: LD_VAR 0 4
76892: RET
// export function Abs ( value ) ; begin
76893: LD_INT 0
76895: PPUSH
// result := value ;
76896: LD_ADDR_VAR 0 2
76900: PUSH
76901: LD_VAR 0 1
76905: ST_TO_ADDR
// if value < 0 then
76906: LD_VAR 0 1
76910: PUSH
76911: LD_INT 0
76913: LESS
76914: IFFALSE 76931
// result := value * - 1 ;
76916: LD_ADDR_VAR 0 2
76920: PUSH
76921: LD_VAR 0 1
76925: PUSH
76926: LD_INT 1
76928: NEG
76929: MUL
76930: ST_TO_ADDR
// end ;
76931: LD_VAR 0 2
76935: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76936: LD_INT 0
76938: PPUSH
76939: PPUSH
76940: PPUSH
76941: PPUSH
76942: PPUSH
76943: PPUSH
76944: PPUSH
76945: PPUSH
// if not unit or not building then
76946: LD_VAR 0 1
76950: NOT
76951: PUSH
76952: LD_VAR 0 2
76956: NOT
76957: OR
76958: IFFALSE 76962
// exit ;
76960: GO 77188
// x := GetX ( building ) ;
76962: LD_ADDR_VAR 0 4
76966: PUSH
76967: LD_VAR 0 2
76971: PPUSH
76972: CALL_OW 250
76976: ST_TO_ADDR
// y := GetY ( building ) ;
76977: LD_ADDR_VAR 0 6
76981: PUSH
76982: LD_VAR 0 2
76986: PPUSH
76987: CALL_OW 251
76991: ST_TO_ADDR
// d := GetDir ( building ) ;
76992: LD_ADDR_VAR 0 8
76996: PUSH
76997: LD_VAR 0 2
77001: PPUSH
77002: CALL_OW 254
77006: ST_TO_ADDR
// r := 4 ;
77007: LD_ADDR_VAR 0 9
77011: PUSH
77012: LD_INT 4
77014: ST_TO_ADDR
// for i := 1 to 5 do
77015: LD_ADDR_VAR 0 10
77019: PUSH
77020: DOUBLE
77021: LD_INT 1
77023: DEC
77024: ST_TO_ADDR
77025: LD_INT 5
77027: PUSH
77028: FOR_TO
77029: IFFALSE 77186
// begin _x := ShiftX ( x , d , r + i ) ;
77031: LD_ADDR_VAR 0 5
77035: PUSH
77036: LD_VAR 0 4
77040: PPUSH
77041: LD_VAR 0 8
77045: PPUSH
77046: LD_VAR 0 9
77050: PUSH
77051: LD_VAR 0 10
77055: PLUS
77056: PPUSH
77057: CALL_OW 272
77061: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77062: LD_ADDR_VAR 0 7
77066: PUSH
77067: LD_VAR 0 6
77071: PPUSH
77072: LD_VAR 0 8
77076: PPUSH
77077: LD_VAR 0 9
77081: PUSH
77082: LD_VAR 0 10
77086: PLUS
77087: PPUSH
77088: CALL_OW 273
77092: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77093: LD_VAR 0 5
77097: PPUSH
77098: LD_VAR 0 7
77102: PPUSH
77103: CALL_OW 488
77107: PUSH
77108: LD_VAR 0 5
77112: PPUSH
77113: LD_VAR 0 7
77117: PPUSH
77118: CALL_OW 428
77122: PPUSH
77123: CALL_OW 247
77127: PUSH
77128: LD_INT 3
77130: PUSH
77131: LD_INT 2
77133: PUSH
77134: EMPTY
77135: LIST
77136: LIST
77137: IN
77138: NOT
77139: AND
77140: IFFALSE 77184
// begin ComMoveXY ( unit , _x , _y ) ;
77142: LD_VAR 0 1
77146: PPUSH
77147: LD_VAR 0 5
77151: PPUSH
77152: LD_VAR 0 7
77156: PPUSH
77157: CALL_OW 111
// result := [ _x , _y ] ;
77161: LD_ADDR_VAR 0 3
77165: PUSH
77166: LD_VAR 0 5
77170: PUSH
77171: LD_VAR 0 7
77175: PUSH
77176: EMPTY
77177: LIST
77178: LIST
77179: ST_TO_ADDR
// exit ;
77180: POP
77181: POP
77182: GO 77188
// end ; end ;
77184: GO 77028
77186: POP
77187: POP
// end ;
77188: LD_VAR 0 3
77192: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77193: LD_INT 0
77195: PPUSH
77196: PPUSH
77197: PPUSH
// result := 0 ;
77198: LD_ADDR_VAR 0 3
77202: PUSH
77203: LD_INT 0
77205: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77206: LD_VAR 0 1
77210: PUSH
77211: LD_INT 0
77213: LESS
77214: PUSH
77215: LD_VAR 0 1
77219: PUSH
77220: LD_INT 8
77222: GREATER
77223: OR
77224: PUSH
77225: LD_VAR 0 2
77229: PUSH
77230: LD_INT 0
77232: LESS
77233: OR
77234: PUSH
77235: LD_VAR 0 2
77239: PUSH
77240: LD_INT 8
77242: GREATER
77243: OR
77244: IFFALSE 77248
// exit ;
77246: GO 77323
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77248: LD_ADDR_VAR 0 4
77252: PUSH
77253: LD_INT 22
77255: PUSH
77256: LD_VAR 0 2
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: PPUSH
77265: CALL_OW 69
77269: PUSH
77270: FOR_IN
77271: IFFALSE 77321
// begin un := UnitShoot ( i ) ;
77273: LD_ADDR_VAR 0 5
77277: PUSH
77278: LD_VAR 0 4
77282: PPUSH
77283: CALL_OW 504
77287: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77288: LD_VAR 0 5
77292: PPUSH
77293: CALL_OW 255
77297: PUSH
77298: LD_VAR 0 1
77302: EQUAL
77303: IFFALSE 77319
// begin result := un ;
77305: LD_ADDR_VAR 0 3
77309: PUSH
77310: LD_VAR 0 5
77314: ST_TO_ADDR
// exit ;
77315: POP
77316: POP
77317: GO 77323
// end ; end ;
77319: GO 77270
77321: POP
77322: POP
// end ;
77323: LD_VAR 0 3
77327: RET
// export function GetCargoBay ( units ) ; begin
77328: LD_INT 0
77330: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77331: LD_ADDR_VAR 0 2
77335: PUSH
77336: LD_VAR 0 1
77340: PPUSH
77341: LD_INT 2
77343: PUSH
77344: LD_INT 34
77346: PUSH
77347: LD_INT 12
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: PUSH
77354: LD_INT 34
77356: PUSH
77357: LD_INT 51
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: PUSH
77364: LD_INT 34
77366: PUSH
77367: LD_INT 32
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: PUSH
77374: LD_INT 34
77376: PUSH
77377: LD_INT 89
77379: PUSH
77380: EMPTY
77381: LIST
77382: LIST
77383: PUSH
77384: EMPTY
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: PPUSH
77391: CALL_OW 72
77395: ST_TO_ADDR
// end ;
77396: LD_VAR 0 2
77400: RET
// export function Negate ( value ) ; begin
77401: LD_INT 0
77403: PPUSH
// result := not value ;
77404: LD_ADDR_VAR 0 2
77408: PUSH
77409: LD_VAR 0 1
77413: NOT
77414: ST_TO_ADDR
// end ;
77415: LD_VAR 0 2
77419: RET
// export function Inc ( value ) ; begin
77420: LD_INT 0
77422: PPUSH
// result := value + 1 ;
77423: LD_ADDR_VAR 0 2
77427: PUSH
77428: LD_VAR 0 1
77432: PUSH
77433: LD_INT 1
77435: PLUS
77436: ST_TO_ADDR
// end ;
77437: LD_VAR 0 2
77441: RET
// export function Dec ( value ) ; begin
77442: LD_INT 0
77444: PPUSH
// result := value - 1 ;
77445: LD_ADDR_VAR 0 2
77449: PUSH
77450: LD_VAR 0 1
77454: PUSH
77455: LD_INT 1
77457: MINUS
77458: ST_TO_ADDR
// end ;
77459: LD_VAR 0 2
77463: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77464: LD_INT 0
77466: PPUSH
77467: PPUSH
77468: PPUSH
77469: PPUSH
77470: PPUSH
77471: PPUSH
77472: PPUSH
77473: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77474: LD_VAR 0 1
77478: PPUSH
77479: LD_VAR 0 2
77483: PPUSH
77484: CALL_OW 488
77488: NOT
77489: PUSH
77490: LD_VAR 0 3
77494: PPUSH
77495: LD_VAR 0 4
77499: PPUSH
77500: CALL_OW 488
77504: NOT
77505: OR
77506: IFFALSE 77519
// begin result := - 1 ;
77508: LD_ADDR_VAR 0 5
77512: PUSH
77513: LD_INT 1
77515: NEG
77516: ST_TO_ADDR
// exit ;
77517: GO 77754
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77519: LD_ADDR_VAR 0 12
77523: PUSH
77524: LD_VAR 0 1
77528: PPUSH
77529: LD_VAR 0 2
77533: PPUSH
77534: LD_VAR 0 3
77538: PPUSH
77539: LD_VAR 0 4
77543: PPUSH
77544: CALL 76604 0 4
77548: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77549: LD_ADDR_VAR 0 11
77553: PUSH
77554: LD_VAR 0 1
77558: PPUSH
77559: LD_VAR 0 2
77563: PPUSH
77564: LD_VAR 0 12
77568: PUSH
77569: LD_INT 1
77571: ARRAY
77572: PPUSH
77573: LD_VAR 0 12
77577: PUSH
77578: LD_INT 2
77580: ARRAY
77581: PPUSH
77582: CALL_OW 298
77586: ST_TO_ADDR
// distance := 9999 ;
77587: LD_ADDR_VAR 0 10
77591: PUSH
77592: LD_INT 9999
77594: ST_TO_ADDR
// for i := 0 to 5 do
77595: LD_ADDR_VAR 0 6
77599: PUSH
77600: DOUBLE
77601: LD_INT 0
77603: DEC
77604: ST_TO_ADDR
77605: LD_INT 5
77607: PUSH
77608: FOR_TO
77609: IFFALSE 77752
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77611: LD_ADDR_VAR 0 7
77615: PUSH
77616: LD_VAR 0 1
77620: PPUSH
77621: LD_VAR 0 6
77625: PPUSH
77626: LD_VAR 0 11
77630: PPUSH
77631: CALL_OW 272
77635: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77636: LD_ADDR_VAR 0 8
77640: PUSH
77641: LD_VAR 0 2
77645: PPUSH
77646: LD_VAR 0 6
77650: PPUSH
77651: LD_VAR 0 11
77655: PPUSH
77656: CALL_OW 273
77660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77661: LD_VAR 0 7
77665: PPUSH
77666: LD_VAR 0 8
77670: PPUSH
77671: CALL_OW 488
77675: NOT
77676: IFFALSE 77680
// continue ;
77678: GO 77608
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77680: LD_ADDR_VAR 0 9
77684: PUSH
77685: LD_VAR 0 12
77689: PUSH
77690: LD_INT 1
77692: ARRAY
77693: PPUSH
77694: LD_VAR 0 12
77698: PUSH
77699: LD_INT 2
77701: ARRAY
77702: PPUSH
77703: LD_VAR 0 7
77707: PPUSH
77708: LD_VAR 0 8
77712: PPUSH
77713: CALL_OW 298
77717: ST_TO_ADDR
// if tmp < distance then
77718: LD_VAR 0 9
77722: PUSH
77723: LD_VAR 0 10
77727: LESS
77728: IFFALSE 77750
// begin result := i ;
77730: LD_ADDR_VAR 0 5
77734: PUSH
77735: LD_VAR 0 6
77739: ST_TO_ADDR
// distance := tmp ;
77740: LD_ADDR_VAR 0 10
77744: PUSH
77745: LD_VAR 0 9
77749: ST_TO_ADDR
// end ; end ;
77750: GO 77608
77752: POP
77753: POP
// end ;
77754: LD_VAR 0 5
77758: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77759: LD_INT 0
77761: PPUSH
77762: PPUSH
// if not driver or not IsInUnit ( driver ) then
77763: LD_VAR 0 1
77767: NOT
77768: PUSH
77769: LD_VAR 0 1
77773: PPUSH
77774: CALL_OW 310
77778: NOT
77779: OR
77780: IFFALSE 77784
// exit ;
77782: GO 77874
// vehicle := IsInUnit ( driver ) ;
77784: LD_ADDR_VAR 0 3
77788: PUSH
77789: LD_VAR 0 1
77793: PPUSH
77794: CALL_OW 310
77798: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77799: LD_VAR 0 1
77803: PPUSH
77804: LD_STRING \
77806: PUSH
77807: LD_INT 0
77809: PUSH
77810: LD_INT 0
77812: PUSH
77813: LD_INT 0
77815: PUSH
77816: LD_INT 0
77818: PUSH
77819: LD_INT 0
77821: PUSH
77822: LD_INT 0
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: LIST
77829: LIST
77830: LIST
77831: LIST
77832: LIST
77833: PUSH
77834: LD_STRING E
77836: PUSH
77837: LD_INT 0
77839: PUSH
77840: LD_INT 0
77842: PUSH
77843: LD_VAR 0 3
77847: PUSH
77848: LD_INT 0
77850: PUSH
77851: LD_INT 0
77853: PUSH
77854: LD_INT 0
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: LIST
77861: LIST
77862: LIST
77863: LIST
77864: LIST
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: PPUSH
77870: CALL_OW 446
// end ;
77874: LD_VAR 0 2
77878: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77879: LD_INT 0
77881: PPUSH
77882: PPUSH
// if not driver or not IsInUnit ( driver ) then
77883: LD_VAR 0 1
77887: NOT
77888: PUSH
77889: LD_VAR 0 1
77893: PPUSH
77894: CALL_OW 310
77898: NOT
77899: OR
77900: IFFALSE 77904
// exit ;
77902: GO 77994
// vehicle := IsInUnit ( driver ) ;
77904: LD_ADDR_VAR 0 3
77908: PUSH
77909: LD_VAR 0 1
77913: PPUSH
77914: CALL_OW 310
77918: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77919: LD_VAR 0 1
77923: PPUSH
77924: LD_STRING \
77926: PUSH
77927: LD_INT 0
77929: PUSH
77930: LD_INT 0
77932: PUSH
77933: LD_INT 0
77935: PUSH
77936: LD_INT 0
77938: PUSH
77939: LD_INT 0
77941: PUSH
77942: LD_INT 0
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: LIST
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: PUSH
77954: LD_STRING E
77956: PUSH
77957: LD_INT 0
77959: PUSH
77960: LD_INT 0
77962: PUSH
77963: LD_VAR 0 3
77967: PUSH
77968: LD_INT 0
77970: PUSH
77971: LD_INT 0
77973: PUSH
77974: LD_INT 0
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: LIST
77981: LIST
77982: LIST
77983: LIST
77984: LIST
77985: PUSH
77986: EMPTY
77987: LIST
77988: LIST
77989: PPUSH
77990: CALL_OW 447
// end ;
77994: LD_VAR 0 2
77998: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77999: LD_INT 0
78001: PPUSH
78002: PPUSH
78003: PPUSH
// tmp := [ ] ;
78004: LD_ADDR_VAR 0 5
78008: PUSH
78009: EMPTY
78010: ST_TO_ADDR
// for i in units do
78011: LD_ADDR_VAR 0 4
78015: PUSH
78016: LD_VAR 0 1
78020: PUSH
78021: FOR_IN
78022: IFFALSE 78060
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78024: LD_ADDR_VAR 0 5
78028: PUSH
78029: LD_VAR 0 5
78033: PPUSH
78034: LD_VAR 0 5
78038: PUSH
78039: LD_INT 1
78041: PLUS
78042: PPUSH
78043: LD_VAR 0 4
78047: PPUSH
78048: CALL_OW 256
78052: PPUSH
78053: CALL_OW 2
78057: ST_TO_ADDR
78058: GO 78021
78060: POP
78061: POP
// if not tmp then
78062: LD_VAR 0 5
78066: NOT
78067: IFFALSE 78071
// exit ;
78069: GO 78119
// if asc then
78071: LD_VAR 0 2
78075: IFFALSE 78099
// result := SortListByListAsc ( units , tmp ) else
78077: LD_ADDR_VAR 0 3
78081: PUSH
78082: LD_VAR 0 1
78086: PPUSH
78087: LD_VAR 0 5
78091: PPUSH
78092: CALL_OW 76
78096: ST_TO_ADDR
78097: GO 78119
// result := SortListByListDesc ( units , tmp ) ;
78099: LD_ADDR_VAR 0 3
78103: PUSH
78104: LD_VAR 0 1
78108: PPUSH
78109: LD_VAR 0 5
78113: PPUSH
78114: CALL_OW 77
78118: ST_TO_ADDR
// end ;
78119: LD_VAR 0 3
78123: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78124: LD_INT 0
78126: PPUSH
78127: PPUSH
// task := GetTaskList ( mech ) ;
78128: LD_ADDR_VAR 0 4
78132: PUSH
78133: LD_VAR 0 1
78137: PPUSH
78138: CALL_OW 437
78142: ST_TO_ADDR
// if not task then
78143: LD_VAR 0 4
78147: NOT
78148: IFFALSE 78152
// exit ;
78150: GO 78194
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78152: LD_ADDR_VAR 0 3
78156: PUSH
78157: LD_VAR 0 4
78161: PUSH
78162: LD_INT 1
78164: ARRAY
78165: PUSH
78166: LD_INT 1
78168: ARRAY
78169: PUSH
78170: LD_STRING r
78172: EQUAL
78173: PUSH
78174: LD_VAR 0 4
78178: PUSH
78179: LD_INT 1
78181: ARRAY
78182: PUSH
78183: LD_INT 4
78185: ARRAY
78186: PUSH
78187: LD_VAR 0 2
78191: EQUAL
78192: AND
78193: ST_TO_ADDR
// end ;
78194: LD_VAR 0 3
78198: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78199: LD_INT 0
78201: PPUSH
// SetDir ( unit , d ) ;
78202: LD_VAR 0 1
78206: PPUSH
78207: LD_VAR 0 4
78211: PPUSH
78212: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78216: LD_VAR 0 1
78220: PPUSH
78221: LD_VAR 0 2
78225: PPUSH
78226: LD_VAR 0 3
78230: PPUSH
78231: LD_VAR 0 5
78235: PPUSH
78236: CALL_OW 48
// end ;
78240: LD_VAR 0 6
78244: RET
// export function ToNaturalNumber ( number ) ; begin
78245: LD_INT 0
78247: PPUSH
// result := number div 1 ;
78248: LD_ADDR_VAR 0 2
78252: PUSH
78253: LD_VAR 0 1
78257: PUSH
78258: LD_INT 1
78260: DIV
78261: ST_TO_ADDR
// if number < 0 then
78262: LD_VAR 0 1
78266: PUSH
78267: LD_INT 0
78269: LESS
78270: IFFALSE 78280
// result := 0 ;
78272: LD_ADDR_VAR 0 2
78276: PUSH
78277: LD_INT 0
78279: ST_TO_ADDR
// end ;
78280: LD_VAR 0 2
78284: RET
// export function SortByClass ( units , class ) ; var un ; begin
78285: LD_INT 0
78287: PPUSH
78288: PPUSH
// if not units or not class then
78289: LD_VAR 0 1
78293: NOT
78294: PUSH
78295: LD_VAR 0 2
78299: NOT
78300: OR
78301: IFFALSE 78305
// exit ;
78303: GO 78400
// result := [ ] ;
78305: LD_ADDR_VAR 0 3
78309: PUSH
78310: EMPTY
78311: ST_TO_ADDR
// for un in units do
78312: LD_ADDR_VAR 0 4
78316: PUSH
78317: LD_VAR 0 1
78321: PUSH
78322: FOR_IN
78323: IFFALSE 78398
// if GetClass ( un ) = class then
78325: LD_VAR 0 4
78329: PPUSH
78330: CALL_OW 257
78334: PUSH
78335: LD_VAR 0 2
78339: EQUAL
78340: IFFALSE 78367
// result := Insert ( result , 1 , un ) else
78342: LD_ADDR_VAR 0 3
78346: PUSH
78347: LD_VAR 0 3
78351: PPUSH
78352: LD_INT 1
78354: PPUSH
78355: LD_VAR 0 4
78359: PPUSH
78360: CALL_OW 2
78364: ST_TO_ADDR
78365: GO 78396
// result := Replace ( result , result + 1 , un ) ;
78367: LD_ADDR_VAR 0 3
78371: PUSH
78372: LD_VAR 0 3
78376: PPUSH
78377: LD_VAR 0 3
78381: PUSH
78382: LD_INT 1
78384: PLUS
78385: PPUSH
78386: LD_VAR 0 4
78390: PPUSH
78391: CALL_OW 1
78395: ST_TO_ADDR
78396: GO 78322
78398: POP
78399: POP
// end ;
78400: LD_VAR 0 3
78404: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78405: LD_INT 0
78407: PPUSH
78408: PPUSH
78409: PPUSH
78410: PPUSH
78411: PPUSH
78412: PPUSH
78413: PPUSH
// result := [ ] ;
78414: LD_ADDR_VAR 0 4
78418: PUSH
78419: EMPTY
78420: ST_TO_ADDR
// if x - r < 0 then
78421: LD_VAR 0 1
78425: PUSH
78426: LD_VAR 0 3
78430: MINUS
78431: PUSH
78432: LD_INT 0
78434: LESS
78435: IFFALSE 78447
// min_x := 0 else
78437: LD_ADDR_VAR 0 8
78441: PUSH
78442: LD_INT 0
78444: ST_TO_ADDR
78445: GO 78463
// min_x := x - r ;
78447: LD_ADDR_VAR 0 8
78451: PUSH
78452: LD_VAR 0 1
78456: PUSH
78457: LD_VAR 0 3
78461: MINUS
78462: ST_TO_ADDR
// if y - r < 0 then
78463: LD_VAR 0 2
78467: PUSH
78468: LD_VAR 0 3
78472: MINUS
78473: PUSH
78474: LD_INT 0
78476: LESS
78477: IFFALSE 78489
// min_y := 0 else
78479: LD_ADDR_VAR 0 7
78483: PUSH
78484: LD_INT 0
78486: ST_TO_ADDR
78487: GO 78505
// min_y := y - r ;
78489: LD_ADDR_VAR 0 7
78493: PUSH
78494: LD_VAR 0 2
78498: PUSH
78499: LD_VAR 0 3
78503: MINUS
78504: ST_TO_ADDR
// max_x := x + r ;
78505: LD_ADDR_VAR 0 9
78509: PUSH
78510: LD_VAR 0 1
78514: PUSH
78515: LD_VAR 0 3
78519: PLUS
78520: ST_TO_ADDR
// max_y := y + r ;
78521: LD_ADDR_VAR 0 10
78525: PUSH
78526: LD_VAR 0 2
78530: PUSH
78531: LD_VAR 0 3
78535: PLUS
78536: ST_TO_ADDR
// for _x = min_x to max_x do
78537: LD_ADDR_VAR 0 5
78541: PUSH
78542: DOUBLE
78543: LD_VAR 0 8
78547: DEC
78548: ST_TO_ADDR
78549: LD_VAR 0 9
78553: PUSH
78554: FOR_TO
78555: IFFALSE 78656
// for _y = min_y to max_y do
78557: LD_ADDR_VAR 0 6
78561: PUSH
78562: DOUBLE
78563: LD_VAR 0 7
78567: DEC
78568: ST_TO_ADDR
78569: LD_VAR 0 10
78573: PUSH
78574: FOR_TO
78575: IFFALSE 78652
// begin if not ValidHex ( _x , _y ) then
78577: LD_VAR 0 5
78581: PPUSH
78582: LD_VAR 0 6
78586: PPUSH
78587: CALL_OW 488
78591: NOT
78592: IFFALSE 78596
// continue ;
78594: GO 78574
// if GetResourceTypeXY ( _x , _y ) then
78596: LD_VAR 0 5
78600: PPUSH
78601: LD_VAR 0 6
78605: PPUSH
78606: CALL_OW 283
78610: IFFALSE 78650
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78612: LD_ADDR_VAR 0 4
78616: PUSH
78617: LD_VAR 0 4
78621: PPUSH
78622: LD_VAR 0 4
78626: PUSH
78627: LD_INT 1
78629: PLUS
78630: PPUSH
78631: LD_VAR 0 5
78635: PUSH
78636: LD_VAR 0 6
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: PPUSH
78645: CALL_OW 1
78649: ST_TO_ADDR
// end ;
78650: GO 78574
78652: POP
78653: POP
78654: GO 78554
78656: POP
78657: POP
// end ;
78658: LD_VAR 0 4
78662: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78663: LD_INT 0
78665: PPUSH
78666: PPUSH
78667: PPUSH
78668: PPUSH
78669: PPUSH
78670: PPUSH
78671: PPUSH
78672: PPUSH
// if not units then
78673: LD_VAR 0 1
78677: NOT
78678: IFFALSE 78682
// exit ;
78680: GO 79206
// result := UnitFilter ( units , [ f_ok ] ) ;
78682: LD_ADDR_VAR 0 3
78686: PUSH
78687: LD_VAR 0 1
78691: PPUSH
78692: LD_INT 50
78694: PUSH
78695: EMPTY
78696: LIST
78697: PPUSH
78698: CALL_OW 72
78702: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78703: LD_ADDR_VAR 0 8
78707: PUSH
78708: LD_VAR 0 1
78712: PUSH
78713: LD_INT 1
78715: ARRAY
78716: PPUSH
78717: CALL_OW 255
78721: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78722: LD_ADDR_VAR 0 10
78726: PUSH
78727: LD_INT 29
78729: PUSH
78730: LD_INT 91
78732: PUSH
78733: LD_INT 49
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: LIST
78740: ST_TO_ADDR
// if not result then
78741: LD_VAR 0 3
78745: NOT
78746: IFFALSE 78750
// exit ;
78748: GO 79206
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78750: LD_ADDR_VAR 0 5
78754: PUSH
78755: LD_INT 81
78757: PUSH
78758: LD_VAR 0 8
78762: PUSH
78763: EMPTY
78764: LIST
78765: LIST
78766: PPUSH
78767: CALL_OW 69
78771: ST_TO_ADDR
// for i in result do
78772: LD_ADDR_VAR 0 4
78776: PUSH
78777: LD_VAR 0 3
78781: PUSH
78782: FOR_IN
78783: IFFALSE 79204
// begin tag := GetTag ( i ) + 1 ;
78785: LD_ADDR_VAR 0 9
78789: PUSH
78790: LD_VAR 0 4
78794: PPUSH
78795: CALL_OW 110
78799: PUSH
78800: LD_INT 1
78802: PLUS
78803: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78804: LD_ADDR_VAR 0 7
78808: PUSH
78809: LD_VAR 0 4
78813: PPUSH
78814: CALL_OW 250
78818: PPUSH
78819: LD_VAR 0 4
78823: PPUSH
78824: CALL_OW 251
78828: PPUSH
78829: LD_INT 6
78831: PPUSH
78832: CALL 78405 0 3
78836: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78837: LD_VAR 0 4
78841: PPUSH
78842: CALL_OW 247
78846: PUSH
78847: LD_INT 2
78849: EQUAL
78850: PUSH
78851: LD_VAR 0 7
78855: AND
78856: PUSH
78857: LD_VAR 0 4
78861: PPUSH
78862: CALL_OW 264
78866: PUSH
78867: LD_VAR 0 10
78871: IN
78872: NOT
78873: AND
78874: IFFALSE 78913
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78876: LD_VAR 0 4
78880: PPUSH
78881: LD_VAR 0 7
78885: PUSH
78886: LD_INT 1
78888: ARRAY
78889: PUSH
78890: LD_INT 1
78892: ARRAY
78893: PPUSH
78894: LD_VAR 0 7
78898: PUSH
78899: LD_INT 1
78901: ARRAY
78902: PUSH
78903: LD_INT 2
78905: ARRAY
78906: PPUSH
78907: CALL_OW 116
78911: GO 79202
// if path > tag then
78913: LD_VAR 0 2
78917: PUSH
78918: LD_VAR 0 9
78922: GREATER
78923: IFFALSE 79131
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78925: LD_ADDR_VAR 0 6
78929: PUSH
78930: LD_VAR 0 5
78934: PPUSH
78935: LD_INT 91
78937: PUSH
78938: LD_VAR 0 4
78942: PUSH
78943: LD_INT 8
78945: PUSH
78946: EMPTY
78947: LIST
78948: LIST
78949: LIST
78950: PPUSH
78951: CALL_OW 72
78955: ST_TO_ADDR
// if nearEnemy then
78956: LD_VAR 0 6
78960: IFFALSE 79029
// begin if GetWeapon ( i ) = ru_time_lapser then
78962: LD_VAR 0 4
78966: PPUSH
78967: CALL_OW 264
78971: PUSH
78972: LD_INT 49
78974: EQUAL
78975: IFFALSE 79003
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78977: LD_VAR 0 4
78981: PPUSH
78982: LD_VAR 0 6
78986: PPUSH
78987: LD_VAR 0 4
78991: PPUSH
78992: CALL_OW 74
78996: PPUSH
78997: CALL_OW 112
79001: GO 79027
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79003: LD_VAR 0 4
79007: PPUSH
79008: LD_VAR 0 6
79012: PPUSH
79013: LD_VAR 0 4
79017: PPUSH
79018: CALL_OW 74
79022: PPUSH
79023: CALL_OW 115
// end else
79027: GO 79129
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79029: LD_VAR 0 4
79033: PPUSH
79034: LD_VAR 0 2
79038: PUSH
79039: LD_VAR 0 9
79043: ARRAY
79044: PUSH
79045: LD_INT 1
79047: ARRAY
79048: PPUSH
79049: LD_VAR 0 2
79053: PUSH
79054: LD_VAR 0 9
79058: ARRAY
79059: PUSH
79060: LD_INT 2
79062: ARRAY
79063: PPUSH
79064: CALL_OW 297
79068: PUSH
79069: LD_INT 6
79071: GREATER
79072: IFFALSE 79115
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79074: LD_VAR 0 4
79078: PPUSH
79079: LD_VAR 0 2
79083: PUSH
79084: LD_VAR 0 9
79088: ARRAY
79089: PUSH
79090: LD_INT 1
79092: ARRAY
79093: PPUSH
79094: LD_VAR 0 2
79098: PUSH
79099: LD_VAR 0 9
79103: ARRAY
79104: PUSH
79105: LD_INT 2
79107: ARRAY
79108: PPUSH
79109: CALL_OW 114
79113: GO 79129
// SetTag ( i , tag ) ;
79115: LD_VAR 0 4
79119: PPUSH
79120: LD_VAR 0 9
79124: PPUSH
79125: CALL_OW 109
// end else
79129: GO 79202
// if enemy then
79131: LD_VAR 0 5
79135: IFFALSE 79202
// begin if GetWeapon ( i ) = ru_time_lapser then
79137: LD_VAR 0 4
79141: PPUSH
79142: CALL_OW 264
79146: PUSH
79147: LD_INT 49
79149: EQUAL
79150: IFFALSE 79178
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79152: LD_VAR 0 4
79156: PPUSH
79157: LD_VAR 0 5
79161: PPUSH
79162: LD_VAR 0 4
79166: PPUSH
79167: CALL_OW 74
79171: PPUSH
79172: CALL_OW 112
79176: GO 79202
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79178: LD_VAR 0 4
79182: PPUSH
79183: LD_VAR 0 5
79187: PPUSH
79188: LD_VAR 0 4
79192: PPUSH
79193: CALL_OW 74
79197: PPUSH
79198: CALL_OW 115
// end ; end ;
79202: GO 78782
79204: POP
79205: POP
// end ;
79206: LD_VAR 0 3
79210: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79211: LD_INT 0
79213: PPUSH
79214: PPUSH
79215: PPUSH
// if not unit or IsInUnit ( unit ) then
79216: LD_VAR 0 1
79220: NOT
79221: PUSH
79222: LD_VAR 0 1
79226: PPUSH
79227: CALL_OW 310
79231: OR
79232: IFFALSE 79236
// exit ;
79234: GO 79327
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79236: LD_ADDR_VAR 0 4
79240: PUSH
79241: LD_VAR 0 1
79245: PPUSH
79246: CALL_OW 250
79250: PPUSH
79251: LD_VAR 0 2
79255: PPUSH
79256: LD_INT 1
79258: PPUSH
79259: CALL_OW 272
79263: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79264: LD_ADDR_VAR 0 5
79268: PUSH
79269: LD_VAR 0 1
79273: PPUSH
79274: CALL_OW 251
79278: PPUSH
79279: LD_VAR 0 2
79283: PPUSH
79284: LD_INT 1
79286: PPUSH
79287: CALL_OW 273
79291: ST_TO_ADDR
// if ValidHex ( x , y ) then
79292: LD_VAR 0 4
79296: PPUSH
79297: LD_VAR 0 5
79301: PPUSH
79302: CALL_OW 488
79306: IFFALSE 79327
// ComTurnXY ( unit , x , y ) ;
79308: LD_VAR 0 1
79312: PPUSH
79313: LD_VAR 0 4
79317: PPUSH
79318: LD_VAR 0 5
79322: PPUSH
79323: CALL_OW 118
// end ;
79327: LD_VAR 0 3
79331: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79332: LD_INT 0
79334: PPUSH
79335: PPUSH
// result := false ;
79336: LD_ADDR_VAR 0 3
79340: PUSH
79341: LD_INT 0
79343: ST_TO_ADDR
// if not units then
79344: LD_VAR 0 2
79348: NOT
79349: IFFALSE 79353
// exit ;
79351: GO 79398
// for i in units do
79353: LD_ADDR_VAR 0 4
79357: PUSH
79358: LD_VAR 0 2
79362: PUSH
79363: FOR_IN
79364: IFFALSE 79396
// if See ( side , i ) then
79366: LD_VAR 0 1
79370: PPUSH
79371: LD_VAR 0 4
79375: PPUSH
79376: CALL_OW 292
79380: IFFALSE 79394
// begin result := true ;
79382: LD_ADDR_VAR 0 3
79386: PUSH
79387: LD_INT 1
79389: ST_TO_ADDR
// exit ;
79390: POP
79391: POP
79392: GO 79398
// end ;
79394: GO 79363
79396: POP
79397: POP
// end ;
79398: LD_VAR 0 3
79402: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79403: LD_INT 0
79405: PPUSH
79406: PPUSH
79407: PPUSH
79408: PPUSH
// if not unit or not points then
79409: LD_VAR 0 1
79413: NOT
79414: PUSH
79415: LD_VAR 0 2
79419: NOT
79420: OR
79421: IFFALSE 79425
// exit ;
79423: GO 79515
// dist := 99999 ;
79425: LD_ADDR_VAR 0 5
79429: PUSH
79430: LD_INT 99999
79432: ST_TO_ADDR
// for i in points do
79433: LD_ADDR_VAR 0 4
79437: PUSH
79438: LD_VAR 0 2
79442: PUSH
79443: FOR_IN
79444: IFFALSE 79513
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79446: LD_ADDR_VAR 0 6
79450: PUSH
79451: LD_VAR 0 1
79455: PPUSH
79456: LD_VAR 0 4
79460: PUSH
79461: LD_INT 1
79463: ARRAY
79464: PPUSH
79465: LD_VAR 0 4
79469: PUSH
79470: LD_INT 2
79472: ARRAY
79473: PPUSH
79474: CALL_OW 297
79478: ST_TO_ADDR
// if tmpDist < dist then
79479: LD_VAR 0 6
79483: PUSH
79484: LD_VAR 0 5
79488: LESS
79489: IFFALSE 79511
// begin result := i ;
79491: LD_ADDR_VAR 0 3
79495: PUSH
79496: LD_VAR 0 4
79500: ST_TO_ADDR
// dist := tmpDist ;
79501: LD_ADDR_VAR 0 5
79505: PUSH
79506: LD_VAR 0 6
79510: ST_TO_ADDR
// end ; end ;
79511: GO 79443
79513: POP
79514: POP
// end ;
79515: LD_VAR 0 3
79519: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79520: LD_INT 0
79522: PPUSH
// uc_side := side ;
79523: LD_ADDR_OWVAR 20
79527: PUSH
79528: LD_VAR 0 1
79532: ST_TO_ADDR
// uc_nation := 3 ;
79533: LD_ADDR_OWVAR 21
79537: PUSH
79538: LD_INT 3
79540: ST_TO_ADDR
// vc_chassis := 25 ;
79541: LD_ADDR_OWVAR 37
79545: PUSH
79546: LD_INT 25
79548: ST_TO_ADDR
// vc_engine := engine_siberite ;
79549: LD_ADDR_OWVAR 39
79553: PUSH
79554: LD_INT 3
79556: ST_TO_ADDR
// vc_control := control_computer ;
79557: LD_ADDR_OWVAR 38
79561: PUSH
79562: LD_INT 3
79564: ST_TO_ADDR
// vc_weapon := 59 ;
79565: LD_ADDR_OWVAR 40
79569: PUSH
79570: LD_INT 59
79572: ST_TO_ADDR
// result := CreateVehicle ;
79573: LD_ADDR_VAR 0 5
79577: PUSH
79578: CALL_OW 45
79582: ST_TO_ADDR
// SetDir ( result , d ) ;
79583: LD_VAR 0 5
79587: PPUSH
79588: LD_VAR 0 4
79592: PPUSH
79593: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79597: LD_VAR 0 5
79601: PPUSH
79602: LD_VAR 0 2
79606: PPUSH
79607: LD_VAR 0 3
79611: PPUSH
79612: LD_INT 0
79614: PPUSH
79615: CALL_OW 48
// end ;
79619: LD_VAR 0 5
79623: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79624: LD_INT 0
79626: PPUSH
79627: PPUSH
79628: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79629: LD_ADDR_VAR 0 2
79633: PUSH
79634: LD_INT 0
79636: PUSH
79637: LD_INT 0
79639: PUSH
79640: LD_INT 0
79642: PUSH
79643: LD_INT 0
79645: PUSH
79646: EMPTY
79647: LIST
79648: LIST
79649: LIST
79650: LIST
79651: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79652: LD_VAR 0 1
79656: NOT
79657: PUSH
79658: LD_VAR 0 1
79662: PPUSH
79663: CALL_OW 264
79667: PUSH
79668: LD_INT 12
79670: PUSH
79671: LD_INT 51
79673: PUSH
79674: LD_INT 32
79676: PUSH
79677: LD_INT 89
79679: PUSH
79680: EMPTY
79681: LIST
79682: LIST
79683: LIST
79684: LIST
79685: IN
79686: NOT
79687: OR
79688: IFFALSE 79692
// exit ;
79690: GO 79790
// for i := 1 to 3 do
79692: LD_ADDR_VAR 0 3
79696: PUSH
79697: DOUBLE
79698: LD_INT 1
79700: DEC
79701: ST_TO_ADDR
79702: LD_INT 3
79704: PUSH
79705: FOR_TO
79706: IFFALSE 79788
// begin tmp := GetCargo ( cargo , i ) ;
79708: LD_ADDR_VAR 0 4
79712: PUSH
79713: LD_VAR 0 1
79717: PPUSH
79718: LD_VAR 0 3
79722: PPUSH
79723: CALL_OW 289
79727: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79728: LD_ADDR_VAR 0 2
79732: PUSH
79733: LD_VAR 0 2
79737: PPUSH
79738: LD_VAR 0 3
79742: PPUSH
79743: LD_VAR 0 4
79747: PPUSH
79748: CALL_OW 1
79752: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79753: LD_ADDR_VAR 0 2
79757: PUSH
79758: LD_VAR 0 2
79762: PPUSH
79763: LD_INT 4
79765: PPUSH
79766: LD_VAR 0 2
79770: PUSH
79771: LD_INT 4
79773: ARRAY
79774: PUSH
79775: LD_VAR 0 4
79779: PLUS
79780: PPUSH
79781: CALL_OW 1
79785: ST_TO_ADDR
// end ;
79786: GO 79705
79788: POP
79789: POP
// end ;
79790: LD_VAR 0 2
79794: RET
// export function Length ( array ) ; begin
79795: LD_INT 0
79797: PPUSH
// result := array + 0 ;
79798: LD_ADDR_VAR 0 2
79802: PUSH
79803: LD_VAR 0 1
79807: PUSH
79808: LD_INT 0
79810: PLUS
79811: ST_TO_ADDR
// end ;
79812: LD_VAR 0 2
79816: RET
// export function PrepareArray ( array ) ; begin
79817: LD_INT 0
79819: PPUSH
// result := array diff 0 ;
79820: LD_ADDR_VAR 0 2
79824: PUSH
79825: LD_VAR 0 1
79829: PUSH
79830: LD_INT 0
79832: DIFF
79833: ST_TO_ADDR
// if not result [ 1 ] then
79834: LD_VAR 0 2
79838: PUSH
79839: LD_INT 1
79841: ARRAY
79842: NOT
79843: IFFALSE 79863
// result := Delete ( result , 1 ) ;
79845: LD_ADDR_VAR 0 2
79849: PUSH
79850: LD_VAR 0 2
79854: PPUSH
79855: LD_INT 1
79857: PPUSH
79858: CALL_OW 3
79862: ST_TO_ADDR
// end ; end_of_file
79863: LD_VAR 0 2
79867: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79868: LD_VAR 0 1
79872: PUSH
79873: LD_INT 200
79875: DOUBLE
79876: GREATEREQUAL
79877: IFFALSE 79885
79879: LD_INT 299
79881: DOUBLE
79882: LESSEQUAL
79883: IFTRUE 79887
79885: GO 79919
79887: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79888: LD_VAR 0 1
79892: PPUSH
79893: LD_VAR 0 2
79897: PPUSH
79898: LD_VAR 0 3
79902: PPUSH
79903: LD_VAR 0 4
79907: PPUSH
79908: LD_VAR 0 5
79912: PPUSH
79913: CALL 34770 0 5
79917: GO 79996
79919: LD_INT 300
79921: DOUBLE
79922: GREATEREQUAL
79923: IFFALSE 79931
79925: LD_INT 399
79927: DOUBLE
79928: LESSEQUAL
79929: IFTRUE 79933
79931: GO 79995
79933: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79934: LD_VAR 0 1
79938: PPUSH
79939: LD_VAR 0 2
79943: PPUSH
79944: LD_VAR 0 3
79948: PPUSH
79949: LD_VAR 0 4
79953: PPUSH
79954: LD_VAR 0 5
79958: PPUSH
79959: LD_VAR 0 6
79963: PPUSH
79964: LD_VAR 0 7
79968: PPUSH
79969: LD_VAR 0 8
79973: PPUSH
79974: LD_VAR 0 9
79978: PPUSH
79979: LD_VAR 0 10
79983: PPUSH
79984: LD_VAR 0 11
79988: PPUSH
79989: CALL 31103 0 11
79993: GO 79996
79995: POP
// end ;
79996: PPOPN 11
79998: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79999: LD_VAR 0 1
80003: PPUSH
80004: LD_VAR 0 2
80008: PPUSH
80009: LD_VAR 0 3
80013: PPUSH
80014: LD_VAR 0 4
80018: PPUSH
80019: LD_VAR 0 5
80023: PPUSH
80024: CALL 34506 0 5
// end ; end_of_file
80028: PPOPN 5
80030: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80031: LD_VAR 0 1
80035: PPUSH
80036: LD_VAR 0 2
80040: PPUSH
80041: LD_VAR 0 3
80045: PPUSH
80046: LD_VAR 0 4
80050: PPUSH
80051: LD_VAR 0 5
80055: PPUSH
80056: LD_VAR 0 6
80060: PPUSH
80061: CALL 18796 0 6
// end ;
80065: PPOPN 6
80067: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80068: LD_INT 0
80070: PPUSH
// begin if not units then
80071: LD_VAR 0 1
80075: NOT
80076: IFFALSE 80080
// exit ;
80078: GO 80080
// end ;
80080: PPOPN 7
80082: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80083: CALL 18767 0 0
// end ;
80087: PPOPN 1
80089: END
