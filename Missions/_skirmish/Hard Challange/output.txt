// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10108 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10238 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11645 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13874 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 1200 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 1200
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8327 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6376 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6376 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6376 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6376 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6376 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6227 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6227 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8100 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6227 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6227 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8100 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10626 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5251
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6136 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10552 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5469 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5469 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9143 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 69595 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6376 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6517 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6592 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8499 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6376 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6931 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7539 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7830 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6227 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6227 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6227 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7978 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8100 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7978 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8100 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7978 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8100 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8100 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6136 0 1
3087: PPUSH
3088: CALL 5828 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6136 0 1
3108: PPUSH
3109: CALL 5828 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11350 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5469 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3498
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3496
// if GetLives ( ru_attack_list [ i ] ) >= 250 and not HasTask ( ru_attack_list [ i ] ) then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: PUSH
3416: LD_EXP 10
3420: PUSH
3421: LD_VAR 0 1
3425: ARRAY
3426: PPUSH
3427: CALL_OW 314
3431: NOT
3432: AND
3433: IFFALSE 3494
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3435: LD_EXP 10
3439: PUSH
3440: LD_VAR 0 1
3444: ARRAY
3445: PPUSH
3446: LD_INT 81
3448: PUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_VAR 0 1
3458: ARRAY
3459: PPUSH
3460: CALL_OW 255
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: PPUSH
3474: LD_EXP 10
3478: PUSH
3479: LD_VAR 0 1
3483: ARRAY
3484: PPUSH
3485: CALL_OW 74
3489: PPUSH
3490: CALL_OW 115
3494: GO 3393
3496: POP
3497: POP
// end ; if GetBehemoth ( 3 ) then
3498: LD_INT 3
3500: PPUSH
3501: CALL 11350 0 1
3505: IFFALSE 3877
// begin if ru_mech >= 4 then
3507: LD_EXP 22
3511: PUSH
3512: LD_INT 4
3514: GREATEREQUAL
3515: IFFALSE 3566
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3517: LD_ADDR_EXP 15
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 1
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 2
3538: ARRAY
3539: PUSH
3540: LD_EXP 22
3544: PUSH
3545: LD_INT 3
3547: ARRAY
3548: PUSH
3549: LD_EXP 22
3553: PUSH
3554: LD_INT 4
3556: ARRAY
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: ST_TO_ADDR
3564: GO 3576
// ru_behemoth_mechanic := ru_mech ;
3566: LD_ADDR_EXP 15
3570: PUSH
3571: LD_EXP 22
3575: ST_TO_ADDR
// for i = 1 to ru_mech do
3576: LD_ADDR_VAR 0 1
3580: PUSH
3581: DOUBLE
3582: LD_INT 1
3584: DEC
3585: ST_TO_ADDR
3586: LD_EXP 22
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3646
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3594: LD_EXP 22
3598: PUSH
3599: LD_VAR 0 1
3603: ARRAY
3604: PPUSH
3605: CALL_OW 310
3609: PUSH
3610: LD_EXP 22
3614: PUSH
3615: LD_VAR 0 1
3619: ARRAY
3620: PUSH
3621: LD_EXP 15
3625: IN
3626: AND
3627: IFFALSE 3644
// ComExitBuilding ( ru_mech [ i ] ) ;
3629: LD_EXP 22
3633: PUSH
3634: LD_VAR 0 1
3638: ARRAY
3639: PPUSH
3640: CALL_OW 122
3644: GO 3591
3646: POP
3647: POP
// if UnitsInside ( ru_fac ) = 0 then
3648: LD_INT 14
3650: PPUSH
3651: CALL_OW 313
3655: PUSH
3656: LD_INT 0
3658: EQUAL
3659: IFFALSE 3726
// begin InitHc_All ;
3661: CALL_OW 584
// for i := 1 to 5 do
3665: LD_ADDR_VAR 0 1
3669: PUSH
3670: DOUBLE
3671: LD_INT 1
3673: DEC
3674: ST_TO_ADDR
3675: LD_INT 5
3677: PUSH
3678: FOR_TO
3679: IFFALSE 3724
// begin uc_side := 3 ;
3681: LD_ADDR_OWVAR 20
3685: PUSH
3686: LD_INT 3
3688: ST_TO_ADDR
// uc_nation := 3 ;
3689: LD_ADDR_OWVAR 21
3693: PUSH
3694: LD_INT 3
3696: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: LD_INT 7
3705: PPUSH
3706: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3710: CALL_OW 44
3714: PPUSH
3715: LD_INT 14
3717: PPUSH
3718: CALL_OW 52
// end ;
3722: GO 3678
3724: POP
3725: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3726: LD_INT 12
3728: PPUSH
3729: LD_INT 22
3731: PUSH
3732: LD_INT 1
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: LD_INT 21
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PPUSH
3753: CALL_OW 70
3757: PUSH
3758: LD_INT 0
3760: GREATER
3761: IFFALSE 3821
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3763: LD_INT 3
3765: PPUSH
3766: CALL 11350 0 1
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: PPUSH
3775: LD_INT 21
3777: PUSH
3778: LD_INT 2
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 34
3787: PUSH
3788: LD_INT 49
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PPUSH
3799: CALL_OW 69
3803: PPUSH
3804: LD_EXP 15
3808: PPUSH
3809: LD_INT 97
3811: PPUSH
3812: LD_INT 9
3814: PPUSH
3815: CALL 10847 0 5
3819: GO 3877
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3821: LD_INT 3
3823: PPUSH
3824: CALL 11350 0 1
3828: PUSH
3829: LD_INT 1
3831: ARRAY
3832: PPUSH
3833: LD_INT 21
3835: PUSH
3836: LD_INT 2
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 34
3845: PUSH
3846: LD_INT 49
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: PPUSH
3862: LD_EXP 15
3866: PPUSH
3867: LD_INT 153
3869: PPUSH
3870: LD_INT 102
3872: PPUSH
3873: CALL 10847 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3877: LD_EXP 24
3881: PUSH
3882: LD_INT 0
3884: EQUAL
3885: PUSH
3886: LD_INT 44
3888: PPUSH
3889: LD_INT 3
3891: PPUSH
3892: CALL_OW 321
3896: PUSH
3897: LD_INT 2
3899: EQUAL
3900: AND
3901: IFFALSE 3912
// ComChangeClassToBazooker ( ru_sold ) ;
3903: LD_EXP 20
3907: PPUSH
3908: CALL 9784 0 1
// if ru_bazz then
3912: LD_EXP 24
3916: IFFALSE 3930
// IntBazooka ( ru_bazz , 1 ) ;
3918: LD_EXP 24
3922: PPUSH
3923: LD_INT 1
3925: PPUSH
3926: CALL 9503 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3930: LD_INT 67
3932: PPUSH
3933: LD_INT 39
3935: PPUSH
3936: LD_INT 3
3938: PPUSH
3939: CALL_OW 440
3943: PUSH
3944: LD_INT 0
3946: EQUAL
3947: PUSH
3948: LD_INT 20
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: CALL_OW 321
3958: PUSH
3959: LD_INT 2
3961: EQUAL
3962: AND
3963: IFFALSE 3984
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3965: LD_EXP 23
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_INT 67
3976: PPUSH
3977: LD_INT 39
3979: PPUSH
3980: CALL 9082 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3984: LD_INT 89
3986: PPUSH
3987: LD_INT 66
3989: PPUSH
3990: LD_INT 3
3992: PPUSH
3993: CALL_OW 440
3997: PUSH
3998: LD_INT 0
4000: EQUAL
4001: IFFALSE 4022
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
4003: LD_EXP 23
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: LD_INT 87
4014: PPUSH
4015: LD_INT 60
4017: PPUSH
4018: CALL 9082 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4022: LD_INT 104
4024: PPUSH
4025: LD_INT 94
4027: PPUSH
4028: LD_INT 3
4030: PPUSH
4031: CALL_OW 440
4035: PUSH
4036: LD_INT 0
4038: EQUAL
4039: PUSH
4040: LD_INT 20
4042: PPUSH
4043: LD_INT 3
4045: PPUSH
4046: CALL_OW 321
4050: PUSH
4051: LD_INT 2
4053: EQUAL
4054: AND
4055: IFFALSE 4076
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4057: LD_EXP 23
4061: PUSH
4062: LD_INT 1
4064: ARRAY
4065: PPUSH
4066: LD_INT 104
4068: PPUSH
4069: LD_INT 94
4071: PPUSH
4072: CALL 9082 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4076: LD_INT 3
4078: PPUSH
4079: LD_INT 24
4081: PPUSH
4082: LD_INT 53
4084: PPUSH
4085: CALL 7978 0 3
4089: PUSH
4090: LD_INT 1
4092: EQUAL
4093: PUSH
4094: LD_EXP 18
4098: AND
4099: IFFALSE 4240
// begin need_buldozer := false ;
4101: LD_ADDR_EXP 18
4105: PUSH
4106: LD_INT 0
4108: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4109: LD_INT 3
4111: PPUSH
4112: LD_INT 24
4114: PPUSH
4115: LD_INT 53
4117: PPUSH
4118: CALL 7978 0 3
4122: PUSH
4123: LD_INT 1
4125: ARRAY
4126: PPUSH
4127: LD_INT 67
4129: PPUSH
4130: LD_INT 39
4132: PPUSH
4133: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4137: LD_INT 3
4139: PPUSH
4140: LD_INT 24
4142: PPUSH
4143: LD_INT 53
4145: PPUSH
4146: CALL 7978 0 3
4150: PUSH
4151: LD_INT 1
4153: ARRAY
4154: PPUSH
4155: LD_INT 71
4157: PPUSH
4158: LD_INT 10
4160: PPUSH
4161: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4165: LD_INT 3
4167: PPUSH
4168: LD_INT 24
4170: PPUSH
4171: LD_INT 53
4173: PPUSH
4174: CALL 7978 0 3
4178: PUSH
4179: LD_INT 1
4181: ARRAY
4182: PPUSH
4183: LD_INT 15
4185: PPUSH
4186: CALL 5569 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 24
4195: PPUSH
4196: LD_INT 53
4198: PPUSH
4199: CALL 7978 0 3
4203: PUSH
4204: LD_INT 1
4206: ARRAY
4207: PPUSH
4208: LD_INT 350
4210: PPUSH
4211: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4215: LD_INT 3
4217: PPUSH
4218: LD_INT 24
4220: PPUSH
4221: LD_INT 53
4223: PPUSH
4224: CALL 7978 0 3
4228: PUSH
4229: LD_INT 1
4231: ARRAY
4232: PPUSH
4233: LD_INT 14
4235: PPUSH
4236: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4240: LD_INT 67
4242: PPUSH
4243: LD_INT 39
4245: PPUSH
4246: LD_INT 3
4248: PPUSH
4249: CALL_OW 440
4253: PUSH
4254: LD_INT 67
4256: PPUSH
4257: LD_INT 39
4259: PPUSH
4260: CALL_OW 428
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: AND
4269: PUSH
4270: LD_INT 79
4272: PPUSH
4273: LD_INT 45
4275: PPUSH
4276: CALL_OW 428
4280: PPUSH
4281: CALL_OW 266
4285: PUSH
4286: LD_INT 0
4288: EQUAL
4289: AND
4290: PUSH
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 79
4296: PPUSH
4297: LD_INT 45
4299: PPUSH
4300: CALL 5469 0 3
4304: PUSH
4305: LD_INT 0
4307: EQUAL
4308: AND
4309: IFFALSE 4412
// begin for i = 1 to ru_eng do
4311: LD_ADDR_VAR 0 1
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_EXP 21
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4410
// if IsInUnit ( ru_eng [ i ] ) then
4329: LD_EXP 21
4333: PUSH
4334: LD_VAR 0 1
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4363
// ComExitBuilding ( ru_eng [ i ] ) else
4346: LD_EXP 21
4350: PUSH
4351: LD_VAR 0 1
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
4361: GO 4408
// if not HasTask ( ru_eng [ i ] ) then
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: CALL_OW 314
4378: NOT
4379: IFFALSE 4408
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4381: LD_EXP 21
4385: PUSH
4386: LD_VAR 0 1
4390: ARRAY
4391: PPUSH
4392: LD_INT 30
4394: PPUSH
4395: LD_INT 67
4397: PPUSH
4398: LD_INT 39
4400: PPUSH
4401: LD_INT 3
4403: PPUSH
4404: CALL_OW 145
4408: GO 4326
4410: POP
4411: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4412: LD_INT 1
4414: PPUSH
4415: LD_INT 79
4417: PPUSH
4418: LD_INT 45
4420: PPUSH
4421: CALL 5469 0 3
4425: PUSH
4426: LD_INT 0
4428: EQUAL
4429: IFFALSE 4625
// begin if HexInfo ( 79 , 45 ) = 0 then
4431: LD_INT 79
4433: PPUSH
4434: LD_INT 45
4436: PPUSH
4437: CALL_OW 428
4441: PUSH
4442: LD_INT 0
4444: EQUAL
4445: IFFALSE 4467
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4447: LD_EXP 21
4451: PPUSH
4452: LD_INT 79
4454: PPUSH
4455: LD_INT 45
4457: PPUSH
4458: LD_INT 3
4460: PPUSH
4461: CALL 6993 0 4
4465: GO 4625
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4467: LD_INT 89
4469: PPUSH
4470: LD_INT 66
4472: PPUSH
4473: CALL_OW 428
4477: PUSH
4478: LD_INT 0
4480: EQUAL
4481: PUSH
4482: LD_INT 89
4484: PPUSH
4485: LD_INT 66
4487: PPUSH
4488: LD_INT 3
4490: PPUSH
4491: CALL_OW 440
4495: AND
4496: IFFALSE 4625
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4498: LD_INT 79
4500: PPUSH
4501: LD_INT 45
4503: PPUSH
4504: CALL_OW 428
4508: PPUSH
4509: CALL_OW 274
4513: PPUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_INT 100
4519: PPUSH
4520: CALL_OW 277
// for i = 1 to ru_eng do
4524: LD_ADDR_VAR 0 1
4528: PUSH
4529: DOUBLE
4530: LD_INT 1
4532: DEC
4533: ST_TO_ADDR
4534: LD_EXP 21
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4623
// if IsInUnit ( ru_eng [ i ] ) then
4542: LD_EXP 21
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: CALL_OW 310
4557: IFFALSE 4576
// ComExitBuilding ( ru_eng [ i ] ) else
4559: LD_EXP 21
4563: PUSH
4564: LD_VAR 0 1
4568: ARRAY
4569: PPUSH
4570: CALL_OW 122
4574: GO 4621
// if not HasTask ( ru_eng [ i ] ) then
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: CALL_OW 314
4591: NOT
4592: IFFALSE 4621
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4594: LD_EXP 21
4598: PUSH
4599: LD_VAR 0 1
4603: ARRAY
4604: PPUSH
4605: LD_INT 29
4607: PPUSH
4608: LD_INT 89
4610: PPUSH
4611: LD_INT 66
4613: PPUSH
4614: LD_INT 3
4616: PPUSH
4617: CALL_OW 145
4621: GO 4539
4623: POP
4624: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4625: LD_INT 3
4627: PPUSH
4628: LD_INT 29
4630: PPUSH
4631: CALL 6227 0 2
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: PUSH
4640: LD_INT 1
4642: PPUSH
4643: LD_INT 36
4645: PPUSH
4646: LD_INT 6
4648: PPUSH
4649: CALL 5469 0 3
4653: PUSH
4654: LD_INT 0
4656: EQUAL
4657: AND
4658: PUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL 6136 0 1
4666: PPUSH
4667: LD_INT 29
4669: PPUSH
4670: CALL 5712 0 2
4674: AND
4675: IFFALSE 4778
// begin for i = 1 to ru_eng do
4677: LD_ADDR_VAR 0 1
4681: PUSH
4682: DOUBLE
4683: LD_INT 1
4685: DEC
4686: ST_TO_ADDR
4687: LD_EXP 21
4691: PUSH
4692: FOR_TO
4693: IFFALSE 4776
// begin if IsInUnit ( ru_eng [ i ] ) then
4695: LD_EXP 21
4699: PUSH
4700: LD_VAR 0 1
4704: ARRAY
4705: PPUSH
4706: CALL_OW 310
4710: IFFALSE 4729
// ComExitBuilding ( ru_eng [ i ] ) else
4712: LD_EXP 21
4716: PUSH
4717: LD_VAR 0 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 122
4727: GO 4774
// if not HasTask ( ru_eng [ i ] ) then
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: CALL_OW 314
4744: NOT
4745: IFFALSE 4774
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4747: LD_EXP 21
4751: PUSH
4752: LD_VAR 0 1
4756: ARRAY
4757: PPUSH
4758: LD_INT 29
4760: PPUSH
4761: LD_INT 33
4763: PPUSH
4764: LD_INT 4
4766: PPUSH
4767: LD_INT 0
4769: PPUSH
4770: CALL_OW 205
// end ; end ;
4774: GO 4692
4776: POP
4777: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4778: LD_EXP 21
4782: PUSH
4783: LD_INT 79
4785: PPUSH
4786: LD_INT 45
4788: PPUSH
4789: CALL_OW 428
4793: PUSH
4794: LD_INT 0
4796: GREATER
4797: AND
4798: PUSH
4799: LD_INT 79
4801: PPUSH
4802: LD_INT 45
4804: PPUSH
4805: CALL_OW 428
4809: PPUSH
4810: CALL_OW 266
4814: PUSH
4815: LD_INT 0
4817: EQUAL
4818: AND
4819: IFFALSE 4979
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4821: LD_INT 79
4823: PPUSH
4824: LD_INT 45
4826: PPUSH
4827: CALL_OW 428
4831: PPUSH
4832: CALL_OW 255
4836: PUSH
4837: LD_INT 3
4839: EQUAL
4840: PUSH
4841: LD_INT 1
4843: PPUSH
4844: LD_INT 79
4846: PPUSH
4847: LD_INT 45
4849: PPUSH
4850: CALL 5469 0 3
4854: PUSH
4855: LD_INT 0
4857: EQUAL
4858: AND
4859: PUSH
4860: LD_INT 79
4862: PPUSH
4863: LD_INT 45
4865: PPUSH
4866: CALL_OW 428
4870: PPUSH
4871: CALL_OW 274
4875: PPUSH
4876: LD_INT 3
4878: PPUSH
4879: CALL_OW 275
4883: PUSH
4884: LD_INT 10
4886: GREATEREQUAL
4887: AND
4888: IFFALSE 4979
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4890: LD_EXP 21
4894: PUSH
4895: LD_INT 1
4897: ARRAY
4898: PPUSH
4899: CALL_OW 310
4903: IFFALSE 4920
// ComExitBuilding ( ru_eng [ 1 ] ) else
4905: LD_EXP 21
4909: PUSH
4910: LD_INT 1
4912: ARRAY
4913: PPUSH
4914: CALL_OW 122
4918: GO 4979
// if not HasTask ( ru_eng [ 1 ] ) then
4920: LD_EXP 21
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PPUSH
4929: CALL_OW 314
4933: NOT
4934: IFFALSE 4979
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4936: LD_EXP 21
4940: PUSH
4941: LD_INT 1
4943: ARRAY
4944: PPUSH
4945: LD_INT 79
4947: PPUSH
4948: LD_INT 45
4950: PPUSH
4951: CALL_OW 428
4955: PPUSH
4956: LD_INT 3
4958: PPUSH
4959: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4963: LD_EXP 21
4967: PUSH
4968: LD_INT 1
4970: ARRAY
4971: PPUSH
4972: LD_INT 2
4974: PPUSH
4975: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4979: LD_EXP 21
4983: PUSH
4984: LD_INT 2
4986: GREATER
4987: PUSH
4988: LD_INT 79
4990: PPUSH
4991: LD_INT 45
4993: PPUSH
4994: CALL_OW 428
4998: PUSH
4999: LD_INT 0
5001: GREATER
5002: AND
5003: PUSH
5004: LD_INT 79
5006: PPUSH
5007: LD_INT 45
5009: PPUSH
5010: CALL_OW 428
5014: PPUSH
5015: CALL_OW 266
5019: PUSH
5020: LD_INT 0
5022: EQUAL
5023: AND
5024: IFFALSE 5184
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5026: LD_INT 79
5028: PPUSH
5029: LD_INT 45
5031: PPUSH
5032: CALL_OW 428
5036: PPUSH
5037: CALL_OW 255
5041: PUSH
5042: LD_INT 3
5044: EQUAL
5045: PUSH
5046: LD_INT 1
5048: PPUSH
5049: LD_INT 79
5051: PPUSH
5052: LD_INT 45
5054: PPUSH
5055: CALL 5469 0 3
5059: PUSH
5060: LD_INT 0
5062: EQUAL
5063: AND
5064: PUSH
5065: LD_INT 79
5067: PPUSH
5068: LD_INT 45
5070: PPUSH
5071: CALL_OW 428
5075: PPUSH
5076: CALL_OW 274
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: CALL_OW 275
5088: PUSH
5089: LD_INT 20
5091: GREATER
5092: AND
5093: IFFALSE 5184
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5095: LD_EXP 21
5099: PUSH
5100: LD_INT 2
5102: ARRAY
5103: PPUSH
5104: CALL_OW 310
5108: IFFALSE 5125
// ComExitBuilding ( ru_eng [ 2 ] ) else
5110: LD_EXP 21
5114: PUSH
5115: LD_INT 2
5117: ARRAY
5118: PPUSH
5119: CALL_OW 122
5123: GO 5184
// if not HasTask ( ru_eng [ 2 ] ) then
5125: LD_EXP 21
5129: PUSH
5130: LD_INT 2
5132: ARRAY
5133: PPUSH
5134: CALL_OW 314
5138: NOT
5139: IFFALSE 5184
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5141: LD_EXP 21
5145: PUSH
5146: LD_INT 2
5148: ARRAY
5149: PPUSH
5150: LD_INT 79
5152: PPUSH
5153: LD_INT 45
5155: PPUSH
5156: CALL_OW 428
5160: PPUSH
5161: LD_INT 1
5163: PPUSH
5164: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5168: LD_EXP 21
5172: PUSH
5173: LD_INT 2
5175: ARRAY
5176: PPUSH
5177: LD_INT 2
5179: PPUSH
5180: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 59
5189: PPUSH
5190: LD_INT 60
5192: PPUSH
5193: CALL 5469 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: PUSH
5202: LD_INT 1
5204: PPUSH
5205: LD_INT 67
5207: PPUSH
5208: LD_INT 76
5210: PPUSH
5211: CALL 5469 0 3
5215: PUSH
5216: LD_INT 0
5218: EQUAL
5219: AND
5220: PUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 79
5226: PPUSH
5227: LD_INT 100
5229: PPUSH
5230: CALL 5469 0 3
5234: PUSH
5235: LD_INT 0
5237: EQUAL
5238: AND
5239: IFFALSE 5251
// CollectCrates ( 3 , west_crates ) ;
5241: LD_INT 3
5243: PPUSH
5244: LD_INT 13
5246: PPUSH
5247: CALL 11394 0 2
// end ;
5251: PPOPN 10
5253: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5254: LD_OWVAR 1
5258: PUSH
5259: LD_INT 111300
5261: LESSEQUAL
5262: PUSH
5263: LD_EXP 30
5267: NOT
5268: OR
5269: IFFALSE 5466
5271: GO 5273
5273: DISABLE
5274: LD_INT 0
5276: PPUSH
// begin enable ;
5277: ENABLE
// uc_nation := 3 ;
5278: LD_ADDR_OWVAR 21
5282: PUSH
5283: LD_INT 3
5285: ST_TO_ADDR
// uc_side := 3 ;
5286: LD_ADDR_OWVAR 20
5290: PUSH
5291: LD_INT 3
5293: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5294: LD_ADDR_OWVAR 37
5298: PUSH
5299: LD_INT 22
5301: ST_TO_ADDR
// vc_engine := engine_siberite ;
5302: LD_ADDR_OWVAR 39
5306: PUSH
5307: LD_INT 3
5309: ST_TO_ADDR
// vc_control := control_computer ;
5310: LD_ADDR_OWVAR 38
5314: PUSH
5315: LD_INT 3
5317: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5318: LD_ADDR_OWVAR 40
5322: PUSH
5323: LD_INT 51
5325: ST_TO_ADDR
// veh := CreateVehicle ;
5326: LD_ADDR_VAR 0 1
5330: PUSH
5331: CALL_OW 45
5335: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5336: LD_VAR 0 1
5340: PPUSH
5341: LD_INT 4
5343: PPUSH
5344: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 10
5355: PPUSH
5356: LD_INT 0
5358: PPUSH
5359: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5363: LD_VAR 0 1
5367: PPUSH
5368: LD_INT 1
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: LD_INT 3
5376: PUSH
5377: LD_INT 2
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 1
5388: PPUSH
5389: LD_INT 4
5391: PPUSH
5392: CALL_OW 12
5396: ARRAY
5397: PPUSH
5398: LD_INT 100
5400: PPUSH
5401: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5405: LD_VAR 0 1
5409: PPUSH
5410: LD_INT 2
5412: PPUSH
5413: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5417: LD_VAR 0 1
5421: PPUSH
5422: LD_INT 10
5424: PPUSH
5425: CALL_OW 173
// Wait ( 0 0$10 ) ;
5429: LD_INT 350
5431: PPUSH
5432: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5436: LD_INT 35
5438: PPUSH
5439: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5443: LD_VAR 0 1
5447: PPUSH
5448: LD_INT 10
5450: PPUSH
5451: CALL_OW 308
5455: IFFALSE 5436
// RemoveUnit ( veh ) ;
5457: LD_VAR 0 1
5461: PPUSH
5462: CALL_OW 64
// end ; end_of_file
5466: PPOPN 1
5468: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5469: LD_INT 0
5471: PPUSH
5472: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5473: LD_ADDR_VAR 0 5
5477: PUSH
5478: LD_INT 22
5480: PUSH
5481: LD_VAR 0 1
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PPUSH
5490: CALL_OW 69
5494: PPUSH
5495: LD_VAR 0 2
5499: PPUSH
5500: LD_VAR 0 3
5504: PPUSH
5505: CALL_OW 73
5509: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5510: LD_ADDR_VAR 0 4
5514: PUSH
5515: LD_VAR 0 5
5519: PPUSH
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_VAR 0 3
5529: PPUSH
5530: CALL_OW 297
5534: PUSH
5535: LD_INT 15
5537: LESS
5538: PUSH
5539: LD_INT 2
5541: PPUSH
5542: LD_INT 22
5544: PUSH
5545: LD_VAR 0 1
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PPUSH
5554: CALL_OW 70
5558: PUSH
5559: LD_INT 0
5561: GREATER
5562: OR
5563: ST_TO_ADDR
// end ;
5564: LD_VAR 0 4
5568: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5569: LD_INT 0
5571: PPUSH
5572: PPUSH
// area = ListEnvironmentArea ( area ) ;
5573: LD_ADDR_VAR 0 2
5577: PUSH
5578: LD_VAR 0 2
5582: PPUSH
5583: CALL_OW 353
5587: ST_TO_ADDR
// if bulldozer > 0 then
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 0
5595: GREATER
5596: IFFALSE 5707
// for i = 1 to area do
5598: LD_ADDR_VAR 0 4
5602: PUSH
5603: DOUBLE
5604: LD_INT 1
5606: DEC
5607: ST_TO_ADDR
5608: LD_VAR 0 2
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5705
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5616: LD_VAR 0 2
5620: PUSH
5621: LD_VAR 0 4
5625: ARRAY
5626: PUSH
5627: LD_INT 1
5629: ARRAY
5630: PPUSH
5631: LD_VAR 0 2
5635: PUSH
5636: LD_VAR 0 4
5640: ARRAY
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 351
5650: IFFALSE 5703
// if not HasTask ( bulldozer ) then
5652: LD_VAR 0 1
5656: PPUSH
5657: CALL_OW 314
5661: NOT
5662: IFFALSE 5703
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5664: LD_VAR 0 1
5668: PPUSH
5669: LD_VAR 0 2
5673: PUSH
5674: LD_VAR 0 4
5678: ARRAY
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PPUSH
5684: LD_VAR 0 2
5688: PUSH
5689: LD_VAR 0 4
5693: ARRAY
5694: PUSH
5695: LD_INT 2
5697: ARRAY
5698: PPUSH
5699: CALL_OW 171
5703: GO 5613
5705: POP
5706: POP
// end ;
5707: LD_VAR 0 3
5711: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5712: LD_INT 0
5714: PPUSH
5715: PPUSH
5716: PPUSH
// pom := GetBase ( bdepot ) ;
5717: LD_ADDR_VAR 0 4
5721: PUSH
5722: LD_VAR 0 1
5726: PPUSH
5727: CALL_OW 274
5731: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5732: LD_ADDR_VAR 0 5
5736: PUSH
5737: LD_VAR 0 2
5741: PPUSH
5742: LD_VAR 0 1
5746: PPUSH
5747: CALL_OW 248
5751: PPUSH
5752: CALL_OW 450
5756: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5757: LD_VAR 0 4
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: CALL_OW 275
5769: PUSH
5770: LD_VAR 0 5
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: GREATEREQUAL
5779: PUSH
5780: LD_VAR 0 4
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: CALL_OW 275
5792: PUSH
5793: LD_VAR 0 5
5797: PUSH
5798: LD_INT 3
5800: ARRAY
5801: GREATEREQUAL
5802: AND
5803: IFFALSE 5815
// result := true else
5805: LD_ADDR_VAR 0 3
5809: PUSH
5810: LD_INT 1
5812: ST_TO_ADDR
5813: GO 5823
// result := false ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_INT 0
5822: ST_TO_ADDR
// end ;
5823: LD_VAR 0 3
5827: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5828: LD_INT 0
5830: PPUSH
5831: PPUSH
5832: PPUSH
// pom := GetBase ( bdepot ) ;
5833: LD_ADDR_VAR 0 3
5837: PUSH
5838: LD_VAR 0 1
5842: PPUSH
5843: CALL_OW 274
5847: ST_TO_ADDR
// sor := [ ] ;
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: EMPTY
5854: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5855: LD_ADDR_VAR 0 4
5859: PUSH
5860: LD_VAR 0 4
5864: PUSH
5865: LD_VAR 0 3
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: CALL_OW 275
5877: ADD
5878: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5879: LD_ADDR_VAR 0 4
5883: PUSH
5884: LD_VAR 0 4
5888: PUSH
5889: LD_VAR 0 3
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL_OW 275
5901: ADD
5902: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5903: LD_ADDR_VAR 0 4
5907: PUSH
5908: LD_VAR 0 4
5912: PUSH
5913: LD_VAR 0 3
5917: PPUSH
5918: LD_INT 3
5920: PPUSH
5921: CALL_OW 275
5925: ADD
5926: ST_TO_ADDR
// result := sor ;
5927: LD_ADDR_VAR 0 2
5931: PUSH
5932: LD_VAR 0 4
5936: ST_TO_ADDR
// end ;
5937: LD_VAR 0 2
5941: RET
// export function Hex ( x , y ) ; begin
5942: LD_INT 0
5944: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_VAR 0 2
5954: PPUSH
5955: CALL_OW 488
5959: PUSH
5960: LD_VAR 0 1
5964: PPUSH
5965: LD_VAR 0 2
5969: PPUSH
5970: CALL_OW 428
5974: PUSH
5975: LD_INT 0
5977: EQUAL
5978: AND
5979: IFFALSE 5991
// result := true else
5981: LD_ADDR_VAR 0 3
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
5989: GO 5999
// result := false ;
5991: LD_ADDR_VAR 0 3
5995: PUSH
5996: LD_INT 0
5998: ST_TO_ADDR
// end ;
5999: LD_VAR 0 3
6003: RET
// export function NeedBuilding ( side , btype ) ; begin
6004: LD_INT 0
6006: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 30
6021: PUSH
6022: LD_VAR 0 2
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 3
6033: PUSH
6034: LD_INT 57
6036: PUSH
6037: EMPTY
6038: LIST
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: PPUSH
6049: CALL_OW 69
6053: PUSH
6054: LD_INT 0
6056: EQUAL
6057: IFFALSE 6069
// result := true else
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: LD_INT 1
6066: ST_TO_ADDR
6067: GO 6077
// result := false ;
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: LD_INT 0
6076: ST_TO_ADDR
// end ;
6077: LD_VAR 0 3
6081: RET
// export function NeedBase ( side ) ; begin
6082: LD_INT 0
6084: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6085: LD_VAR 0 1
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL 6004 0 2
6097: PUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: LD_INT 1
6105: PPUSH
6106: CALL 6004 0 2
6110: AND
6111: IFFALSE 6123
// result := true else
6113: LD_ADDR_VAR 0 2
6117: PUSH
6118: LD_INT 1
6120: ST_TO_ADDR
6121: GO 6131
// result := false ;
6123: LD_ADDR_VAR 0 2
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// end ;
6131: LD_VAR 0 2
6135: RET
// export function MyBase ( side ) ; begin
6136: LD_INT 0
6138: PPUSH
// if not NeedBase ( side ) then
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 6082 0 1
6148: NOT
6149: IFFALSE 6214
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6151: LD_ADDR_VAR 0 2
6155: PUSH
6156: LD_INT 22
6158: PUSH
6159: LD_VAR 0 1
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 30
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 30
6183: PUSH
6184: LD_INT 1
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: PPUSH
6203: CALL_OW 69
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: ST_TO_ADDR
6212: GO 6222
// result := false ;
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: LD_INT 0
6221: ST_TO_ADDR
// end ;
6222: LD_VAR 0 2
6226: RET
// export function GetBuilding ( side , btype ) ; begin
6227: LD_INT 0
6229: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6230: LD_INT 22
6232: PUSH
6233: LD_VAR 0 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 30
6244: PUSH
6245: LD_VAR 0 2
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PPUSH
6258: CALL_OW 69
6262: PUSH
6263: LD_INT 0
6265: GREATER
6266: IFFALSE 6308
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6268: LD_ADDR_VAR 0 3
6272: PUSH
6273: LD_INT 22
6275: PUSH
6276: LD_VAR 0 1
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: LD_INT 30
6287: PUSH
6288: LD_VAR 0 2
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 69
6305: ST_TO_ADDR
6306: GO 6316
// result := false ;
6308: LD_ADDR_VAR 0 3
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// end ;
6316: LD_VAR 0 3
6320: RET
// export function GetCrates ( side ) ; begin
6321: LD_INT 0
6323: PPUSH
// result := 0 ;
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// if MyBase ( side ) then
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL 6136 0 1
6341: IFFALSE 6371
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: LD_VAR 0 1
6352: PPUSH
6353: CALL 6136 0 1
6357: PPUSH
6358: CALL_OW 274
6362: PPUSH
6363: LD_INT 1
6365: PPUSH
6366: CALL_OW 275
6370: ST_TO_ADDR
// end ;
6371: LD_VAR 0 2
6375: RET
// export function GetLabs ( side ) ; begin
6376: LD_INT 0
6378: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6379: LD_ADDR_VAR 0 2
6383: PUSH
6384: LD_INT 22
6386: PUSH
6387: LD_VAR 0 1
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 2
6398: PUSH
6399: LD_INT 30
6401: PUSH
6402: LD_INT 6
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 30
6411: PUSH
6412: LD_INT 8
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 30
6421: PUSH
6422: LD_INT 7
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: EMPTY
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: ST_TO_ADDR
// end ;
6447: LD_VAR 0 2
6451: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6452: LD_INT 0
6454: PPUSH
6455: PPUSH
6456: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6457: LD_ADDR_VAR 0 3
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 1
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6475: LD_ADDR_VAR 0 4
6479: PUSH
6480: LD_VAR 0 1
6484: PPUSH
6485: LD_INT 2
6487: PPUSH
6488: CALL_OW 268
6492: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: LD_VAR 0 3
6502: PUSH
6503: LD_VAR 0 4
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: ST_TO_ADDR
// end ;
6512: LD_VAR 0 2
6516: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6517: LD_INT 0
6519: PPUSH
6520: PPUSH
// result := false ;
6521: LD_ADDR_VAR 0 3
6525: PUSH
6526: LD_INT 0
6528: ST_TO_ADDR
// for i = 1 to tlist do
6529: LD_ADDR_VAR 0 4
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_VAR 0 2
6543: PUSH
6544: FOR_TO
6545: IFFALSE 6585
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6547: LD_VAR 0 2
6551: PUSH
6552: LD_VAR 0 4
6556: ARRAY
6557: PPUSH
6558: LD_VAR 0 1
6562: PPUSH
6563: CALL_OW 321
6567: PUSH
6568: LD_INT 2
6570: NONEQUAL
6571: IFFALSE 6583
// begin result := true ;
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 1
6580: ST_TO_ADDR
// break ;
6581: GO 6585
// end ;
6583: GO 6544
6585: POP
6586: POP
// end ;
6587: LD_VAR 0 3
6591: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6592: LD_INT 0
6594: PPUSH
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
6600: PPUSH
6601: PPUSH
// lab := GetLabs ( side ) ;
6602: LD_ADDR_VAR 0 5
6606: PUSH
6607: LD_VAR 0 1
6611: PPUSH
6612: CALL 6376 0 1
6616: ST_TO_ADDR
// tmp := 0 ;
6617: LD_ADDR_VAR 0 7
6621: PUSH
6622: LD_INT 0
6624: ST_TO_ADDR
// list := [ ] ;
6625: LD_ADDR_VAR 0 8
6629: PUSH
6630: EMPTY
6631: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6632: LD_ADDR_VAR 0 10
6636: PUSH
6637: LD_INT 35
6639: PUSH
6640: LD_INT 45
6642: PUSH
6643: LD_INT 46
6645: PUSH
6646: LD_INT 47
6648: PUSH
6649: LD_INT 1
6651: PUSH
6652: LD_INT 2
6654: PUSH
6655: LD_INT 48
6657: PUSH
6658: LD_INT 49
6660: PUSH
6661: LD_INT 50
6663: PUSH
6664: LD_INT 20
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: ST_TO_ADDR
// for i = 1 to tlist do
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_VAR 0 2
6693: PUSH
6694: FOR_TO
6695: IFFALSE 6747
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6697: LD_VAR 0 2
6701: PUSH
6702: LD_VAR 0 4
6706: ARRAY
6707: PPUSH
6708: LD_VAR 0 1
6712: PPUSH
6713: CALL_OW 321
6717: PUSH
6718: LD_INT 2
6720: NONEQUAL
6721: IFFALSE 6745
// list := list ^ tlist [ i ] ;
6723: LD_ADDR_VAR 0 8
6727: PUSH
6728: LD_VAR 0 8
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: LD_VAR 0 4
6742: ARRAY
6743: ADD
6744: ST_TO_ADDR
6745: GO 6694
6747: POP
6748: POP
// if list then
6749: LD_VAR 0 8
6753: IFFALSE 6918
// begin for i = 1 to lab do
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: DOUBLE
6761: LD_INT 1
6763: DEC
6764: ST_TO_ADDR
6765: LD_VAR 0 5
6769: PUSH
6770: FOR_TO
6771: IFFALSE 6841
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6773: LD_VAR 0 8
6777: PUSH
6778: LD_INT 1
6780: ARRAY
6781: PUSH
6782: LD_VAR 0 10
6786: IN
6787: PUSH
6788: LD_VAR 0 8
6792: PUSH
6793: LD_INT 1
6795: ARRAY
6796: PPUSH
6797: CALL_OW 481
6801: PUSH
6802: LD_VAR 0 5
6806: PUSH
6807: LD_VAR 0 4
6811: ARRAY
6812: PPUSH
6813: CALL 6452 0 1
6817: IN
6818: OR
6819: IFFALSE 6839
// begin mylab := lab [ i ] ;
6821: LD_ADDR_VAR 0 9
6825: PUSH
6826: LD_VAR 0 5
6830: PUSH
6831: LD_VAR 0 4
6835: ARRAY
6836: ST_TO_ADDR
// break ;
6837: GO 6841
// end ;
6839: GO 6770
6841: POP
6842: POP
// if mylab then
6843: LD_VAR 0 9
6847: IFFALSE 6908
// begin if BuildingStatus ( mylab ) = bs_idle then
6849: LD_VAR 0 9
6853: PPUSH
6854: CALL_OW 461
6858: PUSH
6859: LD_INT 2
6861: EQUAL
6862: IFFALSE 6906
// for i = 1 to list do
6864: LD_ADDR_VAR 0 4
6868: PUSH
6869: DOUBLE
6870: LD_INT 1
6872: DEC
6873: ST_TO_ADDR
6874: LD_VAR 0 8
6878: PUSH
6879: FOR_TO
6880: IFFALSE 6904
// AddComResearch ( mylab , list [ i ] ) ;
6882: LD_VAR 0 9
6886: PPUSH
6887: LD_VAR 0 8
6891: PUSH
6892: LD_VAR 0 4
6896: ARRAY
6897: PPUSH
6898: CALL_OW 184
6902: GO 6879
6904: POP
6905: POP
// end else
6906: GO 6916
// result := false ;
6908: LD_ADDR_VAR 0 3
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// end else
6916: GO 6926
// result := false ;
6918: LD_ADDR_VAR 0 3
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// end ;
6926: LD_VAR 0 3
6930: RET
// export function GetTowers ( side ) ; begin
6931: LD_INT 0
6933: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6934: LD_ADDR_VAR 0 2
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_VAR 0 1
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 2
6953: PUSH
6954: LD_INT 30
6956: PUSH
6957: LD_INT 32
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 33
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PPUSH
6983: CALL_OW 69
6987: ST_TO_ADDR
// end ;
6988: LD_VAR 0 2
6992: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6993: LD_INT 0
6995: PPUSH
6996: PPUSH
// if Hex ( x , y ) then
6997: LD_VAR 0 2
7001: PPUSH
7002: LD_VAR 0 3
7006: PPUSH
7007: CALL 5942 0 2
7011: IFFALSE 7086
// for i = 1 to plist do
7013: LD_ADDR_VAR 0 6
7017: PUSH
7018: DOUBLE
7019: LD_INT 1
7021: DEC
7022: ST_TO_ADDR
7023: LD_VAR 0 1
7027: PUSH
7028: FOR_TO
7029: IFFALSE 7084
// if not HasTask ( plist [ i ] ) then
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: CALL_OW 314
7046: NOT
7047: IFFALSE 7082
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7049: LD_VAR 0 1
7053: PUSH
7054: LD_VAR 0 6
7058: ARRAY
7059: PPUSH
7060: LD_INT 0
7062: PPUSH
7063: LD_VAR 0 2
7067: PPUSH
7068: LD_VAR 0 3
7072: PPUSH
7073: LD_VAR 0 4
7077: PPUSH
7078: CALL_OW 145
7082: GO 7028
7084: POP
7085: POP
// end ;
7086: LD_VAR 0 5
7090: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7091: LD_INT 0
7093: PPUSH
7094: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 266
7104: PUSH
7105: LD_INT 0
7107: EQUAL
7108: PUSH
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL 5712 0 2
7121: AND
7122: PUSH
7123: LD_VAR 0 1
7127: PUSH
7128: LD_INT 1
7130: ARRAY
7131: PPUSH
7132: CALL_OW 255
7136: PPUSH
7137: CALL_OW 345
7141: NOT
7142: AND
7143: IFFALSE 7239
// begin ComUpgrade ( bident ) ;
7145: LD_VAR 0 2
7149: PPUSH
7150: CALL_OW 146
// for i = 1 to plist do
7154: LD_ADDR_VAR 0 4
7158: PUSH
7159: DOUBLE
7160: LD_INT 1
7162: DEC
7163: ST_TO_ADDR
7164: LD_VAR 0 1
7168: PUSH
7169: FOR_TO
7170: IFFALSE 7227
// if not HasTask ( plist [ i ] ) then
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: CALL_OW 314
7187: NOT
7188: IFFALSE 7225
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7190: LD_VAR 0 1
7194: PUSH
7195: LD_VAR 0 4
7199: ARRAY
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: CALL_OW 250
7210: PPUSH
7211: LD_VAR 0 2
7215: PPUSH
7216: CALL_OW 251
7220: PPUSH
7221: CALL_OW 111
7225: GO 7169
7227: POP
7228: POP
// result := true ;
7229: LD_ADDR_VAR 0 3
7233: PUSH
7234: LD_INT 1
7236: ST_TO_ADDR
// end else
7237: GO 7247
// result := false ;
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_INT 0
7246: ST_TO_ADDR
// end ;
7247: LD_VAR 0 3
7251: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7252: LD_INT 0
7254: PPUSH
7255: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7256: LD_VAR 0 1
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PPUSH
7265: CALL_OW 255
7269: PPUSH
7270: CALL 6321 0 1
7274: PUSH
7275: LD_INT 20
7277: GREATEREQUAL
7278: PUSH
7279: LD_VAR 0 2
7283: PPUSH
7284: LD_VAR 0 3
7288: PPUSH
7289: CALL 5942 0 2
7293: AND
7294: IFFALSE 7379
// begin for i = 1 to plist do
7296: LD_ADDR_VAR 0 6
7300: PUSH
7301: DOUBLE
7302: LD_INT 1
7304: DEC
7305: ST_TO_ADDR
7306: LD_VAR 0 1
7310: PUSH
7311: FOR_TO
7312: IFFALSE 7367
// if not HasTask ( plist [ i ] ) then
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: CALL_OW 314
7329: NOT
7330: IFFALSE 7365
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7332: LD_VAR 0 1
7336: PUSH
7337: LD_VAR 0 6
7341: ARRAY
7342: PPUSH
7343: LD_INT 6
7345: PPUSH
7346: LD_VAR 0 2
7350: PPUSH
7351: LD_VAR 0 3
7355: PPUSH
7356: LD_VAR 0 4
7360: PPUSH
7361: CALL_OW 145
7365: GO 7311
7367: POP
7368: POP
// result := true ;
7369: LD_ADDR_VAR 0 5
7373: PUSH
7374: LD_INT 1
7376: ST_TO_ADDR
// end else
7377: GO 7387
// result := false ;
7379: LD_ADDR_VAR 0 5
7383: PUSH
7384: LD_INT 0
7386: ST_TO_ADDR
// end ;
7387: LD_VAR 0 5
7391: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7392: LD_INT 0
7394: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_INT 1
7402: PPUSH
7403: CALL_OW 268
7407: PUSH
7408: LD_INT 9
7410: EQUAL
7411: PUSH
7412: LD_VAR 0 1
7416: PPUSH
7417: LD_INT 2
7419: PPUSH
7420: CALL_OW 268
7424: PUSH
7425: LD_INT 9
7427: EQUAL
7428: AND
7429: IFFALSE 7526
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7431: LD_VAR 0 1
7435: PPUSH
7436: LD_VAR 0 2
7440: PPUSH
7441: CALL 5712 0 2
7445: PUSH
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 3
7455: PPUSH
7456: CALL 5712 0 2
7460: AND
7461: PUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 461
7471: PUSH
7472: LD_INT 2
7474: EQUAL
7475: AND
7476: IFFALSE 7516
// begin ComUpgradeLab ( lab , bkind1 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_VAR 0 2
7487: PPUSH
7488: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7492: LD_VAR 0 1
7496: PPUSH
7497: LD_VAR 0 3
7501: PPUSH
7502: CALL_OW 207
// result := true ;
7506: LD_ADDR_VAR 0 4
7510: PUSH
7511: LD_INT 1
7513: ST_TO_ADDR
// end else
7514: GO 7524
// result := false ;
7516: LD_ADDR_VAR 0 4
7520: PUSH
7521: LD_INT 0
7523: ST_TO_ADDR
// end else
7524: GO 7534
// result := false ;
7526: LD_ADDR_VAR 0 4
7530: PUSH
7531: LD_INT 0
7533: ST_TO_ADDR
// end ;
7534: LD_VAR 0 4
7538: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
// p := 1 ;
7546: LD_ADDR_VAR 0 6
7550: PUSH
7551: LD_INT 1
7553: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7554: LD_ADDR_VAR 0 4
7558: PUSH
7559: DOUBLE
7560: LD_INT 1
7562: DEC
7563: ST_TO_ADDR
7564: LD_VAR 0 2
7568: PUSH
7569: LD_INT 4
7571: DIVREAL
7572: PUSH
7573: FOR_TO
7574: IFFALSE 7823
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7576: LD_VAR 0 2
7580: PUSH
7581: LD_VAR 0 6
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: ARRAY
7590: PPUSH
7591: LD_VAR 0 2
7595: PUSH
7596: LD_VAR 0 6
7600: PUSH
7601: LD_INT 2
7603: PLUS
7604: ARRAY
7605: PPUSH
7606: CALL_OW 428
7610: PUSH
7611: LD_INT 0
7613: EQUAL
7614: PUSH
7615: LD_VAR 0 2
7619: PUSH
7620: LD_VAR 0 6
7624: PUSH
7625: LD_INT 1
7627: PLUS
7628: ARRAY
7629: PPUSH
7630: LD_VAR 0 2
7634: PUSH
7635: LD_VAR 0 6
7639: PUSH
7640: LD_INT 2
7642: PLUS
7643: ARRAY
7644: PPUSH
7645: CALL 5942 0 2
7649: AND
7650: PUSH
7651: LD_VAR 0 1
7655: PUSH
7656: LD_INT 1
7658: ARRAY
7659: PPUSH
7660: CALL_OW 255
7664: PPUSH
7665: CALL 6321 0 1
7669: PUSH
7670: LD_INT 20
7672: GREATEREQUAL
7673: AND
7674: IFFALSE 7791
// begin for c = 1 to plist do
7676: LD_ADDR_VAR 0 7
7680: PUSH
7681: DOUBLE
7682: LD_INT 1
7684: DEC
7685: ST_TO_ADDR
7686: LD_VAR 0 1
7690: PUSH
7691: FOR_TO
7692: IFFALSE 7785
// if not HasTask ( plist [ c ] ) then
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: CALL_OW 314
7709: NOT
7710: IFFALSE 7783
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7712: LD_VAR 0 1
7716: PUSH
7717: LD_VAR 0 7
7721: ARRAY
7722: PPUSH
7723: LD_VAR 0 2
7727: PUSH
7728: LD_VAR 0 6
7732: ARRAY
7733: PPUSH
7734: LD_VAR 0 2
7738: PUSH
7739: LD_VAR 0 6
7743: PUSH
7744: LD_INT 1
7746: PLUS
7747: ARRAY
7748: PPUSH
7749: LD_VAR 0 2
7753: PUSH
7754: LD_VAR 0 6
7758: PUSH
7759: LD_INT 2
7761: PLUS
7762: ARRAY
7763: PPUSH
7764: LD_VAR 0 2
7768: PUSH
7769: LD_VAR 0 6
7773: PUSH
7774: LD_INT 3
7776: PLUS
7777: ARRAY
7778: PPUSH
7779: CALL_OW 145
7783: GO 7691
7785: POP
7786: POP
// break ;
7787: GO 7823
// end else
7789: GO 7821
// if ( p + 4 < tlist ) then
7791: LD_VAR 0 6
7795: PUSH
7796: LD_INT 4
7798: PLUS
7799: PUSH
7800: LD_VAR 0 2
7804: LESS
7805: IFFALSE 7821
// p := p + 4 ;
7807: LD_ADDR_VAR 0 6
7811: PUSH
7812: LD_VAR 0 6
7816: PUSH
7817: LD_INT 4
7819: PLUS
7820: ST_TO_ADDR
// end ;
7821: GO 7573
7823: POP
7824: POP
// end ;
7825: LD_VAR 0 3
7829: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7830: LD_INT 0
7832: PPUSH
7833: PPUSH
7834: PPUSH
7835: PPUSH
// tmp := GetTowers ( side ) ;
7836: LD_ADDR_VAR 0 5
7840: PUSH
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL 6931 0 1
7850: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7851: LD_ADDR_VAR 0 6
7855: PUSH
7856: LD_VAR 0 1
7860: PPUSH
7861: LD_INT 3
7863: PPUSH
7864: CALL 6227 0 2
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// if fac then
7873: LD_VAR 0 6
7877: IFFALSE 7973
// for i = 1 to tmp do
7879: LD_ADDR_VAR 0 4
7883: PUSH
7884: DOUBLE
7885: LD_INT 1
7887: DEC
7888: ST_TO_ADDR
7889: LD_VAR 0 5
7893: PUSH
7894: FOR_TO
7895: IFFALSE 7971
// if GetBWeapon ( tmp [ i ] ) = 0 then
7897: LD_VAR 0 5
7901: PUSH
7902: LD_VAR 0 4
7906: ARRAY
7907: PPUSH
7908: CALL_OW 269
7912: PUSH
7913: LD_INT 0
7915: EQUAL
7916: IFFALSE 7969
// begin if BuildingStatus ( fac ) = bs_idle then
7918: LD_VAR 0 6
7922: PPUSH
7923: CALL_OW 461
7927: PUSH
7928: LD_INT 2
7930: EQUAL
7931: IFFALSE 7967
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7933: LD_VAR 0 5
7937: PUSH
7938: LD_VAR 0 4
7942: ARRAY
7943: PPUSH
7944: LD_VAR 0 2
7948: PUSH
7949: LD_INT 1
7951: PPUSH
7952: LD_VAR 0 2
7956: PPUSH
7957: CALL_OW 12
7961: ARRAY
7962: PPUSH
7963: CALL_OW 148
// break ;
7967: GO 7971
// end ;
7969: GO 7894
7971: POP
7972: POP
// end ;
7973: LD_VAR 0 3
7977: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7978: LD_INT 0
7980: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7981: LD_INT 22
7983: PUSH
7984: LD_VAR 0 1
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: LD_INT 34
7995: PUSH
7996: LD_VAR 0 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 31
8007: PUSH
8008: LD_VAR 0 2
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: PPUSH
8025: CALL_OW 69
8029: IFFALSE 8087
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8031: LD_ADDR_VAR 0 4
8035: PUSH
8036: LD_INT 22
8038: PUSH
8039: LD_VAR 0 1
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 34
8050: PUSH
8051: LD_VAR 0 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 31
8062: PUSH
8063: LD_VAR 0 2
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: PPUSH
8080: CALL_OW 69
8084: ST_TO_ADDR
8085: GO 8095
// result := false ;
8087: LD_ADDR_VAR 0 4
8091: PUSH
8092: LD_INT 0
8094: ST_TO_ADDR
// end ;
8095: LD_VAR 0 4
8099: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8100: LD_INT 0
8102: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8103: LD_VAR 0 1
8107: PPUSH
8108: LD_VAR 0 2
8112: PPUSH
8113: LD_VAR 0 3
8117: PPUSH
8118: LD_VAR 0 4
8122: PPUSH
8123: LD_VAR 0 5
8127: PPUSH
8128: CALL_OW 448
8132: PUSH
8133: LD_VAR 0 2
8137: PPUSH
8138: LD_VAR 0 3
8142: PPUSH
8143: LD_VAR 0 4
8147: PPUSH
8148: LD_VAR 0 5
8152: PPUSH
8153: CALL_OW 449
8157: PUSH
8158: LD_INT 1
8160: ARRAY
8161: PUSH
8162: LD_VAR 0 1
8166: PPUSH
8167: CALL 5828 0 1
8171: PUSH
8172: LD_INT 1
8174: ARRAY
8175: LESSEQUAL
8176: AND
8177: PUSH
8178: LD_VAR 0 2
8182: PPUSH
8183: LD_VAR 0 3
8187: PPUSH
8188: LD_VAR 0 4
8192: PPUSH
8193: LD_VAR 0 5
8197: PPUSH
8198: CALL_OW 449
8202: PUSH
8203: LD_INT 2
8205: ARRAY
8206: PUSH
8207: LD_VAR 0 1
8211: PPUSH
8212: CALL 5828 0 1
8216: PUSH
8217: LD_INT 2
8219: ARRAY
8220: LESSEQUAL
8221: AND
8222: PUSH
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_VAR 0 3
8232: PPUSH
8233: LD_VAR 0 4
8237: PPUSH
8238: LD_VAR 0 5
8242: PPUSH
8243: CALL_OW 449
8247: PUSH
8248: LD_INT 3
8250: ARRAY
8251: PUSH
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL 5828 0 1
8261: PUSH
8262: LD_INT 3
8264: ARRAY
8265: LESSEQUAL
8266: AND
8267: IFFALSE 8314
// begin if debug then
8269: LD_EXP 1
8273: IFFALSE 8283
// display_strings := Factory work! ;
8275: LD_ADDR_OWVAR 47
8279: PUSH
8280: LD_STRING Factory work!
8282: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8283: LD_VAR 0 1
8287: PPUSH
8288: LD_VAR 0 2
8292: PPUSH
8293: LD_VAR 0 3
8297: PPUSH
8298: LD_VAR 0 4
8302: PPUSH
8303: LD_VAR 0 5
8307: PPUSH
8308: CALL_OW 125
// end else
8312: GO 8322
// result := false ;
8314: LD_ADDR_VAR 0 6
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// end ;
8322: LD_VAR 0 6
8326: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8327: LD_INT 0
8329: PPUSH
8330: PPUSH
8331: PPUSH
8332: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8333: LD_ADDR_VAR 0 6
8337: PUSH
8338: LD_INT 22
8340: PUSH
8341: LD_VAR 0 1
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: LD_INT 30
8352: PUSH
8353: LD_VAR 0 2
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PPUSH
8366: CALL_OW 69
8370: ST_TO_ADDR
// tmp := [ ] ;
8371: LD_ADDR_VAR 0 5
8375: PUSH
8376: EMPTY
8377: ST_TO_ADDR
// for i = 1 to filter do
8378: LD_ADDR_VAR 0 4
8382: PUSH
8383: DOUBLE
8384: LD_INT 1
8386: DEC
8387: ST_TO_ADDR
8388: LD_VAR 0 6
8392: PUSH
8393: FOR_TO
8394: IFFALSE 8482
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8396: LD_ADDR_VAR 0 5
8400: PUSH
8401: LD_VAR 0 5
8405: PUSH
8406: LD_VAR 0 6
8410: PUSH
8411: LD_VAR 0 4
8415: ARRAY
8416: PPUSH
8417: CALL_OW 266
8421: PUSH
8422: LD_VAR 0 6
8426: PUSH
8427: LD_VAR 0 4
8431: ARRAY
8432: PPUSH
8433: CALL_OW 250
8437: PUSH
8438: LD_VAR 0 6
8442: PUSH
8443: LD_VAR 0 4
8447: ARRAY
8448: PPUSH
8449: CALL_OW 251
8453: PUSH
8454: LD_VAR 0 6
8458: PUSH
8459: LD_VAR 0 4
8463: ARRAY
8464: PPUSH
8465: CALL_OW 254
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: EMPTY
8477: LIST
8478: ADD
8479: ST_TO_ADDR
// end ;
8480: GO 8393
8482: POP
8483: POP
// result := tmp ;
8484: LD_ADDR_VAR 0 3
8488: PUSH
8489: LD_VAR 0 5
8493: ST_TO_ADDR
// end ;
8494: LD_VAR 0 3
8498: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8499: LD_INT 0
8501: PPUSH
8502: PPUSH
8503: PPUSH
// for i = 1 to list do
8504: LD_ADDR_VAR 0 4
8508: PUSH
8509: DOUBLE
8510: LD_INT 1
8512: DEC
8513: ST_TO_ADDR
8514: LD_VAR 0 2
8518: PUSH
8519: FOR_TO
8520: IFFALSE 9075
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8522: LD_VAR 0 2
8526: PUSH
8527: LD_VAR 0 4
8531: ARRAY
8532: PUSH
8533: LD_INT 1
8535: ARRAY
8536: PPUSH
8537: LD_VAR 0 2
8541: PUSH
8542: LD_VAR 0 4
8546: ARRAY
8547: PUSH
8548: LD_INT 2
8550: ARRAY
8551: PPUSH
8552: CALL_OW 428
8556: PUSH
8557: LD_INT 0
8559: GREATER
8560: IFFALSE 8846
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8562: LD_VAR 0 2
8566: PUSH
8567: LD_VAR 0 4
8571: ARRAY
8572: PUSH
8573: LD_INT 1
8575: ARRAY
8576: PPUSH
8577: LD_VAR 0 2
8581: PUSH
8582: LD_VAR 0 4
8586: ARRAY
8587: PUSH
8588: LD_INT 2
8590: ARRAY
8591: PPUSH
8592: CALL_OW 428
8596: PPUSH
8597: CALL_OW 248
8601: PUSH
8602: LD_INT 3
8604: EQUAL
8605: IFFALSE 8731
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8607: LD_VAR 0 2
8611: PUSH
8612: LD_VAR 0 4
8616: ARRAY
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: LD_VAR 0 2
8626: PUSH
8627: LD_VAR 0 4
8631: ARRAY
8632: PUSH
8633: LD_INT 2
8635: ARRAY
8636: PPUSH
8637: CALL_OW 428
8641: PPUSH
8642: CALL_OW 274
8646: PPUSH
8647: LD_INT 3
8649: PPUSH
8650: CALL_OW 275
8654: PUSH
8655: LD_INT 15
8657: GREATEREQUAL
8658: IFFALSE 8729
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8660: LD_VAR 0 2
8664: PUSH
8665: LD_VAR 0 4
8669: ARRAY
8670: PUSH
8671: LD_INT 1
8673: ARRAY
8674: PPUSH
8675: LD_VAR 0 2
8679: PUSH
8680: LD_VAR 0 4
8684: ARRAY
8685: PUSH
8686: LD_INT 2
8688: ARRAY
8689: PPUSH
8690: CALL_OW 428
8694: PPUSH
8695: LD_VAR 0 2
8699: PUSH
8700: LD_VAR 0 4
8704: ARRAY
8705: PUSH
8706: LD_INT 4
8708: ARRAY
8709: PPUSH
8710: LD_VAR 0 2
8714: PUSH
8715: LD_VAR 0 4
8719: ARRAY
8720: PUSH
8721: LD_INT 5
8723: ARRAY
8724: PPUSH
8725: CALL 7392 0 3
// end else
8729: GO 8800
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8731: LD_VAR 0 2
8735: PUSH
8736: LD_VAR 0 4
8740: ARRAY
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PPUSH
8746: LD_VAR 0 2
8750: PUSH
8751: LD_VAR 0 4
8755: ARRAY
8756: PUSH
8757: LD_INT 2
8759: ARRAY
8760: PPUSH
8761: CALL_OW 428
8765: PPUSH
8766: LD_VAR 0 2
8770: PUSH
8771: LD_VAR 0 4
8775: ARRAY
8776: PUSH
8777: LD_INT 4
8779: ARRAY
8780: PPUSH
8781: LD_VAR 0 2
8785: PUSH
8786: LD_VAR 0 4
8790: ARRAY
8791: PUSH
8792: LD_INT 5
8794: ARRAY
8795: PPUSH
8796: CALL 7392 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8800: LD_VAR 0 1
8804: PPUSH
8805: LD_VAR 0 2
8809: PUSH
8810: LD_VAR 0 4
8814: ARRAY
8815: PUSH
8816: LD_INT 1
8818: ARRAY
8819: PPUSH
8820: LD_VAR 0 2
8824: PUSH
8825: LD_VAR 0 4
8829: ARRAY
8830: PUSH
8831: LD_INT 2
8833: ARRAY
8834: PPUSH
8835: CALL_OW 428
8839: PPUSH
8840: CALL 10344 0 2
// end else
8844: GO 9073
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8846: LD_VAR 0 1
8850: PUSH
8851: LD_INT 1
8853: ARRAY
8854: PPUSH
8855: CALL_OW 255
8859: PPUSH
8860: CALL 6136 0 1
8864: PPUSH
8865: LD_INT 6
8867: PPUSH
8868: CALL 5712 0 2
8872: PUSH
8873: LD_VAR 0 1
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: PPUSH
8882: CALL_OW 255
8886: PPUSH
8887: CALL 6136 0 1
8891: PPUSH
8892: LD_VAR 0 2
8896: PUSH
8897: LD_VAR 0 4
8901: ARRAY
8902: PUSH
8903: LD_INT 4
8905: ARRAY
8906: PPUSH
8907: CALL 5712 0 2
8911: AND
8912: PUSH
8913: LD_VAR 0 1
8917: PUSH
8918: LD_INT 1
8920: ARRAY
8921: PPUSH
8922: CALL_OW 255
8926: PPUSH
8927: CALL 6136 0 1
8931: PPUSH
8932: LD_VAR 0 2
8936: PUSH
8937: LD_VAR 0 4
8941: ARRAY
8942: PUSH
8943: LD_INT 5
8945: ARRAY
8946: PPUSH
8947: CALL 5712 0 2
8951: AND
8952: IFFALSE 9073
// for p = 1 to plist do
8954: LD_ADDR_VAR 0 5
8958: PUSH
8959: DOUBLE
8960: LD_INT 1
8962: DEC
8963: ST_TO_ADDR
8964: LD_VAR 0 1
8968: PUSH
8969: FOR_TO
8970: IFFALSE 9071
// if IsInUnit ( plist [ p ] ) then
8972: LD_VAR 0 1
8976: PUSH
8977: LD_VAR 0 5
8981: ARRAY
8982: PPUSH
8983: CALL_OW 310
8987: IFFALSE 9006
// ComExitBuilding ( plist [ p ] ) else
8989: LD_VAR 0 1
8993: PUSH
8994: LD_VAR 0 5
8998: ARRAY
8999: PPUSH
9000: CALL_OW 122
9004: GO 9069
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
9006: LD_VAR 0 1
9010: PUSH
9011: LD_VAR 0 5
9015: ARRAY
9016: PPUSH
9017: LD_INT 6
9019: PPUSH
9020: LD_VAR 0 2
9024: PUSH
9025: LD_VAR 0 4
9029: ARRAY
9030: PUSH
9031: LD_INT 1
9033: ARRAY
9034: PPUSH
9035: LD_VAR 0 2
9039: PUSH
9040: LD_VAR 0 4
9044: ARRAY
9045: PUSH
9046: LD_INT 2
9048: ARRAY
9049: PPUSH
9050: LD_VAR 0 2
9054: PUSH
9055: LD_VAR 0 4
9059: ARRAY
9060: PUSH
9061: LD_INT 3
9063: ARRAY
9064: PPUSH
9065: CALL_OW 145
9069: GO 8969
9071: POP
9072: POP
// end ;
9073: GO 8519
9075: POP
9076: POP
// end ;
9077: LD_VAR 0 3
9081: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9082: LD_INT 0
9084: PPUSH
// if IsInUnit ( sci ) then
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 310
9094: IFFALSE 9107
// ComExitBuilding ( sci ) else
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 122
9105: GO 9138
// if not HasTask ( sci ) then
9107: LD_VAR 0 1
9111: PPUSH
9112: CALL_OW 314
9116: NOT
9117: IFFALSE 9138
// begin ComMoveXY ( sci , x , y ) ;
9119: LD_VAR 0 1
9123: PPUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: LD_VAR 0 3
9133: PPUSH
9134: CALL_OW 111
// end ; end ;
9138: LD_VAR 0 4
9142: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9143: LD_INT 0
9145: PPUSH
9146: PPUSH
9147: PPUSH
9148: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9149: LD_ADDR_VAR 0 6
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_VAR 0 1
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 21
9168: PUSH
9169: LD_INT 1
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PPUSH
9180: CALL_OW 69
9184: PUSH
9185: LD_VAR 0 3
9189: DIFF
9190: ST_TO_ADDR
// tmp := tag_list ;
9191: LD_ADDR_VAR 0 7
9195: PUSH
9196: LD_VAR 0 2
9200: ST_TO_ADDR
// for i = 1 to filter do
9201: LD_ADDR_VAR 0 5
9205: PUSH
9206: DOUBLE
9207: LD_INT 1
9209: DEC
9210: ST_TO_ADDR
9211: LD_VAR 0 6
9215: PUSH
9216: FOR_TO
9217: IFFALSE 9486
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9219: LD_VAR 0 6
9223: PUSH
9224: LD_VAR 0 5
9228: ARRAY
9229: PPUSH
9230: CALL_OW 256
9234: PUSH
9235: LD_INT 1000
9237: EQUAL
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_VAR 0 5
9248: ARRAY
9249: PPUSH
9250: CALL_OW 110
9254: PUSH
9255: LD_INT 100
9257: GREATEREQUAL
9258: AND
9259: IFFALSE 9301
// begin SetTag ( filter [ i ] , 0 ) ;
9261: LD_VAR 0 6
9265: PUSH
9266: LD_VAR 0 5
9270: ARRAY
9271: PPUSH
9272: LD_INT 0
9274: PPUSH
9275: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9279: LD_ADDR_VAR 0 7
9283: PUSH
9284: LD_VAR 0 7
9288: PUSH
9289: LD_VAR 0 6
9293: PUSH
9294: LD_VAR 0 5
9298: ARRAY
9299: DIFF
9300: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9301: LD_VAR 0 6
9305: PUSH
9306: LD_VAR 0 5
9310: ARRAY
9311: PPUSH
9312: CALL_OW 256
9316: PUSH
9317: LD_INT 1000
9319: LESS
9320: IFFALSE 9484
// begin if not filter [ i ] in tmp then
9322: LD_VAR 0 6
9326: PUSH
9327: LD_VAR 0 5
9331: ARRAY
9332: PUSH
9333: LD_VAR 0 7
9337: IN
9338: NOT
9339: IFFALSE 9363
// tmp := tmp ^ filter [ i ] ;
9341: LD_ADDR_VAR 0 7
9345: PUSH
9346: LD_VAR 0 7
9350: PUSH
9351: LD_VAR 0 6
9355: PUSH
9356: LD_VAR 0 5
9360: ARRAY
9361: ADD
9362: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9363: LD_VAR 0 6
9367: PUSH
9368: LD_VAR 0 5
9372: ARRAY
9373: PPUSH
9374: CALL_OW 256
9378: PUSH
9379: LD_INT 250
9381: LESS
9382: IFFALSE 9404
// SetTag ( filter [ i ] , 100 ) else
9384: LD_VAR 0 6
9388: PUSH
9389: LD_VAR 0 5
9393: ARRAY
9394: PPUSH
9395: LD_INT 100
9397: PPUSH
9398: CALL_OW 109
9402: GO 9484
// if GetLives ( filter [ i ] ) < 500 then
9404: LD_VAR 0 6
9408: PUSH
9409: LD_VAR 0 5
9413: ARRAY
9414: PPUSH
9415: CALL_OW 256
9419: PUSH
9420: LD_INT 500
9422: LESS
9423: IFFALSE 9445
// SetTag ( filter [ i ] , 101 ) else
9425: LD_VAR 0 6
9429: PUSH
9430: LD_VAR 0 5
9434: ARRAY
9435: PPUSH
9436: LD_INT 101
9438: PPUSH
9439: CALL_OW 109
9443: GO 9484
// if GetLives ( filter [ i ] ) < 1000 then
9445: LD_VAR 0 6
9449: PUSH
9450: LD_VAR 0 5
9454: ARRAY
9455: PPUSH
9456: CALL_OW 256
9460: PUSH
9461: LD_INT 1000
9463: LESS
9464: IFFALSE 9484
// SetTag ( filter [ i ] , 102 ) ;
9466: LD_VAR 0 6
9470: PUSH
9471: LD_VAR 0 5
9475: ARRAY
9476: PPUSH
9477: LD_INT 102
9479: PPUSH
9480: CALL_OW 109
// end ; end ;
9484: GO 9216
9486: POP
9487: POP
// result := tmp ;
9488: LD_ADDR_VAR 0 4
9492: PUSH
9493: LD_VAR 0 7
9497: ST_TO_ADDR
// end ;
9498: LD_VAR 0 4
9502: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9503: LD_INT 0
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9510: LD_ADDR_VAR 0 7
9514: PUSH
9515: LD_INT 22
9517: PUSH
9518: LD_VAR 0 2
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: LD_INT 3
9529: PUSH
9530: LD_INT 21
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PPUSH
9548: CALL_OW 69
9552: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9553: LD_ADDR_VAR 0 5
9557: PUSH
9558: LD_INT 1
9560: PPUSH
9561: LD_INT 3
9563: PPUSH
9564: CALL_OW 12
9568: ST_TO_ADDR
// if filter > 0 then
9569: LD_VAR 0 7
9573: PUSH
9574: LD_INT 0
9576: GREATER
9577: IFFALSE 9779
// for i = 1 to list do
9579: LD_ADDR_VAR 0 6
9583: PUSH
9584: DOUBLE
9585: LD_INT 1
9587: DEC
9588: ST_TO_ADDR
9589: LD_VAR 0 1
9593: PUSH
9594: FOR_TO
9595: IFFALSE 9777
// for ta in filter do
9597: LD_ADDR_VAR 0 4
9601: PUSH
9602: LD_VAR 0 7
9606: PUSH
9607: FOR_IN
9608: IFFALSE 9773
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9610: LD_VAR 0 1
9614: PUSH
9615: LD_VAR 0 6
9619: ARRAY
9620: PPUSH
9621: LD_VAR 0 4
9625: PPUSH
9626: CALL_OW 296
9630: PUSH
9631: LD_INT 13
9633: LESSEQUAL
9634: IFFALSE 9771
// begin case c of 1 :
9636: LD_VAR 0 5
9640: PUSH
9641: LD_INT 1
9643: DOUBLE
9644: EQUAL
9645: IFTRUE 9649
9647: GO 9687
9649: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9650: LD_VAR 0 1
9654: PUSH
9655: LD_VAR 0 6
9659: ARRAY
9660: PPUSH
9661: LD_VAR 0 4
9665: PPUSH
9666: CALL_OW 250
9670: PPUSH
9671: LD_VAR 0 4
9675: PPUSH
9676: CALL_OW 251
9680: PPUSH
9681: CALL_OW 154
9685: GO 9771
9687: LD_INT 2
9689: DOUBLE
9690: EQUAL
9691: IFTRUE 9695
9693: GO 9759
9695: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9696: LD_VAR 0 1
9700: PUSH
9701: LD_VAR 0 6
9705: ARRAY
9706: PPUSH
9707: LD_VAR 0 4
9711: PPUSH
9712: CALL_OW 250
9716: PUSH
9717: LD_INT 1
9719: NEG
9720: PPUSH
9721: LD_INT 1
9723: PPUSH
9724: CALL_OW 12
9728: PLUS
9729: PPUSH
9730: LD_VAR 0 4
9734: PPUSH
9735: CALL_OW 251
9739: PUSH
9740: LD_INT 1
9742: NEG
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 12
9751: PLUS
9752: PPUSH
9753: CALL_OW 153
9757: GO 9771
9759: LD_INT 3
9761: DOUBLE
9762: EQUAL
9763: IFTRUE 9767
9765: GO 9770
9767: POP
// ; end ;
9768: GO 9771
9770: POP
// end ; end ;
9771: GO 9607
9773: POP
9774: POP
9775: GO 9594
9777: POP
9778: POP
// end ;
9779: LD_VAR 0 3
9783: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9784: LD_INT 0
9786: PPUSH
9787: PPUSH
// for i = 1 to plist do
9788: LD_ADDR_VAR 0 3
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_VAR 0 1
9802: PUSH
9803: FOR_TO
9804: IFFALSE 10006
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9806: LD_VAR 0 1
9810: PUSH
9811: LD_VAR 0 3
9815: ARRAY
9816: PPUSH
9817: CALL_OW 310
9821: PUSH
9822: LD_INT 30
9824: PUSH
9825: LD_INT 5
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: EMPTY
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: IN
9840: NOT
9841: IFFALSE 9986
// begin if IsInUnit ( plist [ i ] ) then
9843: LD_VAR 0 1
9847: PUSH
9848: LD_VAR 0 3
9852: ARRAY
9853: PPUSH
9854: CALL_OW 310
9858: IFFALSE 9877
// ComExitBuilding ( plist [ i ] ) else
9860: LD_VAR 0 1
9864: PUSH
9865: LD_VAR 0 3
9869: ARRAY
9870: PPUSH
9871: CALL_OW 122
9875: GO 9984
// if not HasTask ( plist [ i ] ) then
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: CALL_OW 314
9892: NOT
9893: IFFALSE 9984
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9895: LD_VAR 0 1
9899: PUSH
9900: LD_VAR 0 3
9904: ARRAY
9905: PPUSH
9906: LD_INT 22
9908: PUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: CALL_OW 255
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 30
9929: PUSH
9930: LD_INT 5
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 69
9945: PPUSH
9946: LD_VAR 0 1
9950: PUSH
9951: LD_VAR 0 3
9955: ARRAY
9956: PPUSH
9957: CALL_OW 74
9961: PPUSH
9962: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9966: LD_VAR 0 1
9970: PUSH
9971: LD_VAR 0 3
9975: ARRAY
9976: PPUSH
9977: LD_INT 9
9979: PPUSH
9980: CALL_OW 183
// end ; end else
9984: GO 10004
// ComChangeProfession ( plist [ i ] , 9 ) ;
9986: LD_VAR 0 1
9990: PUSH
9991: LD_VAR 0 3
9995: ARRAY
9996: PPUSH
9997: LD_INT 9
9999: PPUSH
10000: CALL_OW 123
10004: GO 9803
10006: POP
10007: POP
// end ;
10008: LD_VAR 0 2
10012: RET
// export function GetHuman ( side ) ; begin
10013: LD_INT 0
10015: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
10016: LD_ADDR_VAR 0 2
10020: PUSH
10021: LD_INT 22
10023: PUSH
10024: LD_VAR 0 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 21
10035: PUSH
10036: LD_INT 1
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 2
10045: PUSH
10046: LD_INT 25
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 25
10058: PUSH
10059: LD_INT 2
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 25
10068: PUSH
10069: LD_INT 3
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 4
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: LIST
10097: PPUSH
10098: CALL_OW 69
10102: ST_TO_ADDR
// end ;
10103: LD_VAR 0 2
10107: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10108: LD_INT 0
10110: PPUSH
10111: PPUSH
10112: PPUSH
// uc_side := 0 ;
10113: LD_ADDR_OWVAR 20
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// uc_nation := 0 ;
10121: LD_ADDR_OWVAR 21
10125: PUSH
10126: LD_INT 0
10128: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10129: LD_ADDR_VAR 0 4
10133: PUSH
10134: DOUBLE
10135: LD_INT 1
10137: DEC
10138: ST_TO_ADDR
10139: LD_INT 4
10141: PUSH
10142: LD_INT 5
10144: PUSH
10145: LD_INT 6
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: PUSH
10153: LD_OWVAR 67
10157: ARRAY
10158: PUSH
10159: FOR_TO
10160: IFFALSE 10231
// begin hc_class = class_tiger ;
10162: LD_ADDR_OWVAR 28
10166: PUSH
10167: LD_INT 14
10169: ST_TO_ADDR
// hc_gallery = sandnature ;
10170: LD_ADDR_OWVAR 33
10174: PUSH
10175: LD_STRING sandnature
10177: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10178: LD_ADDR_OWVAR 35
10182: PUSH
10183: LD_INT 0
10185: PPUSH
10186: LD_INT 50
10188: PPUSH
10189: CALL_OW 12
10193: ST_TO_ADDR
// hc_face_number = 3 ;
10194: LD_ADDR_OWVAR 34
10198: PUSH
10199: LD_INT 3
10201: ST_TO_ADDR
// tiger := CreateHuman ;
10202: LD_ADDR_VAR 0 3
10206: PUSH
10207: CALL_OW 44
10211: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10212: LD_VAR 0 3
10216: PPUSH
10217: LD_VAR 0 1
10221: PPUSH
10222: LD_INT 0
10224: PPUSH
10225: CALL_OW 49
// end ;
10229: GO 10159
10231: POP
10232: POP
// end ;
10233: LD_VAR 0 2
10237: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10238: LD_INT 0
10240: PPUSH
10241: PPUSH
10242: PPUSH
// uc_side := 0 ;
10243: LD_ADDR_OWVAR 20
10247: PUSH
10248: LD_INT 0
10250: ST_TO_ADDR
// uc_nation := 0 ;
10251: LD_ADDR_OWVAR 21
10255: PUSH
10256: LD_INT 0
10258: ST_TO_ADDR
// for i = 1 to 8 do
10259: LD_ADDR_VAR 0 4
10263: PUSH
10264: DOUBLE
10265: LD_INT 1
10267: DEC
10268: ST_TO_ADDR
10269: LD_INT 8
10271: PUSH
10272: FOR_TO
10273: IFFALSE 10337
// begin hc_class = class_apeman ;
10275: LD_ADDR_OWVAR 28
10279: PUSH
10280: LD_INT 12
10282: ST_TO_ADDR
// hc_gallery =  ;
10283: LD_ADDR_OWVAR 33
10287: PUSH
10288: LD_STRING 
10290: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 20 ) ;
10291: LD_ADDR_OWVAR 35
10295: PUSH
10296: LD_INT 5
10298: NEG
10299: PPUSH
10300: LD_INT 20
10302: PPUSH
10303: CALL_OW 12
10307: ST_TO_ADDR
// ape := CreateHuman ;
10308: LD_ADDR_VAR 0 3
10312: PUSH
10313: CALL_OW 44
10317: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10318: LD_VAR 0 3
10322: PPUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: LD_INT 0
10330: PPUSH
10331: CALL_OW 49
// end ;
10335: GO 10272
10337: POP
10338: POP
// end ;
10339: LD_VAR 0 2
10343: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10344: LD_INT 0
10346: PPUSH
10347: PPUSH
// if BuildingStatus ( b ) = bs_build then
10348: LD_VAR 0 2
10352: PPUSH
10353: CALL_OW 461
10357: PUSH
10358: LD_INT 1
10360: EQUAL
10361: IFFALSE 10547
// for i = 1 to plist do
10363: LD_ADDR_VAR 0 4
10367: PUSH
10368: DOUBLE
10369: LD_INT 1
10371: DEC
10372: ST_TO_ADDR
10373: LD_VAR 0 1
10377: PUSH
10378: FOR_TO
10379: IFFALSE 10545
// if IsInUnit ( plist [ i ] ) then
10381: LD_VAR 0 1
10385: PUSH
10386: LD_VAR 0 4
10390: ARRAY
10391: PPUSH
10392: CALL_OW 310
10396: IFFALSE 10479
// begin ComExitBuilding ( plist [ i ] ) ;
10398: LD_VAR 0 1
10402: PUSH
10403: LD_VAR 0 4
10407: ARRAY
10408: PPUSH
10409: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10413: LD_VAR 0 1
10417: PUSH
10418: LD_VAR 0 4
10422: ARRAY
10423: PPUSH
10424: LD_STRING h
10426: PUSH
10427: LD_VAR 0 2
10431: PPUSH
10432: CALL_OW 250
10436: PUSH
10437: LD_VAR 0 2
10441: PPUSH
10442: CALL_OW 251
10446: PUSH
10447: LD_VAR 0 2
10451: PUSH
10452: LD_INT 0
10454: PUSH
10455: LD_INT 0
10457: PUSH
10458: LD_INT 0
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: PPUSH
10473: CALL_OW 447
// end else
10477: GO 10543
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10479: LD_VAR 0 1
10483: PUSH
10484: LD_VAR 0 4
10488: ARRAY
10489: PPUSH
10490: LD_STRING h
10492: PUSH
10493: LD_VAR 0 2
10497: PPUSH
10498: CALL_OW 250
10502: PUSH
10503: LD_VAR 0 2
10507: PPUSH
10508: CALL_OW 251
10512: PUSH
10513: LD_VAR 0 2
10517: PUSH
10518: LD_INT 0
10520: PUSH
10521: LD_INT 0
10523: PUSH
10524: LD_INT 0
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: PPUSH
10539: CALL_OW 446
10543: GO 10378
10545: POP
10546: POP
// end ;
10547: LD_VAR 0 3
10551: RET
// export function WantRepair ( eng ) ; begin
10552: LD_INT 0
10554: PPUSH
// if GetTaskList ( eng ) > 0 then
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL_OW 437
10564: PUSH
10565: LD_INT 0
10567: GREATER
10568: IFFALSE 10613
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10570: LD_VAR 0 1
10574: PPUSH
10575: CALL_OW 437
10579: PUSH
10580: LD_INT 1
10582: ARRAY
10583: PUSH
10584: LD_INT 1
10586: ARRAY
10587: PUSH
10588: LD_STRING o
10590: EQUAL
10591: IFFALSE 10603
// result := true else
10593: LD_ADDR_VAR 0 2
10597: PUSH
10598: LD_INT 1
10600: ST_TO_ADDR
10601: GO 10611
// result := false ;
10603: LD_ADDR_VAR 0 2
10607: PUSH
10608: LD_INT 0
10610: ST_TO_ADDR
// end else
10611: GO 10621
// result := false ;
10613: LD_ADDR_VAR 0 2
10617: PUSH
10618: LD_INT 0
10620: ST_TO_ADDR
// end ;
10621: LD_VAR 0 2
10625: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10626: LD_INT 0
10628: PPUSH
10629: PPUSH
10630: PPUSH
10631: PPUSH
// if btype = - 1 then
10632: LD_VAR 0 2
10636: PUSH
10637: LD_INT 1
10639: NEG
10640: EQUAL
10641: IFFALSE 10681
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10643: LD_ADDR_VAR 0 5
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_VAR 0 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 3
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 69
10678: ST_TO_ADDR
10679: GO 10719
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10681: LD_ADDR_VAR 0 5
10685: PUSH
10686: LD_INT 22
10688: PUSH
10689: LD_VAR 0 1
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 30
10700: PUSH
10701: LD_VAR 0 2
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PPUSH
10714: CALL_OW 69
10718: ST_TO_ADDR
// list := [ ] ;
10719: LD_ADDR_VAR 0 6
10723: PUSH
10724: EMPTY
10725: ST_TO_ADDR
// for i = 1 to tmp do
10726: LD_ADDR_VAR 0 4
10730: PUSH
10731: DOUBLE
10732: LD_INT 1
10734: DEC
10735: ST_TO_ADDR
10736: LD_VAR 0 5
10740: PUSH
10741: FOR_TO
10742: IFFALSE 10830
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10744: LD_ADDR_VAR 0 6
10748: PUSH
10749: LD_VAR 0 6
10753: PUSH
10754: LD_VAR 0 5
10758: PUSH
10759: LD_VAR 0 4
10763: ARRAY
10764: PPUSH
10765: CALL_OW 266
10769: PUSH
10770: LD_VAR 0 5
10774: PUSH
10775: LD_VAR 0 4
10779: ARRAY
10780: PPUSH
10781: CALL_OW 250
10785: PUSH
10786: LD_VAR 0 5
10790: PUSH
10791: LD_VAR 0 4
10795: ARRAY
10796: PPUSH
10797: CALL_OW 251
10801: PUSH
10802: LD_VAR 0 5
10806: PUSH
10807: LD_VAR 0 4
10811: ARRAY
10812: PPUSH
10813: CALL_OW 254
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: ADD
10827: ST_TO_ADDR
10828: GO 10741
10830: POP
10831: POP
// result = list ;
10832: LD_ADDR_VAR 0 3
10836: PUSH
10837: LD_VAR 0 6
10841: ST_TO_ADDR
// end ;
10842: LD_VAR 0 3
10846: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10847: LD_INT 0
10849: PPUSH
10850: PPUSH
10851: PPUSH
10852: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10853: LD_VAR 0 1
10857: PPUSH
10858: LD_INT 81
10860: PUSH
10861: LD_VAR 0 1
10865: PPUSH
10866: CALL_OW 255
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PPUSH
10875: CALL_OW 69
10879: PPUSH
10880: LD_VAR 0 1
10884: PPUSH
10885: CALL_OW 74
10889: PPUSH
10890: CALL_OW 296
10894: PUSH
10895: LD_INT 18
10897: LESS
10898: IFFALSE 10943
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10900: LD_VAR 0 1
10904: PPUSH
10905: LD_INT 81
10907: PUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 255
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PPUSH
10922: CALL_OW 69
10926: PPUSH
10927: LD_VAR 0 1
10931: PPUSH
10932: CALL_OW 74
10936: PPUSH
10937: CALL_OW 115
10941: GO 10962
// ComMoveXY ( behemoth , x , y ) ;
10943: LD_VAR 0 1
10947: PPUSH
10948: LD_VAR 0 4
10952: PPUSH
10953: LD_VAR 0 5
10957: PPUSH
10958: CALL_OW 111
// if time_lapsers_list > 0 then
10962: LD_VAR 0 2
10966: PUSH
10967: LD_INT 0
10969: GREATER
10970: IFFALSE 11160
// begin for i = 1 to time_lapsers_list do
10972: LD_ADDR_VAR 0 7
10976: PUSH
10977: DOUBLE
10978: LD_INT 1
10980: DEC
10981: ST_TO_ADDR
10982: LD_VAR 0 2
10986: PUSH
10987: FOR_TO
10988: IFFALSE 11158
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10990: LD_VAR 0 2
10994: PUSH
10995: LD_VAR 0 7
10999: ARRAY
11000: PPUSH
11001: CALL_OW 256
11005: PUSH
11006: LD_INT 250
11008: GREATEREQUAL
11009: PUSH
11010: LD_VAR 0 2
11014: PUSH
11015: LD_VAR 0 7
11019: ARRAY
11020: PPUSH
11021: LD_VAR 0 1
11025: PPUSH
11026: CALL_OW 296
11030: PUSH
11031: LD_INT 9
11033: GREATER
11034: AND
11035: IFFALSE 11072
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11037: LD_VAR 0 2
11041: PUSH
11042: LD_VAR 0 7
11046: ARRAY
11047: PPUSH
11048: LD_VAR 0 1
11052: PPUSH
11053: CALL_OW 250
11057: PPUSH
11058: LD_VAR 0 1
11062: PPUSH
11063: CALL_OW 251
11067: PPUSH
11068: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11072: LD_VAR 0 2
11076: PUSH
11077: LD_VAR 0 7
11081: ARRAY
11082: PPUSH
11083: CALL_OW 256
11087: PUSH
11088: LD_INT 500
11090: LESS
11091: PUSH
11092: LD_VAR 0 1
11096: PPUSH
11097: CALL_OW 256
11101: PUSH
11102: LD_INT 700
11104: GREATER
11105: AND
11106: IFFALSE 11156
// for p = 1 to mechanic_list do
11108: LD_ADDR_VAR 0 8
11112: PUSH
11113: DOUBLE
11114: LD_INT 1
11116: DEC
11117: ST_TO_ADDR
11118: LD_VAR 0 3
11122: PUSH
11123: FOR_TO
11124: IFFALSE 11154
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11126: LD_VAR 0 3
11130: PUSH
11131: LD_VAR 0 8
11135: ARRAY
11136: PPUSH
11137: LD_VAR 0 2
11141: PUSH
11142: LD_VAR 0 7
11146: ARRAY
11147: PPUSH
11148: CALL_OW 129
11152: GO 11123
11154: POP
11155: POP
// end ;
11156: GO 10987
11158: POP
11159: POP
// end ; if mechanic_list then
11160: LD_VAR 0 3
11164: IFFALSE 11345
// begin for i = 1 to mechanic_list do
11166: LD_ADDR_VAR 0 7
11170: PUSH
11171: DOUBLE
11172: LD_INT 1
11174: DEC
11175: ST_TO_ADDR
11176: LD_VAR 0 3
11180: PUSH
11181: FOR_TO
11182: IFFALSE 11343
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11184: LD_VAR 0 3
11188: PUSH
11189: LD_VAR 0 7
11193: ARRAY
11194: PPUSH
11195: CALL_OW 256
11199: PUSH
11200: LD_INT 333
11202: LESS
11203: IFFALSE 11227
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11205: LD_ADDR_EXP 15
11209: PUSH
11210: LD_EXP 15
11214: PUSH
11215: LD_VAR 0 3
11219: PUSH
11220: LD_VAR 0 7
11224: ARRAY
11225: DIFF
11226: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11227: LD_VAR 0 3
11231: PUSH
11232: LD_VAR 0 7
11236: ARRAY
11237: PPUSH
11238: LD_VAR 0 1
11242: PPUSH
11243: CALL_OW 296
11247: PUSH
11248: LD_INT 9
11250: GREATER
11251: PUSH
11252: LD_VAR 0 3
11256: PUSH
11257: LD_VAR 0 7
11261: ARRAY
11262: PPUSH
11263: CALL_OW 314
11267: NOT
11268: AND
11269: IFFALSE 11306
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11271: LD_VAR 0 3
11275: PUSH
11276: LD_VAR 0 7
11280: ARRAY
11281: PPUSH
11282: LD_VAR 0 1
11286: PPUSH
11287: CALL_OW 250
11291: PPUSH
11292: LD_VAR 0 1
11296: PPUSH
11297: CALL_OW 251
11301: PPUSH
11302: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11306: LD_VAR 0 1
11310: PPUSH
11311: CALL_OW 256
11315: PUSH
11316: LD_INT 700
11318: LESS
11319: IFFALSE 11341
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11321: LD_VAR 0 3
11325: PUSH
11326: LD_VAR 0 7
11330: ARRAY
11331: PPUSH
11332: LD_VAR 0 1
11336: PPUSH
11337: CALL_OW 129
// end ;
11341: GO 11181
11343: POP
11344: POP
// end ; end ;
11345: LD_VAR 0 6
11349: RET
// export function GetBehemoth ( side ) ; begin
11350: LD_INT 0
11352: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11353: LD_ADDR_VAR 0 2
11357: PUSH
11358: LD_INT 22
11360: PUSH
11361: LD_VAR 0 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 31
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PPUSH
11384: CALL_OW 69
11388: ST_TO_ADDR
// end ;
11389: LD_VAR 0 2
11393: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11394: LD_INT 0
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11402: LD_ADDR_VAR 0 6
11406: PUSH
11407: LD_VAR 0 2
11411: PPUSH
11412: CALL_OW 435
11416: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11417: LD_ADDR_VAR 0 5
11421: PUSH
11422: LD_INT 22
11424: PUSH
11425: LD_VAR 0 1
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 2
11436: PUSH
11437: LD_INT 25
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 25
11449: PUSH
11450: LD_INT 16
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PPUSH
11466: CALL_OW 69
11470: ST_TO_ADDR
// if skr then
11471: LD_VAR 0 6
11475: IFFALSE 11640
// begin if engs then
11477: LD_VAR 0 5
11481: IFFALSE 11640
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11483: LD_ADDR_VAR 0 8
11487: PUSH
11488: LD_VAR 0 6
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 6
11501: PUSH
11502: LD_INT 2
11504: ARRAY
11505: PPUSH
11506: CALL_OW 284
11510: ST_TO_ADDR
// if am > engs then
11511: LD_VAR 0 8
11515: PUSH
11516: LD_VAR 0 5
11520: GREATER
11521: IFFALSE 11533
// am := engs ;
11523: LD_ADDR_VAR 0 8
11527: PUSH
11528: LD_VAR 0 5
11532: ST_TO_ADDR
// for i = 1 to am do
11533: LD_ADDR_VAR 0 7
11537: PUSH
11538: DOUBLE
11539: LD_INT 1
11541: DEC
11542: ST_TO_ADDR
11543: LD_VAR 0 8
11547: PUSH
11548: FOR_TO
11549: IFFALSE 11638
// begin if IsInUnit ( engs [ i ] ) then
11551: LD_VAR 0 5
11555: PUSH
11556: LD_VAR 0 7
11560: ARRAY
11561: PPUSH
11562: CALL_OW 310
11566: IFFALSE 11585
// ComExitBuilding ( engs [ i ] ) else
11568: LD_VAR 0 5
11572: PUSH
11573: LD_VAR 0 7
11577: ARRAY
11578: PPUSH
11579: CALL_OW 122
11583: GO 11636
// if not HasTask ( engs [ i ] ) then
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: CALL_OW 314
11600: NOT
11601: IFFALSE 11636
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11603: LD_VAR 0 5
11607: PUSH
11608: LD_VAR 0 7
11612: ARRAY
11613: PPUSH
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 1
11621: ARRAY
11622: PPUSH
11623: LD_VAR 0 6
11627: PUSH
11628: LD_INT 2
11630: ARRAY
11631: PPUSH
11632: CALL_OW 117
// end ;
11636: GO 11548
11638: POP
11639: POP
// end ; end ; end ; end_of_file
11640: LD_VAR 0 3
11644: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11645: LD_INT 0
11647: PPUSH
11648: PPUSH
// uc_side := 1 ;
11649: LD_ADDR_OWVAR 20
11653: PUSH
11654: LD_INT 1
11656: ST_TO_ADDR
// uc_nation := 1 ;
11657: LD_ADDR_OWVAR 21
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11665: LD_ADDR_VAR 0 2
11669: PUSH
11670: LD_INT 6
11672: PUSH
11673: LD_INT 5
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: PUSH
11684: LD_OWVAR 67
11688: ARRAY
11689: ST_TO_ADDR
// game_status := false ;
11690: LD_ADDR_EXP 29
11694: PUSH
11695: LD_INT 0
11697: ST_TO_ADDR
// helps_arrive := false ;
11698: LD_ADDR_EXP 30
11702: PUSH
11703: LD_INT 0
11705: ST_TO_ADDR
// helps_can_arrive := false ;
11706: LD_ADDR_EXP 31
11710: PUSH
11711: LD_INT 0
11713: ST_TO_ADDR
// beta_come := false ;
11714: LD_ADDR_EXP 32
11718: PUSH
11719: LD_INT 0
11721: ST_TO_ADDR
// gamma_come := false ;
11722: LD_ADDR_EXP 33
11726: PUSH
11727: LD_INT 0
11729: ST_TO_ADDR
// zeta_come := false ;
11730: LD_ADDR_EXP 34
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// mine_ck := false ;
11738: LD_ADDR_EXP 35
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// sib_bomb_constructed := false ;
11746: LD_ADDR_EXP 36
11750: PUSH
11751: LD_INT 0
11753: ST_TO_ADDR
// mine_constructed := false ;
11754: LD_ADDR_EXP 37
11758: PUSH
11759: LD_INT 0
11761: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11762: LD_INT 35
11764: PPUSH
11765: CALL_OW 274
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: LD_INT 200
11775: PUSH
11776: LD_INT 100
11778: PUSH
11779: LD_INT 70
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: PUSH
11787: LD_OWVAR 67
11791: ARRAY
11792: PPUSH
11793: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11797: LD_INT 35
11799: PPUSH
11800: LD_INT 4
11802: PPUSH
11803: CALL_OW 235
// hc_importance := 100 ;
11807: LD_ADDR_OWVAR 32
11811: PUSH
11812: LD_INT 100
11814: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11815: LD_INT 1
11817: PPUSH
11818: LD_INT 2
11820: PPUSH
11821: LD_VAR 0 2
11825: PUSH
11826: LD_INT 1
11828: PLUS
11829: PPUSH
11830: CALL_OW 380
// hc_gallery := hardch ;
11834: LD_ADDR_OWVAR 33
11838: PUSH
11839: LD_STRING hardch
11841: ST_TO_ADDR
// hc_face_number := 1 ;
11842: LD_ADDR_OWVAR 34
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// guyA := CreateHuman ;
11850: LD_ADDR_EXP 38
11854: PUSH
11855: CALL_OW 44
11859: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11860: LD_INT 1
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: LD_VAR 0 2
11870: PPUSH
11871: CALL_OW 380
// hc_face_number := 2 ;
11875: LD_ADDR_OWVAR 34
11879: PUSH
11880: LD_INT 2
11882: ST_TO_ADDR
// guyB := CreateHuman ;
11883: LD_ADDR_EXP 39
11887: PUSH
11888: CALL_OW 44
11892: ST_TO_ADDR
// hc_importance := 0 ;
11893: LD_ADDR_OWVAR 32
11897: PUSH
11898: LD_INT 0
11900: ST_TO_ADDR
// hc_gallery :=  ;
11901: LD_ADDR_OWVAR 33
11905: PUSH
11906: LD_STRING 
11908: ST_TO_ADDR
// end ;
11909: LD_VAR 0 1
11913: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11914: LD_INT 0
11916: PPUSH
11917: PPUSH
11918: PPUSH
11919: PPUSH
11920: PPUSH
11921: PPUSH
11922: PPUSH
11923: PPUSH
11924: PPUSH
// uc_side := 4 ;
11925: LD_ADDR_OWVAR 20
11929: PUSH
11930: LD_INT 4
11932: ST_TO_ADDR
// uc_nation := 1 ;
11933: LD_ADDR_OWVAR 21
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11941: LD_ADDR_VAR 0 10
11945: PUSH
11946: LD_INT 6
11948: PUSH
11949: LD_INT 5
11951: PUSH
11952: LD_INT 4
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: PUSH
11960: LD_OWVAR 67
11964: ARRAY
11965: ST_TO_ADDR
// Beta_Squad := [ ] ;
11966: LD_ADDR_EXP 40
11970: PUSH
11971: EMPTY
11972: ST_TO_ADDR
// case num of 1 :
11973: LD_VAR 0 1
11977: PUSH
11978: LD_INT 1
11980: DOUBLE
11981: EQUAL
11982: IFTRUE 11986
11984: GO 12029
11986: POP
// begin sold := 2 ;
11987: LD_ADDR_VAR 0 5
11991: PUSH
11992: LD_INT 2
11994: ST_TO_ADDR
// sci := 1 ;
11995: LD_ADDR_VAR 0 6
11999: PUSH
12000: LD_INT 1
12002: ST_TO_ADDR
// mech := 2 ;
12003: LD_ADDR_VAR 0 7
12007: PUSH
12008: LD_INT 2
12010: ST_TO_ADDR
// tank := 1 ;
12011: LD_ADDR_VAR 0 8
12015: PUSH
12016: LD_INT 1
12018: ST_TO_ADDR
// cargo := 1 ;
12019: LD_ADDR_VAR 0 9
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// end ; 2 :
12027: GO 12132
12029: LD_INT 2
12031: DOUBLE
12032: EQUAL
12033: IFTRUE 12037
12035: GO 12080
12037: POP
// begin sold := 2 ;
12038: LD_ADDR_VAR 0 5
12042: PUSH
12043: LD_INT 2
12045: ST_TO_ADDR
// sci := 1 ;
12046: LD_ADDR_VAR 0 6
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// mech := 1 ;
12054: LD_ADDR_VAR 0 7
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// tank := 1 ;
12062: LD_ADDR_VAR 0 8
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// cargo := 0 ;
12070: LD_ADDR_VAR 0 9
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// end ; 3 :
12078: GO 12132
12080: LD_INT 3
12082: DOUBLE
12083: EQUAL
12084: IFTRUE 12088
12086: GO 12131
12088: POP
// begin sold := 1 ;
12089: LD_ADDR_VAR 0 5
12093: PUSH
12094: LD_INT 1
12096: ST_TO_ADDR
// sci := 1 ;
12097: LD_ADDR_VAR 0 6
12101: PUSH
12102: LD_INT 1
12104: ST_TO_ADDR
// mech := 1 ;
12105: LD_ADDR_VAR 0 7
12109: PUSH
12110: LD_INT 1
12112: ST_TO_ADDR
// tank := 1 ;
12113: LD_ADDR_VAR 0 8
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// cargo := 0 ;
12121: LD_ADDR_VAR 0 9
12125: PUSH
12126: LD_INT 0
12128: ST_TO_ADDR
// end ; end ;
12129: GO 12132
12131: POP
// for i = 1 to sold do
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: DOUBLE
12138: LD_INT 1
12140: DEC
12141: ST_TO_ADDR
12142: LD_VAR 0 5
12146: PUSH
12147: FOR_TO
12148: IFFALSE 12220
// begin if i = 1 then
12150: LD_VAR 0 3
12154: PUSH
12155: LD_INT 1
12157: EQUAL
12158: IFFALSE 12177
// PrepareHuman ( sex_male , 1 , skill ) else
12160: LD_INT 1
12162: PPUSH
12163: LD_INT 1
12165: PPUSH
12166: LD_VAR 0 10
12170: PPUSH
12171: CALL_OW 380
12175: GO 12192
// PrepareHuman ( false , 1 , skill ) ;
12177: LD_INT 0
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_VAR 0 10
12187: PPUSH
12188: CALL_OW 380
// un := CreateHuman ;
12192: LD_ADDR_VAR 0 4
12196: PUSH
12197: CALL_OW 44
12201: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12202: LD_ADDR_EXP 40
12206: PUSH
12207: LD_EXP 40
12211: PUSH
12212: LD_VAR 0 4
12216: ADD
12217: ST_TO_ADDR
// end ;
12218: GO 12147
12220: POP
12221: POP
// for i = 1 to mech do
12222: LD_ADDR_VAR 0 3
12226: PUSH
12227: DOUBLE
12228: LD_INT 1
12230: DEC
12231: ST_TO_ADDR
12232: LD_VAR 0 7
12236: PUSH
12237: FOR_TO
12238: IFFALSE 12295
// begin PrepareHuman ( false , 3 , skill ) ;
12240: LD_INT 0
12242: PPUSH
12243: LD_INT 3
12245: PPUSH
12246: LD_VAR 0 10
12250: PPUSH
12251: CALL_OW 380
// un := CreateHuman ;
12255: LD_ADDR_VAR 0 4
12259: PUSH
12260: CALL_OW 44
12264: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12265: LD_VAR 0 4
12269: PPUSH
12270: LD_INT 3
12272: PPUSH
12273: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12277: LD_ADDR_EXP 40
12281: PUSH
12282: LD_EXP 40
12286: PUSH
12287: LD_VAR 0 4
12291: ADD
12292: ST_TO_ADDR
// end ;
12293: GO 12237
12295: POP
12296: POP
// for i = 1 to sci do
12297: LD_ADDR_VAR 0 3
12301: PUSH
12302: DOUBLE
12303: LD_INT 1
12305: DEC
12306: ST_TO_ADDR
12307: LD_VAR 0 6
12311: PUSH
12312: FOR_TO
12313: IFFALSE 12358
// begin PrepareHuman ( false , 4 , skill ) ;
12315: LD_INT 0
12317: PPUSH
12318: LD_INT 4
12320: PPUSH
12321: LD_VAR 0 10
12325: PPUSH
12326: CALL_OW 380
// un := CreateHuman ;
12330: LD_ADDR_VAR 0 4
12334: PUSH
12335: CALL_OW 44
12339: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12340: LD_ADDR_EXP 40
12344: PUSH
12345: LD_EXP 40
12349: PUSH
12350: LD_VAR 0 4
12354: ADD
12355: ST_TO_ADDR
// end ;
12356: GO 12312
12358: POP
12359: POP
// for i = 1 to tank do
12360: LD_ADDR_VAR 0 3
12364: PUSH
12365: DOUBLE
12366: LD_INT 1
12368: DEC
12369: ST_TO_ADDR
12370: LD_VAR 0 8
12374: PUSH
12375: FOR_TO
12376: IFFALSE 12489
// begin Randomize ;
12378: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12382: LD_ADDR_OWVAR 37
12386: PUSH
12387: LD_INT 3
12389: ST_TO_ADDR
// vc_engine := engine_solar ;
12390: LD_ADDR_OWVAR 39
12394: PUSH
12395: LD_INT 2
12397: ST_TO_ADDR
// vc_control := control_manual ;
12398: LD_ADDR_OWVAR 38
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12406: LD_ADDR_OWVAR 40
12410: PUSH
12411: LD_INT 4
12413: PUSH
12414: LD_INT 5
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 1
12423: PPUSH
12424: LD_INT 2
12426: PPUSH
12427: CALL_OW 12
12431: ARRAY
12432: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12433: LD_ADDR_OWVAR 41
12437: PUSH
12438: LD_INT 35
12440: PPUSH
12441: LD_INT 55
12443: PPUSH
12444: CALL_OW 12
12448: ST_TO_ADDR
// un := CreateVehicle ;
12449: LD_ADDR_VAR 0 4
12453: PUSH
12454: CALL_OW 45
12458: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12459: LD_VAR 0 4
12463: PPUSH
12464: LD_INT 5
12466: PPUSH
12467: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12471: LD_ADDR_EXP 40
12475: PUSH
12476: LD_EXP 40
12480: PUSH
12481: LD_VAR 0 4
12485: ADD
12486: ST_TO_ADDR
// end ;
12487: GO 12375
12489: POP
12490: POP
// if cargo then
12491: LD_VAR 0 9
12495: IFFALSE 12598
// begin vc_chassis := us_medium_tracked ;
12497: LD_ADDR_OWVAR 37
12501: PUSH
12502: LD_INT 3
12504: ST_TO_ADDR
// vc_engine := engine_solar ;
12505: LD_ADDR_OWVAR 39
12509: PUSH
12510: LD_INT 2
12512: ST_TO_ADDR
// vc_control := control_manual ;
12513: LD_ADDR_OWVAR 38
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12521: LD_ADDR_OWVAR 40
12525: PUSH
12526: LD_INT 12
12528: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12529: LD_ADDR_OWVAR 41
12533: PUSH
12534: LD_INT 35
12536: PPUSH
12537: LD_INT 55
12539: PPUSH
12540: CALL_OW 12
12544: ST_TO_ADDR
// un := CreateVehicle ;
12545: LD_ADDR_VAR 0 4
12549: PUSH
12550: CALL_OW 45
12554: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12555: LD_VAR 0 4
12559: PPUSH
12560: LD_INT 5
12562: PPUSH
12563: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12567: LD_ADDR_EXP 40
12571: PUSH
12572: LD_EXP 40
12576: PUSH
12577: LD_VAR 0 4
12581: ADD
12582: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12583: LD_VAR 0 4
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: LD_INT 60
12593: PPUSH
12594: CALL_OW 290
// end ; end ;
12598: LD_VAR 0 2
12602: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12603: LD_INT 0
12605: PPUSH
12606: PPUSH
12607: PPUSH
12608: PPUSH
12609: PPUSH
12610: PPUSH
12611: PPUSH
12612: PPUSH
12613: PPUSH
12614: PPUSH
// uc_side := 4 ;
12615: LD_ADDR_OWVAR 20
12619: PUSH
12620: LD_INT 4
12622: ST_TO_ADDR
// uc_nation := 1 ;
12623: LD_ADDR_OWVAR 21
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12631: LD_ADDR_VAR 0 11
12635: PUSH
12636: LD_INT 6
12638: PUSH
12639: LD_INT 5
12641: PUSH
12642: LD_INT 4
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: LIST
12649: PUSH
12650: LD_OWVAR 67
12654: ARRAY
12655: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12656: LD_ADDR_EXP 41
12660: PUSH
12661: EMPTY
12662: ST_TO_ADDR
// case num of 1 :
12663: LD_VAR 0 1
12667: PUSH
12668: LD_INT 1
12670: DOUBLE
12671: EQUAL
12672: IFTRUE 12676
12674: GO 12727
12676: POP
// begin sold := 2 ;
12677: LD_ADDR_VAR 0 5
12681: PUSH
12682: LD_INT 2
12684: ST_TO_ADDR
// eng := 2 ;
12685: LD_ADDR_VAR 0 6
12689: PUSH
12690: LD_INT 2
12692: ST_TO_ADDR
// sci := 0 ;
12693: LD_ADDR_VAR 0 7
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// mech := 1 ;
12701: LD_ADDR_VAR 0 8
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// tank := 0 ;
12709: LD_ADDR_VAR 0 9
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// cargo := 1 ;
12717: LD_ADDR_VAR 0 10
12721: PUSH
12722: LD_INT 1
12724: ST_TO_ADDR
// end ; 2 :
12725: GO 12846
12727: LD_INT 2
12729: DOUBLE
12730: EQUAL
12731: IFTRUE 12735
12733: GO 12786
12735: POP
// begin sold := 1 ;
12736: LD_ADDR_VAR 0 5
12740: PUSH
12741: LD_INT 1
12743: ST_TO_ADDR
// eng := 2 ;
12744: LD_ADDR_VAR 0 6
12748: PUSH
12749: LD_INT 2
12751: ST_TO_ADDR
// sci := 0 ;
12752: LD_ADDR_VAR 0 7
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// mech := 1 ;
12760: LD_ADDR_VAR 0 8
12764: PUSH
12765: LD_INT 1
12767: ST_TO_ADDR
// tank := 0 ;
12768: LD_ADDR_VAR 0 9
12772: PUSH
12773: LD_INT 0
12775: ST_TO_ADDR
// cargo := 1 ;
12776: LD_ADDR_VAR 0 10
12780: PUSH
12781: LD_INT 1
12783: ST_TO_ADDR
// end ; 3 :
12784: GO 12846
12786: LD_INT 3
12788: DOUBLE
12789: EQUAL
12790: IFTRUE 12794
12792: GO 12845
12794: POP
// begin sold := 1 ;
12795: LD_ADDR_VAR 0 5
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
// eng := 1 ;
12803: LD_ADDR_VAR 0 6
12807: PUSH
12808: LD_INT 1
12810: ST_TO_ADDR
// sci := 0 ;
12811: LD_ADDR_VAR 0 7
12815: PUSH
12816: LD_INT 0
12818: ST_TO_ADDR
// mech := 1 ;
12819: LD_ADDR_VAR 0 8
12823: PUSH
12824: LD_INT 1
12826: ST_TO_ADDR
// tank := 0 ;
12827: LD_ADDR_VAR 0 9
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// cargo := 1 ;
12835: LD_ADDR_VAR 0 10
12839: PUSH
12840: LD_INT 1
12842: ST_TO_ADDR
// end ; end ;
12843: GO 12846
12845: POP
// for i = 1 to sold do
12846: LD_ADDR_VAR 0 3
12850: PUSH
12851: DOUBLE
12852: LD_INT 1
12854: DEC
12855: ST_TO_ADDR
12856: LD_VAR 0 5
12860: PUSH
12861: FOR_TO
12862: IFFALSE 12934
// begin if i = 1 then
12864: LD_VAR 0 3
12868: PUSH
12869: LD_INT 1
12871: EQUAL
12872: IFFALSE 12891
// PrepareHuman ( sex_male , 1 , skill ) else
12874: LD_INT 1
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: LD_VAR 0 11
12884: PPUSH
12885: CALL_OW 380
12889: GO 12906
// PrepareHuman ( false , 1 , skill ) ;
12891: LD_INT 0
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: LD_VAR 0 11
12901: PPUSH
12902: CALL_OW 380
// un := CreateHuman ;
12906: LD_ADDR_VAR 0 4
12910: PUSH
12911: CALL_OW 44
12915: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12916: LD_ADDR_EXP 41
12920: PUSH
12921: LD_EXP 41
12925: PUSH
12926: LD_VAR 0 4
12930: ADD
12931: ST_TO_ADDR
// end ;
12932: GO 12861
12934: POP
12935: POP
// for i = 1 to mech do
12936: LD_ADDR_VAR 0 3
12940: PUSH
12941: DOUBLE
12942: LD_INT 1
12944: DEC
12945: ST_TO_ADDR
12946: LD_VAR 0 8
12950: PUSH
12951: FOR_TO
12952: IFFALSE 13009
// begin PrepareHuman ( false , 3 , skill ) ;
12954: LD_INT 0
12956: PPUSH
12957: LD_INT 3
12959: PPUSH
12960: LD_VAR 0 11
12964: PPUSH
12965: CALL_OW 380
// un := CreateHuman ;
12969: LD_ADDR_VAR 0 4
12973: PUSH
12974: CALL_OW 44
12978: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12979: LD_VAR 0 4
12983: PPUSH
12984: LD_INT 3
12986: PPUSH
12987: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12991: LD_ADDR_EXP 41
12995: PUSH
12996: LD_EXP 41
13000: PUSH
13001: LD_VAR 0 4
13005: ADD
13006: ST_TO_ADDR
// end ;
13007: GO 12951
13009: POP
13010: POP
// for i = 1 to eng do
13011: LD_ADDR_VAR 0 3
13015: PUSH
13016: DOUBLE
13017: LD_INT 1
13019: DEC
13020: ST_TO_ADDR
13021: LD_VAR 0 6
13025: PUSH
13026: FOR_TO
13027: IFFALSE 13072
// begin PrepareHuman ( false , 2 , skill ) ;
13029: LD_INT 0
13031: PPUSH
13032: LD_INT 2
13034: PPUSH
13035: LD_VAR 0 11
13039: PPUSH
13040: CALL_OW 380
// un := CreateHuman ;
13044: LD_ADDR_VAR 0 4
13048: PUSH
13049: CALL_OW 44
13053: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13054: LD_ADDR_EXP 41
13058: PUSH
13059: LD_EXP 41
13063: PUSH
13064: LD_VAR 0 4
13068: ADD
13069: ST_TO_ADDR
// end ;
13070: GO 13026
13072: POP
13073: POP
// for i = 1 to tank do
13074: LD_ADDR_VAR 0 3
13078: PUSH
13079: DOUBLE
13080: LD_INT 1
13082: DEC
13083: ST_TO_ADDR
13084: LD_VAR 0 9
13088: PUSH
13089: FOR_TO
13090: IFFALSE 13203
// begin Randomize ;
13092: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13096: LD_ADDR_OWVAR 37
13100: PUSH
13101: LD_INT 2
13103: ST_TO_ADDR
// vc_engine := engine_siberite ;
13104: LD_ADDR_OWVAR 39
13108: PUSH
13109: LD_INT 3
13111: ST_TO_ADDR
// vc_control := control_manual ;
13112: LD_ADDR_OWVAR 38
13116: PUSH
13117: LD_INT 1
13119: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13120: LD_ADDR_OWVAR 40
13124: PUSH
13125: LD_INT 7
13127: PUSH
13128: LD_INT 9
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 1
13137: PPUSH
13138: LD_INT 2
13140: PPUSH
13141: CALL_OW 12
13145: ARRAY
13146: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13147: LD_ADDR_OWVAR 41
13151: PUSH
13152: LD_INT 35
13154: PPUSH
13155: LD_INT 55
13157: PPUSH
13158: CALL_OW 12
13162: ST_TO_ADDR
// un := CreateVehicle ;
13163: LD_ADDR_VAR 0 4
13167: PUSH
13168: CALL_OW 45
13172: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13173: LD_VAR 0 4
13177: PPUSH
13178: LD_INT 5
13180: PPUSH
13181: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13185: LD_ADDR_EXP 41
13189: PUSH
13190: LD_EXP 41
13194: PUSH
13195: LD_VAR 0 4
13199: ADD
13200: ST_TO_ADDR
// end ;
13201: GO 13089
13203: POP
13204: POP
// if cargo then
13205: LD_VAR 0 10
13209: IFFALSE 13327
// begin vc_chassis := us_medium_tracked ;
13211: LD_ADDR_OWVAR 37
13215: PUSH
13216: LD_INT 3
13218: ST_TO_ADDR
// vc_engine := engine_combustion ;
13219: LD_ADDR_OWVAR 39
13223: PUSH
13224: LD_INT 1
13226: ST_TO_ADDR
// vc_control := control_manual ;
13227: LD_ADDR_OWVAR 38
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13235: LD_ADDR_OWVAR 40
13239: PUSH
13240: LD_INT 12
13242: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13243: LD_ADDR_OWVAR 41
13247: PUSH
13248: LD_INT 35
13250: PPUSH
13251: LD_INT 55
13253: PPUSH
13254: CALL_OW 12
13258: ST_TO_ADDR
// un := CreateVehicle ;
13259: LD_ADDR_VAR 0 4
13263: PUSH
13264: CALL_OW 45
13268: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13269: LD_VAR 0 4
13273: PPUSH
13274: LD_INT 5
13276: PPUSH
13277: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13281: LD_ADDR_EXP 41
13285: PUSH
13286: LD_EXP 41
13290: PUSH
13291: LD_VAR 0 4
13295: ADD
13296: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13297: LD_VAR 0 4
13301: PPUSH
13302: LD_INT 3
13304: PPUSH
13305: LD_INT 30
13307: PPUSH
13308: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13312: LD_VAR 0 4
13316: PPUSH
13317: LD_INT 1
13319: PPUSH
13320: LD_INT 40
13322: PPUSH
13323: CALL_OW 290
// end ; end ;
13327: LD_VAR 0 2
13331: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13332: LD_INT 0
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
13340: PPUSH
13341: PPUSH
13342: PPUSH
13343: PPUSH
// uc_side := 4 ;
13344: LD_ADDR_OWVAR 20
13348: PUSH
13349: LD_INT 4
13351: ST_TO_ADDR
// uc_nation := 1 ;
13352: LD_ADDR_OWVAR 21
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13360: LD_ADDR_VAR 0 10
13364: PUSH
13365: LD_INT 6
13367: PUSH
13368: LD_INT 5
13370: PUSH
13371: LD_INT 4
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: PUSH
13379: LD_OWVAR 67
13383: ARRAY
13384: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13385: LD_ADDR_EXP 42
13389: PUSH
13390: EMPTY
13391: ST_TO_ADDR
// sold := 1 ;
13392: LD_ADDR_VAR 0 4
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// eng := 0 ;
13400: LD_ADDR_VAR 0 5
13404: PUSH
13405: LD_INT 0
13407: ST_TO_ADDR
// sci := 0 ;
13408: LD_ADDR_VAR 0 6
13412: PUSH
13413: LD_INT 0
13415: ST_TO_ADDR
// mech := 3 ;
13416: LD_ADDR_VAR 0 7
13420: PUSH
13421: LD_INT 3
13423: ST_TO_ADDR
// tank := 3 ;
13424: LD_ADDR_VAR 0 8
13428: PUSH
13429: LD_INT 3
13431: ST_TO_ADDR
// cargo := 0 ;
13432: LD_ADDR_VAR 0 9
13436: PUSH
13437: LD_INT 0
13439: ST_TO_ADDR
// for i = 1 to sold do
13440: LD_ADDR_VAR 0 2
13444: PUSH
13445: DOUBLE
13446: LD_INT 1
13448: DEC
13449: ST_TO_ADDR
13450: LD_VAR 0 4
13454: PUSH
13455: FOR_TO
13456: IFFALSE 13528
// begin if i = 1 then
13458: LD_VAR 0 2
13462: PUSH
13463: LD_INT 1
13465: EQUAL
13466: IFFALSE 13485
// PrepareHuman ( sex_male , 1 , skill ) else
13468: LD_INT 1
13470: PPUSH
13471: LD_INT 1
13473: PPUSH
13474: LD_VAR 0 10
13478: PPUSH
13479: CALL_OW 380
13483: GO 13500
// PrepareHuman ( false , 1 , skill ) ;
13485: LD_INT 0
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: LD_VAR 0 10
13495: PPUSH
13496: CALL_OW 380
// un := CreateHuman ;
13500: LD_ADDR_VAR 0 3
13504: PUSH
13505: CALL_OW 44
13509: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13510: LD_ADDR_EXP 42
13514: PUSH
13515: LD_EXP 42
13519: PUSH
13520: LD_VAR 0 3
13524: ADD
13525: ST_TO_ADDR
// end ;
13526: GO 13455
13528: POP
13529: POP
// for i = 1 to mech do
13530: LD_ADDR_VAR 0 2
13534: PUSH
13535: DOUBLE
13536: LD_INT 1
13538: DEC
13539: ST_TO_ADDR
13540: LD_VAR 0 7
13544: PUSH
13545: FOR_TO
13546: IFFALSE 13603
// begin PrepareHuman ( false , 3 , skill ) ;
13548: LD_INT 0
13550: PPUSH
13551: LD_INT 3
13553: PPUSH
13554: LD_VAR 0 10
13558: PPUSH
13559: CALL_OW 380
// un := CreateHuman ;
13563: LD_ADDR_VAR 0 3
13567: PUSH
13568: CALL_OW 44
13572: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_INT 3
13580: PPUSH
13581: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13585: LD_ADDR_EXP 42
13589: PUSH
13590: LD_EXP 42
13594: PUSH
13595: LD_VAR 0 3
13599: ADD
13600: ST_TO_ADDR
// end ;
13601: GO 13545
13603: POP
13604: POP
// for i = 1 to tank do
13605: LD_ADDR_VAR 0 2
13609: PUSH
13610: DOUBLE
13611: LD_INT 1
13613: DEC
13614: ST_TO_ADDR
13615: LD_VAR 0 8
13619: PUSH
13620: FOR_TO
13621: IFFALSE 13867
// begin Randomize ;
13623: CALL_OW 10
// if i < 3 then
13627: LD_VAR 0 2
13631: PUSH
13632: LD_INT 3
13634: LESS
13635: IFFALSE 13744
// begin vc_chassis := us_medium_tracked ;
13637: LD_ADDR_OWVAR 37
13641: PUSH
13642: LD_INT 3
13644: ST_TO_ADDR
// vc_engine := engine_combustion ;
13645: LD_ADDR_OWVAR 39
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// vc_control := control_manual ;
13653: LD_ADDR_OWVAR 38
13657: PUSH
13658: LD_INT 1
13660: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13661: LD_ADDR_OWVAR 40
13665: PUSH
13666: LD_INT 3
13668: PUSH
13669: LD_INT 9
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 2
13681: PPUSH
13682: CALL_OW 12
13686: ARRAY
13687: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13688: LD_ADDR_OWVAR 41
13692: PUSH
13693: LD_INT 35
13695: PPUSH
13696: LD_INT 55
13698: PPUSH
13699: CALL_OW 12
13703: ST_TO_ADDR
// un := CreateVehicle ;
13704: LD_ADDR_VAR 0 3
13708: PUSH
13709: CALL_OW 45
13713: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13714: LD_VAR 0 3
13718: PPUSH
13719: LD_INT 5
13721: PPUSH
13722: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13726: LD_ADDR_EXP 42
13730: PUSH
13731: LD_EXP 42
13735: PUSH
13736: LD_VAR 0 3
13740: ADD
13741: ST_TO_ADDR
// end else
13742: GO 13865
// begin uc_nation := 3 ;
13744: LD_ADDR_OWVAR 21
13748: PUSH
13749: LD_INT 3
13751: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13752: LD_ADDR_OWVAR 37
13756: PUSH
13757: LD_INT 22
13759: ST_TO_ADDR
// vc_engine := engine_combustion ;
13760: LD_ADDR_OWVAR 39
13764: PUSH
13765: LD_INT 1
13767: ST_TO_ADDR
// vc_control := control_manual ;
13768: LD_ADDR_OWVAR 38
13772: PUSH
13773: LD_INT 1
13775: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13776: LD_ADDR_OWVAR 40
13780: PUSH
13781: LD_INT 51
13783: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13784: LD_ADDR_OWVAR 41
13788: PUSH
13789: LD_INT 35
13791: PPUSH
13792: LD_INT 55
13794: PPUSH
13795: CALL_OW 12
13799: ST_TO_ADDR
// un := CreateVehicle ;
13800: LD_ADDR_VAR 0 3
13804: PUSH
13805: CALL_OW 45
13809: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13810: LD_VAR 0 3
13814: PPUSH
13815: LD_INT 496
13817: PPUSH
13818: CALL_OW 234
// SetTag ( un , 5 ) ;
13822: LD_VAR 0 3
13826: PPUSH
13827: LD_INT 5
13829: PPUSH
13830: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13834: LD_VAR 0 3
13838: PPUSH
13839: LD_INT 2
13841: PPUSH
13842: LD_INT 100
13844: PPUSH
13845: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13849: LD_ADDR_EXP 42
13853: PUSH
13854: LD_EXP 42
13858: PUSH
13859: LD_VAR 0 3
13863: ADD
13864: ST_TO_ADDR
// end ; end ;
13865: GO 13620
13867: POP
13868: POP
// end ; end_of_file
13869: LD_VAR 0 1
13873: RET
// export function Action ; begin
13874: LD_INT 0
13876: PPUSH
// InGameOn ;
13877: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13881: LD_INT 151
13883: PPUSH
13884: LD_INT 107
13886: PPUSH
13887: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13891: LD_EXP 38
13895: PPUSH
13896: LD_INT 171
13898: PPUSH
13899: LD_INT 108
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13909: LD_EXP 39
13913: PPUSH
13914: LD_INT 172
13916: PPUSH
13917: LD_INT 110
13919: PPUSH
13920: LD_INT 0
13922: PPUSH
13923: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13927: LD_EXP 38
13931: PPUSH
13932: LD_INT 156
13934: PPUSH
13935: LD_INT 107
13937: PPUSH
13938: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13942: LD_EXP 39
13946: PPUSH
13947: LD_INT 154
13949: PPUSH
13950: LD_INT 105
13952: PPUSH
13953: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13957: LD_INT 4
13959: PPUSH
13960: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13964: LD_EXP 38
13968: PPUSH
13969: CALL_OW 250
13973: PUSH
13974: LD_INT 156
13976: EQUAL
13977: PUSH
13978: LD_EXP 38
13982: PPUSH
13983: CALL_OW 251
13987: PUSH
13988: LD_INT 107
13990: EQUAL
13991: AND
13992: IFFALSE 13957
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13994: LD_EXP 38
13998: PUSH
13999: LD_EXP 39
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PPUSH
14008: LD_INT 35
14010: PPUSH
14011: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
14015: LD_EXP 38
14019: PPUSH
14020: LD_STRING D1-A-1
14022: PPUSH
14023: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14027: LD_EXP 39
14031: PPUSH
14032: LD_STRING D1-B-1
14034: PPUSH
14035: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14039: LD_EXP 38
14043: PPUSH
14044: LD_STRING D1-A-2
14046: PPUSH
14047: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14051: LD_EXP 39
14055: PPUSH
14056: LD_STRING D1-B-2
14058: PPUSH
14059: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14063: LD_EXP 38
14067: PUSH
14068: LD_EXP 39
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: LD_INT 147
14079: PPUSH
14080: LD_INT 108
14082: PPUSH
14083: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14087: LD_EXP 38
14091: PPUSH
14092: LD_STRING D1-A-3
14094: PPUSH
14095: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14099: LD_INT 4
14101: PPUSH
14102: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_INT 35
14113: PPUSH
14114: CALL_OW 296
14118: PUSH
14119: LD_INT 8
14121: LESS
14122: IFFALSE 14099
// ComTurnUnit ( guyA , guyB ) ;
14124: LD_EXP 38
14128: PPUSH
14129: LD_EXP 39
14133: PPUSH
14134: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14138: LD_EXP 39
14142: PPUSH
14143: LD_EXP 38
14147: PPUSH
14148: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14152: LD_EXP 38
14156: PPUSH
14157: LD_STRING D1-A-10
14159: PPUSH
14160: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14164: LD_EXP 39
14168: PPUSH
14169: LD_STRING D1-B-10
14171: PPUSH
14172: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14176: LD_EXP 38
14180: PPUSH
14181: LD_STRING D1-A-11
14183: PPUSH
14184: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14188: LD_EXP 39
14192: PPUSH
14193: LD_STRING D1-B-11
14195: PPUSH
14196: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14200: LD_EXP 38
14204: PPUSH
14205: LD_STRING D1-A-12
14207: PPUSH
14208: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14212: LD_EXP 39
14216: PPUSH
14217: LD_STRING D1-B-12
14219: PPUSH
14220: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14224: LD_EXP 38
14228: PPUSH
14229: LD_STRING D1-A-13
14231: PPUSH
14232: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14236: LD_EXP 39
14240: PPUSH
14241: LD_STRING D1-B-13
14243: PPUSH
14244: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14248: LD_EXP 38
14252: PPUSH
14253: LD_STRING D1-A-14
14255: PPUSH
14256: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14260: LD_EXP 39
14264: PPUSH
14265: LD_STRING D1-B-14
14267: PPUSH
14268: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14272: LD_EXP 38
14276: PPUSH
14277: LD_STRING D1-A-15
14279: PPUSH
14280: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14284: LD_EXP 39
14288: PPUSH
14289: LD_STRING D1-B-15
14291: PPUSH
14292: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14296: LD_EXP 38
14300: PPUSH
14301: LD_STRING D1-A-16
14303: PPUSH
14304: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14308: LD_EXP 39
14312: PPUSH
14313: LD_STRING D1-B-16
14315: PPUSH
14316: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14320: LD_EXP 38
14324: PPUSH
14325: LD_STRING D1-A-17
14327: PPUSH
14328: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14332: LD_EXP 39
14336: PPUSH
14337: LD_STRING D1-B-17
14339: PPUSH
14340: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14344: LD_EXP 38
14348: PPUSH
14349: LD_STRING D1-A-18
14351: PPUSH
14352: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14356: LD_INT 35
14358: PPUSH
14359: LD_INT 1
14361: PPUSH
14362: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14366: LD_EXP 38
14370: PUSH
14371: LD_EXP 39
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PPUSH
14380: LD_INT 35
14382: PPUSH
14383: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14387: LD_INT 4
14389: PPUSH
14390: CALL_OW 67
// until IsInUnit ( guyA ) ;
14394: LD_EXP 38
14398: PPUSH
14399: CALL_OW 310
14403: IFFALSE 14387
// Wait ( 0 0$02 ) ;
14405: LD_INT 70
14407: PPUSH
14408: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14412: LD_EXP 38
14416: PPUSH
14417: LD_STRING D1-A-19
14419: PPUSH
14420: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14424: LD_EXP 39
14428: PPUSH
14429: LD_STRING D1-B-19
14431: PPUSH
14432: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14436: LD_EXP 38
14440: PPUSH
14441: LD_STRING D1-A-20
14443: PPUSH
14444: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14448: LD_INT 10
14450: PPUSH
14451: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14455: LD_EXP 39
14459: PPUSH
14460: LD_STRING D1-B-20
14462: PPUSH
14463: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14467: LD_EXP 38
14471: PPUSH
14472: LD_STRING D1-A-21
14474: PPUSH
14475: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14479: LD_EXP 39
14483: PPUSH
14484: LD_STRING D1-B-21
14486: PPUSH
14487: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14491: LD_EXP 38
14495: PPUSH
14496: LD_STRING D1-A-22
14498: PPUSH
14499: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14503: LD_EXP 39
14507: PPUSH
14508: LD_STRING D1-B-22
14510: PPUSH
14511: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14515: LD_EXP 38
14519: PPUSH
14520: LD_STRING D1-A-23
14522: PPUSH
14523: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14527: LD_EXP 39
14531: PPUSH
14532: LD_STRING D1-B-23
14534: PPUSH
14535: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14539: LD_EXP 38
14543: PPUSH
14544: LD_STRING D1-A-24
14546: PPUSH
14547: CALL_OW 88
// InGameOff ;
14551: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14555: LD_STRING M_main
14557: PPUSH
14558: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14562: LD_INT 4
14564: PPUSH
14565: LD_INT 1
14567: PPUSH
14568: CALL_OW 343
// game_status := true ;
14572: LD_ADDR_EXP 29
14576: PUSH
14577: LD_INT 1
14579: ST_TO_ADDR
// end ;
14580: LD_VAR 0 1
14584: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14585: LD_INT 1
14587: PPUSH
14588: CALL 6376 0 1
14592: PUSH
14593: LD_INT 0
14595: GREATER
14596: IFFALSE 14698
14598: GO 14600
14600: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14601: LD_INT 35
14603: PPUSH
14604: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14608: LD_INT 1
14610: PPUSH
14611: CALL 6376 0 1
14615: PUSH
14616: LD_INT 1
14618: ARRAY
14619: PPUSH
14620: CALL_OW 461
14624: PUSH
14625: LD_INT 1
14627: NONEQUAL
14628: IFFALSE 14601
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14630: LD_EXP 38
14634: PPUSH
14635: CALL_OW 300
14639: PUSH
14640: LD_EXP 39
14644: PPUSH
14645: CALL_OW 300
14649: AND
14650: PUSH
14651: LD_EXP 30
14655: NOT
14656: AND
14657: IFFALSE 14683
// begin Say ( guyA , DL-A-1 ) ;
14659: LD_EXP 38
14663: PPUSH
14664: LD_STRING DL-A-1
14666: PPUSH
14667: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14671: LD_EXP 39
14675: PPUSH
14676: LD_STRING DL-B-1
14678: PPUSH
14679: CALL_OW 88
// end ; if not helps_can_arrive then
14683: LD_EXP 31
14687: NOT
14688: IFFALSE 14698
// helps_can_arrive := true ;
14690: LD_ADDR_EXP 31
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// end ;
14698: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14699: LD_INT 1
14701: PPUSH
14702: CALL 6376 0 1
14706: PUSH
14707: LD_INT 0
14709: GREATER
14710: PUSH
14711: LD_EXP 38
14715: PPUSH
14716: CALL_OW 300
14720: AND
14721: PUSH
14722: LD_EXP 39
14726: PPUSH
14727: CALL_OW 300
14731: AND
14732: PUSH
14733: LD_INT 22
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 25
14745: PUSH
14746: LD_INT 12
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 69
14761: PUSH
14762: LD_INT 0
14764: EQUAL
14765: AND
14766: PUSH
14767: LD_INT 1
14769: PPUSH
14770: LD_INT 25
14772: PUSH
14773: LD_INT 12
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: PPUSH
14785: LD_EXP 38
14789: PPUSH
14790: CALL_OW 74
14794: PPUSH
14795: CALL_OW 292
14799: AND
14800: IFFALSE 14841
14802: GO 14804
14804: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14805: LD_EXP 38
14809: PPUSH
14810: LD_STRING DA-A-1
14812: PPUSH
14813: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14817: LD_EXP 39
14821: PPUSH
14822: LD_STRING DA-B-1
14824: PPUSH
14825: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14829: LD_EXP 38
14833: PPUSH
14834: LD_STRING DA-A-2
14836: PPUSH
14837: CALL_OW 88
// end ;
14841: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14842: LD_EXP 29
14846: PUSH
14847: LD_EXP 38
14851: PPUSH
14852: LD_INT 6
14854: PPUSH
14855: CALL_OW 299
14859: PUSH
14860: LD_INT 7
14862: LESS
14863: AND
14864: IFFALSE 14917
14866: GO 14868
14868: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14869: LD_INT 117
14871: PPUSH
14872: LD_INT 50
14874: PPUSH
14875: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14879: LD_INT 1
14881: PPUSH
14882: CALL 10013 0 1
14886: PUSH
14887: LD_INT 2
14889: ARRAY
14890: PPUSH
14891: LD_STRING D5-A-1
14893: PPUSH
14894: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14898: LD_INT 1
14900: PPUSH
14901: CALL 10013 0 1
14905: PUSH
14906: LD_INT 1
14908: ARRAY
14909: PPUSH
14910: LD_STRING D5-B-1
14912: PPUSH
14913: CALL_OW 88
// end ;
14917: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14918: LD_INT 7
14920: PPUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 70
14935: PUSH
14936: LD_INT 0
14938: GREATER
14939: IFFALSE 15084
14941: GO 14943
14943: DISABLE
// begin Wait ( 0 0$03 ) ;
14944: LD_INT 105
14946: PPUSH
14947: CALL_OW 67
// DialogueOn ;
14951: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14955: LD_INT 1
14957: PPUSH
14958: CALL 10013 0 1
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: LD_STRING D6-A-1
14969: PPUSH
14970: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14974: LD_INT 1
14976: PPUSH
14977: CALL 10013 0 1
14981: PUSH
14982: LD_INT 2
14984: ARRAY
14985: PPUSH
14986: LD_STRING D6-B-1
14988: PPUSH
14989: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14993: LD_INT 95
14995: PPUSH
14996: LD_INT 8
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: LD_INT 20
15004: PPUSH
15005: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
15009: LD_INT 10
15011: PPUSH
15012: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
15016: LD_INT 1
15018: PPUSH
15019: CALL 10013 0 1
15023: PUSH
15024: LD_INT 1
15026: ARRAY
15027: PPUSH
15028: LD_STRING D6-A-2
15030: PPUSH
15031: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15035: LD_INT 1
15037: PPUSH
15038: CALL 10013 0 1
15042: PUSH
15043: LD_INT 2
15045: ARRAY
15046: PPUSH
15047: LD_STRING D6-B-2
15049: PPUSH
15050: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15054: LD_INT 1
15056: PPUSH
15057: CALL 10013 0 1
15061: PUSH
15062: LD_INT 1
15064: ARRAY
15065: PPUSH
15066: LD_STRING D6-A-3
15068: PPUSH
15069: CALL_OW 88
// DialogueOff ;
15073: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15077: LD_STRING M_base
15079: PPUSH
15080: CALL_OW 337
// end ;
15084: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15085: LD_EXP 30
15089: NOT
15090: PUSH
15091: LD_INT 22
15093: PUSH
15094: LD_INT 3
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 2
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: PUSH
15120: LD_INT 0
15122: GREATER
15123: AND
15124: IFFALSE 15257
15126: GO 15128
15128: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15129: LD_INT 35
15131: PPUSH
15132: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15136: LD_INT 22
15138: PUSH
15139: LD_INT 3
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 21
15148: PUSH
15149: LD_INT 2
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PPUSH
15160: CALL_OW 69
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL 10013 0 1
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: CALL_OW 74
15181: PPUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL 10013 0 1
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: PPUSH
15194: CALL_OW 296
15198: PUSH
15199: LD_INT 7
15201: LESS
15202: IFFALSE 15129
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15204: LD_INT 1
15206: PPUSH
15207: CALL 10013 0 1
15211: PUSH
15212: LD_INT 1
15214: ARRAY
15215: PPUSH
15216: LD_STRING DR-A-1
15218: PPUSH
15219: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15223: LD_INT 1
15225: PPUSH
15226: CALL 10013 0 1
15230: PUSH
15231: LD_INT 2
15233: ARRAY
15234: PPUSH
15235: LD_STRING DR-B-1
15237: PPUSH
15238: CALL_OW 88
// Wait ( 3 3$00 ) ;
15242: LD_INT 6300
15244: PPUSH
15245: CALL_OW 67
// ru_spotted := true ;
15249: LD_ADDR_EXP 16
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// end ;
15257: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15258: LD_INT 35
15260: PPUSH
15261: CALL_OW 300
15265: NOT
15266: IFFALSE 15290
15268: GO 15270
15270: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15271: LD_INT 1
15273: PPUSH
15274: CALL 10013 0 1
15278: PUSH
15279: LD_INT 1
15281: ARRAY
15282: PPUSH
15283: LD_STRING DDR-A-1
15285: PPUSH
15286: CALL_OW 88
15290: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15291: LD_INT 1
15293: PPUSH
15294: LD_INT 30
15296: PPUSH
15297: CALL 6227 0 2
15301: IFFALSE 15383
15303: GO 15305
15305: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15306: LD_INT 35
15308: PPUSH
15309: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15313: LD_INT 1
15315: PPUSH
15316: LD_INT 30
15318: PPUSH
15319: CALL 6227 0 2
15323: PUSH
15324: LD_INT 1
15326: ARRAY
15327: PPUSH
15328: CALL_OW 461
15332: PUSH
15333: LD_INT 1
15335: NONEQUAL
15336: IFFALSE 15306
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15338: LD_INT 1
15340: PPUSH
15341: CALL 10013 0 1
15345: PUSH
15346: LD_INT 1
15348: ARRAY
15349: PPUSH
15350: LD_STRING D8-A-1
15352: PPUSH
15353: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15357: LD_INT 1
15359: PPUSH
15360: CALL 10013 0 1
15364: PUSH
15365: LD_INT 2
15367: ARRAY
15368: PPUSH
15369: LD_STRING D8-B-1
15371: PPUSH
15372: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15376: LD_STRING M_mineok
15378: PPUSH
15379: CALL_OW 337
// end ;
15383: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15384: LD_INT 22
15386: PUSH
15387: LD_INT 1
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 0
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 3
15406: PUSH
15407: LD_INT 57
15409: PUSH
15410: EMPTY
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: PPUSH
15422: CALL_OW 69
15426: PUSH
15427: LD_INT 1
15429: GREATER
15430: PUSH
15431: LD_INT 22
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 30
15443: PUSH
15444: LD_INT 0
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 3
15453: PUSH
15454: LD_INT 57
15456: PUSH
15457: EMPTY
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 69
15473: PUSH
15474: LD_INT 1
15476: EQUAL
15477: PUSH
15478: LD_INT 35
15480: PPUSH
15481: CALL_OW 300
15485: NOT
15486: AND
15487: OR
15488: IFFALSE 15540
15490: GO 15492
15492: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15493: LD_INT 22
15495: PUSH
15496: LD_INT 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 25
15505: PUSH
15506: LD_INT 2
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PPUSH
15517: CALL_OW 69
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PPUSH
15526: LD_STRING D7-A-1
15528: PPUSH
15529: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15533: LD_STRING M_baseok
15535: PPUSH
15536: CALL_OW 337
// end ;
15540: END
// every 0 0$01 trigger mine_ck do
15541: LD_EXP 35
15545: IFFALSE 15576
15547: GO 15549
15549: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15550: LD_INT 1
15552: PPUSH
15553: CALL 10013 0 1
15557: PUSH
15558: LD_INT 1
15560: ARRAY
15561: PPUSH
15562: LD_STRING D9-A-1
15564: PPUSH
15565: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15569: LD_STRING M_minedest
15571: PPUSH
15572: CALL_OW 337
// end ;
15576: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15577: LD_EXP 29
15581: IFFALSE 16087
15583: GO 15585
15585: DISABLE
15586: LD_INT 0
15588: PPUSH
15589: PPUSH
15590: PPUSH
15591: PPUSH
15592: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15593: LD_OWVAR 67
15597: PPUSH
15598: CALL 11914 0 1
// if not helps_can_arrive then
15602: LD_EXP 31
15606: NOT
15607: IFFALSE 15635
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15609: LD_EXP 40
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: LD_STRING DB-Delay
15620: PPUSH
15621: CALL_OW 94
// time := 10 10$00 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_INT 21000
15632: ST_TO_ADDR
// end else
15633: GO 15643
// time := 3 3$00 ;
15635: LD_ADDR_VAR 0 1
15639: PUSH
15640: LD_INT 6300
15642: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15643: LD_ADDR_VAR 0 1
15647: PUSH
15648: LD_VAR 0 1
15652: PUSH
15653: LD_INT 35
15655: MINUS
15656: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15657: LD_INT 35
15659: PPUSH
15660: CALL_OW 67
// end until time = 0 0$00 ;
15664: LD_VAR 0 1
15668: PUSH
15669: LD_INT 0
15671: EQUAL
15672: IFFALSE 15643
// helps_arrive := true ;
15674: LD_ADDR_EXP 30
15678: PUSH
15679: LD_INT 1
15681: ST_TO_ADDR
// if IsLive ( guyA ) then
15682: LD_EXP 38
15686: PPUSH
15687: CALL_OW 300
15691: IFFALSE 15705
// r := guyA else
15693: LD_ADDR_VAR 0 4
15697: PUSH
15698: LD_EXP 38
15702: ST_TO_ADDR
15703: GO 15715
// r := guyB ;
15705: LD_ADDR_VAR 0 4
15709: PUSH
15710: LD_EXP 39
15714: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15715: LD_EXP 40
15719: PUSH
15720: LD_INT 1
15722: ARRAY
15723: PPUSH
15724: LD_STRING D2-A-1
15726: PPUSH
15727: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15731: LD_VAR 0 4
15735: PPUSH
15736: LD_STRING D2-B-1
15738: PPUSH
15739: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15743: LD_EXP 40
15747: PUSH
15748: LD_INT 1
15750: ARRAY
15751: PPUSH
15752: LD_STRING D2-A-2
15754: PPUSH
15755: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15759: LD_VAR 0 4
15763: PPUSH
15764: LD_STRING D2-B-2
15766: PPUSH
15767: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15771: LD_EXP 40
15775: PUSH
15776: LD_INT 1
15778: ARRAY
15779: PPUSH
15780: LD_STRING D2-A-3
15782: PPUSH
15783: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15787: LD_VAR 0 4
15791: PPUSH
15792: LD_STRING D2-B-3
15794: PPUSH
15795: CALL_OW 88
// to_veh := [ ] ;
15799: LD_ADDR_VAR 0 5
15803: PUSH
15804: EMPTY
15805: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15806: LD_ADDR_VAR 0 2
15810: PUSH
15811: DOUBLE
15812: LD_INT 1
15814: DEC
15815: ST_TO_ADDR
15816: LD_EXP 40
15820: PUSH
15821: FOR_TO
15822: IFFALSE 16085
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15824: LD_EXP 40
15828: PUSH
15829: LD_VAR 0 2
15833: ARRAY
15834: PPUSH
15835: CALL_OW 110
15839: PUSH
15840: LD_INT 3
15842: EQUAL
15843: IFFALSE 15869
// to_veh := to_veh ^ Beta_Squad [ i ] else
15845: LD_ADDR_VAR 0 5
15849: PUSH
15850: LD_VAR 0 5
15854: PUSH
15855: LD_EXP 40
15859: PUSH
15860: LD_VAR 0 2
15864: ARRAY
15865: ADD
15866: ST_TO_ADDR
15867: GO 15994
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15869: LD_EXP 40
15873: PUSH
15874: LD_VAR 0 2
15878: ARRAY
15879: PPUSH
15880: CALL_OW 110
15884: PUSH
15885: LD_INT 5
15887: EQUAL
15888: IFFALSE 15973
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 4
15903: PPUSH
15904: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15908: LD_EXP 40
15912: PUSH
15913: LD_VAR 0 2
15917: ARRAY
15918: PPUSH
15919: LD_INT 5
15921: PPUSH
15922: LD_INT 0
15924: PPUSH
15925: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15929: LD_VAR 0 5
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PPUSH
15938: LD_EXP 40
15942: PUSH
15943: LD_VAR 0 2
15947: ARRAY
15948: PPUSH
15949: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15953: LD_ADDR_VAR 0 5
15957: PUSH
15958: LD_VAR 0 5
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: CALL_OW 3
15970: ST_TO_ADDR
// end else
15971: GO 15994
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15973: LD_EXP 40
15977: PUSH
15978: LD_VAR 0 2
15982: ARRAY
15983: PPUSH
15984: LD_INT 5
15986: PPUSH
15987: LD_INT 0
15989: PPUSH
15990: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15994: LD_EXP 40
15998: PUSH
15999: LD_VAR 0 2
16003: ARRAY
16004: PPUSH
16005: LD_INT 165
16007: PPUSH
16008: LD_INT 105
16010: PPUSH
16011: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16015: LD_INT 70
16017: PPUSH
16018: LD_INT 140
16020: PPUSH
16021: CALL_OW 12
16025: PPUSH
16026: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16030: LD_EXP 40
16034: PUSH
16035: LD_VAR 0 2
16039: ARRAY
16040: PPUSH
16041: LD_INT 1
16043: PPUSH
16044: CALL_OW 235
// if i = 1 then
16048: LD_VAR 0 2
16052: PUSH
16053: LD_INT 1
16055: EQUAL
16056: IFFALSE 16068
// CenterNowOnXY ( 168 , 109 ) ;
16058: LD_INT 168
16060: PPUSH
16061: LD_INT 109
16063: PPUSH
16064: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16068: LD_EXP 40
16072: PUSH
16073: LD_VAR 0 2
16077: ARRAY
16078: PPUSH
16079: CALL_OW 141
// end ;
16083: GO 15821
16085: POP
16086: POP
// end ;
16087: PPOPN 5
16089: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16090: LD_EXP 30
16094: IFFALSE 17123
16096: GO 16098
16098: DISABLE
16099: LD_INT 0
16101: PPUSH
16102: PPUSH
// begin Wait ( 5 5$00 ) ;
16103: LD_INT 10500
16105: PPUSH
16106: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16110: LD_OWVAR 67
16114: PPUSH
16115: CALL 12603 0 1
// to_veh := [ ] ;
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: EMPTY
16125: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16126: LD_ADDR_VAR 0 1
16130: PUSH
16131: DOUBLE
16132: LD_INT 1
16134: DEC
16135: ST_TO_ADDR
16136: LD_EXP 41
16140: PUSH
16141: FOR_TO
16142: IFFALSE 16370
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16144: LD_EXP 41
16148: PUSH
16149: LD_VAR 0 1
16153: ARRAY
16154: PPUSH
16155: CALL_OW 110
16159: PUSH
16160: LD_INT 3
16162: EQUAL
16163: IFFALSE 16189
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16165: LD_ADDR_VAR 0 2
16169: PUSH
16170: LD_VAR 0 2
16174: PUSH
16175: LD_EXP 41
16179: PUSH
16180: LD_VAR 0 1
16184: ARRAY
16185: ADD
16186: ST_TO_ADDR
16187: GO 16314
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16189: LD_EXP 41
16193: PUSH
16194: LD_VAR 0 1
16198: ARRAY
16199: PPUSH
16200: CALL_OW 110
16204: PUSH
16205: LD_INT 5
16207: EQUAL
16208: IFFALSE 16293
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 4
16223: PPUSH
16224: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16228: LD_EXP 41
16232: PUSH
16233: LD_VAR 0 1
16237: ARRAY
16238: PPUSH
16239: LD_INT 5
16241: PPUSH
16242: LD_INT 0
16244: PPUSH
16245: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16249: LD_VAR 0 2
16253: PUSH
16254: LD_INT 1
16256: ARRAY
16257: PPUSH
16258: LD_EXP 41
16262: PUSH
16263: LD_VAR 0 1
16267: ARRAY
16268: PPUSH
16269: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: LD_VAR 0 2
16282: PPUSH
16283: LD_INT 1
16285: PPUSH
16286: CALL_OW 3
16290: ST_TO_ADDR
// end else
16291: GO 16314
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16293: LD_EXP 41
16297: PUSH
16298: LD_VAR 0 1
16302: ARRAY
16303: PPUSH
16304: LD_INT 5
16306: PPUSH
16307: LD_INT 0
16309: PPUSH
16310: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16314: LD_EXP 41
16318: PUSH
16319: LD_VAR 0 1
16323: ARRAY
16324: PPUSH
16325: LD_INT 164
16327: PPUSH
16328: LD_INT 104
16330: PPUSH
16331: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16335: LD_INT 70
16337: PPUSH
16338: LD_INT 140
16340: PPUSH
16341: CALL_OW 12
16345: PPUSH
16346: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16350: LD_EXP 41
16354: PUSH
16355: LD_VAR 0 1
16359: ARRAY
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: CALL_OW 235
// end ;
16368: GO 16141
16370: POP
16371: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16372: LD_EXP 41
16376: PUSH
16377: LD_INT 1
16379: ARRAY
16380: PPUSH
16381: LD_STRING D3-A-1
16383: PPUSH
16384: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16388: LD_INT 1
16390: PPUSH
16391: CALL 10013 0 1
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: PPUSH
16400: LD_STRING D3-B-1
16402: PPUSH
16403: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16407: LD_EXP 41
16411: PUSH
16412: LD_INT 1
16414: ARRAY
16415: PPUSH
16416: LD_STRING D3-A-2
16418: PPUSH
16419: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16423: LD_INT 1
16425: PPUSH
16426: CALL 10013 0 1
16430: PUSH
16431: LD_INT 1
16433: ARRAY
16434: PPUSH
16435: LD_STRING D3-B-2
16437: PPUSH
16438: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16442: LD_EXP 41
16446: PUSH
16447: LD_INT 1
16449: ARRAY
16450: PPUSH
16451: LD_STRING D3-A-3
16453: PPUSH
16454: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16458: LD_INT 1
16460: PPUSH
16461: CALL 10013 0 1
16465: PUSH
16466: LD_INT 1
16468: ARRAY
16469: PPUSH
16470: LD_STRING D3-B-3
16472: PPUSH
16473: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16477: LD_EXP 41
16481: PUSH
16482: LD_INT 1
16484: ARRAY
16485: PPUSH
16486: LD_STRING D3-A-4
16488: PPUSH
16489: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16493: LD_INT 1
16495: PPUSH
16496: CALL 10013 0 1
16500: PUSH
16501: LD_INT 1
16503: ARRAY
16504: PPUSH
16505: LD_STRING D3-B-4
16507: PPUSH
16508: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16512: LD_EXP 41
16516: PUSH
16517: LD_INT 1
16519: ARRAY
16520: PPUSH
16521: LD_STRING D3-A-5
16523: PPUSH
16524: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16528: LD_INT 1
16530: PPUSH
16531: CALL 10013 0 1
16535: PUSH
16536: LD_INT 1
16538: ARRAY
16539: PPUSH
16540: LD_STRING D3-B-5
16542: PPUSH
16543: CALL_OW 88
// for i = 1 to Gamma_Squad do
16547: LD_ADDR_VAR 0 1
16551: PUSH
16552: DOUBLE
16553: LD_INT 1
16555: DEC
16556: ST_TO_ADDR
16557: LD_EXP 41
16561: PUSH
16562: FOR_TO
16563: IFFALSE 16585
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16565: LD_EXP 41
16569: PUSH
16570: LD_VAR 0 1
16574: ARRAY
16575: PPUSH
16576: LD_INT 1
16578: PPUSH
16579: CALL_OW 235
16583: GO 16562
16585: POP
16586: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16587: LD_INT 6300
16589: PUSH
16590: LD_INT 10500
16592: PUSH
16593: LD_INT 11550
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: LD_OWVAR 67
16605: ARRAY
16606: PPUSH
16607: CALL_OW 67
// AddZetaSquad ;
16611: CALL 13332 0 0
// Wait ( 0 0$10 ) ;
16615: LD_INT 350
16617: PPUSH
16618: CALL_OW 67
// to_veh := [ ] ;
16622: LD_ADDR_VAR 0 2
16626: PUSH
16627: EMPTY
16628: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16629: LD_ADDR_VAR 0 1
16633: PUSH
16634: DOUBLE
16635: LD_INT 1
16637: DEC
16638: ST_TO_ADDR
16639: LD_EXP 42
16643: PUSH
16644: FOR_TO
16645: IFFALSE 16855
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16647: LD_EXP 42
16651: PUSH
16652: LD_VAR 0 1
16656: ARRAY
16657: PPUSH
16658: CALL_OW 110
16662: PUSH
16663: LD_INT 3
16665: EQUAL
16666: IFFALSE 16692
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16668: LD_ADDR_VAR 0 2
16672: PUSH
16673: LD_VAR 0 2
16677: PUSH
16678: LD_EXP 42
16682: PUSH
16683: LD_VAR 0 1
16687: ARRAY
16688: ADD
16689: ST_TO_ADDR
16690: GO 16817
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16692: LD_EXP 42
16696: PUSH
16697: LD_VAR 0 1
16701: ARRAY
16702: PPUSH
16703: CALL_OW 110
16707: PUSH
16708: LD_INT 5
16710: EQUAL
16711: IFFALSE 16796
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 4
16726: PPUSH
16727: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16731: LD_EXP 42
16735: PUSH
16736: LD_VAR 0 1
16740: ARRAY
16741: PPUSH
16742: LD_INT 5
16744: PPUSH
16745: LD_INT 0
16747: PPUSH
16748: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16752: LD_VAR 0 2
16756: PUSH
16757: LD_INT 1
16759: ARRAY
16760: PPUSH
16761: LD_EXP 42
16765: PUSH
16766: LD_VAR 0 1
16770: ARRAY
16771: PPUSH
16772: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16776: LD_ADDR_VAR 0 2
16780: PUSH
16781: LD_VAR 0 2
16785: PPUSH
16786: LD_INT 1
16788: PPUSH
16789: CALL_OW 3
16793: ST_TO_ADDR
// end else
16794: GO 16817
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16796: LD_EXP 42
16800: PUSH
16801: LD_VAR 0 1
16805: ARRAY
16806: PPUSH
16807: LD_INT 5
16809: PPUSH
16810: LD_INT 0
16812: PPUSH
16813: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16817: LD_EXP 42
16821: PUSH
16822: LD_VAR 0 1
16826: ARRAY
16827: PPUSH
16828: LD_INT 165
16830: PPUSH
16831: LD_INT 105
16833: PPUSH
16834: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16838: LD_INT 70
16840: PPUSH
16841: LD_INT 140
16843: PPUSH
16844: CALL_OW 12
16848: PPUSH
16849: CALL_OW 67
// end ;
16853: GO 16644
16855: POP
16856: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16857: LD_EXP 42
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: LD_STRING D4-A-1
16868: PPUSH
16869: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16873: LD_INT 1
16875: PPUSH
16876: CALL 10013 0 1
16880: PUSH
16881: LD_INT 1
16883: ARRAY
16884: PPUSH
16885: LD_STRING D4-B-1
16887: PPUSH
16888: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16892: LD_EXP 42
16896: PUSH
16897: LD_INT 1
16899: ARRAY
16900: PPUSH
16901: LD_STRING D4-A-2
16903: PPUSH
16904: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16908: LD_INT 1
16910: PPUSH
16911: CALL 10013 0 1
16915: PUSH
16916: LD_INT 1
16918: ARRAY
16919: PPUSH
16920: LD_STRING D4-B-2
16922: PPUSH
16923: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16927: LD_EXP 42
16931: PUSH
16932: LD_INT 1
16934: ARRAY
16935: PPUSH
16936: LD_STRING D4-A-3
16938: PPUSH
16939: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16943: LD_INT 1
16945: PPUSH
16946: CALL 10013 0 1
16950: PUSH
16951: LD_INT 1
16953: ARRAY
16954: PPUSH
16955: LD_STRING D4-B-3
16957: PPUSH
16958: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16962: LD_EXP 42
16966: PUSH
16967: LD_INT 1
16969: ARRAY
16970: PPUSH
16971: LD_STRING D4-A-4
16973: PPUSH
16974: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16978: LD_INT 1
16980: PPUSH
16981: CALL 10013 0 1
16985: PUSH
16986: LD_INT 1
16988: ARRAY
16989: PPUSH
16990: LD_STRING D4-B-4
16992: PPUSH
16993: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16997: LD_EXP 42
17001: PUSH
17002: LD_INT 1
17004: ARRAY
17005: PPUSH
17006: LD_STRING D4-A-5
17008: PPUSH
17009: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
17013: LD_INT 1
17015: PPUSH
17016: CALL 10013 0 1
17020: PUSH
17021: LD_INT 1
17023: ARRAY
17024: PPUSH
17025: LD_STRING D4-B-5
17027: PPUSH
17028: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17032: LD_EXP 42
17036: PUSH
17037: LD_INT 1
17039: ARRAY
17040: PPUSH
17041: LD_STRING D4-A-6
17043: PPUSH
17044: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17048: LD_INT 1
17050: PPUSH
17051: CALL 10013 0 1
17055: PUSH
17056: LD_INT 1
17058: ARRAY
17059: PPUSH
17060: LD_STRING D4-B-6
17062: PPUSH
17063: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17067: LD_EXP 42
17071: PUSH
17072: LD_INT 1
17074: ARRAY
17075: PPUSH
17076: LD_STRING D4-A-7
17078: PPUSH
17079: CALL_OW 94
// for i = 1 to Zeta_Squad do
17083: LD_ADDR_VAR 0 1
17087: PUSH
17088: DOUBLE
17089: LD_INT 1
17091: DEC
17092: ST_TO_ADDR
17093: LD_EXP 42
17097: PUSH
17098: FOR_TO
17099: IFFALSE 17121
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17101: LD_EXP 42
17105: PUSH
17106: LD_VAR 0 1
17110: ARRAY
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: CALL_OW 235
17119: GO 17098
17121: POP
17122: POP
// end ;
17123: PPOPN 2
17125: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17126: LD_INT 11
17128: PPUSH
17129: LD_INT 22
17131: PUSH
17132: LD_OWVAR 2
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PPUSH
17141: CALL_OW 70
17145: PUSH
17146: LD_INT 0
17148: GREATER
17149: IFFALSE 17174
17151: GO 17153
17153: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17154: LD_EXP 38
17158: PPUSH
17159: LD_STRING D10-A-1
17161: PPUSH
17162: CALL_OW 88
// ru_spotted := true ;
17166: LD_ADDR_EXP 16
17170: PUSH
17171: LD_INT 1
17173: ST_TO_ADDR
// end ;
17174: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17175: LD_EXP 38
17179: PPUSH
17180: CALL_OW 301
17184: PUSH
17185: LD_EXP 39
17189: PPUSH
17190: CALL_OW 301
17194: OR
17195: IFFALSE 17207
17197: GO 17199
17199: DISABLE
// begin YouLost ( DieP ) ;
17200: LD_STRING DieP
17202: PPUSH
17203: CALL_OW 104
// end ;
17207: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17208: LD_INT 34
17210: PUSH
17211: LD_INT 8
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PPUSH
17218: CALL_OW 69
17222: IFFALSE 17235
17224: GO 17226
17226: DISABLE
// sib_bomb_constructed := true ;
17227: LD_ADDR_EXP 36
17231: PUSH
17232: LD_INT 1
17234: ST_TO_ADDR
17235: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17236: LD_EXP 29
17240: PUSH
17241: LD_INT 22
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PPUSH
17251: CALL_OW 69
17255: PUSH
17256: LD_INT 0
17258: EQUAL
17259: AND
17260: IFFALSE 17463
17262: GO 17264
17264: DISABLE
17265: LD_INT 0
17267: PPUSH
// begin game_status := false ;
17268: LD_ADDR_EXP 29
17272: PUSH
17273: LD_INT 0
17275: ST_TO_ADDR
// if not depotConstructed then
17276: LD_EXP 2
17280: NOT
17281: IFFALSE 17290
// SetAchievement ( ACH_NODEPOT ) ;
17283: LD_STRING ACH_NODEPOT
17285: PPUSH
17286: CALL_OW 543
// if Difficulty = 3 then
17290: LD_OWVAR 67
17294: PUSH
17295: LD_INT 3
17297: EQUAL
17298: IFFALSE 17307
// SetAchievement ( ACH_HARD ) ;
17300: LD_STRING ACH_HARD
17302: PPUSH
17303: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17307: LD_OWVAR 1
17311: PUSH
17312: LD_INT 35
17314: DIVREAL
17315: PUSH
17316: LD_INT 60
17318: DIVREAL
17319: PUSH
17320: LD_INT 70
17322: PUSH
17323: LD_INT 60
17325: PUSH
17326: LD_INT 50
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: PUSH
17334: LD_OWVAR 67
17338: ARRAY
17339: LESS
17340: IFFALSE 17354
// AddMedal ( play , 1 ) else
17342: LD_STRING play
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 101
17352: GO 17365
// AddMedal ( play , - 1 ) ;
17354: LD_STRING play
17356: PPUSH
17357: LD_INT 1
17359: NEG
17360: PPUSH
17361: CALL_OW 101
// if sib_bomb_constructed then
17365: LD_EXP 36
17369: IFFALSE 17383
// AddMedal ( sibbomb , 1 ) else
17371: LD_STRING sibbomb
17373: PPUSH
17374: LD_INT 1
17376: PPUSH
17377: CALL_OW 101
17381: GO 17394
// AddMedal ( sibbomb , - 1 ) ;
17383: LD_STRING sibbomb
17385: PPUSH
17386: LD_INT 1
17388: NEG
17389: PPUSH
17390: CALL_OW 101
// if mine_constructed and not mine_ck then
17394: LD_EXP 37
17398: PUSH
17399: LD_EXP 35
17403: NOT
17404: AND
17405: IFFALSE 17417
// AddMedal ( mine , 1 ) ;
17407: LD_STRING mine
17409: PPUSH
17410: LD_INT 1
17412: PPUSH
17413: CALL_OW 101
// if mine_ck then
17417: LD_EXP 35
17421: IFFALSE 17434
// AddMedal ( mine , - 1 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 1
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// if not mine_constructed then
17434: LD_EXP 37
17438: NOT
17439: IFFALSE 17452
// AddMedal ( mine , - 2 ) ;
17441: LD_STRING mine
17443: PPUSH
17444: LD_INT 2
17446: NEG
17447: PPUSH
17448: CALL_OW 101
// GiveMedals ( Main ) ;
17452: LD_STRING Main
17454: PPUSH
17455: CALL_OW 102
// YouWin ;
17459: CALL_OW 103
// end ; end_of_file
17463: PPOPN 1
17465: END
// every 0 0$03 trigger game_status do var time ;
17466: LD_EXP 29
17470: IFFALSE 17635
17472: GO 17474
17474: DISABLE
17475: LD_INT 0
17477: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17478: LD_ADDR_VAR 0 1
17482: PUSH
17483: LD_INT 1050
17485: PUSH
17486: LD_INT 1575
17488: PUSH
17489: LD_INT 2100
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: LD_OWVAR 67
17501: ARRAY
17502: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17503: LD_VAR 0 1
17507: PUSH
17508: LD_INT 0
17510: PPUSH
17511: LD_INT 420
17513: PPUSH
17514: CALL_OW 12
17518: PLUS
17519: PPUSH
17520: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17524: LD_INT 1
17526: PPUSH
17527: LD_INT 5
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: LD_INT 1
17537: PPUSH
17538: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17542: LD_INT 105
17544: PPUSH
17545: LD_INT 1050
17547: PPUSH
17548: CALL_OW 12
17552: PPUSH
17553: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17557: LD_INT 1
17559: PPUSH
17560: LD_INT 5
17562: PPUSH
17563: CALL_OW 12
17567: PPUSH
17568: LD_INT 148
17570: PPUSH
17571: LD_INT 107
17573: PPUSH
17574: LD_INT 20
17576: PPUSH
17577: LD_INT 1
17579: PPUSH
17580: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17584: LD_OWVAR 1
17588: PUSH
17589: LD_INT 44100
17591: PUSH
17592: LD_INT 37800
17594: PUSH
17595: LD_INT 33600
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: PUSH
17603: LD_OWVAR 67
17607: ARRAY
17608: MOD
17609: IFFALSE 17625
// time := time + 0 0$20 ;
17611: LD_ADDR_VAR 0 1
17615: PUSH
17616: LD_VAR 0 1
17620: PUSH
17621: LD_INT 700
17623: PLUS
17624: ST_TO_ADDR
// end until game_status = false ;
17625: LD_EXP 29
17629: PUSH
17630: LD_INT 0
17632: EQUAL
17633: IFFALSE 17503
// end ;
17635: PPOPN 1
17637: END
// every 0 0$03 trigger game_status do var time ;
17638: LD_EXP 29
17642: IFFALSE 17796
17644: GO 17646
17646: DISABLE
17647: LD_INT 0
17649: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17650: LD_ADDR_VAR 0 1
17654: PUSH
17655: LD_INT 700
17657: PUSH
17658: LD_INT 875
17660: PUSH
17661: LD_INT 1400
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: LD_OWVAR 67
17673: ARRAY
17674: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 0
17682: PPUSH
17683: LD_INT 385
17685: PPUSH
17686: CALL_OW 12
17690: PLUS
17691: PPUSH
17692: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17696: LD_INT 1
17698: PPUSH
17699: LD_INT 5
17701: PPUSH
17702: CALL_OW 12
17706: PPUSH
17707: LD_INT 102
17709: PPUSH
17710: LD_INT 6
17712: PPUSH
17713: LD_INT 25
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17723: LD_OWVAR 1
17727: PUSH
17728: LD_INT 52500
17730: PUSH
17731: LD_INT 46200
17733: PUSH
17734: LD_INT 42000
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: PUSH
17742: LD_OWVAR 67
17746: ARRAY
17747: MOD
17748: IFFALSE 17764
// time := time + 0 0$25 ;
17750: LD_ADDR_VAR 0 1
17754: PUSH
17755: LD_VAR 0 1
17759: PUSH
17760: LD_INT 875
17762: PLUS
17763: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17764: LD_OWVAR 1
17768: PUSH
17769: LD_INT 231000
17771: MOD
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17786
// time := 0 0$30 ;
17778: LD_ADDR_VAR 0 1
17782: PUSH
17783: LD_INT 1050
17785: ST_TO_ADDR
// end until game_status = false ;
17786: LD_EXP 29
17790: PUSH
17791: LD_INT 0
17793: EQUAL
17794: IFFALSE 17675
// end ;
17796: PPOPN 1
17798: END
// every 0 0$03 trigger game_status do var time ;
17799: LD_EXP 29
17803: IFFALSE 17939
17805: GO 17807
17807: DISABLE
17808: LD_INT 0
17810: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17811: LD_ADDR_VAR 0 1
17815: PUSH
17816: LD_INT 1050
17818: PUSH
17819: LD_INT 1575
17821: PUSH
17822: LD_INT 1750
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: PUSH
17830: LD_OWVAR 67
17834: ARRAY
17835: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17836: LD_VAR 0 1
17840: PUSH
17841: LD_INT 0
17843: PPUSH
17844: LD_INT 385
17846: PPUSH
17847: CALL_OW 12
17851: PLUS
17852: PPUSH
17853: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17857: LD_INT 1
17859: PPUSH
17860: LD_INT 5
17862: PPUSH
17863: CALL_OW 12
17867: PPUSH
17868: LD_INT 51
17870: PPUSH
17871: LD_INT 74
17873: PPUSH
17874: LD_INT 25
17876: PPUSH
17877: LD_INT 1
17879: PPUSH
17880: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17884: LD_OWVAR 1
17888: PUSH
17889: LD_INT 84000
17891: PUSH
17892: LD_INT 105000
17894: PUSH
17895: LD_INT 136500
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PUSH
17903: LD_OWVAR 67
17907: ARRAY
17908: MOD
17909: PUSH
17910: LD_INT 0
17912: EQUAL
17913: IFFALSE 17929
// time := time + 0 0$15 ;
17915: LD_ADDR_VAR 0 1
17919: PUSH
17920: LD_VAR 0 1
17924: PUSH
17925: LD_INT 525
17927: PLUS
17928: ST_TO_ADDR
// end until game_status = false ;
17929: LD_EXP 29
17933: PUSH
17934: LD_INT 0
17936: EQUAL
17937: IFFALSE 17836
// end ; end_of_file
17939: PPOPN 1
17941: END
// every 0 0$01 trigger not debug do
17942: LD_EXP 1
17946: NOT
17947: IFFALSE 17970
17949: GO 17951
17951: DISABLE
// begin enable ;
17952: ENABLE
// Display_Strings := [ #tick , tick ] ;
17953: LD_ADDR_OWVAR 47
17957: PUSH
17958: LD_STRING #tick
17960: PUSH
17961: LD_OWVAR 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: ST_TO_ADDR
// end ; end_of_file
17970: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17971: LD_VAR 0 1
17975: PPUSH
17976: CALL_OW 255
17980: PUSH
17981: LD_INT 3
17983: EQUAL
17984: PUSH
17985: LD_VAR 0 1
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: LD_INT 34
17995: PUSH
17996: LD_INT 46
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 34
18005: PUSH
18006: LD_INT 47
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 34
18015: PUSH
18016: LD_INT 45
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: PUSH
18029: EMPTY
18030: LIST
18031: PPUSH
18032: CALL_OW 69
18036: IN
18037: AND
18038: IFFALSE 18056
// ru_reserve := ru_reserve ^ un ;
18040: LD_ADDR_EXP 9
18044: PUSH
18045: LD_EXP 9
18049: PUSH
18050: LD_VAR 0 1
18054: ADD
18055: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18056: LD_VAR 0 1
18060: PUSH
18061: LD_INT 22
18063: PUSH
18064: LD_INT 3
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 34
18073: PUSH
18074: LD_INT 48
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PPUSH
18085: CALL_OW 69
18089: IN
18090: IFFALSE 18143
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18092: LD_INT 12
18094: PPUSH
18095: LD_INT 22
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 70
18109: IFFALSE 18128
// ComAttackPlace ( un , 98 , 10 ) else
18111: LD_VAR 0 1
18115: PPUSH
18116: LD_INT 98
18118: PPUSH
18119: LD_INT 10
18121: PPUSH
18122: CALL_OW 116
18126: GO 18143
// ComAttackPlace ( un , 134 , 99 ) ;
18128: LD_VAR 0 1
18132: PPUSH
18133: LD_INT 134
18135: PPUSH
18136: LD_INT 99
18138: PPUSH
18139: CALL_OW 116
// end ;
18143: PPOPN 2
18145: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18146: LD_VAR 0 1
18150: PPUSH
18151: CALL 32028 0 1
// if GetChassis ( un ) = 25 then
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 265
18164: PUSH
18165: LD_INT 25
18167: EQUAL
18168: IFFALSE 18177
// SetAchievement ( ACH_BEH ) ;
18170: LD_STRING ACH_BEH
18172: PPUSH
18173: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18177: LD_VAR 0 1
18181: PUSH
18182: LD_INT 22
18184: PUSH
18185: LD_INT 3
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 21
18194: PUSH
18195: LD_INT 3
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: IN
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 266
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 29
18227: PUSH
18228: LD_INT 30
18230: PUSH
18231: LD_INT 26
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: IN
18240: NOT
18241: AND
18242: IFFALSE 18328
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18244: LD_ADDR_EXP 13
18248: PUSH
18249: LD_EXP 13
18253: PUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 266
18263: ADD
18264: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18265: LD_ADDR_EXP 13
18269: PUSH
18270: LD_EXP 13
18274: PUSH
18275: LD_VAR 0 1
18279: PPUSH
18280: CALL_OW 250
18284: ADD
18285: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18286: LD_ADDR_EXP 13
18290: PUSH
18291: LD_EXP 13
18295: PUSH
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 251
18305: ADD
18306: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18307: LD_ADDR_EXP 13
18311: PUSH
18312: LD_EXP 13
18316: PUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 254
18326: ADD
18327: ST_TO_ADDR
// end ; if un in ru_attack_list then
18328: LD_VAR 0 1
18332: PUSH
18333: LD_EXP 10
18337: IN
18338: IFFALSE 18356
// ru_attack_list := ru_attack_list diff un ;
18340: LD_ADDR_EXP 10
18344: PUSH
18345: LD_EXP 10
18349: PUSH
18350: LD_VAR 0 1
18354: DIFF
18355: ST_TO_ADDR
// if un in ru_protector then
18356: LD_VAR 0 1
18360: PUSH
18361: LD_EXP 17
18365: IN
18366: IFFALSE 18384
// ru_protector := ru_protector diff un ;
18368: LD_ADDR_EXP 17
18372: PUSH
18373: LD_EXP 17
18377: PUSH
18378: LD_VAR 0 1
18382: DIFF
18383: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 266
18393: PUSH
18394: LD_INT 30
18396: EQUAL
18397: PUSH
18398: LD_VAR 0 1
18402: PPUSH
18403: CALL_OW 255
18407: PUSH
18408: LD_INT 1
18410: EQUAL
18411: AND
18412: IFFALSE 18422
// mine_ck := true ;
18414: LD_ADDR_EXP 35
18418: PUSH
18419: LD_INT 1
18421: ST_TO_ADDR
// end ;
18422: PPOPN 1
18424: END
// on BuildingComplete ( un ) do var i ;
18425: LD_INT 0
18427: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 255
18437: PUSH
18438: LD_INT 1
18440: EQUAL
18441: PUSH
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 266
18451: PUSH
18452: LD_INT 0
18454: EQUAL
18455: AND
18456: IFFALSE 18466
// depotConstructed := true ;
18458: LD_ADDR_EXP 2
18462: PUSH
18463: LD_INT 1
18465: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 255
18475: PUSH
18476: LD_INT 1
18478: EQUAL
18479: PUSH
18480: LD_VAR 0 1
18484: PPUSH
18485: CALL_OW 266
18489: PUSH
18490: LD_INT 30
18492: EQUAL
18493: AND
18494: IFFALSE 18504
// mine_constructed := true ;
18496: LD_ADDR_EXP 37
18500: PUSH
18501: LD_INT 1
18503: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 255
18513: PUSH
18514: LD_INT 3
18516: EQUAL
18517: PUSH
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL_OW 266
18527: PUSH
18528: LD_INT 0
18530: EQUAL
18531: AND
18532: IFFALSE 18589
// begin for i = 1 to 2 do
18534: LD_ADDR_VAR 0 2
18538: PUSH
18539: DOUBLE
18540: LD_INT 1
18542: DEC
18543: ST_TO_ADDR
18544: LD_INT 2
18546: PUSH
18547: FOR_TO
18548: IFFALSE 18587
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18550: LD_EXP 20
18554: PUSH
18555: LD_VAR 0 2
18559: ARRAY
18560: PPUSH
18561: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18565: LD_EXP 20
18569: PUSH
18570: LD_VAR 0 2
18574: ARRAY
18575: PPUSH
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 180
// end ;
18585: GO 18547
18587: POP
18588: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 255
18598: PUSH
18599: LD_INT 3
18601: EQUAL
18602: PUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 266
18612: PUSH
18613: LD_EXP 13
18617: IN
18618: AND
18619: IFFALSE 18659
// for i = 1 to 4 do
18621: LD_ADDR_VAR 0 2
18625: PUSH
18626: DOUBLE
18627: LD_INT 1
18629: DEC
18630: ST_TO_ADDR
18631: LD_INT 4
18633: PUSH
18634: FOR_TO
18635: IFFALSE 18657
// ru_blist := Delete ( ru_blist , 1 ) ;
18637: LD_ADDR_EXP 13
18641: PUSH
18642: LD_EXP 13
18646: PPUSH
18647: LD_INT 1
18649: PPUSH
18650: CALL_OW 3
18654: ST_TO_ADDR
18655: GO 18634
18657: POP
18658: POP
// end ;
18659: PPOPN 2
18661: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18662: LD_VAR 0 1
18666: PPUSH
18667: LD_VAR 0 2
18671: PPUSH
18672: LD_VAR 0 3
18676: PPUSH
18677: CALL 32126 0 3
// end ;
18681: PPOPN 3
18683: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18684: LD_VAR 0 1
18688: PPUSH
18689: CALL 32134 0 1
// end ; end_of_file
18693: PPOPN 1
18695: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18696: LD_INT 0
18698: PPUSH
// ar_miner := 81 ;
18699: LD_ADDR_EXP 50
18703: PUSH
18704: LD_INT 81
18706: ST_TO_ADDR
// ar_crane := 88 ;
18707: LD_ADDR_EXP 49
18711: PUSH
18712: LD_INT 88
18714: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18715: LD_ADDR_EXP 44
18719: PUSH
18720: LD_INT 89
18722: ST_TO_ADDR
// us_hack := 99 ;
18723: LD_ADDR_EXP 45
18727: PUSH
18728: LD_INT 99
18730: ST_TO_ADDR
// us_artillery := 97 ;
18731: LD_ADDR_EXP 46
18735: PUSH
18736: LD_INT 97
18738: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18739: LD_ADDR_EXP 47
18743: PUSH
18744: LD_INT 91
18746: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18747: LD_ADDR_EXP 48
18751: PUSH
18752: LD_INT 92
18754: ST_TO_ADDR
// ru_radar := 98 ;
18755: LD_ADDR_EXP 43
18759: PUSH
18760: LD_INT 98
18762: ST_TO_ADDR
// tech_Artillery := 80 ;
18763: LD_ADDR_EXP 51
18767: PUSH
18768: LD_INT 80
18770: ST_TO_ADDR
// tech_RadMat := 81 ;
18771: LD_ADDR_EXP 52
18775: PUSH
18776: LD_INT 81
18778: ST_TO_ADDR
// tech_BasicTools := 82 ;
18779: LD_ADDR_EXP 53
18783: PUSH
18784: LD_INT 82
18786: ST_TO_ADDR
// tech_Cargo := 83 ;
18787: LD_ADDR_EXP 54
18791: PUSH
18792: LD_INT 83
18794: ST_TO_ADDR
// tech_Track := 84 ;
18795: LD_ADDR_EXP 55
18799: PUSH
18800: LD_INT 84
18802: ST_TO_ADDR
// tech_Crane := 85 ;
18803: LD_ADDR_EXP 56
18807: PUSH
18808: LD_INT 85
18810: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18811: LD_ADDR_EXP 57
18815: PUSH
18816: LD_INT 86
18818: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18819: LD_ADDR_EXP 58
18823: PUSH
18824: LD_INT 87
18826: ST_TO_ADDR
// class_mastodont := 31 ;
18827: LD_ADDR_EXP 59
18831: PUSH
18832: LD_INT 31
18834: ST_TO_ADDR
// class_horse := 21 ;
18835: LD_ADDR_EXP 60
18839: PUSH
18840: LD_INT 21
18842: ST_TO_ADDR
// end ;
18843: LD_VAR 0 1
18847: RET
// every 1 do
18848: GO 18850
18850: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18851: CALL 18696 0 0
18855: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18856: LD_INT 0
18858: PPUSH
// if p2 = 100 then
18859: LD_VAR 0 2
18863: PUSH
18864: LD_INT 100
18866: EQUAL
18867: IFFALSE 19816
// begin if not StreamModeActive then
18869: LD_EXP 61
18873: NOT
18874: IFFALSE 18884
// StreamModeActive := true ;
18876: LD_ADDR_EXP 61
18880: PUSH
18881: LD_INT 1
18883: ST_TO_ADDR
// if p3 = 0 then
18884: LD_VAR 0 3
18888: PUSH
18889: LD_INT 0
18891: EQUAL
18892: IFFALSE 18898
// InitStreamMode ;
18894: CALL 19976 0 0
// if p3 = 1 then
18898: LD_VAR 0 3
18902: PUSH
18903: LD_INT 1
18905: EQUAL
18906: IFFALSE 18916
// sRocket := true ;
18908: LD_ADDR_EXP 66
18912: PUSH
18913: LD_INT 1
18915: ST_TO_ADDR
// if p3 = 2 then
18916: LD_VAR 0 3
18920: PUSH
18921: LD_INT 2
18923: EQUAL
18924: IFFALSE 18934
// sSpeed := true ;
18926: LD_ADDR_EXP 65
18930: PUSH
18931: LD_INT 1
18933: ST_TO_ADDR
// if p3 = 3 then
18934: LD_VAR 0 3
18938: PUSH
18939: LD_INT 3
18941: EQUAL
18942: IFFALSE 18952
// sEngine := true ;
18944: LD_ADDR_EXP 67
18948: PUSH
18949: LD_INT 1
18951: ST_TO_ADDR
// if p3 = 4 then
18952: LD_VAR 0 3
18956: PUSH
18957: LD_INT 4
18959: EQUAL
18960: IFFALSE 18970
// sSpec := true ;
18962: LD_ADDR_EXP 64
18966: PUSH
18967: LD_INT 1
18969: ST_TO_ADDR
// if p3 = 5 then
18970: LD_VAR 0 3
18974: PUSH
18975: LD_INT 5
18977: EQUAL
18978: IFFALSE 18988
// sLevel := true ;
18980: LD_ADDR_EXP 68
18984: PUSH
18985: LD_INT 1
18987: ST_TO_ADDR
// if p3 = 6 then
18988: LD_VAR 0 3
18992: PUSH
18993: LD_INT 6
18995: EQUAL
18996: IFFALSE 19006
// sArmoury := true ;
18998: LD_ADDR_EXP 69
19002: PUSH
19003: LD_INT 1
19005: ST_TO_ADDR
// if p3 = 7 then
19006: LD_VAR 0 3
19010: PUSH
19011: LD_INT 7
19013: EQUAL
19014: IFFALSE 19024
// sRadar := true ;
19016: LD_ADDR_EXP 70
19020: PUSH
19021: LD_INT 1
19023: ST_TO_ADDR
// if p3 = 8 then
19024: LD_VAR 0 3
19028: PUSH
19029: LD_INT 8
19031: EQUAL
19032: IFFALSE 19042
// sBunker := true ;
19034: LD_ADDR_EXP 71
19038: PUSH
19039: LD_INT 1
19041: ST_TO_ADDR
// if p3 = 9 then
19042: LD_VAR 0 3
19046: PUSH
19047: LD_INT 9
19049: EQUAL
19050: IFFALSE 19060
// sHack := true ;
19052: LD_ADDR_EXP 72
19056: PUSH
19057: LD_INT 1
19059: ST_TO_ADDR
// if p3 = 10 then
19060: LD_VAR 0 3
19064: PUSH
19065: LD_INT 10
19067: EQUAL
19068: IFFALSE 19078
// sFire := true ;
19070: LD_ADDR_EXP 73
19074: PUSH
19075: LD_INT 1
19077: ST_TO_ADDR
// if p3 = 11 then
19078: LD_VAR 0 3
19082: PUSH
19083: LD_INT 11
19085: EQUAL
19086: IFFALSE 19096
// sRefresh := true ;
19088: LD_ADDR_EXP 74
19092: PUSH
19093: LD_INT 1
19095: ST_TO_ADDR
// if p3 = 12 then
19096: LD_VAR 0 3
19100: PUSH
19101: LD_INT 12
19103: EQUAL
19104: IFFALSE 19114
// sExp := true ;
19106: LD_ADDR_EXP 75
19110: PUSH
19111: LD_INT 1
19113: ST_TO_ADDR
// if p3 = 13 then
19114: LD_VAR 0 3
19118: PUSH
19119: LD_INT 13
19121: EQUAL
19122: IFFALSE 19132
// sDepot := true ;
19124: LD_ADDR_EXP 76
19128: PUSH
19129: LD_INT 1
19131: ST_TO_ADDR
// if p3 = 14 then
19132: LD_VAR 0 3
19136: PUSH
19137: LD_INT 14
19139: EQUAL
19140: IFFALSE 19150
// sFlag := true ;
19142: LD_ADDR_EXP 77
19146: PUSH
19147: LD_INT 1
19149: ST_TO_ADDR
// if p3 = 15 then
19150: LD_VAR 0 3
19154: PUSH
19155: LD_INT 15
19157: EQUAL
19158: IFFALSE 19168
// sKamikadze := true ;
19160: LD_ADDR_EXP 85
19164: PUSH
19165: LD_INT 1
19167: ST_TO_ADDR
// if p3 = 16 then
19168: LD_VAR 0 3
19172: PUSH
19173: LD_INT 16
19175: EQUAL
19176: IFFALSE 19186
// sTroll := true ;
19178: LD_ADDR_EXP 86
19182: PUSH
19183: LD_INT 1
19185: ST_TO_ADDR
// if p3 = 17 then
19186: LD_VAR 0 3
19190: PUSH
19191: LD_INT 17
19193: EQUAL
19194: IFFALSE 19204
// sSlow := true ;
19196: LD_ADDR_EXP 87
19200: PUSH
19201: LD_INT 1
19203: ST_TO_ADDR
// if p3 = 18 then
19204: LD_VAR 0 3
19208: PUSH
19209: LD_INT 18
19211: EQUAL
19212: IFFALSE 19222
// sLack := true ;
19214: LD_ADDR_EXP 88
19218: PUSH
19219: LD_INT 1
19221: ST_TO_ADDR
// if p3 = 19 then
19222: LD_VAR 0 3
19226: PUSH
19227: LD_INT 19
19229: EQUAL
19230: IFFALSE 19240
// sTank := true ;
19232: LD_ADDR_EXP 90
19236: PUSH
19237: LD_INT 1
19239: ST_TO_ADDR
// if p3 = 20 then
19240: LD_VAR 0 3
19244: PUSH
19245: LD_INT 20
19247: EQUAL
19248: IFFALSE 19258
// sRemote := true ;
19250: LD_ADDR_EXP 91
19254: PUSH
19255: LD_INT 1
19257: ST_TO_ADDR
// if p3 = 21 then
19258: LD_VAR 0 3
19262: PUSH
19263: LD_INT 21
19265: EQUAL
19266: IFFALSE 19276
// sPowell := true ;
19268: LD_ADDR_EXP 92
19272: PUSH
19273: LD_INT 1
19275: ST_TO_ADDR
// if p3 = 22 then
19276: LD_VAR 0 3
19280: PUSH
19281: LD_INT 22
19283: EQUAL
19284: IFFALSE 19294
// sTeleport := true ;
19286: LD_ADDR_EXP 95
19290: PUSH
19291: LD_INT 1
19293: ST_TO_ADDR
// if p3 = 23 then
19294: LD_VAR 0 3
19298: PUSH
19299: LD_INT 23
19301: EQUAL
19302: IFFALSE 19312
// sOilTower := true ;
19304: LD_ADDR_EXP 97
19308: PUSH
19309: LD_INT 1
19311: ST_TO_ADDR
// if p3 = 24 then
19312: LD_VAR 0 3
19316: PUSH
19317: LD_INT 24
19319: EQUAL
19320: IFFALSE 19330
// sShovel := true ;
19322: LD_ADDR_EXP 98
19326: PUSH
19327: LD_INT 1
19329: ST_TO_ADDR
// if p3 = 25 then
19330: LD_VAR 0 3
19334: PUSH
19335: LD_INT 25
19337: EQUAL
19338: IFFALSE 19348
// sSheik := true ;
19340: LD_ADDR_EXP 99
19344: PUSH
19345: LD_INT 1
19347: ST_TO_ADDR
// if p3 = 26 then
19348: LD_VAR 0 3
19352: PUSH
19353: LD_INT 26
19355: EQUAL
19356: IFFALSE 19366
// sEarthquake := true ;
19358: LD_ADDR_EXP 101
19362: PUSH
19363: LD_INT 1
19365: ST_TO_ADDR
// if p3 = 27 then
19366: LD_VAR 0 3
19370: PUSH
19371: LD_INT 27
19373: EQUAL
19374: IFFALSE 19384
// sAI := true ;
19376: LD_ADDR_EXP 102
19380: PUSH
19381: LD_INT 1
19383: ST_TO_ADDR
// if p3 = 28 then
19384: LD_VAR 0 3
19388: PUSH
19389: LD_INT 28
19391: EQUAL
19392: IFFALSE 19402
// sCargo := true ;
19394: LD_ADDR_EXP 105
19398: PUSH
19399: LD_INT 1
19401: ST_TO_ADDR
// if p3 = 29 then
19402: LD_VAR 0 3
19406: PUSH
19407: LD_INT 29
19409: EQUAL
19410: IFFALSE 19420
// sDLaser := true ;
19412: LD_ADDR_EXP 106
19416: PUSH
19417: LD_INT 1
19419: ST_TO_ADDR
// if p3 = 30 then
19420: LD_VAR 0 3
19424: PUSH
19425: LD_INT 30
19427: EQUAL
19428: IFFALSE 19438
// sExchange := true ;
19430: LD_ADDR_EXP 107
19434: PUSH
19435: LD_INT 1
19437: ST_TO_ADDR
// if p3 = 31 then
19438: LD_VAR 0 3
19442: PUSH
19443: LD_INT 31
19445: EQUAL
19446: IFFALSE 19456
// sFac := true ;
19448: LD_ADDR_EXP 108
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// if p3 = 32 then
19456: LD_VAR 0 3
19460: PUSH
19461: LD_INT 32
19463: EQUAL
19464: IFFALSE 19474
// sPower := true ;
19466: LD_ADDR_EXP 109
19470: PUSH
19471: LD_INT 1
19473: ST_TO_ADDR
// if p3 = 33 then
19474: LD_VAR 0 3
19478: PUSH
19479: LD_INT 33
19481: EQUAL
19482: IFFALSE 19492
// sRandom := true ;
19484: LD_ADDR_EXP 110
19488: PUSH
19489: LD_INT 1
19491: ST_TO_ADDR
// if p3 = 34 then
19492: LD_VAR 0 3
19496: PUSH
19497: LD_INT 34
19499: EQUAL
19500: IFFALSE 19510
// sShield := true ;
19502: LD_ADDR_EXP 111
19506: PUSH
19507: LD_INT 1
19509: ST_TO_ADDR
// if p3 = 35 then
19510: LD_VAR 0 3
19514: PUSH
19515: LD_INT 35
19517: EQUAL
19518: IFFALSE 19528
// sTime := true ;
19520: LD_ADDR_EXP 112
19524: PUSH
19525: LD_INT 1
19527: ST_TO_ADDR
// if p3 = 36 then
19528: LD_VAR 0 3
19532: PUSH
19533: LD_INT 36
19535: EQUAL
19536: IFFALSE 19546
// sTools := true ;
19538: LD_ADDR_EXP 113
19542: PUSH
19543: LD_INT 1
19545: ST_TO_ADDR
// if p3 = 101 then
19546: LD_VAR 0 3
19550: PUSH
19551: LD_INT 101
19553: EQUAL
19554: IFFALSE 19564
// sSold := true ;
19556: LD_ADDR_EXP 78
19560: PUSH
19561: LD_INT 1
19563: ST_TO_ADDR
// if p3 = 102 then
19564: LD_VAR 0 3
19568: PUSH
19569: LD_INT 102
19571: EQUAL
19572: IFFALSE 19582
// sDiff := true ;
19574: LD_ADDR_EXP 79
19578: PUSH
19579: LD_INT 1
19581: ST_TO_ADDR
// if p3 = 103 then
19582: LD_VAR 0 3
19586: PUSH
19587: LD_INT 103
19589: EQUAL
19590: IFFALSE 19600
// sFog := true ;
19592: LD_ADDR_EXP 82
19596: PUSH
19597: LD_INT 1
19599: ST_TO_ADDR
// if p3 = 104 then
19600: LD_VAR 0 3
19604: PUSH
19605: LD_INT 104
19607: EQUAL
19608: IFFALSE 19618
// sReset := true ;
19610: LD_ADDR_EXP 83
19614: PUSH
19615: LD_INT 1
19617: ST_TO_ADDR
// if p3 = 105 then
19618: LD_VAR 0 3
19622: PUSH
19623: LD_INT 105
19625: EQUAL
19626: IFFALSE 19636
// sSun := true ;
19628: LD_ADDR_EXP 84
19632: PUSH
19633: LD_INT 1
19635: ST_TO_ADDR
// if p3 = 106 then
19636: LD_VAR 0 3
19640: PUSH
19641: LD_INT 106
19643: EQUAL
19644: IFFALSE 19654
// sTiger := true ;
19646: LD_ADDR_EXP 80
19650: PUSH
19651: LD_INT 1
19653: ST_TO_ADDR
// if p3 = 107 then
19654: LD_VAR 0 3
19658: PUSH
19659: LD_INT 107
19661: EQUAL
19662: IFFALSE 19672
// sBomb := true ;
19664: LD_ADDR_EXP 81
19668: PUSH
19669: LD_INT 1
19671: ST_TO_ADDR
// if p3 = 108 then
19672: LD_VAR 0 3
19676: PUSH
19677: LD_INT 108
19679: EQUAL
19680: IFFALSE 19690
// sWound := true ;
19682: LD_ADDR_EXP 89
19686: PUSH
19687: LD_INT 1
19689: ST_TO_ADDR
// if p3 = 109 then
19690: LD_VAR 0 3
19694: PUSH
19695: LD_INT 109
19697: EQUAL
19698: IFFALSE 19708
// sBetray := true ;
19700: LD_ADDR_EXP 93
19704: PUSH
19705: LD_INT 1
19707: ST_TO_ADDR
// if p3 = 110 then
19708: LD_VAR 0 3
19712: PUSH
19713: LD_INT 110
19715: EQUAL
19716: IFFALSE 19726
// sContamin := true ;
19718: LD_ADDR_EXP 94
19722: PUSH
19723: LD_INT 1
19725: ST_TO_ADDR
// if p3 = 111 then
19726: LD_VAR 0 3
19730: PUSH
19731: LD_INT 111
19733: EQUAL
19734: IFFALSE 19744
// sOil := true ;
19736: LD_ADDR_EXP 96
19740: PUSH
19741: LD_INT 1
19743: ST_TO_ADDR
// if p3 = 112 then
19744: LD_VAR 0 3
19748: PUSH
19749: LD_INT 112
19751: EQUAL
19752: IFFALSE 19762
// sStu := true ;
19754: LD_ADDR_EXP 100
19758: PUSH
19759: LD_INT 1
19761: ST_TO_ADDR
// if p3 = 113 then
19762: LD_VAR 0 3
19766: PUSH
19767: LD_INT 113
19769: EQUAL
19770: IFFALSE 19780
// sBazooka := true ;
19772: LD_ADDR_EXP 103
19776: PUSH
19777: LD_INT 1
19779: ST_TO_ADDR
// if p3 = 114 then
19780: LD_VAR 0 3
19784: PUSH
19785: LD_INT 114
19787: EQUAL
19788: IFFALSE 19798
// sMortar := true ;
19790: LD_ADDR_EXP 104
19794: PUSH
19795: LD_INT 1
19797: ST_TO_ADDR
// if p3 = 115 then
19798: LD_VAR 0 3
19802: PUSH
19803: LD_INT 115
19805: EQUAL
19806: IFFALSE 19816
// sRanger := true ;
19808: LD_ADDR_EXP 114
19812: PUSH
19813: LD_INT 1
19815: ST_TO_ADDR
// end ; if p2 = 101 then
19816: LD_VAR 0 2
19820: PUSH
19821: LD_INT 101
19823: EQUAL
19824: IFFALSE 19952
// begin case p3 of 1 :
19826: LD_VAR 0 3
19830: PUSH
19831: LD_INT 1
19833: DOUBLE
19834: EQUAL
19835: IFTRUE 19839
19837: GO 19846
19839: POP
// hHackUnlimitedResources ; 2 :
19840: CALL 30989 0 0
19844: GO 19952
19846: LD_INT 2
19848: DOUBLE
19849: EQUAL
19850: IFTRUE 19854
19852: GO 19861
19854: POP
// hHackSetLevel10 ; 3 :
19855: CALL 31122 0 0
19859: GO 19952
19861: LD_INT 3
19863: DOUBLE
19864: EQUAL
19865: IFTRUE 19869
19867: GO 19876
19869: POP
// hHackSetLevel10YourUnits ; 4 :
19870: CALL 31207 0 0
19874: GO 19952
19876: LD_INT 4
19878: DOUBLE
19879: EQUAL
19880: IFTRUE 19884
19882: GO 19891
19884: POP
// hHackInvincible ; 5 :
19885: CALL 31655 0 0
19889: GO 19952
19891: LD_INT 5
19893: DOUBLE
19894: EQUAL
19895: IFTRUE 19899
19897: GO 19906
19899: POP
// hHackInvisible ; 6 :
19900: CALL 31766 0 0
19904: GO 19952
19906: LD_INT 6
19908: DOUBLE
19909: EQUAL
19910: IFTRUE 19914
19912: GO 19921
19914: POP
// hHackChangeYourSide ; 7 :
19915: CALL 31823 0 0
19919: GO 19952
19921: LD_INT 7
19923: DOUBLE
19924: EQUAL
19925: IFTRUE 19929
19927: GO 19936
19929: POP
// hHackChangeUnitSide ; 8 :
19930: CALL 31865 0 0
19934: GO 19952
19936: LD_INT 8
19938: DOUBLE
19939: EQUAL
19940: IFTRUE 19944
19942: GO 19951
19944: POP
// hHackFog ; end ;
19945: CALL 31966 0 0
19949: GO 19952
19951: POP
// end ; end ;
19952: LD_VAR 0 7
19956: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19957: GO 19959
19959: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19960: LD_STRING initStreamRollete();
19962: PPUSH
19963: CALL_OW 559
// InitStreamMode ;
19967: CALL 19976 0 0
// DefineStreamItems ( ) ;
19971: CALL 20416 0 0
// end ;
19975: END
// function InitStreamMode ; begin
19976: LD_INT 0
19978: PPUSH
// streamModeActive := false ;
19979: LD_ADDR_EXP 61
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// normalCounter := 36 ;
19987: LD_ADDR_EXP 62
19991: PUSH
19992: LD_INT 36
19994: ST_TO_ADDR
// hardcoreCounter := 16 ;
19995: LD_ADDR_EXP 63
19999: PUSH
20000: LD_INT 16
20002: ST_TO_ADDR
// sRocket := false ;
20003: LD_ADDR_EXP 66
20007: PUSH
20008: LD_INT 0
20010: ST_TO_ADDR
// sSpeed := false ;
20011: LD_ADDR_EXP 65
20015: PUSH
20016: LD_INT 0
20018: ST_TO_ADDR
// sEngine := false ;
20019: LD_ADDR_EXP 67
20023: PUSH
20024: LD_INT 0
20026: ST_TO_ADDR
// sSpec := false ;
20027: LD_ADDR_EXP 64
20031: PUSH
20032: LD_INT 0
20034: ST_TO_ADDR
// sLevel := false ;
20035: LD_ADDR_EXP 68
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// sArmoury := false ;
20043: LD_ADDR_EXP 69
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// sRadar := false ;
20051: LD_ADDR_EXP 70
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// sBunker := false ;
20059: LD_ADDR_EXP 71
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// sHack := false ;
20067: LD_ADDR_EXP 72
20071: PUSH
20072: LD_INT 0
20074: ST_TO_ADDR
// sFire := false ;
20075: LD_ADDR_EXP 73
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// sRefresh := false ;
20083: LD_ADDR_EXP 74
20087: PUSH
20088: LD_INT 0
20090: ST_TO_ADDR
// sExp := false ;
20091: LD_ADDR_EXP 75
20095: PUSH
20096: LD_INT 0
20098: ST_TO_ADDR
// sDepot := false ;
20099: LD_ADDR_EXP 76
20103: PUSH
20104: LD_INT 0
20106: ST_TO_ADDR
// sFlag := false ;
20107: LD_ADDR_EXP 77
20111: PUSH
20112: LD_INT 0
20114: ST_TO_ADDR
// sKamikadze := false ;
20115: LD_ADDR_EXP 85
20119: PUSH
20120: LD_INT 0
20122: ST_TO_ADDR
// sTroll := false ;
20123: LD_ADDR_EXP 86
20127: PUSH
20128: LD_INT 0
20130: ST_TO_ADDR
// sSlow := false ;
20131: LD_ADDR_EXP 87
20135: PUSH
20136: LD_INT 0
20138: ST_TO_ADDR
// sLack := false ;
20139: LD_ADDR_EXP 88
20143: PUSH
20144: LD_INT 0
20146: ST_TO_ADDR
// sTank := false ;
20147: LD_ADDR_EXP 90
20151: PUSH
20152: LD_INT 0
20154: ST_TO_ADDR
// sRemote := false ;
20155: LD_ADDR_EXP 91
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
// sPowell := false ;
20163: LD_ADDR_EXP 92
20167: PUSH
20168: LD_INT 0
20170: ST_TO_ADDR
// sTeleport := false ;
20171: LD_ADDR_EXP 95
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
// sOilTower := false ;
20179: LD_ADDR_EXP 97
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// sShovel := false ;
20187: LD_ADDR_EXP 98
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
// sSheik := false ;
20195: LD_ADDR_EXP 99
20199: PUSH
20200: LD_INT 0
20202: ST_TO_ADDR
// sEarthquake := false ;
20203: LD_ADDR_EXP 101
20207: PUSH
20208: LD_INT 0
20210: ST_TO_ADDR
// sAI := false ;
20211: LD_ADDR_EXP 102
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// sCargo := false ;
20219: LD_ADDR_EXP 105
20223: PUSH
20224: LD_INT 0
20226: ST_TO_ADDR
// sDLaser := false ;
20227: LD_ADDR_EXP 106
20231: PUSH
20232: LD_INT 0
20234: ST_TO_ADDR
// sExchange := false ;
20235: LD_ADDR_EXP 107
20239: PUSH
20240: LD_INT 0
20242: ST_TO_ADDR
// sFac := false ;
20243: LD_ADDR_EXP 108
20247: PUSH
20248: LD_INT 0
20250: ST_TO_ADDR
// sPower := false ;
20251: LD_ADDR_EXP 109
20255: PUSH
20256: LD_INT 0
20258: ST_TO_ADDR
// sRandom := false ;
20259: LD_ADDR_EXP 110
20263: PUSH
20264: LD_INT 0
20266: ST_TO_ADDR
// sShield := false ;
20267: LD_ADDR_EXP 111
20271: PUSH
20272: LD_INT 0
20274: ST_TO_ADDR
// sTime := false ;
20275: LD_ADDR_EXP 112
20279: PUSH
20280: LD_INT 0
20282: ST_TO_ADDR
// sTools := false ;
20283: LD_ADDR_EXP 113
20287: PUSH
20288: LD_INT 0
20290: ST_TO_ADDR
// sSold := false ;
20291: LD_ADDR_EXP 78
20295: PUSH
20296: LD_INT 0
20298: ST_TO_ADDR
// sDiff := false ;
20299: LD_ADDR_EXP 79
20303: PUSH
20304: LD_INT 0
20306: ST_TO_ADDR
// sFog := false ;
20307: LD_ADDR_EXP 82
20311: PUSH
20312: LD_INT 0
20314: ST_TO_ADDR
// sReset := false ;
20315: LD_ADDR_EXP 83
20319: PUSH
20320: LD_INT 0
20322: ST_TO_ADDR
// sSun := false ;
20323: LD_ADDR_EXP 84
20327: PUSH
20328: LD_INT 0
20330: ST_TO_ADDR
// sTiger := false ;
20331: LD_ADDR_EXP 80
20335: PUSH
20336: LD_INT 0
20338: ST_TO_ADDR
// sBomb := false ;
20339: LD_ADDR_EXP 81
20343: PUSH
20344: LD_INT 0
20346: ST_TO_ADDR
// sWound := false ;
20347: LD_ADDR_EXP 89
20351: PUSH
20352: LD_INT 0
20354: ST_TO_ADDR
// sBetray := false ;
20355: LD_ADDR_EXP 93
20359: PUSH
20360: LD_INT 0
20362: ST_TO_ADDR
// sContamin := false ;
20363: LD_ADDR_EXP 94
20367: PUSH
20368: LD_INT 0
20370: ST_TO_ADDR
// sOil := false ;
20371: LD_ADDR_EXP 96
20375: PUSH
20376: LD_INT 0
20378: ST_TO_ADDR
// sStu := false ;
20379: LD_ADDR_EXP 100
20383: PUSH
20384: LD_INT 0
20386: ST_TO_ADDR
// sBazooka := false ;
20387: LD_ADDR_EXP 103
20391: PUSH
20392: LD_INT 0
20394: ST_TO_ADDR
// sMortar := false ;
20395: LD_ADDR_EXP 104
20399: PUSH
20400: LD_INT 0
20402: ST_TO_ADDR
// sRanger := false ;
20403: LD_ADDR_EXP 114
20407: PUSH
20408: LD_INT 0
20410: ST_TO_ADDR
// end ;
20411: LD_VAR 0 1
20415: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20416: LD_INT 0
20418: PPUSH
20419: PPUSH
20420: PPUSH
20421: PPUSH
20422: PPUSH
// result := [ ] ;
20423: LD_ADDR_VAR 0 1
20427: PUSH
20428: EMPTY
20429: ST_TO_ADDR
// if campaign_id = 1 then
20430: LD_OWVAR 69
20434: PUSH
20435: LD_INT 1
20437: EQUAL
20438: IFFALSE 23376
// begin case mission_number of 1 :
20440: LD_OWVAR 70
20444: PUSH
20445: LD_INT 1
20447: DOUBLE
20448: EQUAL
20449: IFTRUE 20453
20451: GO 20517
20453: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20454: LD_ADDR_VAR 0 1
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: LD_INT 4
20464: PUSH
20465: LD_INT 11
20467: PUSH
20468: LD_INT 12
20470: PUSH
20471: LD_INT 15
20473: PUSH
20474: LD_INT 16
20476: PUSH
20477: LD_INT 22
20479: PUSH
20480: LD_INT 23
20482: PUSH
20483: LD_INT 26
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 101
20499: PUSH
20500: LD_INT 102
20502: PUSH
20503: LD_INT 106
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: ST_TO_ADDR
20515: GO 23374
20517: LD_INT 2
20519: DOUBLE
20520: EQUAL
20521: IFTRUE 20525
20523: GO 20597
20525: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20526: LD_ADDR_VAR 0 1
20530: PUSH
20531: LD_INT 2
20533: PUSH
20534: LD_INT 4
20536: PUSH
20537: LD_INT 11
20539: PUSH
20540: LD_INT 12
20542: PUSH
20543: LD_INT 15
20545: PUSH
20546: LD_INT 16
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_INT 23
20554: PUSH
20555: LD_INT 26
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 101
20571: PUSH
20572: LD_INT 102
20574: PUSH
20575: LD_INT 105
20577: PUSH
20578: LD_INT 106
20580: PUSH
20581: LD_INT 108
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: ST_TO_ADDR
20595: GO 23374
20597: LD_INT 3
20599: DOUBLE
20600: EQUAL
20601: IFTRUE 20605
20603: GO 20681
20605: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20606: LD_ADDR_VAR 0 1
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: LD_INT 4
20616: PUSH
20617: LD_INT 5
20619: PUSH
20620: LD_INT 11
20622: PUSH
20623: LD_INT 12
20625: PUSH
20626: LD_INT 15
20628: PUSH
20629: LD_INT 16
20631: PUSH
20632: LD_INT 22
20634: PUSH
20635: LD_INT 26
20637: PUSH
20638: LD_INT 36
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 101
20655: PUSH
20656: LD_INT 102
20658: PUSH
20659: LD_INT 105
20661: PUSH
20662: LD_INT 106
20664: PUSH
20665: LD_INT 108
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: ST_TO_ADDR
20679: GO 23374
20681: LD_INT 4
20683: DOUBLE
20684: EQUAL
20685: IFTRUE 20689
20687: GO 20773
20689: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20690: LD_ADDR_VAR 0 1
20694: PUSH
20695: LD_INT 2
20697: PUSH
20698: LD_INT 4
20700: PUSH
20701: LD_INT 5
20703: PUSH
20704: LD_INT 8
20706: PUSH
20707: LD_INT 11
20709: PUSH
20710: LD_INT 12
20712: PUSH
20713: LD_INT 15
20715: PUSH
20716: LD_INT 16
20718: PUSH
20719: LD_INT 22
20721: PUSH
20722: LD_INT 23
20724: PUSH
20725: LD_INT 26
20727: PUSH
20728: LD_INT 36
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 101
20747: PUSH
20748: LD_INT 102
20750: PUSH
20751: LD_INT 105
20753: PUSH
20754: LD_INT 106
20756: PUSH
20757: LD_INT 108
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: ST_TO_ADDR
20771: GO 23374
20773: LD_INT 5
20775: DOUBLE
20776: EQUAL
20777: IFTRUE 20781
20779: GO 20881
20781: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20782: LD_ADDR_VAR 0 1
20786: PUSH
20787: LD_INT 2
20789: PUSH
20790: LD_INT 4
20792: PUSH
20793: LD_INT 5
20795: PUSH
20796: LD_INT 6
20798: PUSH
20799: LD_INT 8
20801: PUSH
20802: LD_INT 11
20804: PUSH
20805: LD_INT 12
20807: PUSH
20808: LD_INT 15
20810: PUSH
20811: LD_INT 16
20813: PUSH
20814: LD_INT 22
20816: PUSH
20817: LD_INT 23
20819: PUSH
20820: LD_INT 25
20822: PUSH
20823: LD_INT 26
20825: PUSH
20826: LD_INT 36
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 101
20847: PUSH
20848: LD_INT 102
20850: PUSH
20851: LD_INT 105
20853: PUSH
20854: LD_INT 106
20856: PUSH
20857: LD_INT 108
20859: PUSH
20860: LD_INT 109
20862: PUSH
20863: LD_INT 112
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: ST_TO_ADDR
20879: GO 23374
20881: LD_INT 6
20883: DOUBLE
20884: EQUAL
20885: IFTRUE 20889
20887: GO 21009
20889: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20890: LD_ADDR_VAR 0 1
20894: PUSH
20895: LD_INT 2
20897: PUSH
20898: LD_INT 4
20900: PUSH
20901: LD_INT 5
20903: PUSH
20904: LD_INT 6
20906: PUSH
20907: LD_INT 8
20909: PUSH
20910: LD_INT 11
20912: PUSH
20913: LD_INT 12
20915: PUSH
20916: LD_INT 15
20918: PUSH
20919: LD_INT 16
20921: PUSH
20922: LD_INT 20
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 22
20930: PUSH
20931: LD_INT 23
20933: PUSH
20934: LD_INT 25
20936: PUSH
20937: LD_INT 26
20939: PUSH
20940: LD_INT 30
20942: PUSH
20943: LD_INT 31
20945: PUSH
20946: LD_INT 32
20948: PUSH
20949: LD_INT 36
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 101
20975: PUSH
20976: LD_INT 102
20978: PUSH
20979: LD_INT 105
20981: PUSH
20982: LD_INT 106
20984: PUSH
20985: LD_INT 108
20987: PUSH
20988: LD_INT 109
20990: PUSH
20991: LD_INT 112
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: ST_TO_ADDR
21007: GO 23374
21009: LD_INT 7
21011: DOUBLE
21012: EQUAL
21013: IFTRUE 21017
21015: GO 21117
21017: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21018: LD_ADDR_VAR 0 1
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: LD_INT 4
21028: PUSH
21029: LD_INT 5
21031: PUSH
21032: LD_INT 7
21034: PUSH
21035: LD_INT 11
21037: PUSH
21038: LD_INT 12
21040: PUSH
21041: LD_INT 15
21043: PUSH
21044: LD_INT 16
21046: PUSH
21047: LD_INT 20
21049: PUSH
21050: LD_INT 21
21052: PUSH
21053: LD_INT 22
21055: PUSH
21056: LD_INT 23
21058: PUSH
21059: LD_INT 25
21061: PUSH
21062: LD_INT 26
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 101
21083: PUSH
21084: LD_INT 102
21086: PUSH
21087: LD_INT 103
21089: PUSH
21090: LD_INT 105
21092: PUSH
21093: LD_INT 106
21095: PUSH
21096: LD_INT 108
21098: PUSH
21099: LD_INT 112
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: ST_TO_ADDR
21115: GO 23374
21117: LD_INT 8
21119: DOUBLE
21120: EQUAL
21121: IFTRUE 21125
21123: GO 21253
21125: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21126: LD_ADDR_VAR 0 1
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: LD_INT 4
21136: PUSH
21137: LD_INT 5
21139: PUSH
21140: LD_INT 6
21142: PUSH
21143: LD_INT 7
21145: PUSH
21146: LD_INT 8
21148: PUSH
21149: LD_INT 11
21151: PUSH
21152: LD_INT 12
21154: PUSH
21155: LD_INT 15
21157: PUSH
21158: LD_INT 16
21160: PUSH
21161: LD_INT 20
21163: PUSH
21164: LD_INT 21
21166: PUSH
21167: LD_INT 22
21169: PUSH
21170: LD_INT 23
21172: PUSH
21173: LD_INT 25
21175: PUSH
21176: LD_INT 26
21178: PUSH
21179: LD_INT 30
21181: PUSH
21182: LD_INT 31
21184: PUSH
21185: LD_INT 32
21187: PUSH
21188: LD_INT 36
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 101
21215: PUSH
21216: LD_INT 102
21218: PUSH
21219: LD_INT 103
21221: PUSH
21222: LD_INT 105
21224: PUSH
21225: LD_INT 106
21227: PUSH
21228: LD_INT 108
21230: PUSH
21231: LD_INT 109
21233: PUSH
21234: LD_INT 112
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: ST_TO_ADDR
21251: GO 23374
21253: LD_INT 9
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21397
21261: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21262: LD_ADDR_VAR 0 1
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: LD_INT 4
21272: PUSH
21273: LD_INT 5
21275: PUSH
21276: LD_INT 6
21278: PUSH
21279: LD_INT 7
21281: PUSH
21282: LD_INT 8
21284: PUSH
21285: LD_INT 11
21287: PUSH
21288: LD_INT 12
21290: PUSH
21291: LD_INT 15
21293: PUSH
21294: LD_INT 16
21296: PUSH
21297: LD_INT 20
21299: PUSH
21300: LD_INT 21
21302: PUSH
21303: LD_INT 22
21305: PUSH
21306: LD_INT 23
21308: PUSH
21309: LD_INT 25
21311: PUSH
21312: LD_INT 26
21314: PUSH
21315: LD_INT 28
21317: PUSH
21318: LD_INT 30
21320: PUSH
21321: LD_INT 31
21323: PUSH
21324: LD_INT 32
21326: PUSH
21327: LD_INT 36
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 101
21355: PUSH
21356: LD_INT 102
21358: PUSH
21359: LD_INT 103
21361: PUSH
21362: LD_INT 105
21364: PUSH
21365: LD_INT 106
21367: PUSH
21368: LD_INT 108
21370: PUSH
21371: LD_INT 109
21373: PUSH
21374: LD_INT 112
21376: PUSH
21377: LD_INT 114
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: ST_TO_ADDR
21395: GO 23374
21397: LD_INT 10
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21589
21405: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21406: LD_ADDR_VAR 0 1
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: LD_INT 4
21416: PUSH
21417: LD_INT 5
21419: PUSH
21420: LD_INT 6
21422: PUSH
21423: LD_INT 7
21425: PUSH
21426: LD_INT 8
21428: PUSH
21429: LD_INT 9
21431: PUSH
21432: LD_INT 10
21434: PUSH
21435: LD_INT 11
21437: PUSH
21438: LD_INT 12
21440: PUSH
21441: LD_INT 13
21443: PUSH
21444: LD_INT 14
21446: PUSH
21447: LD_INT 15
21449: PUSH
21450: LD_INT 16
21452: PUSH
21453: LD_INT 17
21455: PUSH
21456: LD_INT 18
21458: PUSH
21459: LD_INT 19
21461: PUSH
21462: LD_INT 20
21464: PUSH
21465: LD_INT 21
21467: PUSH
21468: LD_INT 22
21470: PUSH
21471: LD_INT 23
21473: PUSH
21474: LD_INT 24
21476: PUSH
21477: LD_INT 25
21479: PUSH
21480: LD_INT 26
21482: PUSH
21483: LD_INT 28
21485: PUSH
21486: LD_INT 30
21488: PUSH
21489: LD_INT 31
21491: PUSH
21492: LD_INT 32
21494: PUSH
21495: LD_INT 36
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 101
21531: PUSH
21532: LD_INT 102
21534: PUSH
21535: LD_INT 103
21537: PUSH
21538: LD_INT 104
21540: PUSH
21541: LD_INT 105
21543: PUSH
21544: LD_INT 106
21546: PUSH
21547: LD_INT 107
21549: PUSH
21550: LD_INT 108
21552: PUSH
21553: LD_INT 109
21555: PUSH
21556: LD_INT 110
21558: PUSH
21559: LD_INT 111
21561: PUSH
21562: LD_INT 112
21564: PUSH
21565: LD_INT 114
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: ST_TO_ADDR
21587: GO 23374
21589: LD_INT 11
21591: DOUBLE
21592: EQUAL
21593: IFTRUE 21597
21595: GO 21789
21597: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21598: LD_ADDR_VAR 0 1
21602: PUSH
21603: LD_INT 2
21605: PUSH
21606: LD_INT 3
21608: PUSH
21609: LD_INT 4
21611: PUSH
21612: LD_INT 5
21614: PUSH
21615: LD_INT 6
21617: PUSH
21618: LD_INT 7
21620: PUSH
21621: LD_INT 8
21623: PUSH
21624: LD_INT 9
21626: PUSH
21627: LD_INT 10
21629: PUSH
21630: LD_INT 11
21632: PUSH
21633: LD_INT 12
21635: PUSH
21636: LD_INT 13
21638: PUSH
21639: LD_INT 14
21641: PUSH
21642: LD_INT 15
21644: PUSH
21645: LD_INT 16
21647: PUSH
21648: LD_INT 17
21650: PUSH
21651: LD_INT 18
21653: PUSH
21654: LD_INT 19
21656: PUSH
21657: LD_INT 20
21659: PUSH
21660: LD_INT 21
21662: PUSH
21663: LD_INT 22
21665: PUSH
21666: LD_INT 23
21668: PUSH
21669: LD_INT 24
21671: PUSH
21672: LD_INT 25
21674: PUSH
21675: LD_INT 26
21677: PUSH
21678: LD_INT 28
21680: PUSH
21681: LD_INT 30
21683: PUSH
21684: LD_INT 31
21686: PUSH
21687: LD_INT 32
21689: PUSH
21690: LD_INT 34
21692: PUSH
21693: LD_INT 36
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 101
21731: PUSH
21732: LD_INT 102
21734: PUSH
21735: LD_INT 103
21737: PUSH
21738: LD_INT 104
21740: PUSH
21741: LD_INT 105
21743: PUSH
21744: LD_INT 106
21746: PUSH
21747: LD_INT 107
21749: PUSH
21750: LD_INT 108
21752: PUSH
21753: LD_INT 109
21755: PUSH
21756: LD_INT 110
21758: PUSH
21759: LD_INT 111
21761: PUSH
21762: LD_INT 112
21764: PUSH
21765: LD_INT 114
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: ST_TO_ADDR
21787: GO 23374
21789: LD_INT 12
21791: DOUBLE
21792: EQUAL
21793: IFTRUE 21797
21795: GO 22005
21797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21798: LD_ADDR_VAR 0 1
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 3
21811: PUSH
21812: LD_INT 4
21814: PUSH
21815: LD_INT 5
21817: PUSH
21818: LD_INT 6
21820: PUSH
21821: LD_INT 7
21823: PUSH
21824: LD_INT 8
21826: PUSH
21827: LD_INT 9
21829: PUSH
21830: LD_INT 10
21832: PUSH
21833: LD_INT 11
21835: PUSH
21836: LD_INT 12
21838: PUSH
21839: LD_INT 13
21841: PUSH
21842: LD_INT 14
21844: PUSH
21845: LD_INT 15
21847: PUSH
21848: LD_INT 16
21850: PUSH
21851: LD_INT 17
21853: PUSH
21854: LD_INT 18
21856: PUSH
21857: LD_INT 19
21859: PUSH
21860: LD_INT 20
21862: PUSH
21863: LD_INT 21
21865: PUSH
21866: LD_INT 22
21868: PUSH
21869: LD_INT 23
21871: PUSH
21872: LD_INT 24
21874: PUSH
21875: LD_INT 25
21877: PUSH
21878: LD_INT 26
21880: PUSH
21881: LD_INT 27
21883: PUSH
21884: LD_INT 28
21886: PUSH
21887: LD_INT 30
21889: PUSH
21890: LD_INT 31
21892: PUSH
21893: LD_INT 32
21895: PUSH
21896: LD_INT 33
21898: PUSH
21899: LD_INT 34
21901: PUSH
21902: LD_INT 36
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 101
21943: PUSH
21944: LD_INT 102
21946: PUSH
21947: LD_INT 103
21949: PUSH
21950: LD_INT 104
21952: PUSH
21953: LD_INT 105
21955: PUSH
21956: LD_INT 106
21958: PUSH
21959: LD_INT 107
21961: PUSH
21962: LD_INT 108
21964: PUSH
21965: LD_INT 109
21967: PUSH
21968: LD_INT 110
21970: PUSH
21971: LD_INT 111
21973: PUSH
21974: LD_INT 112
21976: PUSH
21977: LD_INT 113
21979: PUSH
21980: LD_INT 114
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: ST_TO_ADDR
22003: GO 23374
22005: LD_INT 13
22007: DOUBLE
22008: EQUAL
22009: IFTRUE 22013
22011: GO 22209
22013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22014: LD_ADDR_VAR 0 1
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: LD_INT 2
22024: PUSH
22025: LD_INT 3
22027: PUSH
22028: LD_INT 4
22030: PUSH
22031: LD_INT 5
22033: PUSH
22034: LD_INT 8
22036: PUSH
22037: LD_INT 9
22039: PUSH
22040: LD_INT 10
22042: PUSH
22043: LD_INT 11
22045: PUSH
22046: LD_INT 12
22048: PUSH
22049: LD_INT 14
22051: PUSH
22052: LD_INT 15
22054: PUSH
22055: LD_INT 16
22057: PUSH
22058: LD_INT 17
22060: PUSH
22061: LD_INT 18
22063: PUSH
22064: LD_INT 19
22066: PUSH
22067: LD_INT 20
22069: PUSH
22070: LD_INT 21
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_INT 23
22078: PUSH
22079: LD_INT 24
22081: PUSH
22082: LD_INT 25
22084: PUSH
22085: LD_INT 26
22087: PUSH
22088: LD_INT 27
22090: PUSH
22091: LD_INT 28
22093: PUSH
22094: LD_INT 30
22096: PUSH
22097: LD_INT 31
22099: PUSH
22100: LD_INT 32
22102: PUSH
22103: LD_INT 33
22105: PUSH
22106: LD_INT 34
22108: PUSH
22109: LD_INT 36
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 101
22147: PUSH
22148: LD_INT 102
22150: PUSH
22151: LD_INT 103
22153: PUSH
22154: LD_INT 104
22156: PUSH
22157: LD_INT 105
22159: PUSH
22160: LD_INT 106
22162: PUSH
22163: LD_INT 107
22165: PUSH
22166: LD_INT 108
22168: PUSH
22169: LD_INT 109
22171: PUSH
22172: LD_INT 110
22174: PUSH
22175: LD_INT 111
22177: PUSH
22178: LD_INT 112
22180: PUSH
22181: LD_INT 113
22183: PUSH
22184: LD_INT 114
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: ST_TO_ADDR
22207: GO 23374
22209: LD_INT 14
22211: DOUBLE
22212: EQUAL
22213: IFTRUE 22217
22215: GO 22429
22217: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22218: LD_ADDR_VAR 0 1
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 3
22231: PUSH
22232: LD_INT 4
22234: PUSH
22235: LD_INT 5
22237: PUSH
22238: LD_INT 6
22240: PUSH
22241: LD_INT 7
22243: PUSH
22244: LD_INT 8
22246: PUSH
22247: LD_INT 9
22249: PUSH
22250: LD_INT 10
22252: PUSH
22253: LD_INT 11
22255: PUSH
22256: LD_INT 12
22258: PUSH
22259: LD_INT 13
22261: PUSH
22262: LD_INT 14
22264: PUSH
22265: LD_INT 15
22267: PUSH
22268: LD_INT 16
22270: PUSH
22271: LD_INT 17
22273: PUSH
22274: LD_INT 18
22276: PUSH
22277: LD_INT 19
22279: PUSH
22280: LD_INT 20
22282: PUSH
22283: LD_INT 21
22285: PUSH
22286: LD_INT 22
22288: PUSH
22289: LD_INT 23
22291: PUSH
22292: LD_INT 24
22294: PUSH
22295: LD_INT 25
22297: PUSH
22298: LD_INT 26
22300: PUSH
22301: LD_INT 27
22303: PUSH
22304: LD_INT 28
22306: PUSH
22307: LD_INT 29
22309: PUSH
22310: LD_INT 30
22312: PUSH
22313: LD_INT 31
22315: PUSH
22316: LD_INT 32
22318: PUSH
22319: LD_INT 33
22321: PUSH
22322: LD_INT 34
22324: PUSH
22325: LD_INT 36
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 101
22367: PUSH
22368: LD_INT 102
22370: PUSH
22371: LD_INT 103
22373: PUSH
22374: LD_INT 104
22376: PUSH
22377: LD_INT 105
22379: PUSH
22380: LD_INT 106
22382: PUSH
22383: LD_INT 107
22385: PUSH
22386: LD_INT 108
22388: PUSH
22389: LD_INT 109
22391: PUSH
22392: LD_INT 110
22394: PUSH
22395: LD_INT 111
22397: PUSH
22398: LD_INT 112
22400: PUSH
22401: LD_INT 113
22403: PUSH
22404: LD_INT 114
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: ST_TO_ADDR
22427: GO 23374
22429: LD_INT 15
22431: DOUBLE
22432: EQUAL
22433: IFTRUE 22437
22435: GO 22649
22437: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22438: LD_ADDR_VAR 0 1
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: LD_INT 2
22448: PUSH
22449: LD_INT 3
22451: PUSH
22452: LD_INT 4
22454: PUSH
22455: LD_INT 5
22457: PUSH
22458: LD_INT 6
22460: PUSH
22461: LD_INT 7
22463: PUSH
22464: LD_INT 8
22466: PUSH
22467: LD_INT 9
22469: PUSH
22470: LD_INT 10
22472: PUSH
22473: LD_INT 11
22475: PUSH
22476: LD_INT 12
22478: PUSH
22479: LD_INT 13
22481: PUSH
22482: LD_INT 14
22484: PUSH
22485: LD_INT 15
22487: PUSH
22488: LD_INT 16
22490: PUSH
22491: LD_INT 17
22493: PUSH
22494: LD_INT 18
22496: PUSH
22497: LD_INT 19
22499: PUSH
22500: LD_INT 20
22502: PUSH
22503: LD_INT 21
22505: PUSH
22506: LD_INT 22
22508: PUSH
22509: LD_INT 23
22511: PUSH
22512: LD_INT 24
22514: PUSH
22515: LD_INT 25
22517: PUSH
22518: LD_INT 26
22520: PUSH
22521: LD_INT 27
22523: PUSH
22524: LD_INT 28
22526: PUSH
22527: LD_INT 29
22529: PUSH
22530: LD_INT 30
22532: PUSH
22533: LD_INT 31
22535: PUSH
22536: LD_INT 32
22538: PUSH
22539: LD_INT 33
22541: PUSH
22542: LD_INT 34
22544: PUSH
22545: LD_INT 36
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 101
22587: PUSH
22588: LD_INT 102
22590: PUSH
22591: LD_INT 103
22593: PUSH
22594: LD_INT 104
22596: PUSH
22597: LD_INT 105
22599: PUSH
22600: LD_INT 106
22602: PUSH
22603: LD_INT 107
22605: PUSH
22606: LD_INT 108
22608: PUSH
22609: LD_INT 109
22611: PUSH
22612: LD_INT 110
22614: PUSH
22615: LD_INT 111
22617: PUSH
22618: LD_INT 112
22620: PUSH
22621: LD_INT 113
22623: PUSH
22624: LD_INT 114
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: ST_TO_ADDR
22647: GO 23374
22649: LD_INT 16
22651: DOUBLE
22652: EQUAL
22653: IFTRUE 22657
22655: GO 22781
22657: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22658: LD_ADDR_VAR 0 1
22662: PUSH
22663: LD_INT 2
22665: PUSH
22666: LD_INT 4
22668: PUSH
22669: LD_INT 5
22671: PUSH
22672: LD_INT 7
22674: PUSH
22675: LD_INT 11
22677: PUSH
22678: LD_INT 12
22680: PUSH
22681: LD_INT 15
22683: PUSH
22684: LD_INT 16
22686: PUSH
22687: LD_INT 20
22689: PUSH
22690: LD_INT 21
22692: PUSH
22693: LD_INT 22
22695: PUSH
22696: LD_INT 23
22698: PUSH
22699: LD_INT 25
22701: PUSH
22702: LD_INT 26
22704: PUSH
22705: LD_INT 30
22707: PUSH
22708: LD_INT 31
22710: PUSH
22711: LD_INT 32
22713: PUSH
22714: LD_INT 33
22716: PUSH
22717: LD_INT 34
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 101
22743: PUSH
22744: LD_INT 102
22746: PUSH
22747: LD_INT 103
22749: PUSH
22750: LD_INT 106
22752: PUSH
22753: LD_INT 108
22755: PUSH
22756: LD_INT 112
22758: PUSH
22759: LD_INT 113
22761: PUSH
22762: LD_INT 114
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: ST_TO_ADDR
22779: GO 23374
22781: LD_INT 17
22783: DOUBLE
22784: EQUAL
22785: IFTRUE 22789
22787: GO 23001
22789: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22790: LD_ADDR_VAR 0 1
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: LD_INT 3
22803: PUSH
22804: LD_INT 4
22806: PUSH
22807: LD_INT 5
22809: PUSH
22810: LD_INT 6
22812: PUSH
22813: LD_INT 7
22815: PUSH
22816: LD_INT 8
22818: PUSH
22819: LD_INT 9
22821: PUSH
22822: LD_INT 10
22824: PUSH
22825: LD_INT 11
22827: PUSH
22828: LD_INT 12
22830: PUSH
22831: LD_INT 13
22833: PUSH
22834: LD_INT 14
22836: PUSH
22837: LD_INT 15
22839: PUSH
22840: LD_INT 16
22842: PUSH
22843: LD_INT 17
22845: PUSH
22846: LD_INT 18
22848: PUSH
22849: LD_INT 19
22851: PUSH
22852: LD_INT 20
22854: PUSH
22855: LD_INT 21
22857: PUSH
22858: LD_INT 22
22860: PUSH
22861: LD_INT 23
22863: PUSH
22864: LD_INT 24
22866: PUSH
22867: LD_INT 25
22869: PUSH
22870: LD_INT 26
22872: PUSH
22873: LD_INT 27
22875: PUSH
22876: LD_INT 28
22878: PUSH
22879: LD_INT 29
22881: PUSH
22882: LD_INT 30
22884: PUSH
22885: LD_INT 31
22887: PUSH
22888: LD_INT 32
22890: PUSH
22891: LD_INT 33
22893: PUSH
22894: LD_INT 34
22896: PUSH
22897: LD_INT 36
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 101
22939: PUSH
22940: LD_INT 102
22942: PUSH
22943: LD_INT 103
22945: PUSH
22946: LD_INT 104
22948: PUSH
22949: LD_INT 105
22951: PUSH
22952: LD_INT 106
22954: PUSH
22955: LD_INT 107
22957: PUSH
22958: LD_INT 108
22960: PUSH
22961: LD_INT 109
22963: PUSH
22964: LD_INT 110
22966: PUSH
22967: LD_INT 111
22969: PUSH
22970: LD_INT 112
22972: PUSH
22973: LD_INT 113
22975: PUSH
22976: LD_INT 114
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: ST_TO_ADDR
22999: GO 23374
23001: LD_INT 18
23003: DOUBLE
23004: EQUAL
23005: IFTRUE 23009
23007: GO 23145
23009: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23010: LD_ADDR_VAR 0 1
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: LD_INT 4
23020: PUSH
23021: LD_INT 5
23023: PUSH
23024: LD_INT 7
23026: PUSH
23027: LD_INT 11
23029: PUSH
23030: LD_INT 12
23032: PUSH
23033: LD_INT 15
23035: PUSH
23036: LD_INT 16
23038: PUSH
23039: LD_INT 20
23041: PUSH
23042: LD_INT 21
23044: PUSH
23045: LD_INT 22
23047: PUSH
23048: LD_INT 23
23050: PUSH
23051: LD_INT 25
23053: PUSH
23054: LD_INT 26
23056: PUSH
23057: LD_INT 30
23059: PUSH
23060: LD_INT 31
23062: PUSH
23063: LD_INT 32
23065: PUSH
23066: LD_INT 33
23068: PUSH
23069: LD_INT 34
23071: PUSH
23072: LD_INT 35
23074: PUSH
23075: LD_INT 36
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 101
23103: PUSH
23104: LD_INT 102
23106: PUSH
23107: LD_INT 103
23109: PUSH
23110: LD_INT 106
23112: PUSH
23113: LD_INT 108
23115: PUSH
23116: LD_INT 112
23118: PUSH
23119: LD_INT 113
23121: PUSH
23122: LD_INT 114
23124: PUSH
23125: LD_INT 115
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: ST_TO_ADDR
23143: GO 23374
23145: LD_INT 19
23147: DOUBLE
23148: EQUAL
23149: IFTRUE 23153
23151: GO 23373
23153: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23154: LD_ADDR_VAR 0 1
23158: PUSH
23159: LD_INT 1
23161: PUSH
23162: LD_INT 2
23164: PUSH
23165: LD_INT 3
23167: PUSH
23168: LD_INT 4
23170: PUSH
23171: LD_INT 5
23173: PUSH
23174: LD_INT 6
23176: PUSH
23177: LD_INT 7
23179: PUSH
23180: LD_INT 8
23182: PUSH
23183: LD_INT 9
23185: PUSH
23186: LD_INT 10
23188: PUSH
23189: LD_INT 11
23191: PUSH
23192: LD_INT 12
23194: PUSH
23195: LD_INT 13
23197: PUSH
23198: LD_INT 14
23200: PUSH
23201: LD_INT 15
23203: PUSH
23204: LD_INT 16
23206: PUSH
23207: LD_INT 17
23209: PUSH
23210: LD_INT 18
23212: PUSH
23213: LD_INT 19
23215: PUSH
23216: LD_INT 20
23218: PUSH
23219: LD_INT 21
23221: PUSH
23222: LD_INT 22
23224: PUSH
23225: LD_INT 23
23227: PUSH
23228: LD_INT 24
23230: PUSH
23231: LD_INT 25
23233: PUSH
23234: LD_INT 26
23236: PUSH
23237: LD_INT 27
23239: PUSH
23240: LD_INT 28
23242: PUSH
23243: LD_INT 29
23245: PUSH
23246: LD_INT 30
23248: PUSH
23249: LD_INT 31
23251: PUSH
23252: LD_INT 32
23254: PUSH
23255: LD_INT 33
23257: PUSH
23258: LD_INT 34
23260: PUSH
23261: LD_INT 35
23263: PUSH
23264: LD_INT 36
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 101
23307: PUSH
23308: LD_INT 102
23310: PUSH
23311: LD_INT 103
23313: PUSH
23314: LD_INT 104
23316: PUSH
23317: LD_INT 105
23319: PUSH
23320: LD_INT 106
23322: PUSH
23323: LD_INT 107
23325: PUSH
23326: LD_INT 108
23328: PUSH
23329: LD_INT 109
23331: PUSH
23332: LD_INT 110
23334: PUSH
23335: LD_INT 111
23337: PUSH
23338: LD_INT 112
23340: PUSH
23341: LD_INT 113
23343: PUSH
23344: LD_INT 114
23346: PUSH
23347: LD_INT 115
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: ST_TO_ADDR
23371: GO 23374
23373: POP
// end else
23374: GO 23593
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23376: LD_ADDR_VAR 0 1
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: LD_INT 3
23389: PUSH
23390: LD_INT 4
23392: PUSH
23393: LD_INT 5
23395: PUSH
23396: LD_INT 6
23398: PUSH
23399: LD_INT 7
23401: PUSH
23402: LD_INT 8
23404: PUSH
23405: LD_INT 9
23407: PUSH
23408: LD_INT 10
23410: PUSH
23411: LD_INT 11
23413: PUSH
23414: LD_INT 12
23416: PUSH
23417: LD_INT 13
23419: PUSH
23420: LD_INT 14
23422: PUSH
23423: LD_INT 15
23425: PUSH
23426: LD_INT 16
23428: PUSH
23429: LD_INT 17
23431: PUSH
23432: LD_INT 18
23434: PUSH
23435: LD_INT 19
23437: PUSH
23438: LD_INT 20
23440: PUSH
23441: LD_INT 21
23443: PUSH
23444: LD_INT 22
23446: PUSH
23447: LD_INT 23
23449: PUSH
23450: LD_INT 24
23452: PUSH
23453: LD_INT 25
23455: PUSH
23456: LD_INT 26
23458: PUSH
23459: LD_INT 27
23461: PUSH
23462: LD_INT 28
23464: PUSH
23465: LD_INT 29
23467: PUSH
23468: LD_INT 30
23470: PUSH
23471: LD_INT 31
23473: PUSH
23474: LD_INT 32
23476: PUSH
23477: LD_INT 33
23479: PUSH
23480: LD_INT 34
23482: PUSH
23483: LD_INT 35
23485: PUSH
23486: LD_INT 36
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 101
23529: PUSH
23530: LD_INT 102
23532: PUSH
23533: LD_INT 103
23535: PUSH
23536: LD_INT 104
23538: PUSH
23539: LD_INT 105
23541: PUSH
23542: LD_INT 106
23544: PUSH
23545: LD_INT 107
23547: PUSH
23548: LD_INT 108
23550: PUSH
23551: LD_INT 109
23553: PUSH
23554: LD_INT 110
23556: PUSH
23557: LD_INT 111
23559: PUSH
23560: LD_INT 112
23562: PUSH
23563: LD_INT 113
23565: PUSH
23566: LD_INT 114
23568: PUSH
23569: LD_INT 115
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: ST_TO_ADDR
// if result then
23593: LD_VAR 0 1
23597: IFFALSE 23886
// begin normal :=  ;
23599: LD_ADDR_VAR 0 3
23603: PUSH
23604: LD_STRING 
23606: ST_TO_ADDR
// hardcore :=  ;
23607: LD_ADDR_VAR 0 4
23611: PUSH
23612: LD_STRING 
23614: ST_TO_ADDR
// for i = 1 to normalCounter do
23615: LD_ADDR_VAR 0 5
23619: PUSH
23620: DOUBLE
23621: LD_INT 1
23623: DEC
23624: ST_TO_ADDR
23625: LD_EXP 62
23629: PUSH
23630: FOR_TO
23631: IFFALSE 23732
// begin tmp := 0 ;
23633: LD_ADDR_VAR 0 2
23637: PUSH
23638: LD_STRING 0
23640: ST_TO_ADDR
// if result [ 1 ] then
23641: LD_VAR 0 1
23645: PUSH
23646: LD_INT 1
23648: ARRAY
23649: IFFALSE 23714
// if result [ 1 ] [ 1 ] = i then
23651: LD_VAR 0 1
23655: PUSH
23656: LD_INT 1
23658: ARRAY
23659: PUSH
23660: LD_INT 1
23662: ARRAY
23663: PUSH
23664: LD_VAR 0 5
23668: EQUAL
23669: IFFALSE 23714
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23671: LD_ADDR_VAR 0 1
23675: PUSH
23676: LD_VAR 0 1
23680: PPUSH
23681: LD_INT 1
23683: PPUSH
23684: LD_VAR 0 1
23688: PUSH
23689: LD_INT 1
23691: ARRAY
23692: PPUSH
23693: LD_INT 1
23695: PPUSH
23696: CALL_OW 3
23700: PPUSH
23701: CALL_OW 1
23705: ST_TO_ADDR
// tmp := 1 ;
23706: LD_ADDR_VAR 0 2
23710: PUSH
23711: LD_STRING 1
23713: ST_TO_ADDR
// end ; normal := normal & tmp ;
23714: LD_ADDR_VAR 0 3
23718: PUSH
23719: LD_VAR 0 3
23723: PUSH
23724: LD_VAR 0 2
23728: STR
23729: ST_TO_ADDR
// end ;
23730: GO 23630
23732: POP
23733: POP
// for i = 1 to hardcoreCounter do
23734: LD_ADDR_VAR 0 5
23738: PUSH
23739: DOUBLE
23740: LD_INT 1
23742: DEC
23743: ST_TO_ADDR
23744: LD_EXP 63
23748: PUSH
23749: FOR_TO
23750: IFFALSE 23855
// begin tmp := 0 ;
23752: LD_ADDR_VAR 0 2
23756: PUSH
23757: LD_STRING 0
23759: ST_TO_ADDR
// if result [ 2 ] then
23760: LD_VAR 0 1
23764: PUSH
23765: LD_INT 2
23767: ARRAY
23768: IFFALSE 23837
// if result [ 2 ] [ 1 ] = 100 + i then
23770: LD_VAR 0 1
23774: PUSH
23775: LD_INT 2
23777: ARRAY
23778: PUSH
23779: LD_INT 1
23781: ARRAY
23782: PUSH
23783: LD_INT 100
23785: PUSH
23786: LD_VAR 0 5
23790: PLUS
23791: EQUAL
23792: IFFALSE 23837
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23794: LD_ADDR_VAR 0 1
23798: PUSH
23799: LD_VAR 0 1
23803: PPUSH
23804: LD_INT 2
23806: PPUSH
23807: LD_VAR 0 1
23811: PUSH
23812: LD_INT 2
23814: ARRAY
23815: PPUSH
23816: LD_INT 1
23818: PPUSH
23819: CALL_OW 3
23823: PPUSH
23824: CALL_OW 1
23828: ST_TO_ADDR
// tmp := 1 ;
23829: LD_ADDR_VAR 0 2
23833: PUSH
23834: LD_STRING 1
23836: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23837: LD_ADDR_VAR 0 4
23841: PUSH
23842: LD_VAR 0 4
23846: PUSH
23847: LD_VAR 0 2
23851: STR
23852: ST_TO_ADDR
// end ;
23853: GO 23749
23855: POP
23856: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23857: LD_STRING getStreamItemsFromMission("
23859: PUSH
23860: LD_VAR 0 3
23864: STR
23865: PUSH
23866: LD_STRING ","
23868: STR
23869: PUSH
23870: LD_VAR 0 4
23874: STR
23875: PUSH
23876: LD_STRING ")
23878: STR
23879: PPUSH
23880: CALL_OW 559
// end else
23884: GO 23893
// ToLua ( getStreamItemsFromMission("","") ) ;
23886: LD_STRING getStreamItemsFromMission("","")
23888: PPUSH
23889: CALL_OW 559
// end ;
23893: LD_VAR 0 1
23897: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23898: LD_EXP 61
23902: PUSH
23903: LD_EXP 66
23907: AND
23908: IFFALSE 24032
23910: GO 23912
23912: DISABLE
23913: LD_INT 0
23915: PPUSH
23916: PPUSH
// begin enable ;
23917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23918: LD_ADDR_VAR 0 2
23922: PUSH
23923: LD_INT 22
23925: PUSH
23926: LD_OWVAR 2
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 34
23940: PUSH
23941: LD_INT 7
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 34
23950: PUSH
23951: LD_INT 45
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 34
23960: PUSH
23961: LD_INT 28
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 34
23970: PUSH
23971: LD_INT 47
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PPUSH
23989: CALL_OW 69
23993: ST_TO_ADDR
// if not tmp then
23994: LD_VAR 0 2
23998: NOT
23999: IFFALSE 24003
// exit ;
24001: GO 24032
// for i in tmp do
24003: LD_ADDR_VAR 0 1
24007: PUSH
24008: LD_VAR 0 2
24012: PUSH
24013: FOR_IN
24014: IFFALSE 24030
// begin SetLives ( i , 0 ) ;
24016: LD_VAR 0 1
24020: PPUSH
24021: LD_INT 0
24023: PPUSH
24024: CALL_OW 234
// end ;
24028: GO 24013
24030: POP
24031: POP
// end ;
24032: PPOPN 2
24034: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24035: LD_EXP 61
24039: PUSH
24040: LD_EXP 67
24044: AND
24045: IFFALSE 24129
24047: GO 24049
24049: DISABLE
24050: LD_INT 0
24052: PPUSH
24053: PPUSH
// begin enable ;
24054: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24055: LD_ADDR_VAR 0 2
24059: PUSH
24060: LD_INT 22
24062: PUSH
24063: LD_OWVAR 2
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 32
24074: PUSH
24075: LD_INT 3
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PPUSH
24086: CALL_OW 69
24090: ST_TO_ADDR
// if not tmp then
24091: LD_VAR 0 2
24095: NOT
24096: IFFALSE 24100
// exit ;
24098: GO 24129
// for i in tmp do
24100: LD_ADDR_VAR 0 1
24104: PUSH
24105: LD_VAR 0 2
24109: PUSH
24110: FOR_IN
24111: IFFALSE 24127
// begin SetLives ( i , 0 ) ;
24113: LD_VAR 0 1
24117: PPUSH
24118: LD_INT 0
24120: PPUSH
24121: CALL_OW 234
// end ;
24125: GO 24110
24127: POP
24128: POP
// end ;
24129: PPOPN 2
24131: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24132: LD_EXP 61
24136: PUSH
24137: LD_EXP 64
24141: AND
24142: IFFALSE 24235
24144: GO 24146
24146: DISABLE
24147: LD_INT 0
24149: PPUSH
// begin enable ;
24150: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24151: LD_ADDR_VAR 0 1
24155: PUSH
24156: LD_INT 22
24158: PUSH
24159: LD_OWVAR 2
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 2
24170: PUSH
24171: LD_INT 25
24173: PUSH
24174: LD_INT 5
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 25
24183: PUSH
24184: LD_INT 9
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 25
24193: PUSH
24194: LD_INT 8
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PPUSH
24211: CALL_OW 69
24215: PUSH
24216: FOR_IN
24217: IFFALSE 24233
// begin SetClass ( i , 1 ) ;
24219: LD_VAR 0 1
24223: PPUSH
24224: LD_INT 1
24226: PPUSH
24227: CALL_OW 336
// end ;
24231: GO 24216
24233: POP
24234: POP
// end ;
24235: PPOPN 1
24237: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24238: LD_EXP 61
24242: PUSH
24243: LD_EXP 65
24247: AND
24248: PUSH
24249: LD_OWVAR 65
24253: PUSH
24254: LD_INT 7
24256: LESS
24257: AND
24258: IFFALSE 24272
24260: GO 24262
24262: DISABLE
// begin enable ;
24263: ENABLE
// game_speed := 7 ;
24264: LD_ADDR_OWVAR 65
24268: PUSH
24269: LD_INT 7
24271: ST_TO_ADDR
// end ;
24272: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24273: LD_EXP 61
24277: PUSH
24278: LD_EXP 68
24282: AND
24283: IFFALSE 24485
24285: GO 24287
24287: DISABLE
24288: LD_INT 0
24290: PPUSH
24291: PPUSH
24292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24293: LD_ADDR_VAR 0 3
24297: PUSH
24298: LD_INT 81
24300: PUSH
24301: LD_OWVAR 2
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 21
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PPUSH
24324: CALL_OW 69
24328: ST_TO_ADDR
// if not tmp then
24329: LD_VAR 0 3
24333: NOT
24334: IFFALSE 24338
// exit ;
24336: GO 24485
// if tmp > 5 then
24338: LD_VAR 0 3
24342: PUSH
24343: LD_INT 5
24345: GREATER
24346: IFFALSE 24358
// k := 5 else
24348: LD_ADDR_VAR 0 2
24352: PUSH
24353: LD_INT 5
24355: ST_TO_ADDR
24356: GO 24368
// k := tmp ;
24358: LD_ADDR_VAR 0 2
24362: PUSH
24363: LD_VAR 0 3
24367: ST_TO_ADDR
// for i := 1 to k do
24368: LD_ADDR_VAR 0 1
24372: PUSH
24373: DOUBLE
24374: LD_INT 1
24376: DEC
24377: ST_TO_ADDR
24378: LD_VAR 0 2
24382: PUSH
24383: FOR_TO
24384: IFFALSE 24483
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24386: LD_VAR 0 3
24390: PUSH
24391: LD_VAR 0 1
24395: ARRAY
24396: PPUSH
24397: LD_VAR 0 1
24401: PUSH
24402: LD_INT 4
24404: MOD
24405: PUSH
24406: LD_INT 1
24408: PLUS
24409: PPUSH
24410: CALL_OW 259
24414: PUSH
24415: LD_INT 10
24417: LESS
24418: IFFALSE 24481
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24420: LD_VAR 0 3
24424: PUSH
24425: LD_VAR 0 1
24429: ARRAY
24430: PPUSH
24431: LD_VAR 0 1
24435: PUSH
24436: LD_INT 4
24438: MOD
24439: PUSH
24440: LD_INT 1
24442: PLUS
24443: PPUSH
24444: LD_VAR 0 3
24448: PUSH
24449: LD_VAR 0 1
24453: ARRAY
24454: PPUSH
24455: LD_VAR 0 1
24459: PUSH
24460: LD_INT 4
24462: MOD
24463: PUSH
24464: LD_INT 1
24466: PLUS
24467: PPUSH
24468: CALL_OW 259
24472: PUSH
24473: LD_INT 1
24475: PLUS
24476: PPUSH
24477: CALL_OW 237
24481: GO 24383
24483: POP
24484: POP
// end ;
24485: PPOPN 3
24487: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24488: LD_EXP 61
24492: PUSH
24493: LD_EXP 69
24497: AND
24498: IFFALSE 24518
24500: GO 24502
24502: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24503: LD_INT 4
24505: PPUSH
24506: LD_OWVAR 2
24510: PPUSH
24511: LD_INT 0
24513: PPUSH
24514: CALL_OW 324
24518: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24519: LD_EXP 61
24523: PUSH
24524: LD_EXP 98
24528: AND
24529: IFFALSE 24549
24531: GO 24533
24533: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24534: LD_INT 19
24536: PPUSH
24537: LD_OWVAR 2
24541: PPUSH
24542: LD_INT 0
24544: PPUSH
24545: CALL_OW 324
24549: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24550: LD_EXP 61
24554: PUSH
24555: LD_EXP 70
24559: AND
24560: IFFALSE 24662
24562: GO 24564
24564: DISABLE
24565: LD_INT 0
24567: PPUSH
24568: PPUSH
// begin enable ;
24569: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24570: LD_ADDR_VAR 0 2
24574: PUSH
24575: LD_INT 22
24577: PUSH
24578: LD_OWVAR 2
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: LD_INT 34
24592: PUSH
24593: LD_INT 11
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 34
24602: PUSH
24603: LD_INT 30
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: LIST
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PPUSH
24619: CALL_OW 69
24623: ST_TO_ADDR
// if not tmp then
24624: LD_VAR 0 2
24628: NOT
24629: IFFALSE 24633
// exit ;
24631: GO 24662
// for i in tmp do
24633: LD_ADDR_VAR 0 1
24637: PUSH
24638: LD_VAR 0 2
24642: PUSH
24643: FOR_IN
24644: IFFALSE 24660
// begin SetLives ( i , 0 ) ;
24646: LD_VAR 0 1
24650: PPUSH
24651: LD_INT 0
24653: PPUSH
24654: CALL_OW 234
// end ;
24658: GO 24643
24660: POP
24661: POP
// end ;
24662: PPOPN 2
24664: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24665: LD_EXP 61
24669: PUSH
24670: LD_EXP 71
24674: AND
24675: IFFALSE 24695
24677: GO 24679
24679: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24680: LD_INT 32
24682: PPUSH
24683: LD_OWVAR 2
24687: PPUSH
24688: LD_INT 0
24690: PPUSH
24691: CALL_OW 324
24695: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24696: LD_EXP 61
24700: PUSH
24701: LD_EXP 72
24705: AND
24706: IFFALSE 24887
24708: GO 24710
24710: DISABLE
24711: LD_INT 0
24713: PPUSH
24714: PPUSH
24715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24716: LD_ADDR_VAR 0 2
24720: PUSH
24721: LD_INT 22
24723: PUSH
24724: LD_OWVAR 2
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 33
24735: PUSH
24736: LD_INT 3
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PPUSH
24747: CALL_OW 69
24751: ST_TO_ADDR
// if not tmp then
24752: LD_VAR 0 2
24756: NOT
24757: IFFALSE 24761
// exit ;
24759: GO 24887
// side := 0 ;
24761: LD_ADDR_VAR 0 3
24765: PUSH
24766: LD_INT 0
24768: ST_TO_ADDR
// for i := 1 to 8 do
24769: LD_ADDR_VAR 0 1
24773: PUSH
24774: DOUBLE
24775: LD_INT 1
24777: DEC
24778: ST_TO_ADDR
24779: LD_INT 8
24781: PUSH
24782: FOR_TO
24783: IFFALSE 24831
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24785: LD_OWVAR 2
24789: PUSH
24790: LD_VAR 0 1
24794: NONEQUAL
24795: PUSH
24796: LD_OWVAR 2
24800: PPUSH
24801: LD_VAR 0 1
24805: PPUSH
24806: CALL_OW 81
24810: PUSH
24811: LD_INT 2
24813: EQUAL
24814: AND
24815: IFFALSE 24829
// begin side := i ;
24817: LD_ADDR_VAR 0 3
24821: PUSH
24822: LD_VAR 0 1
24826: ST_TO_ADDR
// break ;
24827: GO 24831
// end ;
24829: GO 24782
24831: POP
24832: POP
// if not side then
24833: LD_VAR 0 3
24837: NOT
24838: IFFALSE 24842
// exit ;
24840: GO 24887
// for i := 1 to tmp do
24842: LD_ADDR_VAR 0 1
24846: PUSH
24847: DOUBLE
24848: LD_INT 1
24850: DEC
24851: ST_TO_ADDR
24852: LD_VAR 0 2
24856: PUSH
24857: FOR_TO
24858: IFFALSE 24885
// if Prob ( 60 ) then
24860: LD_INT 60
24862: PPUSH
24863: CALL_OW 13
24867: IFFALSE 24883
// SetSide ( i , side ) ;
24869: LD_VAR 0 1
24873: PPUSH
24874: LD_VAR 0 3
24878: PPUSH
24879: CALL_OW 235
24883: GO 24857
24885: POP
24886: POP
// end ;
24887: PPOPN 3
24889: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24890: LD_EXP 61
24894: PUSH
24895: LD_EXP 74
24899: AND
24900: IFFALSE 25019
24902: GO 24904
24904: DISABLE
24905: LD_INT 0
24907: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: LD_INT 22
24915: PUSH
24916: LD_OWVAR 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 21
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 3
24937: PUSH
24938: LD_INT 23
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: LIST
24956: PPUSH
24957: CALL_OW 69
24961: PUSH
24962: FOR_IN
24963: IFFALSE 25017
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24965: LD_VAR 0 1
24969: PPUSH
24970: CALL_OW 257
24974: PUSH
24975: LD_INT 1
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 3
24983: PUSH
24984: LD_INT 4
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: IN
24993: IFFALSE 25015
// SetClass ( un , rand ( 1 , 4 ) ) ;
24995: LD_VAR 0 1
24999: PPUSH
25000: LD_INT 1
25002: PPUSH
25003: LD_INT 4
25005: PPUSH
25006: CALL_OW 12
25010: PPUSH
25011: CALL_OW 336
25015: GO 24962
25017: POP
25018: POP
// end ;
25019: PPOPN 1
25021: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25022: LD_EXP 61
25026: PUSH
25027: LD_EXP 73
25031: AND
25032: IFFALSE 25111
25034: GO 25036
25036: DISABLE
25037: LD_INT 0
25039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25040: LD_ADDR_VAR 0 1
25044: PUSH
25045: LD_INT 22
25047: PUSH
25048: LD_OWVAR 2
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 21
25059: PUSH
25060: LD_INT 3
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PPUSH
25071: CALL_OW 69
25075: ST_TO_ADDR
// if not tmp then
25076: LD_VAR 0 1
25080: NOT
25081: IFFALSE 25085
// exit ;
25083: GO 25111
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25085: LD_VAR 0 1
25089: PUSH
25090: LD_INT 1
25092: PPUSH
25093: LD_VAR 0 1
25097: PPUSH
25098: CALL_OW 12
25102: ARRAY
25103: PPUSH
25104: LD_INT 100
25106: PPUSH
25107: CALL_OW 234
// end ;
25111: PPOPN 1
25113: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25114: LD_EXP 61
25118: PUSH
25119: LD_EXP 75
25123: AND
25124: IFFALSE 25222
25126: GO 25128
25128: DISABLE
25129: LD_INT 0
25131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25132: LD_ADDR_VAR 0 1
25136: PUSH
25137: LD_INT 22
25139: PUSH
25140: LD_OWVAR 2
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 21
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PPUSH
25163: CALL_OW 69
25167: ST_TO_ADDR
// if not tmp then
25168: LD_VAR 0 1
25172: NOT
25173: IFFALSE 25177
// exit ;
25175: GO 25222
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25177: LD_VAR 0 1
25181: PUSH
25182: LD_INT 1
25184: PPUSH
25185: LD_VAR 0 1
25189: PPUSH
25190: CALL_OW 12
25194: ARRAY
25195: PPUSH
25196: LD_INT 1
25198: PPUSH
25199: LD_INT 4
25201: PPUSH
25202: CALL_OW 12
25206: PPUSH
25207: LD_INT 3000
25209: PPUSH
25210: LD_INT 9000
25212: PPUSH
25213: CALL_OW 12
25217: PPUSH
25218: CALL_OW 492
// end ;
25222: PPOPN 1
25224: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25225: LD_EXP 61
25229: PUSH
25230: LD_EXP 76
25234: AND
25235: IFFALSE 25255
25237: GO 25239
25239: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25240: LD_INT 1
25242: PPUSH
25243: LD_OWVAR 2
25247: PPUSH
25248: LD_INT 0
25250: PPUSH
25251: CALL_OW 324
25255: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25256: LD_EXP 61
25260: PUSH
25261: LD_EXP 77
25265: AND
25266: IFFALSE 25349
25268: GO 25270
25270: DISABLE
25271: LD_INT 0
25273: PPUSH
25274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25275: LD_ADDR_VAR 0 2
25279: PUSH
25280: LD_INT 22
25282: PUSH
25283: LD_OWVAR 2
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 21
25294: PUSH
25295: LD_INT 3
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PPUSH
25306: CALL_OW 69
25310: ST_TO_ADDR
// if not tmp then
25311: LD_VAR 0 2
25315: NOT
25316: IFFALSE 25320
// exit ;
25318: GO 25349
// for i in tmp do
25320: LD_ADDR_VAR 0 1
25324: PUSH
25325: LD_VAR 0 2
25329: PUSH
25330: FOR_IN
25331: IFFALSE 25347
// SetBLevel ( i , 10 ) ;
25333: LD_VAR 0 1
25337: PPUSH
25338: LD_INT 10
25340: PPUSH
25341: CALL_OW 241
25345: GO 25330
25347: POP
25348: POP
// end ;
25349: PPOPN 2
25351: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25352: LD_EXP 61
25356: PUSH
25357: LD_EXP 78
25361: AND
25362: IFFALSE 25473
25364: GO 25366
25366: DISABLE
25367: LD_INT 0
25369: PPUSH
25370: PPUSH
25371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25372: LD_ADDR_VAR 0 3
25376: PUSH
25377: LD_INT 22
25379: PUSH
25380: LD_OWVAR 2
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 25
25391: PUSH
25392: LD_INT 1
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PPUSH
25403: CALL_OW 69
25407: ST_TO_ADDR
// if not tmp then
25408: LD_VAR 0 3
25412: NOT
25413: IFFALSE 25417
// exit ;
25415: GO 25473
// un := tmp [ rand ( 1 , tmp ) ] ;
25417: LD_ADDR_VAR 0 2
25421: PUSH
25422: LD_VAR 0 3
25426: PUSH
25427: LD_INT 1
25429: PPUSH
25430: LD_VAR 0 3
25434: PPUSH
25435: CALL_OW 12
25439: ARRAY
25440: ST_TO_ADDR
// if Crawls ( un ) then
25441: LD_VAR 0 2
25445: PPUSH
25446: CALL_OW 318
25450: IFFALSE 25461
// ComWalk ( un ) ;
25452: LD_VAR 0 2
25456: PPUSH
25457: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25461: LD_VAR 0 2
25465: PPUSH
25466: LD_INT 5
25468: PPUSH
25469: CALL_OW 336
// end ;
25473: PPOPN 3
25475: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25476: LD_EXP 61
25480: PUSH
25481: LD_EXP 79
25485: AND
25486: PUSH
25487: LD_OWVAR 67
25491: PUSH
25492: LD_INT 3
25494: LESS
25495: AND
25496: IFFALSE 25515
25498: GO 25500
25500: DISABLE
// Difficulty := Difficulty + 1 ;
25501: LD_ADDR_OWVAR 67
25505: PUSH
25506: LD_OWVAR 67
25510: PUSH
25511: LD_INT 1
25513: PLUS
25514: ST_TO_ADDR
25515: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25516: LD_EXP 61
25520: PUSH
25521: LD_EXP 80
25525: AND
25526: IFFALSE 25629
25528: GO 25530
25530: DISABLE
25531: LD_INT 0
25533: PPUSH
// begin for i := 1 to 5 do
25534: LD_ADDR_VAR 0 1
25538: PUSH
25539: DOUBLE
25540: LD_INT 1
25542: DEC
25543: ST_TO_ADDR
25544: LD_INT 5
25546: PUSH
25547: FOR_TO
25548: IFFALSE 25627
// begin uc_nation := nation_nature ;
25550: LD_ADDR_OWVAR 21
25554: PUSH
25555: LD_INT 0
25557: ST_TO_ADDR
// uc_side := 0 ;
25558: LD_ADDR_OWVAR 20
25562: PUSH
25563: LD_INT 0
25565: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25566: LD_ADDR_OWVAR 29
25570: PUSH
25571: LD_INT 12
25573: PUSH
25574: LD_INT 12
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: ST_TO_ADDR
// hc_agressivity := 20 ;
25581: LD_ADDR_OWVAR 35
25585: PUSH
25586: LD_INT 20
25588: ST_TO_ADDR
// hc_class := class_tiger ;
25589: LD_ADDR_OWVAR 28
25593: PUSH
25594: LD_INT 14
25596: ST_TO_ADDR
// hc_gallery :=  ;
25597: LD_ADDR_OWVAR 33
25601: PUSH
25602: LD_STRING 
25604: ST_TO_ADDR
// hc_name :=  ;
25605: LD_ADDR_OWVAR 26
25609: PUSH
25610: LD_STRING 
25612: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25613: CALL_OW 44
25617: PPUSH
25618: LD_INT 0
25620: PPUSH
25621: CALL_OW 51
// end ;
25625: GO 25547
25627: POP
25628: POP
// end ;
25629: PPOPN 1
25631: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25632: LD_EXP 61
25636: PUSH
25637: LD_EXP 81
25641: AND
25642: IFFALSE 25651
25644: GO 25646
25646: DISABLE
// StreamSibBomb ;
25647: CALL 25652 0 0
25651: END
// export function StreamSibBomb ; var i , x , y ; begin
25652: LD_INT 0
25654: PPUSH
25655: PPUSH
25656: PPUSH
25657: PPUSH
// result := false ;
25658: LD_ADDR_VAR 0 1
25662: PUSH
25663: LD_INT 0
25665: ST_TO_ADDR
// for i := 1 to 16 do
25666: LD_ADDR_VAR 0 2
25670: PUSH
25671: DOUBLE
25672: LD_INT 1
25674: DEC
25675: ST_TO_ADDR
25676: LD_INT 16
25678: PUSH
25679: FOR_TO
25680: IFFALSE 25879
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25682: LD_ADDR_VAR 0 3
25686: PUSH
25687: LD_INT 10
25689: PUSH
25690: LD_INT 20
25692: PUSH
25693: LD_INT 30
25695: PUSH
25696: LD_INT 40
25698: PUSH
25699: LD_INT 50
25701: PUSH
25702: LD_INT 60
25704: PUSH
25705: LD_INT 70
25707: PUSH
25708: LD_INT 80
25710: PUSH
25711: LD_INT 90
25713: PUSH
25714: LD_INT 100
25716: PUSH
25717: LD_INT 110
25719: PUSH
25720: LD_INT 120
25722: PUSH
25723: LD_INT 130
25725: PUSH
25726: LD_INT 140
25728: PUSH
25729: LD_INT 150
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: PPUSH
25752: LD_INT 15
25754: PPUSH
25755: CALL_OW 12
25759: ARRAY
25760: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25761: LD_ADDR_VAR 0 4
25765: PUSH
25766: LD_INT 10
25768: PUSH
25769: LD_INT 20
25771: PUSH
25772: LD_INT 30
25774: PUSH
25775: LD_INT 40
25777: PUSH
25778: LD_INT 50
25780: PUSH
25781: LD_INT 60
25783: PUSH
25784: LD_INT 70
25786: PUSH
25787: LD_INT 80
25789: PUSH
25790: LD_INT 90
25792: PUSH
25793: LD_INT 100
25795: PUSH
25796: LD_INT 110
25798: PUSH
25799: LD_INT 120
25801: PUSH
25802: LD_INT 130
25804: PUSH
25805: LD_INT 140
25807: PUSH
25808: LD_INT 150
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: PPUSH
25831: LD_INT 15
25833: PPUSH
25834: CALL_OW 12
25838: ARRAY
25839: ST_TO_ADDR
// if ValidHex ( x , y ) then
25840: LD_VAR 0 3
25844: PPUSH
25845: LD_VAR 0 4
25849: PPUSH
25850: CALL_OW 488
25854: IFFALSE 25877
// begin result := [ x , y ] ;
25856: LD_ADDR_VAR 0 1
25860: PUSH
25861: LD_VAR 0 3
25865: PUSH
25866: LD_VAR 0 4
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: ST_TO_ADDR
// break ;
25875: GO 25879
// end ; end ;
25877: GO 25679
25879: POP
25880: POP
// if result then
25881: LD_VAR 0 1
25885: IFFALSE 25945
// begin ToLua ( playSibBomb() ) ;
25887: LD_STRING playSibBomb()
25889: PPUSH
25890: CALL_OW 559
// wait ( 0 0$14 ) ;
25894: LD_INT 490
25896: PPUSH
25897: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25901: LD_VAR 0 1
25905: PUSH
25906: LD_INT 1
25908: ARRAY
25909: PPUSH
25910: LD_VAR 0 1
25914: PUSH
25915: LD_INT 2
25917: ARRAY
25918: PPUSH
25919: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25923: LD_VAR 0 1
25927: PUSH
25928: LD_INT 1
25930: ARRAY
25931: PPUSH
25932: LD_VAR 0 1
25936: PUSH
25937: LD_INT 2
25939: ARRAY
25940: PPUSH
25941: CALL_OW 429
// end ; end ;
25945: LD_VAR 0 1
25949: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25950: LD_EXP 61
25954: PUSH
25955: LD_EXP 83
25959: AND
25960: IFFALSE 25972
25962: GO 25964
25964: DISABLE
// YouLost (  ) ;
25965: LD_STRING 
25967: PPUSH
25968: CALL_OW 104
25972: END
// every 0 0$1 trigger StreamModeActive and sFog do
25973: LD_EXP 61
25977: PUSH
25978: LD_EXP 82
25982: AND
25983: IFFALSE 25997
25985: GO 25987
25987: DISABLE
// FogOff ( your_side ) ;
25988: LD_OWVAR 2
25992: PPUSH
25993: CALL_OW 344
25997: END
// every 0 0$1 trigger StreamModeActive and sSun do
25998: LD_EXP 61
26002: PUSH
26003: LD_EXP 84
26007: AND
26008: IFFALSE 26036
26010: GO 26012
26012: DISABLE
// begin solar_recharge_percent := 0 ;
26013: LD_ADDR_OWVAR 79
26017: PUSH
26018: LD_INT 0
26020: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26021: LD_INT 10500
26023: PPUSH
26024: CALL_OW 67
// solar_recharge_percent := 100 ;
26028: LD_ADDR_OWVAR 79
26032: PUSH
26033: LD_INT 100
26035: ST_TO_ADDR
// end ;
26036: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26037: LD_EXP 61
26041: PUSH
26042: LD_EXP 85
26046: AND
26047: IFFALSE 26286
26049: GO 26051
26051: DISABLE
26052: LD_INT 0
26054: PPUSH
26055: PPUSH
26056: PPUSH
// begin tmp := [ ] ;
26057: LD_ADDR_VAR 0 3
26061: PUSH
26062: EMPTY
26063: ST_TO_ADDR
// for i := 1 to 6 do
26064: LD_ADDR_VAR 0 1
26068: PUSH
26069: DOUBLE
26070: LD_INT 1
26072: DEC
26073: ST_TO_ADDR
26074: LD_INT 6
26076: PUSH
26077: FOR_TO
26078: IFFALSE 26183
// begin uc_nation := nation_nature ;
26080: LD_ADDR_OWVAR 21
26084: PUSH
26085: LD_INT 0
26087: ST_TO_ADDR
// uc_side := 0 ;
26088: LD_ADDR_OWVAR 20
26092: PUSH
26093: LD_INT 0
26095: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26096: LD_ADDR_OWVAR 29
26100: PUSH
26101: LD_INT 12
26103: PUSH
26104: LD_INT 12
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: ST_TO_ADDR
// hc_agressivity := 20 ;
26111: LD_ADDR_OWVAR 35
26115: PUSH
26116: LD_INT 20
26118: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26119: LD_ADDR_OWVAR 28
26123: PUSH
26124: LD_INT 17
26126: ST_TO_ADDR
// hc_gallery :=  ;
26127: LD_ADDR_OWVAR 33
26131: PUSH
26132: LD_STRING 
26134: ST_TO_ADDR
// hc_name :=  ;
26135: LD_ADDR_OWVAR 26
26139: PUSH
26140: LD_STRING 
26142: ST_TO_ADDR
// un := CreateHuman ;
26143: LD_ADDR_VAR 0 2
26147: PUSH
26148: CALL_OW 44
26152: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26153: LD_VAR 0 2
26157: PPUSH
26158: LD_INT 1
26160: PPUSH
26161: CALL_OW 51
// tmp := tmp ^ un ;
26165: LD_ADDR_VAR 0 3
26169: PUSH
26170: LD_VAR 0 3
26174: PUSH
26175: LD_VAR 0 2
26179: ADD
26180: ST_TO_ADDR
// end ;
26181: GO 26077
26183: POP
26184: POP
// repeat wait ( 0 0$1 ) ;
26185: LD_INT 35
26187: PPUSH
26188: CALL_OW 67
// for un in tmp do
26192: LD_ADDR_VAR 0 2
26196: PUSH
26197: LD_VAR 0 3
26201: PUSH
26202: FOR_IN
26203: IFFALSE 26277
// begin if IsDead ( un ) then
26205: LD_VAR 0 2
26209: PPUSH
26210: CALL_OW 301
26214: IFFALSE 26234
// begin tmp := tmp diff un ;
26216: LD_ADDR_VAR 0 3
26220: PUSH
26221: LD_VAR 0 3
26225: PUSH
26226: LD_VAR 0 2
26230: DIFF
26231: ST_TO_ADDR
// continue ;
26232: GO 26202
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26234: LD_VAR 0 2
26238: PPUSH
26239: LD_INT 3
26241: PUSH
26242: LD_INT 22
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PPUSH
26256: CALL_OW 69
26260: PPUSH
26261: LD_VAR 0 2
26265: PPUSH
26266: CALL_OW 74
26270: PPUSH
26271: CALL_OW 115
// end ;
26275: GO 26202
26277: POP
26278: POP
// until not tmp ;
26279: LD_VAR 0 3
26283: NOT
26284: IFFALSE 26185
// end ;
26286: PPOPN 3
26288: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26289: LD_EXP 61
26293: PUSH
26294: LD_EXP 86
26298: AND
26299: IFFALSE 26353
26301: GO 26303
26303: DISABLE
// begin ToLua ( displayTroll(); ) ;
26304: LD_STRING displayTroll();
26306: PPUSH
26307: CALL_OW 559
// wait ( 3 3$00 ) ;
26311: LD_INT 6300
26313: PPUSH
26314: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26318: LD_STRING hideTroll();
26320: PPUSH
26321: CALL_OW 559
// wait ( 1 1$00 ) ;
26325: LD_INT 2100
26327: PPUSH
26328: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26332: LD_STRING displayTroll();
26334: PPUSH
26335: CALL_OW 559
// wait ( 1 1$00 ) ;
26339: LD_INT 2100
26341: PPUSH
26342: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26346: LD_STRING hideTroll();
26348: PPUSH
26349: CALL_OW 559
// end ;
26353: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26354: LD_EXP 61
26358: PUSH
26359: LD_EXP 87
26363: AND
26364: IFFALSE 26427
26366: GO 26368
26368: DISABLE
26369: LD_INT 0
26371: PPUSH
// begin p := 0 ;
26372: LD_ADDR_VAR 0 1
26376: PUSH
26377: LD_INT 0
26379: ST_TO_ADDR
// repeat game_speed := 1 ;
26380: LD_ADDR_OWVAR 65
26384: PUSH
26385: LD_INT 1
26387: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26388: LD_INT 35
26390: PPUSH
26391: CALL_OW 67
// p := p + 1 ;
26395: LD_ADDR_VAR 0 1
26399: PUSH
26400: LD_VAR 0 1
26404: PUSH
26405: LD_INT 1
26407: PLUS
26408: ST_TO_ADDR
// until p >= 60 ;
26409: LD_VAR 0 1
26413: PUSH
26414: LD_INT 60
26416: GREATEREQUAL
26417: IFFALSE 26380
// game_speed := 4 ;
26419: LD_ADDR_OWVAR 65
26423: PUSH
26424: LD_INT 4
26426: ST_TO_ADDR
// end ;
26427: PPOPN 1
26429: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26430: LD_EXP 61
26434: PUSH
26435: LD_EXP 88
26439: AND
26440: IFFALSE 26586
26442: GO 26444
26444: DISABLE
26445: LD_INT 0
26447: PPUSH
26448: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26449: LD_ADDR_VAR 0 1
26453: PUSH
26454: LD_INT 22
26456: PUSH
26457: LD_OWVAR 2
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: LD_INT 30
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 30
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: LIST
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PPUSH
26498: CALL_OW 69
26502: ST_TO_ADDR
// if not depot then
26503: LD_VAR 0 1
26507: NOT
26508: IFFALSE 26512
// exit ;
26510: GO 26586
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26512: LD_ADDR_VAR 0 2
26516: PUSH
26517: LD_VAR 0 1
26521: PUSH
26522: LD_INT 1
26524: PPUSH
26525: LD_VAR 0 1
26529: PPUSH
26530: CALL_OW 12
26534: ARRAY
26535: PPUSH
26536: CALL_OW 274
26540: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26541: LD_VAR 0 2
26545: PPUSH
26546: LD_INT 1
26548: PPUSH
26549: LD_INT 0
26551: PPUSH
26552: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26556: LD_VAR 0 2
26560: PPUSH
26561: LD_INT 2
26563: PPUSH
26564: LD_INT 0
26566: PPUSH
26567: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26571: LD_VAR 0 2
26575: PPUSH
26576: LD_INT 3
26578: PPUSH
26579: LD_INT 0
26581: PPUSH
26582: CALL_OW 277
// end ;
26586: PPOPN 2
26588: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26589: LD_EXP 61
26593: PUSH
26594: LD_EXP 89
26598: AND
26599: IFFALSE 26696
26601: GO 26603
26603: DISABLE
26604: LD_INT 0
26606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26607: LD_ADDR_VAR 0 1
26611: PUSH
26612: LD_INT 22
26614: PUSH
26615: LD_OWVAR 2
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 21
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 3
26636: PUSH
26637: LD_INT 23
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: LIST
26655: PPUSH
26656: CALL_OW 69
26660: ST_TO_ADDR
// if not tmp then
26661: LD_VAR 0 1
26665: NOT
26666: IFFALSE 26670
// exit ;
26668: GO 26696
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26670: LD_VAR 0 1
26674: PUSH
26675: LD_INT 1
26677: PPUSH
26678: LD_VAR 0 1
26682: PPUSH
26683: CALL_OW 12
26687: ARRAY
26688: PPUSH
26689: LD_INT 200
26691: PPUSH
26692: CALL_OW 234
// end ;
26696: PPOPN 1
26698: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26699: LD_EXP 61
26703: PUSH
26704: LD_EXP 90
26708: AND
26709: IFFALSE 26788
26711: GO 26713
26713: DISABLE
26714: LD_INT 0
26716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26717: LD_ADDR_VAR 0 1
26721: PUSH
26722: LD_INT 22
26724: PUSH
26725: LD_OWVAR 2
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 21
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PPUSH
26748: CALL_OW 69
26752: ST_TO_ADDR
// if not tmp then
26753: LD_VAR 0 1
26757: NOT
26758: IFFALSE 26762
// exit ;
26760: GO 26788
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26762: LD_VAR 0 1
26766: PUSH
26767: LD_INT 1
26769: PPUSH
26770: LD_VAR 0 1
26774: PPUSH
26775: CALL_OW 12
26779: ARRAY
26780: PPUSH
26781: LD_INT 60
26783: PPUSH
26784: CALL_OW 234
// end ;
26788: PPOPN 1
26790: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26791: LD_EXP 61
26795: PUSH
26796: LD_EXP 91
26800: AND
26801: IFFALSE 26900
26803: GO 26805
26805: DISABLE
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
// begin enable ;
26810: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26811: LD_ADDR_VAR 0 1
26815: PUSH
26816: LD_INT 22
26818: PUSH
26819: LD_OWVAR 2
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 61
26830: PUSH
26831: EMPTY
26832: LIST
26833: PUSH
26834: LD_INT 33
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: PPUSH
26849: CALL_OW 69
26853: ST_TO_ADDR
// if not tmp then
26854: LD_VAR 0 1
26858: NOT
26859: IFFALSE 26863
// exit ;
26861: GO 26900
// for i in tmp do
26863: LD_ADDR_VAR 0 2
26867: PUSH
26868: LD_VAR 0 1
26872: PUSH
26873: FOR_IN
26874: IFFALSE 26898
// if IsControledBy ( i ) then
26876: LD_VAR 0 2
26880: PPUSH
26881: CALL_OW 312
26885: IFFALSE 26896
// ComUnlink ( i ) ;
26887: LD_VAR 0 2
26891: PPUSH
26892: CALL_OW 136
26896: GO 26873
26898: POP
26899: POP
// end ;
26900: PPOPN 2
26902: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26903: LD_EXP 61
26907: PUSH
26908: LD_EXP 92
26912: AND
26913: IFFALSE 27053
26915: GO 26917
26917: DISABLE
26918: LD_INT 0
26920: PPUSH
26921: PPUSH
// begin ToLua ( displayPowell(); ) ;
26922: LD_STRING displayPowell();
26924: PPUSH
26925: CALL_OW 559
// uc_side := 0 ;
26929: LD_ADDR_OWVAR 20
26933: PUSH
26934: LD_INT 0
26936: ST_TO_ADDR
// uc_nation := 2 ;
26937: LD_ADDR_OWVAR 21
26941: PUSH
26942: LD_INT 2
26944: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26945: LD_ADDR_OWVAR 37
26949: PUSH
26950: LD_INT 14
26952: ST_TO_ADDR
// vc_engine := engine_siberite ;
26953: LD_ADDR_OWVAR 39
26957: PUSH
26958: LD_INT 3
26960: ST_TO_ADDR
// vc_control := control_apeman ;
26961: LD_ADDR_OWVAR 38
26965: PUSH
26966: LD_INT 5
26968: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26969: LD_ADDR_OWVAR 40
26973: PUSH
26974: LD_INT 29
26976: ST_TO_ADDR
// un := CreateVehicle ;
26977: LD_ADDR_VAR 0 2
26981: PUSH
26982: CALL_OW 45
26986: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26987: LD_VAR 0 2
26991: PPUSH
26992: LD_INT 1
26994: PPUSH
26995: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26999: LD_INT 35
27001: PPUSH
27002: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27006: LD_VAR 0 2
27010: PPUSH
27011: LD_INT 22
27013: PUSH
27014: LD_OWVAR 2
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PPUSH
27023: CALL_OW 69
27027: PPUSH
27028: LD_VAR 0 2
27032: PPUSH
27033: CALL_OW 74
27037: PPUSH
27038: CALL_OW 115
// until IsDead ( un ) ;
27042: LD_VAR 0 2
27046: PPUSH
27047: CALL_OW 301
27051: IFFALSE 26999
// end ;
27053: PPOPN 2
27055: END
// every 0 0$1 trigger StreamModeActive and sStu do
27056: LD_EXP 61
27060: PUSH
27061: LD_EXP 100
27065: AND
27066: IFFALSE 27082
27068: GO 27070
27070: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27071: LD_STRING displayStucuk();
27073: PPUSH
27074: CALL_OW 559
// ResetFog ;
27078: CALL_OW 335
// end ;
27082: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27083: LD_EXP 61
27087: PUSH
27088: LD_EXP 93
27092: AND
27093: IFFALSE 27234
27095: GO 27097
27097: DISABLE
27098: LD_INT 0
27100: PPUSH
27101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27102: LD_ADDR_VAR 0 2
27106: PUSH
27107: LD_INT 22
27109: PUSH
27110: LD_OWVAR 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 21
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PPUSH
27133: CALL_OW 69
27137: ST_TO_ADDR
// if not tmp then
27138: LD_VAR 0 2
27142: NOT
27143: IFFALSE 27147
// exit ;
27145: GO 27234
// un := tmp [ rand ( 1 , tmp ) ] ;
27147: LD_ADDR_VAR 0 1
27151: PUSH
27152: LD_VAR 0 2
27156: PUSH
27157: LD_INT 1
27159: PPUSH
27160: LD_VAR 0 2
27164: PPUSH
27165: CALL_OW 12
27169: ARRAY
27170: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_INT 0
27178: PPUSH
27179: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27183: LD_VAR 0 1
27187: PPUSH
27188: LD_OWVAR 3
27192: PUSH
27193: LD_VAR 0 1
27197: DIFF
27198: PPUSH
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL_OW 74
27208: PPUSH
27209: CALL_OW 115
// wait ( 0 0$20 ) ;
27213: LD_INT 700
27215: PPUSH
27216: CALL_OW 67
// SetSide ( un , your_side ) ;
27220: LD_VAR 0 1
27224: PPUSH
27225: LD_OWVAR 2
27229: PPUSH
27230: CALL_OW 235
// end ;
27234: PPOPN 2
27236: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27237: LD_EXP 61
27241: PUSH
27242: LD_EXP 94
27246: AND
27247: IFFALSE 27353
27249: GO 27251
27251: DISABLE
27252: LD_INT 0
27254: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27255: LD_ADDR_VAR 0 1
27259: PUSH
27260: LD_INT 22
27262: PUSH
27263: LD_OWVAR 2
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: LD_INT 30
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 30
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PPUSH
27304: CALL_OW 69
27308: ST_TO_ADDR
// if not depot then
27309: LD_VAR 0 1
27313: NOT
27314: IFFALSE 27318
// exit ;
27316: GO 27353
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27318: LD_VAR 0 1
27322: PUSH
27323: LD_INT 1
27325: ARRAY
27326: PPUSH
27327: CALL_OW 250
27331: PPUSH
27332: LD_VAR 0 1
27336: PUSH
27337: LD_INT 1
27339: ARRAY
27340: PPUSH
27341: CALL_OW 251
27345: PPUSH
27346: LD_INT 70
27348: PPUSH
27349: CALL_OW 495
// end ;
27353: PPOPN 1
27355: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27356: LD_EXP 61
27360: PUSH
27361: LD_EXP 95
27365: AND
27366: IFFALSE 27577
27368: GO 27370
27370: DISABLE
27371: LD_INT 0
27373: PPUSH
27374: PPUSH
27375: PPUSH
27376: PPUSH
27377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27378: LD_ADDR_VAR 0 5
27382: PUSH
27383: LD_INT 22
27385: PUSH
27386: LD_OWVAR 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 21
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PPUSH
27409: CALL_OW 69
27413: ST_TO_ADDR
// if not tmp then
27414: LD_VAR 0 5
27418: NOT
27419: IFFALSE 27423
// exit ;
27421: GO 27577
// for i in tmp do
27423: LD_ADDR_VAR 0 1
27427: PUSH
27428: LD_VAR 0 5
27432: PUSH
27433: FOR_IN
27434: IFFALSE 27575
// begin d := rand ( 0 , 5 ) ;
27436: LD_ADDR_VAR 0 4
27440: PUSH
27441: LD_INT 0
27443: PPUSH
27444: LD_INT 5
27446: PPUSH
27447: CALL_OW 12
27451: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27452: LD_ADDR_VAR 0 2
27456: PUSH
27457: LD_VAR 0 1
27461: PPUSH
27462: CALL_OW 250
27466: PPUSH
27467: LD_VAR 0 4
27471: PPUSH
27472: LD_INT 3
27474: PPUSH
27475: LD_INT 12
27477: PPUSH
27478: CALL_OW 12
27482: PPUSH
27483: CALL_OW 272
27487: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27488: LD_ADDR_VAR 0 3
27492: PUSH
27493: LD_VAR 0 1
27497: PPUSH
27498: CALL_OW 251
27502: PPUSH
27503: LD_VAR 0 4
27507: PPUSH
27508: LD_INT 3
27510: PPUSH
27511: LD_INT 12
27513: PPUSH
27514: CALL_OW 12
27518: PPUSH
27519: CALL_OW 273
27523: ST_TO_ADDR
// if ValidHex ( x , y ) then
27524: LD_VAR 0 2
27528: PPUSH
27529: LD_VAR 0 3
27533: PPUSH
27534: CALL_OW 488
27538: IFFALSE 27573
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27540: LD_VAR 0 1
27544: PPUSH
27545: LD_VAR 0 2
27549: PPUSH
27550: LD_VAR 0 3
27554: PPUSH
27555: LD_INT 3
27557: PPUSH
27558: LD_INT 6
27560: PPUSH
27561: CALL_OW 12
27565: PPUSH
27566: LD_INT 1
27568: PPUSH
27569: CALL_OW 483
// end ;
27573: GO 27433
27575: POP
27576: POP
// end ;
27577: PPOPN 5
27579: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27580: LD_EXP 61
27584: PUSH
27585: LD_EXP 96
27589: AND
27590: IFFALSE 27684
27592: GO 27594
27594: DISABLE
27595: LD_INT 0
27597: PPUSH
27598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27599: LD_ADDR_VAR 0 2
27603: PUSH
27604: LD_INT 22
27606: PUSH
27607: LD_OWVAR 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 32
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 21
27628: PUSH
27629: LD_INT 2
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: LIST
27640: PPUSH
27641: CALL_OW 69
27645: ST_TO_ADDR
// if not tmp then
27646: LD_VAR 0 2
27650: NOT
27651: IFFALSE 27655
// exit ;
27653: GO 27684
// for i in tmp do
27655: LD_ADDR_VAR 0 1
27659: PUSH
27660: LD_VAR 0 2
27664: PUSH
27665: FOR_IN
27666: IFFALSE 27682
// SetFuel ( i , 0 ) ;
27668: LD_VAR 0 1
27672: PPUSH
27673: LD_INT 0
27675: PPUSH
27676: CALL_OW 240
27680: GO 27665
27682: POP
27683: POP
// end ;
27684: PPOPN 2
27686: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27687: LD_EXP 61
27691: PUSH
27692: LD_EXP 97
27696: AND
27697: IFFALSE 27763
27699: GO 27701
27701: DISABLE
27702: LD_INT 0
27704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27705: LD_ADDR_VAR 0 1
27709: PUSH
27710: LD_INT 22
27712: PUSH
27713: LD_OWVAR 2
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 30
27724: PUSH
27725: LD_INT 29
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PPUSH
27736: CALL_OW 69
27740: ST_TO_ADDR
// if not tmp then
27741: LD_VAR 0 1
27745: NOT
27746: IFFALSE 27750
// exit ;
27748: GO 27763
// DestroyUnit ( tmp [ 1 ] ) ;
27750: LD_VAR 0 1
27754: PUSH
27755: LD_INT 1
27757: ARRAY
27758: PPUSH
27759: CALL_OW 65
// end ;
27763: PPOPN 1
27765: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27766: LD_EXP 61
27770: PUSH
27771: LD_EXP 99
27775: AND
27776: IFFALSE 27905
27778: GO 27780
27780: DISABLE
27781: LD_INT 0
27783: PPUSH
// begin uc_side := 0 ;
27784: LD_ADDR_OWVAR 20
27788: PUSH
27789: LD_INT 0
27791: ST_TO_ADDR
// uc_nation := nation_arabian ;
27792: LD_ADDR_OWVAR 21
27796: PUSH
27797: LD_INT 2
27799: ST_TO_ADDR
// hc_gallery :=  ;
27800: LD_ADDR_OWVAR 33
27804: PUSH
27805: LD_STRING 
27807: ST_TO_ADDR
// hc_name :=  ;
27808: LD_ADDR_OWVAR 26
27812: PUSH
27813: LD_STRING 
27815: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27816: LD_INT 1
27818: PPUSH
27819: LD_INT 11
27821: PPUSH
27822: LD_INT 10
27824: PPUSH
27825: CALL_OW 380
// un := CreateHuman ;
27829: LD_ADDR_VAR 0 1
27833: PUSH
27834: CALL_OW 44
27838: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27839: LD_VAR 0 1
27843: PPUSH
27844: LD_INT 1
27846: PPUSH
27847: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27851: LD_INT 35
27853: PPUSH
27854: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27858: LD_VAR 0 1
27862: PPUSH
27863: LD_INT 22
27865: PUSH
27866: LD_OWVAR 2
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PPUSH
27875: CALL_OW 69
27879: PPUSH
27880: LD_VAR 0 1
27884: PPUSH
27885: CALL_OW 74
27889: PPUSH
27890: CALL_OW 115
// until IsDead ( un ) ;
27894: LD_VAR 0 1
27898: PPUSH
27899: CALL_OW 301
27903: IFFALSE 27851
// end ;
27905: PPOPN 1
27907: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27908: LD_EXP 61
27912: PUSH
27913: LD_EXP 101
27917: AND
27918: IFFALSE 27930
27920: GO 27922
27922: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27923: LD_STRING earthquake(getX(game), 0, 32)
27925: PPUSH
27926: CALL_OW 559
27930: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27931: LD_EXP 61
27935: PUSH
27936: LD_EXP 102
27940: AND
27941: IFFALSE 28032
27943: GO 27945
27945: DISABLE
27946: LD_INT 0
27948: PPUSH
// begin enable ;
27949: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27950: LD_ADDR_VAR 0 1
27954: PUSH
27955: LD_INT 22
27957: PUSH
27958: LD_OWVAR 2
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 21
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 33
27979: PUSH
27980: LD_INT 3
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: PPUSH
27992: CALL_OW 69
27996: ST_TO_ADDR
// if not tmp then
27997: LD_VAR 0 1
28001: NOT
28002: IFFALSE 28006
// exit ;
28004: GO 28032
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28006: LD_VAR 0 1
28010: PUSH
28011: LD_INT 1
28013: PPUSH
28014: LD_VAR 0 1
28018: PPUSH
28019: CALL_OW 12
28023: ARRAY
28024: PPUSH
28025: LD_INT 1
28027: PPUSH
28028: CALL_OW 234
// end ;
28032: PPOPN 1
28034: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28035: LD_EXP 61
28039: PUSH
28040: LD_EXP 103
28044: AND
28045: IFFALSE 28186
28047: GO 28049
28049: DISABLE
28050: LD_INT 0
28052: PPUSH
28053: PPUSH
28054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28055: LD_ADDR_VAR 0 3
28059: PUSH
28060: LD_INT 22
28062: PUSH
28063: LD_OWVAR 2
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 25
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PPUSH
28086: CALL_OW 69
28090: ST_TO_ADDR
// if not tmp then
28091: LD_VAR 0 3
28095: NOT
28096: IFFALSE 28100
// exit ;
28098: GO 28186
// un := tmp [ rand ( 1 , tmp ) ] ;
28100: LD_ADDR_VAR 0 2
28104: PUSH
28105: LD_VAR 0 3
28109: PUSH
28110: LD_INT 1
28112: PPUSH
28113: LD_VAR 0 3
28117: PPUSH
28118: CALL_OW 12
28122: ARRAY
28123: ST_TO_ADDR
// if Crawls ( un ) then
28124: LD_VAR 0 2
28128: PPUSH
28129: CALL_OW 318
28133: IFFALSE 28144
// ComWalk ( un ) ;
28135: LD_VAR 0 2
28139: PPUSH
28140: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28144: LD_VAR 0 2
28148: PPUSH
28149: LD_INT 9
28151: PPUSH
28152: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28156: LD_INT 28
28158: PPUSH
28159: LD_OWVAR 2
28163: PPUSH
28164: LD_INT 2
28166: PPUSH
28167: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28171: LD_INT 29
28173: PPUSH
28174: LD_OWVAR 2
28178: PPUSH
28179: LD_INT 2
28181: PPUSH
28182: CALL_OW 322
// end ;
28186: PPOPN 3
28188: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28189: LD_EXP 61
28193: PUSH
28194: LD_EXP 104
28198: AND
28199: IFFALSE 28310
28201: GO 28203
28203: DISABLE
28204: LD_INT 0
28206: PPUSH
28207: PPUSH
28208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28209: LD_ADDR_VAR 0 3
28213: PUSH
28214: LD_INT 22
28216: PUSH
28217: LD_OWVAR 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 25
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PPUSH
28240: CALL_OW 69
28244: ST_TO_ADDR
// if not tmp then
28245: LD_VAR 0 3
28249: NOT
28250: IFFALSE 28254
// exit ;
28252: GO 28310
// un := tmp [ rand ( 1 , tmp ) ] ;
28254: LD_ADDR_VAR 0 2
28258: PUSH
28259: LD_VAR 0 3
28263: PUSH
28264: LD_INT 1
28266: PPUSH
28267: LD_VAR 0 3
28271: PPUSH
28272: CALL_OW 12
28276: ARRAY
28277: ST_TO_ADDR
// if Crawls ( un ) then
28278: LD_VAR 0 2
28282: PPUSH
28283: CALL_OW 318
28287: IFFALSE 28298
// ComWalk ( un ) ;
28289: LD_VAR 0 2
28293: PPUSH
28294: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28298: LD_VAR 0 2
28302: PPUSH
28303: LD_INT 8
28305: PPUSH
28306: CALL_OW 336
// end ;
28310: PPOPN 3
28312: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28313: LD_EXP 61
28317: PUSH
28318: LD_EXP 105
28322: AND
28323: IFFALSE 28467
28325: GO 28327
28327: DISABLE
28328: LD_INT 0
28330: PPUSH
28331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28332: LD_ADDR_VAR 0 2
28336: PUSH
28337: LD_INT 22
28339: PUSH
28340: LD_OWVAR 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 21
28351: PUSH
28352: LD_INT 2
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 34
28364: PUSH
28365: LD_INT 12
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 34
28374: PUSH
28375: LD_INT 51
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 34
28384: PUSH
28385: LD_INT 32
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: LIST
28402: PPUSH
28403: CALL_OW 69
28407: ST_TO_ADDR
// if not tmp then
28408: LD_VAR 0 2
28412: NOT
28413: IFFALSE 28417
// exit ;
28415: GO 28467
// for i in tmp do
28417: LD_ADDR_VAR 0 1
28421: PUSH
28422: LD_VAR 0 2
28426: PUSH
28427: FOR_IN
28428: IFFALSE 28465
// if GetCargo ( i , mat_artifact ) = 0 then
28430: LD_VAR 0 1
28434: PPUSH
28435: LD_INT 4
28437: PPUSH
28438: CALL_OW 289
28442: PUSH
28443: LD_INT 0
28445: EQUAL
28446: IFFALSE 28463
// SetCargo ( i , mat_siberit , 100 ) ;
28448: LD_VAR 0 1
28452: PPUSH
28453: LD_INT 3
28455: PPUSH
28456: LD_INT 100
28458: PPUSH
28459: CALL_OW 290
28463: GO 28427
28465: POP
28466: POP
// end ;
28467: PPOPN 2
28469: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28470: LD_EXP 61
28474: PUSH
28475: LD_EXP 106
28479: AND
28480: IFFALSE 28663
28482: GO 28484
28484: DISABLE
28485: LD_INT 0
28487: PPUSH
28488: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28489: LD_ADDR_VAR 0 2
28493: PUSH
28494: LD_INT 22
28496: PUSH
28497: LD_OWVAR 2
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PPUSH
28506: CALL_OW 69
28510: ST_TO_ADDR
// if not tmp then
28511: LD_VAR 0 2
28515: NOT
28516: IFFALSE 28520
// exit ;
28518: GO 28663
// for i := 1 to 2 do
28520: LD_ADDR_VAR 0 1
28524: PUSH
28525: DOUBLE
28526: LD_INT 1
28528: DEC
28529: ST_TO_ADDR
28530: LD_INT 2
28532: PUSH
28533: FOR_TO
28534: IFFALSE 28661
// begin uc_side := your_side ;
28536: LD_ADDR_OWVAR 20
28540: PUSH
28541: LD_OWVAR 2
28545: ST_TO_ADDR
// uc_nation := nation_american ;
28546: LD_ADDR_OWVAR 21
28550: PUSH
28551: LD_INT 1
28553: ST_TO_ADDR
// vc_chassis := us_morphling ;
28554: LD_ADDR_OWVAR 37
28558: PUSH
28559: LD_INT 5
28561: ST_TO_ADDR
// vc_engine := engine_siberite ;
28562: LD_ADDR_OWVAR 39
28566: PUSH
28567: LD_INT 3
28569: ST_TO_ADDR
// vc_control := control_computer ;
28570: LD_ADDR_OWVAR 38
28574: PUSH
28575: LD_INT 3
28577: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28578: LD_ADDR_OWVAR 40
28582: PUSH
28583: LD_INT 10
28585: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28586: LD_VAR 0 2
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: PPUSH
28595: CALL_OW 310
28599: NOT
28600: IFFALSE 28647
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28602: CALL_OW 45
28606: PPUSH
28607: LD_VAR 0 2
28611: PUSH
28612: LD_INT 1
28614: ARRAY
28615: PPUSH
28616: CALL_OW 250
28620: PPUSH
28621: LD_VAR 0 2
28625: PUSH
28626: LD_INT 1
28628: ARRAY
28629: PPUSH
28630: CALL_OW 251
28634: PPUSH
28635: LD_INT 12
28637: PPUSH
28638: LD_INT 1
28640: PPUSH
28641: CALL_OW 50
28645: GO 28659
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28647: CALL_OW 45
28651: PPUSH
28652: LD_INT 1
28654: PPUSH
28655: CALL_OW 51
// end ;
28659: GO 28533
28661: POP
28662: POP
// end ;
28663: PPOPN 2
28665: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28666: LD_EXP 61
28670: PUSH
28671: LD_EXP 107
28675: AND
28676: IFFALSE 28898
28678: GO 28680
28680: DISABLE
28681: LD_INT 0
28683: PPUSH
28684: PPUSH
28685: PPUSH
28686: PPUSH
28687: PPUSH
28688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28689: LD_ADDR_VAR 0 6
28693: PUSH
28694: LD_INT 22
28696: PUSH
28697: LD_OWVAR 2
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 21
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 3
28718: PUSH
28719: LD_INT 23
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: PPUSH
28738: CALL_OW 69
28742: ST_TO_ADDR
// if not tmp then
28743: LD_VAR 0 6
28747: NOT
28748: IFFALSE 28752
// exit ;
28750: GO 28898
// s1 := rand ( 1 , 4 ) ;
28752: LD_ADDR_VAR 0 2
28756: PUSH
28757: LD_INT 1
28759: PPUSH
28760: LD_INT 4
28762: PPUSH
28763: CALL_OW 12
28767: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28768: LD_ADDR_VAR 0 4
28772: PUSH
28773: LD_VAR 0 6
28777: PUSH
28778: LD_INT 1
28780: ARRAY
28781: PPUSH
28782: LD_VAR 0 2
28786: PPUSH
28787: CALL_OW 259
28791: ST_TO_ADDR
// if s1 = 1 then
28792: LD_VAR 0 2
28796: PUSH
28797: LD_INT 1
28799: EQUAL
28800: IFFALSE 28820
// s2 := rand ( 2 , 4 ) else
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_INT 2
28809: PPUSH
28810: LD_INT 4
28812: PPUSH
28813: CALL_OW 12
28817: ST_TO_ADDR
28818: GO 28828
// s2 := 1 ;
28820: LD_ADDR_VAR 0 3
28824: PUSH
28825: LD_INT 1
28827: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28828: LD_ADDR_VAR 0 5
28832: PUSH
28833: LD_VAR 0 6
28837: PUSH
28838: LD_INT 1
28840: ARRAY
28841: PPUSH
28842: LD_VAR 0 3
28846: PPUSH
28847: CALL_OW 259
28851: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28852: LD_VAR 0 6
28856: PUSH
28857: LD_INT 1
28859: ARRAY
28860: PPUSH
28861: LD_VAR 0 2
28865: PPUSH
28866: LD_VAR 0 5
28870: PPUSH
28871: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28875: LD_VAR 0 6
28879: PUSH
28880: LD_INT 1
28882: ARRAY
28883: PPUSH
28884: LD_VAR 0 3
28888: PPUSH
28889: LD_VAR 0 4
28893: PPUSH
28894: CALL_OW 237
// end ;
28898: PPOPN 6
28900: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28901: LD_EXP 61
28905: PUSH
28906: LD_EXP 108
28910: AND
28911: IFFALSE 28990
28913: GO 28915
28915: DISABLE
28916: LD_INT 0
28918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28919: LD_ADDR_VAR 0 1
28923: PUSH
28924: LD_INT 22
28926: PUSH
28927: LD_OWVAR 2
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 30
28938: PUSH
28939: LD_INT 3
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PPUSH
28950: CALL_OW 69
28954: ST_TO_ADDR
// if not tmp then
28955: LD_VAR 0 1
28959: NOT
28960: IFFALSE 28964
// exit ;
28962: GO 28990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28964: LD_VAR 0 1
28968: PUSH
28969: LD_INT 1
28971: PPUSH
28972: LD_VAR 0 1
28976: PPUSH
28977: CALL_OW 12
28981: ARRAY
28982: PPUSH
28983: LD_INT 1
28985: PPUSH
28986: CALL_OW 234
// end ;
28990: PPOPN 1
28992: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28993: LD_EXP 61
28997: PUSH
28998: LD_EXP 109
29002: AND
29003: IFFALSE 29115
29005: GO 29007
29007: DISABLE
29008: LD_INT 0
29010: PPUSH
29011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29012: LD_ADDR_VAR 0 2
29016: PUSH
29017: LD_INT 22
29019: PUSH
29020: LD_OWVAR 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: LD_INT 30
29034: PUSH
29035: LD_INT 27
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 30
29044: PUSH
29045: LD_INT 26
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 30
29054: PUSH
29055: LD_INT 28
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PPUSH
29072: CALL_OW 69
29076: ST_TO_ADDR
// if not tmp then
29077: LD_VAR 0 2
29081: NOT
29082: IFFALSE 29086
// exit ;
29084: GO 29115
// for i in tmp do
29086: LD_ADDR_VAR 0 1
29090: PUSH
29091: LD_VAR 0 2
29095: PUSH
29096: FOR_IN
29097: IFFALSE 29113
// SetLives ( i , 1 ) ;
29099: LD_VAR 0 1
29103: PPUSH
29104: LD_INT 1
29106: PPUSH
29107: CALL_OW 234
29111: GO 29096
29113: POP
29114: POP
// end ;
29115: PPOPN 2
29117: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29118: LD_EXP 61
29122: PUSH
29123: LD_EXP 110
29127: AND
29128: IFFALSE 29402
29130: GO 29132
29132: DISABLE
29133: LD_INT 0
29135: PPUSH
29136: PPUSH
29137: PPUSH
// begin i := rand ( 1 , 7 ) ;
29138: LD_ADDR_VAR 0 1
29142: PUSH
29143: LD_INT 1
29145: PPUSH
29146: LD_INT 7
29148: PPUSH
29149: CALL_OW 12
29153: ST_TO_ADDR
// case i of 1 :
29154: LD_VAR 0 1
29158: PUSH
29159: LD_INT 1
29161: DOUBLE
29162: EQUAL
29163: IFTRUE 29167
29165: GO 29177
29167: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29168: LD_STRING earthquake(getX(game), 0, 32)
29170: PPUSH
29171: CALL_OW 559
29175: GO 29402
29177: LD_INT 2
29179: DOUBLE
29180: EQUAL
29181: IFTRUE 29185
29183: GO 29199
29185: POP
// begin ToLua ( displayStucuk(); ) ;
29186: LD_STRING displayStucuk();
29188: PPUSH
29189: CALL_OW 559
// ResetFog ;
29193: CALL_OW 335
// end ; 3 :
29197: GO 29402
29199: LD_INT 3
29201: DOUBLE
29202: EQUAL
29203: IFTRUE 29207
29205: GO 29311
29207: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29208: LD_ADDR_VAR 0 2
29212: PUSH
29213: LD_INT 22
29215: PUSH
29216: LD_OWVAR 2
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 25
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PPUSH
29239: CALL_OW 69
29243: ST_TO_ADDR
// if not tmp then
29244: LD_VAR 0 2
29248: NOT
29249: IFFALSE 29253
// exit ;
29251: GO 29402
// un := tmp [ rand ( 1 , tmp ) ] ;
29253: LD_ADDR_VAR 0 3
29257: PUSH
29258: LD_VAR 0 2
29262: PUSH
29263: LD_INT 1
29265: PPUSH
29266: LD_VAR 0 2
29270: PPUSH
29271: CALL_OW 12
29275: ARRAY
29276: ST_TO_ADDR
// if Crawls ( un ) then
29277: LD_VAR 0 3
29281: PPUSH
29282: CALL_OW 318
29286: IFFALSE 29297
// ComWalk ( un ) ;
29288: LD_VAR 0 3
29292: PPUSH
29293: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29297: LD_VAR 0 3
29301: PPUSH
29302: LD_INT 8
29304: PPUSH
29305: CALL_OW 336
// end ; 4 :
29309: GO 29402
29311: LD_INT 4
29313: DOUBLE
29314: EQUAL
29315: IFTRUE 29319
29317: GO 29380
29319: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29320: LD_ADDR_VAR 0 2
29324: PUSH
29325: LD_INT 22
29327: PUSH
29328: LD_OWVAR 2
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 30
29339: PUSH
29340: LD_INT 29
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PPUSH
29351: CALL_OW 69
29355: ST_TO_ADDR
// if not tmp then
29356: LD_VAR 0 2
29360: NOT
29361: IFFALSE 29365
// exit ;
29363: GO 29402
// DestroyUnit ( tmp [ 1 ] ) ;
29365: LD_VAR 0 2
29369: PUSH
29370: LD_INT 1
29372: ARRAY
29373: PPUSH
29374: CALL_OW 65
// end ; 5 .. 7 :
29378: GO 29402
29380: LD_INT 5
29382: DOUBLE
29383: GREATEREQUAL
29384: IFFALSE 29392
29386: LD_INT 7
29388: DOUBLE
29389: LESSEQUAL
29390: IFTRUE 29394
29392: GO 29401
29394: POP
// StreamSibBomb ; end ;
29395: CALL 25652 0 0
29399: GO 29402
29401: POP
// end ;
29402: PPOPN 3
29404: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29405: LD_EXP 61
29409: PUSH
29410: LD_EXP 111
29414: AND
29415: IFFALSE 29571
29417: GO 29419
29419: DISABLE
29420: LD_INT 0
29422: PPUSH
29423: PPUSH
29424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29425: LD_ADDR_VAR 0 2
29429: PUSH
29430: LD_INT 81
29432: PUSH
29433: LD_OWVAR 2
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 2
29444: PUSH
29445: LD_INT 21
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 21
29457: PUSH
29458: LD_INT 2
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PPUSH
29474: CALL_OW 69
29478: ST_TO_ADDR
// if not tmp then
29479: LD_VAR 0 2
29483: NOT
29484: IFFALSE 29488
// exit ;
29486: GO 29571
// p := 0 ;
29488: LD_ADDR_VAR 0 3
29492: PUSH
29493: LD_INT 0
29495: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29496: LD_INT 35
29498: PPUSH
29499: CALL_OW 67
// p := p + 1 ;
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_VAR 0 3
29512: PUSH
29513: LD_INT 1
29515: PLUS
29516: ST_TO_ADDR
// for i in tmp do
29517: LD_ADDR_VAR 0 1
29521: PUSH
29522: LD_VAR 0 2
29526: PUSH
29527: FOR_IN
29528: IFFALSE 29559
// if GetLives ( i ) < 1000 then
29530: LD_VAR 0 1
29534: PPUSH
29535: CALL_OW 256
29539: PUSH
29540: LD_INT 1000
29542: LESS
29543: IFFALSE 29557
// SetLives ( i , 1000 ) ;
29545: LD_VAR 0 1
29549: PPUSH
29550: LD_INT 1000
29552: PPUSH
29553: CALL_OW 234
29557: GO 29527
29559: POP
29560: POP
// until p > 20 ;
29561: LD_VAR 0 3
29565: PUSH
29566: LD_INT 20
29568: GREATER
29569: IFFALSE 29496
// end ;
29571: PPOPN 3
29573: END
// every 0 0$1 trigger StreamModeActive and sTime do
29574: LD_EXP 61
29578: PUSH
29579: LD_EXP 112
29583: AND
29584: IFFALSE 29619
29586: GO 29588
29588: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29589: LD_INT 28
29591: PPUSH
29592: LD_OWVAR 2
29596: PPUSH
29597: LD_INT 2
29599: PPUSH
29600: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29604: LD_INT 30
29606: PPUSH
29607: LD_OWVAR 2
29611: PPUSH
29612: LD_INT 2
29614: PPUSH
29615: CALL_OW 322
// end ;
29619: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29620: LD_EXP 61
29624: PUSH
29625: LD_EXP 113
29629: AND
29630: IFFALSE 29751
29632: GO 29634
29634: DISABLE
29635: LD_INT 0
29637: PPUSH
29638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29639: LD_ADDR_VAR 0 2
29643: PUSH
29644: LD_INT 22
29646: PUSH
29647: LD_OWVAR 2
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 21
29658: PUSH
29659: LD_INT 1
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 3
29668: PUSH
29669: LD_INT 23
29671: PUSH
29672: LD_INT 0
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: PPUSH
29688: CALL_OW 69
29692: ST_TO_ADDR
// if not tmp then
29693: LD_VAR 0 2
29697: NOT
29698: IFFALSE 29702
// exit ;
29700: GO 29751
// for i in tmp do
29702: LD_ADDR_VAR 0 1
29706: PUSH
29707: LD_VAR 0 2
29711: PUSH
29712: FOR_IN
29713: IFFALSE 29749
// begin if Crawls ( i ) then
29715: LD_VAR 0 1
29719: PPUSH
29720: CALL_OW 318
29724: IFFALSE 29735
// ComWalk ( i ) ;
29726: LD_VAR 0 1
29730: PPUSH
29731: CALL_OW 138
// SetClass ( i , 2 ) ;
29735: LD_VAR 0 1
29739: PPUSH
29740: LD_INT 2
29742: PPUSH
29743: CALL_OW 336
// end ;
29747: GO 29712
29749: POP
29750: POP
// end ;
29751: PPOPN 2
29753: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29754: LD_EXP 61
29758: PUSH
29759: LD_EXP 114
29763: AND
29764: IFFALSE 30045
29766: GO 29768
29768: DISABLE
29769: LD_INT 0
29771: PPUSH
29772: PPUSH
29773: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29774: LD_OWVAR 2
29778: PPUSH
29779: LD_INT 9
29781: PPUSH
29782: LD_INT 1
29784: PPUSH
29785: LD_INT 1
29787: PPUSH
29788: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29792: LD_INT 9
29794: PPUSH
29795: LD_OWVAR 2
29799: PPUSH
29800: CALL_OW 343
// uc_side := 9 ;
29804: LD_ADDR_OWVAR 20
29808: PUSH
29809: LD_INT 9
29811: ST_TO_ADDR
// uc_nation := 2 ;
29812: LD_ADDR_OWVAR 21
29816: PUSH
29817: LD_INT 2
29819: ST_TO_ADDR
// hc_name := Dark Warrior ;
29820: LD_ADDR_OWVAR 26
29824: PUSH
29825: LD_STRING Dark Warrior
29827: ST_TO_ADDR
// hc_gallery :=  ;
29828: LD_ADDR_OWVAR 33
29832: PUSH
29833: LD_STRING 
29835: ST_TO_ADDR
// hc_noskilllimit := true ;
29836: LD_ADDR_OWVAR 76
29840: PUSH
29841: LD_INT 1
29843: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29844: LD_ADDR_OWVAR 31
29848: PUSH
29849: LD_INT 30
29851: PUSH
29852: LD_INT 30
29854: PUSH
29855: LD_INT 30
29857: PUSH
29858: LD_INT 30
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
// un := CreateHuman ;
29867: LD_ADDR_VAR 0 3
29871: PUSH
29872: CALL_OW 44
29876: ST_TO_ADDR
// hc_noskilllimit := false ;
29877: LD_ADDR_OWVAR 76
29881: PUSH
29882: LD_INT 0
29884: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29885: LD_VAR 0 3
29889: PPUSH
29890: LD_INT 1
29892: PPUSH
29893: CALL_OW 51
// p := 0 ;
29897: LD_ADDR_VAR 0 2
29901: PUSH
29902: LD_INT 0
29904: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29905: LD_INT 35
29907: PPUSH
29908: CALL_OW 67
// p := p + 1 ;
29912: LD_ADDR_VAR 0 2
29916: PUSH
29917: LD_VAR 0 2
29921: PUSH
29922: LD_INT 1
29924: PLUS
29925: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29926: LD_VAR 0 3
29930: PPUSH
29931: CALL_OW 256
29935: PUSH
29936: LD_INT 1000
29938: LESS
29939: IFFALSE 29953
// SetLives ( un , 1000 ) ;
29941: LD_VAR 0 3
29945: PPUSH
29946: LD_INT 1000
29948: PPUSH
29949: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29953: LD_VAR 0 3
29957: PPUSH
29958: LD_INT 81
29960: PUSH
29961: LD_OWVAR 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 91
29972: PUSH
29973: LD_VAR 0 3
29977: PUSH
29978: LD_INT 30
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PPUSH
29990: CALL_OW 69
29994: PPUSH
29995: LD_VAR 0 3
29999: PPUSH
30000: CALL_OW 74
30004: PPUSH
30005: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30009: LD_VAR 0 2
30013: PUSH
30014: LD_INT 60
30016: GREATER
30017: PUSH
30018: LD_VAR 0 3
30022: PPUSH
30023: CALL_OW 301
30027: OR
30028: IFFALSE 29905
// if un then
30030: LD_VAR 0 3
30034: IFFALSE 30045
// RemoveUnit ( un ) ;
30036: LD_VAR 0 3
30040: PPUSH
30041: CALL_OW 64
// end ;
30045: PPOPN 3
30047: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30048: LD_INT 0
30050: PPUSH
// case cmd of 301 :
30051: LD_VAR 0 1
30055: PUSH
30056: LD_INT 301
30058: DOUBLE
30059: EQUAL
30060: IFTRUE 30064
30062: GO 30096
30064: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30065: LD_VAR 0 6
30069: PPUSH
30070: LD_VAR 0 7
30074: PPUSH
30075: LD_VAR 0 8
30079: PPUSH
30080: LD_VAR 0 4
30084: PPUSH
30085: LD_VAR 0 5
30089: PPUSH
30090: CALL 31297 0 5
30094: GO 30217
30096: LD_INT 302
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 30141
30104: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30105: LD_VAR 0 6
30109: PPUSH
30110: LD_VAR 0 7
30114: PPUSH
30115: LD_VAR 0 8
30119: PPUSH
30120: LD_VAR 0 9
30124: PPUSH
30125: LD_VAR 0 4
30129: PPUSH
30130: LD_VAR 0 5
30134: PPUSH
30135: CALL 31388 0 6
30139: GO 30217
30141: LD_INT 303
30143: DOUBLE
30144: EQUAL
30145: IFTRUE 30149
30147: GO 30186
30149: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30150: LD_VAR 0 6
30154: PPUSH
30155: LD_VAR 0 7
30159: PPUSH
30160: LD_VAR 0 8
30164: PPUSH
30165: LD_VAR 0 9
30169: PPUSH
30170: LD_VAR 0 4
30174: PPUSH
30175: LD_VAR 0 5
30179: PPUSH
30180: CALL 30222 0 6
30184: GO 30217
30186: LD_INT 304
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30216
30194: POP
// hHackTeleport ( unit , x , y ) ; end ;
30195: LD_VAR 0 2
30199: PPUSH
30200: LD_VAR 0 4
30204: PPUSH
30205: LD_VAR 0 5
30209: PPUSH
30210: CALL 31981 0 3
30214: GO 30217
30216: POP
// end ;
30217: LD_VAR 0 12
30221: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30222: LD_INT 0
30224: PPUSH
30225: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30226: LD_VAR 0 1
30230: PUSH
30231: LD_INT 1
30233: LESS
30234: PUSH
30235: LD_VAR 0 1
30239: PUSH
30240: LD_INT 3
30242: GREATER
30243: OR
30244: PUSH
30245: LD_VAR 0 5
30249: PPUSH
30250: LD_VAR 0 6
30254: PPUSH
30255: CALL_OW 428
30259: OR
30260: IFFALSE 30264
// exit ;
30262: GO 30984
// uc_side := your_side ;
30264: LD_ADDR_OWVAR 20
30268: PUSH
30269: LD_OWVAR 2
30273: ST_TO_ADDR
// uc_nation := nation ;
30274: LD_ADDR_OWVAR 21
30278: PUSH
30279: LD_VAR 0 1
30283: ST_TO_ADDR
// bc_level = 1 ;
30284: LD_ADDR_OWVAR 43
30288: PUSH
30289: LD_INT 1
30291: ST_TO_ADDR
// case btype of 1 :
30292: LD_VAR 0 2
30296: PUSH
30297: LD_INT 1
30299: DOUBLE
30300: EQUAL
30301: IFTRUE 30305
30303: GO 30316
30305: POP
// bc_type := b_depot ; 2 :
30306: LD_ADDR_OWVAR 42
30310: PUSH
30311: LD_INT 0
30313: ST_TO_ADDR
30314: GO 30928
30316: LD_INT 2
30318: DOUBLE
30319: EQUAL
30320: IFTRUE 30324
30322: GO 30335
30324: POP
// bc_type := b_warehouse ; 3 :
30325: LD_ADDR_OWVAR 42
30329: PUSH
30330: LD_INT 1
30332: ST_TO_ADDR
30333: GO 30928
30335: LD_INT 3
30337: DOUBLE
30338: EQUAL
30339: IFTRUE 30343
30341: GO 30354
30343: POP
// bc_type := b_lab ; 4 .. 9 :
30344: LD_ADDR_OWVAR 42
30348: PUSH
30349: LD_INT 6
30351: ST_TO_ADDR
30352: GO 30928
30354: LD_INT 4
30356: DOUBLE
30357: GREATEREQUAL
30358: IFFALSE 30366
30360: LD_INT 9
30362: DOUBLE
30363: LESSEQUAL
30364: IFTRUE 30368
30366: GO 30420
30368: POP
// begin bc_type := b_lab_half ;
30369: LD_ADDR_OWVAR 42
30373: PUSH
30374: LD_INT 7
30376: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30377: LD_ADDR_OWVAR 44
30381: PUSH
30382: LD_INT 10
30384: PUSH
30385: LD_INT 11
30387: PUSH
30388: LD_INT 12
30390: PUSH
30391: LD_INT 15
30393: PUSH
30394: LD_INT 14
30396: PUSH
30397: LD_INT 13
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: PUSH
30408: LD_VAR 0 2
30412: PUSH
30413: LD_INT 3
30415: MINUS
30416: ARRAY
30417: ST_TO_ADDR
// end ; 10 .. 13 :
30418: GO 30928
30420: LD_INT 10
30422: DOUBLE
30423: GREATEREQUAL
30424: IFFALSE 30432
30426: LD_INT 13
30428: DOUBLE
30429: LESSEQUAL
30430: IFTRUE 30434
30432: GO 30511
30434: POP
// begin bc_type := b_lab_full ;
30435: LD_ADDR_OWVAR 42
30439: PUSH
30440: LD_INT 8
30442: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30443: LD_ADDR_OWVAR 44
30447: PUSH
30448: LD_INT 10
30450: PUSH
30451: LD_INT 12
30453: PUSH
30454: LD_INT 14
30456: PUSH
30457: LD_INT 13
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: PUSH
30466: LD_VAR 0 2
30470: PUSH
30471: LD_INT 9
30473: MINUS
30474: ARRAY
30475: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30476: LD_ADDR_OWVAR 45
30480: PUSH
30481: LD_INT 11
30483: PUSH
30484: LD_INT 15
30486: PUSH
30487: LD_INT 12
30489: PUSH
30490: LD_INT 15
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: PUSH
30499: LD_VAR 0 2
30503: PUSH
30504: LD_INT 9
30506: MINUS
30507: ARRAY
30508: ST_TO_ADDR
// end ; 14 :
30509: GO 30928
30511: LD_INT 14
30513: DOUBLE
30514: EQUAL
30515: IFTRUE 30519
30517: GO 30530
30519: POP
// bc_type := b_workshop ; 15 :
30520: LD_ADDR_OWVAR 42
30524: PUSH
30525: LD_INT 2
30527: ST_TO_ADDR
30528: GO 30928
30530: LD_INT 15
30532: DOUBLE
30533: EQUAL
30534: IFTRUE 30538
30536: GO 30549
30538: POP
// bc_type := b_factory ; 16 :
30539: LD_ADDR_OWVAR 42
30543: PUSH
30544: LD_INT 3
30546: ST_TO_ADDR
30547: GO 30928
30549: LD_INT 16
30551: DOUBLE
30552: EQUAL
30553: IFTRUE 30557
30555: GO 30568
30557: POP
// bc_type := b_ext_gun ; 17 :
30558: LD_ADDR_OWVAR 42
30562: PUSH
30563: LD_INT 17
30565: ST_TO_ADDR
30566: GO 30928
30568: LD_INT 17
30570: DOUBLE
30571: EQUAL
30572: IFTRUE 30576
30574: GO 30604
30576: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30577: LD_ADDR_OWVAR 42
30581: PUSH
30582: LD_INT 19
30584: PUSH
30585: LD_INT 23
30587: PUSH
30588: LD_INT 19
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: PUSH
30596: LD_VAR 0 1
30600: ARRAY
30601: ST_TO_ADDR
30602: GO 30928
30604: LD_INT 18
30606: DOUBLE
30607: EQUAL
30608: IFTRUE 30612
30610: GO 30623
30612: POP
// bc_type := b_ext_radar ; 19 :
30613: LD_ADDR_OWVAR 42
30617: PUSH
30618: LD_INT 20
30620: ST_TO_ADDR
30621: GO 30928
30623: LD_INT 19
30625: DOUBLE
30626: EQUAL
30627: IFTRUE 30631
30629: GO 30642
30631: POP
// bc_type := b_ext_radio ; 20 :
30632: LD_ADDR_OWVAR 42
30636: PUSH
30637: LD_INT 22
30639: ST_TO_ADDR
30640: GO 30928
30642: LD_INT 20
30644: DOUBLE
30645: EQUAL
30646: IFTRUE 30650
30648: GO 30661
30650: POP
// bc_type := b_ext_siberium ; 21 :
30651: LD_ADDR_OWVAR 42
30655: PUSH
30656: LD_INT 21
30658: ST_TO_ADDR
30659: GO 30928
30661: LD_INT 21
30663: DOUBLE
30664: EQUAL
30665: IFTRUE 30669
30667: GO 30680
30669: POP
// bc_type := b_ext_computer ; 22 :
30670: LD_ADDR_OWVAR 42
30674: PUSH
30675: LD_INT 24
30677: ST_TO_ADDR
30678: GO 30928
30680: LD_INT 22
30682: DOUBLE
30683: EQUAL
30684: IFTRUE 30688
30686: GO 30699
30688: POP
// bc_type := b_ext_track ; 23 :
30689: LD_ADDR_OWVAR 42
30693: PUSH
30694: LD_INT 16
30696: ST_TO_ADDR
30697: GO 30928
30699: LD_INT 23
30701: DOUBLE
30702: EQUAL
30703: IFTRUE 30707
30705: GO 30718
30707: POP
// bc_type := b_ext_laser ; 24 :
30708: LD_ADDR_OWVAR 42
30712: PUSH
30713: LD_INT 25
30715: ST_TO_ADDR
30716: GO 30928
30718: LD_INT 24
30720: DOUBLE
30721: EQUAL
30722: IFTRUE 30726
30724: GO 30737
30726: POP
// bc_type := b_control_tower ; 25 :
30727: LD_ADDR_OWVAR 42
30731: PUSH
30732: LD_INT 36
30734: ST_TO_ADDR
30735: GO 30928
30737: LD_INT 25
30739: DOUBLE
30740: EQUAL
30741: IFTRUE 30745
30743: GO 30756
30745: POP
// bc_type := b_breastwork ; 26 :
30746: LD_ADDR_OWVAR 42
30750: PUSH
30751: LD_INT 31
30753: ST_TO_ADDR
30754: GO 30928
30756: LD_INT 26
30758: DOUBLE
30759: EQUAL
30760: IFTRUE 30764
30762: GO 30775
30764: POP
// bc_type := b_bunker ; 27 :
30765: LD_ADDR_OWVAR 42
30769: PUSH
30770: LD_INT 32
30772: ST_TO_ADDR
30773: GO 30928
30775: LD_INT 27
30777: DOUBLE
30778: EQUAL
30779: IFTRUE 30783
30781: GO 30794
30783: POP
// bc_type := b_turret ; 28 :
30784: LD_ADDR_OWVAR 42
30788: PUSH
30789: LD_INT 33
30791: ST_TO_ADDR
30792: GO 30928
30794: LD_INT 28
30796: DOUBLE
30797: EQUAL
30798: IFTRUE 30802
30800: GO 30813
30802: POP
// bc_type := b_armoury ; 29 :
30803: LD_ADDR_OWVAR 42
30807: PUSH
30808: LD_INT 4
30810: ST_TO_ADDR
30811: GO 30928
30813: LD_INT 29
30815: DOUBLE
30816: EQUAL
30817: IFTRUE 30821
30819: GO 30832
30821: POP
// bc_type := b_barracks ; 30 :
30822: LD_ADDR_OWVAR 42
30826: PUSH
30827: LD_INT 5
30829: ST_TO_ADDR
30830: GO 30928
30832: LD_INT 30
30834: DOUBLE
30835: EQUAL
30836: IFTRUE 30840
30838: GO 30851
30840: POP
// bc_type := b_solar_power ; 31 :
30841: LD_ADDR_OWVAR 42
30845: PUSH
30846: LD_INT 27
30848: ST_TO_ADDR
30849: GO 30928
30851: LD_INT 31
30853: DOUBLE
30854: EQUAL
30855: IFTRUE 30859
30857: GO 30870
30859: POP
// bc_type := b_oil_power ; 32 :
30860: LD_ADDR_OWVAR 42
30864: PUSH
30865: LD_INT 26
30867: ST_TO_ADDR
30868: GO 30928
30870: LD_INT 32
30872: DOUBLE
30873: EQUAL
30874: IFTRUE 30878
30876: GO 30889
30878: POP
// bc_type := b_siberite_power ; 33 :
30879: LD_ADDR_OWVAR 42
30883: PUSH
30884: LD_INT 28
30886: ST_TO_ADDR
30887: GO 30928
30889: LD_INT 33
30891: DOUBLE
30892: EQUAL
30893: IFTRUE 30897
30895: GO 30908
30897: POP
// bc_type := b_oil_mine ; 34 :
30898: LD_ADDR_OWVAR 42
30902: PUSH
30903: LD_INT 29
30905: ST_TO_ADDR
30906: GO 30928
30908: LD_INT 34
30910: DOUBLE
30911: EQUAL
30912: IFTRUE 30916
30914: GO 30927
30916: POP
// bc_type := b_siberite_mine ; end ;
30917: LD_ADDR_OWVAR 42
30921: PUSH
30922: LD_INT 30
30924: ST_TO_ADDR
30925: GO 30928
30927: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30928: LD_ADDR_VAR 0 8
30932: PUSH
30933: LD_VAR 0 5
30937: PPUSH
30938: LD_VAR 0 6
30942: PPUSH
30943: LD_VAR 0 3
30947: PPUSH
30948: CALL_OW 47
30952: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30953: LD_OWVAR 42
30957: PUSH
30958: LD_INT 32
30960: PUSH
30961: LD_INT 33
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: IN
30968: IFFALSE 30984
// PlaceWeaponTurret ( b , weapon ) ;
30970: LD_VAR 0 8
30974: PPUSH
30975: LD_VAR 0 4
30979: PPUSH
30980: CALL_OW 431
// end ;
30984: LD_VAR 0 7
30988: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30989: LD_INT 0
30991: PPUSH
30992: PPUSH
30993: PPUSH
30994: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30995: LD_ADDR_VAR 0 4
30999: PUSH
31000: LD_INT 22
31002: PUSH
31003: LD_OWVAR 2
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 2
31014: PUSH
31015: LD_INT 30
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 30
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PPUSH
31044: CALL_OW 69
31048: ST_TO_ADDR
// if not tmp then
31049: LD_VAR 0 4
31053: NOT
31054: IFFALSE 31058
// exit ;
31056: GO 31117
// for i in tmp do
31058: LD_ADDR_VAR 0 2
31062: PUSH
31063: LD_VAR 0 4
31067: PUSH
31068: FOR_IN
31069: IFFALSE 31115
// for j = 1 to 3 do
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: DOUBLE
31077: LD_INT 1
31079: DEC
31080: ST_TO_ADDR
31081: LD_INT 3
31083: PUSH
31084: FOR_TO
31085: IFFALSE 31111
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31087: LD_VAR 0 2
31091: PPUSH
31092: CALL_OW 274
31096: PPUSH
31097: LD_VAR 0 3
31101: PPUSH
31102: LD_INT 99999
31104: PPUSH
31105: CALL_OW 277
31109: GO 31084
31111: POP
31112: POP
31113: GO 31068
31115: POP
31116: POP
// end ;
31117: LD_VAR 0 1
31121: RET
// export function hHackSetLevel10 ; var i , j ; begin
31122: LD_INT 0
31124: PPUSH
31125: PPUSH
31126: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31127: LD_ADDR_VAR 0 2
31131: PUSH
31132: LD_INT 21
31134: PUSH
31135: LD_INT 1
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PPUSH
31142: CALL_OW 69
31146: PUSH
31147: FOR_IN
31148: IFFALSE 31200
// if IsSelected ( i ) then
31150: LD_VAR 0 2
31154: PPUSH
31155: CALL_OW 306
31159: IFFALSE 31198
// begin for j := 1 to 4 do
31161: LD_ADDR_VAR 0 3
31165: PUSH
31166: DOUBLE
31167: LD_INT 1
31169: DEC
31170: ST_TO_ADDR
31171: LD_INT 4
31173: PUSH
31174: FOR_TO
31175: IFFALSE 31196
// SetSkill ( i , j , 10 ) ;
31177: LD_VAR 0 2
31181: PPUSH
31182: LD_VAR 0 3
31186: PPUSH
31187: LD_INT 10
31189: PPUSH
31190: CALL_OW 237
31194: GO 31174
31196: POP
31197: POP
// end ;
31198: GO 31147
31200: POP
31201: POP
// end ;
31202: LD_VAR 0 1
31206: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31207: LD_INT 0
31209: PPUSH
31210: PPUSH
31211: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31212: LD_ADDR_VAR 0 2
31216: PUSH
31217: LD_INT 22
31219: PUSH
31220: LD_OWVAR 2
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 21
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PPUSH
31243: CALL_OW 69
31247: PUSH
31248: FOR_IN
31249: IFFALSE 31290
// begin for j := 1 to 4 do
31251: LD_ADDR_VAR 0 3
31255: PUSH
31256: DOUBLE
31257: LD_INT 1
31259: DEC
31260: ST_TO_ADDR
31261: LD_INT 4
31263: PUSH
31264: FOR_TO
31265: IFFALSE 31286
// SetSkill ( i , j , 10 ) ;
31267: LD_VAR 0 2
31271: PPUSH
31272: LD_VAR 0 3
31276: PPUSH
31277: LD_INT 10
31279: PPUSH
31280: CALL_OW 237
31284: GO 31264
31286: POP
31287: POP
// end ;
31288: GO 31248
31290: POP
31291: POP
// end ;
31292: LD_VAR 0 1
31296: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31297: LD_INT 0
31299: PPUSH
// uc_side := your_side ;
31300: LD_ADDR_OWVAR 20
31304: PUSH
31305: LD_OWVAR 2
31309: ST_TO_ADDR
// uc_nation := nation ;
31310: LD_ADDR_OWVAR 21
31314: PUSH
31315: LD_VAR 0 1
31319: ST_TO_ADDR
// InitHc ;
31320: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31324: LD_INT 0
31326: PPUSH
31327: LD_VAR 0 2
31331: PPUSH
31332: LD_VAR 0 3
31336: PPUSH
31337: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31341: LD_VAR 0 4
31345: PPUSH
31346: LD_VAR 0 5
31350: PPUSH
31351: CALL_OW 428
31355: PUSH
31356: LD_INT 0
31358: EQUAL
31359: IFFALSE 31383
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31361: CALL_OW 44
31365: PPUSH
31366: LD_VAR 0 4
31370: PPUSH
31371: LD_VAR 0 5
31375: PPUSH
31376: LD_INT 1
31378: PPUSH
31379: CALL_OW 48
// end ;
31383: LD_VAR 0 6
31387: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31388: LD_INT 0
31390: PPUSH
31391: PPUSH
// uc_side := your_side ;
31392: LD_ADDR_OWVAR 20
31396: PUSH
31397: LD_OWVAR 2
31401: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31402: LD_VAR 0 1
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: LD_INT 4
31418: PUSH
31419: LD_INT 5
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: IN
31429: IFFALSE 31441
// uc_nation := nation_american else
31431: LD_ADDR_OWVAR 21
31435: PUSH
31436: LD_INT 1
31438: ST_TO_ADDR
31439: GO 31484
// if chassis in [ 11 , 12 , 13 , 14 ] then
31441: LD_VAR 0 1
31445: PUSH
31446: LD_INT 11
31448: PUSH
31449: LD_INT 12
31451: PUSH
31452: LD_INT 13
31454: PUSH
31455: LD_INT 14
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: IN
31464: IFFALSE 31476
// uc_nation := nation_arabian else
31466: LD_ADDR_OWVAR 21
31470: PUSH
31471: LD_INT 2
31473: ST_TO_ADDR
31474: GO 31484
// uc_nation := nation_russian ;
31476: LD_ADDR_OWVAR 21
31480: PUSH
31481: LD_INT 3
31483: ST_TO_ADDR
// vc_chassis := chassis ;
31484: LD_ADDR_OWVAR 37
31488: PUSH
31489: LD_VAR 0 1
31493: ST_TO_ADDR
// vc_engine := engine ;
31494: LD_ADDR_OWVAR 39
31498: PUSH
31499: LD_VAR 0 2
31503: ST_TO_ADDR
// vc_control := control ;
31504: LD_ADDR_OWVAR 38
31508: PUSH
31509: LD_VAR 0 3
31513: ST_TO_ADDR
// vc_weapon := weapon ;
31514: LD_ADDR_OWVAR 40
31518: PUSH
31519: LD_VAR 0 4
31523: ST_TO_ADDR
// un := CreateVehicle ;
31524: LD_ADDR_VAR 0 8
31528: PUSH
31529: CALL_OW 45
31533: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31534: LD_VAR 0 8
31538: PPUSH
31539: LD_INT 0
31541: PPUSH
31542: LD_INT 5
31544: PPUSH
31545: CALL_OW 12
31549: PPUSH
31550: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31554: LD_VAR 0 8
31558: PPUSH
31559: LD_VAR 0 5
31563: PPUSH
31564: LD_VAR 0 6
31568: PPUSH
31569: LD_INT 1
31571: PPUSH
31572: CALL_OW 48
// end ;
31576: LD_VAR 0 7
31580: RET
// export hInvincible ; every 1 do
31581: GO 31583
31583: DISABLE
// hInvincible := [ ] ;
31584: LD_ADDR_EXP 115
31588: PUSH
31589: EMPTY
31590: ST_TO_ADDR
31591: END
// every 10 do var i ;
31592: GO 31594
31594: DISABLE
31595: LD_INT 0
31597: PPUSH
// begin enable ;
31598: ENABLE
// if not hInvincible then
31599: LD_EXP 115
31603: NOT
31604: IFFALSE 31608
// exit ;
31606: GO 31652
// for i in hInvincible do
31608: LD_ADDR_VAR 0 1
31612: PUSH
31613: LD_EXP 115
31617: PUSH
31618: FOR_IN
31619: IFFALSE 31650
// if GetLives ( i ) < 1000 then
31621: LD_VAR 0 1
31625: PPUSH
31626: CALL_OW 256
31630: PUSH
31631: LD_INT 1000
31633: LESS
31634: IFFALSE 31648
// SetLives ( i , 1000 ) ;
31636: LD_VAR 0 1
31640: PPUSH
31641: LD_INT 1000
31643: PPUSH
31644: CALL_OW 234
31648: GO 31618
31650: POP
31651: POP
// end ;
31652: PPOPN 1
31654: END
// export function hHackInvincible ; var i ; begin
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31659: LD_ADDR_VAR 0 2
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: LD_INT 21
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 21
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: PPUSH
31692: CALL_OW 69
31696: PUSH
31697: FOR_IN
31698: IFFALSE 31759
// if IsSelected ( i ) then
31700: LD_VAR 0 2
31704: PPUSH
31705: CALL_OW 306
31709: IFFALSE 31757
// begin if i in hInvincible then
31711: LD_VAR 0 2
31715: PUSH
31716: LD_EXP 115
31720: IN
31721: IFFALSE 31741
// hInvincible := hInvincible diff i else
31723: LD_ADDR_EXP 115
31727: PUSH
31728: LD_EXP 115
31732: PUSH
31733: LD_VAR 0 2
31737: DIFF
31738: ST_TO_ADDR
31739: GO 31757
// hInvincible := hInvincible union i ;
31741: LD_ADDR_EXP 115
31745: PUSH
31746: LD_EXP 115
31750: PUSH
31751: LD_VAR 0 2
31755: UNION
31756: ST_TO_ADDR
// end ;
31757: GO 31697
31759: POP
31760: POP
// end ;
31761: LD_VAR 0 1
31765: RET
// export function hHackInvisible ; var i , j ; begin
31766: LD_INT 0
31768: PPUSH
31769: PPUSH
31770: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31771: LD_ADDR_VAR 0 2
31775: PUSH
31776: LD_INT 21
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PPUSH
31786: CALL_OW 69
31790: PUSH
31791: FOR_IN
31792: IFFALSE 31816
// if IsSelected ( i ) then
31794: LD_VAR 0 2
31798: PPUSH
31799: CALL_OW 306
31803: IFFALSE 31814
// ComForceInvisible ( i ) ;
31805: LD_VAR 0 2
31809: PPUSH
31810: CALL_OW 496
31814: GO 31791
31816: POP
31817: POP
// end ;
31818: LD_VAR 0 1
31822: RET
// export function hHackChangeYourSide ; begin
31823: LD_INT 0
31825: PPUSH
// if your_side = 8 then
31826: LD_OWVAR 2
31830: PUSH
31831: LD_INT 8
31833: EQUAL
31834: IFFALSE 31846
// your_side := 0 else
31836: LD_ADDR_OWVAR 2
31840: PUSH
31841: LD_INT 0
31843: ST_TO_ADDR
31844: GO 31860
// your_side := your_side + 1 ;
31846: LD_ADDR_OWVAR 2
31850: PUSH
31851: LD_OWVAR 2
31855: PUSH
31856: LD_INT 1
31858: PLUS
31859: ST_TO_ADDR
// end ;
31860: LD_VAR 0 1
31864: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31865: LD_INT 0
31867: PPUSH
31868: PPUSH
31869: PPUSH
// for i in all_units do
31870: LD_ADDR_VAR 0 2
31874: PUSH
31875: LD_OWVAR 3
31879: PUSH
31880: FOR_IN
31881: IFFALSE 31959
// if IsSelected ( i ) then
31883: LD_VAR 0 2
31887: PPUSH
31888: CALL_OW 306
31892: IFFALSE 31957
// begin j := GetSide ( i ) ;
31894: LD_ADDR_VAR 0 3
31898: PUSH
31899: LD_VAR 0 2
31903: PPUSH
31904: CALL_OW 255
31908: ST_TO_ADDR
// if j = 8 then
31909: LD_VAR 0 3
31913: PUSH
31914: LD_INT 8
31916: EQUAL
31917: IFFALSE 31929
// j := 0 else
31919: LD_ADDR_VAR 0 3
31923: PUSH
31924: LD_INT 0
31926: ST_TO_ADDR
31927: GO 31943
// j := j + 1 ;
31929: LD_ADDR_VAR 0 3
31933: PUSH
31934: LD_VAR 0 3
31938: PUSH
31939: LD_INT 1
31941: PLUS
31942: ST_TO_ADDR
// SetSide ( i , j ) ;
31943: LD_VAR 0 2
31947: PPUSH
31948: LD_VAR 0 3
31952: PPUSH
31953: CALL_OW 235
// end ;
31957: GO 31880
31959: POP
31960: POP
// end ;
31961: LD_VAR 0 1
31965: RET
// export function hHackFog ; begin
31966: LD_INT 0
31968: PPUSH
// FogOff ( true ) ;
31969: LD_INT 1
31971: PPUSH
31972: CALL_OW 344
// end ;
31976: LD_VAR 0 1
31980: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31981: LD_INT 0
31983: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31984: LD_VAR 0 1
31988: PPUSH
31989: LD_VAR 0 2
31993: PPUSH
31994: LD_VAR 0 3
31998: PPUSH
31999: LD_INT 1
32001: PPUSH
32002: LD_INT 1
32004: PPUSH
32005: CALL_OW 483
// CenterOnXY ( x , y ) ;
32009: LD_VAR 0 2
32013: PPUSH
32014: LD_VAR 0 3
32018: PPUSH
32019: CALL_OW 84
// end ; end_of_file
32023: LD_VAR 0 4
32027: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32028: LD_INT 0
32030: PPUSH
32031: PPUSH
32032: PPUSH
32033: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32034: LD_VAR 0 1
32038: PPUSH
32039: CALL_OW 264
32043: PUSH
32044: LD_EXP 47
32048: EQUAL
32049: IFFALSE 32121
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32051: LD_INT 68
32053: PPUSH
32054: LD_VAR 0 1
32058: PPUSH
32059: CALL_OW 255
32063: PPUSH
32064: CALL_OW 321
32068: PUSH
32069: LD_INT 2
32071: EQUAL
32072: IFFALSE 32084
// eff := 70 else
32074: LD_ADDR_VAR 0 4
32078: PUSH
32079: LD_INT 70
32081: ST_TO_ADDR
32082: GO 32092
// eff := 30 ;
32084: LD_ADDR_VAR 0 4
32088: PUSH
32089: LD_INT 30
32091: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32092: LD_VAR 0 1
32096: PPUSH
32097: CALL_OW 250
32101: PPUSH
32102: LD_VAR 0 1
32106: PPUSH
32107: CALL_OW 251
32111: PPUSH
32112: LD_VAR 0 4
32116: PPUSH
32117: CALL_OW 495
// end ; end ;
32121: LD_VAR 0 2
32125: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32126: LD_INT 0
32128: PPUSH
// end ;
32129: LD_VAR 0 4
32133: RET
// export function SOS_Command ( cmd ) ; begin
32134: LD_INT 0
32136: PPUSH
// end ;
32137: LD_VAR 0 2
32141: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32142: LD_INT 0
32144: PPUSH
// if cmd = 121 then
32145: LD_VAR 0 1
32149: PUSH
32150: LD_INT 121
32152: EQUAL
32153: IFFALSE 32155
// end ;
32155: LD_VAR 0 6
32159: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32160: LD_INT 0
32162: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32163: LD_VAR 0 1
32167: PUSH
32168: LD_INT 250
32170: EQUAL
32171: PUSH
32172: LD_VAR 0 2
32176: PPUSH
32177: CALL_OW 264
32181: PUSH
32182: LD_EXP 50
32186: EQUAL
32187: AND
32188: IFFALSE 32209
// MinerPlaceMine ( unit , x , y ) ;
32190: LD_VAR 0 2
32194: PPUSH
32195: LD_VAR 0 4
32199: PPUSH
32200: LD_VAR 0 5
32204: PPUSH
32205: CALL 34558 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32209: LD_VAR 0 1
32213: PUSH
32214: LD_INT 251
32216: EQUAL
32217: PUSH
32218: LD_VAR 0 2
32222: PPUSH
32223: CALL_OW 264
32227: PUSH
32228: LD_EXP 50
32232: EQUAL
32233: AND
32234: IFFALSE 32255
// MinerDetonateMine ( unit , x , y ) ;
32236: LD_VAR 0 2
32240: PPUSH
32241: LD_VAR 0 4
32245: PPUSH
32246: LD_VAR 0 5
32250: PPUSH
32251: CALL 34835 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32255: LD_VAR 0 1
32259: PUSH
32260: LD_INT 252
32262: EQUAL
32263: PUSH
32264: LD_VAR 0 2
32268: PPUSH
32269: CALL_OW 264
32273: PUSH
32274: LD_EXP 50
32278: EQUAL
32279: AND
32280: IFFALSE 32301
// MinerCreateMinefield ( unit , x , y ) ;
32282: LD_VAR 0 2
32286: PPUSH
32287: LD_VAR 0 4
32291: PPUSH
32292: LD_VAR 0 5
32296: PPUSH
32297: CALL 35252 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32301: LD_VAR 0 1
32305: PUSH
32306: LD_INT 253
32308: EQUAL
32309: PUSH
32310: LD_VAR 0 2
32314: PPUSH
32315: CALL_OW 257
32319: PUSH
32320: LD_INT 5
32322: EQUAL
32323: AND
32324: IFFALSE 32345
// ComBinocular ( unit , x , y ) ;
32326: LD_VAR 0 2
32330: PPUSH
32331: LD_VAR 0 4
32335: PPUSH
32336: LD_VAR 0 5
32340: PPUSH
32341: CALL 35623 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32345: LD_VAR 0 1
32349: PUSH
32350: LD_INT 254
32352: EQUAL
32353: PUSH
32354: LD_VAR 0 2
32358: PPUSH
32359: CALL_OW 264
32363: PUSH
32364: LD_EXP 45
32368: EQUAL
32369: AND
32370: PUSH
32371: LD_VAR 0 3
32375: PPUSH
32376: CALL_OW 263
32380: PUSH
32381: LD_INT 3
32383: EQUAL
32384: AND
32385: IFFALSE 32401
// HackDestroyVehicle ( unit , selectedUnit ) ;
32387: LD_VAR 0 2
32391: PPUSH
32392: LD_VAR 0 3
32396: PPUSH
32397: CALL 33918 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32401: LD_VAR 0 1
32405: PUSH
32406: LD_INT 255
32408: EQUAL
32409: PUSH
32410: LD_VAR 0 2
32414: PPUSH
32415: CALL_OW 264
32419: PUSH
32420: LD_INT 14
32422: PUSH
32423: LD_INT 53
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: IN
32430: AND
32431: PUSH
32432: LD_VAR 0 4
32436: PPUSH
32437: LD_VAR 0 5
32441: PPUSH
32442: CALL_OW 488
32446: AND
32447: IFFALSE 32471
// CutTreeXYR ( unit , x , y , 12 ) ;
32449: LD_VAR 0 2
32453: PPUSH
32454: LD_VAR 0 4
32458: PPUSH
32459: LD_VAR 0 5
32463: PPUSH
32464: LD_INT 12
32466: PPUSH
32467: CALL 32484 0 4
// end ;
32471: LD_VAR 0 6
32475: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32476: LD_INT 0
32478: PPUSH
// end ;
32479: LD_VAR 0 4
32483: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32484: LD_INT 0
32486: PPUSH
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32495: LD_VAR 0 1
32499: NOT
32500: PUSH
32501: LD_VAR 0 2
32505: PPUSH
32506: LD_VAR 0 3
32510: PPUSH
32511: CALL_OW 488
32515: NOT
32516: OR
32517: PUSH
32518: LD_VAR 0 4
32522: NOT
32523: OR
32524: IFFALSE 32528
// exit ;
32526: GO 32868
// list := [ ] ;
32528: LD_ADDR_VAR 0 13
32532: PUSH
32533: EMPTY
32534: ST_TO_ADDR
// if x - r < 0 then
32535: LD_VAR 0 2
32539: PUSH
32540: LD_VAR 0 4
32544: MINUS
32545: PUSH
32546: LD_INT 0
32548: LESS
32549: IFFALSE 32561
// min_x := 0 else
32551: LD_ADDR_VAR 0 7
32555: PUSH
32556: LD_INT 0
32558: ST_TO_ADDR
32559: GO 32577
// min_x := x - r ;
32561: LD_ADDR_VAR 0 7
32565: PUSH
32566: LD_VAR 0 2
32570: PUSH
32571: LD_VAR 0 4
32575: MINUS
32576: ST_TO_ADDR
// if y - r < 0 then
32577: LD_VAR 0 3
32581: PUSH
32582: LD_VAR 0 4
32586: MINUS
32587: PUSH
32588: LD_INT 0
32590: LESS
32591: IFFALSE 32603
// min_y := 0 else
32593: LD_ADDR_VAR 0 8
32597: PUSH
32598: LD_INT 0
32600: ST_TO_ADDR
32601: GO 32619
// min_y := y - r ;
32603: LD_ADDR_VAR 0 8
32607: PUSH
32608: LD_VAR 0 3
32612: PUSH
32613: LD_VAR 0 4
32617: MINUS
32618: ST_TO_ADDR
// max_x := x + r ;
32619: LD_ADDR_VAR 0 9
32623: PUSH
32624: LD_VAR 0 2
32628: PUSH
32629: LD_VAR 0 4
32633: PLUS
32634: ST_TO_ADDR
// max_y := y + r ;
32635: LD_ADDR_VAR 0 10
32639: PUSH
32640: LD_VAR 0 3
32644: PUSH
32645: LD_VAR 0 4
32649: PLUS
32650: ST_TO_ADDR
// for _x = min_x to max_x do
32651: LD_ADDR_VAR 0 11
32655: PUSH
32656: DOUBLE
32657: LD_VAR 0 7
32661: DEC
32662: ST_TO_ADDR
32663: LD_VAR 0 9
32667: PUSH
32668: FOR_TO
32669: IFFALSE 32786
// for _y = min_y to max_y do
32671: LD_ADDR_VAR 0 12
32675: PUSH
32676: DOUBLE
32677: LD_VAR 0 8
32681: DEC
32682: ST_TO_ADDR
32683: LD_VAR 0 10
32687: PUSH
32688: FOR_TO
32689: IFFALSE 32782
// begin if not ValidHex ( _x , _y ) then
32691: LD_VAR 0 11
32695: PPUSH
32696: LD_VAR 0 12
32700: PPUSH
32701: CALL_OW 488
32705: NOT
32706: IFFALSE 32710
// continue ;
32708: GO 32688
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32710: LD_VAR 0 11
32714: PPUSH
32715: LD_VAR 0 12
32719: PPUSH
32720: CALL_OW 351
32724: PUSH
32725: LD_VAR 0 11
32729: PPUSH
32730: LD_VAR 0 12
32734: PPUSH
32735: CALL_OW 554
32739: AND
32740: IFFALSE 32780
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32742: LD_ADDR_VAR 0 13
32746: PUSH
32747: LD_VAR 0 13
32751: PPUSH
32752: LD_VAR 0 13
32756: PUSH
32757: LD_INT 1
32759: PLUS
32760: PPUSH
32761: LD_VAR 0 11
32765: PUSH
32766: LD_VAR 0 12
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PPUSH
32775: CALL_OW 2
32779: ST_TO_ADDR
// end ;
32780: GO 32688
32782: POP
32783: POP
32784: GO 32668
32786: POP
32787: POP
// if not list then
32788: LD_VAR 0 13
32792: NOT
32793: IFFALSE 32797
// exit ;
32795: GO 32868
// for i in list do
32797: LD_ADDR_VAR 0 6
32801: PUSH
32802: LD_VAR 0 13
32806: PUSH
32807: FOR_IN
32808: IFFALSE 32866
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32810: LD_VAR 0 1
32814: PPUSH
32815: LD_STRING M
32817: PUSH
32818: LD_VAR 0 6
32822: PUSH
32823: LD_INT 1
32825: ARRAY
32826: PUSH
32827: LD_VAR 0 6
32831: PUSH
32832: LD_INT 2
32834: ARRAY
32835: PUSH
32836: LD_INT 0
32838: PUSH
32839: LD_INT 0
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: PPUSH
32860: CALL_OW 447
32864: GO 32807
32866: POP
32867: POP
// end ;
32868: LD_VAR 0 5
32872: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32873: LD_EXP 118
32877: NOT
32878: IFFALSE 32928
32880: GO 32882
32882: DISABLE
// begin initHack := true ;
32883: LD_ADDR_EXP 118
32887: PUSH
32888: LD_INT 1
32890: ST_TO_ADDR
// hackTanks := [ ] ;
32891: LD_ADDR_EXP 119
32895: PUSH
32896: EMPTY
32897: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32898: LD_ADDR_EXP 120
32902: PUSH
32903: EMPTY
32904: ST_TO_ADDR
// hackLimit := 3 ;
32905: LD_ADDR_EXP 121
32909: PUSH
32910: LD_INT 3
32912: ST_TO_ADDR
// hackDist := 12 ;
32913: LD_ADDR_EXP 122
32917: PUSH
32918: LD_INT 12
32920: ST_TO_ADDR
// hackCounter := [ ] ;
32921: LD_ADDR_EXP 123
32925: PUSH
32926: EMPTY
32927: ST_TO_ADDR
// end ;
32928: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32929: LD_EXP 118
32933: PUSH
32934: LD_INT 34
32936: PUSH
32937: LD_EXP 45
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PPUSH
32946: CALL_OW 69
32950: AND
32951: IFFALSE 33206
32953: GO 32955
32955: DISABLE
32956: LD_INT 0
32958: PPUSH
32959: PPUSH
// begin enable ;
32960: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32961: LD_ADDR_VAR 0 1
32965: PUSH
32966: LD_INT 34
32968: PUSH
32969: LD_EXP 45
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PPUSH
32978: CALL_OW 69
32982: PUSH
32983: FOR_IN
32984: IFFALSE 33204
// begin if not i in hackTanks then
32986: LD_VAR 0 1
32990: PUSH
32991: LD_EXP 119
32995: IN
32996: NOT
32997: IFFALSE 33080
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32999: LD_ADDR_EXP 119
33003: PUSH
33004: LD_EXP 119
33008: PPUSH
33009: LD_EXP 119
33013: PUSH
33014: LD_INT 1
33016: PLUS
33017: PPUSH
33018: LD_VAR 0 1
33022: PPUSH
33023: CALL_OW 1
33027: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33028: LD_ADDR_EXP 120
33032: PUSH
33033: LD_EXP 120
33037: PPUSH
33038: LD_EXP 120
33042: PUSH
33043: LD_INT 1
33045: PLUS
33046: PPUSH
33047: EMPTY
33048: PPUSH
33049: CALL_OW 1
33053: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33054: LD_ADDR_EXP 123
33058: PUSH
33059: LD_EXP 123
33063: PPUSH
33064: LD_EXP 123
33068: PUSH
33069: LD_INT 1
33071: PLUS
33072: PPUSH
33073: EMPTY
33074: PPUSH
33075: CALL_OW 1
33079: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33080: LD_VAR 0 1
33084: PPUSH
33085: CALL_OW 302
33089: NOT
33090: IFFALSE 33103
// begin HackUnlinkAll ( i ) ;
33092: LD_VAR 0 1
33096: PPUSH
33097: CALL 33209 0 1
// continue ;
33101: GO 32983
// end ; HackCheckCapturedStatus ( i ) ;
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL 33652 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33112: LD_ADDR_VAR 0 2
33116: PUSH
33117: LD_INT 81
33119: PUSH
33120: LD_VAR 0 1
33124: PPUSH
33125: CALL_OW 255
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 33
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 91
33146: PUSH
33147: LD_VAR 0 1
33151: PUSH
33152: LD_EXP 122
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 50
33164: PUSH
33165: EMPTY
33166: LIST
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: PPUSH
33174: CALL_OW 69
33178: ST_TO_ADDR
// if not tmp then
33179: LD_VAR 0 2
33183: NOT
33184: IFFALSE 33188
// continue ;
33186: GO 32983
// HackLink ( i , tmp ) ;
33188: LD_VAR 0 1
33192: PPUSH
33193: LD_VAR 0 2
33197: PPUSH
33198: CALL 33345 0 2
// end ;
33202: GO 32983
33204: POP
33205: POP
// end ;
33206: PPOPN 2
33208: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33209: LD_INT 0
33211: PPUSH
33212: PPUSH
33213: PPUSH
// if not hack in hackTanks then
33214: LD_VAR 0 1
33218: PUSH
33219: LD_EXP 119
33223: IN
33224: NOT
33225: IFFALSE 33229
// exit ;
33227: GO 33340
// index := GetElementIndex ( hackTanks , hack ) ;
33229: LD_ADDR_VAR 0 4
33233: PUSH
33234: LD_EXP 119
33238: PPUSH
33239: LD_VAR 0 1
33243: PPUSH
33244: CALL 40774 0 2
33248: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33249: LD_EXP 120
33253: PUSH
33254: LD_VAR 0 4
33258: ARRAY
33259: IFFALSE 33340
// begin for i in hackTanksCaptured [ index ] do
33261: LD_ADDR_VAR 0 3
33265: PUSH
33266: LD_EXP 120
33270: PUSH
33271: LD_VAR 0 4
33275: ARRAY
33276: PUSH
33277: FOR_IN
33278: IFFALSE 33304
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33280: LD_VAR 0 3
33284: PUSH
33285: LD_INT 1
33287: ARRAY
33288: PPUSH
33289: LD_VAR 0 3
33293: PUSH
33294: LD_INT 2
33296: ARRAY
33297: PPUSH
33298: CALL_OW 235
33302: GO 33277
33304: POP
33305: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33306: LD_ADDR_EXP 120
33310: PUSH
33311: LD_EXP 120
33315: PPUSH
33316: LD_VAR 0 4
33320: PPUSH
33321: EMPTY
33322: PPUSH
33323: CALL_OW 1
33327: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33328: LD_VAR 0 1
33332: PPUSH
33333: LD_INT 0
33335: PPUSH
33336: CALL_OW 505
// end ; end ;
33340: LD_VAR 0 2
33344: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33345: LD_INT 0
33347: PPUSH
33348: PPUSH
33349: PPUSH
// if not hack in hackTanks or not vehicles then
33350: LD_VAR 0 1
33354: PUSH
33355: LD_EXP 119
33359: IN
33360: NOT
33361: PUSH
33362: LD_VAR 0 2
33366: NOT
33367: OR
33368: IFFALSE 33372
// exit ;
33370: GO 33647
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33372: LD_ADDR_VAR 0 2
33376: PUSH
33377: LD_VAR 0 1
33381: PPUSH
33382: LD_VAR 0 2
33386: PPUSH
33387: LD_INT 1
33389: PPUSH
33390: LD_INT 1
33392: PPUSH
33393: CALL 41424 0 4
33397: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33398: LD_ADDR_VAR 0 5
33402: PUSH
33403: LD_EXP 119
33407: PPUSH
33408: LD_VAR 0 1
33412: PPUSH
33413: CALL 40774 0 2
33417: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33418: LD_EXP 120
33422: PUSH
33423: LD_VAR 0 5
33427: ARRAY
33428: PUSH
33429: LD_EXP 121
33433: LESS
33434: IFFALSE 33623
// begin for i := 1 to vehicles do
33436: LD_ADDR_VAR 0 4
33440: PUSH
33441: DOUBLE
33442: LD_INT 1
33444: DEC
33445: ST_TO_ADDR
33446: LD_VAR 0 2
33450: PUSH
33451: FOR_TO
33452: IFFALSE 33621
// begin if hackTanksCaptured [ index ] = hackLimit then
33454: LD_EXP 120
33458: PUSH
33459: LD_VAR 0 5
33463: ARRAY
33464: PUSH
33465: LD_EXP 121
33469: EQUAL
33470: IFFALSE 33474
// break ;
33472: GO 33621
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33474: LD_ADDR_EXP 123
33478: PUSH
33479: LD_EXP 123
33483: PPUSH
33484: LD_VAR 0 5
33488: PPUSH
33489: LD_EXP 123
33493: PUSH
33494: LD_VAR 0 5
33498: ARRAY
33499: PUSH
33500: LD_INT 1
33502: PLUS
33503: PPUSH
33504: CALL_OW 1
33508: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33509: LD_ADDR_EXP 120
33513: PUSH
33514: LD_EXP 120
33518: PPUSH
33519: LD_VAR 0 5
33523: PUSH
33524: LD_EXP 120
33528: PUSH
33529: LD_VAR 0 5
33533: ARRAY
33534: PUSH
33535: LD_INT 1
33537: PLUS
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PPUSH
33543: LD_VAR 0 2
33547: PUSH
33548: LD_VAR 0 4
33552: ARRAY
33553: PUSH
33554: LD_VAR 0 2
33558: PUSH
33559: LD_VAR 0 4
33563: ARRAY
33564: PPUSH
33565: CALL_OW 255
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PPUSH
33574: CALL 40989 0 3
33578: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33579: LD_VAR 0 2
33583: PUSH
33584: LD_VAR 0 4
33588: ARRAY
33589: PPUSH
33590: LD_VAR 0 1
33594: PPUSH
33595: CALL_OW 255
33599: PPUSH
33600: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33604: LD_VAR 0 2
33608: PUSH
33609: LD_VAR 0 4
33613: ARRAY
33614: PPUSH
33615: CALL_OW 141
// end ;
33619: GO 33451
33621: POP
33622: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33623: LD_VAR 0 1
33627: PPUSH
33628: LD_EXP 120
33632: PUSH
33633: LD_VAR 0 5
33637: ARRAY
33638: PUSH
33639: LD_INT 0
33641: PLUS
33642: PPUSH
33643: CALL_OW 505
// end ;
33647: LD_VAR 0 3
33651: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33652: LD_INT 0
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
// if not hack in hackTanks then
33658: LD_VAR 0 1
33662: PUSH
33663: LD_EXP 119
33667: IN
33668: NOT
33669: IFFALSE 33673
// exit ;
33671: GO 33913
// index := GetElementIndex ( hackTanks , hack ) ;
33673: LD_ADDR_VAR 0 4
33677: PUSH
33678: LD_EXP 119
33682: PPUSH
33683: LD_VAR 0 1
33687: PPUSH
33688: CALL 40774 0 2
33692: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33693: LD_ADDR_VAR 0 3
33697: PUSH
33698: DOUBLE
33699: LD_EXP 120
33703: PUSH
33704: LD_VAR 0 4
33708: ARRAY
33709: INC
33710: ST_TO_ADDR
33711: LD_INT 1
33713: PUSH
33714: FOR_DOWNTO
33715: IFFALSE 33887
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33717: LD_ADDR_VAR 0 5
33721: PUSH
33722: LD_EXP 120
33726: PUSH
33727: LD_VAR 0 4
33731: ARRAY
33732: PUSH
33733: LD_VAR 0 3
33737: ARRAY
33738: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33739: LD_VAR 0 5
33743: PUSH
33744: LD_INT 1
33746: ARRAY
33747: PPUSH
33748: CALL_OW 302
33752: NOT
33753: PUSH
33754: LD_VAR 0 5
33758: PUSH
33759: LD_INT 1
33761: ARRAY
33762: PPUSH
33763: CALL_OW 255
33767: PUSH
33768: LD_VAR 0 1
33772: PPUSH
33773: CALL_OW 255
33777: NONEQUAL
33778: OR
33779: IFFALSE 33885
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33781: LD_VAR 0 5
33785: PUSH
33786: LD_INT 1
33788: ARRAY
33789: PPUSH
33790: CALL_OW 305
33794: PUSH
33795: LD_VAR 0 5
33799: PUSH
33800: LD_INT 1
33802: ARRAY
33803: PPUSH
33804: CALL_OW 255
33808: PUSH
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 255
33818: EQUAL
33819: AND
33820: IFFALSE 33844
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33822: LD_VAR 0 5
33826: PUSH
33827: LD_INT 1
33829: ARRAY
33830: PPUSH
33831: LD_VAR 0 5
33835: PUSH
33836: LD_INT 2
33838: ARRAY
33839: PPUSH
33840: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33844: LD_ADDR_EXP 120
33848: PUSH
33849: LD_EXP 120
33853: PPUSH
33854: LD_VAR 0 4
33858: PPUSH
33859: LD_EXP 120
33863: PUSH
33864: LD_VAR 0 4
33868: ARRAY
33869: PPUSH
33870: LD_VAR 0 3
33874: PPUSH
33875: CALL_OW 3
33879: PPUSH
33880: CALL_OW 1
33884: ST_TO_ADDR
// end ; end ;
33885: GO 33714
33887: POP
33888: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33889: LD_VAR 0 1
33893: PPUSH
33894: LD_EXP 120
33898: PUSH
33899: LD_VAR 0 4
33903: ARRAY
33904: PUSH
33905: LD_INT 0
33907: PLUS
33908: PPUSH
33909: CALL_OW 505
// end ;
33913: LD_VAR 0 2
33917: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33918: LD_INT 0
33920: PPUSH
33921: PPUSH
33922: PPUSH
33923: PPUSH
// if not hack in hackTanks then
33924: LD_VAR 0 1
33928: PUSH
33929: LD_EXP 119
33933: IN
33934: NOT
33935: IFFALSE 33939
// exit ;
33937: GO 34024
// index := GetElementIndex ( hackTanks , hack ) ;
33939: LD_ADDR_VAR 0 5
33943: PUSH
33944: LD_EXP 119
33948: PPUSH
33949: LD_VAR 0 1
33953: PPUSH
33954: CALL 40774 0 2
33958: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33959: LD_ADDR_VAR 0 4
33963: PUSH
33964: DOUBLE
33965: LD_INT 1
33967: DEC
33968: ST_TO_ADDR
33969: LD_EXP 120
33973: PUSH
33974: LD_VAR 0 5
33978: ARRAY
33979: PUSH
33980: FOR_TO
33981: IFFALSE 34022
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33983: LD_EXP 120
33987: PUSH
33988: LD_VAR 0 5
33992: ARRAY
33993: PUSH
33994: LD_VAR 0 4
33998: ARRAY
33999: PUSH
34000: LD_INT 1
34002: ARRAY
34003: PUSH
34004: LD_VAR 0 2
34008: EQUAL
34009: IFFALSE 34020
// KillUnit ( vehicle ) ;
34011: LD_VAR 0 2
34015: PPUSH
34016: CALL_OW 66
34020: GO 33980
34022: POP
34023: POP
// end ;
34024: LD_VAR 0 3
34028: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34029: LD_EXP 124
34033: NOT
34034: IFFALSE 34069
34036: GO 34038
34038: DISABLE
// begin initMiner := true ;
34039: LD_ADDR_EXP 124
34043: PUSH
34044: LD_INT 1
34046: ST_TO_ADDR
// minersList := [ ] ;
34047: LD_ADDR_EXP 125
34051: PUSH
34052: EMPTY
34053: ST_TO_ADDR
// minerMinesList := [ ] ;
34054: LD_ADDR_EXP 126
34058: PUSH
34059: EMPTY
34060: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34061: LD_ADDR_EXP 127
34065: PUSH
34066: LD_INT 5
34068: ST_TO_ADDR
// end ;
34069: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34070: LD_EXP 124
34074: PUSH
34075: LD_INT 34
34077: PUSH
34078: LD_EXP 50
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PPUSH
34087: CALL_OW 69
34091: AND
34092: IFFALSE 34555
34094: GO 34096
34096: DISABLE
34097: LD_INT 0
34099: PPUSH
34100: PPUSH
34101: PPUSH
34102: PPUSH
// begin enable ;
34103: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34104: LD_ADDR_VAR 0 1
34108: PUSH
34109: LD_INT 34
34111: PUSH
34112: LD_EXP 50
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PPUSH
34121: CALL_OW 69
34125: PUSH
34126: FOR_IN
34127: IFFALSE 34199
// begin if not i in minersList then
34129: LD_VAR 0 1
34133: PUSH
34134: LD_EXP 125
34138: IN
34139: NOT
34140: IFFALSE 34197
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34142: LD_ADDR_EXP 125
34146: PUSH
34147: LD_EXP 125
34151: PPUSH
34152: LD_EXP 125
34156: PUSH
34157: LD_INT 1
34159: PLUS
34160: PPUSH
34161: LD_VAR 0 1
34165: PPUSH
34166: CALL_OW 1
34170: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34171: LD_ADDR_EXP 126
34175: PUSH
34176: LD_EXP 126
34180: PPUSH
34181: LD_EXP 126
34185: PUSH
34186: LD_INT 1
34188: PLUS
34189: PPUSH
34190: EMPTY
34191: PPUSH
34192: CALL_OW 1
34196: ST_TO_ADDR
// end end ;
34197: GO 34126
34199: POP
34200: POP
// for i := minerMinesList downto 1 do
34201: LD_ADDR_VAR 0 1
34205: PUSH
34206: DOUBLE
34207: LD_EXP 126
34211: INC
34212: ST_TO_ADDR
34213: LD_INT 1
34215: PUSH
34216: FOR_DOWNTO
34217: IFFALSE 34553
// begin if IsLive ( minersList [ i ] ) then
34219: LD_EXP 125
34223: PUSH
34224: LD_VAR 0 1
34228: ARRAY
34229: PPUSH
34230: CALL_OW 300
34234: IFFALSE 34262
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34236: LD_EXP 125
34240: PUSH
34241: LD_VAR 0 1
34245: ARRAY
34246: PPUSH
34247: LD_EXP 126
34251: PUSH
34252: LD_VAR 0 1
34256: ARRAY
34257: PPUSH
34258: CALL_OW 505
// if not minerMinesList [ i ] then
34262: LD_EXP 126
34266: PUSH
34267: LD_VAR 0 1
34271: ARRAY
34272: NOT
34273: IFFALSE 34277
// continue ;
34275: GO 34216
// for j := minerMinesList [ i ] downto 1 do
34277: LD_ADDR_VAR 0 2
34281: PUSH
34282: DOUBLE
34283: LD_EXP 126
34287: PUSH
34288: LD_VAR 0 1
34292: ARRAY
34293: INC
34294: ST_TO_ADDR
34295: LD_INT 1
34297: PUSH
34298: FOR_DOWNTO
34299: IFFALSE 34549
// begin side := GetSide ( minersList [ i ] ) ;
34301: LD_ADDR_VAR 0 3
34305: PUSH
34306: LD_EXP 125
34310: PUSH
34311: LD_VAR 0 1
34315: ARRAY
34316: PPUSH
34317: CALL_OW 255
34321: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34322: LD_ADDR_VAR 0 4
34326: PUSH
34327: LD_EXP 126
34331: PUSH
34332: LD_VAR 0 1
34336: ARRAY
34337: PUSH
34338: LD_VAR 0 2
34342: ARRAY
34343: PUSH
34344: LD_INT 1
34346: ARRAY
34347: PPUSH
34348: LD_EXP 126
34352: PUSH
34353: LD_VAR 0 1
34357: ARRAY
34358: PUSH
34359: LD_VAR 0 2
34363: ARRAY
34364: PUSH
34365: LD_INT 2
34367: ARRAY
34368: PPUSH
34369: CALL_OW 428
34373: ST_TO_ADDR
// if not tmp then
34374: LD_VAR 0 4
34378: NOT
34379: IFFALSE 34383
// continue ;
34381: GO 34298
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34383: LD_VAR 0 4
34387: PUSH
34388: LD_INT 81
34390: PUSH
34391: LD_VAR 0 3
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PPUSH
34400: CALL_OW 69
34404: IN
34405: PUSH
34406: LD_EXP 126
34410: PUSH
34411: LD_VAR 0 1
34415: ARRAY
34416: PUSH
34417: LD_VAR 0 2
34421: ARRAY
34422: PUSH
34423: LD_INT 1
34425: ARRAY
34426: PPUSH
34427: LD_EXP 126
34431: PUSH
34432: LD_VAR 0 1
34436: ARRAY
34437: PUSH
34438: LD_VAR 0 2
34442: ARRAY
34443: PUSH
34444: LD_INT 2
34446: ARRAY
34447: PPUSH
34448: CALL_OW 458
34452: AND
34453: IFFALSE 34547
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34455: LD_EXP 126
34459: PUSH
34460: LD_VAR 0 1
34464: ARRAY
34465: PUSH
34466: LD_VAR 0 2
34470: ARRAY
34471: PUSH
34472: LD_INT 1
34474: ARRAY
34475: PPUSH
34476: LD_EXP 126
34480: PUSH
34481: LD_VAR 0 1
34485: ARRAY
34486: PUSH
34487: LD_VAR 0 2
34491: ARRAY
34492: PUSH
34493: LD_INT 2
34495: ARRAY
34496: PPUSH
34497: LD_VAR 0 3
34501: PPUSH
34502: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34506: LD_ADDR_EXP 126
34510: PUSH
34511: LD_EXP 126
34515: PPUSH
34516: LD_VAR 0 1
34520: PPUSH
34521: LD_EXP 126
34525: PUSH
34526: LD_VAR 0 1
34530: ARRAY
34531: PPUSH
34532: LD_VAR 0 2
34536: PPUSH
34537: CALL_OW 3
34541: PPUSH
34542: CALL_OW 1
34546: ST_TO_ADDR
// end ; end ;
34547: GO 34298
34549: POP
34550: POP
// end ;
34551: GO 34216
34553: POP
34554: POP
// end ;
34555: PPOPN 4
34557: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34558: LD_INT 0
34560: PPUSH
34561: PPUSH
// result := false ;
34562: LD_ADDR_VAR 0 4
34566: PUSH
34567: LD_INT 0
34569: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34570: LD_VAR 0 1
34574: PPUSH
34575: CALL_OW 264
34579: PUSH
34580: LD_EXP 50
34584: EQUAL
34585: NOT
34586: IFFALSE 34590
// exit ;
34588: GO 34830
// index := GetElementIndex ( minersList , unit ) ;
34590: LD_ADDR_VAR 0 5
34594: PUSH
34595: LD_EXP 125
34599: PPUSH
34600: LD_VAR 0 1
34604: PPUSH
34605: CALL 40774 0 2
34609: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34610: LD_EXP 126
34614: PUSH
34615: LD_VAR 0 5
34619: ARRAY
34620: PUSH
34621: LD_EXP 127
34625: GREATEREQUAL
34626: IFFALSE 34630
// exit ;
34628: GO 34830
// ComMoveXY ( unit , x , y ) ;
34630: LD_VAR 0 1
34634: PPUSH
34635: LD_VAR 0 2
34639: PPUSH
34640: LD_VAR 0 3
34644: PPUSH
34645: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34649: LD_INT 35
34651: PPUSH
34652: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34656: LD_VAR 0 1
34660: PPUSH
34661: LD_VAR 0 2
34665: PPUSH
34666: LD_VAR 0 3
34670: PPUSH
34671: CALL 71171 0 3
34675: NOT
34676: PUSH
34677: LD_VAR 0 1
34681: PPUSH
34682: CALL_OW 314
34686: AND
34687: IFFALSE 34691
// exit ;
34689: GO 34830
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34691: LD_VAR 0 2
34695: PPUSH
34696: LD_VAR 0 3
34700: PPUSH
34701: CALL_OW 428
34705: PUSH
34706: LD_VAR 0 1
34710: EQUAL
34711: PUSH
34712: LD_VAR 0 1
34716: PPUSH
34717: CALL_OW 314
34721: NOT
34722: AND
34723: IFFALSE 34649
// PlaySoundXY ( x , y , PlantMine ) ;
34725: LD_VAR 0 2
34729: PPUSH
34730: LD_VAR 0 3
34734: PPUSH
34735: LD_STRING PlantMine
34737: PPUSH
34738: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34742: LD_VAR 0 2
34746: PPUSH
34747: LD_VAR 0 3
34751: PPUSH
34752: LD_VAR 0 1
34756: PPUSH
34757: CALL_OW 255
34761: PPUSH
34762: LD_INT 0
34764: PPUSH
34765: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34769: LD_ADDR_EXP 126
34773: PUSH
34774: LD_EXP 126
34778: PPUSH
34779: LD_VAR 0 5
34783: PUSH
34784: LD_EXP 126
34788: PUSH
34789: LD_VAR 0 5
34793: ARRAY
34794: PUSH
34795: LD_INT 1
34797: PLUS
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PPUSH
34803: LD_VAR 0 2
34807: PUSH
34808: LD_VAR 0 3
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PPUSH
34817: CALL 40989 0 3
34821: ST_TO_ADDR
// result := true ;
34822: LD_ADDR_VAR 0 4
34826: PUSH
34827: LD_INT 1
34829: ST_TO_ADDR
// end ;
34830: LD_VAR 0 4
34834: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34835: LD_INT 0
34837: PPUSH
34838: PPUSH
34839: PPUSH
// if not unit in minersList then
34840: LD_VAR 0 1
34844: PUSH
34845: LD_EXP 125
34849: IN
34850: NOT
34851: IFFALSE 34855
// exit ;
34853: GO 35247
// index := GetElementIndex ( minersList , unit ) ;
34855: LD_ADDR_VAR 0 6
34859: PUSH
34860: LD_EXP 125
34864: PPUSH
34865: LD_VAR 0 1
34869: PPUSH
34870: CALL 40774 0 2
34874: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34875: LD_ADDR_VAR 0 5
34879: PUSH
34880: DOUBLE
34881: LD_EXP 126
34885: PUSH
34886: LD_VAR 0 6
34890: ARRAY
34891: INC
34892: ST_TO_ADDR
34893: LD_INT 1
34895: PUSH
34896: FOR_DOWNTO
34897: IFFALSE 35058
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34899: LD_EXP 126
34903: PUSH
34904: LD_VAR 0 6
34908: ARRAY
34909: PUSH
34910: LD_VAR 0 5
34914: ARRAY
34915: PUSH
34916: LD_INT 1
34918: ARRAY
34919: PUSH
34920: LD_VAR 0 2
34924: EQUAL
34925: PUSH
34926: LD_EXP 126
34930: PUSH
34931: LD_VAR 0 6
34935: ARRAY
34936: PUSH
34937: LD_VAR 0 5
34941: ARRAY
34942: PUSH
34943: LD_INT 2
34945: ARRAY
34946: PUSH
34947: LD_VAR 0 3
34951: EQUAL
34952: AND
34953: IFFALSE 35056
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34955: LD_EXP 126
34959: PUSH
34960: LD_VAR 0 6
34964: ARRAY
34965: PUSH
34966: LD_VAR 0 5
34970: ARRAY
34971: PUSH
34972: LD_INT 1
34974: ARRAY
34975: PPUSH
34976: LD_EXP 126
34980: PUSH
34981: LD_VAR 0 6
34985: ARRAY
34986: PUSH
34987: LD_VAR 0 5
34991: ARRAY
34992: PUSH
34993: LD_INT 2
34995: ARRAY
34996: PPUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 255
35006: PPUSH
35007: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35011: LD_ADDR_EXP 126
35015: PUSH
35016: LD_EXP 126
35020: PPUSH
35021: LD_VAR 0 6
35025: PPUSH
35026: LD_EXP 126
35030: PUSH
35031: LD_VAR 0 6
35035: ARRAY
35036: PPUSH
35037: LD_VAR 0 5
35041: PPUSH
35042: CALL_OW 3
35046: PPUSH
35047: CALL_OW 1
35051: ST_TO_ADDR
// exit ;
35052: POP
35053: POP
35054: GO 35247
// end ; end ;
35056: GO 34896
35058: POP
35059: POP
// for i := minerMinesList [ index ] downto 1 do
35060: LD_ADDR_VAR 0 5
35064: PUSH
35065: DOUBLE
35066: LD_EXP 126
35070: PUSH
35071: LD_VAR 0 6
35075: ARRAY
35076: INC
35077: ST_TO_ADDR
35078: LD_INT 1
35080: PUSH
35081: FOR_DOWNTO
35082: IFFALSE 35245
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35084: LD_EXP 126
35088: PUSH
35089: LD_VAR 0 6
35093: ARRAY
35094: PUSH
35095: LD_VAR 0 5
35099: ARRAY
35100: PUSH
35101: LD_INT 1
35103: ARRAY
35104: PPUSH
35105: LD_EXP 126
35109: PUSH
35110: LD_VAR 0 6
35114: ARRAY
35115: PUSH
35116: LD_VAR 0 5
35120: ARRAY
35121: PUSH
35122: LD_INT 2
35124: ARRAY
35125: PPUSH
35126: LD_VAR 0 2
35130: PPUSH
35131: LD_VAR 0 3
35135: PPUSH
35136: CALL_OW 298
35140: PUSH
35141: LD_INT 6
35143: LESS
35144: IFFALSE 35243
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35146: LD_EXP 126
35150: PUSH
35151: LD_VAR 0 6
35155: ARRAY
35156: PUSH
35157: LD_VAR 0 5
35161: ARRAY
35162: PUSH
35163: LD_INT 1
35165: ARRAY
35166: PPUSH
35167: LD_EXP 126
35171: PUSH
35172: LD_VAR 0 6
35176: ARRAY
35177: PUSH
35178: LD_VAR 0 5
35182: ARRAY
35183: PUSH
35184: LD_INT 2
35186: ARRAY
35187: PPUSH
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 255
35197: PPUSH
35198: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35202: LD_ADDR_EXP 126
35206: PUSH
35207: LD_EXP 126
35211: PPUSH
35212: LD_VAR 0 6
35216: PPUSH
35217: LD_EXP 126
35221: PUSH
35222: LD_VAR 0 6
35226: ARRAY
35227: PPUSH
35228: LD_VAR 0 5
35232: PPUSH
35233: CALL_OW 3
35237: PPUSH
35238: CALL_OW 1
35242: ST_TO_ADDR
// end ; end ;
35243: GO 35081
35245: POP
35246: POP
// end ;
35247: LD_VAR 0 4
35251: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35252: LD_INT 0
35254: PPUSH
35255: PPUSH
35256: PPUSH
35257: PPUSH
35258: PPUSH
35259: PPUSH
35260: PPUSH
35261: PPUSH
35262: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35263: LD_VAR 0 1
35267: PPUSH
35268: CALL_OW 264
35272: PUSH
35273: LD_EXP 50
35277: EQUAL
35278: NOT
35279: PUSH
35280: LD_VAR 0 1
35284: PUSH
35285: LD_EXP 125
35289: IN
35290: NOT
35291: OR
35292: IFFALSE 35296
// exit ;
35294: GO 35618
// index := GetElementIndex ( minersList , unit ) ;
35296: LD_ADDR_VAR 0 6
35300: PUSH
35301: LD_EXP 125
35305: PPUSH
35306: LD_VAR 0 1
35310: PPUSH
35311: CALL 40774 0 2
35315: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35316: LD_ADDR_VAR 0 8
35320: PUSH
35321: LD_EXP 127
35325: PUSH
35326: LD_EXP 126
35330: PUSH
35331: LD_VAR 0 6
35335: ARRAY
35336: MINUS
35337: ST_TO_ADDR
// if not minesFreeAmount then
35338: LD_VAR 0 8
35342: NOT
35343: IFFALSE 35347
// exit ;
35345: GO 35618
// tmp := [ ] ;
35347: LD_ADDR_VAR 0 7
35351: PUSH
35352: EMPTY
35353: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35354: LD_ADDR_VAR 0 5
35358: PUSH
35359: DOUBLE
35360: LD_INT 1
35362: DEC
35363: ST_TO_ADDR
35364: LD_VAR 0 8
35368: PUSH
35369: FOR_TO
35370: IFFALSE 35565
// begin _d := rand ( 0 , 5 ) ;
35372: LD_ADDR_VAR 0 11
35376: PUSH
35377: LD_INT 0
35379: PPUSH
35380: LD_INT 5
35382: PPUSH
35383: CALL_OW 12
35387: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35388: LD_ADDR_VAR 0 12
35392: PUSH
35393: LD_INT 2
35395: PPUSH
35396: LD_INT 6
35398: PPUSH
35399: CALL_OW 12
35403: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35404: LD_ADDR_VAR 0 9
35408: PUSH
35409: LD_VAR 0 2
35413: PPUSH
35414: LD_VAR 0 11
35418: PPUSH
35419: LD_VAR 0 12
35423: PPUSH
35424: CALL_OW 272
35428: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35429: LD_ADDR_VAR 0 10
35433: PUSH
35434: LD_VAR 0 3
35438: PPUSH
35439: LD_VAR 0 11
35443: PPUSH
35444: LD_VAR 0 12
35448: PPUSH
35449: CALL_OW 273
35453: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35454: LD_VAR 0 9
35458: PPUSH
35459: LD_VAR 0 10
35463: PPUSH
35464: CALL_OW 488
35468: PUSH
35469: LD_VAR 0 9
35473: PUSH
35474: LD_VAR 0 10
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_VAR 0 7
35487: IN
35488: NOT
35489: AND
35490: PUSH
35491: LD_VAR 0 9
35495: PPUSH
35496: LD_VAR 0 10
35500: PPUSH
35501: CALL_OW 458
35505: NOT
35506: AND
35507: IFFALSE 35549
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35509: LD_ADDR_VAR 0 7
35513: PUSH
35514: LD_VAR 0 7
35518: PPUSH
35519: LD_VAR 0 7
35523: PUSH
35524: LD_INT 1
35526: PLUS
35527: PPUSH
35528: LD_VAR 0 9
35532: PUSH
35533: LD_VAR 0 10
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PPUSH
35542: CALL_OW 1
35546: ST_TO_ADDR
35547: GO 35563
// i := i - 1 ;
35549: LD_ADDR_VAR 0 5
35553: PUSH
35554: LD_VAR 0 5
35558: PUSH
35559: LD_INT 1
35561: MINUS
35562: ST_TO_ADDR
// end ;
35563: GO 35369
35565: POP
35566: POP
// for i in tmp do
35567: LD_ADDR_VAR 0 5
35571: PUSH
35572: LD_VAR 0 7
35576: PUSH
35577: FOR_IN
35578: IFFALSE 35616
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35580: LD_VAR 0 1
35584: PPUSH
35585: LD_VAR 0 5
35589: PUSH
35590: LD_INT 1
35592: ARRAY
35593: PPUSH
35594: LD_VAR 0 5
35598: PUSH
35599: LD_INT 2
35601: ARRAY
35602: PPUSH
35603: CALL 34558 0 3
35607: NOT
35608: IFFALSE 35614
// exit ;
35610: POP
35611: POP
35612: GO 35618
35614: GO 35577
35616: POP
35617: POP
// end ;
35618: LD_VAR 0 4
35622: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35623: LD_INT 0
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
// if not GetClass ( unit ) = class_sniper then
35632: LD_VAR 0 1
35636: PPUSH
35637: CALL_OW 257
35641: PUSH
35642: LD_INT 5
35644: EQUAL
35645: NOT
35646: IFFALSE 35650
// exit ;
35648: GO 36038
// dist := 8 ;
35650: LD_ADDR_VAR 0 5
35654: PUSH
35655: LD_INT 8
35657: ST_TO_ADDR
// viewRange := 12 ;
35658: LD_ADDR_VAR 0 7
35662: PUSH
35663: LD_INT 12
35665: ST_TO_ADDR
// side := GetSide ( unit ) ;
35666: LD_ADDR_VAR 0 6
35670: PUSH
35671: LD_VAR 0 1
35675: PPUSH
35676: CALL_OW 255
35680: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35681: LD_INT 61
35683: PPUSH
35684: LD_VAR 0 6
35688: PPUSH
35689: CALL_OW 321
35693: PUSH
35694: LD_INT 2
35696: EQUAL
35697: IFFALSE 35707
// viewRange := 16 ;
35699: LD_ADDR_VAR 0 7
35703: PUSH
35704: LD_INT 16
35706: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35707: LD_VAR 0 1
35711: PPUSH
35712: LD_VAR 0 2
35716: PPUSH
35717: LD_VAR 0 3
35721: PPUSH
35722: CALL_OW 297
35726: PUSH
35727: LD_VAR 0 5
35731: GREATER
35732: IFFALSE 35811
// begin ComMoveXY ( unit , x , y ) ;
35734: LD_VAR 0 1
35738: PPUSH
35739: LD_VAR 0 2
35743: PPUSH
35744: LD_VAR 0 3
35748: PPUSH
35749: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35753: LD_INT 35
35755: PPUSH
35756: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35760: LD_VAR 0 1
35764: PPUSH
35765: LD_VAR 0 2
35769: PPUSH
35770: LD_VAR 0 3
35774: PPUSH
35775: CALL 71171 0 3
35779: NOT
35780: IFFALSE 35784
// exit ;
35782: GO 36038
// until GetDistUnitXY ( unit , x , y ) < dist ;
35784: LD_VAR 0 1
35788: PPUSH
35789: LD_VAR 0 2
35793: PPUSH
35794: LD_VAR 0 3
35798: PPUSH
35799: CALL_OW 297
35803: PUSH
35804: LD_VAR 0 5
35808: LESS
35809: IFFALSE 35753
// end ; ComTurnXY ( unit , x , y ) ;
35811: LD_VAR 0 1
35815: PPUSH
35816: LD_VAR 0 2
35820: PPUSH
35821: LD_VAR 0 3
35825: PPUSH
35826: CALL_OW 118
// wait ( 5 ) ;
35830: LD_INT 5
35832: PPUSH
35833: CALL_OW 67
// _d := GetDir ( unit ) ;
35837: LD_ADDR_VAR 0 10
35841: PUSH
35842: LD_VAR 0 1
35846: PPUSH
35847: CALL_OW 254
35851: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35852: LD_ADDR_VAR 0 8
35856: PUSH
35857: LD_VAR 0 1
35861: PPUSH
35862: CALL_OW 250
35866: PPUSH
35867: LD_VAR 0 10
35871: PPUSH
35872: LD_VAR 0 5
35876: PPUSH
35877: CALL_OW 272
35881: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35882: LD_ADDR_VAR 0 9
35886: PUSH
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 251
35896: PPUSH
35897: LD_VAR 0 10
35901: PPUSH
35902: LD_VAR 0 5
35906: PPUSH
35907: CALL_OW 273
35911: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35912: LD_VAR 0 8
35916: PPUSH
35917: LD_VAR 0 9
35921: PPUSH
35922: CALL_OW 488
35926: NOT
35927: IFFALSE 35931
// exit ;
35929: GO 36038
// ComAnimCustom ( unit , 1 ) ;
35931: LD_VAR 0 1
35935: PPUSH
35936: LD_INT 1
35938: PPUSH
35939: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35943: LD_VAR 0 8
35947: PPUSH
35948: LD_VAR 0 9
35952: PPUSH
35953: LD_VAR 0 6
35957: PPUSH
35958: LD_VAR 0 7
35962: PPUSH
35963: CALL_OW 330
// repeat wait ( 1 ) ;
35967: LD_INT 1
35969: PPUSH
35970: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35974: LD_VAR 0 1
35978: PPUSH
35979: CALL_OW 316
35983: PUSH
35984: LD_VAR 0 1
35988: PPUSH
35989: CALL_OW 314
35993: OR
35994: PUSH
35995: LD_VAR 0 1
35999: PPUSH
36000: CALL_OW 302
36004: NOT
36005: OR
36006: PUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 301
36016: OR
36017: IFFALSE 35967
// RemoveSeeing ( _x , _y , side ) ;
36019: LD_VAR 0 8
36023: PPUSH
36024: LD_VAR 0 9
36028: PPUSH
36029: LD_VAR 0 6
36033: PPUSH
36034: CALL_OW 331
// end ; end_of_file
36038: LD_VAR 0 4
36042: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36043: LD_INT 0
36045: PPUSH
36046: PPUSH
// if exist_mode then
36047: LD_VAR 0 2
36051: IFFALSE 36076
// unit := CreateCharacter ( prefix & ident ) else
36053: LD_ADDR_VAR 0 5
36057: PUSH
36058: LD_VAR 0 3
36062: PUSH
36063: LD_VAR 0 1
36067: STR
36068: PPUSH
36069: CALL_OW 34
36073: ST_TO_ADDR
36074: GO 36091
// unit := NewCharacter ( ident ) ;
36076: LD_ADDR_VAR 0 5
36080: PUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL_OW 25
36090: ST_TO_ADDR
// result := unit ;
36091: LD_ADDR_VAR 0 4
36095: PUSH
36096: LD_VAR 0 5
36100: ST_TO_ADDR
// end ;
36101: LD_VAR 0 4
36105: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36106: LD_INT 0
36108: PPUSH
36109: PPUSH
// if not side or not nation then
36110: LD_VAR 0 1
36114: NOT
36115: PUSH
36116: LD_VAR 0 2
36120: NOT
36121: OR
36122: IFFALSE 36126
// exit ;
36124: GO 36890
// case nation of nation_american :
36126: LD_VAR 0 2
36130: PUSH
36131: LD_INT 1
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36139
36137: GO 36353
36139: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36140: LD_ADDR_VAR 0 4
36144: PUSH
36145: LD_INT 35
36147: PUSH
36148: LD_INT 45
36150: PUSH
36151: LD_INT 46
36153: PUSH
36154: LD_INT 47
36156: PUSH
36157: LD_INT 82
36159: PUSH
36160: LD_INT 83
36162: PUSH
36163: LD_INT 84
36165: PUSH
36166: LD_INT 85
36168: PUSH
36169: LD_INT 86
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: LD_INT 6
36180: PUSH
36181: LD_INT 15
36183: PUSH
36184: LD_INT 16
36186: PUSH
36187: LD_INT 7
36189: PUSH
36190: LD_INT 12
36192: PUSH
36193: LD_INT 13
36195: PUSH
36196: LD_INT 10
36198: PUSH
36199: LD_INT 14
36201: PUSH
36202: LD_INT 20
36204: PUSH
36205: LD_INT 21
36207: PUSH
36208: LD_INT 22
36210: PUSH
36211: LD_INT 25
36213: PUSH
36214: LD_INT 32
36216: PUSH
36217: LD_INT 27
36219: PUSH
36220: LD_INT 36
36222: PUSH
36223: LD_INT 69
36225: PUSH
36226: LD_INT 39
36228: PUSH
36229: LD_INT 34
36231: PUSH
36232: LD_INT 40
36234: PUSH
36235: LD_INT 48
36237: PUSH
36238: LD_INT 49
36240: PUSH
36241: LD_INT 50
36243: PUSH
36244: LD_INT 51
36246: PUSH
36247: LD_INT 52
36249: PUSH
36250: LD_INT 53
36252: PUSH
36253: LD_INT 54
36255: PUSH
36256: LD_INT 55
36258: PUSH
36259: LD_INT 56
36261: PUSH
36262: LD_INT 57
36264: PUSH
36265: LD_INT 58
36267: PUSH
36268: LD_INT 59
36270: PUSH
36271: LD_INT 60
36273: PUSH
36274: LD_INT 61
36276: PUSH
36277: LD_INT 62
36279: PUSH
36280: LD_INT 80
36282: PUSH
36283: LD_INT 82
36285: PUSH
36286: LD_INT 83
36288: PUSH
36289: LD_INT 84
36291: PUSH
36292: LD_INT 85
36294: PUSH
36295: LD_INT 86
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: ST_TO_ADDR
36351: GO 36814
36353: LD_INT 2
36355: DOUBLE
36356: EQUAL
36357: IFTRUE 36361
36359: GO 36583
36361: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36362: LD_ADDR_VAR 0 4
36366: PUSH
36367: LD_INT 35
36369: PUSH
36370: LD_INT 45
36372: PUSH
36373: LD_INT 46
36375: PUSH
36376: LD_INT 47
36378: PUSH
36379: LD_INT 82
36381: PUSH
36382: LD_INT 83
36384: PUSH
36385: LD_INT 84
36387: PUSH
36388: LD_INT 85
36390: PUSH
36391: LD_INT 87
36393: PUSH
36394: LD_INT 70
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 11
36402: PUSH
36403: LD_INT 3
36405: PUSH
36406: LD_INT 4
36408: PUSH
36409: LD_INT 5
36411: PUSH
36412: LD_INT 6
36414: PUSH
36415: LD_INT 15
36417: PUSH
36418: LD_INT 18
36420: PUSH
36421: LD_INT 7
36423: PUSH
36424: LD_INT 17
36426: PUSH
36427: LD_INT 8
36429: PUSH
36430: LD_INT 20
36432: PUSH
36433: LD_INT 21
36435: PUSH
36436: LD_INT 22
36438: PUSH
36439: LD_INT 72
36441: PUSH
36442: LD_INT 26
36444: PUSH
36445: LD_INT 69
36447: PUSH
36448: LD_INT 39
36450: PUSH
36451: LD_INT 40
36453: PUSH
36454: LD_INT 41
36456: PUSH
36457: LD_INT 42
36459: PUSH
36460: LD_INT 43
36462: PUSH
36463: LD_INT 48
36465: PUSH
36466: LD_INT 49
36468: PUSH
36469: LD_INT 50
36471: PUSH
36472: LD_INT 51
36474: PUSH
36475: LD_INT 52
36477: PUSH
36478: LD_INT 53
36480: PUSH
36481: LD_INT 54
36483: PUSH
36484: LD_INT 55
36486: PUSH
36487: LD_INT 56
36489: PUSH
36490: LD_INT 60
36492: PUSH
36493: LD_INT 61
36495: PUSH
36496: LD_INT 62
36498: PUSH
36499: LD_INT 66
36501: PUSH
36502: LD_INT 67
36504: PUSH
36505: LD_INT 68
36507: PUSH
36508: LD_INT 81
36510: PUSH
36511: LD_INT 82
36513: PUSH
36514: LD_INT 83
36516: PUSH
36517: LD_INT 84
36519: PUSH
36520: LD_INT 85
36522: PUSH
36523: LD_INT 87
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: ST_TO_ADDR
36581: GO 36814
36583: LD_INT 3
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36591
36589: GO 36813
36591: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36592: LD_ADDR_VAR 0 4
36596: PUSH
36597: LD_INT 46
36599: PUSH
36600: LD_INT 47
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: LD_INT 82
36611: PUSH
36612: LD_INT 83
36614: PUSH
36615: LD_INT 84
36617: PUSH
36618: LD_INT 85
36620: PUSH
36621: LD_INT 86
36623: PUSH
36624: LD_INT 11
36626: PUSH
36627: LD_INT 9
36629: PUSH
36630: LD_INT 20
36632: PUSH
36633: LD_INT 19
36635: PUSH
36636: LD_INT 21
36638: PUSH
36639: LD_INT 24
36641: PUSH
36642: LD_INT 22
36644: PUSH
36645: LD_INT 25
36647: PUSH
36648: LD_INT 28
36650: PUSH
36651: LD_INT 29
36653: PUSH
36654: LD_INT 30
36656: PUSH
36657: LD_INT 31
36659: PUSH
36660: LD_INT 37
36662: PUSH
36663: LD_INT 38
36665: PUSH
36666: LD_INT 32
36668: PUSH
36669: LD_INT 27
36671: PUSH
36672: LD_INT 33
36674: PUSH
36675: LD_INT 69
36677: PUSH
36678: LD_INT 39
36680: PUSH
36681: LD_INT 34
36683: PUSH
36684: LD_INT 40
36686: PUSH
36687: LD_INT 71
36689: PUSH
36690: LD_INT 23
36692: PUSH
36693: LD_INT 44
36695: PUSH
36696: LD_INT 48
36698: PUSH
36699: LD_INT 49
36701: PUSH
36702: LD_INT 50
36704: PUSH
36705: LD_INT 51
36707: PUSH
36708: LD_INT 52
36710: PUSH
36711: LD_INT 53
36713: PUSH
36714: LD_INT 54
36716: PUSH
36717: LD_INT 55
36719: PUSH
36720: LD_INT 56
36722: PUSH
36723: LD_INT 57
36725: PUSH
36726: LD_INT 58
36728: PUSH
36729: LD_INT 59
36731: PUSH
36732: LD_INT 63
36734: PUSH
36735: LD_INT 64
36737: PUSH
36738: LD_INT 65
36740: PUSH
36741: LD_INT 82
36743: PUSH
36744: LD_INT 83
36746: PUSH
36747: LD_INT 84
36749: PUSH
36750: LD_INT 85
36752: PUSH
36753: LD_INT 86
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: ST_TO_ADDR
36811: GO 36814
36813: POP
// if state > - 1 and state < 3 then
36814: LD_VAR 0 3
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: GREATER
36823: PUSH
36824: LD_VAR 0 3
36828: PUSH
36829: LD_INT 3
36831: LESS
36832: AND
36833: IFFALSE 36890
// for i in result do
36835: LD_ADDR_VAR 0 5
36839: PUSH
36840: LD_VAR 0 4
36844: PUSH
36845: FOR_IN
36846: IFFALSE 36888
// if GetTech ( i , side ) <> state then
36848: LD_VAR 0 5
36852: PPUSH
36853: LD_VAR 0 1
36857: PPUSH
36858: CALL_OW 321
36862: PUSH
36863: LD_VAR 0 3
36867: NONEQUAL
36868: IFFALSE 36886
// result := result diff i ;
36870: LD_ADDR_VAR 0 4
36874: PUSH
36875: LD_VAR 0 4
36879: PUSH
36880: LD_VAR 0 5
36884: DIFF
36885: ST_TO_ADDR
36886: GO 36845
36888: POP
36889: POP
// end ;
36890: LD_VAR 0 4
36894: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36895: LD_INT 0
36897: PPUSH
36898: PPUSH
36899: PPUSH
// result := true ;
36900: LD_ADDR_VAR 0 3
36904: PUSH
36905: LD_INT 1
36907: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36908: LD_ADDR_VAR 0 5
36912: PUSH
36913: LD_VAR 0 2
36917: PPUSH
36918: CALL_OW 480
36922: ST_TO_ADDR
// if not tmp then
36923: LD_VAR 0 5
36927: NOT
36928: IFFALSE 36932
// exit ;
36930: GO 36981
// for i in tmp do
36932: LD_ADDR_VAR 0 4
36936: PUSH
36937: LD_VAR 0 5
36941: PUSH
36942: FOR_IN
36943: IFFALSE 36979
// if GetTech ( i , side ) <> state_researched then
36945: LD_VAR 0 4
36949: PPUSH
36950: LD_VAR 0 1
36954: PPUSH
36955: CALL_OW 321
36959: PUSH
36960: LD_INT 2
36962: NONEQUAL
36963: IFFALSE 36977
// begin result := false ;
36965: LD_ADDR_VAR 0 3
36969: PUSH
36970: LD_INT 0
36972: ST_TO_ADDR
// exit ;
36973: POP
36974: POP
36975: GO 36981
// end ;
36977: GO 36942
36979: POP
36980: POP
// end ;
36981: LD_VAR 0 3
36985: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36986: LD_INT 0
36988: PPUSH
36989: PPUSH
36990: PPUSH
36991: PPUSH
36992: PPUSH
36993: PPUSH
36994: PPUSH
36995: PPUSH
36996: PPUSH
36997: PPUSH
36998: PPUSH
36999: PPUSH
37000: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37001: LD_VAR 0 1
37005: NOT
37006: PUSH
37007: LD_VAR 0 1
37011: PPUSH
37012: CALL_OW 257
37016: PUSH
37017: LD_INT 9
37019: NONEQUAL
37020: OR
37021: IFFALSE 37025
// exit ;
37023: GO 37598
// side := GetSide ( unit ) ;
37025: LD_ADDR_VAR 0 9
37029: PUSH
37030: LD_VAR 0 1
37034: PPUSH
37035: CALL_OW 255
37039: ST_TO_ADDR
// tech_space := tech_spacanom ;
37040: LD_ADDR_VAR 0 12
37044: PUSH
37045: LD_INT 29
37047: ST_TO_ADDR
// tech_time := tech_taurad ;
37048: LD_ADDR_VAR 0 13
37052: PUSH
37053: LD_INT 28
37055: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37056: LD_ADDR_VAR 0 11
37060: PUSH
37061: LD_VAR 0 1
37065: PPUSH
37066: CALL_OW 310
37070: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37071: LD_VAR 0 11
37075: PPUSH
37076: CALL_OW 247
37080: PUSH
37081: LD_INT 2
37083: EQUAL
37084: IFFALSE 37088
// exit ;
37086: GO 37598
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37088: LD_ADDR_VAR 0 8
37092: PUSH
37093: LD_INT 81
37095: PUSH
37096: LD_VAR 0 9
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 3
37107: PUSH
37108: LD_INT 21
37110: PUSH
37111: LD_INT 3
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PPUSH
37126: CALL_OW 69
37130: ST_TO_ADDR
// if not tmp then
37131: LD_VAR 0 8
37135: NOT
37136: IFFALSE 37140
// exit ;
37138: GO 37598
// if in_unit then
37140: LD_VAR 0 11
37144: IFFALSE 37168
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37146: LD_ADDR_VAR 0 10
37150: PUSH
37151: LD_VAR 0 8
37155: PPUSH
37156: LD_VAR 0 11
37160: PPUSH
37161: CALL_OW 74
37165: ST_TO_ADDR
37166: GO 37188
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37168: LD_ADDR_VAR 0 10
37172: PUSH
37173: LD_VAR 0 8
37177: PPUSH
37178: LD_VAR 0 1
37182: PPUSH
37183: CALL_OW 74
37187: ST_TO_ADDR
// if not enemy then
37188: LD_VAR 0 10
37192: NOT
37193: IFFALSE 37197
// exit ;
37195: GO 37598
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37197: LD_VAR 0 11
37201: PUSH
37202: LD_VAR 0 11
37206: PPUSH
37207: LD_VAR 0 10
37211: PPUSH
37212: CALL_OW 296
37216: PUSH
37217: LD_INT 13
37219: GREATER
37220: AND
37221: PUSH
37222: LD_VAR 0 1
37226: PPUSH
37227: LD_VAR 0 10
37231: PPUSH
37232: CALL_OW 296
37236: PUSH
37237: LD_INT 12
37239: GREATER
37240: OR
37241: IFFALSE 37245
// exit ;
37243: GO 37598
// missile := [ 1 ] ;
37245: LD_ADDR_VAR 0 14
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: EMPTY
37254: LIST
37255: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37256: LD_VAR 0 9
37260: PPUSH
37261: LD_VAR 0 12
37265: PPUSH
37266: CALL_OW 325
37270: IFFALSE 37299
// missile := Insert ( missile , missile + 1 , 2 ) ;
37272: LD_ADDR_VAR 0 14
37276: PUSH
37277: LD_VAR 0 14
37281: PPUSH
37282: LD_VAR 0 14
37286: PUSH
37287: LD_INT 1
37289: PLUS
37290: PPUSH
37291: LD_INT 2
37293: PPUSH
37294: CALL_OW 2
37298: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37299: LD_VAR 0 9
37303: PPUSH
37304: LD_VAR 0 13
37308: PPUSH
37309: CALL_OW 325
37313: PUSH
37314: LD_VAR 0 10
37318: PPUSH
37319: CALL_OW 255
37323: PPUSH
37324: LD_VAR 0 13
37328: PPUSH
37329: CALL_OW 325
37333: NOT
37334: AND
37335: IFFALSE 37364
// missile := Insert ( missile , missile + 1 , 3 ) ;
37337: LD_ADDR_VAR 0 14
37341: PUSH
37342: LD_VAR 0 14
37346: PPUSH
37347: LD_VAR 0 14
37351: PUSH
37352: LD_INT 1
37354: PLUS
37355: PPUSH
37356: LD_INT 3
37358: PPUSH
37359: CALL_OW 2
37363: ST_TO_ADDR
// if missile < 2 then
37364: LD_VAR 0 14
37368: PUSH
37369: LD_INT 2
37371: LESS
37372: IFFALSE 37376
// exit ;
37374: GO 37598
// x := GetX ( enemy ) ;
37376: LD_ADDR_VAR 0 4
37380: PUSH
37381: LD_VAR 0 10
37385: PPUSH
37386: CALL_OW 250
37390: ST_TO_ADDR
// y := GetY ( enemy ) ;
37391: LD_ADDR_VAR 0 5
37395: PUSH
37396: LD_VAR 0 10
37400: PPUSH
37401: CALL_OW 251
37405: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37406: LD_ADDR_VAR 0 6
37410: PUSH
37411: LD_VAR 0 4
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PPUSH
37420: LD_INT 1
37422: PPUSH
37423: CALL_OW 12
37427: PLUS
37428: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37429: LD_ADDR_VAR 0 7
37433: PUSH
37434: LD_VAR 0 5
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PPUSH
37443: LD_INT 1
37445: PPUSH
37446: CALL_OW 12
37450: PLUS
37451: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37452: LD_VAR 0 6
37456: PPUSH
37457: LD_VAR 0 7
37461: PPUSH
37462: CALL_OW 488
37466: NOT
37467: IFFALSE 37489
// begin _x := x ;
37469: LD_ADDR_VAR 0 6
37473: PUSH
37474: LD_VAR 0 4
37478: ST_TO_ADDR
// _y := y ;
37479: LD_ADDR_VAR 0 7
37483: PUSH
37484: LD_VAR 0 5
37488: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37489: LD_ADDR_VAR 0 3
37493: PUSH
37494: LD_INT 1
37496: PPUSH
37497: LD_VAR 0 14
37501: PPUSH
37502: CALL_OW 12
37506: ST_TO_ADDR
// case i of 1 :
37507: LD_VAR 0 3
37511: PUSH
37512: LD_INT 1
37514: DOUBLE
37515: EQUAL
37516: IFTRUE 37520
37518: GO 37537
37520: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37521: LD_VAR 0 1
37525: PPUSH
37526: LD_VAR 0 10
37530: PPUSH
37531: CALL_OW 115
37535: GO 37598
37537: LD_INT 2
37539: DOUBLE
37540: EQUAL
37541: IFTRUE 37545
37543: GO 37567
37545: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37546: LD_VAR 0 1
37550: PPUSH
37551: LD_VAR 0 6
37555: PPUSH
37556: LD_VAR 0 7
37560: PPUSH
37561: CALL_OW 153
37565: GO 37598
37567: LD_INT 3
37569: DOUBLE
37570: EQUAL
37571: IFTRUE 37575
37573: GO 37597
37575: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37576: LD_VAR 0 1
37580: PPUSH
37581: LD_VAR 0 6
37585: PPUSH
37586: LD_VAR 0 7
37590: PPUSH
37591: CALL_OW 154
37595: GO 37598
37597: POP
// end ;
37598: LD_VAR 0 2
37602: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37603: LD_INT 0
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
// if not unit or not building then
37611: LD_VAR 0 1
37615: NOT
37616: PUSH
37617: LD_VAR 0 2
37621: NOT
37622: OR
37623: IFFALSE 37627
// exit ;
37625: GO 37785
// x := GetX ( building ) ;
37627: LD_ADDR_VAR 0 5
37631: PUSH
37632: LD_VAR 0 2
37636: PPUSH
37637: CALL_OW 250
37641: ST_TO_ADDR
// y := GetY ( building ) ;
37642: LD_ADDR_VAR 0 6
37646: PUSH
37647: LD_VAR 0 2
37651: PPUSH
37652: CALL_OW 251
37656: ST_TO_ADDR
// for i = 0 to 5 do
37657: LD_ADDR_VAR 0 4
37661: PUSH
37662: DOUBLE
37663: LD_INT 0
37665: DEC
37666: ST_TO_ADDR
37667: LD_INT 5
37669: PUSH
37670: FOR_TO
37671: IFFALSE 37783
// begin _x := ShiftX ( x , i , 3 ) ;
37673: LD_ADDR_VAR 0 7
37677: PUSH
37678: LD_VAR 0 5
37682: PPUSH
37683: LD_VAR 0 4
37687: PPUSH
37688: LD_INT 3
37690: PPUSH
37691: CALL_OW 272
37695: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37696: LD_ADDR_VAR 0 8
37700: PUSH
37701: LD_VAR 0 6
37705: PPUSH
37706: LD_VAR 0 4
37710: PPUSH
37711: LD_INT 3
37713: PPUSH
37714: CALL_OW 273
37718: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37719: LD_VAR 0 7
37723: PPUSH
37724: LD_VAR 0 8
37728: PPUSH
37729: CALL_OW 488
37733: NOT
37734: IFFALSE 37738
// continue ;
37736: GO 37670
// if HexInfo ( _x , _y ) = 0 then
37738: LD_VAR 0 7
37742: PPUSH
37743: LD_VAR 0 8
37747: PPUSH
37748: CALL_OW 428
37752: PUSH
37753: LD_INT 0
37755: EQUAL
37756: IFFALSE 37781
// begin ComMoveXY ( unit , _x , _y ) ;
37758: LD_VAR 0 1
37762: PPUSH
37763: LD_VAR 0 7
37767: PPUSH
37768: LD_VAR 0 8
37772: PPUSH
37773: CALL_OW 111
// exit ;
37777: POP
37778: POP
37779: GO 37785
// end ; end ;
37781: GO 37670
37783: POP
37784: POP
// end ;
37785: LD_VAR 0 3
37789: RET
// export function ScanBase ( side , base_area ) ; begin
37790: LD_INT 0
37792: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37793: LD_ADDR_VAR 0 3
37797: PUSH
37798: LD_VAR 0 2
37802: PPUSH
37803: LD_INT 81
37805: PUSH
37806: LD_VAR 0 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PPUSH
37815: CALL_OW 70
37819: ST_TO_ADDR
// end ;
37820: LD_VAR 0 3
37824: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37825: LD_INT 0
37827: PPUSH
37828: PPUSH
37829: PPUSH
37830: PPUSH
// result := false ;
37831: LD_ADDR_VAR 0 2
37835: PUSH
37836: LD_INT 0
37838: ST_TO_ADDR
// side := GetSide ( unit ) ;
37839: LD_ADDR_VAR 0 3
37843: PUSH
37844: LD_VAR 0 1
37848: PPUSH
37849: CALL_OW 255
37853: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37854: LD_ADDR_VAR 0 4
37858: PUSH
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 248
37868: ST_TO_ADDR
// case nat of 1 :
37869: LD_VAR 0 4
37873: PUSH
37874: LD_INT 1
37876: DOUBLE
37877: EQUAL
37878: IFTRUE 37882
37880: GO 37893
37882: POP
// tech := tech_lassight ; 2 :
37883: LD_ADDR_VAR 0 5
37887: PUSH
37888: LD_INT 12
37890: ST_TO_ADDR
37891: GO 37932
37893: LD_INT 2
37895: DOUBLE
37896: EQUAL
37897: IFTRUE 37901
37899: GO 37912
37901: POP
// tech := tech_mortar ; 3 :
37902: LD_ADDR_VAR 0 5
37906: PUSH
37907: LD_INT 41
37909: ST_TO_ADDR
37910: GO 37932
37912: LD_INT 3
37914: DOUBLE
37915: EQUAL
37916: IFTRUE 37920
37918: GO 37931
37920: POP
// tech := tech_bazooka ; end ;
37921: LD_ADDR_VAR 0 5
37925: PUSH
37926: LD_INT 44
37928: ST_TO_ADDR
37929: GO 37932
37931: POP
// if Researched ( side , tech ) then
37932: LD_VAR 0 3
37936: PPUSH
37937: LD_VAR 0 5
37941: PPUSH
37942: CALL_OW 325
37946: IFFALSE 37973
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37948: LD_ADDR_VAR 0 2
37952: PUSH
37953: LD_INT 5
37955: PUSH
37956: LD_INT 8
37958: PUSH
37959: LD_INT 9
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: PUSH
37967: LD_VAR 0 4
37971: ARRAY
37972: ST_TO_ADDR
// end ;
37973: LD_VAR 0 2
37977: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37978: LD_INT 0
37980: PPUSH
37981: PPUSH
37982: PPUSH
// if not mines then
37983: LD_VAR 0 2
37987: NOT
37988: IFFALSE 37992
// exit ;
37990: GO 38136
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37992: LD_ADDR_VAR 0 5
37996: PUSH
37997: LD_INT 81
37999: PUSH
38000: LD_VAR 0 1
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 3
38011: PUSH
38012: LD_INT 21
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PPUSH
38030: CALL_OW 69
38034: ST_TO_ADDR
// for i in mines do
38035: LD_ADDR_VAR 0 4
38039: PUSH
38040: LD_VAR 0 2
38044: PUSH
38045: FOR_IN
38046: IFFALSE 38134
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38048: LD_VAR 0 4
38052: PUSH
38053: LD_INT 1
38055: ARRAY
38056: PPUSH
38057: LD_VAR 0 4
38061: PUSH
38062: LD_INT 2
38064: ARRAY
38065: PPUSH
38066: CALL_OW 458
38070: NOT
38071: IFFALSE 38075
// continue ;
38073: GO 38045
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38075: LD_VAR 0 4
38079: PUSH
38080: LD_INT 1
38082: ARRAY
38083: PPUSH
38084: LD_VAR 0 4
38088: PUSH
38089: LD_INT 2
38091: ARRAY
38092: PPUSH
38093: CALL_OW 428
38097: PUSH
38098: LD_VAR 0 5
38102: IN
38103: IFFALSE 38132
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38105: LD_VAR 0 4
38109: PUSH
38110: LD_INT 1
38112: ARRAY
38113: PPUSH
38114: LD_VAR 0 4
38118: PUSH
38119: LD_INT 2
38121: ARRAY
38122: PPUSH
38123: LD_VAR 0 1
38127: PPUSH
38128: CALL_OW 456
// end ;
38132: GO 38045
38134: POP
38135: POP
// end ;
38136: LD_VAR 0 3
38140: RET
// export function Count ( array ) ; var i ; begin
38141: LD_INT 0
38143: PPUSH
38144: PPUSH
// result := 0 ;
38145: LD_ADDR_VAR 0 2
38149: PUSH
38150: LD_INT 0
38152: ST_TO_ADDR
// for i in array do
38153: LD_ADDR_VAR 0 3
38157: PUSH
38158: LD_VAR 0 1
38162: PUSH
38163: FOR_IN
38164: IFFALSE 38188
// if i then
38166: LD_VAR 0 3
38170: IFFALSE 38186
// result := result + 1 ;
38172: LD_ADDR_VAR 0 2
38176: PUSH
38177: LD_VAR 0 2
38181: PUSH
38182: LD_INT 1
38184: PLUS
38185: ST_TO_ADDR
38186: GO 38163
38188: POP
38189: POP
// end ;
38190: LD_VAR 0 2
38194: RET
// export function IsEmpty ( building ) ; begin
38195: LD_INT 0
38197: PPUSH
// if not building then
38198: LD_VAR 0 1
38202: NOT
38203: IFFALSE 38207
// exit ;
38205: GO 38250
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38207: LD_ADDR_VAR 0 2
38211: PUSH
38212: LD_VAR 0 1
38216: PUSH
38217: LD_INT 22
38219: PUSH
38220: LD_VAR 0 1
38224: PPUSH
38225: CALL_OW 255
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 58
38236: PUSH
38237: EMPTY
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PPUSH
38244: CALL_OW 69
38248: IN
38249: ST_TO_ADDR
// end ;
38250: LD_VAR 0 2
38254: RET
// export function IsNotFull ( building ) ; begin
38255: LD_INT 0
38257: PPUSH
// if not building then
38258: LD_VAR 0 1
38262: NOT
38263: IFFALSE 38267
// exit ;
38265: GO 38286
// result := UnitsInside ( building ) < 6 ;
38267: LD_ADDR_VAR 0 2
38271: PUSH
38272: LD_VAR 0 1
38276: PPUSH
38277: CALL_OW 313
38281: PUSH
38282: LD_INT 6
38284: LESS
38285: ST_TO_ADDR
// end ;
38286: LD_VAR 0 2
38290: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38291: LD_INT 0
38293: PPUSH
38294: PPUSH
38295: PPUSH
38296: PPUSH
// tmp := [ ] ;
38297: LD_ADDR_VAR 0 3
38301: PUSH
38302: EMPTY
38303: ST_TO_ADDR
// list := [ ] ;
38304: LD_ADDR_VAR 0 5
38308: PUSH
38309: EMPTY
38310: ST_TO_ADDR
// for i = 16 to 25 do
38311: LD_ADDR_VAR 0 4
38315: PUSH
38316: DOUBLE
38317: LD_INT 16
38319: DEC
38320: ST_TO_ADDR
38321: LD_INT 25
38323: PUSH
38324: FOR_TO
38325: IFFALSE 38398
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38327: LD_ADDR_VAR 0 3
38331: PUSH
38332: LD_VAR 0 3
38336: PUSH
38337: LD_INT 22
38339: PUSH
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 255
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 91
38356: PUSH
38357: LD_VAR 0 1
38361: PUSH
38362: LD_INT 6
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 30
38372: PUSH
38373: LD_VAR 0 4
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: PUSH
38387: EMPTY
38388: LIST
38389: PPUSH
38390: CALL_OW 69
38394: ADD
38395: ST_TO_ADDR
38396: GO 38324
38398: POP
38399: POP
// for i = 1 to tmp do
38400: LD_ADDR_VAR 0 4
38404: PUSH
38405: DOUBLE
38406: LD_INT 1
38408: DEC
38409: ST_TO_ADDR
38410: LD_VAR 0 3
38414: PUSH
38415: FOR_TO
38416: IFFALSE 38504
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38418: LD_ADDR_VAR 0 5
38422: PUSH
38423: LD_VAR 0 5
38427: PUSH
38428: LD_VAR 0 3
38432: PUSH
38433: LD_VAR 0 4
38437: ARRAY
38438: PPUSH
38439: CALL_OW 266
38443: PUSH
38444: LD_VAR 0 3
38448: PUSH
38449: LD_VAR 0 4
38453: ARRAY
38454: PPUSH
38455: CALL_OW 250
38459: PUSH
38460: LD_VAR 0 3
38464: PUSH
38465: LD_VAR 0 4
38469: ARRAY
38470: PPUSH
38471: CALL_OW 251
38475: PUSH
38476: LD_VAR 0 3
38480: PUSH
38481: LD_VAR 0 4
38485: ARRAY
38486: PPUSH
38487: CALL_OW 254
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: PUSH
38498: EMPTY
38499: LIST
38500: ADD
38501: ST_TO_ADDR
38502: GO 38415
38504: POP
38505: POP
// result := list ;
38506: LD_ADDR_VAR 0 2
38510: PUSH
38511: LD_VAR 0 5
38515: ST_TO_ADDR
// end ;
38516: LD_VAR 0 2
38520: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38521: LD_INT 0
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
// if not factory then
38530: LD_VAR 0 1
38534: NOT
38535: IFFALSE 38539
// exit ;
38537: GO 39132
// if control = control_apeman then
38539: LD_VAR 0 4
38543: PUSH
38544: LD_INT 5
38546: EQUAL
38547: IFFALSE 38656
// begin tmp := UnitsInside ( factory ) ;
38549: LD_ADDR_VAR 0 8
38553: PUSH
38554: LD_VAR 0 1
38558: PPUSH
38559: CALL_OW 313
38563: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38564: LD_VAR 0 8
38568: PPUSH
38569: LD_INT 25
38571: PUSH
38572: LD_INT 12
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PPUSH
38579: CALL_OW 72
38583: NOT
38584: IFFALSE 38594
// control := control_manual ;
38586: LD_ADDR_VAR 0 4
38590: PUSH
38591: LD_INT 1
38593: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38594: LD_ADDR_VAR 0 8
38598: PUSH
38599: LD_VAR 0 1
38603: PPUSH
38604: CALL 38291 0 1
38608: ST_TO_ADDR
// if tmp then
38609: LD_VAR 0 8
38613: IFFALSE 38656
// begin for i in tmp do
38615: LD_ADDR_VAR 0 7
38619: PUSH
38620: LD_VAR 0 8
38624: PUSH
38625: FOR_IN
38626: IFFALSE 38654
// if i [ 1 ] = b_ext_radio then
38628: LD_VAR 0 7
38632: PUSH
38633: LD_INT 1
38635: ARRAY
38636: PUSH
38637: LD_INT 22
38639: EQUAL
38640: IFFALSE 38652
// begin control := control_remote ;
38642: LD_ADDR_VAR 0 4
38646: PUSH
38647: LD_INT 2
38649: ST_TO_ADDR
// break ;
38650: GO 38654
// end ;
38652: GO 38625
38654: POP
38655: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38656: LD_VAR 0 1
38660: PPUSH
38661: LD_VAR 0 2
38665: PPUSH
38666: LD_VAR 0 3
38670: PPUSH
38671: LD_VAR 0 4
38675: PPUSH
38676: LD_VAR 0 5
38680: PPUSH
38681: CALL_OW 448
38685: IFFALSE 38720
// begin result := [ chassis , engine , control , weapon ] ;
38687: LD_ADDR_VAR 0 6
38691: PUSH
38692: LD_VAR 0 2
38696: PUSH
38697: LD_VAR 0 3
38701: PUSH
38702: LD_VAR 0 4
38706: PUSH
38707: LD_VAR 0 5
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: ST_TO_ADDR
// exit ;
38718: GO 39132
// end ; _chassis := AvailableChassisList ( factory ) ;
38720: LD_ADDR_VAR 0 9
38724: PUSH
38725: LD_VAR 0 1
38729: PPUSH
38730: CALL_OW 475
38734: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38735: LD_ADDR_VAR 0 11
38739: PUSH
38740: LD_VAR 0 1
38744: PPUSH
38745: CALL_OW 476
38749: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38750: LD_ADDR_VAR 0 12
38754: PUSH
38755: LD_VAR 0 1
38759: PPUSH
38760: CALL_OW 477
38764: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38765: LD_ADDR_VAR 0 10
38769: PUSH
38770: LD_VAR 0 1
38774: PPUSH
38775: CALL_OW 478
38779: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38780: LD_VAR 0 9
38784: NOT
38785: PUSH
38786: LD_VAR 0 11
38790: NOT
38791: OR
38792: PUSH
38793: LD_VAR 0 12
38797: NOT
38798: OR
38799: PUSH
38800: LD_VAR 0 10
38804: NOT
38805: OR
38806: IFFALSE 38841
// begin result := [ chassis , engine , control , weapon ] ;
38808: LD_ADDR_VAR 0 6
38812: PUSH
38813: LD_VAR 0 2
38817: PUSH
38818: LD_VAR 0 3
38822: PUSH
38823: LD_VAR 0 4
38827: PUSH
38828: LD_VAR 0 5
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: ST_TO_ADDR
// exit ;
38839: GO 39132
// end ; if not chassis in _chassis then
38841: LD_VAR 0 2
38845: PUSH
38846: LD_VAR 0 9
38850: IN
38851: NOT
38852: IFFALSE 38878
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38854: LD_ADDR_VAR 0 2
38858: PUSH
38859: LD_VAR 0 9
38863: PUSH
38864: LD_INT 1
38866: PPUSH
38867: LD_VAR 0 9
38871: PPUSH
38872: CALL_OW 12
38876: ARRAY
38877: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38878: LD_VAR 0 2
38882: PPUSH
38883: LD_VAR 0 3
38887: PPUSH
38888: CALL 39137 0 2
38892: NOT
38893: IFFALSE 38952
// repeat engine := _engine [ 1 ] ;
38895: LD_ADDR_VAR 0 3
38899: PUSH
38900: LD_VAR 0 11
38904: PUSH
38905: LD_INT 1
38907: ARRAY
38908: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38909: LD_ADDR_VAR 0 11
38913: PUSH
38914: LD_VAR 0 11
38918: PPUSH
38919: LD_INT 1
38921: PPUSH
38922: CALL_OW 3
38926: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38927: LD_VAR 0 2
38931: PPUSH
38932: LD_VAR 0 3
38936: PPUSH
38937: CALL 39137 0 2
38941: PUSH
38942: LD_VAR 0 11
38946: PUSH
38947: EMPTY
38948: EQUAL
38949: OR
38950: IFFALSE 38895
// if not control in _control then
38952: LD_VAR 0 4
38956: PUSH
38957: LD_VAR 0 12
38961: IN
38962: NOT
38963: IFFALSE 38989
// control := _control [ rand ( 1 , _control ) ] ;
38965: LD_ADDR_VAR 0 4
38969: PUSH
38970: LD_VAR 0 12
38974: PUSH
38975: LD_INT 1
38977: PPUSH
38978: LD_VAR 0 12
38982: PPUSH
38983: CALL_OW 12
38987: ARRAY
38988: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38989: LD_VAR 0 2
38993: PPUSH
38994: LD_VAR 0 5
38998: PPUSH
38999: CALL 39357 0 2
39003: NOT
39004: IFFALSE 39063
// repeat weapon := _weapon [ 1 ] ;
39006: LD_ADDR_VAR 0 5
39010: PUSH
39011: LD_VAR 0 10
39015: PUSH
39016: LD_INT 1
39018: ARRAY
39019: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39020: LD_ADDR_VAR 0 10
39024: PUSH
39025: LD_VAR 0 10
39029: PPUSH
39030: LD_INT 1
39032: PPUSH
39033: CALL_OW 3
39037: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39038: LD_VAR 0 2
39042: PPUSH
39043: LD_VAR 0 5
39047: PPUSH
39048: CALL 39357 0 2
39052: PUSH
39053: LD_VAR 0 10
39057: PUSH
39058: EMPTY
39059: EQUAL
39060: OR
39061: IFFALSE 39006
// result := [ ] ;
39063: LD_ADDR_VAR 0 6
39067: PUSH
39068: EMPTY
39069: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39070: LD_VAR 0 1
39074: PPUSH
39075: LD_VAR 0 2
39079: PPUSH
39080: LD_VAR 0 3
39084: PPUSH
39085: LD_VAR 0 4
39089: PPUSH
39090: LD_VAR 0 5
39094: PPUSH
39095: CALL_OW 448
39099: IFFALSE 39132
// result := [ chassis , engine , control , weapon ] ;
39101: LD_ADDR_VAR 0 6
39105: PUSH
39106: LD_VAR 0 2
39110: PUSH
39111: LD_VAR 0 3
39115: PUSH
39116: LD_VAR 0 4
39120: PUSH
39121: LD_VAR 0 5
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: ST_TO_ADDR
// end ;
39132: LD_VAR 0 6
39136: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39137: LD_INT 0
39139: PPUSH
// if not chassis or not engine then
39140: LD_VAR 0 1
39144: NOT
39145: PUSH
39146: LD_VAR 0 2
39150: NOT
39151: OR
39152: IFFALSE 39156
// exit ;
39154: GO 39352
// case engine of engine_solar :
39156: LD_VAR 0 2
39160: PUSH
39161: LD_INT 2
39163: DOUBLE
39164: EQUAL
39165: IFTRUE 39169
39167: GO 39207
39169: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39170: LD_ADDR_VAR 0 3
39174: PUSH
39175: LD_INT 11
39177: PUSH
39178: LD_INT 12
39180: PUSH
39181: LD_INT 13
39183: PUSH
39184: LD_INT 14
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: LD_INT 3
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: ST_TO_ADDR
39205: GO 39336
39207: LD_INT 1
39209: DOUBLE
39210: EQUAL
39211: IFTRUE 39215
39213: GO 39277
39215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39216: LD_ADDR_VAR 0 3
39220: PUSH
39221: LD_INT 11
39223: PUSH
39224: LD_INT 12
39226: PUSH
39227: LD_INT 13
39229: PUSH
39230: LD_INT 14
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: LD_INT 3
39241: PUSH
39242: LD_INT 4
39244: PUSH
39245: LD_INT 5
39247: PUSH
39248: LD_INT 21
39250: PUSH
39251: LD_INT 23
39253: PUSH
39254: LD_INT 22
39256: PUSH
39257: LD_INT 24
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: ST_TO_ADDR
39275: GO 39336
39277: LD_INT 3
39279: DOUBLE
39280: EQUAL
39281: IFTRUE 39285
39283: GO 39335
39285: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39286: LD_ADDR_VAR 0 3
39290: PUSH
39291: LD_INT 13
39293: PUSH
39294: LD_INT 14
39296: PUSH
39297: LD_INT 2
39299: PUSH
39300: LD_INT 3
39302: PUSH
39303: LD_INT 4
39305: PUSH
39306: LD_INT 5
39308: PUSH
39309: LD_INT 21
39311: PUSH
39312: LD_INT 22
39314: PUSH
39315: LD_INT 23
39317: PUSH
39318: LD_INT 24
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
39333: GO 39336
39335: POP
// result := ( chassis in result ) ;
39336: LD_ADDR_VAR 0 3
39340: PUSH
39341: LD_VAR 0 1
39345: PUSH
39346: LD_VAR 0 3
39350: IN
39351: ST_TO_ADDR
// end ;
39352: LD_VAR 0 3
39356: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39357: LD_INT 0
39359: PPUSH
// if not chassis or not weapon then
39360: LD_VAR 0 1
39364: NOT
39365: PUSH
39366: LD_VAR 0 2
39370: NOT
39371: OR
39372: IFFALSE 39376
// exit ;
39374: GO 40402
// case weapon of us_machine_gun :
39376: LD_VAR 0 2
39380: PUSH
39381: LD_INT 2
39383: DOUBLE
39384: EQUAL
39385: IFTRUE 39389
39387: GO 39419
39389: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39390: LD_ADDR_VAR 0 3
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: LD_INT 3
39403: PUSH
39404: LD_INT 4
39406: PUSH
39407: LD_INT 5
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: ST_TO_ADDR
39417: GO 40386
39419: LD_INT 3
39421: DOUBLE
39422: EQUAL
39423: IFTRUE 39427
39425: GO 39457
39427: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39428: LD_ADDR_VAR 0 3
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: LD_INT 2
39438: PUSH
39439: LD_INT 3
39441: PUSH
39442: LD_INT 4
39444: PUSH
39445: LD_INT 5
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: ST_TO_ADDR
39455: GO 40386
39457: LD_INT 11
39459: DOUBLE
39460: EQUAL
39461: IFTRUE 39465
39463: GO 39495
39465: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39466: LD_ADDR_VAR 0 3
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: LD_INT 3
39479: PUSH
39480: LD_INT 4
39482: PUSH
39483: LD_INT 5
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: ST_TO_ADDR
39493: GO 40386
39495: LD_INT 4
39497: DOUBLE
39498: EQUAL
39499: IFTRUE 39503
39501: GO 39529
39503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39504: LD_ADDR_VAR 0 3
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: LD_INT 3
39514: PUSH
39515: LD_INT 4
39517: PUSH
39518: LD_INT 5
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
39527: GO 40386
39529: LD_INT 5
39531: DOUBLE
39532: EQUAL
39533: IFTRUE 39537
39535: GO 39563
39537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39538: LD_ADDR_VAR 0 3
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 3
39548: PUSH
39549: LD_INT 4
39551: PUSH
39552: LD_INT 5
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: ST_TO_ADDR
39561: GO 40386
39563: LD_INT 9
39565: DOUBLE
39566: EQUAL
39567: IFTRUE 39571
39569: GO 39597
39571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39572: LD_ADDR_VAR 0 3
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: LD_INT 3
39582: PUSH
39583: LD_INT 4
39585: PUSH
39586: LD_INT 5
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: ST_TO_ADDR
39595: GO 40386
39597: LD_INT 7
39599: DOUBLE
39600: EQUAL
39601: IFTRUE 39605
39603: GO 39631
39605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39606: LD_ADDR_VAR 0 3
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: LD_INT 3
39616: PUSH
39617: LD_INT 4
39619: PUSH
39620: LD_INT 5
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: ST_TO_ADDR
39629: GO 40386
39631: LD_INT 12
39633: DOUBLE
39634: EQUAL
39635: IFTRUE 39639
39637: GO 39665
39639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39640: LD_ADDR_VAR 0 3
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: LD_INT 3
39650: PUSH
39651: LD_INT 4
39653: PUSH
39654: LD_INT 5
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
39663: GO 40386
39665: LD_INT 13
39667: DOUBLE
39668: EQUAL
39669: IFTRUE 39673
39671: GO 39699
39673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39674: LD_ADDR_VAR 0 3
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 4
39687: PUSH
39688: LD_INT 5
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: ST_TO_ADDR
39697: GO 40386
39699: LD_INT 14
39701: DOUBLE
39702: EQUAL
39703: IFTRUE 39707
39705: GO 39725
39707: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39708: LD_ADDR_VAR 0 3
39712: PUSH
39713: LD_INT 4
39715: PUSH
39716: LD_INT 5
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: ST_TO_ADDR
39723: GO 40386
39725: LD_INT 6
39727: DOUBLE
39728: EQUAL
39729: IFTRUE 39733
39731: GO 39751
39733: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39734: LD_ADDR_VAR 0 3
39738: PUSH
39739: LD_INT 4
39741: PUSH
39742: LD_INT 5
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: ST_TO_ADDR
39749: GO 40386
39751: LD_INT 10
39753: DOUBLE
39754: EQUAL
39755: IFTRUE 39759
39757: GO 39777
39759: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39760: LD_ADDR_VAR 0 3
39764: PUSH
39765: LD_INT 4
39767: PUSH
39768: LD_INT 5
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: ST_TO_ADDR
39775: GO 40386
39777: LD_INT 22
39779: DOUBLE
39780: EQUAL
39781: IFTRUE 39785
39783: GO 39811
39785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39786: LD_ADDR_VAR 0 3
39790: PUSH
39791: LD_INT 11
39793: PUSH
39794: LD_INT 12
39796: PUSH
39797: LD_INT 13
39799: PUSH
39800: LD_INT 14
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: ST_TO_ADDR
39809: GO 40386
39811: LD_INT 23
39813: DOUBLE
39814: EQUAL
39815: IFTRUE 39819
39817: GO 39845
39819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39820: LD_ADDR_VAR 0 3
39824: PUSH
39825: LD_INT 11
39827: PUSH
39828: LD_INT 12
39830: PUSH
39831: LD_INT 13
39833: PUSH
39834: LD_INT 14
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: ST_TO_ADDR
39843: GO 40386
39845: LD_INT 24
39847: DOUBLE
39848: EQUAL
39849: IFTRUE 39853
39851: GO 39879
39853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39854: LD_ADDR_VAR 0 3
39858: PUSH
39859: LD_INT 11
39861: PUSH
39862: LD_INT 12
39864: PUSH
39865: LD_INT 13
39867: PUSH
39868: LD_INT 14
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: ST_TO_ADDR
39877: GO 40386
39879: LD_INT 30
39881: DOUBLE
39882: EQUAL
39883: IFTRUE 39887
39885: GO 39913
39887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39888: LD_ADDR_VAR 0 3
39892: PUSH
39893: LD_INT 11
39895: PUSH
39896: LD_INT 12
39898: PUSH
39899: LD_INT 13
39901: PUSH
39902: LD_INT 14
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: ST_TO_ADDR
39911: GO 40386
39913: LD_INT 25
39915: DOUBLE
39916: EQUAL
39917: IFTRUE 39921
39919: GO 39939
39921: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39922: LD_ADDR_VAR 0 3
39926: PUSH
39927: LD_INT 13
39929: PUSH
39930: LD_INT 14
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: ST_TO_ADDR
39937: GO 40386
39939: LD_INT 27
39941: DOUBLE
39942: EQUAL
39943: IFTRUE 39947
39945: GO 39965
39947: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39948: LD_ADDR_VAR 0 3
39952: PUSH
39953: LD_INT 13
39955: PUSH
39956: LD_INT 14
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: ST_TO_ADDR
39963: GO 40386
39965: LD_INT 28
39967: DOUBLE
39968: EQUAL
39969: IFTRUE 39973
39971: GO 39991
39973: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39974: LD_ADDR_VAR 0 3
39978: PUSH
39979: LD_INT 13
39981: PUSH
39982: LD_INT 14
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: ST_TO_ADDR
39989: GO 40386
39991: LD_INT 29
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 39999
39997: GO 40017
39999: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40000: LD_ADDR_VAR 0 3
40004: PUSH
40005: LD_INT 13
40007: PUSH
40008: LD_INT 14
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: ST_TO_ADDR
40015: GO 40386
40017: LD_INT 31
40019: DOUBLE
40020: EQUAL
40021: IFTRUE 40025
40023: GO 40043
40025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40026: LD_ADDR_VAR 0 3
40030: PUSH
40031: LD_INT 13
40033: PUSH
40034: LD_INT 14
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: ST_TO_ADDR
40041: GO 40386
40043: LD_INT 26
40045: DOUBLE
40046: EQUAL
40047: IFTRUE 40051
40049: GO 40069
40051: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40052: LD_ADDR_VAR 0 3
40056: PUSH
40057: LD_INT 13
40059: PUSH
40060: LD_INT 14
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: ST_TO_ADDR
40067: GO 40386
40069: LD_INT 42
40071: DOUBLE
40072: EQUAL
40073: IFTRUE 40077
40075: GO 40103
40077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40078: LD_ADDR_VAR 0 3
40082: PUSH
40083: LD_INT 21
40085: PUSH
40086: LD_INT 22
40088: PUSH
40089: LD_INT 23
40091: PUSH
40092: LD_INT 24
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: ST_TO_ADDR
40101: GO 40386
40103: LD_INT 43
40105: DOUBLE
40106: EQUAL
40107: IFTRUE 40111
40109: GO 40137
40111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40112: LD_ADDR_VAR 0 3
40116: PUSH
40117: LD_INT 21
40119: PUSH
40120: LD_INT 22
40122: PUSH
40123: LD_INT 23
40125: PUSH
40126: LD_INT 24
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: ST_TO_ADDR
40135: GO 40386
40137: LD_INT 44
40139: DOUBLE
40140: EQUAL
40141: IFTRUE 40145
40143: GO 40171
40145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40146: LD_ADDR_VAR 0 3
40150: PUSH
40151: LD_INT 21
40153: PUSH
40154: LD_INT 22
40156: PUSH
40157: LD_INT 23
40159: PUSH
40160: LD_INT 24
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: ST_TO_ADDR
40169: GO 40386
40171: LD_INT 45
40173: DOUBLE
40174: EQUAL
40175: IFTRUE 40179
40177: GO 40205
40179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40180: LD_ADDR_VAR 0 3
40184: PUSH
40185: LD_INT 21
40187: PUSH
40188: LD_INT 22
40190: PUSH
40191: LD_INT 23
40193: PUSH
40194: LD_INT 24
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: ST_TO_ADDR
40203: GO 40386
40205: LD_INT 49
40207: DOUBLE
40208: EQUAL
40209: IFTRUE 40213
40211: GO 40239
40213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40214: LD_ADDR_VAR 0 3
40218: PUSH
40219: LD_INT 21
40221: PUSH
40222: LD_INT 22
40224: PUSH
40225: LD_INT 23
40227: PUSH
40228: LD_INT 24
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: ST_TO_ADDR
40237: GO 40386
40239: LD_INT 51
40241: DOUBLE
40242: EQUAL
40243: IFTRUE 40247
40245: GO 40273
40247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: LD_INT 21
40255: PUSH
40256: LD_INT 22
40258: PUSH
40259: LD_INT 23
40261: PUSH
40262: LD_INT 24
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: ST_TO_ADDR
40271: GO 40386
40273: LD_INT 52
40275: DOUBLE
40276: EQUAL
40277: IFTRUE 40281
40279: GO 40307
40281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40282: LD_ADDR_VAR 0 3
40286: PUSH
40287: LD_INT 21
40289: PUSH
40290: LD_INT 22
40292: PUSH
40293: LD_INT 23
40295: PUSH
40296: LD_INT 24
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: ST_TO_ADDR
40305: GO 40386
40307: LD_INT 53
40309: DOUBLE
40310: EQUAL
40311: IFTRUE 40315
40313: GO 40333
40315: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40316: LD_ADDR_VAR 0 3
40320: PUSH
40321: LD_INT 23
40323: PUSH
40324: LD_INT 24
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: ST_TO_ADDR
40331: GO 40386
40333: LD_INT 46
40335: DOUBLE
40336: EQUAL
40337: IFTRUE 40341
40339: GO 40359
40341: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40342: LD_ADDR_VAR 0 3
40346: PUSH
40347: LD_INT 23
40349: PUSH
40350: LD_INT 24
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: ST_TO_ADDR
40357: GO 40386
40359: LD_INT 47
40361: DOUBLE
40362: EQUAL
40363: IFTRUE 40367
40365: GO 40385
40367: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40368: LD_ADDR_VAR 0 3
40372: PUSH
40373: LD_INT 23
40375: PUSH
40376: LD_INT 24
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: ST_TO_ADDR
40383: GO 40386
40385: POP
// result := ( chassis in result ) ;
40386: LD_ADDR_VAR 0 3
40390: PUSH
40391: LD_VAR 0 1
40395: PUSH
40396: LD_VAR 0 3
40400: IN
40401: ST_TO_ADDR
// end ;
40402: LD_VAR 0 3
40406: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40407: LD_INT 0
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
// result := array ;
40416: LD_ADDR_VAR 0 5
40420: PUSH
40421: LD_VAR 0 1
40425: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40426: LD_VAR 0 1
40430: NOT
40431: PUSH
40432: LD_VAR 0 2
40436: NOT
40437: OR
40438: PUSH
40439: LD_VAR 0 3
40443: NOT
40444: OR
40445: PUSH
40446: LD_VAR 0 2
40450: PUSH
40451: LD_VAR 0 1
40455: GREATER
40456: OR
40457: PUSH
40458: LD_VAR 0 3
40462: PUSH
40463: LD_VAR 0 1
40467: GREATER
40468: OR
40469: IFFALSE 40473
// exit ;
40471: GO 40769
// if direction then
40473: LD_VAR 0 4
40477: IFFALSE 40541
// begin d := 1 ;
40479: LD_ADDR_VAR 0 9
40483: PUSH
40484: LD_INT 1
40486: ST_TO_ADDR
// if i_from > i_to then
40487: LD_VAR 0 2
40491: PUSH
40492: LD_VAR 0 3
40496: GREATER
40497: IFFALSE 40523
// length := ( array - i_from ) + i_to else
40499: LD_ADDR_VAR 0 11
40503: PUSH
40504: LD_VAR 0 1
40508: PUSH
40509: LD_VAR 0 2
40513: MINUS
40514: PUSH
40515: LD_VAR 0 3
40519: PLUS
40520: ST_TO_ADDR
40521: GO 40539
// length := i_to - i_from ;
40523: LD_ADDR_VAR 0 11
40527: PUSH
40528: LD_VAR 0 3
40532: PUSH
40533: LD_VAR 0 2
40537: MINUS
40538: ST_TO_ADDR
// end else
40539: GO 40602
// begin d := - 1 ;
40541: LD_ADDR_VAR 0 9
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: ST_TO_ADDR
// if i_from > i_to then
40550: LD_VAR 0 2
40554: PUSH
40555: LD_VAR 0 3
40559: GREATER
40560: IFFALSE 40580
// length := i_from - i_to else
40562: LD_ADDR_VAR 0 11
40566: PUSH
40567: LD_VAR 0 2
40571: PUSH
40572: LD_VAR 0 3
40576: MINUS
40577: ST_TO_ADDR
40578: GO 40602
// length := ( array - i_to ) + i_from ;
40580: LD_ADDR_VAR 0 11
40584: PUSH
40585: LD_VAR 0 1
40589: PUSH
40590: LD_VAR 0 3
40594: MINUS
40595: PUSH
40596: LD_VAR 0 2
40600: PLUS
40601: ST_TO_ADDR
// end ; if not length then
40602: LD_VAR 0 11
40606: NOT
40607: IFFALSE 40611
// exit ;
40609: GO 40769
// tmp := array ;
40611: LD_ADDR_VAR 0 10
40615: PUSH
40616: LD_VAR 0 1
40620: ST_TO_ADDR
// for i = 1 to length do
40621: LD_ADDR_VAR 0 6
40625: PUSH
40626: DOUBLE
40627: LD_INT 1
40629: DEC
40630: ST_TO_ADDR
40631: LD_VAR 0 11
40635: PUSH
40636: FOR_TO
40637: IFFALSE 40757
// begin for j = 1 to array do
40639: LD_ADDR_VAR 0 7
40643: PUSH
40644: DOUBLE
40645: LD_INT 1
40647: DEC
40648: ST_TO_ADDR
40649: LD_VAR 0 1
40653: PUSH
40654: FOR_TO
40655: IFFALSE 40743
// begin k := j + d ;
40657: LD_ADDR_VAR 0 8
40661: PUSH
40662: LD_VAR 0 7
40666: PUSH
40667: LD_VAR 0 9
40671: PLUS
40672: ST_TO_ADDR
// if k > array then
40673: LD_VAR 0 8
40677: PUSH
40678: LD_VAR 0 1
40682: GREATER
40683: IFFALSE 40693
// k := 1 ;
40685: LD_ADDR_VAR 0 8
40689: PUSH
40690: LD_INT 1
40692: ST_TO_ADDR
// if not k then
40693: LD_VAR 0 8
40697: NOT
40698: IFFALSE 40710
// k := array ;
40700: LD_ADDR_VAR 0 8
40704: PUSH
40705: LD_VAR 0 1
40709: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40710: LD_ADDR_VAR 0 10
40714: PUSH
40715: LD_VAR 0 10
40719: PPUSH
40720: LD_VAR 0 8
40724: PPUSH
40725: LD_VAR 0 1
40729: PUSH
40730: LD_VAR 0 7
40734: ARRAY
40735: PPUSH
40736: CALL_OW 1
40740: ST_TO_ADDR
// end ;
40741: GO 40654
40743: POP
40744: POP
// array := tmp ;
40745: LD_ADDR_VAR 0 1
40749: PUSH
40750: LD_VAR 0 10
40754: ST_TO_ADDR
// end ;
40755: GO 40636
40757: POP
40758: POP
// result := array ;
40759: LD_ADDR_VAR 0 5
40763: PUSH
40764: LD_VAR 0 1
40768: ST_TO_ADDR
// end ;
40769: LD_VAR 0 5
40773: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40774: LD_INT 0
40776: PPUSH
40777: PPUSH
// result := 0 ;
40778: LD_ADDR_VAR 0 3
40782: PUSH
40783: LD_INT 0
40785: ST_TO_ADDR
// if not array or not value in array then
40786: LD_VAR 0 1
40790: NOT
40791: PUSH
40792: LD_VAR 0 2
40796: PUSH
40797: LD_VAR 0 1
40801: IN
40802: NOT
40803: OR
40804: IFFALSE 40808
// exit ;
40806: GO 40862
// for i = 1 to array do
40808: LD_ADDR_VAR 0 4
40812: PUSH
40813: DOUBLE
40814: LD_INT 1
40816: DEC
40817: ST_TO_ADDR
40818: LD_VAR 0 1
40822: PUSH
40823: FOR_TO
40824: IFFALSE 40860
// if value = array [ i ] then
40826: LD_VAR 0 2
40830: PUSH
40831: LD_VAR 0 1
40835: PUSH
40836: LD_VAR 0 4
40840: ARRAY
40841: EQUAL
40842: IFFALSE 40858
// begin result := i ;
40844: LD_ADDR_VAR 0 3
40848: PUSH
40849: LD_VAR 0 4
40853: ST_TO_ADDR
// exit ;
40854: POP
40855: POP
40856: GO 40862
// end ;
40858: GO 40823
40860: POP
40861: POP
// end ;
40862: LD_VAR 0 3
40866: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40867: LD_INT 0
40869: PPUSH
// vc_chassis := chassis ;
40870: LD_ADDR_OWVAR 37
40874: PUSH
40875: LD_VAR 0 1
40879: ST_TO_ADDR
// vc_engine := engine ;
40880: LD_ADDR_OWVAR 39
40884: PUSH
40885: LD_VAR 0 2
40889: ST_TO_ADDR
// vc_control := control ;
40890: LD_ADDR_OWVAR 38
40894: PUSH
40895: LD_VAR 0 3
40899: ST_TO_ADDR
// vc_weapon := weapon ;
40900: LD_ADDR_OWVAR 40
40904: PUSH
40905: LD_VAR 0 4
40909: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40910: LD_ADDR_OWVAR 41
40914: PUSH
40915: LD_VAR 0 5
40919: ST_TO_ADDR
// end ;
40920: LD_VAR 0 6
40924: RET
// export function WantPlant ( unit ) ; var task ; begin
40925: LD_INT 0
40927: PPUSH
40928: PPUSH
// result := false ;
40929: LD_ADDR_VAR 0 2
40933: PUSH
40934: LD_INT 0
40936: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40937: LD_ADDR_VAR 0 3
40941: PUSH
40942: LD_VAR 0 1
40946: PPUSH
40947: CALL_OW 437
40951: ST_TO_ADDR
// if task then
40952: LD_VAR 0 3
40956: IFFALSE 40984
// if task [ 1 ] [ 1 ] = p then
40958: LD_VAR 0 3
40962: PUSH
40963: LD_INT 1
40965: ARRAY
40966: PUSH
40967: LD_INT 1
40969: ARRAY
40970: PUSH
40971: LD_STRING p
40973: EQUAL
40974: IFFALSE 40984
// result := true ;
40976: LD_ADDR_VAR 0 2
40980: PUSH
40981: LD_INT 1
40983: ST_TO_ADDR
// end ;
40984: LD_VAR 0 2
40988: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40989: LD_INT 0
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
// if pos < 1 then
40995: LD_VAR 0 2
40999: PUSH
41000: LD_INT 1
41002: LESS
41003: IFFALSE 41007
// exit ;
41005: GO 41310
// if pos = 1 then
41007: LD_VAR 0 2
41011: PUSH
41012: LD_INT 1
41014: EQUAL
41015: IFFALSE 41048
// result := Replace ( arr , pos [ 1 ] , value ) else
41017: LD_ADDR_VAR 0 4
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: LD_VAR 0 2
41031: PUSH
41032: LD_INT 1
41034: ARRAY
41035: PPUSH
41036: LD_VAR 0 3
41040: PPUSH
41041: CALL_OW 1
41045: ST_TO_ADDR
41046: GO 41310
// begin tmp := arr ;
41048: LD_ADDR_VAR 0 6
41052: PUSH
41053: LD_VAR 0 1
41057: ST_TO_ADDR
// s_arr := [ tmp ] ;
41058: LD_ADDR_VAR 0 7
41062: PUSH
41063: LD_VAR 0 6
41067: PUSH
41068: EMPTY
41069: LIST
41070: ST_TO_ADDR
// for i = 1 to pos - 1 do
41071: LD_ADDR_VAR 0 5
41075: PUSH
41076: DOUBLE
41077: LD_INT 1
41079: DEC
41080: ST_TO_ADDR
41081: LD_VAR 0 2
41085: PUSH
41086: LD_INT 1
41088: MINUS
41089: PUSH
41090: FOR_TO
41091: IFFALSE 41136
// begin tmp := tmp [ pos [ i ] ] ;
41093: LD_ADDR_VAR 0 6
41097: PUSH
41098: LD_VAR 0 6
41102: PUSH
41103: LD_VAR 0 2
41107: PUSH
41108: LD_VAR 0 5
41112: ARRAY
41113: ARRAY
41114: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41115: LD_ADDR_VAR 0 7
41119: PUSH
41120: LD_VAR 0 7
41124: PUSH
41125: LD_VAR 0 6
41129: PUSH
41130: EMPTY
41131: LIST
41132: ADD
41133: ST_TO_ADDR
// end ;
41134: GO 41090
41136: POP
41137: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41138: LD_ADDR_VAR 0 6
41142: PUSH
41143: LD_VAR 0 6
41147: PPUSH
41148: LD_VAR 0 2
41152: PUSH
41153: LD_VAR 0 2
41157: ARRAY
41158: PPUSH
41159: LD_VAR 0 3
41163: PPUSH
41164: CALL_OW 1
41168: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41169: LD_ADDR_VAR 0 7
41173: PUSH
41174: LD_VAR 0 7
41178: PPUSH
41179: LD_VAR 0 7
41183: PPUSH
41184: LD_VAR 0 6
41188: PPUSH
41189: CALL_OW 1
41193: ST_TO_ADDR
// for i = s_arr downto 2 do
41194: LD_ADDR_VAR 0 5
41198: PUSH
41199: DOUBLE
41200: LD_VAR 0 7
41204: INC
41205: ST_TO_ADDR
41206: LD_INT 2
41208: PUSH
41209: FOR_DOWNTO
41210: IFFALSE 41294
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41212: LD_ADDR_VAR 0 6
41216: PUSH
41217: LD_VAR 0 7
41221: PUSH
41222: LD_VAR 0 5
41226: PUSH
41227: LD_INT 1
41229: MINUS
41230: ARRAY
41231: PPUSH
41232: LD_VAR 0 2
41236: PUSH
41237: LD_VAR 0 5
41241: PUSH
41242: LD_INT 1
41244: MINUS
41245: ARRAY
41246: PPUSH
41247: LD_VAR 0 7
41251: PUSH
41252: LD_VAR 0 5
41256: ARRAY
41257: PPUSH
41258: CALL_OW 1
41262: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41263: LD_ADDR_VAR 0 7
41267: PUSH
41268: LD_VAR 0 7
41272: PPUSH
41273: LD_VAR 0 5
41277: PUSH
41278: LD_INT 1
41280: MINUS
41281: PPUSH
41282: LD_VAR 0 6
41286: PPUSH
41287: CALL_OW 1
41291: ST_TO_ADDR
// end ;
41292: GO 41209
41294: POP
41295: POP
// result := s_arr [ 1 ] ;
41296: LD_ADDR_VAR 0 4
41300: PUSH
41301: LD_VAR 0 7
41305: PUSH
41306: LD_INT 1
41308: ARRAY
41309: ST_TO_ADDR
// end ; end ;
41310: LD_VAR 0 4
41314: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41315: LD_INT 0
41317: PPUSH
41318: PPUSH
// if not list then
41319: LD_VAR 0 1
41323: NOT
41324: IFFALSE 41328
// exit ;
41326: GO 41419
// i := list [ pos1 ] ;
41328: LD_ADDR_VAR 0 5
41332: PUSH
41333: LD_VAR 0 1
41337: PUSH
41338: LD_VAR 0 2
41342: ARRAY
41343: ST_TO_ADDR
// if not i then
41344: LD_VAR 0 5
41348: NOT
41349: IFFALSE 41353
// exit ;
41351: GO 41419
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41353: LD_ADDR_VAR 0 1
41357: PUSH
41358: LD_VAR 0 1
41362: PPUSH
41363: LD_VAR 0 2
41367: PPUSH
41368: LD_VAR 0 1
41372: PUSH
41373: LD_VAR 0 3
41377: ARRAY
41378: PPUSH
41379: CALL_OW 1
41383: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41384: LD_ADDR_VAR 0 1
41388: PUSH
41389: LD_VAR 0 1
41393: PPUSH
41394: LD_VAR 0 3
41398: PPUSH
41399: LD_VAR 0 5
41403: PPUSH
41404: CALL_OW 1
41408: ST_TO_ADDR
// result := list ;
41409: LD_ADDR_VAR 0 4
41413: PUSH
41414: LD_VAR 0 1
41418: ST_TO_ADDR
// end ;
41419: LD_VAR 0 4
41423: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41424: LD_INT 0
41426: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41427: LD_ADDR_VAR 0 5
41431: PUSH
41432: LD_VAR 0 1
41436: PPUSH
41437: CALL_OW 250
41441: PPUSH
41442: LD_VAR 0 1
41446: PPUSH
41447: CALL_OW 251
41451: PPUSH
41452: LD_VAR 0 2
41456: PPUSH
41457: LD_VAR 0 3
41461: PPUSH
41462: LD_VAR 0 4
41466: PPUSH
41467: CALL 41477 0 5
41471: ST_TO_ADDR
// end ;
41472: LD_VAR 0 5
41476: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41477: LD_INT 0
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
// if not list then
41483: LD_VAR 0 3
41487: NOT
41488: IFFALSE 41492
// exit ;
41490: GO 41880
// result := [ ] ;
41492: LD_ADDR_VAR 0 6
41496: PUSH
41497: EMPTY
41498: ST_TO_ADDR
// for i in list do
41499: LD_ADDR_VAR 0 7
41503: PUSH
41504: LD_VAR 0 3
41508: PUSH
41509: FOR_IN
41510: IFFALSE 41712
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41512: LD_ADDR_VAR 0 9
41516: PUSH
41517: LD_VAR 0 7
41521: PPUSH
41522: LD_VAR 0 1
41526: PPUSH
41527: LD_VAR 0 2
41531: PPUSH
41532: CALL_OW 297
41536: ST_TO_ADDR
// if not result then
41537: LD_VAR 0 6
41541: NOT
41542: IFFALSE 41568
// result := [ [ i , tmp ] ] else
41544: LD_ADDR_VAR 0 6
41548: PUSH
41549: LD_VAR 0 7
41553: PUSH
41554: LD_VAR 0 9
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: EMPTY
41564: LIST
41565: ST_TO_ADDR
41566: GO 41710
// begin if result [ result ] [ 2 ] < tmp then
41568: LD_VAR 0 6
41572: PUSH
41573: LD_VAR 0 6
41577: ARRAY
41578: PUSH
41579: LD_INT 2
41581: ARRAY
41582: PUSH
41583: LD_VAR 0 9
41587: LESS
41588: IFFALSE 41630
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41590: LD_ADDR_VAR 0 6
41594: PUSH
41595: LD_VAR 0 6
41599: PPUSH
41600: LD_VAR 0 6
41604: PUSH
41605: LD_INT 1
41607: PLUS
41608: PPUSH
41609: LD_VAR 0 7
41613: PUSH
41614: LD_VAR 0 9
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PPUSH
41623: CALL_OW 2
41627: ST_TO_ADDR
41628: GO 41710
// for j = 1 to result do
41630: LD_ADDR_VAR 0 8
41634: PUSH
41635: DOUBLE
41636: LD_INT 1
41638: DEC
41639: ST_TO_ADDR
41640: LD_VAR 0 6
41644: PUSH
41645: FOR_TO
41646: IFFALSE 41708
// begin if tmp < result [ j ] [ 2 ] then
41648: LD_VAR 0 9
41652: PUSH
41653: LD_VAR 0 6
41657: PUSH
41658: LD_VAR 0 8
41662: ARRAY
41663: PUSH
41664: LD_INT 2
41666: ARRAY
41667: LESS
41668: IFFALSE 41706
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41670: LD_ADDR_VAR 0 6
41674: PUSH
41675: LD_VAR 0 6
41679: PPUSH
41680: LD_VAR 0 8
41684: PPUSH
41685: LD_VAR 0 7
41689: PUSH
41690: LD_VAR 0 9
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PPUSH
41699: CALL_OW 2
41703: ST_TO_ADDR
// break ;
41704: GO 41708
// end ; end ;
41706: GO 41645
41708: POP
41709: POP
// end ; end ;
41710: GO 41509
41712: POP
41713: POP
// if result and not asc then
41714: LD_VAR 0 6
41718: PUSH
41719: LD_VAR 0 4
41723: NOT
41724: AND
41725: IFFALSE 41800
// begin tmp := result ;
41727: LD_ADDR_VAR 0 9
41731: PUSH
41732: LD_VAR 0 6
41736: ST_TO_ADDR
// for i = tmp downto 1 do
41737: LD_ADDR_VAR 0 7
41741: PUSH
41742: DOUBLE
41743: LD_VAR 0 9
41747: INC
41748: ST_TO_ADDR
41749: LD_INT 1
41751: PUSH
41752: FOR_DOWNTO
41753: IFFALSE 41798
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41755: LD_ADDR_VAR 0 6
41759: PUSH
41760: LD_VAR 0 6
41764: PPUSH
41765: LD_VAR 0 9
41769: PUSH
41770: LD_VAR 0 7
41774: MINUS
41775: PUSH
41776: LD_INT 1
41778: PLUS
41779: PPUSH
41780: LD_VAR 0 9
41784: PUSH
41785: LD_VAR 0 7
41789: ARRAY
41790: PPUSH
41791: CALL_OW 1
41795: ST_TO_ADDR
41796: GO 41752
41798: POP
41799: POP
// end ; tmp := [ ] ;
41800: LD_ADDR_VAR 0 9
41804: PUSH
41805: EMPTY
41806: ST_TO_ADDR
// if mode then
41807: LD_VAR 0 5
41811: IFFALSE 41880
// begin for i = 1 to result do
41813: LD_ADDR_VAR 0 7
41817: PUSH
41818: DOUBLE
41819: LD_INT 1
41821: DEC
41822: ST_TO_ADDR
41823: LD_VAR 0 6
41827: PUSH
41828: FOR_TO
41829: IFFALSE 41868
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41831: LD_ADDR_VAR 0 9
41835: PUSH
41836: LD_VAR 0 9
41840: PPUSH
41841: LD_VAR 0 7
41845: PPUSH
41846: LD_VAR 0 6
41850: PUSH
41851: LD_VAR 0 7
41855: ARRAY
41856: PUSH
41857: LD_INT 1
41859: ARRAY
41860: PPUSH
41861: CALL_OW 1
41865: ST_TO_ADDR
41866: GO 41828
41868: POP
41869: POP
// result := tmp ;
41870: LD_ADDR_VAR 0 6
41874: PUSH
41875: LD_VAR 0 9
41879: ST_TO_ADDR
// end ; end ;
41880: LD_VAR 0 6
41884: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41885: LD_INT 0
41887: PPUSH
41888: PPUSH
41889: PPUSH
41890: PPUSH
41891: PPUSH
41892: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41893: LD_ADDR_VAR 0 5
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: ST_TO_ADDR
// if not x or not y then
41915: LD_VAR 0 2
41919: NOT
41920: PUSH
41921: LD_VAR 0 3
41925: NOT
41926: OR
41927: IFFALSE 41931
// exit ;
41929: GO 43577
// if not range then
41931: LD_VAR 0 4
41935: NOT
41936: IFFALSE 41946
// range := 10 ;
41938: LD_ADDR_VAR 0 4
41942: PUSH
41943: LD_INT 10
41945: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41946: LD_ADDR_VAR 0 8
41950: PUSH
41951: LD_INT 81
41953: PUSH
41954: LD_VAR 0 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 92
41965: PUSH
41966: LD_VAR 0 2
41970: PUSH
41971: LD_VAR 0 3
41975: PUSH
41976: LD_VAR 0 4
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 3
41989: PUSH
41990: LD_INT 21
41992: PUSH
41993: LD_INT 3
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: LIST
42008: PPUSH
42009: CALL_OW 69
42013: ST_TO_ADDR
// if not tmp then
42014: LD_VAR 0 8
42018: NOT
42019: IFFALSE 42023
// exit ;
42021: GO 43577
// for i in tmp do
42023: LD_ADDR_VAR 0 6
42027: PUSH
42028: LD_VAR 0 8
42032: PUSH
42033: FOR_IN
42034: IFFALSE 43552
// begin points := [ 0 , 0 , 0 ] ;
42036: LD_ADDR_VAR 0 9
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: LIST
42054: ST_TO_ADDR
// bpoints := 1 ;
42055: LD_ADDR_VAR 0 10
42059: PUSH
42060: LD_INT 1
42062: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42063: LD_VAR 0 6
42067: PPUSH
42068: CALL_OW 247
42072: PUSH
42073: LD_INT 1
42075: DOUBLE
42076: EQUAL
42077: IFTRUE 42081
42079: GO 42659
42081: POP
// begin if GetClass ( i ) = 1 then
42082: LD_VAR 0 6
42086: PPUSH
42087: CALL_OW 257
42091: PUSH
42092: LD_INT 1
42094: EQUAL
42095: IFFALSE 42116
// points := [ 10 , 5 , 3 ] ;
42097: LD_ADDR_VAR 0 9
42101: PUSH
42102: LD_INT 10
42104: PUSH
42105: LD_INT 5
42107: PUSH
42108: LD_INT 3
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: LIST
42115: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42116: LD_VAR 0 6
42120: PPUSH
42121: CALL_OW 257
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 3
42131: PUSH
42132: LD_INT 4
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: IN
42140: IFFALSE 42161
// points := [ 3 , 2 , 1 ] ;
42142: LD_ADDR_VAR 0 9
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42161: LD_VAR 0 6
42165: PPUSH
42166: CALL_OW 257
42170: PUSH
42171: LD_INT 5
42173: EQUAL
42174: IFFALSE 42195
// points := [ 130 , 5 , 2 ] ;
42176: LD_ADDR_VAR 0 9
42180: PUSH
42181: LD_INT 130
42183: PUSH
42184: LD_INT 5
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42195: LD_VAR 0 6
42199: PPUSH
42200: CALL_OW 257
42204: PUSH
42205: LD_INT 8
42207: EQUAL
42208: IFFALSE 42229
// points := [ 35 , 35 , 30 ] ;
42210: LD_ADDR_VAR 0 9
42214: PUSH
42215: LD_INT 35
42217: PUSH
42218: LD_INT 35
42220: PUSH
42221: LD_INT 30
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: LIST
42228: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42229: LD_VAR 0 6
42233: PPUSH
42234: CALL_OW 257
42238: PUSH
42239: LD_INT 9
42241: EQUAL
42242: IFFALSE 42263
// points := [ 20 , 55 , 40 ] ;
42244: LD_ADDR_VAR 0 9
42248: PUSH
42249: LD_INT 20
42251: PUSH
42252: LD_INT 55
42254: PUSH
42255: LD_INT 40
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: LIST
42262: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42263: LD_VAR 0 6
42267: PPUSH
42268: CALL_OW 257
42272: PUSH
42273: LD_INT 12
42275: PUSH
42276: LD_INT 16
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: IN
42283: IFFALSE 42304
// points := [ 5 , 3 , 2 ] ;
42285: LD_ADDR_VAR 0 9
42289: PUSH
42290: LD_INT 5
42292: PUSH
42293: LD_INT 3
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42304: LD_VAR 0 6
42308: PPUSH
42309: CALL_OW 257
42313: PUSH
42314: LD_INT 17
42316: EQUAL
42317: IFFALSE 42338
// points := [ 100 , 50 , 75 ] ;
42319: LD_ADDR_VAR 0 9
42323: PUSH
42324: LD_INT 100
42326: PUSH
42327: LD_INT 50
42329: PUSH
42330: LD_INT 75
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42338: LD_VAR 0 6
42342: PPUSH
42343: CALL_OW 257
42347: PUSH
42348: LD_INT 15
42350: EQUAL
42351: IFFALSE 42372
// points := [ 10 , 5 , 3 ] ;
42353: LD_ADDR_VAR 0 9
42357: PUSH
42358: LD_INT 10
42360: PUSH
42361: LD_INT 5
42363: PUSH
42364: LD_INT 3
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42372: LD_VAR 0 6
42376: PPUSH
42377: CALL_OW 257
42381: PUSH
42382: LD_INT 14
42384: EQUAL
42385: IFFALSE 42406
// points := [ 10 , 0 , 0 ] ;
42387: LD_ADDR_VAR 0 9
42391: PUSH
42392: LD_INT 10
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42406: LD_VAR 0 6
42410: PPUSH
42411: CALL_OW 257
42415: PUSH
42416: LD_INT 11
42418: EQUAL
42419: IFFALSE 42440
// points := [ 30 , 10 , 5 ] ;
42421: LD_ADDR_VAR 0 9
42425: PUSH
42426: LD_INT 30
42428: PUSH
42429: LD_INT 10
42431: PUSH
42432: LD_INT 5
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42440: LD_VAR 0 1
42444: PPUSH
42445: LD_INT 5
42447: PPUSH
42448: CALL_OW 321
42452: PUSH
42453: LD_INT 2
42455: EQUAL
42456: IFFALSE 42473
// bpoints := bpoints * 1.8 ;
42458: LD_ADDR_VAR 0 10
42462: PUSH
42463: LD_VAR 0 10
42467: PUSH
42468: LD_REAL  1.80000000000000E+0000
42471: MUL
42472: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42473: LD_VAR 0 6
42477: PPUSH
42478: CALL_OW 257
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: LD_INT 3
42491: PUSH
42492: LD_INT 4
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: IN
42501: PUSH
42502: LD_VAR 0 1
42506: PPUSH
42507: LD_INT 51
42509: PPUSH
42510: CALL_OW 321
42514: PUSH
42515: LD_INT 2
42517: EQUAL
42518: AND
42519: IFFALSE 42536
// bpoints := bpoints * 1.2 ;
42521: LD_ADDR_VAR 0 10
42525: PUSH
42526: LD_VAR 0 10
42530: PUSH
42531: LD_REAL  1.20000000000000E+0000
42534: MUL
42535: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42536: LD_VAR 0 6
42540: PPUSH
42541: CALL_OW 257
42545: PUSH
42546: LD_INT 5
42548: PUSH
42549: LD_INT 7
42551: PUSH
42552: LD_INT 9
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: IN
42560: PUSH
42561: LD_VAR 0 1
42565: PPUSH
42566: LD_INT 52
42568: PPUSH
42569: CALL_OW 321
42573: PUSH
42574: LD_INT 2
42576: EQUAL
42577: AND
42578: IFFALSE 42595
// bpoints := bpoints * 1.5 ;
42580: LD_ADDR_VAR 0 10
42584: PUSH
42585: LD_VAR 0 10
42589: PUSH
42590: LD_REAL  1.50000000000000E+0000
42593: MUL
42594: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42595: LD_VAR 0 1
42599: PPUSH
42600: LD_INT 66
42602: PPUSH
42603: CALL_OW 321
42607: PUSH
42608: LD_INT 2
42610: EQUAL
42611: IFFALSE 42628
// bpoints := bpoints * 1.1 ;
42613: LD_ADDR_VAR 0 10
42617: PUSH
42618: LD_VAR 0 10
42622: PUSH
42623: LD_REAL  1.10000000000000E+0000
42626: MUL
42627: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42628: LD_ADDR_VAR 0 10
42632: PUSH
42633: LD_VAR 0 10
42637: PUSH
42638: LD_VAR 0 6
42642: PPUSH
42643: LD_INT 1
42645: PPUSH
42646: CALL_OW 259
42650: PUSH
42651: LD_REAL  1.15000000000000E+0000
42654: MUL
42655: MUL
42656: ST_TO_ADDR
// end ; unit_vehicle :
42657: GO 43481
42659: LD_INT 2
42661: DOUBLE
42662: EQUAL
42663: IFTRUE 42667
42665: GO 43469
42667: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42668: LD_VAR 0 6
42672: PPUSH
42673: CALL_OW 264
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 42
42683: PUSH
42684: LD_INT 24
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: LIST
42691: IN
42692: IFFALSE 42713
// points := [ 25 , 5 , 3 ] ;
42694: LD_ADDR_VAR 0 9
42698: PUSH
42699: LD_INT 25
42701: PUSH
42702: LD_INT 5
42704: PUSH
42705: LD_INT 3
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42713: LD_VAR 0 6
42717: PPUSH
42718: CALL_OW 264
42722: PUSH
42723: LD_INT 4
42725: PUSH
42726: LD_INT 43
42728: PUSH
42729: LD_INT 25
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: LIST
42736: IN
42737: IFFALSE 42758
// points := [ 40 , 15 , 5 ] ;
42739: LD_ADDR_VAR 0 9
42743: PUSH
42744: LD_INT 40
42746: PUSH
42747: LD_INT 15
42749: PUSH
42750: LD_INT 5
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42758: LD_VAR 0 6
42762: PPUSH
42763: CALL_OW 264
42767: PUSH
42768: LD_INT 3
42770: PUSH
42771: LD_INT 23
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: IN
42778: IFFALSE 42799
// points := [ 7 , 25 , 8 ] ;
42780: LD_ADDR_VAR 0 9
42784: PUSH
42785: LD_INT 7
42787: PUSH
42788: LD_INT 25
42790: PUSH
42791: LD_INT 8
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42799: LD_VAR 0 6
42803: PPUSH
42804: CALL_OW 264
42808: PUSH
42809: LD_INT 5
42811: PUSH
42812: LD_INT 27
42814: PUSH
42815: LD_INT 44
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: IN
42823: IFFALSE 42844
// points := [ 14 , 50 , 16 ] ;
42825: LD_ADDR_VAR 0 9
42829: PUSH
42830: LD_INT 14
42832: PUSH
42833: LD_INT 50
42835: PUSH
42836: LD_INT 16
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42844: LD_VAR 0 6
42848: PPUSH
42849: CALL_OW 264
42853: PUSH
42854: LD_INT 6
42856: PUSH
42857: LD_INT 46
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: IN
42864: IFFALSE 42885
// points := [ 32 , 120 , 70 ] ;
42866: LD_ADDR_VAR 0 9
42870: PUSH
42871: LD_INT 32
42873: PUSH
42874: LD_INT 120
42876: PUSH
42877: LD_INT 70
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: LIST
42884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42885: LD_VAR 0 6
42889: PPUSH
42890: CALL_OW 264
42894: PUSH
42895: LD_INT 7
42897: PUSH
42898: LD_INT 28
42900: PUSH
42901: LD_INT 45
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: IN
42909: IFFALSE 42930
// points := [ 35 , 20 , 45 ] ;
42911: LD_ADDR_VAR 0 9
42915: PUSH
42916: LD_INT 35
42918: PUSH
42919: LD_INT 20
42921: PUSH
42922: LD_INT 45
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: LIST
42929: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42930: LD_VAR 0 6
42934: PPUSH
42935: CALL_OW 264
42939: PUSH
42940: LD_INT 47
42942: PUSH
42943: EMPTY
42944: LIST
42945: IN
42946: IFFALSE 42967
// points := [ 67 , 45 , 75 ] ;
42948: LD_ADDR_VAR 0 9
42952: PUSH
42953: LD_INT 67
42955: PUSH
42956: LD_INT 45
42958: PUSH
42959: LD_INT 75
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42967: LD_VAR 0 6
42971: PPUSH
42972: CALL_OW 264
42976: PUSH
42977: LD_INT 26
42979: PUSH
42980: EMPTY
42981: LIST
42982: IN
42983: IFFALSE 43004
// points := [ 120 , 30 , 80 ] ;
42985: LD_ADDR_VAR 0 9
42989: PUSH
42990: LD_INT 120
42992: PUSH
42993: LD_INT 30
42995: PUSH
42996: LD_INT 80
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43004: LD_VAR 0 6
43008: PPUSH
43009: CALL_OW 264
43013: PUSH
43014: LD_INT 22
43016: PUSH
43017: EMPTY
43018: LIST
43019: IN
43020: IFFALSE 43041
// points := [ 40 , 1 , 1 ] ;
43022: LD_ADDR_VAR 0 9
43026: PUSH
43027: LD_INT 40
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43041: LD_VAR 0 6
43045: PPUSH
43046: CALL_OW 264
43050: PUSH
43051: LD_INT 29
43053: PUSH
43054: EMPTY
43055: LIST
43056: IN
43057: IFFALSE 43078
// points := [ 70 , 200 , 400 ] ;
43059: LD_ADDR_VAR 0 9
43063: PUSH
43064: LD_INT 70
43066: PUSH
43067: LD_INT 200
43069: PUSH
43070: LD_INT 400
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43078: LD_VAR 0 6
43082: PPUSH
43083: CALL_OW 264
43087: PUSH
43088: LD_INT 14
43090: PUSH
43091: LD_INT 53
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: IN
43098: IFFALSE 43119
// points := [ 40 , 10 , 20 ] ;
43100: LD_ADDR_VAR 0 9
43104: PUSH
43105: LD_INT 40
43107: PUSH
43108: LD_INT 10
43110: PUSH
43111: LD_INT 20
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: LIST
43118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43119: LD_VAR 0 6
43123: PPUSH
43124: CALL_OW 264
43128: PUSH
43129: LD_INT 9
43131: PUSH
43132: EMPTY
43133: LIST
43134: IN
43135: IFFALSE 43156
// points := [ 5 , 70 , 20 ] ;
43137: LD_ADDR_VAR 0 9
43141: PUSH
43142: LD_INT 5
43144: PUSH
43145: LD_INT 70
43147: PUSH
43148: LD_INT 20
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: LIST
43155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43156: LD_VAR 0 6
43160: PPUSH
43161: CALL_OW 264
43165: PUSH
43166: LD_INT 10
43168: PUSH
43169: EMPTY
43170: LIST
43171: IN
43172: IFFALSE 43193
// points := [ 35 , 110 , 70 ] ;
43174: LD_ADDR_VAR 0 9
43178: PUSH
43179: LD_INT 35
43181: PUSH
43182: LD_INT 110
43184: PUSH
43185: LD_INT 70
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43193: LD_VAR 0 6
43197: PPUSH
43198: CALL_OW 265
43202: PUSH
43203: LD_INT 25
43205: EQUAL
43206: IFFALSE 43227
// points := [ 80 , 65 , 100 ] ;
43208: LD_ADDR_VAR 0 9
43212: PUSH
43213: LD_INT 80
43215: PUSH
43216: LD_INT 65
43218: PUSH
43219: LD_INT 100
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43227: LD_VAR 0 6
43231: PPUSH
43232: CALL_OW 263
43236: PUSH
43237: LD_INT 1
43239: EQUAL
43240: IFFALSE 43275
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43242: LD_ADDR_VAR 0 10
43246: PUSH
43247: LD_VAR 0 10
43251: PUSH
43252: LD_VAR 0 6
43256: PPUSH
43257: CALL_OW 311
43261: PPUSH
43262: LD_INT 3
43264: PPUSH
43265: CALL_OW 259
43269: PUSH
43270: LD_INT 4
43272: MUL
43273: MUL
43274: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43275: LD_VAR 0 6
43279: PPUSH
43280: CALL_OW 263
43284: PUSH
43285: LD_INT 2
43287: EQUAL
43288: IFFALSE 43339
// begin j := IsControledBy ( i ) ;
43290: LD_ADDR_VAR 0 7
43294: PUSH
43295: LD_VAR 0 6
43299: PPUSH
43300: CALL_OW 312
43304: ST_TO_ADDR
// if j then
43305: LD_VAR 0 7
43309: IFFALSE 43339
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43311: LD_ADDR_VAR 0 10
43315: PUSH
43316: LD_VAR 0 10
43320: PUSH
43321: LD_VAR 0 7
43325: PPUSH
43326: LD_INT 3
43328: PPUSH
43329: CALL_OW 259
43333: PUSH
43334: LD_INT 3
43336: MUL
43337: MUL
43338: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43339: LD_VAR 0 6
43343: PPUSH
43344: CALL_OW 264
43348: PUSH
43349: LD_INT 5
43351: PUSH
43352: LD_INT 6
43354: PUSH
43355: LD_INT 46
43357: PUSH
43358: LD_INT 44
43360: PUSH
43361: LD_INT 47
43363: PUSH
43364: LD_INT 45
43366: PUSH
43367: LD_INT 28
43369: PUSH
43370: LD_INT 7
43372: PUSH
43373: LD_INT 27
43375: PUSH
43376: LD_INT 29
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: IN
43391: PUSH
43392: LD_VAR 0 1
43396: PPUSH
43397: LD_INT 52
43399: PPUSH
43400: CALL_OW 321
43404: PUSH
43405: LD_INT 2
43407: EQUAL
43408: AND
43409: IFFALSE 43426
// bpoints := bpoints * 1.2 ;
43411: LD_ADDR_VAR 0 10
43415: PUSH
43416: LD_VAR 0 10
43420: PUSH
43421: LD_REAL  1.20000000000000E+0000
43424: MUL
43425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43426: LD_VAR 0 6
43430: PPUSH
43431: CALL_OW 264
43435: PUSH
43436: LD_INT 6
43438: PUSH
43439: LD_INT 46
43441: PUSH
43442: LD_INT 47
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: LIST
43449: IN
43450: IFFALSE 43467
// bpoints := bpoints * 1.2 ;
43452: LD_ADDR_VAR 0 10
43456: PUSH
43457: LD_VAR 0 10
43461: PUSH
43462: LD_REAL  1.20000000000000E+0000
43465: MUL
43466: ST_TO_ADDR
// end ; unit_building :
43467: GO 43481
43469: LD_INT 3
43471: DOUBLE
43472: EQUAL
43473: IFTRUE 43477
43475: GO 43480
43477: POP
// ; end ;
43478: GO 43481
43480: POP
// for j = 1 to 3 do
43481: LD_ADDR_VAR 0 7
43485: PUSH
43486: DOUBLE
43487: LD_INT 1
43489: DEC
43490: ST_TO_ADDR
43491: LD_INT 3
43493: PUSH
43494: FOR_TO
43495: IFFALSE 43548
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43497: LD_ADDR_VAR 0 5
43501: PUSH
43502: LD_VAR 0 5
43506: PPUSH
43507: LD_VAR 0 7
43511: PPUSH
43512: LD_VAR 0 5
43516: PUSH
43517: LD_VAR 0 7
43521: ARRAY
43522: PUSH
43523: LD_VAR 0 9
43527: PUSH
43528: LD_VAR 0 7
43532: ARRAY
43533: PUSH
43534: LD_VAR 0 10
43538: MUL
43539: PLUS
43540: PPUSH
43541: CALL_OW 1
43545: ST_TO_ADDR
43546: GO 43494
43548: POP
43549: POP
// end ;
43550: GO 42033
43552: POP
43553: POP
// result := Replace ( result , 4 , tmp ) ;
43554: LD_ADDR_VAR 0 5
43558: PUSH
43559: LD_VAR 0 5
43563: PPUSH
43564: LD_INT 4
43566: PPUSH
43567: LD_VAR 0 8
43571: PPUSH
43572: CALL_OW 1
43576: ST_TO_ADDR
// end ;
43577: LD_VAR 0 5
43581: RET
// export function DangerAtRange ( unit , range ) ; begin
43582: LD_INT 0
43584: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43585: LD_ADDR_VAR 0 3
43589: PUSH
43590: LD_VAR 0 1
43594: PPUSH
43595: CALL_OW 255
43599: PPUSH
43600: LD_VAR 0 1
43604: PPUSH
43605: CALL_OW 250
43609: PPUSH
43610: LD_VAR 0 1
43614: PPUSH
43615: CALL_OW 251
43619: PPUSH
43620: LD_VAR 0 2
43624: PPUSH
43625: CALL 41885 0 4
43629: ST_TO_ADDR
// end ;
43630: LD_VAR 0 3
43634: RET
// export function DangerInArea ( side , area ) ; begin
43635: LD_INT 0
43637: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43638: LD_ADDR_VAR 0 3
43642: PUSH
43643: LD_VAR 0 2
43647: PPUSH
43648: LD_INT 81
43650: PUSH
43651: LD_VAR 0 1
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PPUSH
43660: CALL_OW 70
43664: ST_TO_ADDR
// end ;
43665: LD_VAR 0 3
43669: RET
// export function IsExtension ( b ) ; begin
43670: LD_INT 0
43672: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43673: LD_ADDR_VAR 0 2
43677: PUSH
43678: LD_VAR 0 1
43682: PUSH
43683: LD_INT 23
43685: PUSH
43686: LD_INT 20
43688: PUSH
43689: LD_INT 22
43691: PUSH
43692: LD_INT 17
43694: PUSH
43695: LD_INT 24
43697: PUSH
43698: LD_INT 21
43700: PUSH
43701: LD_INT 19
43703: PUSH
43704: LD_INT 16
43706: PUSH
43707: LD_INT 25
43709: PUSH
43710: LD_INT 18
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: IN
43725: ST_TO_ADDR
// end ;
43726: LD_VAR 0 2
43730: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43731: LD_INT 0
43733: PPUSH
43734: PPUSH
43735: PPUSH
// result := [ ] ;
43736: LD_ADDR_VAR 0 4
43740: PUSH
43741: EMPTY
43742: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43743: LD_ADDR_VAR 0 5
43747: PUSH
43748: LD_VAR 0 2
43752: PPUSH
43753: LD_INT 21
43755: PUSH
43756: LD_INT 3
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PPUSH
43763: CALL_OW 70
43767: ST_TO_ADDR
// if not tmp then
43768: LD_VAR 0 5
43772: NOT
43773: IFFALSE 43777
// exit ;
43775: GO 43841
// if checkLink then
43777: LD_VAR 0 3
43781: IFFALSE 43831
// begin for i in tmp do
43783: LD_ADDR_VAR 0 6
43787: PUSH
43788: LD_VAR 0 5
43792: PUSH
43793: FOR_IN
43794: IFFALSE 43829
// if GetBase ( i ) <> base then
43796: LD_VAR 0 6
43800: PPUSH
43801: CALL_OW 274
43805: PUSH
43806: LD_VAR 0 1
43810: NONEQUAL
43811: IFFALSE 43827
// ComLinkToBase ( base , i ) ;
43813: LD_VAR 0 1
43817: PPUSH
43818: LD_VAR 0 6
43822: PPUSH
43823: CALL_OW 169
43827: GO 43793
43829: POP
43830: POP
// end ; result := tmp ;
43831: LD_ADDR_VAR 0 4
43835: PUSH
43836: LD_VAR 0 5
43840: ST_TO_ADDR
// end ;
43841: LD_VAR 0 4
43845: RET
// export function ComComplete ( units , b ) ; var i ; begin
43846: LD_INT 0
43848: PPUSH
43849: PPUSH
// if not units then
43850: LD_VAR 0 1
43854: NOT
43855: IFFALSE 43859
// exit ;
43857: GO 43949
// for i in units do
43859: LD_ADDR_VAR 0 4
43863: PUSH
43864: LD_VAR 0 1
43868: PUSH
43869: FOR_IN
43870: IFFALSE 43947
// if BuildingStatus ( b ) = bs_build then
43872: LD_VAR 0 2
43876: PPUSH
43877: CALL_OW 461
43881: PUSH
43882: LD_INT 1
43884: EQUAL
43885: IFFALSE 43945
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43887: LD_VAR 0 4
43891: PPUSH
43892: LD_STRING h
43894: PUSH
43895: LD_VAR 0 2
43899: PPUSH
43900: CALL_OW 250
43904: PUSH
43905: LD_VAR 0 2
43909: PPUSH
43910: CALL_OW 251
43914: PUSH
43915: LD_VAR 0 2
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: PUSH
43938: EMPTY
43939: LIST
43940: PPUSH
43941: CALL_OW 446
43945: GO 43869
43947: POP
43948: POP
// end ;
43949: LD_VAR 0 3
43953: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43954: LD_INT 0
43956: PPUSH
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
43961: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43962: LD_VAR 0 1
43966: NOT
43967: PUSH
43968: LD_VAR 0 1
43972: PPUSH
43973: CALL_OW 263
43977: PUSH
43978: LD_INT 2
43980: EQUAL
43981: NOT
43982: OR
43983: IFFALSE 43987
// exit ;
43985: GO 44303
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43987: LD_ADDR_VAR 0 6
43991: PUSH
43992: LD_INT 22
43994: PUSH
43995: LD_VAR 0 1
43999: PPUSH
44000: CALL_OW 255
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 30
44014: PUSH
44015: LD_INT 36
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 34
44024: PUSH
44025: LD_INT 31
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: LIST
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PPUSH
44041: CALL_OW 69
44045: ST_TO_ADDR
// if not tmp then
44046: LD_VAR 0 6
44050: NOT
44051: IFFALSE 44055
// exit ;
44053: GO 44303
// result := [ ] ;
44055: LD_ADDR_VAR 0 2
44059: PUSH
44060: EMPTY
44061: ST_TO_ADDR
// for i in tmp do
44062: LD_ADDR_VAR 0 3
44066: PUSH
44067: LD_VAR 0 6
44071: PUSH
44072: FOR_IN
44073: IFFALSE 44144
// begin t := UnitsInside ( i ) ;
44075: LD_ADDR_VAR 0 4
44079: PUSH
44080: LD_VAR 0 3
44084: PPUSH
44085: CALL_OW 313
44089: ST_TO_ADDR
// if t then
44090: LD_VAR 0 4
44094: IFFALSE 44142
// for j in t do
44096: LD_ADDR_VAR 0 7
44100: PUSH
44101: LD_VAR 0 4
44105: PUSH
44106: FOR_IN
44107: IFFALSE 44140
// result := Insert ( result , result + 1 , j ) ;
44109: LD_ADDR_VAR 0 2
44113: PUSH
44114: LD_VAR 0 2
44118: PPUSH
44119: LD_VAR 0 2
44123: PUSH
44124: LD_INT 1
44126: PLUS
44127: PPUSH
44128: LD_VAR 0 7
44132: PPUSH
44133: CALL_OW 2
44137: ST_TO_ADDR
44138: GO 44106
44140: POP
44141: POP
// end ;
44142: GO 44072
44144: POP
44145: POP
// if not result then
44146: LD_VAR 0 2
44150: NOT
44151: IFFALSE 44155
// exit ;
44153: GO 44303
// mech := result [ 1 ] ;
44155: LD_ADDR_VAR 0 5
44159: PUSH
44160: LD_VAR 0 2
44164: PUSH
44165: LD_INT 1
44167: ARRAY
44168: ST_TO_ADDR
// if result > 1 then
44169: LD_VAR 0 2
44173: PUSH
44174: LD_INT 1
44176: GREATER
44177: IFFALSE 44289
// for i = 2 to result do
44179: LD_ADDR_VAR 0 3
44183: PUSH
44184: DOUBLE
44185: LD_INT 2
44187: DEC
44188: ST_TO_ADDR
44189: LD_VAR 0 2
44193: PUSH
44194: FOR_TO
44195: IFFALSE 44287
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44197: LD_ADDR_VAR 0 4
44201: PUSH
44202: LD_VAR 0 2
44206: PUSH
44207: LD_VAR 0 3
44211: ARRAY
44212: PPUSH
44213: LD_INT 3
44215: PPUSH
44216: CALL_OW 259
44220: PUSH
44221: LD_VAR 0 2
44225: PUSH
44226: LD_VAR 0 3
44230: ARRAY
44231: PPUSH
44232: CALL_OW 432
44236: MINUS
44237: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44238: LD_VAR 0 4
44242: PUSH
44243: LD_VAR 0 5
44247: PPUSH
44248: LD_INT 3
44250: PPUSH
44251: CALL_OW 259
44255: PUSH
44256: LD_VAR 0 5
44260: PPUSH
44261: CALL_OW 432
44265: MINUS
44266: GREATEREQUAL
44267: IFFALSE 44285
// mech := result [ i ] ;
44269: LD_ADDR_VAR 0 5
44273: PUSH
44274: LD_VAR 0 2
44278: PUSH
44279: LD_VAR 0 3
44283: ARRAY
44284: ST_TO_ADDR
// end ;
44285: GO 44194
44287: POP
44288: POP
// ComLinkTo ( vehicle , mech ) ;
44289: LD_VAR 0 1
44293: PPUSH
44294: LD_VAR 0 5
44298: PPUSH
44299: CALL_OW 135
// end ;
44303: LD_VAR 0 2
44307: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44308: LD_INT 0
44310: PPUSH
44311: PPUSH
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
44319: PPUSH
44320: PPUSH
44321: PPUSH
44322: PPUSH
// result := [ ] ;
44323: LD_ADDR_VAR 0 7
44327: PUSH
44328: EMPTY
44329: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44330: LD_VAR 0 1
44334: PPUSH
44335: CALL_OW 266
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: IN
44350: NOT
44351: IFFALSE 44355
// exit ;
44353: GO 45989
// if name then
44355: LD_VAR 0 3
44359: IFFALSE 44375
// SetBName ( base_dep , name ) ;
44361: LD_VAR 0 1
44365: PPUSH
44366: LD_VAR 0 3
44370: PPUSH
44371: CALL_OW 500
// base := GetBase ( base_dep ) ;
44375: LD_ADDR_VAR 0 15
44379: PUSH
44380: LD_VAR 0 1
44384: PPUSH
44385: CALL_OW 274
44389: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44390: LD_ADDR_VAR 0 16
44394: PUSH
44395: LD_VAR 0 1
44399: PPUSH
44400: CALL_OW 255
44404: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44405: LD_ADDR_VAR 0 17
44409: PUSH
44410: LD_VAR 0 1
44414: PPUSH
44415: CALL_OW 248
44419: ST_TO_ADDR
// if sources then
44420: LD_VAR 0 5
44424: IFFALSE 44471
// for i = 1 to 3 do
44426: LD_ADDR_VAR 0 8
44430: PUSH
44431: DOUBLE
44432: LD_INT 1
44434: DEC
44435: ST_TO_ADDR
44436: LD_INT 3
44438: PUSH
44439: FOR_TO
44440: IFFALSE 44469
// AddResourceType ( base , i , sources [ i ] ) ;
44442: LD_VAR 0 15
44446: PPUSH
44447: LD_VAR 0 8
44451: PPUSH
44452: LD_VAR 0 5
44456: PUSH
44457: LD_VAR 0 8
44461: ARRAY
44462: PPUSH
44463: CALL_OW 276
44467: GO 44439
44469: POP
44470: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44471: LD_ADDR_VAR 0 18
44475: PUSH
44476: LD_VAR 0 15
44480: PPUSH
44481: LD_VAR 0 2
44485: PPUSH
44486: LD_INT 1
44488: PPUSH
44489: CALL 43731 0 3
44493: ST_TO_ADDR
// InitHc ;
44494: CALL_OW 19
// InitUc ;
44498: CALL_OW 18
// uc_side := side ;
44502: LD_ADDR_OWVAR 20
44506: PUSH
44507: LD_VAR 0 16
44511: ST_TO_ADDR
// uc_nation := nation ;
44512: LD_ADDR_OWVAR 21
44516: PUSH
44517: LD_VAR 0 17
44521: ST_TO_ADDR
// if buildings then
44522: LD_VAR 0 18
44526: IFFALSE 45848
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44528: LD_ADDR_VAR 0 19
44532: PUSH
44533: LD_VAR 0 18
44537: PPUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 30
44543: PUSH
44544: LD_INT 29
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 30
44553: PUSH
44554: LD_INT 30
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: PPUSH
44566: CALL_OW 72
44570: ST_TO_ADDR
// if tmp then
44571: LD_VAR 0 19
44575: IFFALSE 44623
// for i in tmp do
44577: LD_ADDR_VAR 0 8
44581: PUSH
44582: LD_VAR 0 19
44586: PUSH
44587: FOR_IN
44588: IFFALSE 44621
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44590: LD_VAR 0 8
44594: PPUSH
44595: CALL_OW 250
44599: PPUSH
44600: LD_VAR 0 8
44604: PPUSH
44605: CALL_OW 251
44609: PPUSH
44610: LD_VAR 0 16
44614: PPUSH
44615: CALL_OW 441
44619: GO 44587
44621: POP
44622: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44623: LD_VAR 0 18
44627: PPUSH
44628: LD_INT 2
44630: PUSH
44631: LD_INT 30
44633: PUSH
44634: LD_INT 32
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 30
44643: PUSH
44644: LD_INT 33
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: PPUSH
44656: CALL_OW 72
44660: IFFALSE 44748
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44662: LD_ADDR_VAR 0 8
44666: PUSH
44667: LD_VAR 0 18
44671: PPUSH
44672: LD_INT 2
44674: PUSH
44675: LD_INT 30
44677: PUSH
44678: LD_INT 32
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 30
44687: PUSH
44688: LD_INT 33
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: LIST
44699: PPUSH
44700: CALL_OW 72
44704: PUSH
44705: FOR_IN
44706: IFFALSE 44746
// begin if not GetBWeapon ( i ) then
44708: LD_VAR 0 8
44712: PPUSH
44713: CALL_OW 269
44717: NOT
44718: IFFALSE 44744
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44720: LD_VAR 0 8
44724: PPUSH
44725: LD_VAR 0 8
44729: PPUSH
44730: LD_VAR 0 2
44734: PPUSH
44735: CALL 45994 0 2
44739: PPUSH
44740: CALL_OW 431
// end ;
44744: GO 44705
44746: POP
44747: POP
// end ; for i = 1 to personel do
44748: LD_ADDR_VAR 0 8
44752: PUSH
44753: DOUBLE
44754: LD_INT 1
44756: DEC
44757: ST_TO_ADDR
44758: LD_VAR 0 6
44762: PUSH
44763: FOR_TO
44764: IFFALSE 45828
// begin if i > 4 then
44766: LD_VAR 0 8
44770: PUSH
44771: LD_INT 4
44773: GREATER
44774: IFFALSE 44778
// break ;
44776: GO 45828
// case i of 1 :
44778: LD_VAR 0 8
44782: PUSH
44783: LD_INT 1
44785: DOUBLE
44786: EQUAL
44787: IFTRUE 44791
44789: GO 44871
44791: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44792: LD_ADDR_VAR 0 12
44796: PUSH
44797: LD_VAR 0 18
44801: PPUSH
44802: LD_INT 22
44804: PUSH
44805: LD_VAR 0 16
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 58
44816: PUSH
44817: EMPTY
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 30
44825: PUSH
44826: LD_INT 32
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 30
44835: PUSH
44836: LD_INT 4
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 30
44845: PUSH
44846: LD_INT 5
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: PPUSH
44864: CALL_OW 72
44868: ST_TO_ADDR
44869: GO 45093
44871: LD_INT 2
44873: DOUBLE
44874: EQUAL
44875: IFTRUE 44879
44877: GO 44941
44879: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44880: LD_ADDR_VAR 0 12
44884: PUSH
44885: LD_VAR 0 18
44889: PPUSH
44890: LD_INT 22
44892: PUSH
44893: LD_VAR 0 16
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 30
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 30
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PPUSH
44934: CALL_OW 72
44938: ST_TO_ADDR
44939: GO 45093
44941: LD_INT 3
44943: DOUBLE
44944: EQUAL
44945: IFTRUE 44949
44947: GO 45011
44949: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44950: LD_ADDR_VAR 0 12
44954: PUSH
44955: LD_VAR 0 18
44959: PPUSH
44960: LD_INT 22
44962: PUSH
44963: LD_VAR 0 16
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: LD_INT 30
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 30
44987: PUSH
44988: LD_INT 3
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PPUSH
45004: CALL_OW 72
45008: ST_TO_ADDR
45009: GO 45093
45011: LD_INT 4
45013: DOUBLE
45014: EQUAL
45015: IFTRUE 45019
45017: GO 45092
45019: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45020: LD_ADDR_VAR 0 12
45024: PUSH
45025: LD_VAR 0 18
45029: PPUSH
45030: LD_INT 22
45032: PUSH
45033: LD_VAR 0 16
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: LD_INT 30
45047: PUSH
45048: LD_INT 6
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 30
45057: PUSH
45058: LD_INT 7
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 30
45067: PUSH
45068: LD_INT 8
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PPUSH
45085: CALL_OW 72
45089: ST_TO_ADDR
45090: GO 45093
45092: POP
// if i = 1 then
45093: LD_VAR 0 8
45097: PUSH
45098: LD_INT 1
45100: EQUAL
45101: IFFALSE 45212
// begin tmp := [ ] ;
45103: LD_ADDR_VAR 0 19
45107: PUSH
45108: EMPTY
45109: ST_TO_ADDR
// for j in f do
45110: LD_ADDR_VAR 0 9
45114: PUSH
45115: LD_VAR 0 12
45119: PUSH
45120: FOR_IN
45121: IFFALSE 45194
// if GetBType ( j ) = b_bunker then
45123: LD_VAR 0 9
45127: PPUSH
45128: CALL_OW 266
45132: PUSH
45133: LD_INT 32
45135: EQUAL
45136: IFFALSE 45163
// tmp := Insert ( tmp , 1 , j ) else
45138: LD_ADDR_VAR 0 19
45142: PUSH
45143: LD_VAR 0 19
45147: PPUSH
45148: LD_INT 1
45150: PPUSH
45151: LD_VAR 0 9
45155: PPUSH
45156: CALL_OW 2
45160: ST_TO_ADDR
45161: GO 45192
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45163: LD_ADDR_VAR 0 19
45167: PUSH
45168: LD_VAR 0 19
45172: PPUSH
45173: LD_VAR 0 19
45177: PUSH
45178: LD_INT 1
45180: PLUS
45181: PPUSH
45182: LD_VAR 0 9
45186: PPUSH
45187: CALL_OW 2
45191: ST_TO_ADDR
45192: GO 45120
45194: POP
45195: POP
// if tmp then
45196: LD_VAR 0 19
45200: IFFALSE 45212
// f := tmp ;
45202: LD_ADDR_VAR 0 12
45206: PUSH
45207: LD_VAR 0 19
45211: ST_TO_ADDR
// end ; x := personel [ i ] ;
45212: LD_ADDR_VAR 0 13
45216: PUSH
45217: LD_VAR 0 6
45221: PUSH
45222: LD_VAR 0 8
45226: ARRAY
45227: ST_TO_ADDR
// if x = - 1 then
45228: LD_VAR 0 13
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: EQUAL
45237: IFFALSE 45446
// begin for j in f do
45239: LD_ADDR_VAR 0 9
45243: PUSH
45244: LD_VAR 0 12
45248: PUSH
45249: FOR_IN
45250: IFFALSE 45442
// repeat InitHc ;
45252: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45256: LD_VAR 0 9
45260: PPUSH
45261: CALL_OW 266
45265: PUSH
45266: LD_INT 5
45268: EQUAL
45269: IFFALSE 45339
// begin if UnitsInside ( j ) < 3 then
45271: LD_VAR 0 9
45275: PPUSH
45276: CALL_OW 313
45280: PUSH
45281: LD_INT 3
45283: LESS
45284: IFFALSE 45320
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45286: LD_INT 0
45288: PPUSH
45289: LD_INT 5
45291: PUSH
45292: LD_INT 8
45294: PUSH
45295: LD_INT 9
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: PUSH
45303: LD_VAR 0 17
45307: ARRAY
45308: PPUSH
45309: LD_VAR 0 4
45313: PPUSH
45314: CALL_OW 380
45318: GO 45337
// PrepareHuman ( false , i , skill ) ;
45320: LD_INT 0
45322: PPUSH
45323: LD_VAR 0 8
45327: PPUSH
45328: LD_VAR 0 4
45332: PPUSH
45333: CALL_OW 380
// end else
45337: GO 45356
// PrepareHuman ( false , i , skill ) ;
45339: LD_INT 0
45341: PPUSH
45342: LD_VAR 0 8
45346: PPUSH
45347: LD_VAR 0 4
45351: PPUSH
45352: CALL_OW 380
// un := CreateHuman ;
45356: LD_ADDR_VAR 0 14
45360: PUSH
45361: CALL_OW 44
45365: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45366: LD_ADDR_VAR 0 7
45370: PUSH
45371: LD_VAR 0 7
45375: PPUSH
45376: LD_INT 1
45378: PPUSH
45379: LD_VAR 0 14
45383: PPUSH
45384: CALL_OW 2
45388: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45389: LD_VAR 0 14
45393: PPUSH
45394: LD_VAR 0 9
45398: PPUSH
45399: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45403: LD_VAR 0 9
45407: PPUSH
45408: CALL_OW 313
45412: PUSH
45413: LD_INT 6
45415: EQUAL
45416: PUSH
45417: LD_VAR 0 9
45421: PPUSH
45422: CALL_OW 266
45426: PUSH
45427: LD_INT 32
45429: PUSH
45430: LD_INT 31
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: IN
45437: OR
45438: IFFALSE 45252
45440: GO 45249
45442: POP
45443: POP
// end else
45444: GO 45826
// for j = 1 to x do
45446: LD_ADDR_VAR 0 9
45450: PUSH
45451: DOUBLE
45452: LD_INT 1
45454: DEC
45455: ST_TO_ADDR
45456: LD_VAR 0 13
45460: PUSH
45461: FOR_TO
45462: IFFALSE 45824
// begin InitHc ;
45464: CALL_OW 19
// if not f then
45468: LD_VAR 0 12
45472: NOT
45473: IFFALSE 45562
// begin PrepareHuman ( false , i , skill ) ;
45475: LD_INT 0
45477: PPUSH
45478: LD_VAR 0 8
45482: PPUSH
45483: LD_VAR 0 4
45487: PPUSH
45488: CALL_OW 380
// un := CreateHuman ;
45492: LD_ADDR_VAR 0 14
45496: PUSH
45497: CALL_OW 44
45501: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45502: LD_ADDR_VAR 0 7
45506: PUSH
45507: LD_VAR 0 7
45511: PPUSH
45512: LD_INT 1
45514: PPUSH
45515: LD_VAR 0 14
45519: PPUSH
45520: CALL_OW 2
45524: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45525: LD_VAR 0 14
45529: PPUSH
45530: LD_VAR 0 1
45534: PPUSH
45535: CALL_OW 250
45539: PPUSH
45540: LD_VAR 0 1
45544: PPUSH
45545: CALL_OW 251
45549: PPUSH
45550: LD_INT 10
45552: PPUSH
45553: LD_INT 0
45555: PPUSH
45556: CALL_OW 50
// continue ;
45560: GO 45461
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45562: LD_VAR 0 12
45566: PUSH
45567: LD_INT 1
45569: ARRAY
45570: PPUSH
45571: CALL_OW 313
45575: PUSH
45576: LD_VAR 0 12
45580: PUSH
45581: LD_INT 1
45583: ARRAY
45584: PPUSH
45585: CALL_OW 266
45589: PUSH
45590: LD_INT 32
45592: PUSH
45593: LD_INT 31
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: IN
45600: AND
45601: PUSH
45602: LD_VAR 0 12
45606: PUSH
45607: LD_INT 1
45609: ARRAY
45610: PPUSH
45611: CALL_OW 313
45615: PUSH
45616: LD_INT 6
45618: EQUAL
45619: OR
45620: IFFALSE 45640
// f := Delete ( f , 1 ) ;
45622: LD_ADDR_VAR 0 12
45626: PUSH
45627: LD_VAR 0 12
45631: PPUSH
45632: LD_INT 1
45634: PPUSH
45635: CALL_OW 3
45639: ST_TO_ADDR
// if not f then
45640: LD_VAR 0 12
45644: NOT
45645: IFFALSE 45663
// begin x := x + 2 ;
45647: LD_ADDR_VAR 0 13
45651: PUSH
45652: LD_VAR 0 13
45656: PUSH
45657: LD_INT 2
45659: PLUS
45660: ST_TO_ADDR
// continue ;
45661: GO 45461
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45663: LD_VAR 0 12
45667: PUSH
45668: LD_INT 1
45670: ARRAY
45671: PPUSH
45672: CALL_OW 266
45676: PUSH
45677: LD_INT 5
45679: EQUAL
45680: IFFALSE 45754
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45682: LD_VAR 0 12
45686: PUSH
45687: LD_INT 1
45689: ARRAY
45690: PPUSH
45691: CALL_OW 313
45695: PUSH
45696: LD_INT 3
45698: LESS
45699: IFFALSE 45735
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45701: LD_INT 0
45703: PPUSH
45704: LD_INT 5
45706: PUSH
45707: LD_INT 8
45709: PUSH
45710: LD_INT 9
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: PUSH
45718: LD_VAR 0 17
45722: ARRAY
45723: PPUSH
45724: LD_VAR 0 4
45728: PPUSH
45729: CALL_OW 380
45733: GO 45752
// PrepareHuman ( false , i , skill ) ;
45735: LD_INT 0
45737: PPUSH
45738: LD_VAR 0 8
45742: PPUSH
45743: LD_VAR 0 4
45747: PPUSH
45748: CALL_OW 380
// end else
45752: GO 45771
// PrepareHuman ( false , i , skill ) ;
45754: LD_INT 0
45756: PPUSH
45757: LD_VAR 0 8
45761: PPUSH
45762: LD_VAR 0 4
45766: PPUSH
45767: CALL_OW 380
// un := CreateHuman ;
45771: LD_ADDR_VAR 0 14
45775: PUSH
45776: CALL_OW 44
45780: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45781: LD_ADDR_VAR 0 7
45785: PUSH
45786: LD_VAR 0 7
45790: PPUSH
45791: LD_INT 1
45793: PPUSH
45794: LD_VAR 0 14
45798: PPUSH
45799: CALL_OW 2
45803: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45804: LD_VAR 0 14
45808: PPUSH
45809: LD_VAR 0 12
45813: PUSH
45814: LD_INT 1
45816: ARRAY
45817: PPUSH
45818: CALL_OW 52
// end ;
45822: GO 45461
45824: POP
45825: POP
// end ;
45826: GO 44763
45828: POP
45829: POP
// result := result ^ buildings ;
45830: LD_ADDR_VAR 0 7
45834: PUSH
45835: LD_VAR 0 7
45839: PUSH
45840: LD_VAR 0 18
45844: ADD
45845: ST_TO_ADDR
// end else
45846: GO 45989
// begin for i = 1 to personel do
45848: LD_ADDR_VAR 0 8
45852: PUSH
45853: DOUBLE
45854: LD_INT 1
45856: DEC
45857: ST_TO_ADDR
45858: LD_VAR 0 6
45862: PUSH
45863: FOR_TO
45864: IFFALSE 45987
// begin if i > 4 then
45866: LD_VAR 0 8
45870: PUSH
45871: LD_INT 4
45873: GREATER
45874: IFFALSE 45878
// break ;
45876: GO 45987
// x := personel [ i ] ;
45878: LD_ADDR_VAR 0 13
45882: PUSH
45883: LD_VAR 0 6
45887: PUSH
45888: LD_VAR 0 8
45892: ARRAY
45893: ST_TO_ADDR
// if x = - 1 then
45894: LD_VAR 0 13
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: EQUAL
45903: IFFALSE 45907
// continue ;
45905: GO 45863
// PrepareHuman ( false , i , skill ) ;
45907: LD_INT 0
45909: PPUSH
45910: LD_VAR 0 8
45914: PPUSH
45915: LD_VAR 0 4
45919: PPUSH
45920: CALL_OW 380
// un := CreateHuman ;
45924: LD_ADDR_VAR 0 14
45928: PUSH
45929: CALL_OW 44
45933: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45934: LD_VAR 0 14
45938: PPUSH
45939: LD_VAR 0 1
45943: PPUSH
45944: CALL_OW 250
45948: PPUSH
45949: LD_VAR 0 1
45953: PPUSH
45954: CALL_OW 251
45958: PPUSH
45959: LD_INT 10
45961: PPUSH
45962: LD_INT 0
45964: PPUSH
45965: CALL_OW 50
// result := result ^ un ;
45969: LD_ADDR_VAR 0 7
45973: PUSH
45974: LD_VAR 0 7
45978: PUSH
45979: LD_VAR 0 14
45983: ADD
45984: ST_TO_ADDR
// end ;
45985: GO 45863
45987: POP
45988: POP
// end ; end ;
45989: LD_VAR 0 7
45993: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45994: LD_INT 0
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
46010: PPUSH
46011: PPUSH
// result := false ;
46012: LD_ADDR_VAR 0 3
46016: PUSH
46017: LD_INT 0
46019: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46020: LD_VAR 0 1
46024: NOT
46025: PUSH
46026: LD_VAR 0 1
46030: PPUSH
46031: CALL_OW 266
46035: PUSH
46036: LD_INT 32
46038: PUSH
46039: LD_INT 33
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: IN
46046: NOT
46047: OR
46048: IFFALSE 46052
// exit ;
46050: GO 47191
// nat := GetNation ( tower ) ;
46052: LD_ADDR_VAR 0 12
46056: PUSH
46057: LD_VAR 0 1
46061: PPUSH
46062: CALL_OW 248
46066: ST_TO_ADDR
// side := GetSide ( tower ) ;
46067: LD_ADDR_VAR 0 16
46071: PUSH
46072: LD_VAR 0 1
46076: PPUSH
46077: CALL_OW 255
46081: ST_TO_ADDR
// x := GetX ( tower ) ;
46082: LD_ADDR_VAR 0 10
46086: PUSH
46087: LD_VAR 0 1
46091: PPUSH
46092: CALL_OW 250
46096: ST_TO_ADDR
// y := GetY ( tower ) ;
46097: LD_ADDR_VAR 0 11
46101: PUSH
46102: LD_VAR 0 1
46106: PPUSH
46107: CALL_OW 251
46111: ST_TO_ADDR
// if not x or not y then
46112: LD_VAR 0 10
46116: NOT
46117: PUSH
46118: LD_VAR 0 11
46122: NOT
46123: OR
46124: IFFALSE 46128
// exit ;
46126: GO 47191
// weapon := 0 ;
46128: LD_ADDR_VAR 0 18
46132: PUSH
46133: LD_INT 0
46135: ST_TO_ADDR
// fac_list := [ ] ;
46136: LD_ADDR_VAR 0 17
46140: PUSH
46141: EMPTY
46142: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46143: LD_ADDR_VAR 0 6
46147: PUSH
46148: LD_VAR 0 1
46152: PPUSH
46153: CALL_OW 274
46157: PPUSH
46158: LD_VAR 0 2
46162: PPUSH
46163: LD_INT 0
46165: PPUSH
46166: CALL 43731 0 3
46170: PPUSH
46171: LD_INT 30
46173: PUSH
46174: LD_INT 3
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PPUSH
46181: CALL_OW 72
46185: ST_TO_ADDR
// if not factories then
46186: LD_VAR 0 6
46190: NOT
46191: IFFALSE 46195
// exit ;
46193: GO 47191
// for i in factories do
46195: LD_ADDR_VAR 0 8
46199: PUSH
46200: LD_VAR 0 6
46204: PUSH
46205: FOR_IN
46206: IFFALSE 46231
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46208: LD_ADDR_VAR 0 17
46212: PUSH
46213: LD_VAR 0 17
46217: PUSH
46218: LD_VAR 0 8
46222: PPUSH
46223: CALL_OW 478
46227: UNION
46228: ST_TO_ADDR
46229: GO 46205
46231: POP
46232: POP
// if not fac_list then
46233: LD_VAR 0 17
46237: NOT
46238: IFFALSE 46242
// exit ;
46240: GO 47191
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46242: LD_ADDR_VAR 0 5
46246: PUSH
46247: LD_INT 4
46249: PUSH
46250: LD_INT 5
46252: PUSH
46253: LD_INT 9
46255: PUSH
46256: LD_INT 10
46258: PUSH
46259: LD_INT 6
46261: PUSH
46262: LD_INT 7
46264: PUSH
46265: LD_INT 11
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 27
46279: PUSH
46280: LD_INT 28
46282: PUSH
46283: LD_INT 26
46285: PUSH
46286: LD_INT 30
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 43
46297: PUSH
46298: LD_INT 44
46300: PUSH
46301: LD_INT 46
46303: PUSH
46304: LD_INT 45
46306: PUSH
46307: LD_INT 47
46309: PUSH
46310: LD_INT 49
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: LIST
46325: PUSH
46326: LD_VAR 0 12
46330: ARRAY
46331: ST_TO_ADDR
// for i in list do
46332: LD_ADDR_VAR 0 8
46336: PUSH
46337: LD_VAR 0 5
46341: PUSH
46342: FOR_IN
46343: IFFALSE 46376
// if not i in fac_list then
46345: LD_VAR 0 8
46349: PUSH
46350: LD_VAR 0 17
46354: IN
46355: NOT
46356: IFFALSE 46374
// list := list diff i ;
46358: LD_ADDR_VAR 0 5
46362: PUSH
46363: LD_VAR 0 5
46367: PUSH
46368: LD_VAR 0 8
46372: DIFF
46373: ST_TO_ADDR
46374: GO 46342
46376: POP
46377: POP
// if not list then
46378: LD_VAR 0 5
46382: NOT
46383: IFFALSE 46387
// exit ;
46385: GO 47191
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46387: LD_VAR 0 12
46391: PUSH
46392: LD_INT 3
46394: EQUAL
46395: PUSH
46396: LD_INT 49
46398: PUSH
46399: LD_VAR 0 5
46403: IN
46404: AND
46405: PUSH
46406: LD_INT 31
46408: PPUSH
46409: LD_VAR 0 16
46413: PPUSH
46414: CALL_OW 321
46418: PUSH
46419: LD_INT 2
46421: EQUAL
46422: AND
46423: IFFALSE 46483
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46425: LD_INT 22
46427: PUSH
46428: LD_VAR 0 16
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 35
46439: PUSH
46440: LD_INT 49
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 91
46449: PUSH
46450: LD_VAR 0 1
46454: PUSH
46455: LD_INT 10
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: PPUSH
46468: CALL_OW 69
46472: NOT
46473: IFFALSE 46483
// weapon := ru_time_lapser ;
46475: LD_ADDR_VAR 0 18
46479: PUSH
46480: LD_INT 49
46482: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46483: LD_VAR 0 12
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: IN
46498: PUSH
46499: LD_INT 11
46501: PUSH
46502: LD_VAR 0 5
46506: IN
46507: PUSH
46508: LD_INT 30
46510: PUSH
46511: LD_VAR 0 5
46515: IN
46516: OR
46517: AND
46518: PUSH
46519: LD_INT 6
46521: PPUSH
46522: LD_VAR 0 16
46526: PPUSH
46527: CALL_OW 321
46531: PUSH
46532: LD_INT 2
46534: EQUAL
46535: AND
46536: IFFALSE 46701
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46538: LD_INT 22
46540: PUSH
46541: LD_VAR 0 16
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 35
46555: PUSH
46556: LD_INT 11
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 35
46565: PUSH
46566: LD_INT 30
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 91
46580: PUSH
46581: LD_VAR 0 1
46585: PUSH
46586: LD_INT 18
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: PPUSH
46599: CALL_OW 69
46603: NOT
46604: PUSH
46605: LD_INT 22
46607: PUSH
46608: LD_VAR 0 16
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: LD_INT 30
46622: PUSH
46623: LD_INT 32
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 30
46632: PUSH
46633: LD_INT 33
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 91
46647: PUSH
46648: LD_VAR 0 1
46652: PUSH
46653: LD_INT 12
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: PPUSH
46669: CALL_OW 69
46673: PUSH
46674: LD_INT 2
46676: GREATER
46677: AND
46678: IFFALSE 46701
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46680: LD_ADDR_VAR 0 18
46684: PUSH
46685: LD_INT 11
46687: PUSH
46688: LD_INT 30
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_VAR 0 12
46699: ARRAY
46700: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46701: LD_VAR 0 18
46705: NOT
46706: PUSH
46707: LD_INT 40
46709: PPUSH
46710: LD_VAR 0 16
46714: PPUSH
46715: CALL_OW 321
46719: PUSH
46720: LD_INT 2
46722: EQUAL
46723: AND
46724: PUSH
46725: LD_INT 7
46727: PUSH
46728: LD_VAR 0 5
46732: IN
46733: PUSH
46734: LD_INT 28
46736: PUSH
46737: LD_VAR 0 5
46741: IN
46742: OR
46743: PUSH
46744: LD_INT 45
46746: PUSH
46747: LD_VAR 0 5
46751: IN
46752: OR
46753: AND
46754: IFFALSE 47008
// begin hex := GetHexInfo ( x , y ) ;
46756: LD_ADDR_VAR 0 4
46760: PUSH
46761: LD_VAR 0 10
46765: PPUSH
46766: LD_VAR 0 11
46770: PPUSH
46771: CALL_OW 546
46775: ST_TO_ADDR
// if hex [ 1 ] then
46776: LD_VAR 0 4
46780: PUSH
46781: LD_INT 1
46783: ARRAY
46784: IFFALSE 46788
// exit ;
46786: GO 47191
// height := hex [ 2 ] ;
46788: LD_ADDR_VAR 0 15
46792: PUSH
46793: LD_VAR 0 4
46797: PUSH
46798: LD_INT 2
46800: ARRAY
46801: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46802: LD_ADDR_VAR 0 14
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: LD_INT 3
46815: PUSH
46816: LD_INT 5
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: ST_TO_ADDR
// for i in tmp do
46825: LD_ADDR_VAR 0 8
46829: PUSH
46830: LD_VAR 0 14
46834: PUSH
46835: FOR_IN
46836: IFFALSE 47006
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46838: LD_ADDR_VAR 0 9
46842: PUSH
46843: LD_VAR 0 10
46847: PPUSH
46848: LD_VAR 0 8
46852: PPUSH
46853: LD_INT 5
46855: PPUSH
46856: CALL_OW 272
46860: PUSH
46861: LD_VAR 0 11
46865: PPUSH
46866: LD_VAR 0 8
46870: PPUSH
46871: LD_INT 5
46873: PPUSH
46874: CALL_OW 273
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46883: LD_VAR 0 9
46887: PUSH
46888: LD_INT 1
46890: ARRAY
46891: PPUSH
46892: LD_VAR 0 9
46896: PUSH
46897: LD_INT 2
46899: ARRAY
46900: PPUSH
46901: CALL_OW 488
46905: IFFALSE 47004
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46907: LD_ADDR_VAR 0 4
46911: PUSH
46912: LD_VAR 0 9
46916: PUSH
46917: LD_INT 1
46919: ARRAY
46920: PPUSH
46921: LD_VAR 0 9
46925: PUSH
46926: LD_INT 2
46928: ARRAY
46929: PPUSH
46930: CALL_OW 546
46934: ST_TO_ADDR
// if hex [ 1 ] then
46935: LD_VAR 0 4
46939: PUSH
46940: LD_INT 1
46942: ARRAY
46943: IFFALSE 46947
// continue ;
46945: GO 46835
// h := hex [ 2 ] ;
46947: LD_ADDR_VAR 0 13
46951: PUSH
46952: LD_VAR 0 4
46956: PUSH
46957: LD_INT 2
46959: ARRAY
46960: ST_TO_ADDR
// if h + 7 < height then
46961: LD_VAR 0 13
46965: PUSH
46966: LD_INT 7
46968: PLUS
46969: PUSH
46970: LD_VAR 0 15
46974: LESS
46975: IFFALSE 47004
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46977: LD_ADDR_VAR 0 18
46981: PUSH
46982: LD_INT 7
46984: PUSH
46985: LD_INT 28
46987: PUSH
46988: LD_INT 45
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: LIST
46995: PUSH
46996: LD_VAR 0 12
47000: ARRAY
47001: ST_TO_ADDR
// break ;
47002: GO 47006
// end ; end ; end ;
47004: GO 46835
47006: POP
47007: POP
// end ; if not weapon then
47008: LD_VAR 0 18
47012: NOT
47013: IFFALSE 47073
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47015: LD_ADDR_VAR 0 5
47019: PUSH
47020: LD_VAR 0 5
47024: PUSH
47025: LD_INT 11
47027: PUSH
47028: LD_INT 30
47030: PUSH
47031: LD_INT 49
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: DIFF
47039: ST_TO_ADDR
// if not list then
47040: LD_VAR 0 5
47044: NOT
47045: IFFALSE 47049
// exit ;
47047: GO 47191
// weapon := list [ rand ( 1 , list ) ] ;
47049: LD_ADDR_VAR 0 18
47053: PUSH
47054: LD_VAR 0 5
47058: PUSH
47059: LD_INT 1
47061: PPUSH
47062: LD_VAR 0 5
47066: PPUSH
47067: CALL_OW 12
47071: ARRAY
47072: ST_TO_ADDR
// end ; if weapon then
47073: LD_VAR 0 18
47077: IFFALSE 47191
// begin tmp := CostOfWeapon ( weapon ) ;
47079: LD_ADDR_VAR 0 14
47083: PUSH
47084: LD_VAR 0 18
47088: PPUSH
47089: CALL_OW 451
47093: ST_TO_ADDR
// j := GetBase ( tower ) ;
47094: LD_ADDR_VAR 0 9
47098: PUSH
47099: LD_VAR 0 1
47103: PPUSH
47104: CALL_OW 274
47108: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47109: LD_VAR 0 9
47113: PPUSH
47114: LD_INT 1
47116: PPUSH
47117: CALL_OW 275
47121: PUSH
47122: LD_VAR 0 14
47126: PUSH
47127: LD_INT 1
47129: ARRAY
47130: GREATEREQUAL
47131: PUSH
47132: LD_VAR 0 9
47136: PPUSH
47137: LD_INT 2
47139: PPUSH
47140: CALL_OW 275
47144: PUSH
47145: LD_VAR 0 14
47149: PUSH
47150: LD_INT 2
47152: ARRAY
47153: GREATEREQUAL
47154: AND
47155: PUSH
47156: LD_VAR 0 9
47160: PPUSH
47161: LD_INT 3
47163: PPUSH
47164: CALL_OW 275
47168: PUSH
47169: LD_VAR 0 14
47173: PUSH
47174: LD_INT 3
47176: ARRAY
47177: GREATEREQUAL
47178: AND
47179: IFFALSE 47191
// result := weapon ;
47181: LD_ADDR_VAR 0 3
47185: PUSH
47186: LD_VAR 0 18
47190: ST_TO_ADDR
// end ; end ;
47191: LD_VAR 0 3
47195: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47196: LD_INT 0
47198: PPUSH
47199: PPUSH
// result := true ;
47200: LD_ADDR_VAR 0 3
47204: PUSH
47205: LD_INT 1
47207: ST_TO_ADDR
// if array1 = array2 then
47208: LD_VAR 0 1
47212: PUSH
47213: LD_VAR 0 2
47217: EQUAL
47218: IFFALSE 47278
// begin for i = 1 to array1 do
47220: LD_ADDR_VAR 0 4
47224: PUSH
47225: DOUBLE
47226: LD_INT 1
47228: DEC
47229: ST_TO_ADDR
47230: LD_VAR 0 1
47234: PUSH
47235: FOR_TO
47236: IFFALSE 47274
// if array1 [ i ] <> array2 [ i ] then
47238: LD_VAR 0 1
47242: PUSH
47243: LD_VAR 0 4
47247: ARRAY
47248: PUSH
47249: LD_VAR 0 2
47253: PUSH
47254: LD_VAR 0 4
47258: ARRAY
47259: NONEQUAL
47260: IFFALSE 47272
// begin result := false ;
47262: LD_ADDR_VAR 0 3
47266: PUSH
47267: LD_INT 0
47269: ST_TO_ADDR
// break ;
47270: GO 47274
// end ;
47272: GO 47235
47274: POP
47275: POP
// end else
47276: GO 47286
// result := false ;
47278: LD_ADDR_VAR 0 3
47282: PUSH
47283: LD_INT 0
47285: ST_TO_ADDR
// end ;
47286: LD_VAR 0 3
47290: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47291: LD_INT 0
47293: PPUSH
47294: PPUSH
// if not array1 or not array2 then
47295: LD_VAR 0 1
47299: NOT
47300: PUSH
47301: LD_VAR 0 2
47305: NOT
47306: OR
47307: IFFALSE 47311
// exit ;
47309: GO 47375
// result := true ;
47311: LD_ADDR_VAR 0 3
47315: PUSH
47316: LD_INT 1
47318: ST_TO_ADDR
// for i = 1 to array1 do
47319: LD_ADDR_VAR 0 4
47323: PUSH
47324: DOUBLE
47325: LD_INT 1
47327: DEC
47328: ST_TO_ADDR
47329: LD_VAR 0 1
47333: PUSH
47334: FOR_TO
47335: IFFALSE 47373
// if array1 [ i ] <> array2 [ i ] then
47337: LD_VAR 0 1
47341: PUSH
47342: LD_VAR 0 4
47346: ARRAY
47347: PUSH
47348: LD_VAR 0 2
47352: PUSH
47353: LD_VAR 0 4
47357: ARRAY
47358: NONEQUAL
47359: IFFALSE 47371
// begin result := false ;
47361: LD_ADDR_VAR 0 3
47365: PUSH
47366: LD_INT 0
47368: ST_TO_ADDR
// break ;
47369: GO 47373
// end ;
47371: GO 47334
47373: POP
47374: POP
// end ;
47375: LD_VAR 0 3
47379: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47380: LD_INT 0
47382: PPUSH
47383: PPUSH
47384: PPUSH
// pom := GetBase ( fac ) ;
47385: LD_ADDR_VAR 0 5
47389: PUSH
47390: LD_VAR 0 1
47394: PPUSH
47395: CALL_OW 274
47399: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47400: LD_ADDR_VAR 0 4
47404: PUSH
47405: LD_VAR 0 2
47409: PUSH
47410: LD_INT 1
47412: ARRAY
47413: PPUSH
47414: LD_VAR 0 2
47418: PUSH
47419: LD_INT 2
47421: ARRAY
47422: PPUSH
47423: LD_VAR 0 2
47427: PUSH
47428: LD_INT 3
47430: ARRAY
47431: PPUSH
47432: LD_VAR 0 2
47436: PUSH
47437: LD_INT 4
47439: ARRAY
47440: PPUSH
47441: CALL_OW 449
47445: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47446: LD_ADDR_VAR 0 3
47450: PUSH
47451: LD_VAR 0 5
47455: PPUSH
47456: LD_INT 1
47458: PPUSH
47459: CALL_OW 275
47463: PUSH
47464: LD_VAR 0 4
47468: PUSH
47469: LD_INT 1
47471: ARRAY
47472: GREATEREQUAL
47473: PUSH
47474: LD_VAR 0 5
47478: PPUSH
47479: LD_INT 2
47481: PPUSH
47482: CALL_OW 275
47486: PUSH
47487: LD_VAR 0 4
47491: PUSH
47492: LD_INT 2
47494: ARRAY
47495: GREATEREQUAL
47496: AND
47497: PUSH
47498: LD_VAR 0 5
47502: PPUSH
47503: LD_INT 3
47505: PPUSH
47506: CALL_OW 275
47510: PUSH
47511: LD_VAR 0 4
47515: PUSH
47516: LD_INT 3
47518: ARRAY
47519: GREATEREQUAL
47520: AND
47521: ST_TO_ADDR
// end ;
47522: LD_VAR 0 3
47526: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47527: LD_INT 0
47529: PPUSH
47530: PPUSH
47531: PPUSH
47532: PPUSH
// pom := GetBase ( building ) ;
47533: LD_ADDR_VAR 0 3
47537: PUSH
47538: LD_VAR 0 1
47542: PPUSH
47543: CALL_OW 274
47547: ST_TO_ADDR
// if not pom then
47548: LD_VAR 0 3
47552: NOT
47553: IFFALSE 47557
// exit ;
47555: GO 47727
// btype := GetBType ( building ) ;
47557: LD_ADDR_VAR 0 5
47561: PUSH
47562: LD_VAR 0 1
47566: PPUSH
47567: CALL_OW 266
47571: ST_TO_ADDR
// if btype = b_armoury then
47572: LD_VAR 0 5
47576: PUSH
47577: LD_INT 4
47579: EQUAL
47580: IFFALSE 47590
// btype := b_barracks ;
47582: LD_ADDR_VAR 0 5
47586: PUSH
47587: LD_INT 5
47589: ST_TO_ADDR
// if btype = b_depot then
47590: LD_VAR 0 5
47594: PUSH
47595: LD_INT 0
47597: EQUAL
47598: IFFALSE 47608
// btype := b_warehouse ;
47600: LD_ADDR_VAR 0 5
47604: PUSH
47605: LD_INT 1
47607: ST_TO_ADDR
// if btype = b_workshop then
47608: LD_VAR 0 5
47612: PUSH
47613: LD_INT 2
47615: EQUAL
47616: IFFALSE 47626
// btype := b_factory ;
47618: LD_ADDR_VAR 0 5
47622: PUSH
47623: LD_INT 3
47625: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47626: LD_ADDR_VAR 0 4
47630: PUSH
47631: LD_VAR 0 5
47635: PPUSH
47636: LD_VAR 0 1
47640: PPUSH
47641: CALL_OW 248
47645: PPUSH
47646: CALL_OW 450
47650: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47651: LD_ADDR_VAR 0 2
47655: PUSH
47656: LD_VAR 0 3
47660: PPUSH
47661: LD_INT 1
47663: PPUSH
47664: CALL_OW 275
47668: PUSH
47669: LD_VAR 0 4
47673: PUSH
47674: LD_INT 1
47676: ARRAY
47677: GREATEREQUAL
47678: PUSH
47679: LD_VAR 0 3
47683: PPUSH
47684: LD_INT 2
47686: PPUSH
47687: CALL_OW 275
47691: PUSH
47692: LD_VAR 0 4
47696: PUSH
47697: LD_INT 2
47699: ARRAY
47700: GREATEREQUAL
47701: AND
47702: PUSH
47703: LD_VAR 0 3
47707: PPUSH
47708: LD_INT 3
47710: PPUSH
47711: CALL_OW 275
47715: PUSH
47716: LD_VAR 0 4
47720: PUSH
47721: LD_INT 3
47723: ARRAY
47724: GREATEREQUAL
47725: AND
47726: ST_TO_ADDR
// end ;
47727: LD_VAR 0 2
47731: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47732: LD_INT 0
47734: PPUSH
47735: PPUSH
47736: PPUSH
// pom := GetBase ( building ) ;
47737: LD_ADDR_VAR 0 4
47741: PUSH
47742: LD_VAR 0 1
47746: PPUSH
47747: CALL_OW 274
47751: ST_TO_ADDR
// if not pom then
47752: LD_VAR 0 4
47756: NOT
47757: IFFALSE 47761
// exit ;
47759: GO 47862
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47761: LD_ADDR_VAR 0 5
47765: PUSH
47766: LD_VAR 0 2
47770: PPUSH
47771: LD_VAR 0 1
47775: PPUSH
47776: CALL_OW 248
47780: PPUSH
47781: CALL_OW 450
47785: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47786: LD_ADDR_VAR 0 3
47790: PUSH
47791: LD_VAR 0 4
47795: PPUSH
47796: LD_INT 1
47798: PPUSH
47799: CALL_OW 275
47803: PUSH
47804: LD_VAR 0 5
47808: PUSH
47809: LD_INT 1
47811: ARRAY
47812: GREATEREQUAL
47813: PUSH
47814: LD_VAR 0 4
47818: PPUSH
47819: LD_INT 2
47821: PPUSH
47822: CALL_OW 275
47826: PUSH
47827: LD_VAR 0 5
47831: PUSH
47832: LD_INT 2
47834: ARRAY
47835: GREATEREQUAL
47836: AND
47837: PUSH
47838: LD_VAR 0 4
47842: PPUSH
47843: LD_INT 3
47845: PPUSH
47846: CALL_OW 275
47850: PUSH
47851: LD_VAR 0 5
47855: PUSH
47856: LD_INT 3
47858: ARRAY
47859: GREATEREQUAL
47860: AND
47861: ST_TO_ADDR
// end ;
47862: LD_VAR 0 3
47866: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47867: LD_INT 0
47869: PPUSH
47870: PPUSH
47871: PPUSH
47872: PPUSH
47873: PPUSH
47874: PPUSH
47875: PPUSH
47876: PPUSH
47877: PPUSH
47878: PPUSH
47879: PPUSH
// result := false ;
47880: LD_ADDR_VAR 0 8
47884: PUSH
47885: LD_INT 0
47887: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47888: LD_VAR 0 5
47892: NOT
47893: PUSH
47894: LD_VAR 0 1
47898: NOT
47899: OR
47900: PUSH
47901: LD_VAR 0 2
47905: NOT
47906: OR
47907: PUSH
47908: LD_VAR 0 3
47912: NOT
47913: OR
47914: IFFALSE 47918
// exit ;
47916: GO 48732
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47918: LD_ADDR_VAR 0 14
47922: PUSH
47923: LD_VAR 0 1
47927: PPUSH
47928: LD_VAR 0 2
47932: PPUSH
47933: LD_VAR 0 3
47937: PPUSH
47938: LD_VAR 0 4
47942: PPUSH
47943: LD_VAR 0 5
47947: PUSH
47948: LD_INT 1
47950: ARRAY
47951: PPUSH
47952: CALL_OW 248
47956: PPUSH
47957: LD_INT 0
47959: PPUSH
47960: CALL 49569 0 6
47964: ST_TO_ADDR
// if not hexes then
47965: LD_VAR 0 14
47969: NOT
47970: IFFALSE 47974
// exit ;
47972: GO 48732
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47974: LD_ADDR_VAR 0 17
47978: PUSH
47979: LD_VAR 0 5
47983: PPUSH
47984: LD_INT 22
47986: PUSH
47987: LD_VAR 0 13
47991: PPUSH
47992: CALL_OW 255
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: LD_INT 30
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 30
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PPUSH
48033: CALL_OW 72
48037: ST_TO_ADDR
// for i = 1 to hexes do
48038: LD_ADDR_VAR 0 9
48042: PUSH
48043: DOUBLE
48044: LD_INT 1
48046: DEC
48047: ST_TO_ADDR
48048: LD_VAR 0 14
48052: PUSH
48053: FOR_TO
48054: IFFALSE 48730
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48056: LD_ADDR_VAR 0 13
48060: PUSH
48061: LD_VAR 0 14
48065: PUSH
48066: LD_VAR 0 9
48070: ARRAY
48071: PUSH
48072: LD_INT 1
48074: ARRAY
48075: PPUSH
48076: LD_VAR 0 14
48080: PUSH
48081: LD_VAR 0 9
48085: ARRAY
48086: PUSH
48087: LD_INT 2
48089: ARRAY
48090: PPUSH
48091: CALL_OW 428
48095: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48096: LD_VAR 0 14
48100: PUSH
48101: LD_VAR 0 9
48105: ARRAY
48106: PUSH
48107: LD_INT 1
48109: ARRAY
48110: PPUSH
48111: LD_VAR 0 14
48115: PUSH
48116: LD_VAR 0 9
48120: ARRAY
48121: PUSH
48122: LD_INT 2
48124: ARRAY
48125: PPUSH
48126: CALL_OW 351
48130: PUSH
48131: LD_VAR 0 14
48135: PUSH
48136: LD_VAR 0 9
48140: ARRAY
48141: PUSH
48142: LD_INT 1
48144: ARRAY
48145: PPUSH
48146: LD_VAR 0 14
48150: PUSH
48151: LD_VAR 0 9
48155: ARRAY
48156: PUSH
48157: LD_INT 2
48159: ARRAY
48160: PPUSH
48161: CALL_OW 488
48165: NOT
48166: OR
48167: PUSH
48168: LD_VAR 0 13
48172: PPUSH
48173: CALL_OW 247
48177: PUSH
48178: LD_INT 3
48180: EQUAL
48181: OR
48182: IFFALSE 48188
// exit ;
48184: POP
48185: POP
48186: GO 48732
// if not tmp then
48188: LD_VAR 0 13
48192: NOT
48193: IFFALSE 48197
// continue ;
48195: GO 48053
// result := true ;
48197: LD_ADDR_VAR 0 8
48201: PUSH
48202: LD_INT 1
48204: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48205: LD_VAR 0 6
48209: PUSH
48210: LD_VAR 0 13
48214: PPUSH
48215: CALL_OW 247
48219: PUSH
48220: LD_INT 2
48222: EQUAL
48223: AND
48224: PUSH
48225: LD_VAR 0 13
48229: PPUSH
48230: CALL_OW 263
48234: PUSH
48235: LD_INT 1
48237: EQUAL
48238: AND
48239: IFFALSE 48403
// begin if IsDrivenBy ( tmp ) then
48241: LD_VAR 0 13
48245: PPUSH
48246: CALL_OW 311
48250: IFFALSE 48254
// continue ;
48252: GO 48053
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48254: LD_VAR 0 6
48258: PPUSH
48259: LD_INT 3
48261: PUSH
48262: LD_INT 60
48264: PUSH
48265: EMPTY
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: LD_INT 55
48277: PUSH
48278: EMPTY
48279: LIST
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PPUSH
48289: CALL_OW 72
48293: IFFALSE 48401
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48295: LD_ADDR_VAR 0 18
48299: PUSH
48300: LD_VAR 0 6
48304: PPUSH
48305: LD_INT 3
48307: PUSH
48308: LD_INT 60
48310: PUSH
48311: EMPTY
48312: LIST
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: LD_INT 55
48323: PUSH
48324: EMPTY
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PPUSH
48335: CALL_OW 72
48339: PUSH
48340: LD_INT 1
48342: ARRAY
48343: ST_TO_ADDR
// if IsInUnit ( driver ) then
48344: LD_VAR 0 18
48348: PPUSH
48349: CALL_OW 310
48353: IFFALSE 48364
// ComExit ( driver ) ;
48355: LD_VAR 0 18
48359: PPUSH
48360: CALL 72753 0 1
// AddComEnterUnit ( driver , tmp ) ;
48364: LD_VAR 0 18
48368: PPUSH
48369: LD_VAR 0 13
48373: PPUSH
48374: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48378: LD_VAR 0 18
48382: PPUSH
48383: LD_VAR 0 7
48387: PPUSH
48388: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48392: LD_VAR 0 18
48396: PPUSH
48397: CALL_OW 181
// end ; continue ;
48401: GO 48053
// end ; if not cleaners or not tmp in cleaners then
48403: LD_VAR 0 6
48407: NOT
48408: PUSH
48409: LD_VAR 0 13
48413: PUSH
48414: LD_VAR 0 6
48418: IN
48419: NOT
48420: OR
48421: IFFALSE 48728
// begin if dep then
48423: LD_VAR 0 17
48427: IFFALSE 48563
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48429: LD_ADDR_VAR 0 16
48433: PUSH
48434: LD_VAR 0 17
48438: PUSH
48439: LD_INT 1
48441: ARRAY
48442: PPUSH
48443: CALL_OW 250
48447: PPUSH
48448: LD_VAR 0 17
48452: PUSH
48453: LD_INT 1
48455: ARRAY
48456: PPUSH
48457: CALL_OW 254
48461: PPUSH
48462: LD_INT 5
48464: PPUSH
48465: CALL_OW 272
48469: PUSH
48470: LD_VAR 0 17
48474: PUSH
48475: LD_INT 1
48477: ARRAY
48478: PPUSH
48479: CALL_OW 251
48483: PPUSH
48484: LD_VAR 0 17
48488: PUSH
48489: LD_INT 1
48491: ARRAY
48492: PPUSH
48493: CALL_OW 254
48497: PPUSH
48498: LD_INT 5
48500: PPUSH
48501: CALL_OW 273
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48510: LD_VAR 0 16
48514: PUSH
48515: LD_INT 1
48517: ARRAY
48518: PPUSH
48519: LD_VAR 0 16
48523: PUSH
48524: LD_INT 2
48526: ARRAY
48527: PPUSH
48528: CALL_OW 488
48532: IFFALSE 48563
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48534: LD_VAR 0 13
48538: PPUSH
48539: LD_VAR 0 16
48543: PUSH
48544: LD_INT 1
48546: ARRAY
48547: PPUSH
48548: LD_VAR 0 16
48552: PUSH
48553: LD_INT 2
48555: ARRAY
48556: PPUSH
48557: CALL_OW 111
// continue ;
48561: GO 48053
// end ; end ; r := GetDir ( tmp ) ;
48563: LD_ADDR_VAR 0 15
48567: PUSH
48568: LD_VAR 0 13
48572: PPUSH
48573: CALL_OW 254
48577: ST_TO_ADDR
// if r = 5 then
48578: LD_VAR 0 15
48582: PUSH
48583: LD_INT 5
48585: EQUAL
48586: IFFALSE 48596
// r := 0 ;
48588: LD_ADDR_VAR 0 15
48592: PUSH
48593: LD_INT 0
48595: ST_TO_ADDR
// for j = r to 5 do
48596: LD_ADDR_VAR 0 10
48600: PUSH
48601: DOUBLE
48602: LD_VAR 0 15
48606: DEC
48607: ST_TO_ADDR
48608: LD_INT 5
48610: PUSH
48611: FOR_TO
48612: IFFALSE 48726
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48614: LD_ADDR_VAR 0 11
48618: PUSH
48619: LD_VAR 0 13
48623: PPUSH
48624: CALL_OW 250
48628: PPUSH
48629: LD_VAR 0 10
48633: PPUSH
48634: LD_INT 2
48636: PPUSH
48637: CALL_OW 272
48641: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48642: LD_ADDR_VAR 0 12
48646: PUSH
48647: LD_VAR 0 13
48651: PPUSH
48652: CALL_OW 251
48656: PPUSH
48657: LD_VAR 0 10
48661: PPUSH
48662: LD_INT 2
48664: PPUSH
48665: CALL_OW 273
48669: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48670: LD_VAR 0 11
48674: PPUSH
48675: LD_VAR 0 12
48679: PPUSH
48680: CALL_OW 488
48684: PUSH
48685: LD_VAR 0 11
48689: PPUSH
48690: LD_VAR 0 12
48694: PPUSH
48695: CALL_OW 428
48699: NOT
48700: AND
48701: IFFALSE 48724
// begin ComMoveXY ( tmp , _x , _y ) ;
48703: LD_VAR 0 13
48707: PPUSH
48708: LD_VAR 0 11
48712: PPUSH
48713: LD_VAR 0 12
48717: PPUSH
48718: CALL_OW 111
// break ;
48722: GO 48726
// end ; end ;
48724: GO 48611
48726: POP
48727: POP
// end ; end ;
48728: GO 48053
48730: POP
48731: POP
// end ;
48732: LD_VAR 0 8
48736: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48737: LD_INT 0
48739: PPUSH
48740: PPUSH
48741: PPUSH
48742: PPUSH
48743: PPUSH
48744: PPUSH
48745: PPUSH
48746: PPUSH
48747: PPUSH
48748: PPUSH
// result := false ;
48749: LD_ADDR_VAR 0 6
48753: PUSH
48754: LD_INT 0
48756: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48757: LD_VAR 0 1
48761: NOT
48762: PUSH
48763: LD_VAR 0 1
48767: PPUSH
48768: CALL_OW 266
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: IN
48783: NOT
48784: OR
48785: PUSH
48786: LD_VAR 0 2
48790: NOT
48791: OR
48792: PUSH
48793: LD_VAR 0 5
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 4
48812: PUSH
48813: LD_INT 5
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: IN
48824: NOT
48825: OR
48826: PUSH
48827: LD_VAR 0 3
48831: PPUSH
48832: LD_VAR 0 4
48836: PPUSH
48837: CALL_OW 488
48841: NOT
48842: OR
48843: IFFALSE 48847
// exit ;
48845: GO 49564
// pom := GetBase ( depot ) ;
48847: LD_ADDR_VAR 0 10
48851: PUSH
48852: LD_VAR 0 1
48856: PPUSH
48857: CALL_OW 274
48861: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48862: LD_ADDR_VAR 0 11
48866: PUSH
48867: LD_VAR 0 2
48871: PPUSH
48872: LD_VAR 0 1
48876: PPUSH
48877: CALL_OW 248
48881: PPUSH
48882: CALL_OW 450
48886: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48887: LD_VAR 0 10
48891: PPUSH
48892: LD_INT 1
48894: PPUSH
48895: CALL_OW 275
48899: PUSH
48900: LD_VAR 0 11
48904: PUSH
48905: LD_INT 1
48907: ARRAY
48908: GREATEREQUAL
48909: PUSH
48910: LD_VAR 0 10
48914: PPUSH
48915: LD_INT 2
48917: PPUSH
48918: CALL_OW 275
48922: PUSH
48923: LD_VAR 0 11
48927: PUSH
48928: LD_INT 2
48930: ARRAY
48931: GREATEREQUAL
48932: AND
48933: PUSH
48934: LD_VAR 0 10
48938: PPUSH
48939: LD_INT 3
48941: PPUSH
48942: CALL_OW 275
48946: PUSH
48947: LD_VAR 0 11
48951: PUSH
48952: LD_INT 3
48954: ARRAY
48955: GREATEREQUAL
48956: AND
48957: NOT
48958: IFFALSE 48962
// exit ;
48960: GO 49564
// if GetBType ( depot ) = b_depot then
48962: LD_VAR 0 1
48966: PPUSH
48967: CALL_OW 266
48971: PUSH
48972: LD_INT 0
48974: EQUAL
48975: IFFALSE 48987
// dist := 28 else
48977: LD_ADDR_VAR 0 14
48981: PUSH
48982: LD_INT 28
48984: ST_TO_ADDR
48985: GO 48995
// dist := 36 ;
48987: LD_ADDR_VAR 0 14
48991: PUSH
48992: LD_INT 36
48994: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48995: LD_VAR 0 1
48999: PPUSH
49000: LD_VAR 0 3
49004: PPUSH
49005: LD_VAR 0 4
49009: PPUSH
49010: CALL_OW 297
49014: PUSH
49015: LD_VAR 0 14
49019: GREATER
49020: IFFALSE 49024
// exit ;
49022: GO 49564
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49024: LD_ADDR_VAR 0 12
49028: PUSH
49029: LD_VAR 0 2
49033: PPUSH
49034: LD_VAR 0 3
49038: PPUSH
49039: LD_VAR 0 4
49043: PPUSH
49044: LD_VAR 0 5
49048: PPUSH
49049: LD_VAR 0 1
49053: PPUSH
49054: CALL_OW 248
49058: PPUSH
49059: LD_INT 0
49061: PPUSH
49062: CALL 49569 0 6
49066: ST_TO_ADDR
// if not hexes then
49067: LD_VAR 0 12
49071: NOT
49072: IFFALSE 49076
// exit ;
49074: GO 49564
// hex := GetHexInfo ( x , y ) ;
49076: LD_ADDR_VAR 0 15
49080: PUSH
49081: LD_VAR 0 3
49085: PPUSH
49086: LD_VAR 0 4
49090: PPUSH
49091: CALL_OW 546
49095: ST_TO_ADDR
// if hex [ 1 ] then
49096: LD_VAR 0 15
49100: PUSH
49101: LD_INT 1
49103: ARRAY
49104: IFFALSE 49108
// exit ;
49106: GO 49564
// height := hex [ 2 ] ;
49108: LD_ADDR_VAR 0 13
49112: PUSH
49113: LD_VAR 0 15
49117: PUSH
49118: LD_INT 2
49120: ARRAY
49121: ST_TO_ADDR
// for i = 1 to hexes do
49122: LD_ADDR_VAR 0 7
49126: PUSH
49127: DOUBLE
49128: LD_INT 1
49130: DEC
49131: ST_TO_ADDR
49132: LD_VAR 0 12
49136: PUSH
49137: FOR_TO
49138: IFFALSE 49468
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49140: LD_VAR 0 12
49144: PUSH
49145: LD_VAR 0 7
49149: ARRAY
49150: PUSH
49151: LD_INT 1
49153: ARRAY
49154: PPUSH
49155: LD_VAR 0 12
49159: PUSH
49160: LD_VAR 0 7
49164: ARRAY
49165: PUSH
49166: LD_INT 2
49168: ARRAY
49169: PPUSH
49170: CALL_OW 488
49174: NOT
49175: PUSH
49176: LD_VAR 0 12
49180: PUSH
49181: LD_VAR 0 7
49185: ARRAY
49186: PUSH
49187: LD_INT 1
49189: ARRAY
49190: PPUSH
49191: LD_VAR 0 12
49195: PUSH
49196: LD_VAR 0 7
49200: ARRAY
49201: PUSH
49202: LD_INT 2
49204: ARRAY
49205: PPUSH
49206: CALL_OW 428
49210: PUSH
49211: LD_INT 0
49213: GREATER
49214: OR
49215: PUSH
49216: LD_VAR 0 12
49220: PUSH
49221: LD_VAR 0 7
49225: ARRAY
49226: PUSH
49227: LD_INT 1
49229: ARRAY
49230: PPUSH
49231: LD_VAR 0 12
49235: PUSH
49236: LD_VAR 0 7
49240: ARRAY
49241: PUSH
49242: LD_INT 2
49244: ARRAY
49245: PPUSH
49246: CALL_OW 351
49250: OR
49251: IFFALSE 49257
// exit ;
49253: POP
49254: POP
49255: GO 49564
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49257: LD_ADDR_VAR 0 8
49261: PUSH
49262: LD_VAR 0 12
49266: PUSH
49267: LD_VAR 0 7
49271: ARRAY
49272: PUSH
49273: LD_INT 1
49275: ARRAY
49276: PPUSH
49277: LD_VAR 0 12
49281: PUSH
49282: LD_VAR 0 7
49286: ARRAY
49287: PUSH
49288: LD_INT 2
49290: ARRAY
49291: PPUSH
49292: CALL_OW 546
49296: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49297: LD_VAR 0 8
49301: PUSH
49302: LD_INT 1
49304: ARRAY
49305: PUSH
49306: LD_VAR 0 8
49310: PUSH
49311: LD_INT 2
49313: ARRAY
49314: PUSH
49315: LD_VAR 0 13
49319: PUSH
49320: LD_INT 2
49322: PLUS
49323: GREATER
49324: OR
49325: PUSH
49326: LD_VAR 0 8
49330: PUSH
49331: LD_INT 2
49333: ARRAY
49334: PUSH
49335: LD_VAR 0 13
49339: PUSH
49340: LD_INT 2
49342: MINUS
49343: LESS
49344: OR
49345: PUSH
49346: LD_VAR 0 8
49350: PUSH
49351: LD_INT 3
49353: ARRAY
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 8
49360: PUSH
49361: LD_INT 9
49363: PUSH
49364: LD_INT 10
49366: PUSH
49367: LD_INT 11
49369: PUSH
49370: LD_INT 12
49372: PUSH
49373: LD_INT 13
49375: PUSH
49376: LD_INT 16
49378: PUSH
49379: LD_INT 17
49381: PUSH
49382: LD_INT 18
49384: PUSH
49385: LD_INT 19
49387: PUSH
49388: LD_INT 20
49390: PUSH
49391: LD_INT 21
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: IN
49409: NOT
49410: OR
49411: PUSH
49412: LD_VAR 0 8
49416: PUSH
49417: LD_INT 5
49419: ARRAY
49420: NOT
49421: OR
49422: PUSH
49423: LD_VAR 0 8
49427: PUSH
49428: LD_INT 6
49430: ARRAY
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 7
49440: PUSH
49441: LD_INT 9
49443: PUSH
49444: LD_INT 10
49446: PUSH
49447: LD_INT 11
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: IN
49458: NOT
49459: OR
49460: IFFALSE 49466
// exit ;
49462: POP
49463: POP
49464: GO 49564
// end ;
49466: GO 49137
49468: POP
49469: POP
// side := GetSide ( depot ) ;
49470: LD_ADDR_VAR 0 9
49474: PUSH
49475: LD_VAR 0 1
49479: PPUSH
49480: CALL_OW 255
49484: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49485: LD_VAR 0 9
49489: PPUSH
49490: LD_VAR 0 3
49494: PPUSH
49495: LD_VAR 0 4
49499: PPUSH
49500: LD_INT 20
49502: PPUSH
49503: CALL 41885 0 4
49507: PUSH
49508: LD_INT 4
49510: ARRAY
49511: IFFALSE 49515
// exit ;
49513: GO 49564
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49515: LD_VAR 0 2
49519: PUSH
49520: LD_INT 29
49522: PUSH
49523: LD_INT 30
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: IN
49530: PUSH
49531: LD_VAR 0 3
49535: PPUSH
49536: LD_VAR 0 4
49540: PPUSH
49541: LD_VAR 0 9
49545: PPUSH
49546: CALL_OW 440
49550: NOT
49551: AND
49552: IFFALSE 49556
// exit ;
49554: GO 49564
// result := true ;
49556: LD_ADDR_VAR 0 6
49560: PUSH
49561: LD_INT 1
49563: ST_TO_ADDR
// end ;
49564: LD_VAR 0 6
49568: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49569: LD_INT 0
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
49579: PPUSH
49580: PPUSH
49581: PPUSH
49582: PPUSH
49583: PPUSH
49584: PPUSH
49585: PPUSH
49586: PPUSH
49587: PPUSH
49588: PPUSH
49589: PPUSH
49590: PPUSH
49591: PPUSH
49592: PPUSH
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
49605: PPUSH
49606: PPUSH
49607: PPUSH
49608: PPUSH
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
49615: PPUSH
49616: PPUSH
49617: PPUSH
49618: PPUSH
49619: PPUSH
49620: PPUSH
49621: PPUSH
49622: PPUSH
49623: PPUSH
49624: PPUSH
49625: PPUSH
49626: PPUSH
49627: PPUSH
49628: PPUSH
// result = [ ] ;
49629: LD_ADDR_VAR 0 7
49633: PUSH
49634: EMPTY
49635: ST_TO_ADDR
// temp_list = [ ] ;
49636: LD_ADDR_VAR 0 9
49640: PUSH
49641: EMPTY
49642: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49643: LD_VAR 0 4
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: LD_INT 4
49662: PUSH
49663: LD_INT 5
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: IN
49674: NOT
49675: PUSH
49676: LD_VAR 0 1
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: IN
49691: PUSH
49692: LD_VAR 0 5
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 3
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: IN
49711: NOT
49712: AND
49713: OR
49714: IFFALSE 49718
// exit ;
49716: GO 68109
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49718: LD_VAR 0 1
49722: PUSH
49723: LD_INT 6
49725: PUSH
49726: LD_INT 7
49728: PUSH
49729: LD_INT 8
49731: PUSH
49732: LD_INT 13
49734: PUSH
49735: LD_INT 12
49737: PUSH
49738: LD_INT 15
49740: PUSH
49741: LD_INT 11
49743: PUSH
49744: LD_INT 14
49746: PUSH
49747: LD_INT 10
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: IN
49761: IFFALSE 49771
// btype = b_lab ;
49763: LD_ADDR_VAR 0 1
49767: PUSH
49768: LD_INT 6
49770: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49771: LD_VAR 0 6
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: LIST
49789: IN
49790: NOT
49791: PUSH
49792: LD_VAR 0 1
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: LD_INT 6
49811: PUSH
49812: LD_INT 36
49814: PUSH
49815: LD_INT 4
49817: PUSH
49818: LD_INT 5
49820: PUSH
49821: LD_INT 31
49823: PUSH
49824: LD_INT 32
49826: PUSH
49827: LD_INT 33
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: IN
49843: NOT
49844: PUSH
49845: LD_VAR 0 6
49849: PUSH
49850: LD_INT 1
49852: EQUAL
49853: AND
49854: OR
49855: PUSH
49856: LD_VAR 0 1
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: IN
49871: NOT
49872: PUSH
49873: LD_VAR 0 6
49877: PUSH
49878: LD_INT 2
49880: EQUAL
49881: AND
49882: OR
49883: IFFALSE 49893
// mode = 0 ;
49885: LD_ADDR_VAR 0 6
49889: PUSH
49890: LD_INT 0
49892: ST_TO_ADDR
// case mode of 0 :
49893: LD_VAR 0 6
49897: PUSH
49898: LD_INT 0
49900: DOUBLE
49901: EQUAL
49902: IFTRUE 49906
49904: GO 61359
49906: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49907: LD_ADDR_VAR 0 11
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 3
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 3
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50100: LD_ADDR_VAR 0 12
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: NEG
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 3
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50296: LD_ADDR_VAR 0 13
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 3
50455: NEG
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 3
50467: NEG
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50495: LD_ADDR_VAR 0 14
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50691: LD_ADDR_VAR 0 15
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 3
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50884: LD_ADDR_VAR 0 16
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 3
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 3
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51077: LD_ADDR_VAR 0 17
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51307: LD_ADDR_VAR 0 18
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51537: LD_ADDR_VAR 0 19
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51767: LD_ADDR_VAR 0 20
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51997: LD_ADDR_VAR 0 21
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52227: LD_ADDR_VAR 0 22
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52457: LD_ADDR_VAR 0 23
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: LD_INT 3
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52737: LD_ADDR_VAR 0 24
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 3
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53013: LD_ADDR_VAR 0 25
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53287: LD_ADDR_VAR 0 26
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 3
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53563: LD_ADDR_VAR 0 27
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 3
53808: NEG
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53843: LD_ADDR_VAR 0 28
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 3
54078: NEG
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 3
54090: NEG
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54125: LD_ADDR_VAR 0 29
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: NEG
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54404: LD_ADDR_VAR 0 30
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 3
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: NEG
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54682: LD_ADDR_VAR 0 31
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: NEG
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: LD_INT 3
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 3
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 3
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 3
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54960: LD_ADDR_VAR 0 32
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 2
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 3
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55238: LD_ADDR_VAR 0 33
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 2
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: LD_INT 3
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 3
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 3
55482: NEG
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55517: LD_ADDR_VAR 0 34
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 3
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55797: LD_ADDR_VAR 0 35
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55909: LD_ADDR_VAR 0 36
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56021: LD_ADDR_VAR 0 37
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56133: LD_ADDR_VAR 0 38
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56245: LD_ADDR_VAR 0 39
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56357: LD_ADDR_VAR 0 40
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56469: LD_ADDR_VAR 0 41
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: LD_INT 3
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 3
56743: NEG
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 3
56766: NEG
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56819: LD_ADDR_VAR 0 42
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: LD_INT 3
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 3
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 3
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 3
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 3
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 3
57128: NEG
57129: PUSH
57130: LD_INT 3
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57169: LD_ADDR_VAR 0 43
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 3
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 3
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 3
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 3
57476: NEG
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57517: LD_ADDR_VAR 0 44
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: LD_INT 3
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 3
57814: NEG
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: NEG
57827: PUSH
57828: LD_INT 3
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57867: LD_ADDR_VAR 0 45
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 3
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: LD_INT 3
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58217: LD_ADDR_VAR 0 46
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_INT 2
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 3
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 3
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: NEG
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58565: LD_ADDR_VAR 0 47
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58716: LD_ADDR_VAR 0 48
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58863: LD_ADDR_VAR 0 49
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59007: LD_ADDR_VAR 0 50
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59151: LD_ADDR_VAR 0 51
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59298: LD_ADDR_VAR 0 52
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: NEG
59426: PUSH
59427: LD_INT 2
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59449: LD_ADDR_VAR 0 53
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 2
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: LD_INT 2
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59679: LD_ADDR_VAR 0 54
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59909: LD_ADDR_VAR 0 55
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60139: LD_ADDR_VAR 0 56
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: NEG
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60369: LD_ADDR_VAR 0 57
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60599: LD_ADDR_VAR 0 58
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 2
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: PUSH
60735: LD_INT 2
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 2
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60829: LD_ADDR_VAR 0 59
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60917: LD_ADDR_VAR 0 60
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61005: LD_ADDR_VAR 0 61
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61093: LD_ADDR_VAR 0 62
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61181: LD_ADDR_VAR 0 63
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61269: LD_ADDR_VAR 0 64
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: ST_TO_ADDR
// end ; 1 :
61357: GO 67254
61359: LD_INT 1
61361: DOUBLE
61362: EQUAL
61363: IFTRUE 61367
61365: GO 63990
61367: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61368: LD_ADDR_VAR 0 11
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 3
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61412: LD_ADDR_VAR 0 12
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 3
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61453: LD_ADDR_VAR 0 13
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: LD_INT 3
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: LD_INT 3
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: LIST
61492: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61493: LD_ADDR_VAR 0 14
61497: PUSH
61498: LD_INT 1
61500: PUSH
61501: LD_INT 3
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: LD_INT 3
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61534: LD_ADDR_VAR 0 15
61538: PUSH
61539: LD_INT 2
61541: NEG
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 3
61552: NEG
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 3
61563: NEG
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61578: LD_ADDR_VAR 0 16
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: LD_INT 3
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 3
61597: NEG
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 3
61609: NEG
61610: PUSH
61611: LD_INT 3
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: LIST
61623: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61624: LD_ADDR_VAR 0 17
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: LD_INT 3
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: LD_INT 3
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: LIST
61667: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61668: LD_ADDR_VAR 0 18
61672: PUSH
61673: LD_INT 2
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 3
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: LIST
61708: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61709: LD_ADDR_VAR 0 19
61713: PUSH
61714: LD_INT 3
61716: PUSH
61717: LD_INT 2
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 3
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: LIST
61748: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61749: LD_ADDR_VAR 0 20
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 3
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: LIST
61789: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61790: LD_ADDR_VAR 0 21
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 3
61808: NEG
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 3
61819: NEG
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: LIST
61833: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61834: LD_ADDR_VAR 0 22
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 3
61853: NEG
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 3
61865: NEG
61866: PUSH
61867: LD_INT 3
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61880: LD_ADDR_VAR 0 23
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: LD_INT 3
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 4
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: LD_INT 3
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: LIST
61923: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61924: LD_ADDR_VAR 0 24
61928: PUSH
61929: LD_INT 3
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 3
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 4
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: LIST
61964: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61965: LD_ADDR_VAR 0 25
61969: PUSH
61970: LD_INT 3
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 4
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 3
61992: PUSH
61993: LD_INT 4
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: LIST
62004: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62005: LD_ADDR_VAR 0 26
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: LD_INT 4
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: LD_INT 3
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: LIST
62045: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62046: LD_ADDR_VAR 0 27
62050: PUSH
62051: LD_INT 3
62053: NEG
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 3
62064: NEG
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 4
62075: NEG
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62090: LD_ADDR_VAR 0 28
62094: PUSH
62095: LD_INT 3
62097: NEG
62098: PUSH
62099: LD_INT 3
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: NEG
62110: PUSH
62111: LD_INT 4
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: NEG
62122: PUSH
62123: LD_INT 3
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62136: LD_ADDR_VAR 0 29
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: LD_INT 3
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 4
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: LD_INT 4
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: LD_INT 3
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: LD_INT 5
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 5
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: LD_INT 4
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: LD_INT 6
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 6
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: PUSH
62269: LD_INT 5
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62291: LD_ADDR_VAR 0 30
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 3
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 3
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 3
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 4
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 4
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 4
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 5
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 5
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 5
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 6
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 6
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62434: LD_ADDR_VAR 0 31
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 4
62471: PUSH
62472: LD_INT 3
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 4
62481: PUSH
62482: LD_INT 4
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 3
62491: PUSH
62492: LD_INT 4
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 5
62501: PUSH
62502: LD_INT 4
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 5
62511: PUSH
62512: LD_INT 5
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 4
62521: PUSH
62522: LD_INT 5
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 6
62531: PUSH
62532: LD_INT 5
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 6
62541: PUSH
62542: LD_INT 6
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 5
62551: PUSH
62552: LD_INT 6
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62573: LD_ADDR_VAR 0 32
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: LD_INT 4
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: LD_INT 4
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: LD_INT 3
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: LD_INT 5
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 5
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: LD_INT 4
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: LD_INT 6
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 6
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: LD_INT 5
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62716: LD_ADDR_VAR 0 33
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 3
62734: NEG
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 3
62745: NEG
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 4
62768: NEG
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 4
62779: NEG
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 4
62791: NEG
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 5
62802: NEG
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 5
62813: NEG
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 5
62825: NEG
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 6
62836: NEG
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 6
62847: NEG
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62871: LD_ADDR_VAR 0 34
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: LD_INT 3
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 3
62890: NEG
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 3
62902: NEG
62903: PUSH
62904: LD_INT 3
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 3
62914: NEG
62915: PUSH
62916: LD_INT 4
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 4
62926: NEG
62927: PUSH
62928: LD_INT 3
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 4
62938: NEG
62939: PUSH
62940: LD_INT 4
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 4
62950: NEG
62951: PUSH
62952: LD_INT 5
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 5
62962: NEG
62963: PUSH
62964: LD_INT 4
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 5
62974: NEG
62975: PUSH
62976: LD_INT 5
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 5
62986: NEG
62987: PUSH
62988: LD_INT 6
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 6
62998: NEG
62999: PUSH
63000: LD_INT 5
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 6
63010: NEG
63011: PUSH
63012: LD_INT 6
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63034: LD_ADDR_VAR 0 41
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 2
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: LD_INT 3
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 2
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: LIST
63077: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63078: LD_ADDR_VAR 0 42
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: LIST
63118: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63119: LD_ADDR_VAR 0 43
63123: PUSH
63124: LD_INT 2
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: LD_INT 3
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: LIST
63158: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63159: LD_ADDR_VAR 0 44
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: LD_INT 3
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: LIST
63199: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63200: LD_ADDR_VAR 0 45
63204: PUSH
63205: LD_INT 2
63207: NEG
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 3
63229: NEG
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: LIST
63243: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63244: LD_ADDR_VAR 0 46
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: NEG
63264: PUSH
63265: LD_INT 3
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 3
63275: NEG
63276: PUSH
63277: LD_INT 2
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: LIST
63289: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63290: LD_ADDR_VAR 0 47
63294: PUSH
63295: LD_INT 2
63297: NEG
63298: PUSH
63299: LD_INT 3
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 3
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63323: LD_ADDR_VAR 0 48
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: LD_INT 2
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63354: LD_ADDR_VAR 0 49
63358: PUSH
63359: LD_INT 3
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 3
63371: PUSH
63372: LD_INT 2
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63383: LD_ADDR_VAR 0 50
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63412: LD_ADDR_VAR 0 51
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 2
63430: NEG
63431: PUSH
63432: LD_INT 1
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63443: LD_ADDR_VAR 0 52
63447: PUSH
63448: LD_INT 3
63450: NEG
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 3
63462: NEG
63463: PUSH
63464: LD_INT 2
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63476: LD_ADDR_VAR 0 53
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: LD_INT 3
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 3
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63520: LD_ADDR_VAR 0 54
63524: PUSH
63525: LD_INT 2
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 3
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 3
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: LIST
63560: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63561: LD_ADDR_VAR 0 55
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 3
63578: PUSH
63579: LD_INT 3
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: LD_INT 3
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: LIST
63600: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63601: LD_ADDR_VAR 0 56
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: LD_INT 3
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 3
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: LD_INT 2
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: LIST
63641: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63642: LD_ADDR_VAR 0 57
63646: PUSH
63647: LD_INT 2
63649: NEG
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 3
63660: NEG
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 3
63671: NEG
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: LIST
63685: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63686: LD_ADDR_VAR 0 58
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: LD_INT 3
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 3
63705: NEG
63706: PUSH
63707: LD_INT 2
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 3
63717: NEG
63718: PUSH
63719: LD_INT 3
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63732: LD_ADDR_VAR 0 59
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: LD_INT 2
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: LD_INT 2
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: LIST
63775: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63776: LD_ADDR_VAR 0 60
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: LIST
63816: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63817: LD_ADDR_VAR 0 61
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: LD_INT 2
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: LIST
63856: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63857: LD_ADDR_VAR 0 62
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 2
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63898: LD_ADDR_VAR 0 63
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 2
63927: NEG
63928: PUSH
63929: LD_INT 1
63931: NEG
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: LIST
63941: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63942: LD_ADDR_VAR 0 64
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: LD_INT 2
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: LD_INT 2
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: LIST
63987: ST_TO_ADDR
// end ; 2 :
63988: GO 67254
63990: LD_INT 2
63992: DOUBLE
63993: EQUAL
63994: IFTRUE 63998
63996: GO 67253
63998: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63999: LD_ADDR_VAR 0 29
64003: PUSH
64004: LD_INT 4
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 4
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 5
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 5
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 4
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 3
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 3
64078: PUSH
64079: LD_INT 2
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 5
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 3
64099: PUSH
64100: LD_INT 3
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 3
64109: PUSH
64110: LD_INT 2
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 4
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 4
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 3
64139: PUSH
64140: LD_INT 4
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 2
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 4
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: LD_INT 4
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 4
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 3
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: LD_INT 4
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: LD_INT 5
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: LD_INT 5
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: LD_INT 4
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: LD_INT 5
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: NEG
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 3
64293: NEG
64294: PUSH
64295: LD_INT 1
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 2
64316: NEG
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 4
64338: NEG
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 4
64349: NEG
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 4
64361: NEG
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 2
64373: NEG
64374: PUSH
64375: LD_INT 2
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 4
64384: NEG
64385: PUSH
64386: LD_INT 4
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 4
64396: NEG
64397: PUSH
64398: LD_INT 5
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 3
64408: NEG
64409: PUSH
64410: LD_INT 4
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 3
64420: NEG
64421: PUSH
64422: LD_INT 3
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 4
64432: NEG
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 5
64444: NEG
64445: PUSH
64446: LD_INT 4
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 5
64456: NEG
64457: PUSH
64458: LD_INT 5
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 3
64468: NEG
64469: PUSH
64470: LD_INT 5
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 5
64480: NEG
64481: PUSH
64482: LD_INT 3
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64537: LD_ADDR_VAR 0 30
64541: PUSH
64542: LD_INT 4
64544: PUSH
64545: LD_INT 4
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 4
64554: PUSH
64555: LD_INT 3
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 5
64564: PUSH
64565: LD_INT 4
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 5
64574: PUSH
64575: LD_INT 5
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 4
64584: PUSH
64585: LD_INT 5
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 3
64594: PUSH
64595: LD_INT 4
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 5
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: LD_INT 5
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: LD_INT 3
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: LD_INT 3
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: LD_INT 4
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 4
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: LD_INT 3
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: LD_INT 2
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 2
64706: PUSH
64707: LD_INT 4
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 2
64716: NEG
64717: PUSH
64718: LD_INT 2
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 4
64727: NEG
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 4
64738: NEG
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 3
64750: NEG
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 3
64761: NEG
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 4
64772: NEG
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 5
64783: NEG
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 5
64794: NEG
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 5
64806: NEG
64807: PUSH
64808: LD_INT 2
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 3
64818: NEG
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 3
64829: NEG
64830: PUSH
64831: LD_INT 3
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 3
64841: NEG
64842: PUSH
64843: LD_INT 4
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: LD_INT 3
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 3
64877: NEG
64878: PUSH
64879: LD_INT 2
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 4
64889: NEG
64890: PUSH
64891: LD_INT 3
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 4
64901: NEG
64902: PUSH
64903: LD_INT 4
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 2
64913: NEG
64914: PUSH
64915: LD_INT 4
64917: NEG
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 4
64925: NEG
64926: PUSH
64927: LD_INT 2
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: LD_INT 4
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: LD_INT 5
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 1
64959: PUSH
64960: LD_INT 4
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: LD_INT 3
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 3
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: LD_INT 4
64996: NEG
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: LD_INT 5
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: LD_INT 3
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 2
65027: NEG
65028: PUSH
65029: LD_INT 5
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65084: LD_ADDR_VAR 0 31
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: LD_INT 4
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: LD_INT 4
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: LD_INT 5
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: LD_INT 5
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 1
65141: NEG
65142: PUSH
65143: LD_INT 4
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 3
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 2
65163: PUSH
65164: LD_INT 5
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 2
65173: NEG
65174: PUSH
65175: LD_INT 3
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 3
65184: NEG
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 3
65195: NEG
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 2
65207: NEG
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 2
65218: NEG
65219: PUSH
65220: LD_INT 1
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 3
65229: NEG
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 4
65240: NEG
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 4
65251: NEG
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 4
65263: NEG
65264: PUSH
65265: LD_INT 2
65267: NEG
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 2
65275: NEG
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 4
65286: NEG
65287: PUSH
65288: LD_INT 4
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 4
65298: NEG
65299: PUSH
65300: LD_INT 5
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 3
65310: NEG
65311: PUSH
65312: LD_INT 4
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 3
65322: NEG
65323: PUSH
65324: LD_INT 3
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 4
65334: NEG
65335: PUSH
65336: LD_INT 3
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 5
65346: NEG
65347: PUSH
65348: LD_INT 4
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 5
65358: NEG
65359: PUSH
65360: LD_INT 5
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 3
65370: NEG
65371: PUSH
65372: LD_INT 5
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 5
65382: NEG
65383: PUSH
65384: LD_INT 3
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 3
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: LD_INT 4
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 3
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 1
65427: PUSH
65428: LD_INT 2
65430: NEG
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: LD_INT 2
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 1
65449: NEG
65450: PUSH
65451: LD_INT 3
65453: NEG
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: PUSH
65463: LD_INT 4
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: LD_INT 2
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 2
65484: NEG
65485: PUSH
65486: LD_INT 4
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 4
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 4
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 5
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 5
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 4
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 3
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: LD_INT 2
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 5
65579: PUSH
65580: LD_INT 2
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65634: LD_ADDR_VAR 0 32
65638: PUSH
65639: LD_INT 4
65641: NEG
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 4
65652: NEG
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: NEG
65665: PUSH
65666: LD_INT 0
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 3
65675: NEG
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 4
65686: NEG
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 5
65697: NEG
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 5
65708: NEG
65709: PUSH
65710: LD_INT 1
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 5
65720: NEG
65721: PUSH
65722: LD_INT 2
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 3
65732: NEG
65733: PUSH
65734: LD_INT 2
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 3
65743: NEG
65744: PUSH
65745: LD_INT 3
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 3
65755: NEG
65756: PUSH
65757: LD_INT 4
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: NEG
65768: PUSH
65769: LD_INT 3
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 2
65779: NEG
65780: PUSH
65781: LD_INT 2
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 3
65791: NEG
65792: PUSH
65793: LD_INT 2
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 4
65803: NEG
65804: PUSH
65805: LD_INT 3
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 4
65815: NEG
65816: PUSH
65817: LD_INT 4
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 2
65827: NEG
65828: PUSH
65829: LD_INT 4
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 4
65839: NEG
65840: PUSH
65841: LD_INT 2
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: LD_INT 4
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 0
65862: PUSH
65863: LD_INT 5
65865: NEG
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: PUSH
65874: LD_INT 4
65876: NEG
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 3
65887: NEG
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 0
65895: PUSH
65896: LD_INT 3
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: LD_INT 4
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: LD_INT 5
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: LD_INT 3
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 2
65941: NEG
65942: PUSH
65943: LD_INT 5
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 3
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 3
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 4
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 4
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 3
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 2
66014: PUSH
66015: LD_INT 1
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 2
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 4
66036: PUSH
66037: LD_INT 2
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 4
66046: PUSH
66047: LD_INT 4
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 4
66056: PUSH
66057: LD_INT 3
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 5
66066: PUSH
66067: LD_INT 4
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 5
66076: PUSH
66077: LD_INT 5
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 4
66086: PUSH
66087: LD_INT 5
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: PUSH
66097: LD_INT 4
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: LD_INT 3
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 5
66116: PUSH
66117: LD_INT 3
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 3
66126: PUSH
66127: LD_INT 5
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66181: LD_ADDR_VAR 0 33
66185: PUSH
66186: LD_INT 4
66188: NEG
66189: PUSH
66190: LD_INT 4
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 4
66200: NEG
66201: PUSH
66202: LD_INT 5
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 3
66212: NEG
66213: PUSH
66214: LD_INT 4
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 3
66224: NEG
66225: PUSH
66226: LD_INT 3
66228: NEG
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 4
66236: NEG
66237: PUSH
66238: LD_INT 3
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 5
66248: NEG
66249: PUSH
66250: LD_INT 4
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 5
66260: NEG
66261: PUSH
66262: LD_INT 5
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 3
66272: NEG
66273: PUSH
66274: LD_INT 5
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 5
66284: NEG
66285: PUSH
66286: LD_INT 3
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: LD_INT 3
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: LD_INT 4
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: LD_INT 3
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 1
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: LD_INT 3
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 1
66363: NEG
66364: PUSH
66365: LD_INT 4
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 2
66375: PUSH
66376: LD_INT 2
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 2
66386: NEG
66387: PUSH
66388: LD_INT 4
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 4
66398: PUSH
66399: LD_INT 0
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 4
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 5
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 5
66429: PUSH
66430: LD_INT 1
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 4
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 3
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 3
66459: PUSH
66460: LD_INT 1
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 3
66470: PUSH
66471: LD_INT 2
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 5
66481: PUSH
66482: LD_INT 2
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 3
66501: PUSH
66502: LD_INT 2
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 4
66511: PUSH
66512: LD_INT 3
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 4
66521: PUSH
66522: LD_INT 4
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 3
66531: PUSH
66532: LD_INT 4
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 2
66541: PUSH
66542: LD_INT 3
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 2
66551: PUSH
66552: LD_INT 2
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 4
66561: PUSH
66562: LD_INT 2
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 2
66571: PUSH
66572: LD_INT 4
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: LD_INT 4
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: LD_INT 3
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: LD_INT 4
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 1
66611: PUSH
66612: LD_INT 5
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: LD_INT 5
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 1
66631: NEG
66632: PUSH
66633: LD_INT 4
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: LD_INT 3
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 2
66653: PUSH
66654: LD_INT 5
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 2
66663: NEG
66664: PUSH
66665: LD_INT 3
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66719: LD_ADDR_VAR 0 34
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 4
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: LD_INT 5
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: LD_INT 4
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 1
66759: PUSH
66760: LD_INT 3
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 3
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: LD_INT 4
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: LD_INT 5
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 2
66805: PUSH
66806: LD_INT 3
66808: NEG
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 2
66816: NEG
66817: PUSH
66818: LD_INT 5
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: LD_INT 0
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 3
66838: PUSH
66839: LD_INT 1
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 4
66849: PUSH
66850: LD_INT 0
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 4
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 3
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 2
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 2
66889: PUSH
66890: LD_INT 1
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 2
66900: PUSH
66901: LD_INT 2
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 4
66911: PUSH
66912: LD_INT 2
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 4
66921: PUSH
66922: LD_INT 4
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 4
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 5
66941: PUSH
66942: LD_INT 4
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 5
66951: PUSH
66952: LD_INT 5
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 4
66961: PUSH
66962: LD_INT 5
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 3
66971: PUSH
66972: LD_INT 4
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: LD_INT 3
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 5
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 3
67001: PUSH
67002: LD_INT 5
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 3
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: LD_INT 2
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: PUSH
67032: LD_INT 3
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: PUSH
67042: LD_INT 4
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: LD_INT 4
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: LD_INT 3
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 1
67072: NEG
67073: PUSH
67074: LD_INT 2
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 2
67083: PUSH
67084: LD_INT 4
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 2
67093: NEG
67094: PUSH
67095: LD_INT 2
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 4
67104: NEG
67105: PUSH
67106: LD_INT 0
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 4
67115: NEG
67116: PUSH
67117: LD_INT 1
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 3
67127: NEG
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 3
67138: NEG
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 4
67149: NEG
67150: PUSH
67151: LD_INT 1
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 5
67160: NEG
67161: PUSH
67162: LD_INT 0
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 5
67171: NEG
67172: PUSH
67173: LD_INT 1
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 5
67183: NEG
67184: PUSH
67185: LD_INT 2
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 3
67195: NEG
67196: PUSH
67197: LD_INT 2
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: ST_TO_ADDR
// end ; end ;
67251: GO 67254
67253: POP
// case btype of b_depot , b_warehouse :
67254: LD_VAR 0 1
67258: PUSH
67259: LD_INT 0
67261: DOUBLE
67262: EQUAL
67263: IFTRUE 67273
67265: LD_INT 1
67267: DOUBLE
67268: EQUAL
67269: IFTRUE 67273
67271: GO 67474
67273: POP
// case nation of nation_american :
67274: LD_VAR 0 5
67278: PUSH
67279: LD_INT 1
67281: DOUBLE
67282: EQUAL
67283: IFTRUE 67287
67285: GO 67343
67287: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67288: LD_ADDR_VAR 0 9
67292: PUSH
67293: LD_VAR 0 11
67297: PUSH
67298: LD_VAR 0 12
67302: PUSH
67303: LD_VAR 0 13
67307: PUSH
67308: LD_VAR 0 14
67312: PUSH
67313: LD_VAR 0 15
67317: PUSH
67318: LD_VAR 0 16
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: PUSH
67331: LD_VAR 0 4
67335: PUSH
67336: LD_INT 1
67338: PLUS
67339: ARRAY
67340: ST_TO_ADDR
67341: GO 67472
67343: LD_INT 2
67345: DOUBLE
67346: EQUAL
67347: IFTRUE 67351
67349: GO 67407
67351: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67352: LD_ADDR_VAR 0 9
67356: PUSH
67357: LD_VAR 0 17
67361: PUSH
67362: LD_VAR 0 18
67366: PUSH
67367: LD_VAR 0 19
67371: PUSH
67372: LD_VAR 0 20
67376: PUSH
67377: LD_VAR 0 21
67381: PUSH
67382: LD_VAR 0 22
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: PUSH
67395: LD_VAR 0 4
67399: PUSH
67400: LD_INT 1
67402: PLUS
67403: ARRAY
67404: ST_TO_ADDR
67405: GO 67472
67407: LD_INT 3
67409: DOUBLE
67410: EQUAL
67411: IFTRUE 67415
67413: GO 67471
67415: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67416: LD_ADDR_VAR 0 9
67420: PUSH
67421: LD_VAR 0 23
67425: PUSH
67426: LD_VAR 0 24
67430: PUSH
67431: LD_VAR 0 25
67435: PUSH
67436: LD_VAR 0 26
67440: PUSH
67441: LD_VAR 0 27
67445: PUSH
67446: LD_VAR 0 28
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: PUSH
67459: LD_VAR 0 4
67463: PUSH
67464: LD_INT 1
67466: PLUS
67467: ARRAY
67468: ST_TO_ADDR
67469: GO 67472
67471: POP
67472: GO 68027
67474: LD_INT 2
67476: DOUBLE
67477: EQUAL
67478: IFTRUE 67488
67480: LD_INT 3
67482: DOUBLE
67483: EQUAL
67484: IFTRUE 67488
67486: GO 67544
67488: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67489: LD_ADDR_VAR 0 9
67493: PUSH
67494: LD_VAR 0 29
67498: PUSH
67499: LD_VAR 0 30
67503: PUSH
67504: LD_VAR 0 31
67508: PUSH
67509: LD_VAR 0 32
67513: PUSH
67514: LD_VAR 0 33
67518: PUSH
67519: LD_VAR 0 34
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: PUSH
67532: LD_VAR 0 4
67536: PUSH
67537: LD_INT 1
67539: PLUS
67540: ARRAY
67541: ST_TO_ADDR
67542: GO 68027
67544: LD_INT 16
67546: DOUBLE
67547: EQUAL
67548: IFTRUE 67606
67550: LD_INT 17
67552: DOUBLE
67553: EQUAL
67554: IFTRUE 67606
67556: LD_INT 18
67558: DOUBLE
67559: EQUAL
67560: IFTRUE 67606
67562: LD_INT 19
67564: DOUBLE
67565: EQUAL
67566: IFTRUE 67606
67568: LD_INT 22
67570: DOUBLE
67571: EQUAL
67572: IFTRUE 67606
67574: LD_INT 20
67576: DOUBLE
67577: EQUAL
67578: IFTRUE 67606
67580: LD_INT 21
67582: DOUBLE
67583: EQUAL
67584: IFTRUE 67606
67586: LD_INT 23
67588: DOUBLE
67589: EQUAL
67590: IFTRUE 67606
67592: LD_INT 24
67594: DOUBLE
67595: EQUAL
67596: IFTRUE 67606
67598: LD_INT 25
67600: DOUBLE
67601: EQUAL
67602: IFTRUE 67606
67604: GO 67662
67606: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67607: LD_ADDR_VAR 0 9
67611: PUSH
67612: LD_VAR 0 35
67616: PUSH
67617: LD_VAR 0 36
67621: PUSH
67622: LD_VAR 0 37
67626: PUSH
67627: LD_VAR 0 38
67631: PUSH
67632: LD_VAR 0 39
67636: PUSH
67637: LD_VAR 0 40
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: PUSH
67650: LD_VAR 0 4
67654: PUSH
67655: LD_INT 1
67657: PLUS
67658: ARRAY
67659: ST_TO_ADDR
67660: GO 68027
67662: LD_INT 6
67664: DOUBLE
67665: EQUAL
67666: IFTRUE 67718
67668: LD_INT 7
67670: DOUBLE
67671: EQUAL
67672: IFTRUE 67718
67674: LD_INT 8
67676: DOUBLE
67677: EQUAL
67678: IFTRUE 67718
67680: LD_INT 13
67682: DOUBLE
67683: EQUAL
67684: IFTRUE 67718
67686: LD_INT 12
67688: DOUBLE
67689: EQUAL
67690: IFTRUE 67718
67692: LD_INT 15
67694: DOUBLE
67695: EQUAL
67696: IFTRUE 67718
67698: LD_INT 11
67700: DOUBLE
67701: EQUAL
67702: IFTRUE 67718
67704: LD_INT 14
67706: DOUBLE
67707: EQUAL
67708: IFTRUE 67718
67710: LD_INT 10
67712: DOUBLE
67713: EQUAL
67714: IFTRUE 67718
67716: GO 67774
67718: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67719: LD_ADDR_VAR 0 9
67723: PUSH
67724: LD_VAR 0 41
67728: PUSH
67729: LD_VAR 0 42
67733: PUSH
67734: LD_VAR 0 43
67738: PUSH
67739: LD_VAR 0 44
67743: PUSH
67744: LD_VAR 0 45
67748: PUSH
67749: LD_VAR 0 46
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: PUSH
67762: LD_VAR 0 4
67766: PUSH
67767: LD_INT 1
67769: PLUS
67770: ARRAY
67771: ST_TO_ADDR
67772: GO 68027
67774: LD_INT 36
67776: DOUBLE
67777: EQUAL
67778: IFTRUE 67782
67780: GO 67838
67782: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67783: LD_ADDR_VAR 0 9
67787: PUSH
67788: LD_VAR 0 47
67792: PUSH
67793: LD_VAR 0 48
67797: PUSH
67798: LD_VAR 0 49
67802: PUSH
67803: LD_VAR 0 50
67807: PUSH
67808: LD_VAR 0 51
67812: PUSH
67813: LD_VAR 0 52
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: PUSH
67826: LD_VAR 0 4
67830: PUSH
67831: LD_INT 1
67833: PLUS
67834: ARRAY
67835: ST_TO_ADDR
67836: GO 68027
67838: LD_INT 4
67840: DOUBLE
67841: EQUAL
67842: IFTRUE 67864
67844: LD_INT 5
67846: DOUBLE
67847: EQUAL
67848: IFTRUE 67864
67850: LD_INT 34
67852: DOUBLE
67853: EQUAL
67854: IFTRUE 67864
67856: LD_INT 37
67858: DOUBLE
67859: EQUAL
67860: IFTRUE 67864
67862: GO 67920
67864: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67865: LD_ADDR_VAR 0 9
67869: PUSH
67870: LD_VAR 0 53
67874: PUSH
67875: LD_VAR 0 54
67879: PUSH
67880: LD_VAR 0 55
67884: PUSH
67885: LD_VAR 0 56
67889: PUSH
67890: LD_VAR 0 57
67894: PUSH
67895: LD_VAR 0 58
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: PUSH
67908: LD_VAR 0 4
67912: PUSH
67913: LD_INT 1
67915: PLUS
67916: ARRAY
67917: ST_TO_ADDR
67918: GO 68027
67920: LD_INT 31
67922: DOUBLE
67923: EQUAL
67924: IFTRUE 67970
67926: LD_INT 32
67928: DOUBLE
67929: EQUAL
67930: IFTRUE 67970
67932: LD_INT 33
67934: DOUBLE
67935: EQUAL
67936: IFTRUE 67970
67938: LD_INT 27
67940: DOUBLE
67941: EQUAL
67942: IFTRUE 67970
67944: LD_INT 26
67946: DOUBLE
67947: EQUAL
67948: IFTRUE 67970
67950: LD_INT 28
67952: DOUBLE
67953: EQUAL
67954: IFTRUE 67970
67956: LD_INT 29
67958: DOUBLE
67959: EQUAL
67960: IFTRUE 67970
67962: LD_INT 30
67964: DOUBLE
67965: EQUAL
67966: IFTRUE 67970
67968: GO 68026
67970: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67971: LD_ADDR_VAR 0 9
67975: PUSH
67976: LD_VAR 0 59
67980: PUSH
67981: LD_VAR 0 60
67985: PUSH
67986: LD_VAR 0 61
67990: PUSH
67991: LD_VAR 0 62
67995: PUSH
67996: LD_VAR 0 63
68000: PUSH
68001: LD_VAR 0 64
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: PUSH
68014: LD_VAR 0 4
68018: PUSH
68019: LD_INT 1
68021: PLUS
68022: ARRAY
68023: ST_TO_ADDR
68024: GO 68027
68026: POP
// temp_list2 = [ ] ;
68027: LD_ADDR_VAR 0 10
68031: PUSH
68032: EMPTY
68033: ST_TO_ADDR
// for i in temp_list do
68034: LD_ADDR_VAR 0 8
68038: PUSH
68039: LD_VAR 0 9
68043: PUSH
68044: FOR_IN
68045: IFFALSE 68097
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68047: LD_ADDR_VAR 0 10
68051: PUSH
68052: LD_VAR 0 10
68056: PUSH
68057: LD_VAR 0 8
68061: PUSH
68062: LD_INT 1
68064: ARRAY
68065: PUSH
68066: LD_VAR 0 2
68070: PLUS
68071: PUSH
68072: LD_VAR 0 8
68076: PUSH
68077: LD_INT 2
68079: ARRAY
68080: PUSH
68081: LD_VAR 0 3
68085: PLUS
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: EMPTY
68092: LIST
68093: ADD
68094: ST_TO_ADDR
68095: GO 68044
68097: POP
68098: POP
// result = temp_list2 ;
68099: LD_ADDR_VAR 0 7
68103: PUSH
68104: LD_VAR 0 10
68108: ST_TO_ADDR
// end ;
68109: LD_VAR 0 7
68113: RET
// export function EnemyInRange ( unit , dist ) ; begin
68114: LD_INT 0
68116: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68117: LD_ADDR_VAR 0 3
68121: PUSH
68122: LD_VAR 0 1
68126: PPUSH
68127: CALL_OW 255
68131: PPUSH
68132: LD_VAR 0 1
68136: PPUSH
68137: CALL_OW 250
68141: PPUSH
68142: LD_VAR 0 1
68146: PPUSH
68147: CALL_OW 251
68151: PPUSH
68152: LD_VAR 0 2
68156: PPUSH
68157: CALL 41885 0 4
68161: PUSH
68162: LD_INT 4
68164: ARRAY
68165: ST_TO_ADDR
// end ;
68166: LD_VAR 0 3
68170: RET
// export function PlayerSeeMe ( unit ) ; begin
68171: LD_INT 0
68173: PPUSH
// result := See ( your_side , unit ) ;
68174: LD_ADDR_VAR 0 2
68178: PUSH
68179: LD_OWVAR 2
68183: PPUSH
68184: LD_VAR 0 1
68188: PPUSH
68189: CALL_OW 292
68193: ST_TO_ADDR
// end ;
68194: LD_VAR 0 2
68198: RET
// export function ReverseDir ( unit ) ; begin
68199: LD_INT 0
68201: PPUSH
// if not unit then
68202: LD_VAR 0 1
68206: NOT
68207: IFFALSE 68211
// exit ;
68209: GO 68234
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68211: LD_ADDR_VAR 0 2
68215: PUSH
68216: LD_VAR 0 1
68220: PPUSH
68221: CALL_OW 254
68225: PUSH
68226: LD_INT 3
68228: PLUS
68229: PUSH
68230: LD_INT 6
68232: MOD
68233: ST_TO_ADDR
// end ;
68234: LD_VAR 0 2
68238: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68239: LD_INT 0
68241: PPUSH
68242: PPUSH
68243: PPUSH
68244: PPUSH
68245: PPUSH
// if not hexes then
68246: LD_VAR 0 2
68250: NOT
68251: IFFALSE 68255
// exit ;
68253: GO 68403
// dist := 9999 ;
68255: LD_ADDR_VAR 0 5
68259: PUSH
68260: LD_INT 9999
68262: ST_TO_ADDR
// for i = 1 to hexes do
68263: LD_ADDR_VAR 0 4
68267: PUSH
68268: DOUBLE
68269: LD_INT 1
68271: DEC
68272: ST_TO_ADDR
68273: LD_VAR 0 2
68277: PUSH
68278: FOR_TO
68279: IFFALSE 68391
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68281: LD_VAR 0 1
68285: PPUSH
68286: LD_VAR 0 2
68290: PUSH
68291: LD_VAR 0 4
68295: ARRAY
68296: PUSH
68297: LD_INT 1
68299: ARRAY
68300: PPUSH
68301: LD_VAR 0 2
68305: PUSH
68306: LD_VAR 0 4
68310: ARRAY
68311: PUSH
68312: LD_INT 2
68314: ARRAY
68315: PPUSH
68316: CALL_OW 297
68320: PUSH
68321: LD_VAR 0 5
68325: LESS
68326: IFFALSE 68389
// begin hex := hexes [ i ] ;
68328: LD_ADDR_VAR 0 7
68332: PUSH
68333: LD_VAR 0 2
68337: PUSH
68338: LD_VAR 0 4
68342: ARRAY
68343: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68344: LD_ADDR_VAR 0 5
68348: PUSH
68349: LD_VAR 0 1
68353: PPUSH
68354: LD_VAR 0 2
68358: PUSH
68359: LD_VAR 0 4
68363: ARRAY
68364: PUSH
68365: LD_INT 1
68367: ARRAY
68368: PPUSH
68369: LD_VAR 0 2
68373: PUSH
68374: LD_VAR 0 4
68378: ARRAY
68379: PUSH
68380: LD_INT 2
68382: ARRAY
68383: PPUSH
68384: CALL_OW 297
68388: ST_TO_ADDR
// end ; end ;
68389: GO 68278
68391: POP
68392: POP
// result := hex ;
68393: LD_ADDR_VAR 0 3
68397: PUSH
68398: LD_VAR 0 7
68402: ST_TO_ADDR
// end ;
68403: LD_VAR 0 3
68407: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68408: LD_INT 0
68410: PPUSH
68411: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68412: LD_VAR 0 1
68416: NOT
68417: PUSH
68418: LD_VAR 0 1
68422: PUSH
68423: LD_INT 21
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 23
68435: PUSH
68436: LD_INT 2
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PPUSH
68447: CALL_OW 69
68451: IN
68452: NOT
68453: OR
68454: IFFALSE 68458
// exit ;
68456: GO 68505
// for i = 1 to 3 do
68458: LD_ADDR_VAR 0 3
68462: PUSH
68463: DOUBLE
68464: LD_INT 1
68466: DEC
68467: ST_TO_ADDR
68468: LD_INT 3
68470: PUSH
68471: FOR_TO
68472: IFFALSE 68503
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68474: LD_VAR 0 1
68478: PPUSH
68479: CALL_OW 250
68483: PPUSH
68484: LD_VAR 0 1
68488: PPUSH
68489: CALL_OW 251
68493: PPUSH
68494: LD_INT 1
68496: PPUSH
68497: CALL_OW 453
68501: GO 68471
68503: POP
68504: POP
// end ;
68505: LD_VAR 0 2
68509: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68510: LD_INT 0
68512: PPUSH
68513: PPUSH
68514: PPUSH
68515: PPUSH
68516: PPUSH
68517: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68518: LD_VAR 0 1
68522: NOT
68523: PUSH
68524: LD_VAR 0 2
68528: NOT
68529: OR
68530: PUSH
68531: LD_VAR 0 1
68535: PPUSH
68536: CALL_OW 314
68540: OR
68541: IFFALSE 68545
// exit ;
68543: GO 68986
// x := GetX ( enemy_unit ) ;
68545: LD_ADDR_VAR 0 7
68549: PUSH
68550: LD_VAR 0 2
68554: PPUSH
68555: CALL_OW 250
68559: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68560: LD_ADDR_VAR 0 8
68564: PUSH
68565: LD_VAR 0 2
68569: PPUSH
68570: CALL_OW 251
68574: ST_TO_ADDR
// if not x or not y then
68575: LD_VAR 0 7
68579: NOT
68580: PUSH
68581: LD_VAR 0 8
68585: NOT
68586: OR
68587: IFFALSE 68591
// exit ;
68589: GO 68986
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68591: LD_ADDR_VAR 0 6
68595: PUSH
68596: LD_VAR 0 7
68600: PPUSH
68601: LD_INT 0
68603: PPUSH
68604: LD_INT 4
68606: PPUSH
68607: CALL_OW 272
68611: PUSH
68612: LD_VAR 0 8
68616: PPUSH
68617: LD_INT 0
68619: PPUSH
68620: LD_INT 4
68622: PPUSH
68623: CALL_OW 273
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_VAR 0 7
68636: PPUSH
68637: LD_INT 1
68639: PPUSH
68640: LD_INT 4
68642: PPUSH
68643: CALL_OW 272
68647: PUSH
68648: LD_VAR 0 8
68652: PPUSH
68653: LD_INT 1
68655: PPUSH
68656: LD_INT 4
68658: PPUSH
68659: CALL_OW 273
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_VAR 0 7
68672: PPUSH
68673: LD_INT 2
68675: PPUSH
68676: LD_INT 4
68678: PPUSH
68679: CALL_OW 272
68683: PUSH
68684: LD_VAR 0 8
68688: PPUSH
68689: LD_INT 2
68691: PPUSH
68692: LD_INT 4
68694: PPUSH
68695: CALL_OW 273
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_VAR 0 7
68708: PPUSH
68709: LD_INT 3
68711: PPUSH
68712: LD_INT 4
68714: PPUSH
68715: CALL_OW 272
68719: PUSH
68720: LD_VAR 0 8
68724: PPUSH
68725: LD_INT 3
68727: PPUSH
68728: LD_INT 4
68730: PPUSH
68731: CALL_OW 273
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_VAR 0 7
68744: PPUSH
68745: LD_INT 4
68747: PPUSH
68748: LD_INT 4
68750: PPUSH
68751: CALL_OW 272
68755: PUSH
68756: LD_VAR 0 8
68760: PPUSH
68761: LD_INT 4
68763: PPUSH
68764: LD_INT 4
68766: PPUSH
68767: CALL_OW 273
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_VAR 0 7
68780: PPUSH
68781: LD_INT 5
68783: PPUSH
68784: LD_INT 4
68786: PPUSH
68787: CALL_OW 272
68791: PUSH
68792: LD_VAR 0 8
68796: PPUSH
68797: LD_INT 5
68799: PPUSH
68800: LD_INT 4
68802: PPUSH
68803: CALL_OW 273
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: ST_TO_ADDR
// for i = tmp downto 1 do
68820: LD_ADDR_VAR 0 4
68824: PUSH
68825: DOUBLE
68826: LD_VAR 0 6
68830: INC
68831: ST_TO_ADDR
68832: LD_INT 1
68834: PUSH
68835: FOR_DOWNTO
68836: IFFALSE 68937
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68838: LD_VAR 0 6
68842: PUSH
68843: LD_VAR 0 4
68847: ARRAY
68848: PUSH
68849: LD_INT 1
68851: ARRAY
68852: PPUSH
68853: LD_VAR 0 6
68857: PUSH
68858: LD_VAR 0 4
68862: ARRAY
68863: PUSH
68864: LD_INT 2
68866: ARRAY
68867: PPUSH
68868: CALL_OW 488
68872: NOT
68873: PUSH
68874: LD_VAR 0 6
68878: PUSH
68879: LD_VAR 0 4
68883: ARRAY
68884: PUSH
68885: LD_INT 1
68887: ARRAY
68888: PPUSH
68889: LD_VAR 0 6
68893: PUSH
68894: LD_VAR 0 4
68898: ARRAY
68899: PUSH
68900: LD_INT 2
68902: ARRAY
68903: PPUSH
68904: CALL_OW 428
68908: PUSH
68909: LD_INT 0
68911: NONEQUAL
68912: OR
68913: IFFALSE 68935
// tmp := Delete ( tmp , i ) ;
68915: LD_ADDR_VAR 0 6
68919: PUSH
68920: LD_VAR 0 6
68924: PPUSH
68925: LD_VAR 0 4
68929: PPUSH
68930: CALL_OW 3
68934: ST_TO_ADDR
68935: GO 68835
68937: POP
68938: POP
// j := GetClosestHex ( unit , tmp ) ;
68939: LD_ADDR_VAR 0 5
68943: PUSH
68944: LD_VAR 0 1
68948: PPUSH
68949: LD_VAR 0 6
68953: PPUSH
68954: CALL 68239 0 2
68958: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68959: LD_VAR 0 1
68963: PPUSH
68964: LD_VAR 0 5
68968: PUSH
68969: LD_INT 1
68971: ARRAY
68972: PPUSH
68973: LD_VAR 0 5
68977: PUSH
68978: LD_INT 2
68980: ARRAY
68981: PPUSH
68982: CALL_OW 111
// end ;
68986: LD_VAR 0 3
68990: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68991: LD_INT 0
68993: PPUSH
68994: PPUSH
68995: PPUSH
// uc_side = 0 ;
68996: LD_ADDR_OWVAR 20
69000: PUSH
69001: LD_INT 0
69003: ST_TO_ADDR
// uc_nation = 0 ;
69004: LD_ADDR_OWVAR 21
69008: PUSH
69009: LD_INT 0
69011: ST_TO_ADDR
// InitHc_All ( ) ;
69012: CALL_OW 584
// InitVc ;
69016: CALL_OW 20
// if mastodonts then
69020: LD_VAR 0 6
69024: IFFALSE 69091
// for i = 1 to mastodonts do
69026: LD_ADDR_VAR 0 11
69030: PUSH
69031: DOUBLE
69032: LD_INT 1
69034: DEC
69035: ST_TO_ADDR
69036: LD_VAR 0 6
69040: PUSH
69041: FOR_TO
69042: IFFALSE 69089
// begin vc_chassis := 31 ;
69044: LD_ADDR_OWVAR 37
69048: PUSH
69049: LD_INT 31
69051: ST_TO_ADDR
// vc_control := control_rider ;
69052: LD_ADDR_OWVAR 38
69056: PUSH
69057: LD_INT 4
69059: ST_TO_ADDR
// animal := CreateVehicle ;
69060: LD_ADDR_VAR 0 12
69064: PUSH
69065: CALL_OW 45
69069: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69070: LD_VAR 0 12
69074: PPUSH
69075: LD_VAR 0 8
69079: PPUSH
69080: LD_INT 0
69082: PPUSH
69083: CALL 71279 0 3
// end ;
69087: GO 69041
69089: POP
69090: POP
// if horses then
69091: LD_VAR 0 5
69095: IFFALSE 69162
// for i = 1 to horses do
69097: LD_ADDR_VAR 0 11
69101: PUSH
69102: DOUBLE
69103: LD_INT 1
69105: DEC
69106: ST_TO_ADDR
69107: LD_VAR 0 5
69111: PUSH
69112: FOR_TO
69113: IFFALSE 69160
// begin hc_class := 21 ;
69115: LD_ADDR_OWVAR 28
69119: PUSH
69120: LD_INT 21
69122: ST_TO_ADDR
// hc_gallery :=  ;
69123: LD_ADDR_OWVAR 33
69127: PUSH
69128: LD_STRING 
69130: ST_TO_ADDR
// animal := CreateHuman ;
69131: LD_ADDR_VAR 0 12
69135: PUSH
69136: CALL_OW 44
69140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69141: LD_VAR 0 12
69145: PPUSH
69146: LD_VAR 0 8
69150: PPUSH
69151: LD_INT 0
69153: PPUSH
69154: CALL 71279 0 3
// end ;
69158: GO 69112
69160: POP
69161: POP
// if birds then
69162: LD_VAR 0 1
69166: IFFALSE 69233
// for i = 1 to birds do
69168: LD_ADDR_VAR 0 11
69172: PUSH
69173: DOUBLE
69174: LD_INT 1
69176: DEC
69177: ST_TO_ADDR
69178: LD_VAR 0 1
69182: PUSH
69183: FOR_TO
69184: IFFALSE 69231
// begin hc_class = 18 ;
69186: LD_ADDR_OWVAR 28
69190: PUSH
69191: LD_INT 18
69193: ST_TO_ADDR
// hc_gallery =  ;
69194: LD_ADDR_OWVAR 33
69198: PUSH
69199: LD_STRING 
69201: ST_TO_ADDR
// animal := CreateHuman ;
69202: LD_ADDR_VAR 0 12
69206: PUSH
69207: CALL_OW 44
69211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69212: LD_VAR 0 12
69216: PPUSH
69217: LD_VAR 0 8
69221: PPUSH
69222: LD_INT 0
69224: PPUSH
69225: CALL 71279 0 3
// end ;
69229: GO 69183
69231: POP
69232: POP
// if tigers then
69233: LD_VAR 0 2
69237: IFFALSE 69321
// for i = 1 to tigers do
69239: LD_ADDR_VAR 0 11
69243: PUSH
69244: DOUBLE
69245: LD_INT 1
69247: DEC
69248: ST_TO_ADDR
69249: LD_VAR 0 2
69253: PUSH
69254: FOR_TO
69255: IFFALSE 69319
// begin hc_class = class_tiger ;
69257: LD_ADDR_OWVAR 28
69261: PUSH
69262: LD_INT 14
69264: ST_TO_ADDR
// hc_gallery =  ;
69265: LD_ADDR_OWVAR 33
69269: PUSH
69270: LD_STRING 
69272: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69273: LD_ADDR_OWVAR 35
69277: PUSH
69278: LD_INT 7
69280: NEG
69281: PPUSH
69282: LD_INT 7
69284: PPUSH
69285: CALL_OW 12
69289: ST_TO_ADDR
// animal := CreateHuman ;
69290: LD_ADDR_VAR 0 12
69294: PUSH
69295: CALL_OW 44
69299: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69300: LD_VAR 0 12
69304: PPUSH
69305: LD_VAR 0 8
69309: PPUSH
69310: LD_INT 0
69312: PPUSH
69313: CALL 71279 0 3
// end ;
69317: GO 69254
69319: POP
69320: POP
// if apemans then
69321: LD_VAR 0 3
69325: IFFALSE 69448
// for i = 1 to apemans do
69327: LD_ADDR_VAR 0 11
69331: PUSH
69332: DOUBLE
69333: LD_INT 1
69335: DEC
69336: ST_TO_ADDR
69337: LD_VAR 0 3
69341: PUSH
69342: FOR_TO
69343: IFFALSE 69446
// begin hc_class = class_apeman ;
69345: LD_ADDR_OWVAR 28
69349: PUSH
69350: LD_INT 12
69352: ST_TO_ADDR
// hc_gallery =  ;
69353: LD_ADDR_OWVAR 33
69357: PUSH
69358: LD_STRING 
69360: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69361: LD_ADDR_OWVAR 35
69365: PUSH
69366: LD_INT 5
69368: NEG
69369: PPUSH
69370: LD_INT 5
69372: PPUSH
69373: CALL_OW 12
69377: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69378: LD_ADDR_OWVAR 31
69382: PUSH
69383: LD_INT 1
69385: PPUSH
69386: LD_INT 3
69388: PPUSH
69389: CALL_OW 12
69393: PUSH
69394: LD_INT 1
69396: PPUSH
69397: LD_INT 3
69399: PPUSH
69400: CALL_OW 12
69404: PUSH
69405: LD_INT 0
69407: PUSH
69408: LD_INT 0
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: ST_TO_ADDR
// animal := CreateHuman ;
69417: LD_ADDR_VAR 0 12
69421: PUSH
69422: CALL_OW 44
69426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69427: LD_VAR 0 12
69431: PPUSH
69432: LD_VAR 0 8
69436: PPUSH
69437: LD_INT 0
69439: PPUSH
69440: CALL 71279 0 3
// end ;
69444: GO 69342
69446: POP
69447: POP
// if enchidnas then
69448: LD_VAR 0 4
69452: IFFALSE 69519
// for i = 1 to enchidnas do
69454: LD_ADDR_VAR 0 11
69458: PUSH
69459: DOUBLE
69460: LD_INT 1
69462: DEC
69463: ST_TO_ADDR
69464: LD_VAR 0 4
69468: PUSH
69469: FOR_TO
69470: IFFALSE 69517
// begin hc_class = 13 ;
69472: LD_ADDR_OWVAR 28
69476: PUSH
69477: LD_INT 13
69479: ST_TO_ADDR
// hc_gallery =  ;
69480: LD_ADDR_OWVAR 33
69484: PUSH
69485: LD_STRING 
69487: ST_TO_ADDR
// animal := CreateHuman ;
69488: LD_ADDR_VAR 0 12
69492: PUSH
69493: CALL_OW 44
69497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69498: LD_VAR 0 12
69502: PPUSH
69503: LD_VAR 0 8
69507: PPUSH
69508: LD_INT 0
69510: PPUSH
69511: CALL 71279 0 3
// end ;
69515: GO 69469
69517: POP
69518: POP
// if fishes then
69519: LD_VAR 0 7
69523: IFFALSE 69590
// for i = 1 to fishes do
69525: LD_ADDR_VAR 0 11
69529: PUSH
69530: DOUBLE
69531: LD_INT 1
69533: DEC
69534: ST_TO_ADDR
69535: LD_VAR 0 7
69539: PUSH
69540: FOR_TO
69541: IFFALSE 69588
// begin hc_class = 20 ;
69543: LD_ADDR_OWVAR 28
69547: PUSH
69548: LD_INT 20
69550: ST_TO_ADDR
// hc_gallery =  ;
69551: LD_ADDR_OWVAR 33
69555: PUSH
69556: LD_STRING 
69558: ST_TO_ADDR
// animal := CreateHuman ;
69559: LD_ADDR_VAR 0 12
69563: PUSH
69564: CALL_OW 44
69568: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69569: LD_VAR 0 12
69573: PPUSH
69574: LD_VAR 0 9
69578: PPUSH
69579: LD_INT 0
69581: PPUSH
69582: CALL 71279 0 3
// end ;
69586: GO 69540
69588: POP
69589: POP
// end ;
69590: LD_VAR 0 10
69594: RET
// export function WantHeal ( sci , unit ) ; begin
69595: LD_INT 0
69597: PPUSH
// if GetTaskList ( sci ) > 0 then
69598: LD_VAR 0 1
69602: PPUSH
69603: CALL_OW 437
69607: PUSH
69608: LD_INT 0
69610: GREATER
69611: IFFALSE 69681
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69613: LD_VAR 0 1
69617: PPUSH
69618: CALL_OW 437
69622: PUSH
69623: LD_INT 1
69625: ARRAY
69626: PUSH
69627: LD_INT 1
69629: ARRAY
69630: PUSH
69631: LD_STRING l
69633: EQUAL
69634: PUSH
69635: LD_VAR 0 1
69639: PPUSH
69640: CALL_OW 437
69644: PUSH
69645: LD_INT 1
69647: ARRAY
69648: PUSH
69649: LD_INT 4
69651: ARRAY
69652: PUSH
69653: LD_VAR 0 2
69657: EQUAL
69658: AND
69659: IFFALSE 69671
// result := true else
69661: LD_ADDR_VAR 0 3
69665: PUSH
69666: LD_INT 1
69668: ST_TO_ADDR
69669: GO 69679
// result := false ;
69671: LD_ADDR_VAR 0 3
69675: PUSH
69676: LD_INT 0
69678: ST_TO_ADDR
// end else
69679: GO 69689
// result := false ;
69681: LD_ADDR_VAR 0 3
69685: PUSH
69686: LD_INT 0
69688: ST_TO_ADDR
// end ;
69689: LD_VAR 0 3
69693: RET
// export function HealTarget ( sci ) ; begin
69694: LD_INT 0
69696: PPUSH
// if not sci then
69697: LD_VAR 0 1
69701: NOT
69702: IFFALSE 69706
// exit ;
69704: GO 69771
// result := 0 ;
69706: LD_ADDR_VAR 0 2
69710: PUSH
69711: LD_INT 0
69713: ST_TO_ADDR
// if GetTaskList ( sci ) then
69714: LD_VAR 0 1
69718: PPUSH
69719: CALL_OW 437
69723: IFFALSE 69771
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69725: LD_VAR 0 1
69729: PPUSH
69730: CALL_OW 437
69734: PUSH
69735: LD_INT 1
69737: ARRAY
69738: PUSH
69739: LD_INT 1
69741: ARRAY
69742: PUSH
69743: LD_STRING l
69745: EQUAL
69746: IFFALSE 69771
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69748: LD_ADDR_VAR 0 2
69752: PUSH
69753: LD_VAR 0 1
69757: PPUSH
69758: CALL_OW 437
69762: PUSH
69763: LD_INT 1
69765: ARRAY
69766: PUSH
69767: LD_INT 4
69769: ARRAY
69770: ST_TO_ADDR
// end ;
69771: LD_VAR 0 2
69775: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69776: LD_INT 0
69778: PPUSH
69779: PPUSH
69780: PPUSH
69781: PPUSH
// if not base_units then
69782: LD_VAR 0 1
69786: NOT
69787: IFFALSE 69791
// exit ;
69789: GO 69878
// result := false ;
69791: LD_ADDR_VAR 0 2
69795: PUSH
69796: LD_INT 0
69798: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69799: LD_ADDR_VAR 0 5
69803: PUSH
69804: LD_VAR 0 1
69808: PPUSH
69809: LD_INT 21
69811: PUSH
69812: LD_INT 3
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PPUSH
69819: CALL_OW 72
69823: ST_TO_ADDR
// if not tmp then
69824: LD_VAR 0 5
69828: NOT
69829: IFFALSE 69833
// exit ;
69831: GO 69878
// for i in tmp do
69833: LD_ADDR_VAR 0 3
69837: PUSH
69838: LD_VAR 0 5
69842: PUSH
69843: FOR_IN
69844: IFFALSE 69876
// begin result := EnemyInRange ( i , 22 ) ;
69846: LD_ADDR_VAR 0 2
69850: PUSH
69851: LD_VAR 0 3
69855: PPUSH
69856: LD_INT 22
69858: PPUSH
69859: CALL 68114 0 2
69863: ST_TO_ADDR
// if result then
69864: LD_VAR 0 2
69868: IFFALSE 69874
// exit ;
69870: POP
69871: POP
69872: GO 69878
// end ;
69874: GO 69843
69876: POP
69877: POP
// end ;
69878: LD_VAR 0 2
69882: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69883: LD_INT 0
69885: PPUSH
69886: PPUSH
// if not units then
69887: LD_VAR 0 1
69891: NOT
69892: IFFALSE 69896
// exit ;
69894: GO 69966
// result := [ ] ;
69896: LD_ADDR_VAR 0 3
69900: PUSH
69901: EMPTY
69902: ST_TO_ADDR
// for i in units do
69903: LD_ADDR_VAR 0 4
69907: PUSH
69908: LD_VAR 0 1
69912: PUSH
69913: FOR_IN
69914: IFFALSE 69964
// if GetTag ( i ) = tag then
69916: LD_VAR 0 4
69920: PPUSH
69921: CALL_OW 110
69925: PUSH
69926: LD_VAR 0 2
69930: EQUAL
69931: IFFALSE 69962
// result := Insert ( result , result + 1 , i ) ;
69933: LD_ADDR_VAR 0 3
69937: PUSH
69938: LD_VAR 0 3
69942: PPUSH
69943: LD_VAR 0 3
69947: PUSH
69948: LD_INT 1
69950: PLUS
69951: PPUSH
69952: LD_VAR 0 4
69956: PPUSH
69957: CALL_OW 2
69961: ST_TO_ADDR
69962: GO 69913
69964: POP
69965: POP
// end ;
69966: LD_VAR 0 3
69970: RET
// export function IsDriver ( un ) ; begin
69971: LD_INT 0
69973: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69974: LD_ADDR_VAR 0 2
69978: PUSH
69979: LD_VAR 0 1
69983: PUSH
69984: LD_INT 55
69986: PUSH
69987: EMPTY
69988: LIST
69989: PPUSH
69990: CALL_OW 69
69994: IN
69995: ST_TO_ADDR
// end ;
69996: LD_VAR 0 2
70000: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70001: LD_INT 0
70003: PPUSH
70004: PPUSH
// list := [ ] ;
70005: LD_ADDR_VAR 0 5
70009: PUSH
70010: EMPTY
70011: ST_TO_ADDR
// case d of 0 :
70012: LD_VAR 0 3
70016: PUSH
70017: LD_INT 0
70019: DOUBLE
70020: EQUAL
70021: IFTRUE 70025
70023: GO 70158
70025: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70026: LD_ADDR_VAR 0 5
70030: PUSH
70031: LD_VAR 0 1
70035: PUSH
70036: LD_INT 4
70038: MINUS
70039: PUSH
70040: LD_VAR 0 2
70044: PUSH
70045: LD_INT 4
70047: MINUS
70048: PUSH
70049: LD_INT 2
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: LIST
70056: PUSH
70057: LD_VAR 0 1
70061: PUSH
70062: LD_INT 3
70064: MINUS
70065: PUSH
70066: LD_VAR 0 2
70070: PUSH
70071: LD_INT 1
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: LIST
70078: PUSH
70079: LD_VAR 0 1
70083: PUSH
70084: LD_INT 4
70086: PLUS
70087: PUSH
70088: LD_VAR 0 2
70092: PUSH
70093: LD_INT 4
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: LIST
70100: PUSH
70101: LD_VAR 0 1
70105: PUSH
70106: LD_INT 3
70108: PLUS
70109: PUSH
70110: LD_VAR 0 2
70114: PUSH
70115: LD_INT 3
70117: PLUS
70118: PUSH
70119: LD_INT 5
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: LIST
70126: PUSH
70127: LD_VAR 0 1
70131: PUSH
70132: LD_VAR 0 2
70136: PUSH
70137: LD_INT 4
70139: PLUS
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: LIST
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: ST_TO_ADDR
// end ; 1 :
70156: GO 70856
70158: LD_INT 1
70160: DOUBLE
70161: EQUAL
70162: IFTRUE 70166
70164: GO 70299
70166: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70167: LD_ADDR_VAR 0 5
70171: PUSH
70172: LD_VAR 0 1
70176: PUSH
70177: LD_VAR 0 2
70181: PUSH
70182: LD_INT 4
70184: MINUS
70185: PUSH
70186: LD_INT 3
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: LIST
70193: PUSH
70194: LD_VAR 0 1
70198: PUSH
70199: LD_INT 3
70201: MINUS
70202: PUSH
70203: LD_VAR 0 2
70207: PUSH
70208: LD_INT 3
70210: MINUS
70211: PUSH
70212: LD_INT 2
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: LIST
70219: PUSH
70220: LD_VAR 0 1
70224: PUSH
70225: LD_INT 4
70227: MINUS
70228: PUSH
70229: LD_VAR 0 2
70233: PUSH
70234: LD_INT 1
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: LIST
70241: PUSH
70242: LD_VAR 0 1
70246: PUSH
70247: LD_VAR 0 2
70251: PUSH
70252: LD_INT 3
70254: PLUS
70255: PUSH
70256: LD_INT 0
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: LIST
70263: PUSH
70264: LD_VAR 0 1
70268: PUSH
70269: LD_INT 4
70271: PLUS
70272: PUSH
70273: LD_VAR 0 2
70277: PUSH
70278: LD_INT 4
70280: PLUS
70281: PUSH
70282: LD_INT 5
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: LIST
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: ST_TO_ADDR
// end ; 2 :
70297: GO 70856
70299: LD_INT 2
70301: DOUBLE
70302: EQUAL
70303: IFTRUE 70307
70305: GO 70436
70307: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70308: LD_ADDR_VAR 0 5
70312: PUSH
70313: LD_VAR 0 1
70317: PUSH
70318: LD_VAR 0 2
70322: PUSH
70323: LD_INT 3
70325: MINUS
70326: PUSH
70327: LD_INT 3
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: LIST
70334: PUSH
70335: LD_VAR 0 1
70339: PUSH
70340: LD_INT 4
70342: PLUS
70343: PUSH
70344: LD_VAR 0 2
70348: PUSH
70349: LD_INT 4
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: LIST
70356: PUSH
70357: LD_VAR 0 1
70361: PUSH
70362: LD_VAR 0 2
70366: PUSH
70367: LD_INT 4
70369: PLUS
70370: PUSH
70371: LD_INT 0
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: LIST
70378: PUSH
70379: LD_VAR 0 1
70383: PUSH
70384: LD_INT 3
70386: MINUS
70387: PUSH
70388: LD_VAR 0 2
70392: PUSH
70393: LD_INT 1
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: LIST
70400: PUSH
70401: LD_VAR 0 1
70405: PUSH
70406: LD_INT 4
70408: MINUS
70409: PUSH
70410: LD_VAR 0 2
70414: PUSH
70415: LD_INT 4
70417: MINUS
70418: PUSH
70419: LD_INT 2
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: LIST
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: ST_TO_ADDR
// end ; 3 :
70434: GO 70856
70436: LD_INT 3
70438: DOUBLE
70439: EQUAL
70440: IFTRUE 70444
70442: GO 70577
70444: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70445: LD_ADDR_VAR 0 5
70449: PUSH
70450: LD_VAR 0 1
70454: PUSH
70455: LD_INT 3
70457: PLUS
70458: PUSH
70459: LD_VAR 0 2
70463: PUSH
70464: LD_INT 4
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: LIST
70471: PUSH
70472: LD_VAR 0 1
70476: PUSH
70477: LD_INT 4
70479: PLUS
70480: PUSH
70481: LD_VAR 0 2
70485: PUSH
70486: LD_INT 4
70488: PLUS
70489: PUSH
70490: LD_INT 5
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: LIST
70497: PUSH
70498: LD_VAR 0 1
70502: PUSH
70503: LD_INT 4
70505: MINUS
70506: PUSH
70507: LD_VAR 0 2
70511: PUSH
70512: LD_INT 1
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: LIST
70519: PUSH
70520: LD_VAR 0 1
70524: PUSH
70525: LD_VAR 0 2
70529: PUSH
70530: LD_INT 4
70532: MINUS
70533: PUSH
70534: LD_INT 3
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: LIST
70541: PUSH
70542: LD_VAR 0 1
70546: PUSH
70547: LD_INT 3
70549: MINUS
70550: PUSH
70551: LD_VAR 0 2
70555: PUSH
70556: LD_INT 3
70558: MINUS
70559: PUSH
70560: LD_INT 2
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: LIST
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: ST_TO_ADDR
// end ; 4 :
70575: GO 70856
70577: LD_INT 4
70579: DOUBLE
70580: EQUAL
70581: IFTRUE 70585
70583: GO 70718
70585: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70586: LD_ADDR_VAR 0 5
70590: PUSH
70591: LD_VAR 0 1
70595: PUSH
70596: LD_VAR 0 2
70600: PUSH
70601: LD_INT 4
70603: PLUS
70604: PUSH
70605: LD_INT 0
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: LIST
70612: PUSH
70613: LD_VAR 0 1
70617: PUSH
70618: LD_INT 3
70620: PLUS
70621: PUSH
70622: LD_VAR 0 2
70626: PUSH
70627: LD_INT 3
70629: PLUS
70630: PUSH
70631: LD_INT 5
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: LIST
70638: PUSH
70639: LD_VAR 0 1
70643: PUSH
70644: LD_INT 4
70646: PLUS
70647: PUSH
70648: LD_VAR 0 2
70652: PUSH
70653: LD_INT 4
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: LIST
70660: PUSH
70661: LD_VAR 0 1
70665: PUSH
70666: LD_VAR 0 2
70670: PUSH
70671: LD_INT 3
70673: MINUS
70674: PUSH
70675: LD_INT 3
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: LIST
70682: PUSH
70683: LD_VAR 0 1
70687: PUSH
70688: LD_INT 4
70690: MINUS
70691: PUSH
70692: LD_VAR 0 2
70696: PUSH
70697: LD_INT 4
70699: MINUS
70700: PUSH
70701: LD_INT 2
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: LIST
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: ST_TO_ADDR
// end ; 5 :
70716: GO 70856
70718: LD_INT 5
70720: DOUBLE
70721: EQUAL
70722: IFTRUE 70726
70724: GO 70855
70726: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70727: LD_ADDR_VAR 0 5
70731: PUSH
70732: LD_VAR 0 1
70736: PUSH
70737: LD_INT 4
70739: MINUS
70740: PUSH
70741: LD_VAR 0 2
70745: PUSH
70746: LD_INT 1
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: LIST
70753: PUSH
70754: LD_VAR 0 1
70758: PUSH
70759: LD_VAR 0 2
70763: PUSH
70764: LD_INT 4
70766: MINUS
70767: PUSH
70768: LD_INT 3
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: LIST
70775: PUSH
70776: LD_VAR 0 1
70780: PUSH
70781: LD_INT 4
70783: PLUS
70784: PUSH
70785: LD_VAR 0 2
70789: PUSH
70790: LD_INT 4
70792: PLUS
70793: PUSH
70794: LD_INT 5
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: LIST
70801: PUSH
70802: LD_VAR 0 1
70806: PUSH
70807: LD_INT 3
70809: PLUS
70810: PUSH
70811: LD_VAR 0 2
70815: PUSH
70816: LD_INT 4
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: LIST
70823: PUSH
70824: LD_VAR 0 1
70828: PUSH
70829: LD_VAR 0 2
70833: PUSH
70834: LD_INT 3
70836: PLUS
70837: PUSH
70838: LD_INT 0
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: LIST
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: ST_TO_ADDR
// end ; end ;
70853: GO 70856
70855: POP
// result := list ;
70856: LD_ADDR_VAR 0 4
70860: PUSH
70861: LD_VAR 0 5
70865: ST_TO_ADDR
// end ;
70866: LD_VAR 0 4
70870: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70871: LD_INT 0
70873: PPUSH
70874: PPUSH
70875: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70876: LD_VAR 0 1
70880: NOT
70881: PUSH
70882: LD_VAR 0 2
70886: PUSH
70887: LD_INT 1
70889: PUSH
70890: LD_INT 2
70892: PUSH
70893: LD_INT 3
70895: PUSH
70896: LD_INT 4
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: IN
70905: NOT
70906: OR
70907: IFFALSE 70911
// exit ;
70909: GO 71003
// tmp := [ ] ;
70911: LD_ADDR_VAR 0 5
70915: PUSH
70916: EMPTY
70917: ST_TO_ADDR
// for i in units do
70918: LD_ADDR_VAR 0 4
70922: PUSH
70923: LD_VAR 0 1
70927: PUSH
70928: FOR_IN
70929: IFFALSE 70972
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70931: LD_ADDR_VAR 0 5
70935: PUSH
70936: LD_VAR 0 5
70940: PPUSH
70941: LD_VAR 0 5
70945: PUSH
70946: LD_INT 1
70948: PLUS
70949: PPUSH
70950: LD_VAR 0 4
70954: PPUSH
70955: LD_VAR 0 2
70959: PPUSH
70960: CALL_OW 259
70964: PPUSH
70965: CALL_OW 2
70969: ST_TO_ADDR
70970: GO 70928
70972: POP
70973: POP
// if not tmp then
70974: LD_VAR 0 5
70978: NOT
70979: IFFALSE 70983
// exit ;
70981: GO 71003
// result := SortListByListDesc ( units , tmp ) ;
70983: LD_ADDR_VAR 0 3
70987: PUSH
70988: LD_VAR 0 1
70992: PPUSH
70993: LD_VAR 0 5
70997: PPUSH
70998: CALL_OW 77
71002: ST_TO_ADDR
// end ;
71003: LD_VAR 0 3
71007: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71008: LD_INT 0
71010: PPUSH
71011: PPUSH
71012: PPUSH
// result := false ;
71013: LD_ADDR_VAR 0 3
71017: PUSH
71018: LD_INT 0
71020: ST_TO_ADDR
// x := GetX ( building ) ;
71021: LD_ADDR_VAR 0 4
71025: PUSH
71026: LD_VAR 0 2
71030: PPUSH
71031: CALL_OW 250
71035: ST_TO_ADDR
// y := GetY ( building ) ;
71036: LD_ADDR_VAR 0 5
71040: PUSH
71041: LD_VAR 0 2
71045: PPUSH
71046: CALL_OW 251
71050: ST_TO_ADDR
// if not building or not x or not y then
71051: LD_VAR 0 2
71055: NOT
71056: PUSH
71057: LD_VAR 0 4
71061: NOT
71062: OR
71063: PUSH
71064: LD_VAR 0 5
71068: NOT
71069: OR
71070: IFFALSE 71074
// exit ;
71072: GO 71166
// if GetTaskList ( unit ) then
71074: LD_VAR 0 1
71078: PPUSH
71079: CALL_OW 437
71083: IFFALSE 71166
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71085: LD_STRING e
71087: PUSH
71088: LD_VAR 0 1
71092: PPUSH
71093: CALL_OW 437
71097: PUSH
71098: LD_INT 1
71100: ARRAY
71101: PUSH
71102: LD_INT 1
71104: ARRAY
71105: EQUAL
71106: PUSH
71107: LD_VAR 0 4
71111: PUSH
71112: LD_VAR 0 1
71116: PPUSH
71117: CALL_OW 437
71121: PUSH
71122: LD_INT 1
71124: ARRAY
71125: PUSH
71126: LD_INT 2
71128: ARRAY
71129: EQUAL
71130: AND
71131: PUSH
71132: LD_VAR 0 5
71136: PUSH
71137: LD_VAR 0 1
71141: PPUSH
71142: CALL_OW 437
71146: PUSH
71147: LD_INT 1
71149: ARRAY
71150: PUSH
71151: LD_INT 3
71153: ARRAY
71154: EQUAL
71155: AND
71156: IFFALSE 71166
// result := true end ;
71158: LD_ADDR_VAR 0 3
71162: PUSH
71163: LD_INT 1
71165: ST_TO_ADDR
// end ;
71166: LD_VAR 0 3
71170: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71171: LD_INT 0
71173: PPUSH
// result := false ;
71174: LD_ADDR_VAR 0 4
71178: PUSH
71179: LD_INT 0
71181: ST_TO_ADDR
// if GetTaskList ( unit ) then
71182: LD_VAR 0 1
71186: PPUSH
71187: CALL_OW 437
71191: IFFALSE 71274
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71193: LD_STRING M
71195: PUSH
71196: LD_VAR 0 1
71200: PPUSH
71201: CALL_OW 437
71205: PUSH
71206: LD_INT 1
71208: ARRAY
71209: PUSH
71210: LD_INT 1
71212: ARRAY
71213: EQUAL
71214: PUSH
71215: LD_VAR 0 2
71219: PUSH
71220: LD_VAR 0 1
71224: PPUSH
71225: CALL_OW 437
71229: PUSH
71230: LD_INT 1
71232: ARRAY
71233: PUSH
71234: LD_INT 2
71236: ARRAY
71237: EQUAL
71238: AND
71239: PUSH
71240: LD_VAR 0 3
71244: PUSH
71245: LD_VAR 0 1
71249: PPUSH
71250: CALL_OW 437
71254: PUSH
71255: LD_INT 1
71257: ARRAY
71258: PUSH
71259: LD_INT 3
71261: ARRAY
71262: EQUAL
71263: AND
71264: IFFALSE 71274
// result := true ;
71266: LD_ADDR_VAR 0 4
71270: PUSH
71271: LD_INT 1
71273: ST_TO_ADDR
// end ; end ;
71274: LD_VAR 0 4
71278: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71279: LD_INT 0
71281: PPUSH
71282: PPUSH
71283: PPUSH
71284: PPUSH
// if not unit or not area then
71285: LD_VAR 0 1
71289: NOT
71290: PUSH
71291: LD_VAR 0 2
71295: NOT
71296: OR
71297: IFFALSE 71301
// exit ;
71299: GO 71465
// tmp := AreaToList ( area , i ) ;
71301: LD_ADDR_VAR 0 6
71305: PUSH
71306: LD_VAR 0 2
71310: PPUSH
71311: LD_VAR 0 5
71315: PPUSH
71316: CALL_OW 517
71320: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71321: LD_ADDR_VAR 0 5
71325: PUSH
71326: DOUBLE
71327: LD_INT 1
71329: DEC
71330: ST_TO_ADDR
71331: LD_VAR 0 6
71335: PUSH
71336: LD_INT 1
71338: ARRAY
71339: PUSH
71340: FOR_TO
71341: IFFALSE 71463
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71343: LD_ADDR_VAR 0 7
71347: PUSH
71348: LD_VAR 0 6
71352: PUSH
71353: LD_INT 1
71355: ARRAY
71356: PUSH
71357: LD_VAR 0 5
71361: ARRAY
71362: PUSH
71363: LD_VAR 0 6
71367: PUSH
71368: LD_INT 2
71370: ARRAY
71371: PUSH
71372: LD_VAR 0 5
71376: ARRAY
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71382: LD_VAR 0 7
71386: PUSH
71387: LD_INT 1
71389: ARRAY
71390: PPUSH
71391: LD_VAR 0 7
71395: PUSH
71396: LD_INT 2
71398: ARRAY
71399: PPUSH
71400: CALL_OW 428
71404: PUSH
71405: LD_INT 0
71407: EQUAL
71408: IFFALSE 71461
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71410: LD_VAR 0 1
71414: PPUSH
71415: LD_VAR 0 7
71419: PUSH
71420: LD_INT 1
71422: ARRAY
71423: PPUSH
71424: LD_VAR 0 7
71428: PUSH
71429: LD_INT 2
71431: ARRAY
71432: PPUSH
71433: LD_VAR 0 3
71437: PPUSH
71438: CALL_OW 48
// result := IsPlaced ( unit ) ;
71442: LD_ADDR_VAR 0 4
71446: PUSH
71447: LD_VAR 0 1
71451: PPUSH
71452: CALL_OW 305
71456: ST_TO_ADDR
// exit ;
71457: POP
71458: POP
71459: GO 71465
// end ; end ;
71461: GO 71340
71463: POP
71464: POP
// end ;
71465: LD_VAR 0 4
71469: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71470: LD_INT 0
71472: PPUSH
71473: PPUSH
71474: PPUSH
// if not side or side > 8 then
71475: LD_VAR 0 1
71479: NOT
71480: PUSH
71481: LD_VAR 0 1
71485: PUSH
71486: LD_INT 8
71488: GREATER
71489: OR
71490: IFFALSE 71494
// exit ;
71492: GO 71681
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71494: LD_ADDR_VAR 0 4
71498: PUSH
71499: LD_INT 22
71501: PUSH
71502: LD_VAR 0 1
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 21
71513: PUSH
71514: LD_INT 3
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PPUSH
71525: CALL_OW 69
71529: ST_TO_ADDR
// if not tmp then
71530: LD_VAR 0 4
71534: NOT
71535: IFFALSE 71539
// exit ;
71537: GO 71681
// enable_addtolog := true ;
71539: LD_ADDR_OWVAR 81
71543: PUSH
71544: LD_INT 1
71546: ST_TO_ADDR
// AddToLog ( [ ) ;
71547: LD_STRING [
71549: PPUSH
71550: CALL_OW 561
// for i in tmp do
71554: LD_ADDR_VAR 0 3
71558: PUSH
71559: LD_VAR 0 4
71563: PUSH
71564: FOR_IN
71565: IFFALSE 71672
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71567: LD_STRING [
71569: PUSH
71570: LD_VAR 0 3
71574: PPUSH
71575: CALL_OW 266
71579: STR
71580: PUSH
71581: LD_STRING , 
71583: STR
71584: PUSH
71585: LD_VAR 0 3
71589: PPUSH
71590: CALL_OW 250
71594: STR
71595: PUSH
71596: LD_STRING , 
71598: STR
71599: PUSH
71600: LD_VAR 0 3
71604: PPUSH
71605: CALL_OW 251
71609: STR
71610: PUSH
71611: LD_STRING , 
71613: STR
71614: PUSH
71615: LD_VAR 0 3
71619: PPUSH
71620: CALL_OW 254
71624: STR
71625: PUSH
71626: LD_STRING , 
71628: STR
71629: PUSH
71630: LD_VAR 0 3
71634: PPUSH
71635: LD_INT 1
71637: PPUSH
71638: CALL_OW 268
71642: STR
71643: PUSH
71644: LD_STRING , 
71646: STR
71647: PUSH
71648: LD_VAR 0 3
71652: PPUSH
71653: LD_INT 2
71655: PPUSH
71656: CALL_OW 268
71660: STR
71661: PUSH
71662: LD_STRING ],
71664: STR
71665: PPUSH
71666: CALL_OW 561
// end ;
71670: GO 71564
71672: POP
71673: POP
// AddToLog ( ]; ) ;
71674: LD_STRING ];
71676: PPUSH
71677: CALL_OW 561
// end ;
71681: LD_VAR 0 2
71685: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71686: LD_INT 0
71688: PPUSH
71689: PPUSH
71690: PPUSH
71691: PPUSH
71692: PPUSH
// if not area or not rate or not max then
71693: LD_VAR 0 1
71697: NOT
71698: PUSH
71699: LD_VAR 0 2
71703: NOT
71704: OR
71705: PUSH
71706: LD_VAR 0 4
71710: NOT
71711: OR
71712: IFFALSE 71716
// exit ;
71714: GO 71908
// while 1 do
71716: LD_INT 1
71718: IFFALSE 71908
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71720: LD_ADDR_VAR 0 9
71724: PUSH
71725: LD_VAR 0 1
71729: PPUSH
71730: LD_INT 1
71732: PPUSH
71733: CALL_OW 287
71737: PUSH
71738: LD_INT 10
71740: MUL
71741: ST_TO_ADDR
// r := rate / 10 ;
71742: LD_ADDR_VAR 0 7
71746: PUSH
71747: LD_VAR 0 2
71751: PUSH
71752: LD_INT 10
71754: DIVREAL
71755: ST_TO_ADDR
// time := 1 1$00 ;
71756: LD_ADDR_VAR 0 8
71760: PUSH
71761: LD_INT 2100
71763: ST_TO_ADDR
// if amount < min then
71764: LD_VAR 0 9
71768: PUSH
71769: LD_VAR 0 3
71773: LESS
71774: IFFALSE 71792
// r := r * 2 else
71776: LD_ADDR_VAR 0 7
71780: PUSH
71781: LD_VAR 0 7
71785: PUSH
71786: LD_INT 2
71788: MUL
71789: ST_TO_ADDR
71790: GO 71818
// if amount > max then
71792: LD_VAR 0 9
71796: PUSH
71797: LD_VAR 0 4
71801: GREATER
71802: IFFALSE 71818
// r := r / 2 ;
71804: LD_ADDR_VAR 0 7
71808: PUSH
71809: LD_VAR 0 7
71813: PUSH
71814: LD_INT 2
71816: DIVREAL
71817: ST_TO_ADDR
// time := time / r ;
71818: LD_ADDR_VAR 0 8
71822: PUSH
71823: LD_VAR 0 8
71827: PUSH
71828: LD_VAR 0 7
71832: DIVREAL
71833: ST_TO_ADDR
// if time < 0 then
71834: LD_VAR 0 8
71838: PUSH
71839: LD_INT 0
71841: LESS
71842: IFFALSE 71859
// time := time * - 1 ;
71844: LD_ADDR_VAR 0 8
71848: PUSH
71849: LD_VAR 0 8
71853: PUSH
71854: LD_INT 1
71856: NEG
71857: MUL
71858: ST_TO_ADDR
// wait ( time ) ;
71859: LD_VAR 0 8
71863: PPUSH
71864: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71868: LD_INT 35
71870: PPUSH
71871: LD_INT 875
71873: PPUSH
71874: CALL_OW 12
71878: PPUSH
71879: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71883: LD_INT 1
71885: PPUSH
71886: LD_INT 5
71888: PPUSH
71889: CALL_OW 12
71893: PPUSH
71894: LD_VAR 0 1
71898: PPUSH
71899: LD_INT 1
71901: PPUSH
71902: CALL_OW 55
// end ;
71906: GO 71716
// end ;
71908: LD_VAR 0 5
71912: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71913: LD_INT 0
71915: PPUSH
71916: PPUSH
71917: PPUSH
71918: PPUSH
71919: PPUSH
71920: PPUSH
71921: PPUSH
71922: PPUSH
// if not turrets or not factories then
71923: LD_VAR 0 1
71927: NOT
71928: PUSH
71929: LD_VAR 0 2
71933: NOT
71934: OR
71935: IFFALSE 71939
// exit ;
71937: GO 72246
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71939: LD_ADDR_VAR 0 10
71943: PUSH
71944: LD_INT 5
71946: PUSH
71947: LD_INT 6
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 2
71956: PUSH
71957: LD_INT 4
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 3
71966: PUSH
71967: LD_INT 5
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 24
71981: PUSH
71982: LD_INT 25
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 23
71991: PUSH
71992: LD_INT 27
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 42
72005: PUSH
72006: LD_INT 43
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 44
72015: PUSH
72016: LD_INT 46
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 45
72025: PUSH
72026: LD_INT 47
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: LIST
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: LIST
72042: ST_TO_ADDR
// result := [ ] ;
72043: LD_ADDR_VAR 0 3
72047: PUSH
72048: EMPTY
72049: ST_TO_ADDR
// for i in turrets do
72050: LD_ADDR_VAR 0 4
72054: PUSH
72055: LD_VAR 0 1
72059: PUSH
72060: FOR_IN
72061: IFFALSE 72244
// begin nat := GetNation ( i ) ;
72063: LD_ADDR_VAR 0 7
72067: PUSH
72068: LD_VAR 0 4
72072: PPUSH
72073: CALL_OW 248
72077: ST_TO_ADDR
// weapon := 0 ;
72078: LD_ADDR_VAR 0 8
72082: PUSH
72083: LD_INT 0
72085: ST_TO_ADDR
// if not nat then
72086: LD_VAR 0 7
72090: NOT
72091: IFFALSE 72095
// continue ;
72093: GO 72060
// for j in list [ nat ] do
72095: LD_ADDR_VAR 0 5
72099: PUSH
72100: LD_VAR 0 10
72104: PUSH
72105: LD_VAR 0 7
72109: ARRAY
72110: PUSH
72111: FOR_IN
72112: IFFALSE 72153
// if GetBWeapon ( i ) = j [ 1 ] then
72114: LD_VAR 0 4
72118: PPUSH
72119: CALL_OW 269
72123: PUSH
72124: LD_VAR 0 5
72128: PUSH
72129: LD_INT 1
72131: ARRAY
72132: EQUAL
72133: IFFALSE 72151
// begin weapon := j [ 2 ] ;
72135: LD_ADDR_VAR 0 8
72139: PUSH
72140: LD_VAR 0 5
72144: PUSH
72145: LD_INT 2
72147: ARRAY
72148: ST_TO_ADDR
// break ;
72149: GO 72153
// end ;
72151: GO 72111
72153: POP
72154: POP
// if not weapon then
72155: LD_VAR 0 8
72159: NOT
72160: IFFALSE 72164
// continue ;
72162: GO 72060
// for k in factories do
72164: LD_ADDR_VAR 0 6
72168: PUSH
72169: LD_VAR 0 2
72173: PUSH
72174: FOR_IN
72175: IFFALSE 72240
// begin weapons := AvailableWeaponList ( k ) ;
72177: LD_ADDR_VAR 0 9
72181: PUSH
72182: LD_VAR 0 6
72186: PPUSH
72187: CALL_OW 478
72191: ST_TO_ADDR
// if not weapons then
72192: LD_VAR 0 9
72196: NOT
72197: IFFALSE 72201
// continue ;
72199: GO 72174
// if weapon in weapons then
72201: LD_VAR 0 8
72205: PUSH
72206: LD_VAR 0 9
72210: IN
72211: IFFALSE 72238
// begin result := [ i , weapon ] ;
72213: LD_ADDR_VAR 0 3
72217: PUSH
72218: LD_VAR 0 4
72222: PUSH
72223: LD_VAR 0 8
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: ST_TO_ADDR
// exit ;
72232: POP
72233: POP
72234: POP
72235: POP
72236: GO 72246
// end ; end ;
72238: GO 72174
72240: POP
72241: POP
// end ;
72242: GO 72060
72244: POP
72245: POP
// end ;
72246: LD_VAR 0 3
72250: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72251: LD_INT 0
72253: PPUSH
// if not side or side > 8 then
72254: LD_VAR 0 3
72258: NOT
72259: PUSH
72260: LD_VAR 0 3
72264: PUSH
72265: LD_INT 8
72267: GREATER
72268: OR
72269: IFFALSE 72273
// exit ;
72271: GO 72332
// if not range then
72273: LD_VAR 0 4
72277: NOT
72278: IFFALSE 72289
// range := - 12 ;
72280: LD_ADDR_VAR 0 4
72284: PUSH
72285: LD_INT 12
72287: NEG
72288: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72289: LD_VAR 0 1
72293: PPUSH
72294: LD_VAR 0 2
72298: PPUSH
72299: LD_VAR 0 3
72303: PPUSH
72304: LD_VAR 0 4
72308: PPUSH
72309: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72313: LD_VAR 0 1
72317: PPUSH
72318: LD_VAR 0 2
72322: PPUSH
72323: LD_VAR 0 3
72327: PPUSH
72328: CALL_OW 331
// end ;
72332: LD_VAR 0 5
72336: RET
// export function Video ( mode ) ; begin
72337: LD_INT 0
72339: PPUSH
// ingame_video = mode ;
72340: LD_ADDR_OWVAR 52
72344: PUSH
72345: LD_VAR 0 1
72349: ST_TO_ADDR
// interface_hidden = mode ;
72350: LD_ADDR_OWVAR 54
72354: PUSH
72355: LD_VAR 0 1
72359: ST_TO_ADDR
// end ;
72360: LD_VAR 0 2
72364: RET
// export function Join ( array , element ) ; begin
72365: LD_INT 0
72367: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72368: LD_ADDR_VAR 0 3
72372: PUSH
72373: LD_VAR 0 1
72377: PPUSH
72378: LD_VAR 0 1
72382: PUSH
72383: LD_INT 1
72385: PLUS
72386: PPUSH
72387: LD_VAR 0 2
72391: PPUSH
72392: CALL_OW 1
72396: ST_TO_ADDR
// end ;
72397: LD_VAR 0 3
72401: RET
// export function JoinUnion ( array , element ) ; begin
72402: LD_INT 0
72404: PPUSH
// result := array union element ;
72405: LD_ADDR_VAR 0 3
72409: PUSH
72410: LD_VAR 0 1
72414: PUSH
72415: LD_VAR 0 2
72419: UNION
72420: ST_TO_ADDR
// end ;
72421: LD_VAR 0 3
72425: RET
// export function GetBehemoths ( side ) ; begin
72426: LD_INT 0
72428: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72429: LD_ADDR_VAR 0 2
72433: PUSH
72434: LD_INT 22
72436: PUSH
72437: LD_VAR 0 1
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 31
72448: PUSH
72449: LD_INT 25
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PPUSH
72460: CALL_OW 69
72464: ST_TO_ADDR
// end ;
72465: LD_VAR 0 2
72469: RET
// export function Shuffle ( array ) ; var i , index ; begin
72470: LD_INT 0
72472: PPUSH
72473: PPUSH
72474: PPUSH
// result := [ ] ;
72475: LD_ADDR_VAR 0 2
72479: PUSH
72480: EMPTY
72481: ST_TO_ADDR
// if not array then
72482: LD_VAR 0 1
72486: NOT
72487: IFFALSE 72491
// exit ;
72489: GO 72590
// Randomize ;
72491: CALL_OW 10
// for i = array downto 1 do
72495: LD_ADDR_VAR 0 3
72499: PUSH
72500: DOUBLE
72501: LD_VAR 0 1
72505: INC
72506: ST_TO_ADDR
72507: LD_INT 1
72509: PUSH
72510: FOR_DOWNTO
72511: IFFALSE 72588
// begin index := rand ( 1 , array ) ;
72513: LD_ADDR_VAR 0 4
72517: PUSH
72518: LD_INT 1
72520: PPUSH
72521: LD_VAR 0 1
72525: PPUSH
72526: CALL_OW 12
72530: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72531: LD_ADDR_VAR 0 2
72535: PUSH
72536: LD_VAR 0 2
72540: PPUSH
72541: LD_VAR 0 2
72545: PUSH
72546: LD_INT 1
72548: PLUS
72549: PPUSH
72550: LD_VAR 0 1
72554: PUSH
72555: LD_VAR 0 4
72559: ARRAY
72560: PPUSH
72561: CALL_OW 2
72565: ST_TO_ADDR
// array := Delete ( array , index ) ;
72566: LD_ADDR_VAR 0 1
72570: PUSH
72571: LD_VAR 0 1
72575: PPUSH
72576: LD_VAR 0 4
72580: PPUSH
72581: CALL_OW 3
72585: ST_TO_ADDR
// end ;
72586: GO 72510
72588: POP
72589: POP
// end ;
72590: LD_VAR 0 2
72594: RET
// export function GetBaseMaterials ( base ) ; begin
72595: LD_INT 0
72597: PPUSH
// result := [ 0 , 0 , 0 ] ;
72598: LD_ADDR_VAR 0 2
72602: PUSH
72603: LD_INT 0
72605: PUSH
72606: LD_INT 0
72608: PUSH
72609: LD_INT 0
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: LIST
72616: ST_TO_ADDR
// if not base then
72617: LD_VAR 0 1
72621: NOT
72622: IFFALSE 72626
// exit ;
72624: GO 72675
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72626: LD_ADDR_VAR 0 2
72630: PUSH
72631: LD_VAR 0 1
72635: PPUSH
72636: LD_INT 1
72638: PPUSH
72639: CALL_OW 275
72643: PUSH
72644: LD_VAR 0 1
72648: PPUSH
72649: LD_INT 2
72651: PPUSH
72652: CALL_OW 275
72656: PUSH
72657: LD_VAR 0 1
72661: PPUSH
72662: LD_INT 3
72664: PPUSH
72665: CALL_OW 275
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: LIST
72674: ST_TO_ADDR
// end ;
72675: LD_VAR 0 2
72679: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72680: LD_INT 0
72682: PPUSH
72683: PPUSH
// result := array ;
72684: LD_ADDR_VAR 0 3
72688: PUSH
72689: LD_VAR 0 1
72693: ST_TO_ADDR
// if size > 0 then
72694: LD_VAR 0 2
72698: PUSH
72699: LD_INT 0
72701: GREATER
72702: IFFALSE 72748
// for i := array downto size do
72704: LD_ADDR_VAR 0 4
72708: PUSH
72709: DOUBLE
72710: LD_VAR 0 1
72714: INC
72715: ST_TO_ADDR
72716: LD_VAR 0 2
72720: PUSH
72721: FOR_DOWNTO
72722: IFFALSE 72746
// result := Delete ( result , result ) ;
72724: LD_ADDR_VAR 0 3
72728: PUSH
72729: LD_VAR 0 3
72733: PPUSH
72734: LD_VAR 0 3
72738: PPUSH
72739: CALL_OW 3
72743: ST_TO_ADDR
72744: GO 72721
72746: POP
72747: POP
// end ;
72748: LD_VAR 0 3
72752: RET
// export function ComExit ( unit ) ; var tmp ; begin
72753: LD_INT 0
72755: PPUSH
72756: PPUSH
// if not IsInUnit ( unit ) then
72757: LD_VAR 0 1
72761: PPUSH
72762: CALL_OW 310
72766: NOT
72767: IFFALSE 72771
// exit ;
72769: GO 72831
// tmp := IsInUnit ( unit ) ;
72771: LD_ADDR_VAR 0 3
72775: PUSH
72776: LD_VAR 0 1
72780: PPUSH
72781: CALL_OW 310
72785: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72786: LD_VAR 0 3
72790: PPUSH
72791: CALL_OW 247
72795: PUSH
72796: LD_INT 2
72798: EQUAL
72799: IFFALSE 72812
// ComExitVehicle ( unit ) else
72801: LD_VAR 0 1
72805: PPUSH
72806: CALL_OW 121
72810: GO 72821
// ComExitBuilding ( unit ) ;
72812: LD_VAR 0 1
72816: PPUSH
72817: CALL_OW 122
// result := tmp ;
72821: LD_ADDR_VAR 0 2
72825: PUSH
72826: LD_VAR 0 3
72830: ST_TO_ADDR
// end ;
72831: LD_VAR 0 2
72835: RET
// export function ComExitAll ( units ) ; var i ; begin
72836: LD_INT 0
72838: PPUSH
72839: PPUSH
// if not units then
72840: LD_VAR 0 1
72844: NOT
72845: IFFALSE 72849
// exit ;
72847: GO 72875
// for i in units do
72849: LD_ADDR_VAR 0 3
72853: PUSH
72854: LD_VAR 0 1
72858: PUSH
72859: FOR_IN
72860: IFFALSE 72873
// ComExit ( i ) ;
72862: LD_VAR 0 3
72866: PPUSH
72867: CALL 72753 0 1
72871: GO 72859
72873: POP
72874: POP
// end ;
72875: LD_VAR 0 2
72879: RET
// export function ResetHc ; begin
72880: LD_INT 0
72882: PPUSH
// InitHc ;
72883: CALL_OW 19
// hc_importance := 0 ;
72887: LD_ADDR_OWVAR 32
72891: PUSH
72892: LD_INT 0
72894: ST_TO_ADDR
// end ;
72895: LD_VAR 0 1
72899: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72900: LD_INT 0
72902: PPUSH
72903: PPUSH
72904: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72905: LD_ADDR_VAR 0 6
72909: PUSH
72910: LD_VAR 0 1
72914: PUSH
72915: LD_VAR 0 3
72919: PLUS
72920: PUSH
72921: LD_INT 2
72923: DIV
72924: ST_TO_ADDR
// if _x < 0 then
72925: LD_VAR 0 6
72929: PUSH
72930: LD_INT 0
72932: LESS
72933: IFFALSE 72950
// _x := _x * - 1 ;
72935: LD_ADDR_VAR 0 6
72939: PUSH
72940: LD_VAR 0 6
72944: PUSH
72945: LD_INT 1
72947: NEG
72948: MUL
72949: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72950: LD_ADDR_VAR 0 7
72954: PUSH
72955: LD_VAR 0 2
72959: PUSH
72960: LD_VAR 0 4
72964: PLUS
72965: PUSH
72966: LD_INT 2
72968: DIV
72969: ST_TO_ADDR
// if _y < 0 then
72970: LD_VAR 0 7
72974: PUSH
72975: LD_INT 0
72977: LESS
72978: IFFALSE 72995
// _y := _y * - 1 ;
72980: LD_ADDR_VAR 0 7
72984: PUSH
72985: LD_VAR 0 7
72989: PUSH
72990: LD_INT 1
72992: NEG
72993: MUL
72994: ST_TO_ADDR
// result := [ _x , _y ] ;
72995: LD_ADDR_VAR 0 5
72999: PUSH
73000: LD_VAR 0 6
73004: PUSH
73005: LD_VAR 0 7
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: ST_TO_ADDR
// end ;
73014: LD_VAR 0 5
73018: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73019: LD_INT 0
73021: PPUSH
73022: PPUSH
73023: PPUSH
73024: PPUSH
// task := GetTaskList ( unit ) ;
73025: LD_ADDR_VAR 0 7
73029: PUSH
73030: LD_VAR 0 1
73034: PPUSH
73035: CALL_OW 437
73039: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73040: LD_VAR 0 7
73044: NOT
73045: PUSH
73046: LD_VAR 0 1
73050: PPUSH
73051: LD_VAR 0 2
73055: PPUSH
73056: CALL_OW 308
73060: NOT
73061: AND
73062: IFFALSE 73066
// exit ;
73064: GO 73184
// if IsInArea ( unit , area ) then
73066: LD_VAR 0 1
73070: PPUSH
73071: LD_VAR 0 2
73075: PPUSH
73076: CALL_OW 308
73080: IFFALSE 73098
// begin ComMoveToArea ( unit , goAway ) ;
73082: LD_VAR 0 1
73086: PPUSH
73087: LD_VAR 0 3
73091: PPUSH
73092: CALL_OW 113
// exit ;
73096: GO 73184
// end ; if task [ 1 ] [ 1 ] <> M then
73098: LD_VAR 0 7
73102: PUSH
73103: LD_INT 1
73105: ARRAY
73106: PUSH
73107: LD_INT 1
73109: ARRAY
73110: PUSH
73111: LD_STRING M
73113: NONEQUAL
73114: IFFALSE 73118
// exit ;
73116: GO 73184
// x := task [ 1 ] [ 2 ] ;
73118: LD_ADDR_VAR 0 5
73122: PUSH
73123: LD_VAR 0 7
73127: PUSH
73128: LD_INT 1
73130: ARRAY
73131: PUSH
73132: LD_INT 2
73134: ARRAY
73135: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73136: LD_ADDR_VAR 0 6
73140: PUSH
73141: LD_VAR 0 7
73145: PUSH
73146: LD_INT 1
73148: ARRAY
73149: PUSH
73150: LD_INT 3
73152: ARRAY
73153: ST_TO_ADDR
// if InArea ( x , y , area ) then
73154: LD_VAR 0 5
73158: PPUSH
73159: LD_VAR 0 6
73163: PPUSH
73164: LD_VAR 0 2
73168: PPUSH
73169: CALL_OW 309
73173: IFFALSE 73184
// ComStop ( unit ) ;
73175: LD_VAR 0 1
73179: PPUSH
73180: CALL_OW 141
// end ;
73184: LD_VAR 0 4
73188: RET
// export function Abs ( value ) ; begin
73189: LD_INT 0
73191: PPUSH
// result := value ;
73192: LD_ADDR_VAR 0 2
73196: PUSH
73197: LD_VAR 0 1
73201: ST_TO_ADDR
// if value < 0 then
73202: LD_VAR 0 1
73206: PUSH
73207: LD_INT 0
73209: LESS
73210: IFFALSE 73227
// result := value * - 1 ;
73212: LD_ADDR_VAR 0 2
73216: PUSH
73217: LD_VAR 0 1
73221: PUSH
73222: LD_INT 1
73224: NEG
73225: MUL
73226: ST_TO_ADDR
// end ;
73227: LD_VAR 0 2
73231: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73232: LD_INT 0
73234: PPUSH
73235: PPUSH
73236: PPUSH
73237: PPUSH
73238: PPUSH
73239: PPUSH
73240: PPUSH
73241: PPUSH
// if not unit or not building then
73242: LD_VAR 0 1
73246: NOT
73247: PUSH
73248: LD_VAR 0 2
73252: NOT
73253: OR
73254: IFFALSE 73258
// exit ;
73256: GO 73484
// x := GetX ( building ) ;
73258: LD_ADDR_VAR 0 4
73262: PUSH
73263: LD_VAR 0 2
73267: PPUSH
73268: CALL_OW 250
73272: ST_TO_ADDR
// y := GetY ( building ) ;
73273: LD_ADDR_VAR 0 6
73277: PUSH
73278: LD_VAR 0 2
73282: PPUSH
73283: CALL_OW 251
73287: ST_TO_ADDR
// d := GetDir ( building ) ;
73288: LD_ADDR_VAR 0 8
73292: PUSH
73293: LD_VAR 0 2
73297: PPUSH
73298: CALL_OW 254
73302: ST_TO_ADDR
// r := 4 ;
73303: LD_ADDR_VAR 0 9
73307: PUSH
73308: LD_INT 4
73310: ST_TO_ADDR
// for i := 1 to 5 do
73311: LD_ADDR_VAR 0 10
73315: PUSH
73316: DOUBLE
73317: LD_INT 1
73319: DEC
73320: ST_TO_ADDR
73321: LD_INT 5
73323: PUSH
73324: FOR_TO
73325: IFFALSE 73482
// begin _x := ShiftX ( x , d , r + i ) ;
73327: LD_ADDR_VAR 0 5
73331: PUSH
73332: LD_VAR 0 4
73336: PPUSH
73337: LD_VAR 0 8
73341: PPUSH
73342: LD_VAR 0 9
73346: PUSH
73347: LD_VAR 0 10
73351: PLUS
73352: PPUSH
73353: CALL_OW 272
73357: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73358: LD_ADDR_VAR 0 7
73362: PUSH
73363: LD_VAR 0 6
73367: PPUSH
73368: LD_VAR 0 8
73372: PPUSH
73373: LD_VAR 0 9
73377: PUSH
73378: LD_VAR 0 10
73382: PLUS
73383: PPUSH
73384: CALL_OW 273
73388: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73389: LD_VAR 0 5
73393: PPUSH
73394: LD_VAR 0 7
73398: PPUSH
73399: CALL_OW 488
73403: PUSH
73404: LD_VAR 0 5
73408: PPUSH
73409: LD_VAR 0 7
73413: PPUSH
73414: CALL_OW 428
73418: PPUSH
73419: CALL_OW 247
73423: PUSH
73424: LD_INT 3
73426: PUSH
73427: LD_INT 2
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: IN
73434: NOT
73435: AND
73436: IFFALSE 73480
// begin ComMoveXY ( unit , _x , _y ) ;
73438: LD_VAR 0 1
73442: PPUSH
73443: LD_VAR 0 5
73447: PPUSH
73448: LD_VAR 0 7
73452: PPUSH
73453: CALL_OW 111
// result := [ _x , _y ] ;
73457: LD_ADDR_VAR 0 3
73461: PUSH
73462: LD_VAR 0 5
73466: PUSH
73467: LD_VAR 0 7
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: ST_TO_ADDR
// exit ;
73476: POP
73477: POP
73478: GO 73484
// end ; end ;
73480: GO 73324
73482: POP
73483: POP
// end ;
73484: LD_VAR 0 3
73488: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73489: LD_INT 0
73491: PPUSH
73492: PPUSH
73493: PPUSH
// result := 0 ;
73494: LD_ADDR_VAR 0 3
73498: PUSH
73499: LD_INT 0
73501: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73502: LD_VAR 0 1
73506: PUSH
73507: LD_INT 0
73509: LESS
73510: PUSH
73511: LD_VAR 0 1
73515: PUSH
73516: LD_INT 8
73518: GREATER
73519: OR
73520: PUSH
73521: LD_VAR 0 2
73525: PUSH
73526: LD_INT 0
73528: LESS
73529: OR
73530: PUSH
73531: LD_VAR 0 2
73535: PUSH
73536: LD_INT 8
73538: GREATER
73539: OR
73540: IFFALSE 73544
// exit ;
73542: GO 73619
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73544: LD_ADDR_VAR 0 4
73548: PUSH
73549: LD_INT 22
73551: PUSH
73552: LD_VAR 0 2
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: PPUSH
73561: CALL_OW 69
73565: PUSH
73566: FOR_IN
73567: IFFALSE 73617
// begin un := UnitShoot ( i ) ;
73569: LD_ADDR_VAR 0 5
73573: PUSH
73574: LD_VAR 0 4
73578: PPUSH
73579: CALL_OW 504
73583: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73584: LD_VAR 0 5
73588: PPUSH
73589: CALL_OW 255
73593: PUSH
73594: LD_VAR 0 1
73598: EQUAL
73599: IFFALSE 73615
// begin result := un ;
73601: LD_ADDR_VAR 0 3
73605: PUSH
73606: LD_VAR 0 5
73610: ST_TO_ADDR
// exit ;
73611: POP
73612: POP
73613: GO 73619
// end ; end ;
73615: GO 73566
73617: POP
73618: POP
// end ;
73619: LD_VAR 0 3
73623: RET
// export function GetCargoBay ( units ) ; begin
73624: LD_INT 0
73626: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73627: LD_ADDR_VAR 0 2
73631: PUSH
73632: LD_VAR 0 1
73636: PPUSH
73637: LD_INT 2
73639: PUSH
73640: LD_INT 34
73642: PUSH
73643: LD_INT 12
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 34
73652: PUSH
73653: LD_INT 51
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_INT 34
73662: PUSH
73663: LD_INT 32
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: LD_INT 34
73672: PUSH
73673: LD_EXP 44
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: PPUSH
73689: CALL_OW 72
73693: ST_TO_ADDR
// end ; end_of_file
73694: LD_VAR 0 2
73698: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73699: LD_VAR 0 1
73703: PUSH
73704: LD_INT 200
73706: DOUBLE
73707: GREATEREQUAL
73708: IFFALSE 73716
73710: LD_INT 299
73712: DOUBLE
73713: LESSEQUAL
73714: IFTRUE 73718
73716: GO 73750
73718: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73719: LD_VAR 0 1
73723: PPUSH
73724: LD_VAR 0 2
73728: PPUSH
73729: LD_VAR 0 3
73733: PPUSH
73734: LD_VAR 0 4
73738: PPUSH
73739: LD_VAR 0 5
73743: PPUSH
73744: CALL 32160 0 5
73748: GO 73827
73750: LD_INT 300
73752: DOUBLE
73753: GREATEREQUAL
73754: IFFALSE 73762
73756: LD_INT 399
73758: DOUBLE
73759: LESSEQUAL
73760: IFTRUE 73764
73762: GO 73826
73764: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73765: LD_VAR 0 1
73769: PPUSH
73770: LD_VAR 0 2
73774: PPUSH
73775: LD_VAR 0 3
73779: PPUSH
73780: LD_VAR 0 4
73784: PPUSH
73785: LD_VAR 0 5
73789: PPUSH
73790: LD_VAR 0 6
73794: PPUSH
73795: LD_VAR 0 7
73799: PPUSH
73800: LD_VAR 0 8
73804: PPUSH
73805: LD_VAR 0 9
73809: PPUSH
73810: LD_VAR 0 10
73814: PPUSH
73815: LD_VAR 0 11
73819: PPUSH
73820: CALL 30048 0 11
73824: GO 73827
73826: POP
// end ;
73827: PPOPN 11
73829: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73830: LD_VAR 0 1
73834: PPUSH
73835: LD_VAR 0 2
73839: PPUSH
73840: LD_VAR 0 3
73844: PPUSH
73845: LD_VAR 0 4
73849: PPUSH
73850: LD_VAR 0 5
73854: PPUSH
73855: CALL 32142 0 5
// end ; end_of_file
73859: PPOPN 5
73861: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73862: LD_VAR 0 1
73866: PPUSH
73867: LD_VAR 0 2
73871: PPUSH
73872: LD_VAR 0 3
73876: PPUSH
73877: LD_VAR 0 4
73881: PPUSH
73882: LD_VAR 0 5
73886: PPUSH
73887: LD_VAR 0 6
73891: PPUSH
73892: CALL 18856 0 6
// end ;
73896: PPOPN 6
73898: END
